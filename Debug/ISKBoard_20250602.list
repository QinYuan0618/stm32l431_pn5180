
ISKBoard_20250602.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ebc0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000198c  0801ed50  0801ed50  0001fd50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080206dc  080206dc  000221e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080206dc  080206dc  000216dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080206e4  080206e4  000221e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080206e4  080206e4  000216e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080206e8  080206e8  000216e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  080206ec  00022000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001724  200001e8  080208d4  000221e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000190c  080208d4  0002290c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000221e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00048907  00000000  00000000  00022218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000946e  00000000  00000000  0006ab1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003020  00000000  00000000  00073f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002530  00000000  00000000  00076fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00036ef9  00000000  00000000  000794e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00058779  00000000  00000000  000b03d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011870a  00000000  00000000  00108b52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0022125c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d6fc  00000000  00000000  002212a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0022e99c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801ed38 	.word	0x0801ed38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0801ed38 	.word	0x0801ed38

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	@ 0x28
 8000f78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7a:	f107 0314 	add.w	r3, r7, #20
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	60da      	str	r2, [r3, #12]
 8000f88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f8a:	4b35      	ldr	r3, [pc, #212]	@ (8001060 <MX_GPIO_Init+0xec>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8e:	4a34      	ldr	r2, [pc, #208]	@ (8001060 <MX_GPIO_Init+0xec>)
 8000f90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f96:	4b32      	ldr	r3, [pc, #200]	@ (8001060 <MX_GPIO_Init+0xec>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa2:	4b2f      	ldr	r3, [pc, #188]	@ (8001060 <MX_GPIO_Init+0xec>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa6:	4a2e      	ldr	r2, [pc, #184]	@ (8001060 <MX_GPIO_Init+0xec>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fae:	4b2c      	ldr	r3, [pc, #176]	@ (8001060 <MX_GPIO_Init+0xec>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fba:	4b29      	ldr	r3, [pc, #164]	@ (8001060 <MX_GPIO_Init+0xec>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fbe:	4a28      	ldr	r2, [pc, #160]	@ (8001060 <MX_GPIO_Init+0xec>)
 8000fc0:	f043 0304 	orr.w	r3, r3, #4
 8000fc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fc6:	4b26      	ldr	r3, [pc, #152]	@ (8001060 <MX_GPIO_Init+0xec>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fca:	f003 0304 	and.w	r3, r3, #4
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd2:	4b23      	ldr	r3, [pc, #140]	@ (8001060 <MX_GPIO_Init+0xec>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd6:	4a22      	ldr	r2, [pc, #136]	@ (8001060 <MX_GPIO_Init+0xec>)
 8000fd8:	f043 0302 	orr.w	r3, r3, #2
 8000fdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fde:	4b20      	ldr	r3, [pc, #128]	@ (8001060 <MX_GPIO_Init+0xec>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PN5180_NSS_GPIO_Port, PN5180_NSS_Pin, GPIO_PIN_SET);
 8000fea:	2201      	movs	r2, #1
 8000fec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ff0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ff4:	f016 fd3c 	bl	8017a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PN5180_RST_GPIO_Port, PN5180_RST_Pin, GPIO_PIN_RESET);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2120      	movs	r1, #32
 8000ffc:	4819      	ldr	r0, [pc, #100]	@ (8001064 <MX_GPIO_Init+0xf0>)
 8000ffe:	f016 fd37 	bl	8017a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PN5180_BUSY_Pin */
  GPIO_InitStruct.Pin = PN5180_BUSY_Pin;
 8001002:	2302      	movs	r3, #2
 8001004:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001006:	2300      	movs	r3, #0
 8001008:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PN5180_BUSY_GPIO_Port, &GPIO_InitStruct);
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4619      	mov	r1, r3
 8001014:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001018:	f016 fb98 	bl	801774c <HAL_GPIO_Init>

  /*Configure GPIO pin : PN5180_NSS_Pin */
  GPIO_InitStruct.Pin = PN5180_NSS_Pin;
 800101c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001020:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001022:	2301      	movs	r3, #1
 8001024:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800102a:	2302      	movs	r3, #2
 800102c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PN5180_NSS_GPIO_Port, &GPIO_InitStruct);
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4619      	mov	r1, r3
 8001034:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001038:	f016 fb88 	bl	801774c <HAL_GPIO_Init>

  /*Configure GPIO pin : PN5180_RST_Pin */
  GPIO_InitStruct.Pin = PN5180_RST_Pin;
 800103c:	2320      	movs	r3, #32
 800103e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001040:	2301      	movs	r3, #1
 8001042:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001048:	2300      	movs	r3, #0
 800104a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PN5180_RST_GPIO_Port, &GPIO_InitStruct);
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	4619      	mov	r1, r3
 8001052:	4804      	ldr	r0, [pc, #16]	@ (8001064 <MX_GPIO_Init+0xf0>)
 8001054:	f016 fb7a 	bl	801774c <HAL_GPIO_Init>

}
 8001058:	bf00      	nop
 800105a:	3728      	adds	r7, #40	@ 0x28
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40021000 	.word	0x40021000
 8001064:	48000400 	.word	0x48000400

08001068 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800106c:	f016 f946 	bl	80172fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001070:	f000 f81a 	bl	80010a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001074:	f7ff ff7e 	bl	8000f74 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001078:	f001 f95a 	bl	8002330 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 800107c:	f001 f83a 	bl	80020f4 <MX_TIM6_Init>
  MX_TIM1_Init();
 8001080:	f000 ff5c 	bl	8001f3c <MX_TIM1_Init>
  MX_SPI3_Init();
 8001084:	f000 fd98 	bl	8001bb8 <MX_SPI3_Init>
  MX_TIM2_Init();
 8001088:	f000 ffe6 	bl	8002058 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  printf("Start Iskboard NFC Program v1.0\r\n");
 800108c:	4805      	ldr	r0, [pc, #20]	@ (80010a4 <main+0x3c>)
 800108e:	f01b ff47 	bl	801cf20 <puts>

  beep_start(1, 300); 	/* 蜂鸣器响1声 */
 8001092:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001096:	2001      	movs	r0, #1
 8001098:	f001 f91a 	bl	80022d0 <beep_start>

  iso15693_test();
 800109c:	f000 f85a 	bl	8001154 <iso15693_test>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <main+0x38>
 80010a4:	0801ed50 	.word	0x0801ed50

080010a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b096      	sub	sp, #88	@ 0x58
 80010ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	2244      	movs	r2, #68	@ 0x44
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f01c f822 	bl	801d100 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010bc:	463b      	mov	r3, r7
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
 80010c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010ca:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80010ce:	f016 fcf5 	bl	8017abc <HAL_PWREx_ControlVoltageScaling>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010d8:	f000 f835 	bl	8001146 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010dc:	2301      	movs	r3, #1
 80010de:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e6:	2302      	movs	r3, #2
 80010e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ea:	2303      	movs	r3, #3
 80010ec:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010ee:	2301      	movs	r3, #1
 80010f0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80010f2:	2314      	movs	r3, #20
 80010f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010f6:	2307      	movs	r3, #7
 80010f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010fa:	2302      	movs	r3, #2
 80010fc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010fe:	2302      	movs	r3, #2
 8001100:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4618      	mov	r0, r3
 8001108:	f016 fd2e 	bl	8017b68 <HAL_RCC_OscConfig>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001112:	f000 f818 	bl	8001146 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001116:	230f      	movs	r3, #15
 8001118:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800111a:	2303      	movs	r3, #3
 800111c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800111e:	2300      	movs	r3, #0
 8001120:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800112a:	463b      	mov	r3, r7
 800112c:	2104      	movs	r1, #4
 800112e:	4618      	mov	r0, r3
 8001130:	f017 f92e 	bl	8018390 <HAL_RCC_ClockConfig>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800113a:	f000 f804 	bl	8001146 <Error_Handler>
  }
}
 800113e:	bf00      	nop
 8001140:	3758      	adds	r7, #88	@ 0x58
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800114a:	b672      	cpsid	i
}
 800114c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800114e:	bf00      	nop
 8001150:	e7fd      	b.n	800114e <Error_Handler+0x8>
	...

08001154 <iso15693_test>:
**   Code
*******************************************************************************/

// 入口函数
int iso15693_test(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
    do
    {
        phStatus_t status = PH_ERR_INTERNAL_ERROR;
 800115a:	237f      	movs	r3, #127	@ 0x7f
 800115c:	82fb      	strh	r3, [r7, #22]
        phNfcLib_Status_t     dwStatus;
        phNfcLib_AppContext_t AppContext = {0};
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]

        /* Perform OSAL Initialization. */
//        (void)phOsal_Init();   // -> temp remove this to avoid conflict with sysTick

        /* Print Example application name */
        printf("\n *** ISO 15693 Example *** \n");
 8001168:	486c      	ldr	r0, [pc, #432]	@ (800131c <iso15693_test+0x1c8>)
 800116a:	f01b fed9 	bl	801cf20 <puts>

        /* Hardware abstraction layer initialization 硬件抽象层初始化 */
        status = phbalReg_Init(&sBalParams, sizeof(phbalReg_Type_t));	// set id and bus kind
 800116e:	2104      	movs	r1, #4
 8001170:	486b      	ldr	r0, [pc, #428]	@ (8001320 <iso15693_test+0x1cc>)
 8001172:	f015 fdff 	bl	8016d74 <phbalReg_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 800117a:	8afb      	ldrh	r3, [r7, #22]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d00c      	beq.n	800119a <iso15693_test+0x46>
 8001180:	8afb      	ldrh	r3, [r7, #22]
 8001182:	461a      	mov	r2, r3
 8001184:	2182      	movs	r1, #130	@ 0x82
 8001186:	4867      	ldr	r0, [pc, #412]	@ (8001324 <iso15693_test+0x1d0>)
 8001188:	f01b fe5a 	bl	801ce40 <iprintf>
 800118c:	4b66      	ldr	r3, [pc, #408]	@ (8001328 <iso15693_test+0x1d4>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	4618      	mov	r0, r3
 8001194:	f01b fd7e 	bl	801cc94 <fflush>
 8001198:	e00b      	b.n	80011b2 <iso15693_test+0x5e>
 800119a:	8afb      	ldrh	r3, [r7, #22]
 800119c:	461a      	mov	r2, r3
 800119e:	2182      	movs	r1, #130	@ 0x82
 80011a0:	4862      	ldr	r0, [pc, #392]	@ (800132c <iso15693_test+0x1d8>)
 80011a2:	f01b fe4d 	bl	801ce40 <iprintf>
 80011a6:	4b60      	ldr	r3, [pc, #384]	@ (8001328 <iso15693_test+0x1d4>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f01b fd71 	bl	801cc94 <fflush>

        /* Set NFC library context 设置NFC库上下文 */
        AppContext.pBalDataparams = &sBalParams;
 80011b2:	4b5b      	ldr	r3, [pc, #364]	@ (8001320 <iso15693_test+0x1cc>)
 80011b4:	607b      	str	r3, [r7, #4]
        dwStatus = phNfcLib_SetContext(&AppContext);
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	4618      	mov	r0, r3
 80011ba:	f004 fca1 	bl	8005b00 <phNfcLib_SetContext>
 80011be:	6138      	str	r0, [r7, #16]
        CHECK_NFCLIB_STATUS(dwStatus);
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d00b      	beq.n	80011de <iso15693_test+0x8a>
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	2187      	movs	r1, #135	@ 0x87
 80011ca:	4859      	ldr	r0, [pc, #356]	@ (8001330 <iso15693_test+0x1dc>)
 80011cc:	f01b fe38 	bl	801ce40 <iprintf>
 80011d0:	4b55      	ldr	r3, [pc, #340]	@ (8001328 <iso15693_test+0x1d4>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f01b fd5c 	bl	801cc94 <fflush>
 80011dc:	e00a      	b.n	80011f4 <iso15693_test+0xa0>
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	2187      	movs	r1, #135	@ 0x87
 80011e2:	4854      	ldr	r0, [pc, #336]	@ (8001334 <iso15693_test+0x1e0>)
 80011e4:	f01b fe2c 	bl	801ce40 <iprintf>
 80011e8:	4b4f      	ldr	r3, [pc, #316]	@ (8001328 <iso15693_test+0x1d4>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f01b fd50 	bl	801cc94 <fflush>

        /* NFC library initialization NFC库初始化 */
        dwStatus = phNfcLib_Init();
 80011f4:	f004 feee 	bl	8005fd4 <phNfcLib_Init>
 80011f8:	6138      	str	r0, [r7, #16]
        CHECK_NFCLIB_STATUS(dwStatus);
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d00b      	beq.n	8001218 <iso15693_test+0xc4>
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	218b      	movs	r1, #139	@ 0x8b
 8001204:	484a      	ldr	r0, [pc, #296]	@ (8001330 <iso15693_test+0x1dc>)
 8001206:	f01b fe1b 	bl	801ce40 <iprintf>
 800120a:	4b47      	ldr	r3, [pc, #284]	@ (8001328 <iso15693_test+0x1d4>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	4618      	mov	r0, r3
 8001212:	f01b fd3f 	bl	801cc94 <fflush>
 8001216:	e00a      	b.n	800122e <iso15693_test+0xda>
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	218b      	movs	r1, #139	@ 0x8b
 800121c:	4845      	ldr	r0, [pc, #276]	@ (8001334 <iso15693_test+0x1e0>)
 800121e:	f01b fe0f 	bl	801ce40 <iprintf>
 8001222:	4b41      	ldr	r3, [pc, #260]	@ (8001328 <iso15693_test+0x1d4>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	4618      	mov	r0, r3
 800122a:	f01b fd33 	bl	801cc94 <fflush>
        if(dwStatus != PH_NFCLIB_STATUS_SUCCESS) break;
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d163      	bne.n	80012fc <iso15693_test+0x1a8>

        /* Set the generic pointer 获取各组件参数指针 */
        pHal = phNfcLib_GetDataParams(PH_COMP_HAL);	// HAL层
 8001234:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001238:	f004 ff8a 	bl	8006150 <phNfcLib_GetDataParams>
 800123c:	4603      	mov	r3, r0
 800123e:	4a3e      	ldr	r2, [pc, #248]	@ (8001338 <iso15693_test+0x1e4>)
 8001240:	6013      	str	r3, [r2, #0]
        psalI15693 = phNfcLib_GetDataParams(PH_COMP_AL_ICODE); // 应用层
 8001242:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8001246:	f004 ff83 	bl	8006150 <phNfcLib_GetDataParams>
 800124a:	4603      	mov	r3, r0
 800124c:	4a3b      	ldr	r2, [pc, #236]	@ (800133c <iso15693_test+0x1e8>)
 800124e:	6013      	str	r3, [r2, #0]
        pDiscLoop = phNfcLib_GetDataParams(PH_COMP_AC_DISCLOOP); // 发现循环
 8001250:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001254:	f004 ff7c 	bl	8006150 <phNfcLib_GetDataParams>
 8001258:	4603      	mov	r3, r0
 800125a:	4a39      	ldr	r2, [pc, #228]	@ (8001340 <iso15693_test+0x1ec>)
 800125c:	6013      	str	r3, [r2, #0]

        /* 组件初始化 Initialize other components that are not initialized by NFCLIB and configure Discovery Loop. */
        status = phApp_Comp_Init(pDiscLoop);
 800125e:	4b38      	ldr	r3, [pc, #224]	@ (8001340 <iso15693_test+0x1ec>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f001 f98c 	bl	8002580 <phApp_Comp_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 800126c:	8afb      	ldrh	r3, [r7, #22]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d00c      	beq.n	800128c <iso15693_test+0x138>
 8001272:	8afb      	ldrh	r3, [r7, #22]
 8001274:	461a      	mov	r2, r3
 8001276:	2195      	movs	r1, #149	@ 0x95
 8001278:	482a      	ldr	r0, [pc, #168]	@ (8001324 <iso15693_test+0x1d0>)
 800127a:	f01b fde1 	bl	801ce40 <iprintf>
 800127e:	4b2a      	ldr	r3, [pc, #168]	@ (8001328 <iso15693_test+0x1d4>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	4618      	mov	r0, r3
 8001286:	f01b fd05 	bl	801cc94 <fflush>
 800128a:	e00b      	b.n	80012a4 <iso15693_test+0x150>
 800128c:	8afb      	ldrh	r3, [r7, #22]
 800128e:	461a      	mov	r2, r3
 8001290:	2195      	movs	r1, #149	@ 0x95
 8001292:	4826      	ldr	r0, [pc, #152]	@ (800132c <iso15693_test+0x1d8>)
 8001294:	f01b fdd4 	bl	801ce40 <iprintf>
 8001298:	4b23      	ldr	r3, [pc, #140]	@ (8001328 <iso15693_test+0x1d4>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	4618      	mov	r0, r3
 80012a0:	f01b fcf8 	bl	801cc94 <fflush>
        if(status != PH_ERR_SUCCESS) break;
 80012a4:	8afb      	ldrh	r3, [r7, #22]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d12a      	bne.n	8001300 <iso15693_test+0x1ac>

        /* Perform Platform Init 配置IRQ */
        status = phApp_Configure_IRQ();
 80012aa:	f001 f97d 	bl	80025a8 <phApp_Configure_IRQ>
 80012ae:	4603      	mov	r3, r0
 80012b0:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 80012b2:	8afb      	ldrh	r3, [r7, #22]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d00c      	beq.n	80012d2 <iso15693_test+0x17e>
 80012b8:	8afb      	ldrh	r3, [r7, #22]
 80012ba:	461a      	mov	r2, r3
 80012bc:	219a      	movs	r1, #154	@ 0x9a
 80012be:	4819      	ldr	r0, [pc, #100]	@ (8001324 <iso15693_test+0x1d0>)
 80012c0:	f01b fdbe 	bl	801ce40 <iprintf>
 80012c4:	4b18      	ldr	r3, [pc, #96]	@ (8001328 <iso15693_test+0x1d4>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f01b fce2 	bl	801cc94 <fflush>
 80012d0:	e00b      	b.n	80012ea <iso15693_test+0x196>
 80012d2:	8afb      	ldrh	r3, [r7, #22]
 80012d4:	461a      	mov	r2, r3
 80012d6:	219a      	movs	r1, #154	@ 0x9a
 80012d8:	4814      	ldr	r0, [pc, #80]	@ (800132c <iso15693_test+0x1d8>)
 80012da:	f01b fdb1 	bl	801ce40 <iprintf>
 80012de:	4b12      	ldr	r3, [pc, #72]	@ (8001328 <iso15693_test+0x1d4>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f01b fcd5 	bl	801cc94 <fflush>
        if(status != PH_ERR_SUCCESS) break;
 80012ea:	8afb      	ldrh	r3, [r7, #22]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d109      	bne.n	8001304 <iso15693_test+0x1b0>

        /* debug if spi communication read eeprom & register is ok */
//        test_pn5180_spi_communication(pHal);

        /* 主要检测循环 */
        (void)NfcrdlibEx5_ISO15693(pDiscLoop);
 80012f0:	4b13      	ldr	r3, [pc, #76]	@ (8001340 <iso15693_test+0x1ec>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f000 f827 	bl	8001348 <NfcrdlibEx5_ISO15693>
 80012fa:	e004      	b.n	8001306 <iso15693_test+0x1b2>
        if(dwStatus != PH_NFCLIB_STATUS_SUCCESS) break;
 80012fc:	bf00      	nop
 80012fe:	e002      	b.n	8001306 <iso15693_test+0x1b2>
        if(status != PH_ERR_SUCCESS) break;
 8001300:	bf00      	nop
 8001302:	e000      	b.n	8001306 <iso15693_test+0x1b2>
        if(status != PH_ERR_SUCCESS) break;
 8001304:	bf00      	nop
    } while(0);

    while(bInfLoop); /* Comes here if initialization failure or scheduler exit due to error */
 8001306:	bf00      	nop
 8001308:	4b0e      	ldr	r3, [pc, #56]	@ (8001344 <iso15693_test+0x1f0>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	b2db      	uxtb	r3, r3
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1fa      	bne.n	8001308 <iso15693_test+0x1b4>

    return 0;
 8001312:	2300      	movs	r3, #0
}
 8001314:	4618      	mov	r0, r3
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	0801ed94 	.word	0x0801ed94
 8001320:	20000528 	.word	0x20000528
 8001324:	0801edb4 	.word	0x0801edb4
 8001328:	2000002c 	.word	0x2000002c
 800132c:	0801ee1c 	.word	0x0801ee1c
 8001330:	0801ee58 	.word	0x0801ee58
 8001334:	0801ee90 	.word	0x0801ee90
 8001338:	2000052c 	.word	0x2000052c
 800133c:	20000208 	.word	0x20000208
 8001340:	20000204 	.word	0x20000204
 8001344:	20000000 	.word	0x20000000

08001348 <NfcrdlibEx5_ISO15693>:
 * \brief   This function demonstrates the Type V (ISO 15693) card detection, Block Read and Write operation.
 * \param   *pParams
 * \return  This function will never return
 **********************************************************************************************/
void NfcrdlibEx5_ISO15693(void *pParams)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b090      	sub	sp, #64	@ 0x40
 800134c:	af04      	add	r7, sp, #16
 800134e:	6078      	str	r0, [r7, #4]
    phStatus_t  status = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    uint16_t    wTagsDetected = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint8_t     bBlock = 0x03;
 8001358:	2303      	movs	r3, #3
 800135a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint8_t     *pRxbuffer;
    uint16_t    bDataLength;
    uint8_t     aTempUid[8];
    uint8_t     aReceivedUid[8];
    uint8_t     bDsfid = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	72fb      	strb	r3, [r7, #11]
     * when FreeRtos trust zone is enabled.
     * */
//    phOsal_ThreadSecureStack( 512 );

    /* Initialize library 示例初始化 */
    status = phExample_Init();
 8001362:	f000 fa63 	bl	800182c <phExample_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    CHECK_STATUS(status);
 800136a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800136c:	2b00      	cmp	r3, #0
 800136e:	d00c      	beq.n	800138a <NfcrdlibEx5_ISO15693+0x42>
 8001370:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001372:	461a      	mov	r2, r3
 8001374:	21c1      	movs	r1, #193	@ 0xc1
 8001376:	4892      	ldr	r0, [pc, #584]	@ (80015c0 <NfcrdlibEx5_ISO15693+0x278>)
 8001378:	f01b fd62 	bl	801ce40 <iprintf>
 800137c:	4b91      	ldr	r3, [pc, #580]	@ (80015c4 <NfcrdlibEx5_ISO15693+0x27c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	4618      	mov	r0, r3
 8001384:	f01b fc86 	bl	801cc94 <fflush>
 8001388:	e00b      	b.n	80013a2 <NfcrdlibEx5_ISO15693+0x5a>
 800138a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800138c:	461a      	mov	r2, r3
 800138e:	21c1      	movs	r1, #193	@ 0xc1
 8001390:	488d      	ldr	r0, [pc, #564]	@ (80015c8 <NfcrdlibEx5_ISO15693+0x280>)
 8001392:	f01b fd55 	bl	801ce40 <iprintf>
 8001396:	4b8b      	ldr	r3, [pc, #556]	@ (80015c4 <NfcrdlibEx5_ISO15693+0x27c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	4618      	mov	r0, r3
 800139e:	f01b fc79 	bl	801cc94 <fflush>

    while(1)    /* Continuous loop 无限循环 */
    {
        bNTag5_State = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	72bb      	strb	r3, [r7, #10]
        printf("=== Starting new detection cycle ===\n");
 80013a6:	4889      	ldr	r0, [pc, #548]	@ (80015cc <NfcrdlibEx5_ISO15693+0x284>)
 80013a8:	f01b fdba 	bl	801cf20 <puts>

        do
        {
            /* Field OFF 关闭RF场 */
        	printf("Setting field OFF...\n");
 80013ac:	4888      	ldr	r0, [pc, #544]	@ (80015d0 <NfcrdlibEx5_ISO15693+0x288>)
 80013ae:	f01b fdb7 	bl	801cf20 <puts>
            status = phhalHw_FieldOff(pHal);
 80013b2:	4b88      	ldr	r3, [pc, #544]	@ (80015d4 <NfcrdlibEx5_ISO15693+0x28c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f00b ff02 	bl	800d1c0 <phhalHw_Pn5180_FieldOff>
 80013bc:	4603      	mov	r3, r0
 80013be:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            CHECK_STATUS(status);
 80013c0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00c      	beq.n	80013e0 <NfcrdlibEx5_ISO15693+0x98>
 80013c6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80013c8:	461a      	mov	r2, r3
 80013ca:	21cd      	movs	r1, #205	@ 0xcd
 80013cc:	487c      	ldr	r0, [pc, #496]	@ (80015c0 <NfcrdlibEx5_ISO15693+0x278>)
 80013ce:	f01b fd37 	bl	801ce40 <iprintf>
 80013d2:	4b7c      	ldr	r3, [pc, #496]	@ (80015c4 <NfcrdlibEx5_ISO15693+0x27c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	4618      	mov	r0, r3
 80013da:	f01b fc5b 	bl	801cc94 <fflush>
 80013de:	e00b      	b.n	80013f8 <NfcrdlibEx5_ISO15693+0xb0>
 80013e0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80013e2:	461a      	mov	r2, r3
 80013e4:	21cd      	movs	r1, #205	@ 0xcd
 80013e6:	4878      	ldr	r0, [pc, #480]	@ (80015c8 <NfcrdlibEx5_ISO15693+0x280>)
 80013e8:	f01b fd2a 	bl	801ce40 <iprintf>
 80013ec:	4b75      	ldr	r3, [pc, #468]	@ (80015c4 <NfcrdlibEx5_ISO15693+0x27c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f01b fc4e 	bl	801cc94 <fflush>
            printf("Field OFF status: 0x%04X\n", status);
 80013f8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80013fa:	4619      	mov	r1, r3
 80013fc:	4876      	ldr	r0, [pc, #472]	@ (80015d8 <NfcrdlibEx5_ISO15693+0x290>)
 80013fe:	f01b fd1f 	bl	801ce40 <iprintf>

            /* 等待5秒（轮询或者中断模式） */
			#ifdef USE_POLLING_MODE
			// 轮询模式下的等待
            printf("Using POLLING mode - waiting...\n");
 8001402:	4876      	ldr	r0, [pc, #472]	@ (80015dc <NfcrdlibEx5_ISO15693+0x294>)
 8001404:	f01b fd8c 	bl	801cf20 <puts>
			uint32_t dwStartTime = HAL_GetTick();
 8001408:	f015 ffe0 	bl	80173cc <HAL_GetTick>
 800140c:	62b8      	str	r0, [r7, #40]	@ 0x28
			while ((HAL_GetTick() - dwStartTime) < 5100)
 800140e:	e007      	b.n	8001420 <NfcrdlibEx5_ISO15693+0xd8>
			{
				// 轮询模式：主动检查IRQ状态
				phhalHw_Pn5180_PollAndProcessIRQ(pHal);
 8001410:	4b70      	ldr	r3, [pc, #448]	@ (80015d4 <NfcrdlibEx5_ISO15693+0x28c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f000 fb9f 	bl	8001b58 <phhalHw_Pn5180_PollAndProcessIRQ>
				HAL_Delay(1);
 800141a:	2001      	movs	r0, #1
 800141c:	f015 ffe2 	bl	80173e4 <HAL_Delay>
			while ((HAL_GetTick() - dwStartTime) < 5100)
 8001420:	f015 ffd4 	bl	80173cc <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	f241 32eb 	movw	r2, #5099	@ 0x13eb
 800142e:	4293      	cmp	r3, r2
 8001430:	d9ee      	bls.n	8001410 <NfcrdlibEx5_ISO15693+0xc8>
			}
			printf("Polling wait completed\n");
 8001432:	486b      	ldr	r0, [pc, #428]	@ (80015e0 <NfcrdlibEx5_ISO15693+0x298>)
 8001434:	f01b fd74 	bl	801cf20 <puts>
            CHECK_STATUS(status);
            printf("Wait status: 0x%04X\n", status);
            #endif

            /* Configure Discovery loop for Poll Mode 配置发现循环 */
            printf("Configuring discovery loop...\n");
 8001438:	486a      	ldr	r0, [pc, #424]	@ (80015e4 <NfcrdlibEx5_ISO15693+0x29c>)
 800143a:	f01b fd71 	bl	801cf20 <puts>
            status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_NEXT_POLL_STATE, PHAC_DISCLOOP_POLL_STATE_DETECTION);
 800143e:	4b6a      	ldr	r3, [pc, #424]	@ (80015e8 <NfcrdlibEx5_ISO15693+0x2a0>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2201      	movs	r2, #1
 8001444:	2184      	movs	r1, #132	@ 0x84
 8001446:	4618      	mov	r0, r3
 8001448:	f005 fc3a 	bl	8006cc0 <phacDiscLoop_Sw_SetConfig>
 800144c:	4603      	mov	r3, r0
 800144e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            CHECK_STATUS(status);
 8001450:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001452:	2b00      	cmp	r3, #0
 8001454:	d00c      	beq.n	8001470 <NfcrdlibEx5_ISO15693+0x128>
 8001456:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001458:	461a      	mov	r2, r3
 800145a:	21e8      	movs	r1, #232	@ 0xe8
 800145c:	4858      	ldr	r0, [pc, #352]	@ (80015c0 <NfcrdlibEx5_ISO15693+0x278>)
 800145e:	f01b fcef 	bl	801ce40 <iprintf>
 8001462:	4b58      	ldr	r3, [pc, #352]	@ (80015c4 <NfcrdlibEx5_ISO15693+0x27c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	4618      	mov	r0, r3
 800146a:	f01b fc13 	bl	801cc94 <fflush>
 800146e:	e00b      	b.n	8001488 <NfcrdlibEx5_ISO15693+0x140>
 8001470:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001472:	461a      	mov	r2, r3
 8001474:	21e8      	movs	r1, #232	@ 0xe8
 8001476:	4854      	ldr	r0, [pc, #336]	@ (80015c8 <NfcrdlibEx5_ISO15693+0x280>)
 8001478:	f01b fce2 	bl	801ce40 <iprintf>
 800147c:	4b51      	ldr	r3, [pc, #324]	@ (80015c4 <NfcrdlibEx5_ISO15693+0x27c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	4618      	mov	r0, r3
 8001484:	f01b fc06 	bl	801cc94 <fflush>
            printf("SetConfig status: 0x%04X\n", status);
 8001488:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800148a:	4619      	mov	r1, r3
 800148c:	4857      	ldr	r0, [pc, #348]	@ (80015ec <NfcrdlibEx5_ISO15693+0x2a4>)
 800148e:	f01b fcd7 	bl	801ce40 <iprintf>

            printf("Running discovery loop...\n");
 8001492:	4857      	ldr	r0, [pc, #348]	@ (80015f0 <NfcrdlibEx5_ISO15693+0x2a8>)
 8001494:	f01b fd44 	bl	801cf20 <puts>
            /* Run Discovery loop 运行发现循环 */
            status = phacDiscLoop_Run(pDiscLoop, PHAC_DISCLOOP_ENTRY_POINT_POLL);
 8001498:	4b53      	ldr	r3, [pc, #332]	@ (80015e8 <NfcrdlibEx5_ISO15693+0x2a0>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2100      	movs	r1, #0
 800149e:	4618      	mov	r0, r3
 80014a0:	f005 fb3c 	bl	8006b1c <phacDiscLoop_Sw_Run>
 80014a4:	4603      	mov	r3, r0
 80014a6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            printf("Discovery loop status: 0x%04X\n", status);
 80014a8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80014aa:	4619      	mov	r1, r3
 80014ac:	4851      	ldr	r0, [pc, #324]	@ (80015f4 <NfcrdlibEx5_ISO15693+0x2ac>)
 80014ae:	f01b fcc7 	bl	801ce40 <iprintf>

            // 添加一个小延时，避免过度占用CPU
            phhalHw_Wait(pHal, PHHAL_HW_TIME_MILLISECONDS, 10);
 80014b2:	4b48      	ldr	r3, [pc, #288]	@ (80015d4 <NfcrdlibEx5_ISO15693+0x28c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	220a      	movs	r2, #10
 80014b8:	2101      	movs	r1, #1
 80014ba:	4618      	mov	r0, r3
 80014bc:	f00b fea4 	bl	800d208 <phhalHw_Pn5180_Wait>
        }while((status & PH_ERR_MASK) != PHAC_DISCLOOP_DEVICE_ACTIVATED); /* Exit on Card detection */
 80014c0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	2b8b      	cmp	r3, #139	@ 0x8b
 80014c6:	f47f af71 	bne.w	80013ac <NfcrdlibEx5_ISO15693+0x64>
        /* Card detected */

        printf("=== Card detected! ===\n");
 80014ca:	484b      	ldr	r0, [pc, #300]	@ (80015f8 <NfcrdlibEx5_ISO15693+0x2b0>)
 80014cc:	f01b fd28 	bl	801cf20 <puts>

        /* Get the tag types detected info */
        status = phacDiscLoop_GetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TECH_DETECTED, &wTagsDetected);
 80014d0:	4b45      	ldr	r3, [pc, #276]	@ (80015e8 <NfcrdlibEx5_ISO15693+0x2a0>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f107 0226 	add.w	r2, r7, #38	@ 0x26
 80014d8:	2187      	movs	r1, #135	@ 0x87
 80014da:	4618      	mov	r0, r3
 80014dc:	f005 fffa 	bl	80074d4 <phacDiscLoop_Sw_GetConfig>
 80014e0:	4603      	mov	r3, r0
 80014e2:	85fb      	strh	r3, [r7, #46]	@ 0x2e

        /* Check for Status */
        if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 80014e4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f47f af5a 	bne.w	80013a2 <NfcrdlibEx5_ISO15693+0x5a>
        {
            /* Check for Type V(ISO 15693) tag detection */
            if(PHAC_DISCLOOP_CHECK_ANDMASK(wTagsDetected, PHAC_DISCLOOP_POS_BIT_MASK_V))
 80014ee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80014f0:	f003 0310 	and.w	r3, r3, #16
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f43f af54 	beq.w	80013a2 <NfcrdlibEx5_ISO15693+0x5a>
            {
                DEBUG_PRINTF("\nType V / ISO 15693 / T5T Detected \n");
 80014fa:	4840      	ldr	r0, [pc, #256]	@ (80015fc <NfcrdlibEx5_ISO15693+0x2b4>)
 80014fc:	f01b fd10 	bl	801cf20 <puts>
 8001500:	4b30      	ldr	r3, [pc, #192]	@ (80015c4 <NfcrdlibEx5_ISO15693+0x27c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	4618      	mov	r0, r3
 8001508:	f01b fbc4 	bl	801cc94 <fflush>

                /* Print UID */
                DEBUG_PRINTF ("\nUID: ");
 800150c:	483c      	ldr	r0, [pc, #240]	@ (8001600 <NfcrdlibEx5_ISO15693+0x2b8>)
 800150e:	f01b fc97 	bl	801ce40 <iprintf>
 8001512:	4b2c      	ldr	r3, [pc, #176]	@ (80015c4 <NfcrdlibEx5_ISO15693+0x27c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	4618      	mov	r0, r3
 800151a:	f01b fbbb 	bl	801cc94 <fflush>
                phApp_Print_Buff(pDiscLoop->sTypeVTargetInfo.aTypeV[0].aUid, 0x08);
 800151e:	4b32      	ldr	r3, [pc, #200]	@ (80015e8 <NfcrdlibEx5_ISO15693+0x2a0>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	33b8      	adds	r3, #184	@ 0xb8
 8001524:	2108      	movs	r1, #8
 8001526:	4618      	mov	r0, r3
 8001528:	f001 f802 	bl	8002530 <phApp_Print_Buff>

                /* Copy UID */
                memcpy(aReceivedUid, pDiscLoop->sTypeVTargetInfo.aTypeV[0].aUid, 0x08);
 800152c:	4b2e      	ldr	r3, [pc, #184]	@ (80015e8 <NfcrdlibEx5_ISO15693+0x2a0>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f103 02b8 	add.w	r2, r3, #184	@ 0xb8
 8001534:	f107 030c 	add.w	r3, r7, #12
 8001538:	6810      	ldr	r0, [r2, #0]
 800153a:	6851      	ldr	r1, [r2, #4]
 800153c:	c303      	stmia	r3!, {r0, r1}

                /* Check and display Card type info 显示卡片类型 */
                if (DisplayCardTypeInfo(pDiscLoop->sTypeVTargetInfo.aTypeV[0].aUid, &bNTag5_State) == PH_ERR_SUCCESS)
 800153e:	4b2a      	ldr	r3, [pc, #168]	@ (80015e8 <NfcrdlibEx5_ISO15693+0x2a0>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	33b8      	adds	r3, #184	@ 0xb8
 8001544:	f107 020a 	add.w	r2, r7, #10
 8001548:	4611      	mov	r1, r2
 800154a:	4618      	mov	r0, r3
 800154c:	f000 f9f4 	bl	8001938 <DisplayCardTypeInfo>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	f040 80d2 	bne.w	80016fc <NfcrdlibEx5_ISO15693+0x3b4>
                {
                    do
                    {
                        /* Data length */
                        bDataLength = 0x04;
 8001558:	2304      	movs	r3, #4
 800155a:	83fb      	strh	r3, [r7, #30]

                        /* Block Read */
                        DEBUG_PRINTF("\nRead Data from Block %d", bBlock);
 800155c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001560:	4619      	mov	r1, r3
 8001562:	4828      	ldr	r0, [pc, #160]	@ (8001604 <NfcrdlibEx5_ISO15693+0x2bc>)
 8001564:	f01b fc6c 	bl	801ce40 <iprintf>
 8001568:	4b16      	ldr	r3, [pc, #88]	@ (80015c4 <NfcrdlibEx5_ISO15693+0x27c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	4618      	mov	r0, r3
 8001570:	f01b fb90 	bl	801cc94 <fflush>

                        /* Read single block 读取单块 */
                        status = phalICode_ReadSingleBlock(psalI15693,
 8001574:	4b24      	ldr	r3, [pc, #144]	@ (8001608 <NfcrdlibEx5_ISO15693+0x2c0>)
 8001576:	6818      	ldr	r0, [r3, #0]
 8001578:	f107 0120 	add.w	r1, r7, #32
 800157c:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8001580:	f107 031e 	add.w	r3, r7, #30
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	460b      	mov	r3, r1
 8001588:	2100      	movs	r1, #0
 800158a:	f009 fdca 	bl	800b122 <phalICode_Sw_ReadSingleBlock>
 800158e:	4603      	mov	r3, r0
 8001590:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                            PHAL_ICODE_OPTION_OFF,
                            bBlock,
                            &pRxbuffer,
                            &bDataLength);
                        /* Check for Status */
                        if(status != PH_ERR_SUCCESS)
 8001592:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001594:	2b00      	cmp	r3, #0
 8001596:	d03d      	beq.n	8001614 <NfcrdlibEx5_ISO15693+0x2cc>
                        {
                            /* Print Error info 写入单块 */
                            DEBUG_PRINTF ("\nRead operation Failed!!!");
 8001598:	481c      	ldr	r0, [pc, #112]	@ (800160c <NfcrdlibEx5_ISO15693+0x2c4>)
 800159a:	f01b fc51 	bl	801ce40 <iprintf>
 800159e:	4b09      	ldr	r3, [pc, #36]	@ (80015c4 <NfcrdlibEx5_ISO15693+0x27c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f01b fb75 	bl	801cc94 <fflush>
                            DEBUG_PRINTF("\nExecution aborted!!!\n");
 80015aa:	4819      	ldr	r0, [pc, #100]	@ (8001610 <NfcrdlibEx5_ISO15693+0x2c8>)
 80015ac:	f01b fcb8 	bl	801cf20 <puts>
 80015b0:	4b04      	ldr	r3, [pc, #16]	@ (80015c4 <NfcrdlibEx5_ISO15693+0x27c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f01b fb6c 	bl	801cc94 <fflush>
                            break;
 80015bc:	e09e      	b.n	80016fc <NfcrdlibEx5_ISO15693+0x3b4>
 80015be:	bf00      	nop
 80015c0:	0801edb4 	.word	0x0801edb4
 80015c4:	2000002c 	.word	0x2000002c
 80015c8:	0801ee1c 	.word	0x0801ee1c
 80015cc:	0801eeb8 	.word	0x0801eeb8
 80015d0:	0801eee0 	.word	0x0801eee0
 80015d4:	2000052c 	.word	0x2000052c
 80015d8:	0801eef8 	.word	0x0801eef8
 80015dc:	0801ef14 	.word	0x0801ef14
 80015e0:	0801ef34 	.word	0x0801ef34
 80015e4:	0801ef4c 	.word	0x0801ef4c
 80015e8:	20000204 	.word	0x20000204
 80015ec:	0801ef6c 	.word	0x0801ef6c
 80015f0:	0801ef88 	.word	0x0801ef88
 80015f4:	0801efa4 	.word	0x0801efa4
 80015f8:	0801efc4 	.word	0x0801efc4
 80015fc:	0801efdc 	.word	0x0801efdc
 8001600:	0801f000 	.word	0x0801f000
 8001604:	0801f008 	.word	0x0801f008
 8001608:	20000208 	.word	0x20000208
 800160c:	0801f024 	.word	0x0801f024
 8001610:	0801f040 	.word	0x0801f040
                        }

                        /* Read Success */
                        DEBUG_PRINTF("\nRead Success");
 8001614:	4875      	ldr	r0, [pc, #468]	@ (80017ec <NfcrdlibEx5_ISO15693+0x4a4>)
 8001616:	f01b fc13 	bl	801ce40 <iprintf>
 800161a:	4b75      	ldr	r3, [pc, #468]	@ (80017f0 <NfcrdlibEx5_ISO15693+0x4a8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	4618      	mov	r0, r3
 8001622:	f01b fb37 	bl	801cc94 <fflush>
                        DEBUG_PRINTF("\nThe content of Block %d is:", bBlock);
 8001626:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800162a:	4619      	mov	r1, r3
 800162c:	4871      	ldr	r0, [pc, #452]	@ (80017f4 <NfcrdlibEx5_ISO15693+0x4ac>)
 800162e:	f01b fc07 	bl	801ce40 <iprintf>
 8001632:	4b6f      	ldr	r3, [pc, #444]	@ (80017f0 <NfcrdlibEx5_ISO15693+0x4a8>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	4618      	mov	r0, r3
 800163a:	f01b fb2b 	bl	801cc94 <fflush>
                        phApp_Print_Buff (pRxbuffer, bDataLength);
 800163e:	6a3b      	ldr	r3, [r7, #32]
 8001640:	8bfa      	ldrh	r2, [r7, #30]
 8001642:	b2d2      	uxtb	r2, r2
 8001644:	4611      	mov	r1, r2
 8001646:	4618      	mov	r0, r3
 8001648:	f000 ff72 	bl	8002530 <phApp_Print_Buff>
                        DEBUG_PRINTF("\n\n --- End of Read Operation ---");
 800164c:	486a      	ldr	r0, [pc, #424]	@ (80017f8 <NfcrdlibEx5_ISO15693+0x4b0>)
 800164e:	f01b fbf7 	bl	801ce40 <iprintf>
 8001652:	4b67      	ldr	r3, [pc, #412]	@ (80017f0 <NfcrdlibEx5_ISO15693+0x4a8>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	4618      	mov	r0, r3
 800165a:	f01b fb1b 	bl	801cc94 <fflush>

                        /* Block Write */
                        DEBUG_PRINTF("\n\nWrite data to Block %d", bBlock);
 800165e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001662:	4619      	mov	r1, r3
 8001664:	4865      	ldr	r0, [pc, #404]	@ (80017fc <NfcrdlibEx5_ISO15693+0x4b4>)
 8001666:	f01b fbeb 	bl	801ce40 <iprintf>
 800166a:	4b61      	ldr	r3, [pc, #388]	@ (80017f0 <NfcrdlibEx5_ISO15693+0x4a8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	4618      	mov	r0, r3
 8001672:	f01b fb0f 	bl	801cc94 <fflush>

                        /* Write single block */
                        status = phalICode_WriteSingleBlock(psalI15693,
 8001676:	4b62      	ldr	r3, [pc, #392]	@ (8001800 <NfcrdlibEx5_ISO15693+0x4b8>)
 8001678:	6818      	ldr	r0, [r3, #0]
 800167a:	6a39      	ldr	r1, [r7, #32]
 800167c:	8bfb      	ldrh	r3, [r7, #30]
 800167e:	b2db      	uxtb	r3, r3
 8001680:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	460b      	mov	r3, r1
 8001688:	2100      	movs	r1, #0
 800168a:	f009 fd8a 	bl	800b1a2 <phalICode_Sw_WriteSingleBlock>
 800168e:	4603      	mov	r3, r0
 8001690:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                            PHAL_ICODE_OPTION_OFF,
                            bBlock,
                            pRxbuffer,
                            bDataLength);
                        /* Check for Status */
                        if(status != PH_ERR_SUCCESS)
 8001692:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001694:	2b00      	cmp	r3, #0
 8001696:	d012      	beq.n	80016be <NfcrdlibEx5_ISO15693+0x376>
                        {
                            /* Print Error info */
                            DEBUG_PRINTF ("\nWrite operation Failed!!!");
 8001698:	485a      	ldr	r0, [pc, #360]	@ (8001804 <NfcrdlibEx5_ISO15693+0x4bc>)
 800169a:	f01b fbd1 	bl	801ce40 <iprintf>
 800169e:	4b54      	ldr	r3, [pc, #336]	@ (80017f0 <NfcrdlibEx5_ISO15693+0x4a8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f01b faf5 	bl	801cc94 <fflush>
                            DEBUG_PRINTF("\nExecution aborted!!!\n");
 80016aa:	4857      	ldr	r0, [pc, #348]	@ (8001808 <NfcrdlibEx5_ISO15693+0x4c0>)
 80016ac:	f01b fc38 	bl	801cf20 <puts>
 80016b0:	4b4f      	ldr	r3, [pc, #316]	@ (80017f0 <NfcrdlibEx5_ISO15693+0x4a8>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f01b faec 	bl	801cc94 <fflush>
                            break;
 80016bc:	e01e      	b.n	80016fc <NfcrdlibEx5_ISO15693+0x3b4>
                        }

                        /* Write Success */
                        DEBUG_PRINTF ("\nWrite Success");
 80016be:	4853      	ldr	r0, [pc, #332]	@ (800180c <NfcrdlibEx5_ISO15693+0x4c4>)
 80016c0:	f01b fbbe 	bl	801ce40 <iprintf>
 80016c4:	4b4a      	ldr	r3, [pc, #296]	@ (80017f0 <NfcrdlibEx5_ISO15693+0x4a8>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f01b fae2 	bl	801cc94 <fflush>
                        DEBUG_PRINTF("\n\n --- End of Write Operation ---");
 80016d0:	484f      	ldr	r0, [pc, #316]	@ (8001810 <NfcrdlibEx5_ISO15693+0x4c8>)
 80016d2:	f01b fbb5 	bl	801ce40 <iprintf>
 80016d6:	4b46      	ldr	r3, [pc, #280]	@ (80017f0 <NfcrdlibEx5_ISO15693+0x4a8>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	4618      	mov	r0, r3
 80016de:	f01b fad9 	bl	801cc94 <fflush>

                        /* 高速率读取 */
                        ReadMultipleBlock_HighDataRate(bNTag5_State);
 80016e2:	7abb      	ldrb	r3, [r7, #10]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f000 fa2b 	bl	8001b40 <ReadMultipleBlock_HighDataRate>

                        DEBUG_PRINTF("\n\n --- End of Example ---\n\n");
 80016ea:	484a      	ldr	r0, [pc, #296]	@ (8001814 <NfcrdlibEx5_ISO15693+0x4cc>)
 80016ec:	f01b fc18 	bl	801cf20 <puts>
 80016f0:	4b3f      	ldr	r3, [pc, #252]	@ (80017f0 <NfcrdlibEx5_ISO15693+0x4a8>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f01b facc 	bl	801cc94 <fflush>
                    }while(0);
                }

                DEBUG_PRINTF("\nPlease Remove the Card\n\n");
 80016fc:	4846      	ldr	r0, [pc, #280]	@ (8001818 <NfcrdlibEx5_ISO15693+0x4d0>)
 80016fe:	f01b fc0f 	bl	801cf20 <puts>
 8001702:	4b3b      	ldr	r3, [pc, #236]	@ (80017f0 <NfcrdlibEx5_ISO15693+0x4a8>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	4618      	mov	r0, r3
 800170a:	f01b fac3 	bl	801cc94 <fflush>

                /* Field RESET */
                status = phhalHw_FieldReset(pHal);
 800170e:	4b43      	ldr	r3, [pc, #268]	@ (800181c <NfcrdlibEx5_ISO15693+0x4d4>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f00b fdc0 	bl	800d298 <phhalHw_Pn5180_FieldReset>
 8001718:	4603      	mov	r3, r0
 800171a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                CHECK_STATUS(status);
 800171c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800171e:	2b00      	cmp	r3, #0
 8001720:	d00d      	beq.n	800173e <NfcrdlibEx5_ISO15693+0x3f6>
 8001722:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001724:	461a      	mov	r2, r3
 8001726:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 800172a:	483d      	ldr	r0, [pc, #244]	@ (8001820 <NfcrdlibEx5_ISO15693+0x4d8>)
 800172c:	f01b fb88 	bl	801ce40 <iprintf>
 8001730:	4b2f      	ldr	r3, [pc, #188]	@ (80017f0 <NfcrdlibEx5_ISO15693+0x4a8>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	4618      	mov	r0, r3
 8001738:	f01b faac 	bl	801cc94 <fflush>
 800173c:	e00c      	b.n	8001758 <NfcrdlibEx5_ISO15693+0x410>
 800173e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001740:	461a      	mov	r2, r3
 8001742:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8001746:	4837      	ldr	r0, [pc, #220]	@ (8001824 <NfcrdlibEx5_ISO15693+0x4dc>)
 8001748:	f01b fb7a 	bl	801ce40 <iprintf>
 800174c:	4b28      	ldr	r3, [pc, #160]	@ (80017f0 <NfcrdlibEx5_ISO15693+0x4a8>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	4618      	mov	r0, r3
 8001754:	f01b fa9e 	bl	801cc94 <fflush>

                /* Make sure that example application is not detecting the same card continuously */
                do
                {
                    /* Clear UID buffer */
                    memset(aTempUid, 0x00, 0x08);
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	2208      	movs	r2, #8
 800175e:	2100      	movs	r1, #0
 8001760:	4618      	mov	r0, r3
 8001762:	f01b fccd 	bl	801d100 <memset>

                    /* Inventory request */
                    status = phpalSli15693_Inventory(pDiscLoop->pPalSli15693DataParams,
 8001766:	4b30      	ldr	r3, [pc, #192]	@ (8001828 <NfcrdlibEx5_ISO15693+0x4e0>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800176c:	f107 020c 	add.w	r2, r7, #12
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	9302      	str	r3, [sp, #8]
 8001776:	f107 030b 	add.w	r3, r7, #11
 800177a:	9301      	str	r3, [sp, #4]
 800177c:	2340      	movs	r3, #64	@ 0x40
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	4613      	mov	r3, r2
 8001782:	2200      	movs	r2, #0
 8001784:	2126      	movs	r1, #38	@ 0x26
 8001786:	f014 f838 	bl	80157fa <phpalSli15693_Sw_Inventory>
 800178a:	4603      	mov	r3, r0
 800178c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                        ISO15693_UID_SIZE_BITS,
                        &bDsfid,
                        aTempUid);

                    /* Check for Status */
                    if (status != PH_ERR_SUCCESS)
 800178e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001790:	2b00      	cmp	r3, #0
 8001792:	d128      	bne.n	80017e6 <NfcrdlibEx5_ISO15693+0x49e>
                    {
                        break; /* Card Removed, break from the loop */
                    }

                    /* Delay - 5 milli seconds*/
                    status = phhalHw_Wait(pDiscLoop->pHalDataParams, PHHAL_HW_TIME_MILLISECONDS, 5);
 8001794:	4b24      	ldr	r3, [pc, #144]	@ (8001828 <NfcrdlibEx5_ISO15693+0x4e0>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800179a:	2205      	movs	r2, #5
 800179c:	2101      	movs	r1, #1
 800179e:	4618      	mov	r0, r3
 80017a0:	f00b fd32 	bl	800d208 <phhalHw_Pn5180_Wait>
 80017a4:	4603      	mov	r3, r0
 80017a6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                    CHECK_STATUS(status);
 80017a8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d00d      	beq.n	80017ca <NfcrdlibEx5_ISO15693+0x482>
 80017ae:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80017b0:	461a      	mov	r2, r3
 80017b2:	f240 1163 	movw	r1, #355	@ 0x163
 80017b6:	481a      	ldr	r0, [pc, #104]	@ (8001820 <NfcrdlibEx5_ISO15693+0x4d8>)
 80017b8:	f01b fb42 	bl	801ce40 <iprintf>
 80017bc:	4b0c      	ldr	r3, [pc, #48]	@ (80017f0 <NfcrdlibEx5_ISO15693+0x4a8>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f01b fa66 	bl	801cc94 <fflush>
 80017c8:	e7c6      	b.n	8001758 <NfcrdlibEx5_ISO15693+0x410>
 80017ca:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80017cc:	461a      	mov	r2, r3
 80017ce:	f240 1163 	movw	r1, #355	@ 0x163
 80017d2:	4814      	ldr	r0, [pc, #80]	@ (8001824 <NfcrdlibEx5_ISO15693+0x4dc>)
 80017d4:	f01b fb34 	bl	801ce40 <iprintf>
 80017d8:	4b05      	ldr	r3, [pc, #20]	@ (80017f0 <NfcrdlibEx5_ISO15693+0x4a8>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	4618      	mov	r0, r3
 80017e0:	f01b fa58 	bl	801cc94 <fflush>
                    memset(aTempUid, 0x00, 0x08);
 80017e4:	e7b8      	b.n	8001758 <NfcrdlibEx5_ISO15693+0x410>
                        break; /* Card Removed, break from the loop */
 80017e6:	bf00      	nop
        bNTag5_State = 0;
 80017e8:	e5db      	b.n	80013a2 <NfcrdlibEx5_ISO15693+0x5a>
 80017ea:	bf00      	nop
 80017ec:	0801f058 	.word	0x0801f058
 80017f0:	2000002c 	.word	0x2000002c
 80017f4:	0801f068 	.word	0x0801f068
 80017f8:	0801f088 	.word	0x0801f088
 80017fc:	0801f0ac 	.word	0x0801f0ac
 8001800:	20000208 	.word	0x20000208
 8001804:	0801f0c8 	.word	0x0801f0c8
 8001808:	0801f040 	.word	0x0801f040
 800180c:	0801f0e4 	.word	0x0801f0e4
 8001810:	0801f0f4 	.word	0x0801f0f4
 8001814:	0801f118 	.word	0x0801f118
 8001818:	0801f134 	.word	0x0801f134
 800181c:	2000052c 	.word	0x2000052c
 8001820:	0801edb4 	.word	0x0801edb4
 8001824:	0801ee1c 	.word	0x0801ee1c
 8001828:	20000204 	.word	0x20000204

0800182c <phExample_Init>:
 * \brief   Initializes the Reader Library
 * \param   none
 * \return  status  Returns the function status
 **********************************************************************************************/
static phStatus_t phExample_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
    phStatus_t status;

    /* Device limit for Type V (ISO 15693) 设置最多检测一张卡 */
    status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEV_DEVICE_LIMIT, 1);
 8001832:	4b3d      	ldr	r3, [pc, #244]	@ (8001928 <phExample_Init+0xfc>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2201      	movs	r2, #1
 8001838:	2113      	movs	r1, #19
 800183a:	4618      	mov	r0, r3
 800183c:	f005 fa40 	bl	8006cc0 <phacDiscLoop_Sw_SetConfig>
 8001840:	4603      	mov	r3, r0
 8001842:	80fb      	strh	r3, [r7, #6]
    CHECK_STATUS(status);
 8001844:	88fb      	ldrh	r3, [r7, #6]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d00d      	beq.n	8001866 <phExample_Init+0x3a>
 800184a:	88fb      	ldrh	r3, [r7, #6]
 800184c:	461a      	mov	r2, r3
 800184e:	f44f 71bb 	mov.w	r1, #374	@ 0x176
 8001852:	4836      	ldr	r0, [pc, #216]	@ (800192c <phExample_Init+0x100>)
 8001854:	f01b faf4 	bl	801ce40 <iprintf>
 8001858:	4b35      	ldr	r3, [pc, #212]	@ (8001930 <phExample_Init+0x104>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	4618      	mov	r0, r3
 8001860:	f01b fa18 	bl	801cc94 <fflush>
 8001864:	e00c      	b.n	8001880 <phExample_Init+0x54>
 8001866:	88fb      	ldrh	r3, [r7, #6]
 8001868:	461a      	mov	r2, r3
 800186a:	f44f 71bb 	mov.w	r1, #374	@ 0x176
 800186e:	4831      	ldr	r0, [pc, #196]	@ (8001934 <phExample_Init+0x108>)
 8001870:	f01b fae6 	bl	801ce40 <iprintf>
 8001874:	4b2e      	ldr	r3, [pc, #184]	@ (8001930 <phExample_Init+0x104>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	4618      	mov	r0, r3
 800187c:	f01b fa0a 	bl	801cc94 <fflush>

    /* Passive polling Tx Guard times in micro seconds. 设置保护时间5ms */
    status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_GTV_VALUE_US, 5000);
 8001880:	4b29      	ldr	r3, [pc, #164]	@ (8001928 <phExample_Init+0xfc>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001888:	2104      	movs	r1, #4
 800188a:	4618      	mov	r0, r3
 800188c:	f005 fa18 	bl	8006cc0 <phacDiscLoop_Sw_SetConfig>
 8001890:	4603      	mov	r3, r0
 8001892:	80fb      	strh	r3, [r7, #6]
    CHECK_STATUS(status);
 8001894:	88fb      	ldrh	r3, [r7, #6]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00d      	beq.n	80018b6 <phExample_Init+0x8a>
 800189a:	88fb      	ldrh	r3, [r7, #6]
 800189c:	461a      	mov	r2, r3
 800189e:	f44f 71bd 	mov.w	r1, #378	@ 0x17a
 80018a2:	4822      	ldr	r0, [pc, #136]	@ (800192c <phExample_Init+0x100>)
 80018a4:	f01b facc 	bl	801ce40 <iprintf>
 80018a8:	4b21      	ldr	r3, [pc, #132]	@ (8001930 <phExample_Init+0x104>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f01b f9f0 	bl	801cc94 <fflush>
 80018b4:	e00c      	b.n	80018d0 <phExample_Init+0xa4>
 80018b6:	88fb      	ldrh	r3, [r7, #6]
 80018b8:	461a      	mov	r2, r3
 80018ba:	f44f 71bd 	mov.w	r1, #378	@ 0x17a
 80018be:	481d      	ldr	r0, [pc, #116]	@ (8001934 <phExample_Init+0x108>)
 80018c0:	f01b fabe 	bl	801ce40 <iprintf>
 80018c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001930 <phExample_Init+0x104>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f01b f9e2 	bl	801cc94 <fflush>

    /* Bailout on Type V (ISO 15693) detect 设置检测到Type V就退出 */
    status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_BAIL_OUT, PHAC_DISCLOOP_POS_BIT_MASK_V);
 80018d0:	4b15      	ldr	r3, [pc, #84]	@ (8001928 <phExample_Init+0xfc>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2210      	movs	r2, #16
 80018d6:	2186      	movs	r1, #134	@ 0x86
 80018d8:	4618      	mov	r0, r3
 80018da:	f005 f9f1 	bl	8006cc0 <phacDiscLoop_Sw_SetConfig>
 80018de:	4603      	mov	r3, r0
 80018e0:	80fb      	strh	r3, [r7, #6]
    CHECK_STATUS(status);
 80018e2:	88fb      	ldrh	r3, [r7, #6]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d00d      	beq.n	8001904 <phExample_Init+0xd8>
 80018e8:	88fb      	ldrh	r3, [r7, #6]
 80018ea:	461a      	mov	r2, r3
 80018ec:	f44f 71bf 	mov.w	r1, #382	@ 0x17e
 80018f0:	480e      	ldr	r0, [pc, #56]	@ (800192c <phExample_Init+0x100>)
 80018f2:	f01b faa5 	bl	801ce40 <iprintf>
 80018f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001930 <phExample_Init+0x104>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f01b f9c9 	bl	801cc94 <fflush>
 8001902:	e00c      	b.n	800191e <phExample_Init+0xf2>
 8001904:	88fb      	ldrh	r3, [r7, #6]
 8001906:	461a      	mov	r2, r3
 8001908:	f44f 71bf 	mov.w	r1, #382	@ 0x17e
 800190c:	4809      	ldr	r0, [pc, #36]	@ (8001934 <phExample_Init+0x108>)
 800190e:	f01b fa97 	bl	801ce40 <iprintf>
 8001912:	4b07      	ldr	r3, [pc, #28]	@ (8001930 <phExample_Init+0x104>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	4618      	mov	r0, r3
 800191a:	f01b f9bb 	bl	801cc94 <fflush>

    /* Read Chip Version */

    /* Return Success */
    return PH_ERR_SUCCESS;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20000204 	.word	0x20000204
 800192c:	0801edb4 	.word	0x0801edb4
 8001930:	2000002c 	.word	0x2000002c
 8001934:	0801ee1c 	.word	0x0801ee1c

08001938 <DisplayCardTypeInfo>:
 * \brief   This functions prints the Card type information like SLI, SLIX etc.
 * \param   *pUID   UID Pointer
 * \return  status  Returns the function status
 **********************************************************************************************/
static phStatus_t DisplayCardTypeInfo(uint8_t *pUID, uint8_t *pNTag5_State)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
    uint8_t bCardType;
    phStatus_t  status = PH_ERR_SUCCESS;
 8001942:	2300      	movs	r3, #0
 8001944:	81fb      	strh	r3, [r7, #14]

    /* Check for ISO15693 NXP TAG */
    if (pUID[ISO15693_UID_NXP_IDPOS] != ISO15693_NXP_TAG_ID)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	3306      	adds	r3, #6
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b04      	cmp	r3, #4
 800194e:	d00b      	beq.n	8001968 <DisplayCardTypeInfo+0x30>
    {
        /* Print Product type */
        DEBUG_PRINTF("\nProduct: Non NXP ISO15693 Tag Detected\n");
 8001950:	486f      	ldr	r0, [pc, #444]	@ (8001b10 <DisplayCardTypeInfo+0x1d8>)
 8001952:	f01b fae5 	bl	801cf20 <puts>
 8001956:	4b6f      	ldr	r3, [pc, #444]	@ (8001b14 <DisplayCardTypeInfo+0x1dc>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	4618      	mov	r0, r3
 800195e:	f01b f999 	bl	801cc94 <fflush>

        /* Return Status */
        return (PH_COMP_PAL_SLI15693 | PH_ERR_INVALID_DATA_PARAMS);
 8001962:	f44f 6322 	mov.w	r3, #2592	@ 0xa20
 8001966:	e0cf      	b.n	8001b08 <DisplayCardTypeInfo+0x1d0>
    }

    /* Read SLI Card type information from UID (Byte 4) */
    bCardType = ((pUID[ISO15693_MFGID_CARDSEL_IDPOS] & ISO15693_MFGID_CARDSEL_MSK) >> ISO15693_MFGID_CARDSEL_BITPOS);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3304      	adds	r3, #4
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	10db      	asrs	r3, r3, #3
 8001970:	b2db      	uxtb	r3, r3
 8001972:	f003 0303 	and.w	r3, r3, #3
 8001976:	737b      	strb	r3, [r7, #13]

    /* Switch based on Card Type(SLI/SLIX/SLIX2) */
    switch (bCardType)
 8001978:	7b7b      	ldrb	r3, [r7, #13]
 800197a:	2b03      	cmp	r3, #3
 800197c:	f200 80b6 	bhi.w	8001aec <DisplayCardTypeInfo+0x1b4>
 8001980:	a201      	add	r2, pc, #4	@ (adr r2, 8001988 <DisplayCardTypeInfo+0x50>)
 8001982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001986:	bf00      	nop
 8001988:	08001999 	.word	0x08001999
 800198c:	08001a79 	.word	0x08001a79
 8001990:	08001a09 	.word	0x08001a09
 8001994:	08001a8d 	.word	0x08001a8d
    {
    case ISO15693_MFGID_SLI_STATE:          /* SLI Card state */
        /* Switch based on Card Type(SLI/SLI-S/SLI-L) */
        switch (pUID[ISO15693_UID_CARDSEL_IDPOS])
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3305      	adds	r3, #5
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b03      	cmp	r3, #3
 80019a0:	d01a      	beq.n	80019d8 <DisplayCardTypeInfo+0xa0>
 80019a2:	2b03      	cmp	r3, #3
 80019a4:	dc22      	bgt.n	80019ec <DisplayCardTypeInfo+0xb4>
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d002      	beq.n	80019b0 <DisplayCardTypeInfo+0x78>
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d00a      	beq.n	80019c4 <DisplayCardTypeInfo+0x8c>
 80019ae:	e01d      	b.n	80019ec <DisplayCardTypeInfo+0xb4>
        {
        case ISO15693_UID_SLI_STATE:        /* SLI Card state */
            /* Print Product type */
            DEBUG_PRINTF("\nProduct: ICODE SLI\n");
 80019b0:	4859      	ldr	r0, [pc, #356]	@ (8001b18 <DisplayCardTypeInfo+0x1e0>)
 80019b2:	f01b fab5 	bl	801cf20 <puts>
 80019b6:	4b57      	ldr	r3, [pc, #348]	@ (8001b14 <DisplayCardTypeInfo+0x1dc>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	4618      	mov	r0, r3
 80019be:	f01b f969 	bl	801cc94 <fflush>
            break;
 80019c2:	e020      	b.n	8001a06 <DisplayCardTypeInfo+0xce>

        case ISO15693_UID_SLI_S_STATE:      /* SLI-S Card state */
            /* Print Product type */
            DEBUG_PRINTF("\nProduct: ICODE SLI-S\n");
 80019c4:	4855      	ldr	r0, [pc, #340]	@ (8001b1c <DisplayCardTypeInfo+0x1e4>)
 80019c6:	f01b faab 	bl	801cf20 <puts>
 80019ca:	4b52      	ldr	r3, [pc, #328]	@ (8001b14 <DisplayCardTypeInfo+0x1dc>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f01b f95f 	bl	801cc94 <fflush>
            break;
 80019d6:	e016      	b.n	8001a06 <DisplayCardTypeInfo+0xce>

        case ISO15693_UID_SLI_L_STATE:      /* SLI-L Card state */
            /* Print Product type */
            DEBUG_PRINTF("\nProduct: ICODE SLI-L\n");
 80019d8:	4851      	ldr	r0, [pc, #324]	@ (8001b20 <DisplayCardTypeInfo+0x1e8>)
 80019da:	f01b faa1 	bl	801cf20 <puts>
 80019de:	4b4d      	ldr	r3, [pc, #308]	@ (8001b14 <DisplayCardTypeInfo+0x1dc>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f01b f955 	bl	801cc94 <fflush>
            break;
 80019ea:	e00c      	b.n	8001a06 <DisplayCardTypeInfo+0xce>

        default:                            /* default */
            /* Print Product type */
            DEBUG_PRINTF("\nProduct: Unidentified Tag\n");
 80019ec:	484d      	ldr	r0, [pc, #308]	@ (8001b24 <DisplayCardTypeInfo+0x1ec>)
 80019ee:	f01b fa97 	bl	801cf20 <puts>
 80019f2:	4b48      	ldr	r3, [pc, #288]	@ (8001b14 <DisplayCardTypeInfo+0x1dc>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f01b f94b 	bl	801cc94 <fflush>
            /* Update status */
            status = (PH_COMP_PAL_SLI15693 | PH_ERR_INVALID_DATA_PARAMS);
 80019fe:	f44f 6322 	mov.w	r3, #2592	@ 0xa20
 8001a02:	81fb      	strh	r3, [r7, #14]
            break;
 8001a04:	bf00      	nop
        }
        break;
 8001a06:	e07e      	b.n	8001b06 <DisplayCardTypeInfo+0x1ce>

    case ISO15693_MFGID_SLIX_STATE:         /* SLIX Card state */
        /* Switch based on Card Type(SLIX/SLIX-S/SLIX-L) */
        switch (pUID[ISO15693_UID_CARDSEL_IDPOS])
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3305      	adds	r3, #5
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b03      	cmp	r3, #3
 8001a10:	d01a      	beq.n	8001a48 <DisplayCardTypeInfo+0x110>
 8001a12:	2b03      	cmp	r3, #3
 8001a14:	dc22      	bgt.n	8001a5c <DisplayCardTypeInfo+0x124>
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d002      	beq.n	8001a20 <DisplayCardTypeInfo+0xe8>
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d00a      	beq.n	8001a34 <DisplayCardTypeInfo+0xfc>
 8001a1e:	e01d      	b.n	8001a5c <DisplayCardTypeInfo+0x124>
        {
        case ISO15693_UID_SLIX_STATE:       /* SLIX Card state */
            /* Print Product type */
            DEBUG_PRINTF("\nProduct: ICODE SLIX\n");
 8001a20:	4841      	ldr	r0, [pc, #260]	@ (8001b28 <DisplayCardTypeInfo+0x1f0>)
 8001a22:	f01b fa7d 	bl	801cf20 <puts>
 8001a26:	4b3b      	ldr	r3, [pc, #236]	@ (8001b14 <DisplayCardTypeInfo+0x1dc>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f01b f931 	bl	801cc94 <fflush>
            break;
 8001a32:	e020      	b.n	8001a76 <DisplayCardTypeInfo+0x13e>

        case ISO15693_UID_SLIX_S_STATE:     /* SLIX-S Card state */
            /* Print Product type */
            DEBUG_PRINTF("\nProduct: ICODE SLIX-S\n");
 8001a34:	483d      	ldr	r0, [pc, #244]	@ (8001b2c <DisplayCardTypeInfo+0x1f4>)
 8001a36:	f01b fa73 	bl	801cf20 <puts>
 8001a3a:	4b36      	ldr	r3, [pc, #216]	@ (8001b14 <DisplayCardTypeInfo+0x1dc>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f01b f927 	bl	801cc94 <fflush>
            break;
 8001a46:	e016      	b.n	8001a76 <DisplayCardTypeInfo+0x13e>

        case ISO15693_UID_SLIX_L_STATE:     /* SLIX-L Card state */
            /* Print Product type */
            DEBUG_PRINTF("\nProduct: ICODE SLIX-L\n");
 8001a48:	4839      	ldr	r0, [pc, #228]	@ (8001b30 <DisplayCardTypeInfo+0x1f8>)
 8001a4a:	f01b fa69 	bl	801cf20 <puts>
 8001a4e:	4b31      	ldr	r3, [pc, #196]	@ (8001b14 <DisplayCardTypeInfo+0x1dc>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f01b f91d 	bl	801cc94 <fflush>
            break;
 8001a5a:	e00c      	b.n	8001a76 <DisplayCardTypeInfo+0x13e>

        default:                            /* default */
            /* Print Product type */
            DEBUG_PRINTF("\nProduct: Unidentified Tag\n");
 8001a5c:	4831      	ldr	r0, [pc, #196]	@ (8001b24 <DisplayCardTypeInfo+0x1ec>)
 8001a5e:	f01b fa5f 	bl	801cf20 <puts>
 8001a62:	4b2c      	ldr	r3, [pc, #176]	@ (8001b14 <DisplayCardTypeInfo+0x1dc>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f01b f913 	bl	801cc94 <fflush>
            /* Update status */
            status = (PH_COMP_PAL_SLI15693 | PH_ERR_INVALID_DATA_PARAMS);
 8001a6e:	f44f 6322 	mov.w	r3, #2592	@ 0xa20
 8001a72:	81fb      	strh	r3, [r7, #14]
            break;
 8001a74:	bf00      	nop
        }
        break;
 8001a76:	e046      	b.n	8001b06 <DisplayCardTypeInfo+0x1ce>

    case ISO15693_MFGID_SLIX2_STATE:        /* SLIX2 Card state */
        /* Print Product type */
        DEBUG_PRINTF("\nProduct: ICODE SLIX2\n");
 8001a78:	482e      	ldr	r0, [pc, #184]	@ (8001b34 <DisplayCardTypeInfo+0x1fc>)
 8001a7a:	f01b fa51 	bl	801cf20 <puts>
 8001a7e:	4b25      	ldr	r3, [pc, #148]	@ (8001b14 <DisplayCardTypeInfo+0x1dc>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f01b f905 	bl	801cc94 <fflush>
        break;
 8001a8a:	e03c      	b.n	8001b06 <DisplayCardTypeInfo+0x1ce>

    case ISO15693_MFGID_DNA_STATE:
        /* Switch based on Card Type(ICode DNA or NTag 5 Series) */
        switch ((pUID[ISO15693_MFGID_CARDSEL_IDPOS] & ISO15693_MFGID_DNA_CARDSEL_MSK) >> ISO15693_MFGID_DNA_CARDSEL_BITPOS)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3304      	adds	r3, #4
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	119b      	asrs	r3, r3, #6
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d002      	beq.n	8001aa2 <DisplayCardTypeInfo+0x16a>
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d00a      	beq.n	8001ab6 <DisplayCardTypeInfo+0x17e>
 8001aa0:	e016      	b.n	8001ad0 <DisplayCardTypeInfo+0x198>
        {
        case ISO15693_UID_ICODE_DNA_STATE:  /* ICode DNA Card state */
            /* Print Product type */
            DEBUG_PRINTF("\nProduct: ICODE DNA\n");
 8001aa2:	4825      	ldr	r0, [pc, #148]	@ (8001b38 <DisplayCardTypeInfo+0x200>)
 8001aa4:	f01b fa3c 	bl	801cf20 <puts>
 8001aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b14 <DisplayCardTypeInfo+0x1dc>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f01b f8f0 	bl	801cc94 <fflush>
            break;
 8001ab4:	e019      	b.n	8001aea <DisplayCardTypeInfo+0x1b2>

        case ISO15693_UID_NTAG_5_SERIES:    /* NTag 5 Series */
            /* Print Product type */
            DEBUG_PRINTF("\nProduct: NTag 5 Series\n");
 8001ab6:	4821      	ldr	r0, [pc, #132]	@ (8001b3c <DisplayCardTypeInfo+0x204>)
 8001ab8:	f01b fa32 	bl	801cf20 <puts>
 8001abc:	4b15      	ldr	r3, [pc, #84]	@ (8001b14 <DisplayCardTypeInfo+0x1dc>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f01b f8e6 	bl	801cc94 <fflush>
            *pNTag5_State = 1;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	2201      	movs	r2, #1
 8001acc:	701a      	strb	r2, [r3, #0]
            break;
 8001ace:	e00c      	b.n	8001aea <DisplayCardTypeInfo+0x1b2>

        default:                            /* default */
            /* Print Product type */
            DEBUG_PRINTF("\nProduct: Unidentified Tag\n");
 8001ad0:	4814      	ldr	r0, [pc, #80]	@ (8001b24 <DisplayCardTypeInfo+0x1ec>)
 8001ad2:	f01b fa25 	bl	801cf20 <puts>
 8001ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8001b14 <DisplayCardTypeInfo+0x1dc>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f01b f8d9 	bl	801cc94 <fflush>
            /* Update status */
            status = (PH_COMP_PAL_SLI15693 | PH_ERR_INVALID_DATA_PARAMS);
 8001ae2:	f44f 6322 	mov.w	r3, #2592	@ 0xa20
 8001ae6:	81fb      	strh	r3, [r7, #14]
            break;
 8001ae8:	bf00      	nop
        }
        break;
 8001aea:	e00c      	b.n	8001b06 <DisplayCardTypeInfo+0x1ce>

    default:                                /* default */
        /* Print Product type */
        DEBUG_PRINTF("\nProduct: Unidentified Tag\n");
 8001aec:	480d      	ldr	r0, [pc, #52]	@ (8001b24 <DisplayCardTypeInfo+0x1ec>)
 8001aee:	f01b fa17 	bl	801cf20 <puts>
 8001af2:	4b08      	ldr	r3, [pc, #32]	@ (8001b14 <DisplayCardTypeInfo+0x1dc>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f01b f8cb 	bl	801cc94 <fflush>
        /* Update status */
        status = (PH_COMP_PAL_SLI15693 | PH_ERR_INVALID_DATA_PARAMS);
 8001afe:	f44f 6322 	mov.w	r3, #2592	@ 0xa20
 8001b02:	81fb      	strh	r3, [r7, #14]
        break;
 8001b04:	bf00      	nop
    }

    /* Return Status */
    return status;
 8001b06:	89fb      	ldrh	r3, [r7, #14]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	0801f150 	.word	0x0801f150
 8001b14:	2000002c 	.word	0x2000002c
 8001b18:	0801f178 	.word	0x0801f178
 8001b1c:	0801f18c 	.word	0x0801f18c
 8001b20:	0801f1a4 	.word	0x0801f1a4
 8001b24:	0801f1bc 	.word	0x0801f1bc
 8001b28:	0801f1d8 	.word	0x0801f1d8
 8001b2c:	0801f1f0 	.word	0x0801f1f0
 8001b30:	0801f208 	.word	0x0801f208
 8001b34:	0801f220 	.word	0x0801f220
 8001b38:	0801f238 	.word	0x0801f238
 8001b3c:	0801f24c 	.word	0x0801f24c

08001b40 <ReadMultipleBlock_HighDataRate>:
 * \brief   This functions performs Read Multiple Blocks at higher data rates with NTag 5.
 * \param   *pUID   UID Pointer
 * \return  status  Returns the function status
 **********************************************************************************************/
static void ReadMultipleBlock_HighDataRate(uint8_t bNTag5_State)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	71fb      	strb	r3, [r7, #7]
            DEBUG_PRINTF("\nFailed to switch to selected higher baud rate using Parameter Select Exchange");
            DEBUG_PRINTF("\n!!!!!!!!!!!!Try with NTag 5 Cards supporting higer data rates!!!!!!!!!!!!");
        }
    }
#endif /* CUSTOM_HIGH_DATA_RATE_DEMO */
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <phhalHw_Pn5180_PollAndProcessIRQ>:
#endif /* NXPBUILD__PHHAL_HW_TARGET */


// 创建一个轮询函数来替代中断处理
phStatus_t phhalHw_Pn5180_PollAndProcessIRQ(phhalHw_Pn5180_DataParams_t * pDataParams)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
    uint32_t dwIrqStatus;
    phStatus_t status;

    // 读取IRQ状态
    status = phhalHw_Pn5180_ReadRegister(pDataParams, IRQ_STATUS, &dwIrqStatus);
 8001b60:	f107 0308 	add.w	r3, r7, #8
 8001b64:	461a      	mov	r2, r3
 8001b66:	2102      	movs	r1, #2
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f00a fe79 	bl	800c860 <phhalHw_Pn5180_ReadRegister>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	81fb      	strh	r3, [r7, #14]
    if (status != PH_ERR_SUCCESS) return status;
 8001b72:	89fb      	ldrh	r3, [r7, #14]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <phhalHw_Pn5180_PollAndProcessIRQ+0x24>
 8001b78:	89fb      	ldrh	r3, [r7, #14]
 8001b7a:	e016      	b.n	8001baa <phhalHw_Pn5180_PollAndProcessIRQ+0x52>

    // 如果有中断标志
    if (dwIrqStatus != 0)
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d012      	beq.n	8001ba8 <phhalHw_Pn5180_PollAndProcessIRQ+0x50>
    {
    	printf("IRQ detected: 0x%08X\n", dwIrqStatus);
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	4619      	mov	r1, r3
 8001b86:	480b      	ldr	r0, [pc, #44]	@ (8001bb4 <phhalHw_Pn5180_PollAndProcessIRQ+0x5c>)
 8001b88:	f01b f95a 	bl	801ce40 <iprintf>

        // 处理中断（原本在中断回调中的逻辑）
        if (pDataParams->pRFISRCallback != NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d003      	beq.n	8001b9c <phhalHw_Pn5180_PollAndProcessIRQ+0x44>
        {
            pDataParams->pRFISRCallback(pDataParams);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	4798      	blx	r3
        }

        // 清除已处理的中断标志
        phhalHw_Pn5180_WriteRegister(pDataParams, IRQ_SET_CLEAR, dwIrqStatus);
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	2103      	movs	r1, #3
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f00a fe4a 	bl	800c83c <phhalHw_Pn5180_WriteRegister>
    }

    return PH_ERR_SUCCESS;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	0801f264 	.word	0x0801f264

08001bb8 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8001c2c <MX_SPI3_Init+0x74>)
 8001bbe:	4a1c      	ldr	r2, [pc, #112]	@ (8001c30 <MX_SPI3_Init+0x78>)
 8001bc0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001bc2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c2c <MX_SPI3_Init+0x74>)
 8001bc4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001bc8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001bca:	4b18      	ldr	r3, [pc, #96]	@ (8001c2c <MX_SPI3_Init+0x74>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bd0:	4b16      	ldr	r3, [pc, #88]	@ (8001c2c <MX_SPI3_Init+0x74>)
 8001bd2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001bd6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bd8:	4b14      	ldr	r3, [pc, #80]	@ (8001c2c <MX_SPI3_Init+0x74>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bde:	4b13      	ldr	r3, [pc, #76]	@ (8001c2c <MX_SPI3_Init+0x74>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001be4:	4b11      	ldr	r3, [pc, #68]	@ (8001c2c <MX_SPI3_Init+0x74>)
 8001be6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bea:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001bec:	4b0f      	ldr	r3, [pc, #60]	@ (8001c2c <MX_SPI3_Init+0x74>)
 8001bee:	2218      	movs	r2, #24
 8001bf0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8001c2c <MX_SPI3_Init+0x74>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8001c2c <MX_SPI3_Init+0x74>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8001c2c <MX_SPI3_Init+0x74>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001c04:	4b09      	ldr	r3, [pc, #36]	@ (8001c2c <MX_SPI3_Init+0x74>)
 8001c06:	2207      	movs	r2, #7
 8001c08:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c0a:	4b08      	ldr	r3, [pc, #32]	@ (8001c2c <MX_SPI3_Init+0x74>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c10:	4b06      	ldr	r3, [pc, #24]	@ (8001c2c <MX_SPI3_Init+0x74>)
 8001c12:	2208      	movs	r2, #8
 8001c14:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001c16:	4805      	ldr	r0, [pc, #20]	@ (8001c2c <MX_SPI3_Init+0x74>)
 8001c18:	f017 f8e8 	bl	8018dec <HAL_SPI_Init>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001c22:	f7ff fa90 	bl	8001146 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	2000020c 	.word	0x2000020c
 8001c30:	40003c00 	.word	0x40003c00

08001c34 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08a      	sub	sp, #40	@ 0x28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a17      	ldr	r2, [pc, #92]	@ (8001cb0 <HAL_SPI_MspInit+0x7c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d128      	bne.n	8001ca8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c56:	4b17      	ldr	r3, [pc, #92]	@ (8001cb4 <HAL_SPI_MspInit+0x80>)
 8001c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c5a:	4a16      	ldr	r2, [pc, #88]	@ (8001cb4 <HAL_SPI_MspInit+0x80>)
 8001c5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c60:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c62:	4b14      	ldr	r3, [pc, #80]	@ (8001cb4 <HAL_SPI_MspInit+0x80>)
 8001c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c6a:	613b      	str	r3, [r7, #16]
 8001c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c6e:	4b11      	ldr	r3, [pc, #68]	@ (8001cb4 <HAL_SPI_MspInit+0x80>)
 8001c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c72:	4a10      	ldr	r2, [pc, #64]	@ (8001cb4 <HAL_SPI_MspInit+0x80>)
 8001c74:	f043 0304 	orr.w	r3, r3, #4
 8001c78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb4 <HAL_SPI_MspInit+0x80>)
 8001c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c7e:	f003 0304 	and.w	r3, r3, #4
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = PN5180_SCK_Pin|PN5180_MISO_Pin|PN5180_MOSI_Pin;
 8001c86:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001c8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c94:	2303      	movs	r3, #3
 8001c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c98:	2306      	movs	r3, #6
 8001c9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4805      	ldr	r0, [pc, #20]	@ (8001cb8 <HAL_SPI_MspInit+0x84>)
 8001ca4:	f015 fd52 	bl	801774c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001ca8:	bf00      	nop
 8001caa:	3728      	adds	r7, #40	@ 0x28
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40003c00 	.word	0x40003c00
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	48000800 	.word	0x48000800

08001cbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8001d00 <HAL_MspInit+0x44>)
 8001cc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cc6:	4a0e      	ldr	r2, [pc, #56]	@ (8001d00 <HAL_MspInit+0x44>)
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cce:	4b0c      	ldr	r3, [pc, #48]	@ (8001d00 <HAL_MspInit+0x44>)
 8001cd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	607b      	str	r3, [r7, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cda:	4b09      	ldr	r3, [pc, #36]	@ (8001d00 <HAL_MspInit+0x44>)
 8001cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cde:	4a08      	ldr	r2, [pc, #32]	@ (8001d00 <HAL_MspInit+0x44>)
 8001ce0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ce4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ce6:	4b06      	ldr	r3, [pc, #24]	@ (8001d00 <HAL_MspInit+0x44>)
 8001ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cee:	603b      	str	r3, [r7, #0]
 8001cf0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	40021000 	.word	0x40021000

08001d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d08:	bf00      	nop
 8001d0a:	e7fd      	b.n	8001d08 <NMI_Handler+0x4>

08001d0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d10:	bf00      	nop
 8001d12:	e7fd      	b.n	8001d10 <HardFault_Handler+0x4>

08001d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d18:	bf00      	nop
 8001d1a:	e7fd      	b.n	8001d18 <MemManage_Handler+0x4>

08001d1c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d20:	bf00      	nop
 8001d22:	e7fd      	b.n	8001d20 <BusFault_Handler+0x4>

08001d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d28:	bf00      	nop
 8001d2a:	e7fd      	b.n	8001d28 <UsageFault_Handler+0x4>

08001d2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d5a:	f015 fb23 	bl	80173a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
	...

08001d64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d68:	4802      	ldr	r0, [pc, #8]	@ (8001d74 <TIM2_IRQHandler+0x10>)
 8001d6a:	f017 ff43 	bl	8019bf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	200002c0 	.word	0x200002c0

08001d78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d7c:	4802      	ldr	r0, [pc, #8]	@ (8001d88 <USART1_IRQHandler+0x10>)
 8001d7e:	f019 f81f 	bl	801adc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000460 	.word	0x20000460

08001d8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  return 1;
 8001d90:	2301      	movs	r3, #1
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <_kill>:

int _kill(int pid, int sig)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001da6:	f01b f9fd 	bl	801d1a4 <__errno>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2216      	movs	r2, #22
 8001dae:	601a      	str	r2, [r3, #0]
  return -1;
 8001db0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <_exit>:

void _exit (int status)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f7ff ffe7 	bl	8001d9c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dce:	bf00      	nop
 8001dd0:	e7fd      	b.n	8001dce <_exit+0x12>

08001dd2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b086      	sub	sp, #24
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	60f8      	str	r0, [r7, #12]
 8001dda:	60b9      	str	r1, [r7, #8]
 8001ddc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dde:	2300      	movs	r3, #0
 8001de0:	617b      	str	r3, [r7, #20]
 8001de2:	e00a      	b.n	8001dfa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001de4:	f3af 8000 	nop.w
 8001de8:	4601      	mov	r1, r0
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	1c5a      	adds	r2, r3, #1
 8001dee:	60ba      	str	r2, [r7, #8]
 8001df0:	b2ca      	uxtb	r2, r1
 8001df2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	3301      	adds	r3, #1
 8001df8:	617b      	str	r3, [r7, #20]
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	dbf0      	blt.n	8001de4 <_read+0x12>
  }

  return len;
 8001e02:	687b      	ldr	r3, [r7, #4]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]
 8001e1c:	e009      	b.n	8001e32 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	1c5a      	adds	r2, r3, #1
 8001e22:	60ba      	str	r2, [r7, #8]
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f000 fb18 	bl	800245c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	dbf1      	blt.n	8001e1e <_write+0x12>
  }
  return len;
 8001e3a:	687b      	ldr	r3, [r7, #4]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3718      	adds	r7, #24
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <_close>:

int _close(int file)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e6c:	605a      	str	r2, [r3, #4]
  return 0;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <_isatty>:

int _isatty(int file)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e84:	2301      	movs	r3, #1
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b085      	sub	sp, #20
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	60f8      	str	r0, [r7, #12]
 8001e9a:	60b9      	str	r1, [r7, #8]
 8001e9c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3714      	adds	r7, #20
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eb4:	4a14      	ldr	r2, [pc, #80]	@ (8001f08 <_sbrk+0x5c>)
 8001eb6:	4b15      	ldr	r3, [pc, #84]	@ (8001f0c <_sbrk+0x60>)
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ec0:	4b13      	ldr	r3, [pc, #76]	@ (8001f10 <_sbrk+0x64>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d102      	bne.n	8001ece <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ec8:	4b11      	ldr	r3, [pc, #68]	@ (8001f10 <_sbrk+0x64>)
 8001eca:	4a12      	ldr	r2, [pc, #72]	@ (8001f14 <_sbrk+0x68>)
 8001ecc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ece:	4b10      	ldr	r3, [pc, #64]	@ (8001f10 <_sbrk+0x64>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d207      	bcs.n	8001eec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001edc:	f01b f962 	bl	801d1a4 <__errno>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	220c      	movs	r2, #12
 8001ee4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eea:	e009      	b.n	8001f00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eec:	4b08      	ldr	r3, [pc, #32]	@ (8001f10 <_sbrk+0x64>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ef2:	4b07      	ldr	r3, [pc, #28]	@ (8001f10 <_sbrk+0x64>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4413      	add	r3, r2
 8001efa:	4a05      	ldr	r2, [pc, #20]	@ (8001f10 <_sbrk+0x64>)
 8001efc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001efe:	68fb      	ldr	r3, [r7, #12]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	2000c000 	.word	0x2000c000
 8001f0c:	00000400 	.word	0x00000400
 8001f10:	20000270 	.word	0x20000270
 8001f14:	20001910 	.word	0x20001910

08001f18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f1c:	4b06      	ldr	r3, [pc, #24]	@ (8001f38 <SystemInit+0x20>)
 8001f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f22:	4a05      	ldr	r2, [pc, #20]	@ (8001f38 <SystemInit+0x20>)
 8001f24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b096      	sub	sp, #88	@ 0x58
 8001f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f42:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	605a      	str	r2, [r3, #4]
 8001f4c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f4e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	605a      	str	r2, [r3, #4]
 8001f58:	609a      	str	r2, [r3, #8]
 8001f5a:	60da      	str	r2, [r3, #12]
 8001f5c:	611a      	str	r2, [r3, #16]
 8001f5e:	615a      	str	r2, [r3, #20]
 8001f60:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f62:	1d3b      	adds	r3, r7, #4
 8001f64:	222c      	movs	r2, #44	@ 0x2c
 8001f66:	2100      	movs	r1, #0
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f01b f8c9 	bl	801d100 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f6e:	4b38      	ldr	r3, [pc, #224]	@ (8002050 <MX_TIM1_Init+0x114>)
 8001f70:	4a38      	ldr	r2, [pc, #224]	@ (8002054 <MX_TIM1_Init+0x118>)
 8001f72:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8001f74:	4b36      	ldr	r3, [pc, #216]	@ (8002050 <MX_TIM1_Init+0x114>)
 8001f76:	224f      	movs	r2, #79	@ 0x4f
 8001f78:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f7a:	4b35      	ldr	r3, [pc, #212]	@ (8002050 <MX_TIM1_Init+0x114>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 370-1;
 8001f80:	4b33      	ldr	r3, [pc, #204]	@ (8002050 <MX_TIM1_Init+0x114>)
 8001f82:	f240 1271 	movw	r2, #369	@ 0x171
 8001f86:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f88:	4b31      	ldr	r3, [pc, #196]	@ (8002050 <MX_TIM1_Init+0x114>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f8e:	4b30      	ldr	r3, [pc, #192]	@ (8002050 <MX_TIM1_Init+0x114>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f94:	4b2e      	ldr	r3, [pc, #184]	@ (8002050 <MX_TIM1_Init+0x114>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f9a:	482d      	ldr	r0, [pc, #180]	@ (8002050 <MX_TIM1_Init+0x114>)
 8001f9c:	f017 fc6c 	bl	8019878 <HAL_TIM_PWM_Init>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001fa6:	f7ff f8ce 	bl	8001146 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001faa:	2300      	movs	r3, #0
 8001fac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fb6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4824      	ldr	r0, [pc, #144]	@ (8002050 <MX_TIM1_Init+0x114>)
 8001fbe:	f018 fcdf 	bl	801a980 <HAL_TIMEx_MasterConfigSynchronization>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001fc8:	f7ff f8bd 	bl	8001146 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fcc:	2360      	movs	r3, #96	@ 0x60
 8001fce:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 185;
 8001fd0:	23b9      	movs	r3, #185	@ 0xb9
 8001fd2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001fe4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001fe8:	220c      	movs	r2, #12
 8001fea:	4619      	mov	r1, r3
 8001fec:	4818      	ldr	r0, [pc, #96]	@ (8002050 <MX_TIM1_Init+0x114>)
 8001fee:	f017 ff09 	bl	8019e04 <HAL_TIM_PWM_ConfigChannel>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001ff8:	f7ff f8a5 	bl	8001146 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002000:	2300      	movs	r3, #0
 8002002:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002004:	2300      	movs	r3, #0
 8002006:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002008:	2300      	movs	r3, #0
 800200a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800200c:	2300      	movs	r3, #0
 800200e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002010:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002014:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002016:	2300      	movs	r3, #0
 8002018:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800201a:	2300      	movs	r3, #0
 800201c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800201e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002022:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002028:	2300      	movs	r3, #0
 800202a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800202c:	1d3b      	adds	r3, r7, #4
 800202e:	4619      	mov	r1, r3
 8002030:	4807      	ldr	r0, [pc, #28]	@ (8002050 <MX_TIM1_Init+0x114>)
 8002032:	f018 fd0b 	bl	801aa4c <HAL_TIMEx_ConfigBreakDeadTime>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 800203c:	f7ff f883 	bl	8001146 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002040:	4803      	ldr	r0, [pc, #12]	@ (8002050 <MX_TIM1_Init+0x114>)
 8002042:	f000 f8e5 	bl	8002210 <HAL_TIM_MspPostInit>

}
 8002046:	bf00      	nop
 8002048:	3758      	adds	r7, #88	@ 0x58
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000274 	.word	0x20000274
 8002054:	40012c00 	.word	0x40012c00

08002058 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b088      	sub	sp, #32
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800205e:	f107 0310 	add.w	r3, r7, #16
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	605a      	str	r2, [r3, #4]
 8002068:	609a      	str	r2, [r3, #8]
 800206a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800206c:	1d3b      	adds	r3, r7, #4
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	605a      	str	r2, [r3, #4]
 8002074:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002076:	4b1e      	ldr	r3, [pc, #120]	@ (80020f0 <MX_TIM2_Init+0x98>)
 8002078:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800207c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800207e:	4b1c      	ldr	r3, [pc, #112]	@ (80020f0 <MX_TIM2_Init+0x98>)
 8002080:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8002084:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002086:	4b1a      	ldr	r3, [pc, #104]	@ (80020f0 <MX_TIM2_Init+0x98>)
 8002088:	2200      	movs	r2, #0
 800208a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 800208c:	4b18      	ldr	r3, [pc, #96]	@ (80020f0 <MX_TIM2_Init+0x98>)
 800208e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002092:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002094:	4b16      	ldr	r3, [pc, #88]	@ (80020f0 <MX_TIM2_Init+0x98>)
 8002096:	2200      	movs	r2, #0
 8002098:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800209a:	4b15      	ldr	r3, [pc, #84]	@ (80020f0 <MX_TIM2_Init+0x98>)
 800209c:	2280      	movs	r2, #128	@ 0x80
 800209e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020a0:	4813      	ldr	r0, [pc, #76]	@ (80020f0 <MX_TIM2_Init+0x98>)
 80020a2:	f017 fac9 	bl	8019638 <HAL_TIM_Base_Init>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80020ac:	f7ff f84b 	bl	8001146 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020b6:	f107 0310 	add.w	r3, r7, #16
 80020ba:	4619      	mov	r1, r3
 80020bc:	480c      	ldr	r0, [pc, #48]	@ (80020f0 <MX_TIM2_Init+0x98>)
 80020be:	f017 ffb5 	bl	801a02c <HAL_TIM_ConfigClockSource>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80020c8:	f7ff f83d 	bl	8001146 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020cc:	2300      	movs	r3, #0
 80020ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020d0:	2300      	movs	r3, #0
 80020d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020d4:	1d3b      	adds	r3, r7, #4
 80020d6:	4619      	mov	r1, r3
 80020d8:	4805      	ldr	r0, [pc, #20]	@ (80020f0 <MX_TIM2_Init+0x98>)
 80020da:	f018 fc51 	bl	801a980 <HAL_TIMEx_MasterConfigSynchronization>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80020e4:	f7ff f82f 	bl	8001146 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80020e8:	bf00      	nop
 80020ea:	3720      	adds	r7, #32
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	200002c0 	.word	0x200002c0

080020f4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020fa:	1d3b      	adds	r3, r7, #4
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002104:	4b14      	ldr	r3, [pc, #80]	@ (8002158 <MX_TIM6_Init+0x64>)
 8002106:	4a15      	ldr	r2, [pc, #84]	@ (800215c <MX_TIM6_Init+0x68>)
 8002108:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 800210a:	4b13      	ldr	r3, [pc, #76]	@ (8002158 <MX_TIM6_Init+0x64>)
 800210c:	224f      	movs	r2, #79	@ 0x4f
 800210e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002110:	4b11      	ldr	r3, [pc, #68]	@ (8002158 <MX_TIM6_Init+0x64>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1;
 8002116:	4b10      	ldr	r3, [pc, #64]	@ (8002158 <MX_TIM6_Init+0x64>)
 8002118:	2201      	movs	r2, #1
 800211a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800211c:	4b0e      	ldr	r3, [pc, #56]	@ (8002158 <MX_TIM6_Init+0x64>)
 800211e:	2200      	movs	r2, #0
 8002120:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002122:	480d      	ldr	r0, [pc, #52]	@ (8002158 <MX_TIM6_Init+0x64>)
 8002124:	f017 fa88 	bl	8019638 <HAL_TIM_Base_Init>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800212e:	f7ff f80a 	bl	8001146 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002132:	2300      	movs	r3, #0
 8002134:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002136:	2300      	movs	r3, #0
 8002138:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800213a:	1d3b      	adds	r3, r7, #4
 800213c:	4619      	mov	r1, r3
 800213e:	4806      	ldr	r0, [pc, #24]	@ (8002158 <MX_TIM6_Init+0x64>)
 8002140:	f018 fc1e 	bl	801a980 <HAL_TIMEx_MasterConfigSynchronization>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800214a:	f7fe fffc 	bl	8001146 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800214e:	bf00      	nop
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	2000030c 	.word	0x2000030c
 800215c:	40001000 	.word	0x40001000

08002160 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a0a      	ldr	r2, [pc, #40]	@ (8002198 <HAL_TIM_PWM_MspInit+0x38>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d10b      	bne.n	800218a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002172:	4b0a      	ldr	r3, [pc, #40]	@ (800219c <HAL_TIM_PWM_MspInit+0x3c>)
 8002174:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002176:	4a09      	ldr	r2, [pc, #36]	@ (800219c <HAL_TIM_PWM_MspInit+0x3c>)
 8002178:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800217c:	6613      	str	r3, [r2, #96]	@ 0x60
 800217e:	4b07      	ldr	r3, [pc, #28]	@ (800219c <HAL_TIM_PWM_MspInit+0x3c>)
 8002180:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002182:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800218a:	bf00      	nop
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	40012c00 	.word	0x40012c00
 800219c:	40021000 	.word	0x40021000

080021a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021b0:	d114      	bne.n	80021dc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021b2:	4b15      	ldr	r3, [pc, #84]	@ (8002208 <HAL_TIM_Base_MspInit+0x68>)
 80021b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b6:	4a14      	ldr	r2, [pc, #80]	@ (8002208 <HAL_TIM_Base_MspInit+0x68>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80021be:	4b12      	ldr	r3, [pc, #72]	@ (8002208 <HAL_TIM_Base_MspInit+0x68>)
 80021c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 80021ca:	2200      	movs	r2, #0
 80021cc:	2102      	movs	r1, #2
 80021ce:	201c      	movs	r0, #28
 80021d0:	f015 fa07 	bl	80175e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021d4:	201c      	movs	r0, #28
 80021d6:	f015 fa20 	bl	801761a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80021da:	e010      	b.n	80021fe <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM6)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a0a      	ldr	r2, [pc, #40]	@ (800220c <HAL_TIM_Base_MspInit+0x6c>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d10b      	bne.n	80021fe <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80021e6:	4b08      	ldr	r3, [pc, #32]	@ (8002208 <HAL_TIM_Base_MspInit+0x68>)
 80021e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ea:	4a07      	ldr	r2, [pc, #28]	@ (8002208 <HAL_TIM_Base_MspInit+0x68>)
 80021ec:	f043 0310 	orr.w	r3, r3, #16
 80021f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80021f2:	4b05      	ldr	r3, [pc, #20]	@ (8002208 <HAL_TIM_Base_MspInit+0x68>)
 80021f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f6:	f003 0310 	and.w	r3, r3, #16
 80021fa:	60bb      	str	r3, [r7, #8]
 80021fc:	68bb      	ldr	r3, [r7, #8]
}
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40021000 	.word	0x40021000
 800220c:	40001000 	.word	0x40001000

08002210 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b088      	sub	sp, #32
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002218:	f107 030c 	add.w	r3, r7, #12
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a12      	ldr	r2, [pc, #72]	@ (8002278 <HAL_TIM_MspPostInit+0x68>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d11d      	bne.n	800226e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002232:	4b12      	ldr	r3, [pc, #72]	@ (800227c <HAL_TIM_MspPostInit+0x6c>)
 8002234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002236:	4a11      	ldr	r2, [pc, #68]	@ (800227c <HAL_TIM_MspPostInit+0x6c>)
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800223e:	4b0f      	ldr	r3, [pc, #60]	@ (800227c <HAL_TIM_MspPostInit+0x6c>)
 8002240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	60bb      	str	r3, [r7, #8]
 8002248:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Beep_Pin;
 800224a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800224e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002250:	2302      	movs	r3, #2
 8002252:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002254:	2302      	movs	r3, #2
 8002256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002258:	2300      	movs	r3, #0
 800225a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800225c:	2301      	movs	r3, #1
 800225e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Beep_GPIO_Port, &GPIO_InitStruct);
 8002260:	f107 030c 	add.w	r3, r7, #12
 8002264:	4619      	mov	r1, r3
 8002266:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800226a:	f015 fa6f 	bl	801774c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800226e:	bf00      	nop
 8002270:	3720      	adds	r7, #32
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40012c00 	.word	0x40012c00
 800227c:	40021000 	.word	0x40021000

08002280 <delay_us>:
}

/* USER CODE BEGIN 1 */
/* TIM6 是16位的计数器（65535），这里我们us级延时最大到60000 */
void delay_us(uint16_t us)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	80fb      	strh	r3, [r7, #6]
	uint16_t differ = 60000-us;
 800228a:	88fb      	ldrh	r3, [r7, #6]
 800228c:	f1c3 437f 	rsb	r3, r3, #4278190080	@ 0xff000000
 8002290:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 8002294:	f503 436a 	add.w	r3, r3, #59904	@ 0xea00
 8002298:	3360      	adds	r3, #96	@ 0x60
 800229a:	81fb      	strh	r3, [r7, #14]

	// 打开定时器
	HAL_TIM_Base_Start(&htim6);
 800229c:	480b      	ldr	r0, [pc, #44]	@ (80022cc <delay_us+0x4c>)
 800229e:	f017 fa23 	bl	80196e8 <HAL_TIM_Base_Start>

	// 设置CNT每次重置后的初始值，然后再向上计数
	__HAL_TIM_SET_COUNTER(&htim6, differ);
 80022a2:	4b0a      	ldr	r3, [pc, #40]	@ (80022cc <delay_us+0x4c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	89fa      	ldrh	r2, [r7, #14]
 80022a8:	625a      	str	r2, [r3, #36]	@ 0x24

	while( differ < 60000 )
 80022aa:	e003      	b.n	80022b4 <delay_us+0x34>
	{
		// 一直读CNT的值，检查是否过了us时间
		differ = __HAL_TIM_GET_COUNTER(&htim6);
 80022ac:	4b07      	ldr	r3, [pc, #28]	@ (80022cc <delay_us+0x4c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b2:	81fb      	strh	r3, [r7, #14]
	while( differ < 60000 )
 80022b4:	89fb      	ldrh	r3, [r7, #14]
 80022b6:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d9f6      	bls.n	80022ac <delay_us+0x2c>
	}

	// 关闭定时器
	HAL_TIM_Base_Stop(&htim6);
 80022be:	4803      	ldr	r0, [pc, #12]	@ (80022cc <delay_us+0x4c>)
 80022c0:	f017 fa5e 	bl	8019780 <HAL_TIM_Base_Stop>
}
 80022c4:	bf00      	nop
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	2000030c 	.word	0x2000030c

080022d0 <beep_start>:

/* 让蜂鸣器响 times 次，每次 interval 秒*/
void beep_start(uint8_t times, uint16_t interval)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	460a      	mov	r2, r1
 80022da:	71fb      	strb	r3, [r7, #7]
 80022dc:	4613      	mov	r3, r2
 80022de:	80bb      	strh	r3, [r7, #4]
	while( times -- )
 80022e0:	e019      	b.n	8002316 <beep_start+0x46>
	{
		/* Start buzzer:通过 定时器 TIM1 的通道 4（TIM_CHANNEL_4） 产生 PWM 信号，从而让蜂鸣器响起来 */
		if( HAL_TIM_PWM_Start( &htim1, TIM_CHANNEL_4) != HAL_OK )
 80022e2:	210c      	movs	r1, #12
 80022e4:	4811      	ldr	r0, [pc, #68]	@ (800232c <beep_start+0x5c>)
 80022e6:	f017 fb1f 	bl	8019928 <HAL_TIM_PWM_Start>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <beep_start+0x24>
		{
			/* Start Error */
			Error_Handler();
 80022f0:	f7fe ff29 	bl	8001146 <Error_Handler>
		}
		/* 让蜂鸣器 响 interval 毫秒 */
		HAL_Delay( interval);
 80022f4:	88bb      	ldrh	r3, [r7, #4]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f015 f874 	bl	80173e4 <HAL_Delay>

		/* Stop buzzer：静音蜂鸣器 */
		if( HAL_TIM_PWM_Stop( &htim1, TIM_CHANNEL_4 ) != HAL_OK )
 80022fc:	210c      	movs	r1, #12
 80022fe:	480b      	ldr	r0, [pc, #44]	@ (800232c <beep_start+0x5c>)
 8002300:	f017 fbf0 	bl	8019ae4 <HAL_TIM_PWM_Stop>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <beep_start+0x3e>
		{
			/* Start Error */
			Error_Handler();
 800230a:	f7fe ff1c 	bl	8001146 <Error_Handler>
		}
		HAL_Delay(interval);
 800230e:	88bb      	ldrh	r3, [r7, #4]
 8002310:	4618      	mov	r0, r3
 8002312:	f015 f867 	bl	80173e4 <HAL_Delay>
	while( times -- )
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	1e5a      	subs	r2, r3, #1
 800231a:	71fa      	strb	r2, [r7, #7]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1e0      	bne.n	80022e2 <beep_start+0x12>
	}
}
 8002320:	bf00      	nop
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20000274 	.word	0x20000274

08002330 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002334:	4b16      	ldr	r3, [pc, #88]	@ (8002390 <MX_USART1_UART_Init+0x60>)
 8002336:	4a17      	ldr	r2, [pc, #92]	@ (8002394 <MX_USART1_UART_Init+0x64>)
 8002338:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800233a:	4b15      	ldr	r3, [pc, #84]	@ (8002390 <MX_USART1_UART_Init+0x60>)
 800233c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002340:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002342:	4b13      	ldr	r3, [pc, #76]	@ (8002390 <MX_USART1_UART_Init+0x60>)
 8002344:	2200      	movs	r2, #0
 8002346:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002348:	4b11      	ldr	r3, [pc, #68]	@ (8002390 <MX_USART1_UART_Init+0x60>)
 800234a:	2200      	movs	r2, #0
 800234c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800234e:	4b10      	ldr	r3, [pc, #64]	@ (8002390 <MX_USART1_UART_Init+0x60>)
 8002350:	2200      	movs	r2, #0
 8002352:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002354:	4b0e      	ldr	r3, [pc, #56]	@ (8002390 <MX_USART1_UART_Init+0x60>)
 8002356:	220c      	movs	r2, #12
 8002358:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800235a:	4b0d      	ldr	r3, [pc, #52]	@ (8002390 <MX_USART1_UART_Init+0x60>)
 800235c:	2200      	movs	r2, #0
 800235e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002360:	4b0b      	ldr	r3, [pc, #44]	@ (8002390 <MX_USART1_UART_Init+0x60>)
 8002362:	2200      	movs	r2, #0
 8002364:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002366:	4b0a      	ldr	r3, [pc, #40]	@ (8002390 <MX_USART1_UART_Init+0x60>)
 8002368:	2200      	movs	r2, #0
 800236a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800236c:	4b08      	ldr	r3, [pc, #32]	@ (8002390 <MX_USART1_UART_Init+0x60>)
 800236e:	2200      	movs	r2, #0
 8002370:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002372:	4807      	ldr	r0, [pc, #28]	@ (8002390 <MX_USART1_UART_Init+0x60>)
 8002374:	f018 fc00 	bl	801ab78 <HAL_UART_Init>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800237e:	f7fe fee2 	bl	8001146 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_UART_Receive_IT(&huart1, &s_uart1_rxch, 1);
 8002382:	2201      	movs	r2, #1
 8002384:	4904      	ldr	r1, [pc, #16]	@ (8002398 <MX_USART1_UART_Init+0x68>)
 8002386:	4802      	ldr	r0, [pc, #8]	@ (8002390 <MX_USART1_UART_Init+0x60>)
 8002388:	f018 fcce 	bl	801ad28 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_Init 2 */

}
 800238c:	bf00      	nop
 800238e:	bd80      	pop	{r7, pc}
 8002390:	20000460 	.word	0x20000460
 8002394:	40013800 	.word	0x40013800
 8002398:	20000358 	.word	0x20000358

0800239c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b0a0      	sub	sp, #128	@ 0x80
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	60da      	str	r2, [r3, #12]
 80023b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023b4:	f107 0310 	add.w	r3, r7, #16
 80023b8:	225c      	movs	r2, #92	@ 0x5c
 80023ba:	2100      	movs	r1, #0
 80023bc:	4618      	mov	r0, r3
 80023be:	f01a fe9f 	bl	801d100 <memset>
  if(uartHandle->Instance==USART1)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a23      	ldr	r2, [pc, #140]	@ (8002454 <HAL_UART_MspInit+0xb8>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d13f      	bne.n	800244c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80023cc:	2301      	movs	r3, #1
 80023ce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80023d0:	2300      	movs	r3, #0
 80023d2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023d4:	f107 0310 	add.w	r3, r7, #16
 80023d8:	4618      	mov	r0, r3
 80023da:	f016 f9fd 	bl	80187d8 <HAL_RCCEx_PeriphCLKConfig>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80023e4:	f7fe feaf 	bl	8001146 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002458 <HAL_UART_MspInit+0xbc>)
 80023ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023ec:	4a1a      	ldr	r2, [pc, #104]	@ (8002458 <HAL_UART_MspInit+0xbc>)
 80023ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023f2:	6613      	str	r3, [r2, #96]	@ 0x60
 80023f4:	4b18      	ldr	r3, [pc, #96]	@ (8002458 <HAL_UART_MspInit+0xbc>)
 80023f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002400:	4b15      	ldr	r3, [pc, #84]	@ (8002458 <HAL_UART_MspInit+0xbc>)
 8002402:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002404:	4a14      	ldr	r2, [pc, #80]	@ (8002458 <HAL_UART_MspInit+0xbc>)
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800240c:	4b12      	ldr	r3, [pc, #72]	@ (8002458 <HAL_UART_MspInit+0xbc>)
 800240e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002418:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800241c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241e:	2302      	movs	r3, #2
 8002420:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	2300      	movs	r3, #0
 8002424:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002426:	2303      	movs	r3, #3
 8002428:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800242a:	2307      	movs	r3, #7
 800242c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002432:	4619      	mov	r1, r3
 8002434:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002438:	f015 f988 	bl	801774c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800243c:	2200      	movs	r2, #0
 800243e:	2100      	movs	r1, #0
 8002440:	2025      	movs	r0, #37	@ 0x25
 8002442:	f015 f8ce 	bl	80175e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002446:	2025      	movs	r0, #37	@ 0x25
 8002448:	f015 f8e7 	bl	801761a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800244c:	bf00      	nop
 800244e:	3780      	adds	r7, #128	@ 0x80
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40013800 	.word	0x40013800
 8002458:	40021000 	.word	0x40021000

0800245c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define	PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002464:	1d39      	adds	r1, r7, #4
 8002466:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800246a:	2201      	movs	r2, #1
 800246c:	4803      	ldr	r0, [pc, #12]	@ (800247c <__io_putchar+0x20>)
 800246e:	f018 fbd1 	bl	801ac14 <HAL_UART_Transmit>
	return ch;
 8002472:	687b      	ldr	r3, [r7, #4]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	20000460 	.word	0x20000460

08002480 <HAL_UART_RxCpltCallback>:

/* 串口->cpu，串口中断回调函数，要是 g_uart1_rxbuf 还没有满，就将中断收到的1字节数据 s_uart1_rxch 存储到 g_uart1_rxbuf 中，并计数+1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
	if( huart->Instance == USART1 )
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a0d      	ldr	r2, [pc, #52]	@ (80024c4 <HAL_UART_RxCpltCallback+0x44>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d113      	bne.n	80024ba <HAL_UART_RxCpltCallback+0x3a>
	{
		 printf("UART1 received: %s\r\n", g_uart1_rxbuf); // 调试打印
 8002492:	490d      	ldr	r1, [pc, #52]	@ (80024c8 <HAL_UART_RxCpltCallback+0x48>)
 8002494:	480d      	ldr	r0, [pc, #52]	@ (80024cc <HAL_UART_RxCpltCallback+0x4c>)
 8002496:	f01a fcd3 	bl	801ce40 <iprintf>
		/* buf 还有空间 */
		if( g_uart1_bytes < sizeof(g_uart1_rxbuf) )
		{
			g_uart1_rxbuf[g_uart1_bytes++] = s_uart1_rxch;
 800249a:	4b0d      	ldr	r3, [pc, #52]	@ (80024d0 <HAL_UART_RxCpltCallback+0x50>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	1c5a      	adds	r2, r3, #1
 80024a0:	b2d1      	uxtb	r1, r2
 80024a2:	4a0b      	ldr	r2, [pc, #44]	@ (80024d0 <HAL_UART_RxCpltCallback+0x50>)
 80024a4:	7011      	strb	r1, [r2, #0]
 80024a6:	461a      	mov	r2, r3
 80024a8:	4b0a      	ldr	r3, [pc, #40]	@ (80024d4 <HAL_UART_RxCpltCallback+0x54>)
 80024aa:	7819      	ldrb	r1, [r3, #0]
 80024ac:	4b06      	ldr	r3, [pc, #24]	@ (80024c8 <HAL_UART_RxCpltCallback+0x48>)
 80024ae:	5499      	strb	r1, [r3, r2]
		}
		/* 使能下一次中断接收 */
		HAL_UART_Receive_IT(&huart1, &s_uart1_rxch, 1);
 80024b0:	2201      	movs	r2, #1
 80024b2:	4908      	ldr	r1, [pc, #32]	@ (80024d4 <HAL_UART_RxCpltCallback+0x54>)
 80024b4:	4808      	ldr	r0, [pc, #32]	@ (80024d8 <HAL_UART_RxCpltCallback+0x58>)
 80024b6:	f018 fc37 	bl	801ad28 <HAL_UART_Receive_IT>
	}
}
 80024ba:	bf00      	nop
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40013800 	.word	0x40013800
 80024c8:	2000035c 	.word	0x2000035c
 80024cc:	0801f27c 	.word	0x0801f27c
 80024d0:	2000045c 	.word	0x2000045c
 80024d4:	20000358 	.word	0x20000358
 80024d8:	20000460 	.word	0x20000460

080024dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80024dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002514 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024e0:	f7ff fd1a 	bl	8001f18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024e4:	480c      	ldr	r0, [pc, #48]	@ (8002518 <LoopForever+0x6>)
  ldr r1, =_edata
 80024e6:	490d      	ldr	r1, [pc, #52]	@ (800251c <LoopForever+0xa>)
  ldr r2, =_sidata
 80024e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002520 <LoopForever+0xe>)
  movs r3, #0
 80024ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024ec:	e002      	b.n	80024f4 <LoopCopyDataInit>

080024ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024f2:	3304      	adds	r3, #4

080024f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024f8:	d3f9      	bcc.n	80024ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002524 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024fc:	4c0a      	ldr	r4, [pc, #40]	@ (8002528 <LoopForever+0x16>)
  movs r3, #0
 80024fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002500:	e001      	b.n	8002506 <LoopFillZerobss>

08002502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002504:	3204      	adds	r2, #4

08002506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002508:	d3fb      	bcc.n	8002502 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800250a:	f01a fe51 	bl	801d1b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800250e:	f7fe fdab 	bl	8001068 <main>

08002512 <LoopForever>:

LoopForever:
    b LoopForever
 8002512:	e7fe      	b.n	8002512 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002514:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8002518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800251c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002520:	080206ec 	.word	0x080206ec
  ldr r2, =_sbss
 8002524:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002528:	2000190c 	.word	0x2000190c

0800252c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800252c:	e7fe      	b.n	800252c <ADC1_IRQHandler>
	...

08002530 <phApp_Print_Buff>:
* This function will print buffer content
* \param   *pBuff   Buffer Reference
* \param   num      data size to be print
*/
void phApp_Print_Buff(uint8_t *pBuff, uint8_t num)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	70fb      	strb	r3, [r7, #3]
    uint32_t    i;

    for(i = 0; i < num; i++)
 800253c:	2300      	movs	r3, #0
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	e010      	b.n	8002564 <phApp_Print_Buff+0x34>
    {
        DEBUG_PRINTF(" %02X",pBuff[i]);
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4413      	add	r3, r2
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	4619      	mov	r1, r3
 800254c:	480a      	ldr	r0, [pc, #40]	@ (8002578 <phApp_Print_Buff+0x48>)
 800254e:	f01a fc77 	bl	801ce40 <iprintf>
 8002552:	4b0a      	ldr	r3, [pc, #40]	@ (800257c <phApp_Print_Buff+0x4c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	4618      	mov	r0, r3
 800255a:	f01a fb9b 	bl	801cc94 <fflush>
    for(i = 0; i < num; i++)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	3301      	adds	r3, #1
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	78fb      	ldrb	r3, [r7, #3]
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	429a      	cmp	r2, r3
 800256a:	d3ea      	bcc.n	8002542 <phApp_Print_Buff+0x12>
    }
}
 800256c:	bf00      	nop
 800256e:	bf00      	nop
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	0801f334 	.word	0x0801f334
 800257c:	2000002c 	.word	0x2000002c

08002580 <phApp_Comp_Init>:

/**
* This function will initialize Reader LIbrary Component
*/
phStatus_t phApp_Comp_Init(void * pDiscLoopParams)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
    phStatus_t wStatus = PH_ERR_SUCCESS;
 8002588:	2300      	movs	r3, #0
 800258a:	81fb      	strh	r3, [r7, #14]
#if defined(NXPBUILD__PHPAL_I18092MPI_SW) || defined(NXPBUILD__PHPAL_I18092MT_SW) || \
    defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE) || \
    defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS) || \
    defined(NXPBUILD__PHAC_DISCLOOP_TYPEF212_P2P_ACTIVE) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE)

    phacDiscLoop_Sw_DataParams_t * pDiscLoop = (phacDiscLoop_Sw_DataParams_t *)pDiscLoopParams;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	60bb      	str	r3, [r7, #8]
    /* Assign ATR response for Type F */
    pDiscLoop->sTypeFTargetInfo.sTypeF_P2P.pAtrRes   = aResponseHolder;
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS
    /* Assign ATS buffer for Type A */
    pDiscLoop->sTypeATargetInfo.sTypeA_I3P4.pAts     = aResponseHolder;
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	4a04      	ldr	r2, [pc, #16]	@ (80025a4 <phApp_Comp_Init+0x24>)
 8002594:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */
#endif /* NXPBUILD__PHAC_DISCLOOP_SW */
    return wStatus;
 8002596:	89fb      	ldrh	r3, [r7, #14]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	200004e8 	.word	0x200004e8

080025a8 <phApp_Configure_IRQ>:

phStatus_t phApp_Configure_IRQ()
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
	/* 轮询模式不需要配置IRQ，直接返回成功 */
    return PH_ERR_SUCCESS;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <phCryptoRng_Sw_Init>:

static const uint8_t PH_CRYPTOSYM_SW_CONST_ROM phCryptoRng_Sw_BlockCipherDf_DefaultKey[PHCRYPTORNG_SW_KEYLEN] =
{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F};

phStatus_t phCryptoRng_Sw_Init(phCryptoRng_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pCryptoDataParams)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	460b      	mov	r3, r1
 80025c2:	607a      	str	r2, [r7, #4]
 80025c4:	817b      	strh	r3, [r7, #10]
    if(sizeof(phCryptoRng_Sw_DataParams_t) != wSizeOfDataParams)
 80025c6:	897b      	ldrh	r3, [r7, #10]
 80025c8:	2b20      	cmp	r3, #32
 80025ca:	d002      	beq.n	80025d2 <phCryptoRng_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTORNG);
 80025cc:	f24e 4320 	movw	r3, #58400	@ 0xe420
 80025d0:	e01b      	b.n	800260a <phCryptoRng_Sw_Init+0x52>
    }
    PH_ASSERT_NULL (pDataParams);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <phCryptoRng_Sw_Init+0x24>
 80025d8:	2321      	movs	r3, #33	@ 0x21
 80025da:	e016      	b.n	800260a <phCryptoRng_Sw_Init+0x52>
    PH_ASSERT_NULL (pCryptoDataParams);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <phCryptoRng_Sw_Init+0x2e>
 80025e2:	2321      	movs	r3, #33	@ 0x21
 80025e4:	e011      	b.n	800260a <phCryptoRng_Sw_Init+0x52>

    /* Init. private data */
    pDataParams->wId = PH_COMP_CRYPTORNG | PH_CRYPTORNG_SW_ID;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f24e 4201 	movw	r2, #58369	@ 0xe401
 80025ec:	801a      	strh	r2, [r3, #0]
    pDataParams->pCryptoDataParams = pCryptoDataParams;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	605a      	str	r2, [r3, #4]
    (void) memset(pDataParams->V, 0, (size_t) sizeof(pDataParams->V));
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	3308      	adds	r3, #8
 80025f8:	2210      	movs	r2, #16
 80025fa:	2100      	movs	r1, #0
 80025fc:	4618      	mov	r0, r3
 80025fe:	f01a fd7f 	bl	801d100 <memset>
    pDataParams->bState = PHCRYPTORNG_SW_STATE_INIT;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	771a      	strb	r2, [r3, #28]

    return PH_ERR_SUCCESS;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
	...

08002614 <phCryptoRng_Sw_Seed>:

phStatus_t phCryptoRng_Sw_Seed(phCryptoRng_Sw_DataParams_t * pDataParams, uint8_t * pSeed, uint8_t bSeedLength)
{
 8002614:	b5b0      	push	{r4, r5, r7, lr}
 8002616:	b092      	sub	sp, #72	@ 0x48
 8002618:	af04      	add	r7, sp, #16
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	4613      	mov	r3, r2
 8002620:	71fb      	strb	r3, [r7, #7]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aSeed[PHCRYPTORNG_SW_SEEDLEN];

    /* we do not set the seed to 0 as we like randomness in here... */

    if (bSeedLength > PHCRYPTORNG_SW_SEEDLEN)
 8002622:	79fb      	ldrb	r3, [r7, #7]
 8002624:	2b20      	cmp	r3, #32
 8002626:	d90e      	bls.n	8002646 <phCryptoRng_Sw_Seed+0x32>
    {
        (void) memcpy(aSeed, pSeed, PHCRYPTORNG_SW_SEEDLEN);
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	f107 0414 	add.w	r4, r7, #20
 800262e:	461d      	mov	r5, r3
 8002630:	6828      	ldr	r0, [r5, #0]
 8002632:	6869      	ldr	r1, [r5, #4]
 8002634:	68aa      	ldr	r2, [r5, #8]
 8002636:	68eb      	ldr	r3, [r5, #12]
 8002638:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800263a:	6928      	ldr	r0, [r5, #16]
 800263c:	6969      	ldr	r1, [r5, #20]
 800263e:	69aa      	ldr	r2, [r5, #24]
 8002640:	69eb      	ldr	r3, [r5, #28]
 8002642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002644:	e006      	b.n	8002654 <phCryptoRng_Sw_Seed+0x40>
    }
    else
    {
        (void) memcpy(aSeed, pSeed, bSeedLength);
 8002646:	79fa      	ldrb	r2, [r7, #7]
 8002648:	f107 0314 	add.w	r3, r7, #20
 800264c:	68b9      	ldr	r1, [r7, #8]
 800264e:	4618      	mov	r0, r3
 8002650:	f01a fdd5 	bl	801d1fe <memcpy>
    }

    if (pDataParams->bState == PHCRYPTORNG_SW_STATE_INIT)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	7f1b      	ldrb	r3, [r3, #28]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10f      	bne.n	800267c <phCryptoRng_Sw_Seed+0x68>
    {
        statusTmp = phCryptoRng_Sw_Instantiate(
 800265c:	f107 0114 	add.w	r1, r7, #20
 8002660:	2300      	movs	r3, #0
 8002662:	9302      	str	r3, [sp, #8]
 8002664:	2300      	movs	r3, #0
 8002666:	9301      	str	r3, [sp, #4]
 8002668:	2300      	movs	r3, #0
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	2300      	movs	r3, #0
 800266e:	2220      	movs	r2, #32
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 f8a9 	bl	80027c8 <phCryptoRng_Sw_Instantiate>
 8002676:	4603      	mov	r3, r0
 8002678:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800267a:	e00a      	b.n	8002692 <phCryptoRng_Sw_Seed+0x7e>
            NULL,
            0);
    }
    else
    {
        statusTmp = phCryptoRng_Sw_Reseed(
 800267c:	f107 0114 	add.w	r1, r7, #20
 8002680:	2300      	movs	r3, #0
 8002682:	9300      	str	r3, [sp, #0]
 8002684:	2300      	movs	r3, #0
 8002686:	2220      	movs	r2, #32
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 f914 	bl	80028b6 <phCryptoRng_Sw_Reseed>
 800268e:	4603      	mov	r3, r0
 8002690:	86fb      	strh	r3, [r7, #54]	@ 0x36
            (uint16_t)sizeof(aSeed),
            NULL,
            0);
    }

    return PH_ADD_COMPCODE(statusTmp, PH_COMP_CRYPTORNG);
 8002692:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00b      	beq.n	80026b0 <phCryptoRng_Sw_Seed+0x9c>
 8002698:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800269a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d106      	bne.n	80026b0 <phCryptoRng_Sw_Seed+0x9c>
 80026a2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	4b04      	ldr	r3, [pc, #16]	@ (80026bc <phCryptoRng_Sw_Seed+0xa8>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	e000      	b.n	80026b2 <phCryptoRng_Sw_Seed+0x9e>
 80026b0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3738      	adds	r7, #56	@ 0x38
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bdb0      	pop	{r4, r5, r7, pc}
 80026ba:	bf00      	nop
 80026bc:	ffffe400 	.word	0xffffe400

080026c0 <phCryptoRng_Sw_Update>:
        wNoOfRndBytes,
        pRnd);
}

phStatus_t phCryptoRng_Sw_Update(phCryptoRng_Sw_DataParams_t * pDataParams, uint8_t * pProvidedData)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08a      	sub	sp, #40	@ 0x28
 80026c4:	af02      	add	r7, sp, #8
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
    /* NOTE: as seedlen == 2*PH_CRYPTOSYN_AES_BLOCK_SIZE, the loop is unrolled in this implementation. */
    /* NOTE: First iteration: Generate new key, second iteration: Generate new V. */
    /* For further details refer to sec. 10.2.1.1. of NIST SP 800-90 */

    /* 2.1 V = (V + 1U) mod 2 exp outlen.*/
    phCryptoRng_Sw_IncrementV(pDataParams);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f9fa 	bl	8002ac4 <phCryptoRng_Sw_IncrementV>

    /* 2.2 output_block = Block_Encrypt (Key, V). */
    /* 2.3 temp = temp || ouput_block. */
    /* Note: Encrypt V to get Key using ECB mode */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Encrypt(pDataParams->pCryptoDataParams,
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6858      	ldr	r0, [r3, #4]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f103 0208 	add.w	r2, r3, #8
 80026da:	f107 030c 	add.w	r3, r7, #12
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	2310      	movs	r3, #16
 80026e2:	2100      	movs	r1, #0
 80026e4:	f002 ff4e 	bl	8005584 <phCryptoSym_Encrypt>
 80026e8:	4603      	mov	r3, r0
 80026ea:	83bb      	strh	r3, [r7, #28]
 80026ec:	8bbb      	ldrh	r3, [r7, #28]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <phCryptoRng_Sw_Update+0x36>
 80026f2:	8bbb      	ldrh	r3, [r7, #28]
 80026f4:	e064      	b.n	80027c0 <phCryptoRng_Sw_Update+0x100>
    /*  3. temp = Leftmost seedlen bits of temp. */
    /*  4 temp = temp xor provided_data. */
    /*  5. Key = Leftmost keylen bits of temp. */
    /* Note: Xor Key with provided data to get the key to be later used in the crypto unit. */
    /* Note: We must not load the key immediately, as the updated value of V shall be encrypted using the old key */
    if(pProvidedData != NULL)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d018      	beq.n	800272e <phCryptoRng_Sw_Update+0x6e>
    {
        for(bIndex = 0; bIndex < PHCRYPTORNG_SW_KEYLEN; ++bIndex)
 80026fc:	2300      	movs	r3, #0
 80026fe:	77fb      	strb	r3, [r7, #31]
 8002700:	e012      	b.n	8002728 <phCryptoRng_Sw_Update+0x68>
        {
            aKey[bIndex] ^= pProvidedData[bIndex];
 8002702:	7ffb      	ldrb	r3, [r7, #31]
 8002704:	3320      	adds	r3, #32
 8002706:	443b      	add	r3, r7
 8002708:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 800270c:	7ffb      	ldrb	r3, [r7, #31]
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	4413      	add	r3, r2
 8002712:	781a      	ldrb	r2, [r3, #0]
 8002714:	7ffb      	ldrb	r3, [r7, #31]
 8002716:	404a      	eors	r2, r1
 8002718:	b2d2      	uxtb	r2, r2
 800271a:	3320      	adds	r3, #32
 800271c:	443b      	add	r3, r7
 800271e:	f803 2c14 	strb.w	r2, [r3, #-20]
        for(bIndex = 0; bIndex < PHCRYPTORNG_SW_KEYLEN; ++bIndex)
 8002722:	7ffb      	ldrb	r3, [r7, #31]
 8002724:	3301      	adds	r3, #1
 8002726:	77fb      	strb	r3, [r7, #31]
 8002728:	7ffb      	ldrb	r3, [r7, #31]
 800272a:	2b0f      	cmp	r3, #15
 800272c:	d9e9      	bls.n	8002702 <phCryptoRng_Sw_Update+0x42>
        }
    }

    /* NOTE: Second iteration of the loop */
    /* 2.1 V = (V + 1U) mod 2 exp outlen.*/
    phCryptoRng_Sw_IncrementV(pDataParams);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f9c8 	bl	8002ac4 <phCryptoRng_Sw_IncrementV>

    /* 2.2 output_block = Block_Encrypt (Key, V). */
    /* 2.3 temp = temp || ouput_block. */
    /* NOTE: Encrypt V to get V' using ECB mode */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Encrypt(pDataParams->pCryptoDataParams,
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6858      	ldr	r0, [r3, #4]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f103 0208 	add.w	r2, r3, #8
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	3308      	adds	r3, #8
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	2310      	movs	r3, #16
 8002746:	2100      	movs	r1, #0
 8002748:	f002 ff1c 	bl	8005584 <phCryptoSym_Encrypt>
 800274c:	4603      	mov	r3, r0
 800274e:	83bb      	strh	r3, [r7, #28]
 8002750:	8bbb      	ldrh	r3, [r7, #28]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <phCryptoRng_Sw_Update+0x9a>
 8002756:	8bbb      	ldrh	r3, [r7, #28]
 8002758:	e032      	b.n	80027c0 <phCryptoRng_Sw_Update+0x100>

    /* 3. temp = Leftmost seedlen bits of temp. */
    /* 4 temp = temp xor provided_data. */
    /* 6. V = Rightmost outlen bits of temp. */
    /* NOTE: Xor V' with provided data */
    if(pProvidedData != NULL)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d018      	beq.n	8002792 <phCryptoRng_Sw_Update+0xd2>
    {
        for(bIndex = 0; bIndex < PHCRYPTORNG_SW_OUTLEN; ++bIndex)
 8002760:	2300      	movs	r3, #0
 8002762:	77fb      	strb	r3, [r7, #31]
 8002764:	e012      	b.n	800278c <phCryptoRng_Sw_Update+0xcc>
        {
            pDataParams->V[bIndex] ^= pProvidedData[bIndex + PHCRYPTORNG_SW_KEYLEN];
 8002766:	7ffb      	ldrb	r3, [r7, #31]
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	4413      	add	r3, r2
 800276c:	7a19      	ldrb	r1, [r3, #8]
 800276e:	7ffb      	ldrb	r3, [r7, #31]
 8002770:	3310      	adds	r3, #16
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	4413      	add	r3, r2
 8002776:	781a      	ldrb	r2, [r3, #0]
 8002778:	7ffb      	ldrb	r3, [r7, #31]
 800277a:	404a      	eors	r2, r1
 800277c:	b2d1      	uxtb	r1, r2
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	4413      	add	r3, r2
 8002782:	460a      	mov	r2, r1
 8002784:	721a      	strb	r2, [r3, #8]
        for(bIndex = 0; bIndex < PHCRYPTORNG_SW_OUTLEN; ++bIndex)
 8002786:	7ffb      	ldrb	r3, [r7, #31]
 8002788:	3301      	adds	r3, #1
 800278a:	77fb      	strb	r3, [r7, #31]
 800278c:	7ffb      	ldrb	r3, [r7, #31]
 800278e:	2b0f      	cmp	r3, #15
 8002790:	d9e9      	bls.n	8002766 <phCryptoRng_Sw_Update+0xa6>

#ifndef PH_CRYPTOSYM_SW_AES
    #error "No valid cipher available"
#else
    /* Load the new key into the Crypto Data Params structure */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_LoadKeyDirect(
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f107 010c 	add.w	r1, r7, #12
 800279a:	2200      	movs	r2, #0
 800279c:	4618      	mov	r0, r3
 800279e:	f002 ffb6 	bl	800570e <phCryptoSym_LoadKeyDirect>
 80027a2:	4603      	mov	r3, r0
 80027a4:	83bb      	strh	r3, [r7, #28]
 80027a6:	8bbb      	ldrh	r3, [r7, #28]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <phCryptoRng_Sw_Update+0xf0>
 80027ac:	8bbb      	ldrh	r3, [r7, #28]
 80027ae:	e007      	b.n	80027c0 <phCryptoRng_Sw_Update+0x100>
        aKey,
        PH_CRYPTOSYM_KEY_TYPE_AES128));
#endif /* PH_CRYPTOSYM_SW_AES */

    /* Clear aKey for security reasons */
    (void) memset(aKey, 0x00, (size_t) sizeof(aKey));
 80027b0:	f107 030c 	add.w	r3, r7, #12
 80027b4:	2210      	movs	r2, #16
 80027b6:	2100      	movs	r1, #0
 80027b8:	4618      	mov	r0, r3
 80027ba:	f01a fca1 	bl	801d100 <memset>
    return PH_ERR_SUCCESS;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3720      	adds	r7, #32
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <phCryptoRng_Sw_Instantiate>:

phStatus_t phCryptoRng_Sw_Instantiate(phCryptoRng_Sw_DataParams_t * pDataParams, uint8_t * pEntropyInput, uint16_t wEntropyInputLength,
    uint8_t * pNonce, uint8_t bNonceLength, uint8_t * pPersonalizationString, uint8_t bPersonalizationString)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08e      	sub	sp, #56	@ 0x38
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	603b      	str	r3, [r7, #0]
 80027d4:	4613      	mov	r3, r2
 80027d6:	80fb      	strh	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aSeedMaterial[PHCRYPTORNG_SW_SEEDLEN];

    /* Reset state to be init again. */
    pDataParams->bState = PHCRYPTORNG_SW_STATE_INIT;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	771a      	strb	r2, [r3, #28]

    /* do we have a wrong input data length? */
    /* Comment: Ensure that the length of the seed_material is exactly seedlen bits. */
    if(PHCRYPTORNG_SW_SEEDLEN != (wEntropyInputLength + bNonceLength + bPersonalizationString))
 80027de:	88fa      	ldrh	r2, [r7, #6]
 80027e0:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80027e4:	441a      	add	r2, r3
 80027e6:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80027ea:	4413      	add	r3, r2
 80027ec:	2b20      	cmp	r3, #32
 80027ee:	d002      	beq.n	80027f6 <phCryptoRng_Sw_Instantiate+0x2e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTORNG);
 80027f0:	f24e 4321 	movw	r3, #58401	@ 0xe421
 80027f4:	e05b      	b.n	80028ae <phCryptoRng_Sw_Instantiate+0xe6>
    }

    /* NOTE: Prepare seed Material */
    /* 1. seed_material = entropy_input || nonce || personalization_string. */
    (void) memcpy(aSeedMaterial, pEntropyInput, wEntropyInputLength);
 80027f6:	88fa      	ldrh	r2, [r7, #6]
 80027f8:	f107 0314 	add.w	r3, r7, #20
 80027fc:	68b9      	ldr	r1, [r7, #8]
 80027fe:	4618      	mov	r0, r3
 8002800:	f01a fcfd 	bl	801d1fe <memcpy>
    (void) memcpy(&aSeedMaterial[wEntropyInputLength], pNonce, bNonceLength);
 8002804:	88fb      	ldrh	r3, [r7, #6]
 8002806:	f107 0214 	add.w	r2, r7, #20
 800280a:	4413      	add	r3, r2
 800280c:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8002810:	6839      	ldr	r1, [r7, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f01a fcf3 	bl	801d1fe <memcpy>
    (void) memcpy(&aSeedMaterial[wEntropyInputLength + bNonceLength], pPersonalizationString, bPersonalizationString);
 8002818:	88fa      	ldrh	r2, [r7, #6]
 800281a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800281e:	4413      	add	r3, r2
 8002820:	f107 0214 	add.w	r2, r7, #20
 8002824:	4413      	add	r3, r2
 8002826:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 800282a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800282c:	4618      	mov	r0, r3
 800282e:	f01a fce6 	bl	801d1fe <memcpy>

    /* Note: Encrypt the seed value */
    /* 2. seed_material = Block_Cipher_df (seed_material, seedlen). */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoRng_Sw_BlockCipherDf(
 8002832:	f107 0314 	add.w	r3, r7, #20
 8002836:	4619      	mov	r1, r3
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f000 f88f 	bl	800295c <phCryptoRng_Sw_BlockCipherDf>
 800283e:	4603      	mov	r3, r0
 8002840:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8002842:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <phCryptoRng_Sw_Instantiate+0x84>
 8002848:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800284a:	e030      	b.n	80028ae <phCryptoRng_Sw_Instantiate+0xe6>
        pDataParams,
        aSeedMaterial));

    /* Note: Reset the Key and the V-Value. */
    /* 4. V = 0 expoutlen. Comment: outlen bits of zeros. */
    (void) memset(pDataParams->V, 0, PHCRYPTORNG_SW_OUTLEN);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	3308      	adds	r3, #8
 8002850:	2210      	movs	r2, #16
 8002852:	2100      	movs	r1, #0
 8002854:	4618      	mov	r0, r3
 8002856:	f01a fc53 	bl	801d100 <memset>
#ifndef PH_CRYPTOSYM_SW_AES
    #error "No valid cipher available"
#else
    /* 3. Key = 0 exp keylen. Comment: keylen bits of zeros. */
    /* Also reset the key, this can be done by loading V into the key register, as we set it to 0 before. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_LoadKeyDirect(
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6858      	ldr	r0, [r3, #4]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	3308      	adds	r3, #8
 8002862:	2200      	movs	r2, #0
 8002864:	4619      	mov	r1, r3
 8002866:	f002 ff52 	bl	800570e <phCryptoSym_LoadKeyDirect>
 800286a:	4603      	mov	r3, r0
 800286c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800286e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <phCryptoRng_Sw_Instantiate+0xb0>
 8002874:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002876:	e01a      	b.n	80028ae <phCryptoRng_Sw_Instantiate+0xe6>
        PH_CRYPTOSYM_KEY_TYPE_AES128));
#endif /* PH_CRYPTOSYM_SW_AES */

    /* Update using aSeedMaterial as the personalization string. */
    /* 5. (Key, V) = Update (seed_material, Key, V). */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoRng_Sw_Update(pDataParams, aSeedMaterial));
 8002878:	f107 0314 	add.w	r3, r7, #20
 800287c:	4619      	mov	r1, r3
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f7ff ff1e 	bl	80026c0 <phCryptoRng_Sw_Update>
 8002884:	4603      	mov	r3, r0
 8002886:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8002888:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <phCryptoRng_Sw_Instantiate+0xca>
 800288e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002890:	e00d      	b.n	80028ae <phCryptoRng_Sw_Instantiate+0xe6>

    /* Set the counter again to 1. */
    /* 6. reseed_counter = 1. */
    pDataParams->dwRequestCounter = 1;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2201      	movs	r2, #1
 8002896:	619a      	str	r2, [r3, #24]

    /* Set the correct state */
    /* 7. Return V, Key, and reseed_counter as the initial_working_state. */
    pDataParams->bState = PHCRYPTORNG_SW_STATE_WORKING;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2201      	movs	r2, #1
 800289c:	771a      	strb	r2, [r3, #28]

    /* Clear seed material for security reasons */
    (void) memset(aSeedMaterial, 0x00, (size_t) sizeof(aSeedMaterial));
 800289e:	f107 0314 	add.w	r3, r7, #20
 80028a2:	2220      	movs	r2, #32
 80028a4:	2100      	movs	r1, #0
 80028a6:	4618      	mov	r0, r3
 80028a8:	f01a fc2a 	bl	801d100 <memset>

    return PH_ERR_SUCCESS;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3738      	adds	r7, #56	@ 0x38
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <phCryptoRng_Sw_Reseed>:

phStatus_t phCryptoRng_Sw_Reseed(phCryptoRng_Sw_DataParams_t * pDataParams, uint8_t * pEntropyInput, uint16_t wEntropyInputLength,
    uint8_t * pAdditionalInput, uint8_t bAdditionalInputLength)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b08e      	sub	sp, #56	@ 0x38
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	60f8      	str	r0, [r7, #12]
 80028be:	60b9      	str	r1, [r7, #8]
 80028c0:	603b      	str	r3, [r7, #0]
 80028c2:	4613      	mov	r3, r2
 80028c4:	80fb      	strh	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aSeedMaterial[PHCRYPTORNG_SW_SEEDLEN];

    /* Check for operational state */
    if(pDataParams->bState != PHCRYPTORNG_SW_STATE_WORKING)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	7f1b      	ldrb	r3, [r3, #28]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d002      	beq.n	80028d4 <phCryptoRng_Sw_Reseed+0x1e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_CRYPTORNG);
 80028ce:	f24e 4325 	movw	r3, #58405	@ 0xe425
 80028d2:	e03e      	b.n	8002952 <phCryptoRng_Sw_Reseed+0x9c>
    }

    /* Comment: Ensure that the length of the seed_material is exactly seedlen bits. */
    if(PHCRYPTORNG_SW_SEEDLEN != (wEntropyInputLength + bAdditionalInputLength))
 80028d4:	88fa      	ldrh	r2, [r7, #6]
 80028d6:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80028da:	4413      	add	r3, r2
 80028dc:	2b20      	cmp	r3, #32
 80028de:	d002      	beq.n	80028e6 <phCryptoRng_Sw_Reseed+0x30>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTORNG);
 80028e0:	f24e 4321 	movw	r3, #58401	@ 0xe421
 80028e4:	e035      	b.n	8002952 <phCryptoRng_Sw_Reseed+0x9c>
    }

    /* Prepare seed Material */
    /* 1. seed_material = entropy_input || additional_input. */
    (void) memcpy(aSeedMaterial, pEntropyInput, wEntropyInputLength);
 80028e6:	88fa      	ldrh	r2, [r7, #6]
 80028e8:	f107 0314 	add.w	r3, r7, #20
 80028ec:	68b9      	ldr	r1, [r7, #8]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f01a fc85 	bl	801d1fe <memcpy>
    (void) memcpy(&aSeedMaterial[wEntropyInputLength], pAdditionalInput, bAdditionalInputLength);
 80028f4:	88fb      	ldrh	r3, [r7, #6]
 80028f6:	f107 0214 	add.w	r2, r7, #20
 80028fa:	4413      	add	r3, r2
 80028fc:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8002900:	6839      	ldr	r1, [r7, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f01a fc7b 	bl	801d1fe <memcpy>

    /* Encrypt the seed value */
    /* 2. seed_material = Block_Cipher_df (seed_material, seedlen). */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoRng_Sw_BlockCipherDf(
 8002908:	f107 0314 	add.w	r3, r7, #20
 800290c:	4619      	mov	r1, r3
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 f824 	bl	800295c <phCryptoRng_Sw_BlockCipherDf>
 8002914:	4603      	mov	r3, r0
 8002916:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8002918:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <phCryptoRng_Sw_Reseed+0x6c>
 800291e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002920:	e017      	b.n	8002952 <phCryptoRng_Sw_Reseed+0x9c>
        pDataParams,
        aSeedMaterial));

    /* Update using aSeedMaterial as the personalization string. */
    /* 3. (Key, V) = Update (seed_material, Key, V). */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoRng_Sw_Update(pDataParams, aSeedMaterial));
 8002922:	f107 0314 	add.w	r3, r7, #20
 8002926:	4619      	mov	r1, r3
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f7ff fec9 	bl	80026c0 <phCryptoRng_Sw_Update>
 800292e:	4603      	mov	r3, r0
 8002930:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8002932:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <phCryptoRng_Sw_Reseed+0x86>
 8002938:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800293a:	e00a      	b.n	8002952 <phCryptoRng_Sw_Reseed+0x9c>

    /* Set the counter again to 1. */
    /* 4. reseed_counter = 1. */
    pDataParams->dwRequestCounter = 1;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2201      	movs	r2, #1
 8002940:	619a      	str	r2, [r3, #24]

    /* 5. Return V, Key, and reseed_counter as the new_working_state. */

    /* Clear seed material for security reasons */
    (void) memset(aSeedMaterial, 0x00, (size_t) sizeof(aSeedMaterial));
 8002942:	f107 0314 	add.w	r3, r7, #20
 8002946:	2220      	movs	r2, #32
 8002948:	2100      	movs	r1, #0
 800294a:	4618      	mov	r0, r3
 800294c:	f01a fbd8 	bl	801d100 <memset>

    return PH_ERR_SUCCESS;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3738      	adds	r7, #56	@ 0x38
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
	...

0800295c <phCryptoRng_Sw_BlockCipherDf>:
    /* 8. Return SUCCESS and returned_bits; also return Key, V, and reseed_counter as the new_working_state. */
    return PH_ERR_SUCCESS;
}

phStatus_t phCryptoRng_Sw_BlockCipherDf(phCryptoRng_Sw_DataParams_t * pDataParams, uint8_t * pIoString)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b096      	sub	sp, #88	@ 0x58
 8002960:	af02      	add	r7, sp, #8
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
#ifndef PH_CRYPTOSYM_SW_AES
    #error "No valid cipher available"
#else
    /* Then we load the default key */
    /* 8. K = Leftmost keylen bits of 0x00010203...1D1E1F. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_LoadKeyDirect(
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	4954      	ldr	r1, [pc, #336]	@ (8002ac0 <phCryptoRng_Sw_BlockCipherDf+0x164>)
 800296e:	4618      	mov	r0, r3
 8002970:	f002 fecd 	bl	800570e <phCryptoSym_LoadKeyDirect>
 8002974:	4603      	mov	r3, r0
 8002976:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800297a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800297e:	2b00      	cmp	r3, #0
 8002980:	d002      	beq.n	8002988 <phCryptoRng_Sw_BlockCipherDf+0x2c>
 8002982:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002986:	e097      	b.n	8002ab8 <phCryptoRng_Sw_BlockCipherDf+0x15c>
        phCryptoRng_Sw_BlockCipherDf_DefaultKey,
        PH_CRYPTOSYM_KEY_TYPE_AES128));
#endif /* PH_CRYPTOSYM_SW_AES */

    /* First clear the cipher buffer*/
    (void) memset(aCipher, 0x00, (size_t) sizeof(aCipher));
 8002988:	f107 030c 	add.w	r3, r7, #12
 800298c:	2240      	movs	r2, #64	@ 0x40
 800298e:	2100      	movs	r1, #0
 8002990:	4618      	mov	r0, r3
 8002992:	f01a fbb5 	bl	801d100 <memset>

    /* Prepare the cipher */
    /* We use the integers in LSB FIRST format - length is always 32 bits*/
    /* S = L || N || input_string || 0x80. */
    /* 2. L = len (input_string)/8. */
    aCipher[PHCRYPTORNG_SW_OUTLEN] = 0x20;
 8002996:	2320      	movs	r3, #32
 8002998:	773b      	strb	r3, [r7, #28]

    /* 3. N = number_of_bits_to_return/8. */
    aCipher[PHCRYPTORNG_SW_OUTLEN + 4U] = 0x20;
 800299a:	2320      	movs	r3, #32
 800299c:	f887 3020 	strb.w	r3, [r7, #32]

    /* 4. S = L || N || input_string || 0x80. */
    (void) memcpy(&aCipher[PHCRYPTORNG_SW_OUTLEN + 8U], pIoString, PHCRYPTORNG_SW_SEEDLEN);
 80029a0:	f107 030c 	add.w	r3, r7, #12
 80029a4:	3318      	adds	r3, #24
 80029a6:	2220      	movs	r2, #32
 80029a8:	6839      	ldr	r1, [r7, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f01a fc27 	bl	801d1fe <memcpy>

    /* Add Padding */
    aCipher[PHCRYPTORNG_SW_OUTLEN + 8U + PHCRYPTORNG_SW_SEEDLEN] = 0x80;
 80029b0:	2380      	movs	r3, #128	@ 0x80
 80029b2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    /* NOTE: For simplicity, the loop is unrolled. */
    /* 9. While len (temp) < keylen + outlen, do */

    /* Set IV to zero according to specification of BCC (note: at this moment, first part of aCipher is 0 (16 bytes) */
    /* 1. chaining_value = 0 exp outlen. Comment: Set the first chaining value to outlen zeros. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_LoadIv(pDataParams->pCryptoDataParams, aCipher, 16));
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f107 010c 	add.w	r1, r7, #12
 80029be:	2210      	movs	r2, #16
 80029c0:	4618      	mov	r0, r3
 80029c2:	f002 fe6e 	bl	80056a2 <phCryptoSym_LoadIv>
 80029c6:	4603      	mov	r3, r0
 80029c8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80029cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d002      	beq.n	80029da <phCryptoRng_Sw_BlockCipherDf+0x7e>
 80029d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80029d8:	e06e      	b.n	8002ab8 <phCryptoRng_Sw_BlockCipherDf+0x15c>
    /* 4.1 input_block = chaining_value xor block_i.  */
    /* 4.2 chaining_value = Block_Encrypt (Key, input_block).  */
    /* 5. output_block = chaining_value.  */
    /* Set the MAC mode to CBC mac which is equal to BCC*/

    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_CalculateMac(
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6858      	ldr	r0, [r3, #4]
 80029de:	f107 020c 	add.w	r2, r7, #12
 80029e2:	f107 030b 	add.w	r3, r7, #11
 80029e6:	9301      	str	r3, [sp, #4]
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	2340      	movs	r3, #64	@ 0x40
 80029ee:	2101      	movs	r1, #1
 80029f0:	f002 fe0a 	bl	8005608 <phCryptoSym_CalculateMac>
 80029f4:	4603      	mov	r3, r0
 80029f6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80029fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d002      	beq.n	8002a08 <phCryptoRng_Sw_BlockCipherDf+0xac>
 8002a02:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002a06:	e057      	b.n	8002ab8 <phCryptoRng_Sw_BlockCipherDf+0x15c>
    /* 4. For i = 1 to n do  */
    /* 4.1 input_block = chaining_value xor block_i.  */
    /* 4.2 chaining_value = Block_Encrypt (Key, input_block).  */
    /* 5. output_block = chaining_value.  */
    /* Set the MAC mode to CBC mac which is equal to BCC*/
    aCipher[0] = 0x01;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	733b      	strb	r3, [r7, #12]
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_CalculateMac(pDataParams->pCryptoDataParams,
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6858      	ldr	r0, [r3, #4]
 8002a10:	7afb      	ldrb	r3, [r7, #11]
 8002a12:	461a      	mov	r2, r3
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	4413      	add	r3, r2
 8002a18:	f107 010c 	add.w	r1, r7, #12
 8002a1c:	f107 020b 	add.w	r2, r7, #11
 8002a20:	9201      	str	r2, [sp, #4]
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	2340      	movs	r3, #64	@ 0x40
 8002a26:	460a      	mov	r2, r1
 8002a28:	2101      	movs	r1, #1
 8002a2a:	f002 fded 	bl	8005608 <phCryptoSym_CalculateMac>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002a34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d002      	beq.n	8002a42 <phCryptoRng_Sw_BlockCipherDf+0xe6>
 8002a3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002a40:	e03a      	b.n	8002ab8 <phCryptoRng_Sw_BlockCipherDf+0x15c>
    /* 10. K = Leftmost keylen bits of temp. */
#ifndef PH_CRYPTOSYM_SW_AES
    #error "No valid cipher available"
#else
    /* We can load the newly created key */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_LoadKeyDirect(
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	6839      	ldr	r1, [r7, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f002 fe5f 	bl	800570e <phCryptoSym_LoadKeyDirect>
 8002a50:	4603      	mov	r3, r0
 8002a52:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002a56:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d002      	beq.n	8002a64 <phCryptoRng_Sw_BlockCipherDf+0x108>
 8002a5e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002a62:	e029      	b.n	8002ab8 <phCryptoRng_Sw_BlockCipherDf+0x15c>

    /* 11. X = Next outlen bits of temp. */
    /* 13.1 X = Block_Encrypt (K, X). */
    /* 13.2 temp = temp || X. */
    /* Encrypt X (which is upper part of pIoString) into lower part of pIoString. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Encrypt(pDataParams->pCryptoDataParams,
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6858      	ldr	r0, [r3, #4]
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	f103 0210 	add.w	r2, r3, #16
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	2310      	movs	r3, #16
 8002a74:	2100      	movs	r1, #0
 8002a76:	f002 fd85 	bl	8005584 <phCryptoSym_Encrypt>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002a80:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d002      	beq.n	8002a8e <phCryptoRng_Sw_BlockCipherDf+0x132>
 8002a88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002a8c:	e014      	b.n	8002ab8 <phCryptoRng_Sw_BlockCipherDf+0x15c>

    /* 11. X = Next outlen bits of temp. */
    /* 13.1 X = Block_Encrypt (K, X). */
    /* 13.2 temp = temp || X. */
    /* Encrypt X (which is now lower part of pIoString) into upper part of pIoString. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Encrypt(pDataParams->pCryptoDataParams,
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6858      	ldr	r0, [r3, #4]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	3310      	adds	r3, #16
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	2310      	movs	r3, #16
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	f002 fd71 	bl	8005584 <phCryptoSym_Encrypt>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002aa8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d002      	beq.n	8002ab6 <phCryptoRng_Sw_BlockCipherDf+0x15a>
 8002ab0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002ab4:	e000      	b.n	8002ab8 <phCryptoRng_Sw_BlockCipherDf+0x15c>
        PH_CRYPTOSYM_CIPHER_MODE_ECB,
        pIoString,
        PHCRYPTORNG_SW_OUTLEN,
        &pIoString[PHCRYPTORNG_SW_KEYLEN]));

    return PH_ERR_SUCCESS;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3750      	adds	r7, #80	@ 0x50
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	0801f9e0 	.word	0x0801f9e0

08002ac4 <phCryptoRng_Sw_IncrementV>:

static void phCryptoRng_Sw_IncrementV(phCryptoRng_Sw_DataParams_t * pDataParams)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
    uint8_t PH_MEMLOC_REM bIndex;

    /* Increment the V value of the pDataParams structure by 1 mod 2^128. Note: LSB is stored in position 0. */
    for(bIndex = 0; bIndex < PHCRYPTORNG_SW_OUTLEN; ++bIndex)
 8002acc:	2300      	movs	r3, #0
 8002ace:	73fb      	strb	r3, [r7, #15]
 8002ad0:	e018      	b.n	8002b04 <phCryptoRng_Sw_IncrementV+0x40>
    {
        if(pDataParams->V[bIndex] < 0xFFU)
 8002ad2:	7bfb      	ldrb	r3, [r7, #15]
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	7a1b      	ldrb	r3, [r3, #8]
 8002ada:	2bff      	cmp	r3, #255	@ 0xff
 8002adc:	d00a      	beq.n	8002af4 <phCryptoRng_Sw_IncrementV+0x30>
        {
            ++pDataParams->V[bIndex];
 8002ade:	7bfb      	ldrb	r3, [r7, #15]
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	441a      	add	r2, r3
 8002ae4:	7a12      	ldrb	r2, [r2, #8]
 8002ae6:	3201      	adds	r2, #1
 8002ae8:	b2d1      	uxtb	r1, r2
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	4413      	add	r3, r2
 8002aee:	460a      	mov	r2, r1
 8002af0:	721a      	strb	r2, [r3, #8]
            break;
 8002af2:	e00b      	b.n	8002b0c <phCryptoRng_Sw_IncrementV+0x48>
        }
        else
        {
            pDataParams->V[bIndex] = 0x00;
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	4413      	add	r3, r2
 8002afa:	2200      	movs	r2, #0
 8002afc:	721a      	strb	r2, [r3, #8]
    for(bIndex = 0; bIndex < PHCRYPTORNG_SW_OUTLEN; ++bIndex)
 8002afe:	7bfb      	ldrb	r3, [r7, #15]
 8002b00:	3301      	adds	r3, #1
 8002b02:	73fb      	strb	r3, [r7, #15]
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
 8002b06:	2b0f      	cmp	r3, #15
 8002b08:	d9e3      	bls.n	8002ad2 <phCryptoRng_Sw_IncrementV+0xe>
        }
    }
}
 8002b0a:	bf00      	nop
 8002b0c:	bf00      	nop
 8002b0e:	3714      	adds	r7, #20
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <phCryptoRng_Seed>:
#include "mBedTLS/phCryptoRng_mBedTLS.h"
#endif /*NXPBUILD__PH_CRYPTORNG_MBEDTLS */

#ifdef NXPBUILD__PH_CRYPTORNG
phStatus_t phCryptoRng_Seed(void * pDataParams, uint8_t * pSeed, uint8_t bSeedLength)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	4613      	mov	r3, r2
 8002b24:	71fb      	strb	r3, [r7, #7]
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(pSeed);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(bSeedLength);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(status);

    /* Validate the parameters. */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_CRYPTORNG);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d102      	bne.n	8002b32 <phCryptoRng_Seed+0x1a>
 8002b2c:	f24e 4320 	movw	r3, #58400	@ 0xe420
 8002b30:	e027      	b.n	8002b82 <phCryptoRng_Seed+0x6a>
    if(0U != bSeedLength) PH_ASSERT_NULL_PARAM(pSeed, PH_COMP_CRYPTORNG);
 8002b32:	79fb      	ldrb	r3, [r7, #7]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d005      	beq.n	8002b44 <phCryptoRng_Seed+0x2c>
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d102      	bne.n	8002b44 <phCryptoRng_Seed+0x2c>
 8002b3e:	f24e 4321 	movw	r3, #58401	@ 0xe421
 8002b42:	e01e      	b.n	8002b82 <phCryptoRng_Seed+0x6a>
    PH_LOG_HELPER_ADDPARAM_BUFFER(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(pSeed), pSeed, bSeedLength);
    PH_LOG_HELPER_ADDPARAM_UINT8(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(bSeedLength), &bSeedLength);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Component Code Validation */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_CRYPTORNG)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	881b      	ldrh	r3, [r3, #0]
 8002b48:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002b4c:	f5b3 4f64 	cmp.w	r3, #58368	@ 0xe400
 8002b50:	d004      	beq.n	8002b5c <phCryptoRng_Seed+0x44>
    {
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTORNG);
 8002b52:	f24e 4320 	movw	r3, #58400	@ 0xe420
 8002b56:	82fb      	strh	r3, [r7, #22]

        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

        return status;
 8002b58:	8afb      	ldrh	r3, [r7, #22]
 8002b5a:	e012      	b.n	8002b82 <phCryptoRng_Seed+0x6a>
    }

    /* Perform operation on active layer. */
    switch(PH_GET_COMPID(pDataParams))
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	881b      	ldrh	r3, [r3, #0]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d108      	bne.n	8002b78 <phCryptoRng_Seed+0x60>
    {
#ifdef NXPBUILD__PH_CRYPTORNG_SW
        case PH_CRYPTORNG_SW_ID:
            status = phCryptoRng_Sw_Seed((phCryptoRng_Sw_DataParams_t *) pDataParams, pSeed, bSeedLength);
 8002b66:	79fb      	ldrb	r3, [r7, #7]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	68b9      	ldr	r1, [r7, #8]
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f7ff fd51 	bl	8002614 <phCryptoRng_Sw_Seed>
 8002b72:	4603      	mov	r3, r0
 8002b74:	82fb      	strh	r3, [r7, #22]
            break;
 8002b76:	e003      	b.n	8002b80 <phCryptoRng_Seed+0x68>
            status = phCryptoRng_mBedTLS_Seed((phCryptoRng_mBedTLS_DataParams_t *) pDataParams, pSeed, bSeedLength);
            break;
#endif /* NXPBUILD__PH_CRYPTORNG_MBEDTLS */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTORNG);
 8002b78:	f24e 4320 	movw	r3, #58400	@ 0xe420
 8002b7c:	82fb      	strh	r3, [r7, #22]
            break;
 8002b7e:	bf00      	nop

    PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

    return status;
 8002b80:	8afb      	ldrh	r3, [r7, #22]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <phCryptoSym_Sw_Init>:
#endif /* PH_CRYPTOSYM_SW_DES */

#include "phCryptoSym_Sw_Int.h"

phStatus_t phCryptoSym_Sw_Init(phCryptoSym_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pKeyStoreDataParams)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b086      	sub	sp, #24
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	60f8      	str	r0, [r7, #12]
 8002b92:	460b      	mov	r3, r1
 8002b94:	607a      	str	r2, [r7, #4]
 8002b96:	817b      	strh	r3, [r7, #10]
    phStatus_t wStatus = 0;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	82fb      	strh	r3, [r7, #22]
    if(sizeof(phCryptoSym_Sw_DataParams_t) != wSizeOfDataParams)
 8002b9c:	897b      	ldrh	r3, [r7, #10]
 8002b9e:	2b40      	cmp	r3, #64	@ 0x40
 8002ba0:	d002      	beq.n	8002ba8 <phCryptoSym_Sw_Init+0x1e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 8002ba2:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8002ba6:	e016      	b.n	8002bd6 <phCryptoSym_Sw_Init+0x4c>
    }
    PH_ASSERT_NULL (pDataParams);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <phCryptoSym_Sw_Init+0x28>
 8002bae:	2321      	movs	r3, #33	@ 0x21
 8002bb0:	e011      	b.n	8002bd6 <phCryptoSym_Sw_Init+0x4c>

    /* Init. private data */
    pDataParams->wId = PH_COMP_CRYPTOSYM | PH_CRYPTOSYM_SW_ID;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f24e 1201 	movw	r2, #57601	@ 0xe101
 8002bb8:	801a      	strh	r2, [r3, #0]
    pDataParams->pKeyStoreDataParams = pKeyStoreDataParams;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	605a      	str	r2, [r3, #4]

    /* Invalidate keys */
    PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_InvalidateKey(pDataParams));
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f000 f80c 	bl	8002bde <phCryptoSym_Sw_InvalidateKey>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	82fb      	strh	r3, [r7, #22]
 8002bca:	8afb      	ldrh	r3, [r7, #22]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <phCryptoSym_Sw_Init+0x4a>
 8002bd0:	8afb      	ldrh	r3, [r7, #22]
 8002bd2:	e000      	b.n	8002bd6 <phCryptoSym_Sw_Init+0x4c>

    return PH_ERR_SUCCESS;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3718      	adds	r7, #24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <phCryptoSym_Sw_InvalidateKey>:

phStatus_t phCryptoSym_Sw_InvalidateKey(phCryptoSym_Sw_DataParams_t * pDataParams)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b082      	sub	sp, #8
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
    /* Reset all the key storage */
    (void) memset(pDataParams->pKey, 0x00, (size_t) sizeof(pDataParams->pKey));
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	3308      	adds	r3, #8
 8002bea:	2220      	movs	r2, #32
 8002bec:	2100      	movs	r1, #0
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f01a fa86 	bl	801d100 <memset>
    (void) memset(pDataParams->pIV, 0x00, (size_t) sizeof(pDataParams->pIV));
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3328      	adds	r3, #40	@ 0x28
 8002bf8:	2210      	movs	r2, #16
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f01a fa7f 	bl	801d100 <memset>

    pDataParams->wKeyType = PH_CRYPTOSYM_KEY_TYPE_INVALID;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c08:	871a      	strh	r2, [r3, #56]	@ 0x38
    pDataParams->wKeepIV = PH_CRYPTOSYM_VALUE_KEEP_IV_OFF;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	875a      	strh	r2, [r3, #58]	@ 0x3a
    pDataParams->wAddInfo = 0x00;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	879a      	strh	r2, [r3, #60]	@ 0x3c
    pDataParams->bCMACSubKeysInitialized = PH_OFF;
    (void) memset(pDataParams->pCMACSubKey1, 0x00, (size_t) sizeof(pDataParams->pCMACSubKey1));
    (void) memset(pDataParams->pCMACSubKey2, 0x00, (size_t) sizeof(pDataParams->pCMACSubKey2));
#endif /* PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION */

    return PH_ERR_SUCCESS;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <phCryptoSym_Sw_Encrypt>:

phStatus_t phCryptoSym_Sw_Encrypt(phCryptoSym_Sw_DataParams_t * pDataParams, uint16_t wOption, const uint8_t * pPlainBuff, uint16_t wBuffLen,
    uint8_t * pEncBuff)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b088      	sub	sp, #32
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	607a      	str	r2, [r7, #4]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	817b      	strh	r3, [r7, #10]
 8002c30:	4613      	mov	r3, r2
 8002c32:	813b      	strh	r3, [r7, #8]
    phStatus_t wStatus = 0;
 8002c34:	2300      	movs	r3, #0
 8002c36:	82fb      	strh	r3, [r7, #22]
    uint16_t wBlockSize = 0;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	82bb      	strh	r3, [r7, #20]
    uint16_t wIndex_Buff = 0;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	83fb      	strh	r3, [r7, #30]
    uint8_t bIndex_BlockSize = 0;
 8002c40:	2300      	movs	r3, #0
 8002c42:	777b      	strb	r3, [r7, #29]
    uint8_t * pIv = NULL;
 8002c44:	2300      	movs	r3, #0
 8002c46:	61bb      	str	r3, [r7, #24]
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
    uint8_t PH_CRYTOSYM_SW_FAST_RAM pHelperBuffer[PH_CRYPTOSYM_SW_MAX_BLOCK_SIZE];
#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */

    /* Get the block size of the currently loaded key */
    PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_GetConfig(pDataParams, PH_CRYPTOSYM_CONFIG_BLOCK_SIZE, &wBlockSize));
 8002c48:	f107 0314 	add.w	r3, r7, #20
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	2102      	movs	r1, #2
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f000 fb13 	bl	800327c <phCryptoSym_Sw_GetConfig>
 8002c56:	4603      	mov	r3, r0
 8002c58:	82fb      	strh	r3, [r7, #22]
 8002c5a:	8afb      	ldrh	r3, [r7, #22]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <phCryptoSym_Sw_Encrypt+0x44>
 8002c60:	8afb      	ldrh	r3, [r7, #22]
 8002c62:	e097      	b.n	8002d94 <phCryptoSym_Sw_Encrypt+0x174>

    /* Check that the input buffer length is a multiple of the block size; */
    if (0U != (wBuffLen % wBlockSize))
 8002c64:	8aba      	ldrh	r2, [r7, #20]
 8002c66:	893b      	ldrh	r3, [r7, #8]
 8002c68:	fbb3 f1f2 	udiv	r1, r3, r2
 8002c6c:	fb01 f202 	mul.w	r2, r1, r2
 8002c70:	1a9b      	subs	r3, r3, r2
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d002      	beq.n	8002c7e <phCryptoSym_Sw_Encrypt+0x5e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 8002c78:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8002c7c:	e08a      	b.n	8002d94 <phCryptoSym_Sw_Encrypt+0x174>
    }

    /* Set the IV to the iv specified in the private data params */
    pIv = pDataParams->pIV;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	3328      	adds	r3, #40	@ 0x28
 8002c82:	61bb      	str	r3, [r7, #24]

    /*Iterate over all blocks and perform the encryption*/
    wIndex_Buff = 0;
 8002c84:	2300      	movs	r3, #0
 8002c86:	83fb      	strh	r3, [r7, #30]
    while(wIndex_Buff < wBuffLen)
 8002c88:	e070      	b.n	8002d6c <phCryptoSym_Sw_Encrypt+0x14c>
    {
        /* Is the output array the same as the input array? Else we need to recopy the plaintext upfronjt */
        if(pPlainBuff != pEncBuff)
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d009      	beq.n	8002ca6 <phCryptoSym_Sw_Encrypt+0x86>
        {
            (void) memcpy(&pEncBuff[wIndex_Buff], &pPlainBuff[wIndex_Buff], wBlockSize);
 8002c92:	8bfb      	ldrh	r3, [r7, #30]
 8002c94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c96:	18d0      	adds	r0, r2, r3
 8002c98:	8bfb      	ldrh	r3, [r7, #30]
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	8aba      	ldrh	r2, [r7, #20]
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	f01a faac 	bl	801d1fe <memcpy>
        }

        /* In case of CBC mode, we need to perform the XOR with the previous cipher block */
        switch((uint8_t) (wOption))
 8002ca6:	897b      	ldrh	r3, [r7, #10]
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d027      	beq.n	8002cfe <phCryptoSym_Sw_Encrypt+0xde>
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	db22      	blt.n	8002cf8 <phCryptoSym_Sw_Encrypt+0xd8>
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d81f      	bhi.n	8002cf8 <phCryptoSym_Sw_Encrypt+0xd8>
        {
            case PH_CRYPTOSYM_CIPHER_MODE_CBC:
            case PH_CRYPTOSYM_CIPHER_MODE_CBC_DF4:
                for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8002cb8:	2300      	movs	r3, #0
 8002cba:	777b      	strb	r3, [r7, #29]
 8002cbc:	e016      	b.n	8002cec <phCryptoSym_Sw_Encrypt+0xcc>
                {
                    pEncBuff[bIndex_BlockSize + wIndex_Buff] ^= pIv[bIndex_BlockSize];
 8002cbe:	7f7a      	ldrb	r2, [r7, #29]
 8002cc0:	8bfb      	ldrh	r3, [r7, #30]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cc8:	4413      	add	r3, r2
 8002cca:	7819      	ldrb	r1, [r3, #0]
 8002ccc:	7f7b      	ldrb	r3, [r7, #29]
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	781a      	ldrb	r2, [r3, #0]
 8002cd4:	7f78      	ldrb	r0, [r7, #29]
 8002cd6:	8bfb      	ldrh	r3, [r7, #30]
 8002cd8:	4403      	add	r3, r0
 8002cda:	4618      	mov	r0, r3
 8002cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cde:	4403      	add	r3, r0
 8002ce0:	404a      	eors	r2, r1
 8002ce2:	b2d2      	uxtb	r2, r2
 8002ce4:	701a      	strb	r2, [r3, #0]
                for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8002ce6:	7f7b      	ldrb	r3, [r7, #29]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	777b      	strb	r3, [r7, #29]
 8002cec:	7f7b      	ldrb	r3, [r7, #29]
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	8abb      	ldrh	r3, [r7, #20]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d3e3      	bcc.n	8002cbe <phCryptoSym_Sw_Encrypt+0x9e>
                }
                break;
 8002cf6:	e003      	b.n	8002d00 <phCryptoSym_Sw_Encrypt+0xe0>
                /* Nothing to do here */
                break;

            default:
                /* Add additional Modes of operation in here! */
                return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_CRYPTOSYM);
 8002cf8:	f24e 1323 	movw	r3, #57635	@ 0xe123
 8002cfc:	e04a      	b.n	8002d94 <phCryptoSym_Sw_Encrypt+0x174>
                break;
 8002cfe:	bf00      	nop
            PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_EncryptBlock(pDataParams, pHelperBuffer));
        }

        (void) memcpy(&pEncBuff[wIndex_Buff], pHelperBuffer, wBlockSize);
#else
        if((uint8_t) wOption == PH_CRYPTOSYM_CIPHER_MODE_CBC_DF4)
 8002d00:	897b      	ldrh	r3, [r7, #10]
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d10d      	bne.n	8002d24 <phCryptoSym_Sw_Encrypt+0x104>
        {
            PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_DecryptBlock(pDataParams, &pEncBuff[wIndex_Buff]));
 8002d08:	8bfb      	ldrh	r3, [r7, #30]
 8002d0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d0c:	4413      	add	r3, r2
 8002d0e:	4619      	mov	r1, r3
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f002 fb91 	bl	8005438 <phCryptoSym_Sw_DecryptBlock>
 8002d16:	4603      	mov	r3, r0
 8002d18:	82fb      	strh	r3, [r7, #22]
 8002d1a:	8afb      	ldrh	r3, [r7, #22]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00f      	beq.n	8002d40 <phCryptoSym_Sw_Encrypt+0x120>
 8002d20:	8afb      	ldrh	r3, [r7, #22]
 8002d22:	e037      	b.n	8002d94 <phCryptoSym_Sw_Encrypt+0x174>
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_EncryptBlock(pDataParams, &pEncBuff[wIndex_Buff]));
 8002d24:	8bfb      	ldrh	r3, [r7, #30]
 8002d26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d28:	4413      	add	r3, r2
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f002 fadd 	bl	80052ec <phCryptoSym_Sw_EncryptBlock>
 8002d32:	4603      	mov	r3, r0
 8002d34:	82fb      	strh	r3, [r7, #22]
 8002d36:	8afb      	ldrh	r3, [r7, #22]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <phCryptoSym_Sw_Encrypt+0x120>
 8002d3c:	8afb      	ldrh	r3, [r7, #22]
 8002d3e:	e029      	b.n	8002d94 <phCryptoSym_Sw_Encrypt+0x174>
        }

#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */

        /* do the loop dependent post processing of the data according to the used mode of operation */
        switch((uint8_t) (wOption))
 8002d40:	897b      	ldrh	r3, [r7, #10]
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00c      	beq.n	8002d62 <phCryptoSym_Sw_Encrypt+0x142>
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	db07      	blt.n	8002d5c <phCryptoSym_Sw_Encrypt+0x13c>
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d804      	bhi.n	8002d5c <phCryptoSym_Sw_Encrypt+0x13c>
        {
            case PH_CRYPTOSYM_CIPHER_MODE_CBC:
            case PH_CRYPTOSYM_CIPHER_MODE_CBC_DF4:
                /* we should set the IV now to the old ciphertext... */
                pIv = &pEncBuff[wIndex_Buff];
 8002d52:	8bfb      	ldrh	r3, [r7, #30]
 8002d54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d56:	4413      	add	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
                break;
 8002d5a:	e003      	b.n	8002d64 <phCryptoSym_Sw_Encrypt+0x144>
                /* Nothing to do here */
                break;

            default:
                /* Add additional Modes of operation in here! */
                return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_CRYPTOSYM);
 8002d5c:	f24e 1323 	movw	r3, #57635	@ 0xe123
 8002d60:	e018      	b.n	8002d94 <phCryptoSym_Sw_Encrypt+0x174>
                break;
 8002d62:	bf00      	nop
        }

        /* update the loop counter */
        wIndex_Buff = wBlockSize + wIndex_Buff;
 8002d64:	8aba      	ldrh	r2, [r7, #20]
 8002d66:	8bfb      	ldrh	r3, [r7, #30]
 8002d68:	4413      	add	r3, r2
 8002d6a:	83fb      	strh	r3, [r7, #30]
    while(wIndex_Buff < wBuffLen)
 8002d6c:	8bfa      	ldrh	r2, [r7, #30]
 8002d6e:	893b      	ldrh	r3, [r7, #8]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d38a      	bcc.n	8002c8a <phCryptoSym_Sw_Encrypt+0x6a>
    } /* end of loop over all data blocks */

    /* do the final update of the IV according to the keep IV setting. */
    if((pDataParams->wKeepIV == PH_CRYPTOSYM_VALUE_KEEP_IV_ON) || (0U != (wOption & PH_EXCHANGE_BUFFERED_BIT)))
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d003      	beq.n	8002d84 <phCryptoSym_Sw_Encrypt+0x164>
 8002d7c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	da06      	bge.n	8002d92 <phCryptoSym_Sw_Encrypt+0x172>
    {
        (void) memcpy(pDataParams->pIV, pIv, wBlockSize);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	3328      	adds	r3, #40	@ 0x28
 8002d88:	8aba      	ldrh	r2, [r7, #20]
 8002d8a:	69b9      	ldr	r1, [r7, #24]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f01a fa36 	bl	801d1fe <memcpy>
    }

    return PH_ERR_SUCCESS;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3720      	adds	r7, #32
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <phCryptoSym_Sw_CalculateMac>:
    return PH_ERR_SUCCESS;
}

phStatus_t phCryptoSym_Sw_CalculateMac(phCryptoSym_Sw_DataParams_t * pDataParams, uint16_t wOption, const uint8_t * pData, uint16_t wDataLen,
    uint8_t * pMac, uint8_t * pMacLen)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b094      	sub	sp, #80	@ 0x50
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	607a      	str	r2, [r7, #4]
 8002da6:	461a      	mov	r2, r3
 8002da8:	460b      	mov	r3, r1
 8002daa:	817b      	strh	r3, [r7, #10]
 8002dac:	4613      	mov	r3, r2
 8002dae:	813b      	strh	r3, [r7, #8]
    phStatus_t wStatus = 0;
 8002db0:	2300      	movs	r3, #0
 8002db2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    uint16_t wBlockSize = 0;
 8002db6:	2300      	movs	r3, #0
 8002db8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    uint16_t wIndex_Buff = 0;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    uint8_t bIndex_BlockSize = 0;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
    uint8_t bPaddingLen = 0;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    uint8_t bLastBlock[16];
    uint8_t * pIv = NULL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	64bb      	str	r3, [r7, #72]	@ 0x48
    uint8_t * pSubKey2 = pDataParams->pCMACSubKey2;
#else
    uint8_t pSubKey1[PH_CRYPTOSYM_SW_MAX_BLOCK_SIZE];
    uint8_t pSubKey2[PH_CRYPTOSYM_SW_MAX_BLOCK_SIZE];

    (void) memset(pSubKey1, 0x00, (size_t) sizeof(pSubKey1));
 8002dd2:	f107 0320 	add.w	r3, r7, #32
 8002dd6:	2210      	movs	r2, #16
 8002dd8:	2100      	movs	r1, #0
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f01a f990 	bl	801d100 <memset>
    (void) memset(pSubKey2, 0x00, (size_t) sizeof(pSubKey2));
 8002de0:	f107 0310 	add.w	r3, r7, #16
 8002de4:	2210      	movs	r2, #16
 8002de6:	2100      	movs	r1, #0
 8002de8:	4618      	mov	r0, r3
 8002dea:	f01a f989 	bl	801d100 <memset>
#endif /* PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION */

    /* Clear MAC length */
    *pMacLen = 0;
 8002dee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002df0:	2200      	movs	r2, #0
 8002df2:	701a      	strb	r2, [r3, #0]

    /* Clear the last block array */
    (void) memset(bLastBlock, 0, (size_t) sizeof(bLastBlock));
 8002df4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002df8:	2210      	movs	r2, #16
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f01a f97f 	bl	801d100 <memset>

    /* Get the block size of the currently loaded key */
    PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_GetConfig(pDataParams, PH_CRYPTOSYM_CONFIG_BLOCK_SIZE, &wBlockSize));
 8002e02:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 8002e06:	461a      	mov	r2, r3
 8002e08:	2102      	movs	r1, #2
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 fa36 	bl	800327c <phCryptoSym_Sw_GetConfig>
 8002e10:	4603      	mov	r3, r0
 8002e12:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8002e16:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d002      	beq.n	8002e24 <phCryptoSym_Sw_CalculateMac+0x88>
 8002e1e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002e22:	e175      	b.n	8003110 <phCryptoSym_Sw_CalculateMac+0x374>

    /* In case of a first block and in case of KEEP_IV is not set, the IV has to be cleared. */
    if((0U != (wOption & PH_EXCHANGE_LEAVE_BUFFER_BIT)) ||
 8002e24:	897b      	ldrh	r3, [r7, #10]
 8002e26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10b      	bne.n	8002e46 <phCryptoSym_Sw_CalculateMac+0xaa>
        (pDataParams->wKeepIV == PH_CRYPTOSYM_VALUE_KEEP_IV_ON))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
    if((0U != (wOption & PH_EXCHANGE_LEAVE_BUFFER_BIT)) ||
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d007      	beq.n	8002e46 <phCryptoSym_Sw_CalculateMac+0xaa>
    {
        /* better leave the IV */
    }
    else
    {
        (void) memset(pDataParams->pIV, 0x00, wBlockSize);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	3328      	adds	r3, #40	@ 0x28
 8002e3a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8002e3e:	2100      	movs	r1, #0
 8002e40:	4618      	mov	r0, r3
 8002e42:	f01a f95d 	bl	801d100 <memset>
    }

    /* Now we may start with  MAC calculation */

    /*Let's find out whether we should complete the MAC or if this is just an intermediate MAC calculation */
    if (0U != (wOption & PH_EXCHANGE_BUFFERED_BIT))
 8002e46:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	da0e      	bge.n	8002e6c <phCryptoSym_Sw_CalculateMac+0xd0>
    {
        /* This is just an intermediate MAC */

        /* In this case we do not allow incomplete blocks. */
        if (0U != (wDataLen % wBlockSize))
 8002e4e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8002e52:	893b      	ldrh	r3, [r7, #8]
 8002e54:	fbb3 f1f2 	udiv	r1, r3, r2
 8002e58:	fb01 f202 	mul.w	r2, r1, r2
 8002e5c:	1a9b      	subs	r3, r3, r2
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 80ac 	beq.w	8002fbe <phCryptoSym_Sw_CalculateMac+0x222>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 8002e66:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8002e6a:	e151      	b.n	8003110 <phCryptoSym_Sw_CalculateMac+0x374>
        }
    }
    else
    {
        switch((uint8_t) (wOption))
 8002e6c:	897b      	ldrh	r3, [r7, #10]
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d002      	beq.n	8002e7a <phCryptoSym_Sw_CalculateMac+0xde>
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d015      	beq.n	8002ea4 <phCryptoSym_Sw_CalculateMac+0x108>
 8002e78:	e011      	b.n	8002e9e <phCryptoSym_Sw_CalculateMac+0x102>
                    PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_CMAC_GenerateK1K2(pDataParams, pSubKey1, pSubKey2));

                }
#else
                /* Always perform with sub key generation */
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_CMAC_GenerateK1K2(pDataParams, pSubKey1, pSubKey2));
 8002e7a:	f107 0210 	add.w	r2, r7, #16
 8002e7e:	f107 0320 	add.w	r3, r7, #32
 8002e82:	4619      	mov	r1, r3
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f002 f987 	bl	8005198 <phCryptoSym_Sw_CMAC_GenerateK1K2>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8002e90:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d007      	beq.n	8002ea8 <phCryptoSym_Sw_CalculateMac+0x10c>
 8002e98:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002e9c:	e138      	b.n	8003110 <phCryptoSym_Sw_CalculateMac+0x374>
                /* Nothing to do! */
                break;

            default:
                /* Add additional Modes of operation in here! */
                return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_CRYPTOSYM);
 8002e9e:	f24e 1323 	movw	r3, #57635	@ 0xe123
 8002ea2:	e135      	b.n	8003110 <phCryptoSym_Sw_CalculateMac+0x374>
                break;
 8002ea4:	bf00      	nop
 8002ea6:	e000      	b.n	8002eaa <phCryptoSym_Sw_CalculateMac+0x10e>
                break;
 8002ea8:	bf00      	nop
        }

        /* Get number of bytes in last block */
        bPaddingLen = (uint8_t) (wDataLen % wBlockSize);
 8002eaa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8002eae:	893b      	ldrh	r3, [r7, #8]
 8002eb0:	fbb3 f1f2 	udiv	r1, r3, r2
 8002eb4:	fb01 f202 	mul.w	r2, r1, r2
 8002eb8:	1a9b      	subs	r3, r3, r2
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

        /* do we have incomplete blocks? */
        if((0U != bPaddingLen) || (wDataLen == 0x0000U))
 8002ec0:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d102      	bne.n	8002ece <phCryptoSym_Sw_CalculateMac+0x132>
 8002ec8:	893b      	ldrh	r3, [r7, #8]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d13f      	bne.n	8002f4e <phCryptoSym_Sw_CalculateMac+0x1b2>
        {
            /* Update wDataLen, last block is in other array */
            wDataLen = (uint16_t) (wDataLen - bPaddingLen);
 8002ece:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	893a      	ldrh	r2, [r7, #8]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	813b      	strh	r3, [r7, #8]

            (void) memcpy(bLastBlock, &pData[wDataLen], bPaddingLen);
 8002eda:	893b      	ldrh	r3, [r7, #8]
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	18d1      	adds	r1, r2, r3
 8002ee0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002ee4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f01a f988 	bl	801d1fe <memcpy>

            /* Apply padding byte*/
            bLastBlock[bPaddingLen] = 0x80;
 8002eee:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002ef2:	3350      	adds	r3, #80	@ 0x50
 8002ef4:	443b      	add	r3, r7
 8002ef6:	2280      	movs	r2, #128	@ 0x80
 8002ef8:	f803 2c20 	strb.w	r2, [r3, #-32]
            /* pad with zeros not necessary, memset done upfront*/

            if((uint8_t) wOption == PH_CRYPTOSYM_MAC_MODE_CMAC)
 8002efc:	897b      	ldrh	r3, [r7, #10]
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d15c      	bne.n	8002fbe <phCryptoSym_Sw_CalculateMac+0x222>
            {
                /* XOR with K2, as we have an icomplete block */
                for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8002f04:	2300      	movs	r3, #0
 8002f06:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8002f0a:	e018      	b.n	8002f3e <phCryptoSym_Sw_CalculateMac+0x1a2>
                {
                    bLastBlock[bIndex_BlockSize] ^= pSubKey2[bIndex_BlockSize];
 8002f0c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002f10:	3350      	adds	r3, #80	@ 0x50
 8002f12:	443b      	add	r3, r7
 8002f14:	f813 1c20 	ldrb.w	r1, [r3, #-32]
 8002f18:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002f1c:	3350      	adds	r3, #80	@ 0x50
 8002f1e:	443b      	add	r3, r7
 8002f20:	f813 2c40 	ldrb.w	r2, [r3, #-64]
 8002f24:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002f28:	404a      	eors	r2, r1
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	3350      	adds	r3, #80	@ 0x50
 8002f2e:	443b      	add	r3, r7
 8002f30:	f803 2c20 	strb.w	r2, [r3, #-32]
                for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8002f34:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002f38:	3301      	adds	r3, #1
 8002f3a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8002f3e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d3df      	bcc.n	8002f0c <phCryptoSym_Sw_CalculateMac+0x170>
            if((uint8_t) wOption == PH_CRYPTOSYM_MAC_MODE_CMAC)
 8002f4c:	e037      	b.n	8002fbe <phCryptoSym_Sw_CalculateMac+0x222>
            }
        }
        else
        {
            /* Update wDataLen, last block is in other array */
            wDataLen = wDataLen - wBlockSize;
 8002f4e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002f52:	893a      	ldrh	r2, [r7, #8]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	813b      	strh	r3, [r7, #8]

            /* Copy whole block into bLastBlock */
            (void) memcpy(bLastBlock, &pData[wDataLen], wBlockSize);
 8002f58:	893b      	ldrh	r3, [r7, #8]
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	18d1      	adds	r1, r2, r3
 8002f5e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002f62:	461a      	mov	r2, r3
 8002f64:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f01a f948 	bl	801d1fe <memcpy>

            if((uint8_t) wOption == PH_CRYPTOSYM_MAC_MODE_CMAC)
 8002f6e:	897b      	ldrh	r3, [r7, #10]
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d123      	bne.n	8002fbe <phCryptoSym_Sw_CalculateMac+0x222>
            {
                /* XOR with K1, as we have a complete block */
                for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8002f76:	2300      	movs	r3, #0
 8002f78:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8002f7c:	e018      	b.n	8002fb0 <phCryptoSym_Sw_CalculateMac+0x214>
                {
                    bLastBlock[bIndex_BlockSize] ^= pSubKey1[bIndex_BlockSize];
 8002f7e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002f82:	3350      	adds	r3, #80	@ 0x50
 8002f84:	443b      	add	r3, r7
 8002f86:	f813 1c20 	ldrb.w	r1, [r3, #-32]
 8002f8a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002f8e:	3350      	adds	r3, #80	@ 0x50
 8002f90:	443b      	add	r3, r7
 8002f92:	f813 2c30 	ldrb.w	r2, [r3, #-48]
 8002f96:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002f9a:	404a      	eors	r2, r1
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	3350      	adds	r3, #80	@ 0x50
 8002fa0:	443b      	add	r3, r7
 8002fa2:	f803 2c20 	strb.w	r2, [r3, #-32]
                for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8002fa6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002faa:	3301      	adds	r3, #1
 8002fac:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8002fb0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d3df      	bcc.n	8002f7e <phCryptoSym_Sw_CalculateMac+0x1e2>
            }
        }
    }

    /* Set the IV to the iv specified in the private data params */
    pIv = pDataParams->pIV;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	3328      	adds	r3, #40	@ 0x28
 8002fc2:	64bb      	str	r3, [r7, #72]	@ 0x48

    /*Iterate over all blocks and perform the CBC encryption*/
    wIndex_Buff = 0;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    while(wIndex_Buff < wDataLen)
 8002fca:	e03b      	b.n	8003044 <phCryptoSym_Sw_CalculateMac+0x2a8>
    {
        /* perform the XOR with the previous cipher block */
        for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8002fcc:	2300      	movs	r3, #0
 8002fce:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8002fd2:	e019      	b.n	8003008 <phCryptoSym_Sw_CalculateMac+0x26c>
        {
            /* Note: after one round pIv == pMac */
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
            pHelperBuffer[bIndex_BlockSize] = pIv[bIndex_BlockSize] ^ pData[wIndex_Buff + bIndex_BlockSize];
#else
            pMac[bIndex_BlockSize] = pIv[bIndex_BlockSize] ^ pData[wIndex_Buff + bIndex_BlockSize];
 8002fd4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002fd8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002fda:	4413      	add	r3, r2
 8002fdc:	7819      	ldrb	r1, [r3, #0]
 8002fde:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8002fe2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002fe6:	4413      	add	r3, r2
 8002fe8:	461a      	mov	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4413      	add	r3, r2
 8002fee:	781a      	ldrb	r2, [r3, #0]
 8002ff0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002ff4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002ff6:	4403      	add	r3, r0
 8002ff8:	404a      	eors	r2, r1
 8002ffa:	b2d2      	uxtb	r2, r2
 8002ffc:	701a      	strb	r2, [r3, #0]
        for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8002ffe:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003002:	3301      	adds	r3, #1
 8003004:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8003008:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800300c:	b29a      	uxth	r2, r3
 800300e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003012:	429a      	cmp	r2, r3
 8003014:	d3de      	bcc.n	8002fd4 <phCryptoSym_Sw_CalculateMac+0x238>

#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
        PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_EncryptBlock(pDataParams, pHelperBuffer));
        (void) memcpy(pMac, pHelperBuffer, wBlockSize);
#else
        PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_EncryptBlock(pDataParams, pMac));
 8003016:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f002 f967 	bl	80052ec <phCryptoSym_Sw_EncryptBlock>
 800301e:	4603      	mov	r3, r0
 8003020:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8003024:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003028:	2b00      	cmp	r3, #0
 800302a:	d002      	beq.n	8003032 <phCryptoSym_Sw_CalculateMac+0x296>
 800302c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003030:	e06e      	b.n	8003110 <phCryptoSym_Sw_CalculateMac+0x374>
#endif

        /* set pIv to last cipher block*/
        pIv = pMac;
 8003032:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003034:	64bb      	str	r3, [r7, #72]	@ 0x48

        /* update the loop counter */
        wIndex_Buff = wBlockSize + wIndex_Buff;
 8003036:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800303a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800303e:	4413      	add	r3, r2
 8003040:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    while(wIndex_Buff < wDataLen)
 8003044:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8003048:	893b      	ldrh	r3, [r7, #8]
 800304a:	429a      	cmp	r2, r3
 800304c:	d3be      	bcc.n	8002fcc <phCryptoSym_Sw_CalculateMac+0x230>
    } /* end of loop over all data blocks */

    /* If we have a complete MAC, lets encrypt the last block */
    if(0U == (wOption & PH_EXCHANGE_BUFFERED_BIT))
 800304e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003052:	2b00      	cmp	r3, #0
 8003054:	db2f      	blt.n	80030b6 <phCryptoSym_Sw_CalculateMac+0x31a>
    {
        /* Encrypt last block. */
        /* perform the XOR with the previous cipher block */
        for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8003056:	2300      	movs	r3, #0
 8003058:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 800305c:	e016      	b.n	800308c <phCryptoSym_Sw_CalculateMac+0x2f0>
        {
            /* Note: after one round pIv == pMac */
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
            pHelperBuffer[bIndex_BlockSize] = pIv[bIndex_BlockSize] ^ bLastBlock[bIndex_BlockSize];
#else
            pMac[bIndex_BlockSize] = pIv[bIndex_BlockSize] ^ bLastBlock[bIndex_BlockSize];
 800305e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003062:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003064:	4413      	add	r3, r2
 8003066:	7819      	ldrb	r1, [r3, #0]
 8003068:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800306c:	3350      	adds	r3, #80	@ 0x50
 800306e:	443b      	add	r3, r7
 8003070:	f813 2c20 	ldrb.w	r2, [r3, #-32]
 8003074:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003078:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800307a:	4403      	add	r3, r0
 800307c:	404a      	eors	r2, r1
 800307e:	b2d2      	uxtb	r2, r2
 8003080:	701a      	strb	r2, [r3, #0]
        for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8003082:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003086:	3301      	adds	r3, #1
 8003088:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 800308c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003090:	b29a      	uxth	r2, r3
 8003092:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003096:	429a      	cmp	r2, r3
 8003098:	d3e1      	bcc.n	800305e <phCryptoSym_Sw_CalculateMac+0x2c2>
        }
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
        PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_EncryptBlock(pDataParams, pHelperBuffer));
        (void) memcpy(pMac, pHelperBuffer, wBlockSize);
#else
        PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_EncryptBlock(pDataParams, pMac));
 800309a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f002 f925 	bl	80052ec <phCryptoSym_Sw_EncryptBlock>
 80030a2:	4603      	mov	r3, r0
 80030a4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80030a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d002      	beq.n	80030b6 <phCryptoSym_Sw_CalculateMac+0x31a>
 80030b0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80030b4:	e02c      	b.n	8003110 <phCryptoSym_Sw_CalculateMac+0x374>
#endif

    }

    /* do the final update of the IV according to the settings */
    if((pDataParams->wKeepIV == PH_CRYPTOSYM_VALUE_KEEP_IV_ON) || (0U != (wOption & PH_EXCHANGE_BUFFERED_BIT)))
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d003      	beq.n	80030c6 <phCryptoSym_Sw_CalculateMac+0x32a>
 80030be:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	da08      	bge.n	80030d8 <phCryptoSym_Sw_CalculateMac+0x33c>
    {
        (void) memcpy(pDataParams->pIV, pMac, wBlockSize);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	3328      	adds	r3, #40	@ 0x28
 80030ca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80030ce:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80030d0:	4618      	mov	r0, r3
 80030d2:	f01a f894 	bl	801d1fe <memcpy>
 80030d6:	e007      	b.n	80030e8 <phCryptoSym_Sw_CalculateMac+0x34c>
    }
    else
    {
        /* Clear the IV for security reasons */
        (void) memset(pDataParams->pIV, 0, wBlockSize);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	3328      	adds	r3, #40	@ 0x28
 80030dc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80030e0:	2100      	movs	r1, #0
 80030e2:	4618      	mov	r0, r3
 80030e4:	f01a f80c 	bl	801d100 <memset>
    }

#ifdef PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION
    /* Clear key arrays */
    (void) memset(pSubKey1, 0x00, (size_t) sizeof(pSubKey1));
 80030e8:	f107 0320 	add.w	r3, r7, #32
 80030ec:	2210      	movs	r2, #16
 80030ee:	2100      	movs	r1, #0
 80030f0:	4618      	mov	r0, r3
 80030f2:	f01a f805 	bl	801d100 <memset>
    (void) memset(pSubKey2, 0x00, (size_t) sizeof(pSubKey2));
 80030f6:	f107 0310 	add.w	r3, r7, #16
 80030fa:	2210      	movs	r2, #16
 80030fc:	2100      	movs	r1, #0
 80030fe:	4618      	mov	r0, r3
 8003100:	f019 fffe 	bl	801d100 <memset>
#endif

    *pMacLen = (uint8_t) wBlockSize;
 8003104:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003108:	b2da      	uxtb	r2, r3
 800310a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800310c:	701a      	strb	r2, [r3, #0]
    return PH_ERR_SUCCESS;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3750      	adds	r7, #80	@ 0x50
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <phCryptoSym_Sw_LoadIv>:

phStatus_t phCryptoSym_Sw_LoadIv(phCryptoSym_Sw_DataParams_t * pDataParams, const uint8_t * pIV, uint8_t bIVLen)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	4613      	mov	r3, r2
 8003124:	71fb      	strb	r3, [r7, #7]
    phStatus_t  PH_MEMLOC_REM wStatus = 0;
 8003126:	2300      	movs	r3, #0
 8003128:	82fb      	strh	r3, [r7, #22]
    uint16_t    PH_MEMLOC_REM wBlockSize = 0;
 800312a:	2300      	movs	r3, #0
 800312c:	82bb      	strh	r3, [r7, #20]

    /* Get the block size of the currently loaded key */
    PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_GetConfig(pDataParams, PH_CRYPTOSYM_CONFIG_BLOCK_SIZE, &wBlockSize));
 800312e:	f107 0314 	add.w	r3, r7, #20
 8003132:	461a      	mov	r2, r3
 8003134:	2102      	movs	r1, #2
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 f8a0 	bl	800327c <phCryptoSym_Sw_GetConfig>
 800313c:	4603      	mov	r3, r0
 800313e:	82fb      	strh	r3, [r7, #22]
 8003140:	8afb      	ldrh	r3, [r7, #22]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <phCryptoSym_Sw_LoadIv+0x32>
 8003146:	8afb      	ldrh	r3, [r7, #22]
 8003148:	e00f      	b.n	800316a <phCryptoSym_Sw_LoadIv+0x52>

    /* Check block-size */
    if(bIVLen != wBlockSize)
 800314a:	79fb      	ldrb	r3, [r7, #7]
 800314c:	b29a      	uxth	r2, r3
 800314e:	8abb      	ldrh	r3, [r7, #20]
 8003150:	429a      	cmp	r2, r3
 8003152:	d002      	beq.n	800315a <phCryptoSym_Sw_LoadIv+0x42>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 8003154:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8003158:	e007      	b.n	800316a <phCryptoSym_Sw_LoadIv+0x52>
    }

    /* Update IV */
    (void) memcpy(pDataParams->pIV, pIV, wBlockSize);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	3328      	adds	r3, #40	@ 0x28
 800315e:	8aba      	ldrh	r2, [r7, #20]
 8003160:	68b9      	ldr	r1, [r7, #8]
 8003162:	4618      	mov	r0, r3
 8003164:	f01a f84b 	bl	801d1fe <memcpy>

    return PH_ERR_SUCCESS;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
	...

08003174 <phCryptoSym_Sw_LoadKeyDirect>:
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_CRYPTOSYM);
#endif /* NXPBUILD__PH_KEYSTORE */
}

phStatus_t phCryptoSym_Sw_LoadKeyDirect(phCryptoSym_Sw_DataParams_t * pDataParams, const uint8_t * pKey, uint16_t wKeyType)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	4613      	mov	r3, r2
 8003180:	80fb      	strh	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM wStatus = 0;
 8003182:	2300      	movs	r3, #0
 8003184:	82fb      	strh	r3, [r7, #22]

    /* Clear existing key */
    (void) memset(pDataParams->pKey, 0x00, (size_t) sizeof(pDataParams->pKey));
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	3308      	adds	r3, #8
 800318a:	2220      	movs	r2, #32
 800318c:	2100      	movs	r1, #0
 800318e:	4618      	mov	r0, r3
 8003190:	f019 ffb6 	bl	801d100 <memset>
#ifndef PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION
        /* Disable the CMAC calculated Flag */
        pDataParams->bCMACSubKeysInitialized = PH_OFF;
#endif /* PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION */

        switch(wKeyType)
 8003194:	88fb      	ldrh	r3, [r7, #6]
 8003196:	2b05      	cmp	r3, #5
 8003198:	d859      	bhi.n	800324e <phCryptoSym_Sw_LoadKeyDirect+0xda>
 800319a:	a201      	add	r2, pc, #4	@ (adr r2, 80031a0 <phCryptoSym_Sw_LoadKeyDirect+0x2c>)
 800319c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a0:	080031b9 	.word	0x080031b9
 80031a4:	080031d3 	.word	0x080031d3
 80031a8:	080031ed 	.word	0x080031ed
 80031ac:	08003207 	.word	0x08003207
 80031b0:	0800321f 	.word	0x0800321f
 80031b4:	08003237 	.word	0x08003237
        {
#ifdef PH_CRYPTOSYM_SW_AES
            case PH_CRYPTOSYM_KEY_TYPE_AES128:
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_Aes_KeyExpansion(
 80031b8:	232c      	movs	r3, #44	@ 0x2c
 80031ba:	2204      	movs	r2, #4
 80031bc:	68b9      	ldr	r1, [r7, #8]
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f000 f8d8 	bl	8003374 <phCryptoSym_Sw_Aes_KeyExpansion>
 80031c4:	4603      	mov	r3, r0
 80031c6:	82fb      	strh	r3, [r7, #22]
 80031c8:	8afb      	ldrh	r3, [r7, #22]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d042      	beq.n	8003254 <phCryptoSym_Sw_LoadKeyDirect+0xe0>
 80031ce:	8afb      	ldrh	r3, [r7, #22]
 80031d0:	e04f      	b.n	8003272 <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                    PH_CRYPTOSYM_AES128_KEY_SIZE >> 2U,
                    (PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_128 + 1U) << 2U));
                break;

            case PH_CRYPTOSYM_KEY_TYPE_AES192:
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_Aes_KeyExpansion(
 80031d2:	2334      	movs	r3, #52	@ 0x34
 80031d4:	2206      	movs	r2, #6
 80031d6:	68b9      	ldr	r1, [r7, #8]
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 f8cb 	bl	8003374 <phCryptoSym_Sw_Aes_KeyExpansion>
 80031de:	4603      	mov	r3, r0
 80031e0:	82fb      	strh	r3, [r7, #22]
 80031e2:	8afb      	ldrh	r3, [r7, #22]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d037      	beq.n	8003258 <phCryptoSym_Sw_LoadKeyDirect+0xe4>
 80031e8:	8afb      	ldrh	r3, [r7, #22]
 80031ea:	e042      	b.n	8003272 <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                    PH_CRYPTOSYM_AES192_KEY_SIZE >> 2U,
                    (PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_192 + 1U) << 2U));
                break;

            case PH_CRYPTOSYM_KEY_TYPE_AES256:
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_Aes_KeyExpansion(
 80031ec:	233c      	movs	r3, #60	@ 0x3c
 80031ee:	2208      	movs	r2, #8
 80031f0:	68b9      	ldr	r1, [r7, #8]
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f000 f8be 	bl	8003374 <phCryptoSym_Sw_Aes_KeyExpansion>
 80031f8:	4603      	mov	r3, r0
 80031fa:	82fb      	strh	r3, [r7, #22]
 80031fc:	8afb      	ldrh	r3, [r7, #22]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d02c      	beq.n	800325c <phCryptoSym_Sw_LoadKeyDirect+0xe8>
 8003202:	8afb      	ldrh	r3, [r7, #22]
 8003204:	e035      	b.n	8003272 <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                break;
#endif /* PH_CRYPTOSYM_SW_AES */

#ifdef PH_CRYPTOSYM_SW_DES
            case PH_CRYPTOSYM_KEY_TYPE_DES:
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_Des_KeyInit(pDataParams, pKey, 1));
 8003206:	2201      	movs	r2, #1
 8003208:	68b9      	ldr	r1, [r7, #8]
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 fe62 	bl	8003ed4 <phCryptoSym_Sw_Des_KeyInit>
 8003210:	4603      	mov	r3, r0
 8003212:	82fb      	strh	r3, [r7, #22]
 8003214:	8afb      	ldrh	r3, [r7, #22]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d022      	beq.n	8003260 <phCryptoSym_Sw_LoadKeyDirect+0xec>
 800321a:	8afb      	ldrh	r3, [r7, #22]
 800321c:	e029      	b.n	8003272 <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                break;

            case PH_CRYPTOSYM_KEY_TYPE_2K3DES:
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_Des_KeyInit(pDataParams, pKey, 2));
 800321e:	2202      	movs	r2, #2
 8003220:	68b9      	ldr	r1, [r7, #8]
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f000 fe56 	bl	8003ed4 <phCryptoSym_Sw_Des_KeyInit>
 8003228:	4603      	mov	r3, r0
 800322a:	82fb      	strh	r3, [r7, #22]
 800322c:	8afb      	ldrh	r3, [r7, #22]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d018      	beq.n	8003264 <phCryptoSym_Sw_LoadKeyDirect+0xf0>
 8003232:	8afb      	ldrh	r3, [r7, #22]
 8003234:	e01d      	b.n	8003272 <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                break;

            case PH_CRYPTOSYM_KEY_TYPE_3K3DES:
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_Des_KeyInit(pDataParams, pKey, 3));
 8003236:	2203      	movs	r2, #3
 8003238:	68b9      	ldr	r1, [r7, #8]
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 fe4a 	bl	8003ed4 <phCryptoSym_Sw_Des_KeyInit>
 8003240:	4603      	mov	r3, r0
 8003242:	82fb      	strh	r3, [r7, #22]
 8003244:	8afb      	ldrh	r3, [r7, #22]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00e      	beq.n	8003268 <phCryptoSym_Sw_LoadKeyDirect+0xf4>
 800324a:	8afb      	ldrh	r3, [r7, #22]
 800324c:	e011      	b.n	8003272 <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                break;
#endif /* PH_CRYPTOSYM_SW_DES */

        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_CRYPTOSYM);
 800324e:	f24e 1323 	movw	r3, #57635	@ 0xe123
 8003252:	e00e      	b.n	8003272 <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                break;
 8003254:	bf00      	nop
 8003256:	e008      	b.n	800326a <phCryptoSym_Sw_LoadKeyDirect+0xf6>
                break;
 8003258:	bf00      	nop
 800325a:	e006      	b.n	800326a <phCryptoSym_Sw_LoadKeyDirect+0xf6>
                break;
 800325c:	bf00      	nop
 800325e:	e004      	b.n	800326a <phCryptoSym_Sw_LoadKeyDirect+0xf6>
                break;
 8003260:	bf00      	nop
 8003262:	e002      	b.n	800326a <phCryptoSym_Sw_LoadKeyDirect+0xf6>
                break;
 8003264:	bf00      	nop
 8003266:	e000      	b.n	800326a <phCryptoSym_Sw_LoadKeyDirect+0xf6>
                break;
 8003268:	bf00      	nop
        }
    }
    /* Update global KeyType */
    pDataParams->wKeyType = wKeyType;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	88fa      	ldrh	r2, [r7, #6]
 800326e:	871a      	strh	r2, [r3, #56]	@ 0x38

    return PH_ERR_SUCCESS;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop

0800327c <phCryptoSym_Sw_GetConfig>:

    return PH_ERR_SUCCESS;
}

phStatus_t phCryptoSym_Sw_GetConfig(phCryptoSym_Sw_DataParams_t * pDataParams, uint16_t wConfig, uint16_t * pValue)
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	460b      	mov	r3, r1
 8003286:	607a      	str	r2, [r7, #4]
 8003288:	817b      	strh	r3, [r7, #10]
    switch(wConfig)
 800328a:	897b      	ldrh	r3, [r7, #10]
 800328c:	2b06      	cmp	r3, #6
 800328e:	d867      	bhi.n	8003360 <phCryptoSym_Sw_GetConfig+0xe4>
 8003290:	a201      	add	r2, pc, #4	@ (adr r2, 8003298 <phCryptoSym_Sw_GetConfig+0x1c>)
 8003292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003296:	bf00      	nop
 8003298:	08003343 	.word	0x08003343
 800329c:	080032b5 	.word	0x080032b5
 80032a0:	08003315 	.word	0x08003315
 80032a4:	0800334d 	.word	0x0800334d
 80032a8:	08003361 	.word	0x08003361
 80032ac:	08003361 	.word	0x08003361
 80032b0:	08003357 	.word	0x08003357
    {
        case PH_CRYPTOSYM_CONFIG_KEY_SIZE:
            switch(pDataParams->wKeyType)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80032b8:	2b05      	cmp	r3, #5
 80032ba:	d827      	bhi.n	800330c <phCryptoSym_Sw_GetConfig+0x90>
 80032bc:	a201      	add	r2, pc, #4	@ (adr r2, 80032c4 <phCryptoSym_Sw_GetConfig+0x48>)
 80032be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c2:	bf00      	nop
 80032c4:	080032dd 	.word	0x080032dd
 80032c8:	080032e5 	.word	0x080032e5
 80032cc:	080032ed 	.word	0x080032ed
 80032d0:	080032f5 	.word	0x080032f5
 80032d4:	080032fd 	.word	0x080032fd
 80032d8:	08003305 	.word	0x08003305
            {
#ifdef PH_CRYPTOSYM_SW_AES
                case PH_CRYPTOSYM_KEY_TYPE_AES128:
                    *pValue = PH_CRYPTOSYM_AES128_KEY_SIZE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2210      	movs	r2, #16
 80032e0:	801a      	strh	r2, [r3, #0]
                    break;
 80032e2:	e016      	b.n	8003312 <phCryptoSym_Sw_GetConfig+0x96>

                case PH_CRYPTOSYM_KEY_TYPE_AES192:
                    *pValue = PH_CRYPTOSYM_AES192_KEY_SIZE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2218      	movs	r2, #24
 80032e8:	801a      	strh	r2, [r3, #0]
                    break;
 80032ea:	e012      	b.n	8003312 <phCryptoSym_Sw_GetConfig+0x96>

                case PH_CRYPTOSYM_KEY_TYPE_AES256:
                    *pValue = PH_CRYPTOSYM_AES256_KEY_SIZE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2220      	movs	r2, #32
 80032f0:	801a      	strh	r2, [r3, #0]
                    break;
 80032f2:	e00e      	b.n	8003312 <phCryptoSym_Sw_GetConfig+0x96>
#endif /* PH_CRYPTOSYM_SW_AES */

#ifdef PH_CRYPTOSYM_SW_DES
                case PH_CRYPTOSYM_KEY_TYPE_DES:
                    *pValue = PH_CRYPTOSYM_DES_KEY_SIZE;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2208      	movs	r2, #8
 80032f8:	801a      	strh	r2, [r3, #0]
                    break;
 80032fa:	e00a      	b.n	8003312 <phCryptoSym_Sw_GetConfig+0x96>

                case PH_CRYPTOSYM_KEY_TYPE_2K3DES:
                    *pValue = PH_CRYPTOSYM_2K3DES_KEY_SIZE;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2210      	movs	r2, #16
 8003300:	801a      	strh	r2, [r3, #0]
                    break;
 8003302:	e006      	b.n	8003312 <phCryptoSym_Sw_GetConfig+0x96>

                case PH_CRYPTOSYM_KEY_TYPE_3K3DES:
                    *pValue = PH_CRYPTOSYM_3K3DES_KEY_SIZE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2218      	movs	r2, #24
 8003308:	801a      	strh	r2, [r3, #0]
                    break;
 800330a:	e002      	b.n	8003312 <phCryptoSym_Sw_GetConfig+0x96>
#endif /* PH_CRYPTOSYM_SW_DES */

                default:
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 800330c:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8003310:	e02a      	b.n	8003368 <phCryptoSym_Sw_GetConfig+0xec>
            }
            break;
 8003312:	e028      	b.n	8003366 <phCryptoSym_Sw_GetConfig+0xea>

        case PH_CRYPTOSYM_CONFIG_BLOCK_SIZE:
            switch(pDataParams->wKeyType)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8003318:	2b02      	cmp	r3, #2
 800331a:	dc02      	bgt.n	8003322 <phCryptoSym_Sw_GetConfig+0xa6>
 800331c:	2b00      	cmp	r3, #0
 800331e:	da04      	bge.n	800332a <phCryptoSym_Sw_GetConfig+0xae>
 8003320:	e00b      	b.n	800333a <phCryptoSym_Sw_GetConfig+0xbe>
 8003322:	3b03      	subs	r3, #3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d808      	bhi.n	800333a <phCryptoSym_Sw_GetConfig+0xbe>
 8003328:	e003      	b.n	8003332 <phCryptoSym_Sw_GetConfig+0xb6>
            {
#ifdef PH_CRYPTOSYM_SW_AES
                case PH_CRYPTOSYM_KEY_TYPE_AES128:
                case PH_CRYPTOSYM_KEY_TYPE_AES192:
                case PH_CRYPTOSYM_KEY_TYPE_AES256:
                    *pValue = PH_CRYPTOSYM_AES_BLOCK_SIZE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2210      	movs	r2, #16
 800332e:	801a      	strh	r2, [r3, #0]
                    break;
 8003330:	e006      	b.n	8003340 <phCryptoSym_Sw_GetConfig+0xc4>

#ifdef PH_CRYPTOSYM_SW_DES
                case PH_CRYPTOSYM_KEY_TYPE_DES:
                case PH_CRYPTOSYM_KEY_TYPE_2K3DES:
                case PH_CRYPTOSYM_KEY_TYPE_3K3DES:
                    *pValue = PH_CRYPTOSYM_DES_BLOCK_SIZE;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2208      	movs	r2, #8
 8003336:	801a      	strh	r2, [r3, #0]
                    break;
 8003338:	e002      	b.n	8003340 <phCryptoSym_Sw_GetConfig+0xc4>
#endif /* PH_CRYPTOSYM_SW_DES */

                default:
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 800333a:	f24e 1321 	movw	r3, #57633	@ 0xe121
 800333e:	e013      	b.n	8003368 <phCryptoSym_Sw_GetConfig+0xec>
            }
            break;
 8003340:	e011      	b.n	8003366 <phCryptoSym_Sw_GetConfig+0xea>

        case PH_CRYPTOSYM_CONFIG_KEY_TYPE:
            *pValue = pDataParams->wKeyType;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	801a      	strh	r2, [r3, #0]
            break;
 800334a:	e00c      	b.n	8003366 <phCryptoSym_Sw_GetConfig+0xea>

        case PH_CRYPTOSYM_CONFIG_KEEP_IV:
            *pValue = pDataParams->wKeepIV;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	801a      	strh	r2, [r3, #0]
            break;
 8003354:	e007      	b.n	8003366 <phCryptoSym_Sw_GetConfig+0xea>

        case PH_CRYPTOSYM_CONFIG_ADDITIONAL_INFO:
            *pValue = pDataParams->wAddInfo;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	801a      	strh	r2, [r3, #0]
            break;
 800335e:	e002      	b.n	8003366 <phCryptoSym_Sw_GetConfig+0xea>

        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_CRYPTOSYM);
 8003360:	f24e 1323 	movw	r3, #57635	@ 0xe123
 8003364:	e000      	b.n	8003368 <phCryptoSym_Sw_GetConfig+0xec>
    }

    return PH_ERR_SUCCESS;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <phCryptoSym_Sw_Aes_KeyExpansion>:
    phCryptoSym_Sw_DataParams_t * pDataParams,
    const uint8_t * pKey,
    uint8_t bNkCurrent,
    uint8_t bNkMax
    )
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	4611      	mov	r1, r2
 8003380:	461a      	mov	r2, r3
 8003382:	460b      	mov	r3, r1
 8003384:	71fb      	strb	r3, [r7, #7]
 8003386:	4613      	mov	r3, r2
 8003388:	71bb      	strb	r3, [r7, #6]
    {
        /* Noting to do */;
    }

    /* We only need to copy the key provided... */
    (void)memcpy(pDataParams->pKey, pKey, (size_t)(((uint32_t)bNkCurrent) << 2U));
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f103 0008 	add.w	r0, r3, #8
 8003390:	79fb      	ldrb	r3, [r7, #7]
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	461a      	mov	r2, r3
 8003396:	68b9      	ldr	r1, [r7, #8]
 8003398:	f019 ff31 	bl	801d1fe <memcpy>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
    return PH_ERR_SUCCESS;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <phCryptoSym_Sw_Aes_EncryptBlock>:
phStatus_t phCryptoSym_Sw_Aes_EncryptBlock(
    phCryptoSym_Sw_DataParams_t * pDataParams,
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pBlock,
    uint8_t bNumRounds
    )
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b090      	sub	sp, #64	@ 0x40
 80033aa:	af02      	add	r7, sp, #8
 80033ac:	60f8      	str	r0, [r7, #12]
 80033ae:	60b9      	str	r1, [r7, #8]
 80033b0:	4613      	mov	r3, r2
 80033b2:	71fb      	strb	r3, [r7, #7]
    /* AddRoundKey(state, w[0, Nb-1])  See Sec. 5.1.4*/
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, pDataParams->pKey, 0);
#else
    uint8_t i;
    uint8_t bNk;
    uint8_t bCurrentNk = 0;
 80033b4:	2300      	movs	r3, #0
 80033b6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    uint8_t PH_CRYTOSYM_SW_FAST_RAM bTmpKey[PH_CRYPTOSYM_AES256_KEY_SIZE];

    /* In case of online key scheduling, the key needs to be copied into a temporary array and the bNk as well as the
    bCurrentNk have to be provided to the add round key function */
    switch(pDataParams->wKeyType)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d00e      	beq.n	80033e0 <phCryptoSym_Sw_Aes_EncryptBlock+0x3a>
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	dc10      	bgt.n	80033e8 <phCryptoSym_Sw_Aes_EncryptBlock+0x42>
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d002      	beq.n	80033d0 <phCryptoSym_Sw_Aes_EncryptBlock+0x2a>
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d004      	beq.n	80033d8 <phCryptoSym_Sw_Aes_EncryptBlock+0x32>
 80033ce:	e00b      	b.n	80033e8 <phCryptoSym_Sw_Aes_EncryptBlock+0x42>
    {
    case PH_CRYPTOSYM_KEY_TYPE_AES128:
        bNk = 4;
 80033d0:	2304      	movs	r3, #4
 80033d2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        break;
 80033d6:	e00a      	b.n	80033ee <phCryptoSym_Sw_Aes_EncryptBlock+0x48>
    case PH_CRYPTOSYM_KEY_TYPE_AES192:
        bNk = 6;
 80033d8:	2306      	movs	r3, #6
 80033da:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        break;
 80033de:	e006      	b.n	80033ee <phCryptoSym_Sw_Aes_EncryptBlock+0x48>
    case PH_CRYPTOSYM_KEY_TYPE_AES256:
        bNk = 8;
 80033e0:	2308      	movs	r3, #8
 80033e2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        break;
 80033e6:	e002      	b.n	80033ee <phCryptoSym_Sw_Aes_EncryptBlock+0x48>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_CRYPTOSYM);
 80033e8:	f24e 137f 	movw	r3, #57727	@ 0xe17f
 80033ec:	e04a      	b.n	8003484 <phCryptoSym_Sw_Aes_EncryptBlock+0xde>
    }
    /* Recopy the key */
    (void)memcpy(bTmpKey, pDataParams->pKey, (size_t)(((uint32_t)bNk) << 2U));
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f103 0108 	add.w	r1, r3, #8
 80033f4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80033f8:	009a      	lsls	r2, r3, #2
 80033fa:	f107 0314 	add.w	r3, r7, #20
 80033fe:	4618      	mov	r0, r3
 8003400:	f019 fefd 	bl	801d1fe <memcpy>

    /* AddRoundKey(state, w[0, Nb-1])  See Sec. 5.1.4*/
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bCurrentNk, bNk, PH_CRYPTOSYM_KEYSCHEDULE_ENCRYPTION);
 8003404:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003408:	f107 0235 	add.w	r2, r7, #53	@ 0x35
 800340c:	f107 0114 	add.w	r1, r7, #20
 8003410:	200f      	movs	r0, #15
 8003412:	9000      	str	r0, [sp, #0]
 8003414:	68b8      	ldr	r0, [r7, #8]
 8003416:	f000 fba9 	bl	8003b6c <phCryptoSym_Sw_Aes_AddRoundKey>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */

    /* for round = 1 step 1 to Nr-1 */
    for (i=1; i< bNumRounds; i++)
 800341a:	2301      	movs	r3, #1
 800341c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8003420:	e015      	b.n	800344e <phCryptoSym_Sw_Aes_EncryptBlock+0xa8>
    {
        /* SubBytes(state)  See Sec. 5.1.1 */
        /* ShiftRows(state)  See Sec. 5.1.2*/
        phCryptoSym_Sw_Aes_SubBytesShiftRows(pBlock);
 8003422:	68b8      	ldr	r0, [r7, #8]
 8003424:	f000 f8c8 	bl	80035b8 <phCryptoSym_Sw_Aes_SubBytesShiftRows>
        /* MixColumns(state)  See Sec. 5.1.3 */
        phCryptoSym_Sw_Aes_MixColumns(pBlock);
 8003428:	68b8      	ldr	r0, [r7, #8]
 800342a:	f000 fa09 	bl	8003840 <phCryptoSym_Sw_Aes_MixColumns>
#ifndef PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
        /* AddRoundKey(state, w[round*Nb, (round+1U)*Nb-1]) */
        phCryptoSym_Sw_Aes_AddRoundKey(pBlock, pDataParams->pKey, i);
#else
        /* AddRoundKey(state, w[round*Nb, (round+1U)*Nb-1]) */
        phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bCurrentNk, bNk, PH_CRYPTOSYM_KEYSCHEDULE_ENCRYPTION);
 800342e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003432:	f107 0235 	add.w	r2, r7, #53	@ 0x35
 8003436:	f107 0114 	add.w	r1, r7, #20
 800343a:	200f      	movs	r0, #15
 800343c:	9000      	str	r0, [sp, #0]
 800343e:	68b8      	ldr	r0, [r7, #8]
 8003440:	f000 fb94 	bl	8003b6c <phCryptoSym_Sw_Aes_AddRoundKey>
    for (i=1; i< bNumRounds; i++)
 8003444:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003448:	3301      	adds	r3, #1
 800344a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800344e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8003452:	79fb      	ldrb	r3, [r7, #7]
 8003454:	429a      	cmp	r2, r3
 8003456:	d3e4      	bcc.n	8003422 <phCryptoSym_Sw_Aes_EncryptBlock+0x7c>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
    } /* end for */

    /* SubBytes(state) */
    /* ShiftRows(state) */
    phCryptoSym_Sw_Aes_SubBytesShiftRows(pBlock);
 8003458:	68b8      	ldr	r0, [r7, #8]
 800345a:	f000 f8ad 	bl	80035b8 <phCryptoSym_Sw_Aes_SubBytesShiftRows>
#ifndef PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
    /* AddRoundKey(state, w[Nr*Nb, (Nr+1U)*Nb-1]) */
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, pDataParams->pKey, i);
#else
    /* AddRoundKey(state, w[Nr*Nb, (Nr+1U)*Nb-1]) */
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bCurrentNk, bNk, PH_CRYPTOSYM_KEYSCHEDULE_ENCRYPTION);
 800345e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003462:	f107 0235 	add.w	r2, r7, #53	@ 0x35
 8003466:	f107 0114 	add.w	r1, r7, #20
 800346a:	200f      	movs	r0, #15
 800346c:	9000      	str	r0, [sp, #0]
 800346e:	68b8      	ldr	r0, [r7, #8]
 8003470:	f000 fb7c 	bl	8003b6c <phCryptoSym_Sw_Aes_AddRoundKey>

    /* Clear TmpKey */
    (void)memset(bTmpKey, 0x00, (size_t)sizeof(bTmpKey));
 8003474:	f107 0314 	add.w	r3, r7, #20
 8003478:	2220      	movs	r2, #32
 800347a:	2100      	movs	r1, #0
 800347c:	4618      	mov	r0, r3
 800347e:	f019 fe3f 	bl	801d100 <memset>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */

    return PH_ERR_SUCCESS;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3738      	adds	r7, #56	@ 0x38
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <phCryptoSym_Sw_Aes_DecryptBlock>:
phStatus_t phCryptoSym_Sw_Aes_DecryptBlock(
    phCryptoSym_Sw_DataParams_t * pDataParams,
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pBlock,
    uint8_t bNumRounds
    )
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b090      	sub	sp, #64	@ 0x40
 8003490:	af02      	add	r7, sp, #8
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	4613      	mov	r3, r2
 8003498:	71fb      	strb	r3, [r7, #7]

    /* In case of online key scheduling, the key needs to be copied into a temporary array and the bNk as well as the
    bCurrentNk have to be provided to the add round key function. In addition, the complete key expansion has to be
    performed upfront because the first round key needed is the one corresponding to round 10/12/14. */

    switch(pDataParams->wKeyType)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d014      	beq.n	80034cc <phCryptoSym_Sw_Aes_DecryptBlock+0x40>
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	dc19      	bgt.n	80034da <phCryptoSym_Sw_Aes_DecryptBlock+0x4e>
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d002      	beq.n	80034b0 <phCryptoSym_Sw_Aes_DecryptBlock+0x24>
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d007      	beq.n	80034be <phCryptoSym_Sw_Aes_DecryptBlock+0x32>
 80034ae:	e014      	b.n	80034da <phCryptoSym_Sw_Aes_DecryptBlock+0x4e>
    {
    case PH_CRYPTOSYM_KEY_TYPE_AES128:
        bNk = 4;
 80034b0:	2304      	movs	r3, #4
 80034b2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        bCurrentNk = 43;
 80034b6:	232b      	movs	r3, #43	@ 0x2b
 80034b8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        break;
 80034bc:	e010      	b.n	80034e0 <phCryptoSym_Sw_Aes_DecryptBlock+0x54>
    case PH_CRYPTOSYM_KEY_TYPE_AES192:
        bNk = 6;
 80034be:	2306      	movs	r3, #6
 80034c0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        bCurrentNk = 51;
 80034c4:	2333      	movs	r3, #51	@ 0x33
 80034c6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        break;
 80034ca:	e009      	b.n	80034e0 <phCryptoSym_Sw_Aes_DecryptBlock+0x54>
    case PH_CRYPTOSYM_KEY_TYPE_AES256:
        bNk = 8;
 80034cc:	2308      	movs	r3, #8
 80034ce:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        bCurrentNk = 59;
 80034d2:	233b      	movs	r3, #59	@ 0x3b
 80034d4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        break;
 80034d8:	e002      	b.n	80034e0 <phCryptoSym_Sw_Aes_DecryptBlock+0x54>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_CRYPTOSYM);
 80034da:	f24e 137f 	movw	r3, #57727	@ 0xe17f
 80034de:	e066      	b.n	80035ae <phCryptoSym_Sw_Aes_DecryptBlock+0x122>
    }

    /* Recopy the key */
    (void)memcpy(bTmpKey, pDataParams->pKey, (size_t)(((uint32_t)bNk) << 2U));
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f103 0108 	add.w	r1, r3, #8
 80034e6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80034ea:	009a      	lsls	r2, r3, #2
 80034ec:	f107 0314 	add.w	r3, r7, #20
 80034f0:	4618      	mov	r0, r3
 80034f2:	f019 fe84 	bl	801d1fe <memcpy>

    /* Perform complete key expansion upfront. */
    bTmp = 0;
 80034f6:	2300      	movs	r3, #0
 80034f8:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    for (i=0;i<=bNumRounds;i++)
 80034fc:	2300      	movs	r3, #0
 80034fe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8003502:	e00f      	b.n	8003524 <phCryptoSym_Sw_Aes_DecryptBlock+0x98>
    {
        phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bTmp, bNk, PH_CRYPTOSYM_KEYSCHEDULE_DECRYPTION_PREPARE);
 8003504:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003508:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800350c:	f107 0114 	add.w	r1, r7, #20
 8003510:	2030      	movs	r0, #48	@ 0x30
 8003512:	9000      	str	r0, [sp, #0]
 8003514:	68b8      	ldr	r0, [r7, #8]
 8003516:	f000 fb29 	bl	8003b6c <phCryptoSym_Sw_Aes_AddRoundKey>
    for (i=0;i<=bNumRounds;i++)
 800351a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800351e:	3301      	adds	r3, #1
 8003520:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8003524:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8003528:	79fb      	ldrb	r3, [r7, #7]
 800352a:	429a      	cmp	r2, r3
 800352c:	d9ea      	bls.n	8003504 <phCryptoSym_Sw_Aes_DecryptBlock+0x78>
    }
    /* Now, bTmpKey contains the last round key. */

    /* AddRoundKey(state, w[Nr*Nb, (Nr+1U)*Nb-1])  See Sec. 5.1.4 */
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bCurrentNk, bNk, PH_CRYPTOSYM_KEYSCHEDULE_DECRYPTION);
 800352e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003532:	f107 0235 	add.w	r2, r7, #53	@ 0x35
 8003536:	f107 0114 	add.w	r1, r7, #20
 800353a:	20c0      	movs	r0, #192	@ 0xc0
 800353c:	9000      	str	r0, [sp, #0]
 800353e:	68b8      	ldr	r0, [r7, #8]
 8003540:	f000 fb14 	bl	8003b6c <phCryptoSym_Sw_Aes_AddRoundKey>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */

    /* for round = Nr-1 step -1 downto 1 */
    for (i=bNumRounds - 1U; i > 0U; i--)
 8003544:	79fb      	ldrb	r3, [r7, #7]
 8003546:	3b01      	subs	r3, #1
 8003548:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800354c:	e015      	b.n	800357a <phCryptoSym_Sw_Aes_DecryptBlock+0xee>
    {
        /* InvShiftRows(state)  See Sec. 5.3.1 */
        /* InvSubBytes(state)  See Sec. 5.3.2  */
        phCryptoSym_Sw_Aes_InvSubBytesShiftRows(pBlock);
 800354e:	68b8      	ldr	r0, [r7, #8]
 8003550:	f000 f8d4 	bl	80036fc <phCryptoSym_Sw_Aes_InvSubBytesShiftRows>
#ifndef PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
        /* AddRoundKey(state, w[round*Nb, (round+1U)*Nb-1]) */
        phCryptoSym_Sw_Aes_AddRoundKey(pBlock, pDataParams->pKey, i);
#else
        /* AddRoundKey(state, w[round*Nb, (round+1U)*Nb-1]) */
        phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bCurrentNk, bNk, PH_CRYPTOSYM_KEYSCHEDULE_DECRYPTION);
 8003554:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003558:	f107 0235 	add.w	r2, r7, #53	@ 0x35
 800355c:	f107 0114 	add.w	r1, r7, #20
 8003560:	20c0      	movs	r0, #192	@ 0xc0
 8003562:	9000      	str	r0, [sp, #0]
 8003564:	68b8      	ldr	r0, [r7, #8]
 8003566:	f000 fb01 	bl	8003b6c <phCryptoSym_Sw_Aes_AddRoundKey>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
        /* InvMixColumns(state)  See Sec. 5.3.3 */
        phCryptoSym_Sw_Aes_InvMixColumns(pBlock);
 800356a:	68b8      	ldr	r0, [r7, #8]
 800356c:	f000 fa06 	bl	800397c <phCryptoSym_Sw_Aes_InvMixColumns>
    for (i=bNumRounds - 1U; i > 0U; i--)
 8003570:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003574:	3b01      	subs	r3, #1
 8003576:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800357a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1e5      	bne.n	800354e <phCryptoSym_Sw_Aes_DecryptBlock+0xc2>
    } /* end for */

    /* InvShiftRows(state) */
    /* InvSubBytes(state)  */
    phCryptoSym_Sw_Aes_InvSubBytesShiftRows(pBlock);
 8003582:	68b8      	ldr	r0, [r7, #8]
 8003584:	f000 f8ba 	bl	80036fc <phCryptoSym_Sw_Aes_InvSubBytesShiftRows>
#ifndef PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
    /* AddRoundKey(state, w[0, Nb-1]) */
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, pDataParams->pKey, i);
#else
    /* AddRoundKey(state, w[0, Nb-1]) */
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bCurrentNk, bNk, PH_CRYPTOSYM_KEYSCHEDULE_DECRYPTION);
 8003588:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800358c:	f107 0235 	add.w	r2, r7, #53	@ 0x35
 8003590:	f107 0114 	add.w	r1, r7, #20
 8003594:	20c0      	movs	r0, #192	@ 0xc0
 8003596:	9000      	str	r0, [sp, #0]
 8003598:	68b8      	ldr	r0, [r7, #8]
 800359a:	f000 fae7 	bl	8003b6c <phCryptoSym_Sw_Aes_AddRoundKey>
    /* Clear TmpKey */
    (void)memset(bTmpKey, 0x00, (size_t)sizeof(bTmpKey));
 800359e:	f107 0314 	add.w	r3, r7, #20
 80035a2:	2220      	movs	r2, #32
 80035a4:	2100      	movs	r1, #0
 80035a6:	4618      	mov	r0, r3
 80035a8:	f019 fdaa 	bl	801d100 <memset>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
    return PH_ERR_SUCCESS;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3738      	adds	r7, #56	@ 0x38
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
	...

080035b8 <phCryptoSym_Sw_Aes_SubBytesShiftRows>:

void phCryptoSym_Sw_Aes_SubBytesShiftRows(uint8_t PH_CRYTOSYM_SW_FAST_RAM * pState)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM tmp;
    /* For details, see section Sec. 5.1.1 and See Sec. 5.1.2 in FIPS-197 */

    pState[0] = phCryptoSym_Sw_Aes_sboxTable[pState[0]];    /* Row 1: No shift */
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	461a      	mov	r2, r3
 80035c6:	4b4c      	ldr	r3, [pc, #304]	@ (80036f8 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 80035c8:	5c9a      	ldrb	r2, [r3, r2]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	701a      	strb	r2, [r3, #0]
    pState[4] = phCryptoSym_Sw_Aes_sboxTable[pState[4]];    /* Row 1: No shift */
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	3304      	adds	r3, #4
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	4619      	mov	r1, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	3304      	adds	r3, #4
 80035da:	4a47      	ldr	r2, [pc, #284]	@ (80036f8 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 80035dc:	5c52      	ldrb	r2, [r2, r1]
 80035de:	701a      	strb	r2, [r3, #0]
    pState[8] = phCryptoSym_Sw_Aes_sboxTable[pState[8]];    /* Row 1: No shift */
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3308      	adds	r3, #8
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	4619      	mov	r1, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3308      	adds	r3, #8
 80035ec:	4a42      	ldr	r2, [pc, #264]	@ (80036f8 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 80035ee:	5c52      	ldrb	r2, [r2, r1]
 80035f0:	701a      	strb	r2, [r3, #0]
    pState[12] = phCryptoSym_Sw_Aes_sboxTable[pState[12]];  /* Row 1: No shift */
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	330c      	adds	r3, #12
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	4619      	mov	r1, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	330c      	adds	r3, #12
 80035fe:	4a3e      	ldr	r2, [pc, #248]	@ (80036f8 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8003600:	5c52      	ldrb	r2, [r2, r1]
 8003602:	701a      	strb	r2, [r3, #0]

    tmp = phCryptoSym_Sw_Aes_sboxTable[pState[1]];          /* Row 2: Shift 1 Position to the left */
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3301      	adds	r3, #1
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	461a      	mov	r2, r3
 800360c:	4b3a      	ldr	r3, [pc, #232]	@ (80036f8 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 800360e:	5c9b      	ldrb	r3, [r3, r2]
 8003610:	73fb      	strb	r3, [r7, #15]
    pState[1] = phCryptoSym_Sw_Aes_sboxTable[pState[5]];    /* Row 2: Shift 1 Position to the left */
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	3305      	adds	r3, #5
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	4619      	mov	r1, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	3301      	adds	r3, #1
 800361e:	4a36      	ldr	r2, [pc, #216]	@ (80036f8 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8003620:	5c52      	ldrb	r2, [r2, r1]
 8003622:	701a      	strb	r2, [r3, #0]
    pState[5] = phCryptoSym_Sw_Aes_sboxTable[pState[9]];    /* Row 2: Shift 1 Position to the left */
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3309      	adds	r3, #9
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	4619      	mov	r1, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3305      	adds	r3, #5
 8003630:	4a31      	ldr	r2, [pc, #196]	@ (80036f8 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8003632:	5c52      	ldrb	r2, [r2, r1]
 8003634:	701a      	strb	r2, [r3, #0]
    pState[9] = phCryptoSym_Sw_Aes_sboxTable[pState[13]];   /* Row 2: Shift 1 Position to the left */
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	330d      	adds	r3, #13
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	4619      	mov	r1, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	3309      	adds	r3, #9
 8003642:	4a2d      	ldr	r2, [pc, #180]	@ (80036f8 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8003644:	5c52      	ldrb	r2, [r2, r1]
 8003646:	701a      	strb	r2, [r3, #0]
    pState[13] = tmp;                                       /* Row 2: Shift 1 Position to the left */
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	330d      	adds	r3, #13
 800364c:	7bfa      	ldrb	r2, [r7, #15]
 800364e:	701a      	strb	r2, [r3, #0]

    tmp = phCryptoSym_Sw_Aes_sboxTable[pState[2]];          /* Row 3: Shift 2 Position to the left */
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3302      	adds	r3, #2
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	461a      	mov	r2, r3
 8003658:	4b27      	ldr	r3, [pc, #156]	@ (80036f8 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 800365a:	5c9b      	ldrb	r3, [r3, r2]
 800365c:	73fb      	strb	r3, [r7, #15]
    pState[2] = phCryptoSym_Sw_Aes_sboxTable[pState[10]];   /* Row 3: Shift 2 Position to the left */
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	330a      	adds	r3, #10
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	4619      	mov	r1, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	3302      	adds	r3, #2
 800366a:	4a23      	ldr	r2, [pc, #140]	@ (80036f8 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 800366c:	5c52      	ldrb	r2, [r2, r1]
 800366e:	701a      	strb	r2, [r3, #0]
    pState[10] = tmp;                                       /* Row 3: Shift 2 Position to the left */
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	330a      	adds	r3, #10
 8003674:	7bfa      	ldrb	r2, [r7, #15]
 8003676:	701a      	strb	r2, [r3, #0]
    tmp = phCryptoSym_Sw_Aes_sboxTable[pState[6]];          /* Row 3: Shift 2 Position to the left */
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3306      	adds	r3, #6
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	461a      	mov	r2, r3
 8003680:	4b1d      	ldr	r3, [pc, #116]	@ (80036f8 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8003682:	5c9b      	ldrb	r3, [r3, r2]
 8003684:	73fb      	strb	r3, [r7, #15]
    pState[6] = phCryptoSym_Sw_Aes_sboxTable[pState[14]];   /* Row 3: Shift 2 Position to the left */
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	330e      	adds	r3, #14
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	4619      	mov	r1, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	3306      	adds	r3, #6
 8003692:	4a19      	ldr	r2, [pc, #100]	@ (80036f8 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8003694:	5c52      	ldrb	r2, [r2, r1]
 8003696:	701a      	strb	r2, [r3, #0]
    pState[14] = tmp;                                       /* Row 3: Shift 2 Position to the left */
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	330e      	adds	r3, #14
 800369c:	7bfa      	ldrb	r2, [r7, #15]
 800369e:	701a      	strb	r2, [r3, #0]

    tmp = phCryptoSym_Sw_Aes_sboxTable[pState[15]];         /* Row 4: Shift 3 Position to the left */
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	330f      	adds	r3, #15
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	461a      	mov	r2, r3
 80036a8:	4b13      	ldr	r3, [pc, #76]	@ (80036f8 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 80036aa:	5c9b      	ldrb	r3, [r3, r2]
 80036ac:	73fb      	strb	r3, [r7, #15]
    pState[15] = phCryptoSym_Sw_Aes_sboxTable[pState[11]];  /* Row 4: Shift 3 Position to the left */
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	330b      	adds	r3, #11
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	4619      	mov	r1, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	330f      	adds	r3, #15
 80036ba:	4a0f      	ldr	r2, [pc, #60]	@ (80036f8 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 80036bc:	5c52      	ldrb	r2, [r2, r1]
 80036be:	701a      	strb	r2, [r3, #0]
    pState[11] = phCryptoSym_Sw_Aes_sboxTable[pState[7]];   /* Row 4: Shift 3 Position to the left */
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3307      	adds	r3, #7
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	4619      	mov	r1, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	330b      	adds	r3, #11
 80036cc:	4a0a      	ldr	r2, [pc, #40]	@ (80036f8 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 80036ce:	5c52      	ldrb	r2, [r2, r1]
 80036d0:	701a      	strb	r2, [r3, #0]
    pState[7] = phCryptoSym_Sw_Aes_sboxTable[pState[3]];    /* Row 4: Shift 3 Position to the left */
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	3303      	adds	r3, #3
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	4619      	mov	r1, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	3307      	adds	r3, #7
 80036de:	4a06      	ldr	r2, [pc, #24]	@ (80036f8 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 80036e0:	5c52      	ldrb	r2, [r2, r1]
 80036e2:	701a      	strb	r2, [r3, #0]
    pState[3] = tmp;                                        /* Row 4: Shift 3 Position to the left */
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	3303      	adds	r3, #3
 80036e8:	7bfa      	ldrb	r2, [r7, #15]
 80036ea:	701a      	strb	r2, [r3, #0]
}
 80036ec:	bf00      	nop
 80036ee:	3714      	adds	r7, #20
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	0801f9f0 	.word	0x0801f9f0

080036fc <phCryptoSym_Sw_Aes_InvSubBytesShiftRows>:

void phCryptoSym_Sw_Aes_InvSubBytesShiftRows(uint8_t PH_CRYTOSYM_SW_FAST_RAM * pState)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM tmp;

    /* For details, see section Sec. 5.3.1 and See Sec. 5.3.2 in FIPS-197 */
    pState[0] = phCryptoSym_Sw_Aes_invSboxTable[pState[0]];        /* Row 1: No shift */
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	461a      	mov	r2, r3
 800370a:	4b4c      	ldr	r3, [pc, #304]	@ (800383c <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 800370c:	5c9a      	ldrb	r2, [r3, r2]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	701a      	strb	r2, [r3, #0]
    pState[4] = phCryptoSym_Sw_Aes_invSboxTable[pState[4]];     /* Row 1: No shift */
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	3304      	adds	r3, #4
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	4619      	mov	r1, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	3304      	adds	r3, #4
 800371e:	4a47      	ldr	r2, [pc, #284]	@ (800383c <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8003720:	5c52      	ldrb	r2, [r2, r1]
 8003722:	701a      	strb	r2, [r3, #0]
    pState[8] = phCryptoSym_Sw_Aes_invSboxTable[pState[8]];     /* Row 1: No shift */
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3308      	adds	r3, #8
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	4619      	mov	r1, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	3308      	adds	r3, #8
 8003730:	4a42      	ldr	r2, [pc, #264]	@ (800383c <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8003732:	5c52      	ldrb	r2, [r2, r1]
 8003734:	701a      	strb	r2, [r3, #0]
    pState[12] = phCryptoSym_Sw_Aes_invSboxTable[pState[12]];   /* Row 1: No shift */
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	330c      	adds	r3, #12
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	4619      	mov	r1, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	330c      	adds	r3, #12
 8003742:	4a3e      	ldr	r2, [pc, #248]	@ (800383c <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8003744:	5c52      	ldrb	r2, [r2, r1]
 8003746:	701a      	strb	r2, [r3, #0]

    tmp = phCryptoSym_Sw_Aes_invSboxTable[pState[13]];          /* Row 2: Shift 1 Position to the right */
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	330d      	adds	r3, #13
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	461a      	mov	r2, r3
 8003750:	4b3a      	ldr	r3, [pc, #232]	@ (800383c <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8003752:	5c9b      	ldrb	r3, [r3, r2]
 8003754:	73fb      	strb	r3, [r7, #15]
    pState[13] = phCryptoSym_Sw_Aes_invSboxTable[pState[9]];    /* Row 2: Shift 1 Position to the right */
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	3309      	adds	r3, #9
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	4619      	mov	r1, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	330d      	adds	r3, #13
 8003762:	4a36      	ldr	r2, [pc, #216]	@ (800383c <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8003764:	5c52      	ldrb	r2, [r2, r1]
 8003766:	701a      	strb	r2, [r3, #0]
    pState[9] = phCryptoSym_Sw_Aes_invSboxTable[pState[5]];     /* Row 2: Shift 1 Position to the right */
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	3305      	adds	r3, #5
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	4619      	mov	r1, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	3309      	adds	r3, #9
 8003774:	4a31      	ldr	r2, [pc, #196]	@ (800383c <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8003776:	5c52      	ldrb	r2, [r2, r1]
 8003778:	701a      	strb	r2, [r3, #0]
    pState[5] = phCryptoSym_Sw_Aes_invSboxTable[pState[1]];     /* Row 2: Shift 1 Position to the right */
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	3301      	adds	r3, #1
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	4619      	mov	r1, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	3305      	adds	r3, #5
 8003786:	4a2d      	ldr	r2, [pc, #180]	@ (800383c <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8003788:	5c52      	ldrb	r2, [r2, r1]
 800378a:	701a      	strb	r2, [r3, #0]
    pState[1] = tmp;                                            /* Row 2: Shift 1 Position to the right */
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	3301      	adds	r3, #1
 8003790:	7bfa      	ldrb	r2, [r7, #15]
 8003792:	701a      	strb	r2, [r3, #0]

    tmp = phCryptoSym_Sw_Aes_invSboxTable[pState[2]];           /* Row 3: Shift 2 Position to the right */
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	3302      	adds	r3, #2
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	461a      	mov	r2, r3
 800379c:	4b27      	ldr	r3, [pc, #156]	@ (800383c <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 800379e:	5c9b      	ldrb	r3, [r3, r2]
 80037a0:	73fb      	strb	r3, [r7, #15]
    pState[2] = phCryptoSym_Sw_Aes_invSboxTable[pState[10]];    /* Row 3: Shift 2 Position to the right */
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	330a      	adds	r3, #10
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	4619      	mov	r1, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	3302      	adds	r3, #2
 80037ae:	4a23      	ldr	r2, [pc, #140]	@ (800383c <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 80037b0:	5c52      	ldrb	r2, [r2, r1]
 80037b2:	701a      	strb	r2, [r3, #0]
    pState[10] = tmp;                                           /* Row 3: Shift 2 Position to the right */
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	330a      	adds	r3, #10
 80037b8:	7bfa      	ldrb	r2, [r7, #15]
 80037ba:	701a      	strb	r2, [r3, #0]
    tmp = phCryptoSym_Sw_Aes_invSboxTable[pState[6]];           /* Row 3: Shift 2 Position to the right */
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3306      	adds	r3, #6
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	461a      	mov	r2, r3
 80037c4:	4b1d      	ldr	r3, [pc, #116]	@ (800383c <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 80037c6:	5c9b      	ldrb	r3, [r3, r2]
 80037c8:	73fb      	strb	r3, [r7, #15]
    pState[6] = phCryptoSym_Sw_Aes_invSboxTable[pState[14]];    /* Row 3: Shift 2 Position to the right */
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	330e      	adds	r3, #14
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	4619      	mov	r1, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	3306      	adds	r3, #6
 80037d6:	4a19      	ldr	r2, [pc, #100]	@ (800383c <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 80037d8:	5c52      	ldrb	r2, [r2, r1]
 80037da:	701a      	strb	r2, [r3, #0]
    pState[14] = tmp;                                           /* Row 3: Shift 2 Position to the right */
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	330e      	adds	r3, #14
 80037e0:	7bfa      	ldrb	r2, [r7, #15]
 80037e2:	701a      	strb	r2, [r3, #0]

    tmp = phCryptoSym_Sw_Aes_invSboxTable[pState[3]];           /* Row 4: Shift 3 Position to the right */
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3303      	adds	r3, #3
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	461a      	mov	r2, r3
 80037ec:	4b13      	ldr	r3, [pc, #76]	@ (800383c <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 80037ee:	5c9b      	ldrb	r3, [r3, r2]
 80037f0:	73fb      	strb	r3, [r7, #15]
    pState[3] = phCryptoSym_Sw_Aes_invSboxTable[pState[7]];     /* Row 4: Shift 3 Position to the right */
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	3307      	adds	r3, #7
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	4619      	mov	r1, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	3303      	adds	r3, #3
 80037fe:	4a0f      	ldr	r2, [pc, #60]	@ (800383c <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8003800:	5c52      	ldrb	r2, [r2, r1]
 8003802:	701a      	strb	r2, [r3, #0]
    pState[7] = phCryptoSym_Sw_Aes_invSboxTable[pState[11]];    /* Row 4: Shift 3 Position to the right */
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	330b      	adds	r3, #11
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	4619      	mov	r1, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	3307      	adds	r3, #7
 8003810:	4a0a      	ldr	r2, [pc, #40]	@ (800383c <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8003812:	5c52      	ldrb	r2, [r2, r1]
 8003814:	701a      	strb	r2, [r3, #0]
    pState[11] = phCryptoSym_Sw_Aes_invSboxTable[pState[15]];   /* Row 4: Shift 3 Position to the right */
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	330f      	adds	r3, #15
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	4619      	mov	r1, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	330b      	adds	r3, #11
 8003822:	4a06      	ldr	r2, [pc, #24]	@ (800383c <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8003824:	5c52      	ldrb	r2, [r2, r1]
 8003826:	701a      	strb	r2, [r3, #0]
    pState[15] = tmp;                                           /* Row 4: Shift 3 Position to the right */
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	330f      	adds	r3, #15
 800382c:	7bfa      	ldrb	r2, [r7, #15]
 800382e:	701a      	strb	r2, [r3, #0]
}
 8003830:	bf00      	nop
 8003832:	3714      	adds	r7, #20
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	0801faf0 	.word	0x0801faf0

08003840 <phCryptoSym_Sw_Aes_MixColumns>:

void phCryptoSym_Sw_Aes_MixColumns(uint8_t PH_CRYTOSYM_SW_FAST_RAM * pState)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
    /* For details, see section Sec. 5.1.3 in FIPS-197 */

    /* Generally, the calculation speed is increased by operating with lookup tables. */
    /* in case of ROM_OPTIMIZATION enabled, the following equation is calculated online: */
    /* times3 = times2 xor times1 */
    for (i=0;i<4U;i++)
 8003848:	2300      	movs	r3, #0
 800384a:	73fb      	strb	r3, [r7, #15]
 800384c:	e089      	b.n	8003962 <phCryptoSym_Sw_Aes_MixColumns+0x122>
        tmp[0] = phCryptoSym_Sw_Aes_times2[pState[0]] ^ phCryptoSym_Sw_Aes_times3[pState[1]] ^ pState[2] ^ pState[3];
        tmp[1] = pState[0] ^ phCryptoSym_Sw_Aes_times2[pState[1]] ^ phCryptoSym_Sw_Aes_times3[pState[2]] ^ pState[3];
        tmp[2] = pState[0] ^ pState[1] ^ phCryptoSym_Sw_Aes_times2[pState[2]] ^ phCryptoSym_Sw_Aes_times3[pState[3]];
        tmp[3] = phCryptoSym_Sw_Aes_times3[pState[0]] ^ pState[1] ^ pState[2] ^ phCryptoSym_Sw_Aes_times2[pState[3]];
#else
        tmp[0] = phCryptoSym_Sw_Aes_times2[pState[0]] ^ (phCryptoSym_Sw_Aes_times2[pState[1]] ^ pState[1]) ^ pState[2] ^ pState[3];
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	461a      	mov	r2, r3
 8003854:	4b48      	ldr	r3, [pc, #288]	@ (8003978 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 8003856:	5c9a      	ldrb	r2, [r3, r2]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3301      	adds	r3, #1
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	4619      	mov	r1, r3
 8003860:	4b45      	ldr	r3, [pc, #276]	@ (8003978 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 8003862:	5c59      	ldrb	r1, [r3, r1]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	3301      	adds	r3, #1
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	404b      	eors	r3, r1
 800386c:	b2db      	uxtb	r3, r3
 800386e:	4053      	eors	r3, r2
 8003870:	b2da      	uxtb	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	3302      	adds	r3, #2
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	4053      	eors	r3, r2
 800387a:	b2da      	uxtb	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	3303      	adds	r3, #3
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	4053      	eors	r3, r2
 8003884:	b2db      	uxtb	r3, r3
 8003886:	723b      	strb	r3, [r7, #8]
        tmp[1] = pState[0] ^ phCryptoSym_Sw_Aes_times2[pState[1]] ^ (phCryptoSym_Sw_Aes_times2[pState[2]] ^ pState[2]) ^ pState[3];
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	781a      	ldrb	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3301      	adds	r3, #1
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	4619      	mov	r1, r3
 8003894:	4b38      	ldr	r3, [pc, #224]	@ (8003978 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 8003896:	5c5b      	ldrb	r3, [r3, r1]
 8003898:	4053      	eors	r3, r2
 800389a:	b2da      	uxtb	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3302      	adds	r3, #2
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	4619      	mov	r1, r3
 80038a4:	4b34      	ldr	r3, [pc, #208]	@ (8003978 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 80038a6:	5c59      	ldrb	r1, [r3, r1]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3302      	adds	r3, #2
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	404b      	eors	r3, r1
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	4053      	eors	r3, r2
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	3303      	adds	r3, #3
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	4053      	eors	r3, r2
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	727b      	strb	r3, [r7, #9]
        tmp[2] = pState[0] ^ pState[1] ^ phCryptoSym_Sw_Aes_times2[pState[2]] ^ (phCryptoSym_Sw_Aes_times2[pState[3]] ^ pState[3]);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	781a      	ldrb	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	3301      	adds	r3, #1
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	4053      	eors	r3, r2
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3302      	adds	r3, #2
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	4619      	mov	r1, r3
 80038d8:	4b27      	ldr	r3, [pc, #156]	@ (8003978 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 80038da:	5c5b      	ldrb	r3, [r3, r1]
 80038dc:	4053      	eors	r3, r2
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3303      	adds	r3, #3
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	4619      	mov	r1, r3
 80038e8:	4b23      	ldr	r3, [pc, #140]	@ (8003978 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 80038ea:	5c59      	ldrb	r1, [r3, r1]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	3303      	adds	r3, #3
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	404b      	eors	r3, r1
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	4053      	eors	r3, r2
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	72bb      	strb	r3, [r7, #10]
        tmp[3] = (phCryptoSym_Sw_Aes_times2[pState[0]] ^ pState[0]) ^ pState[1] ^ pState[2] ^ phCryptoSym_Sw_Aes_times2[pState[3]];
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	461a      	mov	r2, r3
 8003902:	4b1d      	ldr	r3, [pc, #116]	@ (8003978 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 8003904:	5c9a      	ldrb	r2, [r3, r2]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	4053      	eors	r3, r2
 800390c:	b2da      	uxtb	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	3301      	adds	r3, #1
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	4053      	eors	r3, r2
 8003916:	b2da      	uxtb	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3302      	adds	r3, #2
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	4053      	eors	r3, r2
 8003920:	b2da      	uxtb	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	3303      	adds	r3, #3
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	4619      	mov	r1, r3
 800392a:	4b13      	ldr	r3, [pc, #76]	@ (8003978 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 800392c:	5c5b      	ldrb	r3, [r3, r1]
 800392e:	4053      	eors	r3, r2
 8003930:	b2db      	uxtb	r3, r3
 8003932:	72fb      	strb	r3, [r7, #11]
#endif /* PH_CRYPTOSYM_SW_ROM_OPTIMIZATION */
        *pState++ = tmp[0];
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	1c5a      	adds	r2, r3, #1
 8003938:	607a      	str	r2, [r7, #4]
 800393a:	7a3a      	ldrb	r2, [r7, #8]
 800393c:	701a      	strb	r2, [r3, #0]
        *pState++ = tmp[1];
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	1c5a      	adds	r2, r3, #1
 8003942:	607a      	str	r2, [r7, #4]
 8003944:	7a7a      	ldrb	r2, [r7, #9]
 8003946:	701a      	strb	r2, [r3, #0]
        *pState++ = tmp[2];
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	1c5a      	adds	r2, r3, #1
 800394c:	607a      	str	r2, [r7, #4]
 800394e:	7aba      	ldrb	r2, [r7, #10]
 8003950:	701a      	strb	r2, [r3, #0]
        *pState++ = tmp[3];
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	1c5a      	adds	r2, r3, #1
 8003956:	607a      	str	r2, [r7, #4]
 8003958:	7afa      	ldrb	r2, [r7, #11]
 800395a:	701a      	strb	r2, [r3, #0]
    for (i=0;i<4U;i++)
 800395c:	7bfb      	ldrb	r3, [r7, #15]
 800395e:	3301      	adds	r3, #1
 8003960:	73fb      	strb	r3, [r7, #15]
 8003962:	7bfb      	ldrb	r3, [r7, #15]
 8003964:	2b03      	cmp	r3, #3
 8003966:	f67f af72 	bls.w	800384e <phCryptoSym_Sw_Aes_MixColumns+0xe>
    }
}
 800396a:	bf00      	nop
 800396c:	bf00      	nop
 800396e:	3714      	adds	r7, #20
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	0801fbf0 	.word	0x0801fbf0

0800397c <phCryptoSym_Sw_Aes_InvMixColumns>:

void phCryptoSym_Sw_Aes_InvMixColumns(uint8_t PH_CRYTOSYM_SW_FAST_RAM * pState)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
    /* Generally, the calculation speed is increased by operating with lookup tables. */
    /* in case of ROM_OPTIMIZATION enabled, the following equation is calculated online: */
    /* timesB = times9 xor times2 */
    /* timesD = timesC xor times1 */
    /* timesE = timesC xor times2 */
    for (i=0;i<4U;i++)
 8003984:	2300      	movs	r3, #0
 8003986:	73fb      	strb	r3, [r7, #15]
 8003988:	e0df      	b.n	8003b4a <phCryptoSym_Sw_Aes_InvMixColumns+0x1ce>
        tmp[0] = phCryptoSym_Sw_Aes_timesE[pState[0]] ^ phCryptoSym_Sw_Aes_timesB[pState[1]] ^ phCryptoSym_Sw_Aes_timesD[pState[2]] ^ phCryptoSym_Sw_Aes_times9[pState[3]];
        tmp[1] = phCryptoSym_Sw_Aes_times9[pState[0]] ^ phCryptoSym_Sw_Aes_timesE[pState[1]] ^ phCryptoSym_Sw_Aes_timesB[pState[2]] ^ phCryptoSym_Sw_Aes_timesD[pState[3]];
        tmp[2] = phCryptoSym_Sw_Aes_timesD[pState[0]] ^ phCryptoSym_Sw_Aes_times9[pState[1]] ^ phCryptoSym_Sw_Aes_timesE[pState[2]] ^ phCryptoSym_Sw_Aes_timesB[pState[3]];
        tmp[3] = phCryptoSym_Sw_Aes_timesB[pState[0]] ^ phCryptoSym_Sw_Aes_timesD[pState[1]] ^ phCryptoSym_Sw_Aes_times9[pState[2]] ^ phCryptoSym_Sw_Aes_timesE[pState[3]];
#else
        tmp[0] = (phCryptoSym_Sw_Aes_timesC[pState[0]] ^ phCryptoSym_Sw_Aes_times2[pState[0]]) ^ (phCryptoSym_Sw_Aes_times9[pState[1]] ^ phCryptoSym_Sw_Aes_times2[pState[1]]) ^ (phCryptoSym_Sw_Aes_timesC[pState[2]] ^ pState[2]) ^ phCryptoSym_Sw_Aes_times9[pState[3]];
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	461a      	mov	r2, r3
 8003990:	4b73      	ldr	r3, [pc, #460]	@ (8003b60 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 8003992:	5c9a      	ldrb	r2, [r3, r2]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	4619      	mov	r1, r3
 800399a:	4b72      	ldr	r3, [pc, #456]	@ (8003b64 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 800399c:	5c5b      	ldrb	r3, [r3, r1]
 800399e:	4053      	eors	r3, r2
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	3301      	adds	r3, #1
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	4619      	mov	r1, r3
 80039aa:	4b6f      	ldr	r3, [pc, #444]	@ (8003b68 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 80039ac:	5c59      	ldrb	r1, [r3, r1]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	3301      	adds	r3, #1
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	4618      	mov	r0, r3
 80039b6:	4b6b      	ldr	r3, [pc, #428]	@ (8003b64 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 80039b8:	5c1b      	ldrb	r3, [r3, r0]
 80039ba:	404b      	eors	r3, r1
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	4053      	eors	r3, r2
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	3302      	adds	r3, #2
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	4619      	mov	r1, r3
 80039ca:	4b65      	ldr	r3, [pc, #404]	@ (8003b60 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 80039cc:	5c59      	ldrb	r1, [r3, r1]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	3302      	adds	r3, #2
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	404b      	eors	r3, r1
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	4053      	eors	r3, r2
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3303      	adds	r3, #3
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	4619      	mov	r1, r3
 80039e4:	4b60      	ldr	r3, [pc, #384]	@ (8003b68 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 80039e6:	5c5b      	ldrb	r3, [r3, r1]
 80039e8:	4053      	eors	r3, r2
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	723b      	strb	r3, [r7, #8]
        tmp[1] = phCryptoSym_Sw_Aes_times9[pState[0]] ^ (phCryptoSym_Sw_Aes_timesC[pState[1]] ^ phCryptoSym_Sw_Aes_times2[pState[1]]) ^ (phCryptoSym_Sw_Aes_times9[pState[2]] ^ phCryptoSym_Sw_Aes_times2[pState[2]]) ^ (phCryptoSym_Sw_Aes_timesC[pState[3]] ^ pState[3]);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	461a      	mov	r2, r3
 80039f4:	4b5c      	ldr	r3, [pc, #368]	@ (8003b68 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 80039f6:	5c9a      	ldrb	r2, [r3, r2]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	3301      	adds	r3, #1
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	4619      	mov	r1, r3
 8003a00:	4b57      	ldr	r3, [pc, #348]	@ (8003b60 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 8003a02:	5c59      	ldrb	r1, [r3, r1]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	3301      	adds	r3, #1
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	4b55      	ldr	r3, [pc, #340]	@ (8003b64 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8003a0e:	5c1b      	ldrb	r3, [r3, r0]
 8003a10:	404b      	eors	r3, r1
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	4053      	eors	r3, r2
 8003a16:	b2da      	uxtb	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	3302      	adds	r3, #2
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	4619      	mov	r1, r3
 8003a20:	4b51      	ldr	r3, [pc, #324]	@ (8003b68 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 8003a22:	5c59      	ldrb	r1, [r3, r1]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3302      	adds	r3, #2
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	4b4d      	ldr	r3, [pc, #308]	@ (8003b64 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8003a2e:	5c1b      	ldrb	r3, [r3, r0]
 8003a30:	404b      	eors	r3, r1
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	4053      	eors	r3, r2
 8003a36:	b2da      	uxtb	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	3303      	adds	r3, #3
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	4619      	mov	r1, r3
 8003a40:	4b47      	ldr	r3, [pc, #284]	@ (8003b60 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 8003a42:	5c59      	ldrb	r1, [r3, r1]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3303      	adds	r3, #3
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	404b      	eors	r3, r1
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	4053      	eors	r3, r2
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	727b      	strb	r3, [r7, #9]
        tmp[2] = (phCryptoSym_Sw_Aes_timesC[pState[0]] ^ pState[0])^ phCryptoSym_Sw_Aes_times9[pState[1]] ^ (phCryptoSym_Sw_Aes_timesC[pState[2]] ^ phCryptoSym_Sw_Aes_times2[pState[2]]) ^ (phCryptoSym_Sw_Aes_times9[pState[3]] ^ phCryptoSym_Sw_Aes_times2[pState[3]]);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	461a      	mov	r2, r3
 8003a5a:	4b41      	ldr	r3, [pc, #260]	@ (8003b60 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 8003a5c:	5c9a      	ldrb	r2, [r3, r2]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	4053      	eors	r3, r2
 8003a64:	b2da      	uxtb	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4b3e      	ldr	r3, [pc, #248]	@ (8003b68 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 8003a70:	5c5b      	ldrb	r3, [r3, r1]
 8003a72:	4053      	eors	r3, r2
 8003a74:	b2da      	uxtb	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3302      	adds	r3, #2
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4b38      	ldr	r3, [pc, #224]	@ (8003b60 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 8003a80:	5c59      	ldrb	r1, [r3, r1]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	3302      	adds	r3, #2
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	4b36      	ldr	r3, [pc, #216]	@ (8003b64 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8003a8c:	5c1b      	ldrb	r3, [r3, r0]
 8003a8e:	404b      	eors	r3, r1
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	4053      	eors	r3, r2
 8003a94:	b2da      	uxtb	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3303      	adds	r3, #3
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	4b32      	ldr	r3, [pc, #200]	@ (8003b68 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 8003aa0:	5c59      	ldrb	r1, [r3, r1]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	3303      	adds	r3, #3
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	4b2e      	ldr	r3, [pc, #184]	@ (8003b64 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8003aac:	5c1b      	ldrb	r3, [r3, r0]
 8003aae:	404b      	eors	r3, r1
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	4053      	eors	r3, r2
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	72bb      	strb	r3, [r7, #10]
        tmp[3] = (phCryptoSym_Sw_Aes_times9[pState[0]] ^ phCryptoSym_Sw_Aes_times2[pState[0]]) ^ (phCryptoSym_Sw_Aes_timesC[pState[1]] ^ pState[1]) ^ phCryptoSym_Sw_Aes_times9[pState[2]] ^ (phCryptoSym_Sw_Aes_timesC[pState[3]] ^ phCryptoSym_Sw_Aes_times2[pState[3]]);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	461a      	mov	r2, r3
 8003abe:	4b2a      	ldr	r3, [pc, #168]	@ (8003b68 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 8003ac0:	5c9a      	ldrb	r2, [r3, r2]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	4b26      	ldr	r3, [pc, #152]	@ (8003b64 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8003aca:	5c5b      	ldrb	r3, [r3, r1]
 8003acc:	4053      	eors	r3, r2
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	4b21      	ldr	r3, [pc, #132]	@ (8003b60 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 8003ada:	5c59      	ldrb	r1, [r3, r1]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	404b      	eors	r3, r1
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	4053      	eors	r3, r2
 8003ae8:	b2da      	uxtb	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	3302      	adds	r3, #2
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	4619      	mov	r1, r3
 8003af2:	4b1d      	ldr	r3, [pc, #116]	@ (8003b68 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 8003af4:	5c5b      	ldrb	r3, [r3, r1]
 8003af6:	4053      	eors	r3, r2
 8003af8:	b2da      	uxtb	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	3303      	adds	r3, #3
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	4619      	mov	r1, r3
 8003b02:	4b17      	ldr	r3, [pc, #92]	@ (8003b60 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 8003b04:	5c59      	ldrb	r1, [r3, r1]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	3303      	adds	r3, #3
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	4b15      	ldr	r3, [pc, #84]	@ (8003b64 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8003b10:	5c1b      	ldrb	r3, [r3, r0]
 8003b12:	404b      	eors	r3, r1
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	4053      	eors	r3, r2
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	72fb      	strb	r3, [r7, #11]
#endif /* PH_CRYPTOSYM_SW_ROM_OPTIMIZATION */
        *pState++ = tmp[0];
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	1c5a      	adds	r2, r3, #1
 8003b20:	607a      	str	r2, [r7, #4]
 8003b22:	7a3a      	ldrb	r2, [r7, #8]
 8003b24:	701a      	strb	r2, [r3, #0]
        *pState++ = tmp[1];
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	1c5a      	adds	r2, r3, #1
 8003b2a:	607a      	str	r2, [r7, #4]
 8003b2c:	7a7a      	ldrb	r2, [r7, #9]
 8003b2e:	701a      	strb	r2, [r3, #0]
        *pState++ = tmp[2];
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	1c5a      	adds	r2, r3, #1
 8003b34:	607a      	str	r2, [r7, #4]
 8003b36:	7aba      	ldrb	r2, [r7, #10]
 8003b38:	701a      	strb	r2, [r3, #0]
        *pState++ = tmp[3];
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	1c5a      	adds	r2, r3, #1
 8003b3e:	607a      	str	r2, [r7, #4]
 8003b40:	7afa      	ldrb	r2, [r7, #11]
 8003b42:	701a      	strb	r2, [r3, #0]
    for (i=0;i<4U;i++)
 8003b44:	7bfb      	ldrb	r3, [r7, #15]
 8003b46:	3301      	adds	r3, #1
 8003b48:	73fb      	strb	r3, [r7, #15]
 8003b4a:	7bfb      	ldrb	r3, [r7, #15]
 8003b4c:	2b03      	cmp	r3, #3
 8003b4e:	f67f af1c 	bls.w	800398a <phCryptoSym_Sw_Aes_InvMixColumns+0xe>
    }
}
 8003b52:	bf00      	nop
 8003b54:	bf00      	nop
 8003b56:	3714      	adds	r7, #20
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	0801fdf0 	.word	0x0801fdf0
 8003b64:	0801fbf0 	.word	0x0801fbf0
 8003b68:	0801fcf0 	.word	0x0801fcf0

08003b6c <phCryptoSym_Sw_Aes_AddRoundKey>:
#ifdef PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
void phCryptoSym_Sw_Aes_AddRoundKey(uint8_t PH_CRYTOSYM_SW_FAST_RAM * pState, uint8_t PH_CRYTOSYM_SW_FAST_RAM * pKey, uint8_t * pNkCurrent, uint8_t bNk, uint8_t bMode)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b089      	sub	sp, #36	@ 0x24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
 8003b78:	70fb      	strb	r3, [r7, #3]
    uint8_t i = 0;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	77fb      	strb	r3, [r7, #31]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM bOffset;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM bModulus;

    /* NOTE: As pKey is an array of size bNk, the byte of the last round w[i-nk]is always in the same position as the byte currently operated on. */
    /* For each call of the function, 16 bytes of round key need to be calculated */
    for (i=0;i<4U;i++)
 8003b7e:	2300      	movs	r3, #0
 8003b80:	77fb      	strb	r3, [r7, #31]
 8003b82:	e197      	b.n	8003eb4 <phCryptoSym_Sw_Aes_AddRoundKey+0x348>
    {
        /* Find out, if we are in a "first" column, a "special" column or a "standard" column. */
        bModulus = *pNkCurrent % bNk;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	78fa      	ldrb	r2, [r7, #3]
 8003b8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8003b8e:	fb01 f202 	mul.w	r2, r1, r2
 8003b92:	1a9b      	subs	r3, r3, r2
 8003b94:	75fb      	strb	r3, [r7, #23]

        /* Generally the pCurKeyPtr can be calculated directly out of the bModulus */
        pCurKeyPtr = &pKey[bModulus << 2U];
 8003b96:	7dfb      	ldrb	r3, [r7, #23]
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]

        /* In case of decryption, xoring has to be done upfront. */
        if (bMode == PH_CRYPTOSYM_KEYSCHEDULE_DECRYPTION)
 8003ba0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003ba4:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ba6:	d150      	bne.n	8003c4a <phCryptoSym_Sw_Aes_AddRoundKey+0xde>
        {
            pState[((3U-i)*4U)] ^= *(pCurKeyPtr + 0U);
 8003ba8:	7ffb      	ldrb	r3, [r7, #31]
 8003baa:	f1c3 0303 	rsb	r3, r3, #3
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	7819      	ldrb	r1, [r3, #0]
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	781a      	ldrb	r2, [r3, #0]
 8003bba:	7ffb      	ldrb	r3, [r7, #31]
 8003bbc:	f1c3 0303 	rsb	r3, r3, #3
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	4403      	add	r3, r0
 8003bc6:	404a      	eors	r2, r1
 8003bc8:	b2d2      	uxtb	r2, r2
 8003bca:	701a      	strb	r2, [r3, #0]
            pState[((3U-i)*4U)+1U] ^= *(pCurKeyPtr + 1U);
 8003bcc:	7ffb      	ldrb	r3, [r7, #31]
 8003bce:	f1c3 0303 	rsb	r3, r3, #3
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	4413      	add	r3, r2
 8003bda:	7819      	ldrb	r1, [r3, #0]
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	3301      	adds	r3, #1
 8003be0:	781a      	ldrb	r2, [r3, #0]
 8003be2:	7ffb      	ldrb	r3, [r7, #31]
 8003be4:	f1c3 0303 	rsb	r3, r3, #3
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	3301      	adds	r3, #1
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	4403      	add	r3, r0
 8003bf0:	404a      	eors	r2, r1
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	701a      	strb	r2, [r3, #0]
            pState[((3U-i)*4U)+2U] ^= *(pCurKeyPtr + 2U);
 8003bf6:	7ffb      	ldrb	r3, [r7, #31]
 8003bf8:	f1c3 0303 	rsb	r3, r3, #3
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	3302      	adds	r3, #2
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	4413      	add	r3, r2
 8003c04:	7819      	ldrb	r1, [r3, #0]
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	3302      	adds	r3, #2
 8003c0a:	781a      	ldrb	r2, [r3, #0]
 8003c0c:	7ffb      	ldrb	r3, [r7, #31]
 8003c0e:	f1c3 0303 	rsb	r3, r3, #3
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	3302      	adds	r3, #2
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	4403      	add	r3, r0
 8003c1a:	404a      	eors	r2, r1
 8003c1c:	b2d2      	uxtb	r2, r2
 8003c1e:	701a      	strb	r2, [r3, #0]
            pState[((3U-i)*4U)+3U] ^= *(pCurKeyPtr + 3U);
 8003c20:	7ffb      	ldrb	r3, [r7, #31]
 8003c22:	f1c3 0303 	rsb	r3, r3, #3
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	3303      	adds	r3, #3
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	7819      	ldrb	r1, [r3, #0]
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	3303      	adds	r3, #3
 8003c34:	781a      	ldrb	r2, [r3, #0]
 8003c36:	7ffb      	ldrb	r3, [r7, #31]
 8003c38:	f1c3 0303 	rsb	r3, r3, #3
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	3303      	adds	r3, #3
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	4403      	add	r3, r0
 8003c44:	404a      	eors	r2, r1
 8003c46:	b2d2      	uxtb	r2, r2
 8003c48:	701a      	strb	r2, [r3, #0]
        }

        if (*pNkCurrent < bNk)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	78fa      	ldrb	r2, [r7, #3]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d903      	bls.n	8003c5c <phCryptoSym_Sw_Aes_AddRoundKey+0xf0>
        {
            /* w[i] = word(key[4U*i], key[4U*i+1U], key[4U*i+2U], key[4U*i+3U]) */
            /* Just increment the current key pointer, as the key is already stored internally...*/
            pCurKeyPtr += 4U;
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	3304      	adds	r3, #4
 8003c58:	61bb      	str	r3, [r7, #24]
 8003c5a:	e0d1      	b.n	8003e00 <phCryptoSym_Sw_Aes_AddRoundKey+0x294>
        }else
        {
            if ( bModulus == 0U)
 8003c5c:	7dfb      	ldrb	r3, [r7, #23]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d153      	bne.n	8003d0a <phCryptoSym_Sw_Aes_AddRoundKey+0x19e>
            {
                /* First find the offset to w[i-1] */
                bOffset = (uint8_t)(((uint8_t)((uint8_t)bNk-1U)<<2U) + 1U);
 8003c62:	78fb      	ldrb	r3, [r7, #3]
 8003c64:	3b01      	subs	r3, #1
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	75bb      	strb	r3, [r7, #22]
                /* now calculate the following calculation: */
                /* w[i] = w[i-Nk] xor SubWord(RotWord(w[i-1])) xor Rcon[i/Nk] */
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr+bOffset)] ^ phCryptoSym_Sw_Aes_Rcon[(*pNkCurrent)/bNk - 1U];
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	781a      	ldrb	r2, [r3, #0]
 8003c74:	7dbb      	ldrb	r3, [r7, #22]
 8003c76:	69b9      	ldr	r1, [r7, #24]
 8003c78:	440b      	add	r3, r1
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4b93      	ldr	r3, [pc, #588]	@ (8003ecc <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8003c80:	5c59      	ldrb	r1, [r3, r1]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	7818      	ldrb	r0, [r3, #0]
 8003c86:	78fb      	ldrb	r3, [r7, #3]
 8003c88:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	488f      	ldr	r0, [pc, #572]	@ (8003ed0 <phCryptoSym_Sw_Aes_AddRoundKey+0x364>)
 8003c92:	5cc3      	ldrb	r3, [r0, r3]
 8003c94:	404b      	eors	r3, r1
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	4053      	eors	r3, r2
 8003c9a:	b2da      	uxtb	r2, r3
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr+bOffset)];
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	781a      	ldrb	r2, [r3, #0]
 8003caa:	7dbb      	ldrb	r3, [r7, #22]
 8003cac:	69b9      	ldr	r1, [r7, #24]
 8003cae:	440b      	add	r3, r1
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	4b85      	ldr	r3, [pc, #532]	@ (8003ecc <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8003cb6:	5c5b      	ldrb	r3, [r3, r1]
 8003cb8:	4053      	eors	r3, r2
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr+bOffset)];
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	781a      	ldrb	r2, [r3, #0]
 8003cca:	7dbb      	ldrb	r3, [r7, #22]
 8003ccc:	69b9      	ldr	r1, [r7, #24]
 8003cce:	440b      	add	r3, r1
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	4b7d      	ldr	r3, [pc, #500]	@ (8003ecc <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8003cd6:	5c5b      	ldrb	r3, [r3, r1]
 8003cd8:	4053      	eors	r3, r2
 8003cda:	b2da      	uxtb	r2, r3
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr+bOffset - 4U)];
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	781a      	ldrb	r2, [r3, #0]
 8003cea:	7dbb      	ldrb	r3, [r7, #22]
 8003cec:	3b04      	subs	r3, #4
 8003cee:	69b9      	ldr	r1, [r7, #24]
 8003cf0:	440b      	add	r3, r1
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	4b75      	ldr	r3, [pc, #468]	@ (8003ecc <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8003cf8:	5c5b      	ldrb	r3, [r3, r1]
 8003cfa:	4053      	eors	r3, r2
 8003cfc:	b2da      	uxtb	r2, r3
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	3301      	adds	r3, #1
 8003d06:	61bb      	str	r3, [r7, #24]
 8003d08:	e07a      	b.n	8003e00 <phCryptoSym_Sw_Aes_AddRoundKey+0x294>
            }else if ((bNk == 8U) && ((*pNkCurrent % bNk) == 4U))
 8003d0a:	78fb      	ldrb	r3, [r7, #3]
 8003d0c:	2b08      	cmp	r3, #8
 8003d0e:	d147      	bne.n	8003da0 <phCryptoSym_Sw_Aes_AddRoundKey+0x234>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	78fa      	ldrb	r2, [r7, #3]
 8003d16:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d1a:	fb01 f202 	mul.w	r2, r1, r2
 8003d1e:	1a9b      	subs	r3, r3, r2
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b04      	cmp	r3, #4
 8003d24:	d13c      	bne.n	8003da0 <phCryptoSym_Sw_Aes_AddRoundKey+0x234>
            {
                /* w[i] = w[i-Nk] xor SubWord(w[i-1]) */
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr-4U)];
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	781a      	ldrb	r2, [r3, #0]
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	3b04      	subs	r3, #4
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	4619      	mov	r1, r3
 8003d32:	4b66      	ldr	r3, [pc, #408]	@ (8003ecc <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8003d34:	5c5b      	ldrb	r3, [r3, r1]
 8003d36:	4053      	eors	r3, r2
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	3301      	adds	r3, #1
 8003d42:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr-4U)];
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	781a      	ldrb	r2, [r3, #0]
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	3b04      	subs	r3, #4
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	4619      	mov	r1, r3
 8003d50:	4b5e      	ldr	r3, [pc, #376]	@ (8003ecc <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8003d52:	5c5b      	ldrb	r3, [r3, r1]
 8003d54:	4053      	eors	r3, r2
 8003d56:	b2da      	uxtb	r2, r3
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr-4U)];
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	781a      	ldrb	r2, [r3, #0]
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	3b04      	subs	r3, #4
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4b57      	ldr	r3, [pc, #348]	@ (8003ecc <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8003d70:	5c5b      	ldrb	r3, [r3, r1]
 8003d72:	4053      	eors	r3, r2
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr-4U)];
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	781a      	ldrb	r2, [r3, #0]
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	3b04      	subs	r3, #4
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	4b4f      	ldr	r3, [pc, #316]	@ (8003ecc <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8003d8e:	5c5b      	ldrb	r3, [r3, r1]
 8003d90:	4053      	eors	r3, r2
 8003d92:	b2da      	uxtb	r2, r3
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	61bb      	str	r3, [r7, #24]
 8003d9e:	e02f      	b.n	8003e00 <phCryptoSym_Sw_Aes_AddRoundKey+0x294>
            }else
            {
                /* w[i] = w[i-Nk] xor w[i-1] */
                *pCurKeyPtr ^= *(pCurKeyPtr-4U);
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	781a      	ldrb	r2, [r3, #0]
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	3b04      	subs	r3, #4
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	4053      	eors	r3, r2
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	3301      	adds	r3, #1
 8003db6:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= *(pCurKeyPtr-4U);
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	781a      	ldrb	r2, [r3, #0]
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	3b04      	subs	r3, #4
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	4053      	eors	r3, r2
 8003dc4:	b2da      	uxtb	r2, r3
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= *(pCurKeyPtr-4U);
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	781a      	ldrb	r2, [r3, #0]
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	3b04      	subs	r3, #4
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	4053      	eors	r3, r2
 8003ddc:	b2da      	uxtb	r2, r3
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	3301      	adds	r3, #1
 8003de6:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= *(pCurKeyPtr-4U);
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	781a      	ldrb	r2, [r3, #0]
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	3b04      	subs	r3, #4
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	4053      	eors	r3, r2
 8003df4:	b2da      	uxtb	r2, r3
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	61bb      	str	r3, [r7, #24]
            }
        }

        /* In case of encryption and key initialization for decryption, we have to increment, else we have to decrement NkCurrent */
        if (bMode != PH_CRYPTOSYM_KEYSCHEDULE_DECRYPTION)
 8003e00:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003e04:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e06:	d006      	beq.n	8003e16 <phCryptoSym_Sw_Aes_AddRoundKey+0x2aa>
        {
            (*pNkCurrent)++;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	b2da      	uxtb	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	701a      	strb	r2, [r3, #0]
 8003e14:	e005      	b.n	8003e22 <phCryptoSym_Sw_Aes_AddRoundKey+0x2b6>
        }else
        {
            (*pNkCurrent)--;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	b2da      	uxtb	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	701a      	strb	r2, [r3, #0]
        }

        /* In case of encryption, xoring has to be done at the end. */
        if (bMode == PH_CRYPTOSYM_KEYSCHEDULE_ENCRYPTION)
 8003e22:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003e26:	2b0f      	cmp	r3, #15
 8003e28:	d141      	bne.n	8003eae <phCryptoSym_Sw_Aes_AddRoundKey+0x342>
        {
            pState[(i*4U)] ^= *(pCurKeyPtr - 4U);
 8003e2a:	7ffb      	ldrb	r3, [r7, #31]
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	4413      	add	r3, r2
 8003e32:	7819      	ldrb	r1, [r3, #0]
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	3b04      	subs	r3, #4
 8003e38:	781a      	ldrb	r2, [r3, #0]
 8003e3a:	7ffb      	ldrb	r3, [r7, #31]
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	4403      	add	r3, r0
 8003e42:	404a      	eors	r2, r1
 8003e44:	b2d2      	uxtb	r2, r2
 8003e46:	701a      	strb	r2, [r3, #0]
            pState[(i*4U)+1U] ^= *(pCurKeyPtr - 3U);
 8003e48:	7ffb      	ldrb	r3, [r7, #31]
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	4413      	add	r3, r2
 8003e52:	7819      	ldrb	r1, [r3, #0]
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	3b03      	subs	r3, #3
 8003e58:	781a      	ldrb	r2, [r3, #0]
 8003e5a:	7ffb      	ldrb	r3, [r7, #31]
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	3301      	adds	r3, #1
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	4403      	add	r3, r0
 8003e64:	404a      	eors	r2, r1
 8003e66:	b2d2      	uxtb	r2, r2
 8003e68:	701a      	strb	r2, [r3, #0]
            pState[(i*4U)+2U] ^= *(pCurKeyPtr - 2U);
 8003e6a:	7ffb      	ldrb	r3, [r7, #31]
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	3302      	adds	r3, #2
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	4413      	add	r3, r2
 8003e74:	7819      	ldrb	r1, [r3, #0]
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	3b02      	subs	r3, #2
 8003e7a:	781a      	ldrb	r2, [r3, #0]
 8003e7c:	7ffb      	ldrb	r3, [r7, #31]
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	3302      	adds	r3, #2
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	4403      	add	r3, r0
 8003e86:	404a      	eors	r2, r1
 8003e88:	b2d2      	uxtb	r2, r2
 8003e8a:	701a      	strb	r2, [r3, #0]
            pState[(i*4U)+3U] ^= *(pCurKeyPtr - 1U);
 8003e8c:	7ffb      	ldrb	r3, [r7, #31]
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	3303      	adds	r3, #3
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	4413      	add	r3, r2
 8003e96:	7819      	ldrb	r1, [r3, #0]
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	781a      	ldrb	r2, [r3, #0]
 8003e9e:	7ffb      	ldrb	r3, [r7, #31]
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	3303      	adds	r3, #3
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	4403      	add	r3, r0
 8003ea8:	404a      	eors	r2, r1
 8003eaa:	b2d2      	uxtb	r2, r2
 8003eac:	701a      	strb	r2, [r3, #0]
    for (i=0;i<4U;i++)
 8003eae:	7ffb      	ldrb	r3, [r7, #31]
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	77fb      	strb	r3, [r7, #31]
 8003eb4:	7ffb      	ldrb	r3, [r7, #31]
 8003eb6:	2b03      	cmp	r3, #3
 8003eb8:	f67f ae64 	bls.w	8003b84 <phCryptoSym_Sw_Aes_AddRoundKey+0x18>
        }
    }
}
 8003ebc:	bf00      	nop
 8003ebe:	bf00      	nop
 8003ec0:	3724      	adds	r7, #36	@ 0x24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	0801f9f0 	.word	0x0801f9f0
 8003ed0:	0801fef0 	.word	0x0801fef0

08003ed4 <phCryptoSym_Sw_Des_KeyInit>:
phStatus_t  phCryptoSym_Sw_Des_KeyInit(
                                       phCryptoSym_Sw_DataParams_t * pDataParams,
                                       const uint8_t * pKey,
                                       uint8_t bNumKeys
                                       )
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	71fb      	strb	r3, [r7, #7]
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
    uint8_t PH_CRYTOSYM_SW_FAST_RAM bTmpKey[PH_CRYPTOSYM_DES_KEY_SIZE];
#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */

    /* In case of online key expansion we only calculate P1 in this step*/
    while(0u != bNumKeys--)
 8003ee2:	e00b      	b.n	8003efc <phCryptoSym_Sw_Des_KeyInit+0x28>
        /* take the key, starting with the last one and write the result to the internal keybuffer. */
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
        phCryptoSym_Sw_Des_PC1_Permutation(&pKey[bNumKeys << 3U], bTmpKey);
        (void)memcpy(&pDataParams->pKey[bNumKeys << 3U], bTmpKey, PH_CRYPTOSYM_DES_KEY_SIZE);
#else
        phCryptoSym_Sw_Des_PC1_Permutation(&pKey[bNumKeys << 3U], &pDataParams->pKey[bNumKeys << 3U]);
 8003ee4:	79fb      	ldrb	r3, [r7, #7]
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	18d0      	adds	r0, r2, r3
 8003eec:	79fb      	ldrb	r3, [r7, #7]
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	3308      	adds	r3, #8
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	f000 f9f0 	bl	80042dc <phCryptoSym_Sw_Des_PC1_Permutation>
    while(0u != bNumKeys--)
 8003efc:	79fb      	ldrb	r3, [r7, #7]
 8003efe:	1e5a      	subs	r2, r3, #1
 8003f00:	71fa      	strb	r2, [r7, #7]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1ee      	bne.n	8003ee4 <phCryptoSym_Sw_Des_KeyInit+0x10>
    /* Clear TmpKey */
    (void)memset(bTmpKey, 0x00, (size_t)sizeof(bTmpKey));
#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */

    return PH_ERR_SUCCESS;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <phCryptoSym_Sw_Des_EncryptBlock>:
phStatus_t  phCryptoSym_Sw_Des_EncryptBlock(
    phCryptoSym_Sw_DataParams_t * pDataParams,
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pBlock,
    uint8_t bKeyNumber
    )
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b088      	sub	sp, #32
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	71fb      	strb	r3, [r7, #7]
#else
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
    (void)memcpy(pTmpKey, &pDataParams->pKey[(bKeyNumber << 3U)], PH_CRYPTOSYM_DES_KEY_SIZE);
    pKey = pTmpKey;
#else
    pKey = &pDataParams->pKey[(bKeyNumber << 3U)];
 8003f1e:	79fb      	ldrb	r3, [r7, #7]
 8003f20:	00db      	lsls	r3, r3, #3
 8003f22:	3308      	adds	r3, #8
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	4413      	add	r3, r2
 8003f28:	61bb      	str	r3, [r7, #24]
#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */

    phCryptoSym_Sw_Des_Permutate_IP(pBlock, pTmp);
 8003f2a:	f107 0310 	add.w	r3, r7, #16
 8003f2e:	4619      	mov	r1, r3
 8003f30:	68b8      	ldr	r0, [r7, #8]
 8003f32:	f000 f887 	bl	8004044 <phCryptoSym_Sw_Des_Permutate_IP>

    for (i = 0; i < 16U; i++)
 8003f36:	2300      	movs	r3, #0
 8003f38:	77fb      	strb	r3, [r7, #31]
 8003f3a:	e021      	b.n	8003f80 <phCryptoSym_Sw_Des_EncryptBlock+0x70>
    {
#ifdef  PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
        phCryptoSym_Sw_Des_RotateLeft28(pKey, key_rotation[i]);
 8003f3c:	7ffb      	ldrb	r3, [r7, #31]
 8003f3e:	4a1a      	ldr	r2, [pc, #104]	@ (8003fa8 <phCryptoSym_Sw_Des_EncryptBlock+0x98>)
 8003f40:	5cd3      	ldrb	r3, [r2, r3]
 8003f42:	4619      	mov	r1, r3
 8003f44:	69b8      	ldr	r0, [r7, #24]
 8003f46:	f000 fd8f 	bl	8004a68 <phCryptoSym_Sw_Des_RotateLeft28>
        phCryptoSym_Sw_Des_RotateLeft28(&pKey[4], key_rotation[i]);
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	1d1a      	adds	r2, r3, #4
 8003f4e:	7ffb      	ldrb	r3, [r7, #31]
 8003f50:	4915      	ldr	r1, [pc, #84]	@ (8003fa8 <phCryptoSym_Sw_Des_EncryptBlock+0x98>)
 8003f52:	5ccb      	ldrb	r3, [r1, r3]
 8003f54:	4619      	mov	r1, r3
 8003f56:	4610      	mov	r0, r2
 8003f58:	f000 fd86 	bl	8004a68 <phCryptoSym_Sw_Des_RotateLeft28>
        phCryptoSym_Sw_Des_PC2_Permutation(pKey , &pDataParams->pKey[PH_CRYPTOSYM_3K3DES_KEY_SIZE]);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	3320      	adds	r3, #32
 8003f60:	4619      	mov	r1, r3
 8003f62:	69b8      	ldr	r0, [r7, #24]
 8003f64:	f000 fa3f 	bl	80043e6 <phCryptoSym_Sw_Des_PC2_Permutation>
        phCryptoSym_Sw_Des_ComputeRound(pTmp, &pDataParams->pKey[PH_CRYPTOSYM_3K3DES_KEY_SIZE]);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f103 0220 	add.w	r2, r3, #32
 8003f6e:	f107 0310 	add.w	r3, r7, #16
 8003f72:	4611      	mov	r1, r2
 8003f74:	4618      	mov	r0, r3
 8003f76:	f000 fdc2 	bl	8004afe <phCryptoSym_Sw_Des_ComputeRound>
    for (i = 0; i < 16U; i++)
 8003f7a:	7ffb      	ldrb	r3, [r7, #31]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	77fb      	strb	r3, [r7, #31]
 8003f80:	7ffb      	ldrb	r3, [r7, #31]
 8003f82:	2b0f      	cmp	r3, #15
 8003f84:	d9da      	bls.n	8003f3c <phCryptoSym_Sw_Des_EncryptBlock+0x2c>
#else
        phCryptoSym_Sw_Des_ComputeRound(pTmp, &pKey[i << 3U]);
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
    }

    phCryptoSym_Sw_Des_Swap(pTmp);
 8003f86:	f107 0310 	add.w	r3, r7, #16
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 fdf3 	bl	8004b76 <phCryptoSym_Sw_Des_Swap>

    phCryptoSym_Sw_Des_Permutate_IP_Inv(pTmp, pBlock);
 8003f90:	f107 0310 	add.w	r3, r7, #16
 8003f94:	68b9      	ldr	r1, [r7, #8]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f000 f8f3 	bl	8004182 <phCryptoSym_Sw_Des_Permutate_IP_Inv>
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
    /* Clear TmpKey */
    (void)memset(pTmpKey, 0x00, (size_t)sizeof(pTmpKey));
#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
    return PH_ERR_SUCCESS;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3720      	adds	r7, #32
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	0801fefc 	.word	0x0801fefc

08003fac <phCryptoSym_Sw_Des_DecryptBlock>:
phStatus_t  phCryptoSym_Sw_Des_DecryptBlock(
    phCryptoSym_Sw_DataParams_t * pDataParams,
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pBlock,
    uint8_t bKeyNumber
    )
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b088      	sub	sp, #32
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	71fb      	strb	r3, [r7, #7]
#else
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
    (void)memcpy(pTmpKey, &pDataParams->pKey[(bKeyNumber << 3U)], PH_CRYPTOSYM_DES_KEY_SIZE);
    pKey = pTmpKey;
#else
    pKey = &pDataParams->pKey[(bKeyNumber << 3U)];
 8003fba:	79fb      	ldrb	r3, [r7, #7]
 8003fbc:	00db      	lsls	r3, r3, #3
 8003fbe:	3308      	adds	r3, #8
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	61bb      	str	r3, [r7, #24]
#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */

    phCryptoSym_Sw_Des_Permutate_IP(pBlock, pTmpBlock);
 8003fc6:	f107 0310 	add.w	r3, r7, #16
 8003fca:	4619      	mov	r1, r3
 8003fcc:	68b8      	ldr	r0, [r7, #8]
 8003fce:	f000 f839 	bl	8004044 <phCryptoSym_Sw_Des_Permutate_IP>

    i = 15;
 8003fd2:	230f      	movs	r3, #15
 8003fd4:	77fb      	strb	r3, [r7, #31]
    do
    {
#ifdef  PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
        phCryptoSym_Sw_Des_PC2_Permutation(pKey , &pDataParams->pKey[PH_CRYPTOSYM_3K3DES_KEY_SIZE]);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	3320      	adds	r3, #32
 8003fda:	4619      	mov	r1, r3
 8003fdc:	69b8      	ldr	r0, [r7, #24]
 8003fde:	f000 fa02 	bl	80043e6 <phCryptoSym_Sw_Des_PC2_Permutation>
        phCryptoSym_Sw_Des_RotateRight28(pKey, key_rotation[i]);
 8003fe2:	7ffb      	ldrb	r3, [r7, #31]
 8003fe4:	4a16      	ldr	r2, [pc, #88]	@ (8004040 <phCryptoSym_Sw_Des_DecryptBlock+0x94>)
 8003fe6:	5cd3      	ldrb	r3, [r2, r3]
 8003fe8:	4619      	mov	r1, r3
 8003fea:	69b8      	ldr	r0, [r7, #24]
 8003fec:	f000 fce5 	bl	80049ba <phCryptoSym_Sw_Des_RotateRight28>
        phCryptoSym_Sw_Des_RotateRight28(&pKey[4], key_rotation[i]);
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	1d1a      	adds	r2, r3, #4
 8003ff4:	7ffb      	ldrb	r3, [r7, #31]
 8003ff6:	4912      	ldr	r1, [pc, #72]	@ (8004040 <phCryptoSym_Sw_Des_DecryptBlock+0x94>)
 8003ff8:	5ccb      	ldrb	r3, [r1, r3]
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	4610      	mov	r0, r2
 8003ffe:	f000 fcdc 	bl	80049ba <phCryptoSym_Sw_Des_RotateRight28>
        phCryptoSym_Sw_Des_ComputeRound(pTmpBlock, &pDataParams->pKey[PH_CRYPTOSYM_3K3DES_KEY_SIZE]);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f103 0220 	add.w	r2, r3, #32
 8004008:	f107 0310 	add.w	r3, r7, #16
 800400c:	4611      	mov	r1, r2
 800400e:	4618      	mov	r0, r3
 8004010:	f000 fd75 	bl	8004afe <phCryptoSym_Sw_Des_ComputeRound>
#else
        phCryptoSym_Sw_Des_ComputeRound(pTmpBlock, &pKey[i << 3U]);
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
    }while(i-- > 0U);
 8004014:	7ffb      	ldrb	r3, [r7, #31]
 8004016:	1e5a      	subs	r2, r3, #1
 8004018:	77fa      	strb	r2, [r7, #31]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1db      	bne.n	8003fd6 <phCryptoSym_Sw_Des_DecryptBlock+0x2a>

    phCryptoSym_Sw_Des_Swap(pTmpBlock);
 800401e:	f107 0310 	add.w	r3, r7, #16
 8004022:	4618      	mov	r0, r3
 8004024:	f000 fda7 	bl	8004b76 <phCryptoSym_Sw_Des_Swap>

    phCryptoSym_Sw_Des_Permutate_IP_Inv(pTmpBlock, pBlock);
 8004028:	f107 0310 	add.w	r3, r7, #16
 800402c:	68b9      	ldr	r1, [r7, #8]
 800402e:	4618      	mov	r0, r3
 8004030:	f000 f8a7 	bl	8004182 <phCryptoSym_Sw_Des_Permutate_IP_Inv>

    return PH_ERR_SUCCESS;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3720      	adds	r7, #32
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	0801fefc 	.word	0x0801fefc

08004044 <phCryptoSym_Sw_Des_Permutate_IP>:

void  phCryptoSym_Sw_Des_Permutate_IP(
                                      uint8_t PH_CRYTOSYM_SW_FAST_RAM * pStateIn,
                                      uint8_t PH_CRYTOSYM_SW_FAST_RAM * pStateOut
                                      )
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
    /* round 3: pStateOut[7]: 63 55 47 39 31 23 15 7 */
    /* round 3: pStateOut[3]: 64 56 48 40 32 24 16 8 */

    uint8_t PH_CRYTOSYM_SW_FAST_RAM i;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM j;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM* outTmp = pStateOut;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	60bb      	str	r3, [r7, #8]

    /* Outer loop to iterate over output byte pairs 4,0, 5,1, 6,2, 7,2 */
    for (i=0;i<4U;i++)
 8004052:	2300      	movs	r3, #0
 8004054:	73fb      	strb	r3, [r7, #15]
 8004056:	e089      	b.n	800416c <phCryptoSym_Sw_Des_Permutate_IP+0x128>
    {
        /* Set output bytes to 0x00 to be able to OR in the loop */
        outTmp[0]=0x00;
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	2200      	movs	r2, #0
 800405c:	701a      	strb	r2, [r3, #0]
        outTmp[4]=0x00;
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	3304      	adds	r3, #4
 8004062:	2200      	movs	r2, #0
 8004064:	701a      	strb	r2, [r3, #0]

        /* Inner loop to iterate over input bytes */
        for (j=0;j<7U;j++)
 8004066:	2300      	movs	r3, #0
 8004068:	73bb      	strb	r3, [r7, #14]
 800406a:	e046      	b.n	80040fa <phCryptoSym_Sw_Des_Permutate_IP+0xb6>
        {
            /* Take MSBit of input, shift output to right to make space for next input bit
            and input to left to get next bit at the bit position 7.*/
            outTmp[4] |= (uint8_t)(pStateIn[j] & 0x80U);
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	3304      	adds	r3, #4
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	b25a      	sxtb	r2, r3
 8004074:	7bbb      	ldrb	r3, [r7, #14]
 8004076:	6879      	ldr	r1, [r7, #4]
 8004078:	440b      	add	r3, r1
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	b25b      	sxtb	r3, r3
 800407e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004082:	b25b      	sxtb	r3, r3
 8004084:	4313      	orrs	r3, r2
 8004086:	b25a      	sxtb	r2, r3
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	3304      	adds	r3, #4
 800408c:	b2d2      	uxtb	r2, r2
 800408e:	701a      	strb	r2, [r3, #0]
            outTmp[4] >>= 1U;
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	3304      	adds	r3, #4
 8004094:	781a      	ldrb	r2, [r3, #0]
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	3304      	adds	r3, #4
 800409a:	0852      	lsrs	r2, r2, #1
 800409c:	b2d2      	uxtb	r2, r2
 800409e:	701a      	strb	r2, [r3, #0]
            pStateIn[j] <<= 1U;
 80040a0:	7bbb      	ldrb	r3, [r7, #14]
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	4413      	add	r3, r2
 80040a6:	781a      	ldrb	r2, [r3, #0]
 80040a8:	7bbb      	ldrb	r3, [r7, #14]
 80040aa:	6879      	ldr	r1, [r7, #4]
 80040ac:	440b      	add	r3, r1
 80040ae:	0052      	lsls	r2, r2, #1
 80040b0:	b2d2      	uxtb	r2, r2
 80040b2:	701a      	strb	r2, [r3, #0]
            /* Take MSBit of input, shift output to right to make space for next input bit
            and input to left to get next bit at the bit position 7.*/
            outTmp[0] |= (uint8_t)(pStateIn[j] & 0x80U);
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	b25a      	sxtb	r2, r3
 80040ba:	7bbb      	ldrb	r3, [r7, #14]
 80040bc:	6879      	ldr	r1, [r7, #4]
 80040be:	440b      	add	r3, r1
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	b25b      	sxtb	r3, r3
 80040c4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80040c8:	b25b      	sxtb	r3, r3
 80040ca:	4313      	orrs	r3, r2
 80040cc:	b25b      	sxtb	r3, r3
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	701a      	strb	r2, [r3, #0]
            outTmp[0] >>= 1U;
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	085b      	lsrs	r3, r3, #1
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	701a      	strb	r2, [r3, #0]
            pStateIn[j] <<= 1U;
 80040e0:	7bbb      	ldrb	r3, [r7, #14]
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	4413      	add	r3, r2
 80040e6:	781a      	ldrb	r2, [r3, #0]
 80040e8:	7bbb      	ldrb	r3, [r7, #14]
 80040ea:	6879      	ldr	r1, [r7, #4]
 80040ec:	440b      	add	r3, r1
 80040ee:	0052      	lsls	r2, r2, #1
 80040f0:	b2d2      	uxtb	r2, r2
 80040f2:	701a      	strb	r2, [r3, #0]
        for (j=0;j<7U;j++)
 80040f4:	7bbb      	ldrb	r3, [r7, #14]
 80040f6:	3301      	adds	r3, #1
 80040f8:	73bb      	strb	r3, [r7, #14]
 80040fa:	7bbb      	ldrb	r3, [r7, #14]
 80040fc:	2b06      	cmp	r3, #6
 80040fe:	d9b5      	bls.n	800406c <phCryptoSym_Sw_Des_Permutate_IP+0x28>
        }
        /* Take MSBit of input, do not shift output, as the byte is already full.
        and input to left to get next bit at the bit position 7.*/
        outTmp[4] |= (uint8_t)(pStateIn[7] & 0x80U);
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	3304      	adds	r3, #4
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	b25a      	sxtb	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	3307      	adds	r3, #7
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	b25b      	sxtb	r3, r3
 8004110:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004114:	b25b      	sxtb	r3, r3
 8004116:	4313      	orrs	r3, r2
 8004118:	b25a      	sxtb	r2, r3
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	3304      	adds	r3, #4
 800411e:	b2d2      	uxtb	r2, r2
 8004120:	701a      	strb	r2, [r3, #0]
        pStateIn[7] <<= 1U;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	3307      	adds	r3, #7
 8004126:	781a      	ldrb	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	3307      	adds	r3, #7
 800412c:	0052      	lsls	r2, r2, #1
 800412e:	b2d2      	uxtb	r2, r2
 8004130:	701a      	strb	r2, [r3, #0]
        outTmp[0] |= (uint8_t)(pStateIn[7] & 0x80U);
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	b25a      	sxtb	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	3307      	adds	r3, #7
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	b25b      	sxtb	r3, r3
 8004140:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004144:	b25b      	sxtb	r3, r3
 8004146:	4313      	orrs	r3, r2
 8004148:	b25b      	sxtb	r3, r3
 800414a:	b2da      	uxtb	r2, r3
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	701a      	strb	r2, [r3, #0]
        pStateIn[7] <<= 1U;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	3307      	adds	r3, #7
 8004154:	781a      	ldrb	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	3307      	adds	r3, #7
 800415a:	0052      	lsls	r2, r2, #1
 800415c:	b2d2      	uxtb	r2, r2
 800415e:	701a      	strb	r2, [r3, #0]
        /* Increment base pointer to get next output byte pair. */
        outTmp++;
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	3301      	adds	r3, #1
 8004164:	60bb      	str	r3, [r7, #8]
    for (i=0;i<4U;i++)
 8004166:	7bfb      	ldrb	r3, [r7, #15]
 8004168:	3301      	adds	r3, #1
 800416a:	73fb      	strb	r3, [r7, #15]
 800416c:	7bfb      	ldrb	r3, [r7, #15]
 800416e:	2b03      	cmp	r3, #3
 8004170:	f67f af72 	bls.w	8004058 <phCryptoSym_Sw_Des_Permutate_IP+0x14>
    }
}
 8004174:	bf00      	nop
 8004176:	bf00      	nop
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr

08004182 <phCryptoSym_Sw_Des_Permutate_IP_Inv>:

void  phCryptoSym_Sw_Des_Permutate_IP_Inv(
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pStateIn,
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pStateOut
    )
{
 8004182:	b480      	push	{r7}
 8004184:	b085      	sub	sp, #20
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
 800418a:	6039      	str	r1, [r7, #0]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * inTmp;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM i;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM j;

    /* Outer loop to iterate over all output bytes */
    for (i=0;i<8U;i++)
 800418c:	2300      	movs	r3, #0
 800418e:	72fb      	strb	r3, [r7, #11]
 8004190:	e099      	b.n	80042c6 <phCryptoSym_Sw_Des_Permutate_IP_Inv+0x144>
    {
        pStateOut[i]=0x00;
 8004192:	7afb      	ldrb	r3, [r7, #11]
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	4413      	add	r3, r2
 8004198:	2200      	movs	r2, #0
 800419a:	701a      	strb	r2, [r3, #0]
        inTmp = pStateIn;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	60fb      	str	r3, [r7, #12]
        /* Inner loop to iterate over input byte pairs 4,0, 5,1, 6,2, */
        for (j=0;j<3U;j++)
 80041a0:	2300      	movs	r3, #0
 80041a2:	72bb      	strb	r3, [r7, #10]
 80041a4:	e04c      	b.n	8004240 <phCryptoSym_Sw_Des_Permutate_IP_Inv+0xbe>
        {
            /* Take LSBit of input bytes base[4] and base[0], shift output to left
            to make space for next input bit and input to rigth to get next bit at
            the bit position 1.*/
            pStateOut[i] |= (uint8_t)(inTmp[4] & 0x01U);
 80041a6:	7afb      	ldrb	r3, [r7, #11]
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	4413      	add	r3, r2
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	b25a      	sxtb	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	3304      	adds	r3, #4
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	b25b      	sxtb	r3, r3
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	b25b      	sxtb	r3, r3
 80041be:	4313      	orrs	r3, r2
 80041c0:	b259      	sxtb	r1, r3
 80041c2:	7afb      	ldrb	r3, [r7, #11]
 80041c4:	683a      	ldr	r2, [r7, #0]
 80041c6:	4413      	add	r3, r2
 80041c8:	b2ca      	uxtb	r2, r1
 80041ca:	701a      	strb	r2, [r3, #0]
            pStateOut[i] <<= 1U;
 80041cc:	7afb      	ldrb	r3, [r7, #11]
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	4413      	add	r3, r2
 80041d2:	781a      	ldrb	r2, [r3, #0]
 80041d4:	7afb      	ldrb	r3, [r7, #11]
 80041d6:	6839      	ldr	r1, [r7, #0]
 80041d8:	440b      	add	r3, r1
 80041da:	0052      	lsls	r2, r2, #1
 80041dc:	b2d2      	uxtb	r2, r2
 80041de:	701a      	strb	r2, [r3, #0]
            pStateOut[i] |= (uint8_t)(inTmp[0] & 0x01U);
 80041e0:	7afb      	ldrb	r3, [r7, #11]
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	4413      	add	r3, r2
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	b25a      	sxtb	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	b25b      	sxtb	r3, r3
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	b25b      	sxtb	r3, r3
 80041f6:	4313      	orrs	r3, r2
 80041f8:	b259      	sxtb	r1, r3
 80041fa:	7afb      	ldrb	r3, [r7, #11]
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	4413      	add	r3, r2
 8004200:	b2ca      	uxtb	r2, r1
 8004202:	701a      	strb	r2, [r3, #0]
            pStateOut[i] <<= 1U;
 8004204:	7afb      	ldrb	r3, [r7, #11]
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	4413      	add	r3, r2
 800420a:	781a      	ldrb	r2, [r3, #0]
 800420c:	7afb      	ldrb	r3, [r7, #11]
 800420e:	6839      	ldr	r1, [r7, #0]
 8004210:	440b      	add	r3, r1
 8004212:	0052      	lsls	r2, r2, #1
 8004214:	b2d2      	uxtb	r2, r2
 8004216:	701a      	strb	r2, [r3, #0]
            inTmp[0] >>= 1U;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	085b      	lsrs	r3, r3, #1
 800421e:	b2da      	uxtb	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	701a      	strb	r2, [r3, #0]
            inTmp[4] >>= 1U;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	3304      	adds	r3, #4
 8004228:	781a      	ldrb	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	3304      	adds	r3, #4
 800422e:	0852      	lsrs	r2, r2, #1
 8004230:	b2d2      	uxtb	r2, r2
 8004232:	701a      	strb	r2, [r3, #0]
            inTmp++;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	3301      	adds	r3, #1
 8004238:	60fb      	str	r3, [r7, #12]
        for (j=0;j<3U;j++)
 800423a:	7abb      	ldrb	r3, [r7, #10]
 800423c:	3301      	adds	r3, #1
 800423e:	72bb      	strb	r3, [r7, #10]
 8004240:	7abb      	ldrb	r3, [r7, #10]
 8004242:	2b02      	cmp	r3, #2
 8004244:	d9af      	bls.n	80041a6 <phCryptoSym_Sw_Des_Permutate_IP_Inv+0x24>
        }
        /* Use input byte pair 7,2 without shifting the output byte in the final iteration
        as it is already complete */
        pStateOut[i] |= (uint8_t)(inTmp[4] & 0x01U);
 8004246:	7afb      	ldrb	r3, [r7, #11]
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	4413      	add	r3, r2
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	b25a      	sxtb	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	3304      	adds	r3, #4
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	b25b      	sxtb	r3, r3
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	b25b      	sxtb	r3, r3
 800425e:	4313      	orrs	r3, r2
 8004260:	b259      	sxtb	r1, r3
 8004262:	7afb      	ldrb	r3, [r7, #11]
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	4413      	add	r3, r2
 8004268:	b2ca      	uxtb	r2, r1
 800426a:	701a      	strb	r2, [r3, #0]
        pStateOut[i] <<= 1U;
 800426c:	7afb      	ldrb	r3, [r7, #11]
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	4413      	add	r3, r2
 8004272:	781a      	ldrb	r2, [r3, #0]
 8004274:	7afb      	ldrb	r3, [r7, #11]
 8004276:	6839      	ldr	r1, [r7, #0]
 8004278:	440b      	add	r3, r1
 800427a:	0052      	lsls	r2, r2, #1
 800427c:	b2d2      	uxtb	r2, r2
 800427e:	701a      	strb	r2, [r3, #0]
        pStateOut[i] |= (uint8_t)(inTmp[0] & 0x01U);
 8004280:	7afb      	ldrb	r3, [r7, #11]
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	4413      	add	r3, r2
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	b25a      	sxtb	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	b25b      	sxtb	r3, r3
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	b25b      	sxtb	r3, r3
 8004296:	4313      	orrs	r3, r2
 8004298:	b259      	sxtb	r1, r3
 800429a:	7afb      	ldrb	r3, [r7, #11]
 800429c:	683a      	ldr	r2, [r7, #0]
 800429e:	4413      	add	r3, r2
 80042a0:	b2ca      	uxtb	r2, r1
 80042a2:	701a      	strb	r2, [r3, #0]
        inTmp[0] >>= 1U;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	085b      	lsrs	r3, r3, #1
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	701a      	strb	r2, [r3, #0]
        inTmp[4] >>= 1U;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	3304      	adds	r3, #4
 80042b4:	781a      	ldrb	r2, [r3, #0]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	3304      	adds	r3, #4
 80042ba:	0852      	lsrs	r2, r2, #1
 80042bc:	b2d2      	uxtb	r2, r2
 80042be:	701a      	strb	r2, [r3, #0]
    for (i=0;i<8U;i++)
 80042c0:	7afb      	ldrb	r3, [r7, #11]
 80042c2:	3301      	adds	r3, #1
 80042c4:	72fb      	strb	r3, [r7, #11]
 80042c6:	7afb      	ldrb	r3, [r7, #11]
 80042c8:	2b07      	cmp	r3, #7
 80042ca:	f67f af62 	bls.w	8004192 <phCryptoSym_Sw_Des_Permutate_IP_Inv+0x10>
    }
}
 80042ce:	bf00      	nop
 80042d0:	bf00      	nop
 80042d2:	3714      	adds	r7, #20
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <phCryptoSym_Sw_Des_PC1_Permutation>:

void  phCryptoSym_Sw_Des_PC1_Permutation(
    const uint8_t * pKeyIn,
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pKeyOut
    )
{
 80042dc:	b480      	push	{r7}
 80042de:	b087      	sub	sp, #28
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM i;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM j;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM pKeyInTmp[PH_CRYPTOSYM_DES_KEY_SIZE];

    /* Recopy the key */
    (void)memcpy(pKeyInTmp, pKeyIn, PH_CRYPTOSYM_DES_KEY_SIZE);
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	f107 030c 	add.w	r3, r7, #12
 80042ec:	6810      	ldr	r0, [r2, #0]
 80042ee:	6851      	ldr	r1, [r2, #4]
 80042f0:	c303      	stmia	r3!, {r0, r1}
    /* round 2: 3, 11, 19, 27, 35, 43, 51, 59 */
    /* round 3: 4, 12, 20, 28, 36, 44, 52, 60 */
    /* round 4: 5, 13, 21, 29, 37, 45, 53, 61 */
    /* round 5: 6, 14, 22, 30, 38, 46, 54, 62 */
    /* round 6: 7, 15, 23, 31, 39, 47, 55, 63 */
    for (i=0;i<7U;i++)
 80042f2:	2300      	movs	r3, #0
 80042f4:	75fb      	strb	r3, [r7, #23]
 80042f6:	e050      	b.n	800439a <phCryptoSym_Sw_Des_PC1_Permutation+0xbe>
    {
        pKeyOut[i] = 0x00;
 80042f8:	7dfb      	ldrb	r3, [r7, #23]
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	4413      	add	r3, r2
 80042fe:	2200      	movs	r2, #0
 8004300:	701a      	strb	r2, [r3, #0]
        for (j = 0; j<7U; j++)
 8004302:	2300      	movs	r3, #0
 8004304:	75bb      	strb	r3, [r7, #22]
 8004306:	e02d      	b.n	8004364 <phCryptoSym_Sw_Des_PC1_Permutation+0x88>
        {
            pKeyOut[i] |= (uint8_t)(pKeyInTmp[j] & 0x80U);
 8004308:	7dfb      	ldrb	r3, [r7, #23]
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	4413      	add	r3, r2
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	b25a      	sxtb	r2, r3
 8004312:	7dbb      	ldrb	r3, [r7, #22]
 8004314:	3318      	adds	r3, #24
 8004316:	443b      	add	r3, r7
 8004318:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800431c:	b25b      	sxtb	r3, r3
 800431e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004322:	b25b      	sxtb	r3, r3
 8004324:	4313      	orrs	r3, r2
 8004326:	b259      	sxtb	r1, r3
 8004328:	7dfb      	ldrb	r3, [r7, #23]
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	4413      	add	r3, r2
 800432e:	b2ca      	uxtb	r2, r1
 8004330:	701a      	strb	r2, [r3, #0]
            pKeyOut[i] >>= 1U;
 8004332:	7dfb      	ldrb	r3, [r7, #23]
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	4413      	add	r3, r2
 8004338:	781a      	ldrb	r2, [r3, #0]
 800433a:	7dfb      	ldrb	r3, [r7, #23]
 800433c:	6839      	ldr	r1, [r7, #0]
 800433e:	440b      	add	r3, r1
 8004340:	0852      	lsrs	r2, r2, #1
 8004342:	b2d2      	uxtb	r2, r2
 8004344:	701a      	strb	r2, [r3, #0]
            pKeyInTmp[j] <<= 1U;
 8004346:	7dbb      	ldrb	r3, [r7, #22]
 8004348:	3318      	adds	r3, #24
 800434a:	443b      	add	r3, r7
 800434c:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8004350:	7dbb      	ldrb	r3, [r7, #22]
 8004352:	0052      	lsls	r2, r2, #1
 8004354:	b2d2      	uxtb	r2, r2
 8004356:	3318      	adds	r3, #24
 8004358:	443b      	add	r3, r7
 800435a:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for (j = 0; j<7U; j++)
 800435e:	7dbb      	ldrb	r3, [r7, #22]
 8004360:	3301      	adds	r3, #1
 8004362:	75bb      	strb	r3, [r7, #22]
 8004364:	7dbb      	ldrb	r3, [r7, #22]
 8004366:	2b06      	cmp	r3, #6
 8004368:	d9ce      	bls.n	8004308 <phCryptoSym_Sw_Des_PC1_Permutation+0x2c>
        }
        pKeyOut[i] |= (uint8_t)(pKeyInTmp[7] & 0x80U);
 800436a:	7dfb      	ldrb	r3, [r7, #23]
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	4413      	add	r3, r2
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	b25a      	sxtb	r2, r3
 8004374:	7cfb      	ldrb	r3, [r7, #19]
 8004376:	b25b      	sxtb	r3, r3
 8004378:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800437c:	b25b      	sxtb	r3, r3
 800437e:	4313      	orrs	r3, r2
 8004380:	b259      	sxtb	r1, r3
 8004382:	7dfb      	ldrb	r3, [r7, #23]
 8004384:	683a      	ldr	r2, [r7, #0]
 8004386:	4413      	add	r3, r2
 8004388:	b2ca      	uxtb	r2, r1
 800438a:	701a      	strb	r2, [r3, #0]
        pKeyInTmp[7] <<= 1U;
 800438c:	7cfb      	ldrb	r3, [r7, #19]
 800438e:	005b      	lsls	r3, r3, #1
 8004390:	b2db      	uxtb	r3, r3
 8004392:	74fb      	strb	r3, [r7, #19]
    for (i=0;i<7U;i++)
 8004394:	7dfb      	ldrb	r3, [r7, #23]
 8004396:	3301      	adds	r3, #1
 8004398:	75fb      	strb	r3, [r7, #23]
 800439a:	7dfb      	ldrb	r3, [r7, #23]
 800439c:	2b06      	cmp	r3, #6
 800439e:	d9ab      	bls.n	80042f8 <phCryptoSym_Sw_Des_PC1_Permutation+0x1c>
    }

    /* Now the output bytes 3 and 7 are calculated by taking the correct subsets of the pKeyOut[3] byte */
    pKeyOut[7] = pKeyOut[3] <<4U;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	3303      	adds	r3, #3
 80043a4:	781a      	ldrb	r2, [r3, #0]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	3307      	adds	r3, #7
 80043aa:	0112      	lsls	r2, r2, #4
 80043ac:	b2d2      	uxtb	r2, r2
 80043ae:	701a      	strb	r2, [r3, #0]
    pKeyOut[3] &= 0xF0U;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	3303      	adds	r3, #3
 80043b4:	781a      	ldrb	r2, [r3, #0]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	3303      	adds	r3, #3
 80043ba:	f022 020f 	bic.w	r2, r2, #15
 80043be:	b2d2      	uxtb	r2, r2
 80043c0:	701a      	strb	r2, [r3, #0]

    /* Also byte 4 and 6 need to change the position. */
    i = pKeyOut[6];
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	799b      	ldrb	r3, [r3, #6]
 80043c6:	75fb      	strb	r3, [r7, #23]
    pKeyOut[6] = pKeyOut[4];
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	3306      	adds	r3, #6
 80043cc:	683a      	ldr	r2, [r7, #0]
 80043ce:	7912      	ldrb	r2, [r2, #4]
 80043d0:	701a      	strb	r2, [r3, #0]
    pKeyOut[4] = i;
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	3304      	adds	r3, #4
 80043d6:	7dfa      	ldrb	r2, [r7, #23]
 80043d8:	701a      	strb	r2, [r3, #0]

}
 80043da:	bf00      	nop
 80043dc:	371c      	adds	r7, #28
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <phCryptoSym_Sw_Des_PC2_Permutation>:

void phCryptoSym_Sw_Des_PC2_Permutation(
                                        uint8_t PH_CRYTOSYM_SW_FAST_RAM * pKeyIn,
                                        uint8_t * pKeyOut
                                        )
{
 80043e6:	b480      	push	{r7}
 80043e8:	b083      	sub	sp, #12
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
 80043ee:	6039      	str	r1, [r7, #0]
    /* As the input bit sequence can not be mapped easily to the output bits,
    the implementation simply extracts the required bit out of the input and shifts it
    into the correct position of the output. */

    pKeyOut[0] = (uint8_t)((pKeyIn[1] & 0x04U) << 3U); /* Input bit 14 */
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	3301      	adds	r3, #1
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	f003 0320 	and.w	r3, r3, #32
 80043fe:	b2da      	uxtb	r2, r3
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	701a      	strb	r2, [r3, #0]
    pKeyOut[0] |= (uint8_t)((pKeyIn[2] & 0x80U) >> 3U); /* Input bit 17 */
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	781a      	ldrb	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	3302      	adds	r3, #2
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	08db      	lsrs	r3, r3, #3
 8004410:	b2db      	uxtb	r3, r3
 8004412:	f003 0310 	and.w	r3, r3, #16
 8004416:	b2db      	uxtb	r3, r3
 8004418:	4313      	orrs	r3, r2
 800441a:	b2da      	uxtb	r2, r3
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	701a      	strb	r2, [r3, #0]
    pKeyOut[0] |= (uint8_t)((pKeyIn[1] & 0x20U) >> 2U); /* Input bit 11 */
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	781a      	ldrb	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3301      	adds	r3, #1
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	089b      	lsrs	r3, r3, #2
 800442c:	b2db      	uxtb	r3, r3
 800442e:	f003 0308 	and.w	r3, r3, #8
 8004432:	b2db      	uxtb	r3, r3
 8004434:	4313      	orrs	r3, r2
 8004436:	b2da      	uxtb	r2, r3
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	701a      	strb	r2, [r3, #0]
    pKeyOut[0] |= (uint8_t)((pKeyIn[2] & 0x01U) << 2U); /* Input bit 24 */
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	b25a      	sxtb	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	3302      	adds	r3, #2
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	b25b      	sxtb	r3, r3
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	b25b      	sxtb	r3, r3
 800444e:	f003 0304 	and.w	r3, r3, #4
 8004452:	b25b      	sxtb	r3, r3
 8004454:	4313      	orrs	r3, r2
 8004456:	b25b      	sxtb	r3, r3
 8004458:	b2da      	uxtb	r2, r3
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	701a      	strb	r2, [r3, #0]
    pKeyOut[0] |= (uint8_t)((pKeyIn[0] & 0x80U) >> 6U); /* Input bit 1 */
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	781a      	ldrb	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	099b      	lsrs	r3, r3, #6
 8004468:	b2db      	uxtb	r3, r3
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	b2db      	uxtb	r3, r3
 8004470:	4313      	orrs	r3, r2
 8004472:	b2da      	uxtb	r2, r3
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	701a      	strb	r2, [r3, #0]
    pKeyOut[0] |= (uint8_t)((pKeyIn[0] & 0x08U) >> 3U); /* Input bit 5 */
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	781a      	ldrb	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	08db      	lsrs	r3, r3, #3
 8004482:	b2db      	uxtb	r3, r3
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	b2db      	uxtb	r3, r3
 800448a:	4313      	orrs	r3, r2
 800448c:	b2da      	uxtb	r2, r3
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	701a      	strb	r2, [r3, #0]

    pKeyOut[1] = (uint8_t)((pKeyIn[0] & 0x20U)); /* Input bit 3 */
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	781a      	ldrb	r2, [r3, #0]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	3301      	adds	r3, #1
 800449a:	f002 0220 	and.w	r2, r2, #32
 800449e:	b2d2      	uxtb	r2, r2
 80044a0:	701a      	strb	r2, [r3, #0]
    pKeyOut[1] |= (uint8_t)((pKeyIn[3] & 0x10U)); /* Input bit 28 */
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	3301      	adds	r3, #1
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	b25a      	sxtb	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	3303      	adds	r3, #3
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	b25b      	sxtb	r3, r3
 80044b2:	f003 0310 	and.w	r3, r3, #16
 80044b6:	b25b      	sxtb	r3, r3
 80044b8:	4313      	orrs	r3, r2
 80044ba:	b25a      	sxtb	r2, r3
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	3301      	adds	r3, #1
 80044c0:	b2d2      	uxtb	r2, r2
 80044c2:	701a      	strb	r2, [r3, #0]
    pKeyOut[1] |= (uint8_t)((pKeyIn[1] & 0x02U) << 2U); /* Input bit 15 */
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	3301      	adds	r3, #1
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	b25a      	sxtb	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	3301      	adds	r3, #1
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	b25b      	sxtb	r3, r3
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	b25b      	sxtb	r3, r3
 80044d8:	f003 0308 	and.w	r3, r3, #8
 80044dc:	b25b      	sxtb	r3, r3
 80044de:	4313      	orrs	r3, r2
 80044e0:	b25a      	sxtb	r2, r3
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	3301      	adds	r3, #1
 80044e6:	b2d2      	uxtb	r2, r2
 80044e8:	701a      	strb	r2, [r3, #0]
    pKeyOut[1] |= (uint8_t)((pKeyIn[0] & 0x04U)); /* Input bit 6 */
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	3301      	adds	r3, #1
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	b25a      	sxtb	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	b25b      	sxtb	r3, r3
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	b25b      	sxtb	r3, r3
 80044fe:	4313      	orrs	r3, r2
 8004500:	b25a      	sxtb	r2, r3
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	3301      	adds	r3, #1
 8004506:	b2d2      	uxtb	r2, r2
 8004508:	701a      	strb	r2, [r3, #0]
    pKeyOut[1] |= (uint8_t)((pKeyIn[2] & 0x08U) >> 2U); /* Input bit 21 */
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	3301      	adds	r3, #1
 800450e:	7819      	ldrb	r1, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	3302      	adds	r3, #2
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	089b      	lsrs	r3, r3, #2
 8004518:	b2db      	uxtb	r3, r3
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	b2da      	uxtb	r2, r3
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	3301      	adds	r3, #1
 8004524:	430a      	orrs	r2, r1
 8004526:	b2d2      	uxtb	r2, r2
 8004528:	701a      	strb	r2, [r3, #0]
    pKeyOut[1] |= (uint8_t)((pKeyIn[1] & 0x40U) >> 6U); /* Input bit 10 */
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	3301      	adds	r3, #1
 800452e:	7819      	ldrb	r1, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	3301      	adds	r3, #1
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	099b      	lsrs	r3, r3, #6
 8004538:	b2db      	uxtb	r3, r3
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	b2da      	uxtb	r2, r3
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	3301      	adds	r3, #1
 8004544:	430a      	orrs	r2, r1
 8004546:	b2d2      	uxtb	r2, r2
 8004548:	701a      	strb	r2, [r3, #0]

    pKeyOut[2] = (uint8_t)((pKeyIn[2] & 0x02U) << 4U); /* Input bit 23 */
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	3302      	adds	r3, #2
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	011b      	lsls	r3, r3, #4
 8004552:	b2da      	uxtb	r2, r3
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	3302      	adds	r3, #2
 8004558:	f002 0220 	and.w	r2, r2, #32
 800455c:	b2d2      	uxtb	r2, r2
 800455e:	701a      	strb	r2, [r3, #0]
    pKeyOut[2] |= (uint8_t)((pKeyIn[2] & 0x20U) >> 1U); /* Input bit 19 */
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	3302      	adds	r3, #2
 8004564:	7819      	ldrb	r1, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	3302      	adds	r3, #2
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	085b      	lsrs	r3, r3, #1
 800456e:	b2db      	uxtb	r3, r3
 8004570:	f003 0310 	and.w	r3, r3, #16
 8004574:	b2da      	uxtb	r2, r3
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	3302      	adds	r3, #2
 800457a:	430a      	orrs	r2, r1
 800457c:	b2d2      	uxtb	r2, r2
 800457e:	701a      	strb	r2, [r3, #0]
    pKeyOut[2] |= (uint8_t)((pKeyIn[1] & 0x10U) >> 1U); /* Input bit 12 */
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	3302      	adds	r3, #2
 8004584:	7819      	ldrb	r1, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	3301      	adds	r3, #1
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	085b      	lsrs	r3, r3, #1
 800458e:	b2db      	uxtb	r3, r3
 8004590:	f003 0308 	and.w	r3, r3, #8
 8004594:	b2da      	uxtb	r2, r3
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	3302      	adds	r3, #2
 800459a:	430a      	orrs	r2, r1
 800459c:	b2d2      	uxtb	r2, r2
 800459e:	701a      	strb	r2, [r3, #0]
    pKeyOut[2] |= (uint8_t)((pKeyIn[0] & 0x10U) >> 2U); /* Input bit 4 */
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	3302      	adds	r3, #2
 80045a4:	7819      	ldrb	r1, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	089b      	lsrs	r3, r3, #2
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	f003 0304 	and.w	r3, r3, #4
 80045b2:	b2da      	uxtb	r2, r3
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	3302      	adds	r3, #2
 80045b8:	430a      	orrs	r2, r1
 80045ba:	b2d2      	uxtb	r2, r2
 80045bc:	701a      	strb	r2, [r3, #0]
    pKeyOut[2] |= (uint8_t)((pKeyIn[3] & 0x40U) >> 5U); /* Input bit 26 */
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	3302      	adds	r3, #2
 80045c2:	7819      	ldrb	r1, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	3303      	adds	r3, #3
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	095b      	lsrs	r3, r3, #5
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	b2da      	uxtb	r2, r3
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	3302      	adds	r3, #2
 80045d8:	430a      	orrs	r2, r1
 80045da:	b2d2      	uxtb	r2, r2
 80045dc:	701a      	strb	r2, [r3, #0]
    pKeyOut[2] |= (uint8_t)((pKeyIn[0] & 0x01U)); /* Input bit 8 */
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	3302      	adds	r3, #2
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	b25a      	sxtb	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	b25b      	sxtb	r3, r3
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	b25b      	sxtb	r3, r3
 80045f2:	4313      	orrs	r3, r2
 80045f4:	b25a      	sxtb	r2, r3
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	3302      	adds	r3, #2
 80045fa:	b2d2      	uxtb	r2, r2
 80045fc:	701a      	strb	r2, [r3, #0]

    pKeyOut[3] = (uint8_t)((pKeyIn[1] & 0x01U) << 5U); /* Input bit 16 */
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	3301      	adds	r3, #1
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	015b      	lsls	r3, r3, #5
 8004606:	b2da      	uxtb	r2, r3
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	3303      	adds	r3, #3
 800460c:	f002 0220 	and.w	r2, r2, #32
 8004610:	b2d2      	uxtb	r2, r2
 8004612:	701a      	strb	r2, [r3, #0]
    pKeyOut[3] |= (uint8_t)((pKeyIn[0] & 0x02U) << 3U); /* Input bit 7 */
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	3303      	adds	r3, #3
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	b25a      	sxtb	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	b25b      	sxtb	r3, r3
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	b25b      	sxtb	r3, r3
 8004626:	f003 0310 	and.w	r3, r3, #16
 800462a:	b25b      	sxtb	r3, r3
 800462c:	4313      	orrs	r3, r2
 800462e:	b25a      	sxtb	r2, r3
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	3303      	adds	r3, #3
 8004634:	b2d2      	uxtb	r2, r2
 8004636:	701a      	strb	r2, [r3, #0]
    pKeyOut[3] |= (uint8_t)((pKeyIn[3] & 0x20U) >> 2U); /* Input bit 27 */
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	3303      	adds	r3, #3
 800463c:	7819      	ldrb	r1, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	3303      	adds	r3, #3
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	089b      	lsrs	r3, r3, #2
 8004646:	b2db      	uxtb	r3, r3
 8004648:	f003 0308 	and.w	r3, r3, #8
 800464c:	b2da      	uxtb	r2, r3
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	3303      	adds	r3, #3
 8004652:	430a      	orrs	r2, r1
 8004654:	b2d2      	uxtb	r2, r2
 8004656:	701a      	strb	r2, [r3, #0]
    pKeyOut[3] |= (uint8_t)((pKeyIn[2] & 0x10U) >> 2U); /* Input bit 20 */
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	3303      	adds	r3, #3
 800465c:	7819      	ldrb	r1, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	3302      	adds	r3, #2
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	089b      	lsrs	r3, r3, #2
 8004666:	b2db      	uxtb	r3, r3
 8004668:	f003 0304 	and.w	r3, r3, #4
 800466c:	b2da      	uxtb	r2, r3
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	3303      	adds	r3, #3
 8004672:	430a      	orrs	r2, r1
 8004674:	b2d2      	uxtb	r2, r2
 8004676:	701a      	strb	r2, [r3, #0]
    pKeyOut[3] |= (uint8_t)((pKeyIn[1] & 0x08U) >> 2U); /* Input bit 13 */
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	3303      	adds	r3, #3
 800467c:	7819      	ldrb	r1, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	3301      	adds	r3, #1
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	089b      	lsrs	r3, r3, #2
 8004686:	b2db      	uxtb	r3, r3
 8004688:	f003 0302 	and.w	r3, r3, #2
 800468c:	b2da      	uxtb	r2, r3
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	3303      	adds	r3, #3
 8004692:	430a      	orrs	r2, r1
 8004694:	b2d2      	uxtb	r2, r2
 8004696:	701a      	strb	r2, [r3, #0]
    pKeyOut[3] |= (uint8_t)((pKeyIn[0] & 0x40U) >> 6U); /* Input bit 2 */
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	3303      	adds	r3, #3
 800469c:	7819      	ldrb	r1, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	099b      	lsrs	r3, r3, #6
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	b2da      	uxtb	r2, r3
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	3303      	adds	r3, #3
 80046b0:	430a      	orrs	r2, r1
 80046b2:	b2d2      	uxtb	r2, r2
 80046b4:	701a      	strb	r2, [r3, #0]

    pKeyOut[4] = (uint8_t)((pKeyIn[5] & 0x08U) << 2U); /* Input bit 41 */
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	3305      	adds	r3, #5
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	3304      	adds	r3, #4
 80046c4:	f002 0220 	and.w	r2, r2, #32
 80046c8:	b2d2      	uxtb	r2, r2
 80046ca:	701a      	strb	r2, [r3, #0]
    pKeyOut[4] |= (uint8_t)((pKeyIn[6] & 0x01U) << 4U); /* Input bit 52 */
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	3304      	adds	r3, #4
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	b25a      	sxtb	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3306      	adds	r3, #6
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	b25b      	sxtb	r3, r3
 80046dc:	011b      	lsls	r3, r3, #4
 80046de:	b25b      	sxtb	r3, r3
 80046e0:	f003 0310 	and.w	r3, r3, #16
 80046e4:	b25b      	sxtb	r3, r3
 80046e6:	4313      	orrs	r3, r2
 80046e8:	b25a      	sxtb	r2, r3
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	3304      	adds	r3, #4
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	701a      	strb	r2, [r3, #0]
    pKeyOut[4] |= (uint8_t)((pKeyIn[4] & 0x20U) >> 2U); /* Input bit 31 */
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	3304      	adds	r3, #4
 80046f6:	7819      	ldrb	r1, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	3304      	adds	r3, #4
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	089b      	lsrs	r3, r3, #2
 8004700:	b2db      	uxtb	r3, r3
 8004702:	f003 0308 	and.w	r3, r3, #8
 8004706:	b2da      	uxtb	r2, r3
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	3304      	adds	r3, #4
 800470c:	430a      	orrs	r2, r1
 800470e:	b2d2      	uxtb	r2, r2
 8004710:	701a      	strb	r2, [r3, #0]
    pKeyOut[4] |= (uint8_t)((pKeyIn[5] & 0x80U) >> 5U); /* Input bit 37 */
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	3304      	adds	r3, #4
 8004716:	7819      	ldrb	r1, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3305      	adds	r3, #5
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	095b      	lsrs	r3, r3, #5
 8004720:	b2db      	uxtb	r3, r3
 8004722:	f003 0304 	and.w	r3, r3, #4
 8004726:	b2da      	uxtb	r2, r3
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	3304      	adds	r3, #4
 800472c:	430a      	orrs	r2, r1
 800472e:	b2d2      	uxtb	r2, r2
 8004730:	701a      	strb	r2, [r3, #0]
    pKeyOut[4] |= (uint8_t)((pKeyIn[6] & 0x20U) >> 4U); /* Input bit 47 */
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	3304      	adds	r3, #4
 8004736:	7819      	ldrb	r1, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	3306      	adds	r3, #6
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	091b      	lsrs	r3, r3, #4
 8004740:	b2db      	uxtb	r3, r3
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	b2da      	uxtb	r2, r3
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	3304      	adds	r3, #4
 800474c:	430a      	orrs	r2, r1
 800474e:	b2d2      	uxtb	r2, r2
 8004750:	701a      	strb	r2, [r3, #0]
    pKeyOut[4] |= (uint8_t)((pKeyIn[7] & 0x20U) >> 5U); /* Input bit 55 */
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	3304      	adds	r3, #4
 8004756:	7819      	ldrb	r1, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	3307      	adds	r3, #7
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	095b      	lsrs	r3, r3, #5
 8004760:	b2db      	uxtb	r3, r3
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	b2da      	uxtb	r2, r3
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	3304      	adds	r3, #4
 800476c:	430a      	orrs	r2, r1
 800476e:	b2d2      	uxtb	r2, r2
 8004770:	701a      	strb	r2, [r3, #0]

    pKeyOut[5] = (uint8_t)((pKeyIn[4] & 0x40U) >> 1U); /* Input bit 30 */
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	3304      	adds	r3, #4
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	085b      	lsrs	r3, r3, #1
 800477a:	b2da      	uxtb	r2, r3
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	3305      	adds	r3, #5
 8004780:	f002 0220 	and.w	r2, r2, #32
 8004784:	b2d2      	uxtb	r2, r2
 8004786:	701a      	strb	r2, [r3, #0]
    pKeyOut[5] |= (uint8_t)((pKeyIn[5] & 0x10U)); /* Input bit 40 */
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	3305      	adds	r3, #5
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	b25a      	sxtb	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	3305      	adds	r3, #5
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	b25b      	sxtb	r3, r3
 8004798:	f003 0310 	and.w	r3, r3, #16
 800479c:	b25b      	sxtb	r3, r3
 800479e:	4313      	orrs	r3, r2
 80047a0:	b25a      	sxtb	r2, r3
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	3305      	adds	r3, #5
 80047a6:	b2d2      	uxtb	r2, r2
 80047a8:	701a      	strb	r2, [r3, #0]
    pKeyOut[5] |= (uint8_t)((pKeyIn[6] & 0x02U) << 2U); /* Input bit 51 */
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	3305      	adds	r3, #5
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	b25a      	sxtb	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	3306      	adds	r3, #6
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	b25b      	sxtb	r3, r3
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	b25b      	sxtb	r3, r3
 80047be:	f003 0308 	and.w	r3, r3, #8
 80047c2:	b25b      	sxtb	r3, r3
 80047c4:	4313      	orrs	r3, r2
 80047c6:	b25a      	sxtb	r2, r3
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	3305      	adds	r3, #5
 80047cc:	b2d2      	uxtb	r2, r2
 80047ce:	701a      	strb	r2, [r3, #0]
    pKeyOut[5] |= (uint8_t)((pKeyIn[6] & 0x80U) >> 5U); /* Input bit 45 */
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	3305      	adds	r3, #5
 80047d4:	7819      	ldrb	r1, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	3306      	adds	r3, #6
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	095b      	lsrs	r3, r3, #5
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	f003 0304 	and.w	r3, r3, #4
 80047e4:	b2da      	uxtb	r2, r3
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	3305      	adds	r3, #5
 80047ea:	430a      	orrs	r2, r1
 80047ec:	b2d2      	uxtb	r2, r2
 80047ee:	701a      	strb	r2, [r3, #0]
    pKeyOut[5] |= (uint8_t)((pKeyIn[4] & 0x08U) >> 2U); /* Input bit 33 */
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	3305      	adds	r3, #5
 80047f4:	7819      	ldrb	r1, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	3304      	adds	r3, #4
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	089b      	lsrs	r3, r3, #2
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	b2da      	uxtb	r2, r3
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	3305      	adds	r3, #5
 800480a:	430a      	orrs	r2, r1
 800480c:	b2d2      	uxtb	r2, r2
 800480e:	701a      	strb	r2, [r3, #0]
    pKeyOut[5] |= (uint8_t)((pKeyIn[6] & 0x10U) >> 4U); /* Input bit 48 */
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	3305      	adds	r3, #5
 8004814:	7819      	ldrb	r1, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	3306      	adds	r3, #6
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	091b      	lsrs	r3, r3, #4
 800481e:	b2db      	uxtb	r3, r3
 8004820:	f003 0301 	and.w	r3, r3, #1
 8004824:	b2da      	uxtb	r2, r3
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	3305      	adds	r3, #5
 800482a:	430a      	orrs	r2, r1
 800482c:	b2d2      	uxtb	r2, r2
 800482e:	701a      	strb	r2, [r3, #0]

    pKeyOut[6] = (uint8_t)((pKeyIn[5] & 0x01U) << 5U); /* Input bit 44 */
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	3305      	adds	r3, #5
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	015b      	lsls	r3, r3, #5
 8004838:	b2da      	uxtb	r2, r3
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	3306      	adds	r3, #6
 800483e:	f002 0220 	and.w	r2, r2, #32
 8004842:	b2d2      	uxtb	r2, r2
 8004844:	701a      	strb	r2, [r3, #0]
    pKeyOut[6] |= (uint8_t)((pKeyIn[6] & 0x08U) << 1U); /* Input bit 49 */
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	3306      	adds	r3, #6
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	b25a      	sxtb	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	3306      	adds	r3, #6
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	b25b      	sxtb	r3, r3
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	b25b      	sxtb	r3, r3
 800485a:	f003 0310 	and.w	r3, r3, #16
 800485e:	b25b      	sxtb	r3, r3
 8004860:	4313      	orrs	r3, r2
 8004862:	b25a      	sxtb	r2, r3
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	3306      	adds	r3, #6
 8004868:	b2d2      	uxtb	r2, r2
 800486a:	701a      	strb	r2, [r3, #0]
    pKeyOut[6] |= (uint8_t)((pKeyIn[5] & 0x20U) >> 2U); /* Input bit 39 */
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	3306      	adds	r3, #6
 8004870:	7819      	ldrb	r1, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	3305      	adds	r3, #5
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	089b      	lsrs	r3, r3, #2
 800487a:	b2db      	uxtb	r3, r3
 800487c:	f003 0308 	and.w	r3, r3, #8
 8004880:	b2da      	uxtb	r2, r3
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	3306      	adds	r3, #6
 8004886:	430a      	orrs	r2, r1
 8004888:	b2d2      	uxtb	r2, r2
 800488a:	701a      	strb	r2, [r3, #0]
    pKeyOut[6] |= (uint8_t)((pKeyIn[7] & 0x10U) >> 2U); /* Input bit 56 */
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	3306      	adds	r3, #6
 8004890:	7819      	ldrb	r1, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	3307      	adds	r3, #7
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	089b      	lsrs	r3, r3, #2
 800489a:	b2db      	uxtb	r3, r3
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	b2da      	uxtb	r2, r3
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	3306      	adds	r3, #6
 80048a6:	430a      	orrs	r2, r1
 80048a8:	b2d2      	uxtb	r2, r2
 80048aa:	701a      	strb	r2, [r3, #0]
    pKeyOut[6] |= (uint8_t)((pKeyIn[4] & 0x04U) >> 1U); /* Input bit 34 */
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	3306      	adds	r3, #6
 80048b0:	7819      	ldrb	r1, [r3, #0]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	3304      	adds	r3, #4
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	085b      	lsrs	r3, r3, #1
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	b2da      	uxtb	r2, r3
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	3306      	adds	r3, #6
 80048c6:	430a      	orrs	r2, r1
 80048c8:	b2d2      	uxtb	r2, r2
 80048ca:	701a      	strb	r2, [r3, #0]
    pKeyOut[6] |= (uint8_t)((pKeyIn[7] & 0x80U) >> 7U); /* Input bit 53 */
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	3306      	adds	r3, #6
 80048d0:	7819      	ldrb	r1, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	3307      	adds	r3, #7
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	09db      	lsrs	r3, r3, #7
 80048da:	b2da      	uxtb	r2, r3
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	3306      	adds	r3, #6
 80048e0:	430a      	orrs	r2, r1
 80048e2:	b2d2      	uxtb	r2, r2
 80048e4:	701a      	strb	r2, [r3, #0]

    pKeyOut[7] = (uint8_t)((pKeyIn[6] & 0x40U) >> 1U); /* Input bit 46 */
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	3306      	adds	r3, #6
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	085b      	lsrs	r3, r3, #1
 80048ee:	b2da      	uxtb	r2, r3
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	3307      	adds	r3, #7
 80048f4:	f002 0220 	and.w	r2, r2, #32
 80048f8:	b2d2      	uxtb	r2, r2
 80048fa:	701a      	strb	r2, [r3, #0]
    pKeyOut[7] |= (uint8_t)((pKeyIn[5] & 0x04U) << 2U); /* Input bit 42 */
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	3307      	adds	r3, #7
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	b25a      	sxtb	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	3305      	adds	r3, #5
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	b25b      	sxtb	r3, r3
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	b25b      	sxtb	r3, r3
 8004910:	f003 0310 	and.w	r3, r3, #16
 8004914:	b25b      	sxtb	r3, r3
 8004916:	4313      	orrs	r3, r2
 8004918:	b25a      	sxtb	r2, r3
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	3307      	adds	r3, #7
 800491e:	b2d2      	uxtb	r2, r2
 8004920:	701a      	strb	r2, [r3, #0]
    pKeyOut[7] |= (uint8_t)((pKeyIn[6] & 0x04U) << 1U); /* Input bit 50 */
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	3307      	adds	r3, #7
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	b25a      	sxtb	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	3306      	adds	r3, #6
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	b25b      	sxtb	r3, r3
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	b25b      	sxtb	r3, r3
 8004936:	f003 0308 	and.w	r3, r3, #8
 800493a:	b25b      	sxtb	r3, r3
 800493c:	4313      	orrs	r3, r2
 800493e:	b25a      	sxtb	r2, r3
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	3307      	adds	r3, #7
 8004944:	b2d2      	uxtb	r2, r2
 8004946:	701a      	strb	r2, [r3, #0]
    pKeyOut[7] |= (uint8_t)((pKeyIn[4] & 0x01U) << 2U); /* Input bit 36 */
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	3307      	adds	r3, #7
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	b25a      	sxtb	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	3304      	adds	r3, #4
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	b25b      	sxtb	r3, r3
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	b25b      	sxtb	r3, r3
 800495c:	f003 0304 	and.w	r3, r3, #4
 8004960:	b25b      	sxtb	r3, r3
 8004962:	4313      	orrs	r3, r2
 8004964:	b25a      	sxtb	r2, r3
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	3307      	adds	r3, #7
 800496a:	b2d2      	uxtb	r2, r2
 800496c:	701a      	strb	r2, [r3, #0]
    pKeyOut[7] |= (uint8_t)((pKeyIn[4] & 0x80U)>> 6U); /* Input bit 29 */
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	3307      	adds	r3, #7
 8004972:	7819      	ldrb	r1, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	3304      	adds	r3, #4
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	099b      	lsrs	r3, r3, #6
 800497c:	b2db      	uxtb	r3, r3
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	b2da      	uxtb	r2, r3
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	3307      	adds	r3, #7
 8004988:	430a      	orrs	r2, r1
 800498a:	b2d2      	uxtb	r2, r2
 800498c:	701a      	strb	r2, [r3, #0]
    pKeyOut[7] |= (uint8_t)((pKeyIn[4] & 0x10U) >> 4U); /* Input bit 32 */
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	3307      	adds	r3, #7
 8004992:	7819      	ldrb	r1, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	3304      	adds	r3, #4
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	091b      	lsrs	r3, r3, #4
 800499c:	b2db      	uxtb	r3, r3
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	b2da      	uxtb	r2, r3
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	3307      	adds	r3, #7
 80049a8:	430a      	orrs	r2, r1
 80049aa:	b2d2      	uxtb	r2, r2
 80049ac:	701a      	strb	r2, [r3, #0]
}
 80049ae:	bf00      	nop
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <phCryptoSym_Sw_Des_RotateRight28>:
#ifdef  PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
void  phCryptoSym_Sw_Des_RotateRight28(
                                       uint8_t PH_CRYTOSYM_SW_FAST_RAM * pArray,
                                       uint8_t bNumPos
                                       )
{
 80049ba:	b480      	push	{r7}
 80049bc:	b085      	sub	sp, #20
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
 80049c2:	460b      	mov	r3, r1
 80049c4:	70fb      	strb	r3, [r7, #3]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM i;
    uint8_t bOverflow = 0;
 80049c6:	2300      	movs	r3, #0
 80049c8:	73bb      	strb	r3, [r7, #14]
    uint8_t bOverflowNew = 0;
 80049ca:	2300      	movs	r3, #0
 80049cc:	737b      	strb	r3, [r7, #13]

    /* Iterate over all positions in outer loop */
    while(0U != bNumPos)
 80049ce:	e041      	b.n	8004a54 <phCryptoSym_Sw_Des_RotateRight28+0x9a>
    {
        /* Start at lowest index because we need to rotate to right */
        for (i=0;i<4U;i++)
 80049d0:	2300      	movs	r3, #0
 80049d2:	73fb      	strb	r3, [r7, #15]
 80049d4:	e01f      	b.n	8004a16 <phCryptoSym_Sw_Des_RotateRight28+0x5c>
        {
            /* Calculate, if there is an overflow generated by the currently shifted byte */
            bOverflowNew = (uint8_t) (((pArray[i] & 0x01U) != 0U) ? 0x80U : 0x00U);
 80049d6:	7bfb      	ldrb	r3, [r7, #15]
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	4413      	add	r3, r2
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	01db      	lsls	r3, r3, #7
 80049e0:	737b      	strb	r3, [r7, #13]
            /* Shift the byte */
            pArray[i] = pArray[i] >> 1U;
 80049e2:	7bfb      	ldrb	r3, [r7, #15]
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	4413      	add	r3, r2
 80049e8:	781a      	ldrb	r2, [r3, #0]
 80049ea:	7bfb      	ldrb	r3, [r7, #15]
 80049ec:	6879      	ldr	r1, [r7, #4]
 80049ee:	440b      	add	r3, r1
 80049f0:	0852      	lsrs	r2, r2, #1
 80049f2:	b2d2      	uxtb	r2, r2
 80049f4:	701a      	strb	r2, [r3, #0]
            /* Mask the overflow of the previous byte into the current byte */
            pArray[i] |= bOverflow;
 80049f6:	7bfb      	ldrb	r3, [r7, #15]
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	4413      	add	r3, r2
 80049fc:	7819      	ldrb	r1, [r3, #0]
 80049fe:	7bfb      	ldrb	r3, [r7, #15]
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	4413      	add	r3, r2
 8004a04:	7bba      	ldrb	r2, [r7, #14]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	b2d2      	uxtb	r2, r2
 8004a0a:	701a      	strb	r2, [r3, #0]
            /* Remember current overflow */
            bOverflow = bOverflowNew;
 8004a0c:	7b7b      	ldrb	r3, [r7, #13]
 8004a0e:	73bb      	strb	r3, [r7, #14]
        for (i=0;i<4U;i++)
 8004a10:	7bfb      	ldrb	r3, [r7, #15]
 8004a12:	3301      	adds	r3, #1
 8004a14:	73fb      	strb	r3, [r7, #15]
 8004a16:	7bfb      	ldrb	r3, [r7, #15]
 8004a18:	2b03      	cmp	r3, #3
 8004a1a:	d9dc      	bls.n	80049d6 <phCryptoSym_Sw_Des_RotateRight28+0x1c>
        }

        /* In case of overflow of the highest byte, the bit needs to be fed in back at position 0 of the array */
        if (0U != (pArray[3] & 0x08U))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	3303      	adds	r3, #3
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	f003 0308 	and.w	r3, r3, #8
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00f      	beq.n	8004a4a <phCryptoSym_Sw_Des_RotateRight28+0x90>
        {
            pArray[0] |= 0x80U;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004a32:	b2da      	uxtb	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	701a      	strb	r2, [r3, #0]
            pArray[3] &= 0xF0U;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	3303      	adds	r3, #3
 8004a3c:	781a      	ldrb	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	3303      	adds	r3, #3
 8004a42:	f022 020f 	bic.w	r2, r2, #15
 8004a46:	b2d2      	uxtb	r2, r2
 8004a48:	701a      	strb	r2, [r3, #0]
        }
        bOverflow = 0;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	73bb      	strb	r3, [r7, #14]
        bNumPos--;
 8004a4e:	78fb      	ldrb	r3, [r7, #3]
 8004a50:	3b01      	subs	r3, #1
 8004a52:	70fb      	strb	r3, [r7, #3]
    while(0U != bNumPos)
 8004a54:	78fb      	ldrb	r3, [r7, #3]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1ba      	bne.n	80049d0 <phCryptoSym_Sw_Des_RotateRight28+0x16>
    }
}
 8004a5a:	bf00      	nop
 8004a5c:	bf00      	nop
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <phCryptoSym_Sw_Des_RotateLeft28>:

void  phCryptoSym_Sw_Des_RotateLeft28(
                                      uint8_t PH_CRYTOSYM_SW_FAST_RAM * pArray,
                                      uint8_t bNumPos
                                      )
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	460b      	mov	r3, r1
 8004a72:	70fb      	strb	r3, [r7, #3]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM i;
    uint8_t bOverflow = 0;
 8004a74:	2300      	movs	r3, #0
 8004a76:	73bb      	strb	r3, [r7, #14]
    uint8_t bOverflowNew = 0;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	737b      	strb	r3, [r7, #13]

    /* Iterate over all positions in outer loop */
    while(0U != (bNumPos))
 8004a7c:	e035      	b.n	8004aea <phCryptoSym_Sw_Des_RotateLeft28+0x82>
    {
        /* Start at highest index because we need to rotate to left */
        i = 4;
 8004a7e:	2304      	movs	r3, #4
 8004a80:	73fb      	strb	r3, [r7, #15]
        do
        {
            i--;
 8004a82:	7bfb      	ldrb	r3, [r7, #15]
 8004a84:	3b01      	subs	r3, #1
 8004a86:	73fb      	strb	r3, [r7, #15]
            /* Calculate, if there is an overflow generated by the currently shifted byte */
            bOverflowNew = (uint8_t) (((pArray[i] & 0x80U) != 0U) ? 0x01U : 0x00U);
 8004a88:	7bfb      	ldrb	r3, [r7, #15]
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	09db      	lsrs	r3, r3, #7
 8004a92:	737b      	strb	r3, [r7, #13]
            /* Shift the byte */
            pArray[i] = pArray[i] << 1U;
 8004a94:	7bfb      	ldrb	r3, [r7, #15]
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	4413      	add	r3, r2
 8004a9a:	781a      	ldrb	r2, [r3, #0]
 8004a9c:	7bfb      	ldrb	r3, [r7, #15]
 8004a9e:	6879      	ldr	r1, [r7, #4]
 8004aa0:	440b      	add	r3, r1
 8004aa2:	0052      	lsls	r2, r2, #1
 8004aa4:	b2d2      	uxtb	r2, r2
 8004aa6:	701a      	strb	r2, [r3, #0]
            /* Mask the overflow of the previous byte into the current byte */
            pArray[i] |= bOverflow;
 8004aa8:	7bfb      	ldrb	r3, [r7, #15]
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	4413      	add	r3, r2
 8004aae:	7819      	ldrb	r1, [r3, #0]
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	7bba      	ldrb	r2, [r7, #14]
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	b2d2      	uxtb	r2, r2
 8004abc:	701a      	strb	r2, [r3, #0]
            /* Remember current overflow */
            bOverflow = bOverflowNew;
 8004abe:	7b7b      	ldrb	r3, [r7, #13]
 8004ac0:	73bb      	strb	r3, [r7, #14]
        }while(0U != i);
 8004ac2:	7bfb      	ldrb	r3, [r7, #15]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1dc      	bne.n	8004a82 <phCryptoSym_Sw_Des_RotateLeft28+0x1a>

        /* In case of overflow of the first byte, the bit needs to be fed in back at position 28 of the array */
        if (0U != (bOverflow))
 8004ac8:	7bbb      	ldrb	r3, [r7, #14]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d008      	beq.n	8004ae0 <phCryptoSym_Sw_Des_RotateLeft28+0x78>
        {
            pArray[3] |= 0x10U;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	3303      	adds	r3, #3
 8004ad2:	781a      	ldrb	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	3303      	adds	r3, #3
 8004ad8:	f042 0210 	orr.w	r2, r2, #16
 8004adc:	b2d2      	uxtb	r2, r2
 8004ade:	701a      	strb	r2, [r3, #0]
        }
        bOverflow = 0;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	73bb      	strb	r3, [r7, #14]
        bNumPos--;
 8004ae4:	78fb      	ldrb	r3, [r7, #3]
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	70fb      	strb	r3, [r7, #3]
    while(0U != (bNumPos))
 8004aea:	78fb      	ldrb	r3, [r7, #3]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1c6      	bne.n	8004a7e <phCryptoSym_Sw_Des_RotateLeft28+0x16>
    }
}
 8004af0:	bf00      	nop
 8004af2:	bf00      	nop
 8004af4:	3714      	adds	r7, #20
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr

08004afe <phCryptoSym_Sw_Des_ComputeRound>:

void phCryptoSym_Sw_Des_ComputeRound(
                                     uint8_t PH_CRYTOSYM_SW_FAST_RAM * pState,
                                     uint8_t * pRoundKey
                                     )
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b084      	sub	sp, #16
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
 8004b06:	6039      	str	r1, [r7, #0]
    uint8_t temp[4];
    (void)memcpy(temp, pState, 4);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	60fb      	str	r3, [r7, #12]
    (void)memcpy(pState, &pState[4], 4);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	3304      	adds	r3, #4
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	461a      	mov	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	601a      	str	r2, [r3, #0]
    phCryptoSym_Sw_Des_F(&pState[4], pRoundKey);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	3304      	adds	r3, #4
 8004b1e:	6839      	ldr	r1, [r7, #0]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 f83f 	bl	8004ba4 <phCryptoSym_Sw_Des_F>
    pState[4] ^= temp[0] ;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	3304      	adds	r3, #4
 8004b2a:	7819      	ldrb	r1, [r3, #0]
 8004b2c:	7b3a      	ldrb	r2, [r7, #12]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	3304      	adds	r3, #4
 8004b32:	404a      	eors	r2, r1
 8004b34:	b2d2      	uxtb	r2, r2
 8004b36:	701a      	strb	r2, [r3, #0]
    pState[5] ^= temp[1];
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	3305      	adds	r3, #5
 8004b3c:	7819      	ldrb	r1, [r3, #0]
 8004b3e:	7b7a      	ldrb	r2, [r7, #13]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	3305      	adds	r3, #5
 8004b44:	404a      	eors	r2, r1
 8004b46:	b2d2      	uxtb	r2, r2
 8004b48:	701a      	strb	r2, [r3, #0]
    pState[6] ^= temp[2];
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	3306      	adds	r3, #6
 8004b4e:	7819      	ldrb	r1, [r3, #0]
 8004b50:	7bba      	ldrb	r2, [r7, #14]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	3306      	adds	r3, #6
 8004b56:	404a      	eors	r2, r1
 8004b58:	b2d2      	uxtb	r2, r2
 8004b5a:	701a      	strb	r2, [r3, #0]
    pState[7] ^= temp[3];
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	3307      	adds	r3, #7
 8004b60:	7819      	ldrb	r1, [r3, #0]
 8004b62:	7bfa      	ldrb	r2, [r7, #15]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	3307      	adds	r3, #7
 8004b68:	404a      	eors	r2, r1
 8004b6a:	b2d2      	uxtb	r2, r2
 8004b6c:	701a      	strb	r2, [r3, #0]
}
 8004b6e:	bf00      	nop
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <phCryptoSym_Sw_Des_Swap>:

void phCryptoSym_Sw_Des_Swap(uint8_t PH_CRYTOSYM_SW_FAST_RAM * bState)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b085      	sub	sp, #20
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM tmp[4];

    (void)memcpy(tmp, bState, 4);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	60fb      	str	r3, [r7, #12]
    (void)memcpy(bState, &bState[4], 4);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	3304      	adds	r3, #4
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	601a      	str	r2, [r3, #0]
    (void)memcpy(&bState[4], tmp, 4);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	3304      	adds	r3, #4
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	601a      	str	r2, [r3, #0]
}
 8004b98:	bf00      	nop
 8004b9a:	3714      	adds	r7, #20
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <phCryptoSym_Sw_Des_F>:

void phCryptoSym_Sw_Des_F(
                          uint8_t PH_CRYTOSYM_SW_FAST_RAM * pR,
                          uint8_t * pRoundKey
                          )
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
    uint8_t   j;
    uint8_t  rc;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM bArray[PH_CRYPTOSYM_DES_BLOCK_SIZE];

    /* First expand the input array pR such that an 8 byte output array containing 6 bits in each byte is generated */
    phCryptoSym_Sw_Des_Expand(pR, bArray);
 8004bae:	f107 030c 	add.w	r3, r7, #12
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 fa4d 	bl	8005054 <phCryptoSym_Sw_Des_Expand>

    /* Iterate over all 8 bytes */
    for (j = 0; j < 4U; j++)
 8004bba:	2300      	movs	r3, #0
 8004bbc:	75fb      	strb	r3, [r7, #23]
 8004bbe:	e06d      	b.n	8004c9c <phCryptoSym_Sw_Des_F+0xf8>
    {
        /* Calculate the XORing of the key and the input to find the correct SBOX lookup index. */
        rc = bArray[(2U*j)] ^ pRoundKey[(2U*j)];
 8004bc0:	7dfb      	ldrb	r3, [r7, #23]
 8004bc2:	005b      	lsls	r3, r3, #1
 8004bc4:	3318      	adds	r3, #24
 8004bc6:	443b      	add	r3, r7
 8004bc8:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8004bcc:	7dfb      	ldrb	r3, [r7, #23]
 8004bce:	005b      	lsls	r3, r3, #1
 8004bd0:	6839      	ldr	r1, [r7, #0]
 8004bd2:	440b      	add	r3, r1
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	4053      	eors	r3, r2
 8004bd8:	75bb      	strb	r3, [r7, #22]
        rc = (uint8_t)((rc & 0x20U) | ((rc << 4U) & 0x10U) | ((rc >> 1U) & 0x0FU));
 8004bda:	7dbb      	ldrb	r3, [r7, #22]
 8004bdc:	f003 0320 	and.w	r3, r3, #32
 8004be0:	b2da      	uxtb	r2, r3
 8004be2:	7dbb      	ldrb	r3, [r7, #22]
 8004be4:	011b      	lsls	r3, r3, #4
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	f003 0310 	and.w	r3, r3, #16
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	7dbb      	ldrb	r3, [r7, #22]
 8004bf4:	085b      	lsrs	r3, r3, #1
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	f003 030f 	and.w	r3, r3, #15
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	75bb      	strb	r3, [r7, #22]
        /* Lookup the result in the SBOX and write back. */
        bArray[j] = (uint8_t)(SBOX[2U*j][rc] << 4U);
 8004c02:	7dfb      	ldrb	r3, [r7, #23]
 8004c04:	005a      	lsls	r2, r3, #1
 8004c06:	7dbb      	ldrb	r3, [r7, #22]
 8004c08:	4923      	ldr	r1, [pc, #140]	@ (8004c98 <phCryptoSym_Sw_Des_F+0xf4>)
 8004c0a:	0192      	lsls	r2, r2, #6
 8004c0c:	440a      	add	r2, r1
 8004c0e:	4413      	add	r3, r2
 8004c10:	781a      	ldrb	r2, [r3, #0]
 8004c12:	7dfb      	ldrb	r3, [r7, #23]
 8004c14:	0112      	lsls	r2, r2, #4
 8004c16:	b2d2      	uxtb	r2, r2
 8004c18:	3318      	adds	r3, #24
 8004c1a:	443b      	add	r3, r7
 8004c1c:	f803 2c0c 	strb.w	r2, [r3, #-12]
        /* Calculate the XORing of the key and the input to find the correct SBOX lookup index for the next byte. */
        rc = bArray[(2U*j) + 1U] ^ pRoundKey[(2U*j) + 1U];
 8004c20:	7dfb      	ldrb	r3, [r7, #23]
 8004c22:	005b      	lsls	r3, r3, #1
 8004c24:	3301      	adds	r3, #1
 8004c26:	3318      	adds	r3, #24
 8004c28:	443b      	add	r3, r7
 8004c2a:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8004c2e:	7dfb      	ldrb	r3, [r7, #23]
 8004c30:	005b      	lsls	r3, r3, #1
 8004c32:	3301      	adds	r3, #1
 8004c34:	6839      	ldr	r1, [r7, #0]
 8004c36:	440b      	add	r3, r1
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	4053      	eors	r3, r2
 8004c3c:	75bb      	strb	r3, [r7, #22]
        rc = (uint8_t)((rc & 0x20U) | ((rc << 4U) & 0x10U) | ((rc >> 1U) & 0x0FU));
 8004c3e:	7dbb      	ldrb	r3, [r7, #22]
 8004c40:	f003 0320 	and.w	r3, r3, #32
 8004c44:	b2da      	uxtb	r2, r3
 8004c46:	7dbb      	ldrb	r3, [r7, #22]
 8004c48:	011b      	lsls	r3, r3, #4
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	f003 0310 	and.w	r3, r3, #16
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	4313      	orrs	r3, r2
 8004c54:	b2da      	uxtb	r2, r3
 8004c56:	7dbb      	ldrb	r3, [r7, #22]
 8004c58:	085b      	lsrs	r3, r3, #1
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	f003 030f 	and.w	r3, r3, #15
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	4313      	orrs	r3, r2
 8004c64:	75bb      	strb	r3, [r7, #22]
        /* Lookup the result in the SBOX and OR it to the result of the previous byte. */
        bArray[j] |= (uint8_t)(SBOX[(2U*j)+1U][rc]);
 8004c66:	7dfb      	ldrb	r3, [r7, #23]
 8004c68:	3318      	adds	r3, #24
 8004c6a:	443b      	add	r3, r7
 8004c6c:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 8004c70:	7dfb      	ldrb	r3, [r7, #23]
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	1c5a      	adds	r2, r3, #1
 8004c76:	7dbb      	ldrb	r3, [r7, #22]
 8004c78:	4807      	ldr	r0, [pc, #28]	@ (8004c98 <phCryptoSym_Sw_Des_F+0xf4>)
 8004c7a:	0192      	lsls	r2, r2, #6
 8004c7c:	4402      	add	r2, r0
 8004c7e:	4413      	add	r3, r2
 8004c80:	781a      	ldrb	r2, [r3, #0]
 8004c82:	7dfb      	ldrb	r3, [r7, #23]
 8004c84:	430a      	orrs	r2, r1
 8004c86:	b2d2      	uxtb	r2, r2
 8004c88:	3318      	adds	r3, #24
 8004c8a:	443b      	add	r3, r7
 8004c8c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (j = 0; j < 4U; j++)
 8004c90:	7dfb      	ldrb	r3, [r7, #23]
 8004c92:	3301      	adds	r3, #1
 8004c94:	75fb      	strb	r3, [r7, #23]
 8004c96:	e001      	b.n	8004c9c <phCryptoSym_Sw_Des_F+0xf8>
 8004c98:	0801ff0c 	.word	0x0801ff0c
 8004c9c:	7dfb      	ldrb	r3, [r7, #23]
 8004c9e:	2b03      	cmp	r3, #3
 8004ca0:	d98e      	bls.n	8004bc0 <phCryptoSym_Sw_Des_F+0x1c>
    }

    /* Finally perform the permutation P.
    As there is no regular mapping from input to output the relevant input bits are looked up in bArray and written back to pR.
    When designing this function, the goal was to minimize the shift operations. */
    pR[1] = (uint8_t)((bArray[0] & 0x88U));        /* Input bits 1, 5 */
 8004ca2:	7b3a      	ldrb	r2, [r7, #12]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	f022 0277 	bic.w	r2, r2, #119	@ 0x77
 8004cac:	b2d2      	uxtb	r2, r2
 8004cae:	701a      	strb	r2, [r3, #0]
    bArray[0] <<=1U;
 8004cb0:	7b3b      	ldrb	r3, [r7, #12]
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	733b      	strb	r3, [r7, #12]
    pR[2] = (uint8_t)(bArray[0] & 0x80U);          /* Input bit 2 */
 8004cb8:	7b3a      	ldrb	r2, [r7, #12]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	3302      	adds	r3, #2
 8004cbe:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8004cc2:	b2d2      	uxtb	r2, r2
 8004cc4:	701a      	strb	r2, [r3, #0]
    pR[2] |= (uint8_t)((bArray[0]& 0x02U ) << 5U);  /* Input bit 8 */
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	3302      	adds	r3, #2
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	b25a      	sxtb	r2, r3
 8004cce:	7b3b      	ldrb	r3, [r7, #12]
 8004cd0:	b25b      	sxtb	r3, r3
 8004cd2:	015b      	lsls	r3, r3, #5
 8004cd4:	b25b      	sxtb	r3, r3
 8004cd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cda:	b25b      	sxtb	r3, r3
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	b25a      	sxtb	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3302      	adds	r3, #2
 8004ce4:	b2d2      	uxtb	r2, r2
 8004ce6:	701a      	strb	r2, [r3, #0]
    pR[0] = (uint8_t)((bArray[0]& 0x04U ) << 4U);   /* Input bit 7 */
 8004ce8:	7b3b      	ldrb	r3, [r7, #12]
 8004cea:	011b      	lsls	r3, r3, #4
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cf2:	b2da      	uxtb	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	701a      	strb	r2, [r3, #0]
    pR[3] = (uint8_t)((bArray[0] & 0x08U) << 1U);   /* Input bit 6 */
 8004cf8:	7b3b      	ldrb	r3, [r7, #12]
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	b2da      	uxtb	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	3303      	adds	r3, #3
 8004d02:	f002 0210 	and.w	r2, r2, #16
 8004d06:	b2d2      	uxtb	r2, r2
 8004d08:	701a      	strb	r2, [r3, #0]
    bArray[0] >>= 4U;
 8004d0a:	7b3b      	ldrb	r3, [r7, #12]
 8004d0c:	091b      	lsrs	r3, r3, #4
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	733b      	strb	r3, [r7, #12]
    pR[3] |= (uint8_t)(bArray[0] & 0x02U);         /* Input bit 4 */
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	3303      	adds	r3, #3
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	b25a      	sxtb	r2, r3
 8004d1a:	7b3b      	ldrb	r3, [r7, #12]
 8004d1c:	b25b      	sxtb	r3, r3
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	b25b      	sxtb	r3, r3
 8004d24:	4313      	orrs	r3, r2
 8004d26:	b25a      	sxtb	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	3303      	adds	r3, #3
 8004d2c:	b2d2      	uxtb	r2, r2
 8004d2e:	701a      	strb	r2, [r3, #0]
    bArray[0] >>= 1U;
 8004d30:	7b3b      	ldrb	r3, [r7, #12]
 8004d32:	085b      	lsrs	r3, r3, #1
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	733b      	strb	r3, [r7, #12]
    pR[2] |= (uint8_t)(bArray[0] & 0x02U);         /* Input bit 3 */
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	3302      	adds	r3, #2
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	b25a      	sxtb	r2, r3
 8004d40:	7b3b      	ldrb	r3, [r7, #12]
 8004d42:	b25b      	sxtb	r3, r3
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	b25b      	sxtb	r3, r3
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	b25a      	sxtb	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	3302      	adds	r3, #2
 8004d52:	b2d2      	uxtb	r2, r2
 8004d54:	701a      	strb	r2, [r3, #0]
    pR[0]|= (uint8_t)((bArray[1] & 0x01U) << 7U);   /* Input bit 16 */
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	781a      	ldrb	r2, [r3, #0]
 8004d5a:	7b7b      	ldrb	r3, [r7, #13]
 8004d5c:	01db      	lsls	r3, r3, #7
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	4313      	orrs	r3, r2
 8004d62:	b2da      	uxtb	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	701a      	strb	r2, [r3, #0]
    pR[1]|= (uint8_t)((bArray[1] & 0x02U) << 5U);   /* Input bit 15 */
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	b25a      	sxtb	r2, r3
 8004d70:	7b7b      	ldrb	r3, [r7, #13]
 8004d72:	b25b      	sxtb	r3, r3
 8004d74:	015b      	lsls	r3, r3, #5
 8004d76:	b25b      	sxtb	r3, r3
 8004d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d7c:	b25b      	sxtb	r3, r3
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	b25a      	sxtb	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	3301      	adds	r3, #1
 8004d86:	b2d2      	uxtb	r2, r2
 8004d88:	701a      	strb	r2, [r3, #0]
    pR[2]|= (uint8_t)((bArray[1] & 0x04U) << 2U);   /* Input bit 14 */
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	3302      	adds	r3, #2
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	b25a      	sxtb	r2, r3
 8004d92:	7b7b      	ldrb	r3, [r7, #13]
 8004d94:	b25b      	sxtb	r3, r3
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	b25b      	sxtb	r3, r3
 8004d9a:	f003 0310 	and.w	r3, r3, #16
 8004d9e:	b25b      	sxtb	r3, r3
 8004da0:	4313      	orrs	r3, r2
 8004da2:	b25a      	sxtb	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	3302      	adds	r3, #2
 8004da8:	b2d2      	uxtb	r2, r2
 8004daa:	701a      	strb	r2, [r3, #0]
    pR[3]|= (uint8_t)((bArray[1] & 0x08U) << 3U);   /* Input bit 13 */
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	3303      	adds	r3, #3
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	b25a      	sxtb	r2, r3
 8004db4:	7b7b      	ldrb	r3, [r7, #13]
 8004db6:	b25b      	sxtb	r3, r3
 8004db8:	00db      	lsls	r3, r3, #3
 8004dba:	b25b      	sxtb	r3, r3
 8004dbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dc0:	b25b      	sxtb	r3, r3
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	b25a      	sxtb	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	3303      	adds	r3, #3
 8004dca:	b2d2      	uxtb	r2, r2
 8004dcc:	701a      	strb	r2, [r3, #0]
    bArray[1] >>= 2U;
 8004dce:	7b7b      	ldrb	r3, [r7, #13]
 8004dd0:	089b      	lsrs	r3, r3, #2
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	737b      	strb	r3, [r7, #13]
    pR[0] |= (uint8_t)(bArray[1]& 0x04U);          /* Input bit 12 */
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	b25a      	sxtb	r2, r3
 8004ddc:	7b7b      	ldrb	r3, [r7, #13]
 8004dde:	b25b      	sxtb	r3, r3
 8004de0:	f003 0304 	and.w	r3, r3, #4
 8004de4:	b25b      	sxtb	r3, r3
 8004de6:	4313      	orrs	r3, r2
 8004de8:	b25b      	sxtb	r3, r3
 8004dea:	b2da      	uxtb	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	701a      	strb	r2, [r3, #0]
    bArray[1] >>= 1U;
 8004df0:	7b7b      	ldrb	r3, [r7, #13]
 8004df2:	085b      	lsrs	r3, r3, #1
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	737b      	strb	r3, [r7, #13]
    pR[3] |= (uint8_t)(bArray[1]& 0x04U);          /* Input bit 11 */
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	3303      	adds	r3, #3
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	b25a      	sxtb	r2, r3
 8004e00:	7b7b      	ldrb	r3, [r7, #13]
 8004e02:	b25b      	sxtb	r3, r3
 8004e04:	f003 0304 	and.w	r3, r3, #4
 8004e08:	b25b      	sxtb	r3, r3
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	b25a      	sxtb	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	3303      	adds	r3, #3
 8004e12:	b2d2      	uxtb	r2, r2
 8004e14:	701a      	strb	r2, [r3, #0]
    bArray[1] >>= 3U;
 8004e16:	7b7b      	ldrb	r3, [r7, #13]
 8004e18:	08db      	lsrs	r3, r3, #3
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	737b      	strb	r3, [r7, #13]
    pR[1] |= (uint8_t)(bArray[1]& 0x01U);          /* Input bit 10 */
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	3301      	adds	r3, #1
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	b25a      	sxtb	r2, r3
 8004e26:	7b7b      	ldrb	r3, [r7, #13]
 8004e28:	b25b      	sxtb	r3, r3
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	b25b      	sxtb	r3, r3
 8004e30:	4313      	orrs	r3, r2
 8004e32:	b25a      	sxtb	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	3301      	adds	r3, #1
 8004e38:	b2d2      	uxtb	r2, r2
 8004e3a:	701a      	strb	r2, [r3, #0]
    bArray[1] >>= 1U;
 8004e3c:	7b7b      	ldrb	r3, [r7, #13]
 8004e3e:	085b      	lsrs	r3, r3, #1
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	737b      	strb	r3, [r7, #13]
    pR[2] |= (uint8_t)(bArray[1]& 0x01U);          /* Input bit 9 */
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	3302      	adds	r3, #2
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	b25a      	sxtb	r2, r3
 8004e4c:	7b7b      	ldrb	r3, [r7, #13]
 8004e4e:	b25b      	sxtb	r3, r3
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	b25b      	sxtb	r3, r3
 8004e56:	4313      	orrs	r3, r2
 8004e58:	b25a      	sxtb	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	3302      	adds	r3, #2
 8004e5e:	b2d2      	uxtb	r2, r2
 8004e60:	701a      	strb	r2, [r3, #0]

    pR[0] |= (uint8_t)((bArray[2] & 0x80U) >> 7U);  /* Input bit 17  */
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	781a      	ldrb	r2, [r3, #0]
 8004e66:	7bbb      	ldrb	r3, [r7, #14]
 8004e68:	09db      	lsrs	r3, r3, #7
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	b2da      	uxtb	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	701a      	strb	r2, [r3, #0]
    pR[1] |= (uint8_t)((bArray[2] & 0x40U) >> 4U);  /* Input bit 18 */
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	3301      	adds	r3, #1
 8004e78:	7819      	ldrb	r1, [r3, #0]
 8004e7a:	7bbb      	ldrb	r3, [r7, #14]
 8004e7c:	091b      	lsrs	r3, r3, #4
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	f003 0304 	and.w	r3, r3, #4
 8004e84:	b2da      	uxtb	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	3301      	adds	r3, #1
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	b2d2      	uxtb	r2, r2
 8004e8e:	701a      	strb	r2, [r3, #0]
    pR[3] |= (uint8_t)((bArray[2] & 0x20U) << 2U);  /* Input bit 19 */
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	3303      	adds	r3, #3
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	b25a      	sxtb	r2, r3
 8004e98:	7bbb      	ldrb	r3, [r7, #14]
 8004e9a:	b25b      	sxtb	r3, r3
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	b25b      	sxtb	r3, r3
 8004ea0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004ea4:	b25b      	sxtb	r3, r3
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	b25a      	sxtb	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	3303      	adds	r3, #3
 8004eae:	b2d2      	uxtb	r2, r2
 8004eb0:	701a      	strb	r2, [r3, #0]
    bArray[2]<<=1U;
 8004eb2:	7bbb      	ldrb	r3, [r7, #14]
 8004eb4:	005b      	lsls	r3, r3, #1
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	73bb      	strb	r3, [r7, #14]
    pR[0] |= (uint8_t)(bArray[2] & 0x20U);         /* Input bit 20 */
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	b25a      	sxtb	r2, r3
 8004ec0:	7bbb      	ldrb	r3, [r7, #14]
 8004ec2:	b25b      	sxtb	r3, r3
 8004ec4:	f003 0320 	and.w	r3, r3, #32
 8004ec8:	b25b      	sxtb	r3, r3
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	b25b      	sxtb	r3, r3
 8004ece:	b2da      	uxtb	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	701a      	strb	r2, [r3, #0]
    pR[0] |= (uint8_t)(bArray[2] & 0x10U);         /* Input bit 21 */
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	b25a      	sxtb	r2, r3
 8004eda:	7bbb      	ldrb	r3, [r7, #14]
 8004edc:	b25b      	sxtb	r3, r3
 8004ede:	f003 0310 	and.w	r3, r3, #16
 8004ee2:	b25b      	sxtb	r3, r3
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	b25b      	sxtb	r3, r3
 8004ee8:	b2da      	uxtb	r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	701a      	strb	r2, [r3, #0]
    pR[3] |= (uint8_t)(bArray[2] & 0x08U);         /* Input bit 22 */
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	3303      	adds	r3, #3
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	b25a      	sxtb	r2, r3
 8004ef6:	7bbb      	ldrb	r3, [r7, #14]
 8004ef8:	b25b      	sxtb	r3, r3
 8004efa:	f003 0308 	and.w	r3, r3, #8
 8004efe:	b25b      	sxtb	r3, r3
 8004f00:	4313      	orrs	r3, r2
 8004f02:	b25a      	sxtb	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	3303      	adds	r3, #3
 8004f08:	b2d2      	uxtb	r2, r2
 8004f0a:	701a      	strb	r2, [r3, #0]
    bArray[2]<<=3U;
 8004f0c:	7bbb      	ldrb	r3, [r7, #14]
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	73bb      	strb	r3, [r7, #14]
    pR[1]|= (uint8_t)(bArray[2] & 0x20U);          /* Input bit 23 */
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	3301      	adds	r3, #1
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	b25a      	sxtb	r2, r3
 8004f1c:	7bbb      	ldrb	r3, [r7, #14]
 8004f1e:	b25b      	sxtb	r3, r3
 8004f20:	f003 0320 	and.w	r3, r3, #32
 8004f24:	b25b      	sxtb	r3, r3
 8004f26:	4313      	orrs	r3, r2
 8004f28:	b25a      	sxtb	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	b2d2      	uxtb	r2, r2
 8004f30:	701a      	strb	r2, [r3, #0]
    pR[2]|= (uint8_t)((bArray[2] & 0x10U) << 1U);   /* Input bit 24 */
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	3302      	adds	r3, #2
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	b25a      	sxtb	r2, r3
 8004f3a:	7bbb      	ldrb	r3, [r7, #14]
 8004f3c:	b25b      	sxtb	r3, r3
 8004f3e:	005b      	lsls	r3, r3, #1
 8004f40:	b25b      	sxtb	r3, r3
 8004f42:	f003 0320 	and.w	r3, r3, #32
 8004f46:	b25b      	sxtb	r3, r3
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	b25a      	sxtb	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	3302      	adds	r3, #2
 8004f50:	b2d2      	uxtb	r2, r2
 8004f52:	701a      	strb	r2, [r3, #0]

    pR[0] |= (uint8_t)(bArray[3] & 0x08U);         /* Input bit 29 */
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	b25a      	sxtb	r2, r3
 8004f5a:	7bfb      	ldrb	r3, [r7, #15]
 8004f5c:	b25b      	sxtb	r3, r3
 8004f5e:	f003 0308 	and.w	r3, r3, #8
 8004f62:	b25b      	sxtb	r3, r3
 8004f64:	4313      	orrs	r3, r2
 8004f66:	b25b      	sxtb	r3, r3
 8004f68:	b2da      	uxtb	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	701a      	strb	r2, [r3, #0]
    pR[1] |= (uint8_t)(bArray[3] & 0x02U);         /* Input bit 31 */
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	3301      	adds	r3, #1
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	b25a      	sxtb	r2, r3
 8004f76:	7bfb      	ldrb	r3, [r7, #15]
 8004f78:	b25b      	sxtb	r3, r3
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	b25b      	sxtb	r3, r3
 8004f80:	4313      	orrs	r3, r2
 8004f82:	b25a      	sxtb	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3301      	adds	r3, #1
 8004f88:	b2d2      	uxtb	r2, r2
 8004f8a:	701a      	strb	r2, [r3, #0]
    pR[3] |= (uint8_t)((bArray[3] & 0x80U) >> 7U);  /* Input bit 25 */
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	3303      	adds	r3, #3
 8004f90:	7819      	ldrb	r1, [r3, #0]
 8004f92:	7bfb      	ldrb	r3, [r7, #15]
 8004f94:	09db      	lsrs	r3, r3, #7
 8004f96:	b2da      	uxtb	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	3303      	adds	r3, #3
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	b2d2      	uxtb	r2, r2
 8004fa0:	701a      	strb	r2, [r3, #0]
    pR[2] |= (uint8_t)((bArray[3] & 0x01U) << 3U);  /* Input bit 32 */
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	3302      	adds	r3, #2
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	b25a      	sxtb	r2, r3
 8004faa:	7bfb      	ldrb	r3, [r7, #15]
 8004fac:	b25b      	sxtb	r3, r3
 8004fae:	00db      	lsls	r3, r3, #3
 8004fb0:	b25b      	sxtb	r3, r3
 8004fb2:	f003 0308 	and.w	r3, r3, #8
 8004fb6:	b25b      	sxtb	r3, r3
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	b25a      	sxtb	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	3302      	adds	r3, #2
 8004fc0:	b2d2      	uxtb	r2, r2
 8004fc2:	701a      	strb	r2, [r3, #0]
    pR[3] |= (uint8_t)((bArray[3] & 0x04U) << 3U);  /* Input bit 30 */
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	3303      	adds	r3, #3
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	b25a      	sxtb	r2, r3
 8004fcc:	7bfb      	ldrb	r3, [r7, #15]
 8004fce:	b25b      	sxtb	r3, r3
 8004fd0:	00db      	lsls	r3, r3, #3
 8004fd2:	b25b      	sxtb	r3, r3
 8004fd4:	f003 0320 	and.w	r3, r3, #32
 8004fd8:	b25b      	sxtb	r3, r3
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	b25a      	sxtb	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	3303      	adds	r3, #3
 8004fe2:	b2d2      	uxtb	r2, r2
 8004fe4:	701a      	strb	r2, [r3, #0]
    bArray[3]>>=2U;
 8004fe6:	7bfb      	ldrb	r3, [r7, #15]
 8004fe8:	089b      	lsrs	r3, r3, #2
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	73fb      	strb	r3, [r7, #15]
    pR[1] |= (uint8_t)((bArray[3] & 0x10U));       /* Input bit 26 */
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	b25a      	sxtb	r2, r3
 8004ff6:	7bfb      	ldrb	r3, [r7, #15]
 8004ff8:	b25b      	sxtb	r3, r3
 8004ffa:	f003 0310 	and.w	r3, r3, #16
 8004ffe:	b25b      	sxtb	r3, r3
 8005000:	4313      	orrs	r3, r2
 8005002:	b25a      	sxtb	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	3301      	adds	r3, #1
 8005008:	b2d2      	uxtb	r2, r2
 800500a:	701a      	strb	r2, [r3, #0]
    bArray[3]>>=1U;
 800500c:	7bfb      	ldrb	r3, [r7, #15]
 800500e:	085b      	lsrs	r3, r3, #1
 8005010:	b2db      	uxtb	r3, r3
 8005012:	73fb      	strb	r3, [r7, #15]
    pR[2] |= (uint8_t)((bArray[3] & 0x04U));       /* Input bit 27 */
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	3302      	adds	r3, #2
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	b25a      	sxtb	r2, r3
 800501c:	7bfb      	ldrb	r3, [r7, #15]
 800501e:	b25b      	sxtb	r3, r3
 8005020:	f003 0304 	and.w	r3, r3, #4
 8005024:	b25b      	sxtb	r3, r3
 8005026:	4313      	orrs	r3, r2
 8005028:	b25a      	sxtb	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	3302      	adds	r3, #2
 800502e:	b2d2      	uxtb	r2, r2
 8005030:	701a      	strb	r2, [r3, #0]
    pR[0] |= (uint8_t)((bArray[3] & 0x02U));       /* Input bit 28 */
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	b25a      	sxtb	r2, r3
 8005038:	7bfb      	ldrb	r3, [r7, #15]
 800503a:	b25b      	sxtb	r3, r3
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	b25b      	sxtb	r3, r3
 8005042:	4313      	orrs	r3, r2
 8005044:	b25b      	sxtb	r3, r3
 8005046:	b2da      	uxtb	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	701a      	strb	r2, [r3, #0]

}
 800504c:	bf00      	nop
 800504e:	3718      	adds	r7, #24
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <phCryptoSym_Sw_Des_Expand>:

void phCryptoSym_Sw_Des_Expand(
                               uint8_t PH_CRYTOSYM_SW_FAST_RAM * pR,
                               uint8_t PH_CRYTOSYM_SW_FAST_RAM * pRexp
                               )
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
    pRexp[0] = (uint8_t)((uint8_t)(((pR[3] & 0x01U) << 5U) | (pR[0] >> 3U)) & MASK6); /* Input bits 32 1 2 3 4 5 */
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	3303      	adds	r3, #3
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	015b      	lsls	r3, r3, #5
 8005066:	b2db      	uxtb	r3, r3
 8005068:	f003 0320 	and.w	r3, r3, #32
 800506c:	b2da      	uxtb	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	08db      	lsrs	r3, r3, #3
 8005074:	b2db      	uxtb	r3, r3
 8005076:	4313      	orrs	r3, r2
 8005078:	b2db      	uxtb	r3, r3
 800507a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800507e:	b2da      	uxtb	r2, r3
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	701a      	strb	r2, [r3, #0]
    pRexp[1] = (uint8_t)((uint8_t)((pR[0] << 1U) | ((pR[1] & 0x80U) >> 7U)) & MASK6); /* Input bits 4 5 6 7 8 9 */
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	005b      	lsls	r3, r3, #1
 800508a:	b2da      	uxtb	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	3301      	adds	r3, #1
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	09db      	lsrs	r3, r3, #7
 8005094:	b2db      	uxtb	r3, r3
 8005096:	4313      	orrs	r3, r2
 8005098:	b2da      	uxtb	r2, r3
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	3301      	adds	r3, #1
 800509e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80050a2:	b2d2      	uxtb	r2, r2
 80050a4:	701a      	strb	r2, [r3, #0]
    pRexp[2] = (uint8_t)((uint8_t)(((pR[0] & 0x01U) << 5U) | (pR[1] >> 3U)) & MASK6); /* Input bits 8 9 10 11 12 13 */
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	015b      	lsls	r3, r3, #5
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	f003 0320 	and.w	r3, r3, #32
 80050b2:	b2da      	uxtb	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	3301      	adds	r3, #1
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	08db      	lsrs	r3, r3, #3
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	4313      	orrs	r3, r2
 80050c0:	b2da      	uxtb	r2, r3
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	3302      	adds	r3, #2
 80050c6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80050ca:	b2d2      	uxtb	r2, r2
 80050cc:	701a      	strb	r2, [r3, #0]
    pRexp[3] = (uint8_t)((uint8_t)((pR[1] << 1U) | ((pR[2] & 0x80U) >> 7U)) & MASK6); /* Input bits 12 13 14 15 16 17 */
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	3301      	adds	r3, #1
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	005b      	lsls	r3, r3, #1
 80050d6:	b2da      	uxtb	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	3302      	adds	r3, #2
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	09db      	lsrs	r3, r3, #7
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	4313      	orrs	r3, r2
 80050e4:	b2da      	uxtb	r2, r3
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	3303      	adds	r3, #3
 80050ea:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80050ee:	b2d2      	uxtb	r2, r2
 80050f0:	701a      	strb	r2, [r3, #0]
    pRexp[4] = (uint8_t)((uint8_t)(((pR[1] & 0x01U) << 5U) | (pR[2] >> 3U)) & MASK6); /* Input bits 16 17 18 19 20 21 */
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	3301      	adds	r3, #1
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	015b      	lsls	r3, r3, #5
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	f003 0320 	and.w	r3, r3, #32
 8005100:	b2da      	uxtb	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	3302      	adds	r3, #2
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	08db      	lsrs	r3, r3, #3
 800510a:	b2db      	uxtb	r3, r3
 800510c:	4313      	orrs	r3, r2
 800510e:	b2da      	uxtb	r2, r3
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	3304      	adds	r3, #4
 8005114:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8005118:	b2d2      	uxtb	r2, r2
 800511a:	701a      	strb	r2, [r3, #0]
    pRexp[5] = (uint8_t)((uint8_t)((pR[2] << 1U) | ((pR[3] & 0x80U) >> 7U)) & MASK6); /* Input bits 20 21 22 23 24 25*/
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	3302      	adds	r3, #2
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	005b      	lsls	r3, r3, #1
 8005124:	b2da      	uxtb	r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	3303      	adds	r3, #3
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	09db      	lsrs	r3, r3, #7
 800512e:	b2db      	uxtb	r3, r3
 8005130:	4313      	orrs	r3, r2
 8005132:	b2da      	uxtb	r2, r3
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	3305      	adds	r3, #5
 8005138:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800513c:	b2d2      	uxtb	r2, r2
 800513e:	701a      	strb	r2, [r3, #0]
    pRexp[6] = (uint8_t)((uint8_t)(((pR[2] & 0x01U) << 5U) | (pR[3] >> 3U)) & MASK6); /* Input bits 24 25 26 27 28 29*/
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	3302      	adds	r3, #2
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	015b      	lsls	r3, r3, #5
 8005148:	b2db      	uxtb	r3, r3
 800514a:	f003 0320 	and.w	r3, r3, #32
 800514e:	b2da      	uxtb	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	3303      	adds	r3, #3
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	08db      	lsrs	r3, r3, #3
 8005158:	b2db      	uxtb	r3, r3
 800515a:	4313      	orrs	r3, r2
 800515c:	b2da      	uxtb	r2, r3
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	3306      	adds	r3, #6
 8005162:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8005166:	b2d2      	uxtb	r2, r2
 8005168:	701a      	strb	r2, [r3, #0]
    pRexp[7] = (uint8_t)((uint8_t)((pR[3] << 1U) | ((pR[0] & 0x80U) >> 7U)) & MASK6); /* Input bits 28 29 30 31 32 1 */
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	3303      	adds	r3, #3
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	005b      	lsls	r3, r3, #1
 8005172:	b2da      	uxtb	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	09db      	lsrs	r3, r3, #7
 800517a:	b2db      	uxtb	r3, r3
 800517c:	4313      	orrs	r3, r2
 800517e:	b2da      	uxtb	r2, r3
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	3307      	adds	r3, #7
 8005184:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8005188:	b2d2      	uxtb	r2, r2
 800518a:	701a      	strb	r2, [r3, #0]
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <phCryptoSym_Sw_CMAC_GenerateK1K2>:
phStatus_t phCryptoSym_Sw_CMAC_GenerateK1K2(
    phCryptoSym_Sw_DataParams_t * pDataParams,
    uint8_t * pSubKey1,
    uint8_t * pSubKey2
    )
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b08a      	sub	sp, #40	@ 0x28
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_CRYTOSYM_SW_FAST_RAM aBuffer[PH_CRYPTOSYM_SW_MAX_BLOCK_SIZE];
    uint16_t    PH_MEMLOC_REM wBlockSize;
    uint8_t     PH_MEMLOC_REM bR_b;

    (void)memset(aBuffer, 0x00, (size_t)sizeof(aBuffer));
 80051a4:	f107 0314 	add.w	r3, r7, #20
 80051a8:	2210      	movs	r2, #16
 80051aa:	2100      	movs	r1, #0
 80051ac:	4618      	mov	r0, r3
 80051ae:	f017 ffa7 	bl	801d100 <memset>

    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_GetConfig(pDataParams, PH_CRYPTOSYM_CONFIG_BLOCK_SIZE, &wBlockSize));
 80051b2:	f107 0312 	add.w	r3, r7, #18
 80051b6:	461a      	mov	r2, r3
 80051b8:	2102      	movs	r1, #2
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f7fe f85e 	bl	800327c <phCryptoSym_Sw_GetConfig>
 80051c0:	4603      	mov	r3, r0
 80051c2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80051c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d001      	beq.n	80051ce <phCryptoSym_Sw_CMAC_GenerateK1K2+0x36>
 80051ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80051cc:	e058      	b.n	8005280 <phCryptoSym_Sw_CMAC_GenerateK1K2+0xe8>

    /* Calculate xor value according to Seq. 5.3 of SP_800-38B */
    /* R128 = 0exp(120) || 10000111, and R64 = 0exp(59) || 11011. */
    switch (wBlockSize)
 80051ce:	8a7b      	ldrh	r3, [r7, #18]
 80051d0:	2b08      	cmp	r3, #8
 80051d2:	d005      	beq.n	80051e0 <phCryptoSym_Sw_CMAC_GenerateK1K2+0x48>
 80051d4:	2b10      	cmp	r3, #16
 80051d6:	d107      	bne.n	80051e8 <phCryptoSym_Sw_CMAC_GenerateK1K2+0x50>
    {
    case PH_CRYPTOSYM_AES_BLOCK_SIZE:
        bR_b = 0x87U;
 80051d8:	2387      	movs	r3, #135	@ 0x87
 80051da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        break;
 80051de:	e006      	b.n	80051ee <phCryptoSym_Sw_CMAC_GenerateK1K2+0x56>
    case PH_CRYPTOSYM_DES_BLOCK_SIZE:
        bR_b = 0x1BU;
 80051e0:	231b      	movs	r3, #27
 80051e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        break;
 80051e6:	e002      	b.n	80051ee <phCryptoSym_Sw_CMAC_GenerateK1K2+0x56>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_CRYPTOSYM);
 80051e8:	f24e 137f 	movw	r3, #57727	@ 0xe17f
 80051ec:	e048      	b.n	8005280 <phCryptoSym_Sw_CMAC_GenerateK1K2+0xe8>
    }

    /* Encrypt zero block*/
    /* 1. Let L = CIPHK(0 exp b). */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_EncryptBlock(pDataParams, aBuffer));
 80051ee:	f107 0314 	add.w	r3, r7, #20
 80051f2:	4619      	mov	r1, r3
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f000 f879 	bl	80052ec <phCryptoSym_Sw_EncryptBlock>
 80051fa:	4603      	mov	r3, r0
 80051fc:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80051fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005200:	2b00      	cmp	r3, #0
 8005202:	d001      	beq.n	8005208 <phCryptoSym_Sw_CMAC_GenerateK1K2+0x70>
 8005204:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005206:	e03b      	b.n	8005280 <phCryptoSym_Sw_CMAC_GenerateK1K2+0xe8>

    /* Shift the pSubKey array according to NIST SP_800-38B */
    /* 2. If MSB1(L) = 0, then K1 = L << 1U; */
    /* Else K1 = (L << 1U) xor Rb; see Sec. 5.3 for the definition of Rb. */
    phCryptoSym_Sw_CMAC_LeftShift(aBuffer, (uint8_t)wBlockSize, pSubKey1);
 8005208:	8a7b      	ldrh	r3, [r7, #18]
 800520a:	b2d9      	uxtb	r1, r3
 800520c:	f107 0314 	add.w	r3, r7, #20
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	4618      	mov	r0, r3
 8005214:	f000 f838 	bl	8005288 <phCryptoSym_Sw_CMAC_LeftShift>
    if (0U != (aBuffer[0] & 0x80U))
 8005218:	7d3b      	ldrb	r3, [r7, #20]
 800521a:	b25b      	sxtb	r3, r3
 800521c:	2b00      	cmp	r3, #0
 800521e:	da0d      	bge.n	800523c <phCryptoSym_Sw_CMAC_GenerateK1K2+0xa4>
    {
        /* We need to perform the XOR operation with the R_b array */
        pSubKey1[wBlockSize - 1U ]  ^= bR_b;
 8005220:	8a7b      	ldrh	r3, [r7, #18]
 8005222:	3b01      	subs	r3, #1
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	4413      	add	r3, r2
 8005228:	7819      	ldrb	r1, [r3, #0]
 800522a:	8a7b      	ldrh	r3, [r7, #18]
 800522c:	3b01      	subs	r3, #1
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	4413      	add	r3, r2
 8005232:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005236:	404a      	eors	r2, r1
 8005238:	b2d2      	uxtb	r2, r2
 800523a:	701a      	strb	r2, [r3, #0]

    /* Now let's continue with Key 2 */
    /* Shift the pSubKey array according to NIST SP_800-38B*/
    /* 3. If MSB1(K1) = 0, then K2 = K1 << 1U; */
    /* Else K2 = (K1 << 1U) xor Rb. */
    phCryptoSym_Sw_CMAC_LeftShift(pSubKey1, (uint8_t)wBlockSize, pSubKey2);
 800523c:	8a7b      	ldrh	r3, [r7, #18]
 800523e:	b2db      	uxtb	r3, r3
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	4619      	mov	r1, r3
 8005244:	68b8      	ldr	r0, [r7, #8]
 8005246:	f000 f81f 	bl	8005288 <phCryptoSym_Sw_CMAC_LeftShift>

    if (0U != (pSubKey1[0] & 0x80U))
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	b25b      	sxtb	r3, r3
 8005250:	2b00      	cmp	r3, #0
 8005252:	da0d      	bge.n	8005270 <phCryptoSym_Sw_CMAC_GenerateK1K2+0xd8>
    {
        /* We need to perform the XOR operation with the R_b array */
        pSubKey2[wBlockSize - 1U ]  ^= bR_b;
 8005254:	8a7b      	ldrh	r3, [r7, #18]
 8005256:	3b01      	subs	r3, #1
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	4413      	add	r3, r2
 800525c:	7819      	ldrb	r1, [r3, #0]
 800525e:	8a7b      	ldrh	r3, [r7, #18]
 8005260:	3b01      	subs	r3, #1
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	4413      	add	r3, r2
 8005266:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800526a:	404a      	eors	r2, r1
 800526c:	b2d2      	uxtb	r2, r2
 800526e:	701a      	strb	r2, [r3, #0]
#ifndef PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION
    pDataParams->bCMACSubKeysInitialized    = PH_ON;
#endif /* PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION */

    /* Clear buffer for security reasons */
    (void)memset(aBuffer, 0x00, (size_t)sizeof(aBuffer));
 8005270:	f107 0314 	add.w	r3, r7, #20
 8005274:	2210      	movs	r2, #16
 8005276:	2100      	movs	r1, #0
 8005278:	4618      	mov	r0, r3
 800527a:	f017 ff41 	bl	801d100 <memset>

    return PH_ERR_SUCCESS;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3728      	adds	r7, #40	@ 0x28
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <phCryptoSym_Sw_CMAC_LeftShift>:
void phCryptoSym_Sw_CMAC_LeftShift(
                                   const uint8_t * pInBuffer,
                                   uint8_t bInputLen,
                                   uint8_t * pOutBuffer
                                   )
{
 8005288:	b480      	push	{r7}
 800528a:	b087      	sub	sp, #28
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	460b      	mov	r3, r1
 8005292:	607a      	str	r2, [r7, #4]
 8005294:	72fb      	strb	r3, [r7, #11]
    uint8_t PH_MEMLOC_REM bOverflow = 0;
 8005296:	2300      	movs	r3, #0
 8005298:	75fb      	strb	r3, [r7, #23]

    do
    {
        bInputLen--;
 800529a:	7afb      	ldrb	r3, [r7, #11]
 800529c:	3b01      	subs	r3, #1
 800529e:	72fb      	strb	r3, [r7, #11]
        pOutBuffer[bInputLen] = pInBuffer[bInputLen] << 1U;
 80052a0:	7afb      	ldrb	r3, [r7, #11]
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	4413      	add	r3, r2
 80052a6:	781a      	ldrb	r2, [r3, #0]
 80052a8:	7afb      	ldrb	r3, [r7, #11]
 80052aa:	6879      	ldr	r1, [r7, #4]
 80052ac:	440b      	add	r3, r1
 80052ae:	0052      	lsls	r2, r2, #1
 80052b0:	b2d2      	uxtb	r2, r2
 80052b2:	701a      	strb	r2, [r3, #0]
        pOutBuffer[bInputLen] |= bOverflow;
 80052b4:	7afb      	ldrb	r3, [r7, #11]
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	4413      	add	r3, r2
 80052ba:	7819      	ldrb	r1, [r3, #0]
 80052bc:	7afb      	ldrb	r3, [r7, #11]
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	4413      	add	r3, r2
 80052c2:	7dfa      	ldrb	r2, [r7, #23]
 80052c4:	430a      	orrs	r2, r1
 80052c6:	b2d2      	uxtb	r2, r2
 80052c8:	701a      	strb	r2, [r3, #0]
        bOverflow = (uint8_t) (((pInBuffer[bInputLen] & 0x80U) != 0U) ? 0x01U : 0x00U);
 80052ca:	7afb      	ldrb	r3, [r7, #11]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	4413      	add	r3, r2
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	09db      	lsrs	r3, r3, #7
 80052d4:	75fb      	strb	r3, [r7, #23]
    }
    while(0U != bInputLen);
 80052d6:	7afb      	ldrb	r3, [r7, #11]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1de      	bne.n	800529a <phCryptoSym_Sw_CMAC_LeftShift+0x12>
}
 80052dc:	bf00      	nop
 80052de:	bf00      	nop
 80052e0:	371c      	adds	r7, #28
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
	...

080052ec <phCryptoSym_Sw_EncryptBlock>:

phStatus_t phCryptoSym_Sw_EncryptBlock(
                                       phCryptoSym_Sw_DataParams_t * pDataParams,
                                       uint8_t PH_CRYTOSYM_SW_FAST_RAM * pBlock
                                       )
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
    phStatus_t PH_MEMLOC_REM statusTmp;

    switch (pDataParams->wKeyType)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80052fa:	2b05      	cmp	r3, #5
 80052fc:	f200 8088 	bhi.w	8005410 <phCryptoSym_Sw_EncryptBlock+0x124>
 8005300:	a201      	add	r2, pc, #4	@ (adr r2, 8005308 <phCryptoSym_Sw_EncryptBlock+0x1c>)
 8005302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005306:	bf00      	nop
 8005308:	08005321 	.word	0x08005321
 800530c:	08005339 	.word	0x08005339
 8005310:	08005351 	.word	0x08005351
 8005314:	08005369 	.word	0x08005369
 8005318:	08005381 	.word	0x08005381
 800531c:	080053c9 	.word	0x080053c9
    {
#ifdef PH_CRYPTOSYM_SW_AES
    case PH_CRYPTOSYM_KEY_TYPE_AES128:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Aes_EncryptBlock(
 8005320:	220a      	movs	r2, #10
 8005322:	6839      	ldr	r1, [r7, #0]
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f7fe f83e 	bl	80033a6 <phCryptoSym_Sw_Aes_EncryptBlock>
 800532a:	4603      	mov	r3, r0
 800532c:	81fb      	strh	r3, [r7, #14]
 800532e:	89fb      	ldrh	r3, [r7, #14]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d070      	beq.n	8005416 <phCryptoSym_Sw_EncryptBlock+0x12a>
 8005334:	89fb      	ldrh	r3, [r7, #14]
 8005336:	e07a      	b.n	800542e <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_128));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_AES192:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Aes_EncryptBlock(
 8005338:	220c      	movs	r2, #12
 800533a:	6839      	ldr	r1, [r7, #0]
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f7fe f832 	bl	80033a6 <phCryptoSym_Sw_Aes_EncryptBlock>
 8005342:	4603      	mov	r3, r0
 8005344:	81fb      	strh	r3, [r7, #14]
 8005346:	89fb      	ldrh	r3, [r7, #14]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d066      	beq.n	800541a <phCryptoSym_Sw_EncryptBlock+0x12e>
 800534c:	89fb      	ldrh	r3, [r7, #14]
 800534e:	e06e      	b.n	800542e <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_192));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_AES256:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Aes_EncryptBlock(
 8005350:	220e      	movs	r2, #14
 8005352:	6839      	ldr	r1, [r7, #0]
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f7fe f826 	bl	80033a6 <phCryptoSym_Sw_Aes_EncryptBlock>
 800535a:	4603      	mov	r3, r0
 800535c:	81fb      	strh	r3, [r7, #14]
 800535e:	89fb      	ldrh	r3, [r7, #14]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d05c      	beq.n	800541e <phCryptoSym_Sw_EncryptBlock+0x132>
 8005364:	89fb      	ldrh	r3, [r7, #14]
 8005366:	e062      	b.n	800542e <phCryptoSym_Sw_EncryptBlock+0x142>
            PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_256));
        break;
#endif /* PH_CRYPTOSYM_SW_AES */
#ifdef PH_CRYPTOSYM_SW_DES
    case PH_CRYPTOSYM_KEY_TYPE_DES:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 8005368:	2200      	movs	r2, #0
 800536a:	6839      	ldr	r1, [r7, #0]
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f7fe fdcf 	bl	8003f10 <phCryptoSym_Sw_Des_EncryptBlock>
 8005372:	4603      	mov	r3, r0
 8005374:	81fb      	strh	r3, [r7, #14]
 8005376:	89fb      	ldrh	r3, [r7, #14]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d052      	beq.n	8005422 <phCryptoSym_Sw_EncryptBlock+0x136>
 800537c:	89fb      	ldrh	r3, [r7, #14]
 800537e:	e056      	b.n	800542e <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_2K3DES:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 8005380:	2200      	movs	r2, #0
 8005382:	6839      	ldr	r1, [r7, #0]
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f7fe fdc3 	bl	8003f10 <phCryptoSym_Sw_Des_EncryptBlock>
 800538a:	4603      	mov	r3, r0
 800538c:	81fb      	strh	r3, [r7, #14]
 800538e:	89fb      	ldrh	r3, [r7, #14]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d001      	beq.n	8005398 <phCryptoSym_Sw_EncryptBlock+0xac>
 8005394:	89fb      	ldrh	r3, [r7, #14]
 8005396:	e04a      	b.n	800542e <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 8005398:	2201      	movs	r2, #1
 800539a:	6839      	ldr	r1, [r7, #0]
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f7fe fe05 	bl	8003fac <phCryptoSym_Sw_Des_DecryptBlock>
 80053a2:	4603      	mov	r3, r0
 80053a4:	81fb      	strh	r3, [r7, #14]
 80053a6:	89fb      	ldrh	r3, [r7, #14]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d001      	beq.n	80053b0 <phCryptoSym_Sw_EncryptBlock+0xc4>
 80053ac:	89fb      	ldrh	r3, [r7, #14]
 80053ae:	e03e      	b.n	800542e <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            1));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 80053b0:	2200      	movs	r2, #0
 80053b2:	6839      	ldr	r1, [r7, #0]
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f7fe fdab 	bl	8003f10 <phCryptoSym_Sw_Des_EncryptBlock>
 80053ba:	4603      	mov	r3, r0
 80053bc:	81fb      	strh	r3, [r7, #14]
 80053be:	89fb      	ldrh	r3, [r7, #14]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d030      	beq.n	8005426 <phCryptoSym_Sw_EncryptBlock+0x13a>
 80053c4:	89fb      	ldrh	r3, [r7, #14]
 80053c6:	e032      	b.n	800542e <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_3K3DES:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 80053c8:	2200      	movs	r2, #0
 80053ca:	6839      	ldr	r1, [r7, #0]
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f7fe fd9f 	bl	8003f10 <phCryptoSym_Sw_Des_EncryptBlock>
 80053d2:	4603      	mov	r3, r0
 80053d4:	81fb      	strh	r3, [r7, #14]
 80053d6:	89fb      	ldrh	r3, [r7, #14]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d001      	beq.n	80053e0 <phCryptoSym_Sw_EncryptBlock+0xf4>
 80053dc:	89fb      	ldrh	r3, [r7, #14]
 80053de:	e026      	b.n	800542e <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 80053e0:	2201      	movs	r2, #1
 80053e2:	6839      	ldr	r1, [r7, #0]
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f7fe fde1 	bl	8003fac <phCryptoSym_Sw_Des_DecryptBlock>
 80053ea:	4603      	mov	r3, r0
 80053ec:	81fb      	strh	r3, [r7, #14]
 80053ee:	89fb      	ldrh	r3, [r7, #14]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d001      	beq.n	80053f8 <phCryptoSym_Sw_EncryptBlock+0x10c>
 80053f4:	89fb      	ldrh	r3, [r7, #14]
 80053f6:	e01a      	b.n	800542e <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            1));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 80053f8:	2202      	movs	r2, #2
 80053fa:	6839      	ldr	r1, [r7, #0]
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f7fe fd87 	bl	8003f10 <phCryptoSym_Sw_Des_EncryptBlock>
 8005402:	4603      	mov	r3, r0
 8005404:	81fb      	strh	r3, [r7, #14]
 8005406:	89fb      	ldrh	r3, [r7, #14]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d00e      	beq.n	800542a <phCryptoSym_Sw_EncryptBlock+0x13e>
 800540c:	89fb      	ldrh	r3, [r7, #14]
 800540e:	e00e      	b.n	800542e <phCryptoSym_Sw_EncryptBlock+0x142>
            pBlock,
            2));
        break;
#endif /* PH_CRYPTOSYM_SW_DES */
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 8005410:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8005414:	e00b      	b.n	800542e <phCryptoSym_Sw_EncryptBlock+0x142>
        break;
 8005416:	bf00      	nop
 8005418:	e008      	b.n	800542c <phCryptoSym_Sw_EncryptBlock+0x140>
        break;
 800541a:	bf00      	nop
 800541c:	e006      	b.n	800542c <phCryptoSym_Sw_EncryptBlock+0x140>
        break;
 800541e:	bf00      	nop
 8005420:	e004      	b.n	800542c <phCryptoSym_Sw_EncryptBlock+0x140>
        break;
 8005422:	bf00      	nop
 8005424:	e002      	b.n	800542c <phCryptoSym_Sw_EncryptBlock+0x140>
        break;
 8005426:	bf00      	nop
 8005428:	e000      	b.n	800542c <phCryptoSym_Sw_EncryptBlock+0x140>
        break;
 800542a:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop

08005438 <phCryptoSym_Sw_DecryptBlock>:

phStatus_t phCryptoSym_Sw_DecryptBlock(
                                       phCryptoSym_Sw_DataParams_t * pDataParams,
                                       uint8_t PH_CRYTOSYM_SW_FAST_RAM * pBlock
                                       )
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
    phStatus_t PH_MEMLOC_REM statusTmp;

    switch (pDataParams->wKeyType)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8005446:	2b05      	cmp	r3, #5
 8005448:	f200 8088 	bhi.w	800555c <phCryptoSym_Sw_DecryptBlock+0x124>
 800544c:	a201      	add	r2, pc, #4	@ (adr r2, 8005454 <phCryptoSym_Sw_DecryptBlock+0x1c>)
 800544e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005452:	bf00      	nop
 8005454:	0800546d 	.word	0x0800546d
 8005458:	08005485 	.word	0x08005485
 800545c:	0800549d 	.word	0x0800549d
 8005460:	080054b5 	.word	0x080054b5
 8005464:	080054cd 	.word	0x080054cd
 8005468:	08005515 	.word	0x08005515
    {
#ifdef PH_CRYPTOSYM_SW_AES
    case PH_CRYPTOSYM_KEY_TYPE_AES128:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Aes_DecryptBlock(
 800546c:	220a      	movs	r2, #10
 800546e:	6839      	ldr	r1, [r7, #0]
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f7fe f80b 	bl	800348c <phCryptoSym_Sw_Aes_DecryptBlock>
 8005476:	4603      	mov	r3, r0
 8005478:	81fb      	strh	r3, [r7, #14]
 800547a:	89fb      	ldrh	r3, [r7, #14]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d070      	beq.n	8005562 <phCryptoSym_Sw_DecryptBlock+0x12a>
 8005480:	89fb      	ldrh	r3, [r7, #14]
 8005482:	e07a      	b.n	800557a <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_128));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_AES192:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Aes_DecryptBlock(
 8005484:	220c      	movs	r2, #12
 8005486:	6839      	ldr	r1, [r7, #0]
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f7fd ffff 	bl	800348c <phCryptoSym_Sw_Aes_DecryptBlock>
 800548e:	4603      	mov	r3, r0
 8005490:	81fb      	strh	r3, [r7, #14]
 8005492:	89fb      	ldrh	r3, [r7, #14]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d066      	beq.n	8005566 <phCryptoSym_Sw_DecryptBlock+0x12e>
 8005498:	89fb      	ldrh	r3, [r7, #14]
 800549a:	e06e      	b.n	800557a <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_192));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_AES256:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Aes_DecryptBlock(
 800549c:	220e      	movs	r2, #14
 800549e:	6839      	ldr	r1, [r7, #0]
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f7fd fff3 	bl	800348c <phCryptoSym_Sw_Aes_DecryptBlock>
 80054a6:	4603      	mov	r3, r0
 80054a8:	81fb      	strh	r3, [r7, #14]
 80054aa:	89fb      	ldrh	r3, [r7, #14]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d05c      	beq.n	800556a <phCryptoSym_Sw_DecryptBlock+0x132>
 80054b0:	89fb      	ldrh	r3, [r7, #14]
 80054b2:	e062      	b.n	800557a <phCryptoSym_Sw_DecryptBlock+0x142>
            PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_256));
        break;
#endif /* PH_CRYPTOSYM_SW_AES */
#ifdef PH_CRYPTOSYM_SW_DES
    case PH_CRYPTOSYM_KEY_TYPE_DES:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 80054b4:	2200      	movs	r2, #0
 80054b6:	6839      	ldr	r1, [r7, #0]
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f7fe fd77 	bl	8003fac <phCryptoSym_Sw_Des_DecryptBlock>
 80054be:	4603      	mov	r3, r0
 80054c0:	81fb      	strh	r3, [r7, #14]
 80054c2:	89fb      	ldrh	r3, [r7, #14]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d052      	beq.n	800556e <phCryptoSym_Sw_DecryptBlock+0x136>
 80054c8:	89fb      	ldrh	r3, [r7, #14]
 80054ca:	e056      	b.n	800557a <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_2K3DES:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 80054cc:	2200      	movs	r2, #0
 80054ce:	6839      	ldr	r1, [r7, #0]
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f7fe fd6b 	bl	8003fac <phCryptoSym_Sw_Des_DecryptBlock>
 80054d6:	4603      	mov	r3, r0
 80054d8:	81fb      	strh	r3, [r7, #14]
 80054da:	89fb      	ldrh	r3, [r7, #14]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d001      	beq.n	80054e4 <phCryptoSym_Sw_DecryptBlock+0xac>
 80054e0:	89fb      	ldrh	r3, [r7, #14]
 80054e2:	e04a      	b.n	800557a <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 80054e4:	2201      	movs	r2, #1
 80054e6:	6839      	ldr	r1, [r7, #0]
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f7fe fd11 	bl	8003f10 <phCryptoSym_Sw_Des_EncryptBlock>
 80054ee:	4603      	mov	r3, r0
 80054f0:	81fb      	strh	r3, [r7, #14]
 80054f2:	89fb      	ldrh	r3, [r7, #14]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d001      	beq.n	80054fc <phCryptoSym_Sw_DecryptBlock+0xc4>
 80054f8:	89fb      	ldrh	r3, [r7, #14]
 80054fa:	e03e      	b.n	800557a <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            1));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 80054fc:	2200      	movs	r2, #0
 80054fe:	6839      	ldr	r1, [r7, #0]
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f7fe fd53 	bl	8003fac <phCryptoSym_Sw_Des_DecryptBlock>
 8005506:	4603      	mov	r3, r0
 8005508:	81fb      	strh	r3, [r7, #14]
 800550a:	89fb      	ldrh	r3, [r7, #14]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d030      	beq.n	8005572 <phCryptoSym_Sw_DecryptBlock+0x13a>
 8005510:	89fb      	ldrh	r3, [r7, #14]
 8005512:	e032      	b.n	800557a <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_3K3DES:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 8005514:	2202      	movs	r2, #2
 8005516:	6839      	ldr	r1, [r7, #0]
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f7fe fd47 	bl	8003fac <phCryptoSym_Sw_Des_DecryptBlock>
 800551e:	4603      	mov	r3, r0
 8005520:	81fb      	strh	r3, [r7, #14]
 8005522:	89fb      	ldrh	r3, [r7, #14]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d001      	beq.n	800552c <phCryptoSym_Sw_DecryptBlock+0xf4>
 8005528:	89fb      	ldrh	r3, [r7, #14]
 800552a:	e026      	b.n	800557a <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            2));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 800552c:	2201      	movs	r2, #1
 800552e:	6839      	ldr	r1, [r7, #0]
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f7fe fced 	bl	8003f10 <phCryptoSym_Sw_Des_EncryptBlock>
 8005536:	4603      	mov	r3, r0
 8005538:	81fb      	strh	r3, [r7, #14]
 800553a:	89fb      	ldrh	r3, [r7, #14]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d001      	beq.n	8005544 <phCryptoSym_Sw_DecryptBlock+0x10c>
 8005540:	89fb      	ldrh	r3, [r7, #14]
 8005542:	e01a      	b.n	800557a <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            1));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 8005544:	2200      	movs	r2, #0
 8005546:	6839      	ldr	r1, [r7, #0]
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f7fe fd2f 	bl	8003fac <phCryptoSym_Sw_Des_DecryptBlock>
 800554e:	4603      	mov	r3, r0
 8005550:	81fb      	strh	r3, [r7, #14]
 8005552:	89fb      	ldrh	r3, [r7, #14]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00e      	beq.n	8005576 <phCryptoSym_Sw_DecryptBlock+0x13e>
 8005558:	89fb      	ldrh	r3, [r7, #14]
 800555a:	e00e      	b.n	800557a <phCryptoSym_Sw_DecryptBlock+0x142>
            pBlock,
            0));
        break;
#endif /* PH_CRYPTOSYM_SW_DES */
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 800555c:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8005560:	e00b      	b.n	800557a <phCryptoSym_Sw_DecryptBlock+0x142>
        break;
 8005562:	bf00      	nop
 8005564:	e008      	b.n	8005578 <phCryptoSym_Sw_DecryptBlock+0x140>
        break;
 8005566:	bf00      	nop
 8005568:	e006      	b.n	8005578 <phCryptoSym_Sw_DecryptBlock+0x140>
        break;
 800556a:	bf00      	nop
 800556c:	e004      	b.n	8005578 <phCryptoSym_Sw_DecryptBlock+0x140>
        break;
 800556e:	bf00      	nop
 8005570:	e002      	b.n	8005578 <phCryptoSym_Sw_DecryptBlock+0x140>
        break;
 8005572:	bf00      	nop
 8005574:	e000      	b.n	8005578 <phCryptoSym_Sw_DecryptBlock+0x140>
        break;
 8005576:	bf00      	nop
    }
    return PH_ERR_SUCCESS;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3710      	adds	r7, #16
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop

08005584 <phCryptoSym_Encrypt>:
    return status;
}

phStatus_t phCryptoSym_Encrypt(void * pDataParams, uint16_t wOption, const uint8_t * pPlainBuffer, uint16_t wBufferLength,
    uint8_t * pEncryptedBuffer)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b088      	sub	sp, #32
 8005588:	af02      	add	r7, sp, #8
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	607a      	str	r2, [r7, #4]
 800558e:	461a      	mov	r2, r3
 8005590:	460b      	mov	r3, r1
 8005592:	817b      	strh	r3, [r7, #10]
 8005594:	4613      	mov	r3, r2
 8005596:	813b      	strh	r3, [r7, #8]
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(wBufferLength);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(pEncryptedBuffer);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(status);

    /* Validate the parameters. */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_CRYPTOSYM);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d102      	bne.n	80055a4 <phCryptoSym_Encrypt+0x20>
 800559e:	f24e 1320 	movw	r3, #57632	@ 0xe120
 80055a2:	e02d      	b.n	8005600 <phCryptoSym_Encrypt+0x7c>
    PH_ASSERT_NULL_PARAM(pPlainBuffer, PH_COMP_CRYPTOSYM);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d102      	bne.n	80055b0 <phCryptoSym_Encrypt+0x2c>
 80055aa:	f24e 1321 	movw	r3, #57633	@ 0xe121
 80055ae:	e027      	b.n	8005600 <phCryptoSym_Encrypt+0x7c>
    PH_ASSERT_NULL_PARAM(pEncryptedBuffer, PH_COMP_CRYPTOSYM);
 80055b0:	6a3b      	ldr	r3, [r7, #32]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d102      	bne.n	80055bc <phCryptoSym_Encrypt+0x38>
 80055b6:	f24e 1321 	movw	r3, #57633	@ 0xe121
 80055ba:	e021      	b.n	8005600 <phCryptoSym_Encrypt+0x7c>
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(wBufferLength), &wBufferLength);
    PH_LOG_HELPER_ADDPARAM_BUFFER(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(pPlainBuffer), pPlainBuffer, wBufferLength);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Component Code Validation */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_CRYPTOSYM)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	881b      	ldrh	r3, [r3, #0]
 80055c0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80055c4:	f5b3 4f61 	cmp.w	r3, #57600	@ 0xe100
 80055c8:	d004      	beq.n	80055d4 <phCryptoSym_Encrypt+0x50>
    {
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 80055ca:	f24e 1320 	movw	r3, #57632	@ 0xe120
 80055ce:	82fb      	strh	r3, [r7, #22]

        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

        return status;
 80055d0:	8afb      	ldrh	r3, [r7, #22]
 80055d2:	e015      	b.n	8005600 <phCryptoSym_Encrypt+0x7c>
    }

    /* Perform operation on active layer. */
    switch(PH_GET_COMPID(pDataParams))
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	881b      	ldrh	r3, [r3, #0]
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d10b      	bne.n	80055f6 <phCryptoSym_Encrypt+0x72>
    {
#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        case PH_CRYPTOSYM_SW_ID:
            status = phCryptoSym_Sw_Encrypt((phCryptoSym_Sw_DataParams_t *) pDataParams, wOption, pPlainBuffer, wBufferLength,
 80055de:	893a      	ldrh	r2, [r7, #8]
 80055e0:	8979      	ldrh	r1, [r7, #10]
 80055e2:	6a3b      	ldr	r3, [r7, #32]
 80055e4:	9300      	str	r3, [sp, #0]
 80055e6:	4613      	mov	r3, r2
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	68f8      	ldr	r0, [r7, #12]
 80055ec:	f7fd fb18 	bl	8002c20 <phCryptoSym_Sw_Encrypt>
 80055f0:	4603      	mov	r3, r0
 80055f2:	82fb      	strh	r3, [r7, #22]
                pEncryptedBuffer);
            break;
 80055f4:	e003      	b.n	80055fe <phCryptoSym_Encrypt+0x7a>
                pEncryptedBuffer);
            break;
#endif /* NXPBUILD__PH_CRYPTOSYM_MBEDTLS */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 80055f6:	f24e 1320 	movw	r3, #57632	@ 0xe120
 80055fa:	82fb      	strh	r3, [r7, #22]
            break;
 80055fc:	bf00      	nop
    }
#endif /* NXPBUILD__PH_LOG */
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

    return status;
 80055fe:	8afb      	ldrh	r3, [r7, #22]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3718      	adds	r7, #24
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <phCryptoSym_CalculateMac>:
    return status;
}

phStatus_t phCryptoSym_CalculateMac(void * pDataParams, uint16_t wOption, const uint8_t* pData, uint16_t wDataLength,
    uint8_t * pMac, uint8_t * pMacLength)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b088      	sub	sp, #32
 800560c:	af02      	add	r7, sp, #8
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	607a      	str	r2, [r7, #4]
 8005612:	461a      	mov	r2, r3
 8005614:	460b      	mov	r3, r1
 8005616:	817b      	strh	r3, [r7, #10]
 8005618:	4613      	mov	r3, r2
 800561a:	813b      	strh	r3, [r7, #8]
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(pMac);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(pMacLength);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(status);

    /* Validate the parameters. */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_CRYPTOSYM);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d102      	bne.n	8005628 <phCryptoSym_CalculateMac+0x20>
 8005622:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8005626:	e038      	b.n	800569a <phCryptoSym_CalculateMac+0x92>
    if(wDataLength != 0)
 8005628:	893b      	ldrh	r3, [r7, #8]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d005      	beq.n	800563a <phCryptoSym_CalculateMac+0x32>
    {
        PH_ASSERT_NULL_PARAM(pData, PH_COMP_CRYPTOSYM);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d102      	bne.n	800563a <phCryptoSym_CalculateMac+0x32>
 8005634:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8005638:	e02f      	b.n	800569a <phCryptoSym_CalculateMac+0x92>
    }
    PH_ASSERT_NULL_PARAM(pMac, PH_COMP_CRYPTOSYM);
 800563a:	6a3b      	ldr	r3, [r7, #32]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d102      	bne.n	8005646 <phCryptoSym_CalculateMac+0x3e>
 8005640:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8005644:	e029      	b.n	800569a <phCryptoSym_CalculateMac+0x92>
    PH_ASSERT_NULL_PARAM(pMacLength, PH_COMP_CRYPTOSYM);
 8005646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005648:	2b00      	cmp	r3, #0
 800564a:	d102      	bne.n	8005652 <phCryptoSym_CalculateMac+0x4a>
 800564c:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8005650:	e023      	b.n	800569a <phCryptoSym_CalculateMac+0x92>
    PH_LOG_HELPER_ADDPARAM_BUFFER(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(pData), pData, wDataLength);
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(wDataLength), &wDataLength);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Component Code Validation */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_CRYPTOSYM)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	881b      	ldrh	r3, [r3, #0]
 8005656:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800565a:	f5b3 4f61 	cmp.w	r3, #57600	@ 0xe100
 800565e:	d004      	beq.n	800566a <phCryptoSym_CalculateMac+0x62>
    {
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 8005660:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8005664:	82fb      	strh	r3, [r7, #22]

        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

        return status;
 8005666:	8afb      	ldrh	r3, [r7, #22]
 8005668:	e017      	b.n	800569a <phCryptoSym_CalculateMac+0x92>
    }

    /* Perform operation on active layer. */
    switch(PH_GET_COMPID(pDataParams))
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	881b      	ldrh	r3, [r3, #0]
 800566e:	b2db      	uxtb	r3, r3
 8005670:	2b01      	cmp	r3, #1
 8005672:	d10d      	bne.n	8005690 <phCryptoSym_CalculateMac+0x88>
    {
#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        case PH_CRYPTOSYM_SW_ID:
            status = phCryptoSym_Sw_CalculateMac((phCryptoSym_Sw_DataParams_t *) pDataParams, wOption, pData, wDataLength,
 8005674:	893a      	ldrh	r2, [r7, #8]
 8005676:	8979      	ldrh	r1, [r7, #10]
 8005678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567a:	9301      	str	r3, [sp, #4]
 800567c:	6a3b      	ldr	r3, [r7, #32]
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	4613      	mov	r3, r2
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f7fd fb89 	bl	8002d9c <phCryptoSym_Sw_CalculateMac>
 800568a:	4603      	mov	r3, r0
 800568c:	82fb      	strh	r3, [r7, #22]
                pMac, pMacLength);
            break;
 800568e:	e003      	b.n	8005698 <phCryptoSym_CalculateMac+0x90>
                pMac, pMacLength);
            break;
#endif /* NXPBUILD__PH_CRYPTOSYM_MBEDTLS */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 8005690:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8005694:	82fb      	strh	r3, [r7, #22]
            break;
 8005696:	bf00      	nop
    }
#endif /* NXPBUILD__PH_LOG */
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

    return status;
 8005698:	8afb      	ldrh	r3, [r7, #22]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3718      	adds	r7, #24
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <phCryptoSym_LoadIv>:

phStatus_t phCryptoSym_LoadIv(void * pDataParams, const uint8_t * pIV, uint8_t bIVLength)
{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b086      	sub	sp, #24
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	60f8      	str	r0, [r7, #12]
 80056aa:	60b9      	str	r1, [r7, #8]
 80056ac:	4613      	mov	r3, r2
 80056ae:	71fb      	strb	r3, [r7, #7]
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(pIV);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(bIVLength);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(status);

    /* Validate the parameters. */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_CRYPTOSYM);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d102      	bne.n	80056bc <phCryptoSym_LoadIv+0x1a>
 80056b6:	f24e 1320 	movw	r3, #57632	@ 0xe120
 80056ba:	e024      	b.n	8005706 <phCryptoSym_LoadIv+0x64>
    PH_ASSERT_NULL_PARAM(pIV, PH_COMP_CRYPTOSYM);
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d102      	bne.n	80056c8 <phCryptoSym_LoadIv+0x26>
 80056c2:	f24e 1321 	movw	r3, #57633	@ 0xe121
 80056c6:	e01e      	b.n	8005706 <phCryptoSym_LoadIv+0x64>
    PH_LOG_HELPER_ADDPARAM_BUFFER(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(pIV), pIV, bIVLength);
    PH_LOG_HELPER_ADDPARAM_UINT8(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(bIVLength), &bIVLength);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Component Code Validation */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_CRYPTOSYM)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	881b      	ldrh	r3, [r3, #0]
 80056cc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80056d0:	f5b3 4f61 	cmp.w	r3, #57600	@ 0xe100
 80056d4:	d004      	beq.n	80056e0 <phCryptoSym_LoadIv+0x3e>
    {
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 80056d6:	f24e 1320 	movw	r3, #57632	@ 0xe120
 80056da:	82fb      	strh	r3, [r7, #22]

        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

        return status;
 80056dc:	8afb      	ldrh	r3, [r7, #22]
 80056de:	e012      	b.n	8005706 <phCryptoSym_LoadIv+0x64>
    }

    /* Perform operation on active layer. */
    switch(PH_GET_COMPID(pDataParams))
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	881b      	ldrh	r3, [r3, #0]
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d108      	bne.n	80056fc <phCryptoSym_LoadIv+0x5a>
    {
#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        case PH_CRYPTOSYM_SW_ID:
            status = phCryptoSym_Sw_LoadIv((phCryptoSym_Sw_DataParams_t *) pDataParams, pIV, bIVLength);
 80056ea:	79fb      	ldrb	r3, [r7, #7]
 80056ec:	461a      	mov	r2, r3
 80056ee:	68b9      	ldr	r1, [r7, #8]
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f7fd fd11 	bl	8003118 <phCryptoSym_Sw_LoadIv>
 80056f6:	4603      	mov	r3, r0
 80056f8:	82fb      	strh	r3, [r7, #22]
            break;
 80056fa:	e003      	b.n	8005704 <phCryptoSym_LoadIv+0x62>
            status = phCryptoSym_mBedTLS_LoadIv((phCryptoSym_mBedTLS_DataParams_t *) pDataParams, pIV, bIVLength);
            break;
#endif /* NXPBUILD__PH_CRYPTOSYM_MBEDTLS */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 80056fc:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8005700:	82fb      	strh	r3, [r7, #22]
            break;
 8005702:	bf00      	nop

    PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

    return status;
 8005704:	8afb      	ldrh	r3, [r7, #22]
}
 8005706:	4618      	mov	r0, r3
 8005708:	3718      	adds	r7, #24
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <phCryptoSym_LoadKeyDirect>:

    return status;
}

phStatus_t phCryptoSym_LoadKeyDirect(void * pDataParams, const uint8_t * pKey, uint16_t wKeyType)
{
 800570e:	b580      	push	{r7, lr}
 8005710:	b086      	sub	sp, #24
 8005712:	af00      	add	r7, sp, #0
 8005714:	60f8      	str	r0, [r7, #12]
 8005716:	60b9      	str	r1, [r7, #8]
 8005718:	4613      	mov	r3, r2
 800571a:	80fb      	strh	r3, [r7, #6]
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(pKey);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(wKeyType);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(status);

    /* Validate the parameters. */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_CRYPTOSYM);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d102      	bne.n	8005728 <phCryptoSym_LoadKeyDirect+0x1a>
 8005722:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8005726:	e024      	b.n	8005772 <phCryptoSym_LoadKeyDirect+0x64>
    PH_ASSERT_NULL_PARAM(pKey, PH_COMP_CRYPTOSYM);
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d102      	bne.n	8005734 <phCryptoSym_LoadKeyDirect+0x26>
 800572e:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8005732:	e01e      	b.n	8005772 <phCryptoSym_LoadKeyDirect+0x64>
    PH_LOG_HELPER_ADDPARAM_BUFFER(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(pKey), pKey, phCryptoSym_GetKeySize(wKeyType));
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(wKeyType), &wKeyType);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Component Code Validation */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_CRYPTOSYM)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	881b      	ldrh	r3, [r3, #0]
 8005738:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800573c:	f5b3 4f61 	cmp.w	r3, #57600	@ 0xe100
 8005740:	d004      	beq.n	800574c <phCryptoSym_LoadKeyDirect+0x3e>
    {
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 8005742:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8005746:	82fb      	strh	r3, [r7, #22]

        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

        return status;
 8005748:	8afb      	ldrh	r3, [r7, #22]
 800574a:	e012      	b.n	8005772 <phCryptoSym_LoadKeyDirect+0x64>
    }

    /* Perform operation on active layer. */
    switch(PH_GET_COMPID(pDataParams))
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	881b      	ldrh	r3, [r3, #0]
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b01      	cmp	r3, #1
 8005754:	d108      	bne.n	8005768 <phCryptoSym_LoadKeyDirect+0x5a>
    {
#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        case PH_CRYPTOSYM_SW_ID:
            status = phCryptoSym_Sw_LoadKeyDirect((phCryptoSym_Sw_DataParams_t *) pDataParams, pKey, wKeyType);
 8005756:	88fb      	ldrh	r3, [r7, #6]
 8005758:	461a      	mov	r2, r3
 800575a:	68b9      	ldr	r1, [r7, #8]
 800575c:	68f8      	ldr	r0, [r7, #12]
 800575e:	f7fd fd09 	bl	8003174 <phCryptoSym_Sw_LoadKeyDirect>
 8005762:	4603      	mov	r3, r0
 8005764:	82fb      	strh	r3, [r7, #22]
            break;
 8005766:	e003      	b.n	8005770 <phCryptoSym_LoadKeyDirect+0x62>
            status = phCryptoSym_mBedTLS_LoadKeyDirect((phCryptoSym_mBedTLS_DataParams_t *) pDataParams, pKey, wKeyType);
            break;
#endif /* NXPBUILD__PH_CRYPTOSYM_MBEDTLS */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 8005768:	f24e 1320 	movw	r3, #57632	@ 0xe120
 800576c:	82fb      	strh	r3, [r7, #22]
            break;
 800576e:	bf00      	nop

    PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

    return status;
 8005770:	8afb      	ldrh	r3, [r7, #22]
}
 8005772:	4618      	mov	r0, r3
 8005774:	3718      	adds	r7, #24
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <phKeyStore_Sw_Init>:
#include "phKeyStore_Sw_Int.h"

phStatus_t phKeyStore_Sw_Init(phKeyStore_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, phKeyStore_Sw_KeyEntry_t * pKeyEntries,
    uint16_t wNoOfKeyEntries, phKeyStore_Sw_KeyVersionPair_t * pKeyVersionPairs, uint16_t wNoOfVersionPairs, phKeyStore_Sw_KUCEntry_t * pKUCEntries,
    uint16_t wNoOfKUCEntries)
{
 800577a:	b580      	push	{r7, lr}
 800577c:	b088      	sub	sp, #32
 800577e:	af00      	add	r7, sp, #0
 8005780:	60f8      	str	r0, [r7, #12]
 8005782:	607a      	str	r2, [r7, #4]
 8005784:	461a      	mov	r2, r3
 8005786:	460b      	mov	r3, r1
 8005788:	817b      	strh	r3, [r7, #10]
 800578a:	4613      	mov	r3, r2
 800578c:	813b      	strh	r3, [r7, #8]
    uint16_t wEntryIndex;
    uint16_t wPos;
    phStatus_t wStatus;
    phKeyStore_Sw_KeyVersionPair_t * pKeyVersion;

    if(sizeof(phKeyStore_Sw_DataParams_t) != wSizeOfDataParams)
 800578e:	897b      	ldrh	r3, [r7, #10]
 8005790:	2b18      	cmp	r3, #24
 8005792:	d002      	beq.n	800579a <phKeyStore_Sw_Init+0x20>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_KEYSTORE);
 8005794:	f24e 2320 	movw	r3, #57888	@ 0xe220
 8005798:	e07b      	b.n	8005892 <phKeyStore_Sw_Init+0x118>
    }
    PH_ASSERT_NULL(pDataParams);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d101      	bne.n	80057a4 <phKeyStore_Sw_Init+0x2a>
 80057a0:	2321      	movs	r3, #33	@ 0x21
 80057a2:	e076      	b.n	8005892 <phKeyStore_Sw_Init+0x118>
    PH_ASSERT_NULL(pKeyEntries);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d101      	bne.n	80057ae <phKeyStore_Sw_Init+0x34>
 80057aa:	2321      	movs	r3, #33	@ 0x21
 80057ac:	e071      	b.n	8005892 <phKeyStore_Sw_Init+0x118>
    PH_ASSERT_NULL(pKeyVersionPairs);
 80057ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d101      	bne.n	80057b8 <phKeyStore_Sw_Init+0x3e>
 80057b4:	2321      	movs	r3, #33	@ 0x21
 80057b6:	e06c      	b.n	8005892 <phKeyStore_Sw_Init+0x118>
    PH_ASSERT_NULL(pKUCEntries);
 80057b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d101      	bne.n	80057c2 <phKeyStore_Sw_Init+0x48>
 80057be:	2321      	movs	r3, #33	@ 0x21
 80057c0:	e067      	b.n	8005892 <phKeyStore_Sw_Init+0x118>

    /* Init private data */
    pDataParams->wId = PH_COMP_KEYSTORE | PH_KEYSTORE_SW_ID;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f24e 2201 	movw	r2, #57857	@ 0xe201
 80057c8:	801a      	strh	r2, [r3, #0]
    pDataParams->pKeyEntries = pKeyEntries;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyVersionPairs = pKeyVersionPairs;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057d4:	609a      	str	r2, [r3, #8]
    pDataParams->wNoOfKeyEntries = wNoOfKeyEntries;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	893a      	ldrh	r2, [r7, #8]
 80057da:	819a      	strh	r2, [r3, #12]
    pDataParams->wNoOfVersions = wNoOfVersionPairs;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80057e0:	81da      	strh	r2, [r3, #14]
    pDataParams->pKUCEntries = pKUCEntries;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057e6:	611a      	str	r2, [r3, #16]
    pDataParams->wNoOfKUCEntries = wNoOfKUCEntries;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80057ec:	829a      	strh	r2, [r3, #20]

    for(wEntryIndex = 0; wEntryIndex < pDataParams->wNoOfKeyEntries; wEntryIndex++)
 80057ee:	2300      	movs	r3, #0
 80057f0:	83fb      	strh	r3, [r7, #30]
 80057f2:	e02e      	b.n	8005852 <phKeyStore_Sw_Init+0xd8>
    {
        pDataParams->pKeyEntries[wEntryIndex].wKeyType = PH_KEYSTORE_INVALID_ID;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	685a      	ldr	r2, [r3, #4]
 80057f8:	8bfb      	ldrh	r3, [r7, #30]
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005802:	801a      	strh	r2, [r3, #0]
        pDataParams->pKeyEntries[wEntryIndex].wRefNoKUC = PH_KEYSTORE_INVALID_ID;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	685a      	ldr	r2, [r3, #4]
 8005808:	8bfb      	ldrh	r3, [r7, #30]
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	4413      	add	r3, r2
 800580e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005812:	805a      	strh	r2, [r3, #2]

        for(wPos = 0; wPos < pDataParams->wNoOfVersions; wPos++)
 8005814:	2300      	movs	r3, #0
 8005816:	83bb      	strh	r3, [r7, #28]
 8005818:	e013      	b.n	8005842 <phKeyStore_Sw_Init+0xc8>
        {
            PH_CHECK_SUCCESS_FCT(wStatus, phKeyStore_Sw_GetKeyValuePtrPos(pDataParams, wEntryIndex, wPos, &pKeyVersion));
 800581a:	f107 0314 	add.w	r3, r7, #20
 800581e:	8bba      	ldrh	r2, [r7, #28]
 8005820:	8bf9      	ldrh	r1, [r7, #30]
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f000 f90a 	bl	8005a3c <phKeyStore_Sw_GetKeyValuePtrPos>
 8005828:	4603      	mov	r3, r0
 800582a:	837b      	strh	r3, [r7, #26]
 800582c:	8b7b      	ldrh	r3, [r7, #26]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d001      	beq.n	8005836 <phKeyStore_Sw_Init+0xbc>
 8005832:	8b7b      	ldrh	r3, [r7, #26]
 8005834:	e02d      	b.n	8005892 <phKeyStore_Sw_Init+0x118>
            pKeyVersion->wVersion = PH_KEYSTORE_DEFAULT_ID;
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	2200      	movs	r2, #0
 800583a:	841a      	strh	r2, [r3, #32]
        for(wPos = 0; wPos < pDataParams->wNoOfVersions; wPos++)
 800583c:	8bbb      	ldrh	r3, [r7, #28]
 800583e:	3301      	adds	r3, #1
 8005840:	83bb      	strh	r3, [r7, #28]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	89db      	ldrh	r3, [r3, #14]
 8005846:	8bba      	ldrh	r2, [r7, #28]
 8005848:	429a      	cmp	r2, r3
 800584a:	d3e6      	bcc.n	800581a <phKeyStore_Sw_Init+0xa0>
    for(wEntryIndex = 0; wEntryIndex < pDataParams->wNoOfKeyEntries; wEntryIndex++)
 800584c:	8bfb      	ldrh	r3, [r7, #30]
 800584e:	3301      	adds	r3, #1
 8005850:	83fb      	strh	r3, [r7, #30]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	899b      	ldrh	r3, [r3, #12]
 8005856:	8bfa      	ldrh	r2, [r7, #30]
 8005858:	429a      	cmp	r2, r3
 800585a:	d3cb      	bcc.n	80057f4 <phKeyStore_Sw_Init+0x7a>
#endif /* NXPBUILD__PH_KEYSTORE_ASYM */

        }
    }

    for(wEntryIndex = 0; wEntryIndex < pDataParams->wNoOfKUCEntries; wEntryIndex++)
 800585c:	2300      	movs	r3, #0
 800585e:	83fb      	strh	r3, [r7, #30]
 8005860:	e011      	b.n	8005886 <phKeyStore_Sw_Init+0x10c>
    {
        pDataParams->pKUCEntries[wEntryIndex].dwLimit = 0xFFFFFFFFU;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	691a      	ldr	r2, [r3, #16]
 8005866:	8bfb      	ldrh	r3, [r7, #30]
 8005868:	00db      	lsls	r3, r3, #3
 800586a:	4413      	add	r3, r2
 800586c:	f04f 32ff 	mov.w	r2, #4294967295
 8005870:	601a      	str	r2, [r3, #0]
        pDataParams->pKUCEntries[wEntryIndex].dwCurVal = 0;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	691a      	ldr	r2, [r3, #16]
 8005876:	8bfb      	ldrh	r3, [r7, #30]
 8005878:	00db      	lsls	r3, r3, #3
 800587a:	4413      	add	r3, r2
 800587c:	2200      	movs	r2, #0
 800587e:	605a      	str	r2, [r3, #4]
    for(wEntryIndex = 0; wEntryIndex < pDataParams->wNoOfKUCEntries; wEntryIndex++)
 8005880:	8bfb      	ldrh	r3, [r7, #30]
 8005882:	3301      	adds	r3, #1
 8005884:	83fb      	strh	r3, [r7, #30]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	8a9b      	ldrh	r3, [r3, #20]
 800588a:	8bfa      	ldrh	r2, [r7, #30]
 800588c:	429a      	cmp	r2, r3
 800588e:	d3e8      	bcc.n	8005862 <phKeyStore_Sw_Init+0xe8>
    }

    return PH_ERR_SUCCESS;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3720      	adds	r7, #32
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <phKeyStore_Sw_FormatKeyEntry>:

/* Common Interfaces ------------------------------------------------------------------------------------------------------------------- */
phStatus_t phKeyStore_Sw_FormatKeyEntry(phKeyStore_Sw_DataParams_t * pDataParams, uint16_t wKeyNo, uint16_t wNewKeyType)
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b084      	sub	sp, #16
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
 80058a2:	460b      	mov	r3, r1
 80058a4:	807b      	strh	r3, [r7, #2]
 80058a6:	4613      	mov	r3, r2
 80058a8:	803b      	strh	r3, [r7, #0]
    phStatus_t wStatus;
    uint16_t   wPos;
    phKeyStore_Sw_KeyVersionPair_t * pKeyPair;
    /* Overflow checks */
    if(wKeyNo >= pDataParams->wNoOfKeyEntries)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	899b      	ldrh	r3, [r3, #12]
 80058ae:	887a      	ldrh	r2, [r7, #2]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d302      	bcc.n	80058ba <phKeyStore_Sw_FormatKeyEntry+0x20>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 80058b4:	f24e 2321 	movw	r3, #57889	@ 0xe221
 80058b8:	e038      	b.n	800592c <phKeyStore_Sw_FormatKeyEntry+0x92>
    }

    switch(wNewKeyType)
 80058ba:	883b      	ldrh	r3, [r7, #0]
 80058bc:	2b06      	cmp	r3, #6
 80058be:	d902      	bls.n	80058c6 <phKeyStore_Sw_FormatKeyEntry+0x2c>
        case PH_KEYSTORE_KEY_TYPE_ECC:
            break;
#endif /* NXPBUILD__PH_KEYSTORE_ASYM */

        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 80058c0:	f24e 2321 	movw	r3, #57889	@ 0xe221
 80058c4:	e032      	b.n	800592c <phKeyStore_Sw_FormatKeyEntry+0x92>
            break;
 80058c6:	bf00      	nop
    }

    pDataParams->pKeyEntries[wKeyNo].wKeyType = wNewKeyType;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685a      	ldr	r2, [r3, #4]
 80058cc:	887b      	ldrh	r3, [r7, #2]
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	4413      	add	r3, r2
 80058d2:	883a      	ldrh	r2, [r7, #0]
 80058d4:	801a      	strh	r2, [r3, #0]

    /* Reset CEK to master Key */
    pDataParams->pKeyEntries[wKeyNo].wRefNoKUC = PH_KEYSTORE_INVALID_ID;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	685a      	ldr	r2, [r3, #4]
 80058da:	887b      	ldrh	r3, [r7, #2]
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4413      	add	r3, r2
 80058e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80058e4:	805a      	strh	r2, [r3, #2]

    /* Reset all keys to 0x00*/
    for(wPos = 0; wPos < pDataParams->wNoOfVersions; ++wPos)
 80058e6:	2300      	movs	r3, #0
 80058e8:	81fb      	strh	r3, [r7, #14]
 80058ea:	e019      	b.n	8005920 <phKeyStore_Sw_FormatKeyEntry+0x86>
    {
        PH_CHECK_SUCCESS_FCT(wStatus, phKeyStore_Sw_GetKeyValuePtrPos(pDataParams, wKeyNo, wPos, &pKeyPair));
 80058ec:	f107 0308 	add.w	r3, r7, #8
 80058f0:	89fa      	ldrh	r2, [r7, #14]
 80058f2:	8879      	ldrh	r1, [r7, #2]
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 f8a1 	bl	8005a3c <phKeyStore_Sw_GetKeyValuePtrPos>
 80058fa:	4603      	mov	r3, r0
 80058fc:	81bb      	strh	r3, [r7, #12]
 80058fe:	89bb      	ldrh	r3, [r7, #12]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d001      	beq.n	8005908 <phKeyStore_Sw_FormatKeyEntry+0x6e>
 8005904:	89bb      	ldrh	r3, [r7, #12]
 8005906:	e011      	b.n	800592c <phKeyStore_Sw_FormatKeyEntry+0x92>
        pKeyPair->wVersion = 0;
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	2200      	movs	r2, #0
 800590c:	841a      	strh	r2, [r3, #32]

        (void) memset(pKeyPair->pKey, 0x00, PH_KEYSTORE_MAX_KEY_SIZE);
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	2220      	movs	r2, #32
 8005912:	2100      	movs	r1, #0
 8005914:	4618      	mov	r0, r3
 8005916:	f017 fbf3 	bl	801d100 <memset>
    for(wPos = 0; wPos < pDataParams->wNoOfVersions; ++wPos)
 800591a:	89fb      	ldrh	r3, [r7, #14]
 800591c:	3301      	adds	r3, #1
 800591e:	81fb      	strh	r3, [r7, #14]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	89db      	ldrh	r3, [r3, #14]
 8005924:	89fa      	ldrh	r2, [r7, #14]
 8005926:	429a      	cmp	r2, r3
 8005928:	d3e0      	bcc.n	80058ec <phKeyStore_Sw_FormatKeyEntry+0x52>
        pKeyPair->wKeyPairType = PH_KEYSTORE_KEY_PAIR_INVALID;
        (void) memset(pKeyPair->pPubKey, 0x00, sizeof(pKeyPair->pPubKey));
#endif /* NXPBUILD__PH_KEYSTORE_ASYM */
    }

    return PH_ERR_SUCCESS;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <phKeyStore_Sw_SetKey>:
}

/* Interfaces for Symmetric Keys ------------------------------------------------------------------------------------------------------- */
phStatus_t phKeyStore_Sw_SetKey(phKeyStore_Sw_DataParams_t * pDataParams, uint16_t wKeyNo, uint16_t wKeyVer,
    uint16_t wKeyType, uint8_t * pNewKey, uint16_t wNewKeyVer)
{
 8005934:	b590      	push	{r4, r7, lr}
 8005936:	b087      	sub	sp, #28
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	4608      	mov	r0, r1
 800593e:	4611      	mov	r1, r2
 8005940:	461a      	mov	r2, r3
 8005942:	4603      	mov	r3, r0
 8005944:	817b      	strh	r3, [r7, #10]
 8005946:	460b      	mov	r3, r1
 8005948:	813b      	strh	r3, [r7, #8]
 800594a:	4613      	mov	r3, r2
 800594c:	80fb      	strh	r3, [r7, #6]
    phStatus_t wStatus;
    phKeyStore_Sw_KeyVersionPair_t * pKeyVer;
    PH_CHECK_SUCCESS_FCT(wStatus, phKeyStore_Sw_GetKeyValuePtrVersion(pDataParams, wKeyNo, wKeyVer, &pKeyVer));
 800594e:	f107 0310 	add.w	r3, r7, #16
 8005952:	893a      	ldrh	r2, [r7, #8]
 8005954:	8979      	ldrh	r1, [r7, #10]
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f000 f827 	bl	80059aa <phKeyStore_Sw_GetKeyValuePtrVersion>
 800595c:	4603      	mov	r3, r0
 800595e:	82fb      	strh	r3, [r7, #22]
 8005960:	8afb      	ldrh	r3, [r7, #22]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d001      	beq.n	800596a <phKeyStore_Sw_SetKey+0x36>
 8005966:	8afb      	ldrh	r3, [r7, #22]
 8005968:	e01b      	b.n	80059a2 <phKeyStore_Sw_SetKey+0x6e>

    /* Check that Key type matches with current Key Type format */
    if(pDataParams->pKeyEntries[wKeyNo].wKeyType != wKeyType)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	685a      	ldr	r2, [r3, #4]
 800596e:	897b      	ldrh	r3, [r7, #10]
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4413      	add	r3, r2
 8005974:	881b      	ldrh	r3, [r3, #0]
 8005976:	88fa      	ldrh	r2, [r7, #6]
 8005978:	429a      	cmp	r2, r3
 800597a:	d002      	beq.n	8005982 <phKeyStore_Sw_SetKey+0x4e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 800597c:	f24e 2321 	movw	r3, #57889	@ 0xe221
 8005980:	e00f      	b.n	80059a2 <phKeyStore_Sw_SetKey+0x6e>
    }

    /* copy the key and version */
    (void) memcpy(pKeyVer->pKey, pNewKey, phKeyStore_GetKeySize(wKeyType));
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	461c      	mov	r4, r3
 8005986:	88fb      	ldrh	r3, [r7, #6]
 8005988:	4618      	mov	r0, r3
 800598a:	f000 f88d 	bl	8005aa8 <phKeyStore_GetKeySize>
 800598e:	4603      	mov	r3, r0
 8005990:	461a      	mov	r2, r3
 8005992:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005994:	4620      	mov	r0, r4
 8005996:	f017 fc32 	bl	801d1fe <memcpy>
    pKeyVer->wVersion = wNewKeyVer;
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800599e:	841a      	strh	r2, [r3, #32]

    return PH_ERR_SUCCESS;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	371c      	adds	r7, #28
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd90      	pop	{r4, r7, pc}

080059aa <phKeyStore_Sw_GetKeyValuePtrVersion>:
    return PH_ERR_SUCCESS;
}

phStatus_t phKeyStore_Sw_GetKeyValuePtrVersion(phKeyStore_Sw_DataParams_t * pDataParams, uint16_t wKeyNo, uint16_t wKeyVer,
    phKeyStore_Sw_KeyVersionPair_t ** pKeyVer)
{
 80059aa:	b480      	push	{r7}
 80059ac:	b087      	sub	sp, #28
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	60f8      	str	r0, [r7, #12]
 80059b2:	607b      	str	r3, [r7, #4]
 80059b4:	460b      	mov	r3, r1
 80059b6:	817b      	strh	r3, [r7, #10]
 80059b8:	4613      	mov	r3, r2
 80059ba:	813b      	strh	r3, [r7, #8]
    uint16_t bPos;
    *pKeyVer = NULL;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	601a      	str	r2, [r3, #0]
    /* Overflow checks */
    if(wKeyNo >= pDataParams->wNoOfKeyEntries)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	899b      	ldrh	r3, [r3, #12]
 80059c6:	897a      	ldrh	r2, [r7, #10]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d302      	bcc.n	80059d2 <phKeyStore_Sw_GetKeyValuePtrVersion+0x28>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 80059cc:	f24e 2321 	movw	r3, #57889	@ 0xe221
 80059d0:	e02e      	b.n	8005a30 <phKeyStore_Sw_GetKeyValuePtrVersion+0x86>
    }

    for(bPos = 0; bPos < pDataParams->wNoOfVersions; bPos++)
 80059d2:	2300      	movs	r3, #0
 80059d4:	82fb      	strh	r3, [r7, #22]
 80059d6:	e01b      	b.n	8005a10 <phKeyStore_Sw_GetKeyValuePtrVersion+0x66>
    {
        *pKeyVer = &pDataParams->pKeyVersionPairs[(((uint16_t)(((uint32_t)wKeyNo * pDataParams->wNoOfVersions)) & 0xFFFF) + bPos)];
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	689a      	ldr	r2, [r3, #8]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	89db      	ldrh	r3, [r3, #14]
 80059e0:	8979      	ldrh	r1, [r7, #10]
 80059e2:	fb11 f303 	smulbb	r3, r1, r3
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	4619      	mov	r1, r3
 80059ea:	8afb      	ldrh	r3, [r7, #22]
 80059ec:	440b      	add	r3, r1
 80059ee:	4619      	mov	r1, r3
 80059f0:	460b      	mov	r3, r1
 80059f2:	011b      	lsls	r3, r3, #4
 80059f4:	440b      	add	r3, r1
 80059f6:	005b      	lsls	r3, r3, #1
 80059f8:	441a      	add	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	601a      	str	r2, [r3, #0]
        if((*pKeyVer)->wVersion == wKeyVer)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	8c1b      	ldrh	r3, [r3, #32]
 8005a04:	893a      	ldrh	r2, [r7, #8]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d008      	beq.n	8005a1c <phKeyStore_Sw_GetKeyValuePtrVersion+0x72>
    for(bPos = 0; bPos < pDataParams->wNoOfVersions; bPos++)
 8005a0a:	8afb      	ldrh	r3, [r7, #22]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	82fb      	strh	r3, [r7, #22]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	89db      	ldrh	r3, [r3, #14]
 8005a14:	8afa      	ldrh	r2, [r7, #22]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d3de      	bcc.n	80059d8 <phKeyStore_Sw_GetKeyValuePtrVersion+0x2e>
 8005a1a:	e000      	b.n	8005a1e <phKeyStore_Sw_GetKeyValuePtrVersion+0x74>
        {
            break;
 8005a1c:	bf00      	nop
        }
    }
    /* No entry found */
    if(bPos == pDataParams->wNoOfVersions)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	89db      	ldrh	r3, [r3, #14]
 8005a22:	8afa      	ldrh	r2, [r7, #22]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d102      	bne.n	8005a2e <phKeyStore_Sw_GetKeyValuePtrVersion+0x84>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 8005a28:	f24e 2321 	movw	r3, #57889	@ 0xe221
 8005a2c:	e000      	b.n	8005a30 <phKeyStore_Sw_GetKeyValuePtrVersion+0x86>
    }
    return PH_ERR_SUCCESS;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	371c      	adds	r7, #28
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <phKeyStore_Sw_GetKeyValuePtrPos>:
}
#endif /* NXPBUILD__PH_KEYSTORE_ASYM */

phStatus_t phKeyStore_Sw_GetKeyValuePtrPos(phKeyStore_Sw_DataParams_t * pDataParams, uint16_t wKeyNo, uint16_t wPos,
    phKeyStore_Sw_KeyVersionPair_t ** pKeyVersion)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	607b      	str	r3, [r7, #4]
 8005a46:	460b      	mov	r3, r1
 8005a48:	817b      	strh	r3, [r7, #10]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	813b      	strh	r3, [r7, #8]
    *pKeyVersion = NULL;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	601a      	str	r2, [r3, #0]
    /* Overflow checks */
    if(wKeyNo >= pDataParams->wNoOfKeyEntries)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	899b      	ldrh	r3, [r3, #12]
 8005a58:	897a      	ldrh	r2, [r7, #10]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d302      	bcc.n	8005a64 <phKeyStore_Sw_GetKeyValuePtrPos+0x28>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 8005a5e:	f24e 2321 	movw	r3, #57889	@ 0xe221
 8005a62:	e01b      	b.n	8005a9c <phKeyStore_Sw_GetKeyValuePtrPos+0x60>
    }

    /* Overflow checks */
    if(wPos >= pDataParams->wNoOfVersions)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	89db      	ldrh	r3, [r3, #14]
 8005a68:	893a      	ldrh	r2, [r7, #8]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d302      	bcc.n	8005a74 <phKeyStore_Sw_GetKeyValuePtrPos+0x38>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 8005a6e:	f24e 2321 	movw	r3, #57889	@ 0xe221
 8005a72:	e013      	b.n	8005a9c <phKeyStore_Sw_GetKeyValuePtrPos+0x60>
    }

    *pKeyVersion = &pDataParams->pKeyVersionPairs[(((uint16_t)(((uint32_t)wKeyNo * pDataParams->wNoOfVersions)) & 0xFFFF) + wPos)];
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	689a      	ldr	r2, [r3, #8]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	89db      	ldrh	r3, [r3, #14]
 8005a7c:	8979      	ldrh	r1, [r7, #10]
 8005a7e:	fb11 f303 	smulbb	r3, r1, r3
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	4619      	mov	r1, r3
 8005a86:	893b      	ldrh	r3, [r7, #8]
 8005a88:	440b      	add	r3, r1
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	011b      	lsls	r3, r3, #4
 8005a90:	440b      	add	r3, r1
 8005a92:	005b      	lsls	r3, r3, #1
 8005a94:	441a      	add	r2, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	601a      	str	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3714      	adds	r7, #20
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <phKeyStore_GetKeySize>:
#endif /* NXPBUILD__PH_KEYSTORE_ASYM */
#endif /* NXPRDLIB_REM_GEN_INTFS  */

/* Utility Interfaces ------------------------------------------------------------------------------------------------------------------ */
uint8_t phKeyStore_GetKeySize(uint16_t wKeyType)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	4603      	mov	r3, r0
 8005ab0:	80fb      	strh	r3, [r7, #6]
    switch(wKeyType)
 8005ab2:	88fb      	ldrh	r3, [r7, #6]
 8005ab4:	2b06      	cmp	r3, #6
 8005ab6:	d81b      	bhi.n	8005af0 <phKeyStore_GetKeySize+0x48>
 8005ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8005ac0 <phKeyStore_GetKeySize+0x18>)
 8005aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005abe:	bf00      	nop
 8005ac0:	08005ae5 	.word	0x08005ae5
 8005ac4:	08005ae9 	.word	0x08005ae9
 8005ac8:	08005aed 	.word	0x08005aed
 8005acc:	08005ae1 	.word	0x08005ae1
 8005ad0:	08005ae5 	.word	0x08005ae5
 8005ad4:	08005ae9 	.word	0x08005ae9
 8005ad8:	08005add 	.word	0x08005add
    {
        case PH_KEYSTORE_KEY_TYPE_MIFARE:
            /* 6 bytes for key A + 6 bytes for key B */
            return 12;
 8005adc:	230c      	movs	r3, #12
 8005ade:	e008      	b.n	8005af2 <phKeyStore_GetKeySize+0x4a>

        case PH_KEYSTORE_KEY_TYPE_DES:
            return 8;
 8005ae0:	2308      	movs	r3, #8
 8005ae2:	e006      	b.n	8005af2 <phKeyStore_GetKeySize+0x4a>

        case PH_KEYSTORE_KEY_TYPE_2K3DES:
        case PH_KEYSTORE_KEY_TYPE_AES128:
            return 16;
 8005ae4:	2310      	movs	r3, #16
 8005ae6:	e004      	b.n	8005af2 <phKeyStore_GetKeySize+0x4a>

        case PH_KEYSTORE_KEY_TYPE_3K3DES:
        case PH_KEYSTORE_KEY_TYPE_AES192:
            return 24;
 8005ae8:	2318      	movs	r3, #24
 8005aea:	e002      	b.n	8005af2 <phKeyStore_GetKeySize+0x4a>

        case PH_KEYSTORE_KEY_TYPE_AES256:
            return 32;
 8005aec:	2320      	movs	r3, #32
 8005aee:	e000      	b.n	8005af2 <phKeyStore_GetKeySize+0x4a>

        default:
            return 0;
 8005af0:	2300      	movs	r3, #0
    }
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop

08005b00 <phNfcLib_SetContext>:

/*******************************************************************************
**   Function Definitions
*******************************************************************************/
phNfcLib_Status_t phNfcLib_SetContext(phNfcLib_AppContext_t * pAppContext)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
    if (pAppContext == NULL)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d101      	bne.n	8005b12 <phNfcLib_SetContext+0x12>
    {
        return PH_NFCLIB_STATUS_INVALID_PARAMETER;
 8005b0e:	2302      	movs	r3, #2
 8005b10:	e00a      	b.n	8005b28 <phNfcLib_SetContext+0x28>
    }

    gphNfcLib_Params.pBal = pAppContext->pBalDataparams;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a07      	ldr	r2, [pc, #28]	@ (8005b34 <phNfcLib_SetContext+0x34>)
 8005b18:	6053      	str	r3, [r2, #4]
#ifdef NXPBUILD__PHPAL_I14443P4MC_SW
    gphNfcLib_Params.pWtxCallback = (pWtxTimerCallback)pAppContext->pWtxCallback;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	461a      	mov	r2, r3
 8005b20:	4b04      	ldr	r3, [pc, #16]	@ (8005b34 <phNfcLib_SetContext+0x34>)
 8005b22:	f8c3 22a0 	str.w	r2, [r3, #672]	@ 0x2a0

#ifdef NXPBUILD__PHPAL_I18092MT_SW
    gphNfcLib_Params.pRtoxCallback = (pRtoxTimerCallback)pAppContext->pRtoxCallback;
#endif /* NXPBUILD__PHPAL_I18092MT_SW */

    return PH_NFCLIB_STATUS_SUCCESS;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	20000530 	.word	0x20000530

08005b38 <phNfcLib_CommonLayer_Init>:

/**
* This function will initialize Reader Library Common Layer Components
*/
static phStatus_t phNfcLib_CommonLayer_Init(void)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b086      	sub	sp, #24
 8005b3c:	af04      	add	r7, sp, #16
    phStatus_t wStatus = PH_ERR_SUCCESS;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	80fb      	strh	r3, [r7, #6]
    do
    {
#ifdef NXPBUILD__PH_KEYSTORE_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phKeyStore_Sw_Init(
 8005b42:	2301      	movs	r3, #1
 8005b44:	9303      	str	r3, [sp, #12]
 8005b46:	4b3c      	ldr	r3, [pc, #240]	@ (8005c38 <phNfcLib_CommonLayer_Init+0x100>)
 8005b48:	9302      	str	r3, [sp, #8]
 8005b4a:	2302      	movs	r3, #2
 8005b4c:	9301      	str	r3, [sp, #4]
 8005b4e:	4b3b      	ldr	r3, [pc, #236]	@ (8005c3c <phNfcLib_CommonLayer_Init+0x104>)
 8005b50:	9300      	str	r3, [sp, #0]
 8005b52:	2308      	movs	r3, #8
 8005b54:	4a3a      	ldr	r2, [pc, #232]	@ (8005c40 <phNfcLib_CommonLayer_Init+0x108>)
 8005b56:	2118      	movs	r1, #24
 8005b58:	483a      	ldr	r0, [pc, #232]	@ (8005c44 <phNfcLib_CommonLayer_Init+0x10c>)
 8005b5a:	f7ff fe0e 	bl	800577a <phKeyStore_Sw_Init>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	80fb      	strh	r3, [r7, #6]
 8005b62:	88fb      	ldrh	r3, [r7, #6]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d162      	bne.n	8005c2e <phNfcLib_CommonLayer_Init+0xf6>
            NUMBER_OF_KUCENTRIES));

        /* load a Key to the Store */
        /* Note: If You use Key number 0x00, be aware that in SAM
                this Key is the 'Host authentication key' !!! */
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phKeyStore_FormatKeyEntry(PTR_sKeyStore, 1, 0x6));
 8005b68:	2206      	movs	r2, #6
 8005b6a:	2101      	movs	r1, #1
 8005b6c:	4835      	ldr	r0, [pc, #212]	@ (8005c44 <phNfcLib_CommonLayer_Init+0x10c>)
 8005b6e:	f7ff fe94 	bl	800589a <phKeyStore_Sw_FormatKeyEntry>
 8005b72:	4603      	mov	r3, r0
 8005b74:	80fb      	strh	r3, [r7, #6]
 8005b76:	88fb      	ldrh	r3, [r7, #6]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d158      	bne.n	8005c2e <phNfcLib_CommonLayer_Init+0xf6>

        /* Set Key Store */
        PH_CHECK_NFCLIB_INIT_FCT(wStatus,  phKeyStore_SetKey(PTR_sKeyStore, 1, 0, 0x6, &gphNfcLib_Key[0], 0));
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	9301      	str	r3, [sp, #4]
 8005b80:	4b31      	ldr	r3, [pc, #196]	@ (8005c48 <phNfcLib_CommonLayer_Init+0x110>)
 8005b82:	9300      	str	r3, [sp, #0]
 8005b84:	2306      	movs	r3, #6
 8005b86:	2200      	movs	r2, #0
 8005b88:	2101      	movs	r1, #1
 8005b8a:	482e      	ldr	r0, [pc, #184]	@ (8005c44 <phNfcLib_CommonLayer_Init+0x10c>)
 8005b8c:	f7ff fed2 	bl	8005934 <phKeyStore_Sw_SetKey>
 8005b90:	4603      	mov	r3, r0
 8005b92:	80fb      	strh	r3, [r7, #6]
 8005b94:	88fb      	ldrh	r3, [r7, #6]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d149      	bne.n	8005c2e <phNfcLib_CommonLayer_Init+0xf6>
#if defined(NXPBUILD__PHAL_MFDFEVX_SW) || defined(NXPBUILD__PHAL_MFPEVX_SW) ||         \
    defined(NXPBUILD__PHAL_MFNTAG42XDNA_SW) || defined(NXPBUILD__PHAL_MFDFLIGHT_SW) || \
    defined(NXPBUILD__PHAL_MFDUOX_SW) || defined(NXPBUILD__PHAL_NTAGXDNA_SW)
#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        /* init. crypto */
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phCryptoSym_Sw_Init(
 8005b9a:	4a2a      	ldr	r2, [pc, #168]	@ (8005c44 <phNfcLib_CommonLayer_Init+0x10c>)
 8005b9c:	2140      	movs	r1, #64	@ 0x40
 8005b9e:	482b      	ldr	r0, [pc, #172]	@ (8005c4c <phNfcLib_CommonLayer_Init+0x114>)
 8005ba0:	f7fc fff3 	bl	8002b8a <phCryptoSym_Sw_Init>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	80fb      	strh	r3, [r7, #6]
 8005ba8:	88fb      	ldrh	r3, [r7, #6]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d13f      	bne.n	8005c2e <phNfcLib_CommonLayer_Init+0xf6>
            PTR_aAddData_Buffer,
            PRS_INT_BUFFER_SIZE));
#endif /* NXPBUILD__PH_CRYPTOSYM_MBEDTLS */

#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phCryptoSym_Sw_Init(
 8005bae:	4a25      	ldr	r2, [pc, #148]	@ (8005c44 <phNfcLib_CommonLayer_Init+0x10c>)
 8005bb0:	2140      	movs	r1, #64	@ 0x40
 8005bb2:	4827      	ldr	r0, [pc, #156]	@ (8005c50 <phNfcLib_CommonLayer_Init+0x118>)
 8005bb4:	f7fc ffe9 	bl	8002b8a <phCryptoSym_Sw_Init>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	80fb      	strh	r3, [r7, #6]
 8005bbc:	88fb      	ldrh	r3, [r7, #6]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d135      	bne.n	8005c2e <phNfcLib_CommonLayer_Init+0xf6>
#endif /* NXPBUILD__PH_CRYPTOASYM_MBEDTLS */

#ifdef NXPBUILD__PHAL_MFPEVX_SW
#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        /* Initialize CryptoSym for key diversification. */
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phCryptoSym_Sw_Init(
 8005bc2:	4a20      	ldr	r2, [pc, #128]	@ (8005c44 <phNfcLib_CommonLayer_Init+0x10c>)
 8005bc4:	2140      	movs	r1, #64	@ 0x40
 8005bc6:	4823      	ldr	r0, [pc, #140]	@ (8005c54 <phNfcLib_CommonLayer_Init+0x11c>)
 8005bc8:	f7fc ffdf 	bl	8002b8a <phCryptoSym_Sw_Init>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	80fb      	strh	r3, [r7, #6]
 8005bd0:	88fb      	ldrh	r3, [r7, #6]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d12b      	bne.n	8005c2e <phNfcLib_CommonLayer_Init+0xf6>
#endif /* NXPBUILD__PHAL_MFPEVX_SW */

#if defined(NXPBUILD__PHAL_MFDFEVX_SW) || defined(NXPBUILD__PHAL_MFPEVX_SW) || \
    defined(NXPBUILD__PHAL_MFDFLIGHT_SW) || defined(NXPBUILD__PHAL_MFDUOX_SW)
        /* Initialize TMI utility. */
        memset ( &aTmi_Buffer[0], 0x00, sizeof(aTmi_Buffer));
 8005bd6:	22ff      	movs	r2, #255	@ 0xff
 8005bd8:	2100      	movs	r1, #0
 8005bda:	481f      	ldr	r0, [pc, #124]	@ (8005c58 <phNfcLib_CommonLayer_Init+0x120>)
 8005bdc:	f017 fa90 	bl	801d100 <memset>
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phTMIUtils_Init(
 8005be0:	22ff      	movs	r2, #255	@ 0xff
 8005be2:	491d      	ldr	r1, [pc, #116]	@ (8005c58 <phNfcLib_CommonLayer_Init+0x120>)
 8005be4:	481d      	ldr	r0, [pc, #116]	@ (8005c5c <phNfcLib_CommonLayer_Init+0x124>)
 8005be6:	f000 fc0f 	bl	8006408 <phTMIUtils_Init>
 8005bea:	4603      	mov	r3, r0
 8005bec:	80fb      	strh	r3, [r7, #6]
 8005bee:	88fb      	ldrh	r3, [r7, #6]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d11c      	bne.n	8005c2e <phNfcLib_CommonLayer_Init+0xf6>
#endif /* defined(NXPBUILD__PHAL_MFDFEVX_SW) || defined(NXPBUILD__PHAL_MFPEVX_SW) ||
          defined(NXPBUILD__PHAL_MFNTAG42XDNA_SW) || defined(NXPBUILD__PHAL_MFDFLIGHT_SW) ||
          defined(NXPBUILD__PHAL_MFDUOX_SW) || defined(NXPBUILD__PHAL_NTAGXDNA_SW) */

#ifdef NXPBUILD__PH_CRYPTORNG_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phCryptoSym_Sw_Init(
 8005bf4:	4a13      	ldr	r2, [pc, #76]	@ (8005c44 <phNfcLib_CommonLayer_Init+0x10c>)
 8005bf6:	2140      	movs	r1, #64	@ 0x40
 8005bf8:	4819      	ldr	r0, [pc, #100]	@ (8005c60 <phNfcLib_CommonLayer_Init+0x128>)
 8005bfa:	f7fc ffc6 	bl	8002b8a <phCryptoSym_Sw_Init>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	80fb      	strh	r3, [r7, #6]
 8005c02:	88fb      	ldrh	r3, [r7, #6]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d112      	bne.n	8005c2e <phNfcLib_CommonLayer_Init+0xf6>
            &sCryptoSymRng,
            sizeof(phCryptoSym_Sw_DataParams_t),
            PTR_sKeyStore));

        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phCryptoRng_Sw_Init(
 8005c08:	4a15      	ldr	r2, [pc, #84]	@ (8005c60 <phNfcLib_CommonLayer_Init+0x128>)
 8005c0a:	2120      	movs	r1, #32
 8005c0c:	4815      	ldr	r0, [pc, #84]	@ (8005c64 <phNfcLib_CommonLayer_Init+0x12c>)
 8005c0e:	f7fc fcd3 	bl	80025b8 <phCryptoRng_Sw_Init>
 8005c12:	4603      	mov	r3, r0
 8005c14:	80fb      	strh	r3, [r7, #6]
 8005c16:	88fb      	ldrh	r3, [r7, #6]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d108      	bne.n	8005c2e <phNfcLib_CommonLayer_Init+0xf6>
            PTR_sCryptoRng,
            sizeof(phCryptoRng_mBedTLS_DataParams_t)));
#endif /* NXPBUILD__PH_CRYPTORNG_MBEDTLS */

#ifdef NXPBUILD__PH_CRYPTORNG
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phCryptoRng_Seed(
 8005c1c:	2208      	movs	r2, #8
 8005c1e:	4912      	ldr	r1, [pc, #72]	@ (8005c68 <phNfcLib_CommonLayer_Init+0x130>)
 8005c20:	4810      	ldr	r0, [pc, #64]	@ (8005c64 <phNfcLib_CommonLayer_Init+0x12c>)
 8005c22:	f7fc ff79 	bl	8002b18 <phCryptoRng_Seed>
 8005c26:	4603      	mov	r3, r0
 8005c28:	80fb      	strh	r3, [r7, #6]
 8005c2a:	88fb      	ldrh	r3, [r7, #6]
 8005c2c:	2b00      	cmp	r3, #0
            &aTmi_Buffer[0],
            TMI_BUFFER_SIZE));
#endif /* defined (NXPBUILD__PHAL_MFDFEVX_SAM_NONX) || defined (NXPBUILD__PHAL_MFPEVX_SAM_NONX) */
    }while(FALSE);

    return wStatus;
 8005c2e:	88fb      	ldrh	r3, [r7, #6]
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3708      	adds	r7, #8
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	20001784 	.word	0x20001784
 8005c3c:	20001564 	.word	0x20001564
 8005c40:	20001544 	.word	0x20001544
 8005c44:	200006cc 	.word	0x200006cc
 8005c48:	2000000c 	.word	0x2000000c
 8005c4c:	20000cd0 	.word	0x20000cd0
 8005c50:	20000d10 	.word	0x20000d10
 8005c54:	20000d50 	.word	0x20000d50
 8005c58:	20001160 	.word	0x20001160
 8005c5c:	200014f0 	.word	0x200014f0
 8005c60:	20001504 	.word	0x20001504
 8005c64:	20000d90 	.word	0x20000d90
 8005c68:	20001158 	.word	0x20001158

08005c6c <phNfcLib_PAL_Init>:

/**
* This function will initialize Reader LIbrary PAL Components
*/
static phStatus_t phNfcLib_PAL_Init(void)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
    phStatus_t wStatus = PH_ERR_SUCCESS;
 8005c72:	2300      	movs	r3, #0
 8005c74:	80fb      	strh	r3, [r7, #6]

    do
    {
        /* Initialize the I14443-3A PAL layer */
#ifdef NXPBUILD__PHPAL_I14443P3A_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalI14443p3a_Sw_Init(
 8005c76:	4a31      	ldr	r2, [pc, #196]	@ (8005d3c <phNfcLib_PAL_Init+0xd0>)
 8005c78:	2118      	movs	r1, #24
 8005c7a:	4831      	ldr	r0, [pc, #196]	@ (8005d40 <phNfcLib_PAL_Init+0xd4>)
 8005c7c:	f00d f804 	bl	8012c88 <phpalI14443p3a_Sw_Init>
 8005c80:	4603      	mov	r3, r0
 8005c82:	80fb      	strh	r3, [r7, #6]
 8005c84:	88fb      	ldrh	r3, [r7, #6]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d152      	bne.n	8005d30 <phNfcLib_PAL_Init+0xc4>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_I14443P3A_SW */

        /* Initialize the I14443-3B PAL  component */
#ifdef NXPBUILD__PHPAL_I14443P3B_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalI14443p3b_Sw_Init(
 8005c8a:	4a2c      	ldr	r2, [pc, #176]	@ (8005d3c <phNfcLib_PAL_Init+0xd0>)
 8005c8c:	212c      	movs	r1, #44	@ 0x2c
 8005c8e:	482d      	ldr	r0, [pc, #180]	@ (8005d44 <phNfcLib_PAL_Init+0xd8>)
 8005c90:	f00d fdfa 	bl	8013888 <phpalI14443p3b_Sw_Init>
 8005c94:	4603      	mov	r3, r0
 8005c96:	80fb      	strh	r3, [r7, #6]
 8005c98:	88fb      	ldrh	r3, [r7, #6]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d148      	bne.n	8005d30 <phNfcLib_PAL_Init+0xc4>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_I14443P3B_SW */

        /* Initialize the I14443-4A PAL component */
#ifdef NXPBUILD__PHPAL_I14443P4A_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalI14443p4a_Sw_Init(
 8005c9e:	4a27      	ldr	r2, [pc, #156]	@ (8005d3c <phNfcLib_PAL_Init+0xd0>)
 8005ca0:	2114      	movs	r1, #20
 8005ca2:	4829      	ldr	r0, [pc, #164]	@ (8005d48 <phNfcLib_PAL_Init+0xdc>)
 8005ca4:	f00e fd7e 	bl	80147a4 <phpalI14443p4a_Sw_Init>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	80fb      	strh	r3, [r7, #6]
 8005cac:	88fb      	ldrh	r3, [r7, #6]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d13e      	bne.n	8005d30 <phNfcLib_PAL_Init+0xc4>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_I14443P4A_SW */

        /* Initialize the I14443-4 PAL component */
#ifdef NXPBUILD__PHPAL_I14443P4_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalI14443p4_Sw_Init(
 8005cb2:	4a22      	ldr	r2, [pc, #136]	@ (8005d3c <phNfcLib_PAL_Init+0xd0>)
 8005cb4:	2114      	movs	r1, #20
 8005cb6:	4825      	ldr	r0, [pc, #148]	@ (8005d4c <phNfcLib_PAL_Init+0xe0>)
 8005cb8:	f00e fc5a 	bl	8014570 <phpalI14443p4_Sw_Init>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	80fb      	strh	r3, [r7, #6]
 8005cc0:	88fb      	ldrh	r3, [r7, #6]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d134      	bne.n	8005d30 <phNfcLib_PAL_Init+0xc4>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_I14443P4_SW */

        /* Initialize the MIFARE product PAL component */
#ifdef NXPBUILD__PHPAL_MIFARE_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalMifare_Sw_Init(
 8005cc6:	4b21      	ldr	r3, [pc, #132]	@ (8005d4c <phNfcLib_PAL_Init+0xe0>)
 8005cc8:	4a1c      	ldr	r2, [pc, #112]	@ (8005d3c <phNfcLib_PAL_Init+0xd0>)
 8005cca:	210c      	movs	r1, #12
 8005ccc:	4820      	ldr	r0, [pc, #128]	@ (8005d50 <phNfcLib_PAL_Init+0xe4>)
 8005cce:	f00f fd2b 	bl	8015728 <phpalMifare_Sw_Init>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	80fb      	strh	r3, [r7, #6]
 8005cd6:	88fb      	ldrh	r3, [r7, #6]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d129      	bne.n	8005d30 <phNfcLib_PAL_Init+0xc4>
        ));
#endif /* NXPBUILD__PHPAL_MIFARE_SW */

        /* Initialize PAL FeliCa PAL component */
#ifdef NXPBUILD__PHPAL_FELICA_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalFelica_Sw_Init(
 8005cdc:	4a17      	ldr	r2, [pc, #92]	@ (8005d3c <phNfcLib_PAL_Init+0xd0>)
 8005cde:	2120      	movs	r1, #32
 8005ce0:	481c      	ldr	r0, [pc, #112]	@ (8005d54 <phNfcLib_PAL_Init+0xe8>)
 8005ce2:	f00c fd77 	bl	80127d4 <phpalFelica_Sw_Init>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	80fb      	strh	r3, [r7, #6]
 8005cea:	88fb      	ldrh	r3, [r7, #6]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d11f      	bne.n	8005d30 <phNfcLib_PAL_Init+0xc4>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_FELICA_SW */

        /* Initialize the 15693 PAL component */
#ifdef NXPBUILD__PHPAL_SLI15693_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalSli15693_Sw_Init(
 8005cf0:	4a12      	ldr	r2, [pc, #72]	@ (8005d3c <phNfcLib_PAL_Init+0xd0>)
 8005cf2:	211c      	movs	r1, #28
 8005cf4:	4818      	ldr	r0, [pc, #96]	@ (8005d58 <phNfcLib_PAL_Init+0xec>)
 8005cf6:	f00f fd40 	bl	801577a <phpalSli15693_Sw_Init>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	80fb      	strh	r3, [r7, #6]
 8005cfe:	88fb      	ldrh	r3, [r7, #6]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d115      	bne.n	8005d30 <phNfcLib_PAL_Init+0xc4>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_SLI15693_SW */

        /* Initialize the 1800p3m3 PAL component */
#ifdef NXPBUILD__PHPAL_I18000P3M3_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalI18000p3m3_Sw_Init(
 8005d04:	4a0d      	ldr	r2, [pc, #52]	@ (8005d3c <phNfcLib_PAL_Init+0xd0>)
 8005d06:	210c      	movs	r1, #12
 8005d08:	4814      	ldr	r0, [pc, #80]	@ (8005d5c <phNfcLib_PAL_Init+0xf0>)
 8005d0a:	f00f fb26 	bl	801535a <phpalI18000p3m3_Sw_Init>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	80fb      	strh	r3, [r7, #6]
 8005d12:	88fb      	ldrh	r3, [r7, #6]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10b      	bne.n	8005d30 <phNfcLib_PAL_Init+0xc4>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_I18092MPI_SW */

        /* Initialize 14443-4mC Target PAL component */
#ifdef NXPBUILD__PHPAL_I14443P4MC_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus,phpalI14443p4mC_Sw_Init(
 8005d18:	4b11      	ldr	r3, [pc, #68]	@ (8005d60 <phNfcLib_PAL_Init+0xf4>)
 8005d1a:	f8d3 32a0 	ldr.w	r3, [r3, #672]	@ 0x2a0
 8005d1e:	4a07      	ldr	r2, [pc, #28]	@ (8005d3c <phNfcLib_PAL_Init+0xd0>)
 8005d20:	2134      	movs	r1, #52	@ 0x34
 8005d22:	4810      	ldr	r0, [pc, #64]	@ (8005d64 <phNfcLib_PAL_Init+0xf8>)
 8005d24:	f00f fa72 	bl	801520c <phpalI14443p4mC_Sw_Init>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	80fb      	strh	r3, [r7, #6]
 8005d2c:	88fb      	ldrh	r3, [r7, #6]
 8005d2e:	2b00      	cmp	r3, #0
            ));
#endif /* NXPBUILD__PHPAL_I18092MT_SW */

    }while(FALSE);

    return wStatus;
 8005d30:	88fb      	ldrh	r3, [r7, #6]
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3708      	adds	r7, #8
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	20000538 	.word	0x20000538
 8005d40:	200006e8 	.word	0x200006e8
 8005d44:	20000700 	.word	0x20000700
 8005d48:	2000072c 	.word	0x2000072c
 8005d4c:	20000740 	.word	0x20000740
 8005d50:	200007d4 	.word	0x200007d4
 8005d54:	2000077c 	.word	0x2000077c
 8005d58:	20000754 	.word	0x20000754
 8005d5c:	20000770 	.word	0x20000770
 8005d60:	20000530 	.word	0x20000530
 8005d64:	2000079c 	.word	0x2000079c

08005d68 <phNfcLib_AL_Init>:

/**
* This function will initialize the Reader Library AL Components
*/
static phStatus_t phNfcLib_AL_Init(void)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b088      	sub	sp, #32
 8005d6c:	af06      	add	r7, sp, #24
    phStatus_t wStatus = PH_ERR_SUCCESS;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	80fb      	strh	r3, [r7, #6]

    do
    {
        /* Initialize AL FeliCa component */
#ifdef NXPBUILD__PHAL_FELICA_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalFelica_Sw_Init(
 8005d72:	4a7b      	ldr	r2, [pc, #492]	@ (8005f60 <phNfcLib_AL_Init+0x1f8>)
 8005d74:	210c      	movs	r1, #12
 8005d76:	487b      	ldr	r0, [pc, #492]	@ (8005f64 <phNfcLib_AL_Init+0x1fc>)
 8005d78:	f005 f92f 	bl	800afda <phalFelica_Sw_Init>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	80fb      	strh	r3, [r7, #6]
 8005d80:	88fb      	ldrh	r3, [r7, #6]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f040 80e6 	bne.w	8005f54 <phNfcLib_AL_Init+0x1ec>
            &gphNfcLib_Params.spalFelica));
#endif /* NXPBUILD__PHAL_FELICA_SW */

        /* Initialize AL MIFARE Classic contactless IC component */
#ifdef NXPBUILD__PHAL_MFC_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMfc_Sw_Init(
 8005d88:	4b77      	ldr	r3, [pc, #476]	@ (8005f68 <phNfcLib_AL_Init+0x200>)
 8005d8a:	4a78      	ldr	r2, [pc, #480]	@ (8005f6c <phNfcLib_AL_Init+0x204>)
 8005d8c:	210c      	movs	r1, #12
 8005d8e:	4878      	ldr	r0, [pc, #480]	@ (8005f70 <phNfcLib_AL_Init+0x208>)
 8005d90:	f005 fd61 	bl	800b856 <phalMfc_Sw_Init>
 8005d94:	4603      	mov	r3, r0
 8005d96:	80fb      	strh	r3, [r7, #6]
 8005d98:	88fb      	ldrh	r3, [r7, #6]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	f040 80da 	bne.w	8005f54 <phNfcLib_AL_Init+0x1ec>
            PTR_sKeyStore));
#endif /* NXPBUILD__PHAL_MFC_SW */

        /* Initialize AL MIFARE Ultralight contactless IC component */
#ifdef NXPBUILD__PHAL_MFUL_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMful_Sw_Init(
 8005da0:	4b74      	ldr	r3, [pc, #464]	@ (8005f74 <phNfcLib_AL_Init+0x20c>)
 8005da2:	9301      	str	r3, [sp, #4]
 8005da4:	2300      	movs	r3, #0
 8005da6:	9300      	str	r3, [sp, #0]
 8005da8:	4b6f      	ldr	r3, [pc, #444]	@ (8005f68 <phNfcLib_AL_Init+0x200>)
 8005daa:	4a70      	ldr	r2, [pc, #448]	@ (8005f6c <phNfcLib_AL_Init+0x204>)
 8005dac:	211c      	movs	r1, #28
 8005dae:	4872      	ldr	r0, [pc, #456]	@ (8005f78 <phNfcLib_AL_Init+0x210>)
 8005db0:	f006 f851 	bl	800be56 <phalMful_Sw_Init>
 8005db4:	4603      	mov	r3, r0
 8005db6:	80fb      	strh	r3, [r7, #6]
 8005db8:	88fb      	ldrh	r3, [r7, #6]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	f040 80ca 	bne.w	8005f54 <phNfcLib_AL_Init+0x1ec>
            PTR_sCryptoRng));
#endif /* NXPBUILD__PHAL_MFUL_SW */

        /* Initialize AL MIFARE DESFire contactless IC component */
#ifdef NXPBUILD__PHAL_MFDF_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMfdf_Sw_Init(
 8005dc0:	4b6e      	ldr	r3, [pc, #440]	@ (8005f7c <phNfcLib_AL_Init+0x214>)
 8005dc2:	9302      	str	r3, [sp, #8]
 8005dc4:	4b6b      	ldr	r3, [pc, #428]	@ (8005f74 <phNfcLib_AL_Init+0x20c>)
 8005dc6:	9301      	str	r3, [sp, #4]
 8005dc8:	2300      	movs	r3, #0
 8005dca:	9300      	str	r3, [sp, #0]
 8005dcc:	4b66      	ldr	r3, [pc, #408]	@ (8005f68 <phNfcLib_AL_Init+0x200>)
 8005dce:	4a67      	ldr	r2, [pc, #412]	@ (8005f6c <phNfcLib_AL_Init+0x204>)
 8005dd0:	2168      	movs	r1, #104	@ 0x68
 8005dd2:	486b      	ldr	r0, [pc, #428]	@ (8005f80 <phNfcLib_AL_Init+0x218>)
 8005dd4:	f005 fd68 	bl	800b8a8 <phalMfdf_Sw_Init>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	80fb      	strh	r3, [r7, #6]
 8005ddc:	88fb      	ldrh	r3, [r7, #6]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f040 80b8 	bne.w	8005f54 <phNfcLib_AL_Init+0x1ec>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHAL_MFDF_SW */

#ifdef NXPBUILD__PHAL_VCA_SW
        /* Initialize the VCA component */
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalVca_Sw_Init(
 8005de4:	4b67      	ldr	r3, [pc, #412]	@ (8005f84 <phNfcLib_AL_Init+0x21c>)
 8005de6:	881b      	ldrh	r3, [r3, #0]
 8005de8:	4a67      	ldr	r2, [pc, #412]	@ (8005f88 <phNfcLib_AL_Init+0x220>)
 8005dea:	8812      	ldrh	r2, [r2, #0]
 8005dec:	9205      	str	r2, [sp, #20]
 8005dee:	4a67      	ldr	r2, [pc, #412]	@ (8005f8c <phNfcLib_AL_Init+0x224>)
 8005df0:	9204      	str	r2, [sp, #16]
 8005df2:	9303      	str	r3, [sp, #12]
 8005df4:	4b66      	ldr	r3, [pc, #408]	@ (8005f90 <phNfcLib_AL_Init+0x228>)
 8005df6:	9302      	str	r3, [sp, #8]
 8005df8:	4b5e      	ldr	r3, [pc, #376]	@ (8005f74 <phNfcLib_AL_Init+0x20c>)
 8005dfa:	9301      	str	r3, [sp, #4]
 8005dfc:	4b65      	ldr	r3, [pc, #404]	@ (8005f94 <phNfcLib_AL_Init+0x22c>)
 8005dfe:	9300      	str	r3, [sp, #0]
 8005e00:	4b59      	ldr	r3, [pc, #356]	@ (8005f68 <phNfcLib_AL_Init+0x200>)
 8005e02:	4a5a      	ldr	r2, [pc, #360]	@ (8005f6c <phNfcLib_AL_Init+0x204>)
 8005e04:	2154      	movs	r1, #84	@ 0x54
 8005e06:	4864      	ldr	r0, [pc, #400]	@ (8005f98 <phNfcLib_AL_Init+0x230>)
 8005e08:	f006 f95a 	bl	800c0c0 <phalVca_Sw_Init>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	80fb      	strh	r3, [r7, #6]
 8005e10:	88fb      	ldrh	r3, [r7, #6]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	f040 809e 	bne.w	8005f54 <phNfcLib_AL_Init+0x1ec>
            wNumCardTableStorageEntries));
#endif /* NXPBUILD__PHAL_VCA_SW */

        /* Initialize AL MIFARE DESFire EVx contactless IC component */
#ifdef NXPBUILD__PHAL_MFDFEVX_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMfdfEVx_Sw_Init(
 8005e18:	4b58      	ldr	r3, [pc, #352]	@ (8005f7c <phNfcLib_AL_Init+0x214>)
 8005e1a:	9305      	str	r3, [sp, #20]
 8005e1c:	4b5e      	ldr	r3, [pc, #376]	@ (8005f98 <phNfcLib_AL_Init+0x230>)
 8005e1e:	9304      	str	r3, [sp, #16]
 8005e20:	4b5e      	ldr	r3, [pc, #376]	@ (8005f9c <phNfcLib_AL_Init+0x234>)
 8005e22:	9303      	str	r3, [sp, #12]
 8005e24:	4b53      	ldr	r3, [pc, #332]	@ (8005f74 <phNfcLib_AL_Init+0x20c>)
 8005e26:	9302      	str	r3, [sp, #8]
 8005e28:	4b5d      	ldr	r3, [pc, #372]	@ (8005fa0 <phNfcLib_AL_Init+0x238>)
 8005e2a:	9301      	str	r3, [sp, #4]
 8005e2c:	4b59      	ldr	r3, [pc, #356]	@ (8005f94 <phNfcLib_AL_Init+0x22c>)
 8005e2e:	9300      	str	r3, [sp, #0]
 8005e30:	4b4d      	ldr	r3, [pc, #308]	@ (8005f68 <phNfcLib_AL_Init+0x200>)
 8005e32:	4a4e      	ldr	r2, [pc, #312]	@ (8005f6c <phNfcLib_AL_Init+0x204>)
 8005e34:	21b4      	movs	r1, #180	@ 0xb4
 8005e36:	485b      	ldr	r0, [pc, #364]	@ (8005fa4 <phNfcLib_AL_Init+0x23c>)
 8005e38:	f005 fda0 	bl	800b97c <phalMfdfEVx_Sw_Init>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	80fb      	strh	r3, [r7, #6]
 8005e40:	88fb      	ldrh	r3, [r7, #6]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f040 8086 	bne.w	8005f54 <phNfcLib_AL_Init+0x1ec>
            &sTMI,
            &sVca,
            &gphNfcLib_Params.sHal));

#ifdef NXPBUILD__PHAL_VCA_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalVca_SetApplicationType(
 8005e48:	4956      	ldr	r1, [pc, #344]	@ (8005fa4 <phNfcLib_AL_Init+0x23c>)
 8005e4a:	4853      	ldr	r0, [pc, #332]	@ (8005f98 <phNfcLib_AL_Init+0x230>)
 8005e4c:	f006 faad 	bl	800c3aa <phalVca_SetApplicationType>
 8005e50:	4603      	mov	r3, r0
 8005e52:	80fb      	strh	r3, [r7, #6]
 8005e54:	88fb      	ldrh	r3, [r7, #6]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d17c      	bne.n	8005f54 <phNfcLib_AL_Init+0x1ec>
#endif /* NXPBUILD__PHAL_VCA_SW */
#endif /* NXPBUILD__PHAL_MFDFEVX_SW */

        /* Initialize AL MIFARE DESFire Light contactless IC component */
#ifdef NXPBUILD__PHAL_MFDFLIGHT_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMfdfLight_Sw_Init(
 8005e5a:	4b48      	ldr	r3, [pc, #288]	@ (8005f7c <phNfcLib_AL_Init+0x214>)
 8005e5c:	9304      	str	r3, [sp, #16]
 8005e5e:	4b4f      	ldr	r3, [pc, #316]	@ (8005f9c <phNfcLib_AL_Init+0x234>)
 8005e60:	9303      	str	r3, [sp, #12]
 8005e62:	4b44      	ldr	r3, [pc, #272]	@ (8005f74 <phNfcLib_AL_Init+0x20c>)
 8005e64:	9302      	str	r3, [sp, #8]
 8005e66:	4b4e      	ldr	r3, [pc, #312]	@ (8005fa0 <phNfcLib_AL_Init+0x238>)
 8005e68:	9301      	str	r3, [sp, #4]
 8005e6a:	4b4a      	ldr	r3, [pc, #296]	@ (8005f94 <phNfcLib_AL_Init+0x22c>)
 8005e6c:	9300      	str	r3, [sp, #0]
 8005e6e:	4b3e      	ldr	r3, [pc, #248]	@ (8005f68 <phNfcLib_AL_Init+0x200>)
 8005e70:	4a3e      	ldr	r2, [pc, #248]	@ (8005f6c <phNfcLib_AL_Init+0x204>)
 8005e72:	21ac      	movs	r1, #172	@ 0xac
 8005e74:	484c      	ldr	r0, [pc, #304]	@ (8005fa8 <phNfcLib_AL_Init+0x240>)
 8005e76:	f005 fe33 	bl	800bae0 <phalMfdfLight_Sw_Init>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	80fb      	strh	r3, [r7, #6]
 8005e7e:	88fb      	ldrh	r3, [r7, #6]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d167      	bne.n	8005f54 <phNfcLib_AL_Init+0x1ec>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHAL_MFDFLIGHT_SW */

        /* Initialize AL MIFARE Plus Ev1 contactless IC component */
#ifdef NXPBUILD__PHAL_MFPEVX_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMfpEVx_Sw_Init (
 8005e84:	4b44      	ldr	r3, [pc, #272]	@ (8005f98 <phNfcLib_AL_Init+0x230>)
 8005e86:	9305      	str	r3, [sp, #20]
 8005e88:	4b44      	ldr	r3, [pc, #272]	@ (8005f9c <phNfcLib_AL_Init+0x234>)
 8005e8a:	9304      	str	r3, [sp, #16]
 8005e8c:	4b47      	ldr	r3, [pc, #284]	@ (8005fac <phNfcLib_AL_Init+0x244>)
 8005e8e:	9303      	str	r3, [sp, #12]
 8005e90:	4b38      	ldr	r3, [pc, #224]	@ (8005f74 <phNfcLib_AL_Init+0x20c>)
 8005e92:	9302      	str	r3, [sp, #8]
 8005e94:	4b42      	ldr	r3, [pc, #264]	@ (8005fa0 <phNfcLib_AL_Init+0x238>)
 8005e96:	9301      	str	r3, [sp, #4]
 8005e98:	4b3e      	ldr	r3, [pc, #248]	@ (8005f94 <phNfcLib_AL_Init+0x22c>)
 8005e9a:	9300      	str	r3, [sp, #0]
 8005e9c:	4b32      	ldr	r3, [pc, #200]	@ (8005f68 <phNfcLib_AL_Init+0x200>)
 8005e9e:	4a33      	ldr	r2, [pc, #204]	@ (8005f6c <phNfcLib_AL_Init+0x204>)
 8005ea0:	2184      	movs	r1, #132	@ 0x84
 8005ea2:	4843      	ldr	r0, [pc, #268]	@ (8005fb0 <phNfcLib_AL_Init+0x248>)
 8005ea4:	f005 feda 	bl	800bc5c <phalMfpEVx_Sw_Init>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	80fb      	strh	r3, [r7, #6]
 8005eac:	88fb      	ldrh	r3, [r7, #6]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d150      	bne.n	8005f54 <phNfcLib_AL_Init+0x1ec>
            &sTMI,
            PH_NFCLIB_VCA_DATAPARAMS));

#ifdef NXPBUILD__PHAL_VCA
        /* Initialize the MIFARE Plus EV1 component */
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalVca_SetApplicationType(
 8005eb2:	493f      	ldr	r1, [pc, #252]	@ (8005fb0 <phNfcLib_AL_Init+0x248>)
 8005eb4:	4838      	ldr	r0, [pc, #224]	@ (8005f98 <phNfcLib_AL_Init+0x230>)
 8005eb6:	f006 fa78 	bl	800c3aa <phalVca_SetApplicationType>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	80fb      	strh	r3, [r7, #6]
 8005ebe:	88fb      	ldrh	r3, [r7, #6]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d147      	bne.n	8005f54 <phNfcLib_AL_Init+0x1ec>
#endif /* NXPBUILD__PHAL_VCA */
#endif /* NXPBUILD__PHAL_MFPEVX_SW */

        /* Initialize AL MIFARE NTAG 42x DNA contactless IC component */
#ifdef NXPBUILD__PHAL_MFNTAG42XDNA_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMfNtag42XDna_Sw_Init(
 8005ec4:	4b2d      	ldr	r3, [pc, #180]	@ (8005f7c <phNfcLib_AL_Init+0x214>)
 8005ec6:	9303      	str	r3, [sp, #12]
 8005ec8:	4b2a      	ldr	r3, [pc, #168]	@ (8005f74 <phNfcLib_AL_Init+0x20c>)
 8005eca:	9302      	str	r3, [sp, #8]
 8005ecc:	4b34      	ldr	r3, [pc, #208]	@ (8005fa0 <phNfcLib_AL_Init+0x238>)
 8005ece:	9301      	str	r3, [sp, #4]
 8005ed0:	4b30      	ldr	r3, [pc, #192]	@ (8005f94 <phNfcLib_AL_Init+0x22c>)
 8005ed2:	9300      	str	r3, [sp, #0]
 8005ed4:	4b24      	ldr	r3, [pc, #144]	@ (8005f68 <phNfcLib_AL_Init+0x200>)
 8005ed6:	4a25      	ldr	r2, [pc, #148]	@ (8005f6c <phNfcLib_AL_Init+0x204>)
 8005ed8:	21a8      	movs	r1, #168	@ 0xa8
 8005eda:	4836      	ldr	r0, [pc, #216]	@ (8005fb4 <phNfcLib_AL_Init+0x24c>)
 8005edc:	f005 fc07 	bl	800b6ee <phalMfNtag42XDna_Sw_Init>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	80fb      	strh	r3, [r7, #6]
 8005ee4:	88fb      	ldrh	r3, [r7, #6]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d134      	bne.n	8005f54 <phNfcLib_AL_Init+0x1ec>
                PHAL_MFDUOX_PRS_BUFFER_SIZE_MINIMUM));
#endif /* NXPBUILD__PHAL_MFDUOX_SW */

        /* Initialize the T1T AL component */
#ifdef NXPBUILD__PHAL_T1T_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalT1T_Sw_Init(
 8005eea:	4a33      	ldr	r2, [pc, #204]	@ (8005fb8 <phNfcLib_AL_Init+0x250>)
 8005eec:	2110      	movs	r1, #16
 8005eee:	4833      	ldr	r0, [pc, #204]	@ (8005fbc <phNfcLib_AL_Init+0x254>)
 8005ef0:	f005 ffec 	bl	800becc <phalT1T_Sw_Init>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	80fb      	strh	r3, [r7, #6]
 8005ef8:	88fb      	ldrh	r3, [r7, #6]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d12a      	bne.n	8005f54 <phNfcLib_AL_Init+0x1ec>
            &gphNfcLib_Params.spalI14443p3a));
#endif /* NXPBUILD__PHAL_T1T_SW */

        /* Initialize the ISO ICODE AL component */
#ifdef NXPBUILD__PHAL_ICODE_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalICode_Sw_Init(
 8005efe:	4b1a      	ldr	r3, [pc, #104]	@ (8005f68 <phNfcLib_AL_Init+0x200>)
 8005f00:	9301      	str	r3, [sp, #4]
 8005f02:	4b1c      	ldr	r3, [pc, #112]	@ (8005f74 <phNfcLib_AL_Init+0x20c>)
 8005f04:	9300      	str	r3, [sp, #0]
 8005f06:	2300      	movs	r3, #0
 8005f08:	4a2d      	ldr	r2, [pc, #180]	@ (8005fc0 <phNfcLib_AL_Init+0x258>)
 8005f0a:	2120      	movs	r1, #32
 8005f0c:	482d      	ldr	r0, [pc, #180]	@ (8005fc4 <phNfcLib_AL_Init+0x25c>)
 8005f0e:	f005 f8cf 	bl	800b0b0 <phalICode_Sw_Init>
 8005f12:	4603      	mov	r3, r0
 8005f14:	80fb      	strh	r3, [r7, #6]
 8005f16:	88fb      	ldrh	r3, [r7, #6]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d11b      	bne.n	8005f54 <phNfcLib_AL_Init+0x1ec>
            PTR_sKeyStore));
#endif /* NXPBUILD__PHAL_ICODE_SW */

        /* Initialize the Tag operations component */
#ifdef NXPBUILD__PHAL_TOP_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalTop_Sw_Init(
 8005f1c:	4b26      	ldr	r3, [pc, #152]	@ (8005fb8 <phNfcLib_AL_Init+0x250>)
 8005f1e:	9303      	str	r3, [sp, #12]
 8005f20:	4b28      	ldr	r3, [pc, #160]	@ (8005fc4 <phNfcLib_AL_Init+0x25c>)
 8005f22:	9302      	str	r3, [sp, #8]
 8005f24:	4b11      	ldr	r3, [pc, #68]	@ (8005f6c <phNfcLib_AL_Init+0x204>)
 8005f26:	9301      	str	r3, [sp, #4]
 8005f28:	4b0e      	ldr	r3, [pc, #56]	@ (8005f64 <phNfcLib_AL_Init+0x1fc>)
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	4b12      	ldr	r3, [pc, #72]	@ (8005f78 <phNfcLib_AL_Init+0x210>)
 8005f2e:	4a23      	ldr	r2, [pc, #140]	@ (8005fbc <phNfcLib_AL_Init+0x254>)
 8005f30:	2180      	movs	r1, #128	@ 0x80
 8005f32:	4825      	ldr	r0, [pc, #148]	@ (8005fc8 <phNfcLib_AL_Init+0x260>)
 8005f34:	f006 f874 	bl	800c020 <phalTop_Sw_Init>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	80fb      	strh	r3, [r7, #6]
 8005f3c:	88fb      	ldrh	r3, [r7, #6]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d108      	bne.n	8005f54 <phNfcLib_AL_Init+0x1ec>
              PTR_spalI14443p3a));
#endif /* NXPBUILD__PHAL_TOP_SW */

        /* Initialize the 18000p3m3 AL component */
#ifdef NXPBUILD__PHAL_I18000P3M3_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalI18000p3m3_Sw_Init(
 8005f42:	4a22      	ldr	r2, [pc, #136]	@ (8005fcc <phNfcLib_AL_Init+0x264>)
 8005f44:	210c      	movs	r1, #12
 8005f46:	4822      	ldr	r0, [pc, #136]	@ (8005fd0 <phNfcLib_AL_Init+0x268>)
 8005f48:	f005 f86f 	bl	800b02a <phalI18000p3m3_Sw_Init>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	80fb      	strh	r3, [r7, #6]
 8005f50:	88fb      	ldrh	r3, [r7, #6]
 8005f52:	2b00      	cmp	r3, #0
            &gphNfcLib_Params.spalI18000p3m3));
#endif /* NXPBUILD__PHAL_I18000P3M3_SW */

    }while(FALSE);

    return wStatus;
 8005f54:	88fb      	ldrh	r3, [r7, #6]
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3708      	adds	r7, #8
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	2000077c 	.word	0x2000077c
 8005f64:	200007ec 	.word	0x200007ec
 8005f68:	200006cc 	.word	0x200006cc
 8005f6c:	200007d4 	.word	0x200007d4
 8005f70:	20000818 	.word	0x20000818
 8005f74:	20000d90 	.word	0x20000d90
 8005f78:	20000a70 	.word	0x20000a70
 8005f7c:	20000538 	.word	0x20000538
 8005f80:	20000824 	.word	0x20000824
 8005f84:	20000008 	.word	0x20000008
 8005f88:	2000000a 	.word	0x2000000a
 8005f8c:	20001320 	.word	0x20001320
 8005f90:	20001260 	.word	0x20001260
 8005f94:	20000cd0 	.word	0x20000cd0
 8005f98:	2000149c 	.word	0x2000149c
 8005f9c:	200014f0 	.word	0x200014f0
 8005fa0:	20000d10 	.word	0x20000d10
 8005fa4:	2000088c 	.word	0x2000088c
 8005fa8:	20000940 	.word	0x20000940
 8005fac:	20000d50 	.word	0x20000d50
 8005fb0:	200009ec 	.word	0x200009ec
 8005fb4:	20000a8c 	.word	0x20000a8c
 8005fb8:	200006e8 	.word	0x200006e8
 8005fbc:	20000b34 	.word	0x20000b34
 8005fc0:	20000754 	.word	0x20000754
 8005fc4:	200007f8 	.word	0x200007f8
 8005fc8:	20000b44 	.word	0x20000b44
 8005fcc:	20000770 	.word	0x20000770
 8005fd0:	200007e0 	.word	0x200007e0

08005fd4 <phNfcLib_Init>:

phNfcLib_Status_t phNfcLib_Init(void)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b086      	sub	sp, #24
 8005fd8:	af04      	add	r7, sp, #16
    phStatus_t        wStatus  = PH_ERR_SUCCESS;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	80fb      	strh	r3, [r7, #6]
    phNfcLib_Status_t dwStatus = PH_NFCLIB_STATUS_INVALID_STATE;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	603b      	str	r3, [r7, #0]

    if (((phNfcLib_StateMachine_t)gphNfcLib_State.bNfcLibState) == eNfcLib_ResetState)
 8005fe2:	4b4b      	ldr	r3, [pc, #300]	@ (8006110 <phNfcLib_Init+0x13c>)
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	f040 808d 	bne.w	8006106 <phNfcLib_Init+0x132>
    {
        do
        {
            /* Perform Reader Library Common Layer Initialization */
            PH_CHECK_NFCLIB_INIT_FCT(wStatus, phNfcLib_CommonLayer_Init());
 8005fec:	f7ff fda4 	bl	8005b38 <phNfcLib_CommonLayer_Init>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	80fb      	strh	r3, [r7, #6]
 8005ff4:	88fb      	ldrh	r3, [r7, #6]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d159      	bne.n	80060ae <phNfcLib_Init+0xda>
                PH_NXPNFCRDLIB_CONFIG_HAL_RX_BUFFSIZE));
#endif /* NXPBUILD__PHHAL_HW_RC663 */

#ifdef NXPBUILD__PHHAL_HW_PN5180
            /* Initialize the Pn5180 HAL component */
            PH_CHECK_SUCCESS_FCT(wStatus, phhalHw_Pn5180_Init(
 8005ffa:	4b46      	ldr	r3, [pc, #280]	@ (8006114 <phNfcLib_Init+0x140>)
 8005ffc:	685a      	ldr	r2, [r3, #4]
 8005ffe:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8006002:	9303      	str	r3, [sp, #12]
 8006004:	4b44      	ldr	r3, [pc, #272]	@ (8006118 <phNfcLib_Init+0x144>)
 8006006:	9302      	str	r3, [sp, #8]
 8006008:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800600c:	9301      	str	r3, [sp, #4]
 800600e:	4b43      	ldr	r3, [pc, #268]	@ (800611c <phNfcLib_Init+0x148>)
 8006010:	9300      	str	r3, [sp, #0]
 8006012:	4b43      	ldr	r3, [pc, #268]	@ (8006120 <phNfcLib_Init+0x14c>)
 8006014:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8006018:	4842      	ldr	r0, [pc, #264]	@ (8006124 <phNfcLib_Init+0x150>)
 800601a:	f006 fa23 	bl	800c464 <phhalHw_Pn5180_Init>
 800601e:	4603      	mov	r3, r0
 8006020:	80fb      	strh	r3, [r7, #6]
 8006022:	88fb      	ldrh	r3, [r7, #6]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d001      	beq.n	800602c <phNfcLib_Init+0x58>
 8006028:	88fb      	ldrh	r3, [r7, #6]
 800602a:	e06d      	b.n	8006108 <phNfcLib_Init+0x134>
                gphNfcLib_State.bHalBufferRx,
                PH_NXPNFCRDLIB_CONFIG_HAL_RX_BUFFSIZE));
#endif /* NXPBUILD__PHHAL_HW_PN7462AU */

            /* Perform Reader Library PAL Initialization */
            PH_CHECK_NFCLIB_INIT_FCT(wStatus, phNfcLib_PAL_Init());
 800602c:	f7ff fe1e 	bl	8005c6c <phNfcLib_PAL_Init>
 8006030:	4603      	mov	r3, r0
 8006032:	80fb      	strh	r3, [r7, #6]
 8006034:	88fb      	ldrh	r3, [r7, #6]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d139      	bne.n	80060ae <phNfcLib_Init+0xda>

            /* Perform Reader Library AL Initialization */
            PH_CHECK_NFCLIB_INIT_FCT(wStatus, phNfcLib_AL_Init());
 800603a:	f7ff fe95 	bl	8005d68 <phNfcLib_AL_Init>
 800603e:	4603      	mov	r3, r0
 8006040:	80fb      	strh	r3, [r7, #6]
 8006042:	88fb      	ldrh	r3, [r7, #6]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d132      	bne.n	80060ae <phNfcLib_Init+0xda>
                PH_NXPNFCRDLIB_CONFIG_HCE_BUFF_LENGTH));
#endif /* NXPBUILD__PHCE_T4T_SW */

            /* Initialize the discover component */
#ifdef NXPBUILD__PHAC_DISCLOOP_SW
            PH_CHECK_NFCLIB_INIT_FCT(wStatus, phacDiscLoop_Sw_Init(
 8006048:	4a36      	ldr	r2, [pc, #216]	@ (8006124 <phNfcLib_Init+0x150>)
 800604a:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800604e:	4836      	ldr	r0, [pc, #216]	@ (8006128 <phNfcLib_Init+0x154>)
 8006050:	f000 fbf8 	bl	8006844 <phacDiscLoop_Sw_Init>
 8006054:	4603      	mov	r3, r0
 8006056:	80fb      	strh	r3, [r7, #6]
 8006058:	88fb      	ldrh	r3, [r7, #6]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d127      	bne.n	80060ae <phNfcLib_Init+0xda>
                &gphNfcLib_Params.sDiscLoop,
                (uint16_t)(sizeof(phacDiscLoop_Sw_DataParams_t)),
                &gphNfcLib_Params.sHal));

            /* Assign other layer parameters in discovery loop */
            gphNfcLib_Params.sDiscLoop.pHalDataParams = &gphNfcLib_Params.sHal;
 800605e:	4b2d      	ldr	r3, [pc, #180]	@ (8006114 <phNfcLib_Init+0x140>)
 8006060:	4a30      	ldr	r2, [pc, #192]	@ (8006124 <phNfcLib_Init+0x150>)
 8006062:	f8c3 26bc 	str.w	r2, [r3, #1724]	@ 0x6bc

#ifdef NXPBUILD__PHPAL_I14443P3A_SW
            gphNfcLib_Params.sDiscLoop.pPal1443p3aDataParams = &gphNfcLib_Params.spalI14443p3a;
 8006066:	4b2b      	ldr	r3, [pc, #172]	@ (8006114 <phNfcLib_Init+0x140>)
 8006068:	4a30      	ldr	r2, [pc, #192]	@ (800612c <phNfcLib_Init+0x158>)
 800606a:	f8c3 26c0 	str.w	r2, [r3, #1728]	@ 0x6c0
#endif /* NXPBUILD__PHPAL_I14443P3A_SW */

#ifdef NXPBUILD__PHPAL_I14443P3B_SW
            gphNfcLib_Params.sDiscLoop.pPal1443p3bDataParams = &gphNfcLib_Params.spalI14443p3b;
 800606e:	4b29      	ldr	r3, [pc, #164]	@ (8006114 <phNfcLib_Init+0x140>)
 8006070:	4a2f      	ldr	r2, [pc, #188]	@ (8006130 <phNfcLib_Init+0x15c>)
 8006072:	f8c3 26c8 	str.w	r2, [r3, #1736]	@ 0x6c8
#endif /* NXPBUILD__PHPAL_I14443P3B_SW */

#ifdef NXPBUILD__PHPAL_I14443P4A_SW
            gphNfcLib_Params.sDiscLoop.pPal1443p4aDataParams = &gphNfcLib_Params.spalI14443p4a;
 8006076:	4b27      	ldr	r3, [pc, #156]	@ (8006114 <phNfcLib_Init+0x140>)
 8006078:	4a2e      	ldr	r2, [pc, #184]	@ (8006134 <phNfcLib_Init+0x160>)
 800607a:	f8c3 26d0 	str.w	r2, [r3, #1744]	@ 0x6d0
#endif /* NXPBUILD__PHPAL_I14443P4A_SW */

#ifdef NXPBUILD__PHPAL_I14443P4_SW
            gphNfcLib_Params.sDiscLoop.pPal14443p4DataParams = &gphNfcLib_Params.spalI14443p4;
 800607e:	4b25      	ldr	r3, [pc, #148]	@ (8006114 <phNfcLib_Init+0x140>)
 8006080:	4a2d      	ldr	r2, [pc, #180]	@ (8006138 <phNfcLib_Init+0x164>)
 8006082:	f8c3 26cc 	str.w	r2, [r3, #1740]	@ 0x6cc
#endif /* NXPBUILD__PHPAL_I14443P4_SW */

#ifdef NXPBUILD__PHPAL_FELICA_SW
            gphNfcLib_Params.sDiscLoop.pPalFelicaDataParams = &gphNfcLib_Params.spalFelica;
 8006086:	4b23      	ldr	r3, [pc, #140]	@ (8006114 <phNfcLib_Init+0x140>)
 8006088:	4a2c      	ldr	r2, [pc, #176]	@ (800613c <phNfcLib_Init+0x168>)
 800608a:	f8c3 26c4 	str.w	r2, [r3, #1732]	@ 0x6c4
#endif /* NXPBUILD__PHPAL_FELICA_SW */

#ifdef NXPBUILD__PHPAL_SLI15693_SW
            gphNfcLib_Params.sDiscLoop.pPalSli15693DataParams = &gphNfcLib_Params.spalSli15693;
 800608e:	4b21      	ldr	r3, [pc, #132]	@ (8006114 <phNfcLib_Init+0x140>)
 8006090:	4a2b      	ldr	r2, [pc, #172]	@ (8006140 <phNfcLib_Init+0x16c>)
 8006092:	f8c3 26d4 	str.w	r2, [r3, #1748]	@ 0x6d4
#ifdef NXPBUILD__PHPAL_I18092MPI_SW
            gphNfcLib_Params.sDiscLoop.pPal18092mPIDataParams = &gphNfcLib_Params.spalI18092mPI;
#endif /* NXPBUILD__PHPAL_I18092MPI_SW */

#ifdef NXPBUILD__PHPAL_I18000P3M3_SW
            gphNfcLib_Params.sDiscLoop.pPal18000p3m3DataParams = &gphNfcLib_Params.spalI18000p3m3;
 8006096:	4b1f      	ldr	r3, [pc, #124]	@ (8006114 <phNfcLib_Init+0x140>)
 8006098:	4a2a      	ldr	r2, [pc, #168]	@ (8006144 <phNfcLib_Init+0x170>)
 800609a:	f8c3 26d8 	str.w	r2, [r3, #1752]	@ 0x6d8
#endif /* NXPBUILD__PHPAL_I18000P3M3_SW */

#ifdef NXPBUILD__PHAL_I18000P3M3_SW
            gphNfcLib_Params.sDiscLoop.pAl18000p3m3DataParams = &gphNfcLib_Params.salI18000p3m3;
 800609e:	4b1d      	ldr	r3, [pc, #116]	@ (8006114 <phNfcLib_Init+0x140>)
 80060a0:	4a29      	ldr	r2, [pc, #164]	@ (8006148 <phNfcLib_Init+0x174>)
 80060a2:	f8c3 26dc 	str.w	r2, [r3, #1756]	@ 0x6dc
#endif /* NXPBUILD__PHAL_I18000P3M3_SW */

#ifdef NXPBUILD__PHAL_T1T_SW
            gphNfcLib_Params.sDiscLoop.pAlT1TDataParams = &gphNfcLib_Params.salT1T;
 80060a6:	4b1b      	ldr	r3, [pc, #108]	@ (8006114 <phNfcLib_Init+0x140>)
 80060a8:	4a28      	ldr	r2, [pc, #160]	@ (800614c <phNfcLib_Init+0x178>)
 80060aa:	f8c3 26e4 	str.w	r2, [r3, #1764]	@ 0x6e4
#endif /* NXPBUILD__PHAL_T1T_SW */
#endif /* NXPBUILD__PHAC_DISCLOOP_SW */

        }while(FALSE);

        if(wStatus != PH_ERR_SUCCESS)
 80060ae:	88fb      	ldrh	r3, [r7, #6]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d002      	beq.n	80060ba <phNfcLib_Init+0xe6>
        {
            dwStatus = PH_NFCLIB_STATUS_INTERNAL_ERROR;
 80060b4:	2310      	movs	r3, #16
 80060b6:	603b      	str	r3, [r7, #0]
 80060b8:	e025      	b.n	8006106 <phNfcLib_Init+0x132>
        }
        else
        {
            gphNfcLib_State.bNfcLibState      = eNfcLib_InitializedState;
 80060ba:	4b15      	ldr	r3, [pc, #84]	@ (8006110 <phNfcLib_Init+0x13c>)
 80060bc:	2201      	movs	r2, #1
 80060be:	701a      	strb	r2, [r3, #0]
            gphNfcLib_State.bProfileSelected  = PH_NFCLIB_ACTIVATION_PROFILE_NFC;
 80060c0:	4b13      	ldr	r3, [pc, #76]	@ (8006110 <phNfcLib_Init+0x13c>)
 80060c2:	2200      	movs	r2, #0
 80060c4:	705a      	strb	r2, [r3, #1]
            gphNfcLib_State.wConfiguredRFTech = PH_NFCLIB_TECHNOLOGY_DEFAULT;
 80060c6:	4b12      	ldr	r3, [pc, #72]	@ (8006110 <phNfcLib_Init+0x13c>)
 80060c8:	2200      	movs	r2, #0
 80060ca:	811a      	strh	r2, [r3, #8]
            gphNfcLib_State.bActivateBlocking = PH_NFCLIB_ACTIVATION_BLOCKINGMODE_DEFAULT;
 80060cc:	4b10      	ldr	r3, [pc, #64]	@ (8006110 <phNfcLib_Init+0x13c>)
 80060ce:	2201      	movs	r2, #1
 80060d0:	709a      	strb	r2, [r3, #2]
            gphNfcLib_State.bDeactBlocking    = PH_NFCLIB_DEACTIVATION_BLOCKINGMODE_DEFAULT;
 80060d2:	4b0f      	ldr	r3, [pc, #60]	@ (8006110 <phNfcLib_Init+0x13c>)
 80060d4:	2201      	movs	r2, #1
 80060d6:	70da      	strb	r2, [r3, #3]
            gphNfcLib_State.bLPCDState        = PH_OFF;
 80060d8:	4b0d      	ldr	r3, [pc, #52]	@ (8006110 <phNfcLib_Init+0x13c>)
 80060da:	2200      	movs	r2, #0
 80060dc:	715a      	strb	r2, [r3, #5]
            gphNfcLib_State.bTxState          = PH_NFCLIB_INT_TRANSMIT_OFF;
 80060de:	4b0c      	ldr	r3, [pc, #48]	@ (8006110 <phNfcLib_Init+0x13c>)
 80060e0:	2200      	movs	r2, #0
 80060e2:	719a      	strb	r2, [r3, #6]
            gphNfcLib_State.bMergedSakPrio    = PH_NFCLIB_ACTIVATION_MERGED_SAK_PRIO_14443;
 80060e4:	4b0a      	ldr	r3, [pc, #40]	@ (8006110 <phNfcLib_Init+0x13c>)
 80060e6:	2200      	movs	r2, #0
 80060e8:	711a      	strb	r2, [r3, #4]
            gphNfcLib_State.bAuthMode         = PH_NFCLIB_MFDF_NOT_AUTHENTICATED;
 80060ea:	4b09      	ldr	r3, [pc, #36]	@ (8006110 <phNfcLib_Init+0x13c>)
 80060ec:	22ff      	movs	r2, #255	@ 0xff
 80060ee:	f883 239d 	strb.w	r2, [r3, #925]	@ 0x39d
            gphNfcLib_Params.pNfcLib_ErrCallbck = NULL;
 80060f2:	4b08      	ldr	r3, [pc, #32]	@ (8006114 <phNfcLib_Init+0x140>)
 80060f4:	2200      	movs	r2, #0
 80060f6:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
            gphNfcLib_State.bFsdi             = PH_NXPNFCRDLIB_CONFIG_FSDI_VALUE;
 80060fa:	4b05      	ldr	r3, [pc, #20]	@ (8006110 <phNfcLib_Init+0x13c>)
 80060fc:	2208      	movs	r2, #8
 80060fe:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

            dwStatus = PH_NFCLIB_STATUS_SUCCESS;
 8006102:	2300      	movs	r3, #0
 8006104:	603b      	str	r3, [r7, #0]
        }
    }

    return dwStatus;
 8006106:	683b      	ldr	r3, [r7, #0]
}
 8006108:	4618      	mov	r0, r3
 800610a:	3708      	adds	r7, #8
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}
 8006110:	20000db0 	.word	0x20000db0
 8006114:	20000530 	.word	0x20000530
 8006118:	20000ef4 	.word	0x20000ef4
 800611c:	20000dc8 	.word	0x20000dc8
 8006120:	200006cc 	.word	0x200006cc
 8006124:	20000538 	.word	0x20000538
 8006128:	20000bc4 	.word	0x20000bc4
 800612c:	200006e8 	.word	0x200006e8
 8006130:	20000700 	.word	0x20000700
 8006134:	2000072c 	.word	0x2000072c
 8006138:	20000740 	.word	0x20000740
 800613c:	2000077c 	.word	0x2000077c
 8006140:	20000754 	.word	0x20000754
 8006144:	20000770 	.word	0x20000770
 8006148:	200007e0 	.word	0x200007e0
 800614c:	20000b34 	.word	0x20000b34

08006150 <phNfcLib_GetDataParams>:
}

void* phNfcLib_GetDataParams(
                             uint16_t wComponent
                             )
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	4603      	mov	r3, r0
 8006158:	80fb      	strh	r3, [r7, #6]
    void * pDataparam = NULL;
 800615a:	2300      	movs	r3, #0
 800615c:	60fb      	str	r3, [r7, #12]

    if (((phNfcLib_StateMachine_t)gphNfcLib_State.bNfcLibState) != eNfcLib_ResetState)
 800615e:	4b8f      	ldr	r3, [pc, #572]	@ (800639c <phNfcLib_GetDataParams+0x24c>)
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	f000 8112 	beq.w	800638c <phNfcLib_GetDataParams+0x23c>
    {
        switch(wComponent & PH_COMP_MASK)
 8006168:	88fb      	ldrh	r3, [r7, #6]
 800616a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800616e:	f5b3 4f65 	cmp.w	r3, #58624	@ 0xe500
 8006172:	f000 8107 	beq.w	8006384 <phNfcLib_GetDataParams+0x234>
 8006176:	f5b3 4f65 	cmp.w	r3, #58624	@ 0xe500
 800617a:	f300 8106 	bgt.w	800638a <phNfcLib_GetDataParams+0x23a>
 800617e:	f5b3 4f64 	cmp.w	r3, #58368	@ 0xe400
 8006182:	f000 80fc 	beq.w	800637e <phNfcLib_GetDataParams+0x22e>
 8006186:	f5b3 4f64 	cmp.w	r3, #58368	@ 0xe400
 800618a:	f300 80fe 	bgt.w	800638a <phNfcLib_GetDataParams+0x23a>
 800618e:	f5b3 4f62 	cmp.w	r3, #57856	@ 0xe200
 8006192:	f000 80ee 	beq.w	8006372 <phNfcLib_GetDataParams+0x222>
 8006196:	f5b3 4f62 	cmp.w	r3, #57856	@ 0xe200
 800619a:	f300 80f6 	bgt.w	800638a <phNfcLib_GetDataParams+0x23a>
 800619e:	f5b3 4f61 	cmp.w	r3, #57600	@ 0xe100
 80061a2:	f000 80e9 	beq.w	8006378 <phNfcLib_GetDataParams+0x228>
 80061a6:	f5b3 4f61 	cmp.w	r3, #57600	@ 0xe100
 80061aa:	f300 80ee 	bgt.w	800638a <phNfcLib_GetDataParams+0x23a>
 80061ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061b2:	f000 80db 	beq.w	800636c <phNfcLib_GetDataParams+0x21c>
 80061b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061ba:	f300 80e6 	bgt.w	800638a <phNfcLib_GetDataParams+0x23a>
 80061be:	f5b3 5f18 	cmp.w	r3, #9728	@ 0x2600
 80061c2:	f000 80be 	beq.w	8006342 <phNfcLib_GetDataParams+0x1f2>
 80061c6:	f5b3 5f18 	cmp.w	r3, #9728	@ 0x2600
 80061ca:	f300 80de 	bgt.w	800638a <phNfcLib_GetDataParams+0x23a>
 80061ce:	f5b3 5f0c 	cmp.w	r3, #8960	@ 0x2300
 80061d2:	f000 80b0 	beq.w	8006336 <phNfcLib_GetDataParams+0x1e6>
 80061d6:	f5b3 5f0c 	cmp.w	r3, #8960	@ 0x2300
 80061da:	f300 80d6 	bgt.w	800638a <phNfcLib_GetDataParams+0x23a>
 80061de:	f5b3 5f04 	cmp.w	r3, #8448	@ 0x2100
 80061e2:	f000 80ab 	beq.w	800633c <phNfcLib_GetDataParams+0x1ec>
 80061e6:	f5b3 5f04 	cmp.w	r3, #8448	@ 0x2100
 80061ea:	f300 80ce 	bgt.w	800638a <phNfcLib_GetDataParams+0x23a>
 80061ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061f2:	f000 809d 	beq.w	8006330 <phNfcLib_GetDataParams+0x1e0>
 80061f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061fa:	f300 80c6 	bgt.w	800638a <phNfcLib_GetDataParams+0x23a>
 80061fe:	f5b3 5fe8 	cmp.w	r3, #7424	@ 0x1d00
 8006202:	f000 80ad 	beq.w	8006360 <phNfcLib_GetDataParams+0x210>
 8006206:	f5b3 5fe8 	cmp.w	r3, #7424	@ 0x1d00
 800620a:	f300 80be 	bgt.w	800638a <phNfcLib_GetDataParams+0x23a>
 800620e:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 8006212:	f000 80a2 	beq.w	800635a <phNfcLib_GetDataParams+0x20a>
 8006216:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 800621a:	f300 80b6 	bgt.w	800638a <phNfcLib_GetDataParams+0x23a>
 800621e:	f5b3 5fc8 	cmp.w	r3, #6400	@ 0x1900
 8006222:	f000 8082 	beq.w	800632a <phNfcLib_GetDataParams+0x1da>
 8006226:	f5b3 5fc8 	cmp.w	r3, #6400	@ 0x1900
 800622a:	f300 80ae 	bgt.w	800638a <phNfcLib_GetDataParams+0x23a>
 800622e:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8006232:	f000 8098 	beq.w	8006366 <phNfcLib_GetDataParams+0x216>
 8006236:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 800623a:	f300 80a6 	bgt.w	800638a <phNfcLib_GetDataParams+0x23a>
 800623e:	f5b3 5fa8 	cmp.w	r3, #5376	@ 0x1500
 8006242:	f000 8087 	beq.w	8006354 <phNfcLib_GetDataParams+0x204>
 8006246:	f5b3 5fa8 	cmp.w	r3, #5376	@ 0x1500
 800624a:	f300 809e 	bgt.w	800638a <phNfcLib_GetDataParams+0x23a>
 800624e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006252:	d07c      	beq.n	800634e <phNfcLib_GetDataParams+0x1fe>
 8006254:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006258:	f300 8097 	bgt.w	800638a <phNfcLib_GetDataParams+0x23a>
 800625c:	f5b3 5f88 	cmp.w	r3, #4352	@ 0x1100
 8006260:	d072      	beq.n	8006348 <phNfcLib_GetDataParams+0x1f8>
 8006262:	f5b3 5f88 	cmp.w	r3, #4352	@ 0x1100
 8006266:	f300 8090 	bgt.w	800638a <phNfcLib_GetDataParams+0x23a>
 800626a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800626e:	d059      	beq.n	8006324 <phNfcLib_GetDataParams+0x1d4>
 8006270:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006274:	f300 8089 	bgt.w	800638a <phNfcLib_GetDataParams+0x23a>
 8006278:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800627c:	d04f      	beq.n	800631e <phNfcLib_GetDataParams+0x1ce>
 800627e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006282:	f300 8082 	bgt.w	800638a <phNfcLib_GetDataParams+0x23a>
 8006286:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 800628a:	d042      	beq.n	8006312 <phNfcLib_GetDataParams+0x1c2>
 800628c:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 8006290:	dc7b      	bgt.n	800638a <phNfcLib_GetDataParams+0x23a>
 8006292:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006296:	d039      	beq.n	800630c <phNfcLib_GetDataParams+0x1bc>
 8006298:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800629c:	dc75      	bgt.n	800638a <phNfcLib_GetDataParams+0x23a>
 800629e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062a2:	d039      	beq.n	8006318 <phNfcLib_GetDataParams+0x1c8>
 80062a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062a8:	dc6f      	bgt.n	800638a <phNfcLib_GetDataParams+0x23a>
 80062aa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80062ae:	d02a      	beq.n	8006306 <phNfcLib_GetDataParams+0x1b6>
 80062b0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80062b4:	dc69      	bgt.n	800638a <phNfcLib_GetDataParams+0x23a>
 80062b6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80062ba:	d021      	beq.n	8006300 <phNfcLib_GetDataParams+0x1b0>
 80062bc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80062c0:	dc63      	bgt.n	800638a <phNfcLib_GetDataParams+0x23a>
 80062c2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80062c6:	d018      	beq.n	80062fa <phNfcLib_GetDataParams+0x1aa>
 80062c8:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80062cc:	dc5d      	bgt.n	800638a <phNfcLib_GetDataParams+0x23a>
 80062ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062d2:	d00f      	beq.n	80062f4 <phNfcLib_GetDataParams+0x1a4>
 80062d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062d8:	dc57      	bgt.n	800638a <phNfcLib_GetDataParams+0x23a>
 80062da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062de:	d003      	beq.n	80062e8 <phNfcLib_GetDataParams+0x198>
 80062e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062e4:	d003      	beq.n	80062ee <phNfcLib_GetDataParams+0x19e>
#endif /* defined (NXPBUILD__PHAL_MFPEVX_SW) || defined (NXPBUILD__PHAL_MFDFEVX_SW) || defined(NXPBUILD__PHAL_MFDFLIGHT_SW) ||   \
    defined (NXPBUILD__PHAL_MFDFEVX_SAM_NONX) || defined (NXPBUILD__PHAL_MFPEVX_SAM_NONX) || defined(NXPBUILD__PHAL_MFDUOX_SW)*/

        default:
            /* Do nothing. pDataparam is already null. */
            break;
 80062e6:	e050      	b.n	800638a <phNfcLib_GetDataParams+0x23a>
            pDataparam = (void *) &gphNfcLib_Params.sHal;
 80062e8:	4b2d      	ldr	r3, [pc, #180]	@ (80063a0 <phNfcLib_GetDataParams+0x250>)
 80062ea:	60fb      	str	r3, [r7, #12]
            break;
 80062ec:	e04e      	b.n	800638c <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.spalI14443p3a;
 80062ee:	4b2d      	ldr	r3, [pc, #180]	@ (80063a4 <phNfcLib_GetDataParams+0x254>)
 80062f0:	60fb      	str	r3, [r7, #12]
            break;
 80062f2:	e04b      	b.n	800638c <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.spalI14443p3b;
 80062f4:	4b2c      	ldr	r3, [pc, #176]	@ (80063a8 <phNfcLib_GetDataParams+0x258>)
 80062f6:	60fb      	str	r3, [r7, #12]
            break;
 80062f8:	e048      	b.n	800638c <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.spalI14443p4a;
 80062fa:	4b2c      	ldr	r3, [pc, #176]	@ (80063ac <phNfcLib_GetDataParams+0x25c>)
 80062fc:	60fb      	str	r3, [r7, #12]
            break;
 80062fe:	e045      	b.n	800638c <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.spalI14443p4;
 8006300:	4b2b      	ldr	r3, [pc, #172]	@ (80063b0 <phNfcLib_GetDataParams+0x260>)
 8006302:	60fb      	str	r3, [r7, #12]
            break;
 8006304:	e042      	b.n	800638c <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.spalMifare;
 8006306:	4b2b      	ldr	r3, [pc, #172]	@ (80063b4 <phNfcLib_GetDataParams+0x264>)
 8006308:	60fb      	str	r3, [r7, #12]
            break;
 800630a:	e03f      	b.n	800638c <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.spalSli15693;
 800630c:	4b2a      	ldr	r3, [pc, #168]	@ (80063b8 <phNfcLib_GetDataParams+0x268>)
 800630e:	60fb      	str	r3, [r7, #12]
            break;
 8006310:	e03c      	b.n	800638c <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.spalI18000p3m3;
 8006312:	4b2a      	ldr	r3, [pc, #168]	@ (80063bc <phNfcLib_GetDataParams+0x26c>)
 8006314:	60fb      	str	r3, [r7, #12]
            break;
 8006316:	e039      	b.n	800638c <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.spalFelica;
 8006318:	4b29      	ldr	r3, [pc, #164]	@ (80063c0 <phNfcLib_GetDataParams+0x270>)
 800631a:	60fb      	str	r3, [r7, #12]
            break;
 800631c:	e036      	b.n	800638c <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.spalI14443p4mC;
 800631e:	4b29      	ldr	r3, [pc, #164]	@ (80063c4 <phNfcLib_GetDataParams+0x274>)
 8006320:	60fb      	str	r3, [r7, #12]
            break;
 8006322:	e033      	b.n	800638c <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.salMFC;
 8006324:	4b28      	ldr	r3, [pc, #160]	@ (80063c8 <phNfcLib_GetDataParams+0x278>)
 8006326:	60fb      	str	r3, [r7, #12]
            break;
 8006328:	e030      	b.n	800638c <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.salMFDF;
 800632a:	4b28      	ldr	r3, [pc, #160]	@ (80063cc <phNfcLib_GetDataParams+0x27c>)
 800632c:	60fb      	str	r3, [r7, #12]
            break;
 800632e:	e02d      	b.n	800638c <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.salMFDFEVx;
 8006330:	4b27      	ldr	r3, [pc, #156]	@ (80063d0 <phNfcLib_GetDataParams+0x280>)
 8006332:	60fb      	str	r3, [r7, #12]
            break;
 8006334:	e02a      	b.n	800638c <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.salMFDFLight;
 8006336:	4b27      	ldr	r3, [pc, #156]	@ (80063d4 <phNfcLib_GetDataParams+0x284>)
 8006338:	60fb      	str	r3, [r7, #12]
            break;
 800633a:	e027      	b.n	800638c <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.salMFPEVx;
 800633c:	4b26      	ldr	r3, [pc, #152]	@ (80063d8 <phNfcLib_GetDataParams+0x288>)
 800633e:	60fb      	str	r3, [r7, #12]
            break;
 8006340:	e024      	b.n	800638c <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.salMFNtag42XDNA;
 8006342:	4b26      	ldr	r3, [pc, #152]	@ (80063dc <phNfcLib_GetDataParams+0x28c>)
 8006344:	60fb      	str	r3, [r7, #12]
            break;
 8006346:	e021      	b.n	800638c <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.salMFUL;
 8006348:	4b25      	ldr	r3, [pc, #148]	@ (80063e0 <phNfcLib_GetDataParams+0x290>)
 800634a:	60fb      	str	r3, [r7, #12]
            break;
 800634c:	e01e      	b.n	800638c <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.salFelica;
 800634e:	4b25      	ldr	r3, [pc, #148]	@ (80063e4 <phNfcLib_GetDataParams+0x294>)
 8006350:	60fb      	str	r3, [r7, #12]
            break;
 8006352:	e01b      	b.n	800638c <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.salICode;
 8006354:	4b24      	ldr	r3, [pc, #144]	@ (80063e8 <phNfcLib_GetDataParams+0x298>)
 8006356:	60fb      	str	r3, [r7, #12]
            break;
 8006358:	e018      	b.n	800638c <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.salT1T;
 800635a:	4b24      	ldr	r3, [pc, #144]	@ (80063ec <phNfcLib_GetDataParams+0x29c>)
 800635c:	60fb      	str	r3, [r7, #12]
            break;
 800635e:	e015      	b.n	800638c <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.salTop;
 8006360:	4b23      	ldr	r3, [pc, #140]	@ (80063f0 <phNfcLib_GetDataParams+0x2a0>)
 8006362:	60fb      	str	r3, [r7, #12]
            break;
 8006364:	e012      	b.n	800638c <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.salI18000p3m3;
 8006366:	4b23      	ldr	r3, [pc, #140]	@ (80063f4 <phNfcLib_GetDataParams+0x2a4>)
 8006368:	60fb      	str	r3, [r7, #12]
            break;
 800636a:	e00f      	b.n	800638c <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.sDiscLoop;
 800636c:	4b22      	ldr	r3, [pc, #136]	@ (80063f8 <phNfcLib_GetDataParams+0x2a8>)
 800636e:	60fb      	str	r3, [r7, #12]
            break;
 8006370:	e00c      	b.n	800638c <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) PTR_sKeyStore;
 8006372:	4b22      	ldr	r3, [pc, #136]	@ (80063fc <phNfcLib_GetDataParams+0x2ac>)
 8006374:	60fb      	str	r3, [r7, #12]
            break;
 8006376:	e009      	b.n	800638c <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) PTR_sCryptoSym;
 8006378:	2300      	movs	r3, #0
 800637a:	60fb      	str	r3, [r7, #12]
            break;
 800637c:	e006      	b.n	800638c <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) PTR_sCryptoRng;
 800637e:	4b20      	ldr	r3, [pc, #128]	@ (8006400 <phNfcLib_GetDataParams+0x2b0>)
 8006380:	60fb      	str	r3, [r7, #12]
            break;
 8006382:	e003      	b.n	800638c <phNfcLib_GetDataParams+0x23c>
            pDataparam = &sTMI;
 8006384:	4b1f      	ldr	r3, [pc, #124]	@ (8006404 <phNfcLib_GetDataParams+0x2b4>)
 8006386:	60fb      	str	r3, [r7, #12]
            break;
 8006388:	e000      	b.n	800638c <phNfcLib_GetDataParams+0x23c>
            break;
 800638a:	bf00      	nop
        }
    }
    return pDataparam;
 800638c:	68fb      	ldr	r3, [r7, #12]
}
 800638e:	4618      	mov	r0, r3
 8006390:	3714      	adds	r7, #20
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	20000db0 	.word	0x20000db0
 80063a0:	20000538 	.word	0x20000538
 80063a4:	200006e8 	.word	0x200006e8
 80063a8:	20000700 	.word	0x20000700
 80063ac:	2000072c 	.word	0x2000072c
 80063b0:	20000740 	.word	0x20000740
 80063b4:	200007d4 	.word	0x200007d4
 80063b8:	20000754 	.word	0x20000754
 80063bc:	20000770 	.word	0x20000770
 80063c0:	2000077c 	.word	0x2000077c
 80063c4:	2000079c 	.word	0x2000079c
 80063c8:	20000818 	.word	0x20000818
 80063cc:	20000824 	.word	0x20000824
 80063d0:	2000088c 	.word	0x2000088c
 80063d4:	20000940 	.word	0x20000940
 80063d8:	200009ec 	.word	0x200009ec
 80063dc:	20000a8c 	.word	0x20000a8c
 80063e0:	20000a70 	.word	0x20000a70
 80063e4:	200007ec 	.word	0x200007ec
 80063e8:	200007f8 	.word	0x200007f8
 80063ec:	20000b34 	.word	0x20000b34
 80063f0:	20000b44 	.word	0x20000b44
 80063f4:	200007e0 	.word	0x200007e0
 80063f8:	20000bc4 	.word	0x20000bc4
 80063fc:	200006cc 	.word	0x200006cc
 8006400:	20000d90 	.word	0x20000d90
 8006404:	200014f0 	.word	0x200014f0

08006408 <phTMIUtils_Init>:
phStatus_t phTMIUtils_Init(
                           phTMIUtils_t * pDataParams,
                           uint8_t * pTMIBuffer,
                           uint32_t dwBufLen
                           )
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]
    PH_ASSERT_NULL (pDataParams);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d101      	bne.n	800641e <phTMIUtils_Init+0x16>
 800641a:	2321      	movs	r3, #33	@ 0x21
 800641c:	e018      	b.n	8006450 <phTMIUtils_Init+0x48>
    /* Check parameters */
    if ((pTMIBuffer == NULL) || (dwBufLen == 0U))
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d002      	beq.n	800642a <phTMIUtils_Init+0x22>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d102      	bne.n	8006430 <phTMIUtils_Init+0x28>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_TMIUTILS);
 800642a:	f24e 5321 	movw	r3, #58657	@ 0xe521
 800642e:	e00f      	b.n	8006450 <phTMIUtils_Init+0x48>
    }
    pDataParams->pTMIBuffer = pTMIBuffer;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	68ba      	ldr	r2, [r7, #8]
 8006434:	601a      	str	r2, [r3, #0]
    pDataParams->dwTMIBufLen = dwBufLen;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	605a      	str	r2, [r3, #4]
    pDataParams->dwTMIbufIndex = 0;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	609a      	str	r2, [r3, #8]
    pDataParams->bTMIStatus = PH_OFF;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	731a      	strb	r2, [r3, #12]
    pDataParams->dwOffsetInTMI = 0;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	611a      	str	r2, [r3, #16]

    return PH_ERR_SUCCESS;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3714      	adds	r7, #20
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <phTMIUtils_ActivateTMICollection>:

phStatus_t phTMIUtils_ActivateTMICollection(
    phTMIUtils_t *pDataParams,
    uint8_t bOption
    )
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	460b      	mov	r3, r1
 8006466:	70fb      	strb	r3, [r7, #3]
    if ((pDataParams == NULL) || (pDataParams->dwTMIBufLen == 0U))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d003      	beq.n	8006476 <phTMIUtils_ActivateTMICollection+0x1a>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d102      	bne.n	800647c <phTMIUtils_ActivateTMICollection+0x20>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_TMIUTILS);
 8006476:	f24e 5321 	movw	r3, #58657	@ 0xe521
 800647a:	e02c      	b.n	80064d6 <phTMIUtils_ActivateTMICollection+0x7a>
    }

    switch (bOption)
 800647c:	78fb      	ldrb	r3, [r7, #3]
 800647e:	2b04      	cmp	r3, #4
 8006480:	d825      	bhi.n	80064ce <phTMIUtils_ActivateTMICollection+0x72>
 8006482:	a201      	add	r2, pc, #4	@ (adr r2, 8006488 <phTMIUtils_ActivateTMICollection+0x2c>)
 8006484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006488:	0800649d 	.word	0x0800649d
 800648c:	080064b1 	.word	0x080064b1
 8006490:	080064b9 	.word	0x080064b9
 8006494:	080064b1 	.word	0x080064b1
 8006498:	080064c1 	.word	0x080064c1
    {
    case PH_TMIUTILS_DEACTIVATE_TMI:

        /* Deactivate TMI Collection */
        pDataParams->dwTMIBufLen = 0;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	605a      	str	r2, [r3, #4]
        pDataParams->dwOffsetInTMI = 0;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	611a      	str	r2, [r3, #16]
        pDataParams->bTMIStatus = PH_OFF;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	731a      	strb	r2, [r3, #12]
        break;
 80064ae:	e011      	b.n	80064d4 <phTMIUtils_ActivateTMICollection+0x78>

    case PH_TMIUTILS_ACTIVATE_TMI:
    case PH_TMIUTILS_RESUME_TMI:

        /* Activate/Resume TMI collection */
        pDataParams->bTMIStatus = PH_ON;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	731a      	strb	r2, [r3, #12]
        break;
 80064b6:	e00d      	b.n	80064d4 <phTMIUtils_ActivateTMICollection+0x78>

    case PH_TMIUTILS_PAUSE_TMI:

        /* Pause TMI collection */
        pDataParams->bTMIStatus = PH_OFF;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	731a      	strb	r2, [r3, #12]
        break;
 80064be:	e009      	b.n	80064d4 <phTMIUtils_ActivateTMICollection+0x78>

    case PH_TMIUTILS_RESET_TMI:

        /* Reset TMI collection buffer index to 0 */
        pDataParams->dwTMIbufIndex = 0;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	609a      	str	r2, [r3, #8]
        pDataParams->dwOffsetInTMI = 0;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	611a      	str	r2, [r3, #16]
        break;
 80064cc:	e002      	b.n	80064d4 <phTMIUtils_ActivateTMICollection+0x78>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_TMIUTILS);
 80064ce:	f24e 5321 	movw	r3, #58657	@ 0xe521
 80064d2:	e000      	b.n	80064d6 <phTMIUtils_ActivateTMICollection+0x7a>

    }
    return PH_ERR_SUCCESS;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	370c      	adds	r7, #12
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop

080064e4 <phTools_DecodeParity>:
                                uint16_t wOutBufferSize,
                                uint8_t * pOutBuffer,
                                uint16_t * pOutBufferLength,
                                uint8_t * pOutBufferBits
                                )
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b086      	sub	sp, #24
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6039      	str	r1, [r7, #0]
 80064ec:	4611      	mov	r1, r2
 80064ee:	461a      	mov	r2, r3
 80064f0:	4603      	mov	r3, r0
 80064f2:	71fb      	strb	r3, [r7, #7]
 80064f4:	460b      	mov	r3, r1
 80064f6:	80bb      	strh	r3, [r7, #4]
 80064f8:	4613      	mov	r3, r2
 80064fa:	71bb      	strb	r3, [r7, #6]
    uint16_t    PH_MEMLOC_REM wDiv;
    uint8_t     PH_MEMLOC_REM bMod;
    uint8_t     PH_MEMLOC_REM bParity;

    /* Parameter check */
    if (((bOption != PH_TOOLS_PARITY_OPTION_EVEN) && (bOption != PH_TOOLS_PARITY_OPTION_ODD)) || (bInBufferBits > 7U))
 80064fc:	79fb      	ldrb	r3, [r7, #7]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d002      	beq.n	8006508 <phTools_DecodeParity+0x24>
 8006502:	79fb      	ldrb	r3, [r7, #7]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d102      	bne.n	800650e <phTools_DecodeParity+0x2a>
 8006508:	79bb      	ldrb	r3, [r7, #6]
 800650a:	2b07      	cmp	r3, #7
 800650c:	d902      	bls.n	8006514 <phTools_DecodeParity+0x30>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_TOOLS);
 800650e:	f24e 3321 	movw	r3, #58145	@ 0xe321
 8006512:	e0fa      	b.n	800670a <phTools_DecodeParity+0x226>
    }

    /* Parameter check */
    if (wInBufferLength == 0U)
 8006514:	88bb      	ldrh	r3, [r7, #4]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10d      	bne.n	8006536 <phTools_DecodeParity+0x52>
    {
        /* Zero input length is simply passed through */
        if (bInBufferBits == 0U)
 800651a:	79bb      	ldrb	r3, [r7, #6]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d107      	bne.n	8006530 <phTools_DecodeParity+0x4c>
        {
            (*pOutBufferLength) = 0;
 8006520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006522:	2200      	movs	r2, #0
 8006524:	801a      	strh	r2, [r3, #0]
            *pOutBufferBits = 0;
 8006526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006528:	2200      	movs	r2, #0
 800652a:	701a      	strb	r2, [r3, #0]
            return PH_ERR_SUCCESS;
 800652c:	2300      	movs	r3, #0
 800652e:	e0ec      	b.n	800670a <phTools_DecodeParity+0x226>
        }
        /* Invalid parameter */
        else
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_TOOLS);
 8006530:	f24e 3321 	movw	r3, #58145	@ 0xe321
 8006534:	e0e9      	b.n	800670a <phTools_DecodeParity+0x226>
        }
    }

    /* Retrieve DIV and MOD */
    if (bInBufferBits == 0U)
 8006536:	79bb      	ldrb	r3, [r7, #6]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d111      	bne.n	8006560 <phTools_DecodeParity+0x7c>
    {
        wDiv = (uint16_t)(wInBufferLength / 9U);
 800653c:	88bb      	ldrh	r3, [r7, #4]
 800653e:	4a75      	ldr	r2, [pc, #468]	@ (8006714 <phTools_DecodeParity+0x230>)
 8006540:	fba2 2303 	umull	r2, r3, r2, r3
 8006544:	085b      	lsrs	r3, r3, #1
 8006546:	823b      	strh	r3, [r7, #16]
        bMod = (uint8_t)(wInBufferLength % 9U);
 8006548:	88ba      	ldrh	r2, [r7, #4]
 800654a:	4b72      	ldr	r3, [pc, #456]	@ (8006714 <phTools_DecodeParity+0x230>)
 800654c:	fba3 1302 	umull	r1, r3, r3, r2
 8006550:	0859      	lsrs	r1, r3, #1
 8006552:	460b      	mov	r3, r1
 8006554:	00db      	lsls	r3, r3, #3
 8006556:	440b      	add	r3, r1
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	b29b      	uxth	r3, r3
 800655c:	73fb      	strb	r3, [r7, #15]
 800655e:	e012      	b.n	8006586 <phTools_DecodeParity+0xa2>
    }
    else
    {
        wDiv = (uint16_t)((wInBufferLength - 1U) / 9U);
 8006560:	88bb      	ldrh	r3, [r7, #4]
 8006562:	3b01      	subs	r3, #1
 8006564:	4a6b      	ldr	r2, [pc, #428]	@ (8006714 <phTools_DecodeParity+0x230>)
 8006566:	fba2 2303 	umull	r2, r3, r2, r3
 800656a:	085b      	lsrs	r3, r3, #1
 800656c:	823b      	strh	r3, [r7, #16]
        bMod = (uint8_t)((wInBufferLength - 1U) % 9U);
 800656e:	88bb      	ldrh	r3, [r7, #4]
 8006570:	1e59      	subs	r1, r3, #1
 8006572:	4b68      	ldr	r3, [pc, #416]	@ (8006714 <phTools_DecodeParity+0x230>)
 8006574:	fba3 2301 	umull	r2, r3, r3, r1
 8006578:	085a      	lsrs	r2, r3, #1
 800657a:	4613      	mov	r3, r2
 800657c:	00db      	lsls	r3, r3, #3
 800657e:	4413      	add	r3, r2
 8006580:	1aca      	subs	r2, r1, r3
 8006582:	4613      	mov	r3, r2
 8006584:	73fb      	strb	r3, [r7, #15]
    }

    /* Calculate number of output bytes */
    (*pOutBufferLength) = (uint16_t)((wDiv << 3U) + bMod);
 8006586:	8a3b      	ldrh	r3, [r7, #16]
 8006588:	00db      	lsls	r3, r3, #3
 800658a:	b29a      	uxth	r2, r3
 800658c:	7bfb      	ldrb	r3, [r7, #15]
 800658e:	b29b      	uxth	r3, r3
 8006590:	4413      	add	r3, r2
 8006592:	b29a      	uxth	r2, r3
 8006594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006596:	801a      	strh	r2, [r3, #0]
    if (bMod > bInBufferBits)
 8006598:	7bfa      	ldrb	r2, [r7, #15]
 800659a:	79bb      	ldrb	r3, [r7, #6]
 800659c:	429a      	cmp	r2, r3
 800659e:	d905      	bls.n	80065ac <phTools_DecodeParity+0xc8>
    {
        --(*pOutBufferLength);
 80065a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065a2:	881b      	ldrh	r3, [r3, #0]
 80065a4:	3b01      	subs	r3, #1
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065aa:	801a      	strh	r2, [r3, #0]
    }

    /* Calculate number of rest-bits of output */
    *pOutBufferBits = (uint8_t)((8U - (((8U + ((*pOutBufferLength) % 8U)) - bInBufferBits) % 8U)) % 8U);
 80065ac:	79bb      	ldrb	r3, [r7, #6]
 80065ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80065b0:	8812      	ldrh	r2, [r2, #0]
 80065b2:	1a9b      	subs	r3, r3, r2
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	f003 0307 	and.w	r3, r3, #7
 80065ba:	b2da      	uxtb	r2, r3
 80065bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065be:	701a      	strb	r2, [r3, #0]

    /* Increment output length in case of incomplete byte */
    if (*pOutBufferBits > 0U)
 80065c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d005      	beq.n	80065d4 <phTools_DecodeParity+0xf0>
    {
        ++(*pOutBufferLength);
 80065c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ca:	881b      	ldrh	r3, [r3, #0]
 80065cc:	3301      	adds	r3, #1
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065d2:	801a      	strh	r2, [r3, #0]
    }

    /* Buffer overflow check*/
    if (wOutBufferSize < (*pOutBufferLength))
 80065d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065d6:	881b      	ldrh	r3, [r3, #0]
 80065d8:	8c3a      	ldrh	r2, [r7, #32]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d205      	bcs.n	80065ea <phTools_DecodeParity+0x106>
    {
        (*pOutBufferLength) = 0;
 80065de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065e0:	2200      	movs	r2, #0
 80065e2:	801a      	strh	r2, [r3, #0]
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_TOOLS);
 80065e4:	f24e 3304 	movw	r3, #58116	@ 0xe304
 80065e8:	e08f      	b.n	800670a <phTools_DecodeParity+0x226>
    }

    /* Prepare loop vars */
    wByteIndexIn = 0U;
 80065ea:	2300      	movs	r3, #0
 80065ec:	82fb      	strh	r3, [r7, #22]
    wByteIndexOut = 0U;
 80065ee:	2300      	movs	r3, #0
 80065f0:	82bb      	strh	r3, [r7, #20]
    bBitPosition = 7U;
 80065f2:	2307      	movs	r3, #7
 80065f4:	74fb      	strb	r3, [r7, #19]

    /* Do for each byte */
    for (; wByteIndexOut < (*pOutBufferLength); ++wByteIndexOut, ++wByteIndexIn, --bBitPosition)
 80065f6:	e068      	b.n	80066ca <phTools_DecodeParity+0x1e6>
    {
        /* Append source bits to output */
        pOutBuffer[wByteIndexOut] = (uint8_t)(pInBuffer[wByteIndexIn] >> (7U - bBitPosition));
 80065f8:	8afb      	ldrh	r3, [r7, #22]
 80065fa:	683a      	ldr	r2, [r7, #0]
 80065fc:	4413      	add	r3, r2
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	461a      	mov	r2, r3
 8006602:	7cfb      	ldrb	r3, [r7, #19]
 8006604:	f1c3 0307 	rsb	r3, r3, #7
 8006608:	fa42 f103 	asr.w	r1, r2, r3
 800660c:	8abb      	ldrh	r3, [r7, #20]
 800660e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006610:	4413      	add	r3, r2
 8006612:	b2ca      	uxtb	r2, r1
 8006614:	701a      	strb	r2, [r3, #0]

        /* If there is more data bits in the sourcebyte append it to next data byte */
        if ((wByteIndexIn + /* */ 1U) < wInBufferLength)
 8006616:	8afb      	ldrh	r3, [r7, #22]
 8006618:	1c5a      	adds	r2, r3, #1
 800661a:	88bb      	ldrh	r3, [r7, #4]
 800661c:	429a      	cmp	r2, r3
 800661e:	d243      	bcs.n	80066a8 <phTools_DecodeParity+0x1c4>
        {
            /* Append remaining bits to output */
            pOutBuffer[wByteIndexOut] |= (uint8_t)(pInBuffer[wByteIndexIn + 1U] << (1U + bBitPosition));
 8006620:	8abb      	ldrh	r3, [r7, #20]
 8006622:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006624:	4413      	add	r3, r2
 8006626:	7819      	ldrb	r1, [r3, #0]
 8006628:	8afb      	ldrh	r3, [r7, #22]
 800662a:	3301      	adds	r3, #1
 800662c:	683a      	ldr	r2, [r7, #0]
 800662e:	4413      	add	r3, r2
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	461a      	mov	r2, r3
 8006634:	7cfb      	ldrb	r3, [r7, #19]
 8006636:	3301      	adds	r3, #1
 8006638:	fa02 f303 	lsl.w	r3, r2, r3
 800663c:	b2da      	uxtb	r2, r3
 800663e:	8abb      	ldrh	r3, [r7, #20]
 8006640:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006642:	4403      	add	r3, r0
 8006644:	430a      	orrs	r2, r1
 8006646:	b2d2      	uxtb	r2, r2
 8006648:	701a      	strb	r2, [r3, #0]

            /* Perform parity checking if this isn't an incomplete byte */
            if ((*pOutBufferBits == 0U)
 800664a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d005      	beq.n	800665e <phTools_DecodeParity+0x17a>
                || ((wByteIndexOut + /* */ 1U) < (*pOutBufferLength)))
 8006652:	8abb      	ldrh	r3, [r7, #20]
 8006654:	3301      	adds	r3, #1
 8006656:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006658:	8812      	ldrh	r2, [r2, #0]
 800665a:	4293      	cmp	r3, r2
 800665c:	d224      	bcs.n	80066a8 <phTools_DecodeParity+0x1c4>
            {
                bParity = phTools_CalcParity(pOutBuffer[wByteIndexOut], bOption);
 800665e:	8abb      	ldrh	r3, [r7, #20]
 8006660:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006662:	4413      	add	r3, r2
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	79fa      	ldrb	r2, [r7, #7]
 8006668:	4611      	mov	r1, r2
 800666a:	4618      	mov	r0, r3
 800666c:	f000 f854 	bl	8006718 <phTools_CalcParity>
 8006670:	4603      	mov	r3, r0
 8006672:	73bb      	strb	r3, [r7, #14]
                if ((pInBuffer[wByteIndexIn + 1U] & (uint8_t)(1U << (7U - bBitPosition))) != (bParity << (7U - bBitPosition)))
 8006674:	8afb      	ldrh	r3, [r7, #22]
 8006676:	3301      	adds	r3, #1
 8006678:	683a      	ldr	r2, [r7, #0]
 800667a:	4413      	add	r3, r2
 800667c:	781a      	ldrb	r2, [r3, #0]
 800667e:	7cfb      	ldrb	r3, [r7, #19]
 8006680:	f1c3 0307 	rsb	r3, r3, #7
 8006684:	2101      	movs	r1, #1
 8006686:	fa01 f303 	lsl.w	r3, r1, r3
 800668a:	b2db      	uxtb	r3, r3
 800668c:	4013      	ands	r3, r2
 800668e:	b2db      	uxtb	r3, r3
 8006690:	4619      	mov	r1, r3
 8006692:	7bba      	ldrb	r2, [r7, #14]
 8006694:	7cfb      	ldrb	r3, [r7, #19]
 8006696:	f1c3 0307 	rsb	r3, r3, #7
 800669a:	fa02 f303 	lsl.w	r3, r2, r3
 800669e:	4299      	cmp	r1, r3
 80066a0:	d002      	beq.n	80066a8 <phTools_DecodeParity+0x1c4>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INTEGRITY_ERROR, PH_COMP_TOOLS);
 80066a2:	f24e 3302 	movw	r3, #58114	@ 0xe302
 80066a6:	e030      	b.n	800670a <phTools_DecodeParity+0x226>
                }
            }
        }

        /* We have reached the 8th parity bit, the input buffer index is now one ahead */
        if (bBitPosition == 0U)
 80066a8:	7cfb      	ldrb	r3, [r7, #19]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d104      	bne.n	80066b8 <phTools_DecodeParity+0x1d4>
        {
            bBitPosition = 8;
 80066ae:	2308      	movs	r3, #8
 80066b0:	74fb      	strb	r3, [r7, #19]
            ++wByteIndexIn;
 80066b2:	8afb      	ldrh	r3, [r7, #22]
 80066b4:	3301      	adds	r3, #1
 80066b6:	82fb      	strh	r3, [r7, #22]
    for (; wByteIndexOut < (*pOutBufferLength); ++wByteIndexOut, ++wByteIndexIn, --bBitPosition)
 80066b8:	8abb      	ldrh	r3, [r7, #20]
 80066ba:	3301      	adds	r3, #1
 80066bc:	82bb      	strh	r3, [r7, #20]
 80066be:	8afb      	ldrh	r3, [r7, #22]
 80066c0:	3301      	adds	r3, #1
 80066c2:	82fb      	strh	r3, [r7, #22]
 80066c4:	7cfb      	ldrb	r3, [r7, #19]
 80066c6:	3b01      	subs	r3, #1
 80066c8:	74fb      	strb	r3, [r7, #19]
 80066ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066cc:	881b      	ldrh	r3, [r3, #0]
 80066ce:	8aba      	ldrh	r2, [r7, #20]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d391      	bcc.n	80065f8 <phTools_DecodeParity+0x114>
        }
    }

    /* Mask out invalid bits of last byte */
    if (*pOutBufferBits > 0U)
 80066d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d015      	beq.n	8006708 <phTools_DecodeParity+0x224>
    {
        pOutBuffer[(*pOutBufferLength) - 1U] &= (uint8_t)(0xFFU >> (8U - *pOutBufferBits));
 80066dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066de:	881b      	ldrh	r3, [r3, #0]
 80066e0:	3b01      	subs	r3, #1
 80066e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066e4:	4413      	add	r3, r2
 80066e6:	7819      	ldrb	r1, [r3, #0]
 80066e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	f1c3 0308 	rsb	r3, r3, #8
 80066f0:	22ff      	movs	r2, #255	@ 0xff
 80066f2:	fa22 f303 	lsr.w	r3, r2, r3
 80066f6:	b2da      	uxtb	r2, r3
 80066f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066fa:	881b      	ldrh	r3, [r3, #0]
 80066fc:	3b01      	subs	r3, #1
 80066fe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006700:	4403      	add	r3, r0
 8006702:	400a      	ands	r2, r1
 8006704:	b2d2      	uxtb	r2, r2
 8006706:	701a      	strb	r2, [r3, #0]
    }

    return PH_ERR_SUCCESS;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3718      	adds	r7, #24
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	38e38e39 	.word	0x38e38e39

08006718 <phTools_CalcParity>:

static uint8_t phTools_CalcParity(
                                  uint8_t bDataByte,
                                  uint8_t bOption
                                  )
{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	4603      	mov	r3, r0
 8006720:	460a      	mov	r2, r1
 8006722:	71fb      	strb	r3, [r7, #7]
 8006724:	4613      	mov	r3, r2
 8006726:	71bb      	strb	r3, [r7, #6]
    uint8_t PH_MEMLOC_REM bBit;
    uint8_t PH_MEMLOC_REM bParity;

    if (bOption == PH_TOOLS_PARITY_OPTION_EVEN)
 8006728:	79bb      	ldrb	r3, [r7, #6]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d102      	bne.n	8006734 <phTools_CalcParity+0x1c>
    {
        bParity = 0x00;
 800672e:	2300      	movs	r3, #0
 8006730:	73bb      	strb	r3, [r7, #14]
 8006732:	e001      	b.n	8006738 <phTools_CalcParity+0x20>
    }
    else
    {
        bParity = 0x01;
 8006734:	2301      	movs	r3, #1
 8006736:	73bb      	strb	r3, [r7, #14]
    }

    for (bBit = 0; bBit < 8U; ++bBit)
 8006738:	2300      	movs	r3, #0
 800673a:	73fb      	strb	r3, [r7, #15]
 800673c:	e00f      	b.n	800675e <phTools_CalcParity+0x46>
    {
        if (0U != (bDataByte & (uint8_t)(1U << bBit)))
 800673e:	7bfb      	ldrb	r3, [r7, #15]
 8006740:	2201      	movs	r2, #1
 8006742:	fa02 f303 	lsl.w	r3, r2, r3
 8006746:	b2da      	uxtb	r2, r3
 8006748:	79fb      	ldrb	r3, [r7, #7]
 800674a:	4013      	ands	r3, r2
 800674c:	b2db      	uxtb	r3, r3
 800674e:	2b00      	cmp	r3, #0
 8006750:	d002      	beq.n	8006758 <phTools_CalcParity+0x40>
        {
            ++bParity;
 8006752:	7bbb      	ldrb	r3, [r7, #14]
 8006754:	3301      	adds	r3, #1
 8006756:	73bb      	strb	r3, [r7, #14]
    for (bBit = 0; bBit < 8U; ++bBit)
 8006758:	7bfb      	ldrb	r3, [r7, #15]
 800675a:	3301      	adds	r3, #1
 800675c:	73fb      	strb	r3, [r7, #15]
 800675e:	7bfb      	ldrb	r3, [r7, #15]
 8006760:	2b07      	cmp	r3, #7
 8006762:	d9ec      	bls.n	800673e <phTools_CalcParity+0x26>
        }
    }
    return bParity & 0x01U;
 8006764:	7bbb      	ldrb	r3, [r7, #14]
 8006766:	f003 0301 	and.w	r3, r3, #1
 800676a:	b2db      	uxtb	r3, r3
}
 800676c:	4618      	mov	r0, r3
 800676e:	3714      	adds	r7, #20
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <phTools_UpdateCrc_B>:

static void phTools_UpdateCrc_B(uint8_t bCh, uint16_t *pLpwCrc)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	4603      	mov	r3, r0
 8006780:	6039      	str	r1, [r7, #0]
 8006782:	71fb      	strb	r3, [r7, #7]
    bCh = (bCh^(uint8_t)((*pLpwCrc)&0x00FFU));
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	881b      	ldrh	r3, [r3, #0]
 8006788:	b2da      	uxtb	r2, r3
 800678a:	79fb      	ldrb	r3, [r7, #7]
 800678c:	4053      	eors	r3, r2
 800678e:	71fb      	strb	r3, [r7, #7]
    bCh = (bCh ^ (bCh<<4U));
 8006790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006794:	011b      	lsls	r3, r3, #4
 8006796:	b25a      	sxtb	r2, r3
 8006798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800679c:	4053      	eors	r3, r2
 800679e:	b25b      	sxtb	r3, r3
 80067a0:	71fb      	strb	r3, [r7, #7]
    *pLpwCrc = (*pLpwCrc >> 8U) ^ ((uint16_t)bCh << 8U) ^ ((uint16_t)bCh << 3U) ^ ((uint16_t)bCh>>4U);
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	881b      	ldrh	r3, [r3, #0]
 80067a6:	0a1b      	lsrs	r3, r3, #8
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	b21a      	sxth	r2, r3
 80067ac:	79fb      	ldrb	r3, [r7, #7]
 80067ae:	b21b      	sxth	r3, r3
 80067b0:	021b      	lsls	r3, r3, #8
 80067b2:	b21b      	sxth	r3, r3
 80067b4:	4053      	eors	r3, r2
 80067b6:	b21a      	sxth	r2, r3
 80067b8:	79fb      	ldrb	r3, [r7, #7]
 80067ba:	b21b      	sxth	r3, r3
 80067bc:	00db      	lsls	r3, r3, #3
 80067be:	b21b      	sxth	r3, r3
 80067c0:	4053      	eors	r3, r2
 80067c2:	b21a      	sxth	r2, r3
 80067c4:	79fb      	ldrb	r3, [r7, #7]
 80067c6:	091b      	lsrs	r3, r3, #4
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	b21b      	sxth	r3, r3
 80067cc:	4053      	eors	r3, r2
 80067ce:	b21b      	sxth	r3, r3
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	801a      	strh	r2, [r3, #0]
}
 80067d6:	bf00      	nop
 80067d8:	370c      	adds	r7, #12
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <phTools_ComputeCrc_B>:

phStatus_t phTools_ComputeCrc_B(
                                uint8_t *pData,
                                uint32_t dwLength,
                                uint8_t *pCrc)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b086      	sub	sp, #24
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	60f8      	str	r0, [r7, #12]
 80067ea:	60b9      	str	r1, [r7, #8]
 80067ec:	607a      	str	r2, [r7, #4]
    uint8_t PH_MEMLOC_REM bChBlock = 0;
 80067ee:	2300      	movs	r3, #0
 80067f0:	75fb      	strb	r3, [r7, #23]
    uint16_t PH_MEMLOC_REM wCrc = 0xFFFF;
 80067f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80067f6:	82bb      	strh	r3, [r7, #20]

    do
    {
        bChBlock = *pData++;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	1c5a      	adds	r2, r3, #1
 80067fc:	60fa      	str	r2, [r7, #12]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	75fb      	strb	r3, [r7, #23]
        phTools_UpdateCrc_B(bChBlock, &wCrc);
 8006802:	f107 0214 	add.w	r2, r7, #20
 8006806:	7dfb      	ldrb	r3, [r7, #23]
 8006808:	4611      	mov	r1, r2
 800680a:	4618      	mov	r0, r3
 800680c:	f7ff ffb4 	bl	8006778 <phTools_UpdateCrc_B>
    } while (0u != (--dwLength));
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	3b01      	subs	r3, #1
 8006814:	60bb      	str	r3, [r7, #8]
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d1ed      	bne.n	80067f8 <phTools_ComputeCrc_B+0x16>

    wCrc = ~wCrc;
 800681c:	8abb      	ldrh	r3, [r7, #20]
 800681e:	43db      	mvns	r3, r3
 8006820:	b29b      	uxth	r3, r3
 8006822:	82bb      	strh	r3, [r7, #20]

    pCrc[0] = (uint8_t) (wCrc & 0xFFU);
 8006824:	8abb      	ldrh	r3, [r7, #20]
 8006826:	b2da      	uxtb	r2, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	701a      	strb	r2, [r3, #0]
    pCrc[1] = (uint8_t) ( (wCrc>>8U) & 0xFFU);
 800682c:	8abb      	ldrh	r3, [r7, #20]
 800682e:	0a1b      	lsrs	r3, r3, #8
 8006830:	b29a      	uxth	r2, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	3301      	adds	r3, #1
 8006836:	b2d2      	uxtb	r2, r2
 8006838:	701a      	strb	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3718      	adds	r7, #24
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <phacDiscLoop_Sw_Init>:
phStatus_t phacDiscLoop_Sw_Init(
                                phacDiscLoop_Sw_DataParams_t * pDataParams,
                                uint16_t wSizeOfDataParams,
                                void * pHalDataParams
                                )
{
 8006844:	b480      	push	{r7}
 8006846:	b087      	sub	sp, #28
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	460b      	mov	r3, r1
 800684e:	607a      	str	r2, [r7, #4]
 8006850:	817b      	strh	r3, [r7, #10]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    uint8_t PH_MEMLOC_COUNT bCardIndex;
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */

    if (sizeof(phacDiscLoop_Sw_DataParams_t) != wSizeOfDataParams)
 8006852:	897b      	ldrh	r3, [r7, #10]
 8006854:	f5b3 7f86 	cmp.w	r3, #268	@ 0x10c
 8006858:	d002      	beq.n	8006860 <phacDiscLoop_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AC_DISCLOOP);
 800685a:	f244 0320 	movw	r3, #16416	@ 0x4020
 800685e:	e154      	b.n	8006b0a <phacDiscLoop_Sw_Init+0x2c6>
    }

    PH_ASSERT_NULL(pDataParams);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d101      	bne.n	800686a <phacDiscLoop_Sw_Init+0x26>
 8006866:	2321      	movs	r3, #33	@ 0x21
 8006868:	e14f      	b.n	8006b0a <phacDiscLoop_Sw_Init+0x2c6>

    /* Initialize the private data */
    pDataParams->wId                      = PH_COMP_AC_DISCLOOP | PHAC_DISCLOOP_SW_ID;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f244 0201 	movw	r2, #16385	@ 0x4001
 8006870:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams           = pHalDataParams;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	629a      	str	r2, [r3, #40]	@ 0x28
    pDataParams->pPal1443p3aDataParams    = NULL;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	62da      	str	r2, [r3, #44]	@ 0x2c
    pDataParams->pPal1443p3bDataParams    = NULL;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	635a      	str	r2, [r3, #52]	@ 0x34
    pDataParams->pPal14443p4DataParams    = NULL;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	639a      	str	r2, [r3, #56]	@ 0x38
    pDataParams->pPalFelicaDataParams     = NULL;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	631a      	str	r2, [r3, #48]	@ 0x30
    pDataParams->pPal1443p4aDataParams    = NULL;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2200      	movs	r2, #0
 8006894:	63da      	str	r2, [r3, #60]	@ 0x3c
    pDataParams->pPalSli15693DataParams   = NULL;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	641a      	str	r2, [r3, #64]	@ 0x40
    pDataParams->pPal18000p3m3DataParams  = NULL;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	645a      	str	r2, [r3, #68]	@ 0x44
    pDataParams->pAl18000p3m3DataParams   = NULL;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	649a      	str	r2, [r3, #72]	@ 0x48
    pDataParams->pPal18092mPIDataParams   = NULL;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	64da      	str	r2, [r3, #76]	@ 0x4c
    pDataParams->pAlT1TDataParams         = NULL;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Default Operation Mode is NFC */
    pDataParams->bOpeMode                 = RD_LIB_MODE_NFC;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2202      	movs	r2, #2
 80068b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    pDataParams->bNfcActivityVersion      = PHAC_DISCLOOP_NFC_ACTIVITY_VERSION_2_2;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2222      	movs	r2, #34	@ 0x22
 80068c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Default listen and poll mode technologies */
    pDataParams->bPollState               = PHAC_DISCLOOP_POLL_STATE_DETECTION;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2201      	movs	r2, #1
 80068c8:	811a      	strh	r2, [r3, #8]
    pDataParams->bPasPollTechCfg          = 0x00;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	709a      	strb	r2, [r3, #2]
    pDataParams->bPasLisTechCfg           = 0x00;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2200      	movs	r2, #0
 80068d4:	715a      	strb	r2, [r3, #5]
    pDataParams->bActPollTechCfg          = 0x00;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2200      	movs	r2, #0
 80068da:	70da      	strb	r2, [r3, #3]
    pDataParams->bActLisTechCfg           = 0x00;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2200      	movs	r2, #0
 80068e0:	719a      	strb	r2, [r3, #6]

    pDataParams->pPasTechPollSeq          = (uint8_t *)&gPasTechPollSeqMapTable;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	4a8c      	ldr	r2, [pc, #560]	@ (8006b18 <phacDiscLoop_Sw_Init+0x2d4>)
 80068e6:	655a      	str	r2, [r3, #84]	@ 0x54

    pDataParams->bUseAntiColl             = PH_ON;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 2020 	strb.w	r2, [r3, #32]
    pDataParams->bLpcdEnabled             = PH_OFF;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	77da      	strb	r2, [r3, #31]

    pDataParams->bNumOfCards              = 0x00;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    pDataParams->bDetectedTechs           = 0x00;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    pDataParams->bCollPend                = 0x00;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	779a      	strb	r2, [r3, #30]
    pDataParams->wActPollGTimeUs          = PH_NXPNFCRDLIB_CONFIG_TYPEA_GT;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 8006912:	839a      	strh	r2, [r3, #28]

    pDataParams->bPasPollBailOut          = 0x00;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	711a      	strb	r2, [r3, #4]

    pDataParams->bFsciMax                 = PH_NXPNFCRDLIB_CONFIG_DEFAULT_FSCI_VALUE;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2208      	movs	r2, #8
 800691e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    pDataParams->bEMVCoPropOpRfFieldReset = PH_OFF;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS
    /* Poll device limits */
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A]           = PHAC_DISCLOOP_TYPEA_DEFAULT_DEVICE_LIMIT;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2201      	movs	r2, #1
 800692e:	729a      	strb	r2, [r3, #10]
    /* Guard times */
    pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_A]         = PH_NXPNFCRDLIB_CONFIG_TYPEA_GT;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 8006936:	821a      	strh	r2, [r3, #16]
    pDataParams->bPasPollTechCfg                                     |= (PHAC_DISCLOOP_POS_BIT_MASK_A);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	789b      	ldrb	r3, [r3, #2]
 800693c:	f043 0301 	orr.w	r3, r3, #1
 8006940:	b2da      	uxtb	r2, r3
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	709a      	strb	r2, [r3, #2]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE
    pDataParams->bActPollTechCfg                                     |= (PHAC_DISCLOOP_ACT_POS_BIT_MASK_106);
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TARGET_PASSIVE
    pDataParams->bPasLisTechCfg                                      |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	795b      	ldrb	r3, [r3, #5]
 800694a:	f043 0301 	orr.w	r3, r3, #1
 800694e:	b2da      	uxtb	r2, r3
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	715a      	strb	r2, [r3, #5]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TARGET_PASSIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TARGET_ACTIVE
    pDataParams->bActLisTechCfg                                      |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	799b      	ldrb	r3, [r3, #6]
 8006958:	f043 0301 	orr.w	r3, r3, #1
 800695c:	b2da      	uxtb	r2, r3
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	719a      	strb	r2, [r3, #6]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TARGET_ACTIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    /* Poll device limits */
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_B]           = PHAC_DISCLOOP_TYPEB_DEFAULT_DEVICE_LIMIT;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2201      	movs	r2, #1
 8006966:	72da      	strb	r2, [r3, #11]
    /* Guard times */
    pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_B]         = PH_NXPNFCRDLIB_CONFIG_TYPEB_GT;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 800696e:	825a      	strh	r2, [r3, #18]
    pDataParams->bPasPollTechCfg                                     |= (PHAC_DISCLOOP_POS_BIT_MASK_B);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	789b      	ldrb	r3, [r3, #2]
 8006974:	f043 0302 	orr.w	r3, r3, #2
 8006978:	b2da      	uxtb	r2, r3
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	709a      	strb	r2, [r3, #2]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    /* Poll device limits */
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F212]        = PHAC_DISCLOOP_TYPEF_DEFAULT_DEVICE_LIMIT;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2201      	movs	r2, #1
 8006982:	731a      	strb	r2, [r3, #12]
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F424]        = PHAC_DISCLOOP_TYPEF_DEFAULT_DEVICE_LIMIT;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2201      	movs	r2, #1
 8006988:	735a      	strb	r2, [r3, #13]
    /* Guard time GTFB */
    pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F212]      = PH_NXPNFCRDLIB_CONFIG_TYPEF_GT;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f644 72b0 	movw	r2, #20400	@ 0x4fb0
 8006990:	829a      	strh	r2, [r3, #20]
    /* Guard time GTBF */
    pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F424]      = PH_NXPNFCRDLIB_CONFIG_B_TO_F_GT;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f643 32c4 	movw	r2, #15300	@ 0x3bc4
 8006998:	82da      	strh	r2, [r3, #22]
    pDataParams->bPasPollTechCfg                                     |= (PHAC_DISCLOOP_POS_BIT_MASK_F212 | PHAC_DISCLOOP_POS_BIT_MASK_F424);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	789b      	ldrb	r3, [r3, #2]
 800699e:	f043 030c 	orr.w	r3, r3, #12
 80069a2:	b2da      	uxtb	r2, r3
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	709a      	strb	r2, [r3, #2]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE
    pDataParams->bActPollTechCfg                                     |= PHAC_DISCLOOP_ACT_POS_BIT_MASK_424 ;
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF212_TARGET_PASSIVE
    pDataParams->bPasLisTechCfg                                      |= PHAC_DISCLOOP_POS_BIT_MASK_F212;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	795b      	ldrb	r3, [r3, #5]
 80069ac:	f043 0304 	orr.w	r3, r3, #4
 80069b0:	b2da      	uxtb	r2, r3
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	715a      	strb	r2, [r3, #5]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEF212_TARGET_PASSIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF424_TARGET_PASSIVE
    pDataParams->bPasLisTechCfg                                      |= PHAC_DISCLOOP_POS_BIT_MASK_F424;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	795b      	ldrb	r3, [r3, #5]
 80069ba:	f043 0308 	orr.w	r3, r3, #8
 80069be:	b2da      	uxtb	r2, r3
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	715a      	strb	r2, [r3, #5]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEF424_TARGET_PASSIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF212_TARGET_ACTIVE
    pDataParams->bActLisTechCfg                                      |= PHAC_DISCLOOP_POS_BIT_MASK_F212;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	799b      	ldrb	r3, [r3, #6]
 80069c8:	f043 0304 	orr.w	r3, r3, #4
 80069cc:	b2da      	uxtb	r2, r3
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	719a      	strb	r2, [r3, #6]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEF212_TARGET_ACTIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF424_TARGET_ACTIVE
    pDataParams->bActLisTechCfg                                      |= PHAC_DISCLOOP_POS_BIT_MASK_F424;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	799b      	ldrb	r3, [r3, #6]
 80069d6:	f043 0308 	orr.w	r3, r3, #8
 80069da:	b2da      	uxtb	r2, r3
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	719a      	strb	r2, [r3, #6]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEF424_TARGET_ACTIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    /* Poll device limits */
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V]      = PHAC_DISCLOOP_TYPEV_DEFAULT_DEVICE_LIMIT;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2201      	movs	r2, #1
 80069e4:	739a      	strb	r2, [r3, #14]
    /* Guard times */
    pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_V]    = PH_NXPNFCRDLIB_CONFIG_TYPEV_GT;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 80069ec:	831a      	strh	r2, [r3, #24]
    pDataParams->bPasPollTechCfg                                |= (PHAC_DISCLOOP_POS_BIT_MASK_V);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	789b      	ldrb	r3, [r3, #2]
 80069f2:	f043 0310 	orr.w	r3, r3, #16
 80069f6:	b2da      	uxtb	r2, r3
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	709a      	strb	r2, [r3, #2]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    /* Poll device limits */
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_18000P3M3]   = PHAC_DISCLOOP_I18000P3M3_DEFAULT_DEVICE_LIMIT;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2201      	movs	r2, #1
 8006a00:	73da      	strb	r2, [r3, #15]
    /* Guard times */
    pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_18000P3M3] = PH_NXPNFCRDLIB_CONFIG_I18000P3M3_GT;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006a08:	835a      	strh	r2, [r3, #26]
    pDataParams->bPasPollTechCfg                                     |= (PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	789b      	ldrb	r3, [r3, #2]
 8006a0e:	f043 0320 	orr.w	r3, r3, #32
 8006a12:	b2da      	uxtb	r2, r3
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	709a      	strb	r2, [r3, #2]
#endif  /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */

#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE)
    pDataParams->sTypeATargetInfo.bTotalTagsFound   = 0;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        pDataParams->sTypeATargetInfo.sTypeA_P2P.bNadEnable  = 0;
        pDataParams->sTypeATargetInfo.sTypeA_P2P.bNad        = 0;
    #endif

    #ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bFsdi  = PHPAL_I14443P4A_NFC_FRAMESIZE_MAX;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2208      	movs	r2, #8
 8006a24:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bCid   = 0x00;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bNad   = 0x00;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDri   = 0x00;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDsi   = 0x00;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
    #endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    pDataParams->sTypeBTargetInfo.bTotalTagsFound   = 0x00;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
    pDataParams->sTypeBTargetInfo.bAfiReq           = 0x00;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
    pDataParams->sTypeBTargetInfo.bFsdi             = 0x08;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2208      	movs	r2, #8
 8006a5c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
    pDataParams->sTypeBTargetInfo.bCid              = 0x00;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    pDataParams->sTypeBTargetInfo.bNad              = 0x00;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    pDataParams->sTypeBTargetInfo.bDri              = 0x00;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
    pDataParams->sTypeBTargetInfo.bDsi              = 0x00;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
    pDataParams->sTypeBTargetInfo.bExtendedAtqBbit  = 0x00;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 2097 	strb.w	r2, [r3, #151]	@ 0x97

#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    pDataParams->sTypeFTargetInfo.bTotalTagsFound  = 0x00;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    pDataParams->sTypeFTargetInfo.aSystemCode[0]   = 0xFF;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	22ff      	movs	r2, #255	@ 0xff
 8006a94:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
    pDataParams->sTypeFTargetInfo.aSystemCode[1]   = 0xFF;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	22ff      	movs	r2, #255	@ 0xff
 8006a9c:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
    pDataParams->sTypeFTargetInfo.bTimeSlot        = PHPAL_FELICA_NUMSLOTS_4;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2203      	movs	r2, #3
 8006aa4:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f

    for(bCardIndex = 0; bCardIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bCardIndex++)
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	75fb      	strb	r3, [r7, #23]
 8006aac:	e00d      	b.n	8006aca <phacDiscLoop_Sw_Init+0x286>
    {
        /* Clear SLEEP_AF State */
        pDataParams->sTypeFTargetInfo.aTypeFTag[bCardIndex].bSleepAFState = 0U;
 8006aae:	7dfa      	ldrb	r2, [r7, #23]
 8006ab0:	68f9      	ldr	r1, [r7, #12]
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	005b      	lsls	r3, r3, #1
 8006ab6:	4413      	add	r3, r2
 8006ab8:	00da      	lsls	r2, r3, #3
 8006aba:	1ad2      	subs	r2, r2, r3
 8006abc:	188b      	adds	r3, r1, r2
 8006abe:	3393      	adds	r3, #147	@ 0x93
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	701a      	strb	r2, [r3, #0]
    for(bCardIndex = 0; bCardIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bCardIndex++)
 8006ac4:	7dfb      	ldrb	r3, [r7, #23]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	75fb      	strb	r3, [r7, #23]
 8006aca:	7dfb      	ldrb	r3, [r7, #23]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d0ee      	beq.n	8006aae <phacDiscLoop_Sw_Init+0x26a>
    pDataParams->sTypeFTargetInfo.sTypeF_P2P.bNadEnable    = 0;
    pDataParams->sTypeFTargetInfo.sTypeF_P2P.bNad          = 0;
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    pDataParams->sTypeVTargetInfo.bTotalTagsFound  = 0x00;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
    pDataParams->sTypeVTargetInfo.bFlag            = PHPAL_SLI15693_FLAG_DATA_RATE;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2202      	movs	r2, #2
 8006adc:	f883 20b5 	strb.w	r2, [r3, #181]	@ 0xb5
    pDataParams->sTypeVTargetInfo.bMode            = PHPAL_SLI15693_FLAG_ADDRESSED;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2220      	movs	r2, #32
 8006ae4:	f883 20b6 	strb.w	r2, [r3, #182]	@ 0xb6

#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound  = 0;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
    pDataParams->sI18000p3m3TargetInfo.bM               = PHPAL_I18000P3M3_M_MANCHESTER_4;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2203      	movs	r2, #3
 8006af4:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1
    pDataParams->sI18000p3m3TargetInfo.bDr              = PHPAL_I18000P3M3_LF_847KHZ;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2

#endif /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TARGET
    pDataParams->sTargetParams.bRetryCount = 0;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
#endif /* NXPBUILD__PHAC_DISCLOOP_TARGET */

    return PH_ERR_SUCCESS;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	371c      	adds	r7, #28
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr
 8006b16:	bf00      	nop
 8006b18:	0802010c 	.word	0x0802010c

08006b1c <phacDiscLoop_Sw_Run>:

phStatus_t phacDiscLoop_Sw_Run(
                               phacDiscLoop_Sw_DataParams_t * pDataParams,
                               uint8_t bEntryPoint
                               )
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	460b      	mov	r3, r1
 8006b26:	70fb      	strb	r3, [r7, #3]
    phStatus_t PH_MEMLOC_REM wDiscloopStatus;

    /* Disable Emd Check */
    PH_CHECK_SUCCESS_FCT(wDiscloopStatus, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_OFF));
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	215e      	movs	r1, #94	@ 0x5e
 8006b30:	4618      	mov	r0, r3
 8006b32:	f006 fbed 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8006b36:	4603      	mov	r3, r0
 8006b38:	81fb      	strh	r3, [r7, #14]
 8006b3a:	89fb      	ldrh	r3, [r7, #14]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d001      	beq.n	8006b44 <phacDiscLoop_Sw_Run+0x28>
 8006b40:	89fb      	ldrh	r3, [r7, #14]
 8006b42:	e0b9      	b.n	8006cb8 <phacDiscLoop_Sw_Run+0x19c>

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_JEWEL_TAGS
    PH_CHECK_SUCCESS_FCT(wDiscloopStatus, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_JEWEL_MODE, PH_OFF));
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b48:	2200      	movs	r2, #0
 8006b4a:	2120      	movs	r1, #32
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f006 fbdf 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8006b52:	4603      	mov	r3, r0
 8006b54:	81fb      	strh	r3, [r7, #14]
 8006b56:	89fb      	ldrh	r3, [r7, #14]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d001      	beq.n	8006b60 <phacDiscLoop_Sw_Run+0x44>
 8006b5c:	89fb      	ldrh	r3, [r7, #14]
 8006b5e:	e0ab      	b.n	8006cb8 <phacDiscLoop_Sw_Run+0x19c>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_JEWEL_TAGS */

    switch (bEntryPoint)
 8006b60:	78fb      	ldrb	r3, [r7, #3]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d002      	beq.n	8006b6c <phacDiscLoop_Sw_Run+0x50>
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d07a      	beq.n	8006c60 <phacDiscLoop_Sw_Run+0x144>
 8006b6a:	e0a3      	b.n	8006cb4 <phacDiscLoop_Sw_Run+0x198>
    {
    case ((uint8_t)PHAC_DISCLOOP_ENTRY_POINT_POLL):

#ifdef NXPBUILD__PHAC_DISCLOOP_LPCD
        /* Perform LPCD if Enabled. */
        if ((0U != (pDataParams->bLpcdEnabled))
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	7fdb      	ldrb	r3, [r3, #31]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d017      	beq.n	8006ba4 <phacDiscLoop_Sw_Run+0x88>
            && (pDataParams->bPollState == PHAC_DISCLOOP_POLL_STATE_DETECTION))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	891b      	ldrh	r3, [r3, #8]
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d113      	bne.n	8006ba4 <phacDiscLoop_Sw_Run+0x88>
        {
            wDiscloopStatus = phhalHw_Lpcd(pDataParams->pHalDataParams);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b80:	4618      	mov	r0, r3
 8006b82:	f008 fe41 	bl	800f808 <phhalHw_Pn5180_Lpcd>
 8006b86:	4603      	mov	r3, r0
 8006b88:	81fb      	strh	r3, [r7, #14]
            if ((wDiscloopStatus & PH_ERR_MASK) != PH_ERR_SUCCESS)
 8006b8a:	89fb      	ldrh	r3, [r7, #14]
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d008      	beq.n	8006ba4 <phacDiscLoop_Sw_Run+0x88>
            {
                if ((wDiscloopStatus & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT)
 8006b92:	89fb      	ldrh	r3, [r7, #14]
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d102      	bne.n	8006ba0 <phacDiscLoop_Sw_Run+0x84>
                {
                    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_TECH_DETECTED, PH_COMP_AC_DISCLOOP); /* No card presence. */
 8006b9a:	f244 0384 	movw	r3, #16516	@ 0x4084
 8006b9e:	e08b      	b.n	8006cb8 <phacDiscLoop_Sw_Run+0x19c>
                }

                return wDiscloopStatus; /* Other error. */
 8006ba0:	89fb      	ldrh	r3, [r7, #14]
 8006ba2:	e089      	b.n	8006cb8 <phacDiscLoop_Sw_Run+0x19c>
            }
        }
#endif /* NXPBUILD__PHAC_DISCLOOP_LPCD */

        /* Check for active poll configuration */
        if((0U != (pDataParams->bActPollTechCfg))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	78db      	ldrb	r3, [r3, #3]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d037      	beq.n	8006c1c <phacDiscLoop_Sw_Run+0x100>
           && (pDataParams->bPollState == PHAC_DISCLOOP_POLL_STATE_DETECTION))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	891b      	ldrh	r3, [r3, #8]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d133      	bne.n	8006c1c <phacDiscLoop_Sw_Run+0x100>
        {
            wDiscloopStatus = phacDiscLoop_Sw_Int_ActivePollMode(pDataParams);
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f001 f855 	bl	8007c64 <phacDiscLoop_Sw_Int_ActivePollMode>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	81fb      	strh	r3, [r7, #14]
            /* Continue with passive polling, if no peer detected */
            if((wDiscloopStatus & PH_ERR_MASK) != PHAC_DISCLOOP_NO_TECH_DETECTED)
 8006bbe:	89fb      	ldrh	r3, [r7, #14]
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	2b84      	cmp	r3, #132	@ 0x84
 8006bc4:	d00f      	beq.n	8006be6 <phacDiscLoop_Sw_Run+0xca>
            {
                if(((wDiscloopStatus & PH_ERR_MASK) != PHAC_DISCLOOP_ACTIVE_TARGET_ACTIVATED) &&
 8006bc6:	89fb      	ldrh	r3, [r7, #14]
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	2b8c      	cmp	r3, #140	@ 0x8c
 8006bcc:	d009      	beq.n	8006be2 <phacDiscLoop_Sw_Run+0xc6>
                    ((wDiscloopStatus & PH_ERR_MASK) != PHAC_DISCLOOP_EXTERNAL_RFON))
 8006bce:	89fb      	ldrh	r3, [r7, #14]
 8006bd0:	b2db      	uxtb	r3, r3
                if(((wDiscloopStatus & PH_ERR_MASK) != PHAC_DISCLOOP_ACTIVE_TARGET_ACTIVATED) &&
 8006bd2:	2b82      	cmp	r3, #130	@ 0x82
 8006bd4:	d005      	beq.n	8006be2 <phacDiscLoop_Sw_Run+0xc6>
                {
                    pDataParams->wErrorCode = wDiscloopStatus;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	89fa      	ldrh	r2, [r7, #14]
 8006bda:	84da      	strh	r2, [r3, #38]	@ 0x26
                    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_FAILURE, PH_COMP_AC_DISCLOOP);
 8006bdc:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8006be0:	e06a      	b.n	8006cb8 <phacDiscLoop_Sw_Run+0x19c>
                }
                return wDiscloopStatus;
 8006be2:	89fb      	ldrh	r3, [r7, #14]
 8006be4:	e068      	b.n	8006cb8 <phacDiscLoop_Sw_Run+0x19c>
            }
            /* Field OFF after Active polling and wait for recovery time. */
            PH_CHECK_SUCCESS_FCT(wDiscloopStatus, phhalHw_FieldOff(pDataParams->pHalDataParams));
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bea:	4618      	mov	r0, r3
 8006bec:	f006 fae8 	bl	800d1c0 <phhalHw_Pn5180_FieldOff>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	81fb      	strh	r3, [r7, #14]
 8006bf4:	89fb      	ldrh	r3, [r7, #14]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d001      	beq.n	8006bfe <phacDiscLoop_Sw_Run+0xe2>
 8006bfa:	89fb      	ldrh	r3, [r7, #14]
 8006bfc:	e05c      	b.n	8006cb8 <phacDiscLoop_Sw_Run+0x19c>
            PH_CHECK_SUCCESS_FCT(wDiscloopStatus, phhalHw_Wait(pDataParams->pHalDataParams, PHHAL_HW_TIME_MICROSECONDS, pDataParams->wActPollGTimeUs));
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	8b9b      	ldrh	r3, [r3, #28]
 8006c06:	461a      	mov	r2, r3
 8006c08:	2100      	movs	r1, #0
 8006c0a:	f006 fafd 	bl	800d208 <phhalHw_Pn5180_Wait>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	81fb      	strh	r3, [r7, #14]
 8006c12:	89fb      	ldrh	r3, [r7, #14]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d001      	beq.n	8006c1c <phacDiscLoop_Sw_Run+0x100>
 8006c18:	89fb      	ldrh	r3, [r7, #14]
 8006c1a:	e04d      	b.n	8006cb8 <phacDiscLoop_Sw_Run+0x19c>
        }

        /* Check for passive poll configuration */
        if(0U != (pDataParams->bPasPollTechCfg))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	789b      	ldrb	r3, [r3, #2]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d012      	beq.n	8006c4a <phacDiscLoop_Sw_Run+0x12e>
        {
            /* Perform the Poll operation and store the Status code. */
            wDiscloopStatus = phacDiscLoop_Sw_Int_PollMode(pDataParams);
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f001 f84c 	bl	8007cc2 <phacDiscLoop_Sw_Int_PollMode>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	81fb      	strh	r3, [r7, #14]

            /* If error is from below layer, store it and return failure */
            if((wDiscloopStatus & PH_COMP_MASK) != PH_COMP_AC_DISCLOOP)
 8006c2e:	89fb      	ldrh	r3, [r7, #14]
 8006c30:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006c34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c38:	d005      	beq.n	8006c46 <phacDiscLoop_Sw_Run+0x12a>
            {
                pDataParams->wErrorCode = wDiscloopStatus;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	89fa      	ldrh	r2, [r7, #14]
 8006c3e:	84da      	strh	r2, [r3, #38]	@ 0x26
                return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_FAILURE, PH_COMP_AC_DISCLOOP);
 8006c40:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8006c44:	e038      	b.n	8006cb8 <phacDiscLoop_Sw_Run+0x19c>
            }
            return wDiscloopStatus;
 8006c46:	89fb      	ldrh	r3, [r7, #14]
 8006c48:	e036      	b.n	8006cb8 <phacDiscLoop_Sw_Run+0x19c>
        }
        else
        {
            pDataParams->bDetectedTechs = 0x00;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
            pDataParams->bNumOfCards = 0x00;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 8006c5a:	f244 0384 	movw	r3, #16516	@ 0x4084
 8006c5e:	e02b      	b.n	8006cb8 <phacDiscLoop_Sw_Run+0x19c>
        }

    case ((uint8_t)PHAC_DISCLOOP_ENTRY_POINT_LISTEN):
        /* Check for listen configurations */
        if ((0U != (pDataParams->bPasLisTechCfg)) || (0U != (pDataParams->bActLisTechCfg)))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	795b      	ldrb	r3, [r3, #5]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d103      	bne.n	8006c70 <phacDiscLoop_Sw_Run+0x154>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	799b      	ldrb	r3, [r3, #6]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d01e      	beq.n	8006cae <phacDiscLoop_Sw_Run+0x192>
        {
            /* Turn OFF RF field if already on. */
            PH_CHECK_SUCCESS_FCT(wDiscloopStatus, phhalHw_FieldOff(pDataParams->pHalDataParams));
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c74:	4618      	mov	r0, r3
 8006c76:	f006 faa3 	bl	800d1c0 <phhalHw_Pn5180_FieldOff>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	81fb      	strh	r3, [r7, #14]
 8006c7e:	89fb      	ldrh	r3, [r7, #14]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d001      	beq.n	8006c88 <phacDiscLoop_Sw_Run+0x16c>
 8006c84:	89fb      	ldrh	r3, [r7, #14]
 8006c86:	e017      	b.n	8006cb8 <phacDiscLoop_Sw_Run+0x19c>

            /* Perform listen operation and store the Status code. */
            wDiscloopStatus = phacDiscLoop_Sw_Int_ListenMode(pDataParams);
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 ff8b 	bl	8007ba4 <phacDiscLoop_Sw_Int_ListenMode>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	81fb      	strh	r3, [r7, #14]

            /* If error is from below layer, store it and return failure */
            if((wDiscloopStatus & PH_COMP_MASK) != PH_COMP_AC_DISCLOOP)
 8006c92:	89fb      	ldrh	r3, [r7, #14]
 8006c94:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006c98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c9c:	d005      	beq.n	8006caa <phacDiscLoop_Sw_Run+0x18e>
            {
                pDataParams->wErrorCode = wDiscloopStatus;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	89fa      	ldrh	r2, [r7, #14]
 8006ca2:	84da      	strh	r2, [r3, #38]	@ 0x26
                return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_FAILURE, PH_COMP_AC_DISCLOOP);
 8006ca4:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8006ca8:	e006      	b.n	8006cb8 <phacDiscLoop_Sw_Run+0x19c>
            }
            return wDiscloopStatus;
 8006caa:	89fb      	ldrh	r3, [r7, #14]
 8006cac:	e004      	b.n	8006cb8 <phacDiscLoop_Sw_Run+0x19c>
        }
        else
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8006cae:	f244 0321 	movw	r3, #16417	@ 0x4021
 8006cb2:	e001      	b.n	8006cb8 <phacDiscLoop_Sw_Run+0x19c>
        }

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8006cb4:	f244 0321 	movw	r3, #16417	@ 0x4021
    }
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <phacDiscLoop_Sw_SetConfig>:
phStatus_t phacDiscLoop_Sw_SetConfig(
                                     phacDiscLoop_Sw_DataParams_t * pDataParams,
                                     uint16_t wConfig,
                                     uint16_t wValue
                                     )
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	460b      	mov	r3, r1
 8006cca:	807b      	strh	r3, [r7, #2]
 8006ccc:	4613      	mov	r3, r2
 8006cce:	803b      	strh	r3, [r7, #0]
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	81fb      	strh	r3, [r7, #14]
#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS)
    uint8_t     PH_MEMLOC_REM bIndex;
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    uint16_t    PH_MEMLOC_REM wSliConfigFlags = 0U;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	817b      	strh	r3, [r7, #10]
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */

    switch(wConfig)
 8006cd8:	887b      	ldrh	r3, [r7, #2]
 8006cda:	2b94      	cmp	r3, #148	@ 0x94
 8006cdc:	f200 83f0 	bhi.w	80074c0 <phacDiscLoop_Sw_SetConfig+0x800>
 8006ce0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ce8 <phacDiscLoop_Sw_SetConfig+0x28>)
 8006ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce6:	bf00      	nop
 8006ce8:	08006fa5 	.word	0x08006fa5
 8006cec:	08006fad 	.word	0x08006fad
 8006cf0:	08006fb5 	.word	0x08006fb5
 8006cf4:	08006fcd 	.word	0x08006fcd
 8006cf8:	08006fe5 	.word	0x08006fe5
 8006cfc:	08006fed 	.word	0x08006fed
 8006d00:	0800701f 	.word	0x0800701f
 8006d04:	080074c1 	.word	0x080074c1
 8006d08:	080074c1 	.word	0x080074c1
 8006d0c:	080074c1 	.word	0x080074c1
 8006d10:	080074c1 	.word	0x080074c1
 8006d14:	080074c1 	.word	0x080074c1
 8006d18:	080074c1 	.word	0x080074c1
 8006d1c:	080074c1 	.word	0x080074c1
 8006d20:	080074c1 	.word	0x080074c1
 8006d24:	080074c1 	.word	0x080074c1
 8006d28:	08007131 	.word	0x08007131
 8006d2c:	08007219 	.word	0x08007219
 8006d30:	08007335 	.word	0x08007335
 8006d34:	0800734f 	.word	0x0800734f
 8006d38:	08007453 	.word	0x08007453
 8006d3c:	080074c1 	.word	0x080074c1
 8006d40:	080074c1 	.word	0x080074c1
 8006d44:	080074c1 	.word	0x080074c1
 8006d48:	080074c1 	.word	0x080074c1
 8006d4c:	080074c1 	.word	0x080074c1
 8006d50:	080074c1 	.word	0x080074c1
 8006d54:	080074c1 	.word	0x080074c1
 8006d58:	080074c1 	.word	0x080074c1
 8006d5c:	080074c1 	.word	0x080074c1
 8006d60:	080074c1 	.word	0x080074c1
 8006d64:	080074c1 	.word	0x080074c1
 8006d68:	080074c1 	.word	0x080074c1
 8006d6c:	080074c1 	.word	0x080074c1
 8006d70:	080074c1 	.word	0x080074c1
 8006d74:	080074c1 	.word	0x080074c1
 8006d78:	080074c1 	.word	0x080074c1
 8006d7c:	080074c1 	.word	0x080074c1
 8006d80:	080074c1 	.word	0x080074c1
 8006d84:	080074c1 	.word	0x080074c1
 8006d88:	080074c1 	.word	0x080074c1
 8006d8c:	080074c1 	.word	0x080074c1
 8006d90:	080074c1 	.word	0x080074c1
 8006d94:	080074c1 	.word	0x080074c1
 8006d98:	080074c1 	.word	0x080074c1
 8006d9c:	080074c1 	.word	0x080074c1
 8006da0:	080074c1 	.word	0x080074c1
 8006da4:	080074c1 	.word	0x080074c1
 8006da8:	08007233 	.word	0x08007233
 8006dac:	0800723f 	.word	0x0800723f
 8006db0:	08007259 	.word	0x08007259
 8006db4:	08007271 	.word	0x08007271
 8006db8:	08007289 	.word	0x08007289
 8006dbc:	08007295 	.word	0x08007295
 8006dc0:	080072bd 	.word	0x080072bd
 8006dc4:	080074c1 	.word	0x080074c1
 8006dc8:	080074c1 	.word	0x080074c1
 8006dcc:	080074c1 	.word	0x080074c1
 8006dd0:	080074c1 	.word	0x080074c1
 8006dd4:	080074c1 	.word	0x080074c1
 8006dd8:	080074c1 	.word	0x080074c1
 8006ddc:	080074c1 	.word	0x080074c1
 8006de0:	080074c1 	.word	0x080074c1
 8006de4:	080074c1 	.word	0x080074c1
 8006de8:	0800718d 	.word	0x0800718d
 8006dec:	080071a5 	.word	0x080071a5
 8006df0:	080071bd 	.word	0x080071bd
 8006df4:	080071c9 	.word	0x080071c9
 8006df8:	080071f1 	.word	0x080071f1
 8006dfc:	080074c1 	.word	0x080074c1
 8006e00:	080074c1 	.word	0x080074c1
 8006e04:	080074c1 	.word	0x080074c1
 8006e08:	080074c1 	.word	0x080074c1
 8006e0c:	080074c1 	.word	0x080074c1
 8006e10:	080074c1 	.word	0x080074c1
 8006e14:	080074c1 	.word	0x080074c1
 8006e18:	080074c1 	.word	0x080074c1
 8006e1c:	080074c1 	.word	0x080074c1
 8006e20:	080074c1 	.word	0x080074c1
 8006e24:	080074c1 	.word	0x080074c1
 8006e28:	080074c1 	.word	0x080074c1
 8006e2c:	080074c1 	.word	0x080074c1
 8006e30:	080074c1 	.word	0x080074c1
 8006e34:	080074c1 	.word	0x080074c1
 8006e38:	080074c1 	.word	0x080074c1
 8006e3c:	080074c1 	.word	0x080074c1
 8006e40:	080074c1 	.word	0x080074c1
 8006e44:	08007329 	.word	0x08007329
 8006e48:	080074c1 	.word	0x080074c1
 8006e4c:	080074c1 	.word	0x080074c1
 8006e50:	080074c1 	.word	0x080074c1
 8006e54:	080074c1 	.word	0x080074c1
 8006e58:	080074c1 	.word	0x080074c1
 8006e5c:	080074c1 	.word	0x080074c1
 8006e60:	080074c1 	.word	0x080074c1
 8006e64:	080074c1 	.word	0x080074c1
 8006e68:	08007369 	.word	0x08007369
 8006e6c:	080073a9 	.word	0x080073a9
 8006e70:	080074c1 	.word	0x080074c1
 8006e74:	080074c1 	.word	0x080074c1
 8006e78:	080074c1 	.word	0x080074c1
 8006e7c:	080074c1 	.word	0x080074c1
 8006e80:	080074c1 	.word	0x080074c1
 8006e84:	080074c1 	.word	0x080074c1
 8006e88:	080074c1 	.word	0x080074c1
 8006e8c:	080074c1 	.word	0x080074c1
 8006e90:	080074c1 	.word	0x080074c1
 8006e94:	080074c1 	.word	0x080074c1
 8006e98:	080074c1 	.word	0x080074c1
 8006e9c:	080074c1 	.word	0x080074c1
 8006ea0:	080074c1 	.word	0x080074c1
 8006ea4:	080074c1 	.word	0x080074c1
 8006ea8:	0800746d 	.word	0x0800746d
 8006eac:	0800748b 	.word	0x0800748b
 8006eb0:	080074c1 	.word	0x080074c1
 8006eb4:	080074c1 	.word	0x080074c1
 8006eb8:	080074c1 	.word	0x080074c1
 8006ebc:	080074c1 	.word	0x080074c1
 8006ec0:	080074c1 	.word	0x080074c1
 8006ec4:	080074c1 	.word	0x080074c1
 8006ec8:	080074c1 	.word	0x080074c1
 8006ecc:	080074c1 	.word	0x080074c1
 8006ed0:	080074c1 	.word	0x080074c1
 8006ed4:	080074c1 	.word	0x080074c1
 8006ed8:	080074c1 	.word	0x080074c1
 8006edc:	080074c1 	.word	0x080074c1
 8006ee0:	080074c1 	.word	0x080074c1
 8006ee4:	080074c1 	.word	0x080074c1
 8006ee8:	08007109 	.word	0x08007109
 8006eec:	080074c1 	.word	0x080074c1
 8006ef0:	0800703d 	.word	0x0800703d
 8006ef4:	08006f5b 	.word	0x08006f5b
 8006ef8:	08006f65 	.word	0x08006f65
 8006efc:	080074c1 	.word	0x080074c1
 8006f00:	08007027 	.word	0x08007027
 8006f04:	080074c1 	.word	0x080074c1
 8006f08:	08006f99 	.word	0x08006f99
 8006f0c:	08006f3d 	.word	0x08006f3d
 8006f10:	08006f47 	.word	0x08006f47
 8006f14:	08006f51 	.word	0x08006f51
 8006f18:	08006f8f 	.word	0x08006f8f
 8006f1c:	080074c1 	.word	0x080074c1
 8006f20:	080074c1 	.word	0x080074c1
 8006f24:	080074c1 	.word	0x080074c1
 8006f28:	080074a9 	.word	0x080074a9
 8006f2c:	08007113 	.word	0x08007113
 8006f30:	08006ff5 	.word	0x08006ff5
 8006f34:	0800714b 	.word	0x0800714b
 8006f38:	080072e5 	.word	0x080072e5
    {
    case PHAC_DISCLOOP_CONFIG_ACT_LIS_TECH_CFG:
        pDataParams->bActLisTechCfg = (uint8_t)wValue;
 8006f3c:	883b      	ldrh	r3, [r7, #0]
 8006f3e:	b2da      	uxtb	r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	719a      	strb	r2, [r3, #6]
        break;
 8006f44:	e2c1      	b.n	80074ca <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_ACT_POLL_TECH_CFG:
        pDataParams->bActPollTechCfg = (uint8_t)wValue;
 8006f46:	883b      	ldrh	r3, [r7, #0]
 8006f48:	b2da      	uxtb	r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	70da      	strb	r2, [r3, #3]
        break;
 8006f4e:	e2bc      	b.n	80074ca <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_PAS_LIS_TECH_CFG:
        pDataParams->bPasLisTechCfg = (uint8_t)wValue;
 8006f50:	883b      	ldrh	r3, [r7, #0]
 8006f52:	b2da      	uxtb	r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	715a      	strb	r2, [r3, #5]
        break;
 8006f58:	e2b7      	b.n	80074ca <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_COLLISION_PENDING:
        pDataParams->bCollPend = (uint8_t)wValue;
 8006f5a:	883b      	ldrh	r3, [r7, #0]
 8006f5c:	b2da      	uxtb	r2, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	779a      	strb	r2, [r3, #30]
        break;
 8006f62:	e2b2      	b.n	80074ca <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_NEXT_POLL_STATE:
        if(!(((wValue & 0x00FFU) == PHAC_DISCLOOP_POLL_STATE_DETECTION) ||
 8006f64:	883b      	ldrh	r3, [r7, #0]
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d00a      	beq.n	8006f82 <phacDiscLoop_Sw_SetConfig+0x2c2>
            ((wValue & 0x00FFU) == PHAC_DISCLOOP_POLL_STATE_COLLISION_RESOLUTION) ||
 8006f6c:	883b      	ldrh	r3, [r7, #0]
 8006f6e:	b2db      	uxtb	r3, r3
        if(!(((wValue & 0x00FFU) == PHAC_DISCLOOP_POLL_STATE_DETECTION) ||
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	d006      	beq.n	8006f82 <phacDiscLoop_Sw_SetConfig+0x2c2>
            ((wValue & 0x00FFU) == PHAC_DISCLOOP_POLL_STATE_REMOVAL)))
 8006f74:	883b      	ldrh	r3, [r7, #0]
 8006f76:	b2db      	uxtb	r3, r3
        if(!(((wValue & 0x00FFU) == PHAC_DISCLOOP_POLL_STATE_DETECTION) ||
 8006f78:	2b03      	cmp	r3, #3
 8006f7a:	d002      	beq.n	8006f82 <phacDiscLoop_Sw_SetConfig+0x2c2>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8006f7c:	f244 0321 	movw	r3, #16417	@ 0x4021
 8006f80:	e2a4      	b.n	80074cc <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->bPollState = (wValue & 0x00FFU);
 8006f82:	883b      	ldrh	r3, [r7, #0]
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	b29a      	uxth	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	811a      	strh	r2, [r3, #8]
        break;
 8006f8c:	e29d      	b.n	80074ca <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_PAS_POLL_TECH_CFG:
        pDataParams->bPasPollTechCfg = (uint8_t)wValue;
 8006f8e:	883b      	ldrh	r3, [r7, #0]
 8006f90:	b2da      	uxtb	r2, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	709a      	strb	r2, [r3, #2]
        break;
 8006f96:	e298      	b.n	80074ca <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_ANTI_COLL:
        pDataParams->bUseAntiColl = (uint8_t)wValue;
 8006f98:	883b      	ldrh	r3, [r7, #0]
 8006f9a:	b2da      	uxtb	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f883 2020 	strb.w	r2, [r3, #32]
        break;
 8006fa2:	e292      	b.n	80074ca <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_GTA_VALUE_US:
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_A] = wValue;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	883a      	ldrh	r2, [r7, #0]
 8006fa8:	821a      	strh	r2, [r3, #16]
        break;
 8006faa:	e28e      	b.n	80074ca <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_GTB_VALUE_US:
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_B] = wValue;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	883a      	ldrh	r2, [r7, #0]
 8006fb0:	825a      	strh	r2, [r3, #18]
        break;
 8006fb2:	e28a      	b.n	80074ca <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_GTFB_VALUE_US:
        if(wValue < PH_NXPNFCRDLIB_CONFIG_TYPEF_GT)
 8006fb4:	883b      	ldrh	r3, [r7, #0]
 8006fb6:	f644 72af 	movw	r2, #20399	@ 0x4faf
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d802      	bhi.n	8006fc4 <phacDiscLoop_Sw_SetConfig+0x304>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8006fbe:	f244 0321 	movw	r3, #16417	@ 0x4021
 8006fc2:	e283      	b.n	80074cc <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F212] = wValue;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	883a      	ldrh	r2, [r7, #0]
 8006fc8:	829a      	strh	r2, [r3, #20]
        break;
 8006fca:	e27e      	b.n	80074ca <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_GTBF_VALUE_US:
        if(wValue < PH_NXPNFCRDLIB_CONFIG_B_TO_F_GT)
 8006fcc:	883b      	ldrh	r3, [r7, #0]
 8006fce:	f643 32c3 	movw	r2, #15299	@ 0x3bc3
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d802      	bhi.n	8006fdc <phacDiscLoop_Sw_SetConfig+0x31c>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8006fd6:	f244 0321 	movw	r3, #16417	@ 0x4021
 8006fda:	e277      	b.n	80074cc <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F424] = wValue;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	883a      	ldrh	r2, [r7, #0]
 8006fe0:	82da      	strh	r2, [r3, #22]
        break;
 8006fe2:	e272      	b.n	80074ca <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_GTV_VALUE_US:
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_V] = wValue;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	883a      	ldrh	r2, [r7, #0]
 8006fe8:	831a      	strh	r2, [r3, #24]
        break;
 8006fea:	e26e      	b.n	80074ca <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_GT18000P3M3_VALUE_US:
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_18000P3M3] = wValue;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	883a      	ldrh	r2, [r7, #0]
 8006ff0:	835a      	strh	r2, [r3, #26]
        break;
 8006ff2:	e26a      	b.n	80074ca <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_EMVCO_PROP_OP_RF_RESET:
        if ((((uint8_t)wValue & PHAC_DISCLOOP_POS_BIT_MASK_A) == PHAC_DISCLOOP_POS_BIT_MASK_A) ||
 8006ff4:	883b      	ldrh	r3, [r7, #0]
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	f003 0301 	and.w	r3, r3, #1
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d105      	bne.n	800700c <phacDiscLoop_Sw_SetConfig+0x34c>
            (((uint8_t)wValue & PHAC_DISCLOOP_POS_BIT_MASK_B) == PHAC_DISCLOOP_POS_BIT_MASK_B)
 8007000:	883b      	ldrh	r3, [r7, #0]
 8007002:	b2db      	uxtb	r3, r3
 8007004:	f003 0302 	and.w	r3, r3, #2
        if ((((uint8_t)wValue & PHAC_DISCLOOP_POS_BIT_MASK_A) == PHAC_DISCLOOP_POS_BIT_MASK_A) ||
 8007008:	2b00      	cmp	r3, #0
 800700a:	d002      	beq.n	8007012 <phacDiscLoop_Sw_SetConfig+0x352>
            )
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_AC_DISCLOOP);
 800700c:	f244 0323 	movw	r3, #16419	@ 0x4023
 8007010:	e25c      	b.n	80074cc <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->bEMVCoPropOpRfFieldReset = (uint8_t)wValue;
 8007012:	883b      	ldrh	r3, [r7, #0]
 8007014:	b2da      	uxtb	r2, r3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
        break;
 800701c:	e255      	b.n	80074ca <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_GT_ACTIVE_US:
        pDataParams->wActPollGTimeUs = wValue;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	883a      	ldrh	r2, [r7, #0]
 8007022:	839a      	strh	r2, [r3, #28]
        break;
 8007024:	e251      	b.n	80074ca <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_BAIL_OUT:
        if (0u != (wValue & ~(PHAC_DISCLOOP_POS_BIT_MASK_A |  PHAC_DISCLOOP_POS_BIT_MASK_B
 8007026:	883b      	ldrh	r3, [r7, #0]
 8007028:	2b3f      	cmp	r3, #63	@ 0x3f
 800702a:	d902      	bls.n	8007032 <phacDiscLoop_Sw_SetConfig+0x372>
            | PHAC_DISCLOOP_POS_BIT_MASK_F424 | PHAC_DISCLOOP_POS_BIT_MASK_F212
            | PHAC_DISCLOOP_POS_BIT_MASK_V | PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3)))
        {
            /* Invalid bail out option set */
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800702c:	f244 0321 	movw	r3, #16417	@ 0x4021
 8007030:	e24c      	b.n	80074cc <phacDiscLoop_Sw_SetConfig+0x80c>
        }

        pDataParams->bPasPollBailOut = (uint8_t) wValue;
 8007032:	883b      	ldrh	r3, [r7, #0]
 8007034:	b2da      	uxtb	r2, r3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	711a      	strb	r2, [r3, #4]
        break;
 800703a:	e246      	b.n	80074ca <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_OPE_MODE:
        if(!((wValue == RD_LIB_MODE_NFC) ||
 800703c:	883b      	ldrh	r3, [r7, #0]
 800703e:	2b02      	cmp	r3, #2
 8007040:	d008      	beq.n	8007054 <phacDiscLoop_Sw_SetConfig+0x394>
 8007042:	883b      	ldrh	r3, [r7, #0]
 8007044:	2b01      	cmp	r3, #1
 8007046:	d005      	beq.n	8007054 <phacDiscLoop_Sw_SetConfig+0x394>
 8007048:	883b      	ldrh	r3, [r7, #0]
 800704a:	2b03      	cmp	r3, #3
 800704c:	d002      	beq.n	8007054 <phacDiscLoop_Sw_SetConfig+0x394>
            (wValue == RD_LIB_MODE_EMVCO) ||
            (wValue == RD_LIB_MODE_ISO)))
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800704e:	f244 0321 	movw	r3, #16417	@ 0x4021
 8007052:	e23b      	b.n	80074cc <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->bOpeMode = (uint8_t)wValue;
 8007054:	883b      	ldrh	r3, [r7, #0]
 8007056:	b2da      	uxtb	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_OPE_MODE, wValue));
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007062:	883a      	ldrh	r2, [r7, #0]
 8007064:	215a      	movs	r1, #90	@ 0x5a
 8007066:	4618      	mov	r0, r3
 8007068:	f006 f952 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 800706c:	4603      	mov	r3, r0
 800706e:	81fb      	strh	r3, [r7, #14]
 8007070:	89fb      	ldrh	r3, [r7, #14]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d001      	beq.n	800707a <phacDiscLoop_Sw_SetConfig+0x3ba>
 8007076:	89fb      	ldrh	r3, [r7, #14]
 8007078:	e228      	b.n	80074cc <phacDiscLoop_Sw_SetConfig+0x80c>
#ifdef NXPBUILD__PHPAL_I14443P4_SW
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p4_SetConfig(pDataParams->pPal14443p4DataParams, PHPAL_I14443P4_CONFIG_OPE_MODE, wValue));
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800707e:	883a      	ldrh	r2, [r7, #0]
 8007080:	2106      	movs	r1, #6
 8007082:	4618      	mov	r0, r3
 8007084:	f00d fb02 	bl	801468c <phpalI14443p4_Sw_SetConfig>
 8007088:	4603      	mov	r3, r0
 800708a:	81fb      	strh	r3, [r7, #14]
 800708c:	89fb      	ldrh	r3, [r7, #14]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d001      	beq.n	8007096 <phacDiscLoop_Sw_SetConfig+0x3d6>
 8007092:	89fb      	ldrh	r3, [r7, #14]
 8007094:	e21a      	b.n	80074cc <phacDiscLoop_Sw_SetConfig+0x80c>
#endif /* NXPBUILD__PHPAL_I14443P4_SW */

#ifdef NXPBUILD__PHPAL_I14443P3B_SW
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p3b_SetConfig(pDataParams->pPal1443p3bDataParams, PHPAL_I14443P3B_CONFIG_OPE_MODE, wValue));
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800709a:	883a      	ldrh	r2, [r7, #0]
 800709c:	2101      	movs	r1, #1
 800709e:	4618      	mov	r0, r3
 80070a0:	f00c fc58 	bl	8013954 <phpalI14443p3b_Sw_SetConfig>
 80070a4:	4603      	mov	r3, r0
 80070a6:	81fb      	strh	r3, [r7, #14]
 80070a8:	89fb      	ldrh	r3, [r7, #14]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d001      	beq.n	80070b2 <phacDiscLoop_Sw_SetConfig+0x3f2>
 80070ae:	89fb      	ldrh	r3, [r7, #14]
 80070b0:	e20c      	b.n	80074cc <phacDiscLoop_Sw_SetConfig+0x80c>
#endif /* NXPBUILD__PHPAL_I14443P3B_SW */

#ifdef NXPBUILD__PHPAL_I14443P3A_SW
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p3a_SetConfig(pDataParams->pPal1443p3aDataParams, PHPAL_I14443P3A_CONFIG_OPE_MODE, wValue));
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b6:	883a      	ldrh	r2, [r7, #0]
 80070b8:	2101      	movs	r1, #1
 80070ba:	4618      	mov	r0, r3
 80070bc:	f00b fe15 	bl	8012cea <phpalI14443p3a_Sw_SetConfig>
 80070c0:	4603      	mov	r3, r0
 80070c2:	81fb      	strh	r3, [r7, #14]
 80070c4:	89fb      	ldrh	r3, [r7, #14]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d001      	beq.n	80070ce <phacDiscLoop_Sw_SetConfig+0x40e>
 80070ca:	89fb      	ldrh	r3, [r7, #14]
 80070cc:	e1fe      	b.n	80074cc <phacDiscLoop_Sw_SetConfig+0x80c>
#endif /* NXPBUILD__PHPAL_I14443P3A_SW */

#ifdef NXPBUILD__PHPAL_I14443P4A_SW
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_SetConfig(pDataParams->pPal1443p4aDataParams, PHPAL_I14443P4A_CONFIG_OPE_MODE, wValue));
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070d2:	883a      	ldrh	r2, [r7, #0]
 80070d4:	2101      	movs	r1, #1
 80070d6:	4618      	mov	r0, r3
 80070d8:	f00d fbaa 	bl	8014830 <phpalI14443p4a_Sw_SetConfig>
 80070dc:	4603      	mov	r3, r0
 80070de:	81fb      	strh	r3, [r7, #14]
 80070e0:	89fb      	ldrh	r3, [r7, #14]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d001      	beq.n	80070ea <phacDiscLoop_Sw_SetConfig+0x42a>
 80070e6:	89fb      	ldrh	r3, [r7, #14]
 80070e8:	e1f0      	b.n	80074cc <phacDiscLoop_Sw_SetConfig+0x80c>
#endif /* NXPBUILD__PHPAL_I14443P4A_SW */

#ifdef NXPBUILD__PHPAL_SLI15693_SW
        PH_CHECK_SUCCESS_FCT(status, phpalSli15693_SetConfig(pDataParams->pPalSli15693DataParams, PHPAL_SLI15693_CONFIG_OPE_MODE, wValue));
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ee:	883a      	ldrh	r2, [r7, #0]
 80070f0:	210a      	movs	r1, #10
 80070f2:	4618      	mov	r0, r3
 80070f4:	f00e ff08 	bl	8015f08 <phpalSli15693_Sw_SetConfig>
 80070f8:	4603      	mov	r3, r0
 80070fa:	81fb      	strh	r3, [r7, #14]
 80070fc:	89fb      	ldrh	r3, [r7, #14]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	f000 81e2 	beq.w	80074c8 <phacDiscLoop_Sw_SetConfig+0x808>
 8007104:	89fb      	ldrh	r3, [r7, #14]
 8007106:	e1e1      	b.n	80074cc <phacDiscLoop_Sw_SetConfig+0x80c>
#endif /* NXPBUILD__PHPAL_SLI15693_SW */
        break;

    case PHAC_DISCLOOP_CONFIG_ENABLE_LPCD:
        pDataParams->bLpcdEnabled = (uint8_t)wValue;
 8007108:	883b      	ldrh	r3, [r7, #0]
 800710a:	b2da      	uxtb	r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	77da      	strb	r2, [r3, #31]
        break;
 8007110:	e1db      	b.n	80074ca <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_EMVCO_PROF_FSCI_MAX:
        if ((wValue != 0x08) && (wValue != PH_NXPNFCRDLIB_CONFIG_DEFAULT_FSCI_VALUE))
 8007112:	883b      	ldrh	r3, [r7, #0]
 8007114:	2b08      	cmp	r3, #8
 8007116:	d005      	beq.n	8007124 <phacDiscLoop_Sw_SetConfig+0x464>
 8007118:	883b      	ldrh	r3, [r7, #0]
 800711a:	2b08      	cmp	r3, #8
 800711c:	d002      	beq.n	8007124 <phacDiscLoop_Sw_SetConfig+0x464>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800711e:	f244 0321 	movw	r3, #16417	@ 0x4021
 8007122:	e1d3      	b.n	80074cc <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->bFsciMax = (uint8_t)wValue;
 8007124:	883b      	ldrh	r3, [r7, #0]
 8007126:	b2da      	uxtb	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        break;
 800712e:	e1cc      	b.n	80074ca <phacDiscLoop_Sw_SetConfig+0x80a>

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS
    case PHAC_DISCLOOP_CONFIG_TYPEA_DEVICE_LIMIT:
        if ((wValue & 0xFFU) > PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED)
 8007130:	883b      	ldrh	r3, [r7, #0]
 8007132:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007136:	2b00      	cmp	r3, #0
 8007138:	d002      	beq.n	8007140 <phacDiscLoop_Sw_SetConfig+0x480>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800713a:	f244 0321 	movw	r3, #16417	@ 0x4021
 800713e:	e1c5      	b.n	80074cc <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A] = (uint8_t)wValue;
 8007140:	883b      	ldrh	r3, [r7, #0]
 8007142:	b2da      	uxtb	r2, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	729a      	strb	r2, [r3, #10]
        break;
 8007148:	e1bf      	b.n	80074ca <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEA_SLEEP_STATE:
        if (((wValue & 0xFFU) != PH_ON) && ((wValue & 0xFFU) != PH_OFF))
 800714a:	883b      	ldrh	r3, [r7, #0]
 800714c:	b2db      	uxtb	r3, r3
 800714e:	2b01      	cmp	r3, #1
 8007150:	d006      	beq.n	8007160 <phacDiscLoop_Sw_SetConfig+0x4a0>
 8007152:	883b      	ldrh	r3, [r7, #0]
 8007154:	b2db      	uxtb	r3, r3
 8007156:	2b00      	cmp	r3, #0
 8007158:	d002      	beq.n	8007160 <phacDiscLoop_Sw_SetConfig+0x4a0>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800715a:	f244 0321 	movw	r3, #16417	@ 0x4021
 800715e:	e1b5      	b.n	80074cc <phacDiscLoop_Sw_SetConfig+0x80c>
        }

        bIndex = (uint8_t)((wValue & 0xFF00U) >> 8U);
 8007160:	883b      	ldrh	r3, [r7, #0]
 8007162:	0a1b      	lsrs	r3, r3, #8
 8007164:	b29b      	uxth	r3, r3
 8007166:	737b      	strb	r3, [r7, #13]
        if (bIndex >= PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED)
 8007168:	7b7b      	ldrb	r3, [r7, #13]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d002      	beq.n	8007174 <phacDiscLoop_Sw_SetConfig+0x4b4>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800716e:	f244 0321 	movw	r3, #16417	@ 0x4021
 8007172:	e1ab      	b.n	80074cc <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].bSleep = (uint8_t)(wValue & 0xFFU);
 8007174:	7b7a      	ldrb	r2, [r7, #13]
 8007176:	883b      	ldrh	r3, [r7, #0]
 8007178:	b2d8      	uxtb	r0, r3
 800717a:	6879      	ldr	r1, [r7, #4]
 800717c:	4613      	mov	r3, r2
 800717e:	011b      	lsls	r3, r3, #4
 8007180:	1a9b      	subs	r3, r3, r2
 8007182:	440b      	add	r3, r1
 8007184:	336c      	adds	r3, #108	@ 0x6c
 8007186:	4602      	mov	r2, r0
 8007188:	701a      	strb	r2, [r3, #0]
        break;
 800718a:	e19e      	b.n	80074ca <phacDiscLoop_Sw_SetConfig+0x80a>

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS
    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_FSDI:
        if (wValue > PHPAL_I14443P4_FRAMESIZE_MAX)
 800718c:	883b      	ldrh	r3, [r7, #0]
 800718e:	2b0c      	cmp	r3, #12
 8007190:	d902      	bls.n	8007198 <phacDiscLoop_Sw_SetConfig+0x4d8>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8007192:	f244 0321 	movw	r3, #16417	@ 0x4021
 8007196:	e199      	b.n	80074cc <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bFsdi = (uint8_t)wValue;
 8007198:	883b      	ldrh	r3, [r7, #0]
 800719a:	b2da      	uxtb	r2, r3
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        break;
 80071a2:	e192      	b.n	80074ca <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_CID:
        if (wValue > PHAC_DISCLOOP_SW_I3P4_MAX_CID)
 80071a4:	883b      	ldrh	r3, [r7, #0]
 80071a6:	2b0e      	cmp	r3, #14
 80071a8:	d902      	bls.n	80071b0 <phacDiscLoop_Sw_SetConfig+0x4f0>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80071aa:	f244 0321 	movw	r3, #16417	@ 0x4021
 80071ae:	e18d      	b.n	80074cc <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bCid = (uint8_t)wValue;
 80071b0:	883b      	ldrh	r3, [r7, #0]
 80071b2:	b2da      	uxtb	r2, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
        break;
 80071ba:	e186      	b.n	80074ca <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_NAD:
        /* Valid NAD complaint with ISO/IEC 7816-3 shall be set by application. */
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bNad = (uint8_t)wValue;
 80071bc:	883b      	ldrh	r3, [r7, #0]
 80071be:	b2da      	uxtb	r2, r3
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
        break;
 80071c6:	e180      	b.n	80074ca <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_DRI:
        if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DRI) ||
 80071c8:	883b      	ldrh	r3, [r7, #0]
 80071ca:	2b03      	cmp	r3, #3
 80071cc:	d807      	bhi.n	80071de <phacDiscLoop_Sw_SetConfig+0x51e>
            ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P4A_DATARATE_106)))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
        if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DRI) ||
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d105      	bne.n	80071e4 <phacDiscLoop_Sw_SetConfig+0x524>
            ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P4A_DATARATE_106)))
 80071d8:	883b      	ldrh	r3, [r7, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d002      	beq.n	80071e4 <phacDiscLoop_Sw_SetConfig+0x524>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80071de:	f244 0321 	movw	r3, #16417	@ 0x4021
 80071e2:	e173      	b.n	80074cc <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDri = (uint8_t)wValue;
 80071e4:	883b      	ldrh	r3, [r7, #0]
 80071e6:	b2da      	uxtb	r2, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
        break;
 80071ee:	e16c      	b.n	80074ca <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_DSI:
        if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DSI) ||
 80071f0:	883b      	ldrh	r3, [r7, #0]
 80071f2:	2b03      	cmp	r3, #3
 80071f4:	d807      	bhi.n	8007206 <phacDiscLoop_Sw_SetConfig+0x546>
            ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P4A_DATARATE_106)))
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
        if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DSI) ||
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d105      	bne.n	800720c <phacDiscLoop_Sw_SetConfig+0x54c>
            ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P4A_DATARATE_106)))
 8007200:	883b      	ldrh	r3, [r7, #0]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d002      	beq.n	800720c <phacDiscLoop_Sw_SetConfig+0x54c>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8007206:	f244 0321 	movw	r3, #16417	@ 0x4021
 800720a:	e15f      	b.n	80074cc <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDsi = (uint8_t)wValue;
 800720c:	883b      	ldrh	r3, [r7, #0]
 800720e:	b2da      	uxtb	r2, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
        break;
 8007216:	e158      	b.n	80074ca <phacDiscLoop_Sw_SetConfig+0x80a>
        break;
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    case PHAC_DISCLOOP_CONFIG_TYPEB_DEVICE_LIMIT:
    if ((wValue & 0xFFU) > PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED)
 8007218:	883b      	ldrh	r3, [r7, #0]
 800721a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800721e:	2b00      	cmp	r3, #0
 8007220:	d002      	beq.n	8007228 <phacDiscLoop_Sw_SetConfig+0x568>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8007222:	f244 0321 	movw	r3, #16417	@ 0x4021
 8007226:	e151      	b.n	80074cc <phacDiscLoop_Sw_SetConfig+0x80c>
    }
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_B] = (uint8_t)wValue;
 8007228:	883b      	ldrh	r3, [r7, #0]
 800722a:	b2da      	uxtb	r2, r3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	72da      	strb	r2, [r3, #11]
    break;
 8007230:	e14b      	b.n	80074ca <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEB_AFI_REQ:
      pDataParams->sTypeBTargetInfo.bAfiReq = (uint8_t)wValue;
 8007232:	883b      	ldrh	r3, [r7, #0]
 8007234:	b2da      	uxtb	r2, r3
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
      break;
 800723c:	e145      	b.n	80074ca <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEB_EXTATQB:
      if (wValue == 0U)
 800723e:	883b      	ldrh	r3, [r7, #0]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d104      	bne.n	800724e <phacDiscLoop_Sw_SetConfig+0x58e>
      {
          pDataParams->sTypeBTargetInfo.bExtendedAtqBbit = 0;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	f883 2097 	strb.w	r2, [r3, #151]	@ 0x97
      }
      else
      {
          pDataParams->sTypeBTargetInfo.bExtendedAtqBbit = 1;
      }
      break;
 800724c:	e13d      	b.n	80074ca <phacDiscLoop_Sw_SetConfig+0x80a>
          pDataParams->sTypeBTargetInfo.bExtendedAtqBbit = 1;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 2097 	strb.w	r2, [r3, #151]	@ 0x97
      break;
 8007256:	e138      	b.n	80074ca <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEB_FSDI:
      if (wValue > PHPAL_I14443P3B_FRAMESIZE_MAX)
 8007258:	883b      	ldrh	r3, [r7, #0]
 800725a:	2b0c      	cmp	r3, #12
 800725c:	d902      	bls.n	8007264 <phacDiscLoop_Sw_SetConfig+0x5a4>
      {
          return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800725e:	f244 0321 	movw	r3, #16417	@ 0x4021
 8007262:	e133      	b.n	80074cc <phacDiscLoop_Sw_SetConfig+0x80c>
      }
      pDataParams->sTypeBTargetInfo.bFsdi = (uint8_t)wValue;
 8007264:	883b      	ldrh	r3, [r7, #0]
 8007266:	b2da      	uxtb	r2, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      break;
 800726e:	e12c      	b.n	80074ca <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEB_CID:
      if (wValue > PHAC_DISCLOOP_SW_I3P4_MAX_CID)
 8007270:	883b      	ldrh	r3, [r7, #0]
 8007272:	2b0e      	cmp	r3, #14
 8007274:	d902      	bls.n	800727c <phacDiscLoop_Sw_SetConfig+0x5bc>
      {
          return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8007276:	f244 0321 	movw	r3, #16417	@ 0x4021
 800727a:	e127      	b.n	80074cc <phacDiscLoop_Sw_SetConfig+0x80c>
      }
      pDataParams->sTypeBTargetInfo.bCid = (uint8_t)wValue;
 800727c:	883b      	ldrh	r3, [r7, #0]
 800727e:	b2da      	uxtb	r2, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
      break;
 8007286:	e120      	b.n	80074ca <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEB_NAD:
        /* Valid NAD complaint with ISO/IEC 7816-3 shall be set by application. */
        pDataParams->sTypeBTargetInfo.bNad = (uint8_t)wValue;
 8007288:	883b      	ldrh	r3, [r7, #0]
 800728a:	b2da      	uxtb	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
        break;
 8007292:	e11a      	b.n	80074ca <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEB_DRI:
      if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DRI) ||
 8007294:	883b      	ldrh	r3, [r7, #0]
 8007296:	2b03      	cmp	r3, #3
 8007298:	d807      	bhi.n	80072aa <phacDiscLoop_Sw_SetConfig+0x5ea>
          ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P3B_DATARATE_106)))
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
      if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DRI) ||
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d105      	bne.n	80072b0 <phacDiscLoop_Sw_SetConfig+0x5f0>
          ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P3B_DATARATE_106)))
 80072a4:	883b      	ldrh	r3, [r7, #0]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d002      	beq.n	80072b0 <phacDiscLoop_Sw_SetConfig+0x5f0>
      {
          return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80072aa:	f244 0321 	movw	r3, #16417	@ 0x4021
 80072ae:	e10d      	b.n	80074cc <phacDiscLoop_Sw_SetConfig+0x80c>
      }
      pDataParams->sTypeBTargetInfo.bDri = (uint8_t)wValue;
 80072b0:	883b      	ldrh	r3, [r7, #0]
 80072b2:	b2da      	uxtb	r2, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
      break;
 80072ba:	e106      	b.n	80074ca <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEB_DSI:
      if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DSI) ||
 80072bc:	883b      	ldrh	r3, [r7, #0]
 80072be:	2b03      	cmp	r3, #3
 80072c0:	d807      	bhi.n	80072d2 <phacDiscLoop_Sw_SetConfig+0x612>
          ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P3B_DATARATE_106)))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
      if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DSI) ||
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d105      	bne.n	80072d8 <phacDiscLoop_Sw_SetConfig+0x618>
          ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P3B_DATARATE_106)))
 80072cc:	883b      	ldrh	r3, [r7, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d002      	beq.n	80072d8 <phacDiscLoop_Sw_SetConfig+0x618>
      {
          return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80072d2:	f244 0321 	movw	r3, #16417	@ 0x4021
 80072d6:	e0f9      	b.n	80074cc <phacDiscLoop_Sw_SetConfig+0x80c>
      }
      pDataParams->sTypeBTargetInfo.bDsi = (uint8_t)wValue;
 80072d8:	883b      	ldrh	r3, [r7, #0]
 80072da:	b2da      	uxtb	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
      break;
 80072e2:	e0f2      	b.n	80074ca <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEB_SLEEP_STATE:
        if (((wValue & 0xFFU) != PH_ON) && ((wValue & 0xFFU) != PH_OFF))
 80072e4:	883b      	ldrh	r3, [r7, #0]
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d006      	beq.n	80072fa <phacDiscLoop_Sw_SetConfig+0x63a>
 80072ec:	883b      	ldrh	r3, [r7, #0]
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d002      	beq.n	80072fa <phacDiscLoop_Sw_SetConfig+0x63a>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80072f4:	f244 0321 	movw	r3, #16417	@ 0x4021
 80072f8:	e0e8      	b.n	80074cc <phacDiscLoop_Sw_SetConfig+0x80c>
        }

        bIndex = (uint8_t)((wValue & 0xFF00U) >> 8U);
 80072fa:	883b      	ldrh	r3, [r7, #0]
 80072fc:	0a1b      	lsrs	r3, r3, #8
 80072fe:	b29b      	uxth	r3, r3
 8007300:	737b      	strb	r3, [r7, #13]
        if (bIndex >= PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED)
 8007302:	7b7b      	ldrb	r3, [r7, #13]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d002      	beq.n	800730e <phacDiscLoop_Sw_SetConfig+0x64e>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8007308:	f244 0321 	movw	r3, #16417	@ 0x4021
 800730c:	e0de      	b.n	80074cc <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bIndex].bSleep = (uint8_t)(wValue & 0xFFU);
 800730e:	7b7a      	ldrb	r2, [r7, #13]
 8007310:	883b      	ldrh	r3, [r7, #0]
 8007312:	b2d8      	uxtb	r0, r3
 8007314:	6879      	ldr	r1, [r7, #4]
 8007316:	4613      	mov	r3, r2
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	4413      	add	r3, r2
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	440b      	add	r3, r1
 8007320:	33b1      	adds	r3, #177	@ 0xb1
 8007322:	4602      	mov	r2, r0
 8007324:	701a      	strb	r2, [r3, #0]
        break;
 8007326:	e0d0      	b.n	80074ca <phacDiscLoop_Sw_SetConfig+0x80a>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    case PHAC_DISCLOOP_CONFIG_TYPEF_CUR_BAUD:
        pDataParams->bFelicaBaud = (uint8_t)wValue;
 8007328:	883b      	ldrh	r3, [r7, #0]
 800732a:	b2da      	uxtb	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        break;
 8007332:	e0ca      	b.n	80074ca <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEF_DEVICE_LIMIT:
        if ((wValue & 0xFFU) > PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED)
 8007334:	883b      	ldrh	r3, [r7, #0]
 8007336:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800733a:	2b00      	cmp	r3, #0
 800733c:	d002      	beq.n	8007344 <phacDiscLoop_Sw_SetConfig+0x684>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800733e:	f244 0321 	movw	r3, #16417	@ 0x4021
 8007342:	e0c3      	b.n	80074cc <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F212] = (uint8_t)wValue;
 8007344:	883b      	ldrh	r3, [r7, #0]
 8007346:	b2da      	uxtb	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	731a      	strb	r2, [r3, #12]
        break;
 800734c:	e0bd      	b.n	80074ca <phacDiscLoop_Sw_SetConfig+0x80a>
        break;
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    case PHAC_DISCLOOP_CONFIG_TYPEV_DEVICE_LIMIT:
        if ((wValue & 0xFFU) > PHAC_DISCLOOP_CFG_MAX_VICINITY_CARDS_SUPPORTED)
 800734e:	883b      	ldrh	r3, [r7, #0]
 8007350:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007354:	2b00      	cmp	r3, #0
 8007356:	d002      	beq.n	800735e <phacDiscLoop_Sw_SetConfig+0x69e>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8007358:	f244 0321 	movw	r3, #16417	@ 0x4021
 800735c:	e0b6      	b.n	80074cc <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V] = (uint8_t)wValue;
 800735e:	883b      	ldrh	r3, [r7, #0]
 8007360:	b2da      	uxtb	r2, r3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	739a      	strb	r2, [r3, #14]
        break;
 8007366:	e0b0      	b.n	80074ca <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEV_RX_DATA_RATE:
        if((wValue != PHHAL_HW_RF_RX_DATARATE_HIGH)
 8007368:	883b      	ldrh	r3, [r7, #0]
 800736a:	2b0d      	cmp	r3, #13
 800736c:	d005      	beq.n	800737a <phacDiscLoop_Sw_SetConfig+0x6ba>
           && (wValue != PHHAL_HW_RF_RX_DATARATE_LOW))
 800736e:	883b      	ldrh	r3, [r7, #0]
 8007370:	2b0c      	cmp	r3, #12
 8007372:	d002      	beq.n	800737a <phacDiscLoop_Sw_SetConfig+0x6ba>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8007374:	f244 0321 	movw	r3, #16417	@ 0x4021
 8007378:	e0a8      	b.n	80074cc <phacDiscLoop_Sw_SetConfig+0x80c>
        }

        /* Set request flag to indicate high data rate */
        if(wValue == PHHAL_HW_RF_RX_DATARATE_HIGH)
 800737a:	883b      	ldrh	r3, [r7, #0]
 800737c:	2b0d      	cmp	r3, #13
 800737e:	d109      	bne.n	8007394 <phacDiscLoop_Sw_SetConfig+0x6d4>
        {
            pDataParams->sTypeVTargetInfo.bFlag |= PHPAL_SLI15693_FLAG_DATA_RATE;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 8007386:	f043 0302 	orr.w	r3, r3, #2
 800738a:	b2da      	uxtb	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f883 20b5 	strb.w	r2, [r3, #181]	@ 0xb5
        }
        else
        {
            pDataParams->sTypeVTargetInfo.bFlag &= ~((uint8_t)PHPAL_SLI15693_FLAG_DATA_RATE);
        }
        break;
 8007392:	e09a      	b.n	80074ca <phacDiscLoop_Sw_SetConfig+0x80a>
            pDataParams->sTypeVTargetInfo.bFlag &= ~((uint8_t)PHPAL_SLI15693_FLAG_DATA_RATE);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 800739a:	f023 0302 	bic.w	r3, r3, #2
 800739e:	b2da      	uxtb	r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f883 20b5 	strb.w	r2, [r3, #181]	@ 0xb5
        break;
 80073a6:	e090      	b.n	80074ca <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEV_MODE:
        if((wValue != PHPAL_SLI15693_FLAG_ADDRESSED)
 80073a8:	883b      	ldrh	r3, [r7, #0]
 80073aa:	2b20      	cmp	r3, #32
 80073ac:	d008      	beq.n	80073c0 <phacDiscLoop_Sw_SetConfig+0x700>
           && (wValue != PHPAL_SLI15693_FLAG_SELECTED) && (wValue != PHPAL_SLI15693_FLAG_NON_ADDRESSED))
 80073ae:	883b      	ldrh	r3, [r7, #0]
 80073b0:	2b10      	cmp	r3, #16
 80073b2:	d005      	beq.n	80073c0 <phacDiscLoop_Sw_SetConfig+0x700>
 80073b4:	883b      	ldrh	r3, [r7, #0]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d002      	beq.n	80073c0 <phacDiscLoop_Sw_SetConfig+0x700>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80073ba:	f244 0321 	movw	r3, #16417	@ 0x4021
 80073be:	e085      	b.n	80074cc <phacDiscLoop_Sw_SetConfig+0x80c>
        }

        /* Save previous Flags value */
        PH_CHECK_SUCCESS_FCT(status, phpalSli15693_GetConfig(pDataParams->pPalSli15693DataParams, PHPAL_SLI15693_CONFIG_FLAGS, &wSliConfigFlags));
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073c4:	f107 020a 	add.w	r2, r7, #10
 80073c8:	2100      	movs	r1, #0
 80073ca:	4618      	mov	r0, r3
 80073cc:	f00e ff72 	bl	80162b4 <phpalSli15693_Sw_GetConfig>
 80073d0:	4603      	mov	r3, r0
 80073d2:	81fb      	strh	r3, [r7, #14]
 80073d4:	89fb      	ldrh	r3, [r7, #14]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d001      	beq.n	80073de <phacDiscLoop_Sw_SetConfig+0x71e>
 80073da:	89fb      	ldrh	r3, [r7, #14]
 80073dc:	e076      	b.n	80074cc <phacDiscLoop_Sw_SetConfig+0x80c>

        if(wValue == PHPAL_SLI15693_FLAG_SELECTED)
 80073de:	883b      	ldrh	r3, [r7, #0]
 80073e0:	2b10      	cmp	r3, #16
 80073e2:	d10a      	bne.n	80073fa <phacDiscLoop_Sw_SetConfig+0x73a>
        {
            /* Set the Select_flag and clear the Adress_flag */
            wSliConfigFlags |= PHPAL_SLI15693_FLAG_SELECTED;
 80073e4:	897b      	ldrh	r3, [r7, #10]
 80073e6:	f043 0310 	orr.w	r3, r3, #16
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	817b      	strh	r3, [r7, #10]
            wSliConfigFlags &= (uint8_t)~(uint8_t)PHPAL_SLI15693_FLAG_ADDRESSED;
 80073ee:	897b      	ldrh	r3, [r7, #10]
 80073f0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	817b      	strh	r3, [r7, #10]
 80073f8:	e017      	b.n	800742a <phacDiscLoop_Sw_SetConfig+0x76a>
        }
        else if(wValue == PHPAL_SLI15693_FLAG_ADDRESSED)
 80073fa:	883b      	ldrh	r3, [r7, #0]
 80073fc:	2b20      	cmp	r3, #32
 80073fe:	d10a      	bne.n	8007416 <phacDiscLoop_Sw_SetConfig+0x756>
        {
            /* Set the Adress_flag and clear the Select_flag */
            wSliConfigFlags |= PHPAL_SLI15693_FLAG_ADDRESSED;
 8007400:	897b      	ldrh	r3, [r7, #10]
 8007402:	f043 0320 	orr.w	r3, r3, #32
 8007406:	b29b      	uxth	r3, r3
 8007408:	817b      	strh	r3, [r7, #10]
            wSliConfigFlags &= (uint8_t)~(uint8_t)PHPAL_SLI15693_FLAG_SELECTED;
 800740a:	897b      	ldrh	r3, [r7, #10]
 800740c:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
 8007410:	b29b      	uxth	r3, r3
 8007412:	817b      	strh	r3, [r7, #10]
 8007414:	e009      	b.n	800742a <phacDiscLoop_Sw_SetConfig+0x76a>
        }
        else
        {
            /* Clear both Adress_flag and Select_flag */
            wSliConfigFlags &= (uint8_t)~(uint8_t)PHPAL_SLI15693_FLAG_ADDRESSED;
 8007416:	897b      	ldrh	r3, [r7, #10]
 8007418:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800741c:	b29b      	uxth	r3, r3
 800741e:	817b      	strh	r3, [r7, #10]
            wSliConfigFlags &= (uint8_t)~(uint8_t)PHPAL_SLI15693_FLAG_SELECTED;
 8007420:	897b      	ldrh	r3, [r7, #10]
 8007422:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
 8007426:	b29b      	uxth	r3, r3
 8007428:	817b      	strh	r3, [r7, #10]
        }

        /* Update Flags value */
        PH_CHECK_SUCCESS_FCT(status, phpalSli15693_SetConfig(pDataParams->pPalSli15693DataParams, PHPAL_SLI15693_CONFIG_FLAGS, wSliConfigFlags));
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800742e:	897a      	ldrh	r2, [r7, #10]
 8007430:	2100      	movs	r1, #0
 8007432:	4618      	mov	r0, r3
 8007434:	f00e fd68 	bl	8015f08 <phpalSli15693_Sw_SetConfig>
 8007438:	4603      	mov	r3, r0
 800743a:	81fb      	strh	r3, [r7, #14]
 800743c:	89fb      	ldrh	r3, [r7, #14]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d001      	beq.n	8007446 <phacDiscLoop_Sw_SetConfig+0x786>
 8007442:	89fb      	ldrh	r3, [r7, #14]
 8007444:	e042      	b.n	80074cc <phacDiscLoop_Sw_SetConfig+0x80c>

        pDataParams->sTypeVTargetInfo.bMode = (uint8_t)wValue;
 8007446:	883b      	ldrh	r3, [r7, #0]
 8007448:	b2da      	uxtb	r2, r3
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f883 20b6 	strb.w	r2, [r3, #182]	@ 0xb6
        break;
 8007450:	e03b      	b.n	80074ca <phacDiscLoop_Sw_SetConfig+0x80a>

#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    case PHAC_DISCLOOP_CONFIG_18000P3M3_DEVICE_LIMIT:
        if ((wValue & 0xFFU) > PHAC_DISCLOOP_CFG_MAX_VICINITY_CARDS_SUPPORTED)
 8007452:	883b      	ldrh	r3, [r7, #0]
 8007454:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007458:	2b00      	cmp	r3, #0
 800745a:	d002      	beq.n	8007462 <phacDiscLoop_Sw_SetConfig+0x7a2>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800745c:	f244 0321 	movw	r3, #16417	@ 0x4021
 8007460:	e034      	b.n	80074cc <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_18000P3M3] = (uint8_t)wValue;
 8007462:	883b      	ldrh	r3, [r7, #0]
 8007464:	b2da      	uxtb	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	73da      	strb	r2, [r3, #15]
        break;
 800746a:	e02e      	b.n	80074ca <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_I18000P3M3_MODULATION:
        if((wValue != PHPAL_I18000P3M3_M_MANCHESTER_2)
 800746c:	883b      	ldrh	r3, [r7, #0]
 800746e:	2b02      	cmp	r3, #2
 8007470:	d005      	beq.n	800747e <phacDiscLoop_Sw_SetConfig+0x7be>
           && (wValue != PHPAL_I18000P3M3_M_MANCHESTER_4))
 8007472:	883b      	ldrh	r3, [r7, #0]
 8007474:	2b03      	cmp	r3, #3
 8007476:	d002      	beq.n	800747e <phacDiscLoop_Sw_SetConfig+0x7be>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8007478:	f244 0321 	movw	r3, #16417	@ 0x4021
 800747c:	e026      	b.n	80074cc <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->sI18000p3m3TargetInfo.bM = (uint8_t)wValue;
 800747e:	883b      	ldrh	r3, [r7, #0]
 8007480:	b2da      	uxtb	r2, r3
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1
        break;
 8007488:	e01f      	b.n	80074ca <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_I18000P3M3_FREQUENCY:
        if((wValue != PHPAL_I18000P3M3_LF_423KHZ)
 800748a:	883b      	ldrh	r3, [r7, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d005      	beq.n	800749c <phacDiscLoop_Sw_SetConfig+0x7dc>
           && (wValue != PHPAL_I18000P3M3_LF_847KHZ))
 8007490:	883b      	ldrh	r3, [r7, #0]
 8007492:	2b01      	cmp	r3, #1
 8007494:	d002      	beq.n	800749c <phacDiscLoop_Sw_SetConfig+0x7dc>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8007496:	f244 0321 	movw	r3, #16417	@ 0x4021
 800749a:	e017      	b.n	80074cc <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->sI18000p3m3TargetInfo.bDr = (uint8_t)wValue;
 800749c:	883b      	ldrh	r3, [r7, #0]
 800749e:	b2da      	uxtb	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
        break;
 80074a6:	e010      	b.n	80074ca <phacDiscLoop_Sw_SetConfig+0x80a>

#endif /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TARGET
    case PHAC_DISCLOOP_CONFIG_TARGET_RETRY_COUNT:
        if (wValue > 255U)
 80074a8:	883b      	ldrh	r3, [r7, #0]
 80074aa:	2bff      	cmp	r3, #255	@ 0xff
 80074ac:	d902      	bls.n	80074b4 <phacDiscLoop_Sw_SetConfig+0x7f4>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80074ae:	f244 0321 	movw	r3, #16417	@ 0x4021
 80074b2:	e00b      	b.n	80074cc <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->sTargetParams.bRetryCount = (uint8_t)wValue;
 80074b4:	883b      	ldrh	r3, [r7, #0]
 80074b6:	b2da      	uxtb	r2, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
        break;
 80074be:	e004      	b.n	80074ca <phacDiscLoop_Sw_SetConfig+0x80a>
#endif /* NXPBUILD__PHAC_DISCLOOP_TARGET */

    default:
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80074c0:	f244 0321 	movw	r3, #16417	@ 0x4021
 80074c4:	81fb      	strh	r3, [r7, #14]
 80074c6:	e000      	b.n	80074ca <phacDiscLoop_Sw_SetConfig+0x80a>
        break;
 80074c8:	bf00      	nop
    }

    return status;
 80074ca:	89fb      	ldrh	r3, [r7, #14]
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3710      	adds	r7, #16
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <phacDiscLoop_Sw_GetConfig>:
phStatus_t phacDiscLoop_Sw_GetConfig(
                                     phacDiscLoop_Sw_DataParams_t * pDataParams,
                                     uint16_t wConfig,
                                     uint16_t * pValue
                                     )
{
 80074d4:	b480      	push	{r7}
 80074d6:	b087      	sub	sp, #28
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	460b      	mov	r3, r1
 80074de:	607a      	str	r2, [r7, #4]
 80074e0:	817b      	strh	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 80074e2:	2300      	movs	r3, #0
 80074e4:	82fb      	strh	r3, [r7, #22]

    switch(wConfig)
 80074e6:	897b      	ldrh	r3, [r7, #10]
 80074e8:	2b92      	cmp	r3, #146	@ 0x92
 80074ea:	f200 8250 	bhi.w	800798e <phacDiscLoop_Sw_GetConfig+0x4ba>
 80074ee:	a201      	add	r2, pc, #4	@ (adr r2, 80074f4 <phacDiscLoop_Sw_GetConfig+0x20>)
 80074f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f4:	080077fd 	.word	0x080077fd
 80074f8:	08007867 	.word	0x08007867
 80074fc:	080078b5 	.word	0x080078b5
 8007500:	080078bf 	.word	0x080078bf
 8007504:	080078f1 	.word	0x080078f1
 8007508:	08007941 	.word	0x08007941
 800750c:	080077d7 	.word	0x080077d7
 8007510:	0800798f 	.word	0x0800798f
 8007514:	0800798f 	.word	0x0800798f
 8007518:	0800798f 	.word	0x0800798f
 800751c:	0800798f 	.word	0x0800798f
 8007520:	0800798f 	.word	0x0800798f
 8007524:	0800798f 	.word	0x0800798f
 8007528:	0800798f 	.word	0x0800798f
 800752c:	0800798f 	.word	0x0800798f
 8007530:	0800798f 	.word	0x0800798f
 8007534:	08007815 	.word	0x08007815
 8007538:	0800787f 	.word	0x0800787f
 800753c:	080078d7 	.word	0x080078d7
 8007540:	080078fb 	.word	0x080078fb
 8007544:	0800794b 	.word	0x0800794b
 8007548:	0800798f 	.word	0x0800798f
 800754c:	0800798f 	.word	0x0800798f
 8007550:	0800798f 	.word	0x0800798f
 8007554:	0800798f 	.word	0x0800798f
 8007558:	0800798f 	.word	0x0800798f
 800755c:	0800798f 	.word	0x0800798f
 8007560:	0800798f 	.word	0x0800798f
 8007564:	0800798f 	.word	0x0800798f
 8007568:	0800798f 	.word	0x0800798f
 800756c:	0800798f 	.word	0x0800798f
 8007570:	0800798f 	.word	0x0800798f
 8007574:	08007807 	.word	0x08007807
 8007578:	08007871 	.word	0x08007871
 800757c:	080078c9 	.word	0x080078c9
 8007580:	08007907 	.word	0x08007907
 8007584:	08007957 	.word	0x08007957
 8007588:	0800788b 	.word	0x0800788b
 800758c:	0800798f 	.word	0x0800798f
 8007590:	0800798f 	.word	0x0800798f
 8007594:	0800798f 	.word	0x0800798f
 8007598:	0800798f 	.word	0x0800798f
 800759c:	0800798f 	.word	0x0800798f
 80075a0:	0800798f 	.word	0x0800798f
 80075a4:	0800798f 	.word	0x0800798f
 80075a8:	0800798f 	.word	0x0800798f
 80075ac:	0800798f 	.word	0x0800798f
 80075b0:	0800798f 	.word	0x0800798f
 80075b4:	0800798f 	.word	0x0800798f
 80075b8:	0800798f 	.word	0x0800798f
 80075bc:	0800798f 	.word	0x0800798f
 80075c0:	0800798f 	.word	0x0800798f
 80075c4:	0800798f 	.word	0x0800798f
 80075c8:	08007899 	.word	0x08007899
 80075cc:	080078a7 	.word	0x080078a7
 80075d0:	0800798f 	.word	0x0800798f
 80075d4:	0800798f 	.word	0x0800798f
 80075d8:	0800798f 	.word	0x0800798f
 80075dc:	0800798f 	.word	0x0800798f
 80075e0:	0800798f 	.word	0x0800798f
 80075e4:	0800798f 	.word	0x0800798f
 80075e8:	0800798f 	.word	0x0800798f
 80075ec:	0800798f 	.word	0x0800798f
 80075f0:	0800798f 	.word	0x0800798f
 80075f4:	08007821 	.word	0x08007821
 80075f8:	0800782f 	.word	0x0800782f
 80075fc:	0800783d 	.word	0x0800783d
 8007600:	08007859 	.word	0x08007859
 8007604:	0800784b 	.word	0x0800784b
 8007608:	0800798f 	.word	0x0800798f
 800760c:	0800798f 	.word	0x0800798f
 8007610:	0800798f 	.word	0x0800798f
 8007614:	0800798f 	.word	0x0800798f
 8007618:	0800798f 	.word	0x0800798f
 800761c:	0800798f 	.word	0x0800798f
 8007620:	0800798f 	.word	0x0800798f
 8007624:	0800798f 	.word	0x0800798f
 8007628:	0800798f 	.word	0x0800798f
 800762c:	0800798f 	.word	0x0800798f
 8007630:	0800798f 	.word	0x0800798f
 8007634:	0800798f 	.word	0x0800798f
 8007638:	0800798f 	.word	0x0800798f
 800763c:	0800798f 	.word	0x0800798f
 8007640:	0800798f 	.word	0x0800798f
 8007644:	0800798f 	.word	0x0800798f
 8007648:	0800798f 	.word	0x0800798f
 800764c:	0800798f 	.word	0x0800798f
 8007650:	080078e3 	.word	0x080078e3
 8007654:	0800798f 	.word	0x0800798f
 8007658:	0800798f 	.word	0x0800798f
 800765c:	0800798f 	.word	0x0800798f
 8007660:	0800798f 	.word	0x0800798f
 8007664:	0800798f 	.word	0x0800798f
 8007668:	0800798f 	.word	0x0800798f
 800766c:	0800798f 	.word	0x0800798f
 8007670:	0800798f 	.word	0x0800798f
 8007674:	08007915 	.word	0x08007915
 8007678:	08007933 	.word	0x08007933
 800767c:	0800798f 	.word	0x0800798f
 8007680:	0800798f 	.word	0x0800798f
 8007684:	0800798f 	.word	0x0800798f
 8007688:	0800798f 	.word	0x0800798f
 800768c:	0800798f 	.word	0x0800798f
 8007690:	0800798f 	.word	0x0800798f
 8007694:	0800798f 	.word	0x0800798f
 8007698:	0800798f 	.word	0x0800798f
 800769c:	0800798f 	.word	0x0800798f
 80076a0:	0800798f 	.word	0x0800798f
 80076a4:	0800798f 	.word	0x0800798f
 80076a8:	0800798f 	.word	0x0800798f
 80076ac:	0800798f 	.word	0x0800798f
 80076b0:	0800798f 	.word	0x0800798f
 80076b4:	08007965 	.word	0x08007965
 80076b8:	08007973 	.word	0x08007973
 80076bc:	0800798f 	.word	0x0800798f
 80076c0:	0800798f 	.word	0x0800798f
 80076c4:	0800798f 	.word	0x0800798f
 80076c8:	0800798f 	.word	0x0800798f
 80076cc:	0800798f 	.word	0x0800798f
 80076d0:	0800798f 	.word	0x0800798f
 80076d4:	0800798f 	.word	0x0800798f
 80076d8:	0800798f 	.word	0x0800798f
 80076dc:	0800798f 	.word	0x0800798f
 80076e0:	0800798f 	.word	0x0800798f
 80076e4:	0800798f 	.word	0x0800798f
 80076e8:	0800798f 	.word	0x0800798f
 80076ec:	0800798f 	.word	0x0800798f
 80076f0:	0800798f 	.word	0x0800798f
 80076f4:	080077c1 	.word	0x080077c1
 80076f8:	0800779b 	.word	0x0800779b
 80076fc:	0800798f 	.word	0x0800798f
 8007700:	08007765 	.word	0x08007765
 8007704:	08007771 	.word	0x08007771
 8007708:	080077cd 	.word	0x080077cd
 800770c:	080077a9 	.word	0x080077a9
 8007710:	0800778d 	.word	0x0800778d
 8007714:	0800777f 	.word	0x0800777f
 8007718:	0800774d 	.word	0x0800774d
 800771c:	08007759 	.word	0x08007759
 8007720:	08007741 	.word	0x08007741
 8007724:	080077b5 	.word	0x080077b5
 8007728:	0800798f 	.word	0x0800798f
 800772c:	0800798f 	.word	0x0800798f
 8007730:	0800798f 	.word	0x0800798f
 8007734:	08007981 	.word	0x08007981
 8007738:	080077e1 	.word	0x080077e1
 800773c:	080077ef 	.word	0x080077ef
    {
    case PHAC_DISCLOOP_CONFIG_PAS_LIS_TECH_CFG:
        *pValue = pDataParams->bPasLisTechCfg;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	795b      	ldrb	r3, [r3, #5]
 8007744:	461a      	mov	r2, r3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	801a      	strh	r2, [r3, #0]
        break;
 800774a:	e123      	b.n	8007994 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_ACT_LIS_TECH_CFG:
        *pValue = pDataParams->bActLisTechCfg;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	799b      	ldrb	r3, [r3, #6]
 8007750:	461a      	mov	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	801a      	strh	r2, [r3, #0]
        break;
 8007756:	e11d      	b.n	8007994 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_ACT_POLL_TECH_CFG:
        *pValue = pDataParams->bActPollTechCfg;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	78db      	ldrb	r3, [r3, #3]
 800775c:	461a      	mov	r2, r3
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	801a      	strh	r2, [r3, #0]
        break;
 8007762:	e117      	b.n	8007994 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_COLLISION_PENDING:
        *pValue = pDataParams->bCollPend;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	7f9b      	ldrb	r3, [r3, #30]
 8007768:	461a      	mov	r2, r3
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	801a      	strh	r2, [r3, #0]
        break;
 800776e:	e111      	b.n	8007994 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_NEXT_POLL_STATE:
        *pValue = (uint8_t)pDataParams->bPollState;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	891b      	ldrh	r3, [r3, #8]
 8007774:	b2db      	uxtb	r3, r3
 8007776:	461a      	mov	r2, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	801a      	strh	r2, [r3, #0]
        break;
 800777c:	e10a      	b.n	8007994 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_ANTI_COLL:
        *pValue = pDataParams->bUseAntiColl;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007784:	461a      	mov	r2, r3
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	801a      	strh	r2, [r3, #0]
        break;
 800778a:	e103      	b.n	8007994 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TECH_DETECTED:
        *pValue = pDataParams->bDetectedTechs;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007792:	461a      	mov	r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	801a      	strh	r2, [r3, #0]
        break;
 8007798:	e0fc      	b.n	8007994 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_NR_TAGS_FOUND:
        *pValue = pDataParams->bNumOfCards;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80077a0:	461a      	mov	r2, r3
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	801a      	strh	r2, [r3, #0]
         break;
 80077a6:	e0f5      	b.n	8007994 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_BAIL_OUT:
        *pValue = pDataParams->bPasPollBailOut;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	791b      	ldrb	r3, [r3, #4]
 80077ac:	461a      	mov	r2, r3
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	801a      	strh	r2, [r3, #0]
        break;
 80077b2:	e0ef      	b.n	8007994 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_PAS_POLL_TECH_CFG:
        *pValue = pDataParams->bPasPollTechCfg;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	789b      	ldrb	r3, [r3, #2]
 80077b8:	461a      	mov	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	801a      	strh	r2, [r3, #0]
        break;
 80077be:	e0e9      	b.n	8007994 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_ENABLE_LPCD:
        *pValue = pDataParams->bLpcdEnabled;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	7fdb      	ldrb	r3, [r3, #31]
 80077c4:	461a      	mov	r2, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	801a      	strh	r2, [r3, #0]
        break;
 80077ca:	e0e3      	b.n	8007994 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_ADDITIONAL_INFO:
        *pValue = pDataParams->wErrorCode;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	801a      	strh	r2, [r3, #0]
        break;
 80077d4:	e0de      	b.n	8007994 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_GT_ACTIVE_US:
        *pValue = pDataParams->wActPollGTimeUs;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	8b9a      	ldrh	r2, [r3, #28]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	801a      	strh	r2, [r3, #0]
        break;
 80077de:	e0d9      	b.n	8007994 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_EMVCO_PROF_FSCI_MAX:
        *pValue = pDataParams->bFsciMax;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80077e6:	461a      	mov	r2, r3
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	801a      	strh	r2, [r3, #0]
        break;
 80077ec:	e0d2      	b.n	8007994 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_EMVCO_PROP_OP_RF_RESET:
        *pValue = pDataParams->bEMVCoPropOpRfFieldReset;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80077f4:	461a      	mov	r2, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	801a      	strh	r2, [r3, #0]
        break;
 80077fa:	e0cb      	b.n	8007994 <phacDiscLoop_Sw_GetConfig+0x4c0>

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS
    case PHAC_DISCLOOP_CONFIG_GTA_VALUE_US:
        *pValue = pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_A];
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	8a1a      	ldrh	r2, [r3, #16]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	801a      	strh	r2, [r3, #0]
        break;
 8007804:	e0c6      	b.n	8007994 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_TAGS_FOUND:
        *pValue = pDataParams->sTypeATargetInfo.bTotalTagsFound;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800780c:	461a      	mov	r2, r3
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	801a      	strh	r2, [r3, #0]
        break;
 8007812:	e0bf      	b.n	8007994 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_DEVICE_LIMIT:
        *pValue = pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A];
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	7a9b      	ldrb	r3, [r3, #10]
 8007818:	461a      	mov	r2, r3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	801a      	strh	r2, [r3, #0]
        break;
 800781e:	e0b9      	b.n	8007994 <phacDiscLoop_Sw_GetConfig+0x4c0>

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS
    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_FSDI:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_I3P4.bFsdi;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8007826:	461a      	mov	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	801a      	strh	r2, [r3, #0]
        break;
 800782c:	e0b2      	b.n	8007994 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_CID:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_I3P4.bCid;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8007834:	461a      	mov	r2, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	801a      	strh	r2, [r3, #0]
        break;
 800783a:	e0ab      	b.n	8007994 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_NAD:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_I3P4.bNad;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8007842:	461a      	mov	r2, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	801a      	strh	r2, [r3, #0]
        break;
 8007848:	e0a4      	b.n	8007994 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_DSI:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDsi;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8007850:	461a      	mov	r2, r3
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	801a      	strh	r2, [r3, #0]
        break;
 8007856:	e09d      	b.n	8007994 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_DRI:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDri;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 800785e:	461a      	mov	r2, r3
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	801a      	strh	r2, [r3, #0]
        break;
 8007864:	e096      	b.n	8007994 <phacDiscLoop_Sw_GetConfig+0x4c0>
        break;
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    case PHAC_DISCLOOP_CONFIG_GTB_VALUE_US:
        *pValue = pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_B];
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	8a5a      	ldrh	r2, [r3, #18]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	801a      	strh	r2, [r3, #0]
        break;
 800786e:	e091      	b.n	8007994 <phacDiscLoop_Sw_GetConfig+0x4c0>

     case PHAC_DISCLOOP_CONFIG_TYPEB_TAGS_FOUND:
        *pValue = pDataParams->sTypeBTargetInfo.bTotalTagsFound;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8007876:	461a      	mov	r2, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	801a      	strh	r2, [r3, #0]
        break;
 800787c:	e08a      	b.n	8007994 <phacDiscLoop_Sw_GetConfig+0x4c0>

     case PHAC_DISCLOOP_CONFIG_TYPEB_DEVICE_LIMIT:
        *pValue = pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_B];
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	7adb      	ldrb	r3, [r3, #11]
 8007882:	461a      	mov	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	801a      	strh	r2, [r3, #0]
        break;
 8007888:	e084      	b.n	8007994 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEB_SUPPORT_TYPE4B:
        *pValue = pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].bSupportType4B;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8007890:	461a      	mov	r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	801a      	strh	r2, [r3, #0]
        break;
 8007896:	e07d      	b.n	8007994 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEB_DRI:
        *pValue = pDataParams->sTypeBTargetInfo.bDri;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800789e:	461a      	mov	r2, r3
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	801a      	strh	r2, [r3, #0]
        break;
 80078a4:	e076      	b.n	8007994 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEB_DSI:
        *pValue = pDataParams->sTypeBTargetInfo.bDsi;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80078ac:	461a      	mov	r2, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	801a      	strh	r2, [r3, #0]
        break;
 80078b2:	e06f      	b.n	8007994 <phacDiscLoop_Sw_GetConfig+0x4c0>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    case PHAC_DISCLOOP_CONFIG_GTFB_VALUE_US:
         *pValue = pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F212];
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	8a9a      	ldrh	r2, [r3, #20]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	801a      	strh	r2, [r3, #0]
         break;
 80078bc:	e06a      	b.n	8007994 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_GTBF_VALUE_US:
         *pValue = pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F424];
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	8ada      	ldrh	r2, [r3, #22]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	801a      	strh	r2, [r3, #0]
         break;
 80078c6:	e065      	b.n	8007994 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEF_TAGS_FOUND:
        *pValue = pDataParams->sTypeFTargetInfo.bTotalTagsFound;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80078ce:	461a      	mov	r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	801a      	strh	r2, [r3, #0]
        break;
 80078d4:	e05e      	b.n	8007994 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEF_DEVICE_LIMIT:
        *pValue = pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F212];
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	7b1b      	ldrb	r3, [r3, #12]
 80078da:	461a      	mov	r2, r3
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	801a      	strh	r2, [r3, #0]
        break;
 80078e0:	e058      	b.n	8007994 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEF_CUR_BAUD:
         *pValue = pDataParams->bFelicaBaud;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80078e8:	461a      	mov	r2, r3
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	801a      	strh	r2, [r3, #0]
         break;
 80078ee:	e051      	b.n	8007994 <phacDiscLoop_Sw_GetConfig+0x4c0>
        break;
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    case PHAC_DISCLOOP_CONFIG_GTV_VALUE_US:
        *pValue = pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_V];
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	8b1a      	ldrh	r2, [r3, #24]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	801a      	strh	r2, [r3, #0]
        break;
 80078f8:	e04c      	b.n	8007994 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEV_DEVICE_LIMIT:
        *pValue = pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V];
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	7b9b      	ldrb	r3, [r3, #14]
 80078fe:	461a      	mov	r2, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	801a      	strh	r2, [r3, #0]
        break;
 8007904:	e046      	b.n	8007994 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEV_TAGS_FOUND:
        *pValue = pDataParams->sTypeVTargetInfo.bTotalTagsFound;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800790c:	461a      	mov	r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	801a      	strh	r2, [r3, #0]
        break;
 8007912:	e03f      	b.n	8007994 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEV_RX_DATA_RATE:
        if(0U != (pDataParams->sTypeVTargetInfo.bFlag & PHPAL_SLI15693_FLAG_DATA_RATE))
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 800791a:	f003 0302 	and.w	r3, r3, #2
 800791e:	2b00      	cmp	r3, #0
 8007920:	d003      	beq.n	800792a <phacDiscLoop_Sw_GetConfig+0x456>
        {
            *pValue = PHHAL_HW_RF_RX_DATARATE_HIGH;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	220d      	movs	r2, #13
 8007926:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = PHHAL_HW_RF_RX_DATARATE_LOW;
        }
        break;
 8007928:	e034      	b.n	8007994 <phacDiscLoop_Sw_GetConfig+0x4c0>
            *pValue = PHHAL_HW_RF_RX_DATARATE_LOW;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	220c      	movs	r2, #12
 800792e:	801a      	strh	r2, [r3, #0]
        break;
 8007930:	e030      	b.n	8007994 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEV_MODE:
        *pValue = pDataParams->sTypeVTargetInfo.bMode;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f893 30b6 	ldrb.w	r3, [r3, #182]	@ 0xb6
 8007938:	461a      	mov	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	801a      	strh	r2, [r3, #0]
        break;
 800793e:	e029      	b.n	8007994 <phacDiscLoop_Sw_GetConfig+0x4c0>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    case PHAC_DISCLOOP_CONFIG_GT18000P3M3_VALUE_US:
        *pValue = pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_18000P3M3];
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	8b5a      	ldrh	r2, [r3, #26]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	801a      	strh	r2, [r3, #0]
        break;
 8007948:	e024      	b.n	8007994 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_18000P3M3_DEVICE_LIMIT:
        *pValue = pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_18000P3M3];
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	7bdb      	ldrb	r3, [r3, #15]
 800794e:	461a      	mov	r2, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	801a      	strh	r2, [r3, #0]
        break;
 8007954:	e01e      	b.n	8007994 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_18000P3M3_TAGS_FOUND:
        *pValue = pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800795c:	461a      	mov	r2, r3
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	801a      	strh	r2, [r3, #0]
        break;
 8007962:	e017      	b.n	8007994 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_I18000P3M3_MODULATION:
        *pValue = pDataParams->sI18000p3m3TargetInfo.bM;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 800796a:	461a      	mov	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	801a      	strh	r2, [r3, #0]
        break;
 8007970:	e010      	b.n	8007994 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_I18000P3M3_FREQUENCY:
        *pValue = pDataParams->sI18000p3m3TargetInfo.bDr;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 8007978:	461a      	mov	r2, r3
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	801a      	strh	r2, [r3, #0]
        break;
 800797e:	e009      	b.n	8007994 <phacDiscLoop_Sw_GetConfig+0x4c0>

#endif /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TARGET
    case PHAC_DISCLOOP_CONFIG_TARGET_RETRY_COUNT:
        *pValue = pDataParams->sTargetParams.bRetryCount;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8007986:	461a      	mov	r2, r3
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	801a      	strh	r2, [r3, #0]
        break;
 800798c:	e002      	b.n	8007994 <phacDiscLoop_Sw_GetConfig+0x4c0>
#endif /* NXPBUILD__PHAC_DISCLOOP_TARGET */

    default:
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800798e:	f244 0321 	movw	r3, #16417	@ 0x4021
 8007992:	82fb      	strh	r3, [r7, #22]
    }

    return status;
 8007994:	8afb      	ldrh	r3, [r7, #22]
}
 8007996:	4618      	mov	r0, r3
 8007998:	371c      	adds	r7, #28
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr
 80079a2:	bf00      	nop

080079a4 <phacDiscLoop_Sw_Int_Apply_PTGT>:
 * ***************************************************************************************************************** */

static phStatus_t phacDiscLoop_Sw_Int_Apply_PTGT(
        phacDiscLoop_Sw_DataParams_t *pDataParams
        )
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM   status = PH_ERR_SUCCESS;
 80079ac:	2300      	movs	r3, #0
 80079ae:	81fb      	strh	r3, [r7, #14]
    uint8_t    PH_MEMLOC_COUNT bTechLoopIndex;
    uint8_t    PH_MEMLOC_COUNT bPollTech;
    uint8_t    PH_MEMLOC_COUNT bTechIndex;
    uint16_t   PH_MEMLOC_COUNT wPTGT = 0U;
 80079b0:	2300      	movs	r3, #0
 80079b2:	813b      	strh	r3, [r7, #8]

    /* Check for Proprietary technology and apply Proprietary Technology Guard Time(PTGT) based on preceding technology */
    for (bTechLoopIndex = 1U; bTechLoopIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bTechLoopIndex++)
 80079b4:	2301      	movs	r3, #1
 80079b6:	737b      	strb	r3, [r7, #13]
 80079b8:	e0ba      	b.n	8007b30 <phacDiscLoop_Sw_Int_Apply_PTGT+0x18c>
    {
        bPollTech = pDataParams->pPasTechPollSeq[bTechLoopIndex];
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80079be:	7b7b      	ldrb	r3, [r7, #13]
 80079c0:	4413      	add	r3, r2
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	733b      	strb	r3, [r7, #12]

        if (bPollTech > PHAC_DISCLOOP_TECH_TYPE_V)
 80079c6:	7b3b      	ldrb	r3, [r7, #12]
 80079c8:	2b04      	cmp	r3, #4
 80079ca:	f240 80ae 	bls.w	8007b2a <phacDiscLoop_Sw_Int_Apply_PTGT+0x186>
        {
            if(((bPollTech == PHAC_DISCLOOP_TECH_TYPE_18000P3M3) &&
 80079ce:	7b3b      	ldrb	r3, [r7, #12]
 80079d0:	2b05      	cmp	r3, #5
 80079d2:	d106      	bne.n	80079e2 <phacDiscLoop_Sw_Int_Apply_PTGT+0x3e>
                ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3) != PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3))
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	789b      	ldrb	r3, [r3, #2]
 80079d8:	f003 0320 	and.w	r3, r3, #32
            if(((bPollTech == PHAC_DISCLOOP_TECH_TYPE_18000P3M3) &&
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f000 80a3 	beq.w	8007b28 <phacDiscLoop_Sw_Int_Apply_PTGT+0x184>
                /* continue to check next technology if present technology is not enabled in Polling loop */
                continue;
            }

            /* Only one technology(ISO18000p3m3) enabled */
            if((bPollTech == PHAC_DISCLOOP_TECH_TYPE_18000P3M3) &&
 80079e2:	7b3b      	ldrb	r3, [r7, #12]
 80079e4:	2b05      	cmp	r3, #5
 80079e6:	d115      	bne.n	8007a14 <phacDiscLoop_Sw_Int_Apply_PTGT+0x70>
                (pDataParams->bPasPollTechCfg == PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3))
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	789b      	ldrb	r3, [r3, #2]
            if((bPollTech == PHAC_DISCLOOP_TECH_TYPE_18000P3M3) &&
 80079ec:	2b20      	cmp	r3, #32
 80079ee:	d111      	bne.n	8007a14 <phacDiscLoop_Sw_Int_Apply_PTGT+0x70>
            {
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGT;
 80079f0:	f241 33ec 	movw	r3, #5100	@ 0x13ec
 80079f4:	813b      	strh	r3, [r7, #8]
                PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_SetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_GT18000P3M3_VALUE_US, wPTGT));
 80079f6:	893b      	ldrh	r3, [r7, #8]
 80079f8:	461a      	mov	r2, r3
 80079fa:	2105      	movs	r1, #5
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f7ff f95f 	bl	8006cc0 <phacDiscLoop_Sw_SetConfig>
 8007a02:	4603      	mov	r3, r0
 8007a04:	81fb      	strh	r3, [r7, #14]
 8007a06:	89fb      	ldrh	r3, [r7, #14]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d001      	beq.n	8007a10 <phacDiscLoop_Sw_Int_Apply_PTGT+0x6c>
 8007a0c:	89fb      	ldrh	r3, [r7, #14]
 8007a0e:	e094      	b.n	8007b3a <phacDiscLoop_Sw_Int_Apply_PTGT+0x196>
                return status;
 8007a10:	89fb      	ldrh	r3, [r7, #14]
 8007a12:	e092      	b.n	8007b3a <phacDiscLoop_Sw_Int_Apply_PTGT+0x196>
            }

            /* Identify preceding technology which is enabled in the Polling loop */
            bTechIndex = bTechLoopIndex;
 8007a14:	7b7b      	ldrb	r3, [r7, #13]
 8007a16:	72fb      	strb	r3, [r7, #11]
            do
            {
                bTechIndex--;
 8007a18:	7afb      	ldrb	r3, [r7, #11]
 8007a1a:	3b01      	subs	r3, #1
 8007a1c:	72fb      	strb	r3, [r7, #11]

                /* Read preceding technology */
                bPollTech = pDataParams->pPasTechPollSeq[bTechIndex];
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a22:	7afb      	ldrb	r3, [r7, #11]
 8007a24:	4413      	add	r3, r2
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	733b      	strb	r3, [r7, #12]

                if(((bPollTech == PHAC_DISCLOOP_TECH_TYPE_A) &&
 8007a2a:	7b3b      	ldrb	r3, [r7, #12]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d105      	bne.n	8007a3c <phacDiscLoop_Sw_Int_Apply_PTGT+0x98>
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_A) == PHAC_DISCLOOP_POS_BIT_MASK_A)) ||
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	789b      	ldrb	r3, [r3, #2]
 8007a34:	f003 0301 	and.w	r3, r3, #1
                if(((bPollTech == PHAC_DISCLOOP_TECH_TYPE_A) &&
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d134      	bne.n	8007aa6 <phacDiscLoop_Sw_Int_Apply_PTGT+0x102>
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_A) == PHAC_DISCLOOP_POS_BIT_MASK_A)) ||
 8007a3c:	7b3b      	ldrb	r3, [r7, #12]
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d105      	bne.n	8007a4e <phacDiscLoop_Sw_Int_Apply_PTGT+0xaa>
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_B) &&
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_B) == PHAC_DISCLOOP_POS_BIT_MASK_B)) ||
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	789b      	ldrb	r3, [r3, #2]
 8007a46:	f003 0302 	and.w	r3, r3, #2
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_B) &&
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d12b      	bne.n	8007aa6 <phacDiscLoop_Sw_Int_Apply_PTGT+0x102>
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_B) == PHAC_DISCLOOP_POS_BIT_MASK_B)) ||
 8007a4e:	7b3b      	ldrb	r3, [r7, #12]
 8007a50:	2b02      	cmp	r3, #2
 8007a52:	d105      	bne.n	8007a60 <phacDiscLoop_Sw_Int_Apply_PTGT+0xbc>
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_F212) &&
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F212) == PHAC_DISCLOOP_POS_BIT_MASK_F212)) ||
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	789b      	ldrb	r3, [r3, #2]
 8007a58:	f003 0304 	and.w	r3, r3, #4
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_F212) &&
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d122      	bne.n	8007aa6 <phacDiscLoop_Sw_Int_Apply_PTGT+0x102>
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F212) == PHAC_DISCLOOP_POS_BIT_MASK_F212)) ||
 8007a60:	7b3b      	ldrb	r3, [r7, #12]
 8007a62:	2b03      	cmp	r3, #3
 8007a64:	d105      	bne.n	8007a72 <phacDiscLoop_Sw_Int_Apply_PTGT+0xce>
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_F424) &&
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F424) == PHAC_DISCLOOP_POS_BIT_MASK_F424)) ||
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	789b      	ldrb	r3, [r3, #2]
 8007a6a:	f003 0308 	and.w	r3, r3, #8
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_F424) &&
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d119      	bne.n	8007aa6 <phacDiscLoop_Sw_Int_Apply_PTGT+0x102>
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F424) == PHAC_DISCLOOP_POS_BIT_MASK_F424)) ||
 8007a72:	7b3b      	ldrb	r3, [r7, #12]
 8007a74:	2b04      	cmp	r3, #4
 8007a76:	d105      	bne.n	8007a84 <phacDiscLoop_Sw_Int_Apply_PTGT+0xe0>
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_V) &&
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_V) == PHAC_DISCLOOP_POS_BIT_MASK_V)) ||
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	789b      	ldrb	r3, [r3, #2]
 8007a7c:	f003 0310 	and.w	r3, r3, #16
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_V) &&
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d110      	bne.n	8007aa6 <phacDiscLoop_Sw_Int_Apply_PTGT+0x102>
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_V) == PHAC_DISCLOOP_POS_BIT_MASK_V)) ||
 8007a84:	7b3b      	ldrb	r3, [r7, #12]
 8007a86:	2b05      	cmp	r3, #5
 8007a88:	d105      	bne.n	8007a96 <phacDiscLoop_Sw_Int_Apply_PTGT+0xf2>
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_18000P3M3) &&
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3) == PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	789b      	ldrb	r3, [r3, #2]
 8007a8e:	f003 0320 	and.w	r3, r3, #32
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_18000P3M3) &&
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d107      	bne.n	8007aa6 <phacDiscLoop_Sw_Int_Apply_PTGT+0x102>
                    )
                {
                    break;
                }

                if(bTechIndex == 0U)
 8007a96:	7afb      	ldrb	r3, [r7, #11]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d101      	bne.n	8007aa0 <phacDiscLoop_Sw_Int_Apply_PTGT+0xfc>
                {
                    /* No Preceding Polling technology */
                    bPollTech = PHAC_DISCLOOP_TECH_TYPE_UNKNOWN;
 8007a9c:	2306      	movs	r3, #6
 8007a9e:	733b      	strb	r3, [r7, #12]
                }
            }while(bTechIndex != 0U);
 8007aa0:	7afb      	ldrb	r3, [r7, #11]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d1b8      	bne.n	8007a18 <phacDiscLoop_Sw_Int_Apply_PTGT+0x74>

            switch(bPollTech)
 8007aa6:	7b3b      	ldrb	r3, [r7, #12]
 8007aa8:	2b06      	cmp	r3, #6
 8007aaa:	d825      	bhi.n	8007af8 <phacDiscLoop_Sw_Int_Apply_PTGT+0x154>
 8007aac:	a201      	add	r2, pc, #4	@ (adr r2, 8007ab4 <phacDiscLoop_Sw_Int_Apply_PTGT+0x110>)
 8007aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab2:	bf00      	nop
 8007ab4:	08007ad1 	.word	0x08007ad1
 8007ab8:	08007ad9 	.word	0x08007ad9
 8007abc:	08007ae1 	.word	0x08007ae1
 8007ac0:	08007ae1 	.word	0x08007ae1
 8007ac4:	08007ae9 	.word	0x08007ae9
 8007ac8:	08007af9 	.word	0x08007af9
 8007acc:	08007af1 	.word	0x08007af1
            {
            case PHAC_DISCLOOP_TECH_TYPE_A:
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGTA;
 8007ad0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007ad4:	813b      	strh	r3, [r7, #8]
                break;
 8007ad6:	e013      	b.n	8007b00 <phacDiscLoop_Sw_Int_Apply_PTGT+0x15c>
            case PHAC_DISCLOOP_TECH_TYPE_B:
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGTB;
 8007ad8:	f640 63d8 	movw	r3, #3800	@ 0xed8
 8007adc:	813b      	strh	r3, [r7, #8]
                break;
 8007ade:	e00f      	b.n	8007b00 <phacDiscLoop_Sw_Int_Apply_PTGT+0x15c>
            case PHAC_DISCLOOP_TECH_TYPE_F212:
            case PHAC_DISCLOOP_TECH_TYPE_F424:
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGTF;
 8007ae0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007ae4:	813b      	strh	r3, [r7, #8]
                break;
 8007ae6:	e00b      	b.n	8007b00 <phacDiscLoop_Sw_Int_Apply_PTGT+0x15c>
            case PHAC_DISCLOOP_TECH_TYPE_V:
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGTV;
 8007ae8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007aec:	813b      	strh	r3, [r7, #8]
                break;
 8007aee:	e007      	b.n	8007b00 <phacDiscLoop_Sw_Int_Apply_PTGT+0x15c>
            case PHAC_DISCLOOP_TECH_TYPE_UNKNOWN:
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGT;
 8007af0:	f241 33ec 	movw	r3, #5100	@ 0x13ec
 8007af4:	813b      	strh	r3, [r7, #8]
                break;
 8007af6:	e003      	b.n	8007b00 <phacDiscLoop_Sw_Int_Apply_PTGT+0x15c>
            default: /* Preceding technology is Proprietary Technology !!! */
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGTV;
 8007af8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007afc:	813b      	strh	r3, [r7, #8]
                break;
 8007afe:	bf00      	nop
            }

            if(pDataParams->pPasTechPollSeq[bTechLoopIndex] == PHAC_DISCLOOP_TECH_TYPE_18000P3M3)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007b04:	7b7b      	ldrb	r3, [r7, #13]
 8007b06:	4413      	add	r3, r2
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	2b05      	cmp	r3, #5
 8007b0c:	d10d      	bne.n	8007b2a <phacDiscLoop_Sw_Int_Apply_PTGT+0x186>
            {
                PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_SetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_GT18000P3M3_VALUE_US, wPTGT));
 8007b0e:	893b      	ldrh	r3, [r7, #8]
 8007b10:	461a      	mov	r2, r3
 8007b12:	2105      	movs	r1, #5
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f7ff f8d3 	bl	8006cc0 <phacDiscLoop_Sw_SetConfig>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	81fb      	strh	r3, [r7, #14]
 8007b1e:	89fb      	ldrh	r3, [r7, #14]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d002      	beq.n	8007b2a <phacDiscLoop_Sw_Int_Apply_PTGT+0x186>
 8007b24:	89fb      	ldrh	r3, [r7, #14]
 8007b26:	e008      	b.n	8007b3a <phacDiscLoop_Sw_Int_Apply_PTGT+0x196>
                continue;
 8007b28:	bf00      	nop
    for (bTechLoopIndex = 1U; bTechLoopIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bTechLoopIndex++)
 8007b2a:	7b7b      	ldrb	r3, [r7, #13]
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	737b      	strb	r3, [r7, #13]
 8007b30:	7b7b      	ldrb	r3, [r7, #13]
 8007b32:	2b05      	cmp	r3, #5
 8007b34:	f67f af41 	bls.w	80079ba <phacDiscLoop_Sw_Int_Apply_PTGT+0x16>
            }
        }
    }

    return status;
 8007b38:	89fb      	ldrh	r3, [r7, #14]
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3710      	adds	r7, #16
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop

08007b44 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset>:

static phStatus_t phacDiscLoop_Sw_Int_EmvcoRfFieldReset(
                                                        phacDiscLoop_Sw_DataParams_t *pDataParams
                                                        )
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM status;

    PH_CHECK_SUCCESS_FCT(status, phhalHw_FieldOff(pDataParams->pHalDataParams));
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b50:	4618      	mov	r0, r3
 8007b52:	f005 fb35 	bl	800d1c0 <phhalHw_Pn5180_FieldOff>
 8007b56:	4603      	mov	r3, r0
 8007b58:	81fb      	strh	r3, [r7, #14]
 8007b5a:	89fb      	ldrh	r3, [r7, #14]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d001      	beq.n	8007b64 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset+0x20>
 8007b60:	89fb      	ldrh	r3, [r7, #14]
 8007b62:	e01b      	b.n	8007b9c <phacDiscLoop_Sw_Int_EmvcoRfFieldReset+0x58>

    PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b68:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 8007b6c:	2100      	movs	r1, #0
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f005 fb4a 	bl	800d208 <phhalHw_Pn5180_Wait>
 8007b74:	4603      	mov	r3, r0
 8007b76:	81fb      	strh	r3, [r7, #14]
 8007b78:	89fb      	ldrh	r3, [r7, #14]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d001      	beq.n	8007b82 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset+0x3e>
 8007b7e:	89fb      	ldrh	r3, [r7, #14]
 8007b80:	e00c      	b.n	8007b9c <phacDiscLoop_Sw_Int_EmvcoRfFieldReset+0x58>
        pDataParams->pHalDataParams,
        PHHAL_HW_TIME_MICROSECONDS,
        PH_NXPNFCRDLIB_CONFIG_EMVCO_PROP_TECH_POLL_RF_OFF_DELAY_US)
        );

    PH_CHECK_SUCCESS_FCT(status, phhalHw_FieldOn(pDataParams->pHalDataParams));
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b86:	4618      	mov	r0, r3
 8007b88:	f005 fac4 	bl	800d114 <phhalHw_Pn5180_FieldOn>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	81fb      	strh	r3, [r7, #14]
 8007b90:	89fb      	ldrh	r3, [r7, #14]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d001      	beq.n	8007b9a <phacDiscLoop_Sw_Int_EmvcoRfFieldReset+0x56>
 8007b96:	89fb      	ldrh	r3, [r7, #14]
 8007b98:	e000      	b.n	8007b9c <phacDiscLoop_Sw_Int_EmvcoRfFieldReset+0x58>

    return PH_ERR_SUCCESS;
 8007b9a:	2300      	movs	r3, #0
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <phacDiscLoop_Sw_Int_ListenMode>:

phStatus_t phacDiscLoop_Sw_Int_ListenMode(
                                          phacDiscLoop_Sw_DataParams_t *pDataParams
                                          )
{
 8007ba4:	b590      	push	{r4, r7, lr}
 8007ba6:	b087      	sub	sp, #28
 8007ba8:	af02      	add	r7, sp, #8
 8007baa:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TARGET
    phStatus_t PH_MEMLOC_REM status = PH_ERR_INTERNAL_ERROR;
 8007bac:	237f      	movs	r3, #127	@ 0x7f
 8007bae:	817b      	strh	r3, [r7, #10]
    uint8_t    PH_MEMLOC_REM bRetryCount = pDataParams->sTargetParams.bRetryCount;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8007bb6:	73fb      	strb	r3, [r7, #15]
    uint16_t   PH_MEMLOC_REM wTempMode = 0x00;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	81bb      	strh	r3, [r7, #12]

    /* get active listen cfg except F424 */
    wTempMode = pDataParams->bActLisTechCfg & 0x07U;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	799b      	ldrb	r3, [r3, #6]
 8007bc0:	f003 0307 	and.w	r3, r3, #7
 8007bc4:	81bb      	strh	r3, [r7, #12]

    /* Map Active F424 configuration with Type F bit in Autocoll */
    if(0U != (pDataParams->bActLisTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F424))
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	799b      	ldrb	r3, [r3, #6]
 8007bca:	f003 0308 	and.w	r3, r3, #8
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d003      	beq.n	8007bda <phacDiscLoop_Sw_Int_ListenMode+0x36>
    {
        wTempMode = wTempMode | PHAC_DISCLOOP_POS_BIT_MASK_F212;
 8007bd2:	89bb      	ldrh	r3, [r7, #12]
 8007bd4:	f043 0304 	orr.w	r3, r3, #4
 8007bd8:	81bb      	strh	r3, [r7, #12]
    }

    wTempMode = (uint16_t) (wTempMode << 8U);
 8007bda:	89bb      	ldrh	r3, [r7, #12]
 8007bdc:	021b      	lsls	r3, r3, #8
 8007bde:	81bb      	strh	r3, [r7, #12]

    /* get passive listen cfg except F424 */
    wTempMode = wTempMode | (pDataParams->bPasLisTechCfg & /* */ 0x07);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	795b      	ldrb	r3, [r3, #5]
 8007be4:	b21b      	sxth	r3, r3
 8007be6:	f003 0307 	and.w	r3, r3, #7
 8007bea:	b21a      	sxth	r2, r3
 8007bec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	b21b      	sxth	r3, r3
 8007bf4:	81bb      	strh	r3, [r7, #12]

    /* Map Passice F424 configuration with Type F bit in Autocoll */
    if(0U != (pDataParams->bPasLisTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F424))
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	795b      	ldrb	r3, [r3, #5]
 8007bfa:	f003 0308 	and.w	r3, r3, #8
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d003      	beq.n	8007c0a <phacDiscLoop_Sw_Int_ListenMode+0x66>
    {
        wTempMode = wTempMode | PHAC_DISCLOOP_POS_BIT_MASK_F212;
 8007c02:	89bb      	ldrh	r3, [r7, #12]
 8007c04:	f043 0304 	orr.w	r3, r3, #4
 8007c08:	81bb      	strh	r3, [r7, #12]
    }

    /* AUTOCOLL retry loop */
    do
    {
        status = phhalHw_Autocoll(
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f503 7280 	add.w	r2, r3, #256	@ 0x100
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f503 7482 	add.w	r4, r3, #260	@ 0x104
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 8007c20:	89b9      	ldrh	r1, [r7, #12]
 8007c22:	9300      	str	r3, [sp, #0]
 8007c24:	4623      	mov	r3, r4
 8007c26:	f007 fb5f 	bl	800f2e8 <phhalHw_Pn5180_Autocoll>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	817b      	strh	r3, [r7, #10]
            pDataParams->pHalDataParams,
            wTempMode,
            &pDataParams->sTargetParams.pRxBuffer,
            &pDataParams->sTargetParams.wRxBufferLen,
            &pDataParams->sTargetParams.wProtParams);
    }while(((status & PH_ERR_MASK) != PH_ERR_SUCCESS) && (bRetryCount--));
 8007c2e:	897b      	ldrh	r3, [r7, #10]
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d004      	beq.n	8007c40 <phacDiscLoop_Sw_Int_ListenMode+0x9c>
 8007c36:	7bfb      	ldrb	r3, [r7, #15]
 8007c38:	1e5a      	subs	r2, r3, #1
 8007c3a:	73fa      	strb	r2, [r7, #15]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d1e4      	bne.n	8007c0a <phacDiscLoop_Sw_Int_ListenMode+0x66>

    /* Return RF OFF error, if external RF is OFF */
    if((status & PH_ERR_MASK) == PH_ERR_EXT_RF_ERROR)
 8007c40:	897b      	ldrh	r3, [r7, #10]
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	2b10      	cmp	r3, #16
 8007c46:	d102      	bne.n	8007c4e <phacDiscLoop_Sw_Int_ListenMode+0xaa>
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_EXTERNAL_RFOFF, PH_COMP_AC_DISCLOOP);
 8007c48:	f244 0383 	movw	r3, #16515	@ 0x4083
 8007c4c:	e006      	b.n	8007c5c <phacDiscLoop_Sw_Int_ListenMode+0xb8>
    }
    else
    {
        /* Return, if error */
        PH_CHECK_SUCCESS(status);
 8007c4e:	897b      	ldrh	r3, [r7, #10]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d001      	beq.n	8007c58 <phacDiscLoop_Sw_Int_ListenMode+0xb4>
 8007c54:	897b      	ldrh	r3, [r7, #10]
 8007c56:	e001      	b.n	8007c5c <phacDiscLoop_Sw_Int_ListenMode+0xb8>
    }

    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_ACTIVATED_BY_PEER, PH_COMP_AC_DISCLOOP);
 8007c58:	f244 038f 	movw	r3, #16527	@ 0x408f
#else /* NXPBUILD__PHAC_DISCLOOP_TARGET */
    PH_UNUSED_VARIABLE(pDataParams);
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TARGET */
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3714      	adds	r7, #20
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd90      	pop	{r4, r7, pc}

08007c64 <phacDiscLoop_Sw_Int_ActivePollMode>:

phStatus_t phacDiscLoop_Sw_Int_ActivePollMode(
                                              phacDiscLoop_Sw_DataParams_t *pDataParams
                                              )
{
 8007c64:	b480      	push	{r7}
 8007c66:	b085      	sub	sp, #20
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
#if defined (NXPBUILD__PHAC_DISCLOOP_TYPEF212_P2P_ACTIVE) || defined (NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE)
    uint8_t    PH_MEMLOC_BUF   aNfcId3[10];
#endif

    /* Reset detected technologies */
    pDataParams->bDetectedTechs = 0x00;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Loop through all the supported active technologies */
    for (bIndex = 0; bIndex < PHAC_DISCLOOP_ACT_POLL_MAX_TECHS_SUPPORTED; bIndex++)
 8007c74:	2300      	movs	r3, #0
 8007c76:	73fb      	strb	r3, [r7, #15]
 8007c78:	e018      	b.n	8007cac <phacDiscLoop_Sw_Int_ActivePollMode+0x48>
    {
        switch(pDataParams->bActPollTechCfg & (PH_ON << bIndex))
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	78db      	ldrb	r3, [r3, #3]
 8007c7e:	4619      	mov	r1, r3
 8007c80:	7bfb      	ldrb	r3, [r7, #15]
 8007c82:	2201      	movs	r2, #1
 8007c84:	fa02 f303 	lsl.w	r3, r2, r3
 8007c88:	400b      	ands	r3, r1
 8007c8a:	2b04      	cmp	r3, #4
 8007c8c:	d006      	beq.n	8007c9c <phacDiscLoop_Sw_Int_ActivePollMode+0x38>
 8007c8e:	2b04      	cmp	r3, #4
 8007c90:	d806      	bhi.n	8007ca0 <phacDiscLoop_Sw_Int_ActivePollMode+0x3c>
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d006      	beq.n	8007ca4 <phacDiscLoop_Sw_Int_ActivePollMode+0x40>
 8007c96:	2b02      	cmp	r3, #2
 8007c98:	d000      	beq.n	8007c9c <phacDiscLoop_Sw_Int_ActivePollMode+0x38>
                }
#endif
                break;

            default:
                break;
 8007c9a:	e001      	b.n	8007ca0 <phacDiscLoop_Sw_Int_ActivePollMode+0x3c>
                break;
 8007c9c:	bf00      	nop
 8007c9e:	e002      	b.n	8007ca6 <phacDiscLoop_Sw_Int_ActivePollMode+0x42>
                break;
 8007ca0:	bf00      	nop
 8007ca2:	e000      	b.n	8007ca6 <phacDiscLoop_Sw_Int_ActivePollMode+0x42>
                break;
 8007ca4:	bf00      	nop
    for (bIndex = 0; bIndex < PHAC_DISCLOOP_ACT_POLL_MAX_TECHS_SUPPORTED; bIndex++)
 8007ca6:	7bfb      	ldrb	r3, [r7, #15]
 8007ca8:	3301      	adds	r3, #1
 8007caa:	73fb      	strb	r3, [r7, #15]
 8007cac:	7bfb      	ldrb	r3, [r7, #15]
 8007cae:	2b02      	cmp	r3, #2
 8007cb0:	d9e3      	bls.n	8007c7a <phacDiscLoop_Sw_Int_ActivePollMode+0x16>
        }
    }

    /* No Target present. */
    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 8007cb2:	f244 0384 	movw	r3, #16516	@ 0x4084
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3714      	adds	r7, #20
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr

08007cc2 <phacDiscLoop_Sw_Int_PollMode>:

phStatus_t phacDiscLoop_Sw_Int_PollMode(
                                        phacDiscLoop_Sw_DataParams_t *pDataParams
                                       )
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b084      	sub	sp, #16
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM status;
    uint8_t    PH_MEMLOC_REM bResolveTech;
    uint8_t    PH_MEMLOC_REM bTechType;
    uint8_t    PH_MEMLOC_REM bNumOfTechsFound = 0;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	72fb      	strb	r3, [r7, #11]

    status = PH_ERR_INVALID_PARAMETER;
 8007cce:	2321      	movs	r3, #33	@ 0x21
 8007cd0:	81fb      	strh	r3, [r7, #14]

    if(pDataParams->bPollState == PHAC_DISCLOOP_POLL_STATE_DETECTION)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	891b      	ldrh	r3, [r3, #8]
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d145      	bne.n	8007d66 <phacDiscLoop_Sw_Int_PollMode+0xa4>
    {
        if((pDataParams->bOpeMode == RD_LIB_MODE_NFC) ||
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007ce0:	2b02      	cmp	r3, #2
 8007ce2:	d004      	beq.n	8007cee <phacDiscLoop_Sw_Int_PollMode+0x2c>
           (pDataParams->bOpeMode == RD_LIB_MODE_ISO))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
        if((pDataParams->bOpeMode == RD_LIB_MODE_NFC) ||
 8007cea:	2b03      	cmp	r3, #3
 8007cec:	d110      	bne.n	8007d10 <phacDiscLoop_Sw_Int_PollMode+0x4e>
        {
            /* Perform Technology detection Activity */
            status = phacDiscLoop_Sw_Int_TechDetectActivity(
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	7919      	ldrb	r1, [r3, #4]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	789a      	ldrb	r2, [r3, #2]
 8007cf6:	f107 030b 	add.w	r3, r7, #11
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 f976 	bl	8007fec <phacDiscLoop_Sw_Int_TechDetectActivity>
 8007d00:	4603      	mov	r3, r0
 8007d02:	81fb      	strh	r3, [r7, #14]
                pDataParams,
                pDataParams->bPasPollBailOut,
                pDataParams->bPasPollTechCfg,
                &bNumOfTechsFound);
            /* Return if status is aborted. */
            PH_CHECK_ABORT(status);
 8007d04:	89fb      	ldrh	r3, [r7, #14]
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	2b12      	cmp	r3, #18
 8007d0a:	d116      	bne.n	8007d3a <phacDiscLoop_Sw_Int_PollMode+0x78>
 8007d0c:	89fb      	ldrh	r3, [r7, #14]
 8007d0e:	e092      	b.n	8007e36 <phacDiscLoop_Sw_Int_PollMode+0x174>
        }
        else if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d10f      	bne.n	8007d3a <phacDiscLoop_Sw_Int_PollMode+0x78>
        {
            /* Perform Technology detection Activity */
            status = phacDiscLoop_Sw_Int_EmvcoTechDetectActivity(
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	789b      	ldrb	r3, [r3, #2]
 8007d1e:	f107 020b 	add.w	r2, r7, #11
 8007d22:	4619      	mov	r1, r3
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 fa95 	bl	8008254 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	81fb      	strh	r3, [r7, #14]
                pDataParams,
                pDataParams->bPasPollTechCfg,
                &bNumOfTechsFound);
            /* Return if status is aborted. */
            PH_CHECK_ABORT(status);
 8007d2e:	89fb      	ldrh	r3, [r7, #14]
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	2b12      	cmp	r3, #18
 8007d34:	d101      	bne.n	8007d3a <phacDiscLoop_Sw_Int_PollMode+0x78>
 8007d36:	89fb      	ldrh	r3, [r7, #14]
 8007d38:	e07d      	b.n	8007e36 <phacDiscLoop_Sw_Int_PollMode+0x174>
        else
        {
            ;/* Do Nothing */
        }

        if ((0U != (pDataParams->bLpcdEnabled)) &&
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	7fdb      	ldrb	r3, [r3, #31]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d00a      	beq.n	8007d58 <phacDiscLoop_Sw_Int_PollMode+0x96>
           (0U != (pDataParams->bPasPollTechCfg)) &&
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	789b      	ldrb	r3, [r3, #2]
        if ((0U != (pDataParams->bLpcdEnabled)) &&
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d006      	beq.n	8007d58 <phacDiscLoop_Sw_Int_PollMode+0x96>
           ((status & PH_ERR_MASK) == PHAC_DISCLOOP_NO_TECH_DETECTED))
 8007d4a:	89fb      	ldrh	r3, [r7, #14]
 8007d4c:	b2db      	uxtb	r3, r3
           (0U != (pDataParams->bPasPollTechCfg)) &&
 8007d4e:	2b84      	cmp	r3, #132	@ 0x84
 8007d50:	d102      	bne.n	8007d58 <phacDiscLoop_Sw_Int_PollMode+0x96>
        {
            /* LPCD is success but card presence does not exist/errors */
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_LPCD_NO_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 8007d52:	f244 0386 	movw	r3, #16518	@ 0x4086
 8007d56:	e06e      	b.n	8007e36 <phacDiscLoop_Sw_Int_PollMode+0x174>
        }

        if((status & PH_ERR_MASK) == PHAC_DISCLOOP_TECH_DETECTED)
 8007d58:	89fb      	ldrh	r3, [r7, #14]
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	2b87      	cmp	r3, #135	@ 0x87
 8007d5e:	d102      	bne.n	8007d66 <phacDiscLoop_Sw_Int_PollMode+0xa4>
        {
            pDataParams->bPollState = PHAC_DISCLOOP_POLL_STATE_COLLISION_RESOLUTION;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2202      	movs	r2, #2
 8007d64:	811a      	strh	r2, [r3, #8]
        }
    }

    /* Go for collision resolution if single tech found */
    if(pDataParams->bPollState == PHAC_DISCLOOP_POLL_STATE_COLLISION_RESOLUTION)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	891b      	ldrh	r3, [r3, #8]
 8007d6a:	2b02      	cmp	r3, #2
 8007d6c:	d145      	bne.n	8007dfa <phacDiscLoop_Sw_Int_PollMode+0x138>
    {
        /* Get Technology to be resolved */
        bResolveTech = pDataParams->bDetectedTechs & pDataParams->bPasPollTechCfg;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	789b      	ldrb	r3, [r3, #2]
 8007d78:	4013      	ands	r3, r2
 8007d7a:	737b      	strb	r3, [r7, #13]
        if(0U != (bResolveTech))
 8007d7c:	7b7b      	ldrb	r3, [r7, #13]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00a      	beq.n	8007d98 <phacDiscLoop_Sw_Int_PollMode+0xd6>
        {
            if(0U != (bResolveTech & (uint8_t)(bResolveTech - 1U)))
 8007d82:	7b7b      	ldrb	r3, [r7, #13]
 8007d84:	3b01      	subs	r3, #1
 8007d86:	b2da      	uxtb	r2, r3
 8007d88:	7b7b      	ldrb	r3, [r7, #13]
 8007d8a:	4013      	ands	r3, r2
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d005      	beq.n	8007d9e <phacDiscLoop_Sw_Int_PollMode+0xdc>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8007d92:	f244 0321 	movw	r3, #16417	@ 0x4021
 8007d96:	e04e      	b.n	8007e36 <phacDiscLoop_Sw_Int_PollMode+0x174>
            }
        }
        else
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8007d98:	f244 0321 	movw	r3, #16417	@ 0x4021
 8007d9c:	e04b      	b.n	8007e36 <phacDiscLoop_Sw_Int_PollMode+0x174>
        }

        PHAC_DISCLOOP_GET_BIT_POS(bResolveTech, bTechType);
 8007d9e:	2300      	movs	r3, #0
 8007da0:	733b      	strb	r3, [r7, #12]
 8007da2:	e005      	b.n	8007db0 <phacDiscLoop_Sw_Int_PollMode+0xee>
 8007da4:	7b7b      	ldrb	r3, [r7, #13]
 8007da6:	085b      	lsrs	r3, r3, #1
 8007da8:	737b      	strb	r3, [r7, #13]
 8007daa:	7b3b      	ldrb	r3, [r7, #12]
 8007dac:	3301      	adds	r3, #1
 8007dae:	733b      	strb	r3, [r7, #12]
 8007db0:	7b7b      	ldrb	r3, [r7, #13]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d1f6      	bne.n	8007da4 <phacDiscLoop_Sw_Int_PollMode+0xe2>
 8007db6:	7b3b      	ldrb	r3, [r7, #12]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d101      	bne.n	8007dc0 <phacDiscLoop_Sw_Int_PollMode+0xfe>
 8007dbc:	237f      	movs	r3, #127	@ 0x7f
 8007dbe:	e03a      	b.n	8007e36 <phacDiscLoop_Sw_Int_PollMode+0x174>

        status = phacDiscLoop_Sw_Int_ColsnReslnActivity(pDataParams, (bTechType -  (uint8_t)1U));
 8007dc0:	7b3b      	ldrb	r3, [r7, #12]
 8007dc2:	3b01      	subs	r3, #1
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 fbb7 	bl	800853c <phacDiscLoop_Sw_Int_ColsnReslnActivity>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	81fb      	strh	r3, [r7, #14]
        if((status & PH_ERR_MASK) == PHAC_DISCLOOP_DEVICE_RESOLVED)
 8007dd2:	89fb      	ldrh	r3, [r7, #14]
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	2b89      	cmp	r3, #137	@ 0x89
 8007dd8:	d109      	bne.n	8007dee <phacDiscLoop_Sw_Int_PollMode+0x12c>
        {
                /* Activation */
                status = phacDiscLoop_Sw_Int_ActivateDevice(pDataParams, (bTechType - (uint8_t)1U), (uint8_t)0x00U);
 8007dda:	7b3b      	ldrb	r3, [r7, #12]
 8007ddc:	3b01      	subs	r3, #1
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	2200      	movs	r2, #0
 8007de2:	4619      	mov	r1, r3
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 fbe5 	bl	80085b4 <phacDiscLoop_Sw_Int_ActivateDevice>
 8007dea:	4603      	mov	r3, r0
 8007dec:	81fb      	strh	r3, [r7, #14]
        }
        /* Return if status is aborted. */
        PH_CHECK_ABORT(status);
 8007dee:	89fb      	ldrh	r3, [r7, #14]
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	2b12      	cmp	r3, #18
 8007df4:	d101      	bne.n	8007dfa <phacDiscLoop_Sw_Int_PollMode+0x138>
 8007df6:	89fb      	ldrh	r3, [r7, #14]
 8007df8:	e01d      	b.n	8007e36 <phacDiscLoop_Sw_Int_PollMode+0x174>
    }
    if(pDataParams->bPollState == PHAC_DISCLOOP_POLL_STATE_REMOVAL)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	891b      	ldrh	r3, [r3, #8]
 8007dfe:	2b03      	cmp	r3, #3
 8007e00:	d109      	bne.n	8007e16 <phacDiscLoop_Sw_Int_PollMode+0x154>
    {
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d104      	bne.n	8007e16 <phacDiscLoop_Sw_Int_PollMode+0x154>
        {
            status = phacDiscLoop_Sw_Int_EmvcoRemovalProcedure(pDataParams);
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 f816 	bl	8007e3e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure>
 8007e12:	4603      	mov	r3, r0
 8007e14:	81fb      	strh	r3, [r7, #14]
        }
    }
    return PH_ADD_COMPCODE(status, PH_COMP_AC_DISCLOOP);
 8007e16:	89fb      	ldrh	r3, [r7, #14]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00b      	beq.n	8007e34 <phacDiscLoop_Sw_Int_PollMode+0x172>
 8007e1c:	89fb      	ldrh	r3, [r7, #14]
 8007e1e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d106      	bne.n	8007e34 <phacDiscLoop_Sw_Int_PollMode+0x172>
 8007e26:	89fb      	ldrh	r3, [r7, #14]
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	e000      	b.n	8007e36 <phacDiscLoop_Sw_Int_PollMode+0x174>
 8007e34:	89fb      	ldrh	r3, [r7, #14]
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3710      	adds	r7, #16
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}

08007e3e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure>:

phStatus_t phacDiscLoop_Sw_Int_EmvcoRemovalProcedure(
                                                     phacDiscLoop_Sw_DataParams_t * pDataParams
                                                     )
{
 8007e3e:	b580      	push	{r7, lr}
 8007e40:	b086      	sub	sp, #24
 8007e42:	af02      	add	r7, sp, #8
 8007e44:	6078      	str	r0, [r7, #4]
#if (defined NXPBUILD__PHAC_DISCLOOP_TYPEB_I3P4B_TAGS) && (defined NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS)

    phStatus_t PH_MEMLOC_REM   status;
    uint8_t    PH_MEMLOC_COUNT bPollingCount = 0;
 8007e46:	2300      	movs	r3, #0
 8007e48:	737b      	strb	r3, [r7, #13]

    PH_CHECK_SUCCESS_FCT(status, phhalHw_FieldOff(pDataParams->pHalDataParams));
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f005 f9b6 	bl	800d1c0 <phhalHw_Pn5180_FieldOff>
 8007e54:	4603      	mov	r3, r0
 8007e56:	81fb      	strh	r3, [r7, #14]
 8007e58:	89fb      	ldrh	r3, [r7, #14]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d001      	beq.n	8007e62 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x24>
 8007e5e:	89fb      	ldrh	r3, [r7, #14]
 8007e60:	e0bf      	b.n	8007fe2 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>

    PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e66:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 8007e6a:	2100      	movs	r1, #0
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f005 f9cb 	bl	800d208 <phhalHw_Pn5180_Wait>
 8007e72:	4603      	mov	r3, r0
 8007e74:	81fb      	strh	r3, [r7, #14]
 8007e76:	89fb      	ldrh	r3, [r7, #14]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d001      	beq.n	8007e80 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x42>
 8007e7c:	89fb      	ldrh	r3, [r7, #14]
 8007e7e:	e0b0      	b.n	8007fe2 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
        PHHAL_HW_TIME_MICROSECONDS,
        PH_NXPNFCRDLIB_CONFIG_EMVCO_FIELD_OFF_DELAY_US)
        );

    /* Set poll state to Detection */
    pDataParams->bPollState = PHAC_DISCLOOP_POLL_STATE_DETECTION;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	811a      	strh	r2, [r3, #8]

    if(PHAC_DISCLOOP_CHECK_ANDMASK(pDataParams->bDetectedTechs, PHAC_DISCLOOP_POS_BIT_MASK_A))
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007e8c:	f003 0301 	and.w	r3, r3, #1
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d054      	beq.n	8007f3e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x100>
    {
        pDataParams->bDetectedTechs = 0x00;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

        PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ea0:	2101      	movs	r1, #1
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f004 fcee 	bl	800c884 <phhalHw_Pn5180_ApplyProtocolSettings>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	81fb      	strh	r3, [r7, #14]
 8007eac:	89fb      	ldrh	r3, [r7, #14]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d001      	beq.n	8007eb6 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x78>
 8007eb2:	89fb      	ldrh	r3, [r7, #14]
 8007eb4:	e095      	b.n	8007fe2 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
            pDataParams->pHalDataParams,
            PHHAL_HW_CARDTYPE_ISO14443A)
            );

        /* Perform Field ON after Apply protocol settings. */
        PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_RfcaOff_FieldOn(pDataParams));
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 fbba 	bl	8008630 <phacDiscLoop_Sw_Int_RfcaOff_FieldOn>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	81fb      	strh	r3, [r7, #14]
 8007ec0:	89fb      	ldrh	r3, [r7, #14]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d037      	beq.n	8007f36 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0xf8>
 8007ec6:	89fb      	ldrh	r3, [r7, #14]
 8007ec8:	e08b      	b.n	8007fe2 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>

        while(bPollingCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_REMOVAL_RETRY_COUNT)
        {
            /* Apply Guard time. */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	8a1b      	ldrh	r3, [r3, #16]
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	2135      	movs	r1, #53	@ 0x35
 8007ed6:	f005 fa1b 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8007eda:	4603      	mov	r3, r0
 8007edc:	81fb      	strh	r3, [r7, #14]
 8007ede:	89fb      	ldrh	r3, [r7, #14]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d001      	beq.n	8007ee8 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0xaa>
 8007ee4:	89fb      	ldrh	r3, [r7, #14]
 8007ee6:	e07c      	b.n	8007fe2 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
                pDataParams->pHalDataParams,
                PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
                pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_A]));

            status = phpalI14443p3a_WakeUpA(
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	335e      	adds	r3, #94	@ 0x5e
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	4610      	mov	r0, r2
 8007ef4:	f00a ff3b 	bl	8012d6e <phpalI14443p3a_Sw_WakeUpA>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	81fb      	strh	r3, [r7, #14]
                pDataParams->pPal1443p3aDataParams,
                pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aAtqa);
            if ((status & PH_ERR_MASK) != PH_ERR_IO_TIMEOUT)
 8007efc:	89fb      	ldrh	r3, [r7, #14]
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d015      	beq.n	8007f30 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0xf2>
            {
                /* Return if status is aborted. */
                PH_CHECK_ABORT(status);
 8007f04:	89fb      	ldrh	r3, [r7, #14]
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	2b12      	cmp	r3, #18
 8007f0a:	d101      	bne.n	8007f10 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0xd2>
 8007f0c:	89fb      	ldrh	r3, [r7, #14]
 8007f0e:	e068      	b.n	8007fe2 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>

                PH_CHECK_ABORT_FCT(status, phpalI14443p3a_HaltA(pDataParams->pPal1443p3aDataParams));
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f14:	4618      	mov	r0, r3
 8007f16:	f00a ff39 	bl	8012d8c <phpalI14443p3a_Sw_HaltA>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	81fb      	strh	r3, [r7, #14]
 8007f1e:	89fb      	ldrh	r3, [r7, #14]
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	2b12      	cmp	r3, #18
 8007f24:	d101      	bne.n	8007f2a <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0xec>
 8007f26:	89fb      	ldrh	r3, [r7, #14]
 8007f28:	e05b      	b.n	8007fe2 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
                bPollingCount = 0;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	737b      	strb	r3, [r7, #13]
 8007f2e:	e002      	b.n	8007f36 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0xf8>
            }
            else
            {
                bPollingCount++;
 8007f30:	7b7b      	ldrb	r3, [r7, #13]
 8007f32:	3301      	adds	r3, #1
 8007f34:	737b      	strb	r3, [r7, #13]
        while(bPollingCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_REMOVAL_RETRY_COUNT)
 8007f36:	7b7b      	ldrb	r3, [r7, #13]
 8007f38:	2b02      	cmp	r3, #2
 8007f3a:	d9c6      	bls.n	8007eca <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x8c>
 8007f3c:	e04a      	b.n	8007fd4 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x196>
            }
        }/* while(bPollingCount < Max_Retry_Count) */
    }
    else
    {
        pDataParams->bDetectedTechs = 0x00;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

        PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f4a:	2102      	movs	r1, #2
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f004 fc99 	bl	800c884 <phhalHw_Pn5180_ApplyProtocolSettings>
 8007f52:	4603      	mov	r3, r0
 8007f54:	81fb      	strh	r3, [r7, #14]
 8007f56:	89fb      	ldrh	r3, [r7, #14]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d001      	beq.n	8007f60 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x122>
 8007f5c:	89fb      	ldrh	r3, [r7, #14]
 8007f5e:	e040      	b.n	8007fe2 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
            pDataParams->pHalDataParams,
            PHHAL_HW_CARDTYPE_ISO14443B)
            );

        /* Perform Field ON after Apply protocol settings. */
        PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_RfcaOff_FieldOn(pDataParams));
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 fb65 	bl	8008630 <phacDiscLoop_Sw_Int_RfcaOff_FieldOn>
 8007f66:	4603      	mov	r3, r0
 8007f68:	81fb      	strh	r3, [r7, #14]
 8007f6a:	89fb      	ldrh	r3, [r7, #14]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d02e      	beq.n	8007fce <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x190>
 8007f70:	89fb      	ldrh	r3, [r7, #14]
 8007f72:	e036      	b.n	8007fe2 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>

        while(bPollingCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_REMOVAL_RETRY_COUNT)
        {
            /* Apply Guard time. */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	8a5b      	ldrh	r3, [r3, #18]
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	2135      	movs	r1, #53	@ 0x35
 8007f80:	f005 f9c6 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8007f84:	4603      	mov	r3, r0
 8007f86:	81fb      	strh	r3, [r7, #14]
 8007f88:	89fb      	ldrh	r3, [r7, #14]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d001      	beq.n	8007f92 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x154>
 8007f8e:	89fb      	ldrh	r3, [r7, #14]
 8007f90:	e027      	b.n	8007fe2 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
                pDataParams->pHalDataParams,
                PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
                pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_B]));

            status = phpalI14443p3b_WakeUpB(
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	33a2      	adds	r3, #162	@ 0xa2
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	32af      	adds	r2, #175	@ 0xaf
 8007f9e:	9201      	str	r2, [sp, #4]
 8007fa0:	9300      	str	r3, [sp, #0]
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	2100      	movs	r1, #0
 8007fa8:	f00b fd73 	bl	8013a92 <phpalI14443p3b_Sw_WakeUpB>
 8007fac:	4603      	mov	r3, r0
 8007fae:	81fb      	strh	r3, [r7, #14]
                0,
                0,
                0,
                pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].aAtqB,
                &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].bAtqBLength);
            if ((status & PH_ERR_MASK) != PH_ERR_IO_TIMEOUT)
 8007fb0:	89fb      	ldrh	r3, [r7, #14]
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d007      	beq.n	8007fc8 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x18a>
            {
                bPollingCount = 0;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	737b      	strb	r3, [r7, #13]

                /* Return if status is aborted. */
                PH_CHECK_ABORT(status);
 8007fbc:	89fb      	ldrh	r3, [r7, #14]
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	2b12      	cmp	r3, #18
 8007fc2:	d104      	bne.n	8007fce <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x190>
 8007fc4:	89fb      	ldrh	r3, [r7, #14]
 8007fc6:	e00c      	b.n	8007fe2 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
            }
            else
            {
                bPollingCount++;
 8007fc8:	7b7b      	ldrb	r3, [r7, #13]
 8007fca:	3301      	adds	r3, #1
 8007fcc:	737b      	strb	r3, [r7, #13]
        while(bPollingCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_REMOVAL_RETRY_COUNT)
 8007fce:	7b7b      	ldrb	r3, [r7, #13]
 8007fd0:	2b02      	cmp	r3, #2
 8007fd2:	d9cf      	bls.n	8007f74 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x136>
            }
        }/* while(bPollingCount < Max_Retry_Count) */
    }/* else */
    if ((status & PH_ERR_MASK) != PH_ERR_IO_TIMEOUT)
 8007fd4:	89fb      	ldrh	r3, [r7, #14]
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d001      	beq.n	8007fe0 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a2>
    {
        return status;
 8007fdc:	89fb      	ldrh	r3, [r7, #14]
 8007fde:	e000      	b.n	8007fe2 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
    }
    return PH_ERR_SUCCESS;
 8007fe0:	2300      	movs	r3, #0
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
	...

08007fec <phacDiscLoop_Sw_Int_TechDetectActivity>:
                                                  phacDiscLoop_Sw_DataParams_t *pDataParams,
                                                  uint8_t bPasPollBailOut,
                                                  uint8_t bDetectConfig,
                                                  uint8_t* pNumOfTechsDetect
                                                  )
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b086      	sub	sp, #24
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	607b      	str	r3, [r7, #4]
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	72fb      	strb	r3, [r7, #11]
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	72bb      	strb	r3, [r7, #10]
    phStatus_t PH_MEMLOC_REM   status = PHAC_DISCLOOP_NO_TECH_DETECTED;
 8007ffe:	2384      	movs	r3, #132	@ 0x84
 8008000:	82fb      	strh	r3, [r7, #22]
    uint8_t    PH_MEMLOC_COUNT bTechLoopIndex;
    uint8_t    PH_MEMLOC_COUNT bTechIndex;
    uint8_t    PH_MEMLOC_REM   bNumOfTechsFound = 0;
 8008002:	2300      	movs	r3, #0
 8008004:	753b      	strb	r3, [r7, #20]
    uint8_t    PH_MEMLOC_REM   bTechTypeF_Detected = PH_OFF;
 8008006:	2300      	movs	r3, #0
 8008008:	74fb      	strb	r3, [r7, #19]
    uint16_t   PH_MEMLOC_REM   wIntFieldStatus;

    pDataParams->bDetectedTechs = 0x00;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2200      	movs	r2, #0
 800800e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    pDataParams->bNumOfCards = 0x00;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2200      	movs	r2, #0
 8008016:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    /* Apply Proprietary Technology Guard Time(PTGT) if Proprietary Technology Poll enabled */
    status = phacDiscLoop_Sw_Int_Apply_PTGT(pDataParams);
 800801a:	68f8      	ldr	r0, [r7, #12]
 800801c:	f7ff fcc2 	bl	80079a4 <phacDiscLoop_Sw_Int_Apply_PTGT>
 8008020:	4603      	mov	r3, r0
 8008022:	82fb      	strh	r3, [r7, #22]
    PH_CHECK_SUCCESS(status);
 8008024:	8afb      	ldrh	r3, [r7, #22]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d001      	beq.n	800802e <phacDiscLoop_Sw_Int_TechDetectActivity+0x42>
 800802a:	8afb      	ldrh	r3, [r7, #22]
 800802c:	e109      	b.n	8008242 <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>

    /* Poll for requested NFC-Tech Type presence. */
    for (bTechLoopIndex = 0; bTechLoopIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bTechLoopIndex++)
 800802e:	2300      	movs	r3, #0
 8008030:	757b      	strb	r3, [r7, #21]
 8008032:	e0e6      	b.n	8008202 <phacDiscLoop_Sw_Int_TechDetectActivity+0x216>
    {
        /* In NFC mode, poll proprietary technologies only if NFC technologies are not detected */
        if((pDataParams->bOpeMode == RD_LIB_MODE_NFC) && (0U != bNumOfTechsFound)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800803a:	2b02      	cmp	r3, #2
 800803c:	d106      	bne.n	800804c <phacDiscLoop_Sw_Int_TechDetectActivity+0x60>
 800803e:	7d3b      	ldrb	r3, [r7, #20]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d003      	beq.n	800804c <phacDiscLoop_Sw_Int_TechDetectActivity+0x60>
           && (bTechLoopIndex == PHAC_DISCLOOP_POLL_MAX_NFC_TECHS_SUPPORTED))
 8008044:	7d7b      	ldrb	r3, [r7, #21]
 8008046:	2b05      	cmp	r3, #5
 8008048:	f000 80e0 	beq.w	800820c <phacDiscLoop_Sw_Int_TechDetectActivity+0x220>
        {
            break;
        }

        bTechIndex = pDataParams->pPasTechPollSeq[bTechLoopIndex];
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008050:	7d7b      	ldrb	r3, [r7, #21]
 8008052:	4413      	add	r3, r2
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	74bb      	strb	r3, [r7, #18]

        if (((bTechIndex == PHAC_DISCLOOP_TECH_TYPE_F212) || (bTechIndex == PHAC_DISCLOOP_TECH_TYPE_F424))
 8008058:	7cbb      	ldrb	r3, [r7, #18]
 800805a:	2b02      	cmp	r3, #2
 800805c:	d002      	beq.n	8008064 <phacDiscLoop_Sw_Int_TechDetectActivity+0x78>
 800805e:	7cbb      	ldrb	r3, [r7, #18]
 8008060:	2b03      	cmp	r3, #3
 8008062:	d103      	bne.n	800806c <phacDiscLoop_Sw_Int_TechDetectActivity+0x80>
            && (bTechTypeF_Detected == PH_ON))
 8008064:	7cfb      	ldrb	r3, [r7, #19]
 8008066:	2b01      	cmp	r3, #1
 8008068:	f000 80c7 	beq.w	80081fa <phacDiscLoop_Sw_Int_TechDetectActivity+0x20e>
        {
            continue;
        }

        if (0U != (bDetectConfig & (PH_ON << bTechIndex)))
 800806c:	7aba      	ldrb	r2, [r7, #10]
 800806e:	7cbb      	ldrb	r3, [r7, #18]
 8008070:	fa22 f303 	lsr.w	r3, r2, r3
 8008074:	f003 0301 	and.w	r3, r3, #1
 8008078:	2b00      	cmp	r3, #0
 800807a:	f000 80bf 	beq.w	80081fc <phacDiscLoop_Sw_Int_TechDetectActivity+0x210>
        {
            /* Get Config to check the internal Field On. */
            status = phhalHw_GetConfig(
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008082:	f107 0210 	add.w	r2, r7, #16
 8008086:	215f      	movs	r1, #95	@ 0x5f
 8008088:	4618      	mov	r0, r3
 800808a:	f006 fd8f 	bl	800ebac <phhalHw_Pn5180_GetConfig>
 800808e:	4603      	mov	r3, r0
 8008090:	82fb      	strh	r3, [r7, #22]
                pDataParams->pHalDataParams,
                PHHAL_HW_CONFIG_INT_RF_ON,
                &wIntFieldStatus);
            PH_CHECK_SUCCESS(status);
 8008092:	8afb      	ldrh	r3, [r7, #22]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d001      	beq.n	800809c <phacDiscLoop_Sw_Int_TechDetectActivity+0xb0>
 8008098:	8afb      	ldrh	r3, [r7, #22]
 800809a:	e0d2      	b.n	8008242 <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>

            if (wIntFieldStatus == PH_ON)
 800809c:	8a3b      	ldrh	r3, [r7, #16]
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d123      	bne.n	80080ea <phacDiscLoop_Sw_Int_TechDetectActivity+0xfe>
            {
                if (((uint8_t)PHAC_DISCLOOP_TECH_TYPE_F212 == bTechIndex) ||
 80080a2:	7cbb      	ldrb	r3, [r7, #18]
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	d002      	beq.n	80080ae <phacDiscLoop_Sw_Int_TechDetectActivity+0xc2>
 80080a8:	7cbb      	ldrb	r3, [r7, #18]
 80080aa:	2b03      	cmp	r3, #3
 80080ac:	d10b      	bne.n	80080c6 <phacDiscLoop_Sw_Int_TechDetectActivity+0xda>
                    ((uint8_t)PHAC_DISCLOOP_TECH_TYPE_F424 ==  bTechIndex))
                {
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
                    PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_Config_GTF(pDataParams, bTechIndex));
 80080ae:	7cbb      	ldrb	r3, [r7, #18]
 80080b0:	4619      	mov	r1, r3
 80080b2:	68f8      	ldr	r0, [r7, #12]
 80080b4:	f002 f874 	bl	800a1a0 <phacDiscLoop_Sw_Int_Config_GTF>
 80080b8:	4603      	mov	r3, r0
 80080ba:	82fb      	strh	r3, [r7, #22]
 80080bc:	8afb      	ldrh	r3, [r7, #22]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d013      	beq.n	80080ea <phacDiscLoop_Sw_Int_TechDetectActivity+0xfe>
 80080c2:	8afb      	ldrh	r3, [r7, #22]
 80080c4:	e0bd      	b.n	8008242 <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */
                }
                else
                {
                    /* Apply Guard time. */
                    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80080ca:	7cba      	ldrb	r2, [r7, #18]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	3208      	adds	r2, #8
 80080d0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80080d4:	461a      	mov	r2, r3
 80080d6:	2135      	movs	r1, #53	@ 0x35
 80080d8:	f005 f91a 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 80080dc:	4603      	mov	r3, r0
 80080de:	82fb      	strh	r3, [r7, #22]
 80080e0:	8afb      	ldrh	r3, [r7, #22]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d001      	beq.n	80080ea <phacDiscLoop_Sw_Int_TechDetectActivity+0xfe>
 80080e6:	8afb      	ldrh	r3, [r7, #22]
 80080e8:	e0ab      	b.n	8008242 <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
                        pDataParams->waPasPollGTimeUs[bTechIndex]));
                }
            }

            /* Apply Protocol Setting for Selected Tech  */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(pDataParams->pHalDataParams,
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80080ee:	7cbb      	ldrb	r3, [r7, #18]
 80080f0:	4956      	ldr	r1, [pc, #344]	@ (800824c <phacDiscLoop_Sw_Int_TechDetectActivity+0x260>)
 80080f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	4619      	mov	r1, r3
 80080fa:	4610      	mov	r0, r2
 80080fc:	f004 fbc2 	bl	800c884 <phhalHw_Pn5180_ApplyProtocolSettings>
 8008100:	4603      	mov	r3, r0
 8008102:	82fb      	strh	r3, [r7, #22]
 8008104:	8afb      	ldrh	r3, [r7, #22]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d001      	beq.n	800810e <phacDiscLoop_Sw_Int_TechDetectActivity+0x122>
 800810a:	8afb      	ldrh	r3, [r7, #22]
 800810c:	e099      	b.n	8008242 <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
                (uint8_t)(gPasTechTypeMapTable[bTechIndex] & 0xFFU)));

            /* Perform I-RFCA and Switch on RF Field after Apply protocol settings, if in NFC and ISO mode. */
            PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_FieldOn(pDataParams));
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f000 fab8 	bl	8008684 <phacDiscLoop_Sw_Int_FieldOn>
 8008114:	4603      	mov	r3, r0
 8008116:	82fb      	strh	r3, [r7, #22]
 8008118:	8afb      	ldrh	r3, [r7, #22]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d001      	beq.n	8008122 <phacDiscLoop_Sw_Int_TechDetectActivity+0x136>
 800811e:	8afb      	ldrh	r3, [r7, #22]
 8008120:	e08f      	b.n	8008242 <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>

            if (wIntFieldStatus == PH_OFF)
 8008122:	8a3b      	ldrh	r3, [r7, #16]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d123      	bne.n	8008170 <phacDiscLoop_Sw_Int_TechDetectActivity+0x184>
            {
                if (((uint8_t) PHAC_DISCLOOP_TECH_TYPE_F212 ==  bTechIndex) ||
 8008128:	7cbb      	ldrb	r3, [r7, #18]
 800812a:	2b02      	cmp	r3, #2
 800812c:	d002      	beq.n	8008134 <phacDiscLoop_Sw_Int_TechDetectActivity+0x148>
 800812e:	7cbb      	ldrb	r3, [r7, #18]
 8008130:	2b03      	cmp	r3, #3
 8008132:	d10b      	bne.n	800814c <phacDiscLoop_Sw_Int_TechDetectActivity+0x160>
                    ((uint8_t) PHAC_DISCLOOP_TECH_TYPE_F424 ==  bTechIndex))
                {
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
                    PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_Config_GTF(pDataParams, bTechIndex));
 8008134:	7cbb      	ldrb	r3, [r7, #18]
 8008136:	4619      	mov	r1, r3
 8008138:	68f8      	ldr	r0, [r7, #12]
 800813a:	f002 f831 	bl	800a1a0 <phacDiscLoop_Sw_Int_Config_GTF>
 800813e:	4603      	mov	r3, r0
 8008140:	82fb      	strh	r3, [r7, #22]
 8008142:	8afb      	ldrh	r3, [r7, #22]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d013      	beq.n	8008170 <phacDiscLoop_Sw_Int_TechDetectActivity+0x184>
 8008148:	8afb      	ldrh	r3, [r7, #22]
 800814a:	e07a      	b.n	8008242 <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */
                }
                else
                {
                    /* Apply Guard time. */
                    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008150:	7cba      	ldrb	r2, [r7, #18]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	3208      	adds	r2, #8
 8008156:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800815a:	461a      	mov	r2, r3
 800815c:	2135      	movs	r1, #53	@ 0x35
 800815e:	f005 f8d7 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8008162:	4603      	mov	r3, r0
 8008164:	82fb      	strh	r3, [r7, #22]
 8008166:	8afb      	ldrh	r3, [r7, #22]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d001      	beq.n	8008170 <phacDiscLoop_Sw_Int_TechDetectActivity+0x184>
 800816c:	8afb      	ldrh	r3, [r7, #22]
 800816e:	e068      	b.n	8008242 <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
                        pDataParams->waPasPollGTimeUs[bTechIndex]));
                }
            }

            /* Perform Tech detection. */
            status = pfDetTechs[bTechIndex](pDataParams);
 8008170:	7cbb      	ldrb	r3, [r7, #18]
 8008172:	4a37      	ldr	r2, [pc, #220]	@ (8008250 <phacDiscLoop_Sw_Int_TechDetectActivity+0x264>)
 8008174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008178:	68f8      	ldr	r0, [r7, #12]
 800817a:	4798      	blx	r3
 800817c:	4603      	mov	r3, r0
 800817e:	82fb      	strh	r3, [r7, #22]

            if ((status & PH_ERR_MASK) == PHAC_DISCLOOP_TECH_DETECTED)
 8008180:	8afb      	ldrh	r3, [r7, #22]
 8008182:	b2db      	uxtb	r3, r3
 8008184:	2b87      	cmp	r3, #135	@ 0x87
 8008186:	d123      	bne.n	80081d0 <phacDiscLoop_Sw_Int_TechDetectActivity+0x1e4>
            {
                /*Set the corresponding detected bit. */
                pDataParams->bDetectedTechs |= PH_ON << bTechIndex;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 800818e:	7cbb      	ldrb	r3, [r7, #18]
 8008190:	2101      	movs	r1, #1
 8008192:	fa01 f303 	lsl.w	r3, r1, r3
 8008196:	b2db      	uxtb	r3, r3
 8008198:	4313      	orrs	r3, r2
 800819a:	b2da      	uxtb	r2, r3
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                bNumOfTechsFound++;
 80081a2:	7d3b      	ldrb	r3, [r7, #20]
 80081a4:	3301      	adds	r3, #1
 80081a6:	753b      	strb	r3, [r7, #20]
                /* Since Device detected at 212 Baud, Skip polling at 424 */
                if((0U != ((pDataParams->bDetectedTechs & PHAC_DISCLOOP_POS_BIT_MASK_F212)))
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80081ae:	f003 0304 	and.w	r3, r3, #4
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d106      	bne.n	80081c4 <phacDiscLoop_Sw_Int_TechDetectActivity+0x1d8>
                        || (0U != ((pDataParams->bDetectedTechs & PHAC_DISCLOOP_POS_BIT_MASK_F424))))
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80081bc:	f003 0308 	and.w	r3, r3, #8
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d00b      	beq.n	80081dc <phacDiscLoop_Sw_Int_TechDetectActivity+0x1f0>
                {
                    *pNumOfTechsDetect = bNumOfTechsFound;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	7d3a      	ldrb	r2, [r7, #20]
 80081c8:	701a      	strb	r2, [r3, #0]
                    bTechTypeF_Detected = PH_ON;
 80081ca:	2301      	movs	r3, #1
 80081cc:	74fb      	strb	r3, [r7, #19]
 80081ce:	e005      	b.n	80081dc <phacDiscLoop_Sw_Int_TechDetectActivity+0x1f0>
                }
            }
            else
            {
                PH_CHECK_ABORT(status);
 80081d0:	8afb      	ldrh	r3, [r7, #22]
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	2b12      	cmp	r3, #18
 80081d6:	d101      	bne.n	80081dc <phacDiscLoop_Sw_Int_TechDetectActivity+0x1f0>
 80081d8:	8afb      	ldrh	r3, [r7, #22]
 80081da:	e032      	b.n	8008242 <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
            }

            if((0U != (bPasPollBailOut & (PH_ON << bTechIndex))) && (0U != bNumOfTechsFound))
 80081dc:	7afa      	ldrb	r2, [r7, #11]
 80081de:	7cbb      	ldrb	r3, [r7, #18]
 80081e0:	fa22 f303 	lsr.w	r3, r2, r3
 80081e4:	f003 0301 	and.w	r3, r3, #1
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d007      	beq.n	80081fc <phacDiscLoop_Sw_Int_TechDetectActivity+0x210>
 80081ec:	7d3b      	ldrb	r3, [r7, #20]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d004      	beq.n	80081fc <phacDiscLoop_Sw_Int_TechDetectActivity+0x210>
            {
                /* Bailout set, Returning to application */
                *pNumOfTechsDetect = bNumOfTechsFound;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	7d3a      	ldrb	r2, [r7, #20]
 80081f6:	701a      	strb	r2, [r3, #0]
                break;
 80081f8:	e009      	b.n	800820e <phacDiscLoop_Sw_Int_TechDetectActivity+0x222>
            continue;
 80081fa:	bf00      	nop
    for (bTechLoopIndex = 0; bTechLoopIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bTechLoopIndex++)
 80081fc:	7d7b      	ldrb	r3, [r7, #21]
 80081fe:	3301      	adds	r3, #1
 8008200:	757b      	strb	r3, [r7, #21]
 8008202:	7d7b      	ldrb	r3, [r7, #21]
 8008204:	2b05      	cmp	r3, #5
 8008206:	f67f af15 	bls.w	8008034 <phacDiscLoop_Sw_Int_TechDetectActivity+0x48>
 800820a:	e000      	b.n	800820e <phacDiscLoop_Sw_Int_TechDetectActivity+0x222>
            break;
 800820c:	bf00      	nop
            }
        }
    }

    if (bNumOfTechsFound == 1U)
 800820e:	7d3b      	ldrb	r3, [r7, #20]
 8008210:	2b01      	cmp	r3, #1
 8008212:	d105      	bne.n	8008220 <phacDiscLoop_Sw_Int_TechDetectActivity+0x234>
    {
        *pNumOfTechsDetect = bNumOfTechsFound;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	7d3a      	ldrb	r2, [r7, #20]
 8008218:	701a      	strb	r2, [r3, #0]
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 800821a:	f244 0387 	movw	r3, #16519	@ 0x4087
 800821e:	e010      	b.n	8008242 <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
    }
    else if(bNumOfTechsFound > 1U)
 8008220:	7d3b      	ldrb	r3, [r7, #20]
 8008222:	2b01      	cmp	r3, #1
 8008224:	d905      	bls.n	8008232 <phacDiscLoop_Sw_Int_TechDetectActivity+0x246>
    {
        *pNumOfTechsDetect = bNumOfTechsFound;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	7d3a      	ldrb	r2, [r7, #20]
 800822a:	701a      	strb	r2, [r3, #0]
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_MULTI_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 800822c:	f244 0388 	movw	r3, #16520	@ 0x4088
 8008230:	e007      	b.n	8008242 <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
    }
    else if(PH_ERR_IO_TIMEOUT == (status & PH_ERR_MASK))
 8008232:	8afb      	ldrh	r3, [r7, #22]
 8008234:	b2db      	uxtb	r3, r3
 8008236:	2b01      	cmp	r3, #1
 8008238:	d102      	bne.n	8008240 <phacDiscLoop_Sw_Int_TechDetectActivity+0x254>
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 800823a:	f244 0384 	movw	r3, #16516	@ 0x4084
 800823e:	e000      	b.n	8008242 <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
    }
    else
    {
        return status; /* Other Failure */
 8008240:	8afb      	ldrh	r3, [r7, #22]
    }
}
 8008242:	4618      	mov	r0, r3
 8008244:	3718      	adds	r7, #24
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	08020114 	.word	0x08020114
 8008250:	08020144 	.word	0x08020144

08008254 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity>:
phStatus_t phacDiscLoop_Sw_Int_EmvcoTechDetectActivity(
                                                       phacDiscLoop_Sw_DataParams_t *pDataParams,
                                                       uint8_t bDetectConfig,
                                                       uint8_t* pNumOfTechsDetect
                                                       )
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b088      	sub	sp, #32
 8008258:	af00      	add	r7, sp, #0
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	460b      	mov	r3, r1
 800825e:	607a      	str	r2, [r7, #4]
 8008260:	72fb      	strb	r3, [r7, #11]
    phStatus_t PH_MEMLOC_REM status = PHAC_DISCLOOP_NO_TECH_DETECTED;
 8008262:	2384      	movs	r3, #132	@ 0x84
 8008264:	83fb      	strh	r3, [r7, #30]
    uint8_t    PH_MEMLOC_REM bNumOfTechsFound = 0;
 8008266:	2300      	movs	r3, #0
 8008268:	777b      	strb	r3, [r7, #29]
    uint8_t    PH_MEMLOC_REM bCurrentPollTech = 0;
 800826a:	2300      	movs	r3, #0
 800826c:	757b      	strb	r3, [r7, #21]
    uint8_t    PH_MEMLOC_COUNT bTechLoopIndex = 0;
 800826e:	2300      	movs	r3, #0
 8008270:	773b      	strb	r3, [r7, #28]
    uint8_t    PH_MEMLOC_COUNT bTechIndex = 0;
 8008272:	2300      	movs	r3, #0
 8008274:	753b      	strb	r3, [r7, #20]
    uint8_t    PH_MEMLOC_COUNT bSkipRfReset = PH_OFF;
 8008276:	2300      	movs	r3, #0
 8008278:	76fb      	strb	r3, [r7, #27]
    uint8_t    PH_MEMLOC_REM bPropPollTechEn = PH_OFF;
 800827a:	2300      	movs	r3, #0
 800827c:	76bb      	strb	r3, [r7, #26]
    uint8_t    PH_MEMLOC_REM bStopTechDetection = PH_OFF;
 800827e:	2300      	movs	r3, #0
 8008280:	767b      	strb	r3, [r7, #25]
    uint16_t   PH_MEMLOC_REM wIntFieldStatus;
    uint16_t   PH_MEMLOC_REM wPasBGTimeUs;

    /* EMVCo Polling procedure section 9.2, Symbol 1 */
    pDataParams->bDetectedTechs = 0x00;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2200      	movs	r2, #0
 8008286:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Verify Type A and Type B polling sequence.
     * Note: As per the EMVCo specification,
     * 1st polling technology should be Type A and 2nd polling technology should be Type B.
     * */
    if ((pDataParams->pPasTechPollSeq[0] != PHAC_DISCLOOP_TECH_TYPE_A) ||
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d105      	bne.n	80082a0 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x4c>
        (pDataParams->pPasTechPollSeq[1] != PHAC_DISCLOOP_TECH_TYPE_B))
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008298:	3301      	adds	r3, #1
 800829a:	781b      	ldrb	r3, [r3, #0]
    if ((pDataParams->pPasTechPollSeq[0] != PHAC_DISCLOOP_TECH_TYPE_A) ||
 800829c:	2b01      	cmp	r3, #1
 800829e:	d002      	beq.n	80082a6 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x52>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_AC_DISCLOOP);
 80082a0:	f244 0325 	movw	r3, #16421	@ 0x4025
 80082a4:	e142      	b.n	800852c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
    }

    /* Get Config to check the internal Field On. */
    status = phhalHw_GetConfig(
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082aa:	f107 0212 	add.w	r2, r7, #18
 80082ae:	215f      	movs	r1, #95	@ 0x5f
 80082b0:	4618      	mov	r0, r3
 80082b2:	f006 fc7b 	bl	800ebac <phhalHw_Pn5180_GetConfig>
 80082b6:	4603      	mov	r3, r0
 80082b8:	83fb      	strh	r3, [r7, #30]
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_INT_RF_ON,
        &wIntFieldStatus);
    PH_CHECK_SUCCESS(status);
 80082ba:	8bfb      	ldrh	r3, [r7, #30]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d001      	beq.n	80082c4 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x70>
 80082c0:	8bfb      	ldrh	r3, [r7, #30]
 80082c2:	e133      	b.n	800852c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>

    if (wIntFieldStatus == PH_OFF)
 80082c4:	8a7b      	ldrh	r3, [r7, #18]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	f040 8104 	bne.w	80084d4 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x280>
    {
        /* Apply Protocol Setting */
        PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082d0:	2201      	movs	r2, #1
 80082d2:	b2d2      	uxtb	r2, r2
 80082d4:	4611      	mov	r1, r2
 80082d6:	4618      	mov	r0, r3
 80082d8:	f004 fad4 	bl	800c884 <phhalHw_Pn5180_ApplyProtocolSettings>
 80082dc:	4603      	mov	r3, r0
 80082de:	83fb      	strh	r3, [r7, #30]
 80082e0:	8bfb      	ldrh	r3, [r7, #30]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d001      	beq.n	80082ea <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x96>
 80082e6:	8bfb      	ldrh	r3, [r7, #30]
 80082e8:	e120      	b.n	800852c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
            pDataParams->pHalDataParams,
            (uint8_t)(gPasTechTypeMapTable[0] & 0xFFU)));

        /* Disable RFCA and switch on RF, if in EMV mode. */
        PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_RfcaOff_FieldOn(pDataParams));
 80082ea:	68f8      	ldr	r0, [r7, #12]
 80082ec:	f000 f9a0 	bl	8008630 <phacDiscLoop_Sw_Int_RfcaOff_FieldOn>
 80082f0:	4603      	mov	r3, r0
 80082f2:	83fb      	strh	r3, [r7, #30]
 80082f4:	8bfb      	ldrh	r3, [r7, #30]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d001      	beq.n	80082fe <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0xaa>
 80082fa:	8bfb      	ldrh	r3, [r7, #30]
 80082fc:	e116      	b.n	800852c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>

        /* Get Config to check the internal Field On. */
        status = phhalHw_GetConfig(
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008302:	f107 0212 	add.w	r2, r7, #18
 8008306:	215f      	movs	r1, #95	@ 0x5f
 8008308:	4618      	mov	r0, r3
 800830a:	f006 fc4f 	bl	800ebac <phhalHw_Pn5180_GetConfig>
 800830e:	4603      	mov	r3, r0
 8008310:	83fb      	strh	r3, [r7, #30]
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_INT_RF_ON,
            &wIntFieldStatus);
        PH_CHECK_SUCCESS(status);
 8008312:	8bfb      	ldrh	r3, [r7, #30]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d001      	beq.n	800831c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0xc8>
 8008318:	8bfb      	ldrh	r3, [r7, #30]
 800831a:	e107      	b.n	800852c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>

        if (wIntFieldStatus != PH_ON)
 800831c:	8a7b      	ldrh	r3, [r7, #18]
 800831e:	2b01      	cmp	r3, #1
 8008320:	f000 80d8 	beq.w	80084d4 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x280>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_RF_ERROR, PH_COMP_AC_DISCLOOP);
 8008324:	f244 030a 	movw	r3, #16394	@ 0x400a
 8008328:	e100      	b.n	800852c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
    }
    /* EMVCo: Run until a tag is discovered */
    while(0U == bStopTechDetection )
    {
        /* Poll for all requested technologies  */
        for (bTechLoopIndex = 0; bTechLoopIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bTechLoopIndex++)
 800832a:	2300      	movs	r3, #0
 800832c:	773b      	strb	r3, [r7, #28]
 800832e:	e0bf      	b.n	80084b0 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x25c>
        {
            bTechIndex = pDataParams->pPasTechPollSeq[bTechLoopIndex];
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008334:	7f3b      	ldrb	r3, [r7, #28]
 8008336:	4413      	add	r3, r2
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	753b      	strb	r3, [r7, #20]
            bCurrentPollTech = (PH_ON << bTechIndex);
 800833c:	7d3b      	ldrb	r3, [r7, #20]
 800833e:	2201      	movs	r2, #1
 8008340:	fa02 f303 	lsl.w	r3, r2, r3
 8008344:	757b      	strb	r3, [r7, #21]

            /* Symbol 2 (8 and 13) */
            if ((0U != (bDetectConfig & bCurrentPollTech)) && (bStopTechDetection == 0U))
 8008346:	7afa      	ldrb	r2, [r7, #11]
 8008348:	7d7b      	ldrb	r3, [r7, #21]
 800834a:	4013      	ands	r3, r2
 800834c:	b2db      	uxtb	r3, r3
 800834e:	2b00      	cmp	r3, #0
 8008350:	f000 80ab 	beq.w	80084aa <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x256>
 8008354:	7e7b      	ldrb	r3, [r7, #25]
 8008356:	2b00      	cmp	r3, #0
 8008358:	f040 80a7 	bne.w	80084aa <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x256>
            {
                if((0U == ((pDataParams->bDetectedTechs & bCurrentPollTech))))
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 8008362:	7d7b      	ldrb	r3, [r7, #21]
 8008364:	4013      	ands	r3, r2
 8008366:	b2db      	uxtb	r3, r3
 8008368:	2b00      	cmp	r3, #0
 800836a:	f040 809c 	bne.w	80084a6 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x252>
                {

                    if (bCurrentPollTech & (uint8_t)(~(PHAC_DISCLOOP_POS_BIT_MASK_A | PHAC_DISCLOOP_POS_BIT_MASK_B)))
 800836e:	7d7b      	ldrb	r3, [r7, #21]
 8008370:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8008374:	2b00      	cmp	r3, #0
 8008376:	d001      	beq.n	800837c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x128>

                    {
                        bPropPollTechEn = PH_ON;
 8008378:	2301      	movs	r3, #1
 800837a:	76bb      	strb	r3, [r7, #26]
                    }

                    /* Optional Field Reset in case of Proprietary technologies polling */
                    if ((pDataParams->bEMVCoPropOpRfFieldReset & bCurrentPollTech) && (bPropPollTechEn == PH_ON))
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f893 2059 	ldrb.w	r2, [r3, #89]	@ 0x59
 8008382:	7d7b      	ldrb	r3, [r7, #21]
 8008384:	4013      	ands	r3, r2
 8008386:	b2db      	uxtb	r3, r3
 8008388:	2b00      	cmp	r3, #0
 800838a:	d005      	beq.n	8008398 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x144>
 800838c:	7ebb      	ldrb	r3, [r7, #26]
 800838e:	2b01      	cmp	r3, #1
 8008390:	d102      	bne.n	8008398 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x144>
                    {
                        /* Symbol 14 */
                        phacDiscLoop_Sw_Int_EmvcoRfFieldReset(pDataParams);
 8008392:	68f8      	ldr	r0, [r7, #12]
 8008394:	f7ff fbd6 	bl	8007b44 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset>
                    }

                    if(bCurrentPollTech == PHAC_DISCLOOP_POS_BIT_MASK_B)
 8008398:	7d7b      	ldrb	r3, [r7, #21]
 800839a:	2b02      	cmp	r3, #2
 800839c:	d12c      	bne.n	80083f8 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x1a4>
                    {
                        if((0U != ((pDataParams->bDetectedTechs & PHAC_DISCLOOP_POS_BIT_MASK_A))) &&
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80083a4:	f003 0301 	and.w	r3, r3, #1
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d011      	beq.n	80083d0 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x17c>
                                (pDataParams->waPasPollGTimeUs[bTechIndex] > PHAC_DISCLOOP_HALTA_TIMOUT_US))
 80083ac:	7d3a      	ldrb	r2, [r7, #20]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	3208      	adds	r2, #8
 80083b2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
                        if((0U != ((pDataParams->bDetectedTechs & PHAC_DISCLOOP_POS_BIT_MASK_A))) &&
 80083b6:	f240 424c 	movw	r2, #1100	@ 0x44c
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d908      	bls.n	80083d0 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x17c>
                        {
                            wPasBGTimeUs = pDataParams->waPasPollGTimeUs[bTechIndex] - PHAC_DISCLOOP_HALTA_TIMOUT_US;
 80083be:	7d3a      	ldrb	r2, [r7, #20]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	3208      	adds	r2, #8
 80083c4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80083c8:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 80083cc:	82fb      	strh	r3, [r7, #22]
 80083ce:	e005      	b.n	80083dc <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x188>
                        }
                        else
                        {
                            wPasBGTimeUs = pDataParams->waPasPollGTimeUs[bTechIndex];
 80083d0:	7d3a      	ldrb	r2, [r7, #20]
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	3208      	adds	r2, #8
 80083d6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80083da:	82fb      	strh	r3, [r7, #22]
                        }
                        /* Apply Guard time. Symbol 3 (9 and 15) */
                        PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083e0:	8afa      	ldrh	r2, [r7, #22]
 80083e2:	2135      	movs	r1, #53	@ 0x35
 80083e4:	4618      	mov	r0, r3
 80083e6:	f004 ff93 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 80083ea:	4603      	mov	r3, r0
 80083ec:	83fb      	strh	r3, [r7, #30]
 80083ee:	8bfb      	ldrh	r3, [r7, #30]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d013      	beq.n	800841c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x1c8>
 80083f4:	8bfb      	ldrh	r3, [r7, #30]
 80083f6:	e099      	b.n	800852c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
                            wPasBGTimeUs));
                    }
                    else
                    {
                        /* Apply Guard time. Symbol 3 (9 and 15) */
                        PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80083fc:	7d3a      	ldrb	r2, [r7, #20]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	3208      	adds	r2, #8
 8008402:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008406:	461a      	mov	r2, r3
 8008408:	2135      	movs	r1, #53	@ 0x35
 800840a:	f004 ff81 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 800840e:	4603      	mov	r3, r0
 8008410:	83fb      	strh	r3, [r7, #30]
 8008412:	8bfb      	ldrh	r3, [r7, #30]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d001      	beq.n	800841c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x1c8>
 8008418:	8bfb      	ldrh	r3, [r7, #30]
 800841a:	e087      	b.n	800852c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
                            pDataParams->waPasPollGTimeUs[bTechIndex]));
                    }

                    /* Apply Protocol Setting for Selected Technology  */
                    PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008420:	7d3b      	ldrb	r3, [r7, #20]
 8008422:	4944      	ldr	r1, [pc, #272]	@ (8008534 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2e0>)
 8008424:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008428:	b2db      	uxtb	r3, r3
 800842a:	4619      	mov	r1, r3
 800842c:	4610      	mov	r0, r2
 800842e:	f004 fa29 	bl	800c884 <phhalHw_Pn5180_ApplyProtocolSettings>
 8008432:	4603      	mov	r3, r0
 8008434:	83fb      	strh	r3, [r7, #30]
 8008436:	8bfb      	ldrh	r3, [r7, #30]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d001      	beq.n	8008440 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x1ec>
 800843c:	8bfb      	ldrh	r3, [r7, #30]
 800843e:	e075      	b.n	800852c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
                        pDataParams->pHalDataParams,
                        (uint8_t)(gPasTechTypeMapTable[bTechIndex] & 0xFFU)));

                    /* Perform Tech detection. Symbol 4 (10 and 16) */
                    status = pfDetTechs[bTechIndex](pDataParams);
 8008440:	7d3b      	ldrb	r3, [r7, #20]
 8008442:	4a3d      	ldr	r2, [pc, #244]	@ (8008538 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2e4>)
 8008444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008448:	68f8      	ldr	r0, [r7, #12]
 800844a:	4798      	blx	r3
 800844c:	4603      	mov	r3, r0
 800844e:	83fb      	strh	r3, [r7, #30]

                    if ((status & PH_ERR_MASK) == PHAC_DISCLOOP_TECH_DETECTED)
 8008450:	8bfb      	ldrh	r3, [r7, #30]
 8008452:	b2db      	uxtb	r3, r3
 8008454:	2b87      	cmp	r3, #135	@ 0x87
 8008456:	d10c      	bne.n	8008472 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x21e>
                    {
                        /* Set the corresponding detected bit. Symbol 6 (12 and 18) */
                        pDataParams->bDetectedTechs |= bCurrentPollTech;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 800845e:	7d7b      	ldrb	r3, [r7, #21]
 8008460:	4313      	orrs	r3, r2
 8008462:	b2da      	uxtb	r2, r3
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                        bNumOfTechsFound++;
 800846a:	7f7b      	ldrb	r3, [r7, #29]
 800846c:	3301      	adds	r3, #1
 800846e:	777b      	strb	r3, [r7, #29]
 8008470:	e005      	b.n	800847e <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x22a>
                    }
                    else
                    {
                        PH_CHECK_ABORT(status);
 8008472:	8bfb      	ldrh	r3, [r7, #30]
 8008474:	b2db      	uxtb	r3, r3
 8008476:	2b12      	cmp	r3, #18
 8008478:	d101      	bne.n	800847e <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x22a>
 800847a:	8bfb      	ldrh	r3, [r7, #30]
 800847c:	e056      	b.n	800852c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
                    }

                    /* Optional Field Reset in case of Proprietary technologies polling. */
                    if ((pDataParams->bEMVCoPropOpRfFieldReset & bCurrentPollTech) && (bPropPollTechEn == PH_ON))
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f893 2059 	ldrb.w	r2, [r3, #89]	@ 0x59
 8008484:	7d7b      	ldrb	r3, [r7, #21]
 8008486:	4013      	ands	r3, r2
 8008488:	b2db      	uxtb	r3, r3
 800848a:	2b00      	cmp	r3, #0
 800848c:	d008      	beq.n	80084a0 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x24c>
 800848e:	7ebb      	ldrb	r3, [r7, #26]
 8008490:	2b01      	cmp	r3, #1
 8008492:	d105      	bne.n	80084a0 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x24c>
                    {
                        /* Symbol 19 */
                        phacDiscLoop_Sw_Int_EmvcoRfFieldReset(pDataParams);
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	f7ff fb55 	bl	8007b44 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset>
                        bSkipRfReset = PH_ON;
 800849a:	2301      	movs	r3, #1
 800849c:	76fb      	strb	r3, [r7, #27]
 800849e:	e004      	b.n	80084aa <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x256>
                    }
                    else
                    {
                        bSkipRfReset = PH_OFF;
 80084a0:	2300      	movs	r3, #0
 80084a2:	76fb      	strb	r3, [r7, #27]
 80084a4:	e001      	b.n	80084aa <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x256>
                    }
                }
                else
                {
                    bStopTechDetection = PH_ON;
 80084a6:	2301      	movs	r3, #1
 80084a8:	767b      	strb	r3, [r7, #25]
        for (bTechLoopIndex = 0; bTechLoopIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bTechLoopIndex++)
 80084aa:	7f3b      	ldrb	r3, [r7, #28]
 80084ac:	3301      	adds	r3, #1
 80084ae:	773b      	strb	r3, [r7, #28]
 80084b0:	7f3b      	ldrb	r3, [r7, #28]
 80084b2:	2b05      	cmp	r3, #5
 80084b4:	f67f af3c 	bls.w	8008330 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0xdc>
                }
            }
        }

        if(bNumOfTechsFound == 0U)
 80084b8:	7f7b      	ldrb	r3, [r7, #29]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d101      	bne.n	80084c2 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x26e>
        {
            bStopTechDetection = PH_ON;
 80084be:	2301      	movs	r3, #1
 80084c0:	767b      	strb	r3, [r7, #25]
        }

        if((bPropPollTechEn == PH_ON) && (bSkipRfReset == PH_OFF))
 80084c2:	7ebb      	ldrb	r3, [r7, #26]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d105      	bne.n	80084d4 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x280>
 80084c8:	7efb      	ldrb	r3, [r7, #27]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d102      	bne.n	80084d4 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x280>
        {
            /* Symbol 20 */
            phacDiscLoop_Sw_Int_EmvcoRfFieldReset(pDataParams);
 80084ce:	68f8      	ldr	r0, [r7, #12]
 80084d0:	f7ff fb38 	bl	8007b44 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset>
    while(0U == bStopTechDetection )
 80084d4:	7e7b      	ldrb	r3, [r7, #25]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	f43f af27 	beq.w	800832a <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0xd6>
        }
    } /* End of while(!bStopTechDetection ) */

    if (bNumOfTechsFound == 1U)
 80084dc:	7f7b      	ldrb	r3, [r7, #29]
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d105      	bne.n	80084ee <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x29a>
    {
        *pNumOfTechsDetect = bNumOfTechsFound;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	7f7a      	ldrb	r2, [r7, #29]
 80084e6:	701a      	strb	r2, [r3, #0]
        status = PHAC_DISCLOOP_TECH_DETECTED;
 80084e8:	2387      	movs	r3, #135	@ 0x87
 80084ea:	83fb      	strh	r3, [r7, #30]
 80084ec:	e00e      	b.n	800850c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2b8>
    }
    else if(bNumOfTechsFound > 1U)
 80084ee:	7f7b      	ldrb	r3, [r7, #29]
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d905      	bls.n	8008500 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2ac>
    {
        *pNumOfTechsDetect = bNumOfTechsFound;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	7f7a      	ldrb	r2, [r7, #29]
 80084f8:	701a      	strb	r2, [r3, #0]
        status = PHAC_DISCLOOP_MULTI_TECH_DETECTED;
 80084fa:	2388      	movs	r3, #136	@ 0x88
 80084fc:	83fb      	strh	r3, [r7, #30]
 80084fe:	e005      	b.n	800850c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2b8>
    }
    else if(PH_ERR_IO_TIMEOUT == (status & PH_ERR_MASK))
 8008500:	8bfb      	ldrh	r3, [r7, #30]
 8008502:	b2db      	uxtb	r3, r3
 8008504:	2b01      	cmp	r3, #1
 8008506:	d101      	bne.n	800850c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2b8>
    {
        status = PHAC_DISCLOOP_NO_TECH_DETECTED;
 8008508:	2384      	movs	r3, #132	@ 0x84
 800850a:	83fb      	strh	r3, [r7, #30]
    }
    else
    {
        ; /* Do Nothing */
    }
    return PH_ADD_COMPCODE(status, PH_COMP_AC_DISCLOOP);
 800850c:	8bfb      	ldrh	r3, [r7, #30]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d00b      	beq.n	800852a <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d6>
 8008512:	8bfb      	ldrh	r3, [r7, #30]
 8008514:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008518:	2b00      	cmp	r3, #0
 800851a:	d106      	bne.n	800852a <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d6>
 800851c:	8bfb      	ldrh	r3, [r7, #30]
 800851e:	b2db      	uxtb	r3, r3
 8008520:	b29b      	uxth	r3, r3
 8008522:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008526:	b29b      	uxth	r3, r3
 8008528:	e000      	b.n	800852c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
 800852a:	8bfb      	ldrh	r3, [r7, #30]
}
 800852c:	4618      	mov	r0, r3
 800852e:	3720      	adds	r7, #32
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	08020114 	.word	0x08020114
 8008538:	08020144 	.word	0x08020144

0800853c <phacDiscLoop_Sw_Int_ColsnReslnActivity>:

phStatus_t phacDiscLoop_Sw_Int_ColsnReslnActivity(
                                                  phacDiscLoop_Sw_DataParams_t *pDataParams,
                                                  uint8_t bTechType
                                                  )
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	460b      	mov	r3, r1
 8008546:	70fb      	strb	r3, [r7, #3]
    phStatus_t PH_MEMLOC_REM wStatus;

    /* Since we are interested in one Technology, Reset DetectedTechs information */
    pDataParams->bDetectedTechs = 0x00;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /*Re-set number of card*/
    pDataParams->bNumOfCards = 0x00;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    /* Call the selected collision resolution function */
    wStatus = pfColnRelsns[bTechType](pDataParams);
 8008558:	78fb      	ldrb	r3, [r7, #3]
 800855a:	4a15      	ldr	r2, [pc, #84]	@ (80085b0 <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x74>)
 800855c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	4798      	blx	r3
 8008564:	4603      	mov	r3, r0
 8008566:	81fb      	strh	r3, [r7, #14]

    if((wStatus & PH_ERR_MASK) == PH_ERR_SUCCESS)
 8008568:	89fb      	ldrh	r3, [r7, #14]
 800856a:	b2db      	uxtb	r3, r3
 800856c:	2b00      	cmp	r3, #0
 800856e:	d112      	bne.n	8008596 <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x5a>
    {
        /* Collision Resolution activity is successful, update Detected Technology */
        pDataParams->bDetectedTechs = (PH_ON << bTechType);
 8008570:	78fb      	ldrb	r3, [r7, #3]
 8008572:	2201      	movs	r2, #1
 8008574:	fa02 f303 	lsl.w	r3, r2, r3
 8008578:	b2da      	uxtb	r2, r3
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

        if(pDataParams->bNumOfCards > 1U)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8008586:	2b01      	cmp	r3, #1
 8008588:	d902      	bls.n	8008590 <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x54>
        {
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_MULTI_DEVICES_RESOLVED, PH_COMP_AC_DISCLOOP);
 800858a:	f244 038a 	movw	r3, #16522	@ 0x408a
 800858e:	e00a      	b.n	80085a6 <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x6a>
        }
        else
        {
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 8008590:	f244 0389 	movw	r3, #16521	@ 0x4089
 8008594:	e007      	b.n	80085a6 <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x6a>
        }
    }

    if((wStatus & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT)
 8008596:	89fb      	ldrh	r3, [r7, #14]
 8008598:	b2db      	uxtb	r3, r3
 800859a:	2b01      	cmp	r3, #1
 800859c:	d102      	bne.n	80085a4 <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x68>
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800859e:	f244 0385 	movw	r3, #16517	@ 0x4085
 80085a2:	e000      	b.n	80085a6 <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x6a>
    }

    return wStatus;
 80085a4:	89fb      	ldrh	r3, [r7, #14]
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3710      	adds	r7, #16
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop
 80085b0:	0802012c 	.word	0x0802012c

080085b4 <phacDiscLoop_Sw_Int_ActivateDevice>:
phStatus_t phacDiscLoop_Sw_Int_ActivateDevice(
                                              phacDiscLoop_Sw_DataParams_t * pDataParams,
                                              uint8_t bTechType,
                                              uint8_t bTagIndex
                                              )
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	460b      	mov	r3, r1
 80085be:	70fb      	strb	r3, [r7, #3]
 80085c0:	4613      	mov	r3, r2
 80085c2:	70bb      	strb	r3, [r7, #2]
    phStatus_t PH_MEMLOC_REM status;

    /* Since we are interested in one Technology, Reset DetectedTechs information */
    pDataParams->bDetectedTechs = 0x00;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Activate selected tag */
    status = pfDeviceActivate[bTechType](pDataParams, bTagIndex);
 80085cc:	78fb      	ldrb	r3, [r7, #3]
 80085ce:	4a17      	ldr	r2, [pc, #92]	@ (800862c <phacDiscLoop_Sw_Int_ActivateDevice+0x78>)
 80085d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085d4:	78ba      	ldrb	r2, [r7, #2]
 80085d6:	4611      	mov	r1, r2
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	4798      	blx	r3
 80085dc:	4603      	mov	r3, r0
 80085de:	81fb      	strh	r3, [r7, #14]
    if((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 80085e0:	89fb      	ldrh	r3, [r7, #14]
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d10a      	bne.n	80085fe <phacDiscLoop_Sw_Int_ActivateDevice+0x4a>
    {
        /* Set Corresponding Tech Bit Position */
        pDataParams->bDetectedTechs = PH_ON << bTechType;
 80085e8:	78fb      	ldrb	r3, [r7, #3]
 80085ea:	2201      	movs	r2, #1
 80085ec:	fa02 f303 	lsl.w	r3, r2, r3
 80085f0:	b2da      	uxtb	r2, r3
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_DEVICE_ACTIVATED, PH_COMP_AC_DISCLOOP);
 80085f8:	f244 038b 	movw	r3, #16523	@ 0x408b
 80085fc:	e012      	b.n	8008624 <phacDiscLoop_Sw_Int_ActivateDevice+0x70>
    }
    else if(((status & PH_ERR_MASK) == PHAC_DISCLOOP_MERGED_SEL_RES_FOUND)
 80085fe:	89fb      	ldrh	r3, [r7, #14]
 8008600:	b2db      	uxtb	r3, r3
 8008602:	2b8e      	cmp	r3, #142	@ 0x8e
 8008604:	d003      	beq.n	800860e <phacDiscLoop_Sw_Int_ActivateDevice+0x5a>
       || ((status & PH_ERR_MASK) == PHAC_DISCLOOP_PASSIVE_TARGET_ACTIVATED))
 8008606:	89fb      	ldrh	r3, [r7, #14]
 8008608:	b2db      	uxtb	r3, r3
 800860a:	2b8d      	cmp	r3, #141	@ 0x8d
 800860c:	d109      	bne.n	8008622 <phacDiscLoop_Sw_Int_ActivateDevice+0x6e>
    {
        /* Set Corresponding Tech Bit Position */
        pDataParams->bDetectedTechs = PH_ON << bTechType;
 800860e:	78fb      	ldrb	r3, [r7, #3]
 8008610:	2201      	movs	r2, #1
 8008612:	fa02 f303 	lsl.w	r3, r2, r3
 8008616:	b2da      	uxtb	r2, r3
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    else
    {
        return status;
    }
    return status;
 800861e:	89fb      	ldrh	r3, [r7, #14]
 8008620:	e000      	b.n	8008624 <phacDiscLoop_Sw_Int_ActivateDevice+0x70>
        return status;
 8008622:	89fb      	ldrh	r3, [r7, #14]
}
 8008624:	4618      	mov	r0, r3
 8008626:	3710      	adds	r7, #16
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}
 800862c:	0802015c 	.word	0x0802015c

08008630 <phacDiscLoop_Sw_Int_RfcaOff_FieldOn>:

phStatus_t phacDiscLoop_Sw_Int_RfcaOff_FieldOn(
                                               phacDiscLoop_Sw_DataParams_t * pDataParams
                                               )
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 8008638:	2300      	movs	r3, #0
 800863a:	81fb      	strh	r3, [r7, #14]

    /* Disable RFCA (if supported) */
    status = phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RFCA, PH_OFF);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008640:	2200      	movs	r2, #0
 8008642:	2156      	movs	r1, #86	@ 0x56
 8008644:	4618      	mov	r0, r3
 8008646:	f004 fe63 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 800864a:	4603      	mov	r3, r0
 800864c:	81fb      	strh	r3, [r7, #14]
    if (((status & PH_ERR_MASK) != PH_ERR_UNSUPPORTED_PARAMETER) && ((status & PH_ERR_MASK) != PH_ERR_SUCCESS))
 800864e:	89fb      	ldrh	r3, [r7, #14]
 8008650:	b2db      	uxtb	r3, r3
 8008652:	2b23      	cmp	r3, #35	@ 0x23
 8008654:	d005      	beq.n	8008662 <phacDiscLoop_Sw_Int_RfcaOff_FieldOn+0x32>
 8008656:	89fb      	ldrh	r3, [r7, #14]
 8008658:	b2db      	uxtb	r3, r3
 800865a:	2b00      	cmp	r3, #0
 800865c:	d001      	beq.n	8008662 <phacDiscLoop_Sw_Int_RfcaOff_FieldOn+0x32>
    {
        return status;
 800865e:	89fb      	ldrh	r3, [r7, #14]
 8008660:	e00c      	b.n	800867c <phacDiscLoop_Sw_Int_RfcaOff_FieldOn+0x4c>
    }

    /* Switch on RF without performing I-RFCA. */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_FieldOn(pDataParams->pHalDataParams));
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008666:	4618      	mov	r0, r3
 8008668:	f004 fd54 	bl	800d114 <phhalHw_Pn5180_FieldOn>
 800866c:	4603      	mov	r3, r0
 800866e:	81fb      	strh	r3, [r7, #14]
 8008670:	89fb      	ldrh	r3, [r7, #14]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d001      	beq.n	800867a <phacDiscLoop_Sw_Int_RfcaOff_FieldOn+0x4a>
 8008676:	89fb      	ldrh	r3, [r7, #14]
 8008678:	e000      	b.n	800867c <phacDiscLoop_Sw_Int_RfcaOff_FieldOn+0x4c>

    return status;
 800867a:	89fb      	ldrh	r3, [r7, #14]
}
 800867c:	4618      	mov	r0, r3
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <phacDiscLoop_Sw_Int_FieldOn>:

phStatus_t phacDiscLoop_Sw_Int_FieldOn(
                                       phacDiscLoop_Sw_DataParams_t * pDataParams
                                       )
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 800868c:	2300      	movs	r3, #0
 800868e:	81fb      	strh	r3, [r7, #14]

    /* Enable RFCA (if supported) */
    status = phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RFCA, PH_ON);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008694:	2201      	movs	r2, #1
 8008696:	2156      	movs	r1, #86	@ 0x56
 8008698:	4618      	mov	r0, r3
 800869a:	f004 fe39 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 800869e:	4603      	mov	r3, r0
 80086a0:	81fb      	strh	r3, [r7, #14]
    if(((status & PH_ERR_MASK) != PH_ERR_UNSUPPORTED_PARAMETER) && ((status & PH_ERR_MASK) != PH_ERR_SUCCESS))
 80086a2:	89fb      	ldrh	r3, [r7, #14]
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	2b23      	cmp	r3, #35	@ 0x23
 80086a8:	d005      	beq.n	80086b6 <phacDiscLoop_Sw_Int_FieldOn+0x32>
 80086aa:	89fb      	ldrh	r3, [r7, #14]
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d001      	beq.n	80086b6 <phacDiscLoop_Sw_Int_FieldOn+0x32>
    {
        return status;
 80086b2:	89fb      	ldrh	r3, [r7, #14]
 80086b4:	e01d      	b.n	80086f2 <phacDiscLoop_Sw_Int_FieldOn+0x6e>
    }

    /* Perform I-RFCA and Switch on RF Field. */
    status = phhalHw_FieldOn(pDataParams->pHalDataParams);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086ba:	4618      	mov	r0, r3
 80086bc:	f004 fd2a 	bl	800d114 <phhalHw_Pn5180_FieldOn>
 80086c0:	4603      	mov	r3, r0
 80086c2:	81fb      	strh	r3, [r7, #14]
    if((status & PH_ERR_MASK) == PH_ERR_RF_ERROR)
 80086c4:	89fb      	ldrh	r3, [r7, #14]
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	2b0a      	cmp	r3, #10
 80086ca:	d102      	bne.n	80086d2 <phacDiscLoop_Sw_Int_FieldOn+0x4e>
    {
        /* External RF is ON */
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_EXTERNAL_RFON, PH_COMP_AC_DISCLOOP);
 80086cc:	f244 0382 	movw	r3, #16514	@ 0x4082
 80086d0:	e00f      	b.n	80086f2 <phacDiscLoop_Sw_Int_FieldOn+0x6e>
    }
    else
    {
        return PH_ADD_COMPCODE(status, PH_COMP_AC_DISCLOOP);
 80086d2:	89fb      	ldrh	r3, [r7, #14]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d00b      	beq.n	80086f0 <phacDiscLoop_Sw_Int_FieldOn+0x6c>
 80086d8:	89fb      	ldrh	r3, [r7, #14]
 80086da:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d106      	bne.n	80086f0 <phacDiscLoop_Sw_Int_FieldOn+0x6c>
 80086e2:	89fb      	ldrh	r3, [r7, #14]
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	e000      	b.n	80086f2 <phacDiscLoop_Sw_Int_FieldOn+0x6e>
 80086f0:	89fb      	ldrh	r3, [r7, #14]
    }
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3710      	adds	r7, #16
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}

080086fa <phacDiscLoop_Sw_Int_IsValidPollStatus>:

uint8_t phacDiscLoop_Sw_Int_IsValidPollStatus(
                                              phStatus_t wStatus
                                              )
{
 80086fa:	b480      	push	{r7}
 80086fc:	b083      	sub	sp, #12
 80086fe:	af00      	add	r7, sp, #0
 8008700:	4603      	mov	r3, r0
 8008702:	80fb      	strh	r3, [r7, #6]
    if((((wStatus) & PH_ERR_MASK) == PH_ERR_SUCCESS)         ||
 8008704:	88fb      	ldrh	r3, [r7, #6]
 8008706:	b2db      	uxtb	r3, r3
 8008708:	2b00      	cmp	r3, #0
 800870a:	d00f      	beq.n	800872c <phacDiscLoop_Sw_Int_IsValidPollStatus+0x32>
       (((wStatus) & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR) ||
 800870c:	88fb      	ldrh	r3, [r7, #6]
 800870e:	b2db      	uxtb	r3, r3
    if((((wStatus) & PH_ERR_MASK) == PH_ERR_SUCCESS)         ||
 8008710:	2b03      	cmp	r3, #3
 8008712:	d00b      	beq.n	800872c <phacDiscLoop_Sw_Int_IsValidPollStatus+0x32>
       (((wStatus) & PH_ERR_MASK) == PH_ERR_FRAMING_ERROR)   ||
 8008714:	88fb      	ldrh	r3, [r7, #6]
 8008716:	b2db      	uxtb	r3, r3
       (((wStatus) & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR) ||
 8008718:	2b05      	cmp	r3, #5
 800871a:	d007      	beq.n	800872c <phacDiscLoop_Sw_Int_IsValidPollStatus+0x32>
       (((wStatus) & PH_ERR_MASK) == PH_ERR_INTEGRITY_ERROR) ||
 800871c:	88fb      	ldrh	r3, [r7, #6]
 800871e:	b2db      	uxtb	r3, r3
       (((wStatus) & PH_ERR_MASK) == PH_ERR_FRAMING_ERROR)   ||
 8008720:	2b02      	cmp	r3, #2
 8008722:	d003      	beq.n	800872c <phacDiscLoop_Sw_Int_IsValidPollStatus+0x32>
       (((wStatus) & PH_ERR_MASK) == PH_ERR_PROTOCOL_ERROR)
 8008724:	88fb      	ldrh	r3, [r7, #6]
 8008726:	b2db      	uxtb	r3, r3
       (((wStatus) & PH_ERR_MASK) == PH_ERR_INTEGRITY_ERROR) ||
 8008728:	2b06      	cmp	r3, #6
 800872a:	d101      	bne.n	8008730 <phacDiscLoop_Sw_Int_IsValidPollStatus+0x36>
       )
    {
        return PH_ON;
 800872c:	2301      	movs	r3, #1
 800872e:	e000      	b.n	8008732 <phacDiscLoop_Sw_Int_IsValidPollStatus+0x38>
    }
    else
    {
        return PH_OFF;
 8008730:	2300      	movs	r3, #0
    }
}
 8008732:	4618      	mov	r0, r3
 8008734:	370c      	adds	r7, #12
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr

0800873e <phacDiscLoop_Sw_DetTechTypeA>:
 * Internal Definitions
 * ***************************************************************************************************************** */
phStatus_t phacDiscLoop_Sw_DetTechTypeA(
                                        phacDiscLoop_Sw_DataParams_t *pDataParams
                                        )
{
 800873e:	b580      	push	{r7, lr}
 8008740:	b084      	sub	sp, #16
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
#if defined (NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS)
    uint8_t    PH_MEMLOC_COUNT bIndex;
    phStatus_t PH_MEMLOC_REM   wStatus;

    /* Reset total tags found */
    pDataParams->sTypeATargetInfo.bTotalTagsFound = 0;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Reset Collision Bit for Type A*/
    pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_A;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	7f9b      	ldrb	r3, [r3, #30]
 8008752:	f023 0301 	bic.w	r3, r3, #1
 8008756:	b2da      	uxtb	r2, r3
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	779a      	strb	r2, [r3, #30]
    /* Reset the Sleep flag for Type 3 activation status */
    for(bIndex = 0U; bIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bIndex++)
 800875c:	2300      	movs	r3, #0
 800875e:	73fb      	strb	r3, [r7, #15]
 8008760:	e014      	b.n	800878c <phacDiscLoop_Sw_DetTechTypeA+0x4e>
    {
        /* Device is not in HLTA state */
        pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].bSleep = 0U;
 8008762:	7bfa      	ldrb	r2, [r7, #15]
 8008764:	6879      	ldr	r1, [r7, #4]
 8008766:	4613      	mov	r3, r2
 8008768:	011b      	lsls	r3, r3, #4
 800876a:	1a9b      	subs	r3, r3, r2
 800876c:	440b      	add	r3, r1
 800876e:	336c      	adds	r3, #108	@ 0x6c
 8008770:	2200      	movs	r2, #0
 8008772:	701a      	strb	r2, [r3, #0]
        pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].bUidSize = 0U;
 8008774:	7bfa      	ldrb	r2, [r7, #15]
 8008776:	6879      	ldr	r1, [r7, #4]
 8008778:	4613      	mov	r3, r2
 800877a:	011b      	lsls	r3, r3, #4
 800877c:	1a9b      	subs	r3, r3, r2
 800877e:	440b      	add	r3, r1
 8008780:	336a      	adds	r3, #106	@ 0x6a
 8008782:	2200      	movs	r2, #0
 8008784:	701a      	strb	r2, [r3, #0]
    for(bIndex = 0U; bIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bIndex++)
 8008786:	7bfb      	ldrb	r3, [r7, #15]
 8008788:	3301      	adds	r3, #1
 800878a:	73fb      	strb	r3, [r7, #15]
 800878c:	7bfb      	ldrb	r3, [r7, #15]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d0e7      	beq.n	8008762 <phacDiscLoop_Sw_DetTechTypeA+0x24>
    }

    /* sending the WakeUpA */
    wStatus = phpalI14443p3a_WakeUpA(
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	335e      	adds	r3, #94	@ 0x5e
 800879a:	4619      	mov	r1, r3
 800879c:	4610      	mov	r0, r2
 800879e:	f00a fae6 	bl	8012d6e <phpalI14443p3a_Sw_WakeUpA>
 80087a2:	4603      	mov	r3, r0
 80087a4:	81bb      	strh	r3, [r7, #12]
        pDataParams->pPal1443p3aDataParams,
        pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aAtqa);

    if(0u != (phacDiscLoop_Sw_Int_IsValidPollStatus(wStatus)))
 80087a6:	89bb      	ldrh	r3, [r7, #12]
 80087a8:	4618      	mov	r0, r3
 80087aa:	f7ff ffa6 	bl	80086fa <phacDiscLoop_Sw_Int_IsValidPollStatus>
 80087ae:	4603      	mov	r3, r0
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d02d      	beq.n	8008810 <phacDiscLoop_Sw_DetTechTypeA+0xd2>
    {
        if((wStatus & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 80087b4:	89bb      	ldrh	r3, [r7, #12]
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	2b03      	cmp	r3, #3
 80087ba:	d106      	bne.n	80087ca <phacDiscLoop_Sw_DetTechTypeA+0x8c>
        {
            pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	7f9b      	ldrb	r3, [r3, #30]
 80087c0:	f043 0301 	orr.w	r3, r3, #1
 80087c4:	b2da      	uxtb	r2, r3
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	779a      	strb	r2, [r3, #30]
        }

        PH_CHECK_SUCCESS_FCT(wStatus, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXWAIT_US, 500));
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087ce:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80087d2:	2107      	movs	r1, #7
 80087d4:	4618      	mov	r0, r3
 80087d6:	f004 fd9b 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 80087da:	4603      	mov	r3, r0
 80087dc:	81bb      	strh	r3, [r7, #12]
 80087de:	89bb      	ldrh	r3, [r7, #12]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d001      	beq.n	80087e8 <phacDiscLoop_Sw_DetTechTypeA+0xaa>
 80087e4:	89bb      	ldrh	r3, [r7, #12]
 80087e6:	e014      	b.n	8008812 <phacDiscLoop_Sw_DetTechTypeA+0xd4>

        /* Halt the detected cards. */
        PH_CHECK_ABORT_FCT(wStatus, phpalI14443p3a_HaltA(pDataParams->pPal1443p3aDataParams));
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ec:	4618      	mov	r0, r3
 80087ee:	f00a facd 	bl	8012d8c <phpalI14443p3a_Sw_HaltA>
 80087f2:	4603      	mov	r3, r0
 80087f4:	81bb      	strh	r3, [r7, #12]
 80087f6:	89bb      	ldrh	r3, [r7, #12]
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	2b12      	cmp	r3, #18
 80087fc:	d101      	bne.n	8008802 <phacDiscLoop_Sw_DetTechTypeA+0xc4>
 80087fe:	89bb      	ldrh	r3, [r7, #12]
 8008800:	e007      	b.n	8008812 <phacDiscLoop_Sw_DetTechTypeA+0xd4>

        pDataParams->sTypeATargetInfo.bTotalTagsFound = 1;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2201      	movs	r2, #1
 8008806:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    else
    {
        return wStatus;
    }

    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 800880a:	f244 0387 	movw	r3, #16519	@ 0x4087
 800880e:	e000      	b.n	8008812 <phacDiscLoop_Sw_DetTechTypeA+0xd4>
        return wStatus;
 8008810:	89bb      	ldrh	r3, [r7, #12]
#else /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */
}
 8008812:	4618      	mov	r0, r3
 8008814:	3710      	adds	r7, #16
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
	...

0800881c <phacDiscLoop_Sw_Int_CollisionResolutionA>:

phStatus_t phacDiscLoop_Sw_Int_CollisionResolutionA(
                                                    phacDiscLoop_Sw_DataParams_t * pDataParams
                                                    )
{
 800881c:	b590      	push	{r4, r7, lr}
 800881e:	b08b      	sub	sp, #44	@ 0x2c
 8008820:	af02      	add	r7, sp, #8
 8008822:	6078      	str	r0, [r7, #4]
#if defined (NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS)
    phStatus_t PH_MEMLOC_REM   status = PH_ERR_SUCCESS;
 8008824:	2300      	movs	r3, #0
 8008826:	83fb      	strh	r3, [r7, #30]
    uint8_t    PH_MEMLOC_REM   bTypeANvbUid;
    uint8_t    PH_MEMLOC_COUNT bDeviceCount;
    uint8_t    PH_MEMLOC_COUNT bTypeATagIdx;
    uint8_t    PH_MEMLOC_COUNT bCascadeCodeIdx;
    uint8_t    PH_MEMLOC_BUF   aTypeAUid[7] = {0};
 8008828:	f107 030c 	add.w	r3, r7, #12
 800882c:	2200      	movs	r2, #0
 800882e:	601a      	str	r2, [r3, #0]
 8008830:	f8c3 2003 	str.w	r2, [r3, #3]
    uint8_t    PH_MEMLOC_REM   bCollDetected;
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_JEWEL_TAGS
    uint16_t   *pUIDLen;
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_JEWEL_TAGS */

    bRetryCount = 0;
 8008834:	2300      	movs	r3, #0
 8008836:	76bb      	strb	r3, [r7, #26]
    bDeviceCount = 0;
 8008838:	2300      	movs	r3, #0
 800883a:	777b      	strb	r3, [r7, #29]
    bTypeATagIdx = 0;
 800883c:	2300      	movs	r3, #0
 800883e:	773b      	strb	r3, [r7, #28]
    bCollDetected = PH_OFF;
 8008840:	2300      	movs	r3, #0
 8008842:	767b      	strb	r3, [r7, #25]

    /* Collision_Pending = 1 and Device limit  = 0 */
    if((0U != ((pDataParams->bCollPend & PHAC_DISCLOOP_POS_BIT_MASK_A))) && ((pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A] == 0x00U)))
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	7f9b      	ldrb	r3, [r3, #30]
 8008848:	f003 0301 	and.w	r3, r3, #1
 800884c:	2b00      	cmp	r3, #0
 800884e:	d00a      	beq.n	8008866 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4a>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	7a9b      	ldrb	r3, [r3, #10]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d106      	bne.n	8008866 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4a>
    {
        pDataParams->sTypeATargetInfo.bTotalTagsFound = 0;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 8008860:	f244 0385 	movw	r3, #16517	@ 0x4085
 8008864:	e2d9      	b.n	8008e1a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
    }

    /*Symbol 0*/
    /* Apply Guard time. */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	8a1b      	ldrh	r3, [r3, #16]
 800886e:	461a      	mov	r2, r3
 8008870:	2135      	movs	r1, #53	@ 0x35
 8008872:	f004 fd4d 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8008876:	4603      	mov	r3, r0
 8008878:	83fb      	strh	r3, [r7, #30]
 800887a:	8bfb      	ldrh	r3, [r7, #30]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d001      	beq.n	8008884 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x68>
 8008880:	8bfb      	ldrh	r3, [r7, #30]
 8008882:	e2ca      	b.n	8008e1a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_A]));

    /* Configure HW for the TypeA technology */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008888:	2101      	movs	r1, #1
 800888a:	4618      	mov	r0, r3
 800888c:	f003 fffa 	bl	800c884 <phhalHw_Pn5180_ApplyProtocolSettings>
 8008890:	4603      	mov	r3, r0
 8008892:	83fb      	strh	r3, [r7, #30]
 8008894:	8bfb      	ldrh	r3, [r7, #30]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d001      	beq.n	800889e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x82>
 800889a:	8bfb      	ldrh	r3, [r7, #30]
 800889c:	e2bd      	b.n	8008e1a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
        pDataParams->pHalDataParams,
        PHHAL_HW_CARDTYPE_ISO14443A));

    /* Send WakeUpA */
    status = phpalI14443p3a_WakeUpA(
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	335e      	adds	r3, #94	@ 0x5e
 80088a6:	4619      	mov	r1, r3
 80088a8:	4610      	mov	r0, r2
 80088aa:	f00a fa60 	bl	8012d6e <phpalI14443p3a_Sw_WakeUpA>
 80088ae:	4603      	mov	r3, r0
 80088b0:	83fb      	strh	r3, [r7, #30]
        pDataParams->pPal1443p3aDataParams,
        pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aAtqa);
    if ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 80088b2:	8bfb      	ldrh	r3, [r7, #30]
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	2b03      	cmp	r3, #3
 80088b8:	d109      	bne.n	80088ce <phacDiscLoop_Sw_Int_CollisionResolutionA+0xb2>
    {
        /* In case of EMVCo, return Collision Pending status. */
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d102      	bne.n	80088ca <phacDiscLoop_Sw_Int_CollisionResolutionA+0xae>
        {
            /* Report Error to Application and Application will perform PICC Reset */
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 80088c4:	f244 0381 	movw	r3, #16513	@ 0x4081
 80088c8:	e2a7      	b.n	8008e1a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
        }
        bCollDetected = PH_ON;
 80088ca:	2301      	movs	r3, #1
 80088cc:	767b      	strb	r3, [r7, #25]
    }

    /* Reset card detected count */
    pDataParams->sTypeATargetInfo.bT1TFlag = 0;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    pDataParams->sTypeATargetInfo.bTotalTagsFound = 0;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    /*Symbol 1*/
    if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 80088de:	8bfb      	ldrh	r3, [r7, #30]
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d14a      	bne.n	800897c <phacDiscLoop_Sw_Int_CollisionResolutionA+0x160>
    {
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_JEWEL_TAGS
        /*Symbol 2*/
        /* Check for T1T Tag*/
        if(pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aAtqa[0] == 0x00U)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	f040 809e 	bne.w	8008a2e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x212>
        {
            /* Enable Jewel Mode */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_JEWEL_MODE, PH_ON));
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088f6:	2201      	movs	r2, #1
 80088f8:	2120      	movs	r1, #32
 80088fa:	4618      	mov	r0, r3
 80088fc:	f004 fd08 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8008900:	4603      	mov	r3, r0
 8008902:	83fb      	strh	r3, [r7, #30]
 8008904:	8bfb      	ldrh	r3, [r7, #30]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d001      	beq.n	800890e <phacDiscLoop_Sw_Int_CollisionResolutionA+0xf2>
 800890a:	8bfb      	ldrh	r3, [r7, #30]
 800890c:	e285      	b.n	8008e1a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>

            pUIDLen = (uint16_t *)&(pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].bUidSize);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	336a      	adds	r3, #106	@ 0x6a
 8008912:	617b      	str	r3, [r7, #20]
            /*Symbol 23*/
            status = phalT1T_ReadUID(
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	3360      	adds	r3, #96	@ 0x60
 800891c:	697a      	ldr	r2, [r7, #20]
 800891e:	4619      	mov	r1, r3
 8008920:	f003 faf9 	bl	800bf16 <phalT1T_Sw_ReadUID>
 8008924:	4603      	mov	r3, r0
 8008926:	83fb      	strh	r3, [r7, #30]
                pDataParams->pAlT1TDataParams,
                pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aUid,
                pUIDLen);

            if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 8008928:	8bfb      	ldrh	r3, [r7, #30]
 800892a:	b2db      	uxtb	r3, r3
 800892c:	2b00      	cmp	r3, #0
 800892e:	d115      	bne.n	800895c <phacDiscLoop_Sw_Int_CollisionResolutionA+0x140>
            {
                /*Symbol 27*/
                /* indicates T1T card*/
                pDataParams->sTypeATargetInfo.bT1TFlag = 1;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2201      	movs	r2, #1
 8008934:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
                pDataParams->sTypeATargetInfo.bTotalTagsFound = 1;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2201      	movs	r2, #1
 800893c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
                pDataParams->bNumOfCards = 1;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2201      	movs	r2, #1
 8008944:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
                /* Symbol 26 */
                pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_A;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	7f9b      	ldrb	r3, [r3, #30]
 800894c:	f023 0301 	bic.w	r3, r3, #1
 8008950:	b2da      	uxtb	r2, r3
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	779a      	strb	r2, [r3, #30]

                return PH_ADD_COMPCODE(PH_COMP_AC_DISCLOOP, PH_ERR_SUCCESS);
 8008956:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800895a:	e25e      	b.n	8008e1a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
            }
            else
            {
                /*Symbol 24*/
                if ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800895c:	8bfb      	ldrh	r3, [r7, #30]
 800895e:	b2db      	uxtb	r3, r3
 8008960:	2b03      	cmp	r3, #3
 8008962:	d109      	bne.n	8008978 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x15c>
                {
                    /* Symbol 25 */
                    pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	7f9b      	ldrb	r3, [r3, #30]
 8008968:	f043 0301 	orr.w	r3, r3, #1
 800896c:	b2da      	uxtb	r2, r3
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	779a      	strb	r2, [r3, #30]
                    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 8008972:	f244 0381 	movw	r3, #16513	@ 0x4081
 8008976:	e250      	b.n	8008e1a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                }
                return status;
 8008978:	8bfb      	ldrh	r3, [r7, #30]
 800897a:	e24e      	b.n	8008e1a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_JEWEL_TAGS */
    }
    else
    {
        /* Device count = 0 and any Error */
        if(((status & PH_ERR_MASK) != PH_ERR_SUCCESS)
 800897c:	8bfb      	ldrh	r3, [r7, #30]
 800897e:	b2db      	uxtb	r3, r3
 8008980:	2b00      	cmp	r3, #0
 8008982:	d010      	beq.n	80089a6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x18a>
          && (pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A] == 0x00U))
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	7a9b      	ldrb	r3, [r3, #10]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d10c      	bne.n	80089a6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x18a>
        {
            pDataParams->sTypeATargetInfo.bTotalTagsFound = 0;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2200      	movs	r2, #0
 8008990:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
            pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	7f9b      	ldrb	r3, [r3, #30]
 8008998:	f043 0301 	orr.w	r3, r3, #1
 800899c:	b2da      	uxtb	r2, r3
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	779a      	strb	r2, [r3, #30]
            return status;
 80089a2:	8bfb      	ldrh	r3, [r7, #30]
 80089a4:	e239      	b.n	8008e1a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
        }

        /* As per EMVCo 3.1, wait for at least Tmin retransmission in case of timeout error. */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d131      	bne.n	8008a14 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x1f8>
        {
            bRetryCount = 0;
 80089b0:	2300      	movs	r3, #0
 80089b2:	76bb      	strb	r3, [r7, #26]
            while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 80089b4:	e01b      	b.n	80089ee <phacDiscLoop_Sw_Int_CollisionResolutionA+0x1d2>
            {
                bRetryCount++;
 80089b6:	7ebb      	ldrb	r3, [r7, #26]
 80089b8:	3301      	adds	r3, #1
 80089ba:	76bb      	strb	r3, [r7, #26]
                /* Wait for at least Tmin retransmission delay. */
                PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089c0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80089c4:	2100      	movs	r1, #0
 80089c6:	4618      	mov	r0, r3
 80089c8:	f004 fc1e 	bl	800d208 <phhalHw_Pn5180_Wait>
 80089cc:	4603      	mov	r3, r0
 80089ce:	83fb      	strh	r3, [r7, #30]
 80089d0:	8bfb      	ldrh	r3, [r7, #30]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d001      	beq.n	80089da <phacDiscLoop_Sw_Int_CollisionResolutionA+0x1be>
 80089d6:	8bfb      	ldrh	r3, [r7, #30]
 80089d8:	e21f      	b.n	8008e1a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                    pDataParams->pHalDataParams,
                    PHHAL_HW_TIME_MICROSECONDS,
                    PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

                status = phpalI14443p3a_WakeUpA(
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	335e      	adds	r3, #94	@ 0x5e
 80089e2:	4619      	mov	r1, r3
 80089e4:	4610      	mov	r0, r2
 80089e6:	f00a f9c2 	bl	8012d6e <phpalI14443p3a_Sw_WakeUpA>
 80089ea:	4603      	mov	r3, r0
 80089ec:	83fb      	strh	r3, [r7, #30]
            while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 80089ee:	8bfb      	ldrh	r3, [r7, #30]
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d102      	bne.n	80089fc <phacDiscLoop_Sw_Int_CollisionResolutionA+0x1e0>
 80089f6:	7ebb      	ldrb	r3, [r7, #26]
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d9dc      	bls.n	80089b6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x19a>
                    pDataParams->pPal1443p3aDataParams,
                    pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aAtqa);
            }

            /* Collision error may happen */
            pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_A;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	7f9b      	ldrb	r3, [r3, #30]
 8008a00:	f023 0301 	bic.w	r3, r3, #1
 8008a04:	b2da      	uxtb	r2, r3
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	779a      	strb	r2, [r3, #30]

            /* Some error that can't be handled */
            PH_CHECK_SUCCESS(status);
 8008a0a:	8bfb      	ldrh	r3, [r7, #30]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00e      	beq.n	8008a2e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x212>
 8008a10:	8bfb      	ldrh	r3, [r7, #30]
 8008a12:	e202      	b.n	8008e1a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
        }
        else
        {
            /*Symbol 1*/
            if ((status & PH_ERR_MASK) != PH_ERR_COLLISION_ERROR)
 8008a14:	8bfb      	ldrh	r3, [r7, #30]
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	2b03      	cmp	r3, #3
 8008a1a:	d008      	beq.n	8008a2e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x212>
            {
                pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_A;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	7f9b      	ldrb	r3, [r3, #30]
 8008a20:	f023 0301 	bic.w	r3, r3, #1
 8008a24:	b2da      	uxtb	r2, r3
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	779a      	strb	r2, [r3, #30]
                return status;
 8008a2a:	8bfb      	ldrh	r3, [r7, #30]
 8008a2c:	e1f5      	b.n	8008e1a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
            }
        }
    }

    /*Symbol 2*/
    if(0U == (pDataParams->bUseAntiColl))
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f040 81d9 	bne.w	8008dec <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5d0>
    {
        /*Symbol 23*/
        pDataParams->bCollPend |= (uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_A;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	7f9b      	ldrb	r3, [r3, #30]
 8008a3e:	f043 0301 	orr.w	r3, r3, #1
 8008a42:	b2da      	uxtb	r2, r3
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	779a      	strb	r2, [r3, #30]
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 8008a48:	f244 0381 	movw	r3, #16513	@ 0x4081
 8008a4c:	e1e5      	b.n	8008e1a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
    }

    while (bDeviceCount <= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A])
    {
        if (bTypeATagIdx <= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A])
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	7a9b      	ldrb	r3, [r3, #10]
 8008a52:	7f3a      	ldrb	r2, [r7, #28]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	f200 81c6 	bhi.w	8008de6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5ca>
        {
            /*Symbol 4*/
            pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_A;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	7f9b      	ldrb	r3, [r3, #30]
 8008a5e:	f023 0301 	bic.w	r3, r3, #1
 8008a62:	b2da      	uxtb	r2, r3
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	779a      	strb	r2, [r3, #30]

            /*Symbol 4, 16*/
            for (bCascadeCodeIdx=0; bCascadeCodeIdx<3U; bCascadeCodeIdx++)
 8008a68:	2300      	movs	r3, #0
 8008a6a:	76fb      	strb	r3, [r7, #27]
 8008a6c:	e13f      	b.n	8008cee <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4d2>
            {
                bTypeANvbUid = 0;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	74fb      	strb	r3, [r7, #19]

                /* Anti-collision loop */
                while (bTypeANvbUid != 0x40U)
 8008a72:	e0a8      	b.n	8008bc6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x3aa>
                {
                    /*Symbol 5,6,7*/
                    status = phpalI14443p3a_Anticollision(
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008a78:	7efb      	ldrb	r3, [r7, #27]
 8008a7a:	4a9a      	ldr	r2, [pc, #616]	@ (8008ce4 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c8>)
 8008a7c:	5cd1      	ldrb	r1, [r2, r3]
 8008a7e:	7cfc      	ldrb	r4, [r7, #19]
 8008a80:	f107 020c 	add.w	r2, r7, #12
 8008a84:	f107 0313 	add.w	r3, r7, #19
 8008a88:	9301      	str	r3, [sp, #4]
 8008a8a:	f107 030c 	add.w	r3, r7, #12
 8008a8e:	9300      	str	r3, [sp, #0]
 8008a90:	4623      	mov	r3, r4
 8008a92:	f00a f9d2 	bl	8012e3a <phpalI14443p3a_Sw_Anticollision>
 8008a96:	4603      	mov	r3, r0
 8008a98:	83fb      	strh	r3, [r7, #30]
                        bTypeANvbUid,                        /* UID len = 0 */
                        aTypeAUid,                           /* UID out */
                        &bTypeANvbUid);                      /* UID out size */

                    /* As per EMVCo 3.1, wait for at least Tmin retransmission in case of timeout error. */
                    if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d12e      	bne.n	8008b02 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x2e6>
                    {
                        bRetryCount = 0;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	76bb      	strb	r3, [r7, #26]
                        while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 8008aa8:	e024      	b.n	8008af4 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x2d8>
                        {
                            bRetryCount++;
 8008aaa:	7ebb      	ldrb	r3, [r7, #26]
 8008aac:	3301      	adds	r3, #1
 8008aae:	76bb      	strb	r3, [r7, #26]
                            /* Wait for at least Tmin retransmission delay. */
                            PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ab4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8008ab8:	2100      	movs	r1, #0
 8008aba:	4618      	mov	r0, r3
 8008abc:	f004 fba4 	bl	800d208 <phhalHw_Pn5180_Wait>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	83fb      	strh	r3, [r7, #30]
 8008ac4:	8bfb      	ldrh	r3, [r7, #30]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d001      	beq.n	8008ace <phacDiscLoop_Sw_Int_CollisionResolutionA+0x2b2>
 8008aca:	8bfb      	ldrh	r3, [r7, #30]
 8008acc:	e1a5      	b.n	8008e1a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                                pDataParams->pHalDataParams,
                                PHHAL_HW_TIME_MICROSECONDS,
                                PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

                            status = phpalI14443p3a_Anticollision(
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008ad2:	7efb      	ldrb	r3, [r7, #27]
 8008ad4:	4a83      	ldr	r2, [pc, #524]	@ (8008ce4 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c8>)
 8008ad6:	5cd1      	ldrb	r1, [r2, r3]
 8008ad8:	7cfc      	ldrb	r4, [r7, #19]
 8008ada:	f107 020c 	add.w	r2, r7, #12
 8008ade:	f107 0313 	add.w	r3, r7, #19
 8008ae2:	9301      	str	r3, [sp, #4]
 8008ae4:	f107 030c 	add.w	r3, r7, #12
 8008ae8:	9300      	str	r3, [sp, #0]
 8008aea:	4623      	mov	r3, r4
 8008aec:	f00a f9a5 	bl	8012e3a <phpalI14443p3a_Sw_Anticollision>
 8008af0:	4603      	mov	r3, r0
 8008af2:	83fb      	strh	r3, [r7, #30]
                        while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 8008af4:	8bfb      	ldrh	r3, [r7, #30]
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d102      	bne.n	8008b02 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x2e6>
 8008afc:	7ebb      	ldrb	r3, [r7, #26]
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d9d3      	bls.n	8008aaa <phacDiscLoop_Sw_Int_CollisionResolutionA+0x28e>
                                &bTypeANvbUid);                      /* UID out size */
                        }
                    }

                    /*Symbol 8, 13*/
                    if ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 8008b02:	8bfb      	ldrh	r3, [r7, #30]
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	2b03      	cmp	r3, #3
 8008b08:	d158      	bne.n	8008bbc <phacDiscLoop_Sw_Int_CollisionResolutionA+0x3a0>
                    {
                        /* Emvco: case_id TA302_00 */
                        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d102      	bne.n	8008b1a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x2fe>
                        {
                            /* Report Error to Application and Application will perform PICC Reset */
                            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 8008b14:	f244 0381 	movw	r3, #16513	@ 0x4081
 8008b18:	e17f      	b.n	8008e1a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                        }

                        /*Symbol 9*/
                        pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	7f9b      	ldrb	r3, [r3, #30]
 8008b1e:	f043 0301 	orr.w	r3, r3, #1
 8008b22:	b2da      	uxtb	r2, r3
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	779a      	strb	r2, [r3, #30]
                        if(bTypeATagIdx >= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A])
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	7a9b      	ldrb	r3, [r3, #10]
 8008b2c:	7f3a      	ldrb	r2, [r7, #28]
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d301      	bcc.n	8008b36 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x31a>
                        {
                            /*Symbol 10*/
                            return PH_ERR_SUCCESS;
 8008b32:	2300      	movs	r3, #0
 8008b34:	e171      	b.n	8008e1a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                        }

                        /* Increment the number of valid bits and set the collision bit to one and handle based on Byte and Bit boundaries. */
                        if ((bTypeANvbUid & ((uint8_t)0x07U)) <  (uint8_t)7U)
 8008b36:	7cfb      	ldrb	r3, [r7, #19]
 8008b38:	f003 0307 	and.w	r3, r3, #7
 8008b3c:	2b06      	cmp	r3, #6
 8008b3e:	dc1d      	bgt.n	8008b7c <phacDiscLoop_Sw_Int_CollisionResolutionA+0x360>
                        {
                            bTypeANvbUid++;
 8008b40:	7cfb      	ldrb	r3, [r7, #19]
 8008b42:	3301      	adds	r3, #1
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	74fb      	strb	r3, [r7, #19]

                            /* Set collision bit to 1 to resolve tag with highest UID */
                            aTypeAUid[(uint8_t)((bTypeANvbUid & 0xF0U) >> 4U)] |= (uint8_t)(0x01 << ((bTypeANvbUid & ((uint8_t)0x07U)) - 1U));
 8008b48:	7cfb      	ldrb	r3, [r7, #19]
 8008b4a:	091b      	lsrs	r3, r3, #4
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	3320      	adds	r3, #32
 8008b50:	443b      	add	r3, r7
 8008b52:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8008b56:	7cfb      	ldrb	r3, [r7, #19]
 8008b58:	f003 0307 	and.w	r3, r3, #7
 8008b5c:	3b01      	subs	r3, #1
 8008b5e:	2101      	movs	r1, #1
 8008b60:	fa01 f303 	lsl.w	r3, r1, r3
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	7cf9      	ldrb	r1, [r7, #19]
 8008b68:	0909      	lsrs	r1, r1, #4
 8008b6a:	b2c9      	uxtb	r1, r1
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	b2da      	uxtb	r2, r3
 8008b70:	f101 0320 	add.w	r3, r1, #32
 8008b74:	443b      	add	r3, r7
 8008b76:	f803 2c14 	strb.w	r2, [r3, #-20]
 8008b7a:	e024      	b.n	8008bc6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x3aa>
                        }
                        else
                        {
                            bTypeANvbUid = (uint8_t)((((bTypeANvbUid & 0xF0U) >> 4U) + 1U) << 4U);
 8008b7c:	7cfb      	ldrb	r3, [r7, #19]
 8008b7e:	091b      	lsrs	r3, r3, #4
 8008b80:	b2db      	uxtb	r3, r3
 8008b82:	3301      	adds	r3, #1
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	011b      	lsls	r3, r3, #4
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	74fb      	strb	r3, [r7, #19]

                            /* Set collision bit to 1 to resolve tag with highest UID */
                            aTypeAUid[(uint8_t)(((bTypeANvbUid & 0xF0U) >> 4U) - 1U)] |= (uint8_t)(0x80U);
 8008b8c:	7cfb      	ldrb	r3, [r7, #19]
 8008b8e:	091b      	lsrs	r3, r3, #4
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	3b01      	subs	r3, #1
 8008b94:	b2db      	uxtb	r3, r3
 8008b96:	3320      	adds	r3, #32
 8008b98:	443b      	add	r3, r7
 8008b9a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8008b9e:	7cfa      	ldrb	r2, [r7, #19]
 8008ba0:	0912      	lsrs	r2, r2, #4
 8008ba2:	b2d2      	uxtb	r2, r2
 8008ba4:	3a01      	subs	r2, #1
 8008ba6:	b2d2      	uxtb	r2, r2
 8008ba8:	4611      	mov	r1, r2
 8008baa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008bae:	b2da      	uxtb	r2, r3
 8008bb0:	f101 0320 	add.w	r3, r1, #32
 8008bb4:	443b      	add	r3, r7
 8008bb6:	f803 2c14 	strb.w	r2, [r3, #-20]
 8008bba:	e004      	b.n	8008bc6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x3aa>
                    }
                    else
                    {
                        /* Check success */
                        /* Some error that can't be handled */
                        PH_CHECK_SUCCESS(status); /* TA302_01*/
 8008bbc:	8bfb      	ldrh	r3, [r7, #30]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d001      	beq.n	8008bc6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x3aa>
 8008bc2:	8bfb      	ldrh	r3, [r7, #30]
 8008bc4:	e129      	b.n	8008e1a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                while (bTypeANvbUid != 0x40U)
 8008bc6:	7cfb      	ldrb	r3, [r7, #19]
 8008bc8:	2b40      	cmp	r3, #64	@ 0x40
 8008bca:	f47f af53 	bne.w	8008a74 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x258>
                    }
                } /*End of while (bTypeANvbUid != 0x40U)*/

                /* Atqa(which indicates NFCID1 size) is invalid since collision is encountered while receiving Atqa */
                if (bCollDetected == PH_OFF)
 8008bce:	7e7b      	ldrb	r3, [r7, #25]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d12d      	bne.n	8008c30 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x414>
                    * ISO14443-3 Article 6.5.2.1
                    * EMVCo article 5.4.2
                    * So For Single UID Size The NFC Forum Device MUST set nfcid10 of a single-size NFCID1 and nfcid13
                    * of a double-size NFCID1 to a value different from 88h.
                    */
                    if(((0U == ((pDataParams->bCollPend & PHAC_DISCLOOP_POS_BIT_MASK_A))))
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	7f9b      	ldrb	r3, [r3, #30]
 8008bd8:	f003 0301 	and.w	r3, r3, #1
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d127      	bne.n	8008c30 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x414>
                       && ((((pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aAtqa[0] & 0xC0U) == 0x00U)
 8008be0:	7f3a      	ldrb	r2, [r7, #28]
 8008be2:	6879      	ldr	r1, [r7, #4]
 8008be4:	4613      	mov	r3, r2
 8008be6:	011b      	lsls	r3, r3, #4
 8008be8:	1a9b      	subs	r3, r3, r2
 8008bea:	440b      	add	r3, r1
 8008bec:	335e      	adds	r3, #94	@ 0x5e
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d104      	bne.n	8008c02 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x3e6>
                       && (aCascadeCodes[bCascadeCodeIdx] == PHPAL_I14443P3A_CASCADE_LEVEL_1))
 8008bf8:	7efb      	ldrb	r3, [r7, #27]
 8008bfa:	4a3a      	ldr	r2, [pc, #232]	@ (8008ce4 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c8>)
 8008bfc:	5cd3      	ldrb	r3, [r2, r3]
 8008bfe:	2b93      	cmp	r3, #147	@ 0x93
 8008c00:	d010      	beq.n	8008c24 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x408>
                       || (((pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aAtqa[0] & 0xC0U) == 0x40U)
 8008c02:	7f3a      	ldrb	r2, [r7, #28]
 8008c04:	6879      	ldr	r1, [r7, #4]
 8008c06:	4613      	mov	r3, r2
 8008c08:	011b      	lsls	r3, r3, #4
 8008c0a:	1a9b      	subs	r3, r3, r2
 8008c0c:	440b      	add	r3, r1
 8008c0e:	335e      	adds	r3, #94	@ 0x5e
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008c16:	2b40      	cmp	r3, #64	@ 0x40
 8008c18:	d10a      	bne.n	8008c30 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x414>
                       && (aCascadeCodes[bCascadeCodeIdx] == PHPAL_I14443P3A_CASCADE_LEVEL_2)))
 8008c1a:	7efb      	ldrb	r3, [r7, #27]
 8008c1c:	4a31      	ldr	r2, [pc, #196]	@ (8008ce4 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c8>)
 8008c1e:	5cd3      	ldrb	r3, [r2, r3]
 8008c20:	2b95      	cmp	r3, #149	@ 0x95
 8008c22:	d105      	bne.n	8008c30 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x414>
                       && (aTypeAUid[0] == 0x88U))
 8008c24:	7b3b      	ldrb	r3, [r7, #12]
 8008c26:	2b88      	cmp	r3, #136	@ 0x88
 8008c28:	d102      	bne.n	8008c30 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x414>
                    {
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_AC_DISCLOOP);
 8008c2a:	f244 0306 	movw	r3, #16390	@ 0x4006
 8008c2e:	e0f4      	b.n	8008e1a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                    }
                }

                /*symbol 14*/
                status = phpalI14443p3a_Select(
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008c34:	7efb      	ldrb	r3, [r7, #27]
 8008c36:	4a2b      	ldr	r2, [pc, #172]	@ (8008ce4 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c8>)
 8008c38:	5cd1      	ldrb	r1, [r2, r3]
 8008c3a:	7f3a      	ldrb	r2, [r7, #28]
 8008c3c:	4613      	mov	r3, r2
 8008c3e:	011b      	lsls	r3, r3, #4
 8008c40:	1a9b      	subs	r3, r3, r2
 8008c42:	3360      	adds	r3, #96	@ 0x60
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	4413      	add	r3, r2
 8008c48:	330b      	adds	r3, #11
 8008c4a:	f107 020c 	add.w	r2, r7, #12
 8008c4e:	f00a fb2b 	bl	80132a8 <phpalI14443p3a_Sw_Select>
 8008c52:	4603      	mov	r3, r0
 8008c54:	83fb      	strh	r3, [r7, #30]
                    aCascadeCodes[bCascadeCodeIdx],
                    aTypeAUid,
                    &pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aSak);

                /* As per EMVCo 3.1, wait for at least Tmin retransmission in case of timeout error. */
                if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d12e      	bne.n	8008cbe <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4a2>
                {
                    bRetryCount = 0;
 8008c60:	2300      	movs	r3, #0
 8008c62:	76bb      	strb	r3, [r7, #26]
                    while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 8008c64:	e024      	b.n	8008cb0 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x494>
                    {
                        bRetryCount++;
 8008c66:	7ebb      	ldrb	r3, [r7, #26]
 8008c68:	3301      	adds	r3, #1
 8008c6a:	76bb      	strb	r3, [r7, #26]
                        /* Wait for at least Tmin retransmission delay. */
                        PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c70:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8008c74:	2100      	movs	r1, #0
 8008c76:	4618      	mov	r0, r3
 8008c78:	f004 fac6 	bl	800d208 <phhalHw_Pn5180_Wait>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	83fb      	strh	r3, [r7, #30]
 8008c80:	8bfb      	ldrh	r3, [r7, #30]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d001      	beq.n	8008c8a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x46e>
 8008c86:	8bfb      	ldrh	r3, [r7, #30]
 8008c88:	e0c7      	b.n	8008e1a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                            pDataParams->pHalDataParams,
                            PHHAL_HW_TIME_MICROSECONDS,
                            PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

                        status = phpalI14443p3a_Select(
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008c8e:	7efb      	ldrb	r3, [r7, #27]
 8008c90:	4a14      	ldr	r2, [pc, #80]	@ (8008ce4 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c8>)
 8008c92:	5cd1      	ldrb	r1, [r2, r3]
 8008c94:	7f3a      	ldrb	r2, [r7, #28]
 8008c96:	4613      	mov	r3, r2
 8008c98:	011b      	lsls	r3, r3, #4
 8008c9a:	1a9b      	subs	r3, r3, r2
 8008c9c:	3360      	adds	r3, #96	@ 0x60
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	4413      	add	r3, r2
 8008ca2:	330b      	adds	r3, #11
 8008ca4:	f107 020c 	add.w	r2, r7, #12
 8008ca8:	f00a fafe 	bl	80132a8 <phpalI14443p3a_Sw_Select>
 8008cac:	4603      	mov	r3, r0
 8008cae:	83fb      	strh	r3, [r7, #30]
                    while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 8008cb0:	8bfb      	ldrh	r3, [r7, #30]
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d102      	bne.n	8008cbe <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4a2>
 8008cb8:	7ebb      	ldrb	r3, [r7, #26]
 8008cba:	2b01      	cmp	r3, #1
 8008cbc:	d9d3      	bls.n	8008c66 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x44a>
                            aTypeAUid,
                            &pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aSak);
                    }
                }

                if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 8008cbe:	8bfb      	ldrh	r3, [r7, #30]
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d10c      	bne.n	8008ce0 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c4>
                {
                    /*Symbol 15*/
                    if ((0U == (pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aSak & 0x04U)))
 8008cc6:	7f3a      	ldrb	r2, [r7, #28]
 8008cc8:	6879      	ldr	r1, [r7, #4]
 8008cca:	4613      	mov	r3, r2
 8008ccc:	011b      	lsls	r3, r3, #4
 8008cce:	1a9b      	subs	r3, r3, r2
 8008cd0:	440b      	add	r3, r1
 8008cd2:	336b      	adds	r3, #107	@ 0x6b
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	f003 0304 	and.w	r3, r3, #4
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d104      	bne.n	8008ce8 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4cc>
                    {
                        /*UID Complete*/
                        break;
 8008cde:	e00a      	b.n	8008cf6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4da>
                    }
                }
                else
                {
                    return status;
 8008ce0:	8bfb      	ldrh	r3, [r7, #30]
 8008ce2:	e09a      	b.n	8008e1a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
 8008ce4:	08020174 	.word	0x08020174
            for (bCascadeCodeIdx=0; bCascadeCodeIdx<3U; bCascadeCodeIdx++)
 8008ce8:	7efb      	ldrb	r3, [r7, #27]
 8008cea:	3301      	adds	r3, #1
 8008cec:	76fb      	strb	r3, [r7, #27]
 8008cee:	7efb      	ldrb	r3, [r7, #27]
 8008cf0:	2b02      	cmp	r3, #2
 8008cf2:	f67f aebc 	bls.w	8008a6e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x252>
                }

            } /*for()*/

            /* If select was successful */
            if (status == PH_ERR_SUCCESS)
 8008cf6:	8bfb      	ldrh	r3, [r7, #30]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d174      	bne.n	8008de6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5ca>
            {
                /*Symbol 18*/
                status = phpalI14443p3a_GetSerialNo(
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008d00:	7f3a      	ldrb	r2, [r7, #28]
 8008d02:	4613      	mov	r3, r2
 8008d04:	011b      	lsls	r3, r3, #4
 8008d06:	1a9b      	subs	r3, r3, r2
 8008d08:	3358      	adds	r3, #88	@ 0x58
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	4413      	add	r3, r2
 8008d0e:	f103 0108 	add.w	r1, r3, #8
 8008d12:	7f3a      	ldrb	r2, [r7, #28]
 8008d14:	4613      	mov	r3, r2
 8008d16:	011b      	lsls	r3, r3, #4
 8008d18:	1a9b      	subs	r3, r3, r2
 8008d1a:	3360      	adds	r3, #96	@ 0x60
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	4413      	add	r3, r2
 8008d20:	330a      	adds	r3, #10
 8008d22:	461a      	mov	r2, r3
 8008d24:	f00a fd91 	bl	801384a <phpalI14443p3a_Sw_GetSerialNo>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	83fb      	strh	r3, [r7, #30]
                    pDataParams->pPal1443p3aDataParams,
                    &pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aUid[0],
                    &pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].bUidSize);

                PH_CHECK_SUCCESS(status);
 8008d2c:	8bfb      	ldrh	r3, [r7, #30]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d001      	beq.n	8008d36 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x51a>
 8008d32:	8bfb      	ldrh	r3, [r7, #30]
 8008d34:	e071      	b.n	8008e1a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>

                /*Symbol 17*/
                bTypeATagIdx++;
 8008d36:	7f3b      	ldrb	r3, [r7, #28]
 8008d38:	3301      	adds	r3, #1
 8008d3a:	773b      	strb	r3, [r7, #28]

                /*Symbol 19*/
                if((0U != ((pDataParams->bCollPend & PHAC_DISCLOOP_POS_BIT_MASK_A))) && (bTypeATagIdx < pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A]))
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	7f9b      	ldrb	r3, [r3, #30]
 8008d40:	f003 0301 	and.w	r3, r3, #1
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d057      	beq.n	8008df8 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5dc>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	7a9b      	ldrb	r3, [r3, #10]
 8008d4c:	7f3a      	ldrb	r2, [r7, #28]
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d252      	bcs.n	8008df8 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5dc>
                {
                    /* Symbol 20 */
                    status = phpalI14443p3a_HaltA(pDataParams->pPal1443p3aDataParams);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d56:	4618      	mov	r0, r3
 8008d58:	f00a f818 	bl	8012d8c <phpalI14443p3a_Sw_HaltA>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	83fb      	strh	r3, [r7, #30]
                    if (status != PH_ERR_SUCCESS)
 8008d60:	8bfb      	ldrh	r3, [r7, #30]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d001      	beq.n	8008d6a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x54e>
                    {
                        /* Halt A has failed, can't count this as detected tag */
                        return status;
 8008d66:	8bfb      	ldrh	r3, [r7, #30]
 8008d68:	e057      	b.n	8008e1a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                    }

                    /* Update the corresponding Layer 3 dataparam to indicate the Tag is in HALT State. */
                    (pDataParams->sTypeATargetInfo).aTypeA_I3P3[bTypeATagIdx - (uint8_t)1U].bSleep = (uint8_t)1U;
 8008d6a:	7f3b      	ldrb	r3, [r7, #28]
 8008d6c:	1e5a      	subs	r2, r3, #1
 8008d6e:	6879      	ldr	r1, [r7, #4]
 8008d70:	4613      	mov	r3, r2
 8008d72:	011b      	lsls	r3, r3, #4
 8008d74:	1a9b      	subs	r3, r3, r2
 8008d76:	440b      	add	r3, r1
 8008d78:	336c      	adds	r3, #108	@ 0x6c
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	701a      	strb	r2, [r3, #0]

                    /* Symbol 21 */
                    status = phpalI14443p3a_RequestA(
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008d82:	7f3a      	ldrb	r2, [r7, #28]
 8008d84:	4613      	mov	r3, r2
 8008d86:	011b      	lsls	r3, r3, #4
 8008d88:	1a9b      	subs	r3, r3, r2
 8008d8a:	3358      	adds	r3, #88	@ 0x58
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	4413      	add	r3, r2
 8008d90:	3306      	adds	r3, #6
 8008d92:	4619      	mov	r1, r3
 8008d94:	f009 ffdc 	bl	8012d50 <phpalI14443p3a_Sw_RequestA>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	83fb      	strh	r3, [r7, #30]
                        pDataParams->pPal1443p3aDataParams,
                        pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aAtqa);

                    if((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 8008d9c:	8bfb      	ldrh	r3, [r7, #30]
 8008d9e:	b2db      	uxtb	r3, r3
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d112      	bne.n	8008dca <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5ae>
                    {
                        /*Symbol 3*/
                        if(pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aAtqa[0] == 0x00U)
 8008da4:	7f3a      	ldrb	r2, [r7, #28]
 8008da6:	6879      	ldr	r1, [r7, #4]
 8008da8:	4613      	mov	r3, r2
 8008daa:	011b      	lsls	r3, r3, #4
 8008dac:	1a9b      	subs	r3, r3, r2
 8008dae:	440b      	add	r3, r1
 8008db0:	335e      	adds	r3, #94	@ 0x5e
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d116      	bne.n	8008de6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5ca>
                        {
                            /*Symbol 23*/
                            pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	7f9b      	ldrb	r3, [r3, #30]
 8008dbc:	f043 0301 	orr.w	r3, r3, #1
 8008dc0:	b2da      	uxtb	r2, r3
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	779a      	strb	r2, [r3, #30]
                            return PH_ERR_SUCCESS;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	e027      	b.n	8008e1a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                        }
                    }
                    else if((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 8008dca:	8bfb      	ldrh	r3, [r7, #30]
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	2b03      	cmp	r3, #3
 8008dd0:	d107      	bne.n	8008de2 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5c6>
                    {
                        /* More device to resolve */
                        pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	7f9b      	ldrb	r3, [r3, #30]
 8008dd6:	f043 0301 	orr.w	r3, r3, #1
 8008dda:	b2da      	uxtb	r2, r3
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	779a      	strb	r2, [r3, #30]
 8008de0:	e001      	b.n	8008de6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5ca>
                    }
                    else
                    {
                        return status;
 8008de2:	8bfb      	ldrh	r3, [r7, #30]
 8008de4:	e019      	b.n	8008e1a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                {
                    break;
                }
            }
        }
        bDeviceCount++;
 8008de6:	7f7b      	ldrb	r3, [r7, #29]
 8008de8:	3301      	adds	r3, #1
 8008dea:	777b      	strb	r3, [r7, #29]
    while (bDeviceCount <= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A])
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	7a9b      	ldrb	r3, [r3, #10]
 8008df0:	7f7a      	ldrb	r2, [r7, #29]
 8008df2:	429a      	cmp	r2, r3
 8008df4:	f67f ae2b 	bls.w	8008a4e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x232>
    } /* End of while(bDeviceCount < pDataParams->baPasConDevLim[0]) */

    pDataParams->sTypeATargetInfo.bTotalTagsFound = bTypeATagIdx;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	7f3a      	ldrb	r2, [r7, #28]
 8008dfc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    pDataParams->bNumOfCards = bTypeATagIdx;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	7f3a      	ldrb	r2, [r7, #28]
 8008e04:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    if(pDataParams->sTypeATargetInfo.bTotalTagsFound == 0U)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d102      	bne.n	8008e18 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fc>
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 8008e12:	f244 0385 	movw	r3, #16517	@ 0x4085
 8008e16:	e000      	b.n	8008e1a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
    }

    return PH_ERR_SUCCESS;
 8008e18:	2300      	movs	r3, #0
#else /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3724      	adds	r7, #36	@ 0x24
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd90      	pop	{r4, r7, pc}
 8008e22:	bf00      	nop

08008e24 <phacDiscLoop_Sw_Int_ActivateA>:

phStatus_t phacDiscLoop_Sw_Int_ActivateA(
                                         phacDiscLoop_Sw_DataParams_t * pDataParams,
                                         uint8_t bTypeATagIdx
                                         )
{
 8008e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e26:	b08f      	sub	sp, #60	@ 0x3c
 8008e28:	af04      	add	r7, sp, #16
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	70fb      	strb	r3, [r7, #3]
#if defined (NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS)
    phStatus_t   PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 8008e30:	2300      	movs	r3, #0
 8008e32:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint8_t      PH_MEMLOC_BUF aUid[10];
    uint8_t      PH_MEMLOC_REM bUidLen;
    uint8_t      PH_MEMLOC_REM bMoreCardsAvailable;
    uint8_t      PH_MEMLOC_REM bTagType;
    uint8_t      PH_MEMLOC_REM bIndex;
    uint8_t      PH_MEMLOC_REM bActiveDevice = 0;
 8008e34:	2300      	movs	r3, #0
 8008e36:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    uint8_t      PH_MEMLOC_REM bFsdi;
    uint8_t      PH_MEMLOC_REM bFsci;
    uint16_t     PH_MEMLOC_REM wDataRate;
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */

    if ((bTypeATagIdx >= pDataParams->sTypeATargetInfo.bTotalTagsFound) || ( bTypeATagIdx >= PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED ))
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008e40:	78fa      	ldrb	r2, [r7, #3]
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d202      	bcs.n	8008e4c <phacDiscLoop_Sw_Int_ActivateA+0x28>
 8008e46:	78fb      	ldrb	r3, [r7, #3]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d002      	beq.n	8008e52 <phacDiscLoop_Sw_Int_ActivateA+0x2e>
    {
        /* Out of range or no such card found yet */
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8008e4c:	f244 0321 	movw	r3, #16417	@ 0x4021
 8008e50:	e1d1      	b.n	80091f6 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
    }

    if(pDataParams->sTypeATargetInfo.bTotalTagsFound > PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	d902      	bls.n	8008e62 <phacDiscLoop_Sw_Int_ActivateA+0x3e>
    {
        /* To fix coverity issue */
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_AC_DISCLOOP);
 8008e5c:	f244 037f 	movw	r3, #16511	@ 0x407f
 8008e60:	e1c9      	b.n	80091f6 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
    }

    /* If it is Single device or selected device is at last position, In both case device is already active */
    if(pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].bSleep == 1U) /* Step 0 */
 8008e62:	78fa      	ldrb	r2, [r7, #3]
 8008e64:	6879      	ldr	r1, [r7, #4]
 8008e66:	4613      	mov	r3, r2
 8008e68:	011b      	lsls	r3, r3, #4
 8008e6a:	1a9b      	subs	r3, r3, r2
 8008e6c:	440b      	add	r3, r1
 8008e6e:	336c      	adds	r3, #108	@ 0x6c
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d175      	bne.n	8008f62 <phacDiscLoop_Sw_Int_ActivateA+0x13e>
    {
        for (bIndex = 0; bIndex < pDataParams->sTypeATargetInfo.bTotalTagsFound; bIndex++)
 8008e76:	2300      	movs	r3, #0
 8008e78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008e7c:	e021      	b.n	8008ec2 <phacDiscLoop_Sw_Int_ActivateA+0x9e>
        {
            /* Step 1 */
            if ((pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].bSleep == 0U) && (bIndex != bTypeATagIdx))
 8008e7e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008e82:	6879      	ldr	r1, [r7, #4]
 8008e84:	4613      	mov	r3, r2
 8008e86:	011b      	lsls	r3, r3, #4
 8008e88:	1a9b      	subs	r3, r3, r2
 8008e8a:	440b      	add	r3, r1
 8008e8c:	336c      	adds	r3, #108	@ 0x6c
 8008e8e:	781b      	ldrb	r3, [r3, #0]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d111      	bne.n	8008eb8 <phacDiscLoop_Sw_Int_ActivateA+0x94>
 8008e94:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008e98:	78fb      	ldrb	r3, [r7, #3]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d00c      	beq.n	8008eb8 <phacDiscLoop_Sw_Int_ActivateA+0x94>
            {
                bActiveDevice = 1;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                /* Update dataparam to indicate that the tag will now be moved to IDLE state. */
                pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].bSleep = 1U;
 8008ea4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008ea8:	6879      	ldr	r1, [r7, #4]
 8008eaa:	4613      	mov	r3, r2
 8008eac:	011b      	lsls	r3, r3, #4
 8008eae:	1a9b      	subs	r3, r3, r2
 8008eb0:	440b      	add	r3, r1
 8008eb2:	336c      	adds	r3, #108	@ 0x6c
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	701a      	strb	r2, [r3, #0]
        for (bIndex = 0; bIndex < pDataParams->sTypeATargetInfo.bTotalTagsFound; bIndex++)
 8008eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008ec8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d3d6      	bcc.n	8008e7e <phacDiscLoop_Sw_Int_ActivateA+0x5a>
            }
        }
        if (bActiveDevice != 0U)
 8008ed0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d00b      	beq.n	8008ef0 <phacDiscLoop_Sw_Int_ActivateA+0xcc>
        {
            /* Step 2 of Activation flow */
            status = phpalI14443p3a_HaltA(pDataParams->pPal1443p3aDataParams);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008edc:	4618      	mov	r0, r3
 8008ede:	f009 ff55 	bl	8012d8c <phpalI14443p3a_Sw_HaltA>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	84bb      	strh	r3, [r7, #36]	@ 0x24
            if (status != PH_ERR_SUCCESS)
 8008ee6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d001      	beq.n	8008ef0 <phacDiscLoop_Sw_Int_ActivateA+0xcc>
            {
                /* Halt A has failed, can't count this as detected tag */
                return status;
 8008eec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008eee:	e182      	b.n	80091f6 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
            }
        }

        /* Activate the card in sleep with given UID */
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p3a_ActivateCard(
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008ef4:	78fa      	ldrb	r2, [r7, #3]
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	011b      	lsls	r3, r3, #4
 8008efa:	1a9b      	subs	r3, r3, r2
 8008efc:	3358      	adds	r3, #88	@ 0x58
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	4413      	add	r3, r2
 8008f02:	f103 0408 	add.w	r4, r3, #8
 8008f06:	78fa      	ldrb	r2, [r7, #3]
 8008f08:	6879      	ldr	r1, [r7, #4]
 8008f0a:	4613      	mov	r3, r2
 8008f0c:	011b      	lsls	r3, r3, #4
 8008f0e:	1a9b      	subs	r3, r3, r2
 8008f10:	440b      	add	r3, r1
 8008f12:	336a      	adds	r3, #106	@ 0x6a
 8008f14:	7819      	ldrb	r1, [r3, #0]
 8008f16:	78fa      	ldrb	r2, [r7, #3]
 8008f18:	4613      	mov	r3, r2
 8008f1a:	011b      	lsls	r3, r3, #4
 8008f1c:	1a9b      	subs	r3, r3, r2
 8008f1e:	3360      	adds	r3, #96	@ 0x60
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	4413      	add	r3, r2
 8008f24:	330b      	adds	r3, #11
 8008f26:	f107 0518 	add.w	r5, r7, #24
 8008f2a:	f107 0216 	add.w	r2, r7, #22
 8008f2e:	9202      	str	r2, [sp, #8]
 8008f30:	9301      	str	r3, [sp, #4]
 8008f32:	f107 0317 	add.w	r3, r7, #23
 8008f36:	9300      	str	r3, [sp, #0]
 8008f38:	462b      	mov	r3, r5
 8008f3a:	460a      	mov	r2, r1
 8008f3c:	4621      	mov	r1, r4
 8008f3e:	f00a f9cb 	bl	80132d8 <phpalI14443p3a_Sw_ActivateCard>
 8008f42:	4603      	mov	r3, r0
 8008f44:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008f46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d001      	beq.n	8008f50 <phacDiscLoop_Sw_Int_ActivateA+0x12c>
 8008f4c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008f4e:	e152      	b.n	80091f6 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
            aUid,
            &bUidLen,
            &(((pDataParams->sTypeATargetInfo).aTypeA_I3P3[bTypeATagIdx]).aSak),
            &bMoreCardsAvailable));

        pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].bSleep = 0U;
 8008f50:	78fa      	ldrb	r2, [r7, #3]
 8008f52:	6879      	ldr	r1, [r7, #4]
 8008f54:	4613      	mov	r3, r2
 8008f56:	011b      	lsls	r3, r3, #4
 8008f58:	1a9b      	subs	r3, r3, r2
 8008f5a:	440b      	add	r3, r1
 8008f5c:	336c      	adds	r3, #108	@ 0x6c
 8008f5e:	2200      	movs	r2, #0
 8008f60:	701a      	strb	r2, [r3, #0]

    }

    bTagType = (pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aSak & 0x60U);
 8008f62:	78fa      	ldrb	r2, [r7, #3]
 8008f64:	6879      	ldr	r1, [r7, #4]
 8008f66:	4613      	mov	r3, r2
 8008f68:	011b      	lsls	r3, r3, #4
 8008f6a:	1a9b      	subs	r3, r3, r2
 8008f6c:	440b      	add	r3, r1
 8008f6e:	336b      	adds	r3, #107	@ 0x6b
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008f76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    bTagType = bTagType >> 5U;
 8008f7a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008f7e:	095b      	lsrs	r3, r3, #5
 8008f80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    /* Type 4A */
    if(bTagType == PHAC_DISCLOOP_TYPEA_TYPE4A_TAG_CONFIG_MASK)
 8008f84:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	f040 809f 	bne.w	80090cc <phacDiscLoop_Sw_Int_ActivateA+0x2a8>
    {
#if defined (NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS)
        /* Enable Emd Check */
        PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_ON));
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f92:	2201      	movs	r2, #1
 8008f94:	215e      	movs	r1, #94	@ 0x5e
 8008f96:	4618      	mov	r0, r3
 8008f98:	f004 f9ba 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008fa0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d001      	beq.n	8008faa <phacDiscLoop_Sw_Int_ActivateA+0x186>
 8008fa6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008fa8:	e125      	b.n	80091f6 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>

        PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_ActivateCard(
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f893 4071 	ldrb.w	r4, [r3, #113]	@ 0x71
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f893 5073 	ldrb.w	r5, [r3, #115]	@ 0x73
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8008fc6:	687a      	ldr	r2, [r7, #4]
 8008fc8:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8008fca:	9201      	str	r2, [sp, #4]
 8008fcc:	9300      	str	r3, [sp, #0]
 8008fce:	462b      	mov	r3, r5
 8008fd0:	4622      	mov	r2, r4
 8008fd2:	f00c f83d 	bl	8015050 <phpalI14443p4a_Sw_ActivateCard>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008fda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d001      	beq.n	8008fe4 <phacDiscLoop_Sw_Int_ActivateA+0x1c0>
 8008fe0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008fe2:	e108      	b.n	80091f6 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
            pDataParams->sTypeATargetInfo.sTypeA_I3P4.bCid,
            pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDri,
            pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDsi,
            pDataParams->sTypeATargetInfo.sTypeA_I3P4.pAts));

        if (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	d027      	beq.n	800903e <phacDiscLoop_Sw_Int_ActivateA+0x21a>
        {
            /* Update Dri and Dsi parameters with currently applied values. */
            PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_GetConfig(
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ff2:	f107 020e 	add.w	r2, r7, #14
 8008ff6:	2103      	movs	r1, #3
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f00b fc47 	bl	801488c <phpalI14443p4a_Sw_GetConfig>
 8008ffe:	4603      	mov	r3, r0
 8009000:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009002:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009004:	2b00      	cmp	r3, #0
 8009006:	d001      	beq.n	800900c <phacDiscLoop_Sw_Int_ActivateA+0x1e8>
 8009008:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800900a:	e0f4      	b.n	80091f6 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
                pDataParams->pPal1443p4aDataParams,
                PHPAL_I14443P4A_CONFIG_DRI,
                &wDataRate));
            pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDri = (uint8_t)wDataRate;
 800900c:	89fb      	ldrh	r3, [r7, #14]
 800900e:	b2da      	uxtb	r2, r3
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73

            PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_GetConfig(
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800901a:	f107 020e 	add.w	r2, r7, #14
 800901e:	2104      	movs	r1, #4
 8009020:	4618      	mov	r0, r3
 8009022:	f00b fc33 	bl	801488c <phpalI14443p4a_Sw_GetConfig>
 8009026:	4603      	mov	r3, r0
 8009028:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800902a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800902c:	2b00      	cmp	r3, #0
 800902e:	d001      	beq.n	8009034 <phacDiscLoop_Sw_Int_ActivateA+0x210>
 8009030:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009032:	e0e0      	b.n	80091f6 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
                pDataParams->pPal1443p4aDataParams,
                PHPAL_I14443P4A_CONFIG_DSI,
                &wDataRate));
            pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDsi = (uint8_t)wDataRate;
 8009034:	89fb      	ldrh	r3, [r7, #14]
 8009036:	b2da      	uxtb	r2, r3
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
        }

        /* Retrieve 14443-4A protocol parameter */
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_GetProtocolParams(
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009042:	f107 0413 	add.w	r4, r7, #19
 8009046:	f107 0214 	add.w	r2, r7, #20
 800904a:	f107 0115 	add.w	r1, r7, #21
 800904e:	f107 0310 	add.w	r3, r7, #16
 8009052:	9302      	str	r3, [sp, #8]
 8009054:	f107 0311 	add.w	r3, r7, #17
 8009058:	9301      	str	r3, [sp, #4]
 800905a:	f107 0312 	add.w	r3, r7, #18
 800905e:	9300      	str	r3, [sp, #0]
 8009060:	4623      	mov	r3, r4
 8009062:	f00c f8ad 	bl	80151c0 <phpalI14443p4a_Sw_GetProtocolParams>
 8009066:	4603      	mov	r3, r0
 8009068:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800906a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800906c:	2b00      	cmp	r3, #0
 800906e:	d001      	beq.n	8009074 <phacDiscLoop_Sw_Int_ActivateA+0x250>
 8009070:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009072:	e0c0      	b.n	80091f6 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
            &bFwi,
            &bFsdi,
            &bFsci));

        /* EMVCo v3.1: Limit the FSCI value to be used based on the RdLib execution environment. */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800907a:	2b01      	cmp	r3, #1
 800907c:	d109      	bne.n	8009092 <phacDiscLoop_Sw_Int_ActivateA+0x26e>
        {
            if (bFsci > pDataParams->bFsciMax)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8009084:	7c3b      	ldrb	r3, [r7, #16]
 8009086:	429a      	cmp	r2, r3
 8009088:	d203      	bcs.n	8009092 <phacDiscLoop_Sw_Int_ActivateA+0x26e>
            {
                bFsci = pDataParams->bFsciMax;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8009090:	743b      	strb	r3, [r7, #16]
            }
        }

        /* Set 14443-4 protocol parameter */
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p4_SetProtocol(
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8009096:	7d7d      	ldrb	r5, [r7, #21]
 8009098:	7d3e      	ldrb	r6, [r7, #20]
 800909a:	f897 c013 	ldrb.w	ip, [r7, #19]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80090a4:	7cba      	ldrb	r2, [r7, #18]
 80090a6:	7c79      	ldrb	r1, [r7, #17]
 80090a8:	7c38      	ldrb	r0, [r7, #16]
 80090aa:	9003      	str	r0, [sp, #12]
 80090ac:	9102      	str	r1, [sp, #8]
 80090ae:	9201      	str	r2, [sp, #4]
 80090b0:	9300      	str	r3, [sp, #0]
 80090b2:	4663      	mov	r3, ip
 80090b4:	4632      	mov	r2, r6
 80090b6:	4629      	mov	r1, r5
 80090b8:	4620      	mov	r0, r4
 80090ba:	f00b fa82 	bl	80145c2 <phpalI14443p4_Sw_SetProtocol>
 80090be:	4603      	mov	r3, r0
 80090c0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80090c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d001      	beq.n	80090cc <phacDiscLoop_Sw_Int_ActivateA+0x2a8>
 80090c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80090ca:	e094      	b.n	80091f6 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
#else /* NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */
    }

    if (bTagType == PHAC_DISCLOOP_TYPEA_TYPE_NFC_DEP_TAG_CONFIG_MASK)
 80090cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80090d0:	2b02      	cmp	r3, #2
 80090d2:	d10a      	bne.n	80090ea <phacDiscLoop_Sw_Int_ActivateA+0x2c6>
    {
        /* In case of EMVCo Profile and P2P tag is detected. */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d102      	bne.n	80090e4 <phacDiscLoop_Sw_Int_ActivateA+0x2c0>
        {
            /* Return to application with No device resolved; In EMVCo mode only Type-A ISO 14443-4 compliant cards should be activated. */
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 80090de:	f244 0385 	movw	r3, #16517	@ 0x4085
 80090e2:	e088      	b.n	80091f6 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
            pDataParams->sTypeATargetInfo.sTypeA_P2P.pAtrRes,
            &(pDataParams->sTypeATargetInfo.sTypeA_P2P.bAtrResLength)));

        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_PASSIVE_TARGET_ACTIVATED, PH_COMP_AC_DISCLOOP);
#else /* NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_TAGS */
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 80090e4:	f244 0385 	movw	r3, #16517	@ 0x4085
 80090e8:	e085      	b.n	80091f6 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_TAGS */
    }

    /* Support for both Type 4A and NFC-DEP (Merged SAK) */
    if (bTagType == PHAC_DISCLOOP_TYPEA_TYPE_NFC_DEP_TYPE4A_TAG_CONFIG_MASK)
 80090ea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80090ee:	2b03      	cmp	r3, #3
 80090f0:	d174      	bne.n	80091dc <phacDiscLoop_Sw_Int_ActivateA+0x3b8>
    {
#ifdef  NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d16c      	bne.n	80091d6 <phacDiscLoop_Sw_Int_ActivateA+0x3b2>
        {
            /* Enable Emd Check in Emvco mode */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_ON));
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009100:	2201      	movs	r2, #1
 8009102:	215e      	movs	r1, #94	@ 0x5e
 8009104:	4618      	mov	r0, r3
 8009106:	f004 f903 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 800910a:	4603      	mov	r3, r0
 800910c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800910e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009110:	2b00      	cmp	r3, #0
 8009112:	d001      	beq.n	8009118 <phacDiscLoop_Sw_Int_ActivateA+0x2f4>
 8009114:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009116:	e06e      	b.n	80091f6 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>

            PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_ActivateCard(
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f893 4071 	ldrb.w	r4, [r3, #113]	@ 0x71
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f893 5073 	ldrb.w	r5, [r3, #115]	@ 0x73
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8009134:	687a      	ldr	r2, [r7, #4]
 8009136:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8009138:	9201      	str	r2, [sp, #4]
 800913a:	9300      	str	r3, [sp, #0]
 800913c:	462b      	mov	r3, r5
 800913e:	4622      	mov	r2, r4
 8009140:	f00b ff86 	bl	8015050 <phpalI14443p4a_Sw_ActivateCard>
 8009144:	4603      	mov	r3, r0
 8009146:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009148:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800914a:	2b00      	cmp	r3, #0
 800914c:	d001      	beq.n	8009152 <phacDiscLoop_Sw_Int_ActivateA+0x32e>
 800914e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009150:	e051      	b.n	80091f6 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
                pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDri,
                pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDsi,
                pDataParams->sTypeATargetInfo.sTypeA_I3P4.pAts));

            /* Retrieve 14443-4A protocol parameter */
            PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_GetProtocolParams(
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009156:	f107 0413 	add.w	r4, r7, #19
 800915a:	f107 0214 	add.w	r2, r7, #20
 800915e:	f107 0115 	add.w	r1, r7, #21
 8009162:	f107 0310 	add.w	r3, r7, #16
 8009166:	9302      	str	r3, [sp, #8]
 8009168:	f107 0311 	add.w	r3, r7, #17
 800916c:	9301      	str	r3, [sp, #4]
 800916e:	f107 0312 	add.w	r3, r7, #18
 8009172:	9300      	str	r3, [sp, #0]
 8009174:	4623      	mov	r3, r4
 8009176:	f00c f823 	bl	80151c0 <phpalI14443p4a_Sw_GetProtocolParams>
 800917a:	4603      	mov	r3, r0
 800917c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800917e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009180:	2b00      	cmp	r3, #0
 8009182:	d001      	beq.n	8009188 <phacDiscLoop_Sw_Int_ActivateA+0x364>
 8009184:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009186:	e036      	b.n	80091f6 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
                &bFwi,
                &bFsdi,
                &bFsci));

            /* EMVCo v3.1: Limit the FSCI value to be used based on the RdLib execution environment. */
            if (bFsci > pDataParams->bFsciMax)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800918e:	7c3b      	ldrb	r3, [r7, #16]
 8009190:	429a      	cmp	r2, r3
 8009192:	d203      	bcs.n	800919c <phacDiscLoop_Sw_Int_ActivateA+0x378>
            {
                bFsci = pDataParams->bFsciMax;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800919a:	743b      	strb	r3, [r7, #16]
            }

            /* Set 14443-4 protocol parameter */
            PH_CHECK_SUCCESS_FCT(status, phpalI14443p4_SetProtocol(
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 80091a0:	7d7d      	ldrb	r5, [r7, #21]
 80091a2:	7d3e      	ldrb	r6, [r7, #20]
 80091a4:	f897 c013 	ldrb.w	ip, [r7, #19]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80091ae:	7cba      	ldrb	r2, [r7, #18]
 80091b0:	7c79      	ldrb	r1, [r7, #17]
 80091b2:	7c38      	ldrb	r0, [r7, #16]
 80091b4:	9003      	str	r0, [sp, #12]
 80091b6:	9102      	str	r1, [sp, #8]
 80091b8:	9201      	str	r2, [sp, #4]
 80091ba:	9300      	str	r3, [sp, #0]
 80091bc:	4663      	mov	r3, ip
 80091be:	4632      	mov	r2, r6
 80091c0:	4629      	mov	r1, r5
 80091c2:	4620      	mov	r0, r4
 80091c4:	f00b f9fd 	bl	80145c2 <phpalI14443p4_Sw_SetProtocol>
 80091c8:	4603      	mov	r3, r0
 80091ca:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80091cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d004      	beq.n	80091dc <phacDiscLoop_Sw_Int_ActivateA+0x3b8>
 80091d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80091d4:	e00f      	b.n	80091f6 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
        }
        else
#endif /*  NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */
        {
            /* Return to application; application can decide what to send RATS or ATR */
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_MERGED_SEL_RES_FOUND, PH_COMP_AC_DISCLOOP);
 80091d6:	f244 038e 	movw	r3, #16526	@ 0x408e
 80091da:	e00c      	b.n	80091f6 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
        }
    }

    /* Case of EMVCo Profile and type 2 tag */
    if ((bTagType == PHAC_DISCLOOP_TYPEA_TYPE2_TAG_CONFIG_MASK) && (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO))
 80091dc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d107      	bne.n	80091f4 <phacDiscLoop_Sw_Int_ActivateA+0x3d0>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d102      	bne.n	80091f4 <phacDiscLoop_Sw_Int_ActivateA+0x3d0>
    {
        /* Return to application with No device resolved; In EMVCo mode only Type-A ISO 14443-4 compliant cards should be activated. */
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 80091ee:	f244 0385 	movw	r3, #16517	@ 0x4085
 80091f2:	e000      	b.n	80091f6 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
    }

    return PH_ERR_SUCCESS;
 80091f4:	2300      	movs	r3, #0
#else /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	372c      	adds	r7, #44	@ 0x2c
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080091fe <phacDiscLoop_Sw_DetTechTypeB>:
 * Internal Definitions
 * ***************************************************************************************************************** */
phStatus_t phacDiscLoop_Sw_DetTechTypeB(
                                        phacDiscLoop_Sw_DataParams_t *pDataParams
                                        )
{
 80091fe:	b590      	push	{r4, r7, lr}
 8009200:	b087      	sub	sp, #28
 8009202:	af02      	add	r7, sp, #8
 8009204:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    uint8_t    PH_MEMLOC_COUNT bIndex;

    phStatus_t PH_MEMLOC_REM wStatus;

    pDataParams->sTypeBTargetInfo.bAfiReq = 0x00;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
    pDataParams->sTypeBTargetInfo.bTotalTagsFound = 0;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2200      	movs	r2, #0
 8009212:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
    pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_B;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	7f9b      	ldrb	r3, [r3, #30]
 800921a:	f023 0302 	bic.w	r3, r3, #2
 800921e:	b2da      	uxtb	r2, r3
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	779a      	strb	r2, [r3, #30]

    for(bIndex = 0U; bIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bIndex++)
 8009224:	2300      	movs	r3, #0
 8009226:	73fb      	strb	r3, [r7, #15]
 8009228:	e00c      	b.n	8009244 <phacDiscLoop_Sw_DetTechTypeB+0x46>
    {
        /* Device is not in HLTB state */
        pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bIndex].bSleep = 0U;
 800922a:	7bfa      	ldrb	r2, [r7, #15]
 800922c:	6879      	ldr	r1, [r7, #4]
 800922e:	4613      	mov	r3, r2
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	4413      	add	r3, r2
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	440b      	add	r3, r1
 8009238:	33b1      	adds	r3, #177	@ 0xb1
 800923a:	2200      	movs	r2, #0
 800923c:	701a      	strb	r2, [r3, #0]
    for(bIndex = 0U; bIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bIndex++)
 800923e:	7bfb      	ldrb	r3, [r7, #15]
 8009240:	3301      	adds	r3, #1
 8009242:	73fb      	strb	r3, [r7, #15]
 8009244:	7bfb      	ldrb	r3, [r7, #15]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d0ef      	beq.n	800922a <phacDiscLoop_Sw_DetTechTypeB+0x2c>
    }

    /* WakeupB with number of slot as 0 */
    wStatus = phpalI14443p3b_WakeUpB(
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f893 1096 	ldrb.w	r1, [r3, #150]	@ 0x96
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f893 4097 	ldrb.w	r4, [r3, #151]	@ 0x97
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	33a2      	adds	r3, #162	@ 0xa2
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	32af      	adds	r2, #175	@ 0xaf
 8009262:	9201      	str	r2, [sp, #4]
 8009264:	9300      	str	r3, [sp, #0]
 8009266:	4623      	mov	r3, r4
 8009268:	460a      	mov	r2, r1
 800926a:	2100      	movs	r1, #0
 800926c:	f00a fc11 	bl	8013a92 <phpalI14443p3b_Sw_WakeUpB>
 8009270:	4603      	mov	r3, r0
 8009272:	81bb      	strh	r3, [r7, #12]
        pDataParams->sTypeBTargetInfo.bAfiReq,
        pDataParams->sTypeBTargetInfo.bExtendedAtqBbit,
        pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].aAtqB,
        &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].bAtqBLength);

    if(0u != (phacDiscLoop_Sw_Int_IsValidPollStatus(wStatus)))
 8009274:	89bb      	ldrh	r3, [r7, #12]
 8009276:	4618      	mov	r0, r3
 8009278:	f7ff fa3f 	bl	80086fa <phacDiscLoop_Sw_Int_IsValidPollStatus>
 800927c:	4603      	mov	r3, r0
 800927e:	2b00      	cmp	r3, #0
 8009280:	d015      	beq.n	80092ae <phacDiscLoop_Sw_DetTechTypeB+0xb0>
    {
        if((wStatus & PH_ERR_MASK) != PH_ERR_SUCCESS)
 8009282:	89bb      	ldrh	r3, [r7, #12]
 8009284:	b2db      	uxtb	r3, r3
 8009286:	2b00      	cmp	r3, #0
 8009288:	d006      	beq.n	8009298 <phacDiscLoop_Sw_DetTechTypeB+0x9a>
        {
            pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_B;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	7f9b      	ldrb	r3, [r3, #30]
 800928e:	f043 0302 	orr.w	r3, r3, #2
 8009292:	b2da      	uxtb	r2, r3
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	779a      	strb	r2, [r3, #30]
        }
        pDataParams->sTypeBTargetInfo.bTotalTagsFound++;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800929e:	3301      	adds	r3, #1
 80092a0:	b2da      	uxtb	r2, r3
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
    else
    {
        return wStatus;
    }

    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 80092a8:	f244 0387 	movw	r3, #16519	@ 0x4087
 80092ac:	e000      	b.n	80092b0 <phacDiscLoop_Sw_DetTechTypeB+0xb2>
        return wStatus;
 80092ae:	89bb      	ldrh	r3, [r7, #12]
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3714      	adds	r7, #20
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd90      	pop	{r4, r7, pc}

080092b8 <phacDiscLoop_Sw_Int_CollisionResolutionB>:

phStatus_t phacDiscLoop_Sw_Int_CollisionResolutionB(
                                                    phacDiscLoop_Sw_DataParams_t * pDataParams
                                                    )
{
 80092b8:	b5b0      	push	{r4, r5, r7, lr}
 80092ba:	b086      	sub	sp, #24
 80092bc:	af02      	add	r7, sp, #8
 80092be:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    phStatus_t PH_MEMLOC_REM   status = PH_ERR_SUCCESS;
 80092c0:	2300      	movs	r3, #0
 80092c2:	81fb      	strh	r3, [r7, #14]
    uint8_t    PH_MEMLOC_REM   bLastSlotReached;
    uint8_t    PH_MEMLOC_COUNT bNumOfSlots;
    uint8_t    PH_MEMLOC_COUNT bRetryCount;

    /* Collision_Pending = 1 and Device limit  = 0 */
    if((0U != ((pDataParams->bCollPend & PHAC_DISCLOOP_POS_BIT_MASK_B))) && ((pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_B] == 0x00U)))
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	7f9b      	ldrb	r3, [r3, #30]
 80092c8:	f003 0302 	and.w	r3, r3, #2
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d00a      	beq.n	80092e6 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x2e>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	7adb      	ldrb	r3, [r3, #11]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d106      	bne.n	80092e6 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x2e>
    {
        pDataParams->sTypeBTargetInfo.bTotalTagsFound = 0;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2200      	movs	r2, #0
 80092dc:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 80092e0:	f244 0385 	movw	r3, #16517	@ 0x4085
 80092e4:	e1e3      	b.n	80096ae <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
    }

    bRetryCount = 0;
 80092e6:	2300      	movs	r3, #0
 80092e8:	727b      	strb	r3, [r7, #9]
    /* Symbol 0 */
    bNumOfSlots = 0;
 80092ea:	2300      	movs	r3, #0
 80092ec:	72bb      	strb	r3, [r7, #10]

    /* Apply Guard time. */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	8a5b      	ldrh	r3, [r3, #18]
 80092f6:	461a      	mov	r2, r3
 80092f8:	2135      	movs	r1, #53	@ 0x35
 80092fa:	f004 f809 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 80092fe:	4603      	mov	r3, r0
 8009300:	81fb      	strh	r3, [r7, #14]
 8009302:	89fb      	ldrh	r3, [r7, #14]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d001      	beq.n	800930c <phacDiscLoop_Sw_Int_CollisionResolutionB+0x54>
 8009308:	89fb      	ldrh	r3, [r7, #14]
 800930a:	e1d0      	b.n	80096ae <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_B]));

    /* Configure HW for the TypeB technology */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009310:	2102      	movs	r1, #2
 8009312:	4618      	mov	r0, r3
 8009314:	f003 fab6 	bl	800c884 <phhalHw_Pn5180_ApplyProtocolSettings>
 8009318:	4603      	mov	r3, r0
 800931a:	81fb      	strh	r3, [r7, #14]
 800931c:	89fb      	ldrh	r3, [r7, #14]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d001      	beq.n	8009326 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x6e>
 8009322:	89fb      	ldrh	r3, [r7, #14]
 8009324:	e1c3      	b.n	80096ae <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
        pDataParams->pHalDataParams,
        PHHAL_HW_CARDTYPE_ISO14443B));

    /* WakeupB with number of slot as 0 */
    status = phpalI14443p3b_WakeUpB(
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f893 4096 	ldrb.w	r4, [r3, #150]	@ 0x96
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f893 5097 	ldrb.w	r5, [r3, #151]	@ 0x97
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	33a2      	adds	r3, #162	@ 0xa2
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	32af      	adds	r2, #175	@ 0xaf
 800933e:	7ab9      	ldrb	r1, [r7, #10]
 8009340:	9201      	str	r2, [sp, #4]
 8009342:	9300      	str	r3, [sp, #0]
 8009344:	462b      	mov	r3, r5
 8009346:	4622      	mov	r2, r4
 8009348:	f00a fba3 	bl	8013a92 <phpalI14443p3b_Sw_WakeUpB>
 800934c:	4603      	mov	r3, r0
 800934e:	81fb      	strh	r3, [r7, #14]
        pDataParams->sTypeBTargetInfo.bAfiReq,
        pDataParams->sTypeBTargetInfo.bExtendedAtqBbit,
        pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].aAtqB,
        &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].bAtqBLength);

    if(PH_ERR_SUCCESS != (status & PH_ERR_MASK))
 8009350:	89fb      	ldrh	r3, [r7, #14]
 8009352:	b2db      	uxtb	r3, r3
 8009354:	2b00      	cmp	r3, #0
 8009356:	f000 8197 	beq.w	8009688 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3d0>
    {
        /* As per EMVCo 3.1, wait for at least Tmin retransmission in case of timeout error. */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009360:	2b01      	cmp	r3, #1
 8009362:	d148      	bne.n	80093f6 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x13e>
        {
            if ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 8009364:	89fb      	ldrh	r3, [r7, #14]
 8009366:	b2db      	uxtb	r3, r3
 8009368:	2b03      	cmp	r3, #3
 800936a:	d130      	bne.n	80093ce <phacDiscLoop_Sw_Int_CollisionResolutionB+0x116>
            {
                pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_B;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	7f9b      	ldrb	r3, [r3, #30]
 8009370:	f023 0302 	bic.w	r3, r3, #2
 8009374:	b2da      	uxtb	r2, r3
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	779a      	strb	r2, [r3, #30]

                /* Report Error to Application and Application will perform PICC Reset */
                return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 800937a:	f244 0381 	movw	r3, #16513	@ 0x4081
 800937e:	e196      	b.n	80096ae <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
            }

            while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
            {
                bRetryCount++;
 8009380:	7a7b      	ldrb	r3, [r7, #9]
 8009382:	3301      	adds	r3, #1
 8009384:	727b      	strb	r3, [r7, #9]
                /* Wait for at least Tmin retransmission delay. */
                PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800938a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800938e:	2100      	movs	r1, #0
 8009390:	4618      	mov	r0, r3
 8009392:	f003 ff39 	bl	800d208 <phhalHw_Pn5180_Wait>
 8009396:	4603      	mov	r3, r0
 8009398:	81fb      	strh	r3, [r7, #14]
 800939a:	89fb      	ldrh	r3, [r7, #14]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d001      	beq.n	80093a4 <phacDiscLoop_Sw_Int_CollisionResolutionB+0xec>
 80093a0:	89fb      	ldrh	r3, [r7, #14]
 80093a2:	e184      	b.n	80096ae <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
                    pDataParams->pHalDataParams,
                    PHHAL_HW_TIME_MICROSECONDS,
                    PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

                status = phpalI14443p3b_WakeUpB(pDataParams->pPal1443p3bDataParams,
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f893 4096 	ldrb.w	r4, [r3, #150]	@ 0x96
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f893 5097 	ldrb.w	r5, [r3, #151]	@ 0x97
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	33a2      	adds	r3, #162	@ 0xa2
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	32af      	adds	r2, #175	@ 0xaf
 80093bc:	7ab9      	ldrb	r1, [r7, #10]
 80093be:	9201      	str	r2, [sp, #4]
 80093c0:	9300      	str	r3, [sp, #0]
 80093c2:	462b      	mov	r3, r5
 80093c4:	4622      	mov	r2, r4
 80093c6:	f00a fb64 	bl	8013a92 <phpalI14443p3b_Sw_WakeUpB>
 80093ca:	4603      	mov	r3, r0
 80093cc:	81fb      	strh	r3, [r7, #14]
            while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 80093ce:	89fb      	ldrh	r3, [r7, #14]
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d102      	bne.n	80093dc <phacDiscLoop_Sw_Int_CollisionResolutionB+0x124>
 80093d6:	7a7b      	ldrb	r3, [r7, #9]
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d9d1      	bls.n	8009380 <phacDiscLoop_Sw_Int_CollisionResolutionB+0xc8>
                    pDataParams->sTypeBTargetInfo.bExtendedAtqBbit,
                    pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].aAtqB,
                    &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].bAtqBLength);
            }

            pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_B;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	7f9b      	ldrb	r3, [r3, #30]
 80093e0:	f023 0302 	bic.w	r3, r3, #2
 80093e4:	b2da      	uxtb	r2, r3
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	779a      	strb	r2, [r3, #30]
            /* Some error that can't be handled */
            PH_CHECK_SUCCESS(status);
 80093ea:	89fb      	ldrh	r3, [r7, #14]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	f000 814b 	beq.w	8009688 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3d0>
 80093f2:	89fb      	ldrh	r3, [r7, #14]
 80093f4:	e15b      	b.n	80096ae <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
        }
        else
        {
            /* Symbol 2 */
            /* No Response */
            if((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT)
 80093f6:	89fb      	ldrh	r3, [r7, #14]
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d101      	bne.n	8009402 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x14a>
            {
                return status;
 80093fe:	89fb      	ldrh	r3, [r7, #14]
 8009400:	e155      	b.n	80096ae <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
            }
            else
            { /* Symbol 3 */
                if (pDataParams->baPasConDevLim[1] == 0x00U)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	7adb      	ldrb	r3, [r3, #11]
 8009406:	2b00      	cmp	r3, #0
 8009408:	f040 813e 	bne.w	8009688 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3d0>
                {
                    pDataParams->sTypeBTargetInfo.bTotalTagsFound = 0;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2200      	movs	r2, #0
 8009410:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
                    /* Symbol 4 */
                    pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_B;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	7f9b      	ldrb	r3, [r3, #30]
 8009418:	f043 0302 	orr.w	r3, r3, #2
 800941c:	b2da      	uxtb	r2, r3
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	779a      	strb	r2, [r3, #30]
                    return status;
 8009422:	89fb      	ldrh	r3, [r7, #14]
 8009424:	e143      	b.n	80096ae <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
    }

    while(bNumOfSlots <= PHAC_DISCLOOP_TYPEB_MAX_SLOT_NUM)
    {
        /* Symbol 5 */
        bCurrentSlotNum = 0;
 8009426:	2300      	movs	r3, #0
 8009428:	737b      	strb	r3, [r7, #13]
        bCurrentDeviceCount = 0;
 800942a:	2300      	movs	r3, #0
 800942c:	733b      	strb	r3, [r7, #12]
        bLastSlotReached = 0;
 800942e:	2300      	movs	r3, #0
 8009430:	72fb      	strb	r3, [r7, #11]
        pDataParams->sTypeBTargetInfo.bTotalTagsFound = 0;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2200      	movs	r2, #0
 8009436:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
        pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_B;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	7f9b      	ldrb	r3, [r3, #30]
 800943e:	f023 0302 	bic.w	r3, r3, #2
 8009442:	b2da      	uxtb	r2, r3
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	779a      	strb	r2, [r3, #30]

        while(0U == bLastSlotReached)
 8009448:	e11a      	b.n	8009680 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3c8>
        {
            /* Symbol 6: Slot is Empty */
            if((status & PH_ERR_MASK) != PH_ERR_IO_TIMEOUT)
 800944a:	89fb      	ldrh	r3, [r7, #14]
 800944c:	b2db      	uxtb	r3, r3
 800944e:	2b01      	cmp	r3, #1
 8009450:	d060      	beq.n	8009514 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x25c>
            {
                /* Symbol 7: Validate SENSB_RES */
                if (status == PH_ERR_SUCCESS)
 8009452:	89fb      	ldrh	r3, [r7, #14]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d156      	bne.n	8009506 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x24e>
                {
                    /* Symbol 9 */
                    if(bCurrentDeviceCount > 0U)
 8009458:	7b3b      	ldrb	r3, [r7, #12]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d01f      	beq.n	800949e <phacDiscLoop_Sw_Int_CollisionResolutionB+0x1e6>
                    {
                        /* Symbol 10 */
                        status = phpalI14443p3b_SetSerialNo(
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8009468:	1e5a      	subs	r2, r3, #1
 800946a:	4613      	mov	r3, r2
 800946c:	009b      	lsls	r3, r3, #2
 800946e:	4413      	add	r3, r2
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	3398      	adds	r3, #152	@ 0x98
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	4413      	add	r3, r2
 8009478:	3306      	adds	r3, #6
 800947a:	4619      	mov	r1, r3
 800947c:	f00b f864 	bl	8014548 <phpalI14443p3b_Sw_SetSerialNo>
 8009480:	4603      	mov	r3, r0
 8009482:	81fb      	strh	r3, [r7, #14]
                                    pDataParams->pPal1443p3bDataParams,
                                    pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound - (uint8_t)1U].aPupi
                                    );

                        PH_CHECK_ABORT_FCT(status, phpalI14443p3b_HaltB(pDataParams->pPal1443p3bDataParams));
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009488:	4618      	mov	r0, r3
 800948a:	f00a fb61 	bl	8013b50 <phpalI14443p3b_Sw_HaltB>
 800948e:	4603      	mov	r3, r0
 8009490:	81fb      	strh	r3, [r7, #14]
 8009492:	89fb      	ldrh	r3, [r7, #14]
 8009494:	b2db      	uxtb	r3, r3
 8009496:	2b12      	cmp	r3, #18
 8009498:	d101      	bne.n	800949e <phacDiscLoop_Sw_Int_CollisionResolutionB+0x1e6>
 800949a:	89fb      	ldrh	r3, [r7, #14]
 800949c:	e107      	b.n	80096ae <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
                    }

                    /* Symbol 12 */
                    (void)memcpy(pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].aPupi,
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80094a4:	461a      	mov	r2, r3
 80094a6:	4613      	mov	r3, r2
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	4413      	add	r3, r2
 80094ac:	009b      	lsls	r3, r3, #2
 80094ae:	3398      	adds	r3, #152	@ 0x98
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	4413      	add	r3, r2
 80094b4:	1d9a      	adds	r2, r3, #6
                        &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].aAtqB[1],
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80094bc:	4619      	mov	r1, r3
 80094be:	460b      	mov	r3, r1
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	440b      	add	r3, r1
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	3399      	adds	r3, #153	@ 0x99
 80094c8:	6879      	ldr	r1, [r7, #4]
 80094ca:	440b      	add	r3, r1
 80094cc:	330a      	adds	r3, #10
                    (void)memcpy(pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].aPupi,
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	6013      	str	r3, [r2, #0]
                        PHAC_DISCLOOP_I3P3B_PUPI_LENGTH);

                    /* Symbol 11 */
                    pDataParams->sTypeBTargetInfo.bTotalTagsFound++;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80094d8:	3301      	adds	r3, #1
 80094da:	b2da      	uxtb	r2, r3
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
                    bCurrentDeviceCount++;
 80094e2:	7b3b      	ldrb	r3, [r7, #12]
 80094e4:	3301      	adds	r3, #1
 80094e6:	733b      	strb	r3, [r7, #12]

                    /* Symbol 13 */
                    if (pDataParams->sTypeBTargetInfo.bTotalTagsFound >= pDataParams->baPasConDevLim[1])
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f893 2095 	ldrb.w	r2, [r3, #149]	@ 0x95
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	7adb      	ldrb	r3, [r3, #11]
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d30e      	bcc.n	8009514 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x25c>
                    {
                        pDataParams->bNumOfCards = pDataParams->sTypeBTargetInfo.bTotalTagsFound;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f893 2095 	ldrb.w	r2, [r3, #149]	@ 0x95
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

                        return PH_ERR_SUCCESS;
 8009502:	2300      	movs	r3, #0
 8009504:	e0d3      	b.n	80096ae <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
                    }
                }
                else
                {
                    /* Symbol 8 CollisionPend: 1*/
                    pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_B;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	7f9b      	ldrb	r3, [r3, #30]
 800950a:	f043 0302 	orr.w	r3, r3, #2
 800950e:	b2da      	uxtb	r2, r3
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	779a      	strb	r2, [r3, #30]
                }
            }

            /* Symbol 14 */
            bCurrentSlotNum++;
 8009514:	7b7b      	ldrb	r3, [r7, #13]
 8009516:	3301      	adds	r3, #1
 8009518:	737b      	strb	r3, [r7, #13]

            /* Symbol 15 */
            if(bCurrentSlotNum < ((uint8_t)1U  << bNumOfSlots))
 800951a:	7b7a      	ldrb	r2, [r7, #13]
 800951c:	7abb      	ldrb	r3, [r7, #10]
 800951e:	2101      	movs	r1, #1
 8009520:	fa01 f303 	lsl.w	r3, r1, r3
 8009524:	429a      	cmp	r2, r3
 8009526:	da29      	bge.n	800957c <phacDiscLoop_Sw_Int_CollisionResolutionB+0x2c4>
            {
                /* Symbol 25 */
                PH_CHECK_ABORT_FCT(status, phpalI14443p3b_SlotMarker(
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800952c:	7b7b      	ldrb	r3, [r7, #13]
 800952e:	3301      	adds	r3, #1
 8009530:	b2d9      	uxtb	r1, r3
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8009538:	461a      	mov	r2, r3
 800953a:	4613      	mov	r3, r2
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	4413      	add	r3, r2
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	3398      	adds	r3, #152	@ 0x98
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	4413      	add	r3, r2
 8009548:	f103 040a 	add.w	r4, r3, #10
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8009552:	461a      	mov	r2, r3
 8009554:	4613      	mov	r3, r2
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	4413      	add	r3, r2
 800955a:	009b      	lsls	r3, r3, #2
 800955c:	33a8      	adds	r3, #168	@ 0xa8
 800955e:	687a      	ldr	r2, [r7, #4]
 8009560:	4413      	add	r3, r2
 8009562:	3307      	adds	r3, #7
 8009564:	4622      	mov	r2, r4
 8009566:	f00a fab3 	bl	8013ad0 <phpalI14443p3b_Sw_SlotMarker>
 800956a:	4603      	mov	r3, r0
 800956c:	81fb      	strh	r3, [r7, #14]
 800956e:	89fb      	ldrh	r3, [r7, #14]
 8009570:	b2db      	uxtb	r3, r3
 8009572:	2b12      	cmp	r3, #18
 8009574:	f040 8084 	bne.w	8009680 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3c8>
 8009578:	89fb      	ldrh	r3, [r7, #14]
 800957a:	e098      	b.n	80096ae <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
                    pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].aAtqB,
                    &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].bAtqBLength));
            }
            else
            {
                bLastSlotReached = 1;
 800957c:	2301      	movs	r3, #1
 800957e:	72fb      	strb	r3, [r7, #11]
                /* Symbol 16 */
                if (0U != (pDataParams->bCollPend & PHAC_DISCLOOP_POS_BIT_MASK_B))
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	7f9b      	ldrb	r3, [r3, #30]
 8009584:	f003 0302 	and.w	r3, r3, #2
 8009588:	2b00      	cmp	r3, #0
 800958a:	d069      	beq.n	8009660 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3a8>
                {
                    /* Symbol 17 */
                    if (pDataParams->sTypeBTargetInfo.bTotalTagsFound > 0U)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8009592:	2b00      	cmp	r3, #0
 8009594:	d00e      	beq.n	80095b4 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x2fc>
                    {
                        /* Symbol 20 */
                        if (pDataParams->sTypeBTargetInfo.bTotalTagsFound >= pDataParams->baPasConDevLim[1])
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f893 2095 	ldrb.w	r2, [r3, #149]	@ 0x95
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	7adb      	ldrb	r3, [r3, #11]
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d31d      	bcc.n	80095e0 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x328>
                        {
                            pDataParams->bNumOfCards = pDataParams->sTypeBTargetInfo.bTotalTagsFound;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f893 2095 	ldrb.w	r2, [r3, #149]	@ 0x95
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

                            return PH_ERR_SUCCESS;
 80095b0:	2300      	movs	r3, #0
 80095b2:	e07c      	b.n	80096ae <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
                        }
                    }
                    else
                    {
                        /* Symbol 18 */
                        if (bNumOfSlots == PHAC_DISCLOOP_TYPEB_MAX_SLOT_NUM)
 80095b4:	7abb      	ldrb	r3, [r7, #10]
 80095b6:	2b04      	cmp	r3, #4
 80095b8:	d10f      	bne.n	80095da <phacDiscLoop_Sw_Int_CollisionResolutionB+0x322>
                        {
                            pDataParams->bNumOfCards = pDataParams->sTypeBTargetInfo.bTotalTagsFound;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f893 2095 	ldrb.w	r2, [r3, #149]	@ 0x95
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

                            if(pDataParams->sTypeBTargetInfo.bTotalTagsFound == 0U)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d102      	bne.n	80095d6 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x31e>
                            {
                                return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 80095d0:	f244 0385 	movw	r3, #16517	@ 0x4085
 80095d4:	e06b      	b.n	80096ae <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
                            }

                            return PH_ERR_SUCCESS;
 80095d6:	2300      	movs	r3, #0
 80095d8:	e069      	b.n	80096ae <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
                        }

                        /* Symbol 19 */
                        bNumOfSlots++;
 80095da:	7abb      	ldrb	r3, [r7, #10]
 80095dc:	3301      	adds	r3, #1
 80095de:	72bb      	strb	r3, [r7, #10]
                    }

                    /* Symbol 21 */
                    if(bCurrentDeviceCount > 0U)
 80095e0:	7b3b      	ldrb	r3, [r7, #12]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d00c      	beq.n	8009600 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x348>
                    {
                        /* Symbol 22 */
                        PH_CHECK_ABORT_FCT(status, phpalI14443p3b_HaltB(pDataParams->pPal1443p3bDataParams));
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095ea:	4618      	mov	r0, r3
 80095ec:	f00a fab0 	bl	8013b50 <phpalI14443p3b_Sw_HaltB>
 80095f0:	4603      	mov	r3, r0
 80095f2:	81fb      	strh	r3, [r7, #14]
 80095f4:	89fb      	ldrh	r3, [r7, #14]
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	2b12      	cmp	r3, #18
 80095fa:	d101      	bne.n	8009600 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x348>
 80095fc:	89fb      	ldrh	r3, [r7, #14]
 80095fe:	e056      	b.n	80096ae <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
                    }

                    /* Symbol 23 */
                    PH_CHECK_ABORT_FCT(status, phpalI14443p3b_RequestB(
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f893 4096 	ldrb.w	r4, [r3, #150]	@ 0x96
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f893 5097 	ldrb.w	r5, [r3, #151]	@ 0x97
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8009616:	461a      	mov	r2, r3
 8009618:	4613      	mov	r3, r2
 800961a:	009b      	lsls	r3, r3, #2
 800961c:	4413      	add	r3, r2
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	3398      	adds	r3, #152	@ 0x98
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	4413      	add	r3, r2
 8009626:	f103 020a 	add.w	r2, r3, #10
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8009630:	4619      	mov	r1, r3
 8009632:	460b      	mov	r3, r1
 8009634:	009b      	lsls	r3, r3, #2
 8009636:	440b      	add	r3, r1
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	33a8      	adds	r3, #168	@ 0xa8
 800963c:	6879      	ldr	r1, [r7, #4]
 800963e:	440b      	add	r3, r1
 8009640:	3307      	adds	r3, #7
 8009642:	7ab9      	ldrb	r1, [r7, #10]
 8009644:	9301      	str	r3, [sp, #4]
 8009646:	9200      	str	r2, [sp, #0]
 8009648:	462b      	mov	r3, r5
 800964a:	4622      	mov	r2, r4
 800964c:	f00a fa02 	bl	8013a54 <phpalI14443p3b_Sw_RequestB>
 8009650:	4603      	mov	r3, r0
 8009652:	81fb      	strh	r3, [r7, #14]
 8009654:	89fb      	ldrh	r3, [r7, #14]
 8009656:	b2db      	uxtb	r3, r3
 8009658:	2b12      	cmp	r3, #18
 800965a:	d111      	bne.n	8009680 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3c8>
 800965c:	89fb      	ldrh	r3, [r7, #14]
 800965e:	e026      	b.n	80096ae <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
                        pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].aAtqB,
                        &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].bAtqBLength));
                }
                else
                {
                    pDataParams->bNumOfCards = pDataParams->sTypeBTargetInfo.bTotalTagsFound;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f893 2095 	ldrb.w	r2, [r3, #149]	@ 0x95
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

                    if(pDataParams->sTypeBTargetInfo.bTotalTagsFound == 0U)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8009672:	2b00      	cmp	r3, #0
 8009674:	d102      	bne.n	800967c <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3c4>
                    {
                        return (PHAC_DISCLOOP_NO_DEVICE_RESOLVED | PH_COMP_AC_DISCLOOP);
 8009676:	f244 0385 	movw	r3, #16517	@ 0x4085
 800967a:	e018      	b.n	80096ae <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
                    }
                    return PH_ERR_SUCCESS;
 800967c:	2300      	movs	r3, #0
 800967e:	e016      	b.n	80096ae <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
        while(0U == bLastSlotReached)
 8009680:	7afb      	ldrb	r3, [r7, #11]
 8009682:	2b00      	cmp	r3, #0
 8009684:	f43f aee1 	beq.w	800944a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x192>
    while(bNumOfSlots <= PHAC_DISCLOOP_TYPEB_MAX_SLOT_NUM)
 8009688:	7abb      	ldrb	r3, [r7, #10]
 800968a:	2b04      	cmp	r3, #4
 800968c:	f67f aecb 	bls.w	8009426 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x16e>
                }
            }
        } /* while(!bLastSlotReached) */
    }

    pDataParams->bNumOfCards = pDataParams->sTypeBTargetInfo.bTotalTagsFound;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f893 2095 	ldrb.w	r2, [r3, #149]	@ 0x95
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    if(pDataParams->sTypeBTargetInfo.bTotalTagsFound == 0U)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d102      	bne.n	80096ac <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f4>
    {
        return (PHAC_DISCLOOP_NO_DEVICE_RESOLVED | PH_COMP_AC_DISCLOOP);
 80096a6:	f244 0385 	movw	r3, #16517	@ 0x4085
 80096aa:	e000      	b.n	80096ae <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
    }

    return PH_ERR_SUCCESS;
 80096ac:	2300      	movs	r3, #0
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3710      	adds	r7, #16
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bdb0      	pop	{r4, r5, r7, pc}

080096b6 <phacDiscLoop_Sw_Int_ActivateB>:

phStatus_t phacDiscLoop_Sw_Int_ActivateB(
                                         phacDiscLoop_Sw_DataParams_t * pDataParams,
                                         uint8_t bTypeBTagIdx
                                         )
{
 80096b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096b8:	b08f      	sub	sp, #60	@ 0x3c
 80096ba:	af04      	add	r7, sp, #16
 80096bc:	6078      	str	r0, [r7, #4]
 80096be:	460b      	mov	r3, r1
 80096c0:	70fb      	strb	r3, [r7, #3]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    phStatus_t PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 80096c2:	2300      	movs	r3, #0
 80096c4:	847b      	strh	r3, [r7, #34]	@ 0x22
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_I3P4B_TAGS */

    /* Only deviation form Device Activation Activity is
     * Device sleep state is not been check and always send WakeUpB Command
     */
    if (bTypeBTagIdx >= pDataParams->sTypeBTargetInfo.bTotalTagsFound)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80096cc:	78fa      	ldrb	r2, [r7, #3]
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d302      	bcc.n	80096d8 <phacDiscLoop_Sw_Int_ActivateB+0x22>
    {
        /* Out of range or no such card found yet */
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80096d2:	f244 0321 	movw	r3, #16417	@ 0x4021
 80096d6:	e1bb      	b.n	8009a50 <phacDiscLoop_Sw_Int_ActivateB+0x39a>
    }

    /* Send WUPB for tags in sleep state (except the last detected tag all are
     * in sleep state) */
    if ( (bTypeBTagIdx < (pDataParams->sTypeBTargetInfo.bTotalTagsFound - (uint8_t)1U) ) ||
 80096d8:	78fa      	ldrb	r2, [r7, #3]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80096e0:	3b01      	subs	r3, #1
 80096e2:	429a      	cmp	r2, r3
 80096e4:	db0a      	blt.n	80096fc <phacDiscLoop_Sw_Int_ActivateB+0x46>
                (pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].bSleep == 1U)
 80096e6:	78fa      	ldrb	r2, [r7, #3]
 80096e8:	6879      	ldr	r1, [r7, #4]
 80096ea:	4613      	mov	r3, r2
 80096ec:	009b      	lsls	r3, r3, #2
 80096ee:	4413      	add	r3, r2
 80096f0:	009b      	lsls	r3, r3, #2
 80096f2:	440b      	add	r3, r1
 80096f4:	33b1      	adds	r3, #177	@ 0xb1
 80096f6:	781b      	ldrb	r3, [r3, #0]
    if ( (bTypeBTagIdx < (pDataParams->sTypeBTargetInfo.bTotalTagsFound - (uint8_t)1U) ) ||
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d119      	bne.n	8009730 <phacDiscLoop_Sw_Int_ActivateB+0x7a>
                )
    {
        PH_CHECK_ABORT_FCT(status, phpalI14443p3b_WakeUpB(
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f893 2096 	ldrb.w	r2, [r3, #150]	@ 0x96
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f893 1097 	ldrb.w	r1, [r3, #151]	@ 0x97
 800970c:	f107 0320 	add.w	r3, r7, #32
 8009710:	9301      	str	r3, [sp, #4]
 8009712:	f107 0310 	add.w	r3, r7, #16
 8009716:	9300      	str	r3, [sp, #0]
 8009718:	460b      	mov	r3, r1
 800971a:	2100      	movs	r1, #0
 800971c:	f00a f9b9 	bl	8013a92 <phpalI14443p3b_Sw_WakeUpB>
 8009720:	4603      	mov	r3, r0
 8009722:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009724:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009726:	b2db      	uxtb	r3, r3
 8009728:	2b12      	cmp	r3, #18
 800972a:	d101      	bne.n	8009730 <phacDiscLoop_Sw_Int_ActivateB+0x7a>
 800972c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800972e:	e18f      	b.n	8009a50 <phacDiscLoop_Sw_Int_ActivateB+0x39a>

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_I3P4B_TAGS
    /* AttriB: activate PICC */

    /* Enable Emd check */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_ON));
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009734:	2201      	movs	r2, #1
 8009736:	215e      	movs	r1, #94	@ 0x5e
 8009738:	4618      	mov	r0, r3
 800973a:	f003 fde9 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 800973e:	4603      	mov	r3, r0
 8009740:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009742:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009744:	2b00      	cmp	r3, #0
 8009746:	d001      	beq.n	800974c <phacDiscLoop_Sw_Int_ActivateB+0x96>
 8009748:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800974a:	e181      	b.n	8009a50 <phacDiscLoop_Sw_Int_ActivateB+0x39a>

    pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].bSupportType4B = PH_OFF;
 800974c:	78fa      	ldrb	r2, [r7, #3]
 800974e:	6879      	ldr	r1, [r7, #4]
 8009750:	4613      	mov	r3, r2
 8009752:	009b      	lsls	r3, r3, #2
 8009754:	4413      	add	r3, r2
 8009756:	009b      	lsls	r3, r3, #2
 8009758:	440b      	add	r3, r1
 800975a:	33b0      	adds	r3, #176	@ 0xb0
 800975c:	2200      	movs	r2, #0
 800975e:	701a      	strb	r2, [r3, #0]
    if (0u != ((pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].aAtqB[PHAC_DISCLOOP_TYPEB_PROTOCOL_TYPE_OFFSET] & PHAC_DISCLOOP_TYPEB_MASK_PROTOCOL_TYPE)))
 8009760:	78fa      	ldrb	r2, [r7, #3]
 8009762:	6879      	ldr	r1, [r7, #4]
 8009764:	4613      	mov	r3, r2
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	4413      	add	r3, r2
 800976a:	009b      	lsls	r3, r3, #2
 800976c:	440b      	add	r3, r1
 800976e:	33ac      	adds	r3, #172	@ 0xac
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	f003 0301 	and.w	r3, r3, #1
 8009776:	2b00      	cmp	r3, #0
 8009778:	d009      	beq.n	800978e <phacDiscLoop_Sw_Int_ActivateB+0xd8>
    {
        pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].bSupportType4B = PH_ON;
 800977a:	78fa      	ldrb	r2, [r7, #3]
 800977c:	6879      	ldr	r1, [r7, #4]
 800977e:	4613      	mov	r3, r2
 8009780:	009b      	lsls	r3, r3, #2
 8009782:	4413      	add	r3, r2
 8009784:	009b      	lsls	r3, r3, #2
 8009786:	440b      	add	r3, r1
 8009788:	33b0      	adds	r3, #176	@ 0xb0
 800978a:	2201      	movs	r2, #1
 800978c:	701a      	strb	r2, [r3, #0]
    }

    if (((pDataParams->bOpeMode == RD_LIB_MODE_ISO) || (pDataParams->bOpeMode == RD_LIB_MODE_NFC)) &&
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009794:	2b03      	cmp	r3, #3
 8009796:	d004      	beq.n	80097a2 <phacDiscLoop_Sw_Int_ActivateB+0xec>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800979e:	2b02      	cmp	r3, #2
 80097a0:	d10c      	bne.n	80097bc <phacDiscLoop_Sw_Int_ActivateB+0x106>
        (pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].bSupportType4B == PH_OFF))
 80097a2:	78fa      	ldrb	r2, [r7, #3]
 80097a4:	6879      	ldr	r1, [r7, #4]
 80097a6:	4613      	mov	r3, r2
 80097a8:	009b      	lsls	r3, r3, #2
 80097aa:	4413      	add	r3, r2
 80097ac:	009b      	lsls	r3, r3, #2
 80097ae:	440b      	add	r3, r1
 80097b0:	33b0      	adds	r3, #176	@ 0xb0
 80097b2:	781b      	ldrb	r3, [r3, #0]
    if (((pDataParams->bOpeMode == RD_LIB_MODE_ISO) || (pDataParams->bOpeMode == RD_LIB_MODE_NFC)) &&
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d101      	bne.n	80097bc <phacDiscLoop_Sw_Int_ActivateB+0x106>
    {
        return PH_ERR_SUCCESS;
 80097b8:	2300      	movs	r3, #0
 80097ba:	e149      	b.n	8009a50 <phacDiscLoop_Sw_Int_ActivateB+0x39a>
    }

    bBitRateCapability = pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].aAtqB[9U];
 80097bc:	78fa      	ldrb	r2, [r7, #3]
 80097be:	6879      	ldr	r1, [r7, #4]
 80097c0:	4613      	mov	r3, r2
 80097c2:	009b      	lsls	r3, r3, #2
 80097c4:	4413      	add	r3, r2
 80097c6:	009b      	lsls	r3, r3, #2
 80097c8:	440b      	add	r3, r1
 80097ca:	33ab      	adds	r3, #171	@ 0xab
 80097cc:	781b      	ldrb	r3, [r3, #0]
 80097ce:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    bDsi = pDataParams->sTypeBTargetInfo.bDsi;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80097d8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    bDri = pDataParams->sTypeBTargetInfo.bDri;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80097e2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    /* Check user parameter change request versus Card bit rate capabilities and update DR and DS if required. */
    if (((bDsi != PHPAL_I14443P3B_DATARATE_106) || (bDri != PHPAL_I14443P3B_DATARATE_106)) &&
 80097e6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d104      	bne.n	80097f8 <phacDiscLoop_Sw_Int_ActivateB+0x142>
 80097ee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	f000 8081 	beq.w	80098fa <phacDiscLoop_Sw_Int_ActivateB+0x244>
        ((bBitRateCapability & 0x08U) == 0x00))
 80097f8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80097fc:	f003 0308 	and.w	r3, r3, #8
    if (((bDsi != PHPAL_I14443P3B_DATARATE_106) || (bDri != PHPAL_I14443P3B_DATARATE_106)) &&
 8009800:	2b00      	cmp	r3, #0
 8009802:	d17a      	bne.n	80098fa <phacDiscLoop_Sw_Int_ActivateB+0x244>
    {
        if (bBitRateCapability & 0x40U)
 8009804:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800980c:	2b00      	cmp	r3, #0
 800980e:	d003      	beq.n	8009818 <phacDiscLoop_Sw_Int_ActivateB+0x162>
        {
            bAtqb_Dsi = PHPAL_I14443P3B_DATARATE_848;
 8009810:	2303      	movs	r3, #3
 8009812:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009816:	e016      	b.n	8009846 <phacDiscLoop_Sw_Int_ActivateB+0x190>
        }
        else if (bBitRateCapability & 0x20U)
 8009818:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800981c:	f003 0320 	and.w	r3, r3, #32
 8009820:	2b00      	cmp	r3, #0
 8009822:	d003      	beq.n	800982c <phacDiscLoop_Sw_Int_ActivateB+0x176>
        {
            bAtqb_Dsi = PHPAL_I14443P3B_DATARATE_424;
 8009824:	2302      	movs	r3, #2
 8009826:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800982a:	e00c      	b.n	8009846 <phacDiscLoop_Sw_Int_ActivateB+0x190>
        }
        else if (bBitRateCapability & 0x10U)
 800982c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009830:	f003 0310 	and.w	r3, r3, #16
 8009834:	2b00      	cmp	r3, #0
 8009836:	d003      	beq.n	8009840 <phacDiscLoop_Sw_Int_ActivateB+0x18a>
        {
            bAtqb_Dsi = PHPAL_I14443P3B_DATARATE_212;
 8009838:	2301      	movs	r3, #1
 800983a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800983e:	e002      	b.n	8009846 <phacDiscLoop_Sw_Int_ActivateB+0x190>
        }
        else
        {
            bAtqb_Dsi = PHPAL_I14443P3B_DATARATE_106;
 8009840:	2300      	movs	r3, #0
 8009842:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }

        if (bBitRateCapability & 0x04U)
 8009846:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800984a:	f003 0304 	and.w	r3, r3, #4
 800984e:	2b00      	cmp	r3, #0
 8009850:	d003      	beq.n	800985a <phacDiscLoop_Sw_Int_ActivateB+0x1a4>
        {
            bAtqb_Dri = PHPAL_I14443P3B_DATARATE_848;
 8009852:	2303      	movs	r3, #3
 8009854:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009858:	e016      	b.n	8009888 <phacDiscLoop_Sw_Int_ActivateB+0x1d2>
        }
        else if (bBitRateCapability & 0x02U)
 800985a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800985e:	f003 0302 	and.w	r3, r3, #2
 8009862:	2b00      	cmp	r3, #0
 8009864:	d003      	beq.n	800986e <phacDiscLoop_Sw_Int_ActivateB+0x1b8>
        {
            bAtqb_Dri = PHPAL_I14443P3B_DATARATE_424;
 8009866:	2302      	movs	r3, #2
 8009868:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800986c:	e00c      	b.n	8009888 <phacDiscLoop_Sw_Int_ActivateB+0x1d2>
        }
        else if (bBitRateCapability & 0x01U)
 800986e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009872:	f003 0301 	and.w	r3, r3, #1
 8009876:	2b00      	cmp	r3, #0
 8009878:	d003      	beq.n	8009882 <phacDiscLoop_Sw_Int_ActivateB+0x1cc>
        {
            bAtqb_Dri = PHPAL_I14443P3B_DATARATE_212;
 800987a:	2301      	movs	r3, #1
 800987c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009880:	e002      	b.n	8009888 <phacDiscLoop_Sw_Int_ActivateB+0x1d2>
        }
        else
        {
            bAtqb_Dri = PHPAL_I14443P3B_DATARATE_106;
 8009882:	2300      	movs	r3, #0
 8009884:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        if ((bDsi != bAtqb_Dsi) && (bDsi > bAtqb_Dsi))
 8009888:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800988c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009890:	429a      	cmp	r2, r3
 8009892:	d009      	beq.n	80098a8 <phacDiscLoop_Sw_Int_ActivateB+0x1f2>
 8009894:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8009898:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800989c:	429a      	cmp	r2, r3
 800989e:	d903      	bls.n	80098a8 <phacDiscLoop_Sw_Int_ActivateB+0x1f2>
        {
            bDsi = bAtqb_Dsi;
 80098a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80098a4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        }

        if ((bDri != bAtqb_Dri) && (bDri > bAtqb_Dri))
 80098a8:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80098ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d009      	beq.n	80098c8 <phacDiscLoop_Sw_Int_ActivateB+0x212>
 80098b4:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80098b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80098bc:	429a      	cmp	r2, r3
 80098be:	d903      	bls.n	80098c8 <phacDiscLoop_Sw_Int_ActivateB+0x212>
        {
            bDri = bAtqb_Dri;
 80098c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80098c4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        }

        if (bBitRateCapability & 0x80U)
 80098c8:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	da14      	bge.n	80098fa <phacDiscLoop_Sw_Int_ActivateB+0x244>
        {
            /* Only same bit rate allowed in both directions. */
            if (bDsi != bDri)
 80098d0:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80098d4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80098d8:	429a      	cmp	r2, r3
 80098da:	d00e      	beq.n	80098fa <phacDiscLoop_Sw_Int_ActivateB+0x244>
            {
                (bDsi < bDri) ? (bDri = bDsi) : (bDsi = bDri);
 80098dc:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80098e0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d204      	bcs.n	80098f2 <phacDiscLoop_Sw_Int_ActivateB+0x23c>
 80098e8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80098ec:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 80098f0:	e003      	b.n	80098fa <phacDiscLoop_Sw_Int_ActivateB+0x244>
 80098f2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80098f6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            }
        }
    }

    PH_CHECK_SUCCESS_FCT(status, phpalI14443p3b_Attrib(
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80098fe:	78fa      	ldrb	r2, [r7, #3]
 8009900:	4613      	mov	r3, r2
 8009902:	009b      	lsls	r3, r3, #2
 8009904:	4413      	add	r3, r2
 8009906:	009b      	lsls	r3, r3, #2
 8009908:	3398      	adds	r3, #152	@ 0x98
 800990a:	687a      	ldr	r2, [r7, #4]
 800990c:	4413      	add	r3, r2
 800990e:	f103 040a 	add.w	r4, r3, #10
 8009912:	78fa      	ldrb	r2, [r7, #3]
 8009914:	6879      	ldr	r1, [r7, #4]
 8009916:	4613      	mov	r3, r2
 8009918:	009b      	lsls	r3, r3, #2
 800991a:	4413      	add	r3, r2
 800991c:	009b      	lsls	r3, r3, #2
 800991e:	440b      	add	r3, r1
 8009920:	33af      	adds	r3, #175	@ 0xaf
 8009922:	7819      	ldrb	r1, [r3, #0]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f893 5099 	ldrb.w	r5, [r3, #153]	@ 0x99
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	32b2      	adds	r2, #178	@ 0xb2
 8009934:	9203      	str	r2, [sp, #12]
 8009936:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800993a:	9202      	str	r2, [sp, #8]
 800993c:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8009940:	9201      	str	r2, [sp, #4]
 8009942:	9300      	str	r3, [sp, #0]
 8009944:	462b      	mov	r3, r5
 8009946:	460a      	mov	r2, r1
 8009948:	4621      	mov	r1, r4
 800994a:	f00a f949 	bl	8013be0 <phpalI14443p3b_Sw_Attrib>
 800994e:	4603      	mov	r3, r0
 8009950:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009952:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009954:	2b00      	cmp	r3, #0
 8009956:	d001      	beq.n	800995c <phacDiscLoop_Sw_Int_ActivateB+0x2a6>
 8009958:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800995a:	e079      	b.n	8009a50 <phacDiscLoop_Sw_Int_ActivateB+0x39a>
        pDataParams->sTypeBTargetInfo.bCid,
        bDri,
        bDsi,
        &pDataParams->sTypeBTargetInfo.sTypeB_I3P4.bMbli));

    if (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009962:	2b01      	cmp	r3, #1
 8009964:	d027      	beq.n	80099b6 <phacDiscLoop_Sw_Int_ActivateB+0x300>
    {
        /* Update Dri and Dsi parameters with currently applied values. */
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p3b_GetConfig(
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800996a:	f107 0208 	add.w	r2, r7, #8
 800996e:	2104      	movs	r1, #4
 8009970:	4618      	mov	r0, r3
 8009972:	f00a f831 	bl	80139d8 <phpalI14443p3b_Sw_GetConfig>
 8009976:	4603      	mov	r3, r0
 8009978:	847b      	strh	r3, [r7, #34]	@ 0x22
 800997a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800997c:	2b00      	cmp	r3, #0
 800997e:	d001      	beq.n	8009984 <phacDiscLoop_Sw_Int_ActivateB+0x2ce>
 8009980:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009982:	e065      	b.n	8009a50 <phacDiscLoop_Sw_Int_ActivateB+0x39a>
            pDataParams->pPal1443p3bDataParams,
            PHPAL_I14443P3B_CONFIG_DRI,
            &wDataRate));
        pDataParams->sTypeBTargetInfo.bDri = (uint8_t)wDataRate;
 8009984:	893b      	ldrh	r3, [r7, #8]
 8009986:	b2da      	uxtb	r2, r3
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

        PH_CHECK_SUCCESS_FCT(status, phpalI14443p3b_GetConfig(
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009992:	f107 0208 	add.w	r2, r7, #8
 8009996:	2105      	movs	r1, #5
 8009998:	4618      	mov	r0, r3
 800999a:	f00a f81d 	bl	80139d8 <phpalI14443p3b_Sw_GetConfig>
 800999e:	4603      	mov	r3, r0
 80099a0:	847b      	strh	r3, [r7, #34]	@ 0x22
 80099a2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d001      	beq.n	80099ac <phacDiscLoop_Sw_Int_ActivateB+0x2f6>
 80099a8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80099aa:	e051      	b.n	8009a50 <phacDiscLoop_Sw_Int_ActivateB+0x39a>
            pDataParams->pPal1443p3bDataParams,
            PHPAL_I14443P3B_CONFIG_DSI,
            &wDataRate));
        pDataParams->sTypeBTargetInfo.bDsi = (uint8_t)wDataRate;
 80099ac:	893b      	ldrh	r3, [r7, #8]
 80099ae:	b2da      	uxtb	r2, r3
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
    }

    /* Retrieve 14443-3b protocol parameter */
    PH_CHECK_SUCCESS_FCT(status, phpalI14443p3b_GetProtocolParams(
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80099ba:	f107 040d 	add.w	r4, r7, #13
 80099be:	f107 020e 	add.w	r2, r7, #14
 80099c2:	f107 010f 	add.w	r1, r7, #15
 80099c6:	f107 030a 	add.w	r3, r7, #10
 80099ca:	9302      	str	r3, [sp, #8]
 80099cc:	f107 030b 	add.w	r3, r7, #11
 80099d0:	9301      	str	r3, [sp, #4]
 80099d2:	f107 030c 	add.w	r3, r7, #12
 80099d6:	9300      	str	r3, [sp, #0]
 80099d8:	4623      	mov	r3, r4
 80099da:	f00a fbbf 	bl	801415c <phpalI14443p3b_Sw_GetProtocolParams>
 80099de:	4603      	mov	r3, r0
 80099e0:	847b      	strh	r3, [r7, #34]	@ 0x22
 80099e2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d001      	beq.n	80099ec <phacDiscLoop_Sw_Int_ActivateB+0x336>
 80099e8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80099ea:	e031      	b.n	8009a50 <phacDiscLoop_Sw_Int_ActivateB+0x39a>
        &bFwi,
        &bFsdi,
        &bFsci));

    /* EMVCo v3.1: Limit the FSCI value to be used based on the RdLib execution environment. */
    if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	d109      	bne.n	8009a0a <phacDiscLoop_Sw_Int_ActivateB+0x354>
    {
        if (bFsci > pDataParams->bFsciMax)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80099fc:	7abb      	ldrb	r3, [r7, #10]
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d203      	bcs.n	8009a0a <phacDiscLoop_Sw_Int_ActivateB+0x354>
        {
            bFsci = pDataParams->bFsciMax;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8009a08:	72bb      	strb	r3, [r7, #10]
        }
    }

    /* Set 14443-4 protocol parameter */
    status = phpalI14443p4_SetProtocol(
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8009a0e:	7bfd      	ldrb	r5, [r7, #15]
 8009a10:	7bbe      	ldrb	r6, [r7, #14]
 8009a12:	f897 c00d 	ldrb.w	ip, [r7, #13]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8009a1c:	7b3a      	ldrb	r2, [r7, #12]
 8009a1e:	7af9      	ldrb	r1, [r7, #11]
 8009a20:	7ab8      	ldrb	r0, [r7, #10]
 8009a22:	9003      	str	r0, [sp, #12]
 8009a24:	9102      	str	r1, [sp, #8]
 8009a26:	9201      	str	r2, [sp, #4]
 8009a28:	9300      	str	r3, [sp, #0]
 8009a2a:	4663      	mov	r3, ip
 8009a2c:	4632      	mov	r2, r6
 8009a2e:	4629      	mov	r1, r5
 8009a30:	4620      	mov	r0, r4
 8009a32:	f00a fdc6 	bl	80145c2 <phpalI14443p4_Sw_SetProtocol>
 8009a36:	4603      	mov	r3, r0
 8009a38:	847b      	strh	r3, [r7, #34]	@ 0x22
        bFsdi,
        bFsci);

#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_I3P4B_TAGS */

    pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].bSleep = 0U;
 8009a3a:	78fa      	ldrb	r2, [r7, #3]
 8009a3c:	6879      	ldr	r1, [r7, #4]
 8009a3e:	4613      	mov	r3, r2
 8009a40:	009b      	lsls	r3, r3, #2
 8009a42:	4413      	add	r3, r2
 8009a44:	009b      	lsls	r3, r3, #2
 8009a46:	440b      	add	r3, r1
 8009a48:	33b1      	adds	r3, #177	@ 0xb1
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	701a      	strb	r2, [r3, #0]
    return status;
 8009a4e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	372c      	adds	r7, #44	@ 0x2c
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009a58 <phacDiscLoop_Sw_Int_CheckForDuplication>:
static phStatus_t phacDiscLoop_Sw_Int_CheckForDuplication(
                                                          phacDiscLoop_Sw_DataParams_t * pDataParams,
                                                          uint8_t *pID,
                                                          uint8_t *pIsDuplicate
                                                          )
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b086      	sub	sp, #24
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	60f8      	str	r0, [r7, #12]
 8009a60:	60b9      	str	r1, [r7, #8]
 8009a62:	607a      	str	r2, [r7, #4]
    uint8_t PH_MEMLOC_COUNT bIndex = 0x00;
 8009a64:	2300      	movs	r3, #0
 8009a66:	75fb      	strb	r3, [r7, #23]

    *pIsDuplicate = PH_OFF;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	701a      	strb	r2, [r3, #0]

    for(bIndex = 0; bIndex < pDataParams->sTypeFTargetInfo.bTotalTagsFound; bIndex++)
 8009a6e:	2300      	movs	r3, #0
 8009a70:	75fb      	strb	r3, [r7, #23]
 8009a72:	e019      	b.n	8009aa8 <phacDiscLoop_Sw_Int_CheckForDuplication+0x50>
    {   /* Skip Identical Entry */
        if((memcmp(pID, pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].aIDmPMm, PHAC_DISCLOOP_FELICA_IDM_LENGTH + PHAC_DISCLOOP_FELICA_PMM_LENGTH )) == 0)
 8009a74:	7dfa      	ldrb	r2, [r7, #23]
 8009a76:	4613      	mov	r3, r2
 8009a78:	005b      	lsls	r3, r3, #1
 8009a7a:	4413      	add	r3, r2
 8009a7c:	00da      	lsls	r2, r3, #3
 8009a7e:	1ad2      	subs	r2, r2, r3
 8009a80:	f102 0378 	add.w	r3, r2, #120	@ 0x78
 8009a84:	68fa      	ldr	r2, [r7, #12]
 8009a86:	4413      	add	r3, r2
 8009a88:	3308      	adds	r3, #8
 8009a8a:	2210      	movs	r2, #16
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	68b8      	ldr	r0, [r7, #8]
 8009a90:	f013 fb26 	bl	801d0e0 <memcmp>
 8009a94:	4603      	mov	r3, r0
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d103      	bne.n	8009aa2 <phacDiscLoop_Sw_Int_CheckForDuplication+0x4a>
        {
            *pIsDuplicate = PH_ON;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2201      	movs	r2, #1
 8009a9e:	701a      	strb	r2, [r3, #0]
            /* Update baud rate if device is detected with higher baud rate */
            break;
 8009aa0:	e008      	b.n	8009ab4 <phacDiscLoop_Sw_Int_CheckForDuplication+0x5c>
    for(bIndex = 0; bIndex < pDataParams->sTypeFTargetInfo.bTotalTagsFound; bIndex++)
 8009aa2:	7dfb      	ldrb	r3, [r7, #23]
 8009aa4:	3301      	adds	r3, #1
 8009aa6:	75fb      	strb	r3, [r7, #23]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8009aae:	7dfa      	ldrb	r2, [r7, #23]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d3df      	bcc.n	8009a74 <phacDiscLoop_Sw_Int_CheckForDuplication+0x1c>
        }
    }
    return PH_ERR_SUCCESS;
 8009ab4:	2300      	movs	r3, #0
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3718      	adds	r7, #24
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}

08009abe <phacDiscLoop_Sw_Int_UpdateSensFResp>:
                                                      phacDiscLoop_Sw_DataParams_t * pDataParams,
                                                      uint8_t *pID,
                                                      uint8_t bIdLen,
                                                      uint16_t wCurrentBaudBitPos
                                                      )
{
 8009abe:	b580      	push	{r7, lr}
 8009ac0:	b086      	sub	sp, #24
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	60f8      	str	r0, [r7, #12]
 8009ac6:	60b9      	str	r1, [r7, #8]
 8009ac8:	4611      	mov	r1, r2
 8009aca:	461a      	mov	r2, r3
 8009acc:	460b      	mov	r3, r1
 8009ace:	71fb      	strb	r3, [r7, #7]
 8009ad0:	4613      	mov	r3, r2
 8009ad2:	80bb      	strh	r3, [r7, #4]
    phStatus_t PH_MEMLOC_REM   wStatus = PH_ERR_SUCCESS;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	82bb      	strh	r3, [r7, #20]
    uint8_t    PH_MEMLOC_REM   bIsDuplicate;
    uint8_t    PH_MEMLOC_REM   bTotalTagsFound = 0x00;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	75fb      	strb	r3, [r7, #23]
    uint16_t   PH_MEMLOC_REM   wRequestCode;

    PH_CHECK_SUCCESS_FCT(wStatus, phacDiscLoop_Sw_Int_CheckForDuplication(pDataParams, &pID[0x00], &bIsDuplicate));
 8009adc:	f107 0313 	add.w	r3, r7, #19
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	68b9      	ldr	r1, [r7, #8]
 8009ae4:	68f8      	ldr	r0, [r7, #12]
 8009ae6:	f7ff ffb7 	bl	8009a58 <phacDiscLoop_Sw_Int_CheckForDuplication>
 8009aea:	4603      	mov	r3, r0
 8009aec:	82bb      	strh	r3, [r7, #20]
 8009aee:	8abb      	ldrh	r3, [r7, #20]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d001      	beq.n	8009af8 <phacDiscLoop_Sw_Int_UpdateSensFResp+0x3a>
 8009af4:	8abb      	ldrh	r3, [r7, #20]
 8009af6:	e086      	b.n	8009c06 <phacDiscLoop_Sw_Int_UpdateSensFResp+0x148>
    if(0U == (bIsDuplicate))
 8009af8:	7cfb      	ldrb	r3, [r7, #19]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d179      	bne.n	8009bf2 <phacDiscLoop_Sw_Int_UpdateSensFResp+0x134>
    {
        /* get Request code is enable */
        PH_CHECK_SUCCESS_FCT(wStatus, phpalFelica_GetConfig(pDataParams->pPalFelicaDataParams, PHPAL_FELICA_CONFIG_RC, &wRequestCode));
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b02:	f107 0210 	add.w	r2, r7, #16
 8009b06:	2100      	movs	r1, #0
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f009 f880 	bl	8012c0e <phpalFelica_Sw_GetConfig>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	82bb      	strh	r3, [r7, #20]
 8009b12:	8abb      	ldrh	r3, [r7, #20]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d001      	beq.n	8009b1c <phacDiscLoop_Sw_Int_UpdateSensFResp+0x5e>
 8009b18:	8abb      	ldrh	r3, [r7, #20]
 8009b1a:	e074      	b.n	8009c06 <phacDiscLoop_Sw_Int_UpdateSensFResp+0x148>

        pDataParams->sTypeFTargetInfo.aTypeFTag[pDataParams->sTypeFTargetInfo.bTotalTagsFound + bTotalTagsFound].bLength = (uint8_t) bIdLen;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8009b22:	461a      	mov	r2, r3
 8009b24:	7dfb      	ldrb	r3, [r7, #23]
 8009b26:	441a      	add	r2, r3
 8009b28:	68f9      	ldr	r1, [r7, #12]
 8009b2a:	4613      	mov	r3, r2
 8009b2c:	005b      	lsls	r3, r3, #1
 8009b2e:	4413      	add	r3, r2
 8009b30:	00da      	lsls	r2, r3, #3
 8009b32:	1ad2      	subs	r2, r2, r3
 8009b34:	188b      	adds	r3, r1, r2
 8009b36:	3394      	adds	r3, #148	@ 0x94
 8009b38:	79fa      	ldrb	r2, [r7, #7]
 8009b3a:	701a      	strb	r2, [r3, #0]

        /* Copy RD(Request Data) if received */
        if((wRequestCode != PH_OFF) && (bIdLen > (PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH)))
 8009b3c:	8a3b      	ldrh	r3, [r7, #16]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d018      	beq.n	8009b74 <phacDiscLoop_Sw_Int_UpdateSensFResp+0xb6>
 8009b42:	79fb      	ldrb	r3, [r7, #7]
 8009b44:	2b10      	cmp	r3, #16
 8009b46:	d915      	bls.n	8009b74 <phacDiscLoop_Sw_Int_UpdateSensFResp+0xb6>
        {
            (void)memcpy((uint8_t *)&(pDataParams->sTypeFTargetInfo.aTypeFTag[pDataParams->sTypeFTargetInfo.bTotalTagsFound + bTotalTagsFound].aRD), &pID[PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH], PHPAL_FELICA_RD_LENGTH);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8009b4e:	461a      	mov	r2, r3
 8009b50:	7dfb      	ldrb	r3, [r7, #23]
 8009b52:	441a      	add	r2, r3
 8009b54:	4613      	mov	r3, r2
 8009b56:	005b      	lsls	r3, r3, #1
 8009b58:	4413      	add	r3, r2
 8009b5a:	00da      	lsls	r2, r3, #3
 8009b5c:	1ad2      	subs	r2, r2, r3
 8009b5e:	f102 0388 	add.w	r3, r2, #136	@ 0x88
 8009b62:	68fa      	ldr	r2, [r7, #12]
 8009b64:	4413      	add	r3, r2
 8009b66:	3308      	adds	r3, #8
 8009b68:	68ba      	ldr	r2, [r7, #8]
 8009b6a:	3210      	adds	r2, #16
 8009b6c:	8812      	ldrh	r2, [r2, #0]
 8009b6e:	b292      	uxth	r2, r2
 8009b70:	801a      	strh	r2, [r3, #0]
 8009b72:	e014      	b.n	8009b9e <phacDiscLoop_Sw_Int_UpdateSensFResp+0xe0>
        }
        else
        {
            (void)memset((uint8_t *)&(pDataParams->sTypeFTargetInfo.aTypeFTag[pDataParams->sTypeFTargetInfo.bTotalTagsFound + bTotalTagsFound].aRD), 0x00, PHPAL_FELICA_RD_LENGTH);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8009b7a:	461a      	mov	r2, r3
 8009b7c:	7dfb      	ldrb	r3, [r7, #23]
 8009b7e:	441a      	add	r2, r3
 8009b80:	4613      	mov	r3, r2
 8009b82:	005b      	lsls	r3, r3, #1
 8009b84:	4413      	add	r3, r2
 8009b86:	00da      	lsls	r2, r3, #3
 8009b88:	1ad2      	subs	r2, r2, r3
 8009b8a:	f102 0388 	add.w	r3, r2, #136	@ 0x88
 8009b8e:	68fa      	ldr	r2, [r7, #12]
 8009b90:	4413      	add	r3, r2
 8009b92:	3308      	adds	r3, #8
 8009b94:	2202      	movs	r2, #2
 8009b96:	2100      	movs	r1, #0
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f013 fab1 	bl	801d100 <memset>
        }

        /* Copy IDMmPMm */
        (void)memcpy( (uint8_t *)&(pDataParams->sTypeFTargetInfo.aTypeFTag[pDataParams->sTypeFTargetInfo.bTotalTagsFound + bTotalTagsFound].aIDmPMm), pID, (PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH));
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	7dfb      	ldrb	r3, [r7, #23]
 8009ba8:	441a      	add	r2, r3
 8009baa:	4613      	mov	r3, r2
 8009bac:	005b      	lsls	r3, r3, #1
 8009bae:	4413      	add	r3, r2
 8009bb0:	00da      	lsls	r2, r3, #3
 8009bb2:	1ad2      	subs	r2, r2, r3
 8009bb4:	f102 0378 	add.w	r3, r2, #120	@ 0x78
 8009bb8:	68fa      	ldr	r2, [r7, #12]
 8009bba:	4413      	add	r3, r2
 8009bbc:	3308      	adds	r3, #8
 8009bbe:	2210      	movs	r2, #16
 8009bc0:	68b9      	ldr	r1, [r7, #8]
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f013 fb1b 	bl	801d1fe <memcpy>
        pDataParams->sTypeFTargetInfo.aTypeFTag[pDataParams->sTypeFTargetInfo.bTotalTagsFound + bTotalTagsFound].bBaud = (uint8_t)(wCurrentBaudBitPos & 0xFFU);
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8009bce:	461a      	mov	r2, r3
 8009bd0:	7dfb      	ldrb	r3, [r7, #23]
 8009bd2:	441a      	add	r2, r3
 8009bd4:	88bb      	ldrh	r3, [r7, #4]
 8009bd6:	b2d8      	uxtb	r0, r3
 8009bd8:	68f9      	ldr	r1, [r7, #12]
 8009bda:	4613      	mov	r3, r2
 8009bdc:	005b      	lsls	r3, r3, #1
 8009bde:	4413      	add	r3, r2
 8009be0:	00da      	lsls	r2, r3, #3
 8009be2:	1ad2      	subs	r2, r2, r3
 8009be4:	188b      	adds	r3, r1, r2
 8009be6:	3392      	adds	r3, #146	@ 0x92
 8009be8:	4602      	mov	r2, r0
 8009bea:	701a      	strb	r2, [r3, #0]

        /* Increment Tag count */
        bTotalTagsFound++;
 8009bec:	7dfb      	ldrb	r3, [r7, #23]
 8009bee:	3301      	adds	r3, #1
 8009bf0:	75fb      	strb	r3, [r7, #23]
    }

    pDataParams->sTypeFTargetInfo.bTotalTagsFound += bTotalTagsFound;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 8009bf8:	7dfb      	ldrb	r3, [r7, #23]
 8009bfa:	4413      	add	r3, r2
 8009bfc:	b2da      	uxtb	r2, r3
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return PH_ERR_SUCCESS;
 8009c04:	2300      	movs	r3, #0
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3718      	adds	r7, #24
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}

08009c0e <phacDiscLoop_Sw_Int_SendSensFReq>:

                                                      phacDiscLoop_Sw_DataParams_t * pDataParams,
                                                      uint8_t bNumTimeSlots,
                                                      uint16_t wCurrentBaudBitPos
                                                      )
{
 8009c0e:	b590      	push	{r4, r7, lr}
 8009c10:	b08b      	sub	sp, #44	@ 0x2c
 8009c12:	af02      	add	r7, sp, #8
 8009c14:	6078      	str	r0, [r7, #4]
 8009c16:	460b      	mov	r3, r1
 8009c18:	70fb      	strb	r3, [r7, #3]
 8009c1a:	4613      	mov	r3, r2
 8009c1c:	803b      	strh	r3, [r7, #0]
    phStatus_t PH_MEMLOC_REM wStatus = PH_ERR_INTERNAL_ERROR;
 8009c1e:	237f      	movs	r3, #127	@ 0x7f
 8009c20:	83fb      	strh	r3, [r7, #30]
    uint8_t    PH_MEMLOC_BUF baSystemCode[2] = {PHPAL_FELICA_SYSTEM_CODE_BYTE_0,
 8009c22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009c26:	83bb      	strh	r3, [r7, #28]
                                                PHPAL_FELICA_SYSTEM_CODE_BYTE_1};
    uint16_t   PH_MEMLOC_REM wTemp = 0U;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	837b      	strh	r3, [r7, #26]
    uint8_t *  PH_MEMLOC_REM pId = NULL;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	617b      	str	r3, [r7, #20]
    uint8_t *  PH_MEMLOC_REM pRxBuff = NULL;
 8009c30:	2300      	movs	r3, #0
 8009c32:	613b      	str	r3, [r7, #16]
    uint8_t    PH_MEMLOC_REM bIdLen;
    phStatus_t PH_MEMLOC_REM wFrameStatus;

    /* send ReqC command */
    wStatus = phpalFelica_ReqC(pDataParams->pPalFelicaDataParams, baSystemCode, bNumTimeSlots, &pRxBuff, &wTemp);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009c38:	f107 0410 	add.w	r4, r7, #16
 8009c3c:	78fa      	ldrb	r2, [r7, #3]
 8009c3e:	f107 011c 	add.w	r1, r7, #28
 8009c42:	f107 031a 	add.w	r3, r7, #26
 8009c46:	9300      	str	r3, [sp, #0]
 8009c48:	4623      	mov	r3, r4
 8009c4a:	f008 fdf5 	bl	8012838 <phpalFelica_Sw_ReqC>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	83fb      	strh	r3, [r7, #30]

    if((wStatus & PH_ERR_MASK) == PH_ERR_SUCCESS)
 8009c52:	8bfb      	ldrh	r3, [r7, #30]
 8009c54:	b2db      	uxtb	r3, r3
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d164      	bne.n	8009d24 <phacDiscLoop_Sw_Int_SendSensFReq+0x116>
    {
        if(bNumTimeSlots > PHPAL_FELICA_NUMSLOTS_1)
 8009c5a:	78fb      	ldrb	r3, [r7, #3]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d048      	beq.n	8009cf2 <phacDiscLoop_Sw_Int_SendSensFReq+0xe4>
        {
            /* get total number of response frame */
            PH_CHECK_SUCCESS_FCT(wStatus, phpalFelica_GetConfig(pDataParams->pPalFelicaDataParams, PH_PALFELICA_CONFIG_NUM_RESPONSE_FRAMES, &wTemp));
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c64:	f107 021a 	add.w	r2, r7, #26
 8009c68:	2101      	movs	r1, #1
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f008 ffcf 	bl	8012c0e <phpalFelica_Sw_GetConfig>
 8009c70:	4603      	mov	r3, r0
 8009c72:	83fb      	strh	r3, [r7, #30]
 8009c74:	8bfb      	ldrh	r3, [r7, #30]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d037      	beq.n	8009cea <phacDiscLoop_Sw_Int_SendSensFReq+0xdc>
 8009c7a:	8bfb      	ldrh	r3, [r7, #30]
 8009c7c:	e053      	b.n	8009d26 <phacDiscLoop_Sw_Int_SendSensFReq+0x118>

            while(0U != wTemp)
            {
                bIdLen = 0x00;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	73fb      	strb	r3, [r7, #15]
                wFrameStatus = 0x00;
 8009c82:	2300      	movs	r3, #0
 8009c84:	81bb      	strh	r3, [r7, #12]
                /* retrieve IDmPMm one by one for all frames */
                PH_CHECK_SUCCESS_FCT(wStatus, phpalFelica_GetFrameInfo(
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009c8a:	8b7b      	ldrh	r3, [r7, #26]
 8009c8c:	b2d9      	uxtb	r1, r3
 8009c8e:	693a      	ldr	r2, [r7, #16]
 8009c90:	f107 040c 	add.w	r4, r7, #12
 8009c94:	f107 030f 	add.w	r3, r7, #15
 8009c98:	9301      	str	r3, [sp, #4]
 8009c9a:	f107 0314 	add.w	r3, r7, #20
 8009c9e:	9300      	str	r3, [sp, #0]
 8009ca0:	4623      	mov	r3, r4
 8009ca2:	f008 fedf 	bl	8012a64 <phpalFelica_Sw_GetFrameInfo>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	83fb      	strh	r3, [r7, #30]
 8009caa:	8bfb      	ldrh	r3, [r7, #30]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d001      	beq.n	8009cb4 <phacDiscLoop_Sw_Int_SendSensFReq+0xa6>
 8009cb0:	8bfb      	ldrh	r3, [r7, #30]
 8009cb2:	e038      	b.n	8009d26 <phacDiscLoop_Sw_Int_SendSensFReq+0x118>
                                                    pRxBuff,
                                                    &wFrameStatus,
                                                    &pId,
                                                    &bIdLen));

                if(wFrameStatus == PH_ERR_SUCCESS)
 8009cb4:	89bb      	ldrh	r3, [r7, #12]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d10c      	bne.n	8009cd4 <phacDiscLoop_Sw_Int_SendSensFReq+0xc6>
                {
                    /* store received IDmPMm */
                    PH_CHECK_SUCCESS_FCT(wStatus, phacDiscLoop_Sw_Int_UpdateSensFResp(pDataParams, pId, bIdLen, wCurrentBaudBitPos));
 8009cba:	6979      	ldr	r1, [r7, #20]
 8009cbc:	7bfa      	ldrb	r2, [r7, #15]
 8009cbe:	883b      	ldrh	r3, [r7, #0]
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f7ff fefc 	bl	8009abe <phacDiscLoop_Sw_Int_UpdateSensFResp>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	83fb      	strh	r3, [r7, #30]
 8009cca:	8bfb      	ldrh	r3, [r7, #30]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d001      	beq.n	8009cd4 <phacDiscLoop_Sw_Int_SendSensFReq+0xc6>
 8009cd0:	8bfb      	ldrh	r3, [r7, #30]
 8009cd2:	e028      	b.n	8009d26 <phacDiscLoop_Sw_Int_SendSensFReq+0x118>
                }
                wTemp--;
 8009cd4:	8b7b      	ldrh	r3, [r7, #26]
 8009cd6:	3b01      	subs	r3, #1
 8009cd8:	b29b      	uxth	r3, r3
 8009cda:	837b      	strh	r3, [r7, #26]

                /* Check for device limit */
                if(pDataParams->sTypeFTargetInfo.bTotalTagsFound >= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F212])
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	7b1b      	ldrb	r3, [r3, #12]
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d211      	bcs.n	8009d0e <phacDiscLoop_Sw_Int_SendSensFReq+0x100>
            while(0U != wTemp)
 8009cea:	8b7b      	ldrh	r3, [r7, #26]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d1c6      	bne.n	8009c7e <phacDiscLoop_Sw_Int_SendSensFReq+0x70>
 8009cf0:	e00e      	b.n	8009d10 <phacDiscLoop_Sw_Int_SendSensFReq+0x102>
            }
        }
        else
        {
            /* store received IDmPMm */
            PH_CHECK_SUCCESS_FCT(wStatus, phacDiscLoop_Sw_Int_UpdateSensFResp(pDataParams, pRxBuff, (uint8_t)wTemp, wCurrentBaudBitPos));
 8009cf2:	6939      	ldr	r1, [r7, #16]
 8009cf4:	8b7b      	ldrh	r3, [r7, #26]
 8009cf6:	b2da      	uxtb	r2, r3
 8009cf8:	883b      	ldrh	r3, [r7, #0]
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f7ff fedf 	bl	8009abe <phacDiscLoop_Sw_Int_UpdateSensFResp>
 8009d00:	4603      	mov	r3, r0
 8009d02:	83fb      	strh	r3, [r7, #30]
 8009d04:	8bfb      	ldrh	r3, [r7, #30]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d002      	beq.n	8009d10 <phacDiscLoop_Sw_Int_SendSensFReq+0x102>
 8009d0a:	8bfb      	ldrh	r3, [r7, #30]
 8009d0c:	e00b      	b.n	8009d26 <phacDiscLoop_Sw_Int_SendSensFReq+0x118>
                    break;
 8009d0e:	bf00      	nop
        }

        /*Response is success but no device found*/
        if(pDataParams->sTypeFTargetInfo.bTotalTagsFound == 0U)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d102      	bne.n	8009d20 <phacDiscLoop_Sw_Int_SendSensFReq+0x112>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_AC_DISCLOOP);
 8009d1a:	f244 037f 	movw	r3, #16511	@ 0x407f
 8009d1e:	e002      	b.n	8009d26 <phacDiscLoop_Sw_Int_SendSensFReq+0x118>
        }
        else
        {
            return PH_ERR_SUCCESS;
 8009d20:	2300      	movs	r3, #0
 8009d22:	e000      	b.n	8009d26 <phacDiscLoop_Sw_Int_SendSensFReq+0x118>
        }
    }

    return wStatus;
 8009d24:	8bfb      	ldrh	r3, [r7, #30]
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3724      	adds	r7, #36	@ 0x24
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd90      	pop	{r4, r7, pc}

08009d2e <phacDiscLoop_Sw_DetTechTypeF>:
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */

phStatus_t phacDiscLoop_Sw_DetTechTypeF(
                                        phacDiscLoop_Sw_DataParams_t *pDataParams
                                        )
{
 8009d2e:	b580      	push	{r7, lr}
 8009d30:	b084      	sub	sp, #16
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    phStatus_t PH_MEMLOC_REM wStatus = PH_ERR_INTERNAL_ERROR;
 8009d36:	237f      	movs	r3, #127	@ 0x7f
 8009d38:	81fb      	strh	r3, [r7, #14]
    uint16_t   PH_MEMLOC_REM wCurrentBaudBitPos;

    PH_CHECK_SUCCESS_FCT(wStatus,phpalFelica_SetConfig(pDataParams->pPalFelicaDataParams, PHPAL_FELICA_CONFIG_RC, PH_OFF));
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d3e:	2200      	movs	r2, #0
 8009d40:	2100      	movs	r1, #0
 8009d42:	4618      	mov	r0, r3
 8009d44:	f008 ff2b 	bl	8012b9e <phpalFelica_Sw_SetConfig>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	81fb      	strh	r3, [r7, #14]
 8009d4c:	89fb      	ldrh	r3, [r7, #14]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d001      	beq.n	8009d56 <phacDiscLoop_Sw_DetTechTypeF+0x28>
 8009d52:	89fb      	ldrh	r3, [r7, #14]
 8009d54:	e042      	b.n	8009ddc <phacDiscLoop_Sw_DetTechTypeF+0xae>

    /* get current FeliCa baud rate */
    PH_CHECK_SUCCESS_FCT(wStatus, phacDiscLoop_GetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_TYPEF_CUR_BAUD, &wCurrentBaudBitPos));
 8009d56:	f107 030c 	add.w	r3, r7, #12
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	2157      	movs	r1, #87	@ 0x57
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f7fd fbb8 	bl	80074d4 <phacDiscLoop_Sw_GetConfig>
 8009d64:	4603      	mov	r3, r0
 8009d66:	81fb      	strh	r3, [r7, #14]
 8009d68:	89fb      	ldrh	r3, [r7, #14]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d001      	beq.n	8009d72 <phacDiscLoop_Sw_DetTechTypeF+0x44>
 8009d6e:	89fb      	ldrh	r3, [r7, #14]
 8009d70:	e034      	b.n	8009ddc <phacDiscLoop_Sw_DetTechTypeF+0xae>

    /* if any tag has detected, do not reset the tag count */
    if(0U == (pDataParams->bDetectedTechs & (PHAC_DISCLOOP_POS_BIT_MASK_F424 | PHAC_DISCLOOP_POS_BIT_MASK_F212)))
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8009d78:	f003 030c 	and.w	r3, r3, #12
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d103      	bne.n	8009d88 <phacDiscLoop_Sw_DetTechTypeF+0x5a>
    {
        pDataParams->sTypeFTargetInfo.bTotalTagsFound = 0;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    }

    /* re-set Collision Pending bit */
    pDataParams->bCollPend &= (uint8_t)~(uint8_t)(wCurrentBaudBitPos & 0xFFU);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	7f9a      	ldrb	r2, [r3, #30]
 8009d8c:	89bb      	ldrh	r3, [r7, #12]
 8009d8e:	b2db      	uxtb	r3, r3
 8009d90:	43db      	mvns	r3, r3
 8009d92:	b2db      	uxtb	r3, r3
 8009d94:	4013      	ands	r3, r2
 8009d96:	b2da      	uxtb	r2, r3
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	779a      	strb	r2, [r3, #30]
    wStatus = phacDiscLoop_Sw_Int_SendSensFReq(pDataParams, PHPAL_FELICA_NUMSLOTS_4, wCurrentBaudBitPos);
 8009d9c:	89bb      	ldrh	r3, [r7, #12]
 8009d9e:	461a      	mov	r2, r3
 8009da0:	2103      	movs	r1, #3
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f7ff ff33 	bl	8009c0e <phacDiscLoop_Sw_Int_SendSensFReq>
 8009da8:	4603      	mov	r3, r0
 8009daa:	81fb      	strh	r3, [r7, #14]

    if(0u != (phacDiscLoop_Sw_Int_IsValidPollStatus(wStatus)))
 8009dac:	89fb      	ldrh	r3, [r7, #14]
 8009dae:	4618      	mov	r0, r3
 8009db0:	f7fe fca3 	bl	80086fa <phacDiscLoop_Sw_Int_IsValidPollStatus>
 8009db4:	4603      	mov	r3, r0
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d00c      	beq.n	8009dd4 <phacDiscLoop_Sw_DetTechTypeF+0xa6>
    {
        if((wStatus & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 8009dba:	89fb      	ldrh	r3, [r7, #14]
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	2b03      	cmp	r3, #3
 8009dc0:	d10a      	bne.n	8009dd8 <phacDiscLoop_Sw_DetTechTypeF+0xaa>
        {
            /* set Collision Pending bit */
            pDataParams->bCollPend |= (uint8_t)(wCurrentBaudBitPos & 0xFFU);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	7f9a      	ldrb	r2, [r3, #30]
 8009dc6:	89bb      	ldrh	r3, [r7, #12]
 8009dc8:	b2db      	uxtb	r3, r3
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	b2da      	uxtb	r2, r3
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	779a      	strb	r2, [r3, #30]
 8009dd2:	e001      	b.n	8009dd8 <phacDiscLoop_Sw_DetTechTypeF+0xaa>
        }
    }
    else
    {
        return wStatus;
 8009dd4:	89fb      	ldrh	r3, [r7, #14]
 8009dd6:	e001      	b.n	8009ddc <phacDiscLoop_Sw_DetTechTypeF+0xae>
    }

    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 8009dd8:	f244 0387 	movw	r3, #16519	@ 0x4087

#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3710      	adds	r7, #16
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <phacDiscLoop_Sw_Int_CollisionResolutionF>:

phStatus_t phacDiscLoop_Sw_Int_CollisionResolutionF(
                                                    phacDiscLoop_Sw_DataParams_t * pDataParams
                                                    )
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b084      	sub	sp, #16
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    phStatus_t PH_MEMLOC_REM   status;
    uint16_t   PH_MEMLOC_REM   wCurrentBaudBitPos;
    uint8_t    PH_MEMLOC_COUNT bIndex = 0;
 8009dec:	2300      	movs	r3, #0
 8009dee:	73fb      	strb	r3, [r7, #15]
    uint8_t    PH_MEMLOC_COUNT bCardIndex;

    PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_GetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_TYPEF_CUR_BAUD, &wCurrentBaudBitPos));
 8009df0:	f107 030a 	add.w	r3, r7, #10
 8009df4:	461a      	mov	r2, r3
 8009df6:	2157      	movs	r1, #87	@ 0x57
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f7fd fb6b 	bl	80074d4 <phacDiscLoop_Sw_GetConfig>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	81bb      	strh	r3, [r7, #12]
 8009e02:	89bb      	ldrh	r3, [r7, #12]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d001      	beq.n	8009e0c <phacDiscLoop_Sw_Int_CollisionResolutionF+0x28>
 8009e08:	89bb      	ldrh	r3, [r7, #12]
 8009e0a:	e0e3      	b.n	8009fd4 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>

    /* Collision_Pending = 1 and Device limit  = 0 */
    if((0U != ((pDataParams->bCollPend & wCurrentBaudBitPos))) && ((pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F212] == 0x00U)))
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	7f9b      	ldrb	r3, [r3, #30]
 8009e10:	461a      	mov	r2, r3
 8009e12:	897b      	ldrh	r3, [r7, #10]
 8009e14:	4013      	ands	r3, r2
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d00a      	beq.n	8009e30 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x4c>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	7b1b      	ldrb	r3, [r3, #12]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d106      	bne.n	8009e30 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x4c>
    {
        pDataParams->sTypeFTargetInfo.bTotalTagsFound = 0;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2200      	movs	r2, #0
 8009e26:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 8009e2a:	f244 0385 	movw	r3, #16517	@ 0x4085
 8009e2e:	e0d1      	b.n	8009fd4 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
    }

    for(bCardIndex = 0; bCardIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bCardIndex++)
 8009e30:	2300      	movs	r3, #0
 8009e32:	73bb      	strb	r3, [r7, #14]
 8009e34:	e00d      	b.n	8009e52 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x6e>
    {
        /* Clear SLEEP_AF State */
        pDataParams->sTypeFTargetInfo.aTypeFTag[bCardIndex].bSleepAFState = 0U;
 8009e36:	7bba      	ldrb	r2, [r7, #14]
 8009e38:	6879      	ldr	r1, [r7, #4]
 8009e3a:	4613      	mov	r3, r2
 8009e3c:	005b      	lsls	r3, r3, #1
 8009e3e:	4413      	add	r3, r2
 8009e40:	00da      	lsls	r2, r3, #3
 8009e42:	1ad2      	subs	r2, r2, r3
 8009e44:	188b      	adds	r3, r1, r2
 8009e46:	3393      	adds	r3, #147	@ 0x93
 8009e48:	2200      	movs	r2, #0
 8009e4a:	701a      	strb	r2, [r3, #0]
    for(bCardIndex = 0; bCardIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bCardIndex++)
 8009e4c:	7bbb      	ldrb	r3, [r7, #14]
 8009e4e:	3301      	adds	r3, #1
 8009e50:	73bb      	strb	r3, [r7, #14]
 8009e52:	7bbb      	ldrb	r3, [r7, #14]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d0ee      	beq.n	8009e36 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x52>
    }

    /* Symbol 1 */
    /* Symbol 2*/
    /* Device limit for F424 and F212 is same */
    if(pDataParams->sTypeFTargetInfo.bTotalTagsFound >= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F212])
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	7b1b      	ldrb	r3, [r3, #12]
 8009e62:	429a      	cmp	r2, r3
 8009e64:	d324      	bcc.n	8009eb0 <phacDiscLoop_Sw_Int_CollisionResolutionF+0xcc>
    {
        if (wCurrentBaudBitPos == PHAC_DISCLOOP_CON_BITR_212)
 8009e66:	897b      	ldrh	r3, [r7, #10]
 8009e68:	2b04      	cmp	r3, #4
 8009e6a:	d10c      	bne.n	8009e86 <phacDiscLoop_Sw_Int_CollisionResolutionF+0xa2>
        {
            /* Configure HW for the TypeF technology */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e70:	2103      	movs	r1, #3
 8009e72:	4618      	mov	r0, r3
 8009e74:	f002 fd06 	bl	800c884 <phhalHw_Pn5180_ApplyProtocolSettings>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	81bb      	strh	r3, [r7, #12]
 8009e7c:	89bb      	ldrh	r3, [r7, #12]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d00e      	beq.n	8009ea0 <phacDiscLoop_Sw_Int_CollisionResolutionF+0xbc>
 8009e82:	89bb      	ldrh	r3, [r7, #12]
 8009e84:	e0a6      	b.n	8009fd4 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
                PHHAL_HW_CARDTYPE_FELICA_212));
        }
        else
        {
            /* Configure HW for the TypeF technology */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e8a:	210a      	movs	r1, #10
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f002 fcf9 	bl	800c884 <phhalHw_Pn5180_ApplyProtocolSettings>
 8009e92:	4603      	mov	r3, r0
 8009e94:	81bb      	strh	r3, [r7, #12]
 8009e96:	89bb      	ldrh	r3, [r7, #12]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d001      	beq.n	8009ea0 <phacDiscLoop_Sw_Int_CollisionResolutionF+0xbc>
 8009e9c:	89bb      	ldrh	r3, [r7, #12]
 8009e9e:	e099      	b.n	8009fd4 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
                pDataParams->pHalDataParams,
                PHHAL_HW_CARDTYPE_FELICA_424));
        }

        /* Symbol 8 */
        pDataParams->bNumOfCards = pDataParams->sTypeFTargetInfo.bTotalTagsFound;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
        return PH_ERR_SUCCESS;
 8009eac:	2300      	movs	r3, #0
 8009eae:	e091      	b.n	8009fd4 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
    }

    /* Re-set Collision Pending bit */
    pDataParams->bCollPend &= (uint8_t)~(uint8_t)(wCurrentBaudBitPos & 0xFFU);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	7f9a      	ldrb	r2, [r3, #30]
 8009eb4:	897b      	ldrh	r3, [r7, #10]
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	43db      	mvns	r3, r3
 8009eba:	b2db      	uxtb	r3, r3
 8009ebc:	4013      	ands	r3, r2
 8009ebe:	b2da      	uxtb	r2, r3
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	779a      	strb	r2, [r3, #30]

    /* Symbol 3 */
    /* SENSF_REQ with TSN := 0Fh, RC := 00h, SC := FFFFh */
    status = phpalFelica_SetConfig(pDataParams->pPalFelicaDataParams, PHPAL_FELICA_CONFIG_RC, 0);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ec8:	2200      	movs	r2, #0
 8009eca:	2100      	movs	r1, #0
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f008 fe66 	bl	8012b9e <phpalFelica_Sw_SetConfig>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	81bb      	strh	r3, [r7, #12]
    PH_CHECK_SUCCESS(status);
 8009ed6:	89bb      	ldrh	r3, [r7, #12]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d001      	beq.n	8009ee0 <phacDiscLoop_Sw_Int_CollisionResolutionF+0xfc>
 8009edc:	89bb      	ldrh	r3, [r7, #12]
 8009ede:	e079      	b.n	8009fd4 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>

    /* Apply Guard time.(GTFB) */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	8a9b      	ldrh	r3, [r3, #20]
 8009ee8:	461a      	mov	r2, r3
 8009eea:	2135      	movs	r1, #53	@ 0x35
 8009eec:	f003 fa10 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	81bb      	strh	r3, [r7, #12]
 8009ef4:	89bb      	ldrh	r3, [r7, #12]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d001      	beq.n	8009efe <phacDiscLoop_Sw_Int_CollisionResolutionF+0x11a>
 8009efa:	89bb      	ldrh	r3, [r7, #12]
 8009efc:	e06a      	b.n	8009fd4 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F212]));

    if (wCurrentBaudBitPos == PHAC_DISCLOOP_CON_BITR_212)
 8009efe:	897b      	ldrh	r3, [r7, #10]
 8009f00:	2b04      	cmp	r3, #4
 8009f02:	d10c      	bne.n	8009f1e <phacDiscLoop_Sw_Int_CollisionResolutionF+0x13a>
    {
        /* Configure HW for the TypeF technology */
        PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f08:	2103      	movs	r1, #3
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f002 fcba 	bl	800c884 <phhalHw_Pn5180_ApplyProtocolSettings>
 8009f10:	4603      	mov	r3, r0
 8009f12:	81bb      	strh	r3, [r7, #12]
 8009f14:	89bb      	ldrh	r3, [r7, #12]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d00e      	beq.n	8009f38 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x154>
 8009f1a:	89bb      	ldrh	r3, [r7, #12]
 8009f1c:	e05a      	b.n	8009fd4 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
            PHHAL_HW_CARDTYPE_FELICA_212));
    }
    else
    {
        /* Configure HW for the TypeF technology */
        PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f22:	210a      	movs	r1, #10
 8009f24:	4618      	mov	r0, r3
 8009f26:	f002 fcad 	bl	800c884 <phhalHw_Pn5180_ApplyProtocolSettings>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	81bb      	strh	r3, [r7, #12]
 8009f2e:	89bb      	ldrh	r3, [r7, #12]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d001      	beq.n	8009f38 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x154>
 8009f34:	89bb      	ldrh	r3, [r7, #12]
 8009f36:	e04d      	b.n	8009fd4 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
            pDataParams->pHalDataParams,
            PHHAL_HW_CARDTYPE_FELICA_424));
    }

    status = phacDiscLoop_Sw_Int_SendSensFReq(pDataParams, PHPAL_FELICA_NUMSLOTS_16, wCurrentBaudBitPos);
 8009f38:	897b      	ldrh	r3, [r7, #10]
 8009f3a:	461a      	mov	r2, r3
 8009f3c:	210f      	movs	r1, #15
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f7ff fe65 	bl	8009c0e <phacDiscLoop_Sw_Int_SendSensFReq>
 8009f44:	4603      	mov	r3, r0
 8009f46:	81bb      	strh	r3, [r7, #12]
    PH_CHECK_SUCCESS(status);
 8009f48:	89bb      	ldrh	r3, [r7, #12]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d001      	beq.n	8009f52 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x16e>
 8009f4e:	89bb      	ldrh	r3, [r7, #12]
 8009f50:	e040      	b.n	8009fd4 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>

    /* Symbol 5 */
    /* Check for NFC-DEP Protocol presence within all received responses */
    bIndex = 0x00;
 8009f52:	2300      	movs	r3, #0
 8009f54:	73fb      	strb	r3, [r7, #15]
    while(bIndex < pDataParams->sTypeFTargetInfo.bTotalTagsFound)
 8009f56:	e030      	b.n	8009fba <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1d6>
    {
        if ((pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].aIDmPMm[0] == 0x01U) &&
 8009f58:	7bfa      	ldrb	r2, [r7, #15]
 8009f5a:	6879      	ldr	r1, [r7, #4]
 8009f5c:	4613      	mov	r3, r2
 8009f5e:	005b      	lsls	r3, r3, #1
 8009f60:	4413      	add	r3, r2
 8009f62:	00da      	lsls	r2, r3, #3
 8009f64:	1ad2      	subs	r2, r2, r3
 8009f66:	188b      	adds	r3, r1, r2
 8009f68:	3380      	adds	r3, #128	@ 0x80
 8009f6a:	781b      	ldrb	r3, [r3, #0]
 8009f6c:	2b01      	cmp	r3, #1
 8009f6e:	d121      	bne.n	8009fb4 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1d0>
            (pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].aIDmPMm[1] == 0xFEU))
 8009f70:	7bfa      	ldrb	r2, [r7, #15]
 8009f72:	6879      	ldr	r1, [r7, #4]
 8009f74:	4613      	mov	r3, r2
 8009f76:	005b      	lsls	r3, r3, #1
 8009f78:	4413      	add	r3, r2
 8009f7a:	00da      	lsls	r2, r3, #3
 8009f7c:	1ad2      	subs	r2, r2, r3
 8009f7e:	188b      	adds	r3, r1, r2
 8009f80:	3381      	adds	r3, #129	@ 0x81
 8009f82:	781b      	ldrb	r3, [r3, #0]
        if ((pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].aIDmPMm[0] == 0x01U) &&
 8009f84:	2bfe      	cmp	r3, #254	@ 0xfe
 8009f86:	d115      	bne.n	8009fb4 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1d0>
        {
            /* Symbol 6 */
            /* SENSF_REQ with TSN := 0Fh, RC := 01h, SC := FFFFh */
            status = phpalFelica_SetConfig(pDataParams->pPalFelicaDataParams, PHPAL_FELICA_CONFIG_RC, 0x01);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	2100      	movs	r1, #0
 8009f90:	4618      	mov	r0, r3
 8009f92:	f008 fe04 	bl	8012b9e <phpalFelica_Sw_SetConfig>
 8009f96:	4603      	mov	r3, r0
 8009f98:	81bb      	strh	r3, [r7, #12]
            PH_CHECK_SUCCESS(status);
 8009f9a:	89bb      	ldrh	r3, [r7, #12]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d001      	beq.n	8009fa4 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1c0>
 8009fa0:	89bb      	ldrh	r3, [r7, #12]
 8009fa2:	e017      	b.n	8009fd4 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>

            status = phacDiscLoop_Sw_Int_SendSensFReq(pDataParams, PHPAL_FELICA_NUMSLOTS_16, wCurrentBaudBitPos);
 8009fa4:	897b      	ldrh	r3, [r7, #10]
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	210f      	movs	r1, #15
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f7ff fe2f 	bl	8009c0e <phacDiscLoop_Sw_Int_SendSensFReq>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	81bb      	strh	r3, [r7, #12]
            /* Symbol 7 */
            /* The NFC Forum Device SHALL check for any Valid SENSF_RES Response(s) received during processing of Symbol 4
             * whether an identical entry already exists in GRE_SENSF_RES[], and if not, store the SENSF_RES in GRE_SENSF_RES[]
             */
         }
        bIndex++;
 8009fb4:	7bfb      	ldrb	r3, [r7, #15]
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	73fb      	strb	r3, [r7, #15]
    while(bIndex < pDataParams->sTypeFTargetInfo.bTotalTagsFound)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8009fc0:	7bfa      	ldrb	r2, [r7, #15]
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d3c8      	bcc.n	8009f58 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x174>
    } /* while(bIndex < pDataParams->sTypeFTargetInfo.bTotalTagsFound) */

    pDataParams->bNumOfCards = pDataParams->sTypeFTargetInfo.bTotalTagsFound;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    return PH_ERR_SUCCESS;
 8009fd2:	2300      	movs	r3, #0
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3710      	adds	r7, #16
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <phacDiscLoop_Sw_Int_ActivateF>:

phStatus_t phacDiscLoop_Sw_Int_ActivateF(
                                         phacDiscLoop_Sw_DataParams_t * pDataParams,
                                         uint8_t  bTypeFTagIdx
                                         )
{
 8009fdc:	b590      	push	{r4, r7, lr}
 8009fde:	b08b      	sub	sp, #44	@ 0x2c
 8009fe0:	af02      	add	r7, sp, #8
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	460b      	mov	r3, r1
 8009fe6:	70fb      	strb	r3, [r7, #3]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    phStatus_t PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	83fb      	strh	r3, [r7, #30]
    uint8_t    PH_MEMLOC_REM bIsDuplicate = 0x00;
 8009fec:	2300      	movs	r3, #0
 8009fee:	777b      	strb	r3, [r7, #29]
    uint8_t    PH_MEMLOC_BUF baSystemCode[2] = {PHPAL_FELICA_SYSTEM_CODE_BYTE_0,
 8009ff0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009ff4:	833b      	strh	r3, [r7, #24]
                                                PHPAL_FELICA_SYSTEM_CODE_BYTE_1};
    uint8_t *  PH_MEMLOC_REM pRxBuff = NULL;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	617b      	str	r3, [r7, #20]
    uint8_t *  PH_MEMLOC_REM pId = NULL;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	613b      	str	r3, [r7, #16]
    uint16_t   PH_MEMLOC_REM wFrameStatus;
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS
    uint8_t    PH_MEMLOC_BUF aNfcId3[10];
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS */

    if ((bTypeFTagIdx >= pDataParams->sTypeFTargetInfo.bTotalTagsFound) || ( bTypeFTagIdx >= PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED ))
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800a004:	78fa      	ldrb	r2, [r7, #3]
 800a006:	429a      	cmp	r2, r3
 800a008:	d202      	bcs.n	800a010 <phacDiscLoop_Sw_Int_ActivateF+0x34>
 800a00a:	78fb      	ldrb	r3, [r7, #3]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d002      	beq.n	800a016 <phacDiscLoop_Sw_Int_ActivateF+0x3a>
    {
        /* Out of range or no such card found yet */
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800a010:	f244 0321 	movw	r3, #16417	@ 0x4021
 800a014:	e0c0      	b.n	800a198 <phacDiscLoop_Sw_Int_ActivateF+0x1bc>
    }

    /* set given card ID to FeliCa data param */
    PH_CHECK_SUCCESS_FCT(status, phpalFelica_SetSerialNo(
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a01a:	78fa      	ldrb	r2, [r7, #3]
 800a01c:	4613      	mov	r3, r2
 800a01e:	005b      	lsls	r3, r3, #1
 800a020:	4413      	add	r3, r2
 800a022:	00da      	lsls	r2, r3, #3
 800a024:	1ad2      	subs	r2, r2, r3
 800a026:	f102 0378 	add.w	r3, r2, #120	@ 0x78
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	4413      	add	r3, r2
 800a02e:	3308      	adds	r3, #8
 800a030:	4619      	mov	r1, r3
 800a032:	f008 fda0 	bl	8012b76 <phpalFelica_Sw_SetSerialNo>
 800a036:	4603      	mov	r3, r0
 800a038:	83fb      	strh	r3, [r7, #30]
 800a03a:	8bfb      	ldrh	r3, [r7, #30]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d001      	beq.n	800a044 <phacDiscLoop_Sw_Int_ActivateF+0x68>
 800a040:	8bfb      	ldrh	r3, [r7, #30]
 800a042:	e0a9      	b.n	800a198 <phacDiscLoop_Sw_Int_ActivateF+0x1bc>
                                                         pDataParams->pPalFelicaDataParams,
                                                         pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].aIDmPMm)
                                                        );
    /* Symbol 0 */
    if ((pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].aIDmPMm[0] == 0x01U) &&
 800a044:	78fa      	ldrb	r2, [r7, #3]
 800a046:	6879      	ldr	r1, [r7, #4]
 800a048:	4613      	mov	r3, r2
 800a04a:	005b      	lsls	r3, r3, #1
 800a04c:	4413      	add	r3, r2
 800a04e:	00da      	lsls	r2, r3, #3
 800a050:	1ad2      	subs	r2, r2, r3
 800a052:	188b      	adds	r3, r1, r2
 800a054:	3380      	adds	r3, #128	@ 0x80
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	2b01      	cmp	r3, #1
 800a05a:	f040 808f 	bne.w	800a17c <phacDiscLoop_Sw_Int_ActivateF+0x1a0>
        (pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].aIDmPMm[1] == 0xFEU))
 800a05e:	78fa      	ldrb	r2, [r7, #3]
 800a060:	6879      	ldr	r1, [r7, #4]
 800a062:	4613      	mov	r3, r2
 800a064:	005b      	lsls	r3, r3, #1
 800a066:	4413      	add	r3, r2
 800a068:	00da      	lsls	r2, r3, #3
 800a06a:	1ad2      	subs	r2, r2, r3
 800a06c:	188b      	adds	r3, r1, r2
 800a06e:	3381      	adds	r3, #129	@ 0x81
 800a070:	781b      	ldrb	r3, [r3, #0]
    if ((pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].aIDmPMm[0] == 0x01U) &&
 800a072:	2bfe      	cmp	r3, #254	@ 0xfe
 800a074:	f040 8082 	bne.w	800a17c <phacDiscLoop_Sw_Int_ActivateF+0x1a0>
    {
        /* Single device is detected. Activation is already done during collision resolution */
        /* Symbol 1 */
        if (pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].bSleepAFState != 0U)
 800a078:	78fa      	ldrb	r2, [r7, #3]
 800a07a:	6879      	ldr	r1, [r7, #4]
 800a07c:	4613      	mov	r3, r2
 800a07e:	005b      	lsls	r3, r3, #1
 800a080:	4413      	add	r3, r2
 800a082:	00da      	lsls	r2, r3, #3
 800a084:	1ad2      	subs	r2, r2, r3
 800a086:	188b      	adds	r3, r1, r2
 800a088:	3393      	adds	r3, #147	@ 0x93
 800a08a:	781b      	ldrb	r3, [r3, #0]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	f000 8081 	beq.w	800a194 <phacDiscLoop_Sw_Int_ActivateF+0x1b8>
        {
            /* Symbol 2 */
            /* SENSF_REQ with TSN := 03h, RC := 00h, SC := FFFFh */
            status = phpalFelica_SetConfig(pDataParams->pPalFelicaDataParams, PHPAL_FELICA_CONFIG_RC, 0);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a096:	2200      	movs	r2, #0
 800a098:	2100      	movs	r1, #0
 800a09a:	4618      	mov	r0, r3
 800a09c:	f008 fd7f 	bl	8012b9e <phpalFelica_Sw_SetConfig>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	83fb      	strh	r3, [r7, #30]
            PH_CHECK_SUCCESS(status);
 800a0a4:	8bfb      	ldrh	r3, [r7, #30]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d001      	beq.n	800a0ae <phacDiscLoop_Sw_Int_ActivateF+0xd2>
 800a0aa:	8bfb      	ldrh	r3, [r7, #30]
 800a0ac:	e074      	b.n	800a198 <phacDiscLoop_Sw_Int_ActivateF+0x1bc>

            status = phpalFelica_ReqC(pDataParams->pPalFelicaDataParams, baSystemCode, PHPAL_FELICA_NUMSLOTS_4, &pRxBuff, &wLen);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a0b2:	f107 0214 	add.w	r2, r7, #20
 800a0b6:	f107 0118 	add.w	r1, r7, #24
 800a0ba:	f107 030e 	add.w	r3, r7, #14
 800a0be:	9300      	str	r3, [sp, #0]
 800a0c0:	4613      	mov	r3, r2
 800a0c2:	2203      	movs	r2, #3
 800a0c4:	f008 fbb8 	bl	8012838 <phpalFelica_Sw_ReqC>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	83fb      	strh	r3, [r7, #30]
            PH_CHECK_SUCCESS(status);
 800a0cc:	8bfb      	ldrh	r3, [r7, #30]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d001      	beq.n	800a0d6 <phacDiscLoop_Sw_Int_ActivateF+0xfa>
 800a0d2:	8bfb      	ldrh	r3, [r7, #30]
 800a0d4:	e060      	b.n	800a198 <phacDiscLoop_Sw_Int_ActivateF+0x1bc>

            /* Symbol 3 */
            pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].bSleepAFState = 0U;
 800a0d6:	78fa      	ldrb	r2, [r7, #3]
 800a0d8:	6879      	ldr	r1, [r7, #4]
 800a0da:	4613      	mov	r3, r2
 800a0dc:	005b      	lsls	r3, r3, #1
 800a0de:	4413      	add	r3, r2
 800a0e0:	00da      	lsls	r2, r3, #3
 800a0e2:	1ad2      	subs	r2, r2, r3
 800a0e4:	188b      	adds	r3, r1, r2
 800a0e6:	3393      	adds	r3, #147	@ 0x93
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	701a      	strb	r2, [r3, #0]

            PH_CHECK_SUCCESS_FCT(status, phpalFelica_GetConfig(pDataParams->pPalFelicaDataParams, PH_PALFELICA_CONFIG_NUM_RESPONSE_FRAMES, &wFrames));
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0f0:	f107 020c 	add.w	r2, r7, #12
 800a0f4:	2101      	movs	r1, #1
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f008 fd89 	bl	8012c0e <phpalFelica_Sw_GetConfig>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	83fb      	strh	r3, [r7, #30]
 800a100:	8bfb      	ldrh	r3, [r7, #30]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d02e      	beq.n	800a164 <phacDiscLoop_Sw_Int_ActivateF+0x188>
 800a106:	8bfb      	ldrh	r3, [r7, #30]
 800a108:	e046      	b.n	800a198 <phacDiscLoop_Sw_Int_ActivateF+0x1bc>

                while((0U != wFrames) && (0U == bIsDuplicate))
                {
                    IdLen = 0x00;
 800a10a:	2300      	movs	r3, #0
 800a10c:	72fb      	strb	r3, [r7, #11]
                    wFrameStatus = 0x00;
 800a10e:	2300      	movs	r3, #0
 800a110:	813b      	strh	r3, [r7, #8]

                    PH_CHECK_SUCCESS_FCT(status, phpalFelica_GetFrameInfo(
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a116:	89bb      	ldrh	r3, [r7, #12]
 800a118:	b2d9      	uxtb	r1, r3
 800a11a:	697a      	ldr	r2, [r7, #20]
 800a11c:	f107 0408 	add.w	r4, r7, #8
 800a120:	f107 030b 	add.w	r3, r7, #11
 800a124:	9301      	str	r3, [sp, #4]
 800a126:	f107 0310 	add.w	r3, r7, #16
 800a12a:	9300      	str	r3, [sp, #0]
 800a12c:	4623      	mov	r3, r4
 800a12e:	f008 fc99 	bl	8012a64 <phpalFelica_Sw_GetFrameInfo>
 800a132:	4603      	mov	r3, r0
 800a134:	83fb      	strh	r3, [r7, #30]
 800a136:	8bfb      	ldrh	r3, [r7, #30]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d001      	beq.n	800a140 <phacDiscLoop_Sw_Int_ActivateF+0x164>
 800a13c:	8bfb      	ldrh	r3, [r7, #30]
 800a13e:	e02b      	b.n	800a198 <phacDiscLoop_Sw_Int_ActivateF+0x1bc>
                        &pId,
                        &IdLen));

                    /* Check Device ID into greedy collection  */
                    /* Check Same response already present or not */
                    PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_CheckForDuplication(
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	f107 021d 	add.w	r2, r7, #29
 800a146:	4619      	mov	r1, r3
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f7ff fc85 	bl	8009a58 <phacDiscLoop_Sw_Int_CheckForDuplication>
 800a14e:	4603      	mov	r3, r0
 800a150:	83fb      	strh	r3, [r7, #30]
 800a152:	8bfb      	ldrh	r3, [r7, #30]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d001      	beq.n	800a15c <phacDiscLoop_Sw_Int_ActivateF+0x180>
 800a158:	8bfb      	ldrh	r3, [r7, #30]
 800a15a:	e01d      	b.n	800a198 <phacDiscLoop_Sw_Int_ActivateF+0x1bc>
                        pDataParams,
                        pId,
                        &bIsDuplicate));

                    wFrames--;
 800a15c:	89bb      	ldrh	r3, [r7, #12]
 800a15e:	3b01      	subs	r3, #1
 800a160:	b29b      	uxth	r3, r3
 800a162:	81bb      	strh	r3, [r7, #12]
                while((0U != wFrames) && (0U == bIsDuplicate))
 800a164:	89bb      	ldrh	r3, [r7, #12]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d002      	beq.n	800a170 <phacDiscLoop_Sw_Int_ActivateF+0x194>
 800a16a:	7f7b      	ldrb	r3, [r7, #29]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d0cc      	beq.n	800a10a <phacDiscLoop_Sw_Int_ActivateF+0x12e>
                }

            /* If same response is not present means Device not present
             * or some other error has occurred
             * Report DiscLoop Failure in this case */
            if(0U == (bIsDuplicate))
 800a170:	7f7b      	ldrb	r3, [r7, #29]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d10e      	bne.n	800a194 <phacDiscLoop_Sw_Int_ActivateF+0x1b8>
            {
                return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_FAILURE, PH_COMP_AC_DISCLOOP);
 800a176:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 800a17a:	e00d      	b.n	800a198 <phacDiscLoop_Sw_Int_ActivateF+0x1bc>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS */
    }
    else
    {
       /* Symbol 7 */
       pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].bSleepAFState = 0U;
 800a17c:	78fa      	ldrb	r2, [r7, #3]
 800a17e:	6879      	ldr	r1, [r7, #4]
 800a180:	4613      	mov	r3, r2
 800a182:	005b      	lsls	r3, r3, #1
 800a184:	4413      	add	r3, r2
 800a186:	00da      	lsls	r2, r3, #3
 800a188:	1ad2      	subs	r2, r2, r3
 800a18a:	188b      	adds	r3, r1, r2
 800a18c:	3393      	adds	r3, #147	@ 0x93
 800a18e:	2200      	movs	r2, #0
 800a190:	701a      	strb	r2, [r3, #0]
 800a192:	e000      	b.n	800a196 <phacDiscLoop_Sw_Int_ActivateF+0x1ba>
        if (pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].bSleepAFState != 0U)
 800a194:	bf00      	nop
    }
    return PH_ERR_SUCCESS;
 800a196:	2300      	movs	r3, #0
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3724      	adds	r7, #36	@ 0x24
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd90      	pop	{r4, r7, pc}

0800a1a0 <phacDiscLoop_Sw_Int_Config_GTF>:
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
phStatus_t phacDiscLoop_Sw_Int_Config_GTF(
                                          phacDiscLoop_Sw_DataParams_t * pDataParams,
                                          uint8_t bTechIndex
                                          )
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b084      	sub	sp, #16
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	460b      	mov	r3, r1
 800a1aa:	70fb      	strb	r3, [r7, #3]
    phStatus_t PH_MEMLOC_REM wStatus = PH_ERR_INTERNAL_ERROR;
 800a1ac:	237f      	movs	r3, #127	@ 0x7f
 800a1ae:	81fb      	strh	r3, [r7, #14]
    /*
     * If either one of FeliCa 212 or FeliCa 424 is polled after Type B polling,
     * then GTbf is applied. Default value is 15.3 ms (PH_NXPNFCRDLIB_CONFIG_B_TO_F_GT).
     * In this case Type B poll is followed by FeliCa poll.
     */
    if((0U != ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_B))) &&
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	789b      	ldrb	r3, [r3, #2]
 800a1b4:	f003 0302 	and.w	r3, r3, #2
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d01e      	beq.n	800a1fa <phacDiscLoop_Sw_Int_Config_GTF+0x5a>
        ((pDataParams->bFelicaBaud == PHAC_DISCLOOP_CON_BITR_212) ||
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
    if((0U != ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_B))) &&
 800a1c2:	2b04      	cmp	r3, #4
 800a1c4:	d00a      	beq.n	800a1dc <phacDiscLoop_Sw_Int_Config_GTF+0x3c>
        ((pDataParams->bFelicaBaud == PHAC_DISCLOOP_CON_BITR_424) &&
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
        ((pDataParams->bFelicaBaud == PHAC_DISCLOOP_CON_BITR_212) ||
 800a1cc:	2b08      	cmp	r3, #8
 800a1ce:	d114      	bne.n	800a1fa <phacDiscLoop_Sw_Int_Config_GTF+0x5a>
        (0U == ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F212))))))
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	789b      	ldrb	r3, [r3, #2]
 800a1d4:	f003 0304 	and.w	r3, r3, #4
        ((pDataParams->bFelicaBaud == PHAC_DISCLOOP_CON_BITR_424) &&
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d10e      	bne.n	800a1fa <phacDiscLoop_Sw_Int_Config_GTF+0x5a>
    {
        /* apply guard time GTBF */
        PH_CHECK_SUCCESS_FCT(wStatus, phhalHw_SetConfig(
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	8adb      	ldrh	r3, [r3, #22]
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	2135      	movs	r1, #53	@ 0x35
 800a1e8:	f003 f892 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	81fb      	strh	r3, [r7, #14]
 800a1f0:	89fb      	ldrh	r3, [r7, #14]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d010      	beq.n	800a218 <phacDiscLoop_Sw_Int_Config_GTF+0x78>
 800a1f6:	89fb      	ldrh	r3, [r7, #14]
 800a1f8:	e02a      	b.n	800a250 <phacDiscLoop_Sw_Int_Config_GTF+0xb0>
        /*
         * If Type F polling is not preceded by a Type B poll apply guard time GTFB
         * Default value of GTFB is 20.4ms (PH_NXPNFCRDLIB_CONFIG_TYPEF_GT).
         *
         */
        PH_CHECK_SUCCESS_FCT(wStatus, phhalHw_SetConfig(
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	8a9b      	ldrh	r3, [r3, #20]
 800a202:	461a      	mov	r2, r3
 800a204:	2135      	movs	r1, #53	@ 0x35
 800a206:	f003 f883 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 800a20a:	4603      	mov	r3, r0
 800a20c:	81fb      	strh	r3, [r7, #14]
 800a20e:	89fb      	ldrh	r3, [r7, #14]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d001      	beq.n	800a218 <phacDiscLoop_Sw_Int_Config_GTF+0x78>
 800a214:	89fb      	ldrh	r3, [r7, #14]
 800a216:	e01b      	b.n	800a250 <phacDiscLoop_Sw_Int_Config_GTF+0xb0>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
            pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F212]));
    }

    if ((uint8_t)PHAC_DISCLOOP_TECH_TYPE_F424 == bTechIndex)
 800a218:	78fb      	ldrb	r3, [r7, #3]
 800a21a:	2b03      	cmp	r3, #3
 800a21c:	d10b      	bne.n	800a236 <phacDiscLoop_Sw_Int_Config_GTF+0x96>
    {
        PH_CHECK_SUCCESS_FCT(wStatus, phacDiscLoop_SetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_TYPEF_CUR_BAUD, PHAC_DISCLOOP_CON_BITR_424));
 800a21e:	2208      	movs	r2, #8
 800a220:	2157      	movs	r1, #87	@ 0x57
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f7fc fd4c 	bl	8006cc0 <phacDiscLoop_Sw_SetConfig>
 800a228:	4603      	mov	r3, r0
 800a22a:	81fb      	strh	r3, [r7, #14]
 800a22c:	89fb      	ldrh	r3, [r7, #14]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d00d      	beq.n	800a24e <phacDiscLoop_Sw_Int_Config_GTF+0xae>
 800a232:	89fb      	ldrh	r3, [r7, #14]
 800a234:	e00c      	b.n	800a250 <phacDiscLoop_Sw_Int_Config_GTF+0xb0>
    }
    else
    {
        PH_CHECK_SUCCESS_FCT(wStatus, phacDiscLoop_SetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_TYPEF_CUR_BAUD, PHAC_DISCLOOP_CON_BITR_212));
 800a236:	2204      	movs	r2, #4
 800a238:	2157      	movs	r1, #87	@ 0x57
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f7fc fd40 	bl	8006cc0 <phacDiscLoop_Sw_SetConfig>
 800a240:	4603      	mov	r3, r0
 800a242:	81fb      	strh	r3, [r7, #14]
 800a244:	89fb      	ldrh	r3, [r7, #14]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d001      	beq.n	800a24e <phacDiscLoop_Sw_Int_Config_GTF+0xae>
 800a24a:	89fb      	ldrh	r3, [r7, #14]
 800a24c:	e000      	b.n	800a250 <phacDiscLoop_Sw_Int_Config_GTF+0xb0>
    }

    return PH_ERR_SUCCESS;
 800a24e:	2300      	movs	r3, #0
}
 800a250:	4618      	mov	r0, r3
 800a252:	3710      	adds	r7, #16
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <phacDiscLoop_Sw_DetTechTypeI18000p3m3>:
 * Private Functions
 * ****************************************************************************/
phStatus_t phacDiscLoop_Sw_DetTechTypeI18000p3m3(
                                                 phacDiscLoop_Sw_DataParams_t *pDataParams
                                                 )
{
 800a258:	b590      	push	{r4, r7, lr}
 800a25a:	b09b      	sub	sp, #108	@ 0x6c
 800a25c:	af08      	add	r7, sp, #32
 800a25e:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    phStatus_t PH_MEMLOC_REM status;
    uint8_t    PH_MEMLOC_BUF aSelectCmd[39] = {0};
 800a260:	f107 031c 	add.w	r3, r7, #28
 800a264:	2227      	movs	r2, #39	@ 0x27
 800a266:	2100      	movs	r1, #0
 800a268:	4618      	mov	r0, r3
 800a26a:	f012 ff49 	bl	801d100 <memset>
    uint8_t    PH_MEMLOC_REM wSelectCmdLen;
    uint8_t    PH_MEMLOC_REM bSelectCmdValidBits;
    uint8_t    PH_MEMLOC_BUF aBeginRoundCmd[3] = {0};
 800a26e:	f107 0314 	add.w	r3, r7, #20
 800a272:	2100      	movs	r1, #0
 800a274:	460a      	mov	r2, r1
 800a276:	801a      	strh	r2, [r3, #0]
 800a278:	460a      	mov	r2, r1
 800a27a:	709a      	strb	r2, [r3, #2]
    uint8_t    PH_MEMLOC_REM bEmptyPointer = 0;
 800a27c:	2300      	movs	r3, #0
 800a27e:	74fb      	strb	r3, [r7, #19]
    uint8_t    PH_MEMLOC_REM *pRxBuffer = NULL;
 800a280:	2300      	movs	r3, #0
 800a282:	60fb      	str	r3, [r7, #12]
    uint16_t   PH_MEMLOC_REM wRxBufferLen = 0;
 800a284:	2300      	movs	r3, #0
 800a286:	817b      	strh	r3, [r7, #10]

    /* Create select command frame */
    PH_CHECK_SUCCESS_FCT(status, phpalI18000p3m3_CreateSelectCmd(
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800a28c:	f107 031a 	add.w	r3, r7, #26
 800a290:	9307      	str	r3, [sp, #28]
 800a292:	f107 031b 	add.w	r3, r7, #27
 800a296:	9306      	str	r3, [sp, #24]
 800a298:	f107 031c 	add.w	r3, r7, #28
 800a29c:	9305      	str	r3, [sp, #20]
 800a29e:	2300      	movs	r3, #0
 800a2a0:	9304      	str	r3, [sp, #16]
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	9303      	str	r3, [sp, #12]
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	9302      	str	r3, [sp, #8]
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	9301      	str	r3, [sp, #4]
 800a2ae:	f107 0313 	add.w	r3, r7, #19
 800a2b2:	9300      	str	r3, [sp, #0]
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	2100      	movs	r1, #0
 800a2ba:	f00b f879 	bl	80153b0 <phpalI18000p3m3_Sw_CreateSelectCmd>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800a2c4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d002      	beq.n	800a2d2 <phacDiscLoop_Sw_DetTechTypeI18000p3m3+0x7a>
 800a2cc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a2d0:	e043      	b.n	800a35a <phacDiscLoop_Sw_DetTechTypeI18000p3m3+0x102>
        aSelectCmd,
        &wSelectCmdLen,
        &bSelectCmdValidBits));

    /* Create BeginRound command frame */
    PH_CHECK_SUCCESS_FCT(status, phpalI18000p3m3_CreateBeginRoundCmd(
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f893 10c2 	ldrb.w	r1, [r3, #194]	@ 0xc2
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f893 20c1 	ldrb.w	r2, [r3, #193]	@ 0xc1
 800a2e2:	f107 0314 	add.w	r3, r7, #20
 800a2e6:	9304      	str	r3, [sp, #16]
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	9303      	str	r3, [sp, #12]
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	9302      	str	r3, [sp, #8]
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	9301      	str	r3, [sp, #4]
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	9300      	str	r3, [sp, #0]
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	f00b f972 	bl	80155e2 <phpalI18000p3m3_Sw_CreateBeginRoundCmd>
 800a2fe:	4603      	mov	r3, r0
 800a300:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800a304:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d002      	beq.n	800a312 <phacDiscLoop_Sw_DetTechTypeI18000p3m3+0xba>
 800a30c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a310:	e023      	b.n	800a35a <phacDiscLoop_Sw_DetTechTypeI18000p3m3+0x102>
        0,
        0,
        aBeginRoundCmd));

    /* Inventory with 1 slot */
    status = phhalHw_I18000p3m3Inventory(
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800a316:	7efa      	ldrb	r2, [r7, #27]
 800a318:	7ebc      	ldrb	r4, [r7, #26]
 800a31a:	f107 011c 	add.w	r1, r7, #28
 800a31e:	f107 030a 	add.w	r3, r7, #10
 800a322:	9303      	str	r3, [sp, #12]
 800a324:	f107 030c 	add.w	r3, r7, #12
 800a328:	9302      	str	r3, [sp, #8]
 800a32a:	2301      	movs	r3, #1
 800a32c:	9301      	str	r3, [sp, #4]
 800a32e:	f107 0314 	add.w	r3, r7, #20
 800a332:	9300      	str	r3, [sp, #0]
 800a334:	4623      	mov	r3, r4
 800a336:	f005 fb57 	bl	800f9e8 <phhalHw_Pn5180_I18000p3m3Inventory>
 800a33a:	4603      	mov	r3, r0
 800a33c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        aBeginRoundCmd,
        PHHAL_HW_I18000P3M3_ONE_TS_ONLY,
        &pRxBuffer,
        &wRxBufferLen);

    if(0u != (phacDiscLoop_Sw_Int_IsValidPollStatus(status)))
 800a340:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a344:	4618      	mov	r0, r3
 800a346:	f7fe f9d8 	bl	80086fa <phacDiscLoop_Sw_Int_IsValidPollStatus>
 800a34a:	4603      	mov	r3, r0
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d002      	beq.n	800a356 <phacDiscLoop_Sw_DetTechTypeI18000p3m3+0xfe>
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 800a350:	f244 0387 	movw	r3, #16519	@ 0x4087
 800a354:	e001      	b.n	800a35a <phacDiscLoop_Sw_DetTechTypeI18000p3m3+0x102>
    }
    else
    {
        return status;
 800a356:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
    }
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	374c      	adds	r7, #76	@ 0x4c
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd90      	pop	{r4, r7, pc}

0800a362 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3>:

phStatus_t phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3(
                                                             phacDiscLoop_Sw_DataParams_t *pDataParams
                                                             )
{
 800a362:	b590      	push	{r4, r7, lr}
 800a364:	b09b      	sub	sp, #108	@ 0x6c
 800a366:	af08      	add	r7, sp, #32
 800a368:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    phStatus_t PH_MEMLOC_REM status;
    uint8_t    PH_MEMLOC_COUNT bQ = 4;
 800a36a:	2304      	movs	r3, #4
 800a36c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    uint8_t    PH_MEMLOC_BUF aSelectCmd[39] = {0};
 800a370:	f107 0318 	add.w	r3, r7, #24
 800a374:	2227      	movs	r2, #39	@ 0x27
 800a376:	2100      	movs	r1, #0
 800a378:	4618      	mov	r0, r3
 800a37a:	f012 fec1 	bl	801d100 <memset>
    uint8_t   PH_MEMLOC_REM wSelectCmdLen;
    uint8_t    PH_MEMLOC_REM bSelectCmdValidBits;
    uint8_t    PH_MEMLOC_BUF aBeginRoundCmd[3] = {0};
 800a37e:	f107 0310 	add.w	r3, r7, #16
 800a382:	2100      	movs	r1, #0
 800a384:	460a      	mov	r2, r1
 800a386:	801a      	strh	r2, [r3, #0]
 800a388:	460a      	mov	r2, r1
 800a38a:	709a      	strb	r2, [r3, #2]
    uint8_t    PH_MEMLOC_REM *pRxBuffer = NULL;
 800a38c:	2300      	movs	r3, #0
 800a38e:	60fb      	str	r3, [r7, #12]
    uint16_t   PH_MEMLOC_REM wRxBufferLen = 0;
 800a390:	2300      	movs	r3, #0
 800a392:	817b      	strh	r3, [r7, #10]
    uint8_t    PH_MEMLOC_REM bEmptyPointer = 0;
 800a394:	2300      	movs	r3, #0
 800a396:	727b      	strb	r3, [r7, #9]
    uint8_t    PH_MEMLOC_REM bMoreCardsPresent;
    uint16_t   PH_MEMLOC_REM wIndex;
    uint8_t    PH_MEMLOC_REM bPcLength;
    uint8_t    PH_MEMLOC_REM bPacketCrcLen;

    wRxBufferLen = 0;
 800a398:	2300      	movs	r3, #0
 800a39a:	817b      	strh	r3, [r7, #10]
    /* Reset collision pending flag */
    pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	7f9b      	ldrb	r3, [r3, #30]
 800a3a0:	f023 0320 	bic.w	r3, r3, #32
 800a3a4:	b2da      	uxtb	r2, r3
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	779a      	strb	r2, [r3, #30]

    /* Reset detected tag count */
    pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound = 0;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
    pDataParams->bNumOfCards = 0;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    /* Reset more card present flag */
    bMoreCardsPresent = PH_OFF;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

    /* Apply Guard time. */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	8b5b      	ldrh	r3, [r3, #26]
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	2135      	movs	r1, #53	@ 0x35
 800a3cc:	f002 ffa0 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800a3d6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d002      	beq.n	800a3e4 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x82>
 800a3de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a3e2:	e1c2      	b.n	800a76a <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x408>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_18000P3M3]));

    /* Configure HW for the Type 18000p3m3 technology */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3e8:	2106      	movs	r1, #6
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f002 fa4a 	bl	800c884 <phhalHw_Pn5180_ApplyProtocolSettings>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800a3f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d002      	beq.n	800a404 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0xa2>
 800a3fe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a402:	e1b2      	b.n	800a76a <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x408>
        pDataParams->pHalDataParams,
        PHHAL_HW_CARDTYPE_I18000P3M3));

    /* Reset detected tag count */
    pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound = 0;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2200      	movs	r2, #0
 800a408:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
    pDataParams->bNumOfCards = 0;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2200      	movs	r2, #0
 800a410:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    /* Create select command frame */
    PH_CHECK_SUCCESS_FCT(status, phpalI18000p3m3_CreateSelectCmd(
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800a418:	f107 0316 	add.w	r3, r7, #22
 800a41c:	9307      	str	r3, [sp, #28]
 800a41e:	f107 0317 	add.w	r3, r7, #23
 800a422:	9306      	str	r3, [sp, #24]
 800a424:	f107 0318 	add.w	r3, r7, #24
 800a428:	9305      	str	r3, [sp, #20]
 800a42a:	2300      	movs	r3, #0
 800a42c:	9304      	str	r3, [sp, #16]
 800a42e:	2300      	movs	r3, #0
 800a430:	9303      	str	r3, [sp, #12]
 800a432:	2300      	movs	r3, #0
 800a434:	9302      	str	r3, [sp, #8]
 800a436:	2300      	movs	r3, #0
 800a438:	9301      	str	r3, [sp, #4]
 800a43a:	f107 0309 	add.w	r3, r7, #9
 800a43e:	9300      	str	r3, [sp, #0]
 800a440:	2301      	movs	r3, #1
 800a442:	2200      	movs	r2, #0
 800a444:	2100      	movs	r1, #0
 800a446:	f00a ffb3 	bl	80153b0 <phpalI18000p3m3_Sw_CreateSelectCmd>
 800a44a:	4603      	mov	r3, r0
 800a44c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800a450:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a454:	2b00      	cmp	r3, #0
 800a456:	d002      	beq.n	800a45e <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0xfc>
 800a458:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a45c:	e185      	b.n	800a76a <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x408>
        &wSelectCmdLen,
        &bSelectCmdValidBits));

    do
    {
        if((status & PH_ERR_MASK) == PH_ERR_SUCCESS_CHAINING)
 800a45e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a462:	b2db      	uxtb	r3, r3
 800a464:	2b71      	cmp	r3, #113	@ 0x71
 800a466:	d113      	bne.n	800a490 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x12e>
        {
            /* Resume Inventory */
            status = phhalHw_I18000p3m3ResumeInventory(
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a46c:	f107 020a 	add.w	r2, r7, #10
 800a470:	f107 010c 	add.w	r1, r7, #12
 800a474:	4618      	mov	r0, r3
 800a476:	f005 fc4f 	bl	800fd18 <phhalHw_Pn5180_18000p3m3ResumeInventory>
 800a47a:	4603      	mov	r3, r0
 800a47c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                pDataParams->pHalDataParams,
                &pRxBuffer,
                &wRxBufferLen);
            /* Return if status is aborted. */
            PH_CHECK_ABORT(status);
 800a480:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a484:	b2db      	uxtb	r3, r3
 800a486:	2b12      	cmp	r3, #18
 800a488:	d150      	bne.n	800a52c <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x1ca>
 800a48a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a48e:	e16c      	b.n	800a76a <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x408>
        }
        else
        {
            /* Create BeginRound command frame with Q value */
            PH_CHECK_SUCCESS_FCT(status, phpalI18000p3m3_CreateBeginRoundCmd(
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f893 10c2 	ldrb.w	r1, [r3, #194]	@ 0xc2
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f893 40c1 	ldrb.w	r4, [r3, #193]	@ 0xc1
 800a4a0:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800a4a4:	1c5a      	adds	r2, r3, #1
 800a4a6:	f887 2045 	strb.w	r2, [r7, #69]	@ 0x45
 800a4aa:	f107 0210 	add.w	r2, r7, #16
 800a4ae:	9204      	str	r2, [sp, #16]
 800a4b0:	9303      	str	r3, [sp, #12]
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	9302      	str	r3, [sp, #8]
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	9301      	str	r3, [sp, #4]
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	9300      	str	r3, [sp, #0]
 800a4be:	2300      	movs	r3, #0
 800a4c0:	4622      	mov	r2, r4
 800a4c2:	f00b f88e 	bl	80155e2 <phpalI18000p3m3_Sw_CreateBeginRoundCmd>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800a4cc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d002      	beq.n	800a4da <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x178>
 800a4d4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a4d8:	e147      	b.n	800a76a <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x408>
                0,
                bQ++,
                aBeginRoundCmd));

            /* Inventory */
            status = phhalHw_I18000p3m3Inventory(
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800a4de:	7dfa      	ldrb	r2, [r7, #23]
 800a4e0:	7dbc      	ldrb	r4, [r7, #22]
 800a4e2:	f107 0118 	add.w	r1, r7, #24
 800a4e6:	f107 030a 	add.w	r3, r7, #10
 800a4ea:	9303      	str	r3, [sp, #12]
 800a4ec:	f107 030c 	add.w	r3, r7, #12
 800a4f0:	9302      	str	r3, [sp, #8]
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	9301      	str	r3, [sp, #4]
 800a4f6:	f107 0310 	add.w	r3, r7, #16
 800a4fa:	9300      	str	r3, [sp, #0]
 800a4fc:	4623      	mov	r3, r4
 800a4fe:	f005 fa73 	bl	800f9e8 <phhalHw_Pn5180_I18000p3m3Inventory>
 800a502:	4603      	mov	r3, r0
 800a504:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                aBeginRoundCmd,
                PHHAL_HW_I18000P3M3_GET_MAX_RESPS,
                &pRxBuffer,
                &wRxBufferLen);
            /* Return if status is aborted. */
            PH_CHECK_ABORT(status);
 800a508:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a50c:	b2db      	uxtb	r3, r3
 800a50e:	2b12      	cmp	r3, #18
 800a510:	d102      	bne.n	800a518 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x1b6>
 800a512:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a516:	e128      	b.n	800a76a <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x408>

            /* Reset more card present flag */
            bMoreCardsPresent = PH_OFF;
 800a518:	2300      	movs	r3, #0
 800a51a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

            /* Reset collision pending flag */
            pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	7f9b      	ldrb	r3, [r3, #30]
 800a522:	f023 0320 	bic.w	r3, r3, #32
 800a526:	b2da      	uxtb	r2, r3
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	779a      	strb	r2, [r3, #30]
        }

        /* Reset receive buffer index */
        wIndex = 0;
 800a52c:	2300      	movs	r3, #0
 800a52e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

        while(wIndex < wRxBufferLen)
 800a532:	e0fc      	b.n	800a72e <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x3cc>
        {
            if(pRxBuffer[wIndex] == 0U)
 800a534:	68fa      	ldr	r2, [r7, #12]
 800a536:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a53a:	4413      	add	r3, r2
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	f040 80c8 	bne.w	800a6d4 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x372>
            {
                /* Partial bits shall be 0 as truncation is not set */
                if(pRxBuffer[wIndex + 2U] != 0U)
 800a544:	68fa      	ldr	r2, [r7, #12]
 800a546:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a54a:	3302      	adds	r3, #2
 800a54c:	4413      	add	r3, r2
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d002      	beq.n	800a55a <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x1f8>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_AC_DISCLOOP);
 800a554:	f244 037f 	movw	r3, #16511	@ 0x407f
 800a558:	e107      	b.n	800a76a <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x408>
                }

                /* StoredPC/PacketPC length */
                bPcLength = 2;
 800a55a:	2302      	movs	r3, #2
 800a55c:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41

                /* PacketCRC length */
                bPacketCrcLen = 0;
 800a560:	2300      	movs	r3, #0
 800a562:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                /* Check for XPC Indicator (XI) */
                if(0u != (pRxBuffer[wIndex + 3U] & 0x02U))
 800a566:	68fa      	ldr	r2, [r7, #12]
 800a568:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a56c:	3303      	adds	r3, #3
 800a56e:	4413      	add	r3, r2
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	f003 0302 	and.w	r3, r3, #2
 800a576:	2b00      	cmp	r3, #0
 800a578:	d015      	beq.n	800a5a6 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x244>
                {
                    /* XPC_W1 length */
                    bPcLength = (uint8_t)(bPcLength + 2U);
 800a57a:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800a57e:	3302      	adds	r3, #2
 800a580:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41

                    /* PacketCRC length */
                    bPacketCrcLen = 2;
 800a584:	2302      	movs	r3, #2
 800a586:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                    /* Check for XPC Extension Bit (XEB) */
                    if(0u != (pRxBuffer[wIndex + 5U] & 0x80U))
 800a58a:	68fa      	ldr	r2, [r7, #12]
 800a58c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a590:	3305      	adds	r3, #5
 800a592:	4413      	add	r3, r2
 800a594:	781b      	ldrb	r3, [r3, #0]
 800a596:	b25b      	sxtb	r3, r3
 800a598:	2b00      	cmp	r3, #0
 800a59a:	da04      	bge.n	800a5a6 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x244>
                    {
                        /* XPC_W2 length */
                        bPcLength = (uint8_t)(bPcLength + 2U);
 800a59c:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800a5a0:	3302      	adds	r3, #2
 800a5a2:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
                    }
                }

                if(pRxBuffer[wIndex + 1U] > (bPcLength + bPacketCrcLen))
 800a5a6:	68fa      	ldr	r2, [r7, #12]
 800a5a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a5ac:	3301      	adds	r3, #1
 800a5ae:	4413      	add	r3, r2
 800a5b0:	781b      	ldrb	r3, [r3, #0]
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 800a5b8:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a5bc:	4413      	add	r3, r2
 800a5be:	4299      	cmp	r1, r3
 800a5c0:	dd53      	ble.n	800a66a <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x308>
                {
                    /* To avoid case of corruption */
                    if((pRxBuffer[wIndex + 1U] - (bPcLength + bPacketCrcLen)) <= (uint8_t)sizeof(pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[pDataParams->bNumOfCards].aUii))
 800a5c2:	68fa      	ldr	r2, [r7, #12]
 800a5c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	4413      	add	r3, r2
 800a5cc:	781b      	ldrb	r3, [r3, #0]
 800a5ce:	4619      	mov	r1, r3
 800a5d0:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 800a5d4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a5d8:	4413      	add	r3, r2
 800a5da:	1acb      	subs	r3, r1, r3
 800a5dc:	2b3a      	cmp	r3, #58	@ 0x3a
 800a5de:	dc41      	bgt.n	800a664 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x302>
                    {
                        /* Copy UII */
                        (void)memcpy(
                            pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[pDataParams->bNumOfCards].aUii,
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800a5e6:	461a      	mov	r2, r3
 800a5e8:	4613      	mov	r3, r2
 800a5ea:	011b      	lsls	r3, r3, #4
 800a5ec:	1a9b      	subs	r3, r3, r2
 800a5ee:	009b      	lsls	r3, r3, #2
 800a5f0:	33c0      	adds	r3, #192	@ 0xc0
 800a5f2:	687a      	ldr	r2, [r7, #4]
 800a5f4:	4413      	add	r3, r2
 800a5f6:	1d18      	adds	r0, r3, #4
                        (void)memcpy(
 800a5f8:	68fa      	ldr	r2, [r7, #12]
                            &pRxBuffer[wIndex + 3U + bPcLength],
 800a5fa:	f8b7 1042 	ldrh.w	r1, [r7, #66]	@ 0x42
 800a5fe:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800a602:	440b      	add	r3, r1
 800a604:	3303      	adds	r3, #3
 800a606:	18d1      	adds	r1, r2, r3
                            ((size_t)pRxBuffer[wIndex + 1U] - (bPcLength + bPacketCrcLen)));
 800a608:	68fa      	ldr	r2, [r7, #12]
 800a60a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a60e:	3301      	adds	r3, #1
 800a610:	4413      	add	r3, r2
 800a612:	781b      	ldrb	r3, [r3, #0]
 800a614:	461c      	mov	r4, r3
 800a616:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 800a61a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a61e:	4413      	add	r3, r2
                        (void)memcpy(
 800a620:	1ae3      	subs	r3, r4, r3
 800a622:	461a      	mov	r2, r3
 800a624:	f012 fdeb 	bl	801d1fe <memcpy>

                        /* Calculate UII length in bits */
                        pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[pDataParams->bNumOfCards].wUiiLength =
                        		(uint16_t)(((uint16_t)pRxBuffer[wIndex + 1U] - ((uint16_t)bPcLength + (uint16_t)bPacketCrcLen)) * 8U);
 800a628:	68fa      	ldr	r2, [r7, #12]
 800a62a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a62e:	3301      	adds	r3, #1
 800a630:	4413      	add	r3, r2
 800a632:	781b      	ldrb	r3, [r3, #0]
 800a634:	4619      	mov	r1, r3
 800a636:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 800a63a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a63e:	4413      	add	r3, r2
 800a640:	1acb      	subs	r3, r1, r3
 800a642:	b29b      	uxth	r3, r3
                        pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[pDataParams->bNumOfCards].wUiiLength =
 800a644:	687a      	ldr	r2, [r7, #4]
 800a646:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
 800a64a:	4611      	mov	r1, r2
                        		(uint16_t)(((uint16_t)pRxBuffer[wIndex + 1U] - ((uint16_t)bPcLength + (uint16_t)bPacketCrcLen)) * 8U);
 800a64c:	00db      	lsls	r3, r3, #3
 800a64e:	b298      	uxth	r0, r3
                        pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[pDataParams->bNumOfCards].wUiiLength =
 800a650:	687a      	ldr	r2, [r7, #4]
 800a652:	460b      	mov	r3, r1
 800a654:	011b      	lsls	r3, r3, #4
 800a656:	1a5b      	subs	r3, r3, r1
 800a658:	009b      	lsls	r3, r3, #2
 800a65a:	4413      	add	r3, r2
 800a65c:	33fe      	adds	r3, #254	@ 0xfe
 800a65e:	4602      	mov	r2, r0
 800a660:	801a      	strh	r2, [r3, #0]
 800a662:	e00f      	b.n	800a684 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x322>
                    }
                    else
                    {
                        /* In case of a compliant card this scenario should never come */
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_AC_DISCLOOP);
 800a664:	f244 037f 	movw	r3, #16511	@ 0x407f
 800a668:	e07f      	b.n	800a76a <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x408>
                    }
                }
                else
                {
                    pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[pDataParams->bNumOfCards].wUiiLength = 0;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800a670:	4619      	mov	r1, r3
 800a672:	687a      	ldr	r2, [r7, #4]
 800a674:	460b      	mov	r3, r1
 800a676:	011b      	lsls	r3, r3, #4
 800a678:	1a5b      	subs	r3, r3, r1
 800a67a:	009b      	lsls	r3, r3, #2
 800a67c:	4413      	add	r3, r2
 800a67e:	33fe      	adds	r3, #254	@ 0xfe
 800a680:	2200      	movs	r2, #0
 800a682:	801a      	strh	r2, [r3, #0]
                }

                /* Increment device count */
                pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound++;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800a68a:	3301      	adds	r3, #1
 800a68c:	b2da      	uxtb	r2, r3
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
                pDataParams->bNumOfCards++;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800a69a:	3301      	adds	r3, #1
 800a69c:	b2da      	uxtb	r2, r3
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

                if(pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound >=
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f893 20c0 	ldrb.w	r2, [r3, #192]	@ 0xc0
                    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_18000P3M3])
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	7bdb      	ldrb	r3, [r3, #15]
                if(pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound >=
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d301      	bcc.n	800a6b6 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x354>
                {
                    return PH_ERR_SUCCESS;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	e059      	b.n	800a76a <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x408>
                }

                wIndex =  (uint16_t)(wIndex + pRxBuffer[wIndex + 1U] + 3U);
 800a6b6:	68fa      	ldr	r2, [r7, #12]
 800a6b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a6bc:	3301      	adds	r3, #1
 800a6be:	4413      	add	r3, r2
 800a6c0:	781b      	ldrb	r3, [r3, #0]
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a6c8:	4413      	add	r3, r2
 800a6ca:	b29b      	uxth	r3, r3
 800a6cc:	3303      	adds	r3, #3
 800a6ce:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800a6d2:	e02c      	b.n	800a72e <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x3cc>
            }
            else if(pRxBuffer[wIndex] == 1U)
 800a6d4:	68fa      	ldr	r2, [r7, #12]
 800a6d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a6da:	4413      	add	r3, r2
 800a6dc:	781b      	ldrb	r3, [r3, #0]
 800a6de:	2b01      	cmp	r3, #1
 800a6e0:	d102      	bne.n	800a6e8 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x386>
            {
                /* This should not come as ReqRN is not send */
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_AC_DISCLOOP);
 800a6e2:	f244 037f 	movw	r3, #16511	@ 0x407f
 800a6e6:	e040      	b.n	800a76a <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x408>
            }
            else if(pRxBuffer[wIndex] == 2U)
 800a6e8:	68fa      	ldr	r2, [r7, #12]
 800a6ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a6ee:	4413      	add	r3, r2
 800a6f0:	781b      	ldrb	r3, [r3, #0]
 800a6f2:	2b02      	cmp	r3, #2
 800a6f4:	d105      	bne.n	800a702 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x3a0>
            {
                /* Timeout */
                wIndex = (uint16_t)(wIndex + 3U);
 800a6f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a6fa:	3303      	adds	r3, #3
 800a6fc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800a700:	e015      	b.n	800a72e <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x3cc>
            }
            else
            {
                /* Collision */
                wIndex = (uint16_t)(wIndex + 3U);
 800a702:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a706:	3303      	adds	r3, #3
 800a708:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
                bMoreCardsPresent = PH_ON;
 800a70c:	2301      	movs	r3, #1
 800a70e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
                pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	7f9b      	ldrb	r3, [r3, #30]
 800a716:	f043 0320 	orr.w	r3, r3, #32
 800a71a:	b2da      	uxtb	r2, r3
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	779a      	strb	r2, [r3, #30]

                /* Check for device count */
                if(pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_18000P3M3] == 0x00U)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	7bdb      	ldrb	r3, [r3, #15]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d102      	bne.n	800a72e <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x3cc>
                {
                    /* return collision error */
                    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 800a728:	f244 0381 	movw	r3, #16513	@ 0x4081
 800a72c:	e01d      	b.n	800a76a <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x408>
        while(wIndex < wRxBufferLen)
 800a72e:	897b      	ldrh	r3, [r7, #10]
 800a730:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a734:	429a      	cmp	r2, r3
 800a736:	f4ff aefd 	bcc.w	800a534 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x1d2>
                }
            }
        }
    }
    while(((bMoreCardsPresent != PH_OFF) && (bQ <= 0x0FU)) || ((status & PH_ERR_MASK) == PH_ERR_SUCCESS_CHAINING));
 800a73a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d004      	beq.n	800a74c <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x3ea>
 800a742:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800a746:	2b0f      	cmp	r3, #15
 800a748:	f67f ae89 	bls.w	800a45e <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0xfc>
 800a74c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a750:	b2db      	uxtb	r3, r3
 800a752:	2b71      	cmp	r3, #113	@ 0x71
 800a754:	f43f ae83 	beq.w	800a45e <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0xfc>

    if(0U != (pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound))
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d001      	beq.n	800a766 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x404>
    {
        return PH_ERR_SUCCESS;
 800a762:	2300      	movs	r3, #0
 800a764:	e001      	b.n	800a76a <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x408>
    }
    else
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800a766:	f244 0385 	movw	r3, #16517	@ 0x4085
    }
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	374c      	adds	r7, #76	@ 0x4c
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd90      	pop	{r4, r7, pc}

0800a772 <phacDiscLoop_Sw_Int_ActivateI18000p3m3>:

phStatus_t phacDiscLoop_Sw_Int_ActivateI18000p3m3(
                                                  phacDiscLoop_Sw_DataParams_t * pDataParams,
                                                  uint8_t bI18000p3m3TagIdx
                                                  )
{
 800a772:	b590      	push	{r4, r7, lr}
 800a774:	b09b      	sub	sp, #108	@ 0x6c
 800a776:	af08      	add	r7, sp, #32
 800a778:	6078      	str	r0, [r7, #4]
 800a77a:	460b      	mov	r3, r1
 800a77c:	70fb      	strb	r3, [r7, #3]
#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    phStatus_t PH_MEMLOC_REM status;
    uint8_t    PH_MEMLOC_BUF aSelectCmd[39] = {0};
 800a77e:	f107 031c 	add.w	r3, r7, #28
 800a782:	2227      	movs	r2, #39	@ 0x27
 800a784:	2100      	movs	r1, #0
 800a786:	4618      	mov	r0, r3
 800a788:	f012 fcba 	bl	801d100 <memset>
    uint8_t   PH_MEMLOC_REM wSelectCmdLen;
    uint8_t    PH_MEMLOC_REM bSelectCmdValidBits;
    uint8_t    PH_MEMLOC_BUF aBeginRoundCmd[3] = {0};
 800a78c:	f107 0314 	add.w	r3, r7, #20
 800a790:	2100      	movs	r1, #0
 800a792:	460a      	mov	r2, r1
 800a794:	801a      	strh	r2, [r3, #0]
 800a796:	460a      	mov	r2, r1
 800a798:	709a      	strb	r2, [r3, #2]
    uint8_t    PH_MEMLOC_REM *pRxBuffer = NULL;
 800a79a:	2300      	movs	r3, #0
 800a79c:	613b      	str	r3, [r7, #16]
    uint16_t   PH_MEMLOC_REM wRxBufferLen = 0;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	81fb      	strh	r3, [r7, #14]
    uint8_t    PH_MEMLOC_REM bUiiStartAddress = 0x20;
 800a7a2:	2320      	movs	r3, #32
 800a7a4:	737b      	strb	r3, [r7, #13]
    uint8_t    PH_MEMLOC_REM bMaskLength;

    /* Out of range check */
    if ((bI18000p3m3TagIdx >= pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound) || ( bI18000p3m3TagIdx >= PHAC_DISCLOOP_CFG_MAX_VICINITY_CARDS_SUPPORTED ))
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800a7ac:	78fa      	ldrb	r2, [r7, #3]
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	d202      	bcs.n	800a7b8 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x46>
 800a7b2:	78fb      	ldrb	r3, [r7, #3]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d002      	beq.n	800a7be <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x4c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800a7b8:	f244 0321 	movw	r3, #16417	@ 0x4021
 800a7bc:	e099      	b.n	800a8f2 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x180>
    }

    /* Maximum mask length possible is 255 */
    if(pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[bI18000p3m3TagIdx].wUiiLength > 255U)
 800a7be:	78fa      	ldrb	r2, [r7, #3]
 800a7c0:	6879      	ldr	r1, [r7, #4]
 800a7c2:	4613      	mov	r3, r2
 800a7c4:	011b      	lsls	r3, r3, #4
 800a7c6:	1a9b      	subs	r3, r3, r2
 800a7c8:	009b      	lsls	r3, r3, #2
 800a7ca:	440b      	add	r3, r1
 800a7cc:	33fe      	adds	r3, #254	@ 0xfe
 800a7ce:	881b      	ldrh	r3, [r3, #0]
 800a7d0:	2bff      	cmp	r3, #255	@ 0xff
 800a7d2:	d903      	bls.n	800a7dc <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x6a>
    {
        bMaskLength = 255;
 800a7d4:	23ff      	movs	r3, #255	@ 0xff
 800a7d6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a7da:	e00a      	b.n	800a7f2 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x80>
    }
    else
    {
        bMaskLength = (uint8_t)pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[bI18000p3m3TagIdx].wUiiLength;
 800a7dc:	78fa      	ldrb	r2, [r7, #3]
 800a7de:	6879      	ldr	r1, [r7, #4]
 800a7e0:	4613      	mov	r3, r2
 800a7e2:	011b      	lsls	r3, r3, #4
 800a7e4:	1a9b      	subs	r3, r3, r2
 800a7e6:	009b      	lsls	r3, r3, #2
 800a7e8:	440b      	add	r3, r1
 800a7ea:	33fe      	adds	r3, #254	@ 0xfe
 800a7ec:	881b      	ldrh	r3, [r3, #0]
 800a7ee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    /* Create select command frame (with selected UII in mask) */
    PH_CHECK_SUCCESS_FCT(status, phpalI18000p3m3_CreateSelectCmd(
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800a7f6:	78fa      	ldrb	r2, [r7, #3]
 800a7f8:	4613      	mov	r3, r2
 800a7fa:	011b      	lsls	r3, r3, #4
 800a7fc:	1a9b      	subs	r3, r3, r2
 800a7fe:	009b      	lsls	r3, r3, #2
 800a800:	33c0      	adds	r3, #192	@ 0xc0
 800a802:	687a      	ldr	r2, [r7, #4]
 800a804:	4413      	add	r3, r2
 800a806:	3304      	adds	r3, #4
 800a808:	f107 021a 	add.w	r2, r7, #26
 800a80c:	9207      	str	r2, [sp, #28]
 800a80e:	f107 021b 	add.w	r2, r7, #27
 800a812:	9206      	str	r2, [sp, #24]
 800a814:	f107 021c 	add.w	r2, r7, #28
 800a818:	9205      	str	r2, [sp, #20]
 800a81a:	2200      	movs	r2, #0
 800a81c:	9204      	str	r2, [sp, #16]
 800a81e:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800a822:	9203      	str	r2, [sp, #12]
 800a824:	9302      	str	r3, [sp, #8]
 800a826:	2300      	movs	r3, #0
 800a828:	9301      	str	r3, [sp, #4]
 800a82a:	f107 030d 	add.w	r3, r7, #13
 800a82e:	9300      	str	r3, [sp, #0]
 800a830:	2301      	movs	r3, #1
 800a832:	2200      	movs	r2, #0
 800a834:	2100      	movs	r1, #0
 800a836:	f00a fdbb 	bl	80153b0 <phpalI18000p3m3_Sw_CreateSelectCmd>
 800a83a:	4603      	mov	r3, r0
 800a83c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800a840:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a844:	2b00      	cmp	r3, #0
 800a846:	d002      	beq.n	800a84e <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0xdc>
 800a848:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a84c:	e051      	b.n	800a8f2 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x180>
        aSelectCmd,
        &wSelectCmdLen,
        &bSelectCmdValidBits));

    /* Create BeginRound command frame */
    PH_CHECK_SUCCESS_FCT(status, phpalI18000p3m3_CreateBeginRoundCmd(
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f893 10c2 	ldrb.w	r1, [r3, #194]	@ 0xc2
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f893 20c1 	ldrb.w	r2, [r3, #193]	@ 0xc1
 800a85e:	f107 0314 	add.w	r3, r7, #20
 800a862:	9304      	str	r3, [sp, #16]
 800a864:	2300      	movs	r3, #0
 800a866:	9303      	str	r3, [sp, #12]
 800a868:	2300      	movs	r3, #0
 800a86a:	9302      	str	r3, [sp, #8]
 800a86c:	2300      	movs	r3, #0
 800a86e:	9301      	str	r3, [sp, #4]
 800a870:	2300      	movs	r3, #0
 800a872:	9300      	str	r3, [sp, #0]
 800a874:	2300      	movs	r3, #0
 800a876:	f00a feb4 	bl	80155e2 <phpalI18000p3m3_Sw_CreateBeginRoundCmd>
 800a87a:	4603      	mov	r3, r0
 800a87c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800a880:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a884:	2b00      	cmp	r3, #0
 800a886:	d002      	beq.n	800a88e <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x11c>
 800a888:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a88c:	e031      	b.n	800a8f2 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x180>
        0,
        0,
        aBeginRoundCmd));

    /* Activate tag with specified UII */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_I18000p3m3Inventory(
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800a892:	7efa      	ldrb	r2, [r7, #27]
 800a894:	7ebc      	ldrb	r4, [r7, #26]
 800a896:	f107 011c 	add.w	r1, r7, #28
 800a89a:	f107 030e 	add.w	r3, r7, #14
 800a89e:	9303      	str	r3, [sp, #12]
 800a8a0:	f107 0310 	add.w	r3, r7, #16
 800a8a4:	9302      	str	r3, [sp, #8]
 800a8a6:	2302      	movs	r3, #2
 800a8a8:	9301      	str	r3, [sp, #4]
 800a8aa:	f107 0314 	add.w	r3, r7, #20
 800a8ae:	9300      	str	r3, [sp, #0]
 800a8b0:	4623      	mov	r3, r4
 800a8b2:	f005 f899 	bl	800f9e8 <phhalHw_Pn5180_I18000p3m3Inventory>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800a8bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d002      	beq.n	800a8ca <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x158>
 800a8c4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a8c8:	e013      	b.n	800a8f2 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x180>
        PHHAL_HW_I18000P3M3_GET_TAG_HANDLE,
        &pRxBuffer,
        &wRxBufferLen));

    /* Update handle */
    PH_CHECK_SUCCESS_FCT(status, phalI18000p3m3_SetHandle(
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800a8ce:	693a      	ldr	r2, [r7, #16]
 800a8d0:	89fb      	ldrh	r3, [r7, #14]
 800a8d2:	3b02      	subs	r3, #2
 800a8d4:	4413      	add	r3, r2
 800a8d6:	4619      	mov	r1, r3
 800a8d8:	f000 fbd5 	bl	800b086 <phalI18000p3m3_Sw_SetHandle>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800a8e2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d002      	beq.n	800a8f0 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x17e>
 800a8ea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a8ee:	e000      	b.n	800a8f2 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x180>
        pDataParams->pAl18000p3m3DataParams,
        &pRxBuffer[wRxBufferLen - 2u]));

    return PH_ERR_SUCCESS;
 800a8f0:	2300      	movs	r3, #0
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	374c      	adds	r7, #76	@ 0x4c
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd90      	pop	{r4, r7, pc}

0800a8fa <phacDiscLoop_Sw_DetTechTypeV>:
 * Private Functions
 * ***************************************************************************************************************** */
phStatus_t phacDiscLoop_Sw_DetTechTypeV(
        phacDiscLoop_Sw_DataParams_t *pDataParams
)
{
 800a8fa:	b580      	push	{r7, lr}
 800a8fc:	b088      	sub	sp, #32
 800a8fe:	af04      	add	r7, sp, #16
 800a900:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    phStatus_t PH_MEMLOC_REM status = PH_ERR_INTERNAL_ERROR;
 800a902:	237f      	movs	r3, #127	@ 0x7f
 800a904:	81fb      	strh	r3, [r7, #14]

    /* Inventory request with one slot */
    status = phpalSli15693_Inventory(
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 800a910:	f043 0324 	orr.w	r3, r3, #36	@ 0x24
 800a914:	b2d9      	uxtb	r1, r3
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	33b7      	adds	r3, #183	@ 0xb7
 800a91a:	687a      	ldr	r2, [r7, #4]
 800a91c:	32b8      	adds	r2, #184	@ 0xb8
 800a91e:	9202      	str	r2, [sp, #8]
 800a920:	9301      	str	r3, [sp, #4]
 800a922:	2300      	movs	r3, #0
 800a924:	9300      	str	r3, [sp, #0]
 800a926:	2300      	movs	r3, #0
 800a928:	2200      	movs	r2, #0
 800a92a:	f00a ff66 	bl	80157fa <phpalSli15693_Sw_Inventory>
 800a92e:	4603      	mov	r3, r0
 800a930:	81fb      	strh	r3, [r7, #14]
            0,
            &pDataParams->sTypeVTargetInfo.aTypeV[0].bDsfid,
            pDataParams->sTypeVTargetInfo.aTypeV[0].aUid
    );

    if(0u != (phacDiscLoop_Sw_Int_IsValidPollStatus(status)))
 800a932:	89fb      	ldrh	r3, [r7, #14]
 800a934:	4618      	mov	r0, r3
 800a936:	f7fd fee0 	bl	80086fa <phacDiscLoop_Sw_Int_IsValidPollStatus>
 800a93a:	4603      	mov	r3, r0
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d002      	beq.n	800a946 <phacDiscLoop_Sw_DetTechTypeV+0x4c>
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 800a940:	f244 0387 	movw	r3, #16519	@ 0x4087
 800a944:	e000      	b.n	800a948 <phacDiscLoop_Sw_DetTechTypeV+0x4e>
    }
    else
    {
        return status;
 800a946:	89fb      	ldrh	r3, [r7, #14]
    }
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3710      	adds	r7, #16
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <phacDiscLoop_Sw_Int_CollisionResolutionV>:

phStatus_t phacDiscLoop_Sw_Int_CollisionResolutionV(
        phacDiscLoop_Sw_DataParams_t *pDataParams
)
{
 800a950:	b590      	push	{r4, r7, lr}
 800a952:	b09b      	sub	sp, #108	@ 0x6c
 800a954:	af04      	add	r7, sp, #16
 800a956:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    phStatus_t PH_MEMLOC_REM   status = PH_ERR_INTERNAL_ERROR;
 800a958:	237f      	movs	r3, #127	@ 0x7f
 800a95a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
    uint8_t    PH_MEMLOC_BUF   aMaskBuffer[PHPAL_SLI15693_UID_LENGTH];
    uint8_t    PH_MEMLOC_REM   bMaskBitLength = 0;
 800a95e:	2300      	movs	r3, #0
 800a960:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
    uint8_t    PH_MEMLOC_REM   bUidLengthDummy;
    uint8_t    PH_MEMLOC_REM   bDataDummy[1];
    uint8_t    PH_MEMLOC_REM   bNextSlot = 1;
 800a964:	2301      	movs	r3, #1
 800a966:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    uint16_t   PH_MEMLOC_REM   wDataLengthDummy;
    uint8_t    PH_MEMLOC_COUNT bSlot;
    uint8_t    PH_MEMLOC_REM   bSlotCount = 0;
 800a96a:	2300      	movs	r3, #0
 800a96c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
    uint8_t    PH_MEMLOC_COUNT bLevel = 0;
 800a970:	2300      	movs	r3, #0
 800a972:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
    uint8_t    PH_MEMLOC_REM   bEnd = 0;
 800a976:	2300      	movs	r3, #0
 800a978:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
    uint8_t    PH_MEMLOC_REM   bRepeat = 0;
 800a97c:	2300      	movs	r3, #0
 800a97e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    uint8_t    PH_MEMLOC_REM   bCount[16] = {0};
 800a982:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a986:	2200      	movs	r2, #0
 800a988:	601a      	str	r2, [r3, #0]
 800a98a:	605a      	str	r2, [r3, #4]
 800a98c:	609a      	str	r2, [r3, #8]
 800a98e:	60da      	str	r2, [r3, #12]
    uint16_t   PH_MEMLOC_REM   wCollisionLogReg[16] = {0};
 800a990:	f107 030c 	add.w	r3, r7, #12
 800a994:	2220      	movs	r2, #32
 800a996:	2100      	movs	r1, #0
 800a998:	4618      	mov	r0, r3
 800a99a:	f012 fbb1 	bl	801d100 <memset>

    /* Symbol 0 */
    pDataParams->sTypeVTargetInfo.bTotalTagsFound = 0;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
    pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_V);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	7f9b      	ldrb	r3, [r3, #30]
 800a9aa:	f023 0310 	bic.w	r3, r3, #16
 800a9ae:	b2da      	uxtb	r2, r3
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	779a      	strb	r2, [r3, #30]

    /* Apply Guard time. */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	8b1b      	ldrh	r3, [r3, #24]
 800a9bc:	461a      	mov	r2, r3
 800a9be:	2135      	movs	r1, #53	@ 0x35
 800a9c0:	f002 fca6 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800a9ca:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d002      	beq.n	800a9d8 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x88>
 800a9d2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800a9d6:	e2bd      	b.n	800af54 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x604>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_V]));

    /* Configure HW for the TypeV technology */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9dc:	2104      	movs	r1, #4
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f001 ff50 	bl	800c884 <phhalHw_Pn5180_ApplyProtocolSettings>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800a9ea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d002      	beq.n	800a9f8 <phacDiscLoop_Sw_Int_CollisionResolutionV+0xa8>
 800a9f2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800a9f6:	e2ad      	b.n	800af54 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x604>
        pDataParams->pHalDataParams,
        PHHAL_HW_CARDTYPE_ISO15693));

    /* Symbol 0 */
    status = phpalSli15693_Inventory(
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 800aa02:	f043 0324 	orr.w	r3, r3, #36	@ 0x24
 800aa06:	b2d9      	uxtb	r1, r3
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	33b7      	adds	r3, #183	@ 0xb7
 800aa0c:	687a      	ldr	r2, [r7, #4]
 800aa0e:	32b8      	adds	r2, #184	@ 0xb8
 800aa10:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 800aa14:	9202      	str	r2, [sp, #8]
 800aa16:	9301      	str	r3, [sp, #4]
 800aa18:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800aa1c:	9300      	str	r3, [sp, #0]
 800aa1e:	4623      	mov	r3, r4
 800aa20:	2200      	movs	r2, #0
 800aa22:	f00a feea 	bl	80157fa <phpalSli15693_Sw_Inventory>
 800aa26:	4603      	mov	r3, r0
 800aa28:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
            bMaskBitLength,
            &pDataParams->sTypeVTargetInfo.aTypeV[0].bDsfid,
            pDataParams->sTypeVTargetInfo.aTypeV[0].aUid);

    /* Symbol 1 */
    if((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT)
 800aa2c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800aa30:	b2db      	uxtb	r3, r3
 800aa32:	2b01      	cmp	r3, #1
 800aa34:	d102      	bne.n	800aa3c <phacDiscLoop_Sw_Int_CollisionResolutionV+0xec>
    {
        return status;
 800aa36:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800aa3a:	e28b      	b.n	800af54 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x604>
    }
    else
    {
        /* Symbol 2 */
        if((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800aa3c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800aa40:	b2db      	uxtb	r3, r3
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d111      	bne.n	800aa6a <phacDiscLoop_Sw_Int_CollisionResolutionV+0x11a>
        {
            /* Symbol 18 */
            pDataParams->sTypeVTargetInfo.bTotalTagsFound++;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	b2da      	uxtb	r2, r3
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
            pDataParams->bNumOfCards++;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800aa5c:	3301      	adds	r3, #1
 800aa5e:	b2da      	uxtb	r2, r3
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
            return PH_ERR_SUCCESS;
 800aa66:	2300      	movs	r3, #0
 800aa68:	e274      	b.n	800af54 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x604>
        }
        else if(((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800aa6a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800aa6e:	b2db      	uxtb	r3, r3
 800aa70:	2b03      	cmp	r3, #3
 800aa72:	d005      	beq.n	800aa80 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x130>
                || ((status & PH_ERR_MASK) == PH_ERR_INTEGRITY_ERROR))
 800aa74:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800aa78:	b2db      	uxtb	r3, r3
 800aa7a:	2b02      	cmp	r3, #2
 800aa7c:	f040 825e 	bne.w	800af3c <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5ec>
        {
            /* Symbol 3 */
            pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_V;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	7f9b      	ldrb	r3, [r3, #30]
 800aa84:	f043 0310 	orr.w	r3, r3, #16
 800aa88:	b2da      	uxtb	r2, r3
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	779a      	strb	r2, [r3, #30]

            /* Symbol 4 */
            if(pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V] == 0x00U)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	7b9b      	ldrb	r3, [r3, #14]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	f040 8243 	bne.w	800af1e <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5ce>
            {
                return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 800aa98:	f244 0381 	movw	r3, #16513	@ 0x4081
 800aa9c:	e25a      	b.n	800af54 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x604>
            do
            {
                while(pDataParams->sTypeVTargetInfo.bTotalTagsFound < pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V])
                {
                    /* Symbol 6 */
                    bSlot = 0;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

                    /* Symbol 7 */
                    pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_V);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	7f9b      	ldrb	r3, [r3, #30]
 800aaa8:	f023 0310 	bic.w	r3, r3, #16
 800aaac:	b2da      	uxtb	r2, r3
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	779a      	strb	r2, [r3, #30]

                    /* Symbol 8 */
                    status = phpalSli15693_Inventory(
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 800aabc:	f043 0304 	orr.w	r3, r3, #4
 800aac0:	b2dc      	uxtb	r4, r3
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800aac8:	461a      	mov	r2, r3
 800aaca:	4613      	mov	r3, r2
 800aacc:	00db      	lsls	r3, r3, #3
 800aace:	4413      	add	r3, r2
 800aad0:	33b0      	adds	r3, #176	@ 0xb0
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	4413      	add	r3, r2
 800aad6:	1dda      	adds	r2, r3, #7
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800aade:	4619      	mov	r1, r3
 800aae0:	460b      	mov	r3, r1
 800aae2:	00db      	lsls	r3, r3, #3
 800aae4:	440b      	add	r3, r1
 800aae6:	33b0      	adds	r3, #176	@ 0xb0
 800aae8:	6879      	ldr	r1, [r7, #4]
 800aaea:	440b      	add	r3, r1
 800aaec:	3308      	adds	r3, #8
 800aaee:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800aaf2:	9302      	str	r3, [sp, #8]
 800aaf4:	9201      	str	r2, [sp, #4]
 800aaf6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800aafa:	9300      	str	r3, [sp, #0]
 800aafc:	460b      	mov	r3, r1
 800aafe:	2200      	movs	r2, #0
 800ab00:	4621      	mov	r1, r4
 800ab02:	f00a fe7a 	bl	80157fa <phpalSli15693_Sw_Inventory>
 800ab06:	4603      	mov	r3, r0
 800ab08:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
                    {
                        /* Symbol 9 */
                        /* Protocol error scenario is not described in Activity Spec v2.2,
                         * but based on DTA Test case treating Protocol error similar to Timeout.
                         * */
                        if(((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT)
 800ab0c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800ab10:	b2db      	uxtb	r3, r3
 800ab12:	2b01      	cmp	r3, #1
 800ab14:	d04f      	beq.n	800abb6 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x266>
                            || ((status & PH_ERR_MASK) == PH_ERR_PROTOCOL_ERROR))
 800ab16:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800ab1a:	b2db      	uxtb	r3, r3
 800ab1c:	2b06      	cmp	r3, #6
 800ab1e:	d04a      	beq.n	800abb6 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x266>
                        {
                            /* Continue with next slot */
                        }
                        /* Symbol 10 */
                        else if(((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800ab20:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800ab24:	b2db      	uxtb	r3, r3
 800ab26:	2b03      	cmp	r3, #3
 800ab28:	d004      	beq.n	800ab34 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x1e4>
                                || ((status & PH_ERR_MASK) == PH_ERR_INTEGRITY_ERROR))
 800ab2a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800ab2e:	b2db      	uxtb	r3, r3
 800ab30:	2b02      	cmp	r3, #2
 800ab32:	d11f      	bne.n	800ab74 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x224>
                        {
                            /* Symbol 16 */
                            pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_V;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	7f9b      	ldrb	r3, [r3, #30]
 800ab38:	f043 0310 	orr.w	r3, r3, #16
 800ab3c:	b2da      	uxtb	r2, r3
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	779a      	strb	r2, [r3, #30]
                            wCollisionLogReg[bLevel] |= ((uint16_t) 1U )<< bSlot;
 800ab42:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800ab46:	005b      	lsls	r3, r3, #1
 800ab48:	3358      	adds	r3, #88	@ 0x58
 800ab4a:	443b      	add	r3, r7
 800ab4c:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800ab50:	b21a      	sxth	r2, r3
 800ab52:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800ab56:	2101      	movs	r1, #1
 800ab58:	fa01 f303 	lsl.w	r3, r1, r3
 800ab5c:	b21b      	sxth	r3, r3
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	b21a      	sxth	r2, r3
 800ab62:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800ab66:	b292      	uxth	r2, r2
 800ab68:	005b      	lsls	r3, r3, #1
 800ab6a:	3358      	adds	r3, #88	@ 0x58
 800ab6c:	443b      	add	r3, r7
 800ab6e:	f823 2c4c 	strh.w	r2, [r3, #-76]
 800ab72:	e020      	b.n	800abb6 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x266>
                        }
                        else if((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800ab74:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800ab78:	b2db      	uxtb	r3, r3
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d118      	bne.n	800abb0 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x260>
                        {
                            /* Symbol 11 */
                            pDataParams->sTypeVTargetInfo.bTotalTagsFound++;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800ab84:	3301      	adds	r3, #1
 800ab86:	b2da      	uxtb	r2, r3
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
                            pDataParams->bNumOfCards++;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800ab94:	3301      	adds	r3, #1
 800ab96:	b2da      	uxtb	r2, r3
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

                            /* Symbol 12 */
                            if(pDataParams->sTypeVTargetInfo.bTotalTagsFound >= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V])
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f893 20b4 	ldrb.w	r2, [r3, #180]	@ 0xb4
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	7b9b      	ldrb	r3, [r3, #14]
 800aba8:	429a      	cmp	r2, r3
 800abaa:	d304      	bcc.n	800abb6 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x266>
                            {
                                return PH_ERR_SUCCESS;
 800abac:	2300      	movs	r3, #0
 800abae:	e1d1      	b.n	800af54 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x604>
                            }
                        }
                        else
                        {
                            /* For all other error types, return error */
                            return status;
 800abb0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800abb4:	e1ce      	b.n	800af54 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x604>
                        }

                        /* Symbol 13, 14U */
                        if(++bSlot == 16U)
 800abb6:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800abba:	3301      	adds	r3, #1
 800abbc:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 800abc0:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800abc4:	2b10      	cmp	r3, #16
 800abc6:	d102      	bne.n	800abce <phacDiscLoop_Sw_Int_CollisionResolutionV+0x27e>
                        {
                            bNextSlot = 0;
 800abc8:	2300      	movs	r3, #0
 800abca:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
                        }

                        if(0U != (bNextSlot))
 800abce:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d031      	beq.n	800ac3a <phacDiscLoop_Sw_Int_CollisionResolutionV+0x2ea>
                        {
                            /* Symbol 15 */
                            status = phpalSli15693_SendEof(
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800abe0:	461a      	mov	r2, r3
 800abe2:	4613      	mov	r3, r2
 800abe4:	00db      	lsls	r3, r3, #3
 800abe6:	4413      	add	r3, r2
 800abe8:	33b0      	adds	r3, #176	@ 0xb0
 800abea:	687a      	ldr	r2, [r7, #4]
 800abec:	4413      	add	r3, r2
 800abee:	1dd9      	adds	r1, r3, #7
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800abf6:	461a      	mov	r2, r3
 800abf8:	4613      	mov	r3, r2
 800abfa:	00db      	lsls	r3, r3, #3
 800abfc:	4413      	add	r3, r2
 800abfe:	33b0      	adds	r3, #176	@ 0xb0
 800ac00:	687a      	ldr	r2, [r7, #4]
 800ac02:	4413      	add	r3, r2
 800ac04:	f103 0208 	add.w	r2, r3, #8
 800ac08:	f107 033e 	add.w	r3, r7, #62	@ 0x3e
 800ac0c:	9302      	str	r3, [sp, #8]
 800ac0e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800ac12:	9301      	str	r3, [sp, #4]
 800ac14:	f107 0343 	add.w	r3, r7, #67	@ 0x43
 800ac18:	9300      	str	r3, [sp, #0]
 800ac1a:	4613      	mov	r3, r2
 800ac1c:	460a      	mov	r2, r1
 800ac1e:	2100      	movs	r1, #0
 800ac20:	f00a fe15 	bl	801584e <phpalSli15693_Sw_SendEof>
 800ac24:	4603      	mov	r3, r0
 800ac26:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
                                    pDataParams->sTypeVTargetInfo.aTypeV[pDataParams->sTypeVTargetInfo.bTotalTagsFound].aUid,
                                    &bUidLengthDummy,
                                    bDataDummy,
                                    &wDataLengthDummy);
                            /* Return if status is aborted. */
                            PH_CHECK_ABORT(status);
 800ac2a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800ac2e:	b2db      	uxtb	r3, r3
 800ac30:	2b12      	cmp	r3, #18
 800ac32:	d102      	bne.n	800ac3a <phacDiscLoop_Sw_Int_CollisionResolutionV+0x2ea>
 800ac34:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800ac38:	e18c      	b.n	800af54 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x604>
                        }
                    }
                    while(0U != bNextSlot);
 800ac3a:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	f47f af64 	bne.w	800ab0c <phacDiscLoop_Sw_Int_CollisionResolutionV+0x1bc>
                    bNextSlot = 1;
 800ac44:	2301      	movs	r3, #1
 800ac46:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

                    do
                    {
                        bRepeat = 0;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                        if (0U != (wCollisionLogReg[bLevel]))
 800ac50:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800ac54:	005b      	lsls	r3, r3, #1
 800ac56:	3358      	adds	r3, #88	@ 0x58
 800ac58:	443b      	add	r3, r7
 800ac5a:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	f000 8120 	beq.w	800aea4 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x554>
                        {
                            for (bSlotCount = bCount[bLevel]; bSlotCount < 16U; bSlotCount++)
 800ac64:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800ac68:	3358      	adds	r3, #88	@ 0x58
 800ac6a:	443b      	add	r3, r7
 800ac6c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ac70:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 800ac74:	e110      	b.n	800ae98 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x548>
                            {
                                if (0U != (wCollisionLogReg[bLevel] & ((uint16_t)1U << bSlotCount)))
 800ac76:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800ac7a:	005b      	lsls	r3, r3, #1
 800ac7c:	3358      	adds	r3, #88	@ 0x58
 800ac7e:	443b      	add	r3, r7
 800ac80:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800ac84:	461a      	mov	r2, r3
 800ac86:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800ac8a:	fa42 f303 	asr.w	r3, r2, r3
 800ac8e:	f003 0301 	and.w	r3, r3, #1
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	f000 80c8 	beq.w	800ae28 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x4d8>
                                {
                                    /* Get bit-length of last valid byte */
                                    bUidLengthDummy = bMaskBitLength % (uint8_t)8U;
 800ac98:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800ac9c:	f003 0307 	and.w	r3, r3, #7
 800aca0:	b2db      	uxtb	r3, r3
 800aca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

                                    /* Whole byte is valid -> append slot number to next byte */
                                    if (bUidLengthDummy == 0U)
 800aca6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d10a      	bne.n	800acc4 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x374>
                                    {
                                        aMaskBuffer[bMaskBitLength >> 3U] = bSlotCount;
 800acae:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800acb2:	08db      	lsrs	r3, r3, #3
 800acb4:	b2db      	uxtb	r3, r3
 800acb6:	3358      	adds	r3, #88	@ 0x58
 800acb8:	443b      	add	r3, r7
 800acba:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 800acbe:	f803 2c14 	strb.w	r2, [r3, #-20]
 800acc2:	e047      	b.n	800ad54 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x404>
                                    }
                                    /* Partial byte is valid */
                                    else
                                    {
                                        /* Fill the invalid bits of the incomplete byte with the 4 bits slot number */
                                        aMaskBuffer[bMaskBitLength >> (uint8_t)3U] &= (uint8_t)((uint8_t)0xFF >> ((uint8_t)8U  - bUidLengthDummy));
 800acc4:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800acc8:	08db      	lsrs	r3, r3, #3
 800acca:	b2db      	uxtb	r3, r3
 800accc:	3358      	adds	r3, #88	@ 0x58
 800acce:	443b      	add	r3, r7
 800acd0:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800acd4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800acd8:	f1c3 0308 	rsb	r3, r3, #8
 800acdc:	21ff      	movs	r1, #255	@ 0xff
 800acde:	fa41 f303 	asr.w	r3, r1, r3
 800ace2:	b2db      	uxtb	r3, r3
 800ace4:	f897 1055 	ldrb.w	r1, [r7, #85]	@ 0x55
 800ace8:	08c9      	lsrs	r1, r1, #3
 800acea:	b2c9      	uxtb	r1, r1
 800acec:	4013      	ands	r3, r2
 800acee:	b2da      	uxtb	r2, r3
 800acf0:	f101 0358 	add.w	r3, r1, #88	@ 0x58
 800acf4:	443b      	add	r3, r7
 800acf6:	f803 2c14 	strb.w	r2, [r3, #-20]
                                        aMaskBuffer[bMaskBitLength >> (uint8_t)3U] |= (uint8_t)(bSlotCount << bUidLengthDummy);
 800acfa:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800acfe:	08db      	lsrs	r3, r3, #3
 800ad00:	b2db      	uxtb	r3, r3
 800ad02:	3358      	adds	r3, #88	@ 0x58
 800ad04:	443b      	add	r3, r7
 800ad06:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800ad0a:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800ad0e:	f897 1043 	ldrb.w	r1, [r7, #67]	@ 0x43
 800ad12:	408b      	lsls	r3, r1
 800ad14:	b2db      	uxtb	r3, r3
 800ad16:	f897 1055 	ldrb.w	r1, [r7, #85]	@ 0x55
 800ad1a:	08c9      	lsrs	r1, r1, #3
 800ad1c:	b2c9      	uxtb	r1, r1
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	b2da      	uxtb	r2, r3
 800ad22:	f101 0358 	add.w	r3, r1, #88	@ 0x58
 800ad26:	443b      	add	r3, r7
 800ad28:	f803 2c14 	strb.w	r2, [r3, #-20]

                                        /* If not all 4 bits of the Slot number fit in the incomplete byte, put the rest in the next byte */
                                        if (bUidLengthDummy > 4U)
 800ad2c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ad30:	2b04      	cmp	r3, #4
 800ad32:	d90f      	bls.n	800ad54 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x404>
                                        {
                                            aMaskBuffer[(bMaskBitLength >> 3U) + 1U] = (uint8_t)(bSlotCount >> bUidLengthDummy);
 800ad34:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800ad38:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800ad3c:	fa43 f202 	asr.w	r2, r3, r2
 800ad40:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800ad44:	08db      	lsrs	r3, r3, #3
 800ad46:	b2db      	uxtb	r3, r3
 800ad48:	3301      	adds	r3, #1
 800ad4a:	b2d2      	uxtb	r2, r2
 800ad4c:	3358      	adds	r3, #88	@ 0x58
 800ad4e:	443b      	add	r3, r7
 800ad50:	f803 2c14 	strb.w	r2, [r3, #-20]
                                        }
                                    }

                                    /* Increment the bit length by the 4 bits slot number */
                                    bMaskBitLength = bMaskBitLength + 4U;
 800ad54:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800ad58:	3304      	adds	r3, #4
 800ad5a:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                                    pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_V;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	7f9b      	ldrb	r3, [r3, #30]
 800ad62:	f043 0310 	orr.w	r3, r3, #16
 800ad66:	b2da      	uxtb	r2, r3
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	779a      	strb	r2, [r3, #30]
                                    wCollisionLogReg[bLevel] =  wCollisionLogReg[bLevel] & ~((uint16_t)1U  << bSlotCount);
 800ad6c:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800ad70:	005b      	lsls	r3, r3, #1
 800ad72:	3358      	adds	r3, #88	@ 0x58
 800ad74:	443b      	add	r3, r7
 800ad76:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800ad7a:	b21a      	sxth	r2, r3
 800ad7c:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800ad80:	2101      	movs	r1, #1
 800ad82:	fa01 f303 	lsl.w	r3, r1, r3
 800ad86:	b21b      	sxth	r3, r3
 800ad88:	43db      	mvns	r3, r3
 800ad8a:	b21b      	sxth	r3, r3
 800ad8c:	4013      	ands	r3, r2
 800ad8e:	b21a      	sxth	r2, r3
 800ad90:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800ad94:	b292      	uxth	r2, r2
 800ad96:	005b      	lsls	r3, r3, #1
 800ad98:	3358      	adds	r3, #88	@ 0x58
 800ad9a:	443b      	add	r3, r7
 800ad9c:	f823 2c4c 	strh.w	r2, [r3, #-76]

                                    if(bSlotCount == 0x0FU)
 800ada0:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800ada4:	2b0f      	cmp	r3, #15
 800ada6:	d124      	bne.n	800adf2 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x4a2>
                                    {
                                        bCount[bLevel] = 0U;
 800ada8:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800adac:	3358      	adds	r3, #88	@ 0x58
 800adae:	443b      	add	r3, r7
 800adb0:	2200      	movs	r2, #0
 800adb2:	f803 2c2c 	strb.w	r2, [r3, #-44]
                                        wCollisionLogReg[bLevel] = 0U;
 800adb6:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800adba:	005b      	lsls	r3, r3, #1
 800adbc:	3358      	adds	r3, #88	@ 0x58
 800adbe:	443b      	add	r3, r7
 800adc0:	2200      	movs	r2, #0
 800adc2:	f823 2c4c 	strh.w	r2, [r3, #-76]
                                        if(bLevel == 0U)
 800adc6:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d103      	bne.n	800add6 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x486>
                                        {
                                            bEnd = 1;
 800adce:	2301      	movs	r3, #1
 800add0:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
                                    {
                                        bCount[bLevel] = bSlotCount;
                                        bCount[bLevel]++;
                                        bLevel++;
                                    }
                                    break;
 800add4:	e098      	b.n	800af08 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5b8>
                                            bCount[bLevel] = bSlotCount;
 800add6:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800adda:	3358      	adds	r3, #88	@ 0x58
 800addc:	443b      	add	r3, r7
 800adde:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 800ade2:	f803 2c2c 	strb.w	r2, [r3, #-44]
                                            bLevel++;
 800ade6:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800adea:	3301      	adds	r3, #1
 800adec:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
                                    break;
 800adf0:	e08a      	b.n	800af08 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5b8>
                                        bCount[bLevel] = bSlotCount;
 800adf2:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800adf6:	3358      	adds	r3, #88	@ 0x58
 800adf8:	443b      	add	r3, r7
 800adfa:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 800adfe:	f803 2c2c 	strb.w	r2, [r3, #-44]
                                        bCount[bLevel]++;
 800ae02:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800ae06:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 800ae0a:	443a      	add	r2, r7
 800ae0c:	f812 2c2c 	ldrb.w	r2, [r2, #-44]
 800ae10:	3201      	adds	r2, #1
 800ae12:	b2d2      	uxtb	r2, r2
 800ae14:	3358      	adds	r3, #88	@ 0x58
 800ae16:	443b      	add	r3, r7
 800ae18:	f803 2c2c 	strb.w	r2, [r3, #-44]
                                        bLevel++;
 800ae1c:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800ae20:	3301      	adds	r3, #1
 800ae22:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
                                    break;
 800ae26:	e06f      	b.n	800af08 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5b8>
                                }
                                else
                                {
                                    if(bSlotCount == 0x0FU)
 800ae28:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800ae2c:	2b0f      	cmp	r3, #15
 800ae2e:	d12e      	bne.n	800ae8e <phacDiscLoop_Sw_Int_CollisionResolutionV+0x53e>
                                    {
                                        if(bLevel == 0U)
 800ae30:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d10a      	bne.n	800ae4e <phacDiscLoop_Sw_Int_CollisionResolutionV+0x4fe>
                                        {
                                            bEnd = 1;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
                                            pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_V);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	7f9b      	ldrb	r3, [r3, #30]
 800ae42:	f023 0310 	bic.w	r3, r3, #16
 800ae46:	b2da      	uxtb	r2, r3
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	779a      	strb	r2, [r3, #30]
 800ae4c:	e01f      	b.n	800ae8e <phacDiscLoop_Sw_Int_CollisionResolutionV+0x53e>
                                        }
                                        else
                                        {
                                            /* Decrement the bit length by the 4 bits slot number */
                                            pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_V);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	7f9b      	ldrb	r3, [r3, #30]
 800ae52:	f023 0310 	bic.w	r3, r3, #16
 800ae56:	b2da      	uxtb	r2, r3
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	779a      	strb	r2, [r3, #30]
                                            bMaskBitLength = bMaskBitLength - 4u;
 800ae5c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800ae60:	3b04      	subs	r3, #4
 800ae62:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                                            wCollisionLogReg[bLevel] = 0;
 800ae66:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800ae6a:	005b      	lsls	r3, r3, #1
 800ae6c:	3358      	adds	r3, #88	@ 0x58
 800ae6e:	443b      	add	r3, r7
 800ae70:	2200      	movs	r2, #0
 800ae72:	f823 2c4c 	strh.w	r2, [r3, #-76]
                                            bCount[bLevel] = 0;
 800ae76:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800ae7a:	3358      	adds	r3, #88	@ 0x58
 800ae7c:	443b      	add	r3, r7
 800ae7e:	2200      	movs	r2, #0
 800ae80:	f803 2c2c 	strb.w	r2, [r3, #-44]
                                            bLevel--;
 800ae84:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800ae88:	3b01      	subs	r3, #1
 800ae8a:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
                            for (bSlotCount = bCount[bLevel]; bSlotCount < 16U; bSlotCount++)
 800ae8e:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800ae92:	3301      	adds	r3, #1
 800ae94:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 800ae98:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800ae9c:	2b0f      	cmp	r3, #15
 800ae9e:	f67f aeea 	bls.w	800ac76 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x326>
 800aea2:	e031      	b.n	800af08 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5b8>
                                }
                            }
                        }
                        else
                        {
                            if(bLevel == 0U)
 800aea4:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d10a      	bne.n	800aec2 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x572>
                            {
                                pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_V);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	7f9b      	ldrb	r3, [r3, #30]
 800aeb0:	f023 0310 	bic.w	r3, r3, #16
 800aeb4:	b2da      	uxtb	r2, r3
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	779a      	strb	r2, [r3, #30]
                                bEnd = 1;
 800aeba:	2301      	movs	r3, #1
 800aebc:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
 800aec0:	e022      	b.n	800af08 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5b8>
                            }
                            else
                            {
                                /* Decrement the bit length by the 4 bits slot number */
                                pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_V);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	7f9b      	ldrb	r3, [r3, #30]
 800aec6:	f023 0310 	bic.w	r3, r3, #16
 800aeca:	b2da      	uxtb	r2, r3
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	779a      	strb	r2, [r3, #30]
                                bMaskBitLength = bMaskBitLength - 4u;
 800aed0:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800aed4:	3b04      	subs	r3, #4
 800aed6:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                                wCollisionLogReg[bLevel] = 0;
 800aeda:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800aede:	005b      	lsls	r3, r3, #1
 800aee0:	3358      	adds	r3, #88	@ 0x58
 800aee2:	443b      	add	r3, r7
 800aee4:	2200      	movs	r2, #0
 800aee6:	f823 2c4c 	strh.w	r2, [r3, #-76]
                                bCount[bLevel] = 0;
 800aeea:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800aeee:	3358      	adds	r3, #88	@ 0x58
 800aef0:	443b      	add	r3, r7
 800aef2:	2200      	movs	r2, #0
 800aef4:	f803 2c2c 	strb.w	r2, [r3, #-44]
                                bLevel--;
 800aef8:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800aefc:	3b01      	subs	r3, #1
 800aefe:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
                                bRepeat = 1;
 800af02:	2301      	movs	r3, #1
 800af04:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                            }
                        }
                    }while(0U != bRepeat);
 800af08:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	f47f ae9c 	bne.w	800ac4a <phacDiscLoop_Sw_Int_CollisionResolutionV+0x2fa>

                    /* Symbol 17 */
                    if((0U == ((pDataParams->bCollPend & PHAC_DISCLOOP_POS_BIT_MASK_V))))
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	7f9b      	ldrb	r3, [r3, #30]
 800af16:	f003 0310 	and.w	r3, r3, #16
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d008      	beq.n	800af30 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5e0>
                while(pDataParams->sTypeVTargetInfo.bTotalTagsFound < pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V])
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f893 20b4 	ldrb.w	r2, [r3, #180]	@ 0xb4
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	7b9b      	ldrb	r3, [r3, #14]
 800af28:	429a      	cmp	r2, r3
 800af2a:	f4ff adb8 	bcc.w	800aa9e <phacDiscLoop_Sw_Int_CollisionResolutionV+0x14e>
 800af2e:	e000      	b.n	800af32 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5e2>
                    {
                        break;
 800af30:	bf00      	nop
                    }
                }
            }while(0U == bEnd);
 800af32:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800af36:	2b00      	cmp	r3, #0
 800af38:	d0f1      	beq.n	800af1e <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5ce>
        else if(((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800af3a:	e002      	b.n	800af42 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5f2>
        }
        else
        {
            /* For all other error types, return error */
            return status;
 800af3c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800af40:	e008      	b.n	800af54 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x604>
        }
    }

    if(0U != (pDataParams->sTypeVTargetInfo.bTotalTagsFound))
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d001      	beq.n	800af50 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x600>
    {
        return PH_ERR_SUCCESS;
 800af4c:	2300      	movs	r3, #0
 800af4e:	e001      	b.n	800af54 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x604>
    }

    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800af50:	f244 0385 	movw	r3, #16517	@ 0x4085
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */
}
 800af54:	4618      	mov	r0, r3
 800af56:	375c      	adds	r7, #92	@ 0x5c
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd90      	pop	{r4, r7, pc}

0800af5c <phacDiscLoop_Sw_Int_ActivateV>:

phStatus_t phacDiscLoop_Sw_Int_ActivateV(
        phacDiscLoop_Sw_DataParams_t * pDataParams,
        uint8_t bTypeVTagIdx
)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b084      	sub	sp, #16
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
 800af64:	460b      	mov	r3, r1
 800af66:	70fb      	strb	r3, [r7, #3]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    phStatus_t PH_MEMLOC_REM status = PH_ERR_INTERNAL_ERROR;
 800af68:	237f      	movs	r3, #127	@ 0x7f
 800af6a:	81fb      	strh	r3, [r7, #14]

    if ((bTypeVTagIdx >= pDataParams->sTypeVTargetInfo.bTotalTagsFound) || ( bTypeVTagIdx >= PHAC_DISCLOOP_CFG_MAX_VICINITY_CARDS_SUPPORTED ))
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800af72:	78fa      	ldrb	r2, [r7, #3]
 800af74:	429a      	cmp	r2, r3
 800af76:	d202      	bcs.n	800af7e <phacDiscLoop_Sw_Int_ActivateV+0x22>
 800af78:	78fb      	ldrb	r3, [r7, #3]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d002      	beq.n	800af84 <phacDiscLoop_Sw_Int_ActivateV+0x28>
    {
        /* Out of range */
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800af7e:	f244 0321 	movw	r3, #16417	@ 0x4021
 800af82:	e026      	b.n	800afd2 <phacDiscLoop_Sw_Int_ActivateV+0x76>
    }

    /* Set the UID to be selected and the UID length into PAL */
    PH_CHECK_SUCCESS_FCT(status, phpalSli15693_SetSerialNo(
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800af88:	78fa      	ldrb	r2, [r7, #3]
 800af8a:	4613      	mov	r3, r2
 800af8c:	00db      	lsls	r3, r3, #3
 800af8e:	4413      	add	r3, r2
 800af90:	33b0      	adds	r3, #176	@ 0xb0
 800af92:	687a      	ldr	r2, [r7, #4]
 800af94:	4413      	add	r3, r2
 800af96:	3308      	adds	r3, #8
 800af98:	2208      	movs	r2, #8
 800af9a:	4619      	mov	r1, r3
 800af9c:	f00a ff97 	bl	8015ece <phpalSli15693_Sw_SetSerialNo>
 800afa0:	4603      	mov	r3, r0
 800afa2:	81fb      	strh	r3, [r7, #14]
 800afa4:	89fb      	ldrh	r3, [r7, #14]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d001      	beq.n	800afae <phacDiscLoop_Sw_Int_ActivateV+0x52>
 800afaa:	89fb      	ldrh	r3, [r7, #14]
 800afac:	e011      	b.n	800afd2 <phacDiscLoop_Sw_Int_ActivateV+0x76>
            pDataParams->pPalSli15693DataParams,
            pDataParams->sTypeVTargetInfo.aTypeV[bTypeVTagIdx].aUid,
            PHPAL_SLI15693_UID_LENGTH));

    /* Skip Select command as per Activity specification v2.2, section 9.4.7.1 Symbol 0 */
    if (pDataParams->sTypeVTargetInfo.bMode == PHPAL_SLI15693_FLAG_SELECTED)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f893 30b6 	ldrb.w	r3, [r3, #182]	@ 0xb6
 800afb4:	2b10      	cmp	r3, #16
 800afb6:	d10b      	bne.n	800afd0 <phacDiscLoop_Sw_Int_ActivateV+0x74>
    {
        /* Move the tag to selected state */
        PH_CHECK_SUCCESS_FCT(status, phpalSli15693_Select(pDataParams->pPalSli15693DataParams));
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afbc:	4618      	mov	r0, r3
 800afbe:	f00a fe1e 	bl	8015bfe <phpalSli15693_Sw_Select>
 800afc2:	4603      	mov	r3, r0
 800afc4:	81fb      	strh	r3, [r7, #14]
 800afc6:	89fb      	ldrh	r3, [r7, #14]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d001      	beq.n	800afd0 <phacDiscLoop_Sw_Int_ActivateV+0x74>
 800afcc:	89fb      	ldrh	r3, [r7, #14]
 800afce:	e000      	b.n	800afd2 <phacDiscLoop_Sw_Int_ActivateV+0x76>
    }

    return PH_ERR_SUCCESS;
 800afd0:	2300      	movs	r3, #0
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3710      	adds	r7, #16
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}

0800afda <phalFelica_Sw_Init>:
phStatus_t phalFelica_Sw_Init(
                              phalFelica_Sw_DataParams_t * pDataParams,
                              uint16_t wSizeOfDataParams,
                              void * pPalFelica_DataParams
                              )
{
 800afda:	b480      	push	{r7}
 800afdc:	b085      	sub	sp, #20
 800afde:	af00      	add	r7, sp, #0
 800afe0:	60f8      	str	r0, [r7, #12]
 800afe2:	460b      	mov	r3, r1
 800afe4:	607a      	str	r2, [r7, #4]
 800afe6:	817b      	strh	r3, [r7, #10]
    /* parameter structure length check */
    if (sizeof(phalFelica_Sw_DataParams_t) != wSizeOfDataParams)
 800afe8:	897b      	ldrh	r3, [r7, #10]
 800afea:	2b0c      	cmp	r3, #12
 800afec:	d002      	beq.n	800aff4 <phalFelica_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_FELICA);
 800afee:	f44f 53a1 	mov.w	r3, #5152	@ 0x1420
 800aff2:	e014      	b.n	800b01e <phalFelica_Sw_Init+0x44>
    }
    PH_ASSERT_NULL (pDataParams);
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d101      	bne.n	800affe <phalFelica_Sw_Init+0x24>
 800affa:	2321      	movs	r3, #33	@ 0x21
 800affc:	e00f      	b.n	800b01e <phalFelica_Sw_Init+0x44>
    PH_ASSERT_NULL (pPalFelica_DataParams);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d101      	bne.n	800b008 <phalFelica_Sw_Init+0x2e>
 800b004:	2321      	movs	r3, #33	@ 0x21
 800b006:	e00a      	b.n	800b01e <phalFelica_Sw_Init+0x44>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_FELICA | PHAL_FELICA_SW_ID;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	f241 4201 	movw	r2, #5121	@ 0x1401
 800b00e:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalFelicaDataParams   = pPalFelica_DataParams;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	687a      	ldr	r2, [r7, #4]
 800b014:	605a      	str	r2, [r3, #4]
    pDataParams->wAdditionalInfo        = 0x0000;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	2200      	movs	r2, #0
 800b01a:	811a      	strh	r2, [r3, #8]

    return PH_ERR_SUCCESS;
 800b01c:	2300      	movs	r3, #0
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3714      	adds	r7, #20
 800b022:	46bd      	mov	sp, r7
 800b024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b028:	4770      	bx	lr

0800b02a <phalI18000p3m3_Sw_Init>:
phStatus_t phalI18000p3m3_Sw_Init(
                                  phalI18000p3m3_Sw_DataParams_t * pDataParams,
                                  uint16_t wSizeOfDataParams,
                                  void * pPalI18000p3m3DataParams
                                  )
{
 800b02a:	b480      	push	{r7}
 800b02c:	b085      	sub	sp, #20
 800b02e:	af00      	add	r7, sp, #0
 800b030:	60f8      	str	r0, [r7, #12]
 800b032:	460b      	mov	r3, r1
 800b034:	607a      	str	r2, [r7, #4]
 800b036:	817b      	strh	r3, [r7, #10]
    if (sizeof(phalI18000p3m3_Sw_DataParams_t) != wSizeOfDataParams)
 800b038:	897b      	ldrh	r3, [r7, #10]
 800b03a:	2b0c      	cmp	r3, #12
 800b03c:	d002      	beq.n	800b044 <phalI18000p3m3_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_I18000P3M3);
 800b03e:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
 800b042:	e01a      	b.n	800b07a <phalI18000p3m3_Sw_Init+0x50>
    }
    PH_ASSERT_NULL (pDataParams);
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d101      	bne.n	800b04e <phalI18000p3m3_Sw_Init+0x24>
 800b04a:	2321      	movs	r3, #33	@ 0x21
 800b04c:	e015      	b.n	800b07a <phalI18000p3m3_Sw_Init+0x50>
    PH_ASSERT_NULL (pPalI18000p3m3DataParams);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d101      	bne.n	800b058 <phalI18000p3m3_Sw_Init+0x2e>
 800b054:	2321      	movs	r3, #33	@ 0x21
 800b056:	e010      	b.n	800b07a <phalI18000p3m3_Sw_Init+0x50>

    pDataParams->wId                        = PH_COMP_AL_I18000P3M3 | PHAL_I18000P3M3_SW_ID;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	f641 0201 	movw	r2, #6145	@ 0x1801
 800b05e:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalI18000p3m3DataParams   = pPalI18000p3m3DataParams;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	687a      	ldr	r2, [r7, #4]
 800b064:	605a      	str	r2, [r3, #4]
    pDataParams->bHandleValid               = PH_OFF;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	2200      	movs	r2, #0
 800b06a:	729a      	strb	r2, [r3, #10]
    pDataParams->abHandle[0]                = PH_OFF;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	2200      	movs	r2, #0
 800b070:	721a      	strb	r2, [r3, #8]
    pDataParams->abHandle[1]                = PH_OFF;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	2200      	movs	r2, #0
 800b076:	725a      	strb	r2, [r3, #9]

    return PH_ERR_SUCCESS;
 800b078:	2300      	movs	r3, #0
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3714      	adds	r7, #20
 800b07e:	46bd      	mov	sp, r7
 800b080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b084:	4770      	bx	lr

0800b086 <phalI18000p3m3_Sw_SetHandle>:

phStatus_t phalI18000p3m3_Sw_SetHandle(
                                       phalI18000p3m3_Sw_DataParams_t * pDataParams,
                                       uint8_t* pHandle
                                       )
{
 800b086:	b480      	push	{r7}
 800b088:	b083      	sub	sp, #12
 800b08a:	af00      	add	r7, sp, #0
 800b08c:	6078      	str	r0, [r7, #4]
 800b08e:	6039      	str	r1, [r7, #0]
    (void)memcpy(pDataParams->abHandle, pHandle, 2);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	3308      	adds	r3, #8
 800b094:	683a      	ldr	r2, [r7, #0]
 800b096:	8812      	ldrh	r2, [r2, #0]
 800b098:	b292      	uxth	r2, r2
 800b09a:	801a      	strh	r2, [r3, #0]
    pDataParams->bHandleValid = PH_ON;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2201      	movs	r2, #1
 800b0a0:	729a      	strb	r2, [r3, #10]
    return PH_ERR_SUCCESS;
 800b0a2:	2300      	movs	r3, #0
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	370c      	adds	r7, #12
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ae:	4770      	bx	lr

0800b0b0 <phalICode_Sw_Init>:
 *          PH_ERR_SUCCESS for successfull operation.
 *          Other Depending on implementation and underlaying component.
 */
phStatus_t phalICode_Sw_Init(phalICode_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pPalSli15693DataParams, void * pCryptoDataParams,
        void * pCryptoRngDataParams, void * pKeyStoreDataParams)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b084      	sub	sp, #16
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	60f8      	str	r0, [r7, #12]
 800b0b8:	607a      	str	r2, [r7, #4]
 800b0ba:	603b      	str	r3, [r7, #0]
 800b0bc:	460b      	mov	r3, r1
 800b0be:	817b      	strh	r3, [r7, #10]
    /* Validate the parameters. */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_AL_ICODE);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d102      	bne.n	800b0cc <phalICode_Sw_Init+0x1c>
 800b0c6:	f44f 53a9 	mov.w	r3, #5408	@ 0x1520
 800b0ca:	e026      	b.n	800b11a <phalICode_Sw_Init+0x6a>
    PH_ASSERT_NULL_PARAM(pPalSli15693DataParams, PH_COMP_AL_ICODE);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d102      	bne.n	800b0d8 <phalICode_Sw_Init+0x28>
 800b0d2:	f241 5321 	movw	r3, #5409	@ 0x1521
 800b0d6:	e020      	b.n	800b11a <phalICode_Sw_Init+0x6a>

    /* Check the size. */
    if (sizeof(phalICode_Sw_DataParams_t) != wSizeOfDataParams)
 800b0d8:	897b      	ldrh	r3, [r7, #10]
 800b0da:	2b20      	cmp	r3, #32
 800b0dc:	d002      	beq.n	800b0e4 <phalICode_Sw_Init+0x34>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_ICODE);
 800b0de:	f44f 53a9 	mov.w	r3, #5408	@ 0x1520
 800b0e2:	e01a      	b.n	800b11a <phalICode_Sw_Init+0x6a>
    }

    /* Initialize the structure members. */
    pDataParams->wId                    = PH_COMP_AL_ICODE | PHAL_ICODE_SW_ID;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	f241 5201 	movw	r2, #5377	@ 0x1501
 800b0ea:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalSli15693DataParams = pPalSli15693DataParams;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	687a      	ldr	r2, [r7, #4]
 800b0f0:	605a      	str	r2, [r3, #4]
    pDataParams->pCryptoDataParams      = pCryptoDataParams;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	683a      	ldr	r2, [r7, #0]
 800b0f6:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoRngDataParams   = pCryptoRngDataParams;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	69ba      	ldr	r2, [r7, #24]
 800b0fc:	60da      	str	r2, [r3, #12]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	69fa      	ldr	r2, [r7, #28]
 800b102:	611a      	str	r2, [r3, #16]
    pDataParams->bBuffering             = PH_ON;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	2201      	movs	r2, #1
 800b108:	779a      	strb	r2, [r3, #30]

    /* Reset the random number buffer. */
    (void)memset(pDataParams->aRnd_Challenge, 0x00, PHAL_ICODE_RANDOM_NUMBER_SIZE);
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	3314      	adds	r3, #20
 800b10e:	220a      	movs	r2, #10
 800b110:	2100      	movs	r1, #0
 800b112:	4618      	mov	r0, r3
 800b114:	f011 fff4 	bl	801d100 <memset>

    return PH_ERR_SUCCESS;
 800b118:	2300      	movs	r3, #0
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3710      	adds	r7, #16
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}

0800b122 <phalICode_Sw_ReadSingleBlock>:
 *          PH_ERR_SUCCESS for successfull operation.
 *          Other Depending on implementation and underlaying component.
 */
phStatus_t phalICode_Sw_ReadSingleBlock(phalICode_Sw_DataParams_t * pDataParams, uint8_t bOption, uint8_t bBlockNo, uint8_t ** ppData,
        uint16_t * pDataLen)
{
 800b122:	b580      	push	{r7, lr}
 800b124:	b088      	sub	sp, #32
 800b126:	af02      	add	r7, sp, #8
 800b128:	60f8      	str	r0, [r7, #12]
 800b12a:	607b      	str	r3, [r7, #4]
 800b12c:	460b      	mov	r3, r1
 800b12e:	72fb      	strb	r3, [r7, #11]
 800b130:	4613      	mov	r3, r2
 800b132:	72bb      	strb	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM wStatus = 0;
 800b134:	2300      	movs	r3, #0
 800b136:	82fb      	strh	r3, [r7, #22]
    uint16_t    PH_MEMLOC_REM wRetries = 0;
 800b138:	2300      	movs	r3, #0
 800b13a:	82bb      	strh	r3, [r7, #20]

    /* Retrieve max retry count */
    PH_CHECK_SUCCESS_FCT(wStatus, phpalSli15693_GetConfig(
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	f107 0214 	add.w	r2, r7, #20
 800b144:	2108      	movs	r1, #8
 800b146:	4618      	mov	r0, r3
 800b148:	f00b f8b4 	bl	80162b4 <phpalSli15693_Sw_GetConfig>
 800b14c:	4603      	mov	r3, r0
 800b14e:	82fb      	strh	r3, [r7, #22]
 800b150:	8afb      	ldrh	r3, [r7, #22]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d001      	beq.n	800b15a <phalICode_Sw_ReadSingleBlock+0x38>
 800b156:	8afb      	ldrh	r3, [r7, #22]
 800b158:	e01f      	b.n	800b19a <phalICode_Sw_ReadSingleBlock+0x78>
            pDataParams->pPalSli15693DataParams,
            PHPAL_SLI15693_CONFIG_MAXRETRYCOUNT,
            &wRetries));

    if(wRetries < 0xFF)
 800b15a:	8abb      	ldrh	r3, [r7, #20]
 800b15c:	2bfe      	cmp	r3, #254	@ 0xfe
 800b15e:	d803      	bhi.n	800b168 <phalICode_Sw_ReadSingleBlock+0x46>
    {
        wRetries = wRetries + (uint8_t)1U;
 800b160:	8abb      	ldrh	r3, [r7, #20]
 800b162:	3301      	adds	r3, #1
 800b164:	b29b      	uxth	r3, r3
 800b166:	82bb      	strh	r3, [r7, #20]
    }

    do
    {
        wStatus = phalICode_Int_ReadSingleBlock(
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	6858      	ldr	r0, [r3, #4]
 800b16c:	7aba      	ldrb	r2, [r7, #10]
 800b16e:	7af9      	ldrb	r1, [r7, #11]
 800b170:	6a3b      	ldr	r3, [r7, #32]
 800b172:	9300      	str	r3, [sp, #0]
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f000 f9f3 	bl	800b560 <phalICode_Int_ReadSingleBlock>
 800b17a:	4603      	mov	r3, r0
 800b17c:	82fb      	strh	r3, [r7, #22]
                bOption,
                bBlockNo,
                ppData,
                pDataLen);

        if(wRetries != 0)
 800b17e:	8abb      	ldrh	r3, [r7, #20]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d003      	beq.n	800b18c <phalICode_Sw_ReadSingleBlock+0x6a>
        {
            wRetries = wRetries - (uint8_t)1U;
 800b184:	8abb      	ldrh	r3, [r7, #20]
 800b186:	3b01      	subs	r3, #1
 800b188:	b29b      	uxth	r3, r3
 800b18a:	82bb      	strh	r3, [r7, #20]
        }

    }while((wStatus != PH_ERR_SUCCESS) && (wRetries != 0U));
 800b18c:	8afb      	ldrh	r3, [r7, #22]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d002      	beq.n	800b198 <phalICode_Sw_ReadSingleBlock+0x76>
 800b192:	8abb      	ldrh	r3, [r7, #20]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d1e7      	bne.n	800b168 <phalICode_Sw_ReadSingleBlock+0x46>

    return wStatus;
 800b198:	8afb      	ldrh	r3, [r7, #22]
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3718      	adds	r7, #24
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}

0800b1a2 <phalICode_Sw_WriteSingleBlock>:
 *          PH_ERR_SUCCESS for successfull operation.
 *          Other Depending on implementation and underlaying component.
 */
phStatus_t phalICode_Sw_WriteSingleBlock(phalICode_Sw_DataParams_t * pDataParams, uint8_t bOption, uint8_t bBlockNo, uint8_t * pData,
        uint8_t bDataLen)
{
 800b1a2:	b580      	push	{r7, lr}
 800b1a4:	b088      	sub	sp, #32
 800b1a6:	af02      	add	r7, sp, #8
 800b1a8:	60f8      	str	r0, [r7, #12]
 800b1aa:	607b      	str	r3, [r7, #4]
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	72fb      	strb	r3, [r7, #11]
 800b1b0:	4613      	mov	r3, r2
 800b1b2:	72bb      	strb	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM wStatus = 0;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	82fb      	strh	r3, [r7, #22]
    uint16_t    PH_MEMLOC_REM wRetries = 0;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	82bb      	strh	r3, [r7, #20]

    /* Retrieve max retry count */
    PH_CHECK_SUCCESS_FCT(wStatus, phpalSli15693_GetConfig(
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	685b      	ldr	r3, [r3, #4]
 800b1c0:	f107 0214 	add.w	r2, r7, #20
 800b1c4:	2108      	movs	r1, #8
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f00b f874 	bl	80162b4 <phpalSli15693_Sw_GetConfig>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	82fb      	strh	r3, [r7, #22]
 800b1d0:	8afb      	ldrh	r3, [r7, #22]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d001      	beq.n	800b1da <phalICode_Sw_WriteSingleBlock+0x38>
 800b1d6:	8afb      	ldrh	r3, [r7, #22]
 800b1d8:	e020      	b.n	800b21c <phalICode_Sw_WriteSingleBlock+0x7a>
            pDataParams->pPalSli15693DataParams,
            PHPAL_SLI15693_CONFIG_MAXRETRYCOUNT,
            &wRetries));

    if(wRetries < 0xFF)
 800b1da:	8abb      	ldrh	r3, [r7, #20]
 800b1dc:	2bfe      	cmp	r3, #254	@ 0xfe
 800b1de:	d803      	bhi.n	800b1e8 <phalICode_Sw_WriteSingleBlock+0x46>
    {
        wRetries = wRetries + (uint8_t)1U;
 800b1e0:	8abb      	ldrh	r3, [r7, #20]
 800b1e2:	3301      	adds	r3, #1
 800b1e4:	b29b      	uxth	r3, r3
 800b1e6:	82bb      	strh	r3, [r7, #20]
    }

    do
    {
        wStatus = phalICode_Int_WriteSingleBlock(
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	6858      	ldr	r0, [r3, #4]
 800b1ec:	7aba      	ldrb	r2, [r7, #10]
 800b1ee:	7af9      	ldrb	r1, [r7, #11]
 800b1f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b1f4:	9300      	str	r3, [sp, #0]
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f000 fa19 	bl	800b62e <phalICode_Int_WriteSingleBlock>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	82fb      	strh	r3, [r7, #22]
                bOption,
                bBlockNo,
                pData,
                bDataLen);

        if(wRetries != 0)
 800b200:	8abb      	ldrh	r3, [r7, #20]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d003      	beq.n	800b20e <phalICode_Sw_WriteSingleBlock+0x6c>
        {
            wRetries = wRetries - (uint8_t)1U;
 800b206:	8abb      	ldrh	r3, [r7, #20]
 800b208:	3b01      	subs	r3, #1
 800b20a:	b29b      	uxth	r3, r3
 800b20c:	82bb      	strh	r3, [r7, #20]
        }

    }while((wStatus != PH_ERR_SUCCESS) && (wRetries != 0U));
 800b20e:	8afb      	ldrh	r3, [r7, #22]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d002      	beq.n	800b21a <phalICode_Sw_WriteSingleBlock+0x78>
 800b214:	8abb      	ldrh	r3, [r7, #20]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d1e6      	bne.n	800b1e8 <phalICode_Sw_WriteSingleBlock+0x46>

    return wStatus;
 800b21a:	8afb      	ldrh	r3, [r7, #22]
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3718      	adds	r7, #24
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}

0800b224 <phalICode_Int_SetOptionBit>:
 * Return:
 *          PH_ERR_SUCCESS for successfull operation.
 *          Other Depending on implementation and underlaying component.
 */
phStatus_t phalICode_Int_SetOptionBit(void * pPalSli15693DataParams, uint8_t bOption, uint8_t bUpdateTiming)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b084      	sub	sp, #16
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
 800b22c:	460b      	mov	r3, r1
 800b22e:	70fb      	strb	r3, [r7, #3]
 800b230:	4613      	mov	r3, r2
 800b232:	70bb      	strb	r3, [r7, #2]
    phStatus_t  PH_MEMLOC_REM wStatus  = 0;
 800b234:	2300      	movs	r3, #0
 800b236:	81bb      	strh	r3, [r7, #12]
    uint16_t    PH_MEMLOC_REM wCurFlag = 0;
 800b238:	2300      	movs	r3, #0
 800b23a:	817b      	strh	r3, [r7, #10]
    uint16_t    PH_MEMLOC_REM wNewFlag = 0;
 800b23c:	2300      	movs	r3, #0
 800b23e:	81fb      	strh	r3, [r7, #14]

    /* Check if the Option Byte has a valid value. */
    if (bOption > PHAL_ICODE_OPTION_ON)
 800b240:	78fb      	ldrb	r3, [r7, #3]
 800b242:	2b01      	cmp	r3, #1
 800b244:	d902      	bls.n	800b24c <phalICode_Int_SetOptionBit+0x28>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AL_ICODE);
 800b246:	f241 5321 	movw	r3, #5409	@ 0x1521
 800b24a:	e04b      	b.n	800b2e4 <phalICode_Int_SetOptionBit+0xc0>
    }

    /* Retrieve the flags byte */
    PH_CHECK_SUCCESS_FCT(wStatus, phpalSli15693_GetConfig(
 800b24c:	f107 030a 	add.w	r3, r7, #10
 800b250:	461a      	mov	r2, r3
 800b252:	2100      	movs	r1, #0
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f00b f82d 	bl	80162b4 <phpalSli15693_Sw_GetConfig>
 800b25a:	4603      	mov	r3, r0
 800b25c:	81bb      	strh	r3, [r7, #12]
 800b25e:	89bb      	ldrh	r3, [r7, #12]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d001      	beq.n	800b268 <phalICode_Int_SetOptionBit+0x44>
 800b264:	89bb      	ldrh	r3, [r7, #12]
 800b266:	e03d      	b.n	800b2e4 <phalICode_Int_SetOptionBit+0xc0>
            pPalSli15693DataParams,
            PHPAL_SLI15693_CONFIG_FLAGS,
            &wCurFlag));

    /* Update Option bit with provided information. */
    if (bOption != PHAL_ICODE_OPTION_OFF)
 800b268:	78fb      	ldrb	r3, [r7, #3]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d004      	beq.n	800b278 <phalICode_Int_SetOptionBit+0x54>
    {
        wNewFlag = wCurFlag | PHPAL_SLI15693_FLAG_OPTION;
 800b26e:	897b      	ldrh	r3, [r7, #10]
 800b270:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b274:	81fb      	strh	r3, [r7, #14]
 800b276:	e003      	b.n	800b280 <phalICode_Int_SetOptionBit+0x5c>
    }
    /* Clear option bit */
    else
    {
        wNewFlag = wCurFlag & (uint8_t)(~(uint8_t)PHPAL_SLI15693_FLAG_OPTION & 0xFF);
 800b278:	897b      	ldrh	r3, [r7, #10]
 800b27a:	f003 03bf 	and.w	r3, r3, #191	@ 0xbf
 800b27e:	81fb      	strh	r3, [r7, #14]
    }

    /* Update the Option bit in the Flag's byte. */
    if (wNewFlag != wCurFlag)
 800b280:	897b      	ldrh	r3, [r7, #10]
 800b282:	89fa      	ldrh	r2, [r7, #14]
 800b284:	429a      	cmp	r2, r3
 800b286:	d00c      	beq.n	800b2a2 <phalICode_Int_SetOptionBit+0x7e>
    {
        PH_CHECK_SUCCESS_FCT(wStatus, phpalSli15693_SetConfig(
 800b288:	89fb      	ldrh	r3, [r7, #14]
 800b28a:	461a      	mov	r2, r3
 800b28c:	2100      	movs	r1, #0
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f00a fe3a 	bl	8015f08 <phpalSli15693_Sw_SetConfig>
 800b294:	4603      	mov	r3, r0
 800b296:	81bb      	strh	r3, [r7, #12]
 800b298:	89bb      	ldrh	r3, [r7, #12]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d001      	beq.n	800b2a2 <phalICode_Int_SetOptionBit+0x7e>
 800b29e:	89bb      	ldrh	r3, [r7, #12]
 800b2a0:	e020      	b.n	800b2e4 <phalICode_Int_SetOptionBit+0xc0>
                pPalSli15693DataParams,
                PHPAL_SLI15693_CONFIG_FLAGS,
                wNewFlag));
    }

    if(bUpdateTiming == PH_ON)
 800b2a2:	78bb      	ldrb	r3, [r7, #2]
 800b2a4:	2b01      	cmp	r3, #1
 800b2a6:	d11c      	bne.n	800b2e2 <phalICode_Int_SetOptionBit+0xbe>
    {
        /* Set special frame EOF timeout. */
        if(bOption != PHAL_ICODE_OPTION_OFF)
 800b2a8:	78fb      	ldrb	r3, [r7, #3]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d00c      	beq.n	800b2c8 <phalICode_Int_SetOptionBit+0xa4>
        {
            PH_CHECK_SUCCESS_FCT(wStatus, phpalSli15693_SetConfig(
 800b2ae:	f244 12d2 	movw	r2, #16850	@ 0x41d2
 800b2b2:	2102      	movs	r1, #2
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f00a fe27 	bl	8015f08 <phpalSli15693_Sw_SetConfig>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	81bb      	strh	r3, [r7, #12]
 800b2be:	89bb      	ldrh	r3, [r7, #12]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d00e      	beq.n	800b2e2 <phalICode_Int_SetOptionBit+0xbe>
 800b2c4:	89bb      	ldrh	r3, [r7, #12]
 800b2c6:	e00d      	b.n	800b2e4 <phalICode_Int_SetOptionBit+0xc0>
        }

        /* Set long timeout. */
        else
        {
            PH_CHECK_SUCCESS_FCT(wStatus, phpalSli15693_SetConfig(
 800b2c8:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800b2cc:	2102      	movs	r1, #2
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f00a fe1a 	bl	8015f08 <phpalSli15693_Sw_SetConfig>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	81bb      	strh	r3, [r7, #12]
 800b2d8:	89bb      	ldrh	r3, [r7, #12]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d001      	beq.n	800b2e2 <phalICode_Int_SetOptionBit+0xbe>
 800b2de:	89bb      	ldrh	r3, [r7, #12]
 800b2e0:	e000      	b.n	800b2e4 <phalICode_Int_SetOptionBit+0xc0>
                PHPAL_SLI15693_CONFIG_TIMEOUT_US,
                PHPAL_SLI15693_TIMEOUT_LONG_US));
        }
    }

    return PH_ERR_SUCCESS;
 800b2e2:	2300      	movs	r3, #0
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3710      	adds	r7, #16
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}

0800b2ec <phalICode_Int_WriteAlikeHandling>:
 * Return:
 *          PH_ERR_SUCCESS for successfull operation.
 *          Other Depending on implementation and underlaying component.
 */
phStatus_t phalICode_Int_WriteAlikeHandling(void * pPalSli15693DataParams, phStatus_t wExchangeStatus)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b08c      	sub	sp, #48	@ 0x30
 800b2f0:	af04      	add	r7, sp, #16
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	460b      	mov	r3, r1
 800b2f6:	807b      	strh	r3, [r7, #2]
    uint8_t     PH_MEMLOC_REM bDsfid = 0;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	77fb      	strb	r3, [r7, #31]
    uint8_t     PH_MEMLOC_REM bUid[PHPAL_SLI15693_UID_LENGTH];
    uint8_t     PH_MEMLOC_REM bUidLen = 0;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	74fb      	strb	r3, [r7, #19]
    uint8_t     PH_MEMLOC_REM aData[1];
    uint16_t    PH_MEMLOC_REM wDataLen = 0;
 800b300:	2300      	movs	r3, #0
 800b302:	81fb      	strh	r3, [r7, #14]

    switch (wExchangeStatus & PH_ERR_MASK)
 800b304:	887b      	ldrh	r3, [r7, #2]
 800b306:	b2db      	uxtb	r3, r3
 800b308:	2b05      	cmp	r3, #5
 800b30a:	d83a      	bhi.n	800b382 <phalICode_Int_WriteAlikeHandling+0x96>
 800b30c:	a201      	add	r2, pc, #4	@ (adr r2, 800b314 <phalICode_Int_WriteAlikeHandling+0x28>)
 800b30e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b312:	bf00      	nop
 800b314:	0800b32d 	.word	0x0800b32d
 800b318:	0800b333 	.word	0x0800b333
 800b31c:	0800b35b 	.word	0x0800b35b
 800b320:	0800b35b 	.word	0x0800b35b
 800b324:	0800b383 	.word	0x0800b383
 800b328:	0800b35b 	.word	0x0800b35b
    {
    /* Check for protocol error.  */
    case PH_ERR_SUCCESS:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_AL_ICODE);
 800b32c:	f241 5306 	movw	r3, #5382	@ 0x1506
 800b330:	e028      	b.n	800b384 <phalICode_Int_WriteAlikeHandling+0x98>

        /* Timeout is correct behaviour, send EOF. */
    case PH_ERR_IO_TIMEOUT:
        /* card answers after next EOF -> correct status is timeout */
        return phpalSli15693_SendEof(
 800b332:	f107 0114 	add.w	r1, r7, #20
 800b336:	f107 021f 	add.w	r2, r7, #31
 800b33a:	f107 030e 	add.w	r3, r7, #14
 800b33e:	9302      	str	r3, [sp, #8]
 800b340:	f107 0310 	add.w	r3, r7, #16
 800b344:	9301      	str	r3, [sp, #4]
 800b346:	f107 0313 	add.w	r3, r7, #19
 800b34a:	9300      	str	r3, [sp, #0]
 800b34c:	460b      	mov	r3, r1
 800b34e:	2102      	movs	r1, #2
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f00a fa7c 	bl	801584e <phpalSli15693_Sw_SendEof>
 800b356:	4603      	mov	r3, r0
 800b358:	e014      	b.n	800b384 <phalICode_Int_WriteAlikeHandling+0x98>

        /* Framing errors etc. are ignored and the waiting until EOF sending is continued. */
    case PH_ERR_INTEGRITY_ERROR:
    case PH_ERR_COLLISION_ERROR:
    case PH_ERR_FRAMING_ERROR:
        return phpalSli15693_SendEof(
 800b35a:	f107 0114 	add.w	r1, r7, #20
 800b35e:	f107 021f 	add.w	r2, r7, #31
 800b362:	f107 030e 	add.w	r3, r7, #14
 800b366:	9302      	str	r3, [sp, #8]
 800b368:	f107 0310 	add.w	r3, r7, #16
 800b36c:	9301      	str	r3, [sp, #4]
 800b36e:	f107 0313 	add.w	r3, r7, #19
 800b372:	9300      	str	r3, [sp, #0]
 800b374:	460b      	mov	r3, r1
 800b376:	2103      	movs	r1, #3
 800b378:	6878      	ldr	r0, [r7, #4]
 800b37a:	f00a fa68 	bl	801584e <phpalSli15693_Sw_SendEof>
 800b37e:	4603      	mov	r3, r0
 800b380:	e000      	b.n	800b384 <phalICode_Int_WriteAlikeHandling+0x98>
                aData,
                &wDataLen);

        /* Directly return all other errors */
    default:
        return wExchangeStatus;
 800b382:	887b      	ldrh	r3, [r7, #2]
    }
}
 800b384:	4618      	mov	r0, r3
 800b386:	3720      	adds	r7, #32
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}

0800b38c <phalICode_Int_ComputeErrorCode>:
 * Return:
 *          PH_ERR_SUCCESS for successfull operation.
 *          Other Depending on implementation and underlaying component.
 */
phStatus_t phalICode_Int_ComputeErrorCode(void * pPalSli15693DataParams, phStatus_t wStatus)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b084      	sub	sp, #16
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	460b      	mov	r3, r1
 800b396:	807b      	strh	r3, [r7, #2]
    phStatus_t  PH_MEMLOC_REM wStatusTmp = 0;
 800b398:	2300      	movs	r3, #0
 800b39a:	81fb      	strh	r3, [r7, #14]
    uint16_t    PH_MEMLOC_REM wValue = 0;
 800b39c:	2300      	movs	r3, #0
 800b39e:	81bb      	strh	r3, [r7, #12]

    /* Update the temporary status variable. */
    wStatusTmp = wStatus;
 800b3a0:	887b      	ldrh	r3, [r7, #2]
 800b3a2:	81fb      	strh	r3, [r7, #14]

    /*  Compute the custom error codes in case PAL returns an error. */
    if((wStatus & PH_ERR_MASK) == PHPAL_SLI15693_ERR_ISO15693)
 800b3a4:	887b      	ldrh	r3, [r7, #2]
 800b3a6:	b2db      	uxtb	r3, r3
 800b3a8:	2b80      	cmp	r3, #128	@ 0x80
 800b3aa:	f040 80d4 	bne.w	800b556 <phalICode_Int_ComputeErrorCode+0x1ca>
    {
        /* Get the error code from additional info. */
        PH_CHECK_SUCCESS_FCT(wStatusTmp, phpalSli15693_GetConfig(
 800b3ae:	f107 030c 	add.w	r3, r7, #12
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	2101      	movs	r1, #1
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f00a ff7c 	bl	80162b4 <phpalSli15693_Sw_GetConfig>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	81fb      	strh	r3, [r7, #14]
 800b3c0:	89fb      	ldrh	r3, [r7, #14]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d001      	beq.n	800b3ca <phalICode_Int_ComputeErrorCode+0x3e>
 800b3c6:	89fb      	ldrh	r3, [r7, #14]
 800b3c8:	e0c6      	b.n	800b558 <phalICode_Int_ComputeErrorCode+0x1cc>
                pPalSli15693DataParams,
                PHPAL_SLI15693_CONFIG_ADD_INFO,
                &wValue));

        /* Compute the custom code. */
        if((wValue >= 0xA0U) && (wValue <= 0xDFU))
 800b3ca:	89bb      	ldrh	r3, [r7, #12]
 800b3cc:	2b9f      	cmp	r3, #159	@ 0x9f
 800b3ce:	d905      	bls.n	800b3dc <phalICode_Int_ComputeErrorCode+0x50>
 800b3d0:	89bb      	ldrh	r3, [r7, #12]
 800b3d2:	2bdf      	cmp	r3, #223	@ 0xdf
 800b3d4:	d802      	bhi.n	800b3dc <phalICode_Int_ComputeErrorCode+0x50>
        {
            /* Error mapping for error codes returned by Custom commands. */
            wStatusTmp = PHAL_ICODE_ERR_CUSTOM_COMMANDS_ERROR;
 800b3d6:	2380      	movs	r3, #128	@ 0x80
 800b3d8:	81fb      	strh	r3, [r7, #14]
 800b3da:	e0ab      	b.n	800b534 <phalICode_Int_ComputeErrorCode+0x1a8>
        }
        else
        {
            switch(wValue)
 800b3dc:	89bb      	ldrh	r3, [r7, #12]
 800b3de:	3b01      	subs	r3, #1
 800b3e0:	2b3f      	cmp	r3, #63	@ 0x3f
 800b3e2:	f200 80a4 	bhi.w	800b52e <phalICode_Int_ComputeErrorCode+0x1a2>
 800b3e6:	a201      	add	r2, pc, #4	@ (adr r2, 800b3ec <phalICode_Int_ComputeErrorCode+0x60>)
 800b3e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ec:	0800b4ed 	.word	0x0800b4ed
 800b3f0:	0800b4f3 	.word	0x0800b4f3
 800b3f4:	0800b4f9 	.word	0x0800b4f9
 800b3f8:	0800b52f 	.word	0x0800b52f
 800b3fc:	0800b52f 	.word	0x0800b52f
 800b400:	0800b52f 	.word	0x0800b52f
 800b404:	0800b52f 	.word	0x0800b52f
 800b408:	0800b52f 	.word	0x0800b52f
 800b40c:	0800b52f 	.word	0x0800b52f
 800b410:	0800b52f 	.word	0x0800b52f
 800b414:	0800b52f 	.word	0x0800b52f
 800b418:	0800b52f 	.word	0x0800b52f
 800b41c:	0800b52f 	.word	0x0800b52f
 800b420:	0800b52f 	.word	0x0800b52f
 800b424:	0800b4ff 	.word	0x0800b4ff
 800b428:	0800b505 	.word	0x0800b505
 800b42c:	0800b50b 	.word	0x0800b50b
 800b430:	0800b511 	.word	0x0800b511
 800b434:	0800b517 	.word	0x0800b517
 800b438:	0800b51d 	.word	0x0800b51d
 800b43c:	0800b523 	.word	0x0800b523
 800b440:	0800b52f 	.word	0x0800b52f
 800b444:	0800b52f 	.word	0x0800b52f
 800b448:	0800b52f 	.word	0x0800b52f
 800b44c:	0800b52f 	.word	0x0800b52f
 800b450:	0800b52f 	.word	0x0800b52f
 800b454:	0800b52f 	.word	0x0800b52f
 800b458:	0800b52f 	.word	0x0800b52f
 800b45c:	0800b52f 	.word	0x0800b52f
 800b460:	0800b52f 	.word	0x0800b52f
 800b464:	0800b52f 	.word	0x0800b52f
 800b468:	0800b52f 	.word	0x0800b52f
 800b46c:	0800b52f 	.word	0x0800b52f
 800b470:	0800b52f 	.word	0x0800b52f
 800b474:	0800b52f 	.word	0x0800b52f
 800b478:	0800b52f 	.word	0x0800b52f
 800b47c:	0800b52f 	.word	0x0800b52f
 800b480:	0800b52f 	.word	0x0800b52f
 800b484:	0800b52f 	.word	0x0800b52f
 800b488:	0800b52f 	.word	0x0800b52f
 800b48c:	0800b52f 	.word	0x0800b52f
 800b490:	0800b52f 	.word	0x0800b52f
 800b494:	0800b52f 	.word	0x0800b52f
 800b498:	0800b52f 	.word	0x0800b52f
 800b49c:	0800b52f 	.word	0x0800b52f
 800b4a0:	0800b52f 	.word	0x0800b52f
 800b4a4:	0800b52f 	.word	0x0800b52f
 800b4a8:	0800b52f 	.word	0x0800b52f
 800b4ac:	0800b52f 	.word	0x0800b52f
 800b4b0:	0800b52f 	.word	0x0800b52f
 800b4b4:	0800b52f 	.word	0x0800b52f
 800b4b8:	0800b52f 	.word	0x0800b52f
 800b4bc:	0800b52f 	.word	0x0800b52f
 800b4c0:	0800b52f 	.word	0x0800b52f
 800b4c4:	0800b52f 	.word	0x0800b52f
 800b4c8:	0800b52f 	.word	0x0800b52f
 800b4cc:	0800b52f 	.word	0x0800b52f
 800b4d0:	0800b52f 	.word	0x0800b52f
 800b4d4:	0800b52f 	.word	0x0800b52f
 800b4d8:	0800b52f 	.word	0x0800b52f
 800b4dc:	0800b52f 	.word	0x0800b52f
 800b4e0:	0800b52f 	.word	0x0800b52f
 800b4e4:	0800b52f 	.word	0x0800b52f
 800b4e8:	0800b529 	.word	0x0800b529
            {
            case PHAL_ICODE_RESP_ERR_COMMAND_NOT_SUPPORTED          : wStatusTmp = PHAL_ICODE_ERR_COMMAND_NOT_SUPPORTED;        break;
 800b4ec:	2381      	movs	r3, #129	@ 0x81
 800b4ee:	81fb      	strh	r3, [r7, #14]
 800b4f0:	e020      	b.n	800b534 <phalICode_Int_ComputeErrorCode+0x1a8>
            case PHAL_ICODE_RESP_ERR_COMMAND_NOT_RECOGNIZED         : wStatusTmp = PHAL_ICODE_ERR_COMMAND_NOT_RECOGNIZED;       break;
 800b4f2:	2382      	movs	r3, #130	@ 0x82
 800b4f4:	81fb      	strh	r3, [r7, #14]
 800b4f6:	e01d      	b.n	800b534 <phalICode_Int_ComputeErrorCode+0x1a8>
            case PHAL_ICODE_RESP_ERR_COMMAND_OPTION_NOT_SUPPORTED   : wStatusTmp = PHAL_ICODE_ERR_COMMAND_OPTION_NOT_SUPPORTED; break;
 800b4f8:	2383      	movs	r3, #131	@ 0x83
 800b4fa:	81fb      	strh	r3, [r7, #14]
 800b4fc:	e01a      	b.n	800b534 <phalICode_Int_ComputeErrorCode+0x1a8>
            case PHAL_ICODE_RESP_ERR_NO_INFORMATION                 : wStatusTmp = PHAL_ICODE_ERR_NO_INFORMATION;               break;
 800b4fe:	2384      	movs	r3, #132	@ 0x84
 800b500:	81fb      	strh	r3, [r7, #14]
 800b502:	e017      	b.n	800b534 <phalICode_Int_ComputeErrorCode+0x1a8>
            case PHAL_ICODE_RESP_ERR_BLOCK_NOT_AVAILABLE            : wStatusTmp = PHAL_ICODE_ERR_BLOCK_NOT_AVAILABLE;          break;
 800b504:	2385      	movs	r3, #133	@ 0x85
 800b506:	81fb      	strh	r3, [r7, #14]
 800b508:	e014      	b.n	800b534 <phalICode_Int_ComputeErrorCode+0x1a8>
            case PHAL_ICODE_RESP_ERR_BLOCK_LOCKED                   : wStatusTmp = PHAL_ICODE_ERR_BLOCK_LOCKED;                 break;
 800b50a:	2386      	movs	r3, #134	@ 0x86
 800b50c:	81fb      	strh	r3, [r7, #14]
 800b50e:	e011      	b.n	800b534 <phalICode_Int_ComputeErrorCode+0x1a8>
            case PHAL_ICODE_RESP_ERR_CONTENT_CHANGE_FAILURE         : wStatusTmp = PHAL_ICODE_ERR_CONTENT_CHANGE_FAILURE;       break;
 800b510:	2387      	movs	r3, #135	@ 0x87
 800b512:	81fb      	strh	r3, [r7, #14]
 800b514:	e00e      	b.n	800b534 <phalICode_Int_ComputeErrorCode+0x1a8>
            case PHAL_ICODE_RESP_ERR_BLOCK_PROGRAMMING_FAILURE      : wStatusTmp = PHAL_ICODE_ERR_BLOCK_PROGRAMMING_FAILURE;    break;
 800b516:	2388      	movs	r3, #136	@ 0x88
 800b518:	81fb      	strh	r3, [r7, #14]
 800b51a:	e00b      	b.n	800b534 <phalICode_Int_ComputeErrorCode+0x1a8>
            case PHAL_ICODE_RESP_ERR_BLOCK_NOT_LOCKED               : wStatusTmp = PHAL_ICODE_ERR_BLOCK_NOT_LOCKED;             break;
 800b51c:	2389      	movs	r3, #137	@ 0x89
 800b51e:	81fb      	strh	r3, [r7, #14]
 800b520:	e008      	b.n	800b534 <phalICode_Int_ComputeErrorCode+0x1a8>
            case PHAL_ICODE_RESP_ERR_BLOCK_PROTECTED                : wStatusTmp = PHAL_ICODE_ERR_BLOCK_PROTECTED;              break;
 800b522:	238a      	movs	r3, #138	@ 0x8a
 800b524:	81fb      	strh	r3, [r7, #14]
 800b526:	e005      	b.n	800b534 <phalICode_Int_ComputeErrorCode+0x1a8>
            case PHAL_ICODE_RESP_ERR_GENERIC_CRYPTO_ERROR           : wStatusTmp = PHAL_ICODE_ERR_GENERIC_CRYPTO_ERROR;         break;
 800b528:	238b      	movs	r3, #139	@ 0x8b
 800b52a:	81fb      	strh	r3, [r7, #14]
 800b52c:	e002      	b.n	800b534 <phalICode_Int_ComputeErrorCode+0x1a8>

            default: wStatusTmp = PH_ERR_PROTOCOL_ERROR; break;
 800b52e:	2306      	movs	r3, #6
 800b530:	81fb      	strh	r3, [r7, #14]
 800b532:	bf00      	nop
            }
        }

        /* Merge the status code with component code. */
        wStatusTmp = PH_ADD_COMPCODE(wStatusTmp, PH_COMP_AL_ICODE);
 800b534:	89fb      	ldrh	r3, [r7, #14]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d00b      	beq.n	800b552 <phalICode_Int_ComputeErrorCode+0x1c6>
 800b53a:	89fb      	ldrh	r3, [r7, #14]
 800b53c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b540:	2b00      	cmp	r3, #0
 800b542:	d106      	bne.n	800b552 <phalICode_Int_ComputeErrorCode+0x1c6>
 800b544:	89fb      	ldrh	r3, [r7, #14]
 800b546:	b2db      	uxtb	r3, r3
 800b548:	b29b      	uxth	r3, r3
 800b54a:	f443 53a8 	orr.w	r3, r3, #5376	@ 0x1500
 800b54e:	b29b      	uxth	r3, r3
 800b550:	e000      	b.n	800b554 <phalICode_Int_ComputeErrorCode+0x1c8>
 800b552:	89fb      	ldrh	r3, [r7, #14]
 800b554:	81fb      	strh	r3, [r7, #14]
    }

    return wStatusTmp;
 800b556:	89fb      	ldrh	r3, [r7, #14]
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3710      	adds	r7, #16
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <phalICode_Int_ReadSingleBlock>:
 *          PH_ERR_SUCCESS for successfull operation.
 *          Other Depending on implementation and underlaying component.
 */
phStatus_t phalICode_Int_ReadSingleBlock(void * pPalSli15693DataParams, uint8_t bOption, uint8_t bBlockNo, uint8_t ** ppData,
        uint16_t * pDataLen)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b088      	sub	sp, #32
 800b564:	af02      	add	r7, sp, #8
 800b566:	60f8      	str	r0, [r7, #12]
 800b568:	607b      	str	r3, [r7, #4]
 800b56a:	460b      	mov	r3, r1
 800b56c:	72fb      	strb	r3, [r7, #11]
 800b56e:	4613      	mov	r3, r2
 800b570:	72bb      	strb	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM wStatus = 0;
 800b572:	2300      	movs	r3, #0
 800b574:	82fb      	strh	r3, [r7, #22]
    uint8_t     PH_MEMLOC_REM aCmdBuff[2];
    uint16_t    PH_MEMLOC_REM wOpeMode = 0U;
 800b576:	2300      	movs	r3, #0
 800b578:	827b      	strh	r3, [r7, #18]

    /* Frame ReadSingleBlock command information. */
    aCmdBuff[0] = PHAL_ICODE_CMD_READ_SINGLE_BLOCK;
 800b57a:	2320      	movs	r3, #32
 800b57c:	753b      	strb	r3, [r7, #20]
    aCmdBuff[1] = bBlockNo;
 800b57e:	7abb      	ldrb	r3, [r7, #10]
 800b580:	757b      	strb	r3, [r7, #21]

    /* Set or clear the flags option bit indicated by bOption. */
    PH_CHECK_SUCCESS_FCT(wStatus, phalICode_Int_SetOptionBit(
 800b582:	7afb      	ldrb	r3, [r7, #11]
 800b584:	2200      	movs	r2, #0
 800b586:	4619      	mov	r1, r3
 800b588:	68f8      	ldr	r0, [r7, #12]
 800b58a:	f7ff fe4b 	bl	800b224 <phalICode_Int_SetOptionBit>
 800b58e:	4603      	mov	r3, r0
 800b590:	82fb      	strh	r3, [r7, #22]
 800b592:	8afb      	ldrh	r3, [r7, #22]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d001      	beq.n	800b59c <phalICode_Int_ReadSingleBlock+0x3c>
 800b598:	8afb      	ldrh	r3, [r7, #22]
 800b59a:	e044      	b.n	800b626 <phalICode_Int_ReadSingleBlock+0xc6>
            pPalSli15693DataParams,
            bOption,
            PH_OFF));

    /* Get Operation mode. */
    PH_CHECK_SUCCESS_FCT(wStatus, phpalSli15693_GetConfig(
 800b59c:	f107 0312 	add.w	r3, r7, #18
 800b5a0:	461a      	mov	r2, r3
 800b5a2:	210a      	movs	r1, #10
 800b5a4:	68f8      	ldr	r0, [r7, #12]
 800b5a6:	f00a fe85 	bl	80162b4 <phpalSli15693_Sw_GetConfig>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	82fb      	strh	r3, [r7, #22]
 800b5ae:	8afb      	ldrh	r3, [r7, #22]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d001      	beq.n	800b5b8 <phalICode_Int_ReadSingleBlock+0x58>
 800b5b4:	8afb      	ldrh	r3, [r7, #22]
 800b5b6:	e036      	b.n	800b626 <phalICode_Int_ReadSingleBlock+0xc6>
            pPalSli15693DataParams,
            PHPAL_SLI15693_CONFIG_OPE_MODE,
            &wOpeMode));

    if(wOpeMode == RD_LIB_MODE_NFC)
 800b5b8:	8a7b      	ldrh	r3, [r7, #18]
 800b5ba:	2b02      	cmp	r3, #2
 800b5bc:	d10c      	bne.n	800b5d8 <phalICode_Int_ReadSingleBlock+0x78>
    {
        /* Set short + Tolerance(Delta) Timeout(50ms). */
        PH_CHECK_SUCCESS_FCT(wStatus, phpalSli15693_SetConfig(
 800b5be:	f24c 4294 	movw	r2, #50324	@ 0xc494
 800b5c2:	2102      	movs	r1, #2
 800b5c4:	68f8      	ldr	r0, [r7, #12]
 800b5c6:	f00a fc9f 	bl	8015f08 <phpalSli15693_Sw_SetConfig>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	82fb      	strh	r3, [r7, #22]
 800b5ce:	8afb      	ldrh	r3, [r7, #22]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d00e      	beq.n	800b5f2 <phalICode_Int_ReadSingleBlock+0x92>
 800b5d4:	8afb      	ldrh	r3, [r7, #22]
 800b5d6:	e026      	b.n	800b626 <phalICode_Int_ReadSingleBlock+0xc6>
                PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_NFC_MODE_TIMEOUT_DELTA_US));
    }
    else
    {
        /* Set short + Tolerance(Delta) Timeout. */
        PH_CHECK_SUCCESS_FCT(wStatus, phpalSli15693_SetConfig(
 800b5d8:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 800b5dc:	2102      	movs	r1, #2
 800b5de:	68f8      	ldr	r0, [r7, #12]
 800b5e0:	f00a fc92 	bl	8015f08 <phpalSli15693_Sw_SetConfig>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	82fb      	strh	r3, [r7, #22]
 800b5e8:	8afb      	ldrh	r3, [r7, #22]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d001      	beq.n	800b5f2 <phalICode_Int_ReadSingleBlock+0x92>
 800b5ee:	8afb      	ldrh	r3, [r7, #22]
 800b5f0:	e019      	b.n	800b626 <phalICode_Int_ReadSingleBlock+0xc6>
                PHPAL_SLI15693_CONFIG_TIMEOUT_US,
                PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_ISO_MODE_TIMEOUT_DELTA_US));
    }

    /* Exchange the command information to PAL layer. */
    wStatus = phpalSli15693_Exchange(
 800b5f2:	f107 0214 	add.w	r2, r7, #20
 800b5f6:	6a3b      	ldr	r3, [r7, #32]
 800b5f8:	9301      	str	r3, [sp, #4]
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	9300      	str	r3, [sp, #0]
 800b5fe:	2302      	movs	r3, #2
 800b600:	2100      	movs	r1, #0
 800b602:	68f8      	ldr	r0, [r7, #12]
 800b604:	f00a fb4d 	bl	8015ca2 <phpalSli15693_Sw_Exchange>
 800b608:	4603      	mov	r3, r0
 800b60a:	82fb      	strh	r3, [r7, #22]
            2,
            ppData,
            pDataLen);

    /* Compute the status code. */
    PH_CHECK_SUCCESS_FCT(wStatus, phalICode_Int_ComputeErrorCode(pPalSli15693DataParams, wStatus));
 800b60c:	8afb      	ldrh	r3, [r7, #22]
 800b60e:	4619      	mov	r1, r3
 800b610:	68f8      	ldr	r0, [r7, #12]
 800b612:	f7ff febb 	bl	800b38c <phalICode_Int_ComputeErrorCode>
 800b616:	4603      	mov	r3, r0
 800b618:	82fb      	strh	r3, [r7, #22]
 800b61a:	8afb      	ldrh	r3, [r7, #22]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d001      	beq.n	800b624 <phalICode_Int_ReadSingleBlock+0xc4>
 800b620:	8afb      	ldrh	r3, [r7, #22]
 800b622:	e000      	b.n	800b626 <phalICode_Int_ReadSingleBlock+0xc6>

    return PH_ERR_SUCCESS;
 800b624:	2300      	movs	r3, #0
}
 800b626:	4618      	mov	r0, r3
 800b628:	3718      	adds	r7, #24
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}

0800b62e <phalICode_Int_WriteSingleBlock>:
 *          PH_ERR_SUCCESS for successfull operation.
 *          Other Depending on implementation and underlaying component.
 */
phStatus_t phalICode_Int_WriteSingleBlock(void * pPalSli15693DataParams, uint8_t bOption, uint8_t bBlockNo, uint8_t * pData,
        uint8_t bDataLen)
{
 800b62e:	b580      	push	{r7, lr}
 800b630:	b08a      	sub	sp, #40	@ 0x28
 800b632:	af02      	add	r7, sp, #8
 800b634:	60f8      	str	r0, [r7, #12]
 800b636:	607b      	str	r3, [r7, #4]
 800b638:	460b      	mov	r3, r1
 800b63a:	72fb      	strb	r3, [r7, #11]
 800b63c:	4613      	mov	r3, r2
 800b63e:	72bb      	strb	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM wStatus = 0;
 800b640:	2300      	movs	r3, #0
 800b642:	83fb      	strh	r3, [r7, #30]
    uint8_t     PH_MEMLOC_REM aCmdBuff[2];
    uint8_t *   PH_MEMLOC_REM pResponse = NULL;
 800b644:	2300      	movs	r3, #0
 800b646:	61bb      	str	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wRespLen = 0;
 800b648:	2300      	movs	r3, #0
 800b64a:	82fb      	strh	r3, [r7, #22]

    /* Frame WriteSingleBlock command. */
    aCmdBuff[0] = PHAL_ICODE_CMD_WRITE_SINGLE_BLOCK;
 800b64c:	2321      	movs	r3, #33	@ 0x21
 800b64e:	773b      	strb	r3, [r7, #28]
    aCmdBuff[1] = bBlockNo;
 800b650:	7abb      	ldrb	r3, [r7, #10]
 800b652:	777b      	strb	r3, [r7, #29]

    /* Set or clear the flags option bit indicated by bOption. */
    PH_CHECK_SUCCESS_FCT(wStatus, phalICode_Int_SetOptionBit(
 800b654:	7afb      	ldrb	r3, [r7, #11]
 800b656:	2201      	movs	r2, #1
 800b658:	4619      	mov	r1, r3
 800b65a:	68f8      	ldr	r0, [r7, #12]
 800b65c:	f7ff fde2 	bl	800b224 <phalICode_Int_SetOptionBit>
 800b660:	4603      	mov	r3, r0
 800b662:	83fb      	strh	r3, [r7, #30]
 800b664:	8bfb      	ldrh	r3, [r7, #30]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d001      	beq.n	800b66e <phalICode_Int_WriteSingleBlock+0x40>
 800b66a:	8bfb      	ldrh	r3, [r7, #30]
 800b66c:	e03b      	b.n	800b6e6 <phalICode_Int_WriteSingleBlock+0xb8>
            pPalSli15693DataParams,
            bOption,
            PH_ON));

    /* Buffer the command information to exchange buffer. */
    PH_CHECK_SUCCESS_FCT(wStatus, phpalSli15693_Exchange(
 800b66e:	f107 021c 	add.w	r2, r7, #28
 800b672:	2300      	movs	r3, #0
 800b674:	9301      	str	r3, [sp, #4]
 800b676:	2300      	movs	r3, #0
 800b678:	9300      	str	r3, [sp, #0]
 800b67a:	2302      	movs	r3, #2
 800b67c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b680:	68f8      	ldr	r0, [r7, #12]
 800b682:	f00a fb0e 	bl	8015ca2 <phpalSli15693_Sw_Exchange>
 800b686:	4603      	mov	r3, r0
 800b688:	83fb      	strh	r3, [r7, #30]
 800b68a:	8bfb      	ldrh	r3, [r7, #30]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d001      	beq.n	800b694 <phalICode_Int_WriteSingleBlock+0x66>
 800b690:	8bfb      	ldrh	r3, [r7, #30]
 800b692:	e028      	b.n	800b6e6 <phalICode_Int_WriteSingleBlock+0xb8>
            2,
            NULL,
            NULL));

    /* Buffer the data to exchange buffer and exchange the bufferred information to PAL layer. */
    wStatus = phpalSli15693_Exchange(
 800b694:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b698:	b29a      	uxth	r2, r3
 800b69a:	f107 0316 	add.w	r3, r7, #22
 800b69e:	9301      	str	r3, [sp, #4]
 800b6a0:	f107 0318 	add.w	r3, r7, #24
 800b6a4:	9300      	str	r3, [sp, #0]
 800b6a6:	4613      	mov	r3, r2
 800b6a8:	687a      	ldr	r2, [r7, #4]
 800b6aa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b6ae:	68f8      	ldr	r0, [r7, #12]
 800b6b0:	f00a faf7 	bl	8015ca2 <phpalSli15693_Sw_Exchange>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	83fb      	strh	r3, [r7, #30]
            bDataLen,
            &pResponse,
            &wRespLen);

    /* Write-alike handling */
    if (0U != (bOption))
 800b6b8:	7afb      	ldrb	r3, [r7, #11]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d006      	beq.n	800b6cc <phalICode_Int_WriteSingleBlock+0x9e>
    {
        wStatus = phalICode_Int_WriteAlikeHandling(pPalSli15693DataParams, wStatus);
 800b6be:	8bfb      	ldrh	r3, [r7, #30]
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	68f8      	ldr	r0, [r7, #12]
 800b6c4:	f7ff fe12 	bl	800b2ec <phalICode_Int_WriteAlikeHandling>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	83fb      	strh	r3, [r7, #30]
    }

    /* Compute the status code. */
    PH_CHECK_SUCCESS_FCT(wStatus, phalICode_Int_ComputeErrorCode(pPalSli15693DataParams, wStatus));
 800b6cc:	8bfb      	ldrh	r3, [r7, #30]
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	68f8      	ldr	r0, [r7, #12]
 800b6d2:	f7ff fe5b 	bl	800b38c <phalICode_Int_ComputeErrorCode>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	83fb      	strh	r3, [r7, #30]
 800b6da:	8bfb      	ldrh	r3, [r7, #30]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d001      	beq.n	800b6e4 <phalICode_Int_WriteSingleBlock+0xb6>
 800b6e0:	8bfb      	ldrh	r3, [r7, #30]
 800b6e2:	e000      	b.n	800b6e6 <phalICode_Int_WriteSingleBlock+0xb8>

    return PH_ERR_SUCCESS;
 800b6e4:	2300      	movs	r3, #0
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3720      	adds	r7, #32
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}

0800b6ee <phalMfNtag42XDna_Sw_Init>:
/* VC keys are invalid after 0x23. */
 #define IS_INVALID_VC_KEY(keyNo)	(((keyNo) & 0x7FU) > 0x23U)

phStatus_t phalMfNtag42XDna_Sw_Init(phalMfNtag42XDna_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pPalMifareDataParams,
    void * pKeyStoreDataParams, void * pCryptoDataParamsEnc, void * pCryptoDataParamsMac, void * pCryptoRngDataParams, void * pHalDataParams)
{
 800b6ee:	b580      	push	{r7, lr}
 800b6f0:	b084      	sub	sp, #16
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	60f8      	str	r0, [r7, #12]
 800b6f6:	607a      	str	r2, [r7, #4]
 800b6f8:	603b      	str	r3, [r7, #0]
 800b6fa:	460b      	mov	r3, r1
 800b6fc:	817b      	strh	r3, [r7, #10]
    /* data param check */
    if (sizeof(phalMfNtag42XDna_Sw_DataParams_t) != wSizeOfDataParams)
 800b6fe:	897b      	ldrh	r3, [r7, #10]
 800b700:	2ba8      	cmp	r3, #168	@ 0xa8
 800b702:	d002      	beq.n	800b70a <phalMfNtag42XDna_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFNTAG42XDNA);
 800b704:	f242 6320 	movw	r3, #9760	@ 0x2620
 800b708:	e0a1      	b.n	800b84e <phalMfNtag42XDna_Sw_Init+0x160>
    }

    PH_ASSERT_NULL_DATA_PARAM(pDataParams,PH_COMP_AL_MFNTAG42XDNA);
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d102      	bne.n	800b716 <phalMfNtag42XDna_Sw_Init+0x28>
 800b710:	f242 6320 	movw	r3, #9760	@ 0x2620
 800b714:	e09b      	b.n	800b84e <phalMfNtag42XDna_Sw_Init+0x160>
    PH_ASSERT_NULL_PARAM (pPalMifareDataParams,PH_COMP_AL_MFNTAG42XDNA);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d102      	bne.n	800b722 <phalMfNtag42XDna_Sw_Init+0x34>
 800b71c:	f242 6321 	movw	r3, #9761	@ 0x2621
 800b720:	e095      	b.n	800b84e <phalMfNtag42XDna_Sw_Init+0x160>
#ifdef NXPBUILD__PH_CRYPTOSYM
    PH_ASSERT_NULL_PARAM (pKeyStoreDataParams,PH_COMP_AL_MFNTAG42XDNA);
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d102      	bne.n	800b72e <phalMfNtag42XDna_Sw_Init+0x40>
 800b728:	f242 6321 	movw	r3, #9761	@ 0x2621
 800b72c:	e08f      	b.n	800b84e <phalMfNtag42XDna_Sw_Init+0x160>
    PH_ASSERT_NULL_PARAM (pCryptoDataParamsEnc,PH_COMP_AL_MFNTAG42XDNA);
 800b72e:	69bb      	ldr	r3, [r7, #24]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d102      	bne.n	800b73a <phalMfNtag42XDna_Sw_Init+0x4c>
 800b734:	f242 6321 	movw	r3, #9761	@ 0x2621
 800b738:	e089      	b.n	800b84e <phalMfNtag42XDna_Sw_Init+0x160>
    PH_ASSERT_NULL_PARAM (pCryptoDataParamsMac,PH_COMP_AL_MFNTAG42XDNA);
 800b73a:	69fb      	ldr	r3, [r7, #28]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d102      	bne.n	800b746 <phalMfNtag42XDna_Sw_Init+0x58>
 800b740:	f242 6321 	movw	r3, #9761	@ 0x2621
 800b744:	e083      	b.n	800b84e <phalMfNtag42XDna_Sw_Init+0x160>
    PH_ASSERT_NULL_PARAM (pCryptoRngDataParams,PH_COMP_AL_MFNTAG42XDNA);
 800b746:	6a3b      	ldr	r3, [r7, #32]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d102      	bne.n	800b752 <phalMfNtag42XDna_Sw_Init+0x64>
 800b74c:	f242 6321 	movw	r3, #9761	@ 0x2621
 800b750:	e07d      	b.n	800b84e <phalMfNtag42XDna_Sw_Init+0x160>
#endif /* NXPBUILD__PH_CRYPTOSYM */
    PH_ASSERT_NULL_PARAM (pHalDataParams,PH_COMP_AL_MFNTAG42XDNA);
 800b752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b754:	2b00      	cmp	r3, #0
 800b756:	d102      	bne.n	800b75e <phalMfNtag42XDna_Sw_Init+0x70>
 800b758:	f242 6321 	movw	r3, #9761	@ 0x2621
 800b75c:	e077      	b.n	800b84e <phalMfNtag42XDna_Sw_Init+0x160>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_MFNTAG42XDNA | PHAL_MFNTAG42XDNA_SW_ID;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	f242 6201 	movw	r2, #9729	@ 0x2601
 800b764:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams   = pPalMifareDataParams;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	687a      	ldr	r2, [r7, #4]
 800b76a:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	683a      	ldr	r2, [r7, #0]
 800b770:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParamsEnc   = pCryptoDataParamsEnc;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	69ba      	ldr	r2, [r7, #24]
 800b776:	60da      	str	r2, [r3, #12]
    pDataParams->pCryptoDataParamsMac   = pCryptoDataParamsMac;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	69fa      	ldr	r2, [r7, #28]
 800b77c:	611a      	str	r2, [r3, #16]
    pDataParams->pCryptoRngDataParams   = pCryptoRngDataParams;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	6a3a      	ldr	r2, [r7, #32]
 800b782:	615a      	str	r2, [r3, #20]
    pDataParams->pHalDataParams         = pHalDataParams;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b788:	619a      	str	r2, [r3, #24]
    /* 2 Byte CRC initial value in Authenticate mode. */
    pDataParams->wCrc = PH_TOOLS_CRC16_PRESET_ISO14443A;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	f246 3263 	movw	r2, #25443	@ 0x6363
 800b790:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

    /* 4 Byte CRC initial value in 0x1A, 0xAA mode. */
    pDataParams->dwCrc = PH_TOOLS_CRC32_PRESET_DF8;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	f04f 32ff 	mov.w	r2, #4294967295
 800b79a:	651a      	str	r2, [r3, #80]	@ 0x50

    memset(pDataParams->bSesAuthENCKey, 0x00, 24);  /* PRQA S 3200 */
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	331c      	adds	r3, #28
 800b7a0:	2218      	movs	r2, #24
 800b7a2:	2100      	movs	r1, #0
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f011 fcab 	bl	801d100 <memset>
    pDataParams->bKeyNo = 0xFF; /* Set to invalid */
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	22ff      	movs	r2, #255	@ 0xff
 800b7ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    memset(pDataParams->bIv, 0x00, 16); /* PRQA S 3200 */
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	3335      	adds	r3, #53	@ 0x35
 800b7b6:	2210      	movs	r2, #16
 800b7b8:	2100      	movs	r1, #0
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f011 fca0 	bl	801d100 <memset>
    memset(pDataParams->pAid, 0x00, 3);  /* PRQA S 3200 */
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	3346      	adds	r3, #70	@ 0x46
 800b7c4:	2203      	movs	r2, #3
 800b7c6:	2100      	movs	r1, #0
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f011 fc99 	bl	801d100 <memset>
    pDataParams->bAuthMode = PHAL_MFNTAG42XDNA_NOT_AUTHENTICATED; /* Set to invalid */
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	22ff      	movs	r2, #255	@ 0xff
 800b7d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    pDataParams->bWrappedMode = 0x01U; /* Set to true */
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	2201      	movs	r2, #1
 800b7da:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
    pDataParams->bCryptoMethod = 0xFFU; /* No crypto just after init */
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	22ff      	movs	r2, #255	@ 0xff
 800b7e2:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
    pDataParams->wAdditionalInfo = 0x0000;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    pDataParams->bShortLenApdu = 0x01U; /* Since Prime variant supports only Short Length APDU, setting this to 0x01 always */
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2201      	movs	r2, #1
 800b7f2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
    pDataParams->dwPayLoadLen = 0;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	659a      	str	r2, [r3, #88]	@ 0x58
    pDataParams->wCmdCtr = 0;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	2200      	movs	r2, #0
 800b800:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    memset(pDataParams->bTi, 0x00, PHAL_MFNTAG42XDNA_SIZE_TI);  /* PRQA S 3200 */
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	335e      	adds	r3, #94	@ 0x5e
 800b808:	2204      	movs	r2, #4
 800b80a:	2100      	movs	r1, #0
 800b80c:	4618      	mov	r0, r3
 800b80e:	f011 fc77 	bl	801d100 <memset>
    memset(pDataParams->bSesAuthMACKey, 0x00, 16);  /* PRQA S 3200 */
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	3362      	adds	r3, #98	@ 0x62
 800b816:	2210      	movs	r2, #16
 800b818:	2100      	movs	r1, #0
 800b81a:	4618      	mov	r0, r3
 800b81c:	f011 fc70 	bl	801d100 <memset>
    memset(pDataParams->pUnprocByteBuff, 0x00, PHAL_MFNTAG42XDNA_SIZE_MAC);  /* PRQA S 3200 */
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	3382      	adds	r3, #130	@ 0x82
 800b824:	2210      	movs	r2, #16
 800b826:	2100      	movs	r1, #0
 800b828:	4618      	mov	r0, r3
 800b82a:	f011 fc69 	bl	801d100 <memset>
    pDataParams->bNoUnprocBytes = 0;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	2200      	movs	r2, #0
 800b832:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
    memset(pDataParams->bLastBlockBuffer, 0x00, 16);  /* PRQA S 3200 */
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	3393      	adds	r3, #147	@ 0x93
 800b83a:	2210      	movs	r2, #16
 800b83c:	2100      	movs	r1, #0
 800b83e:	4618      	mov	r0, r3
 800b840:	f011 fc5e 	bl	801d100 <memset>
    pDataParams->bLastBlockIndex = 0;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	2200      	movs	r2, #0
 800b848:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3

    return PH_ERR_SUCCESS;
 800b84c:	2300      	movs	r3, #0
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3710      	adds	r7, #16
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}

0800b856 <phalMfc_Sw_Init>:
                           phalMfc_Sw_DataParams_t * pDataParams,
                           uint16_t wSizeOfDataParams,
                           void * pPalMifareDataParams,
                           void * pKeyStoreDataParams
                           )
{
 800b856:	b480      	push	{r7}
 800b858:	b085      	sub	sp, #20
 800b85a:	af00      	add	r7, sp, #0
 800b85c:	60f8      	str	r0, [r7, #12]
 800b85e:	607a      	str	r2, [r7, #4]
 800b860:	603b      	str	r3, [r7, #0]
 800b862:	460b      	mov	r3, r1
 800b864:	817b      	strh	r3, [r7, #10]
    if (sizeof(phalMfc_Sw_DataParams_t) != wSizeOfDataParams)
 800b866:	897b      	ldrh	r3, [r7, #10]
 800b868:	2b0c      	cmp	r3, #12
 800b86a:	d002      	beq.n	800b872 <phalMfc_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFC);
 800b86c:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 800b870:	e014      	b.n	800b89c <phalMfc_Sw_Init+0x46>
    }
    PH_ASSERT_NULL (pDataParams);
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d101      	bne.n	800b87c <phalMfc_Sw_Init+0x26>
 800b878:	2321      	movs	r3, #33	@ 0x21
 800b87a:	e00f      	b.n	800b89c <phalMfc_Sw_Init+0x46>
    PH_ASSERT_NULL (pPalMifareDataParams);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d101      	bne.n	800b886 <phalMfc_Sw_Init+0x30>
 800b882:	2321      	movs	r3, #33	@ 0x21
 800b884:	e00a      	b.n	800b89c <phalMfc_Sw_Init+0x46>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_MFC | PHAL_MFC_SW_ID;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	f241 0201 	movw	r2, #4097	@ 0x1001
 800b88c:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams   = pPalMifareDataParams;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	687a      	ldr	r2, [r7, #4]
 800b892:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	683a      	ldr	r2, [r7, #0]
 800b898:	609a      	str	r2, [r3, #8]

    return PH_ERR_SUCCESS;
 800b89a:	2300      	movs	r3, #0
}
 800b89c:	4618      	mov	r0, r3
 800b89e:	3714      	adds	r7, #20
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a6:	4770      	bx	lr

0800b8a8 <phalMfdf_Sw_Init>:
                            void * pKeyStoreDataParams,
                            void * pCryptoDataParamsEnc,
                            void * pCryptoRngDataParams,
                            void * pHalDataParams
                            )
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b084      	sub	sp, #16
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	60f8      	str	r0, [r7, #12]
 800b8b0:	607a      	str	r2, [r7, #4]
 800b8b2:	603b      	str	r3, [r7, #0]
 800b8b4:	460b      	mov	r3, r1
 800b8b6:	817b      	strh	r3, [r7, #10]
    /* data param check */
    if (sizeof(phalMfdf_Sw_DataParams_t) != wSizeOfDataParams)
 800b8b8:	897b      	ldrh	r3, [r7, #10]
 800b8ba:	2b68      	cmp	r3, #104	@ 0x68
 800b8bc:	d002      	beq.n	800b8c4 <phalMfdf_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFDF);
 800b8be:	f44f 53c9 	mov.w	r3, #6432	@ 0x1920
 800b8c2:	e057      	b.n	800b974 <phalMfdf_Sw_Init+0xcc>
    }
    PH_ASSERT_NULL (pDataParams);
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d101      	bne.n	800b8ce <phalMfdf_Sw_Init+0x26>
 800b8ca:	2321      	movs	r3, #33	@ 0x21
 800b8cc:	e052      	b.n	800b974 <phalMfdf_Sw_Init+0xcc>
    PH_ASSERT_NULL (pPalMifareDataParams);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d101      	bne.n	800b8d8 <phalMfdf_Sw_Init+0x30>
 800b8d4:	2321      	movs	r3, #33	@ 0x21
 800b8d6:	e04d      	b.n	800b974 <phalMfdf_Sw_Init+0xcc>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_MFDF | PHAL_MFDF_SW_ID;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f641 1201 	movw	r2, #6401	@ 0x1901
 800b8de:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams   = pPalMifareDataParams;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	687a      	ldr	r2, [r7, #4]
 800b8e4:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	683a      	ldr	r2, [r7, #0]
 800b8ea:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParamsEnc   = pCryptoDataParamsEnc;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	69ba      	ldr	r2, [r7, #24]
 800b8f0:	60da      	str	r2, [r3, #12]
    pDataParams->pCryptoRngDataParams   = pCryptoRngDataParams;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	69fa      	ldr	r2, [r7, #28]
 800b8f6:	611a      	str	r2, [r3, #16]
    pDataParams->bLastBlockIndex        = 0;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
    pDataParams->pHalDataParams  = pHalDataParams;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	6a3a      	ldr	r2, [r7, #32]
 800b904:	615a      	str	r2, [r3, #20]
    /* 2 Byte CRC initial value in Authenticate mode. */
    pDataParams->wCrc = PH_TOOLS_CRC16_PRESET_ISO14443A;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	f246 3263 	movw	r2, #25443	@ 0x6363
 800b90c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48

    /* 4 Byte CRC initial value in 0x1A, 0xAA mode. */
    pDataParams->dwCrc = PH_TOOLS_CRC32_PRESET_DF8;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f04f 32ff 	mov.w	r2, #4294967295
 800b916:	64da      	str	r2, [r3, #76]	@ 0x4c

    (void)memset(pDataParams->bSessionKey, 0x00, 24);
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	3318      	adds	r3, #24
 800b91c:	2218      	movs	r2, #24
 800b91e:	2100      	movs	r1, #0
 800b920:	4618      	mov	r0, r3
 800b922:	f011 fbed 	bl	801d100 <memset>
    pDataParams->bKeyNo = 0xFF; /* Set to invalid */
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	22ff      	movs	r2, #255	@ 0xff
 800b92a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    (void)memset(pDataParams->bIv, 0x00, 16);
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	3331      	adds	r3, #49	@ 0x31
 800b932:	2210      	movs	r2, #16
 800b934:	2100      	movs	r1, #0
 800b936:	4618      	mov	r0, r3
 800b938:	f011 fbe2 	bl	801d100 <memset>
    (void)memset(pDataParams->pAid, 0x00, 3);
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	3342      	adds	r3, #66	@ 0x42
 800b940:	2203      	movs	r2, #3
 800b942:	2100      	movs	r1, #0
 800b944:	4618      	mov	r0, r3
 800b946:	f011 fbdb 	bl	801d100 <memset>
    pDataParams->bAuthMode = PHAL_MFDF_NOT_AUTHENTICATED; /* Set to invalid */
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	22ff      	movs	r2, #255	@ 0xff
 800b94e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    pDataParams->bWrappedMode = 0x00; /* Set to FALSE */
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	2200      	movs	r2, #0
 800b956:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
    pDataParams->bCryptoMethod = 0xFF; /* No crypto just after init */
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	22ff      	movs	r2, #255	@ 0xff
 800b95e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    pDataParams->wAdditionalInfo = 0x0000;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	2200      	movs	r2, #0
 800b966:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    pDataParams->wPayLoadLen = 0;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	2200      	movs	r2, #0
 800b96e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    return PH_ERR_SUCCESS;
 800b972:	2300      	movs	r3, #0
}
 800b974:	4618      	mov	r0, r3
 800b976:	3710      	adds	r7, #16
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}

0800b97c <phalMfdfEVx_Sw_Init>:
 #define IS_INVALID_VC_KEY(keyNo)   (((keyNo) & 0x7fU) > 0x23U)

phStatus_t phalMfdfEVx_Sw_Init(phalMfdfEVx_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pPalMifareDataParams,
    void * pKeyStoreDataParams, void * pCryptoDataParamsEnc, void * pCryptoDataParamsMac, void * pCryptoRngDataParams,
    void * pTMIDataParams, void * pVCADataParams, void * pHalDataParams)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b084      	sub	sp, #16
 800b980:	af00      	add	r7, sp, #0
 800b982:	60f8      	str	r0, [r7, #12]
 800b984:	607a      	str	r2, [r7, #4]
 800b986:	603b      	str	r3, [r7, #0]
 800b988:	460b      	mov	r3, r1
 800b98a:	817b      	strh	r3, [r7, #10]
    /* data param check */
    if (sizeof(phalMfdfEVx_Sw_DataParams_t) != wSizeOfDataParams)
 800b98c:	897b      	ldrh	r3, [r7, #10]
 800b98e:	2bb4      	cmp	r3, #180	@ 0xb4
 800b990:	d002      	beq.n	800b998 <phalMfdfEVx_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFDFEVX);
 800b992:	f242 0320 	movw	r3, #8224	@ 0x2020
 800b996:	e09f      	b.n	800bad8 <phalMfdfEVx_Sw_Init+0x15c>
    }
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_AL_MFDFEVX);
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d102      	bne.n	800b9a4 <phalMfdfEVx_Sw_Init+0x28>
 800b99e:	f242 0320 	movw	r3, #8224	@ 0x2020
 800b9a2:	e099      	b.n	800bad8 <phalMfdfEVx_Sw_Init+0x15c>
    PH_ASSERT_NULL_PARAM(pPalMifareDataParams, PH_COMP_AL_MFDFEVX);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d102      	bne.n	800b9b0 <phalMfdfEVx_Sw_Init+0x34>
 800b9aa:	f242 0321 	movw	r3, #8225	@ 0x2021
 800b9ae:	e093      	b.n	800bad8 <phalMfdfEVx_Sw_Init+0x15c>
    PH_ASSERT_NULL_PARAM(pTMIDataParams, PH_COMP_AL_MFDFEVX);
 800b9b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d102      	bne.n	800b9bc <phalMfdfEVx_Sw_Init+0x40>
 800b9b6:	f242 0321 	movw	r3, #8225	@ 0x2021
 800b9ba:	e08d      	b.n	800bad8 <phalMfdfEVx_Sw_Init+0x15c>
    PH_ASSERT_NULL_PARAM(pVCADataParams, PH_COMP_AL_MFDFEVX);
 800b9bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d102      	bne.n	800b9c8 <phalMfdfEVx_Sw_Init+0x4c>
 800b9c2:	f242 0321 	movw	r3, #8225	@ 0x2021
 800b9c6:	e087      	b.n	800bad8 <phalMfdfEVx_Sw_Init+0x15c>

    /* init private data */
    pDataParams->wId = PH_COMP_AL_MFDFEVX | PHAL_MFDFEVX_SW_ID;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	f242 0201 	movw	r2, #8193	@ 0x2001
 800b9ce:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams = pPalMifareDataParams;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	687a      	ldr	r2, [r7, #4]
 800b9d4:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams = pKeyStoreDataParams;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	683a      	ldr	r2, [r7, #0]
 800b9da:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParamsEnc = pCryptoDataParamsEnc;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	69ba      	ldr	r2, [r7, #24]
 800b9e0:	60da      	str	r2, [r3, #12]
    pDataParams->pCryptoDataParamsMac = pCryptoDataParamsMac;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	69fa      	ldr	r2, [r7, #28]
 800b9e6:	611a      	str	r2, [r3, #16]
    pDataParams->pCryptoRngDataParams = pCryptoRngDataParams;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	6a3a      	ldr	r2, [r7, #32]
 800b9ec:	615a      	str	r2, [r3, #20]
    pDataParams->pTMIDataParams = pTMIDataParams;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b9f2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    pDataParams->pVCADataParams = pVCADataParams;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b9fa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    pDataParams->pHalDataParams = pHalDataParams;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba02:	619a      	str	r2, [r3, #24]
    /* 2 Byte CRC initial value in Authenticate mode. */
    pDataParams->wCrc = PH_TOOLS_CRC16_PRESET_ISO14443A;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	f246 3263 	movw	r2, #25443	@ 0x6363
 800ba0a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

    /* 4 Byte CRC initial value in 0x1A, 0xAA mode. */
    pDataParams->dwCrc = PH_TOOLS_CRC32_PRESET_DF8;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	f04f 32ff 	mov.w	r2, #4294967295
 800ba14:	651a      	str	r2, [r3, #80]	@ 0x50

    (void)memset(pDataParams->bSesAuthENCKey, 0x00, 24);
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	331c      	adds	r3, #28
 800ba1a:	2218      	movs	r2, #24
 800ba1c:	2100      	movs	r1, #0
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f011 fb6e 	bl	801d100 <memset>
    pDataParams->bKeyNo = 0xFF; /* Set to invalid */
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	22ff      	movs	r2, #255	@ 0xff
 800ba28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    (void)memset(pDataParams->bIv, 0x00, 16);
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	3335      	adds	r3, #53	@ 0x35
 800ba30:	2210      	movs	r2, #16
 800ba32:	2100      	movs	r1, #0
 800ba34:	4618      	mov	r0, r3
 800ba36:	f011 fb63 	bl	801d100 <memset>
    (void)memset(pDataParams->pAid, 0x00, 3);
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	3347      	adds	r3, #71	@ 0x47
 800ba3e:	2203      	movs	r2, #3
 800ba40:	2100      	movs	r1, #0
 800ba42:	4618      	mov	r0, r3
 800ba44:	f011 fb5c 	bl	801d100 <memset>
    pDataParams->bAuthMode = PHAL_MFDFEVX_NOT_AUTHENTICATED; /* Set to invalid */
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	22ff      	movs	r2, #255	@ 0xff
 800ba4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    pDataParams->bWrappedMode = 0x00; /* Set to false */
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	2200      	movs	r2, #0
 800ba54:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
    pDataParams->bCryptoMethod = 0xFF; /* No crypto just after init */
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	22ff      	movs	r2, #255	@ 0xff
 800ba5c:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
    pDataParams->wAdditionalInfo = 0x0000;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	2200      	movs	r2, #0
 800ba64:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    pDataParams->bShortLenApdu = 0x00; /* By default, extended length APDU format is used for BIG ISO Read */
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
    pDataParams->dwPayLoadLen = 0;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	2200      	movs	r2, #0
 800ba74:	659a      	str	r2, [r3, #88]	@ 0x58
    pDataParams->wCmdCtr = 0;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	2200      	movs	r2, #0
 800ba7a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    (void)memset(pDataParams->bTi, 0x00, PHAL_MFDFEVX_SIZE_TI);
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	335e      	adds	r3, #94	@ 0x5e
 800ba82:	2204      	movs	r2, #4
 800ba84:	2100      	movs	r1, #0
 800ba86:	4618      	mov	r0, r3
 800ba88:	f011 fb3a 	bl	801d100 <memset>
    (void)memset(pDataParams->bSesAuthMACKey, 0x00, 16);
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	3362      	adds	r3, #98	@ 0x62
 800ba90:	2210      	movs	r2, #16
 800ba92:	2100      	movs	r1, #0
 800ba94:	4618      	mov	r0, r3
 800ba96:	f011 fb33 	bl	801d100 <memset>
    (void)memset(pDataParams->pUnprocByteBuff, 0x00, PHAL_MFDFEVX_SIZE_MAC);
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	3372      	adds	r3, #114	@ 0x72
 800ba9e:	2210      	movs	r2, #16
 800baa0:	2100      	movs	r1, #0
 800baa2:	4618      	mov	r0, r3
 800baa4:	f011 fb2c 	bl	801d100 <memset>
    pDataParams->bNoUnprocBytes = 0;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	2200      	movs	r2, #0
 800baac:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    (void)memset(pDataParams->bLastBlockBuffer, 0x00, 16);
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	3383      	adds	r3, #131	@ 0x83
 800bab4:	2210      	movs	r2, #16
 800bab6:	2100      	movs	r1, #0
 800bab8:	4618      	mov	r0, r3
 800baba:	f011 fb21 	bl	801d100 <memset>
    pDataParams->bLastBlockIndex = 0;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	2200      	movs	r2, #0
 800bac2:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    pDataParams->bCmdCode = PHAL_MFDFEVX_CMD_INVALID;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	22ff      	movs	r2, #255	@ 0xff
 800baca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
    pDataParams->bReturn_FabID = PH_OFF;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	2200      	movs	r2, #0
 800bad2:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1

    return PH_ERR_SUCCESS;
 800bad6:	2300      	movs	r3, #0
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3710      	adds	r7, #16
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}

0800bae0 <phalMfdfLight_Sw_Init>:
/* VC keys are invalid after 0x23. */
 #define IS_INVALID_VC_KEY(keyNo)   (((keyNo) & 0x7FU) > 0x23U)

phStatus_t phalMfdfLight_Sw_Init(phalMfdfLight_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pPalMifareDataParams, void * pKeyStoreDataParams,
    void * pCryptoDataParamsEnc, void * pCryptoDataParamsMac, void * pCryptoRngDataParams, void * pTMIDataParams, void * pHalDataParams)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b084      	sub	sp, #16
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	60f8      	str	r0, [r7, #12]
 800bae8:	607a      	str	r2, [r7, #4]
 800baea:	603b      	str	r3, [r7, #0]
 800baec:	460b      	mov	r3, r1
 800baee:	817b      	strh	r3, [r7, #10]
    /* data param check */
    if (sizeof(phalMfdfLight_Sw_DataParams_t) != wSizeOfDataParams)
 800baf0:	897b      	ldrh	r3, [r7, #10]
 800baf2:	2bac      	cmp	r3, #172	@ 0xac
 800baf4:	d002      	beq.n	800bafc <phalMfdfLight_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFDFLIGHT);
 800baf6:	f242 3320 	movw	r3, #8992	@ 0x2320
 800bafa:	e0ab      	b.n	800bc54 <phalMfdfLight_Sw_Init+0x174>
    }

    PH_ASSERT_NULL_DATA_PARAM(pDataParams,PH_COMP_AL_MFDFLIGHT);
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d102      	bne.n	800bb08 <phalMfdfLight_Sw_Init+0x28>
 800bb02:	f242 3320 	movw	r3, #8992	@ 0x2320
 800bb06:	e0a5      	b.n	800bc54 <phalMfdfLight_Sw_Init+0x174>
    PH_ASSERT_NULL_PARAM (pPalMifareDataParams,PH_COMP_AL_MFDFLIGHT);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d102      	bne.n	800bb14 <phalMfdfLight_Sw_Init+0x34>
 800bb0e:	f242 3321 	movw	r3, #8993	@ 0x2321
 800bb12:	e09f      	b.n	800bc54 <phalMfdfLight_Sw_Init+0x174>
#ifdef NXPBUILD__PH_CRYPTOSYM
    PH_ASSERT_NULL_PARAM (pKeyStoreDataParams,PH_COMP_AL_MFDFLIGHT);
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d102      	bne.n	800bb20 <phalMfdfLight_Sw_Init+0x40>
 800bb1a:	f242 3321 	movw	r3, #8993	@ 0x2321
 800bb1e:	e099      	b.n	800bc54 <phalMfdfLight_Sw_Init+0x174>
    PH_ASSERT_NULL_PARAM (pCryptoDataParamsEnc,PH_COMP_AL_MFDFLIGHT);
 800bb20:	69bb      	ldr	r3, [r7, #24]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d102      	bne.n	800bb2c <phalMfdfLight_Sw_Init+0x4c>
 800bb26:	f242 3321 	movw	r3, #8993	@ 0x2321
 800bb2a:	e093      	b.n	800bc54 <phalMfdfLight_Sw_Init+0x174>
    PH_ASSERT_NULL_PARAM (pCryptoDataParamsMac,PH_COMP_AL_MFDFLIGHT);
 800bb2c:	69fb      	ldr	r3, [r7, #28]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d102      	bne.n	800bb38 <phalMfdfLight_Sw_Init+0x58>
 800bb32:	f242 3321 	movw	r3, #8993	@ 0x2321
 800bb36:	e08d      	b.n	800bc54 <phalMfdfLight_Sw_Init+0x174>
    PH_ASSERT_NULL_PARAM (pCryptoRngDataParams,PH_COMP_AL_MFDFLIGHT);
 800bb38:	6a3b      	ldr	r3, [r7, #32]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d102      	bne.n	800bb44 <phalMfdfLight_Sw_Init+0x64>
 800bb3e:	f242 3321 	movw	r3, #8993	@ 0x2321
 800bb42:	e087      	b.n	800bc54 <phalMfdfLight_Sw_Init+0x174>
#endif /* NXPBUILD__PH_CRYPTOSYM */
    PH_ASSERT_NULL_PARAM (pTMIDataParams,PH_COMP_AL_MFDFLIGHT);
 800bb44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d102      	bne.n	800bb50 <phalMfdfLight_Sw_Init+0x70>
 800bb4a:	f242 3321 	movw	r3, #8993	@ 0x2321
 800bb4e:	e081      	b.n	800bc54 <phalMfdfLight_Sw_Init+0x174>
    PH_ASSERT_NULL_PARAM (pHalDataParams,PH_COMP_AL_MFDFLIGHT);
 800bb50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d102      	bne.n	800bb5c <phalMfdfLight_Sw_Init+0x7c>
 800bb56:	f242 3321 	movw	r3, #8993	@ 0x2321
 800bb5a:	e07b      	b.n	800bc54 <phalMfdfLight_Sw_Init+0x174>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_MFDFLIGHT | PHAL_MFDFLIGHT_SW_ID;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	f242 3201 	movw	r2, #8961	@ 0x2301
 800bb62:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams   = pPalMifareDataParams;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	687a      	ldr	r2, [r7, #4]
 800bb68:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	683a      	ldr	r2, [r7, #0]
 800bb6e:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParamsEnc   = pCryptoDataParamsEnc;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	69ba      	ldr	r2, [r7, #24]
 800bb74:	60da      	str	r2, [r3, #12]
    pDataParams->pCryptoDataParamsMac   = pCryptoDataParamsMac;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	69fa      	ldr	r2, [r7, #28]
 800bb7a:	611a      	str	r2, [r3, #16]
    pDataParams->pCryptoRngDataParams   = pCryptoRngDataParams;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	6a3a      	ldr	r2, [r7, #32]
 800bb80:	615a      	str	r2, [r3, #20]
    pDataParams->pTMIDataParams         = pTMIDataParams;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb86:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    pDataParams->pHalDataParams         = pHalDataParams;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb8e:	619a      	str	r2, [r3, #24]
    /* 2 Byte CRC initial value in Authenticate mode. */
    pDataParams->wCrc = PH_TOOLS_CRC16_PRESET_ISO14443A;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	f246 3263 	movw	r2, #25443	@ 0x6363
 800bb96:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

    /* 4 Byte CRC initial value in 0x1A, 0xAA mode. */
    pDataParams->dwCrc = PH_TOOLS_CRC32_PRESET_DF8;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	f04f 32ff 	mov.w	r2, #4294967295
 800bba0:	651a      	str	r2, [r3, #80]	@ 0x50

    memset(pDataParams->bSesAuthENCKey, 0x00, 24U);  /* PRQA S 3200 */
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	331c      	adds	r3, #28
 800bba6:	2218      	movs	r2, #24
 800bba8:	2100      	movs	r1, #0
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f011 faa8 	bl	801d100 <memset>
    pDataParams->bKeyNo = 0xFFU; /* Set to invalid */
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	22ff      	movs	r2, #255	@ 0xff
 800bbb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    memset(pDataParams->bIv, 0x00, 16U); /* PRQA S 3200 */
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	3335      	adds	r3, #53	@ 0x35
 800bbbc:	2210      	movs	r2, #16
 800bbbe:	2100      	movs	r1, #0
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f011 fa9d 	bl	801d100 <memset>
    memset(pDataParams->pAid, 0x00, 3U);  /* PRQA S 3200 */
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	3346      	adds	r3, #70	@ 0x46
 800bbca:	2203      	movs	r2, #3
 800bbcc:	2100      	movs	r1, #0
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f011 fa96 	bl	801d100 <memset>
    pDataParams->bAuthMode = PHAL_MFDFLIGHT_NOT_AUTHENTICATED; /* Set to invalid */
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	22ff      	movs	r2, #255	@ 0xff
 800bbd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    pDataParams->bWrappedMode = 0x01U; /* Set to true */
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	2201      	movs	r2, #1
 800bbe0:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
    pDataParams->bCryptoMethod = 0xFFU; /* No crypto just after init */
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	22ff      	movs	r2, #255	@ 0xff
 800bbe8:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
    pDataParams->wAdditionalInfo = 0x0000;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	2200      	movs	r2, #0
 800bbf0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    pDataParams->bShortLenApdu = 0x01U; /* Since Prime variant supports only Short Length APDU, setting this to 0x01 always */
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
    pDataParams->dwPayLoadLen = 0;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	659a      	str	r2, [r3, #88]	@ 0x58
    pDataParams->wCmdCtr = 0;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	2200      	movs	r2, #0
 800bc06:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    memset(pDataParams->bTi, 0x00, PHAL_MFDFLIGHT_SIZE_TI);  /* PRQA S 3200 */
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	335e      	adds	r3, #94	@ 0x5e
 800bc0e:	2204      	movs	r2, #4
 800bc10:	2100      	movs	r1, #0
 800bc12:	4618      	mov	r0, r3
 800bc14:	f011 fa74 	bl	801d100 <memset>
    memset(pDataParams->bSesAuthMACKey, 0x00, 16U);  /* PRQA S 3200 */
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	3362      	adds	r3, #98	@ 0x62
 800bc1c:	2210      	movs	r2, #16
 800bc1e:	2100      	movs	r1, #0
 800bc20:	4618      	mov	r0, r3
 800bc22:	f011 fa6d 	bl	801d100 <memset>
    memset(pDataParams->pUnprocByteBuff, 0x00, PHAL_MFDFLIGHT_SIZE_MAC);  /* PRQA S 3200 */
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	3382      	adds	r3, #130	@ 0x82
 800bc2a:	2210      	movs	r2, #16
 800bc2c:	2100      	movs	r1, #0
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f011 fa66 	bl	801d100 <memset>
    pDataParams->bNoUnprocBytes = 0;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	2200      	movs	r2, #0
 800bc38:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
    memset(pDataParams->bLastBlockBuffer, 0x00, 16U);  /* PRQA S 3200 */
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	3393      	adds	r3, #147	@ 0x93
 800bc40:	2210      	movs	r2, #16
 800bc42:	2100      	movs	r1, #0
 800bc44:	4618      	mov	r0, r3
 800bc46:	f011 fa5b 	bl	801d100 <memset>
    pDataParams->bLastBlockIndex = 0;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3

    return PH_ERR_SUCCESS;
 800bc52:	2300      	movs	r3, #0
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	3710      	adds	r7, #16
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}

0800bc5c <phalMfpEVx_Sw_Init>:
#include "phalMfpEVx_Sw.h"

phStatus_t phalMfpEVx_Sw_Init(phalMfpEVx_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pPalMifareDataParams,
    void * pKeyStoreDataParams, void * pCryptoDataParamsEnc, void * pCryptoDataParamsMac, void * pCryptoRngDataParams,
    void * pCryptoDiversifyDataParams, void * pTMIDataParams, void * pVCADataParams)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b086      	sub	sp, #24
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	60f8      	str	r0, [r7, #12]
 800bc64:	607a      	str	r2, [r7, #4]
 800bc66:	603b      	str	r3, [r7, #0]
 800bc68:	460b      	mov	r3, r1
 800bc6a:	817b      	strh	r3, [r7, #10]
    phStatus_t PH_MEMLOC_REM wStatus = 0;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	82fb      	strh	r3, [r7, #22]

    /* data param check */
    if(sizeof(phalMfpEVx_Sw_DataParams_t) != wSizeOfDataParams)
 800bc70:	897b      	ldrh	r3, [r7, #10]
 800bc72:	2b84      	cmp	r3, #132	@ 0x84
 800bc74:	d002      	beq.n	800bc7c <phalMfpEVx_Sw_Init+0x20>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFPEVX);
 800bc76:	f242 1320 	movw	r3, #8480	@ 0x2120
 800bc7a:	e063      	b.n	800bd44 <phalMfpEVx_Sw_Init+0xe8>
    }
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_AL_MFPEVX);
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d102      	bne.n	800bc88 <phalMfpEVx_Sw_Init+0x2c>
 800bc82:	f242 1320 	movw	r3, #8480	@ 0x2120
 800bc86:	e05d      	b.n	800bd44 <phalMfpEVx_Sw_Init+0xe8>
    PH_ASSERT_NULL_PARAM(pPalMifareDataParams, PH_COMP_AL_MFPEVX);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d102      	bne.n	800bc94 <phalMfpEVx_Sw_Init+0x38>
 800bc8e:	f242 1321 	movw	r3, #8481	@ 0x2121
 800bc92:	e057      	b.n	800bd44 <phalMfpEVx_Sw_Init+0xe8>

    PH_ASSERT_NULL_PARAM(pTMIDataParams, PH_COMP_AL_MFPEVX);
 800bc94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d102      	bne.n	800bca0 <phalMfpEVx_Sw_Init+0x44>
 800bc9a:	f242 1321 	movw	r3, #8481	@ 0x2121
 800bc9e:	e051      	b.n	800bd44 <phalMfpEVx_Sw_Init+0xe8>

#ifdef NXPBUILD__PHAL_VCA
    PH_ASSERT_NULL_PARAM(pVCADataParams, PH_COMP_AL_MFPEVX);
 800bca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d102      	bne.n	800bcac <phalMfpEVx_Sw_Init+0x50>
 800bca6:	f242 1321 	movw	r3, #8481	@ 0x2121
 800bcaa:	e04b      	b.n	800bd44 <phalMfpEVx_Sw_Init+0xe8>
#endif /* NXPBUILD__PHAL_VCA */

    /* init private data */
    pDataParams->wId = PH_COMP_AL_MFPEVX | PHAL_MFPEVX_SW_ID;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	f242 1201 	movw	r2, #8449	@ 0x2101
 800bcb2:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams = pPalMifareDataParams;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	687a      	ldr	r2, [r7, #4]
 800bcb8:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams = pKeyStoreDataParams;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	683a      	ldr	r2, [r7, #0]
 800bcbe:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParamsEnc = pCryptoDataParamsEnc;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	6a3a      	ldr	r2, [r7, #32]
 800bcc4:	60da      	str	r2, [r3, #12]
    pDataParams->pCryptoDataParamsMac = pCryptoDataParamsMac;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bcca:	611a      	str	r2, [r3, #16]
    pDataParams->pCryptoRngDataParams = pCryptoRngDataParams;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bcd0:	615a      	str	r2, [r3, #20]
    pDataParams->pCryptoDiversifyDataParams = pCryptoDiversifyDataParams;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bcd6:	619a      	str	r2, [r3, #24]
    pDataParams->pTMIDataParams = pTMIDataParams;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bcdc:	61da      	str	r2, [r3, #28]
    pDataParams->bWrappedMode = 0x00;       /* Use native mode by default */
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	2200      	movs	r2, #0
 800bce2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    pDataParams->bExtendedLenApdu = 0x00;       /* Use short length APDU by default */
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	2200      	movs	r2, #0
 800bcea:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    pDataParams->pVCADataParams = pVCADataParams;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bcf2:	621a      	str	r2, [r3, #32]
    pDataParams->bAuthMode = (uint8_t) PHAL_MFPEVX_NOTAUTHENTICATED;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    pDataParams->bSMMode = (uint8_t) PHAL_MFPEVX_SECURE_MESSAGE_EV0;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    (void) memset(pDataParams->bSesAuthENCKey, 0x00, 16);
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	3360      	adds	r3, #96	@ 0x60
 800bd08:	2210      	movs	r2, #16
 800bd0a:	2100      	movs	r1, #0
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f011 f9f7 	bl	801d100 <memset>
    (void) memset(pDataParams->bSesAuthMACKey, 0x00, 16);
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	3370      	adds	r3, #112	@ 0x70
 800bd16:	2210      	movs	r2, #16
 800bd18:	2100      	movs	r1, #0
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f011 f9f0 	bl	801d100 <memset>
    (void) memset(pDataParams->bIv, 0x00, 16);
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	3350      	adds	r3, #80	@ 0x50
 800bd24:	2210      	movs	r2, #16
 800bd26:	2100      	movs	r1, #0
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f011 f9e9 	bl	801d100 <memset>

    /* clear the secure messaging state */
    PH_CHECK_SUCCESS_FCT(wStatus, phalMfpEVx_Sw_ResetSecMsgState(pDataParams));
 800bd2e:	68f8      	ldr	r0, [r7, #12]
 800bd30:	f000 f80c 	bl	800bd4c <phalMfpEVx_Sw_ResetSecMsgState>
 800bd34:	4603      	mov	r3, r0
 800bd36:	82fb      	strh	r3, [r7, #22]
 800bd38:	8afb      	ldrh	r3, [r7, #22]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d001      	beq.n	800bd42 <phalMfpEVx_Sw_Init+0xe6>
 800bd3e:	8afb      	ldrh	r3, [r7, #22]
 800bd40:	e000      	b.n	800bd44 <phalMfpEVx_Sw_Init+0xe8>

    return PH_ERR_SUCCESS;
 800bd42:	2300      	movs	r3, #0
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	3718      	adds	r7, #24
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}

0800bd4c <phalMfpEVx_Sw_ResetSecMsgState>:

/***************************************************************************************************************************************/
/* Mifare Plus EVx Software command for utility operations.                                                                            */
/***************************************************************************************************************************************/
phStatus_t phalMfpEVx_Sw_ResetSecMsgState(phalMfpEVx_Sw_DataParams_t * pDataParams)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b084      	sub	sp, #16
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
    phStatus_t wStatus = 0;
 800bd54:	2300      	movs	r3, #0
 800bd56:	81fb      	strh	r3, [r7, #14]

    pDataParams->wRCtr = 0;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	849a      	strh	r2, [r3, #36]	@ 0x24
    pDataParams->wWCtr = 0;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2200      	movs	r2, #0
 800bd62:	84da      	strh	r2, [r3, #38]	@ 0x26
    pDataParams->bNumUnprocessedReadMacBytes = 0;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2200      	movs	r2, #0
 800bd68:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
    pDataParams->bFirstRead = 1;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2201      	movs	r2, #1
 800bd70:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
    pDataParams->bSMMode = (uint8_t) PHAL_MFPEVX_SECURE_MESSAGE_EV0;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2200      	movs	r2, #0
 800bd78:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* State machine should be handled in a way where L3 activation or L4 activation shouldnot be lost */
    if((pDataParams->bAuthMode == PHAL_MFPEVX_SL3_MFP_AUTHENTICATED) ||
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800bd82:	2b03      	cmp	r3, #3
 800bd84:	d009      	beq.n	800bd9a <phalMfpEVx_Sw_ResetSecMsgState+0x4e>
        (pDataParams->bAuthMode == PHAL_MFPEVX_SL1_MFP_AUTHENTICATED) ||
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
    if((pDataParams->bAuthMode == PHAL_MFPEVX_SL3_MFP_AUTHENTICATED) ||
 800bd8c:	2b02      	cmp	r3, #2
 800bd8e:	d004      	beq.n	800bd9a <phalMfpEVx_Sw_ResetSecMsgState+0x4e>
        (pDataParams->bAuthMode == PHAL_MFPEVX_NOT_AUTHENTICATED_L4))
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
        (pDataParams->bAuthMode == PHAL_MFPEVX_SL1_MFP_AUTHENTICATED) ||
 800bd96:	2b05      	cmp	r3, #5
 800bd98:	d104      	bne.n	800bda4 <phalMfpEVx_Sw_ResetSecMsgState+0x58>
    {
        pDataParams->bAuthMode = PHAL_MFPEVX_NOT_AUTHENTICATED_L4;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2205      	movs	r2, #5
 800bd9e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800bda2:	e012      	b.n	800bdca <phalMfpEVx_Sw_ResetSecMsgState+0x7e>
    }
    else if((pDataParams->bAuthMode == PHAL_MFPEVX_NOT_AUTHENTICATED_L3) ||
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800bdaa:	2b04      	cmp	r3, #4
 800bdac:	d004      	beq.n	800bdb8 <phalMfpEVx_Sw_ResetSecMsgState+0x6c>
        (pDataParams->bAuthMode == PHAL_MFPEVX_SL1_MIFARE_AUTHENTICATED))
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
    else if((pDataParams->bAuthMode == PHAL_MFPEVX_NOT_AUTHENTICATED_L3) ||
 800bdb4:	2b01      	cmp	r3, #1
 800bdb6:	d104      	bne.n	800bdc2 <phalMfpEVx_Sw_ResetSecMsgState+0x76>
    {
        pDataParams->bAuthMode = PHAL_MFPEVX_NOT_AUTHENTICATED_L3;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2204      	movs	r2, #4
 800bdbc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800bdc0:	e003      	b.n	800bdca <phalMfpEVx_Sw_ResetSecMsgState+0x7e>
    }
    else
    {
        pDataParams->bAuthMode = PHAL_MFPEVX_NOTAUTHENTICATED;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    }

    (void) memset(pDataParams->bIv, 0x00, (size_t) sizeof(pDataParams->bIv));
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	3350      	adds	r3, #80	@ 0x50
 800bdce:	2210      	movs	r2, #16
 800bdd0:	2100      	movs	r1, #0
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f011 f994 	bl	801d100 <memset>
    (void) memset(pDataParams->bSesAuthENCKey, 0x00, (size_t) sizeof(pDataParams->bSesAuthENCKey));
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	3360      	adds	r3, #96	@ 0x60
 800bddc:	2210      	movs	r2, #16
 800bdde:	2100      	movs	r1, #0
 800bde0:	4618      	mov	r0, r3
 800bde2:	f011 f98d 	bl	801d100 <memset>
    (void) memset(pDataParams->bSesAuthMACKey, 0x00, (size_t) sizeof(pDataParams->bSesAuthMACKey));
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	3370      	adds	r3, #112	@ 0x70
 800bdea:	2210      	movs	r2, #16
 800bdec:	2100      	movs	r1, #0
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f011 f986 	bl	801d100 <memset>

    (void) memset(pDataParams->bTi, 0x00, PHAL_MFPEVX_SIZE_TI);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	332a      	adds	r3, #42	@ 0x2a
 800bdf8:	2204      	movs	r2, #4
 800bdfa:	2100      	movs	r1, #0
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f011 f97f 	bl	801d100 <memset>

    wStatus = phTMIUtils_ActivateTMICollection((phTMIUtils_t *) pDataParams->pTMIDataParams, PH_TMIUTILS_RESET_TMI);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	69db      	ldr	r3, [r3, #28]
 800be06:	2104      	movs	r1, #4
 800be08:	4618      	mov	r0, r3
 800be0a:	f7fa fb27 	bl	800645c <phTMIUtils_ActivateTMICollection>
 800be0e:	4603      	mov	r3, r0
 800be10:	81fb      	strh	r3, [r7, #14]

#ifdef NXPBUILD__PHAL_VCA
    /* Update the authentication state if VCA PC feature is required by the application. */
    if(pDataParams->pVCADataParams != NULL)
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6a1b      	ldr	r3, [r3, #32]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d009      	beq.n	800be2e <phalMfpEVx_Sw_ResetSecMsgState+0xe2>
    {
        wStatus = phalVca_SetSessionKeyUtility(pDataParams->pVCADataParams, pDataParams->bSesAuthMACKey,
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6a18      	ldr	r0, [r3, #32]
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	3370      	adds	r3, #112	@ 0x70
 800be22:	2200      	movs	r2, #0
 800be24:	4619      	mov	r1, r3
 800be26:	f000 fa8a 	bl	800c33e <phalVca_SetSessionKeyUtility>
 800be2a:	4603      	mov	r3, r0
 800be2c:	81fb      	strh	r3, [r7, #14]
            PHAL_MFPEVX_NOTAUTHENTICATED);
    }
#endif /* NXPBUILD__PHAL_VCA */

    return PH_ADD_COMPCODE(wStatus, PH_COMP_AL_MFPEVX);
 800be2e:	89fb      	ldrh	r3, [r7, #14]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d00b      	beq.n	800be4c <phalMfpEVx_Sw_ResetSecMsgState+0x100>
 800be34:	89fb      	ldrh	r3, [r7, #14]
 800be36:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d106      	bne.n	800be4c <phalMfpEVx_Sw_ResetSecMsgState+0x100>
 800be3e:	89fb      	ldrh	r3, [r7, #14]
 800be40:	b2db      	uxtb	r3, r3
 800be42:	b29b      	uxth	r3, r3
 800be44:	f443 5304 	orr.w	r3, r3, #8448	@ 0x2100
 800be48:	b29b      	uxth	r3, r3
 800be4a:	e000      	b.n	800be4e <phalMfpEVx_Sw_ResetSecMsgState+0x102>
 800be4c:	89fb      	ldrh	r3, [r7, #14]
}
 800be4e:	4618      	mov	r0, r3
 800be50:	3710      	adds	r7, #16
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}

0800be56 <phalMful_Sw_Init>:
                            void * pPalMifareDataParams,
                            void * pKeyStoreDataParams,
                            void * pCryptoDataParams,
                            void * pCryptoRngDataParams
                            )
{
 800be56:	b480      	push	{r7}
 800be58:	b085      	sub	sp, #20
 800be5a:	af00      	add	r7, sp, #0
 800be5c:	60f8      	str	r0, [r7, #12]
 800be5e:	607a      	str	r2, [r7, #4]
 800be60:	603b      	str	r3, [r7, #0]
 800be62:	460b      	mov	r3, r1
 800be64:	817b      	strh	r3, [r7, #10]
    if (sizeof(phalMful_Sw_DataParams_t) != wSizeOfDataParams)
 800be66:	897b      	ldrh	r3, [r7, #10]
 800be68:	2b1c      	cmp	r3, #28
 800be6a:	d002      	beq.n	800be72 <phalMful_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFUL);
 800be6c:	f44f 5389 	mov.w	r3, #4384	@ 0x1120
 800be70:	e026      	b.n	800bec0 <phalMful_Sw_Init+0x6a>
    }
    PH_ASSERT_NULL (pDataParams);
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d101      	bne.n	800be7c <phalMful_Sw_Init+0x26>
 800be78:	2321      	movs	r3, #33	@ 0x21
 800be7a:	e021      	b.n	800bec0 <phalMful_Sw_Init+0x6a>
    PH_ASSERT_NULL (pPalMifareDataParams);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d101      	bne.n	800be86 <phalMful_Sw_Init+0x30>
 800be82:	2321      	movs	r3, #33	@ 0x21
 800be84:	e01c      	b.n	800bec0 <phalMful_Sw_Init+0x6a>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_MFUL | PHAL_MFUL_SW_ID;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	f241 1201 	movw	r2, #4353	@ 0x1101
 800be8c:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams   = pPalMifareDataParams;
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	687a      	ldr	r2, [r7, #4]
 800be92:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	683a      	ldr	r2, [r7, #0]
 800be98:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParams      = pCryptoDataParams;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	69ba      	ldr	r2, [r7, #24]
 800be9e:	60da      	str	r2, [r3, #12]
    pDataParams->pCryptoRngDataParams   = pCryptoRngDataParams;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	69fa      	ldr	r2, [r7, #28]
 800bea4:	611a      	str	r2, [r3, #16]
    pDataParams->bAuthMode              = PHAL_MFUL_NOT_AUTHENTICATED;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	22ff      	movs	r2, #255	@ 0xff
 800beaa:	761a      	strb	r2, [r3, #24]
    pDataParams->bCMACReq               = PH_OFF;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	2200      	movs	r2, #0
 800beb0:	751a      	strb	r2, [r3, #20]
    pDataParams->wCmdCtr                = 0x00U;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	2200      	movs	r2, #0
 800beb6:	82da      	strh	r2, [r3, #22]
    pDataParams->bAdditionalInfo        = 0x00U;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	2200      	movs	r2, #0
 800bebc:	765a      	strb	r2, [r3, #25]
    return PH_ERR_SUCCESS;
 800bebe:	2300      	movs	r3, #0
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3714      	adds	r7, #20
 800bec4:	46bd      	mov	sp, r7
 800bec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beca:	4770      	bx	lr

0800becc <phalT1T_Sw_Init>:
phStatus_t phalT1T_Sw_Init(
                           phalT1T_Sw_DataParams_t * pDataParams,
                           uint16_t wSizeOfDataParams,
                           void * pPalI14443p3aDataParams
                           )
{
 800becc:	b480      	push	{r7}
 800bece:	b085      	sub	sp, #20
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	60f8      	str	r0, [r7, #12]
 800bed4:	460b      	mov	r3, r1
 800bed6:	607a      	str	r2, [r7, #4]
 800bed8:	817b      	strh	r3, [r7, #10]
    if (sizeof(phalT1T_Sw_DataParams_t) != wSizeOfDataParams)
 800beda:	897b      	ldrh	r3, [r7, #10]
 800bedc:	2b10      	cmp	r3, #16
 800bede:	d002      	beq.n	800bee6 <phalT1T_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_T1T);
 800bee0:	f44f 53e1 	mov.w	r3, #7200	@ 0x1c20
 800bee4:	e011      	b.n	800bf0a <phalT1T_Sw_Init+0x3e>
    }

    PH_ASSERT_NULL (pDataParams);
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d101      	bne.n	800bef0 <phalT1T_Sw_Init+0x24>
 800beec:	2321      	movs	r3, #33	@ 0x21
 800beee:	e00c      	b.n	800bf0a <phalT1T_Sw_Init+0x3e>
    PH_ASSERT_NULL (pPalI14443p3aDataParams);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d101      	bne.n	800befa <phalT1T_Sw_Init+0x2e>
 800bef6:	2321      	movs	r3, #33	@ 0x21
 800bef8:	e007      	b.n	800bf0a <phalT1T_Sw_Init+0x3e>

    /* Initialize private data */
    pDataParams->wId = PH_COMP_AL_T1T | PHAL_T1T_SW_ID;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	f641 4201 	movw	r2, #7169	@ 0x1c01
 800bf00:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalI14443p3aDataParams = pPalI14443p3aDataParams;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	687a      	ldr	r2, [r7, #4]
 800bf06:	605a      	str	r2, [r3, #4]

    return PH_ERR_SUCCESS;
 800bf08:	2300      	movs	r3, #0
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3714      	adds	r7, #20
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf14:	4770      	bx	lr

0800bf16 <phalT1T_Sw_ReadUID>:
phStatus_t phalT1T_Sw_ReadUID(
                              phalT1T_Sw_DataParams_t * pDataParams,
                              uint8_t * pUid,
                              uint16_t * pLength
                              )
{
 800bf16:	b580      	push	{r7, lr}
 800bf18:	b08c      	sub	sp, #48	@ 0x30
 800bf1a:	af02      	add	r7, sp, #8
 800bf1c:	60f8      	str	r0, [r7, #12]
 800bf1e:	60b9      	str	r1, [r7, #8]
 800bf20:	607a      	str	r2, [r7, #4]
    phStatus_t PH_MEMLOC_REM statusTmp;
    uint8_t    PH_MEMLOC_REM bCountLoop;
    uint8_t *  PH_MEMLOC_REM pRxBuffer = NULL;
 800bf22:	2300      	movs	r3, #0
 800bf24:	61fb      	str	r3, [r7, #28]
    uint16_t   PH_MEMLOC_REM wTxLength = 7;
 800bf26:	2307      	movs	r3, #7
 800bf28:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint16_t   PH_MEMLOC_REM wUIDLength = 4;
 800bf2a:	2304      	movs	r3, #4
 800bf2c:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint8_t    PH_MEMLOC_REM abTxBuffer[] = {PHAL_T1T_CMD_READUID, 0x00,
 800bf2e:	2378      	movs	r3, #120	@ 0x78
 800bf30:	617b      	str	r3, [r7, #20]
 800bf32:	f107 0318 	add.w	r3, r7, #24
 800bf36:	2100      	movs	r1, #0
 800bf38:	460a      	mov	r2, r1
 800bf3a:	801a      	strh	r2, [r3, #0]
 800bf3c:	460a      	mov	r2, r1
 800bf3e:	709a      	strb	r2, [r3, #2]
                                             0x00, 0x00, 0x00, 0x00, 0x00};

    /* Set command timeout */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p3a_SetConfig(
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	685b      	ldr	r3, [r3, #4]
 800bf44:	f240 1223 	movw	r2, #291	@ 0x123
 800bf48:	2103      	movs	r1, #3
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f006 fecd 	bl	8012cea <phpalI14443p3a_Sw_SetConfig>
 800bf50:	4603      	mov	r3, r0
 800bf52:	843b      	strh	r3, [r7, #32]
 800bf54:	8c3b      	ldrh	r3, [r7, #32]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d001      	beq.n	800bf5e <phalT1T_Sw_ReadUID+0x48>
 800bf5a:	8c3b      	ldrh	r3, [r7, #32]
 800bf5c:	e05c      	b.n	800c018 <phalT1T_Sw_ReadUID+0x102>
        pDataParams->pPalI14443p3aDataParams,
        PHPAL_I14443P3A_CONFIG_TIMEOUT_VALUE_US,
        PHAL_T1T_SW_READ_TIME_US + PHAL_T1T_SW_EXT_TIME_US));

    /* Send and receive the data */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p3a_Exchange(
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	6858      	ldr	r0, [r3, #4]
 800bf62:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 800bf64:	f107 0214 	add.w	r2, r7, #20
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	9301      	str	r3, [sp, #4]
 800bf6c:	f107 031c 	add.w	r3, r7, #28
 800bf70:	9300      	str	r3, [sp, #0]
 800bf72:	460b      	mov	r3, r1
 800bf74:	2100      	movs	r1, #0
 800bf76:	f007 fb63 	bl	8013640 <phpalI14443p3a_Sw_Exchange>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	843b      	strh	r3, [r7, #32]
 800bf7e:	8c3b      	ldrh	r3, [r7, #32]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d001      	beq.n	800bf88 <phalT1T_Sw_ReadUID+0x72>
 800bf84:	8c3b      	ldrh	r3, [r7, #32]
 800bf86:	e047      	b.n	800c018 <phalT1T_Sw_ReadUID+0x102>
        &abTxBuffer[0],
        wTxLength,
        &pRxBuffer,
        pLength));

    if(((phpalI14443p3a_Sw_DataParams_t*)(pDataParams->pPalI14443p3aDataParams))->bOpeMode == RD_LIB_MODE_NFC)
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	685b      	ldr	r3, [r3, #4]
 800bf8c:	7d1b      	ldrb	r3, [r3, #20]
 800bf8e:	2b02      	cmp	r3, #2
 800bf90:	d10c      	bne.n	800bfac <phalT1T_Sw_ReadUID+0x96>
    {
        /* Check received length. NFC Digital Protocol 1.1-10.6.2.1 */
        if ((*pLength != PHAL_T1T_READUID_RESP_LEN) ||
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	881b      	ldrh	r3, [r3, #0]
 800bf96:	2b06      	cmp	r3, #6
 800bf98:	d105      	bne.n	800bfa6 <phalT1T_Sw_ReadUID+0x90>
            ((pRxBuffer[0] & PHAL_T1T_HEADER_ROM0) != PHAL_T1T_HEADER_ROM0))
 800bf9a:	69fb      	ldr	r3, [r7, #28]
 800bf9c:	781b      	ldrb	r3, [r3, #0]
 800bf9e:	f003 0310 	and.w	r3, r3, #16
        if ((*pLength != PHAL_T1T_READUID_RESP_LEN) ||
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d109      	bne.n	800bfba <phalT1T_Sw_ReadUID+0xa4>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_AL_T1T);
 800bfa6:	f641 4306 	movw	r3, #7174	@ 0x1c06
 800bfaa:	e035      	b.n	800c018 <phalT1T_Sw_ReadUID+0x102>
        }
    }
    else
    {
        if (*pLength != PHAL_T1T_READUID_RESP_LEN)
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	881b      	ldrh	r3, [r3, #0]
 800bfb0:	2b06      	cmp	r3, #6
 800bfb2:	d002      	beq.n	800bfba <phalT1T_Sw_ReadUID+0xa4>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_AL_T1T);
 800bfb4:	f641 4306 	movw	r3, #7174	@ 0x1c06
 800bfb8:	e02e      	b.n	800c018 <phalT1T_Sw_ReadUID+0x102>
        }
    }

    /* Update the Header ROM bytes */
    pDataParams->abHR[0] = pRxBuffer[0];
 800bfba:	69fb      	ldr	r3, [r7, #28]
 800bfbc:	781a      	ldrb	r2, [r3, #0]
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	721a      	strb	r2, [r3, #8]
    pDataParams->abHR[1] = pRxBuffer[1];
 800bfc2:	69fb      	ldr	r3, [r7, #28]
 800bfc4:	785a      	ldrb	r2, [r3, #1]
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	725a      	strb	r2, [r3, #9]

    /* Update the UID */
    for(bCountLoop = 0; bCountLoop < 4U; bCountLoop++)
 800bfca:	2300      	movs	r3, #0
 800bfcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bfd0:	e01a      	b.n	800c008 <phalT1T_Sw_ReadUID+0xf2>
    {
        pDataParams->abUid[bCountLoop] = pRxBuffer[bCountLoop+2U];
 800bfd2:	69fa      	ldr	r2, [r7, #28]
 800bfd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bfd8:	3302      	adds	r3, #2
 800bfda:	441a      	add	r2, r3
 800bfdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bfe0:	7811      	ldrb	r1, [r2, #0]
 800bfe2:	68fa      	ldr	r2, [r7, #12]
 800bfe4:	4413      	add	r3, r2
 800bfe6:	460a      	mov	r2, r1
 800bfe8:	729a      	strb	r2, [r3, #10]
        pUid[bCountLoop] = pDataParams->abUid[bCountLoop];
 800bfea:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800bfee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bff2:	68b9      	ldr	r1, [r7, #8]
 800bff4:	440b      	add	r3, r1
 800bff6:	68f9      	ldr	r1, [r7, #12]
 800bff8:	440a      	add	r2, r1
 800bffa:	7a92      	ldrb	r2, [r2, #10]
 800bffc:	701a      	strb	r2, [r3, #0]
    for(bCountLoop = 0; bCountLoop < 4U; bCountLoop++)
 800bffe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c002:	3301      	adds	r3, #1
 800c004:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c008:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c00c:	2b03      	cmp	r3, #3
 800c00e:	d9e0      	bls.n	800bfd2 <phalT1T_Sw_ReadUID+0xbc>
    }

    (*pLength) = wUIDLength;   /* UID length */
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c014:	801a      	strh	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 800c016:	2300      	movs	r3, #0
}
 800c018:	4618      	mov	r0, r3
 800c01a:	3728      	adds	r7, #40	@ 0x28
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <phalTop_Sw_Init>:
                           void * pAlFelica,
                           void * pPalMifareDataParams,
                           void * pAl15693,
                           void * pPalI14443paDataParams
                           )
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b084      	sub	sp, #16
 800c024:	af00      	add	r7, sp, #0
 800c026:	60f8      	str	r0, [r7, #12]
 800c028:	607a      	str	r2, [r7, #4]
 800c02a:	603b      	str	r3, [r7, #0]
 800c02c:	460b      	mov	r3, r1
 800c02e:	817b      	strh	r3, [r7, #10]
    if (sizeof(phalTop_Sw_DataParams_t) != wSizeOfDataParams)
 800c030:	897b      	ldrh	r3, [r7, #10]
 800c032:	2b80      	cmp	r3, #128	@ 0x80
 800c034:	d002      	beq.n	800c03c <phalTop_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_TOP);
 800c036:	f44f 53e9 	mov.w	r3, #7456	@ 0x1d20
 800c03a:	e01e      	b.n	800c07a <phalTop_Sw_Init+0x5a>
    }

    PH_ASSERT_NULL (pDataParams);
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d101      	bne.n	800c046 <phalTop_Sw_Init+0x26>
 800c042:	2321      	movs	r3, #33	@ 0x21
 800c044:	e019      	b.n	800c07a <phalTop_Sw_Init+0x5a>

    pDataParams->wId = PH_COMP_AL_TOP | PHAL_TOP_SW_ID;
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	f641 5201 	movw	r2, #7425	@ 0x1d01
 800c04c:	801a      	strh	r2, [r3, #0]
    pDataParams->pTopTagsDataParams[0] = pAlT1T;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	687a      	ldr	r2, [r7, #4]
 800c052:	611a      	str	r2, [r3, #16]
    pDataParams->pTopTagsDataParams[1] = pAlMful;
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	683a      	ldr	r2, [r7, #0]
 800c058:	615a      	str	r2, [r3, #20]
    pDataParams->pTopTagsDataParams[2] = pAlFelica;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	69ba      	ldr	r2, [r7, #24]
 800c05e:	619a      	str	r2, [r3, #24]
    pDataParams->pTopTagsDataParams[3] = pPalMifareDataParams;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	69fa      	ldr	r2, [r7, #28]
 800c064:	61da      	str	r2, [r3, #28]
    pDataParams->pTopTagsDataParams[4] = pAl15693;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	6a3a      	ldr	r2, [r7, #32]
 800c06a:	621a      	str	r2, [r3, #32]
    pDataParams->pTopTagsDataParams[5] = pPalI14443paDataParams;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c070:	625a      	str	r2, [r3, #36]	@ 0x24

    return phalTop_Sw_Reset(pDataParams);
 800c072:	68f8      	ldr	r0, [r7, #12]
 800c074:	f000 f805 	bl	800c082 <phalTop_Sw_Reset>
 800c078:	4603      	mov	r3, r0
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3710      	adds	r7, #16
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}

0800c082 <phalTop_Sw_Reset>:
}

phStatus_t phalTop_Sw_Reset(
                            phalTop_Sw_DataParams_t * pDataParams
                            )
{
 800c082:	b580      	push	{r7, lr}
 800c084:	b082      	sub	sp, #8
 800c086:	af00      	add	r7, sp, #0
 800c088:	6078      	str	r0, [r7, #4]

    /* Reset common variables */
    pDataParams->bTagState = 0;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2200      	movs	r2, #0
 800c08e:	711a      	strb	r2, [r3, #4]
    pDataParams->bTagType = 0;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2200      	movs	r2, #0
 800c094:	709a      	strb	r2, [r3, #2]
    pDataParams->bVno = 0;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2200      	movs	r2, #0
 800c09a:	70da      	strb	r2, [r3, #3]
    pDataParams->dwNdefLength = 0;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2200      	movs	r2, #0
 800c0a0:	609a      	str	r2, [r3, #8]
    pDataParams->dwMaxNdefLength = 0;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	60da      	str	r2, [r3, #12]

    (void)memset(&pDataParams->ualTop, 0x00, (size_t)(sizeof(pDataParams->ualTop)));
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	3328      	adds	r3, #40	@ 0x28
 800c0ac:	2258      	movs	r2, #88	@ 0x58
 800c0ae:	2100      	movs	r1, #0
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f011 f825 	bl	801d100 <memset>

    return PH_ERR_SUCCESS;
 800c0b6:	2300      	movs	r3, #0
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3708      	adds	r7, #8
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}

0800c0c0 <phalVca_Sw_Init>:
#endif /* NXPBUILD__PH_CRYPTOSYM */

phStatus_t phalVca_Sw_Init(phalVca_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams,  void * pPalMifareDataParams, void * pKeyStoreDataParams,
    void * pCryptoDataParams, void * pCryptoRngDataParams, phalVca_Sw_IidTableEntry_t * pIidTableStorage, uint16_t wNumIidTableStorageEntries,
    phalVca_Sw_CardTableEntry_t * pCardTableStorage, uint16_t wNumCardTableStorageEntries)
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b085      	sub	sp, #20
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	60f8      	str	r0, [r7, #12]
 800c0c8:	607a      	str	r2, [r7, #4]
 800c0ca:	603b      	str	r3, [r7, #0]
 800c0cc:	460b      	mov	r3, r1
 800c0ce:	817b      	strh	r3, [r7, #10]
    if (sizeof(phalVca_Sw_DataParams_t) != wSizeOfDataParams)
 800c0d0:	897b      	ldrh	r3, [r7, #10]
 800c0d2:	2b54      	cmp	r3, #84	@ 0x54
 800c0d4:	d002      	beq.n	800c0dc <phalVca_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_VCA);
 800c0d6:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800c0da:	e06d      	b.n	800c1b8 <phalVca_Sw_Init+0xf8>
    }

    PH_ASSERT_NULL_DATA_PARAM (pDataParams, PH_COMP_AL_VCA);
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d102      	bne.n	800c0e8 <phalVca_Sw_Init+0x28>
 800c0e2:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800c0e6:	e067      	b.n	800c1b8 <phalVca_Sw_Init+0xf8>
    PH_ASSERT_NULL_PARAM (pPalMifareDataParams, PH_COMP_AL_VCA);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d102      	bne.n	800c0f4 <phalVca_Sw_Init+0x34>
 800c0ee:	f241 3321 	movw	r3, #4897	@ 0x1321
 800c0f2:	e061      	b.n	800c1b8 <phalVca_Sw_Init+0xf8>

#ifdef NXPBUILD__PH_CRYPTOSYM
    PH_ASSERT_NULL_PARAM (pKeyStoreDataParams, PH_COMP_AL_VCA);
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d102      	bne.n	800c100 <phalVca_Sw_Init+0x40>
 800c0fa:	f241 3321 	movw	r3, #4897	@ 0x1321
 800c0fe:	e05b      	b.n	800c1b8 <phalVca_Sw_Init+0xf8>
    PH_ASSERT_NULL_PARAM (pCryptoDataParams, PH_COMP_AL_VCA);
 800c100:	69bb      	ldr	r3, [r7, #24]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d102      	bne.n	800c10c <phalVca_Sw_Init+0x4c>
 800c106:	f241 3321 	movw	r3, #4897	@ 0x1321
 800c10a:	e055      	b.n	800c1b8 <phalVca_Sw_Init+0xf8>
    PH_ASSERT_NULL_PARAM (pCryptoRngDataParams, PH_COMP_AL_VCA);
 800c10c:	69fb      	ldr	r3, [r7, #28]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d102      	bne.n	800c118 <phalVca_Sw_Init+0x58>
 800c112:	f241 3321 	movw	r3, #4897	@ 0x1321
 800c116:	e04f      	b.n	800c1b8 <phalVca_Sw_Init+0xf8>
#endif /* NXPBUILD__PH_CRYPTOSYM */

    if (0U != (wNumIidTableStorageEntries)) PH_ASSERT_NULL_PARAM (pIidTableStorage, PH_COMP_AL_VCA);
 800c118:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d005      	beq.n	800c12a <phalVca_Sw_Init+0x6a>
 800c11e:	6a3b      	ldr	r3, [r7, #32]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d102      	bne.n	800c12a <phalVca_Sw_Init+0x6a>
 800c124:	f241 3321 	movw	r3, #4897	@ 0x1321
 800c128:	e046      	b.n	800c1b8 <phalVca_Sw_Init+0xf8>
    if (0U != (wNumCardTableStorageEntries)) PH_ASSERT_NULL_PARAM (pCardTableStorage, PH_COMP_AL_VCA);
 800c12a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d005      	beq.n	800c13c <phalVca_Sw_Init+0x7c>
 800c130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c132:	2b00      	cmp	r3, #0
 800c134:	d102      	bne.n	800c13c <phalVca_Sw_Init+0x7c>
 800c136:	f241 3321 	movw	r3, #4897	@ 0x1321
 800c13a:	e03d      	b.n	800c1b8 <phalVca_Sw_Init+0xf8>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_VCA | PHAL_VCA_SW_ID;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	f241 3201 	movw	r2, #4865	@ 0x1301
 800c142:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams   = pPalMifareDataParams;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	687a      	ldr	r2, [r7, #4]
 800c148:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	683a      	ldr	r2, [r7, #0]
 800c14e:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParams      = pCryptoDataParams;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	69ba      	ldr	r2, [r7, #24]
 800c154:	60da      	str	r2, [r3, #12]
    pDataParams->wCurrentCardTablePos   = 0;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	2200      	movs	r2, #0
 800c15a:	839a      	strh	r2, [r3, #28]
    pDataParams->pCardTable             = pCardTableStorage;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c160:	615a      	str	r2, [r3, #20]
    pDataParams->wNumCardTableEntries   = wNumCardTableStorageEntries;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800c166:	83da      	strh	r2, [r3, #30]
    pDataParams->pIidTable              = pIidTableStorage;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	6a3a      	ldr	r2, [r7, #32]
 800c16c:	619a      	str	r2, [r3, #24]
    pDataParams->wCurrentIidTablePos    = 0;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	2200      	movs	r2, #0
 800c172:	849a      	strh	r2, [r3, #36]	@ 0x24
    pDataParams->wNumIidTableEntries    = wNumIidTableStorageEntries;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c178:	841a      	strh	r2, [r3, #32]
    pDataParams->pCryptoRngDataParams   = pCryptoRngDataParams;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	69fa      	ldr	r2, [r7, #28]
 800c17e:	611a      	str	r2, [r3, #16]
    pDataParams->wAdditionalInfo        = PH_ERR_SUCCESS;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	2200      	movs	r2, #0
 800c184:	84da      	strh	r2, [r3, #38]	@ 0x26
    pDataParams->eVCState               = VC_NOT_SELECTED;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	2200      	movs	r2, #0
 800c18a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    pDataParams->ePCState               = PC_NO_PCHK_IN_PROGRESS;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	2200      	movs	r2, #0
 800c192:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
    pDataParams->bWrappedMode           = 0;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	2200      	movs	r2, #0
 800c19a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    pDataParams->bExtendedLenApdu       = 0;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    pDataParams->bOption                = 1;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	2201      	movs	r2, #1
 800c1aa:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
    pDataParams->bLowerBoundThreshold   = 0;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53

    return PH_ERR_SUCCESS;
 800c1b6:	2300      	movs	r3, #0
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	3714      	adds	r7, #20
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c2:	4770      	bx	lr

0800c1c4 <phalVca_Sw_SetSessionKeyUtility>:

    return PH_ERR_SUCCESS;
}

phStatus_t phalVca_Sw_SetSessionKeyUtility(phalVca_Sw_DataParams_t * pDataParams, uint8_t * pSessionKey, uint8_t bAuthMode)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b084      	sub	sp, #16
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	60f8      	str	r0, [r7, #12]
 800c1cc:	60b9      	str	r1, [r7, #8]
 800c1ce:	4613      	mov	r3, r2
 800c1d0:	71fb      	strb	r3, [r7, #7]
     * case-1: VCState = Authenticated, Session keys from DesfireEV2 should be used for MAC calculations
     * case-2: VCState = Proximity Check or Not Authenticated, VC Proximity Key should be used for MAC calculations
     * case-3: VCState = No VC Selected, DummyMACKey of type AES 128 should be used for MAC calculations.
     */
    /* Handling Case-1. First need to get the card auth type(AES, DES, ISO, EV2) and set the VC state based on the Auth Mode */
    switch(bAuthMode)
 800c1d2:	79fb      	ldrb	r3, [r7, #7]
 800c1d4:	2bff      	cmp	r3, #255	@ 0xff
 800c1d6:	d07d      	beq.n	800c2d4 <phalVca_Sw_SetSessionKeyUtility+0x110>
 800c1d8:	2bff      	cmp	r3, #255	@ 0xff
 800c1da:	f300 808c 	bgt.w	800c2f6 <phalVca_Sw_SetSessionKeyUtility+0x132>
 800c1de:	2baa      	cmp	r3, #170	@ 0xaa
 800c1e0:	d04f      	beq.n	800c282 <phalVca_Sw_SetSessionKeyUtility+0xbe>
 800c1e2:	2baa      	cmp	r3, #170	@ 0xaa
 800c1e4:	f300 8087 	bgt.w	800c2f6 <phalVca_Sw_SetSessionKeyUtility+0x132>
 800c1e8:	2b1a      	cmp	r3, #26
 800c1ea:	dc3d      	bgt.n	800c268 <phalVca_Sw_SetSessionKeyUtility+0xa4>
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	f2c0 8082 	blt.w	800c2f6 <phalVca_Sw_SetSessionKeyUtility+0x132>
 800c1f2:	2b1a      	cmp	r3, #26
 800c1f4:	d87f      	bhi.n	800c2f6 <phalVca_Sw_SetSessionKeyUtility+0x132>
 800c1f6:	a201      	add	r2, pc, #4	@ (adr r2, 800c1fc <phalVca_Sw_SetSessionKeyUtility+0x38>)
 800c1f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1fc:	0800c2cb 	.word	0x0800c2cb
 800c200:	0800c2f7 	.word	0x0800c2f7
 800c204:	0800c29b 	.word	0x0800c29b
 800c208:	0800c2b3 	.word	0x0800c2b3
 800c20c:	0800c2cb 	.word	0x0800c2cb
 800c210:	0800c2cb 	.word	0x0800c2cb
 800c214:	0800c2f7 	.word	0x0800c2f7
 800c218:	0800c2f7 	.word	0x0800c2f7
 800c21c:	0800c2f7 	.word	0x0800c2f7
 800c220:	0800c2f7 	.word	0x0800c2f7
 800c224:	0800c26f 	.word	0x0800c26f
 800c228:	0800c2f7 	.word	0x0800c2f7
 800c22c:	0800c2f7 	.word	0x0800c2f7
 800c230:	0800c2f7 	.word	0x0800c2f7
 800c234:	0800c2f7 	.word	0x0800c2f7
 800c238:	0800c2f7 	.word	0x0800c2f7
 800c23c:	0800c2f7 	.word	0x0800c2f7
 800c240:	0800c2f7 	.word	0x0800c2f7
 800c244:	0800c2f7 	.word	0x0800c2f7
 800c248:	0800c2f7 	.word	0x0800c2f7
 800c24c:	0800c2f7 	.word	0x0800c2f7
 800c250:	0800c2f7 	.word	0x0800c2f7
 800c254:	0800c2f7 	.word	0x0800c2f7
 800c258:	0800c2f7 	.word	0x0800c2f7
 800c25c:	0800c2f7 	.word	0x0800c2f7
 800c260:	0800c2f7 	.word	0x0800c2f7
 800c264:	0800c279 	.word	0x0800c279
 800c268:	2b71      	cmp	r3, #113	@ 0x71
 800c26a:	d038      	beq.n	800c2de <phalVca_Sw_SetSessionKeyUtility+0x11a>
 800c26c:	e043      	b.n	800c2f6 <phalVca_Sw_SetSessionKeyUtility+0x132>
    {
#ifdef NXPBUILD__PHAL_MFDFEVX_SW
    case PHAL_MFDFEVX_AUTHENTICATE:
        pDataParams->eVCState = VC_DF_AUTH_D40;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	2204      	movs	r2, #4
 800c272:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        break;
 800c276:	e043      	b.n	800c300 <phalVca_Sw_SetSessionKeyUtility+0x13c>

    case PHAL_MFDFEVX_AUTHENTICATEISO:
        pDataParams->eVCState = VC_DF_AUTH_ISO;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	2205      	movs	r2, #5
 800c27c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        break;
 800c280:	e03e      	b.n	800c300 <phalVca_Sw_SetSessionKeyUtility+0x13c>

    case PHAL_MFDFEVX_AUTHENTICATEAES:
        pDataParams->eVCState = VC_DF_AUTH_AES;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	2207      	movs	r2, #7
 800c286:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

        /* Set the session key (since session key is AES) to the VCA structure parameter */
        (void)memcpy(pDataParams->bSessionAuthMACKey, pSessionKey, sizeof(pDataParams->bSessionAuthMACKey));
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	3328      	adds	r3, #40	@ 0x28
 800c28e:	2220      	movs	r2, #32
 800c290:	68b9      	ldr	r1, [r7, #8]
 800c292:	4618      	mov	r0, r3
 800c294:	f010 ffb3 	bl	801d1fe <memcpy>
        break;
 800c298:	e032      	b.n	800c300 <phalVca_Sw_SetSessionKeyUtility+0x13c>
#endif /* NXPBUILD__PHAL_MFDFEVX_SW */
#ifdef NXPBUILD__PHAL_MFPEVX_SW
    case PHAL_MFPEVX_SL1_MFP_AUTHENTICATED:
        pDataParams->eVCState = VC_MFP_AUTH_AES_SL1;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	2208      	movs	r2, #8
 800c29e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

        /* Set the session key (since session key is AES) to the VCA structure parameter */
        (void)memcpy(pDataParams->bSessionAuthMACKey, pSessionKey, sizeof(pDataParams->bSessionAuthMACKey));
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	3328      	adds	r3, #40	@ 0x28
 800c2a6:	2220      	movs	r2, #32
 800c2a8:	68b9      	ldr	r1, [r7, #8]
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f010 ffa7 	bl	801d1fe <memcpy>
        break;
 800c2b0:	e026      	b.n	800c300 <phalVca_Sw_SetSessionKeyUtility+0x13c>

    case PHAL_MFPEVX_SL3_MFP_AUTHENTICATED:
        pDataParams->eVCState = VC_MFP_AUTH_AES_SL3;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	2209      	movs	r2, #9
 800c2b6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

        /* Set the session key (since session key is AES) to the VCA structure parameter */
        (void)memcpy(pDataParams->bSessionAuthMACKey, pSessionKey, sizeof(pDataParams->bSessionAuthMACKey));
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	3328      	adds	r3, #40	@ 0x28
 800c2be:	2220      	movs	r2, #32
 800c2c0:	68b9      	ldr	r1, [r7, #8]
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f010 ff9b 	bl	801d1fe <memcpy>
        break;
 800c2c8:	e01a      	b.n	800c300 <phalVca_Sw_SetSessionKeyUtility+0x13c>

    case PHAL_MFPEVX_NOTAUTHENTICATED:
    case PHAL_MFPEVX_NOT_AUTHENTICATED_L3:
    case PHAL_MFPEVX_NOT_AUTHENTICATED_L4:
        pDataParams->eVCState = VC_DF_NOT_AUTH;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	2203      	movs	r2, #3
 800c2ce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        break;
 800c2d2:	e015      	b.n	800c300 <phalVca_Sw_SetSessionKeyUtility+0x13c>
#endif /* NXPBUILD__PHAL_MFPEVX_SW */
#if defined(NXPBUILD__PHAL_MFDFEVX_SW) || defined(NXPBUILD__PHAL_MFDUOX_SW)
    case 0xFFU :  /* Not Authenticate state for DESFire and DUOX PICC */
        pDataParams->eVCState = VC_DF_NOT_AUTH;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2203      	movs	r2, #3
 800c2d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        break;
 800c2dc:	e010      	b.n	800c300 <phalVca_Sw_SetSessionKeyUtility+0x13c>

    case 0x71U:  /* EV2 Authenticate state for DESFire and DUOX PICC */
        pDataParams->eVCState = VC_DF_AUTH_EV2;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	2206      	movs	r2, #6
 800c2e2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

        /* Set the session key (since session key is AES) to the VCA structure parameter */
        (void)memcpy(pDataParams->bSessionAuthMACKey, pSessionKey, sizeof(pDataParams->bSessionAuthMACKey));
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	3328      	adds	r3, #40	@ 0x28
 800c2ea:	2220      	movs	r2, #32
 800c2ec:	68b9      	ldr	r1, [r7, #8]
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f010 ff85 	bl	801d1fe <memcpy>
        break;
 800c2f4:	e004      	b.n	800c300 <phalVca_Sw_SetSessionKeyUtility+0x13c>
        (void)memcpy(pDataParams->bSessionAuthMACKey, pSessionKey, sizeof(pDataParams->bSessionAuthMACKey));
        break;
#endif /* NXPBUILD__PHAL_MFDUOX_SW */

    default:
        pDataParams->eVCState = VC_NOT_SELECTED;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        break;
 800c2fe:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 800c300:	2300      	movs	r3, #0
}
 800c302:	4618      	mov	r0, r3
 800c304:	3710      	adds	r7, #16
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}
 800c30a:	bf00      	nop

0800c30c <phalVca_Sw_SetApplicationType>:

phStatus_t phalVca_Sw_SetApplicationType(phalVca_Sw_DataParams_t * pDataParams, void * pAlDataParams)
{
 800c30c:	b480      	push	{r7}
 800c30e:	b083      	sub	sp, #12
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	6039      	str	r1, [r7, #0]
    PH_ASSERT_NULL (pDataParams);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d101      	bne.n	800c320 <phalVca_Sw_SetApplicationType+0x14>
 800c31c:	2321      	movs	r3, #33	@ 0x21
 800c31e:	e008      	b.n	800c332 <phalVca_Sw_SetApplicationType+0x26>
    PH_ASSERT_NULL (pAlDataParams);
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d101      	bne.n	800c32a <phalVca_Sw_SetApplicationType+0x1e>
 800c326:	2321      	movs	r3, #33	@ 0x21
 800c328:	e003      	b.n	800c332 <phalVca_Sw_SetApplicationType+0x26>

    pDataParams->pAlDataParams = pAlDataParams;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	683a      	ldr	r2, [r7, #0]
 800c32e:	64da      	str	r2, [r3, #76]	@ 0x4c

    return PH_ERR_SUCCESS;
 800c330:	2300      	movs	r3, #0
}
 800c332:	4618      	mov	r0, r3
 800c334:	370c      	adds	r7, #12
 800c336:	46bd      	mov	sp, r7
 800c338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33c:	4770      	bx	lr

0800c33e <phalVca_SetSessionKeyUtility>:
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);
    return status;
}

phStatus_t phalVca_SetSessionKeyUtility(void * pDataParams, uint8_t * pSessionKey, uint8_t bAuthMode)
{
 800c33e:	b580      	push	{r7, lr}
 800c340:	b086      	sub	sp, #24
 800c342:	af00      	add	r7, sp, #0
 800c344:	60f8      	str	r0, [r7, #12]
 800c346:	60b9      	str	r1, [r7, #8]
 800c348:	4613      	mov	r3, r2
 800c34a:	71fb      	strb	r3, [r7, #7]
    PH_LOG_HELPER_ADDPARAM_UINT8(PH_LOG_LOGTYPE_DEBUG, bAuthMode_log, &bAuthMode);
    PH_LOG_HELPER_ADDPARAM_BUFFER(PH_LOG_LOGTYPE_DEBUG, pSessionKey_log, pSessionKey, 16);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Validate the parameters */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_AL_VCA);
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d102      	bne.n	800c358 <phalVca_SetSessionKeyUtility+0x1a>
 800c352:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800c356:	e024      	b.n	800c3a2 <phalVca_SetSessionKeyUtility+0x64>
    PH_ASSERT_NULL_PARAM(pSessionKey, PH_COMP_AL_VCA);
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d102      	bne.n	800c364 <phalVca_SetSessionKeyUtility+0x26>
 800c35e:	f241 3321 	movw	r3, #4897	@ 0x1321
 800c362:	e01e      	b.n	800c3a2 <phalVca_SetSessionKeyUtility+0x64>

    /* Check data parameters */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_AL_VCA)
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	881b      	ldrh	r3, [r3, #0]
 800c368:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c36c:	f5b3 5f98 	cmp.w	r3, #4864	@ 0x1300
 800c370:	d004      	beq.n	800c37c <phalVca_SetSessionKeyUtility+0x3e>
    {
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_VCA);
 800c372:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800c376:	82fb      	strh	r3, [r7, #22]
        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, status_log, &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);
        return status;
 800c378:	8afb      	ldrh	r3, [r7, #22]
 800c37a:	e012      	b.n	800c3a2 <phalVca_SetSessionKeyUtility+0x64>
    }

    /* Perform operation on active layer */
    switch(PH_GET_COMPID(pDataParams))
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	881b      	ldrh	r3, [r3, #0]
 800c380:	b2db      	uxtb	r3, r3
 800c382:	2b01      	cmp	r3, #1
 800c384:	d108      	bne.n	800c398 <phalVca_SetSessionKeyUtility+0x5a>
    {
#ifdef NXPBUILD__PHAL_VCA_SW
        case PHAL_VCA_SW_ID:
            status = phalVca_Sw_SetSessionKeyUtility((phalVca_Sw_DataParams_t *) pDataParams, pSessionKey, bAuthMode);
 800c386:	79fb      	ldrb	r3, [r7, #7]
 800c388:	461a      	mov	r2, r3
 800c38a:	68b9      	ldr	r1, [r7, #8]
 800c38c:	68f8      	ldr	r0, [r7, #12]
 800c38e:	f7ff ff19 	bl	800c1c4 <phalVca_Sw_SetSessionKeyUtility>
 800c392:	4603      	mov	r3, r0
 800c394:	82fb      	strh	r3, [r7, #22]
            break;
 800c396:	e003      	b.n	800c3a0 <phalVca_SetSessionKeyUtility+0x62>
#endif /* NXPBUILD__PHAL_VCA_SW */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_VCA);
 800c398:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800c39c:	82fb      	strh	r3, [r7, #22]
            break;
 800c39e:	bf00      	nop
    }

    PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, status_log, &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);
    return status;
 800c3a0:	8afb      	ldrh	r3, [r7, #22]
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3718      	adds	r7, #24
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}

0800c3aa <phalVca_SetApplicationType>:

phStatus_t phalVca_SetApplicationType(void * pDataParams, void * pAlDataParams)
{
 800c3aa:	b580      	push	{r7, lr}
 800c3ac:	b084      	sub	sp, #16
 800c3ae:	af00      	add	r7, sp, #0
 800c3b0:	6078      	str	r0, [r7, #4]
 800c3b2:	6039      	str	r1, [r7, #0]

    PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Validate the parameters */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_AL_VCA);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d102      	bne.n	800c3c0 <phalVca_SetApplicationType+0x16>
 800c3ba:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800c3be:	e022      	b.n	800c406 <phalVca_SetApplicationType+0x5c>
    PH_ASSERT_NULL_PARAM(pAlDataParams, PH_COMP_AL_VCA);
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d102      	bne.n	800c3cc <phalVca_SetApplicationType+0x22>
 800c3c6:	f241 3321 	movw	r3, #4897	@ 0x1321
 800c3ca:	e01c      	b.n	800c406 <phalVca_SetApplicationType+0x5c>

    /* Check data parameters */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_AL_VCA)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	881b      	ldrh	r3, [r3, #0]
 800c3d0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c3d4:	f5b3 5f98 	cmp.w	r3, #4864	@ 0x1300
 800c3d8:	d004      	beq.n	800c3e4 <phalVca_SetApplicationType+0x3a>
    {
        status = PH_ADD_COMPCODE(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_VCA);
 800c3da:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800c3de:	81fb      	strh	r3, [r7, #14]
        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, status_log, &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);
        return status;
 800c3e0:	89fb      	ldrh	r3, [r7, #14]
 800c3e2:	e010      	b.n	800c406 <phalVca_SetApplicationType+0x5c>
    }

    /* Perform operation on active layer */
    switch(PH_GET_COMPID(pDataParams))
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	881b      	ldrh	r3, [r3, #0]
 800c3e8:	b2db      	uxtb	r3, r3
 800c3ea:	2b01      	cmp	r3, #1
 800c3ec:	d106      	bne.n	800c3fc <phalVca_SetApplicationType+0x52>
    {
#ifdef NXPBUILD__PHAL_VCA_SW
        case PHAL_VCA_SW_ID:
            status = phalVca_Sw_SetApplicationType((phalVca_Sw_DataParams_t *) pDataParams, pAlDataParams);
 800c3ee:	6839      	ldr	r1, [r7, #0]
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	f7ff ff8b 	bl	800c30c <phalVca_Sw_SetApplicationType>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	81fb      	strh	r3, [r7, #14]
            break;
 800c3fa:	e003      	b.n	800c404 <phalVca_SetApplicationType+0x5a>
#endif /* NXPBUILD__PHAL_VCA_SW */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_VCA);
 800c3fc:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800c400:	81fb      	strh	r3, [r7, #14]
            break;
 800c402:	bf00      	nop
    }

    PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, status_log, &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);
    return status;
 800c404:	89fb      	ldrh	r3, [r7, #14]
}
 800c406:	4618      	mov	r0, r3
 800c408:	3710      	adds	r7, #16
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}

0800c40e <phhalHw_Pn5180_EventCallback>:
}

#endif

static void phhalHw_Pn5180_EventCallback(void * pDataParams)
{
 800c40e:	b580      	push	{r7, lr}
 800c410:	b084      	sub	sp, #16
 800c412:	af00      	add	r7, sp, #0
 800c414:	6078      	str	r0, [r7, #4]
    phhalHw_Pn5180_DataParams_t * pPn5180DataParams = NULL;
 800c416:	2300      	movs	r3, #0
 800c418:	60fb      	str	r3, [r7, #12]

    pPn5180DataParams = (phhalHw_Pn5180_DataParams_t*) pDataParams;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	60fb      	str	r3, [r7, #12]
    /* Post Abort Event. */
    (void)phOsal_EventPost(&pPn5180DataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_POST_ISR, E_PH_OSAL_EVT_RF, NULL);
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 800c424:	2300      	movs	r3, #0
 800c426:	2201      	movs	r2, #1
 800c428:	2108      	movs	r1, #8
 800c42a:	f00a fe2b 	bl	8017084 <phOsal_EventPost>
}
 800c42e:	bf00      	nop
 800c430:	3710      	adds	r7, #16
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}
	...

0800c438 <phhalHw_Pn5180_GuardTimeCallBck>:

static void phhalHw_Pn5180_GuardTimeCallBck(void)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	af00      	add	r7, sp, #0
	printf("GT Callback\r\n");  // 添加这行
 800c43c:	4807      	ldr	r0, [pc, #28]	@ (800c45c <phhalHw_Pn5180_GuardTimeCallBck+0x24>)
 800c43e:	f010 fd6f 	bl	801cf20 <puts>
    if(xEventHandle != NULL)
 800c442:	4b07      	ldr	r3, [pc, #28]	@ (800c460 <phhalHw_Pn5180_GuardTimeCallBck+0x28>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d005      	beq.n	800c456 <phhalHw_Pn5180_GuardTimeCallBck+0x1e>
    {
        (void)phOsal_EventPost(&xEventHandle, E_OS_EVENT_OPT_POST_ISR, E_PH_OSAL_EVT_GT_EXP, NULL);
 800c44a:	2300      	movs	r3, #0
 800c44c:	2202      	movs	r2, #2
 800c44e:	2108      	movs	r1, #8
 800c450:	4803      	ldr	r0, [pc, #12]	@ (800c460 <phhalHw_Pn5180_GuardTimeCallBck+0x28>)
 800c452:	f00a fe17 	bl	8017084 <phOsal_EventPost>
    }
}
 800c456:	bf00      	nop
 800c458:	bd80      	pop	{r7, pc}
 800c45a:	bf00      	nop
 800c45c:	0801f848 	.word	0x0801f848
 800c460:	2000178c 	.word	0x2000178c

0800c464 <phhalHw_Pn5180_Init>:
    uint8_t * pTxBuffer,
    uint16_t wTxBufSize,
    uint8_t * pRxBuffer,
    uint16_t wRxBufSize
    )
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b086      	sub	sp, #24
 800c468:	af00      	add	r7, sp, #0
 800c46a:	60f8      	str	r0, [r7, #12]
 800c46c:	607a      	str	r2, [r7, #4]
 800c46e:	603b      	str	r3, [r7, #0]
 800c470:	460b      	mov	r3, r1
 800c472:	817b      	strh	r3, [r7, #10]
    uint8_t PH_MEMLOC_BUF bDigitalDelayCfg;
#ifndef _WIN32
    phDriver_Pin_Config_t pinCfg;
#endif

    if(sizeof(phhalHw_Pn5180_DataParams_t) != wSizeOfDataParams)
 800c474:	897b      	ldrh	r3, [r7, #10]
 800c476:	f5b3 7fca 	cmp.w	r3, #404	@ 0x194
 800c47a:	d002      	beq.n	800c482 <phhalHw_Pn5180_Init+0x1e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_HAL);
 800c47c:	f44f 7308 	mov.w	r3, #544	@ 0x220
 800c480:	e1cc      	b.n	800c81c <phhalHw_Pn5180_Init+0x3b8>
    }
    /* The working buffers cannot be zero */
    if (wTxBufSize == 0U || wRxBufSize == 0U)
 800c482:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c484:	2b00      	cmp	r3, #0
 800c486:	d002      	beq.n	800c48e <phhalHw_Pn5180_Init+0x2a>
 800c488:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d102      	bne.n	800c494 <phhalHw_Pn5180_Init+0x30>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800c48e:	f240 2321 	movw	r3, #545	@ 0x221
 800c492:	e1c3      	b.n	800c81c <phhalHw_Pn5180_Init+0x3b8>
    }

    /* Check whether all the pointers supplied are non NULL */
    PH_ASSERT_NULL(pDataParams);
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d101      	bne.n	800c49e <phhalHw_Pn5180_Init+0x3a>
 800c49a:	2321      	movs	r3, #33	@ 0x21
 800c49c:	e1be      	b.n	800c81c <phhalHw_Pn5180_Init+0x3b8>
    PH_ASSERT_NULL(pBalDataParams);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d101      	bne.n	800c4a8 <phhalHw_Pn5180_Init+0x44>
 800c4a4:	2321      	movs	r3, #33	@ 0x21
 800c4a6:	e1b9      	b.n	800c81c <phhalHw_Pn5180_Init+0x3b8>
    PH_ASSERT_NULL(pTxBuffer);
 800c4a8:	6a3b      	ldr	r3, [r7, #32]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d101      	bne.n	800c4b2 <phhalHw_Pn5180_Init+0x4e>
 800c4ae:	2321      	movs	r3, #33	@ 0x21
 800c4b0:	e1b4      	b.n	800c81c <phhalHw_Pn5180_Init+0x3b8>
    PH_ASSERT_NULL(pRxBuffer);
 800c4b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d101      	bne.n	800c4bc <phhalHw_Pn5180_Init+0x58>
 800c4b8:	2321      	movs	r3, #33	@ 0x21
 800c4ba:	e1af      	b.n	800c81c <phhalHw_Pn5180_Init+0x3b8>

    /* The first bytes are reserved for the SPI commands */
    pDataParams->pTxBuffer          = &pTxBuffer[1];
 800c4bc:	6a3b      	ldr	r3, [r7, #32]
 800c4be:	1c5a      	adds	r2, r3, #1
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	60da      	str	r2, [r3, #12]
    pDataParams->wTxBufSize         = wTxBufSize - 1U;
 800c4c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c4c6:	3b01      	subs	r3, #1
 800c4c8:	b29a      	uxth	r2, r3
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	821a      	strh	r2, [r3, #16]
    pDataParams->pRxBuffer          = &pRxBuffer[2];
 800c4ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4d0:	1c9a      	adds	r2, r3, #2
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	615a      	str	r2, [r3, #20]
    pDataParams->wRxBufSize         = wRxBufSize - 2U;
 800c4d6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c4d8:	3b02      	subs	r3, #2
 800c4da:	b29a      	uxth	r2, r3
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	831a      	strh	r2, [r3, #24]

    /* This is the constructor for the Pn5180 HAL, let's initialize the private data */
    pDataParams->wId                    = PH_COMP_HAL | PHHAL_HW_PN5180_ID;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	f240 220e 	movw	r2, #526	@ 0x20e
 800c4e6:	801a      	strh	r2, [r3, #0]
    pDataParams->pBalDataParams         = pBalDataParams;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	687a      	ldr	r2, [r7, #4]
 800c4ec:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	683a      	ldr	r2, [r7, #0]
 800c4f2:	609a      	str	r2, [r3, #8]

    pDataParams->wRxBufLen              = 0U;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	835a      	strh	r2, [r3, #26]
    pDataParams->wRxBufStartPos         = 0U;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	83da      	strh	r2, [r3, #30]

    pDataParams->wTxBufLen              = 0U;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	2200      	movs	r2, #0
 800c504:	825a      	strh	r2, [r3, #18]
    pDataParams->wTxBufStartPos         = 0U;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	2200      	movs	r2, #0
 800c50a:	839a      	strh	r2, [r3, #28]

    pDataParams->bActiveMode            = PH_OFF;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	2200      	movs	r2, #0
 800c510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    pDataParams->wTimingMode            = PHHAL_HW_TIMING_MODE_OFF;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	2200      	movs	r2, #0
 800c518:	851a      	strh	r2, [r3, #40]	@ 0x28
    pDataParams->bCardType              = PHHAL_HW_CARDTYPE_ISO14443A;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	2201      	movs	r2, #1
 800c51e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    pDataParams->bTimeoutUnit           = PHHAL_HW_TIME_MICROSECONDS;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	2200      	movs	r2, #0
 800c526:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    pDataParams->dwTimingUs             = 0U;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	2200      	movs	r2, #0
 800c52e:	621a      	str	r2, [r3, #32]
    pDataParams->wFieldOffTime          = PHHAL_HW_FIELD_OFF_DEFAULT;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	2205      	movs	r2, #5
 800c534:	859a      	strh	r2, [r3, #44]	@ 0x2c
    pDataParams->wFieldRecoveryTime     = PHHAL_HW_FIELD_RECOVERY_DEFAULT;
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	2205      	movs	r2, #5
 800c53a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    pDataParams->bSymbolStart           = PH_OFF;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	2200      	movs	r2, #0
 800c540:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    pDataParams->bSymbolEnd             = PH_OFF;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	2200      	movs	r2, #0
 800c548:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    pDataParams->wAdditionalInfo        = 0U;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	2200      	movs	r2, #0
 800c550:	861a      	strh	r2, [r3, #48]	@ 0x30

    pDataParams->bRfResetAfterTo        = PH_OFF;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	2200      	movs	r2, #0
 800c556:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    pDataParams->bOpeMode               = RD_LIB_MODE_NFC;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	2202      	movs	r2, #2
 800c55e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    pDataParams->dwFelicaEmdReg         = 0U;
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	2200      	movs	r2, #0
 800c566:	655a      	str	r2, [r3, #84]	@ 0x54
    pDataParams->bRxMultiple            = PH_OFF;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	2200      	movs	r2, #0
 800c56c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    pDataParams->bNfcipMode             = PH_OFF;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	2200      	movs	r2, #0
 800c574:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    pDataParams->bJewelActivated        = PH_OFF;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	2200      	movs	r2, #0
 800c57c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    pDataParams->bLpcdMode              = PHHAL_HW_PN5180_LPCD_MODE_DEFAULT;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	2200      	movs	r2, #0
 800c584:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    pDataParams->wWakeupCounterInMs     = 3U;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	2203      	movs	r2, #3
 800c58c:	869a      	strh	r2, [r3, #52]	@ 0x34
    pDataParams->bRfca                  = PH_ON;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	2201      	movs	r2, #1
 800c592:	70da      	strb	r2, [r3, #3]
    pDataParams->wTargetMode            = PH_OFF;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	2200      	movs	r2, #0
 800c598:	865a      	strh	r2, [r3, #50]	@ 0x32
    pDataParams->dwTxWaitMs             = 0U;
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	2200      	movs	r2, #0
 800c59e:	625a      	str	r2, [r3, #36]	@ 0x24
    pDataParams->bSkipSend              = PH_OFF;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    pDataParams->bTransmited            = PH_OFF;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    pDataParams->bMfcCryptoEnabled      = PH_OFF;
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    pDataParams->bCardMode              = PH_OFF;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
    pDataParams->bBalConnectionType     = PHHAL_HW_BAL_CONNECTION_SPI;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	2201      	movs	r2, #1
 800c5c4:	709a      	strb	r2, [r3, #2]
    pDataParams->pRFISRCallback         = &phhalHw_Pn5180_EventCallback;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	4a96      	ldr	r2, [pc, #600]	@ (800c824 <phhalHw_Pn5180_Init+0x3c0>)
 800c5ca:	649a      	str	r2, [r3, #72]	@ 0x48
    pDataParams->pTimerISRCallBack      = &phhalHw_Pn5180_GuardTimeCallBck;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	4a96      	ldr	r2, [pc, #600]	@ (800c828 <phhalHw_Pn5180_Init+0x3c4>)
 800c5d0:	64da      	str	r2, [r3, #76]	@ 0x4c
    pDataParams->bPollGuardTimeFlag     = PH_OFF;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    pDataParams->bIsTestBusEnabled      = PH_OFF;
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	2200      	movs	r2, #0
 800c5de:	f883 2180 	strb.w	r2, [r3, #384]	@ 0x180

#ifndef _WIN32


    /* Config Reset pin as output and set to high. */
    pinCfg.bPullSelect = PHDRIVER_PIN_RESET_PULL_CFG;
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	743b      	strb	r3, [r7, #16]
    pinCfg.bOutputLogic = RESET_POWERUP_LEVEL;
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	747b      	strb	r3, [r7, #17]
    PH_CHECK_SUCCESS_FCT(statusTmp, phDriver_PinConfig(PHDRIVER_PIN_RESET, PH_DRIVER_PINFUNC_OUTPUT, &pinCfg));
 800c5ea:	f107 0310 	add.w	r3, r7, #16
 800c5ee:	2202      	movs	r2, #2
 800c5f0:	2120      	movs	r1, #32
 800c5f2:	488e      	ldr	r0, [pc, #568]	@ (800c82c <phhalHw_Pn5180_Init+0x3c8>)
 800c5f4:	f00a fb36 	bl	8016c64 <phDriver_PinConfig>
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	82fb      	strh	r3, [r7, #22]
 800c5fc:	8afb      	ldrh	r3, [r7, #22]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d001      	beq.n	800c606 <phhalHw_Pn5180_Init+0x1a2>
 800c602:	8afb      	ldrh	r3, [r7, #22]
 800c604:	e10a      	b.n	800c81c <phhalHw_Pn5180_Init+0x3b8>

    if(((phbalReg_Type_t *)pBalDataParams)->bBalType == PHBAL_REG_TYPE_SPI)
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	789b      	ldrb	r3, [r3, #2]
 800c60a:	2b01      	cmp	r3, #1
 800c60c:	d113      	bne.n	800c636 <phhalHw_Pn5180_Init+0x1d2>
    {
        /* Config NSS (Chip Select) pin as GPIO output and set to high. */
        pinCfg.bPullSelect = PHDRIVER_PIN_NSS_PULL_CFG;
 800c60e:	2301      	movs	r3, #1
 800c610:	743b      	strb	r3, [r7, #16]
        pinCfg.bOutputLogic = PH_DRIVER_SET_HIGH;
 800c612:	2301      	movs	r3, #1
 800c614:	747b      	strb	r3, [r7, #17]
        PH_CHECK_SUCCESS_FCT(statusTmp, phDriver_PinConfig(PHDRIVER_PIN_SSEL, PH_DRIVER_PINFUNC_OUTPUT, &pinCfg));
 800c616:	f107 0310 	add.w	r3, r7, #16
 800c61a:	2202      	movs	r2, #2
 800c61c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800c620:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c624:	f00a fb1e 	bl	8016c64 <phDriver_PinConfig>
 800c628:	4603      	mov	r3, r0
 800c62a:	82fb      	strh	r3, [r7, #22]
 800c62c:	8afb      	ldrh	r3, [r7, #22]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d001      	beq.n	800c636 <phhalHw_Pn5180_Init+0x1d2>
 800c632:	8afb      	ldrh	r3, [r7, #22]
 800c634:	e0f2      	b.n	800c81c <phhalHw_Pn5180_Init+0x3b8>
    }

    /* Set Dwl Pin as output, pullup enable and set to low. */
    pinCfg.bPullSelect = PHDRIVER_PIN_IRQ_PULL_CFG;
 800c636:	2301      	movs	r3, #1
 800c638:	743b      	strb	r3, [r7, #16]
    pinCfg.bOutputLogic = PH_DRIVER_SET_LOW;
 800c63a:	2300      	movs	r3, #0
 800c63c:	747b      	strb	r3, [r7, #17]
//    PH_CHECK_SUCCESS_FCT(statusTmp, phDriver_PinConfig(PHDRIVER_PIN_DWL, PH_DRIVER_PINFUNC_OUTPUT, &pinCfg));

    if (((phbalReg_Type_t *)pBalDataParams)->bBalType != PHBAL_REG_TYPE_KERNEL_SPI)
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	789b      	ldrb	r3, [r3, #2]
 800c642:	2b04      	cmp	r3, #4
 800c644:	d010      	beq.n	800c668 <phhalHw_Pn5180_Init+0x204>
    {
        /* Busy pin as input and pullup enabled. */
        pinCfg.bPullSelect = PHDRIVER_PIN_BUSY_PULL_CFG;
 800c646:	2301      	movs	r3, #1
 800c648:	743b      	strb	r3, [r7, #16]
        PH_CHECK_SUCCESS_FCT(statusTmp, phDriver_PinConfig(PHDRIVER_PIN_BUSY, PH_DRIVER_PINFUNC_INPUT, &pinCfg));
 800c64a:	f107 0310 	add.w	r3, r7, #16
 800c64e:	2201      	movs	r2, #1
 800c650:	2102      	movs	r1, #2
 800c652:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c656:	f00a fb05 	bl	8016c64 <phDriver_PinConfig>
 800c65a:	4603      	mov	r3, r0
 800c65c:	82fb      	strh	r3, [r7, #22]
 800c65e:	8afb      	ldrh	r3, [r7, #22]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d001      	beq.n	800c668 <phhalHw_Pn5180_Init+0x204>
 800c664:	8afb      	ldrh	r3, [r7, #22]
 800c666:	e0d9      	b.n	800c81c <phhalHw_Pn5180_Init+0x3b8>
    }

    /* Reset Pn5180 Front-end. */
    phhalHw_Pn5180_Reset();
 800c668:	f003 fbe8 	bl	800fe3c <phhalHw_Pn5180_Reset>

    if(((phbalReg_Type_t *)pBalDataParams)->bBalType == PHBAL_REG_TYPE_SPI)
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	789b      	ldrb	r3, [r3, #2]
 800c670:	2b01      	cmp	r3, #1
 800c672:	d11a      	bne.n	800c6aa <phhalHw_Pn5180_Init+0x246>
    {

        /* Before performing first SPI operation try checking if TestBus is enabled or not
         * by pulling NSS pin down and wait for some time and check for Busy pin to go high. */
        phhalHw_Pn5180_WriteSSEL(pBalDataParams, PH_DRIVER_SET_LOW);
 800c674:	2100      	movs	r1, #0
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f003 fc08 	bl	800fe8c <phhalHw_Pn5180_WriteSSEL>

        /* delay of ~2 ms */
        phDriver_TimerStart(PH_DRIVER_TIMER_MILLI_SECS, PHHAL_HW_PN5180_DELAY_TO_CHECK_TESTBUS, NULL);
 800c67c:	2200      	movs	r2, #0
 800c67e:	2102      	movs	r1, #2
 800c680:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800c684:	f00a fb22 	bl	8016ccc <phDriver_TimerStart>

        if (phDriver_PinRead(PHDRIVER_PIN_BUSY, PH_DRIVER_PINFUNC_INPUT) == PH_ON)
 800c688:	2201      	movs	r2, #1
 800c68a:	2102      	movs	r1, #2
 800c68c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c690:	f00a faf8 	bl	8016c84 <phDriver_PinRead>
 800c694:	4603      	mov	r3, r0
 800c696:	2b01      	cmp	r3, #1
 800c698:	d103      	bne.n	800c6a2 <phhalHw_Pn5180_Init+0x23e>
        {

            pDataParams->bIsTestBusEnabled = PH_ON;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	2201      	movs	r2, #1
 800c69e:	f883 2180 	strb.w	r2, [r3, #384]	@ 0x180
        }


        /* De-assert NSS pin. */
        phhalHw_Pn5180_WriteSSEL(pBalDataParams, PH_DRIVER_SET_HIGH);
 800c6a2:	2101      	movs	r1, #1
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f003 fbf1 	bl	800fe8c <phhalHw_Pn5180_WriteSSEL>
    }

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadE2Prom(pDataParams, PHHAL_HW_PN5180_FIRMWARE_VERSION_ADDR, bFirmwareVer, 2U));
 800c6aa:	f107 0214 	add.w	r2, r7, #20
 800c6ae:	2302      	movs	r3, #2
 800c6b0:	2112      	movs	r1, #18
 800c6b2:	68f8      	ldr	r0, [r7, #12]
 800c6b4:	f003 ffca 	bl	801064c <phhalHw_Pn5180_Instr_ReadE2Prom>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	82fb      	strh	r3, [r7, #22]
 800c6bc:	8afb      	ldrh	r3, [r7, #22]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d001      	beq.n	800c6c6 <phhalHw_Pn5180_Init+0x262>
 800c6c2:	8afb      	ldrh	r3, [r7, #22]
 800c6c4:	e0aa      	b.n	800c81c <phhalHw_Pn5180_Init+0x3b8>

    if ( (0xFFU == bFirmwareVer[0]) && (0xFFU == bFirmwareVer[1]) )
 800c6c6:	7d3b      	ldrb	r3, [r7, #20]
 800c6c8:	2bff      	cmp	r3, #255	@ 0xff
 800c6ca:	d105      	bne.n	800c6d8 <phhalHw_Pn5180_Init+0x274>
 800c6cc:	7d7b      	ldrb	r3, [r7, #21]
 800c6ce:	2bff      	cmp	r3, #255	@ 0xff
 800c6d0:	d102      	bne.n	800c6d8 <phhalHw_Pn5180_Init+0x274>
    {
        /* SPI Read problem... it is returing all FFFFs..
         * Version can never be 0xFF-0xFF */
        return PH_ERR_IO_TIMEOUT | PH_COMP_BAL;
 800c6d2:	f240 1301 	movw	r3, #257	@ 0x101
 800c6d6:	e0a1      	b.n	800c81c <phhalHw_Pn5180_Init+0x3b8>
    }

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadE2Prom(pDataParams, PHHAL_HW_PN5180_TESTBUS_ENABLE_ADDR, &pDataParams->bIsTestBusEnabled, 1U));
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	f503 72c0 	add.w	r2, r3, #384	@ 0x180
 800c6de:	2301      	movs	r3, #1
 800c6e0:	2117      	movs	r1, #23
 800c6e2:	68f8      	ldr	r0, [r7, #12]
 800c6e4:	f003 ffb2 	bl	801064c <phhalHw_Pn5180_Instr_ReadE2Prom>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	82fb      	strh	r3, [r7, #22]
 800c6ec:	8afb      	ldrh	r3, [r7, #22]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d001      	beq.n	800c6f6 <phhalHw_Pn5180_Init+0x292>
 800c6f2:	8afb      	ldrh	r3, [r7, #22]
 800c6f4:	e092      	b.n	800c81c <phhalHw_Pn5180_Init+0x3b8>
    if (0U != (pDataParams->bIsTestBusEnabled & 0x80U))
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 800c6fc:	b25b      	sxtb	r3, r3
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	da04      	bge.n	800c70c <phhalHw_Pn5180_Init+0x2a8>
    {
        pDataParams->bIsTestBusEnabled = PH_ON;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	2201      	movs	r2, #1
 800c706:	f883 2180 	strb.w	r2, [r3, #384]	@ 0x180
 800c70a:	e003      	b.n	800c714 <phhalHw_Pn5180_Init+0x2b0>
    }
    else
    {
        pDataParams->bIsTestBusEnabled = PH_OFF;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	2200      	movs	r2, #0
 800c710:	f883 2180 	strb.w	r2, [r3, #384]	@ 0x180
    }

    /* Disable Idle IRQ */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, IRQ_ENABLE, (uint32_t)~IRQ_SET_CLEAR_IDLE_IRQ_CLR_MASK));
 800c714:	f06f 0204 	mvn.w	r2, #4
 800c718:	2101      	movs	r1, #1
 800c71a:	68f8      	ldr	r0, [r7, #12]
 800c71c:	f003 fcee 	bl	80100fc <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800c720:	4603      	mov	r3, r0
 800c722:	82fb      	strh	r3, [r7, #22]
 800c724:	8afb      	ldrh	r3, [r7, #22]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d001      	beq.n	800c72e <phhalHw_Pn5180_Init+0x2ca>
 800c72a:	8afb      	ldrh	r3, [r7, #22]
 800c72c:	e076      	b.n	800c81c <phhalHw_Pn5180_Init+0x3b8>

    /* Clear all IRQs  */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, PHHAL_HW_PN5180_IRQ_SET_CLEAR_ALL_MASK));
 800c72e:	4a40      	ldr	r2, [pc, #256]	@ (800c830 <phhalHw_Pn5180_Init+0x3cc>)
 800c730:	2103      	movs	r1, #3
 800c732:	68f8      	ldr	r0, [r7, #12]
 800c734:	f003 fbf6 	bl	800ff24 <phhalHw_Pn5180_Instr_WriteRegister>
 800c738:	4603      	mov	r3, r0
 800c73a:	82fb      	strh	r3, [r7, #22]
 800c73c:	8afb      	ldrh	r3, [r7, #22]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d001      	beq.n	800c746 <phhalHw_Pn5180_Init+0x2e2>
 800c742:	8afb      	ldrh	r3, [r7, #22]
 800c744:	e06a      	b.n	800c81c <phhalHw_Pn5180_Init+0x3b8>

    /* Create the event. */
    pDataParams->HwEventObj.pEvtName = (uint8_t *)bHalEventName;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	4a3a      	ldr	r2, [pc, #232]	@ (800c834 <phhalHw_Pn5180_Init+0x3d0>)
 800c74a:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
    pDataParams->HwEventObj.intialValue = 0U;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	2200      	movs	r2, #0
 800c752:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
    PH_CHECK_SUCCESS_FCT(statusTmp, phOsal_EventCreate(&pDataParams->HwEventObj.EventHandle, &pDataParams->HwEventObj));
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	f503 72c2 	add.w	r2, r3, #388	@ 0x184
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800c762:	4619      	mov	r1, r3
 800c764:	4610      	mov	r0, r2
 800c766:	f00a fbad 	bl	8016ec4 <phOsal_EventCreate>
 800c76a:	4603      	mov	r3, r0
 800c76c:	82fb      	strh	r3, [r7, #22]
 800c76e:	8afb      	ldrh	r3, [r7, #22]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d001      	beq.n	800c778 <phhalHw_Pn5180_Init+0x314>
 800c774:	8afb      	ldrh	r3, [r7, #22]
 800c776:	e051      	b.n	800c81c <phhalHw_Pn5180_Init+0x3b8>

    /*clear previously occurred unwanted events*/
    (void)phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL);
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 800c77e:	2300      	movs	r3, #0
 800c780:	2201      	movs	r2, #1
 800c782:	2100      	movs	r1, #0
 800c784:	f00a fcb6 	bl	80170f4 <phOsal_EventClear>
    xEventHandle = pDataParams->HwEventObj.EventHandle;
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 800c78e:	4a2a      	ldr	r2, [pc, #168]	@ (800c838 <phhalHw_Pn5180_Init+0x3d4>)
 800c790:	6013      	str	r3, [r2, #0]

    /* firmware version was already read earlier (to check if SPI is working).  Store it in dataparams.  */
    pDataParams->wFirmwareVer = bFirmwareVer[1];
 800c792:	7d7b      	ldrb	r3, [r7, #21]
 800c794:	461a      	mov	r2, r3
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
    pDataParams->wFirmwareVer = (pDataParams->wFirmwareVer << 8U) | bFirmwareVer[0];
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 800c7a2:	b21b      	sxth	r3, r3
 800c7a4:	021b      	lsls	r3, r3, #8
 800c7a6:	b21a      	sxth	r2, r3
 800c7a8:	7d3b      	ldrb	r3, [r7, #20]
 800c7aa:	b21b      	sxth	r3, r3
 800c7ac:	4313      	orrs	r3, r2
 800c7ae:	b21b      	sxth	r3, r3
 800c7b0:	b29a      	uxth	r2, r3
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78

    /* Check if Firmware version is above 3.4, which also verifies Pn5180 is initialized. */
    if (pDataParams->wFirmwareVer < 0x304U)
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 800c7be:	f5b3 7f41 	cmp.w	r3, #772	@ 0x304
 800c7c2:	d202      	bcs.n	800c7ca <phhalHw_Pn5180_Init+0x366>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERFACE_ERROR, PH_COMP_HAL);
 800c7c4:	f240 230b 	movw	r3, #523	@ 0x20b
 800c7c8:	e028      	b.n	800c81c <phhalHw_Pn5180_Init+0x3b8>
    }
    else
    {
        /* Apply HAL Digital delay when pn5180 FW version is less than 3.8. */
        if (pDataParams->wFirmwareVer >= 0x308U)
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 800c7d0:	f5b3 7f42 	cmp.w	r3, #776	@ 0x308
 800c7d4:	d321      	bcc.n	800c81a <phhalHw_Pn5180_Init+0x3b6>
        {
            /* Read MISC_CONFIG value */
            phhalHw_Pn5180_Instr_ReadE2Prom(
 800c7d6:	f107 0213 	add.w	r2, r7, #19
 800c7da:	2301      	movs	r3, #1
 800c7dc:	21e8      	movs	r1, #232	@ 0xe8
 800c7de:	68f8      	ldr	r0, [r7, #12]
 800c7e0:	f003 ff34 	bl	801064c <phhalHw_Pn5180_Instr_ReadE2Prom>
                &bDigitalDelayCfg,
                PHHAL_HW_PN5180_DIGITAL_DELAY_CONFIG_LEN);

            /* Apply FW Digital delay and enable timer 1 for the use of FDT/FWT for FW version 3.8 onwards. */

            if (((0U == ((bDigitalDelayCfg & PHHAL_HW_PN5180_DIGITAL_DELAY_ENABLE)))) ||
 800c7e4:	7cfb      	ldrb	r3, [r7, #19]
 800c7e6:	f003 0301 	and.w	r3, r3, #1
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d004      	beq.n	800c7f8 <phhalHw_Pn5180_Init+0x394>
                (!((bDigitalDelayCfg & PHHAL_HW_PN5180_FDT_TIMER_USED_MASK) == ((PHHAL_HW_PN5180_FDT_TIMER_USED) << 1U))))
 800c7ee:	7cfb      	ldrb	r3, [r7, #19]
 800c7f0:	f003 0306 	and.w	r3, r3, #6
            if (((0U == ((bDigitalDelayCfg & PHHAL_HW_PN5180_DIGITAL_DELAY_ENABLE)))) ||
 800c7f4:	2b02      	cmp	r3, #2
 800c7f6:	d010      	beq.n	800c81a <phhalHw_Pn5180_Init+0x3b6>
            {
                /* Clear timer bits. */
                bDigitalDelayCfg &= (uint8_t)~(PHHAL_HW_PN5180_FDT_TIMER_USED_MASK);
 800c7f8:	7cfb      	ldrb	r3, [r7, #19]
 800c7fa:	f023 0306 	bic.w	r3, r3, #6
 800c7fe:	b2db      	uxtb	r3, r3
 800c800:	74fb      	strb	r3, [r7, #19]

                /* Enable FW digital delay and timer 1 for FDT/FWT. */
                bDigitalDelayCfg |= (uint8_t)(PHHAL_HW_PN5180_DIGITAL_DELAY_ENABLE | ((PHHAL_HW_PN5180_FDT_TIMER_USED) << 1U));
 800c802:	7cfb      	ldrb	r3, [r7, #19]
 800c804:	f043 0303 	orr.w	r3, r3, #3
 800c808:	b2db      	uxtb	r3, r3
 800c80a:	74fb      	strb	r3, [r7, #19]

                /* Write back MISC_CONFIG value */
                phhalHw_Pn5180_Instr_WriteE2Prom(
 800c80c:	f107 0213 	add.w	r2, r7, #19
 800c810:	2301      	movs	r3, #1
 800c812:	21e8      	movs	r1, #232	@ 0xe8
 800c814:	68f8      	ldr	r0, [r7, #12]
 800c816:	f003 fea1 	bl	801055c <phhalHw_Pn5180_Instr_WriteE2Prom>
                    PHHAL_HW_PN5180_DIGITAL_DELAY_CONFIG_LEN);
            }
        }
    }

    return PH_ERR_SUCCESS;
 800c81a:	2300      	movs	r3, #0
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3718      	adds	r7, #24
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}
 800c824:	0800c40f 	.word	0x0800c40f
 800c828:	0800c439 	.word	0x0800c439
 800c82c:	48000400 	.word	0x48000400
 800c830:	000fffff 	.word	0x000fffff
 800c834:	08020178 	.word	0x08020178
 800c838:	2000178c 	.word	0x2000178c

0800c83c <phhalHw_Pn5180_WriteRegister>:
phStatus_t phhalHw_Pn5180_WriteRegister(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t  bAddress,
    uint32_t dwValue
    )
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b084      	sub	sp, #16
 800c840:	af00      	add	r7, sp, #0
 800c842:	60f8      	str	r0, [r7, #12]
 800c844:	460b      	mov	r3, r1
 800c846:	607a      	str	r2, [r7, #4]
 800c848:	72fb      	strb	r3, [r7, #11]
    return phhalHw_Pn5180_Instr_WriteRegister(  \
 800c84a:	7afb      	ldrb	r3, [r7, #11]
 800c84c:	687a      	ldr	r2, [r7, #4]
 800c84e:	4619      	mov	r1, r3
 800c850:	68f8      	ldr	r0, [r7, #12]
 800c852:	f003 fb67 	bl	800ff24 <phhalHw_Pn5180_Instr_WriteRegister>
 800c856:	4603      	mov	r3, r0
        pDataParams,  \
        bAddress,  \
        dwValue);
}
 800c858:	4618      	mov	r0, r3
 800c85a:	3710      	adds	r7, #16
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}

0800c860 <phhalHw_Pn5180_ReadRegister>:

phStatus_t phhalHw_Pn5180_ReadRegister(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bAddress,
    uint32_t * pValue)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b084      	sub	sp, #16
 800c864:	af00      	add	r7, sp, #0
 800c866:	60f8      	str	r0, [r7, #12]
 800c868:	460b      	mov	r3, r1
 800c86a:	607a      	str	r2, [r7, #4]
 800c86c:	72fb      	strb	r3, [r7, #11]
    return phhalHw_Pn5180_Instr_ReadRegister(   \
 800c86e:	7afb      	ldrb	r3, [r7, #11]
 800c870:	687a      	ldr	r2, [r7, #4]
 800c872:	4619      	mov	r1, r3
 800c874:	68f8      	ldr	r0, [r7, #12]
 800c876:	f003 fd69 	bl	801034c <phhalHw_Pn5180_Instr_ReadRegister>
 800c87a:	4603      	mov	r3, r0
        pDataParams,  \
        bAddress,  \
        pValue);   \

}
 800c87c:	4618      	mov	r0, r3
 800c87e:	3710      	adds	r7, #16
 800c880:	46bd      	mov	sp, r7
 800c882:	bd80      	pop	{r7, pc}

0800c884 <phhalHw_Pn5180_ApplyProtocolSettings>:

phStatus_t phhalHw_Pn5180_ApplyProtocolSettings(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bCardType)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b088      	sub	sp, #32
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
 800c88c:	460b      	mov	r3, r1
 800c88e:	70fb      	strb	r3, [r7, #3]
    uint16_t   PH_MEMLOC_REM wConfig;
    uint16_t   PH_MEMLOC_REM wTxDatarate;
    uint16_t   PH_MEMLOC_REM wRxDatarate;

    /* Disable the EMD. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_OFF));
 800c890:	2200      	movs	r2, #0
 800c892:	215e      	movs	r1, #94	@ 0x5e
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f000 fd3b 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 800c89a:	4603      	mov	r3, r0
 800c89c:	823b      	strh	r3, [r7, #16]
 800c89e:	8a3b      	ldrh	r3, [r7, #16]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d001      	beq.n	800c8a8 <phhalHw_Pn5180_ApplyProtocolSettings+0x24>
 800c8a4:	8a3b      	ldrh	r3, [r7, #16]
 800c8a6:	e1af      	b.n	800cc08 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>

    /* Store new card type */
    if (bCardType != PHHAL_HW_CARDTYPE_CURRENT)
 800c8a8:	78fb      	ldrb	r3, [r7, #3]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d00a      	beq.n	800c8c4 <phhalHw_Pn5180_ApplyProtocolSettings+0x40>
    {
        pDataParams->bCardType = bCardType;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	78fa      	ldrb	r2, [r7, #3]
 800c8b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        pDataParams->bTimeoutUnit = PHHAL_HW_TIME_MICROSECONDS;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        bUseDefaultShadow = 1U;
 800c8be:	2301      	movs	r3, #1
 800c8c0:	767b      	strb	r3, [r7, #25]
 800c8c2:	e001      	b.n	800c8c8 <phhalHw_Pn5180_ApplyProtocolSettings+0x44>
    }
    else
    {
        bUseDefaultShadow = 0U;
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	767b      	strb	r3, [r7, #25]
    }

    pDataParams->bActiveMode       = PH_OFF;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    pDataParams->wTargetMode       = PH_OFF;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	865a      	strh	r2, [r3, #50]	@ 0x32
    pDataParams->bJewelActivated   = PH_OFF;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2200      	movs	r2, #0
 800c8da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    pDataParams->bNfcipMode        = PH_OFF;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    pDataParams->bSkipSend         = PH_OFF;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

    /* configure reader IC for current card */
    switch (pDataParams->bCardType)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c8f4:	3b01      	subs	r3, #1
 800c8f6:	2b09      	cmp	r3, #9
 800c8f8:	f200 8104 	bhi.w	800cb04 <phhalHw_Pn5180_ApplyProtocolSettings+0x280>
 800c8fc:	a201      	add	r2, pc, #4	@ (adr r2, 800c904 <phhalHw_Pn5180_ApplyProtocolSettings+0x80>)
 800c8fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c902:	bf00      	nop
 800c904:	0800c92d 	.word	0x0800c92d
 800c908:	0800c957 	.word	0x0800c957
 800c90c:	0800c981 	.word	0x0800c981
 800c910:	0800ca9b 	.word	0x0800ca9b
 800c914:	0800cb05 	.word	0x0800cb05
 800c918:	0800cac5 	.word	0x0800cac5
 800c91c:	0800c9fd 	.word	0x0800c9fd
 800c920:	0800ca37 	.word	0x0800ca37
 800c924:	0800ca69 	.word	0x0800ca69
 800c928:	0800c9bf 	.word	0x0800c9bf
    {
        /* configure hardware for ISO 14443A */
    case PHHAL_HW_CARDTYPE_ISO14443A:
        /* Use 14443a default shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_ISO14443A_106_MILLER, PHHAL_HW_PN5180_RF_RX_ISO14443A_106_MANCH_SUBC));  /* Masking RxDataRate with Minimum Configuration Index */
 800c92c:	2280      	movs	r2, #128	@ 0x80
 800c92e:	2100      	movs	r1, #0
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f004 f9f1 	bl	8010d18 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800c936:	4603      	mov	r3, r0
 800c938:	823b      	strh	r3, [r7, #16]
 800c93a:	8a3b      	ldrh	r3, [r7, #16]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d001      	beq.n	800c944 <phhalHw_Pn5180_ApplyProtocolSettings+0xc0>
 800c940:	8a3b      	ldrh	r3, [r7, #16]
 800c942:	e161      	b.n	800cc08 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        SET_PN5180_SHADOW(wPn5180_DefaultShadow_I14443a);
 800c944:	4b99      	ldr	r3, [pc, #612]	@ (800cbac <phhalHw_Pn5180_ApplyProtocolSettings+0x328>)
 800c946:	61fb      	str	r3, [r7, #28]
 800c948:	230a      	movs	r3, #10
 800c94a:	837b      	strh	r3, [r7, #26]
        /* Update Datarate in shadow for parity setting */
        wTxDatarate = PHHAL_HW_RF_DATARATE_106;
 800c94c:	2300      	movs	r3, #0
 800c94e:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_106;
 800c950:	2300      	movs	r3, #0
 800c952:	827b      	strh	r3, [r7, #18]
        break;
 800c954:	e0de      	b.n	800cb14 <phhalHw_Pn5180_ApplyProtocolSettings+0x290>

    case PHHAL_HW_CARDTYPE_ISO14443B:
        /* Use 14443b shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_ISO14443B_106_NRZ, PHHAL_HW_PN5180_RF_RX_ISO14443B_106_BPSK));  /* Masking RxDataRate with Minimum Configuration Index */
 800c956:	2284      	movs	r2, #132	@ 0x84
 800c958:	2104      	movs	r1, #4
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f004 f9dc 	bl	8010d18 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800c960:	4603      	mov	r3, r0
 800c962:	823b      	strh	r3, [r7, #16]
 800c964:	8a3b      	ldrh	r3, [r7, #16]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d001      	beq.n	800c96e <phhalHw_Pn5180_ApplyProtocolSettings+0xea>
 800c96a:	8a3b      	ldrh	r3, [r7, #16]
 800c96c:	e14c      	b.n	800cc08 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        SET_PN5180_SHADOW(wPn5180_DefaultShadow_I14443b);
 800c96e:	4b90      	ldr	r3, [pc, #576]	@ (800cbb0 <phhalHw_Pn5180_ApplyProtocolSettings+0x32c>)
 800c970:	61fb      	str	r3, [r7, #28]
 800c972:	230b      	movs	r3, #11
 800c974:	837b      	strh	r3, [r7, #26]
        /* Update Datarate in shadow for parity setting */
        wTxDatarate = PHHAL_HW_RF_DATARATE_106;
 800c976:	2300      	movs	r3, #0
 800c978:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_106;
 800c97a:	2300      	movs	r3, #0
 800c97c:	827b      	strh	r3, [r7, #18]
        break;
 800c97e:	e0c9      	b.n	800cb14 <phhalHw_Pn5180_ApplyProtocolSettings+0x290>

    case PHHAL_HW_CARDTYPE_FELICA_212:
        /* Use FeliCa shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_FELICA_212, PHHAL_HW_PN5180_RF_RX_FELICA_212));  /* Masking RxDataRate with Minimum Configuration Index */
 800c980:	2288      	movs	r2, #136	@ 0x88
 800c982:	2108      	movs	r1, #8
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f004 f9c7 	bl	8010d18 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800c98a:	4603      	mov	r3, r0
 800c98c:	823b      	strh	r3, [r7, #16]
 800c98e:	8a3b      	ldrh	r3, [r7, #16]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d001      	beq.n	800c998 <phhalHw_Pn5180_ApplyProtocolSettings+0x114>
 800c994:	8a3b      	ldrh	r3, [r7, #16]
 800c996:	e137      	b.n	800cc08 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        SET_PN5180_SHADOW(wPn5180_DefaultShadow_Felica);
 800c998:	4b86      	ldr	r3, [pc, #536]	@ (800cbb4 <phhalHw_Pn5180_ApplyProtocolSettings+0x330>)
 800c99a:	61fb      	str	r3, [r7, #28]
 800c99c:	230b      	movs	r3, #11
 800c99e:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_DATARATE_212;
 800c9a0:	2301      	movs	r3, #1
 800c9a2:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_212;
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	827b      	strh	r3, [r7, #18]

        /* Configure FeliCa EMD Control Register */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig_FelicaEmdReg(pDataParams));
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f004 fe57 	bl	801165c <phhalHw_Pn5180_SetConfig_FelicaEmdReg>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	823b      	strh	r3, [r7, #16]
 800c9b2:	8a3b      	ldrh	r3, [r7, #16]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	f000 80a8 	beq.w	800cb0a <phhalHw_Pn5180_ApplyProtocolSettings+0x286>
 800c9ba:	8a3b      	ldrh	r3, [r7, #16]
 800c9bc:	e124      	b.n	800cc08 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        break;

    case PHHAL_HW_CARDTYPE_FELICA_424:
        /* Use FeliCa shadow for 424*/
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_FELICA_424, PHHAL_HW_PN5180_RF_RX_FELICA_424));  /* Masking RxDataRate with Minimum Configuration Index */
 800c9be:	2289      	movs	r2, #137	@ 0x89
 800c9c0:	2109      	movs	r1, #9
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	f004 f9a8 	bl	8010d18 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	823b      	strh	r3, [r7, #16]
 800c9cc:	8a3b      	ldrh	r3, [r7, #16]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d001      	beq.n	800c9d6 <phhalHw_Pn5180_ApplyProtocolSettings+0x152>
 800c9d2:	8a3b      	ldrh	r3, [r7, #16]
 800c9d4:	e118      	b.n	800cc08 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>

        SET_PN5180_SHADOW(wPn5180_DefaultShadow_Felica_424);
 800c9d6:	4b78      	ldr	r3, [pc, #480]	@ (800cbb8 <phhalHw_Pn5180_ApplyProtocolSettings+0x334>)
 800c9d8:	61fb      	str	r3, [r7, #28]
 800c9da:	230b      	movs	r3, #11
 800c9dc:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_DATARATE_424;
 800c9de:	2302      	movs	r3, #2
 800c9e0:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_424;
 800c9e2:	2302      	movs	r3, #2
 800c9e4:	827b      	strh	r3, [r7, #18]

        /* Configure FeliCa EMD Control Register */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig_FelicaEmdReg(pDataParams));
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f004 fe38 	bl	801165c <phhalHw_Pn5180_SetConfig_FelicaEmdReg>
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	823b      	strh	r3, [r7, #16]
 800c9f0:	8a3b      	ldrh	r3, [r7, #16]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	f000 808b 	beq.w	800cb0e <phhalHw_Pn5180_ApplyProtocolSettings+0x28a>
 800c9f8:	8a3b      	ldrh	r3, [r7, #16]
 800c9fa:	e105      	b.n	800cc08 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        break;

    case PHHAL_HW_CARDTYPE_I18092M_ACTIVE_106:
        /* Use I18092m_Active shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_NFC_AI_106_106, PHHAL_HW_PN5180_RF_RX_NFC_AI_106));  /* Masking RxDataRate with Minimum Configuration Index */
 800c9fc:	228a      	movs	r2, #138	@ 0x8a
 800c9fe:	210a      	movs	r1, #10
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	f004 f989 	bl	8010d18 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800ca06:	4603      	mov	r3, r0
 800ca08:	823b      	strh	r3, [r7, #16]
 800ca0a:	8a3b      	ldrh	r3, [r7, #16]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d001      	beq.n	800ca14 <phhalHw_Pn5180_ApplyProtocolSettings+0x190>
 800ca10:	8a3b      	ldrh	r3, [r7, #16]
 800ca12:	e0f9      	b.n	800cc08 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        SET_PN5180_SHADOW(wPn5180_DefShadow_I18092m_Active);
 800ca14:	4b69      	ldr	r3, [pc, #420]	@ (800cbbc <phhalHw_Pn5180_ApplyProtocolSettings+0x338>)
 800ca16:	61fb      	str	r3, [r7, #28]
 800ca18:	230b      	movs	r3, #11
 800ca1a:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_DATARATE_106;
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_106;
 800ca20:	2300      	movs	r3, #0
 800ca22:	827b      	strh	r3, [r7, #18]
        /* Enable active mode */
        pDataParams->bActiveMode = PH_ON;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2201      	movs	r2, #1
 800ca28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        pDataParams->bNfcipMode = PH_ON;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2201      	movs	r2, #1
 800ca30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
        break;
 800ca34:	e06e      	b.n	800cb14 <phhalHw_Pn5180_ApplyProtocolSettings+0x290>

    case PHHAL_HW_CARDTYPE_I18092M_ACTIVE_212:
        /* Use I18092m_Active_212 shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_NFC_AI_212_212, PHHAL_HW_PN5180_RF_RX_NFC_AI_212));  /* Masking RxDataRate with Minimum Configuration Index */
 800ca36:	228b      	movs	r2, #139	@ 0x8b
 800ca38:	210b      	movs	r1, #11
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f004 f96c 	bl	8010d18 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800ca40:	4603      	mov	r3, r0
 800ca42:	823b      	strh	r3, [r7, #16]
 800ca44:	8a3b      	ldrh	r3, [r7, #16]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d001      	beq.n	800ca4e <phhalHw_Pn5180_ApplyProtocolSettings+0x1ca>
 800ca4a:	8a3b      	ldrh	r3, [r7, #16]
 800ca4c:	e0dc      	b.n	800cc08 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        SET_PN5180_SHADOW(wPn5180_DefShadow_I18092m_212_Active);
 800ca4e:	4b5c      	ldr	r3, [pc, #368]	@ (800cbc0 <phhalHw_Pn5180_ApplyProtocolSettings+0x33c>)
 800ca50:	61fb      	str	r3, [r7, #28]
 800ca52:	230b      	movs	r3, #11
 800ca54:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_DATARATE_212;
 800ca56:	2301      	movs	r3, #1
 800ca58:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_212;
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	827b      	strh	r3, [r7, #18]
        /* Enable active mode */
        pDataParams->bActiveMode = PH_ON;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2201      	movs	r2, #1
 800ca62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        break;
 800ca66:	e055      	b.n	800cb14 <phhalHw_Pn5180_ApplyProtocolSettings+0x290>

    case PHHAL_HW_CARDTYPE_I18092M_ACTIVE_424:
        /* Use I18092m_Active_424 shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_NFC_AI_424_424, PHHAL_HW_PN5180_RF_RX_NFC_AI_424));  /* Masking RxDataRate with Minimum Configuration Index */
 800ca68:	228c      	movs	r2, #140	@ 0x8c
 800ca6a:	210c      	movs	r1, #12
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	f004 f953 	bl	8010d18 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800ca72:	4603      	mov	r3, r0
 800ca74:	823b      	strh	r3, [r7, #16]
 800ca76:	8a3b      	ldrh	r3, [r7, #16]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d001      	beq.n	800ca80 <phhalHw_Pn5180_ApplyProtocolSettings+0x1fc>
 800ca7c:	8a3b      	ldrh	r3, [r7, #16]
 800ca7e:	e0c3      	b.n	800cc08 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>

        SET_PN5180_SHADOW(wPn5180_DefShadow_I18092m_424_Active);
 800ca80:	4b50      	ldr	r3, [pc, #320]	@ (800cbc4 <phhalHw_Pn5180_ApplyProtocolSettings+0x340>)
 800ca82:	61fb      	str	r3, [r7, #28]
 800ca84:	230b      	movs	r3, #11
 800ca86:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_DATARATE_424;
 800ca88:	2302      	movs	r3, #2
 800ca8a:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_424;
 800ca8c:	2302      	movs	r3, #2
 800ca8e:	827b      	strh	r3, [r7, #18]
        /* Enable active mode */
        pDataParams->bActiveMode = PH_ON;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2201      	movs	r2, #1
 800ca94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        break;
 800ca98:	e03c      	b.n	800cb14 <phhalHw_Pn5180_ApplyProtocolSettings+0x290>

    case PHHAL_HW_CARDTYPE_ISO15693:
        /* Use 15693 shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_ISO15693_26_1OF4_ASK100, PHHAL_HW_PN5180_RF_RX_ISO15693_26_1OF4_SC));  /* Masking RxDataRate with Minimum Configuration Index */
 800ca9a:	228d      	movs	r2, #141	@ 0x8d
 800ca9c:	210d      	movs	r1, #13
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f004 f93a 	bl	8010d18 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800caa4:	4603      	mov	r3, r0
 800caa6:	823b      	strh	r3, [r7, #16]
 800caa8:	8a3b      	ldrh	r3, [r7, #16]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d001      	beq.n	800cab2 <phhalHw_Pn5180_ApplyProtocolSettings+0x22e>
 800caae:	8a3b      	ldrh	r3, [r7, #16]
 800cab0:	e0aa      	b.n	800cc08 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        SET_PN5180_SHADOW(wPn5180_DefaultShadow_I15693);
 800cab2:	4b45      	ldr	r3, [pc, #276]	@ (800cbc8 <phhalHw_Pn5180_ApplyProtocolSettings+0x344>)
 800cab4:	61fb      	str	r3, [r7, #28]
 800cab6:	230c      	movs	r3, #12
 800cab8:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_TX_DATARATE_1_OUT_OF_4;
 800caba:	230b      	movs	r3, #11
 800cabc:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_RX_DATARATE_HIGH;
 800cabe:	230d      	movs	r3, #13
 800cac0:	827b      	strh	r3, [r7, #18]

        break;
 800cac2:	e027      	b.n	800cb14 <phhalHw_Pn5180_ApplyProtocolSettings+0x290>

    case PHHAL_HW_CARDTYPE_I18000P3M3:
        /* Use 18000p3m3 shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_ISO180003M3_TARI_9_44_ASK, PHHAL_HW_PN5180_RF_RX_ISO180003M3_MANCH424_2_PERIOD));  /* Masking RxDataRate with Minimum Configuration Index */
 800cac4:	2290      	movs	r2, #144	@ 0x90
 800cac6:	2110      	movs	r1, #16
 800cac8:	6878      	ldr	r0, [r7, #4]
 800caca:	f004 f925 	bl	8010d18 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800cace:	4603      	mov	r3, r0
 800cad0:	823b      	strh	r3, [r7, #16]
 800cad2:	8a3b      	ldrh	r3, [r7, #16]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d001      	beq.n	800cadc <phhalHw_Pn5180_ApplyProtocolSettings+0x258>
 800cad8:	8a3b      	ldrh	r3, [r7, #16]
 800cada:	e095      	b.n	800cc08 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>

        SET_PN5180_SHADOW(wPn5180_DefaultShadow_I18000p3m3);
 800cadc:	4b3b      	ldr	r3, [pc, #236]	@ (800cbcc <phhalHw_Pn5180_ApplyProtocolSettings+0x348>)
 800cade:	61fb      	str	r3, [r7, #28]
 800cae0:	230c      	movs	r3, #12
 800cae2:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_TX_DATARATE_I18000P3M3;
 800cae4:	2311      	movs	r3, #17
 800cae6:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RX_I18000P3M3_FL_423_MAN2;
 800cae8:	2313      	movs	r3, #19
 800caea:	827b      	strh	r3, [r7, #18]
        /*A Timeout of 5 ms has been added*/
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams, PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS, 5U));
 800caec:	2205      	movs	r2, #5
 800caee:	210e      	movs	r1, #14
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f000 fc0d 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 800caf6:	4603      	mov	r3, r0
 800caf8:	823b      	strh	r3, [r7, #16]
 800cafa:	8a3b      	ldrh	r3, [r7, #16]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d008      	beq.n	800cb12 <phhalHw_Pn5180_ApplyProtocolSettings+0x28e>
 800cb00:	8a3b      	ldrh	r3, [r7, #16]
 800cb02:	e081      	b.n	800cc08 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        break;

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800cb04:	f240 2321 	movw	r3, #545	@ 0x221
 800cb08:	e07e      	b.n	800cc08 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        break;
 800cb0a:	bf00      	nop
 800cb0c:	e002      	b.n	800cb14 <phhalHw_Pn5180_ApplyProtocolSettings+0x290>
        break;
 800cb0e:	bf00      	nop
 800cb10:	e000      	b.n	800cb14 <phhalHw_Pn5180_ApplyProtocolSettings+0x290>
        break;
 800cb12:	bf00      	nop
    }

    /* Copy over default shadow contents into current shadow. */
    if (0U != bUseDefaultShadow)
 800cb14:	7e7b      	ldrb	r3, [r7, #25]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d069      	beq.n	800cbee <phhalHw_Pn5180_ApplyProtocolSettings+0x36a>
    {
        if(pShadowDefault == NULL)
 800cb1a:	69fb      	ldr	r3, [r7, #28]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d102      	bne.n	800cb26 <phhalHw_Pn5180_ApplyProtocolSettings+0x2a2>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_HAL);
 800cb20:	f44f 7308 	mov.w	r3, #544	@ 0x220
 800cb24:	e070      	b.n	800cc08 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        }
        /* Initialize config shadow */
        (void)memset(pDataParams->wCfgShadow, 0x00U, PHHAL_HW_PN5180_SHADOW_COUNT * sizeof(pDataParams->wCfgShadow[0]));
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	3358      	adds	r3, #88	@ 0x58
 800cb2a:	2220      	movs	r2, #32
 800cb2c:	2100      	movs	r1, #0
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f010 fae6 	bl	801d100 <memset>

        for (wIndex = 0U; wIndex < wShadowCount; ++wIndex)
 800cb34:	2300      	movs	r3, #0
 800cb36:	82fb      	strh	r3, [r7, #22]
 800cb38:	e04d      	b.n	800cbd6 <phhalHw_Pn5180_ApplyProtocolSettings+0x352>
        {
            wConfig = pShadowDefault[wIndex << 1U];
 800cb3a:	8afb      	ldrh	r3, [r7, #22]
 800cb3c:	009b      	lsls	r3, r3, #2
 800cb3e:	69fa      	ldr	r2, [r7, #28]
 800cb40:	4413      	add	r3, r2
 800cb42:	881b      	ldrh	r3, [r3, #0]
 800cb44:	81fb      	strh	r3, [r7, #14]
            pDataParams->wCfgShadow[wConfig] = pShadowDefault[(wIndex << 1U) + 1U];
 800cb46:	8afb      	ldrh	r3, [r7, #22]
 800cb48:	009b      	lsls	r3, r3, #2
 800cb4a:	3302      	adds	r3, #2
 800cb4c:	69fa      	ldr	r2, [r7, #28]
 800cb4e:	4413      	add	r3, r2
 800cb50:	89fa      	ldrh	r2, [r7, #14]
 800cb52:	8819      	ldrh	r1, [r3, #0]
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	322c      	adds	r2, #44	@ 0x2c
 800cb58:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            if((wConfig == PHHAL_HW_CONFIG_TXWAIT_US) &&
 800cb5c:	89fb      	ldrh	r3, [r7, #14]
 800cb5e:	2b07      	cmp	r3, #7
 800cb60:	d136      	bne.n	800cbd0 <phhalHw_Pn5180_ApplyProtocolSettings+0x34c>
                ((pDataParams->bActiveMode) || (pDataParams->bCardType == PHHAL_HW_CARDTYPE_FELICA_212) || (pDataParams->bCardType == PHHAL_HW_CARDTYPE_FELICA_424)) &&
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
            if((wConfig == PHHAL_HW_CONFIG_TXWAIT_US) &&
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d109      	bne.n	800cb80 <phhalHw_Pn5180_ApplyProtocolSettings+0x2fc>
                ((pDataParams->bActiveMode) || (pDataParams->bCardType == PHHAL_HW_CARDTYPE_FELICA_212) || (pDataParams->bCardType == PHHAL_HW_CARDTYPE_FELICA_424)) &&
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800cb72:	2b03      	cmp	r3, #3
 800cb74:	d004      	beq.n	800cb80 <phhalHw_Pn5180_ApplyProtocolSettings+0x2fc>
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800cb7c:	2b0a      	cmp	r3, #10
 800cb7e:	d127      	bne.n	800cbd0 <phhalHw_Pn5180_ApplyProtocolSettings+0x34c>
                (pDataParams->wTargetMode == PH_OFF))
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
                ((pDataParams->bActiveMode) || (pDataParams->bCardType == PHHAL_HW_CARDTYPE_FELICA_212) || (pDataParams->bCardType == PHHAL_HW_CARDTYPE_FELICA_424)) &&
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d123      	bne.n	800cbd0 <phhalHw_Pn5180_ApplyProtocolSettings+0x34c>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, wConfig, pDataParams->wCfgShadow[wConfig]));
 800cb88:	89fa      	ldrh	r2, [r7, #14]
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	322c      	adds	r2, #44	@ 0x2c
 800cb8e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800cb92:	89fb      	ldrh	r3, [r7, #14]
 800cb94:	4619      	mov	r1, r3
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f000 fbba 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	823b      	strh	r3, [r7, #16]
 800cba0:	8a3b      	ldrh	r3, [r7, #16]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d014      	beq.n	800cbd0 <phhalHw_Pn5180_ApplyProtocolSettings+0x34c>
 800cba6:	8a3b      	ldrh	r3, [r7, #16]
 800cba8:	e02e      	b.n	800cc08 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
 800cbaa:	bf00      	nop
 800cbac:	0802017c 	.word	0x0802017c
 800cbb0:	080201a4 	.word	0x080201a4
 800cbb4:	080201d0 	.word	0x080201d0
 800cbb8:	080201fc 	.word	0x080201fc
 800cbbc:	08020288 	.word	0x08020288
 800cbc0:	080202b4 	.word	0x080202b4
 800cbc4:	080202e0 	.word	0x080202e0
 800cbc8:	08020228 	.word	0x08020228
 800cbcc:	08020258 	.word	0x08020258
        for (wIndex = 0U; wIndex < wShadowCount; ++wIndex)
 800cbd0:	8afb      	ldrh	r3, [r7, #22]
 800cbd2:	3301      	adds	r3, #1
 800cbd4:	82fb      	strh	r3, [r7, #22]
 800cbd6:	8afa      	ldrh	r2, [r7, #22]
 800cbd8:	8b7b      	ldrh	r3, [r7, #26]
 800cbda:	429a      	cmp	r2, r3
 800cbdc:	d3ad      	bcc.n	800cb3a <phhalHw_Pn5180_ApplyProtocolSettings+0x2b6>
            }
        }

        pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TXDATARATE_FRAMING] = wTxDatarate;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	8aba      	ldrh	r2, [r7, #20]
 800cbe2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        pDataParams->wCfgShadow[PHHAL_HW_CONFIG_RXDATARATE_FRAMING] = wRxDatarate;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	8a7a      	ldrh	r2, [r7, #18]
 800cbea:	f8a3 206c 	strh.w	r2, [r3, #108]	@ 0x6c

    }

    /* MIFARE Classic contactless IC Crypto 1 state is disabled by default */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams, PHHAL_HW_CONFIG_DISABLE_MF_CRYPTO1, PH_ON));
 800cbee:	2201      	movs	r2, #1
 800cbf0:	212e      	movs	r1, #46	@ 0x2e
 800cbf2:	6878      	ldr	r0, [r7, #4]
 800cbf4:	f000 fb8c 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	823b      	strh	r3, [r7, #16]
 800cbfc:	8a3b      	ldrh	r3, [r7, #16]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d001      	beq.n	800cc06 <phhalHw_Pn5180_ApplyProtocolSettings+0x382>
 800cc02:	8a3b      	ldrh	r3, [r7, #16]
 800cc04:	e000      	b.n	800cc08 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>

    return PH_ERR_SUCCESS;
 800cc06:	2300      	movs	r3, #0
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	3720      	adds	r7, #32
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}

0800cc10 <phhalHw_Pn5180_Exchange>:
    uint8_t * pTxBuffer,
    uint16_t wTxLength,
    uint8_t ** ppRxBuffer,
    uint16_t * pRxLength
    )
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b090      	sub	sp, #64	@ 0x40
 800cc14:	af02      	add	r7, sp, #8
 800cc16:	60f8      	str	r0, [r7, #12]
 800cc18:	607a      	str	r2, [r7, #4]
 800cc1a:	461a      	mov	r2, r3
 800cc1c:	460b      	mov	r3, r1
 800cc1e:	817b      	strh	r3, [r7, #10]
 800cc20:	4613      	mov	r3, r2
 800cc22:	813b      	strh	r3, [r7, #8]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 800cc24:	2300      	movs	r3, #0
 800cc26:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    uint8_t *   PH_MEMLOC_REM pTmpBuffer = NULL;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0U;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t    PH_MEMLOC_REM wTmpBufferSize = 0U;
 800cc30:	2300      	movs	r3, #0
 800cc32:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint32_t    PH_MEMLOC_REM dwIrqWaitFor = 0U;
 800cc34:	2300      	movs	r3, #0
 800cc36:	633b      	str	r3, [r7, #48]	@ 0x30
    uint32_t    PH_MEMLOC_REM dwValue;
    uint16_t    PH_MEMLOC_REM bNumExpBytes;
    uint8_t     PH_MEMLOC_REM pReceivedData[1];
    uint16_t    PH_MEMLOC_REM wDataLenTmp;
    uint8_t     PH_MEMLOC_REM aCrc[2] = {0,0};
 800cc38:	2300      	movs	r3, #0
 800cc3a:	833b      	strh	r3, [r7, #24]
    phOsal_EventBits_t PH_MEMLOC_REM dwEventFlags;
    uint32_t    PH_MEMLOC_REM dwRegister = 0;
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	613b      	str	r3, [r7, #16]

    /* Check all the pointers */
    if (0U != (wTxLength)) PH_ASSERT_NULL_PARAM(pTxBuffer, PH_COMP_HAL);
 800cc40:	893b      	ldrh	r3, [r7, #8]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d005      	beq.n	800cc52 <phhalHw_Pn5180_Exchange+0x42>
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d102      	bne.n	800cc52 <phhalHw_Pn5180_Exchange+0x42>
 800cc4c:	f240 2321 	movw	r3, #545	@ 0x221
 800cc50:	e253      	b.n	800d0fa <phhalHw_Pn5180_Exchange+0x4ea>

    /*bTransmited is a flag which is used to identify if a transmit is followed by a receive.
    If any other api follows a transmit, then it should be reset */
    pDataParams->bTransmited = PH_OFF;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	2200      	movs	r2, #0
 800cc56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    do
    {
        if (pDataParams->wTargetMode != PH_OFF)
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d003      	beq.n	800cc6a <phhalHw_Pn5180_Exchange+0x5a>
        {
            /* If wTargetMode is changed then Target is activated and Exchange should not be used to perform Tx Operation. */
            statusTmp = (PH_ERR_USE_CONDITION | PH_COMP_HAL);
 800cc62:	f240 2325 	movw	r3, #549	@ 0x225
 800cc66:	86fb      	strh	r3, [r7, #54]	@ 0x36
            break;
 800cc68:	e1cf      	b.n	800d00a <phhalHw_Pn5180_Exchange+0x3fa>
        }
        /* Check options */
        if (0U != (wOption & (uint16_t)~(uint16_t)(PH_EXCHANGE_BUFFERED_BIT | PH_EXCHANGE_LEAVE_BUFFER_BIT)))
 800cc6a:	897b      	ldrh	r3, [r7, #10]
 800cc6c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d003      	beq.n	800cc7c <phhalHw_Pn5180_Exchange+0x6c>
        {
            statusTmp = (PH_ERR_INVALID_PARAMETER | PH_COMP_HAL);
 800cc74:	f240 2321 	movw	r3, #545	@ 0x221
 800cc78:	86fb      	strh	r3, [r7, #54]	@ 0x36
            break;
 800cc7a:	e1c6      	b.n	800d00a <phhalHw_Pn5180_Exchange+0x3fa>
        }

        /* Validate input parameters. */
        if (((ppRxBuffer == NULL) || (pRxLength == NULL)) && ((wOption & PH_EXCHANGE_BUFFERED_BIT) == 0U))
 800cc7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d002      	beq.n	800cc88 <phhalHw_Pn5180_Exchange+0x78>
 800cc82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d107      	bne.n	800cc98 <phhalHw_Pn5180_Exchange+0x88>
 800cc88:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	db03      	blt.n	800cc98 <phhalHw_Pn5180_Exchange+0x88>
        {
            statusTmp = (PH_ERR_INVALID_PARAMETER | PH_COMP_HAL);
 800cc90:	f240 2321 	movw	r3, #545	@ 0x221
 800cc94:	86fb      	strh	r3, [r7, #54]	@ 0x36
            break;
 800cc96:	e1b8      	b.n	800d00a <phhalHw_Pn5180_Exchange+0x3fa>
        }

        if (pDataParams->bActiveMode == PH_OFF)
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d115      	bne.n	800ccce <phhalHw_Pn5180_Exchange+0xbe>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegister(pDataParams, RF_STATUS, &dwRegister));
 800cca2:	f107 0310 	add.w	r3, r7, #16
 800cca6:	461a      	mov	r2, r3
 800cca8:	211d      	movs	r1, #29
 800ccaa:	68f8      	ldr	r0, [r7, #12]
 800ccac:	f003 fb4e 	bl	801034c <phhalHw_Pn5180_Instr_ReadRegister>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800ccb4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d001      	beq.n	800ccbe <phhalHw_Pn5180_Exchange+0xae>
 800ccba:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ccbc:	e21d      	b.n	800d0fa <phhalHw_Pn5180_Exchange+0x4ea>

            if((dwRegister & RF_STATUS_TX_RF_STATUS_MASK ) == 0U)
 800ccbe:	693b      	ldr	r3, [r7, #16]
 800ccc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d102      	bne.n	800ccce <phhalHw_Pn5180_Exchange+0xbe>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_RF_ERROR, PH_COMP_HAL);
 800ccc8:	f240 230a 	movw	r3, #522	@ 0x20a
 800cccc:	e215      	b.n	800d0fa <phhalHw_Pn5180_Exchange+0x4ea>
            }
        }

        /* retrieve transmit buffer */
        PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_GetTxBuffer(pDataParams, PH_ON, &pTmpBuffer, &wTmpBufferLen, &wTmpBufferSize));
 800ccce:	f107 0126 	add.w	r1, r7, #38	@ 0x26
 800ccd2:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800ccd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ccda:	9300      	str	r3, [sp, #0]
 800ccdc:	460b      	mov	r3, r1
 800ccde:	2101      	movs	r1, #1
 800cce0:	68f8      	ldr	r0, [r7, #12]
 800cce2:	f004 f8f0 	bl	8010ec6 <phhalHw_Pn5180_GetTxBuffer>
 800cce6:	4603      	mov	r3, r0
 800cce8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800ccea:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	f040 818c 	bne.w	800d00a <phhalHw_Pn5180_Exchange+0x3fa>

        /* clear internal buffer if requested */
        if ((0U == ((wOption & PH_EXCHANGE_LEAVE_BUFFER_BIT))))
 800ccf2:	897b      	ldrh	r3, [r7, #10]
 800ccf4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d105      	bne.n	800cd08 <phhalHw_Pn5180_Exchange+0xf8>
        {
            pDataParams->wTxBufLen = 0U;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	2200      	movs	r2, #0
 800cd00:	825a      	strh	r2, [r3, #18]
            pDataParams->wTxBufStartPos = 0U;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	2200      	movs	r2, #0
 800cd06:	839a      	strh	r2, [r3, #28]
        }

        /* Validate received parameter */
        if (pRxLength != NULL)
 800cd08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d002      	beq.n	800cd14 <phhalHw_Pn5180_Exchange+0x104>
        {
            *pRxLength = 0U;
 800cd0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd10:	2200      	movs	r2, #0
 800cd12:	801a      	strh	r2, [r3, #0]
        }

        if(pDataParams->bJewelActivated == PH_ON)
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800cd1a:	2b01      	cmp	r3, #1
 800cd1c:	d150      	bne.n	800cdc0 <phhalHw_Pn5180_Exchange+0x1b0>
        {
            wOption = PH_EXCHANGE_DEFAULT;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	817b      	strh	r3, [r7, #10]

            /*Enable Crc_B for the data to be transmitted */
            /*PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask( pDataParams, CRC_TX_CONFIG, CRC_TX_CONFIG_TX_CRC_BYTE2_ENABLE_MASK));*/

            /*Compute Crc_B for the data to be transmitted */
            PH_CHECK_FAILURE_FCT(statusTmp, phTools_ComputeCrc_B(pTxBuffer, wTxLength, aCrc));
 800cd22:	893b      	ldrh	r3, [r7, #8]
 800cd24:	f107 0218 	add.w	r2, r7, #24
 800cd28:	4619      	mov	r1, r3
 800cd2a:	6878      	ldr	r0, [r7, #4]
 800cd2c:	f7f9 fd59 	bl	80067e2 <phTools_ComputeCrc_B>
 800cd30:	4603      	mov	r3, r0
 800cd32:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800cd34:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	f040 8167 	bne.w	800d00a <phhalHw_Pn5180_Exchange+0x3fa>
            /* Turn OFF the parity, by default shadow it is ON */
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_PARITY, PH_OFF));
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	2100      	movs	r1, #0
 800cd40:	68f8      	ldr	r0, [r7, #12]
 800cd42:	f000 fae5 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 800cd46:	4603      	mov	r3, r0
 800cd48:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800cd4a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	f040 815c 	bne.w	800d00a <phhalHw_Pn5180_Exchange+0x3fa>

            /* Make sure CRC is OFF */
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_TXCRC, PH_OFF));
 800cd52:	2200      	movs	r2, #0
 800cd54:	2101      	movs	r1, #1
 800cd56:	68f8      	ldr	r0, [r7, #12]
 800cd58:	f000 fada 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800cd60:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	f040 8151 	bne.w	800d00a <phhalHw_Pn5180_Exchange+0x3fa>
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_RXCRC, PH_OFF));
 800cd68:	2200      	movs	r2, #0
 800cd6a:	2102      	movs	r1, #2
 800cd6c:	68f8      	ldr	r0, [r7, #12]
 800cd6e:	f000 facf 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 800cd72:	4603      	mov	r3, r0
 800cd74:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800cd76:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	f040 8146 	bne.w	800d00a <phhalHw_Pn5180_Exchange+0x3fa>
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_TXLASTBITS, 7U));
 800cd7e:	2207      	movs	r2, #7
 800cd80:	2103      	movs	r1, #3
 800cd82:	68f8      	ldr	r0, [r7, #12]
 800cd84:	f000 fac4 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800cd8c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	f040 813b 	bne.w	800d00a <phhalHw_Pn5180_Exchange+0x3fa>

            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask( pDataParams, TRANSCEIVER_CONFIG, TRANSCEIVER_CONFIG_TX_FRAMESTEP_ENABLE_MASK));
 800cd94:	2204      	movs	r2, #4
 800cd96:	2104      	movs	r1, #4
 800cd98:	68f8      	ldr	r0, [r7, #12]
 800cd9a:	f003 f939 	bl	8010010 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800cda2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	f040 8130 	bne.w	800d00a <phhalHw_Pn5180_Exchange+0x3fa>
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_TXWAIT_US,29));
 800cdaa:	221d      	movs	r2, #29
 800cdac:	2107      	movs	r1, #7
 800cdae:	68f8      	ldr	r0, [r7, #12]
 800cdb0:	f000 faae 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800cdb8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	f040 8125 	bne.w	800d00a <phhalHw_Pn5180_Exchange+0x3fa>
        }

        if ((pDataParams->wTxBufStartPos == 0U))
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	8b9b      	ldrh	r3, [r3, #28]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d122      	bne.n	800ce0e <phhalHw_Pn5180_Exchange+0x1fe>
        {
            pTmpBuffer[pDataParams->wTxBufStartPos++] = PHHAL_HW_PN5180_SET_INSTR_SEND_DATA; /* Reserved 0th Location of buffer for Command code */
 800cdc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	8b9b      	ldrh	r3, [r3, #28]
 800cdce:	1c59      	adds	r1, r3, #1
 800cdd0:	b288      	uxth	r0, r1
 800cdd2:	68f9      	ldr	r1, [r7, #12]
 800cdd4:	8388      	strh	r0, [r1, #28]
 800cdd6:	4413      	add	r3, r2
 800cdd8:	2209      	movs	r2, #9
 800cdda:	701a      	strb	r2, [r3, #0]
            pTmpBuffer[pDataParams->wTxBufStartPos++] = 0U; /* Reserved 1st Location of buffer for Command code */
 800cddc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	8b9b      	ldrh	r3, [r3, #28]
 800cde2:	1c59      	adds	r1, r3, #1
 800cde4:	b288      	uxth	r0, r1
 800cde6:	68f9      	ldr	r1, [r7, #12]
 800cde8:	8388      	strh	r0, [r1, #28]
 800cdea:	4413      	add	r3, r2
 800cdec:	2200      	movs	r2, #0
 800cdee:	701a      	strb	r2, [r3, #0]

            /* Prepend Start Byte (0xF0U) in Passive 106kbps during NFCIP exchange. */
#ifndef PN5180_P2P_HW_SYNC_BYTE
            if (pDataParams->bNfcipMode == PH_ON)
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800cdf6:	2b01      	cmp	r3, #1
 800cdf8:	d109      	bne.n	800ce0e <phhalHw_Pn5180_Exchange+0x1fe>
            {
                /* Prepend Start Byte 0xF0U in case of Passive Communication at 106kbps BaudRate */
                pTmpBuffer[pDataParams->wTxBufStartPos++] = 0xF0U;
 800cdfa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	8b9b      	ldrh	r3, [r3, #28]
 800ce00:	1c59      	adds	r1, r3, #1
 800ce02:	b288      	uxth	r0, r1
 800ce04:	68f9      	ldr	r1, [r7, #12]
 800ce06:	8388      	strh	r0, [r1, #28]
 800ce08:	4413      	add	r3, r2
 800ce0a:	22f0      	movs	r2, #240	@ 0xf0
 800ce0c:	701a      	strb	r2, [r3, #0]
            }
#endif
        }

        if (wTxLength != 0U)
 800ce0e:	893b      	ldrh	r3, [r7, #8]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d03d      	beq.n	800ce90 <phhalHw_Pn5180_Exchange+0x280>
        {
            /* check wTmpBufferSize fill all the required data to be transmitted */
            if (wTmpBufferSize < (wTxLength + pDataParams->wTxBufLen + pDataParams->wTxBufStartPos))
 800ce14:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ce16:	4619      	mov	r1, r3
 800ce18:	893b      	ldrh	r3, [r7, #8]
 800ce1a:	68fa      	ldr	r2, [r7, #12]
 800ce1c:	8a52      	ldrh	r2, [r2, #18]
 800ce1e:	4413      	add	r3, r2
 800ce20:	68fa      	ldr	r2, [r7, #12]
 800ce22:	8b92      	ldrh	r2, [r2, #28]
 800ce24:	4413      	add	r3, r2
 800ce26:	4299      	cmp	r1, r3
 800ce28:	da09      	bge.n	800ce3e <phhalHw_Pn5180_Exchange+0x22e>
            {
                /* Can't fit in the HAL buffer what we are trying to send */
                pDataParams->wTxBufLen = 0U;
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	825a      	strh	r2, [r3, #18]
                pDataParams->wTxBufStartPos = 0U;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	2200      	movs	r2, #0
 800ce34:	839a      	strh	r2, [r3, #28]
                statusTmp = (PH_ERR_BUFFER_OVERFLOW | PH_COMP_HAL);
 800ce36:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800ce3a:	86fb      	strh	r3, [r7, #54]	@ 0x36
                break;
 800ce3c:	e0e5      	b.n	800d00a <phhalHw_Pn5180_Exchange+0x3fa>
            }

            /* copy data */
            (void)memcpy(&pTmpBuffer[pDataParams->wTxBufStartPos + pDataParams->wTxBufLen], pTxBuffer, wTxLength);
 800ce3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce40:	68fa      	ldr	r2, [r7, #12]
 800ce42:	8b92      	ldrh	r2, [r2, #28]
 800ce44:	4611      	mov	r1, r2
 800ce46:	68fa      	ldr	r2, [r7, #12]
 800ce48:	8a52      	ldrh	r2, [r2, #18]
 800ce4a:	440a      	add	r2, r1
 800ce4c:	4413      	add	r3, r2
 800ce4e:	893a      	ldrh	r2, [r7, #8]
 800ce50:	6879      	ldr	r1, [r7, #4]
 800ce52:	4618      	mov	r0, r3
 800ce54:	f010 f9d3 	bl	801d1fe <memcpy>
            pDataParams->wTxBufLen += wTxLength;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	8a5a      	ldrh	r2, [r3, #18]
 800ce5c:	893b      	ldrh	r3, [r7, #8]
 800ce5e:	4413      	add	r3, r2
 800ce60:	b29a      	uxth	r2, r3
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	825a      	strh	r2, [r3, #18]

            if(pDataParams->bJewelActivated == PH_ON)
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ce6c:	2b01      	cmp	r3, #1
 800ce6e:	d10f      	bne.n	800ce90 <phhalHw_Pn5180_Exchange+0x280>
            {
                (void)memcpy(&pTmpBuffer[pDataParams->wTxBufStartPos + pDataParams->wTxBufLen], aCrc, 2U);
 800ce70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce72:	68fa      	ldr	r2, [r7, #12]
 800ce74:	8b92      	ldrh	r2, [r2, #28]
 800ce76:	4611      	mov	r1, r2
 800ce78:	68fa      	ldr	r2, [r7, #12]
 800ce7a:	8a52      	ldrh	r2, [r2, #18]
 800ce7c:	440a      	add	r2, r1
 800ce7e:	4413      	add	r3, r2
 800ce80:	8b3a      	ldrh	r2, [r7, #24]
 800ce82:	801a      	strh	r2, [r3, #0]
                pDataParams->wTxBufLen += 2U;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	8a5b      	ldrh	r3, [r3, #18]
 800ce88:	3302      	adds	r3, #2
 800ce8a:	b29a      	uxth	r2, r3
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	825a      	strh	r2, [r3, #18]
            }
        }

        wTxLength = 0U;
 800ce90:	2300      	movs	r3, #0
 800ce92:	813b      	strh	r3, [r7, #8]

        if (0U != (wOption & PH_EXCHANGE_BUFFERED_BIT ))
 800ce94:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	da01      	bge.n	800cea0 <phhalHw_Pn5180_Exchange+0x290>
        {
            return PH_ERR_SUCCESS;
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	e12c      	b.n	800d0fa <phhalHw_Pn5180_Exchange+0x4ea>
        }

        pDataParams->wTxBufLen += pDataParams->wTxBufStartPos;
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	8a5a      	ldrh	r2, [r3, #18]
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	8b9b      	ldrh	r3, [r3, #28]
 800cea8:	4413      	add	r3, r2
 800ceaa:	b29a      	uxth	r2, r3
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	825a      	strh	r2, [r3, #18]

        /* Check for maximum bytes that can be sent to IC */
        if(pDataParams->wTxBufLen > 0x106U)
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	8a5b      	ldrh	r3, [r3, #18]
 800ceb4:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 800ceb8:	d903      	bls.n	800cec2 <phhalHw_Pn5180_Exchange+0x2b2>
        {
            /*PN5180 TxBuffer is 262 bytes including 2 byte command header*/
            statusTmp = (PH_ERR_BUFFER_OVERFLOW | PH_COMP_HAL);
 800ceba:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800cebe:	86fb      	strh	r3, [r7, #54]	@ 0x36
            break;
 800cec0:	e0a3      	b.n	800d00a <phhalHw_Pn5180_Exchange+0x3fa>
        }

        /*Execute the Tranceive Command*/
        PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Int_LoadCommand(pDataParams, PHHAL_HW_PN5180_SYSTEM_TRANSEIVE_CMD));
 800cec2:	2103      	movs	r1, #3
 800cec4:	68f8      	ldr	r0, [r7, #12]
 800cec6:	f005 fb11 	bl	80124ec <phhalHw_Pn5180_Int_LoadCommand>
 800ceca:	4603      	mov	r3, r0
 800cecc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800cece:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	f040 809a 	bne.w	800d00a <phhalHw_Pn5180_Exchange+0x3fa>

        /*Set wait IRQ */
        if(pDataParams->bRxMultiple == PH_ON)
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cedc:	2b01      	cmp	r3, #1
 800cede:	d103      	bne.n	800cee8 <phhalHw_Pn5180_Exchange+0x2d8>
        {
            dwIrqWaitFor =  IRQ_STATUS_TIMER1_IRQ_MASK | IRQ_STATUS_GENERAL_ERROR_IRQ_MASK;
 800cee0:	f44f 3304 	mov.w	r3, #135168	@ 0x21000
 800cee4:	633b      	str	r3, [r7, #48]	@ 0x30
 800cee6:	e001      	b.n	800ceec <phhalHw_Pn5180_Exchange+0x2dc>
        }
        else
        {
            dwIrqWaitFor =  IRQ_STATUS_RX_IRQ_MASK | IRQ_STATUS_TIMER1_IRQ_MASK | IRQ_STATUS_GENERAL_ERROR_IRQ_MASK;
 800cee8:	4b86      	ldr	r3, [pc, #536]	@ (800d104 <phhalHw_Pn5180_Exchange+0x4f4>)
 800ceea:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        if (pDataParams->bActiveMode == PH_ON)
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cef2:	2b01      	cmp	r3, #1
 800cef4:	d103      	bne.n	800cefe <phhalHw_Pn5180_Exchange+0x2ee>
        {
            dwIrqWaitFor |= IRQ_STATUS_RF_ACTIVE_ERROR_IRQ_MASK | IRQ_STATUS_RFOFF_DET_IRQ_MASK;
 800cef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cef8:	f443 6388 	orr.w	r3, r3, #1088	@ 0x440
 800cefc:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        /* Clear Interrupts  */
        PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, PHHAL_HW_PN5180_IRQ_SET_CLEAR_ALL_MASK));
 800cefe:	4a82      	ldr	r2, [pc, #520]	@ (800d108 <phhalHw_Pn5180_Exchange+0x4f8>)
 800cf00:	2103      	movs	r1, #3
 800cf02:	68f8      	ldr	r0, [r7, #12]
 800cf04:	f003 f80e 	bl	800ff24 <phhalHw_Pn5180_Instr_WriteRegister>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800cf0c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d17b      	bne.n	800d00a <phhalHw_Pn5180_Exchange+0x3fa>

        (void)phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL);
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 800cf18:	2300      	movs	r3, #0
 800cf1a:	2201      	movs	r2, #1
 800cf1c:	2100      	movs	r1, #0
 800cf1e:	f00a f8e9 	bl	80170f4 <phOsal_EventClear>

        /* Enable IRQ sources */
        PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_ENABLE, dwIrqWaitFor));
 800cf22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf24:	2101      	movs	r1, #1
 800cf26:	68f8      	ldr	r0, [r7, #12]
 800cf28:	f002 fffc 	bl	800ff24 <phhalHw_Pn5180_Instr_WriteRegister>
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800cf30:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d169      	bne.n	800d00a <phhalHw_Pn5180_Exchange+0x3fa>

        /* Configure T1 */
        if(pDataParams->bRxMultiple == PH_ON)
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cf3c:	2b01      	cmp	r3, #1
 800cf3e:	d116      	bne.n	800cf6e <phhalHw_Pn5180_Exchange+0x35e>
        {
            dwValue = (TIMER1_CONFIG_T1_START_ON_TX_ENDED_MASK | TIMER1_CONFIG_T1_ENABLE_MASK);
 800cf40:	f640 0301 	movw	r3, #2049	@ 0x801
 800cf44:	623b      	str	r3, [r7, #32]
            if(pDataParams->bTimeoutUnit == PHHAL_HW_TIME_MILLISECONDS)
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cf4c:	2b01      	cmp	r3, #1
 800cf4e:	d103      	bne.n	800cf58 <phhalHw_Pn5180_Exchange+0x348>
            {
                dwValue |=PHHAL_HW_PN5180_MS_TIMEOUT_PRESCALAR;
 800cf50:	6a3b      	ldr	r3, [r7, #32]
 800cf52:	f043 033c 	orr.w	r3, r3, #60	@ 0x3c
 800cf56:	623b      	str	r3, [r7, #32]
            }
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TIMER1_CONFIG, dwValue));
 800cf58:	6a3b      	ldr	r3, [r7, #32]
 800cf5a:	461a      	mov	r2, r3
 800cf5c:	210f      	movs	r1, #15
 800cf5e:	68f8      	ldr	r0, [r7, #12]
 800cf60:	f002 ffe0 	bl	800ff24 <phhalHw_Pn5180_Instr_WriteRegister>
 800cf64:	4603      	mov	r3, r0
 800cf66:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800cf68:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d14d      	bne.n	800d00a <phhalHw_Pn5180_Exchange+0x3fa>
        }
        if ((pDataParams->bOpeMode != RD_LIB_MODE_EMVCO) && (pDataParams->bRxMultiple == PH_OFF))
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800cf74:	2b01      	cmp	r3, #1
 800cf76:	d01a      	beq.n	800cfae <phhalHw_Pn5180_Exchange+0x39e>
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d115      	bne.n	800cfae <phhalHw_Pn5180_Exchange+0x39e>
        {
            dwValue = (TIMER1_CONFIG_T1_START_ON_TX_ENDED_MASK | TIMER1_CONFIG_T1_STOP_ON_RX_STARTED_MASK | TIMER1_CONFIG_T1_ENABLE_MASK);
 800cf82:	4b62      	ldr	r3, [pc, #392]	@ (800d10c <phhalHw_Pn5180_Exchange+0x4fc>)
 800cf84:	623b      	str	r3, [r7, #32]
            if(pDataParams->bTimeoutUnit == PHHAL_HW_TIME_MILLISECONDS)
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cf8c:	2b01      	cmp	r3, #1
 800cf8e:	d103      	bne.n	800cf98 <phhalHw_Pn5180_Exchange+0x388>
            {
                dwValue |=PHHAL_HW_PN5180_MS_TIMEOUT_PRESCALAR;
 800cf90:	6a3b      	ldr	r3, [r7, #32]
 800cf92:	f043 033c 	orr.w	r3, r3, #60	@ 0x3c
 800cf96:	623b      	str	r3, [r7, #32]
            }
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TIMER1_CONFIG, dwValue ));
 800cf98:	6a3b      	ldr	r3, [r7, #32]
 800cf9a:	461a      	mov	r2, r3
 800cf9c:	210f      	movs	r1, #15
 800cf9e:	68f8      	ldr	r0, [r7, #12]
 800cfa0:	f002 ffc0 	bl	800ff24 <phhalHw_Pn5180_Instr_WriteRegister>
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800cfa8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d12d      	bne.n	800d00a <phhalHw_Pn5180_Exchange+0x3fa>
        }

        *(pTmpBuffer+1U) = (uint8_t)pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TXLASTBITS];
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	f8b3 205e 	ldrh.w	r2, [r3, #94]	@ 0x5e
 800cfb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfb6:	3301      	adds	r3, #1
 800cfb8:	b2d2      	uxtb	r2, r2
 800cfba:	701a      	strb	r2, [r3, #0]

        /* No Response expected*/
        bNumExpBytes = 0U;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	85fb      	strh	r3, [r7, #46]	@ 0x2e

        /* During Active Communication mode if internal RF Field is not ON before transmit then Switch ON the RF Field. */
        if (pDataParams->bActiveMode)
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d01f      	beq.n	800d00a <phhalHw_Pn5180_Exchange+0x3fa>
        {
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegister(pDataParams, RF_STATUS, &dwValue));
 800cfca:	f107 0320 	add.w	r3, r7, #32
 800cfce:	461a      	mov	r2, r3
 800cfd0:	211d      	movs	r1, #29
 800cfd2:	68f8      	ldr	r0, [r7, #12]
 800cfd4:	f003 f9ba 	bl	801034c <phhalHw_Pn5180_Instr_ReadRegister>
 800cfd8:	4603      	mov	r3, r0
 800cfda:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800cfdc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d113      	bne.n	800d00a <phhalHw_Pn5180_Exchange+0x3fa>
            if ((0U == ((dwValue & RF_STATUS_TX_RF_STATUS_MASK))))
 800cfe2:	6a3b      	ldr	r3, [r7, #32]
 800cfe4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d10e      	bne.n	800d00a <phhalHw_Pn5180_Exchange+0x3fa>
            {
                /* field is turned ON */
                PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_FieldOff(pDataParams));
 800cfec:	68f8      	ldr	r0, [r7, #12]
 800cfee:	f000 f8e7 	bl	800d1c0 <phhalHw_Pn5180_FieldOff>
 800cff2:	4603      	mov	r3, r0
 800cff4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800cff6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d106      	bne.n	800d00a <phhalHw_Pn5180_Exchange+0x3fa>
                PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_FieldOn(pDataParams));
 800cffc:	68f8      	ldr	r0, [r7, #12]
 800cffe:	f000 f889 	bl	800d114 <phhalHw_Pn5180_FieldOn>
 800d002:	4603      	mov	r3, r0
 800d004:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800d006:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d008:	2b00      	cmp	r3, #0
            }
        }
    }while(FALSE);

    if (pDataParams->bPollGuardTimeFlag == PH_ON)
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800d010:	2b01      	cmp	r3, #1
 800d012:	d120      	bne.n	800d056 <phhalHw_Pn5180_Exchange+0x446>
    {
        pDataParams->bPollGuardTimeFlag = PH_OFF;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	2200      	movs	r2, #0
 800d018:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        /* When there is no errors in preconditions wait till timer expire. */
        if (statusTmp == PH_ERR_SUCCESS)
 800d01c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d110      	bne.n	800d044 <phhalHw_Pn5180_Exchange+0x434>
        {
            /* Wait infinitely for the Poll Guard Time to Expire. */
            (void)phOsal_EventPend(&xEventHandle, (phOsal_EventOpt_t)(E_OS_EVENT_OPT_PEND_SET_ANY | E_OS_EVENT_OPT_PEND_CLEAR_ON_EXIT),
 800d022:	f107 0314 	add.w	r3, r7, #20
 800d026:	9300      	str	r3, [sp, #0]
 800d028:	2322      	movs	r3, #34	@ 0x22
 800d02a:	f04f 32ff 	mov.w	r2, #4294967295
 800d02e:	2105      	movs	r1, #5
 800d030:	4837      	ldr	r0, [pc, #220]	@ (800d110 <phhalHw_Pn5180_Exchange+0x500>)
 800d032:	f009 ff93 	bl	8016f5c <phOsal_EventPend>
                    PHOSAL_MAX_DELAY, E_PH_OSAL_EVT_GT_EXP | E_PH_OSAL_EVT_ABORT, &dwEventFlags);
            if(0U != (dwEventFlags & E_PH_OSAL_EVT_ABORT))
 800d036:	697b      	ldr	r3, [r7, #20]
 800d038:	f003 0320 	and.w	r3, r3, #32
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d001      	beq.n	800d044 <phhalHw_Pn5180_Exchange+0x434>
            {
                statusTmp = PH_ERR_ABORTED;
 800d040:	2312      	movs	r3, #18
 800d042:	86fb      	strh	r3, [r7, #54]	@ 0x36
            }
        }

        /* Disable Timer */
        PH_CHECK_SUCCESS_FCT(status, phDriver_TimerStop());
 800d044:	f009 fe8c 	bl	8016d60 <phDriver_TimerStop>
 800d048:	4603      	mov	r3, r0
 800d04a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800d04c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d001      	beq.n	800d056 <phhalHw_Pn5180_Exchange+0x446>
 800d052:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d054:	e051      	b.n	800d0fa <phhalHw_Pn5180_Exchange+0x4ea>
    }

    if (statusTmp != PH_ERR_SUCCESS)
 800d056:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d001      	beq.n	800d060 <phhalHw_Pn5180_Exchange+0x450>
    {
        return statusTmp;
 800d05c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d05e:	e04c      	b.n	800d0fa <phhalHw_Pn5180_Exchange+0x4ea>
    }

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 800d060:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	8a5a      	ldrh	r2, [r3, #18]
 800d066:	8df8      	ldrh	r0, [r7, #46]	@ 0x2e
 800d068:	f107 031a 	add.w	r3, r7, #26
 800d06c:	9301      	str	r3, [sp, #4]
 800d06e:	f107 031c 	add.w	r3, r7, #28
 800d072:	9300      	str	r3, [sp, #0]
 800d074:	4603      	mov	r3, r0
 800d076:	68f8      	ldr	r0, [r7, #12]
 800d078:	f002 f89a 	bl	800f1b0 <phhalHw_Pn5180_BalExchange>
 800d07c:	4603      	mov	r3, r0
 800d07e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800d080:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d082:	2b00      	cmp	r3, #0
 800d084:	d001      	beq.n	800d08a <phhalHw_Pn5180_Exchange+0x47a>
 800d086:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d088:	e037      	b.n	800d0fa <phhalHw_Pn5180_Exchange+0x4ea>
        bNumExpBytes,
        pReceivedData,
        &wDataLenTmp));

    /* Reset for the next transaction */
    pDataParams->wTxBufStartPos = 0U;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	2200      	movs	r2, #0
 800d08e:	839a      	strh	r2, [r3, #28]
    pDataParams->wTxBufLen = 0U;
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	2200      	movs	r2, #0
 800d094:	825a      	strh	r2, [r3, #18]

    /* Reset TxLastBits */
    if (pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TXLASTBITS] != 0U)
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d00b      	beq.n	800d0b8 <phhalHw_Pn5180_Exchange+0x4a8>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_TXLASTBITS, 0x00U));
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	2103      	movs	r1, #3
 800d0a4:	68f8      	ldr	r0, [r7, #12]
 800d0a6:	f000 f933 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800d0ae:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d001      	beq.n	800d0b8 <phhalHw_Pn5180_Exchange+0x4a8>
 800d0b4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d0b6:	e020      	b.n	800d0fa <phhalHw_Pn5180_Exchange+0x4ea>
    }

    status  = phhalHw_Pn5180_Receive_Int(pDataParams,dwIrqWaitFor,ppRxBuffer,pRxLength,PH_ON);
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	9300      	str	r3, [sp, #0]
 800d0bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d0be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d0c0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d0c2:	68f8      	ldr	r0, [r7, #12]
 800d0c4:	f004 ff90 	bl	8011fe8 <phhalHw_Pn5180_Receive_Int>
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    if( (status & PH_ERR_MASK) != PH_ERR_SUCCESS)
 800d0cc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d0ce:	b2db      	uxtb	r3, r3
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d004      	beq.n	800d0de <phhalHw_Pn5180_Exchange+0x4ce>
    {
        /*load idle command*/
        statusTmp = phhalHw_Pn5180_Int_IdleCommand(pDataParams);
 800d0d4:	68f8      	ldr	r0, [r7, #12]
 800d0d6:	f005 f9e7 	bl	80124a8 <phhalHw_Pn5180_Int_IdleCommand>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	86fb      	strh	r3, [r7, #54]	@ 0x36
    }

    if (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO)
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800d0e4:	2b01      	cmp	r3, #1
 800d0e6:	d007      	beq.n	800d0f8 <phhalHw_Pn5180_Exchange+0x4e8>
    {
        statusTmp = phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, TIMER1_CONFIG, (uint32_t)(~TIMER1_CONFIG_T1_ENABLE_MASK));
 800d0e8:	f06f 0201 	mvn.w	r2, #1
 800d0ec:	210f      	movs	r1, #15
 800d0ee:	68f8      	ldr	r0, [r7, #12]
 800d0f0:	f003 f804 	bl	80100fc <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	86fb      	strh	r3, [r7, #54]	@ 0x36
    }

    return status;
 800d0f8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3738      	adds	r7, #56	@ 0x38
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}
 800d102:	bf00      	nop
 800d104:	00021001 	.word	0x00021001
 800d108:	000fffff 	.word	0x000fffff
 800d10c:	00100801 	.word	0x00100801
 800d110:	2000178c 	.word	0x2000178c

0800d114 <phhalHw_Pn5180_FieldOn>:

phStatus_t phhalHw_Pn5180_FieldOn(
    phhalHw_Pn5180_DataParams_t * pDataParams
    )
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b084      	sub	sp, #16
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
    uint32_t   PH_MEMLOC_REM dwRegister;		// 临时变量：用于存储寄存器值
    phStatus_t PH_MEMLOC_REM statusTmp;			// 临时变量：用于存储函数调用返回的状态值
    uint8_t    PH_MEMLOC_REM  bRFONconfig = 0U;	// 用于配置 RF_ON 参数，bit0=RFCA，bit1=ActiveMode
 800d11c:	2300      	movs	r3, #0
 800d11e:	73fb      	strb	r3, [r7, #15]

    // 检查是否关闭了 RF 碰撞避免（RFCA），如关闭则设置 bit0 = 1
    if(pDataParams->bRfca == PH_OFF)
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	78db      	ldrb	r3, [r3, #3]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d103      	bne.n	800d130 <phhalHw_Pn5180_FieldOn+0x1c>
    {
        bRFONconfig |= 0x01U;
 800d128:	7bfb      	ldrb	r3, [r7, #15]
 800d12a:	f043 0301 	orr.w	r3, r3, #1
 800d12e:	73fb      	strb	r3, [r7, #15]
    }
    // 检查是否启用了主动模式，如启用则设置 bit1 = 1
    if(pDataParams->bActiveMode == PH_ON)
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d136:	2b01      	cmp	r3, #1
 800d138:	d103      	bne.n	800d142 <phhalHw_Pn5180_FieldOn+0x2e>
    {
        bRFONconfig |= 0x02U;
 800d13a:	7bfb      	ldrb	r3, [r7, #15]
 800d13c:	f043 0302 	orr.w	r3, r3, #2
 800d140:	73fb      	strb	r3, [r7, #15]
    }
    // 构建清除中断标志寄存器的掩码
    dwRegister = (IRQ_SET_CLEAR_RF_ACTIVE_ERROR_IRQ_CLR_MASK    \
 800d142:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 800d146:	60bb      	str	r3, [r7, #8]
        | IRQ_SET_CLEAR_TX_RFOFF_IRQ_CLR_MASK    \
        | IRQ_SET_CLEAR_RFON_DET_IRQ_CLR_MASK    \
        | IRQ_SET_CLEAR_RFOFF_DET_IRQ_CLR_MASK);

    // 写寄存器以清除上述中断标志
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, IRQ_SET_CLEAR, dwRegister));
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	461a      	mov	r2, r3
 800d14c:	2103      	movs	r1, #3
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f002 ff5e 	bl	8010010 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 800d154:	4603      	mov	r3, r0
 800d156:	81bb      	strh	r3, [r7, #12]
 800d158:	89bb      	ldrh	r3, [r7, #12]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d001      	beq.n	800d162 <phhalHw_Pn5180_FieldOn+0x4e>
 800d15e:	89bb      	ldrh	r3, [r7, #12]
 800d160:	e02a      	b.n	800d1b8 <phhalHw_Pn5180_FieldOn+0xa4>

    // 发出 RF_ON 指令，使用配置字节（可能包含 RFCA 或 ActiveMode）
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_RfOn(pDataParams, bRFONconfig));      /* Field ON using Collision Avoidance option */
 800d162:	7bfb      	ldrb	r3, [r7, #15]
 800d164:	4619      	mov	r1, r3
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f003 fe34 	bl	8010dd4 <phhalHw_Pn5180_Instr_RfOn>
 800d16c:	4603      	mov	r3, r0
 800d16e:	81bb      	strh	r3, [r7, #12]
 800d170:	89bb      	ldrh	r3, [r7, #12]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d001      	beq.n	800d17a <phhalHw_Pn5180_FieldOn+0x66>
 800d176:	89bb      	ldrh	r3, [r7, #12]
 800d178:	e01e      	b.n	800d1b8 <phhalHw_Pn5180_FieldOn+0xa4>

    // 读取 RF 状态寄存器以验证 RF 是否真正开启
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegister(pDataParams, RF_STATUS, &dwRegister));
 800d17a:	f107 0308 	add.w	r3, r7, #8
 800d17e:	461a      	mov	r2, r3
 800d180:	211d      	movs	r1, #29
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f003 f8e2 	bl	801034c <phhalHw_Pn5180_Instr_ReadRegister>
 800d188:	4603      	mov	r3, r0
 800d18a:	81bb      	strh	r3, [r7, #12]
 800d18c:	89bb      	ldrh	r3, [r7, #12]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d001      	beq.n	800d196 <phhalHw_Pn5180_FieldOn+0x82>
 800d192:	89bb      	ldrh	r3, [r7, #12]
 800d194:	e010      	b.n	800d1b8 <phhalHw_Pn5180_FieldOn+0xa4>
    // 检查 TX_RF_STATUS 位（发送器是否开启 RF）
    if((dwRegister & RF_STATUS_TX_RF_STATUS_MASK ) == 0U)
 800d196:	68bb      	ldr	r3, [r7, #8]
 800d198:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d10a      	bne.n	800d1b6 <phhalHw_Pn5180_FieldOn+0xa2>
    {
    	// 如果 RF 没打开，检查是否是外部 RF 导致错误
        if(0U != (dwRegister & IRQ_STATUS_RF_ACTIVE_ERROR_IRQ_MASK ))
 800d1a0:	68bb      	ldr	r3, [r7, #8]
 800d1a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d002      	beq.n	800d1b0 <phhalHw_Pn5180_FieldOn+0x9c>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_EXT_RF_ERROR, PH_COMP_HAL);
 800d1aa:	f44f 7304 	mov.w	r3, #528	@ 0x210
 800d1ae:	e003      	b.n	800d1b8 <phhalHw_Pn5180_FieldOn+0xa4>
        }
        // 其他 RF 错误
        return PH_ADD_COMPCODE_FIXED(PH_ERR_RF_ERROR, PH_COMP_HAL);
 800d1b0:	f240 230a 	movw	r3, #522	@ 0x20a
 800d1b4:	e000      	b.n	800d1b8 <phhalHw_Pn5180_FieldOn+0xa4>
    }
    // RF 成功开启
    return PH_ERR_SUCCESS;
 800d1b6:	2300      	movs	r3, #0
}
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	3710      	adds	r7, #16
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}

0800d1c0 <phhalHw_Pn5180_FieldOff>:

phStatus_t phhalHw_Pn5180_FieldOff(
    phhalHw_Pn5180_DataParams_t * pDataParams
    )
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b084      	sub	sp, #16
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM statusTmp;

    /*bTransmited is a flag which is used to identify if a transmit is followed by a receive.
    If any other api follows a transmit, then it should be reset */
    pDataParams->bTransmited = PH_OFF;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Disable the EMD. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_OFF));
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	215e      	movs	r1, #94	@ 0x5e
 800d1d4:	6878      	ldr	r0, [r7, #4]
 800d1d6:	f000 f89b 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 800d1da:	4603      	mov	r3, r0
 800d1dc:	81fb      	strh	r3, [r7, #14]
 800d1de:	89fb      	ldrh	r3, [r7, #14]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d001      	beq.n	800d1e8 <phhalHw_Pn5180_FieldOff+0x28>
 800d1e4:	89fb      	ldrh	r3, [r7, #14]
 800d1e6:	e00a      	b.n	800d1fe <phhalHw_Pn5180_FieldOff+0x3e>

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_RfOff(pDataParams));
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f003 fe32 	bl	8010e52 <phhalHw_Pn5180_Instr_RfOff>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	81fb      	strh	r3, [r7, #14]
 800d1f2:	89fb      	ldrh	r3, [r7, #14]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d001      	beq.n	800d1fc <phhalHw_Pn5180_FieldOff+0x3c>
 800d1f8:	89fb      	ldrh	r3, [r7, #14]
 800d1fa:	e000      	b.n	800d1fe <phhalHw_Pn5180_FieldOff+0x3e>
    return PH_ERR_SUCCESS;
 800d1fc:	2300      	movs	r3, #0
}
 800d1fe:	4618      	mov	r0, r3
 800d200:	3710      	adds	r7, #16
 800d202:	46bd      	mov	sp, r7
 800d204:	bd80      	pop	{r7, pc}
	...

0800d208 <phhalHw_Pn5180_Wait>:
phStatus_t phhalHw_Pn5180_Wait(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bUnit,
    uint16_t wTimeout		// 等待超时时间
    )
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b086      	sub	sp, #24
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
 800d210:	460b      	mov	r3, r1
 800d212:	70fb      	strb	r3, [r7, #3]
 800d214:	4613      	mov	r3, r2
 800d216:	803b      	strh	r3, [r7, #0]
	#ifdef USE_POLLING_MODE
    // 轮询模式：主动检查IRQ_STATUS寄存器
    uint32_t dwStartTime = HAL_GetTick();
 800d218:	f00a f8d8 	bl	80173cc <HAL_GetTick>
 800d21c:	6138      	str	r0, [r7, #16]
    uint32_t dwTimeout = wTimeout;
 800d21e:	883b      	ldrh	r3, [r7, #0]
 800d220:	617b      	str	r3, [r7, #20]

    if (bUnit == PHHAL_HW_TIME_MICROSECONDS) {
 800d222:	78fb      	ldrb	r3, [r7, #3]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d128      	bne.n	800d27a <phhalHw_Pn5180_Wait+0x72>
        dwTimeout = (wTimeout + 999) / 1000; // 转换为毫秒
 800d228:	883b      	ldrh	r3, [r7, #0]
 800d22a:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 800d22e:	4a19      	ldr	r2, [pc, #100]	@ (800d294 <phhalHw_Pn5180_Wait+0x8c>)
 800d230:	fb82 1203 	smull	r1, r2, r2, r3
 800d234:	1192      	asrs	r2, r2, #6
 800d236:	17db      	asrs	r3, r3, #31
 800d238:	1ad3      	subs	r3, r2, r3
 800d23a:	617b      	str	r3, [r7, #20]
    }

    while ((HAL_GetTick() - dwStartTime) < dwTimeout)
 800d23c:	e01d      	b.n	800d27a <phhalHw_Pn5180_Wait+0x72>
        // 读取IRQ_STATUS寄存器
        uint32_t dwIrqStatus;
        phStatus_t status;

        // 读取IRQ_STATUS寄存器
        status = phhalHw_Pn5180_ReadRegister(pDataParams, IRQ_STATUS, &dwIrqStatus);
 800d23e:	f107 0308 	add.w	r3, r7, #8
 800d242:	461a      	mov	r2, r3
 800d244:	2102      	movs	r1, #2
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f7ff fb0a 	bl	800c860 <phhalHw_Pn5180_ReadRegister>
 800d24c:	4603      	mov	r3, r0
 800d24e:	81fb      	strh	r3, [r7, #14]
        if (status != PH_ERR_SUCCESS)
 800d250:	89fb      	ldrh	r3, [r7, #14]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d001      	beq.n	800d25a <phhalHw_Pn5180_Wait+0x52>
        {
    	    return status;
 800d256:	89fb      	ldrh	r3, [r7, #14]
 800d258:	e018      	b.n	800d28c <phhalHw_Pn5180_Wait+0x84>
        }

        // 使用正确的宏定义检查中断标志
        if (dwIrqStatus & (IRQ_STATUS_RX_IRQ_MASK | IRQ_STATUS_IDLE_IRQ_MASK | IRQ_STATUS_TX_IRQ_MASK))
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	f003 0307 	and.w	r3, r3, #7
 800d260:	2b00      	cmp	r3, #0
 800d262:	d007      	beq.n	800d274 <phhalHw_Pn5180_Wait+0x6c>
        {
            // 清除检测到的中断标志
            phhalHw_Pn5180_WriteRegister(pDataParams, IRQ_SET_CLEAR, dwIrqStatus);
 800d264:	68bb      	ldr	r3, [r7, #8]
 800d266:	461a      	mov	r2, r3
 800d268:	2103      	movs	r1, #3
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f7ff fae6 	bl	800c83c <phhalHw_Pn5180_WriteRegister>
            return PH_ERR_SUCCESS;
 800d270:	2300      	movs	r3, #0
 800d272:	e00b      	b.n	800d28c <phhalHw_Pn5180_Wait+0x84>
        }

        HAL_Delay(1); // 短暂延时
 800d274:	2001      	movs	r0, #1
 800d276:	f00a f8b5 	bl	80173e4 <HAL_Delay>
    while ((HAL_GetTick() - dwStartTime) < dwTimeout)
 800d27a:	f00a f8a7 	bl	80173cc <HAL_GetTick>
 800d27e:	4602      	mov	r2, r0
 800d280:	693b      	ldr	r3, [r7, #16]
 800d282:	1ad3      	subs	r3, r2, r3
 800d284:	697a      	ldr	r2, [r7, #20]
 800d286:	429a      	cmp	r2, r3
 800d288:	d8d9      	bhi.n	800d23e <phhalHw_Pn5180_Wait+0x36>
    }

    return PH_ERR_IO_TIMEOUT;
 800d28a:	2301      	movs	r3, #1
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Int_Wait( pDataParams, dwLoadValue,  wPrescaler));
    }

    return PH_ERR_SUCCESS;
#endif
}
 800d28c:	4618      	mov	r0, r3
 800d28e:	3718      	adds	r7, #24
 800d290:	46bd      	mov	sp, r7
 800d292:	bd80      	pop	{r7, pc}
 800d294:	10624dd3 	.word	0x10624dd3

0800d298 <phhalHw_Pn5180_FieldReset>:

phStatus_t phhalHw_Pn5180_FieldReset(
    phhalHw_Pn5180_DataParams_t * pDataParams
    )
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b084      	sub	sp, #16
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;

    /* Switch off the field */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_FieldOff(pDataParams));
 800d2a0:	6878      	ldr	r0, [r7, #4]
 800d2a2:	f7ff ff8d 	bl	800d1c0 <phhalHw_Pn5180_FieldOff>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	81fb      	strh	r3, [r7, #14]
 800d2aa:	89fb      	ldrh	r3, [r7, #14]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d001      	beq.n	800d2b4 <phhalHw_Pn5180_FieldReset+0x1c>
 800d2b0:	89fb      	ldrh	r3, [r7, #14]
 800d2b2:	e026      	b.n	800d302 <phhalHw_Pn5180_FieldReset+0x6a>

    /* wait for field-off time-out */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Wait(
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d2b8:	461a      	mov	r2, r3
 800d2ba:	2101      	movs	r1, #1
 800d2bc:	6878      	ldr	r0, [r7, #4]
 800d2be:	f7ff ffa3 	bl	800d208 <phhalHw_Pn5180_Wait>
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	81fb      	strh	r3, [r7, #14]
 800d2c6:	89fb      	ldrh	r3, [r7, #14]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d001      	beq.n	800d2d0 <phhalHw_Pn5180_FieldReset+0x38>
 800d2cc:	89fb      	ldrh	r3, [r7, #14]
 800d2ce:	e018      	b.n	800d302 <phhalHw_Pn5180_FieldReset+0x6a>
        pDataParams,
        PHHAL_HW_TIME_MILLISECONDS,
        (pDataParams->wFieldOffTime)));

    /* switch on the field again */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_FieldOn(pDataParams));
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f7ff ff1f 	bl	800d114 <phhalHw_Pn5180_FieldOn>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	81fb      	strh	r3, [r7, #14]
 800d2da:	89fb      	ldrh	r3, [r7, #14]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d001      	beq.n	800d2e4 <phhalHw_Pn5180_FieldReset+0x4c>
 800d2e0:	89fb      	ldrh	r3, [r7, #14]
 800d2e2:	e00e      	b.n	800d302 <phhalHw_Pn5180_FieldReset+0x6a>

    /* wait for field-recovery time-out */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Wait(
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d2e8:	461a      	mov	r2, r3
 800d2ea:	2101      	movs	r1, #1
 800d2ec:	6878      	ldr	r0, [r7, #4]
 800d2ee:	f7ff ff8b 	bl	800d208 <phhalHw_Pn5180_Wait>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	81fb      	strh	r3, [r7, #14]
 800d2f6:	89fb      	ldrh	r3, [r7, #14]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d001      	beq.n	800d300 <phhalHw_Pn5180_FieldReset+0x68>
 800d2fc:	89fb      	ldrh	r3, [r7, #14]
 800d2fe:	e000      	b.n	800d302 <phhalHw_Pn5180_FieldReset+0x6a>
        pDataParams,
        PHHAL_HW_TIME_MILLISECONDS,
        (pDataParams->wFieldRecoveryTime)));

    return PH_ERR_SUCCESS;
 800d300:	2300      	movs	r3, #0
}
 800d302:	4618      	mov	r0, r3
 800d304:	3710      	adds	r7, #16
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}
 800d30a:	0000      	movs	r0, r0
 800d30c:	0000      	movs	r0, r0
	...

0800d310 <phhalHw_Pn5180_SetConfig>:
phStatus_t phhalHw_Pn5180_SetConfig(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wConfig,
    uint16_t wValue
    )
{
 800d310:	b5b0      	push	{r4, r5, r7, lr}
 800d312:	b090      	sub	sp, #64	@ 0x40
 800d314:	af02      	add	r7, sp, #8
 800d316:	6078      	str	r0, [r7, #4]
 800d318:	460b      	mov	r3, r1
 800d31a:	807b      	strh	r3, [r7, #2]
 800d31c:	4613      	mov	r3, r2
 800d31e:	803b      	strh	r3, [r7, #0]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint32_t    PH_MEMLOC_REM dwRegister;
    uint32_t    PH_MEMLOC_REM dwValue;
    uint8_t *   PH_MEMLOC_REM pBuffer = NULL;
 800d320:	2300      	movs	r3, #0
 800d322:	61fb      	str	r3, [r7, #28]
    uint16_t    PH_MEMLOC_REM wBufferSize;
    uint16_t    PH_MEMLOC_REM wBufferLen = 0U;
 800d324:	2300      	movs	r3, #0
 800d326:	833b      	strh	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wFraming;

    uint8_t     PH_MEMLOC_BUF wRegTypeValueSets[12];
    uint16_t    PH_MEMLOC_REM wSizeOfRegTypeValueSets;
    uint32_t    PH_MEMLOC_REM dwTemp;
    float32_t   PH_MEMLOC_REM fTime=0.0;
 800d328:	f04f 0300 	mov.w	r3, #0
 800d32c:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint16_t    PH_MEMLOC_REM wTmpValue = 0xFFU;
 800d32e:	23ff      	movs	r3, #255	@ 0xff
 800d330:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    switch(wConfig)
 800d332:	887b      	ldrh	r3, [r7, #2]
 800d334:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800d338:	3b25      	subs	r3, #37	@ 0x25
 800d33a:	2b07      	cmp	r3, #7
 800d33c:	d809      	bhi.n	800d352 <phhalHw_Pn5180_SetConfig+0x42>
    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_INTEGRITY_ERR_CHECK:
    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_LEN_BYTE_MIN:
    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_LEN_BYTE_MAX:
    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_RC_BYTE_VAL:
        /* Check if Firmware version is below 4.1, and return with PH_ERR_INVALID_PARAMETER. */
        if (pDataParams->wFirmwareVer < 0x401U)
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 800d344:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d348:	d805      	bhi.n	800d356 <phhalHw_Pn5180_SetConfig+0x46>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_HAL);
 800d34a:	f240 2325 	movw	r3, #549	@ 0x225
 800d34e:	f001 bc22 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    default:
        break;
 800d352:	bf00      	nop
 800d354:	e000      	b.n	800d358 <phhalHw_Pn5180_SetConfig+0x48>
        break;
 800d356:	bf00      	nop
    }

    switch(wConfig)
 800d358:	887b      	ldrh	r3, [r7, #2]
 800d35a:	2b5e      	cmp	r3, #94	@ 0x5e
 800d35c:	f300 8154 	bgt.w	800d608 <phhalHw_Pn5180_SetConfig+0x2f8>
 800d360:	2b00      	cmp	r3, #0
 800d362:	f280 808d 	bge.w	800d480 <phhalHw_Pn5180_SetConfig+0x170>
 800d366:	f001 bbd3 	b.w	800eb10 <phhalHw_Pn5180_SetConfig+0x1800>
 800d36a:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800d36e:	3b10      	subs	r3, #16
 800d370:	2b40      	cmp	r3, #64	@ 0x40
 800d372:	f201 83cd 	bhi.w	800eb10 <phhalHw_Pn5180_SetConfig+0x1800>
 800d376:	a201      	add	r2, pc, #4	@ (adr r2, 800d37c <phhalHw_Pn5180_SetConfig+0x6c>)
 800d378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d37c:	0800e201 	.word	0x0800e201
 800d380:	0800eb11 	.word	0x0800eb11
 800d384:	0800eb11 	.word	0x0800eb11
 800d388:	0800eb11 	.word	0x0800eb11
 800d38c:	0800eb11 	.word	0x0800eb11
 800d390:	0800eb11 	.word	0x0800eb11
 800d394:	0800eb11 	.word	0x0800eb11
 800d398:	0800eb11 	.word	0x0800eb11
 800d39c:	0800eb11 	.word	0x0800eb11
 800d3a0:	0800eb11 	.word	0x0800eb11
 800d3a4:	0800eb11 	.word	0x0800eb11
 800d3a8:	0800eb11 	.word	0x0800eb11
 800d3ac:	0800eb11 	.word	0x0800eb11
 800d3b0:	0800eb11 	.word	0x0800eb11
 800d3b4:	0800eb11 	.word	0x0800eb11
 800d3b8:	0800eb11 	.word	0x0800eb11
 800d3bc:	0800eb11 	.word	0x0800eb11
 800d3c0:	0800eb11 	.word	0x0800eb11
 800d3c4:	0800eb11 	.word	0x0800eb11
 800d3c8:	0800eb11 	.word	0x0800eb11
 800d3cc:	0800eb11 	.word	0x0800eb11
 800d3d0:	0800ea21 	.word	0x0800ea21
 800d3d4:	0800ea53 	.word	0x0800ea53
 800d3d8:	0800ea6f 	.word	0x0800ea6f
 800d3dc:	0800ea89 	.word	0x0800ea89
 800d3e0:	0800eaa3 	.word	0x0800eaa3
 800d3e4:	0800eabd 	.word	0x0800eabd
 800d3e8:	0800ead9 	.word	0x0800ead9
 800d3ec:	0800eaf5 	.word	0x0800eaf5
 800d3f0:	0800eb11 	.word	0x0800eb11
 800d3f4:	0800eb11 	.word	0x0800eb11
 800d3f8:	0800eb11 	.word	0x0800eb11
 800d3fc:	0800eb11 	.word	0x0800eb11
 800d400:	0800eb11 	.word	0x0800eb11
 800d404:	0800eb11 	.word	0x0800eb11
 800d408:	0800eb11 	.word	0x0800eb11
 800d40c:	0800eb11 	.word	0x0800eb11
 800d410:	0800eb11 	.word	0x0800eb11
 800d414:	0800eb11 	.word	0x0800eb11
 800d418:	0800eb11 	.word	0x0800eb11
 800d41c:	0800eb11 	.word	0x0800eb11
 800d420:	0800eb11 	.word	0x0800eb11
 800d424:	0800eb11 	.word	0x0800eb11
 800d428:	0800eb11 	.word	0x0800eb11
 800d42c:	0800eb11 	.word	0x0800eb11
 800d430:	0800eb11 	.word	0x0800eb11
 800d434:	0800eb11 	.word	0x0800eb11
 800d438:	0800eb11 	.word	0x0800eb11
 800d43c:	0800eb11 	.word	0x0800eb11
 800d440:	0800eb11 	.word	0x0800eb11
 800d444:	0800eb11 	.word	0x0800eb11
 800d448:	0800eb11 	.word	0x0800eb11
 800d44c:	0800eb11 	.word	0x0800eb11
 800d450:	0800eb11 	.word	0x0800eb11
 800d454:	0800eb11 	.word	0x0800eb11
 800d458:	0800eb11 	.word	0x0800eb11
 800d45c:	0800eb11 	.word	0x0800eb11
 800d460:	0800eb11 	.word	0x0800eb11
 800d464:	0800eb11 	.word	0x0800eb11
 800d468:	0800eb11 	.word	0x0800eb11
 800d46c:	0800eb11 	.word	0x0800eb11
 800d470:	0800eb11 	.word	0x0800eb11
 800d474:	0800eb11 	.word	0x0800eb11
 800d478:	0800eb11 	.word	0x0800eb11
 800d47c:	0800e2a3 	.word	0x0800e2a3
 800d480:	2b5e      	cmp	r3, #94	@ 0x5e
 800d482:	f201 8345 	bhi.w	800eb10 <phhalHw_Pn5180_SetConfig+0x1800>
 800d486:	a201      	add	r2, pc, #4	@ (adr r2, 800d48c <phhalHw_Pn5180_SetConfig+0x17c>)
 800d488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d48c:	0800d621 	.word	0x0800d621
 800d490:	0800d699 	.word	0x0800d699
 800d494:	0800d699 	.word	0x0800d699
 800d498:	0800d65f 	.word	0x0800d65f
 800d49c:	0800eb11 	.word	0x0800eb11
 800d4a0:	0800d6e1 	.word	0x0800d6e1
 800d4a4:	0800d961 	.word	0x0800d961
 800d4a8:	0800da3b 	.word	0x0800da3b
 800d4ac:	0800d829 	.word	0x0800d829
 800d4b0:	0800dd9b 	.word	0x0800dd9b
 800d4b4:	0800df7b 	.word	0x0800df7b
 800d4b8:	0800db1b 	.word	0x0800db1b
 800d4bc:	0800d621 	.word	0x0800d621
 800d4c0:	0800e0cd 	.word	0x0800e0cd
 800d4c4:	0800e127 	.word	0x0800e127
 800d4c8:	0800e181 	.word	0x0800e181
 800d4cc:	0800eb11 	.word	0x0800eb11
 800d4d0:	0800eb11 	.word	0x0800eb11
 800d4d4:	0800eb11 	.word	0x0800eb11
 800d4d8:	0800e251 	.word	0x0800e251
 800d4dc:	0800e269 	.word	0x0800e269
 800d4e0:	0800e493 	.word	0x0800e493
 800d4e4:	0800e6a5 	.word	0x0800e6a5
 800d4e8:	0800e7dd 	.word	0x0800e7dd
 800d4ec:	0800d889 	.word	0x0800d889
 800d4f0:	0800eb11 	.word	0x0800eb11
 800d4f4:	0800eb11 	.word	0x0800eb11
 800d4f8:	0800eb11 	.word	0x0800eb11
 800d4fc:	0800eb11 	.word	0x0800eb11
 800d500:	0800eb11 	.word	0x0800eb11
 800d504:	0800eb11 	.word	0x0800eb11
 800d508:	0800eb11 	.word	0x0800eb11
 800d50c:	0800e273 	.word	0x0800e273
 800d510:	0800eb11 	.word	0x0800eb11
 800d514:	0800eb11 	.word	0x0800eb11
 800d518:	0800eb11 	.word	0x0800eb11
 800d51c:	0800eb11 	.word	0x0800eb11
 800d520:	0800eb11 	.word	0x0800eb11
 800d524:	0800eb11 	.word	0x0800eb11
 800d528:	0800eb11 	.word	0x0800eb11
 800d52c:	0800eb11 	.word	0x0800eb11
 800d530:	0800eb11 	.word	0x0800eb11
 800d534:	0800eb11 	.word	0x0800eb11
 800d538:	0800eb11 	.word	0x0800eb11
 800d53c:	0800eb11 	.word	0x0800eb11
 800d540:	0800eb11 	.word	0x0800eb11
 800d544:	0800dc63 	.word	0x0800dc63
 800d548:	0800dc9f 	.word	0x0800dc9f
 800d54c:	0800dcc5 	.word	0x0800dcc5
 800d550:	0800eb11 	.word	0x0800eb11
 800d554:	0800eb11 	.word	0x0800eb11
 800d558:	0800dd09 	.word	0x0800dd09
 800d55c:	0800dd4d 	.word	0x0800dd4d
 800d560:	0800e9e7 	.word	0x0800e9e7
 800d564:	0800eb11 	.word	0x0800eb11
 800d568:	0800eb11 	.word	0x0800eb11
 800d56c:	0800eb11 	.word	0x0800eb11
 800d570:	0800eb11 	.word	0x0800eb11
 800d574:	0800eb11 	.word	0x0800eb11
 800d578:	0800eb11 	.word	0x0800eb11
 800d57c:	0800eb11 	.word	0x0800eb11
 800d580:	0800eb11 	.word	0x0800eb11
 800d584:	0800eb11 	.word	0x0800eb11
 800d588:	0800eb11 	.word	0x0800eb11
 800d58c:	0800eb11 	.word	0x0800eb11
 800d590:	0800eb11 	.word	0x0800eb11
 800d594:	0800eb11 	.word	0x0800eb11
 800d598:	0800eb11 	.word	0x0800eb11
 800d59c:	0800eb11 	.word	0x0800eb11
 800d5a0:	0800eb11 	.word	0x0800eb11
 800d5a4:	0800eb11 	.word	0x0800eb11
 800d5a8:	0800eb11 	.word	0x0800eb11
 800d5ac:	0800eb11 	.word	0x0800eb11
 800d5b0:	0800eb11 	.word	0x0800eb11
 800d5b4:	0800eb11 	.word	0x0800eb11
 800d5b8:	0800eb11 	.word	0x0800eb11
 800d5bc:	0800eb11 	.word	0x0800eb11
 800d5c0:	0800eb11 	.word	0x0800eb11
 800d5c4:	0800eb11 	.word	0x0800eb11
 800d5c8:	0800eb11 	.word	0x0800eb11
 800d5cc:	0800eb11 	.word	0x0800eb11
 800d5d0:	0800e343 	.word	0x0800e343
 800d5d4:	0800eb11 	.word	0x0800eb11
 800d5d8:	0800e35f 	.word	0x0800e35f
 800d5dc:	0800eb11 	.word	0x0800eb11
 800d5e0:	0800e987 	.word	0x0800e987
 800d5e4:	0800e3ad 	.word	0x0800e3ad
 800d5e8:	0800e3c9 	.word	0x0800e3c9
 800d5ec:	0800eb11 	.word	0x0800eb11
 800d5f0:	0800eb11 	.word	0x0800eb11
 800d5f4:	0800e2c1 	.word	0x0800e2c1
 800d5f8:	0800eb11 	.word	0x0800eb11
 800d5fc:	0800e425 	.word	0x0800e425
 800d600:	0800e443 	.word	0x0800e443
 800d604:	0800e2cf 	.word	0x0800e2cf
 800d608:	f248 0250 	movw	r2, #32848	@ 0x8050
 800d60c:	4293      	cmp	r3, r2
 800d60e:	f301 827f 	bgt.w	800eb10 <phhalHw_Pn5180_SetConfig+0x1800>
 800d612:	f248 0210 	movw	r2, #32784	@ 0x8010
 800d616:	4293      	cmp	r3, r2
 800d618:	f6bf aea7 	bge.w	800d36a <phhalHw_Pn5180_SetConfig+0x5a>
 800d61c:	f001 ba78 	b.w	800eb10 <phhalHw_Pn5180_SetConfig+0x1800>
    {
    case PHHAL_HW_CONFIG_PARITY:
    case PHHAL_HW_CONFIG_ASK100:

        if( pDataParams->wCfgShadow[wConfig] != wValue)
 800d620:	887a      	ldrh	r2, [r7, #2]
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	322c      	adds	r2, #44	@ 0x2c
 800d626:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800d62a:	883a      	ldrh	r2, [r7, #0]
 800d62c:	429a      	cmp	r2, r3
 800d62e:	f001 8272 	beq.w	800eb16 <phhalHw_Pn5180_SetConfig+0x1806>
        {
            /* Use internal set config */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig_Int(pDataParams, wConfig, wValue));
 800d632:	883a      	ldrh	r2, [r7, #0]
 800d634:	887b      	ldrh	r3, [r7, #2]
 800d636:	4619      	mov	r1, r3
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f003 fe47 	bl	80112cc <phhalHw_Pn5180_SetConfig_Int>
 800d63e:	4603      	mov	r3, r0
 800d640:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800d642:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d644:	2b00      	cmp	r3, #0
 800d646:	d002      	beq.n	800d64e <phhalHw_Pn5180_SetConfig+0x33e>
 800d648:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d64a:	f001 baa4 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>

            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800d64e:	887a      	ldrh	r2, [r7, #2]
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	322c      	adds	r2, #44	@ 0x2c
 800d654:	8839      	ldrh	r1, [r7, #0]
 800d656:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        break;
 800d65a:	f001 ba5c 	b.w	800eb16 <phhalHw_Pn5180_SetConfig+0x1806>

    case PHHAL_HW_CONFIG_TXLASTBITS:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800d65e:	887a      	ldrh	r2, [r7, #2]
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	322c      	adds	r2, #44	@ 0x2c
 800d664:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800d668:	883a      	ldrh	r2, [r7, #0]
 800d66a:	429a      	cmp	r2, r3
 800d66c:	d105      	bne.n	800d67a <phhalHw_Pn5180_SetConfig+0x36a>
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800d674:	2b01      	cmp	r3, #1
 800d676:	f001 8250 	beq.w	800eb1a <phhalHw_Pn5180_SetConfig+0x180a>
        {
            /* Check parameter */
            if (wValue > MASK_TX_LASTBITS)
 800d67a:	883b      	ldrh	r3, [r7, #0]
 800d67c:	2b07      	cmp	r3, #7
 800d67e:	d903      	bls.n	800d688 <phhalHw_Pn5180_SetConfig+0x378>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800d680:	f240 2321 	movw	r3, #545	@ 0x221
 800d684:	f001 ba87 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
            }

            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800d688:	887a      	ldrh	r2, [r7, #2]
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	322c      	adds	r2, #44	@ 0x2c
 800d68e:	8839      	ldrh	r1, [r7, #0]
 800d690:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        break;
 800d694:	f001 ba41 	b.w	800eb1a <phhalHw_Pn5180_SetConfig+0x180a>

    case PHHAL_HW_CONFIG_TXCRC:
    case PHHAL_HW_CONFIG_RXCRC:
        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800d698:	887a      	ldrh	r2, [r7, #2]
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	322c      	adds	r2, #44	@ 0x2c
 800d69e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800d6a2:	883a      	ldrh	r2, [r7, #0]
 800d6a4:	429a      	cmp	r2, r3
 800d6a6:	d105      	bne.n	800d6b4 <phhalHw_Pn5180_SetConfig+0x3a4>
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800d6ae:	2b01      	cmp	r3, #1
 800d6b0:	f001 8235 	beq.w	800eb1e <phhalHw_Pn5180_SetConfig+0x180e>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig_Int(pDataParams, wConfig, wValue));
 800d6b4:	883a      	ldrh	r2, [r7, #0]
 800d6b6:	887b      	ldrh	r3, [r7, #2]
 800d6b8:	4619      	mov	r1, r3
 800d6ba:	6878      	ldr	r0, [r7, #4]
 800d6bc:	f003 fe06 	bl	80112cc <phhalHw_Pn5180_SetConfig_Int>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800d6c4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d002      	beq.n	800d6d0 <phhalHw_Pn5180_SetConfig+0x3c0>
 800d6ca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d6cc:	f001 ba63 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800d6d0:	887a      	ldrh	r2, [r7, #2]
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	322c      	adds	r2, #44	@ 0x2c
 800d6d6:	8839      	ldrh	r1, [r7, #0]
 800d6d8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }

        break;
 800d6dc:	f001 ba1f 	b.w	800eb1e <phhalHw_Pn5180_SetConfig+0x180e>

    case PHHAL_HW_CONFIG_RXALIGN:
        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800d6e0:	887a      	ldrh	r2, [r7, #2]
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	322c      	adds	r2, #44	@ 0x2c
 800d6e6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800d6ea:	883a      	ldrh	r2, [r7, #0]
 800d6ec:	429a      	cmp	r2, r3
 800d6ee:	d105      	bne.n	800d6fc <phhalHw_Pn5180_SetConfig+0x3ec>
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800d6f6:	2b01      	cmp	r3, #1
 800d6f8:	f001 8213 	beq.w	800eb22 <phhalHw_Pn5180_SetConfig+0x1812>
        {
            /* Check the parameter */
            if (wValue >  MASK_RX_LASTBITS)
 800d6fc:	883b      	ldrh	r3, [r7, #0]
 800d6fe:	2b07      	cmp	r3, #7
 800d700:	d903      	bls.n	800d70a <phhalHw_Pn5180_SetConfig+0x3fa>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800d702:	f240 2321 	movw	r3, #545	@ 0x221
 800d706:	f001 ba46 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
            }

            wSizeOfRegTypeValueSets = 0U;
 800d70a:	2300      	movs	r3, #0
 800d70c:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /*Clear the Bits of CRC_RX_CONFIG_RX_BIT_ALIGN_MASK*/
            dwTemp = (uint32_t) ~( CRC_RX_CONFIG_RX_BIT_ALIGN_MASK );
 800d70e:	f46f 73e0 	mvn.w	r3, #448	@ 0x1c0
 800d712:	60bb      	str	r3, [r7, #8]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_RX_CONFIG;
 800d714:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d716:	1c5a      	adds	r2, r3, #1
 800d718:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800d71a:	3338      	adds	r3, #56	@ 0x38
 800d71c:	443b      	add	r3, r7
 800d71e:	2212      	movs	r2, #18
 800d720:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 800d724:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d726:	1c5a      	adds	r2, r3, #1
 800d728:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800d72a:	3338      	adds	r3, #56	@ 0x38
 800d72c:	443b      	add	r3, r7
 800d72e:	2203      	movs	r2, #3
 800d730:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800d734:	68ba      	ldr	r2, [r7, #8]
 800d736:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d738:	1c59      	adds	r1, r3, #1
 800d73a:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800d73c:	b2d2      	uxtb	r2, r2
 800d73e:	3338      	adds	r3, #56	@ 0x38
 800d740:	443b      	add	r3, r7
 800d742:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800d746:	68bb      	ldr	r3, [r7, #8]
 800d748:	0a1a      	lsrs	r2, r3, #8
 800d74a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d74c:	1c59      	adds	r1, r3, #1
 800d74e:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800d750:	b2d2      	uxtb	r2, r2
 800d752:	3338      	adds	r3, #56	@ 0x38
 800d754:	443b      	add	r3, r7
 800d756:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800d75a:	68bb      	ldr	r3, [r7, #8]
 800d75c:	0c1a      	lsrs	r2, r3, #16
 800d75e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d760:	1c59      	adds	r1, r3, #1
 800d762:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800d764:	b2d2      	uxtb	r2, r2
 800d766:	3338      	adds	r3, #56	@ 0x38
 800d768:	443b      	add	r3, r7
 800d76a:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	0e1a      	lsrs	r2, r3, #24
 800d772:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d774:	1c59      	adds	r1, r3, #1
 800d776:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800d778:	b2d2      	uxtb	r2, r2
 800d77a:	3338      	adds	r3, #56	@ 0x38
 800d77c:	443b      	add	r3, r7
 800d77e:	f803 2c2c 	strb.w	r2, [r3, #-44]

            /*Set the new value  of RX_BIT_ALIGN*/
            dwTemp = (uint32_t)((wValue << CRC_RX_CONFIG_RX_BIT_ALIGN_POS) & CRC_RX_CONFIG_RX_BIT_ALIGN_MASK);
 800d782:	883b      	ldrh	r3, [r7, #0]
 800d784:	019b      	lsls	r3, r3, #6
 800d786:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800d78a:	60bb      	str	r3, [r7, #8]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_RX_CONFIG;
 800d78c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d78e:	1c5a      	adds	r2, r3, #1
 800d790:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800d792:	3338      	adds	r3, #56	@ 0x38
 800d794:	443b      	add	r3, r7
 800d796:	2212      	movs	r2, #18
 800d798:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 800d79c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d79e:	1c5a      	adds	r2, r3, #1
 800d7a0:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800d7a2:	3338      	adds	r3, #56	@ 0x38
 800d7a4:	443b      	add	r3, r7
 800d7a6:	2202      	movs	r2, #2
 800d7a8:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800d7ac:	68ba      	ldr	r2, [r7, #8]
 800d7ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d7b0:	1c59      	adds	r1, r3, #1
 800d7b2:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800d7b4:	b2d2      	uxtb	r2, r2
 800d7b6:	3338      	adds	r3, #56	@ 0x38
 800d7b8:	443b      	add	r3, r7
 800d7ba:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800d7be:	68bb      	ldr	r3, [r7, #8]
 800d7c0:	0a1a      	lsrs	r2, r3, #8
 800d7c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d7c4:	1c59      	adds	r1, r3, #1
 800d7c6:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800d7c8:	b2d2      	uxtb	r2, r2
 800d7ca:	3338      	adds	r3, #56	@ 0x38
 800d7cc:	443b      	add	r3, r7
 800d7ce:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800d7d2:	68bb      	ldr	r3, [r7, #8]
 800d7d4:	0c1a      	lsrs	r2, r3, #16
 800d7d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d7d8:	1c59      	adds	r1, r3, #1
 800d7da:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800d7dc:	b2d2      	uxtb	r2, r2
 800d7de:	3338      	adds	r3, #56	@ 0x38
 800d7e0:	443b      	add	r3, r7
 800d7e2:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	0e1a      	lsrs	r2, r3, #24
 800d7ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d7ec:	1c59      	adds	r1, r3, #1
 800d7ee:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800d7f0:	b2d2      	uxtb	r2, r2
 800d7f2:	3338      	adds	r3, #56	@ 0x38
 800d7f4:	443b      	add	r3, r7
 800d7f6:	f803 2c2c 	strb.w	r2, [r3, #-44]

            /*Send the array to the IC*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams, wRegTypeValueSets, wSizeOfRegTypeValueSets));
 800d7fa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d7fc:	f107 030c 	add.w	r3, r7, #12
 800d800:	4619      	mov	r1, r3
 800d802:	6878      	ldr	r0, [r7, #4]
 800d804:	f002 fcf0 	bl	80101e8 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 800d808:	4603      	mov	r3, r0
 800d80a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800d80c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d002      	beq.n	800d818 <phhalHw_Pn5180_SetConfig+0x508>
 800d812:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d814:	f001 b9bf 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>

            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800d818:	887a      	ldrh	r2, [r7, #2]
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	322c      	adds	r2, #44	@ 0x2c
 800d81e:	8839      	ldrh	r1, [r7, #0]
 800d820:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        break;
 800d824:	f001 b97d 	b.w	800eb22 <phhalHw_Pn5180_SetConfig+0x1812>

    case PHHAL_HW_CONFIG_CLEARBITSAFTERCOLL:

        if (pDataParams->wCfgShadow[wConfig] != wValue)
 800d828:	887a      	ldrh	r2, [r7, #2]
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	322c      	adds	r2, #44	@ 0x2c
 800d82e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800d832:	883a      	ldrh	r2, [r7, #0]
 800d834:	429a      	cmp	r2, r3
 800d836:	f001 8176 	beq.w	800eb26 <phhalHw_Pn5180_SetConfig+0x1816>
        {
            /* Disbale */
            if (wValue == PH_OFF)
 800d83a:	883b      	ldrh	r3, [r7, #0]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d10d      	bne.n	800d85c <phhalHw_Pn5180_SetConfig+0x54c>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, CRC_RX_CONFIG, CRC_RX_CONFIG_VALUES_AFTER_COLLISION_MASK));
 800d840:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d844:	2112      	movs	r1, #18
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	f002 fbe2 	bl	8010010 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 800d84c:	4603      	mov	r3, r0
 800d84e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800d850:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d852:	2b00      	cmp	r3, #0
 800d854:	d010      	beq.n	800d878 <phhalHw_Pn5180_SetConfig+0x568>
 800d856:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d858:	f001 b99d 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
            }
            else
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, CRC_RX_CONFIG, (0xFFFFFFFFU^CRC_RX_CONFIG_VALUES_AFTER_COLLISION_MASK)));
 800d85c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800d860:	2112      	movs	r1, #18
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	f002 fc4a 	bl	80100fc <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800d868:	4603      	mov	r3, r0
 800d86a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800d86c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d002      	beq.n	800d878 <phhalHw_Pn5180_SetConfig+0x568>
 800d872:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d874:	f001 b98f 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
            }
            pDataParams->wCfgShadow[wConfig] = wValue;
 800d878:	887a      	ldrh	r2, [r7, #2]
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	322c      	adds	r2, #44	@ 0x2c
 800d87e:	8839      	ldrh	r1, [r7, #0]
 800d880:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        break;
 800d884:	f001 b94f 	b.w	800eb26 <phhalHw_Pn5180_SetConfig+0x1816>

    case PHHAL_HW_CONFIG_TXWAIT_MS:
        /* Parameter checking */
        if (wValue > 650U) /* To set Max value for wValue in uS i.e, 0xFFFFU )*/
 800d888:	883b      	ldrh	r3, [r7, #0]
 800d88a:	f240 228a 	movw	r2, #650	@ 0x28a
 800d88e:	4293      	cmp	r3, r2
 800d890:	d903      	bls.n	800d89a <phhalHw_Pn5180_SetConfig+0x58a>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800d892:	f240 2321 	movw	r3, #545	@ 0x221
 800d896:	f001 b97e 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        /* Store the value in terms of uS in shadow table*/
        pDataParams->dwTxWaitMs =  wValue;
 800d89a:	883a      	ldrh	r2, [r7, #0]
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Set TxWait */
        fTime = 0.0;
 800d8a0:	f04f 0300 	mov.w	r3, #0
 800d8a4:	62bb      	str	r3, [r7, #40]	@ 0x28
        dwValue = PHHAL_HW_PN5180_TR_RX_PRESCALAR;
 800d8a6:	237f      	movs	r3, #127	@ 0x7f
 800d8a8:	633b      	str	r3, [r7, #48]	@ 0x30
        dwTemp = wValue*1000U;
 800d8aa:	883b      	ldrh	r3, [r7, #0]
 800d8ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d8b0:	fb02 f303 	mul.w	r3, r2, r3
 800d8b4:	60bb      	str	r3, [r7, #8]
        if(0U != dwTemp)
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d043      	beq.n	800d944 <phhalHw_Pn5180_SetConfig+0x634>
        {
            fTime = (float32_t)(((float32_t)dwTemp * 13.56) / (float32_t)(dwValue));
 800d8bc:	68bb      	ldr	r3, [r7, #8]
 800d8be:	ee07 3a90 	vmov	s15, r3
 800d8c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8c6:	ee17 0a90 	vmov	r0, s15
 800d8ca:	f7f2 fe3d 	bl	8000548 <__aeabi_f2d>
 800d8ce:	f60f 3310 	addw	r3, pc, #2832	@ 0xb10
 800d8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d6:	f7f2 fe8f 	bl	80005f8 <__aeabi_dmul>
 800d8da:	4602      	mov	r2, r0
 800d8dc:	460b      	mov	r3, r1
 800d8de:	4614      	mov	r4, r2
 800d8e0:	461d      	mov	r5, r3
 800d8e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8e4:	ee07 3a90 	vmov	s15, r3
 800d8e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8ec:	ee17 0a90 	vmov	r0, s15
 800d8f0:	f7f2 fe2a 	bl	8000548 <__aeabi_f2d>
 800d8f4:	4602      	mov	r2, r0
 800d8f6:	460b      	mov	r3, r1
 800d8f8:	4620      	mov	r0, r4
 800d8fa:	4629      	mov	r1, r5
 800d8fc:	f7f2 ffa6 	bl	800084c <__aeabi_ddiv>
 800d900:	4602      	mov	r2, r0
 800d902:	460b      	mov	r3, r1
 800d904:	4610      	mov	r0, r2
 800d906:	4619      	mov	r1, r3
 800d908:	f7f3 f94e 	bl	8000ba8 <__aeabi_d2f>
 800d90c:	4603      	mov	r3, r0
 800d90e:	62bb      	str	r3, [r7, #40]	@ 0x28
            dwTemp = (uint32_t)fTime;
 800d910:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800d914:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d918:	ee17 3a90 	vmov	r3, s15
 800d91c:	60bb      	str	r3, [r7, #8]
            dwValue |= (uint32_t)((dwTemp ) << TX_WAIT_CONFIG_TX_WAIT_VALUE_POS);
 800d91e:	68bb      	ldr	r3, [r7, #8]
 800d920:	021b      	lsls	r3, r3, #8
 800d922:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d924:	4313      	orrs	r3, r2
 800d926:	633b      	str	r3, [r7, #48]	@ 0x30
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WriteRegister(pDataParams, TX_WAIT_CONFIG, dwValue));
 800d928:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d92a:	2117      	movs	r1, #23
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	f7fe ff85 	bl	800c83c <phhalHw_Pn5180_WriteRegister>
 800d932:	4603      	mov	r3, r0
 800d934:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800d936:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d938:	2b00      	cmp	r3, #0
 800d93a:	f001 80f6 	beq.w	800eb2a <phhalHw_Pn5180_SetConfig+0x181a>
 800d93e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d940:	f001 b929 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WriteRegister(pDataParams, TX_WAIT_CONFIG, dwValue));
 800d944:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d946:	2117      	movs	r1, #23
 800d948:	6878      	ldr	r0, [r7, #4]
 800d94a:	f7fe ff77 	bl	800c83c <phhalHw_Pn5180_WriteRegister>
 800d94e:	4603      	mov	r3, r0
 800d950:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800d952:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d954:	2b00      	cmp	r3, #0
 800d956:	f001 80e8 	beq.w	800eb2a <phhalHw_Pn5180_SetConfig+0x181a>
 800d95a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d95c:	f001 b91b 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    case PHHAL_HW_CONFIG_RXWAIT_US:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800d960:	887a      	ldrh	r2, [r7, #2]
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	322c      	adds	r2, #44	@ 0x2c
 800d966:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800d96a:	883a      	ldrh	r2, [r7, #0]
 800d96c:	429a      	cmp	r2, r3
 800d96e:	d105      	bne.n	800d97c <phhalHw_Pn5180_SetConfig+0x66c>
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800d976:	2b01      	cmp	r3, #1
 800d978:	f001 80d9 	beq.w	800eb2e <phhalHw_Pn5180_SetConfig+0x181e>
        {
            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800d97c:	887a      	ldrh	r2, [r7, #2]
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	322c      	adds	r2, #44	@ 0x2c
 800d982:	8839      	ldrh	r1, [r7, #0]
 800d984:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

            /* Set Rx Wait(deaf) bits */
            dwValue = PHHAL_HW_PN5180_TR_RX_PRESCALAR;
 800d988:	237f      	movs	r3, #127	@ 0x7f
 800d98a:	633b      	str	r3, [r7, #48]	@ 0x30
            dwTemp = wValue;
 800d98c:	883b      	ldrh	r3, [r7, #0]
 800d98e:	60bb      	str	r3, [r7, #8]
            if(0U != dwTemp)
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d043      	beq.n	800da1e <phhalHw_Pn5180_SetConfig+0x70e>
            {
                fTime = (float32_t)(((float32_t)dwTemp * 13.56) / (float32_t)(dwValue));
 800d996:	68bb      	ldr	r3, [r7, #8]
 800d998:	ee07 3a90 	vmov	s15, r3
 800d99c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9a0:	ee17 0a90 	vmov	r0, s15
 800d9a4:	f7f2 fdd0 	bl	8000548 <__aeabi_f2d>
 800d9a8:	f60f 2334 	addw	r3, pc, #2612	@ 0xa34
 800d9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9b0:	f7f2 fe22 	bl	80005f8 <__aeabi_dmul>
 800d9b4:	4602      	mov	r2, r0
 800d9b6:	460b      	mov	r3, r1
 800d9b8:	4614      	mov	r4, r2
 800d9ba:	461d      	mov	r5, r3
 800d9bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9be:	ee07 3a90 	vmov	s15, r3
 800d9c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9c6:	ee17 0a90 	vmov	r0, s15
 800d9ca:	f7f2 fdbd 	bl	8000548 <__aeabi_f2d>
 800d9ce:	4602      	mov	r2, r0
 800d9d0:	460b      	mov	r3, r1
 800d9d2:	4620      	mov	r0, r4
 800d9d4:	4629      	mov	r1, r5
 800d9d6:	f7f2 ff39 	bl	800084c <__aeabi_ddiv>
 800d9da:	4602      	mov	r2, r0
 800d9dc:	460b      	mov	r3, r1
 800d9de:	4610      	mov	r0, r2
 800d9e0:	4619      	mov	r1, r3
 800d9e2:	f7f3 f8e1 	bl	8000ba8 <__aeabi_d2f>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	62bb      	str	r3, [r7, #40]	@ 0x28
                dwTemp = (uint32_t)fTime;
 800d9ea:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800d9ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d9f2:	ee17 3a90 	vmov	r3, s15
 800d9f6:	60bb      	str	r3, [r7, #8]
                dwValue |= (uint32_t)dwTemp << RX_WAIT_CONFIG_RX_WAIT_VALUE_POS;
 800d9f8:	68bb      	ldr	r3, [r7, #8]
 800d9fa:	021b      	lsls	r3, r3, #8
 800d9fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d9fe:	4313      	orrs	r3, r2
 800da00:	633b      	str	r3, [r7, #48]	@ 0x30
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, RX_WAIT_CONFIG, dwValue ));
 800da02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da04:	2111      	movs	r1, #17
 800da06:	6878      	ldr	r0, [r7, #4]
 800da08:	f002 fa8c 	bl	800ff24 <phhalHw_Pn5180_Instr_WriteRegister>
 800da0c:	4603      	mov	r3, r0
 800da0e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800da10:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800da12:	2b00      	cmp	r3, #0
 800da14:	f001 808b 	beq.w	800eb2e <phhalHw_Pn5180_SetConfig+0x181e>
 800da18:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800da1a:	f001 b8bc 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
            }
            else
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, RX_WAIT_CONFIG, dwValue ));
 800da1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da20:	2111      	movs	r1, #17
 800da22:	6878      	ldr	r0, [r7, #4]
 800da24:	f002 fa7e 	bl	800ff24 <phhalHw_Pn5180_Instr_WriteRegister>
 800da28:	4603      	mov	r3, r0
 800da2a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800da2c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800da2e:	2b00      	cmp	r3, #0
 800da30:	f001 807d 	beq.w	800eb2e <phhalHw_Pn5180_SetConfig+0x181e>
 800da34:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800da36:	f001 b8ae 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    case PHHAL_HW_CONFIG_TXWAIT_US:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800da3a:	887a      	ldrh	r2, [r7, #2]
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	322c      	adds	r2, #44	@ 0x2c
 800da40:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800da44:	883a      	ldrh	r2, [r7, #0]
 800da46:	429a      	cmp	r2, r3
 800da48:	d105      	bne.n	800da56 <phhalHw_Pn5180_SetConfig+0x746>
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800da50:	2b01      	cmp	r3, #1
 800da52:	f001 806e 	beq.w	800eb32 <phhalHw_Pn5180_SetConfig+0x1822>
        {
            /* Write configuration data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800da56:	887a      	ldrh	r2, [r7, #2]
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	322c      	adds	r2, #44	@ 0x2c
 800da5c:	8839      	ldrh	r1, [r7, #0]
 800da5e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

            /* Set TxWait */
            fTime = 0.0;
 800da62:	f04f 0300 	mov.w	r3, #0
 800da66:	62bb      	str	r3, [r7, #40]	@ 0x28
            dwValue = PHHAL_HW_PN5180_TR_RX_PRESCALAR;
 800da68:	237f      	movs	r3, #127	@ 0x7f
 800da6a:	633b      	str	r3, [r7, #48]	@ 0x30
            dwTemp = wValue;
 800da6c:	883b      	ldrh	r3, [r7, #0]
 800da6e:	60bb      	str	r3, [r7, #8]

            if(0U != dwTemp)
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d043      	beq.n	800dafe <phhalHw_Pn5180_SetConfig+0x7ee>
            {
                fTime = (float32_t)(((float32_t)dwTemp * 13.56) / (float32_t)(dwValue));
 800da76:	68bb      	ldr	r3, [r7, #8]
 800da78:	ee07 3a90 	vmov	s15, r3
 800da7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da80:	ee17 0a90 	vmov	r0, s15
 800da84:	f7f2 fd60 	bl	8000548 <__aeabi_f2d>
 800da88:	f60f 1354 	addw	r3, pc, #2388	@ 0x954
 800da8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da90:	f7f2 fdb2 	bl	80005f8 <__aeabi_dmul>
 800da94:	4602      	mov	r2, r0
 800da96:	460b      	mov	r3, r1
 800da98:	4614      	mov	r4, r2
 800da9a:	461d      	mov	r5, r3
 800da9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da9e:	ee07 3a90 	vmov	s15, r3
 800daa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800daa6:	ee17 0a90 	vmov	r0, s15
 800daaa:	f7f2 fd4d 	bl	8000548 <__aeabi_f2d>
 800daae:	4602      	mov	r2, r0
 800dab0:	460b      	mov	r3, r1
 800dab2:	4620      	mov	r0, r4
 800dab4:	4629      	mov	r1, r5
 800dab6:	f7f2 fec9 	bl	800084c <__aeabi_ddiv>
 800daba:	4602      	mov	r2, r0
 800dabc:	460b      	mov	r3, r1
 800dabe:	4610      	mov	r0, r2
 800dac0:	4619      	mov	r1, r3
 800dac2:	f7f3 f871 	bl	8000ba8 <__aeabi_d2f>
 800dac6:	4603      	mov	r3, r0
 800dac8:	62bb      	str	r3, [r7, #40]	@ 0x28
                dwTemp = (uint32_t)fTime;
 800daca:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800dace:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dad2:	ee17 3a90 	vmov	r3, s15
 800dad6:	60bb      	str	r3, [r7, #8]
                dwValue |= (uint32_t)((dwTemp ) << TX_WAIT_CONFIG_TX_WAIT_VALUE_POS);
 800dad8:	68bb      	ldr	r3, [r7, #8]
 800dada:	021b      	lsls	r3, r3, #8
 800dadc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dade:	4313      	orrs	r3, r2
 800dae0:	633b      	str	r3, [r7, #48]	@ 0x30
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WriteRegister(pDataParams, TX_WAIT_CONFIG, dwValue));
 800dae2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dae4:	2117      	movs	r1, #23
 800dae6:	6878      	ldr	r0, [r7, #4]
 800dae8:	f7fe fea8 	bl	800c83c <phhalHw_Pn5180_WriteRegister>
 800daec:	4603      	mov	r3, r0
 800daee:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800daf0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	f001 801d 	beq.w	800eb32 <phhalHw_Pn5180_SetConfig+0x1822>
 800daf8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dafa:	f001 b84c 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
            }
            else
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WriteRegister(pDataParams, TX_WAIT_CONFIG, dwValue));
 800dafe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db00:	2117      	movs	r1, #23
 800db02:	6878      	ldr	r0, [r7, #4]
 800db04:	f7fe fe9a 	bl	800c83c <phhalHw_Pn5180_WriteRegister>
 800db08:	4603      	mov	r3, r0
 800db0a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800db0c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800db0e:	2b00      	cmp	r3, #0
 800db10:	f001 800f 	beq.w	800eb32 <phhalHw_Pn5180_SetConfig+0x1822>
 800db14:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800db16:	f001 b83e 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    case PHHAL_HW_CONFIG_MODINDEX:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800db1a:	887a      	ldrh	r2, [r7, #2]
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	322c      	adds	r2, #44	@ 0x2c
 800db20:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800db24:	883a      	ldrh	r2, [r7, #0]
 800db26:	429a      	cmp	r2, r3
 800db28:	d105      	bne.n	800db36 <phhalHw_Pn5180_SetConfig+0x826>
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800db30:	2b01      	cmp	r3, #1
 800db32:	f001 8000 	beq.w	800eb36 <phhalHw_Pn5180_SetConfig+0x1826>
        {
            /* Parameter checking */
            if (wValue > 0x1FU)
 800db36:	883b      	ldrh	r3, [r7, #0]
 800db38:	2b1f      	cmp	r3, #31
 800db3a:	d903      	bls.n	800db44 <phhalHw_Pn5180_SetConfig+0x834>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800db3c:	f240 2321 	movw	r3, #545	@ 0x221
 800db40:	f001 b829 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
            }

            wSizeOfRegTypeValueSets = 0U;
 800db44:	2300      	movs	r3, #0
 800db46:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /*Clear the Bits of ANA_RF_CONTROL_TX_TX_RESIDUAL_CARRIER_MASK*/
            dwTemp = (uint32_t) ~( ANA_RF_CONTROL_TX_TX_RESIDUAL_CARRIER_MASK );
 800db48:	f46f 3378 	mvn.w	r3, #253952	@ 0x3e000
 800db4c:	60bb      	str	r3, [r7, #8]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = ANA_RF_CONTROL_TX;
 800db4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800db50:	1c5a      	adds	r2, r3, #1
 800db52:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800db54:	3338      	adds	r3, #56	@ 0x38
 800db56:	443b      	add	r3, r7
 800db58:	2220      	movs	r2, #32
 800db5a:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 800db5e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800db60:	1c5a      	adds	r2, r3, #1
 800db62:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800db64:	3338      	adds	r3, #56	@ 0x38
 800db66:	443b      	add	r3, r7
 800db68:	2203      	movs	r2, #3
 800db6a:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800db6e:	68ba      	ldr	r2, [r7, #8]
 800db70:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800db72:	1c59      	adds	r1, r3, #1
 800db74:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800db76:	b2d2      	uxtb	r2, r2
 800db78:	3338      	adds	r3, #56	@ 0x38
 800db7a:	443b      	add	r3, r7
 800db7c:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800db80:	68bb      	ldr	r3, [r7, #8]
 800db82:	0a1a      	lsrs	r2, r3, #8
 800db84:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800db86:	1c59      	adds	r1, r3, #1
 800db88:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800db8a:	b2d2      	uxtb	r2, r2
 800db8c:	3338      	adds	r3, #56	@ 0x38
 800db8e:	443b      	add	r3, r7
 800db90:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800db94:	68bb      	ldr	r3, [r7, #8]
 800db96:	0c1a      	lsrs	r2, r3, #16
 800db98:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800db9a:	1c59      	adds	r1, r3, #1
 800db9c:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800db9e:	b2d2      	uxtb	r2, r2
 800dba0:	3338      	adds	r3, #56	@ 0x38
 800dba2:	443b      	add	r3, r7
 800dba4:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800dba8:	68bb      	ldr	r3, [r7, #8]
 800dbaa:	0e1a      	lsrs	r2, r3, #24
 800dbac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dbae:	1c59      	adds	r1, r3, #1
 800dbb0:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800dbb2:	b2d2      	uxtb	r2, r2
 800dbb4:	3338      	adds	r3, #56	@ 0x38
 800dbb6:	443b      	add	r3, r7
 800dbb8:	f803 2c2c 	strb.w	r2, [r3, #-44]

            /*Set the new value  */
            dwTemp = (uint32_t)((wValue << ANA_RF_CONTROL_TX_TX_RESIDUAL_CARRIER_POS) & ANA_RF_CONTROL_TX_TX_RESIDUAL_CARRIER_MASK);
 800dbbc:	883b      	ldrh	r3, [r7, #0]
 800dbbe:	035b      	lsls	r3, r3, #13
 800dbc0:	f403 3378 	and.w	r3, r3, #253952	@ 0x3e000
 800dbc4:	60bb      	str	r3, [r7, #8]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = ANA_RF_CONTROL_TX;
 800dbc6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dbc8:	1c5a      	adds	r2, r3, #1
 800dbca:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800dbcc:	3338      	adds	r3, #56	@ 0x38
 800dbce:	443b      	add	r3, r7
 800dbd0:	2220      	movs	r2, #32
 800dbd2:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 800dbd6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dbd8:	1c5a      	adds	r2, r3, #1
 800dbda:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800dbdc:	3338      	adds	r3, #56	@ 0x38
 800dbde:	443b      	add	r3, r7
 800dbe0:	2202      	movs	r2, #2
 800dbe2:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800dbe6:	68ba      	ldr	r2, [r7, #8]
 800dbe8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dbea:	1c59      	adds	r1, r3, #1
 800dbec:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800dbee:	b2d2      	uxtb	r2, r2
 800dbf0:	3338      	adds	r3, #56	@ 0x38
 800dbf2:	443b      	add	r3, r7
 800dbf4:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800dbf8:	68bb      	ldr	r3, [r7, #8]
 800dbfa:	0a1a      	lsrs	r2, r3, #8
 800dbfc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dbfe:	1c59      	adds	r1, r3, #1
 800dc00:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800dc02:	b2d2      	uxtb	r2, r2
 800dc04:	3338      	adds	r3, #56	@ 0x38
 800dc06:	443b      	add	r3, r7
 800dc08:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800dc0c:	68bb      	ldr	r3, [r7, #8]
 800dc0e:	0c1a      	lsrs	r2, r3, #16
 800dc10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dc12:	1c59      	adds	r1, r3, #1
 800dc14:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800dc16:	b2d2      	uxtb	r2, r2
 800dc18:	3338      	adds	r3, #56	@ 0x38
 800dc1a:	443b      	add	r3, r7
 800dc1c:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800dc20:	68bb      	ldr	r3, [r7, #8]
 800dc22:	0e1a      	lsrs	r2, r3, #24
 800dc24:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dc26:	1c59      	adds	r1, r3, #1
 800dc28:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800dc2a:	b2d2      	uxtb	r2, r2
 800dc2c:	3338      	adds	r3, #56	@ 0x38
 800dc2e:	443b      	add	r3, r7
 800dc30:	f803 2c2c 	strb.w	r2, [r3, #-44]

            /*Send the array to the IC*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 800dc34:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800dc36:	f107 030c 	add.w	r3, r7, #12
 800dc3a:	4619      	mov	r1, r3
 800dc3c:	6878      	ldr	r0, [r7, #4]
 800dc3e:	f002 fad3 	bl	80101e8 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 800dc42:	4603      	mov	r3, r0
 800dc44:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800dc46:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d002      	beq.n	800dc52 <phhalHw_Pn5180_SetConfig+0x942>
 800dc4c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dc4e:	f000 bfa2 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>

            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800dc52:	887a      	ldrh	r2, [r7, #2]
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	322c      	adds	r2, #44	@ 0x2c
 800dc58:	8839      	ldrh	r1, [r7, #0]
 800dc5a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        break;
 800dc5e:	f000 bf6a 	b.w	800eb36 <phhalHw_Pn5180_SetConfig+0x1826>

    case PHHAL_HW_CONFIG_DISABLE_MF_CRYPTO1:
        /* Disable crypto, enabling is not supported */
        if ((wValue != PH_OFF) && ( pDataParams->bMfcCryptoEnabled == PH_ON))
 800dc62:	883b      	ldrh	r3, [r7, #0]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	f000 8768 	beq.w	800eb3a <phhalHw_Pn5180_SetConfig+0x182a>
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dc70:	2b01      	cmp	r3, #1
 800dc72:	f040 8762 	bne.w	800eb3a <phhalHw_Pn5180_SetConfig+0x182a>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, SYSTEM_CONFIG, (uint32_t)(~(SYSTEM_CONFIG_MFC_CRYPTO_ON_MASK))));
 800dc76:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800dc7a:	2100      	movs	r1, #0
 800dc7c:	6878      	ldr	r0, [r7, #4]
 800dc7e:	f002 fa3d 	bl	80100fc <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800dc82:	4603      	mov	r3, r0
 800dc84:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800dc86:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d002      	beq.n	800dc92 <phhalHw_Pn5180_SetConfig+0x982>
 800dc8c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dc8e:	f000 bf82 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
            pDataParams->bMfcCryptoEnabled = PH_OFF;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	2200      	movs	r2, #0
 800dc96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        }
        break;
 800dc9a:	f000 bf4e 	b.w	800eb3a <phhalHw_Pn5180_SetConfig+0x182a>

    case PHHAL_HW_CONFIG_TXBUFFER_OFFSET:

        /* Modify additional info parameter */
        pDataParams->wAdditionalInfo = wValue + PHHAL_HW_PN5180_EXCHANGE_HEADER_SIZE;
 800dc9e:	883b      	ldrh	r3, [r7, #0]
 800dca0:	3302      	adds	r3, #2
 800dca2:	b29a      	uxth	r2, r3
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	861a      	strh	r2, [r3, #48]	@ 0x30
#ifndef PN5180_P2P_HW_SYNC_BYTE
        if(pDataParams->bNfcipMode == PH_ON)
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800dcae:	2b01      	cmp	r3, #1
 800dcb0:	f040 8745 	bne.w	800eb3e <phhalHw_Pn5180_SetConfig+0x182e>
        {
             pDataParams->wAdditionalInfo += 1U;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800dcb8:	3301      	adds	r3, #1
 800dcba:	b29a      	uxth	r2, r3
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	861a      	strh	r2, [r3, #48]	@ 0x30
        }
#endif
        break;
 800dcc0:	f000 bf3d 	b.w	800eb3e <phhalHw_Pn5180_SetConfig+0x182e>

    case PHHAL_HW_CONFIG_RXBUFFER_STARTPOS:

        /* Retrieve RxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetRxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 800dcc4:	f107 0118 	add.w	r1, r7, #24
 800dcc8:	f107 021c 	add.w	r2, r7, #28
 800dccc:	f107 031a 	add.w	r3, r7, #26
 800dcd0:	9300      	str	r3, [sp, #0]
 800dcd2:	460b      	mov	r3, r1
 800dcd4:	2101      	movs	r1, #1
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f003 f931 	bl	8010f3e <phhalHw_Pn5180_GetRxBuffer>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800dce0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d002      	beq.n	800dcec <phhalHw_Pn5180_SetConfig+0x9dc>
 800dce6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dce8:	f000 bf55 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>

        /* Boundary check */
        if (wValue >= pDataParams->wRxBufSize)
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	8b1b      	ldrh	r3, [r3, #24]
 800dcf0:	883a      	ldrh	r2, [r7, #0]
 800dcf2:	429a      	cmp	r2, r3
 800dcf4:	d303      	bcc.n	800dcfe <phhalHw_Pn5180_SetConfig+0x9ee>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 800dcf6:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800dcfa:	f000 bf4c 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* Set start position */
        pDataParams->wRxBufStartPos = wValue;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	883a      	ldrh	r2, [r7, #0]
 800dd02:	83da      	strh	r2, [r3, #30]
        break;
 800dd04:	f000 bf46 	b.w	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_TXBUFFER_LENGTH:

        /* Retrieve TxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetTxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 800dd08:	f107 0118 	add.w	r1, r7, #24
 800dd0c:	f107 021c 	add.w	r2, r7, #28
 800dd10:	f107 031a 	add.w	r3, r7, #26
 800dd14:	9300      	str	r3, [sp, #0]
 800dd16:	460b      	mov	r3, r1
 800dd18:	2101      	movs	r1, #1
 800dd1a:	6878      	ldr	r0, [r7, #4]
 800dd1c:	f003 f8d3 	bl	8010ec6 <phhalHw_Pn5180_GetTxBuffer>
 800dd20:	4603      	mov	r3, r0
 800dd22:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800dd24:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d002      	beq.n	800dd30 <phhalHw_Pn5180_SetConfig+0xa20>
 800dd2a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dd2c:	f000 bf33 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>

        /* Check parameter, must not exceed TxBufferSize */
        if (wValue > pDataParams->wTxBufSize)
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	8a1b      	ldrh	r3, [r3, #16]
 800dd34:	883a      	ldrh	r2, [r7, #0]
 800dd36:	429a      	cmp	r2, r3
 800dd38:	d903      	bls.n	800dd42 <phhalHw_Pn5180_SetConfig+0xa32>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 800dd3a:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800dd3e:	f000 bf2a 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* set buffer length */
        pDataParams->wTxBufLen = wValue;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	883a      	ldrh	r2, [r7, #0]
 800dd46:	825a      	strh	r2, [r3, #18]
        break;
 800dd48:	f000 bf24 	b.w	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_TXBUFFER:

        /* Retrieve TxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetTxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 800dd4c:	f107 0118 	add.w	r1, r7, #24
 800dd50:	f107 021c 	add.w	r2, r7, #28
 800dd54:	f107 031a 	add.w	r3, r7, #26
 800dd58:	9300      	str	r3, [sp, #0]
 800dd5a:	460b      	mov	r3, r1
 800dd5c:	2101      	movs	r1, #1
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f003 f8b1 	bl	8010ec6 <phhalHw_Pn5180_GetTxBuffer>
 800dd64:	4603      	mov	r3, r0
 800dd66:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800dd68:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d002      	beq.n	800dd74 <phhalHw_Pn5180_SetConfig+0xa64>
 800dd6e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dd70:	f000 bf11 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>

        /* Check parameter, must not exceed TxBufferSize */
        if (pDataParams->wAdditionalInfo >= pDataParams->wTxBufSize)
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	8a1b      	ldrh	r3, [r3, #16]
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d303      	bcc.n	800dd88 <phhalHw_Pn5180_SetConfig+0xa78>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 800dd80:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800dd84:	f000 bf07 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* Modify TxBuffer byte */
        pBuffer[pDataParams->wAdditionalInfo] = (uint8_t)wValue;
 800dd88:	69fb      	ldr	r3, [r7, #28]
 800dd8a:	687a      	ldr	r2, [r7, #4]
 800dd8c:	8e12      	ldrh	r2, [r2, #48]	@ 0x30
 800dd8e:	4413      	add	r3, r2
 800dd90:	883a      	ldrh	r2, [r7, #0]
 800dd92:	b2d2      	uxtb	r2, r2
 800dd94:	701a      	strb	r2, [r3, #0]
        break;
 800dd96:	f000 befd 	b.w	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_TXDATARATE_FRAMING:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800dd9a:	887a      	ldrh	r2, [r7, #2]
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	322c      	adds	r2, #44	@ 0x2c
 800dda0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800dda4:	883a      	ldrh	r2, [r7, #0]
 800dda6:	429a      	cmp	r2, r3
 800dda8:	d105      	bne.n	800ddb6 <phhalHw_Pn5180_SetConfig+0xaa6>
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ddb0:	2b01      	cmp	r3, #1
 800ddb2:	f000 86c6 	beq.w	800eb42 <phhalHw_Pn5180_SetConfig+0x1832>
        {
            /* Update the framing, based on the Higher byte */
            wFraming = wValue & PHHAL_HW_RF_FRAMING_OPTION_MASK;
 800ddb6:	883b      	ldrh	r3, [r7, #0]
 800ddb8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ddbc:	847b      	strh	r3, [r7, #34]	@ 0x22
            wFraming = wFraming >> 0x08U;
 800ddbe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ddc0:	0a1b      	lsrs	r3, r3, #8
 800ddc2:	847b      	strh	r3, [r7, #34]	@ 0x22

            if((wFraming != PHHAL_HW_CARDTYPE_CURRENT) && (wFraming != pDataParams->bCardType))
 800ddc4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d011      	beq.n	800ddee <phhalHw_Pn5180_SetConfig+0xade>
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ddd0:	461a      	mov	r2, r3
 800ddd2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ddd4:	4293      	cmp	r3, r2
 800ddd6:	d00a      	beq.n	800ddee <phhalHw_Pn5180_SetConfig+0xade>
            {
                if((wValue & PHHAL_HW_RF_FRAMING_OPTION_MASK) != PHHAL_HW_RF_TYPE_ACTIVE_FRAMING)
 800ddd8:	883b      	ldrh	r3, [r7, #0]
 800ddda:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ddde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dde2:	d004      	beq.n	800ddee <phhalHw_Pn5180_SetConfig+0xade>
                {
                    pDataParams->bCardType = (uint8_t)wFraming;
 800dde4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dde6:	b2da      	uxtb	r2, r3
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                }
            }

            /* Update the Baudrate based on the lower byte */
            wValue = wValue & PHHAL_HW_RF_DATARATE_OPTION_MASK;
 800ddee:	883b      	ldrh	r3, [r7, #0]
 800ddf0:	b2db      	uxtb	r3, r3
 800ddf2:	803b      	strh	r3, [r7, #0]

            if(pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693)
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ddfa:	2b04      	cmp	r3, #4
 800ddfc:	d104      	bne.n	800de08 <phhalHw_Pn5180_SetConfig+0xaf8>
            {
                wTmpValue = wValue;
 800ddfe:	883b      	ldrh	r3, [r7, #0]
 800de00:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                wValue = PHHAL_HW_RF_TX_DATARATE_1_OUT_OF_4;
 800de02:	230b      	movs	r3, #11
 800de04:	803b      	strh	r3, [r7, #0]
 800de06:	e00f      	b.n	800de28 <phhalHw_Pn5180_SetConfig+0xb18>
            }
            else
            {
                /* Evaluate hardware settings */
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetCardMode(
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800de0e:	8839      	ldrh	r1, [r7, #0]
 800de10:	22ff      	movs	r2, #255	@ 0xff
 800de12:	6878      	ldr	r0, [r7, #4]
 800de14:	f003 fcdc 	bl	80117d0 <phhalHw_Pn5180_SetCardMode>
 800de18:	4603      	mov	r3, r0
 800de1a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800de1c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d002      	beq.n	800de28 <phhalHw_Pn5180_SetConfig+0xb18>
 800de22:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800de24:	f000 beb7 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
                    PHHAL_HW_RF_DATARATE_NO_CHANGE,
                    pDataParams->wCfgShadow[PHHAL_HW_CONFIG_SUBCARRIER]));
            }

            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800de28:	887a      	ldrh	r2, [r7, #2]
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	322c      	adds	r2, #44	@ 0x2c
 800de2e:	8839      	ldrh	r1, [r7, #0]
 800de30:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

            if((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wTmpValue == PHHAL_HW_RF_TX_DATARATE_1_OUT_OF_4))
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800de3a:	2b04      	cmp	r3, #4
 800de3c:	d11d      	bne.n	800de7a <phhalHw_Pn5180_SetConfig+0xb6a>
 800de3e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800de40:	2b0b      	cmp	r3, #11
 800de42:	d11a      	bne.n	800de7a <phhalHw_Pn5180_SetConfig+0xb6a>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_SYMBOL23_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX26_SYMBOL23));
 800de44:	2204      	movs	r2, #4
 800de46:	2142      	movs	r1, #66	@ 0x42
 800de48:	6878      	ldr	r0, [r7, #4]
 800de4a:	f002 f86b 	bl	800ff24 <phhalHw_Pn5180_Instr_WriteRegister>
 800de4e:	4603      	mov	r3, r0
 800de50:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800de52:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800de54:	2b00      	cmp	r3, #0
 800de56:	d002      	beq.n	800de5e <phhalHw_Pn5180_SetConfig+0xb4e>
 800de58:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800de5a:	f000 be9c 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_DATA_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX26_DATA_MOD));
 800de5e:	2243      	movs	r2, #67	@ 0x43
 800de60:	213b      	movs	r1, #59	@ 0x3b
 800de62:	6878      	ldr	r0, [r7, #4]
 800de64:	f002 f85e 	bl	800ff24 <phhalHw_Pn5180_Instr_WriteRegister>
 800de68:	4603      	mov	r3, r0
 800de6a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800de6c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800de6e:	2b00      	cmp	r3, #0
 800de70:	f000 8081 	beq.w	800df76 <phhalHw_Pn5180_SetConfig+0xc66>
 800de74:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800de76:	f000 be8e 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
            }
            else if((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wTmpValue == PHHAL_HW_RF_I15693_53KBPS_DATARATE))
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800de80:	2b04      	cmp	r3, #4
 800de82:	d123      	bne.n	800decc <phhalHw_Pn5180_SetConfig+0xbbc>
 800de84:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800de86:	2b1b      	cmp	r3, #27
 800de88:	d120      	bne.n	800decc <phhalHw_Pn5180_SetConfig+0xbbc>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_SYMBOL23_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX53_SYMBOL23));
 800de8a:	2205      	movs	r2, #5
 800de8c:	2142      	movs	r1, #66	@ 0x42
 800de8e:	6878      	ldr	r0, [r7, #4]
 800de90:	f002 f848 	bl	800ff24 <phhalHw_Pn5180_Instr_WriteRegister>
 800de94:	4603      	mov	r3, r0
 800de96:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800de98:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d002      	beq.n	800dea4 <phhalHw_Pn5180_SetConfig+0xb94>
 800de9e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dea0:	f000 be79 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_DATA_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX53_DATA_MOD));
 800dea4:	2244      	movs	r2, #68	@ 0x44
 800dea6:	213b      	movs	r1, #59	@ 0x3b
 800dea8:	6878      	ldr	r0, [r7, #4]
 800deaa:	f002 f83b 	bl	800ff24 <phhalHw_Pn5180_Instr_WriteRegister>
 800deae:	4603      	mov	r3, r0
 800deb0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800deb2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d002      	beq.n	800debe <phhalHw_Pn5180_SetConfig+0xbae>
 800deb8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800deba:	f000 be6c 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
                pDataParams->wCfgShadow[wConfig] = wTmpValue;
 800debe:	887a      	ldrh	r2, [r7, #2]
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	322c      	adds	r2, #44	@ 0x2c
 800dec4:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 800dec6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800deca:	e054      	b.n	800df76 <phhalHw_Pn5180_SetConfig+0xc66>
            }
            else if((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wTmpValue == PHHAL_HW_RF_DATARATE_106))
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ded2:	2b04      	cmp	r3, #4
 800ded4:	d123      	bne.n	800df1e <phhalHw_Pn5180_SetConfig+0xc0e>
 800ded6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d120      	bne.n	800df1e <phhalHw_Pn5180_SetConfig+0xc0e>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_SYMBOL23_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX106_SYMBOL23));
 800dedc:	2206      	movs	r2, #6
 800dede:	2142      	movs	r1, #66	@ 0x42
 800dee0:	6878      	ldr	r0, [r7, #4]
 800dee2:	f002 f81f 	bl	800ff24 <phhalHw_Pn5180_Instr_WriteRegister>
 800dee6:	4603      	mov	r3, r0
 800dee8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800deea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800deec:	2b00      	cmp	r3, #0
 800deee:	d002      	beq.n	800def6 <phhalHw_Pn5180_SetConfig+0xbe6>
 800def0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800def2:	f000 be50 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_DATA_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX106_DATA_MOD));
 800def6:	2245      	movs	r2, #69	@ 0x45
 800def8:	213b      	movs	r1, #59	@ 0x3b
 800defa:	6878      	ldr	r0, [r7, #4]
 800defc:	f002 f812 	bl	800ff24 <phhalHw_Pn5180_Instr_WriteRegister>
 800df00:	4603      	mov	r3, r0
 800df02:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800df04:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800df06:	2b00      	cmp	r3, #0
 800df08:	d002      	beq.n	800df10 <phhalHw_Pn5180_SetConfig+0xc00>
 800df0a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800df0c:	f000 be43 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
                pDataParams->wCfgShadow[wConfig] = wTmpValue;
 800df10:	887a      	ldrh	r2, [r7, #2]
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	322c      	adds	r2, #44	@ 0x2c
 800df16:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 800df18:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800df1c:	e02b      	b.n	800df76 <phhalHw_Pn5180_SetConfig+0xc66>
            }
            else if((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wTmpValue == PHHAL_HW_RF_DATARATE_212))
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800df24:	2b04      	cmp	r3, #4
 800df26:	f040 860c 	bne.w	800eb42 <phhalHw_Pn5180_SetConfig+0x1832>
 800df2a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800df2c:	2b01      	cmp	r3, #1
 800df2e:	f040 8608 	bne.w	800eb42 <phhalHw_Pn5180_SetConfig+0x1832>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_SYMBOL23_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX212_SYMBOL23));
 800df32:	2207      	movs	r2, #7
 800df34:	2142      	movs	r1, #66	@ 0x42
 800df36:	6878      	ldr	r0, [r7, #4]
 800df38:	f001 fff4 	bl	800ff24 <phhalHw_Pn5180_Instr_WriteRegister>
 800df3c:	4603      	mov	r3, r0
 800df3e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800df40:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800df42:	2b00      	cmp	r3, #0
 800df44:	d002      	beq.n	800df4c <phhalHw_Pn5180_SetConfig+0xc3c>
 800df46:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800df48:	f000 be25 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_DATA_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX212_DATA_MOD));
 800df4c:	2246      	movs	r2, #70	@ 0x46
 800df4e:	213b      	movs	r1, #59	@ 0x3b
 800df50:	6878      	ldr	r0, [r7, #4]
 800df52:	f001 ffe7 	bl	800ff24 <phhalHw_Pn5180_Instr_WriteRegister>
 800df56:	4603      	mov	r3, r0
 800df58:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800df5a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d002      	beq.n	800df66 <phhalHw_Pn5180_SetConfig+0xc56>
 800df60:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800df62:	f000 be18 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
                pDataParams->wCfgShadow[wConfig] = wTmpValue;
 800df66:	887a      	ldrh	r2, [r7, #2]
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	322c      	adds	r2, #44	@ 0x2c
 800df6c:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 800df6e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            else
            {
                /* To avoid the warning */
            }
        }
        break;
 800df72:	f000 bde6 	b.w	800eb42 <phhalHw_Pn5180_SetConfig+0x1832>
 800df76:	f000 bde4 	b.w	800eb42 <phhalHw_Pn5180_SetConfig+0x1832>

    case PHHAL_HW_CONFIG_RXDATARATE_FRAMING:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800df7a:	887a      	ldrh	r2, [r7, #2]
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	322c      	adds	r2, #44	@ 0x2c
 800df80:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800df84:	883a      	ldrh	r2, [r7, #0]
 800df86:	429a      	cmp	r2, r3
 800df88:	d105      	bne.n	800df96 <phhalHw_Pn5180_SetConfig+0xc86>
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800df90:	2b01      	cmp	r3, #1
 800df92:	f000 85d8 	beq.w	800eb46 <phhalHw_Pn5180_SetConfig+0x1836>
        {
            /* Update teh framing, based on the Higher byte */
            wFraming = wValue & PHHAL_HW_RF_FRAMING_OPTION_MASK;
 800df96:	883b      	ldrh	r3, [r7, #0]
 800df98:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800df9c:	847b      	strh	r3, [r7, #34]	@ 0x22
            wFraming = wFraming >> 0x08U;
 800df9e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dfa0:	0a1b      	lsrs	r3, r3, #8
 800dfa2:	847b      	strh	r3, [r7, #34]	@ 0x22

            if((wFraming != PHHAL_HW_CARDTYPE_CURRENT) && (wFraming != pDataParams->bCardType))
 800dfa4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d011      	beq.n	800dfce <phhalHw_Pn5180_SetConfig+0xcbe>
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800dfb0:	461a      	mov	r2, r3
 800dfb2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dfb4:	4293      	cmp	r3, r2
 800dfb6:	d00a      	beq.n	800dfce <phhalHw_Pn5180_SetConfig+0xcbe>
            {
                if((wValue & PHHAL_HW_RF_FRAMING_OPTION_MASK) != PHHAL_HW_RF_TYPE_ACTIVE_FRAMING)
 800dfb8:	883b      	ldrh	r3, [r7, #0]
 800dfba:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800dfbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dfc2:	d004      	beq.n	800dfce <phhalHw_Pn5180_SetConfig+0xcbe>
                {
                    pDataParams->bCardType = (uint8_t)wFraming;
 800dfc4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dfc6:	b2da      	uxtb	r2, r3
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                }
            }

            /* Update the Baudrate based on the lower byte */
            wValue = wValue & PHHAL_HW_RF_DATARATE_OPTION_MASK;
 800dfce:	883b      	ldrh	r3, [r7, #0]
 800dfd0:	b2db      	uxtb	r3, r3
 800dfd2:	803b      	strh	r3, [r7, #0]

            if((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wValue == PHHAL_HW_RF_DATARATE_106))
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800dfda:	2b04      	cmp	r3, #4
 800dfdc:	d106      	bne.n	800dfec <phhalHw_Pn5180_SetConfig+0xcdc>
 800dfde:	883b      	ldrh	r3, [r7, #0]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d103      	bne.n	800dfec <phhalHw_Pn5180_SetConfig+0xcdc>
            {
                wTmpValue = wValue;
 800dfe4:	883b      	ldrh	r3, [r7, #0]
 800dfe6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                wValue = PHHAL_HW_RF_RX_DATARATE_FAST_HIGH;
 800dfe8:	230f      	movs	r3, #15
 800dfea:	803b      	strh	r3, [r7, #0]
            }

            /* Evaluate hardware settings */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetCardMode(
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800dff2:	883a      	ldrh	r2, [r7, #0]
 800dff4:	21ff      	movs	r1, #255	@ 0xff
 800dff6:	6878      	ldr	r0, [r7, #4]
 800dff8:	f003 fbea 	bl	80117d0 <phhalHw_Pn5180_SetCardMode>
 800dffc:	4603      	mov	r3, r0
 800dffe:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e000:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e002:	2b00      	cmp	r3, #0
 800e004:	d002      	beq.n	800e00c <phhalHw_Pn5180_SetConfig+0xcfc>
 800e006:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e008:	f000 bdc5 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
                PHHAL_HW_RF_DATARATE_NO_CHANGE,
                wValue,
                pDataParams->wCfgShadow[PHHAL_HW_CONFIG_SUBCARRIER]));

            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800e00c:	887a      	ldrh	r2, [r7, #2]
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	322c      	adds	r2, #44	@ 0x2c
 800e012:	8839      	ldrh	r1, [r7, #0]
 800e014:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

            if((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wTmpValue == PHHAL_HW_RF_DATARATE_106))
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e01e:	2b04      	cmp	r3, #4
 800e020:	f040 8591 	bne.w	800eb46 <phhalHw_Pn5180_SetConfig+0x1836>
 800e024:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e026:	2b00      	cmp	r3, #0
 800e028:	f040 858d 	bne.w	800eb46 <phhalHw_Pn5180_SetConfig+0x1836>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_ReadRegister(pDataParams, SIGPRO_CONFIG, &dwTemp));
 800e02c:	f107 0308 	add.w	r3, r7, #8
 800e030:	461a      	mov	r2, r3
 800e032:	211a      	movs	r1, #26
 800e034:	6878      	ldr	r0, [r7, #4]
 800e036:	f002 f989 	bl	801034c <phhalHw_Pn5180_Instr_ReadRegister>
 800e03a:	4603      	mov	r3, r0
 800e03c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e03e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e040:	2b00      	cmp	r3, #0
 800e042:	d002      	beq.n	800e04a <phhalHw_Pn5180_SetConfig+0xd3a>
 800e044:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e046:	f000 bda6 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
                dwTemp = dwTemp & PHHAL_HW_15693_RX106_BAUDRATE_MASK;
 800e04a:	68ba      	ldr	r2, [r7, #8]
 800e04c:	f64f 73f8 	movw	r3, #65528	@ 0xfff8
 800e050:	4013      	ands	r3, r2
 800e052:	60bb      	str	r3, [r7, #8]
                dwTemp = dwTemp | PHHAL_HW_15693_RX106_BAUDRATE_VALUE;
 800e054:	68bb      	ldr	r3, [r7, #8]
 800e056:	f043 0304 	orr.w	r3, r3, #4
 800e05a:	60bb      	str	r3, [r7, #8]
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, SIGPRO_CONFIG, (uint32_t)dwTemp));
 800e05c:	68bb      	ldr	r3, [r7, #8]
 800e05e:	461a      	mov	r2, r3
 800e060:	211a      	movs	r1, #26
 800e062:	6878      	ldr	r0, [r7, #4]
 800e064:	f001 ff5e 	bl	800ff24 <phhalHw_Pn5180_Instr_WriteRegister>
 800e068:	4603      	mov	r3, r0
 800e06a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e06c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d002      	beq.n	800e078 <phhalHw_Pn5180_SetConfig+0xd68>
 800e072:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e074:	f000 bd8f 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>

                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_ReadRegister(pDataParams, SIGPRO_RM_CONFIG, &dwTemp));
 800e078:	f107 0308 	add.w	r3, r7, #8
 800e07c:	461a      	mov	r2, r3
 800e07e:	211c      	movs	r1, #28
 800e080:	6878      	ldr	r0, [r7, #4]
 800e082:	f002 f963 	bl	801034c <phhalHw_Pn5180_Instr_ReadRegister>
 800e086:	4603      	mov	r3, r0
 800e088:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e08a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d002      	beq.n	800e096 <phhalHw_Pn5180_SetConfig+0xd86>
 800e090:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e092:	f000 bd80 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
                dwTemp = dwTemp & PHHAL_HW_15693_RX106_CORRSPEED;
 800e096:	68ba      	ldr	r2, [r7, #8]
 800e098:	f64f 73cf 	movw	r3, #65487	@ 0xffcf
 800e09c:	4013      	ands	r3, r2
 800e09e:	60bb      	str	r3, [r7, #8]
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, SIGPRO_RM_CONFIG, (uint32_t)dwTemp));
 800e0a0:	68bb      	ldr	r3, [r7, #8]
 800e0a2:	461a      	mov	r2, r3
 800e0a4:	211c      	movs	r1, #28
 800e0a6:	6878      	ldr	r0, [r7, #4]
 800e0a8:	f001 ff3c 	bl	800ff24 <phhalHw_Pn5180_Instr_WriteRegister>
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e0b0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d002      	beq.n	800e0bc <phhalHw_Pn5180_SetConfig+0xdac>
 800e0b6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e0b8:	f000 bd6d 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>

                /* Write config data into shadow */
                pDataParams->wCfgShadow[wConfig] = wTmpValue;
 800e0bc:	887a      	ldrh	r2, [r7, #2]
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	322c      	adds	r2, #44	@ 0x2c
 800e0c2:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 800e0c4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            }
        }
        break;
 800e0c8:	f000 bd3d 	b.w	800eb46 <phhalHw_Pn5180_SetConfig+0x1836>

    case PHHAL_HW_CONFIG_TIMEOUT_VALUE_US:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bTimeoutUnit != PHHAL_HW_TIME_MICROSECONDS) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800e0cc:	887a      	ldrh	r2, [r7, #2]
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	322c      	adds	r2, #44	@ 0x2c
 800e0d2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800e0d6:	883a      	ldrh	r2, [r7, #0]
 800e0d8:	429a      	cmp	r2, r3
 800e0da:	d10a      	bne.n	800e0f2 <phhalHw_Pn5180_SetConfig+0xde2>
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d105      	bne.n	800e0f2 <phhalHw_Pn5180_SetConfig+0xde2>
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800e0ec:	2b01      	cmp	r3, #1
 800e0ee:	f000 852c 	beq.w	800eb4a <phhalHw_Pn5180_SetConfig+0x183a>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp,
 800e0f2:	883b      	ldrh	r3, [r7, #0]
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	4619      	mov	r1, r3
 800e0f8:	6878      	ldr	r0, [r7, #4]
 800e0fa:	f003 fe5f 	bl	8011dbc <phhalHw_Pn5180_SetTmo>
 800e0fe:	4603      	mov	r3, r0
 800e100:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e102:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e104:	2b00      	cmp	r3, #0
 800e106:	d002      	beq.n	800e10e <phhalHw_Pn5180_SetConfig+0xdfe>
 800e108:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e10a:	f000 bd44 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
                                 phhalHw_Pn5180_SetTmo(
                                         pDataParams,
                                         wValue,
                                         PHHAL_HW_TIME_MICROSECONDS));
            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800e10e:	887a      	ldrh	r2, [r7, #2]
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	322c      	adds	r2, #44	@ 0x2c
 800e114:	8839      	ldrh	r1, [r7, #0]
 800e116:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            pDataParams->bTimeoutUnit = PHHAL_HW_TIME_MICROSECONDS;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	2200      	movs	r2, #0
 800e11e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        }
        break;
 800e122:	f000 bd12 	b.w	800eb4a <phhalHw_Pn5180_SetConfig+0x183a>

    case PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bTimeoutUnit != PHHAL_HW_TIME_MILLISECONDS) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800e126:	887a      	ldrh	r2, [r7, #2]
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	322c      	adds	r2, #44	@ 0x2c
 800e12c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800e130:	883a      	ldrh	r2, [r7, #0]
 800e132:	429a      	cmp	r2, r3
 800e134:	d10a      	bne.n	800e14c <phhalHw_Pn5180_SetConfig+0xe3c>
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e13c:	2b01      	cmp	r3, #1
 800e13e:	d105      	bne.n	800e14c <phhalHw_Pn5180_SetConfig+0xe3c>
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800e146:	2b01      	cmp	r3, #1
 800e148:	f000 8501 	beq.w	800eb4e <phhalHw_Pn5180_SetConfig+0x183e>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp,
 800e14c:	883b      	ldrh	r3, [r7, #0]
 800e14e:	2201      	movs	r2, #1
 800e150:	4619      	mov	r1, r3
 800e152:	6878      	ldr	r0, [r7, #4]
 800e154:	f003 fe32 	bl	8011dbc <phhalHw_Pn5180_SetTmo>
 800e158:	4603      	mov	r3, r0
 800e15a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e15c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d002      	beq.n	800e168 <phhalHw_Pn5180_SetConfig+0xe58>
 800e162:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e164:	f000 bd17 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
                                 phhalHw_Pn5180_SetTmo(
                                         pDataParams,
                                         wValue,
                                         PHHAL_HW_TIME_MILLISECONDS));
            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800e168:	887a      	ldrh	r2, [r7, #2]
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	322c      	adds	r2, #44	@ 0x2c
 800e16e:	8839      	ldrh	r1, [r7, #0]
 800e170:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            pDataParams->bTimeoutUnit = PHHAL_HW_TIME_MILLISECONDS;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	2201      	movs	r2, #1
 800e178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        }
        break;
 800e17c:	f000 bce7 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x183e>

    case PHHAL_HW_CONFIG_SUBCARRIER:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800e180:	887a      	ldrh	r2, [r7, #2]
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	322c      	adds	r2, #44	@ 0x2c
 800e186:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800e18a:	883a      	ldrh	r2, [r7, #0]
 800e18c:	429a      	cmp	r2, r3
 800e18e:	d105      	bne.n	800e19c <phhalHw_Pn5180_SetConfig+0xe8c>
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800e196:	2b01      	cmp	r3, #1
 800e198:	f000 84db 	beq.w	800eb52 <phhalHw_Pn5180_SetConfig+0x1842>
        {
            /* Parameter check */
            if ((pDataParams->bCardType != PHHAL_HW_CARDTYPE_ISO15693) &&
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e1a2:	2b04      	cmp	r3, #4
 800e1a4:	d008      	beq.n	800e1b8 <phhalHw_Pn5180_SetConfig+0xea8>
                    (pDataParams->bCardType != PHHAL_HW_CARDTYPE_I18000P3M3))
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
            if ((pDataParams->bCardType != PHHAL_HW_CARDTYPE_ISO15693) &&
 800e1ac:	2b06      	cmp	r3, #6
 800e1ae:	d003      	beq.n	800e1b8 <phhalHw_Pn5180_SetConfig+0xea8>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_HAL);
 800e1b0:	f240 2325 	movw	r3, #549	@ 0x225
 800e1b4:	f000 bcef 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
            }

            /* only single subcarrier to be used while reception by ISO15693 */
            if ((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wValue != PHHAL_HW_SUBCARRIER_SINGLE))
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e1be:	2b04      	cmp	r3, #4
 800e1c0:	d106      	bne.n	800e1d0 <phhalHw_Pn5180_SetConfig+0xec0>
 800e1c2:	883b      	ldrh	r3, [r7, #0]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d003      	beq.n	800e1d0 <phhalHw_Pn5180_SetConfig+0xec0>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 800e1c8:	f240 2323 	movw	r3, #547	@ 0x223
 800e1cc:	f000 bce3 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
            }

            /* Evaluate hardware settings */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetCardMode(
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	f8b3 106a 	ldrh.w	r1, [r3, #106]	@ 0x6a
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	f8b3 206c 	ldrh.w	r2, [r3, #108]	@ 0x6c
 800e1dc:	883b      	ldrh	r3, [r7, #0]
 800e1de:	6878      	ldr	r0, [r7, #4]
 800e1e0:	f003 faf6 	bl	80117d0 <phhalHw_Pn5180_SetCardMode>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e1e8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d002      	beq.n	800e1f4 <phhalHw_Pn5180_SetConfig+0xee4>
 800e1ee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e1f0:	f000 bcd1 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
                    pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TXDATARATE_FRAMING],
                    pDataParams->wCfgShadow[PHHAL_HW_CONFIG_RXDATARATE_FRAMING],
                    wValue));

            /* Update Subcarrier setting */
            pDataParams->wCfgShadow[PHHAL_HW_CONFIG_SUBCARRIER] = wValue;
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	883a      	ldrh	r2, [r7, #0]
 800e1f8:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76
        }

        break;
 800e1fc:	f000 bca9 	b.w	800eb52 <phhalHw_Pn5180_SetConfig+0x1842>

    case PHHAL_HW_CONFIG_TIMING_MODE:

        /* Check supported option bits */
        switch (wValue & PHHAL_HW_TIMING_MODE_OPTION_MASK)
 800e200:	883b      	ldrh	r3, [r7, #0]
 800e202:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e206:	2b00      	cmp	r3, #0
 800e208:	d006      	beq.n	800e218 <phhalHw_Pn5180_SetConfig+0xf08>
 800e20a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e20e:	d003      	beq.n	800e218 <phhalHw_Pn5180_SetConfig+0xf08>
        {
        case PHHAL_HW_TIMING_MODE_OPTION_DEFAULT:
        case PHHAL_HW_TIMING_MODE_OPTION_AUTOCLEAR:
            break;
        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800e210:	f240 2321 	movw	r3, #545	@ 0x221
 800e214:	f000 bcbf 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
            break;
 800e218:	bf00      	nop
        }

        /* Check supported timing modes */
        switch (wValue & (uint16_t)~(uint16_t)PHHAL_HW_TIMING_MODE_OPTION_MASK)
 800e21a:	883b      	ldrh	r3, [r7, #0]
 800e21c:	b2db      	uxtb	r3, r3
 800e21e:	2b01      	cmp	r3, #1
 800e220:	dc02      	bgt.n	800e228 <phhalHw_Pn5180_SetConfig+0xf18>
 800e222:	2b00      	cmp	r3, #0
 800e224:	da03      	bge.n	800e22e <phhalHw_Pn5180_SetConfig+0xf1e>
 800e226:	e00f      	b.n	800e248 <phhalHw_Pn5180_SetConfig+0xf38>
 800e228:	2b02      	cmp	r3, #2
 800e22a:	d009      	beq.n	800e240 <phhalHw_Pn5180_SetConfig+0xf30>
 800e22c:	e00c      	b.n	800e248 <phhalHw_Pn5180_SetConfig+0xf38>
        {
        case PHHAL_HW_TIMING_MODE_OFF:
        case PHHAL_HW_TIMING_MODE_FDT:
            pDataParams->dwTimingUs = 0U;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	2200      	movs	r2, #0
 800e232:	621a      	str	r2, [r3, #32]
            pDataParams->wTimingMode = wValue;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	883a      	ldrh	r2, [r7, #0]
 800e238:	851a      	strh	r2, [r3, #40]	@ 0x28
            break;
 800e23a:	bf00      	nop
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
        }

        break;
 800e23c:	f000 bcaa 	b.w	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 800e240:	f240 2323 	movw	r3, #547	@ 0x223
 800e244:	f000 bca7 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800e248:	f240 2321 	movw	r3, #545	@ 0x221
 800e24c:	f000 bca3 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>

    case PHHAL_HW_CONFIG_FIELD_OFF_TIME:

        /* Parameter Check */
        if (wValue == 0U)
 800e250:	883b      	ldrh	r3, [r7, #0]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d103      	bne.n	800e25e <phhalHw_Pn5180_SetConfig+0xf4e>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800e256:	f240 2321 	movw	r3, #545	@ 0x221
 800e25a:	f000 bc9c 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* Store config data */
        pDataParams->wFieldOffTime = wValue;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	883a      	ldrh	r2, [r7, #0]
 800e262:	859a      	strh	r2, [r3, #44]	@ 0x2c
        break;
 800e264:	f000 bc96 	b.w	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_FIELD_RECOVERY_TIME:

        /* Store config data */
        pDataParams->wFieldRecoveryTime = wValue;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	883a      	ldrh	r2, [r7, #0]
 800e26c:	85da      	strh	r2, [r3, #46]	@ 0x2e
        break;
 800e26e:	f000 bc91 	b.w	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_JEWEL_MODE:

        if (wValue == PH_ON)
 800e272:	883b      	ldrh	r3, [r7, #0]
 800e274:	2b01      	cmp	r3, #1
 800e276:	d106      	bne.n	800e286 <phhalHw_Pn5180_SetConfig+0xf76>
        {
            pDataParams->bJewelActivated = (uint8_t)wValue;
 800e278:	883b      	ldrh	r3, [r7, #0]
 800e27a:	b2da      	uxtb	r2, r3
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        }
        else
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
        }
        break;
 800e282:	f000 bc87 	b.w	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>
        else if (wValue == PH_OFF)
 800e286:	883b      	ldrh	r3, [r7, #0]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d106      	bne.n	800e29a <phhalHw_Pn5180_SetConfig+0xf8a>
            pDataParams->bJewelActivated = (uint8_t)wValue;
 800e28c:	883b      	ldrh	r3, [r7, #0]
 800e28e:	b2da      	uxtb	r2, r3
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        break;
 800e296:	f000 bc7d 	b.w	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800e29a:	f240 2321 	movw	r3, #545	@ 0x221
 800e29e:	f000 bc7a 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>

    case PHHAL_HW_CONFIG_RFRESET_ON_TIMEOUT:

        if (wValue == PH_OFF)
 800e2a2:	883b      	ldrh	r3, [r7, #0]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d105      	bne.n	800e2b4 <phhalHw_Pn5180_SetConfig+0xfa4>
        {
            pDataParams->bRfResetAfterTo = PH_OFF;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        }
        else
        {
            pDataParams->bRfResetAfterTo = PH_ON;
        }
        break;
 800e2b0:	f000 bc70 	b.w	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>
            pDataParams->bRfResetAfterTo = PH_ON;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	2201      	movs	r2, #1
 800e2b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        break;
 800e2bc:	f000 bc6a 	b.w	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_OPE_MODE:

        pDataParams->bOpeMode = (uint8_t)wValue;
 800e2c0:	883b      	ldrh	r3, [r7, #0]
 800e2c2:	b2da      	uxtb	r2, r3
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        break;
 800e2ca:	f000 bc63 	b.w	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_SET_EMD:
        pDataParams->bEmdFlag = (uint8_t)wValue;
 800e2ce:	883b      	ldrh	r3, [r7, #0]
 800e2d0:	b2da      	uxtb	r2, r3
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        if(wValue == 0x1U)
 800e2d8:	883b      	ldrh	r3, [r7, #0]
 800e2da:	2b01      	cmp	r3, #1
 800e2dc:	d122      	bne.n	800e324 <phhalHw_Pn5180_SetConfig+0x1014>
        {
            if(pDataParams->bOpeMode != RD_LIB_MODE_ISO)
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800e2e4:	2b03      	cmp	r3, #3
 800e2e6:	d00e      	beq.n	800e306 <phhalHw_Pn5180_SetConfig+0xff6>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WriteRegister(pDataParams, EMD_CONTROL, PHHAL_HW_PN5180_EMVCO_NFC_EMD));
 800e2e8:	f240 1207 	movw	r2, #263	@ 0x107
 800e2ec:	2128      	movs	r1, #40	@ 0x28
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f7fe faa4 	bl	800c83c <phhalHw_Pn5180_WriteRegister>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e2f8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	f000 842b 	beq.w	800eb56 <phhalHw_Pn5180_SetConfig+0x1846>
 800e300:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e302:	f000 bc48 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
            }
            else
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WriteRegister(pDataParams, EMD_CONTROL, PHHAL_HW_PN5180_ISO_EMD));
 800e306:	f240 1203 	movw	r2, #259	@ 0x103
 800e30a:	2128      	movs	r1, #40	@ 0x28
 800e30c:	6878      	ldr	r0, [r7, #4]
 800e30e:	f7fe fa95 	bl	800c83c <phhalHw_Pn5180_WriteRegister>
 800e312:	4603      	mov	r3, r0
 800e314:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e316:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e318:	2b00      	cmp	r3, #0
 800e31a:	f000 841c 	beq.w	800eb56 <phhalHw_Pn5180_SetConfig+0x1846>
 800e31e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e320:	f000 bc39 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
            }
        }
        else
        {
            /* Clear EMD Enable bit in EMD Control Register */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, EMD_CONTROL, (uint32_t)~EMD_CONTROL_EMD_ENABLE_MASK));
 800e324:	f06f 0201 	mvn.w	r2, #1
 800e328:	2128      	movs	r1, #40	@ 0x28
 800e32a:	6878      	ldr	r0, [r7, #4]
 800e32c:	f001 fee6 	bl	80100fc <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800e330:	4603      	mov	r3, r0
 800e332:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e334:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e336:	2b00      	cmp	r3, #0
 800e338:	f000 840d 	beq.w	800eb56 <phhalHw_Pn5180_SetConfig+0x1846>
 800e33c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e33e:	f000 bc2a 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    case PHHAL_HW_CONFIG_SETMINFDT:

        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetMinFDT(pDataParams, wValue));
 800e342:	883b      	ldrh	r3, [r7, #0]
 800e344:	4619      	mov	r1, r3
 800e346:	6878      	ldr	r0, [r7, #4]
 800e348:	f000 fec6 	bl	800f0d8 <phhalHw_Pn5180_SetMinFDT>
 800e34c:	4603      	mov	r3, r0
 800e34e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e350:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e352:	2b00      	cmp	r3, #0
 800e354:	f000 8401 	beq.w	800eb5a <phhalHw_Pn5180_SetConfig+0x184a>
 800e358:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e35a:	f000 bc1c 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
        break;

    case PHHAL_HW_CONFIG_RXMULTIPLE:

        if (wValue == PH_ON)
 800e35e:	883b      	ldrh	r3, [r7, #0]
 800e360:	2b01      	cmp	r3, #1
 800e362:	d111      	bne.n	800e388 <phhalHw_Pn5180_SetConfig+0x1078>
        {
            pDataParams->bRxMultiple = PH_ON;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	2201      	movs	r2, #1
 800e368:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask( pDataParams, TRANSCEIVER_CONFIG, TRANSCEIVER_CONFIG_RX_MULTIPLE_ENABLE_MASK ));
 800e36c:	2202      	movs	r2, #2
 800e36e:	2104      	movs	r1, #4
 800e370:	6878      	ldr	r0, [r7, #4]
 800e372:	f001 fe4d 	bl	8010010 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 800e376:	4603      	mov	r3, r0
 800e378:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e37a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	f000 83ee 	beq.w	800eb5e <phhalHw_Pn5180_SetConfig+0x184e>
 800e382:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e384:	f000 bc07 	b.w	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        else
        {
            pDataParams->bRxMultiple = PH_OFF;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2200      	movs	r2, #0
 800e38c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask( pDataParams, TRANSCEIVER_CONFIG, (uint32_t )~(TRANSCEIVER_CONFIG_RX_MULTIPLE_ENABLE_MASK) ));
 800e390:	f06f 0202 	mvn.w	r2, #2
 800e394:	2104      	movs	r1, #4
 800e396:	6878      	ldr	r0, [r7, #4]
 800e398:	f001 feb0 	bl	80100fc <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800e39c:	4603      	mov	r3, r0
 800e39e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e3a0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	f000 83db 	beq.w	800eb5e <phhalHw_Pn5180_SetConfig+0x184e>
 800e3a8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e3aa:	e3f4      	b.n	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    case PHHAL_HW_CONFIG_RFCA:
        if((wValue != PH_ON) && (wValue != PH_OFF))
 800e3ac:	883b      	ldrh	r3, [r7, #0]
 800e3ae:	2b01      	cmp	r3, #1
 800e3b0:	d005      	beq.n	800e3be <phhalHw_Pn5180_SetConfig+0x10ae>
 800e3b2:	883b      	ldrh	r3, [r7, #0]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d002      	beq.n	800e3be <phhalHw_Pn5180_SetConfig+0x10ae>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800e3b8:	f240 2321 	movw	r3, #545	@ 0x221
 800e3bc:	e3eb      	b.n	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        pDataParams->bRfca = (uint8_t)wValue;
 800e3be:	883b      	ldrh	r3, [r7, #0]
 800e3c0:	b2da      	uxtb	r2, r3
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	70da      	strb	r2, [r3, #3]
        break;
 800e3c6:	e3e5      	b.n	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_RFON_INTERRUPT:
        if((wValue != PH_ON) && (wValue != PH_OFF))
 800e3c8:	883b      	ldrh	r3, [r7, #0]
 800e3ca:	2b01      	cmp	r3, #1
 800e3cc:	d00c      	beq.n	800e3e8 <phhalHw_Pn5180_SetConfig+0x10d8>
 800e3ce:	883b      	ldrh	r3, [r7, #0]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d009      	beq.n	800e3e8 <phhalHw_Pn5180_SetConfig+0x10d8>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800e3d4:	f240 2321 	movw	r3, #545	@ 0x221
 800e3d8:	e3dd      	b.n	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
 800e3da:	bf00      	nop
 800e3dc:	f3af 8000 	nop.w
 800e3e0:	51eb851f 	.word	0x51eb851f
 800e3e4:	402b1eb8 	.word	0x402b1eb8
        }

        if(wValue == PH_ON)
 800e3e8:	883b      	ldrh	r3, [r7, #0]
 800e3ea:	2b01      	cmp	r3, #1
 800e3ec:	d10c      	bne.n	800e408 <phhalHw_Pn5180_SetConfig+0x10f8>
        {
            /* Enable RF-ON Interrupt*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_ENABLE, IRQ_ENABLE_RFON_DET_IRQ_SET_ENABLE_MASK));
 800e3ee:	2280      	movs	r2, #128	@ 0x80
 800e3f0:	2101      	movs	r1, #1
 800e3f2:	6878      	ldr	r0, [r7, #4]
 800e3f4:	f001 fd96 	bl	800ff24 <phhalHw_Pn5180_Instr_WriteRegister>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e3fc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	f000 83af 	beq.w	800eb62 <phhalHw_Pn5180_SetConfig+0x1852>
 800e404:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e406:	e3c6      	b.n	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        else
        {
            /* Disable RF-ON Interrupt*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, IRQ_ENABLE,  ~(uint32_t)IRQ_ENABLE_RFON_DET_IRQ_SET_ENABLE_MASK));
 800e408:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800e40c:	2101      	movs	r1, #1
 800e40e:	6878      	ldr	r0, [r7, #4]
 800e410:	f001 fe74 	bl	80100fc <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800e414:	4603      	mov	r3, r0
 800e416:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e418:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	f000 83a1 	beq.w	800eb62 <phhalHw_Pn5180_SetConfig+0x1852>
 800e420:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e422:	e3b8      	b.n	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    case PHHAL_HW_CONFIG_NFCIP_STARTBYTE:
        if((wValue != PH_ON) && (wValue != PH_OFF))
 800e424:	883b      	ldrh	r3, [r7, #0]
 800e426:	2b01      	cmp	r3, #1
 800e428:	d005      	beq.n	800e436 <phhalHw_Pn5180_SetConfig+0x1126>
 800e42a:	883b      	ldrh	r3, [r7, #0]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d002      	beq.n	800e436 <phhalHw_Pn5180_SetConfig+0x1126>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800e430:	f240 2321 	movw	r3, #545	@ 0x221
 800e434:	e3af      	b.n	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        pDataParams->bNfcipMode = (uint8_t)wValue;
 800e436:	883b      	ldrh	r3, [r7, #0]
 800e438:	b2da      	uxtb	r2, r3
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
        if (pDataParams->bNfcipMode == PH_ON)
        {
            phhalHw_Pn5180_AutoSyncByte(pDataParams);
        }
#endif
        break;
 800e440:	e3a8      	b.n	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_SET_SYMBOL_SEND:

        /* check parameter */
        if ((wValue != PH_ON) && (wValue != PH_OFF))
 800e442:	883b      	ldrh	r3, [r7, #0]
 800e444:	2b01      	cmp	r3, #1
 800e446:	d005      	beq.n	800e454 <phhalHw_Pn5180_SetConfig+0x1144>
 800e448:	883b      	ldrh	r3, [r7, #0]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d002      	beq.n	800e454 <phhalHw_Pn5180_SetConfig+0x1144>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800e44e:	f240 2321 	movw	r3, #545	@ 0x221
 800e452:	e3a0      	b.n	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* PH_ON implies Clearing Bit-3 (DataEn Bit in TxDataNum). */
        if (wValue == PH_ON)
 800e454:	883b      	ldrh	r3, [r7, #0]
 800e456:	2b01      	cmp	r3, #1
 800e458:	d10d      	bne.n	800e476 <phhalHw_Pn5180_SetConfig+0x1166>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, TX_CONFIG,  ~(uint32_t)TX_CONFIG_TX_DATA_ENABLE_MASK));
 800e45a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800e45e:	2118      	movs	r1, #24
 800e460:	6878      	ldr	r0, [r7, #4]
 800e462:	f001 fe4b 	bl	80100fc <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800e466:	4603      	mov	r3, r0
 800e468:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e46a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	f000 837a 	beq.w	800eb66 <phhalHw_Pn5180_SetConfig+0x1856>
 800e472:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e474:	e38f      	b.n	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        /* PH_OFF implies Setting Bit-3 (DataEn Bit in TxDataNum). */
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, TX_CONFIG, TX_CONFIG_TX_DATA_ENABLE_MASK));
 800e476:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800e47a:	2118      	movs	r1, #24
 800e47c:	6878      	ldr	r0, [r7, #4]
 800e47e:	f001 fdc7 	bl	8010010 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 800e482:	4603      	mov	r3, r0
 800e484:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e486:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e488:	2b00      	cmp	r3, #0
 800e48a:	f000 836c 	beq.w	800eb66 <phhalHw_Pn5180_SetConfig+0x1856>
 800e48e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e490:	e381      	b.n	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
        break;

    case PHHAL_HW_CONFIG_SYMBOL_START:

        /* Parameter check */
        if ((pDataParams->bCardType != PHHAL_HW_CARDTYPE_ICODEEPCUID) &&
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e498:	2b05      	cmp	r3, #5
 800e49a:	d00c      	beq.n	800e4b6 <phhalHw_Pn5180_SetConfig+0x11a6>
            (pDataParams->bCardType != PHHAL_HW_CARDTYPE_ISO15693) &&
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
        if ((pDataParams->bCardType != PHHAL_HW_CARDTYPE_ICODEEPCUID) &&
 800e4a2:	2b04      	cmp	r3, #4
 800e4a4:	d007      	beq.n	800e4b6 <phhalHw_Pn5180_SetConfig+0x11a6>
            (pDataParams->bCardType != PHHAL_HW_CARDTYPE_I18000P3M3))
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
            (pDataParams->bCardType != PHHAL_HW_CARDTYPE_ISO15693) &&
 800e4ac:	2b06      	cmp	r3, #6
 800e4ae:	d002      	beq.n	800e4b6 <phhalHw_Pn5180_SetConfig+0x11a6>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_HAL);
 800e4b0:	f240 2325 	movw	r3, #549	@ 0x225
 800e4b4:	e36f      	b.n	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* Parameter check #2 */
        switch (wValue)
 800e4b6:	883b      	ldrh	r3, [r7, #0]
 800e4b8:	2b07      	cmp	r3, #7
 800e4ba:	d82b      	bhi.n	800e514 <phhalHw_Pn5180_SetConfig+0x1204>
 800e4bc:	a201      	add	r2, pc, #4	@ (adr r2, 800e4c4 <phhalHw_Pn5180_SetConfig+0x11b4>)
 800e4be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4c2:	bf00      	nop
 800e4c4:	0800e51b 	.word	0x0800e51b
 800e4c8:	0800e4e5 	.word	0x0800e4e5
 800e4cc:	0800e4e5 	.word	0x0800e4e5
 800e4d0:	0800e515 	.word	0x0800e515
 800e4d4:	0800e4e5 	.word	0x0800e4e5
 800e4d8:	0800e4f5 	.word	0x0800e4f5
 800e4dc:	0800e505 	.word	0x0800e505
 800e4e0:	0800e505 	.word	0x0800e505
        {
        case PHHAL_HW_SYMBOL_ICODEEPCUID_SSOF:
        case PHHAL_HW_SYMBOL_ICODEEPCUID_LSOF:
        case PHHAL_HW_SYMBOL_ICODEEPCUID_CS:
            if (pDataParams->bCardType != PHHAL_HW_CARDTYPE_ICODEEPCUID)
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e4ea:	2b05      	cmp	r3, #5
 800e4ec:	d017      	beq.n	800e51e <phhalHw_Pn5180_SetConfig+0x120e>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800e4ee:	f240 2321 	movw	r3, #545	@ 0x221
 800e4f2:	e350      	b.n	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
            }
            break;
        case PHHAL_HW_SYMBOL_I15693_SOF:
            if (pDataParams->bCardType != PHHAL_HW_CARDTYPE_ISO15693)
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e4fa:	2b04      	cmp	r3, #4
 800e4fc:	d011      	beq.n	800e522 <phhalHw_Pn5180_SetConfig+0x1212>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800e4fe:	f240 2321 	movw	r3, #545	@ 0x221
 800e502:	e348      	b.n	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
            }
            break;
        case PHHAL_HW_SYMBOL_I18000P3M3_PREAMBLE:
        case PHHAL_HW_SYMBOL_I18000P3M3_FSYNC:
            if (pDataParams->bCardType != PHHAL_HW_CARDTYPE_I18000P3M3)
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e50a:	2b06      	cmp	r3, #6
 800e50c:	d00b      	beq.n	800e526 <phhalHw_Pn5180_SetConfig+0x1216>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800e50e:	f240 2321 	movw	r3, #545	@ 0x221
 800e512:	e340      	b.n	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
            }
            break;
        case PH_OFF:
            break;
        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 800e514:	f240 2323 	movw	r3, #547	@ 0x223
 800e518:	e33d      	b.n	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
            break;
 800e51a:	bf00      	nop
 800e51c:	e004      	b.n	800e528 <phhalHw_Pn5180_SetConfig+0x1218>
            break;
 800e51e:	bf00      	nop
 800e520:	e002      	b.n	800e528 <phhalHw_Pn5180_SetConfig+0x1218>
            break;
 800e522:	bf00      	nop
 800e524:	e000      	b.n	800e528 <phhalHw_Pn5180_SetConfig+0x1218>
            break;
 800e526:	bf00      	nop
        }

        wSizeOfRegTypeValueSets = 0U;
 800e528:	2300      	movs	r3, #0
 800e52a:	84bb      	strh	r3, [r7, #36]	@ 0x24

        /*Clear the Bits of TX_CONFIG_TX_START_SYMBOL_MASK & DATA_ENABLE*/
        if(wValue == PH_OFF)
 800e52c:	883b      	ldrh	r3, [r7, #0]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d103      	bne.n	800e53a <phhalHw_Pn5180_SetConfig+0x122a>
        {
            dwTemp = (uint32_t) ~( TX_CONFIG_TX_START_SYMBOL_MASK | TX_CONFIG_TX_DATA_ENABLE_MASK);
 800e532:	f46f 6398 	mvn.w	r3, #1216	@ 0x4c0
 800e536:	60bb      	str	r3, [r7, #8]
 800e538:	e002      	b.n	800e540 <phhalHw_Pn5180_SetConfig+0x1230>
        }
        else
        {
            dwTemp = (uint32_t) ~( TX_CONFIG_TX_START_SYMBOL_MASK);
 800e53a:	f06f 03c0 	mvn.w	r3, #192	@ 0xc0
 800e53e:	60bb      	str	r3, [r7, #8]
        }

        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = TX_CONFIG;
 800e540:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e542:	1c5a      	adds	r2, r3, #1
 800e544:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800e546:	3338      	adds	r3, #56	@ 0x38
 800e548:	443b      	add	r3, r7
 800e54a:	2218      	movs	r2, #24
 800e54c:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 800e550:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e552:	1c5a      	adds	r2, r3, #1
 800e554:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800e556:	3338      	adds	r3, #56	@ 0x38
 800e558:	443b      	add	r3, r7
 800e55a:	2203      	movs	r2, #3
 800e55c:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800e560:	68ba      	ldr	r2, [r7, #8]
 800e562:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e564:	1c59      	adds	r1, r3, #1
 800e566:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e568:	b2d2      	uxtb	r2, r2
 800e56a:	3338      	adds	r3, #56	@ 0x38
 800e56c:	443b      	add	r3, r7
 800e56e:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800e572:	68bb      	ldr	r3, [r7, #8]
 800e574:	0a1a      	lsrs	r2, r3, #8
 800e576:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e578:	1c59      	adds	r1, r3, #1
 800e57a:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e57c:	b2d2      	uxtb	r2, r2
 800e57e:	3338      	adds	r3, #56	@ 0x38
 800e580:	443b      	add	r3, r7
 800e582:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800e586:	68bb      	ldr	r3, [r7, #8]
 800e588:	0c1a      	lsrs	r2, r3, #16
 800e58a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e58c:	1c59      	adds	r1, r3, #1
 800e58e:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e590:	b2d2      	uxtb	r2, r2
 800e592:	3338      	adds	r3, #56	@ 0x38
 800e594:	443b      	add	r3, r7
 800e596:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800e59a:	68bb      	ldr	r3, [r7, #8]
 800e59c:	0e1a      	lsrs	r2, r3, #24
 800e59e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e5a0:	1c59      	adds	r1, r3, #1
 800e5a2:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e5a4:	b2d2      	uxtb	r2, r2
 800e5a6:	3338      	adds	r3, #56	@ 0x38
 800e5a8:	443b      	add	r3, r7
 800e5aa:	f803 2c2c 	strb.w	r2, [r3, #-44]

        dwValue = 0U;
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Set new symbol */
        switch (wValue)
 800e5b2:	883b      	ldrh	r3, [r7, #0]
 800e5b4:	3b01      	subs	r3, #1
 800e5b6:	2b06      	cmp	r3, #6
 800e5b8:	d822      	bhi.n	800e600 <phhalHw_Pn5180_SetConfig+0x12f0>
 800e5ba:	a201      	add	r2, pc, #4	@ (adr r2, 800e5c0 <phhalHw_Pn5180_SetConfig+0x12b0>)
 800e5bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5c0:	0800e5dd 	.word	0x0800e5dd
 800e5c4:	0800e5e3 	.word	0x0800e5e3
 800e5c8:	0800e601 	.word	0x0800e601
 800e5cc:	0800e5e9 	.word	0x0800e5e9
 800e5d0:	0800e5ef 	.word	0x0800e5ef
 800e5d4:	0800e5f5 	.word	0x0800e5f5
 800e5d8:	0800e5fb 	.word	0x0800e5fb
        {
        case PHHAL_HW_SYMBOL_ICODEEPCUID_SSOF:
            dwValue = 0x3U;
 800e5dc:	2303      	movs	r3, #3
 800e5de:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 800e5e0:	e00f      	b.n	800e602 <phhalHw_Pn5180_SetConfig+0x12f2>
        case PHHAL_HW_SYMBOL_ICODEEPCUID_LSOF:
            dwValue = 0x1U;
 800e5e2:	2301      	movs	r3, #1
 800e5e4:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 800e5e6:	e00c      	b.n	800e602 <phhalHw_Pn5180_SetConfig+0x12f2>
        case PHHAL_HW_SYMBOL_ICODEEPCUID_CS:
            dwValue = 0x2U;
 800e5e8:	2302      	movs	r3, #2
 800e5ea:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 800e5ec:	e009      	b.n	800e602 <phhalHw_Pn5180_SetConfig+0x12f2>
        case PHHAL_HW_SYMBOL_I15693_SOF:
            dwValue = 0x3U;
 800e5ee:	2303      	movs	r3, #3
 800e5f0:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 800e5f2:	e006      	b.n	800e602 <phhalHw_Pn5180_SetConfig+0x12f2>
        case PHHAL_HW_SYMBOL_I18000P3M3_PREAMBLE:
            dwValue = 0x1U;
 800e5f4:	2301      	movs	r3, #1
 800e5f6:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 800e5f8:	e003      	b.n	800e602 <phhalHw_Pn5180_SetConfig+0x12f2>
        case PHHAL_HW_SYMBOL_I18000P3M3_FSYNC:
            dwValue = 0x2U;
 800e5fa:	2302      	movs	r3, #2
 800e5fc:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 800e5fe:	e000      	b.n	800e602 <phhalHw_Pn5180_SetConfig+0x12f2>
        default:
            break;
 800e600:	bf00      	nop
        }

        /*Set the new value  */
        dwTemp = (uint32_t)((dwValue << TX_CONFIG_TX_START_SYMBOL_POS) & TX_CONFIG_TX_START_SYMBOL_MASK);
 800e602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e604:	019b      	lsls	r3, r3, #6
 800e606:	b2db      	uxtb	r3, r3
 800e608:	60bb      	str	r3, [r7, #8]
        dwTemp |= (uint32_t)((dwValue << TX_CONFIG_TX_DATA_ENABLE_POS) & TX_CONFIG_TX_DATA_ENABLE_MASK);
 800e60a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e60c:	029b      	lsls	r3, r3, #10
 800e60e:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 800e612:	68bb      	ldr	r3, [r7, #8]
 800e614:	4313      	orrs	r3, r2
 800e616:	60bb      	str	r3, [r7, #8]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = TX_CONFIG;
 800e618:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e61a:	1c5a      	adds	r2, r3, #1
 800e61c:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800e61e:	3338      	adds	r3, #56	@ 0x38
 800e620:	443b      	add	r3, r7
 800e622:	2218      	movs	r2, #24
 800e624:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 800e628:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e62a:	1c5a      	adds	r2, r3, #1
 800e62c:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800e62e:	3338      	adds	r3, #56	@ 0x38
 800e630:	443b      	add	r3, r7
 800e632:	2202      	movs	r2, #2
 800e634:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800e638:	68ba      	ldr	r2, [r7, #8]
 800e63a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e63c:	1c59      	adds	r1, r3, #1
 800e63e:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e640:	b2d2      	uxtb	r2, r2
 800e642:	3338      	adds	r3, #56	@ 0x38
 800e644:	443b      	add	r3, r7
 800e646:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800e64a:	68bb      	ldr	r3, [r7, #8]
 800e64c:	0a1a      	lsrs	r2, r3, #8
 800e64e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e650:	1c59      	adds	r1, r3, #1
 800e652:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e654:	b2d2      	uxtb	r2, r2
 800e656:	3338      	adds	r3, #56	@ 0x38
 800e658:	443b      	add	r3, r7
 800e65a:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800e65e:	68bb      	ldr	r3, [r7, #8]
 800e660:	0c1a      	lsrs	r2, r3, #16
 800e662:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e664:	1c59      	adds	r1, r3, #1
 800e666:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e668:	b2d2      	uxtb	r2, r2
 800e66a:	3338      	adds	r3, #56	@ 0x38
 800e66c:	443b      	add	r3, r7
 800e66e:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800e672:	68bb      	ldr	r3, [r7, #8]
 800e674:	0e1a      	lsrs	r2, r3, #24
 800e676:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e678:	1c59      	adds	r1, r3, #1
 800e67a:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e67c:	b2d2      	uxtb	r2, r2
 800e67e:	3338      	adds	r3, #56	@ 0x38
 800e680:	443b      	add	r3, r7
 800e682:	f803 2c2c 	strb.w	r2, [r3, #-44]

        /*Send the array to the IC*/
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 800e686:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e688:	f107 030c 	add.w	r3, r7, #12
 800e68c:	4619      	mov	r1, r3
 800e68e:	6878      	ldr	r0, [r7, #4]
 800e690:	f001 fdaa 	bl	80101e8 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 800e694:	4603      	mov	r3, r0
 800e696:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e698:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	f000 8265 	beq.w	800eb6a <phhalHw_Pn5180_SetConfig+0x185a>
 800e6a0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e6a2:	e278      	b.n	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
        break;

    case PHHAL_HW_CONFIG_SYMBOL_END:

        /* Parameter check */
        if (pDataParams->bCardType != PHHAL_HW_CARDTYPE_ICODEEPCUID)
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e6aa:	2b05      	cmp	r3, #5
 800e6ac:	d002      	beq.n	800e6b4 <phhalHw_Pn5180_SetConfig+0x13a4>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_HAL);
 800e6ae:	f240 2325 	movw	r3, #549	@ 0x225
 800e6b2:	e270      	b.n	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* Parameter check #2 */
        switch (wValue)
 800e6b4:	883b      	ldrh	r3, [r7, #0]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d004      	beq.n	800e6c4 <phhalHw_Pn5180_SetConfig+0x13b4>
 800e6ba:	2b03      	cmp	r3, #3
 800e6bc:	d002      	beq.n	800e6c4 <phhalHw_Pn5180_SetConfig+0x13b4>
        {
        case PHHAL_HW_SYMBOL_ICODEEPCUID_CEOF:
        case PH_OFF:
            break;
        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800e6be:	f240 2321 	movw	r3, #545	@ 0x221
 800e6c2:	e268      	b.n	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
            break;
 800e6c4:	bf00      	nop
        }

        /* Read out TxFrameCon register */

        /* Set new symbol */
        switch (wValue)
 800e6c6:	883b      	ldrh	r3, [r7, #0]
 800e6c8:	2b03      	cmp	r3, #3
 800e6ca:	f040 8083 	bne.w	800e7d4 <phhalHw_Pn5180_SetConfig+0x14c4>
        {
        case PHHAL_HW_SYMBOL_ICODEEPCUID_CEOF:
            wSizeOfRegTypeValueSets = 0U;
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /*Clear the Bits of TX_CONFIG_TX_STOP_SYMBOL_MASK*/
            dwTemp = (uint32_t) ~( TX_CONFIG_TX_STOP_SYMBOL_MASK );
 800e6d2:	f46f 7340 	mvn.w	r3, #768	@ 0x300
 800e6d6:	60bb      	str	r3, [r7, #8]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = TX_CONFIG;
 800e6d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e6da:	1c5a      	adds	r2, r3, #1
 800e6dc:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800e6de:	3338      	adds	r3, #56	@ 0x38
 800e6e0:	443b      	add	r3, r7
 800e6e2:	2218      	movs	r2, #24
 800e6e4:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 800e6e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e6ea:	1c5a      	adds	r2, r3, #1
 800e6ec:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800e6ee:	3338      	adds	r3, #56	@ 0x38
 800e6f0:	443b      	add	r3, r7
 800e6f2:	2203      	movs	r2, #3
 800e6f4:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800e6f8:	68ba      	ldr	r2, [r7, #8]
 800e6fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e6fc:	1c59      	adds	r1, r3, #1
 800e6fe:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e700:	b2d2      	uxtb	r2, r2
 800e702:	3338      	adds	r3, #56	@ 0x38
 800e704:	443b      	add	r3, r7
 800e706:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800e70a:	68bb      	ldr	r3, [r7, #8]
 800e70c:	0a1a      	lsrs	r2, r3, #8
 800e70e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e710:	1c59      	adds	r1, r3, #1
 800e712:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e714:	b2d2      	uxtb	r2, r2
 800e716:	3338      	adds	r3, #56	@ 0x38
 800e718:	443b      	add	r3, r7
 800e71a:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800e71e:	68bb      	ldr	r3, [r7, #8]
 800e720:	0c1a      	lsrs	r2, r3, #16
 800e722:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e724:	1c59      	adds	r1, r3, #1
 800e726:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e728:	b2d2      	uxtb	r2, r2
 800e72a:	3338      	adds	r3, #56	@ 0x38
 800e72c:	443b      	add	r3, r7
 800e72e:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800e732:	68bb      	ldr	r3, [r7, #8]
 800e734:	0e1a      	lsrs	r2, r3, #24
 800e736:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e738:	1c59      	adds	r1, r3, #1
 800e73a:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e73c:	b2d2      	uxtb	r2, r2
 800e73e:	3338      	adds	r3, #56	@ 0x38
 800e740:	443b      	add	r3, r7
 800e742:	f803 2c2c 	strb.w	r2, [r3, #-44]

            /*Set the new value  */
            dwTemp = (uint32_t)((0x0CU << TX_CONFIG_TX_STOP_SYMBOL_POS) & TX_CONFIG_TX_STOP_SYMBOL_MASK);
 800e746:	2300      	movs	r3, #0
 800e748:	60bb      	str	r3, [r7, #8]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = TX_CONFIG;
 800e74a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e74c:	1c5a      	adds	r2, r3, #1
 800e74e:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800e750:	3338      	adds	r3, #56	@ 0x38
 800e752:	443b      	add	r3, r7
 800e754:	2218      	movs	r2, #24
 800e756:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 800e75a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e75c:	1c5a      	adds	r2, r3, #1
 800e75e:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800e760:	3338      	adds	r3, #56	@ 0x38
 800e762:	443b      	add	r3, r7
 800e764:	2202      	movs	r2, #2
 800e766:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800e76a:	68ba      	ldr	r2, [r7, #8]
 800e76c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e76e:	1c59      	adds	r1, r3, #1
 800e770:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e772:	b2d2      	uxtb	r2, r2
 800e774:	3338      	adds	r3, #56	@ 0x38
 800e776:	443b      	add	r3, r7
 800e778:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800e77c:	68bb      	ldr	r3, [r7, #8]
 800e77e:	0a1a      	lsrs	r2, r3, #8
 800e780:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e782:	1c59      	adds	r1, r3, #1
 800e784:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e786:	b2d2      	uxtb	r2, r2
 800e788:	3338      	adds	r3, #56	@ 0x38
 800e78a:	443b      	add	r3, r7
 800e78c:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800e790:	68bb      	ldr	r3, [r7, #8]
 800e792:	0c1a      	lsrs	r2, r3, #16
 800e794:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e796:	1c59      	adds	r1, r3, #1
 800e798:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e79a:	b2d2      	uxtb	r2, r2
 800e79c:	3338      	adds	r3, #56	@ 0x38
 800e79e:	443b      	add	r3, r7
 800e7a0:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800e7a4:	68bb      	ldr	r3, [r7, #8]
 800e7a6:	0e1a      	lsrs	r2, r3, #24
 800e7a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e7aa:	1c59      	adds	r1, r3, #1
 800e7ac:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e7ae:	b2d2      	uxtb	r2, r2
 800e7b0:	3338      	adds	r3, #56	@ 0x38
 800e7b2:	443b      	add	r3, r7
 800e7b4:	f803 2c2c 	strb.w	r2, [r3, #-44]

            /*Send the array to the IC*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 800e7b8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e7ba:	f107 030c 	add.w	r3, r7, #12
 800e7be:	4619      	mov	r1, r3
 800e7c0:	6878      	ldr	r0, [r7, #4]
 800e7c2:	f001 fd11 	bl	80101e8 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e7ca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d003      	beq.n	800e7d8 <phhalHw_Pn5180_SetConfig+0x14c8>
 800e7d0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e7d2:	e1e0      	b.n	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
            break;
        default:
            break;
 800e7d4:	bf00      	nop
 800e7d6:	e1dd      	b.n	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>
            break;
 800e7d8:	bf00      	nop
        }

        break;
 800e7da:	e1db      	b.n	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_CRCTYPE:

        if(!(wValue & (PHHAL_HW_CRCTYPE_CRC5 | PHHAL_HW_CRCTYPE_CRC16 | PHHAL_HW_CRCOPTION_INVERTED)))
 800e7dc:	883a      	ldrh	r2, [r7, #0]
 800e7de:	f240 1303 	movw	r3, #259	@ 0x103
 800e7e2:	4013      	ands	r3, r2
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d102      	bne.n	800e7ee <phhalHw_Pn5180_SetConfig+0x14de>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800e7e8:	f240 2321 	movw	r3, #545	@ 0x221
 800e7ec:	e1d3      	b.n	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>

        /* in case of 18000P3M3 for CRC5 calculation we need preset value of 9 which is not supported by
        * So flag is enable to perform software calculation of CRC5 in Pn5180 HAL
        */

        dwValue = 0U;
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	633b      	str	r3, [r7, #48]	@ 0x30
        /*dwRegister will contain all the bits that need to be zeroed out*/
        dwRegister = 0U;
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	637b      	str	r3, [r7, #52]	@ 0x34

        if((0U != ((wValue & PHHAL_HW_CRCTYPE_CRC5))) && (pDataParams->bCardType == PHHAL_HW_CARDTYPE_I18000P3M3))
 800e7f6:	883b      	ldrh	r3, [r7, #0]
 800e7f8:	f003 0301 	and.w	r3, r3, #1
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d015      	beq.n	800e82c <phhalHw_Pn5180_SetConfig+0x151c>
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e806:	2b06      	cmp	r3, #6
 800e808:	d110      	bne.n	800e82c <phhalHw_Pn5180_SetConfig+0x151c>
        {
            dwValue |= CRC_TX_CONFIG_TX_CRC_TYPE_MASK;
 800e80a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e80c:	f043 0304 	orr.w	r3, r3, #4
 800e810:	633b      	str	r3, [r7, #48]	@ 0x30
            dwRegister |= CRC_TX_CONFIG_TX_CRC_INV_MASK;
 800e812:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e814:	f043 0302 	orr.w	r3, r3, #2
 800e818:	637b      	str	r3, [r7, #52]	@ 0x34
            dwRegister |= CRC_TX_CONFIG_TX_CRC_PRESET_SEL_MASK;
 800e81a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e81c:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 800e820:	637b      	str	r3, [r7, #52]	@ 0x34
            dwValue |= (0x5U << CRC_TX_CONFIG_TX_CRC_PRESET_SEL_POS);
 800e822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e824:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 800e828:	633b      	str	r3, [r7, #48]	@ 0x30
 800e82a:	e008      	b.n	800e83e <phhalHw_Pn5180_SetConfig+0x152e>
        }
        else if(0U != (wValue & PHHAL_HW_CRCTYPE_CRC16))
 800e82c:	883b      	ldrh	r3, [r7, #0]
 800e82e:	f003 0302 	and.w	r3, r3, #2
 800e832:	2b00      	cmp	r3, #0
 800e834:	d003      	beq.n	800e83e <phhalHw_Pn5180_SetConfig+0x152e>
        {
            dwRegister |= CRC_TX_CONFIG_TX_CRC_TYPE_MASK;
 800e836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e838:	f043 0304 	orr.w	r3, r3, #4
 800e83c:	637b      	str	r3, [r7, #52]	@ 0x34
        else
        {
            /* QAC */
        }

        if(0U != (wValue & PHHAL_HW_CRCOPTION_INVERTED))
 800e83e:	883b      	ldrh	r3, [r7, #0]
 800e840:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e844:	2b00      	cmp	r3, #0
 800e846:	d004      	beq.n	800e852 <phhalHw_Pn5180_SetConfig+0x1542>
        {
            dwValue |= CRC_TX_CONFIG_TX_CRC_INV_MASK;
 800e848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e84a:	f043 0302 	orr.w	r3, r3, #2
 800e84e:	633b      	str	r3, [r7, #48]	@ 0x30
 800e850:	e003      	b.n	800e85a <phhalHw_Pn5180_SetConfig+0x154a>
        }
        else
        {
            dwRegister |= CRC_TX_CONFIG_TX_CRC_INV_MASK;
 800e852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e854:	f043 0302 	orr.w	r3, r3, #2
 800e858:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        if ((pDataParams->bCardType == PHHAL_HW_CARDTYPE_I18000P3M3) && (0U != ((wValue & PHHAL_HW_CRCTYPE_CRC16))))
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e860:	2b06      	cmp	r3, #6
 800e862:	d10c      	bne.n	800e87e <phhalHw_Pn5180_SetConfig+0x156e>
 800e864:	883b      	ldrh	r3, [r7, #0]
 800e866:	f003 0302 	and.w	r3, r3, #2
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d007      	beq.n	800e87e <phhalHw_Pn5180_SetConfig+0x156e>
        {
            dwRegister |= CRC_TX_CONFIG_TX_CRC_PRESET_SEL_MASK;
 800e86e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e870:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 800e874:	637b      	str	r3, [r7, #52]	@ 0x34
            dwValue |= (0x3U << CRC_TX_CONFIG_TX_CRC_PRESET_SEL_POS);
 800e876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e878:	f043 0318 	orr.w	r3, r3, #24
 800e87c:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        wSizeOfRegTypeValueSets = 0U;
 800e87e:	2300      	movs	r3, #0
 800e880:	84bb      	strh	r3, [r7, #36]	@ 0x24

        /*Clear the Bits */
        dwTemp = (uint32_t) ~( dwRegister );
 800e882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e884:	43db      	mvns	r3, r3
 800e886:	60bb      	str	r3, [r7, #8]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_TX_CONFIG;
 800e888:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e88a:	1c5a      	adds	r2, r3, #1
 800e88c:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800e88e:	3338      	adds	r3, #56	@ 0x38
 800e890:	443b      	add	r3, r7
 800e892:	2219      	movs	r2, #25
 800e894:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 800e898:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e89a:	1c5a      	adds	r2, r3, #1
 800e89c:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800e89e:	3338      	adds	r3, #56	@ 0x38
 800e8a0:	443b      	add	r3, r7
 800e8a2:	2203      	movs	r2, #3
 800e8a4:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800e8a8:	68ba      	ldr	r2, [r7, #8]
 800e8aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e8ac:	1c59      	adds	r1, r3, #1
 800e8ae:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e8b0:	b2d2      	uxtb	r2, r2
 800e8b2:	3338      	adds	r3, #56	@ 0x38
 800e8b4:	443b      	add	r3, r7
 800e8b6:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800e8ba:	68bb      	ldr	r3, [r7, #8]
 800e8bc:	0a1a      	lsrs	r2, r3, #8
 800e8be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e8c0:	1c59      	adds	r1, r3, #1
 800e8c2:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e8c4:	b2d2      	uxtb	r2, r2
 800e8c6:	3338      	adds	r3, #56	@ 0x38
 800e8c8:	443b      	add	r3, r7
 800e8ca:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800e8ce:	68bb      	ldr	r3, [r7, #8]
 800e8d0:	0c1a      	lsrs	r2, r3, #16
 800e8d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e8d4:	1c59      	adds	r1, r3, #1
 800e8d6:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e8d8:	b2d2      	uxtb	r2, r2
 800e8da:	3338      	adds	r3, #56	@ 0x38
 800e8dc:	443b      	add	r3, r7
 800e8de:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800e8e2:	68bb      	ldr	r3, [r7, #8]
 800e8e4:	0e1a      	lsrs	r2, r3, #24
 800e8e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e8e8:	1c59      	adds	r1, r3, #1
 800e8ea:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e8ec:	b2d2      	uxtb	r2, r2
 800e8ee:	3338      	adds	r3, #56	@ 0x38
 800e8f0:	443b      	add	r3, r7
 800e8f2:	f803 2c2c 	strb.w	r2, [r3, #-44]

        /*Set the new value  */
        dwTemp = dwValue;
 800e8f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8f8:	60bb      	str	r3, [r7, #8]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_TX_CONFIG;
 800e8fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e8fc:	1c5a      	adds	r2, r3, #1
 800e8fe:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800e900:	3338      	adds	r3, #56	@ 0x38
 800e902:	443b      	add	r3, r7
 800e904:	2219      	movs	r2, #25
 800e906:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 800e90a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e90c:	1c5a      	adds	r2, r3, #1
 800e90e:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800e910:	3338      	adds	r3, #56	@ 0x38
 800e912:	443b      	add	r3, r7
 800e914:	2202      	movs	r2, #2
 800e916:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800e91a:	68ba      	ldr	r2, [r7, #8]
 800e91c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e91e:	1c59      	adds	r1, r3, #1
 800e920:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e922:	b2d2      	uxtb	r2, r2
 800e924:	3338      	adds	r3, #56	@ 0x38
 800e926:	443b      	add	r3, r7
 800e928:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800e92c:	68bb      	ldr	r3, [r7, #8]
 800e92e:	0a1a      	lsrs	r2, r3, #8
 800e930:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e932:	1c59      	adds	r1, r3, #1
 800e934:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e936:	b2d2      	uxtb	r2, r2
 800e938:	3338      	adds	r3, #56	@ 0x38
 800e93a:	443b      	add	r3, r7
 800e93c:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800e940:	68bb      	ldr	r3, [r7, #8]
 800e942:	0c1a      	lsrs	r2, r3, #16
 800e944:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e946:	1c59      	adds	r1, r3, #1
 800e948:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e94a:	b2d2      	uxtb	r2, r2
 800e94c:	3338      	adds	r3, #56	@ 0x38
 800e94e:	443b      	add	r3, r7
 800e950:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800e954:	68bb      	ldr	r3, [r7, #8]
 800e956:	0e1a      	lsrs	r2, r3, #24
 800e958:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e95a:	1c59      	adds	r1, r3, #1
 800e95c:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e95e:	b2d2      	uxtb	r2, r2
 800e960:	3338      	adds	r3, #56	@ 0x38
 800e962:	443b      	add	r3, r7
 800e964:	f803 2c2c 	strb.w	r2, [r3, #-44]

        /*Send the array to the IC*/
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 800e968:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e96a:	f107 030c 	add.w	r3, r7, #12
 800e96e:	4619      	mov	r1, r3
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	f001 fc39 	bl	80101e8 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 800e976:	4603      	mov	r3, r0
 800e978:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e97a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	f000 80f6 	beq.w	800eb6e <phhalHw_Pn5180_SetConfig+0x185e>
 800e982:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e984:	e107      	b.n	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>

        break;

    case PHHAL_HW_CONFIG_MFHALTED:
        if((wValue != PH_ON) && (wValue != PH_OFF))
 800e986:	883b      	ldrh	r3, [r7, #0]
 800e988:	2b01      	cmp	r3, #1
 800e98a:	d005      	beq.n	800e998 <phhalHw_Pn5180_SetConfig+0x1688>
 800e98c:	883b      	ldrh	r3, [r7, #0]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d002      	beq.n	800e998 <phhalHw_Pn5180_SetConfig+0x1688>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800e992:	f240 2321 	movw	r3, #545	@ 0x221
 800e996:	e0fe      	b.n	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        if(wValue == PH_ON)
 800e998:	883b      	ldrh	r3, [r7, #0]
 800e99a:	2b01      	cmp	r3, #1
 800e99c:	d111      	bne.n	800e9c2 <phhalHw_Pn5180_SetConfig+0x16b2>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp,
 800e99e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e9a2:	2100      	movs	r1, #0
 800e9a4:	6878      	ldr	r0, [r7, #4]
 800e9a6:	f001 fb33 	bl	8010010 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e9ae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d001      	beq.n	800e9b8 <phhalHw_Pn5180_SetConfig+0x16a8>
 800e9b4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e9b6:	e0ee      	b.n	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
                phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, SYSTEM_CONFIG, SYSTEM_CONFIG_AUTOCOLL_STATE_A_MASK));
           pDataParams->bCardMode  = PH_ON;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	2201      	movs	r2, #1
 800e9bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            PH_CHECK_SUCCESS_FCT(statusTmp,
                phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, SYSTEM_CONFIG, (uint32_t)~SYSTEM_CONFIG_AUTOCOLL_STATE_A_MASK));
            pDataParams->bCardMode  = PH_OFF;

        }
        break;
 800e9c0:	e0e8      	b.n	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>
            PH_CHECK_SUCCESS_FCT(statusTmp,
 800e9c2:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800e9c6:	2100      	movs	r1, #0
 800e9c8:	6878      	ldr	r0, [r7, #4]
 800e9ca:	f001 fb97 	bl	80100fc <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e9d2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d001      	beq.n	800e9dc <phhalHw_Pn5180_SetConfig+0x16cc>
 800e9d8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e9da:	e0dc      	b.n	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
            pDataParams->bCardMode  = PH_OFF;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	2200      	movs	r2, #0
 800e9e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
        break;
 800e9e4:	e0d6      	b.n	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_POLL_GUARD_TIME_US:
        /* Disable Poll guard time. */
        if (wValue == 0x00U)
 800e9e6:	883b      	ldrh	r3, [r7, #0]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d101      	bne.n	800e9f0 <phhalHw_Pn5180_SetConfig+0x16e0>
        {
            return PH_ERR_SUCCESS;
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	e0d2      	b.n	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        pDataParams->bPollGuardTimeFlag = PH_ON;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	2201      	movs	r2, #1
 800e9f4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        phOsal_EventClear(&xEventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_GT_EXP, NULL);
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	2202      	movs	r2, #2
 800e9fc:	2100      	movs	r1, #0
 800e9fe:	4868      	ldr	r0, [pc, #416]	@ (800eba0 <phhalHw_Pn5180_SetConfig+0x1890>)
 800ea00:	f008 fb78 	bl	80170f4 <phOsal_EventClear>
        PH_CHECK_SUCCESS_FCT(statusTmp, phDriver_TimerStart(PH_DRIVER_TIMER_MICRO_SECS, wValue,
 800ea04:	883b      	ldrh	r3, [r7, #0]
 800ea06:	4a67      	ldr	r2, [pc, #412]	@ (800eba4 <phhalHw_Pn5180_SetConfig+0x1894>)
 800ea08:	4619      	mov	r1, r3
 800ea0a:	4867      	ldr	r0, [pc, #412]	@ (800eba8 <phhalHw_Pn5180_SetConfig+0x1898>)
 800ea0c:	f008 f95e 	bl	8016ccc <phDriver_TimerStart>
 800ea10:	4603      	mov	r3, r0
 800ea12:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ea14:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	f000 80ab 	beq.w	800eb72 <phhalHw_Pn5180_SetConfig+0x1862>
 800ea1c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ea1e:	e0ba      	b.n	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
                phhalHw_Pn5180_GuardTimeCallBck));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD:
        if ((wValue == PH_ON) && (pDataParams->bOpeMode != RD_LIB_MODE_FELICA))
 800ea20:	883b      	ldrh	r3, [r7, #0]
 800ea22:	2b01      	cmp	r3, #1
 800ea24:	d107      	bne.n	800ea36 <phhalHw_Pn5180_SetConfig+0x1726>
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ea2c:	2b04      	cmp	r3, #4
 800ea2e:	d002      	beq.n	800ea36 <phhalHw_Pn5180_SetConfig+0x1726>
        {
            /* Before Setting FELICA_EMD bit, OpeMode need to be configured to RD_LIB_MODE_FELICA */
            return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_HAL);
 800ea30:	f240 2325 	movw	r3, #549	@ 0x225
 800ea34:	e0af      	b.n	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* Configure FeliCa EMD enable bit in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 800ea36:	883b      	ldrh	r3, [r7, #0]
 800ea38:	2201      	movs	r2, #1
 800ea3a:	4619      	mov	r1, r3
 800ea3c:	6878      	ldr	r0, [r7, #4]
 800ea3e:	f002 fe3d 	bl	80116bc <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit>
 800ea42:	4603      	mov	r3, r0
 800ea44:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ea46:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	f000 8094 	beq.w	800eb76 <phhalHw_Pn5180_SetConfig+0x1866>
 800ea4e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ea50:	e0a1      	b.n	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
            phhalHw_Pn5180_SetConfig_FelicaEmdRegBit(pDataParams, wValue, (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_ENABLE_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_LEN_CHECK:
        /* Configure EMD length byte check enable bit in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 800ea52:	883b      	ldrh	r3, [r7, #0]
 800ea54:	2202      	movs	r2, #2
 800ea56:	4619      	mov	r1, r3
 800ea58:	6878      	ldr	r0, [r7, #4]
 800ea5a:	f002 fe2f 	bl	80116bc <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ea62:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	f000 8088 	beq.w	800eb7a <phhalHw_Pn5180_SetConfig+0x186a>
 800ea6a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ea6c:	e093      	b.n	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
            phhalHw_Pn5180_SetConfig_FelicaEmdRegBit(pDataParams, wValue, (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_LEN_CHECK_ENABLE_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_RC_CHECK:
        /* Configure RC byte check enable bit in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 800ea6e:	883b      	ldrh	r3, [r7, #0]
 800ea70:	2204      	movs	r2, #4
 800ea72:	4619      	mov	r1, r3
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f002 fe21 	bl	80116bc <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit>
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ea7e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d07c      	beq.n	800eb7e <phhalHw_Pn5180_SetConfig+0x186e>
 800ea84:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ea86:	e086      	b.n	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
            phhalHw_Pn5180_SetConfig_FelicaEmdRegBit(pDataParams, wValue, (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_RC_CHECK_ENABLE_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_PROTOCOL_ERR_CHECK:
        /* Configure Protocol error check enable bit in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 800ea88:	883b      	ldrh	r3, [r7, #0]
 800ea8a:	2208      	movs	r2, #8
 800ea8c:	4619      	mov	r1, r3
 800ea8e:	6878      	ldr	r0, [r7, #4]
 800ea90:	f002 fe14 	bl	80116bc <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit>
 800ea94:	4603      	mov	r3, r0
 800ea96:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ea98:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d071      	beq.n	800eb82 <phhalHw_Pn5180_SetConfig+0x1872>
 800ea9e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eaa0:	e079      	b.n	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
            phhalHw_Pn5180_SetConfig_FelicaEmdRegBit(pDataParams, wValue, (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_PROTOCOL_ERR_CHECK_ENABLE_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_INTEGRITY_ERR_CHECK:
        /* Configure Integrity error check enable bit in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 800eaa2:	883b      	ldrh	r3, [r7, #0]
 800eaa4:	2210      	movs	r2, #16
 800eaa6:	4619      	mov	r1, r3
 800eaa8:	6878      	ldr	r0, [r7, #4]
 800eaaa:	f002 fe07 	bl	80116bc <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit>
 800eaae:	4603      	mov	r3, r0
 800eab0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800eab2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d066      	beq.n	800eb86 <phhalHw_Pn5180_SetConfig+0x1876>
 800eab8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eaba:	e06c      	b.n	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
            phhalHw_Pn5180_SetConfig_FelicaEmdRegBit(pDataParams, wValue, (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_INTEGRITY_ERR_CHECK_ENABLE_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_LEN_BYTE_MIN:
        /* Configure min length byte value in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 800eabc:	8839      	ldrh	r1, [r7, #0]
 800eabe:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 800eac2:	2208      	movs	r2, #8
 800eac4:	6878      	ldr	r0, [r7, #4]
 800eac6:	f002 fe45 	bl	8011754 <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte>
 800eaca:	4603      	mov	r3, r0
 800eacc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800eace:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d05a      	beq.n	800eb8a <phhalHw_Pn5180_SetConfig+0x187a>
 800ead4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ead6:	e05e      	b.n	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
                (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_LENGTH_BYTE_MIN_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_LEN_BYTE_MAX:
        /* Configure max length byte value in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 800ead8:	8839      	ldrh	r1, [r7, #0]
 800eada:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
 800eade:	2210      	movs	r2, #16
 800eae0:	6878      	ldr	r0, [r7, #4]
 800eae2:	f002 fe37 	bl	8011754 <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte>
 800eae6:	4603      	mov	r3, r0
 800eae8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800eaea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d04e      	beq.n	800eb8e <phhalHw_Pn5180_SetConfig+0x187e>
 800eaf0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eaf2:	e050      	b.n	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
                (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_LENGTH_BYTE_MAX_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_RC_BYTE_VAL:
        /* Configure RC byte value in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 800eaf4:	8839      	ldrh	r1, [r7, #0]
 800eaf6:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 800eafa:	2218      	movs	r2, #24
 800eafc:	6878      	ldr	r0, [r7, #4]
 800eafe:	f002 fe29 	bl	8011754 <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte>
 800eb02:	4603      	mov	r3, r0
 800eb04:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800eb06:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d042      	beq.n	800eb92 <phhalHw_Pn5180_SetConfig+0x1882>
 800eb0c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eb0e:	e042      	b.n	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
                (uint8_t)FELICA_EMD_CONTROL_FELICA_EMD_RC_BYTE_VALUE_POS,
                (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_RC_BYTE_VALUE_MASK));
        break;

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 800eb10:	f240 2323 	movw	r3, #547	@ 0x223
 800eb14:	e03f      	b.n	800eb96 <phhalHw_Pn5180_SetConfig+0x1886>
        break;
 800eb16:	bf00      	nop
 800eb18:	e03c      	b.n	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb1a:	bf00      	nop
 800eb1c:	e03a      	b.n	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb1e:	bf00      	nop
 800eb20:	e038      	b.n	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb22:	bf00      	nop
 800eb24:	e036      	b.n	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb26:	bf00      	nop
 800eb28:	e034      	b.n	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb2a:	bf00      	nop
 800eb2c:	e032      	b.n	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb2e:	bf00      	nop
 800eb30:	e030      	b.n	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb32:	bf00      	nop
 800eb34:	e02e      	b.n	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb36:	bf00      	nop
 800eb38:	e02c      	b.n	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb3a:	bf00      	nop
 800eb3c:	e02a      	b.n	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb3e:	bf00      	nop
 800eb40:	e028      	b.n	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb42:	bf00      	nop
 800eb44:	e026      	b.n	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb46:	bf00      	nop
 800eb48:	e024      	b.n	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb4a:	bf00      	nop
 800eb4c:	e022      	b.n	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb4e:	bf00      	nop
 800eb50:	e020      	b.n	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb52:	bf00      	nop
 800eb54:	e01e      	b.n	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb56:	bf00      	nop
 800eb58:	e01c      	b.n	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb5a:	bf00      	nop
 800eb5c:	e01a      	b.n	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb5e:	bf00      	nop
 800eb60:	e018      	b.n	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb62:	bf00      	nop
 800eb64:	e016      	b.n	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb66:	bf00      	nop
 800eb68:	e014      	b.n	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb6a:	bf00      	nop
 800eb6c:	e012      	b.n	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb6e:	bf00      	nop
 800eb70:	e010      	b.n	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb72:	bf00      	nop
 800eb74:	e00e      	b.n	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb76:	bf00      	nop
 800eb78:	e00c      	b.n	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb7a:	bf00      	nop
 800eb7c:	e00a      	b.n	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb7e:	bf00      	nop
 800eb80:	e008      	b.n	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb82:	bf00      	nop
 800eb84:	e006      	b.n	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb86:	bf00      	nop
 800eb88:	e004      	b.n	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb8a:	bf00      	nop
 800eb8c:	e002      	b.n	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb8e:	bf00      	nop
 800eb90:	e000      	b.n	800eb94 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb92:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 800eb94:	2300      	movs	r3, #0
}
 800eb96:	4618      	mov	r0, r3
 800eb98:	3738      	adds	r7, #56	@ 0x38
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	bdb0      	pop	{r4, r5, r7, pc}
 800eb9e:	bf00      	nop
 800eba0:	2000178c 	.word	0x2000178c
 800eba4:	0800c439 	.word	0x0800c439
 800eba8:	000f4240 	.word	0x000f4240

0800ebac <phhalHw_Pn5180_GetConfig>:
phStatus_t phhalHw_Pn5180_GetConfig(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wConfig,
    uint16_t * pValue
    )
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b08a      	sub	sp, #40	@ 0x28
 800ebb0:	af02      	add	r7, sp, #8
 800ebb2:	60f8      	str	r0, [r7, #12]
 800ebb4:	460b      	mov	r3, r1
 800ebb6:	607a      	str	r2, [r7, #4]
 800ebb8:	817b      	strh	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t *   PH_MEMLOC_REM pBuffer = NULL;
 800ebba:	2300      	movs	r3, #0
 800ebbc:	61bb      	str	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wBufferLen = 0;
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	82fb      	strh	r3, [r7, #22]
    uint16_t    PH_MEMLOC_REM wBufferSize;
    uint32_t    PH_MEMLOC_REM dwRegister;

    /* Check all the pointers */
    PH_ASSERT_NULL(pValue);
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d101      	bne.n	800ebcc <phhalHw_Pn5180_GetConfig+0x20>
 800ebc8:	2321      	movs	r3, #33	@ 0x21
 800ebca:	e281      	b.n	800f0d0 <phhalHw_Pn5180_GetConfig+0x524>

    switch(wConfig)
 800ebcc:	897b      	ldrh	r3, [r7, #10]
 800ebce:	f248 0250 	movw	r2, #32848	@ 0x8050
 800ebd2:	4293      	cmp	r3, r2
 800ebd4:	f000 817f 	beq.w	800eed6 <phhalHw_Pn5180_GetConfig+0x32a>
 800ebd8:	f248 0250 	movw	r2, #32848	@ 0x8050
 800ebdc:	4293      	cmp	r3, r2
 800ebde:	f300 8273 	bgt.w	800f0c8 <phhalHw_Pn5180_GetConfig+0x51c>
 800ebe2:	f248 0212 	movw	r2, #32786	@ 0x8012
 800ebe6:	4293      	cmp	r3, r2
 800ebe8:	f000 814c 	beq.w	800ee84 <phhalHw_Pn5180_GetConfig+0x2d8>
 800ebec:	f248 0212 	movw	r2, #32786	@ 0x8012
 800ebf0:	4293      	cmp	r3, r2
 800ebf2:	f300 8269 	bgt.w	800f0c8 <phhalHw_Pn5180_GetConfig+0x51c>
 800ebf6:	f248 0211 	movw	r2, #32785	@ 0x8011
 800ebfa:	4293      	cmp	r3, r2
 800ebfc:	f000 8131 	beq.w	800ee62 <phhalHw_Pn5180_GetConfig+0x2b6>
 800ec00:	f248 0211 	movw	r2, #32785	@ 0x8011
 800ec04:	4293      	cmp	r3, r2
 800ec06:	f300 825f 	bgt.w	800f0c8 <phhalHw_Pn5180_GetConfig+0x51c>
 800ec0a:	2b5f      	cmp	r3, #95	@ 0x5f
 800ec0c:	f300 80ca 	bgt.w	800eda4 <phhalHw_Pn5180_GetConfig+0x1f8>
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	f2c0 8259 	blt.w	800f0c8 <phhalHw_Pn5180_GetConfig+0x51c>
 800ec16:	2b5f      	cmp	r3, #95	@ 0x5f
 800ec18:	f200 8256 	bhi.w	800f0c8 <phhalHw_Pn5180_GetConfig+0x51c>
 800ec1c:	a201      	add	r2, pc, #4	@ (adr r2, 800ec24 <phhalHw_Pn5180_GetConfig+0x78>)
 800ec1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec22:	bf00      	nop
 800ec24:	0800edcb 	.word	0x0800edcb
 800ec28:	0800edcb 	.word	0x0800edcb
 800ec2c:	0800edcb 	.word	0x0800edcb
 800ec30:	0800edcb 	.word	0x0800edcb
 800ec34:	0800eddb 	.word	0x0800eddb
 800ec38:	0800f0c9 	.word	0x0800f0c9
 800ec3c:	0800edcb 	.word	0x0800edcb
 800ec40:	0800edcb 	.word	0x0800edcb
 800ec44:	0800edcb 	.word	0x0800edcb
 800ec48:	0800edcb 	.word	0x0800edcb
 800ec4c:	0800edcb 	.word	0x0800edcb
 800ec50:	0800edcb 	.word	0x0800edcb
 800ec54:	0800edcb 	.word	0x0800edcb
 800ec58:	0800ede5 	.word	0x0800ede5
 800ec5c:	0800ee29 	.word	0x0800ee29
 800ec60:	0800edcb 	.word	0x0800edcb
 800ec64:	0800f0c9 	.word	0x0800f0c9
 800ec68:	0800f0c9 	.word	0x0800f0c9
 800ec6c:	0800f0c9 	.word	0x0800f0c9
 800ec70:	0800eeb5 	.word	0x0800eeb5
 800ec74:	0800eebf 	.word	0x0800eebf
 800ec78:	0800f0c9 	.word	0x0800f0c9
 800ec7c:	0800f0c9 	.word	0x0800f0c9
 800ec80:	0800f0c9 	.word	0x0800f0c9
 800ec84:	0800f0c9 	.word	0x0800f0c9
 800ec88:	0800f0c9 	.word	0x0800f0c9
 800ec8c:	0800f0c9 	.word	0x0800f0c9
 800ec90:	0800f0c9 	.word	0x0800f0c9
 800ec94:	0800f0c9 	.word	0x0800f0c9
 800ec98:	0800f0c9 	.word	0x0800f0c9
 800ec9c:	0800f0c9 	.word	0x0800f0c9
 800eca0:	0800f0c9 	.word	0x0800f0c9
 800eca4:	0800eec9 	.word	0x0800eec9
 800eca8:	0800f07d 	.word	0x0800f07d
 800ecac:	0800f0c9 	.word	0x0800f0c9
 800ecb0:	0800f0c9 	.word	0x0800f0c9
 800ecb4:	0800f0c9 	.word	0x0800f0c9
 800ecb8:	0800f0c9 	.word	0x0800f0c9
 800ecbc:	0800f0c9 	.word	0x0800f0c9
 800ecc0:	0800f0c9 	.word	0x0800f0c9
 800ecc4:	0800f0c9 	.word	0x0800f0c9
 800ecc8:	0800f0c9 	.word	0x0800f0c9
 800eccc:	0800f0c9 	.word	0x0800f0c9
 800ecd0:	0800f0c9 	.word	0x0800f0c9
 800ecd4:	0800f0c9 	.word	0x0800f0c9
 800ecd8:	0800f0c9 	.word	0x0800f0c9
 800ecdc:	0800eee5 	.word	0x0800eee5
 800ece0:	0800eddb 	.word	0x0800eddb
 800ece4:	0800eeff 	.word	0x0800eeff
 800ece8:	0800ef09 	.word	0x0800ef09
 800ecec:	0800ef37 	.word	0x0800ef37
 800ecf0:	0800ef65 	.word	0x0800ef65
 800ecf4:	0800ef93 	.word	0x0800ef93
 800ecf8:	0800f0c9 	.word	0x0800f0c9
 800ecfc:	0800f0c9 	.word	0x0800f0c9
 800ed00:	0800f0c9 	.word	0x0800f0c9
 800ed04:	0800f0c9 	.word	0x0800f0c9
 800ed08:	0800f0c9 	.word	0x0800f0c9
 800ed0c:	0800f0c9 	.word	0x0800f0c9
 800ed10:	0800f0c9 	.word	0x0800f0c9
 800ed14:	0800f0c9 	.word	0x0800f0c9
 800ed18:	0800f0c9 	.word	0x0800f0c9
 800ed1c:	0800f0c9 	.word	0x0800f0c9
 800ed20:	0800f0c9 	.word	0x0800f0c9
 800ed24:	0800f0c9 	.word	0x0800f0c9
 800ed28:	0800f0c9 	.word	0x0800f0c9
 800ed2c:	0800f0c9 	.word	0x0800f0c9
 800ed30:	0800f0c9 	.word	0x0800f0c9
 800ed34:	0800f0c9 	.word	0x0800f0c9
 800ed38:	0800f0c9 	.word	0x0800f0c9
 800ed3c:	0800f0c9 	.word	0x0800f0c9
 800ed40:	0800f0c9 	.word	0x0800f0c9
 800ed44:	0800f0c9 	.word	0x0800f0c9
 800ed48:	0800f0c9 	.word	0x0800f0c9
 800ed4c:	0800f0c9 	.word	0x0800f0c9
 800ed50:	0800f0c9 	.word	0x0800f0c9
 800ed54:	0800f0c9 	.word	0x0800f0c9
 800ed58:	0800f0c9 	.word	0x0800f0c9
 800ed5c:	0800f0c9 	.word	0x0800f0c9
 800ed60:	0800f0c9 	.word	0x0800f0c9
 800ed64:	0800f0c9 	.word	0x0800f0c9
 800ed68:	0800f0c9 	.word	0x0800f0c9
 800ed6c:	0800f011 	.word	0x0800f011
 800ed70:	0800efdd 	.word	0x0800efdd
 800ed74:	0800f003 	.word	0x0800f003
 800ed78:	0800f047 	.word	0x0800f047
 800ed7c:	0800f0c9 	.word	0x0800f0c9
 800ed80:	0800f0c9 	.word	0x0800f0c9
 800ed84:	0800f0c9 	.word	0x0800f0c9
 800ed88:	0800eff9 	.word	0x0800eff9
 800ed8c:	0800edaf 	.word	0x0800edaf
 800ed90:	0800f0c9 	.word	0x0800f0c9
 800ed94:	0800efeb 	.word	0x0800efeb
 800ed98:	0800f0c9 	.word	0x0800f0c9
 800ed9c:	0800edbd 	.word	0x0800edbd
 800eda0:	0800f08b 	.word	0x0800f08b
 800eda4:	f248 0210 	movw	r2, #32784	@ 0x8010
 800eda8:	4293      	cmp	r3, r2
 800edaa:	d055      	beq.n	800ee58 <phhalHw_Pn5180_GetConfig+0x2ac>
 800edac:	e18c      	b.n	800f0c8 <phhalHw_Pn5180_GetConfig+0x51c>
    {

    case PHHAL_HW_CONFIG_OPE_MODE:
        *pValue = pDataParams->bOpeMode;
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800edb4:	461a      	mov	r2, r3
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	801a      	strh	r2, [r3, #0]
        break;
 800edba:	e188      	b.n	800f0ce <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_SET_EMD:
        *pValue = pDataParams->bEmdFlag;
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800edc2:	461a      	mov	r2, r3
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	801a      	strh	r2, [r3, #0]
        break;
 800edc8:	e181      	b.n	800f0ce <phhalHw_Pn5180_GetConfig+0x522>
    case PHHAL_HW_CONFIG_SUBCARRIER:
    case PHHAL_HW_CONFIG_TXWAIT_US:
    case PHHAL_HW_CONFIG_RXWAIT_US:

        /* Read config from shadow */
        *pValue = pDataParams->wCfgShadow[wConfig];
 800edca:	897a      	ldrh	r2, [r7, #10]
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	322c      	adds	r2, #44	@ 0x2c
 800edd0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	801a      	strh	r2, [r3, #0]
        break;
 800edd8:	e179      	b.n	800f0ce <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TXBUFFER_OFFSET:
    case PHHAL_HW_CONFIG_RXLASTBITS:

        *pValue = pDataParams->wAdditionalInfo;
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	801a      	strh	r2, [r3, #0]
        break;
 800ede2:	e174      	b.n	800f0ce <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TIMEOUT_VALUE_US:

        if (pDataParams->bTimeoutUnit == PHHAL_HW_TIME_MICROSECONDS)
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800edea:	2b00      	cmp	r3, #0
 800edec:	d107      	bne.n	800edfe <phhalHw_Pn5180_GetConfig+0x252>
        {
            *pValue = pDataParams->wCfgShadow[wConfig];
 800edee:	897a      	ldrh	r2, [r7, #10]
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	322c      	adds	r2, #44	@ 0x2c
 800edf4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	801a      	strh	r2, [r3, #0]
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
            }
            *pValue = pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS] * 1000U;
        }
        break;
 800edfc:	e167      	b.n	800f0ce <phhalHw_Pn5180_GetConfig+0x522>
            if (pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS] > (0xFFFFU / 1000U))
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800ee04:	2b41      	cmp	r3, #65	@ 0x41
 800ee06:	d902      	bls.n	800ee0e <phhalHw_Pn5180_GetConfig+0x262>
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
 800ee08:	f240 2322 	movw	r3, #546	@ 0x222
 800ee0c:	e160      	b.n	800f0d0 <phhalHw_Pn5180_GetConfig+0x524>
            *pValue = pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS] * 1000U;
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800ee14:	461a      	mov	r2, r3
 800ee16:	0152      	lsls	r2, r2, #5
 800ee18:	1ad2      	subs	r2, r2, r3
 800ee1a:	0092      	lsls	r2, r2, #2
 800ee1c:	4413      	add	r3, r2
 800ee1e:	00db      	lsls	r3, r3, #3
 800ee20:	b29a      	uxth	r2, r3
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	801a      	strh	r2, [r3, #0]
        break;
 800ee26:	e152      	b.n	800f0ce <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS:

        if (pDataParams->bTimeoutUnit == PHHAL_HW_TIME_MILLISECONDS)
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ee2e:	2b01      	cmp	r3, #1
 800ee30:	d107      	bne.n	800ee42 <phhalHw_Pn5180_GetConfig+0x296>
        {
            *pValue = pDataParams->wCfgShadow[wConfig];
 800ee32:	897a      	ldrh	r2, [r7, #10]
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	322c      	adds	r2, #44	@ 0x2c
 800ee38:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TIMEOUT_VALUE_US] / 1000U;
        }
        break;
 800ee40:	e145      	b.n	800f0ce <phhalHw_Pn5180_GetConfig+0x522>
            *pValue = pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TIMEOUT_VALUE_US] / 1000U;
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800ee48:	4a9b      	ldr	r2, [pc, #620]	@ (800f0b8 <phhalHw_Pn5180_GetConfig+0x50c>)
 800ee4a:	fba2 2303 	umull	r2, r3, r2, r3
 800ee4e:	099b      	lsrs	r3, r3, #6
 800ee50:	b29a      	uxth	r2, r3
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	801a      	strh	r2, [r3, #0]
        break;
 800ee56:	e13a      	b.n	800f0ce <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TIMING_MODE:

        *pValue = pDataParams->wTimingMode;
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	801a      	strh	r2, [r3, #0]
        break;
 800ee60:	e135      	b.n	800f0ce <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TIMING_US:

        if (pDataParams->dwTimingUs > 0xFFFFU)
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	6a1b      	ldr	r3, [r3, #32]
 800ee66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ee6a:	d302      	bcc.n	800ee72 <phhalHw_Pn5180_GetConfig+0x2c6>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
 800ee6c:	f240 2322 	movw	r3, #546	@ 0x222
 800ee70:	e12e      	b.n	800f0d0 <phhalHw_Pn5180_GetConfig+0x524>
        }

        *pValue = (uint16_t)pDataParams->dwTimingUs;
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	6a1b      	ldr	r3, [r3, #32]
 800ee76:	b29a      	uxth	r2, r3
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	801a      	strh	r2, [r3, #0]
        pDataParams->dwTimingUs = 0U;
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	2200      	movs	r2, #0
 800ee80:	621a      	str	r2, [r3, #32]
        break;
 800ee82:	e124      	b.n	800f0ce <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TIMING_MS:

        if (pDataParams->dwTimingUs > (0xFFFFU * 1000U))
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	6a1b      	ldr	r3, [r3, #32]
 800ee88:	4a8c      	ldr	r2, [pc, #560]	@ (800f0bc <phhalHw_Pn5180_GetConfig+0x510>)
 800ee8a:	4293      	cmp	r3, r2
 800ee8c:	d905      	bls.n	800ee9a <phhalHw_Pn5180_GetConfig+0x2ee>
        {
            pDataParams->dwTimingUs = 0U;
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	2200      	movs	r2, #0
 800ee92:	621a      	str	r2, [r3, #32]
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
 800ee94:	f240 2322 	movw	r3, #546	@ 0x222
 800ee98:	e11a      	b.n	800f0d0 <phhalHw_Pn5180_GetConfig+0x524>
        }

        *pValue = (uint16_t)(pDataParams->dwTimingUs / 1000U);
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	6a1b      	ldr	r3, [r3, #32]
 800ee9e:	4a86      	ldr	r2, [pc, #536]	@ (800f0b8 <phhalHw_Pn5180_GetConfig+0x50c>)
 800eea0:	fba2 2303 	umull	r2, r3, r2, r3
 800eea4:	099b      	lsrs	r3, r3, #6
 800eea6:	b29a      	uxth	r2, r3
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	801a      	strh	r2, [r3, #0]
        pDataParams->dwTimingUs = 0U;
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	2200      	movs	r2, #0
 800eeb0:	621a      	str	r2, [r3, #32]
        break;
 800eeb2:	e10c      	b.n	800f0ce <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_FIELD_OFF_TIME:

        *pValue = pDataParams->wFieldOffTime;
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	801a      	strh	r2, [r3, #0]
        break;
 800eebc:	e107      	b.n	800f0ce <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_FIELD_RECOVERY_TIME:

        *pValue = pDataParams->wFieldRecoveryTime;
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	8dda      	ldrh	r2, [r3, #46]	@ 0x2e
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	801a      	strh	r2, [r3, #0]
        break;
 800eec6:	e102      	b.n	800f0ce <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_JEWEL_MODE:

        /* Write configuration data into shadow */
        *pValue = pDataParams->bJewelActivated;
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800eece:	461a      	mov	r2, r3
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	801a      	strh	r2, [r3, #0]
        break;
 800eed4:	e0fb      	b.n	800f0ce <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_RFRESET_ON_TIMEOUT:

        *pValue = pDataParams->bRfResetAfterTo;
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800eedc:	461a      	mov	r2, r3
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	801a      	strh	r2, [r3, #0]
        break;
 800eee2:	e0f4      	b.n	800f0ce <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_DISABLE_MF_CRYPTO1:

        /* Check Crypto1On Status */
        if ( pDataParams->bMfcCryptoEnabled == PH_ON)
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800eeea:	2b01      	cmp	r3, #1
 800eeec:	d103      	bne.n	800eef6 <phhalHw_Pn5180_GetConfig+0x34a>
        {
            *pValue = PH_OFF; /* OFF in this case means "Crypto1 not disabled --> enabled" */
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	2200      	movs	r2, #0
 800eef2:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = PH_ON; /* ON in this case means "Crypto1 is disabled" */
        }
        break;
 800eef4:	e0eb      	b.n	800f0ce <phhalHw_Pn5180_GetConfig+0x522>
            *pValue = PH_ON; /* ON in this case means "Crypto1 is disabled" */
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	2201      	movs	r2, #1
 800eefa:	801a      	strh	r2, [r3, #0]
        break;
 800eefc:	e0e7      	b.n	800f0ce <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_RXBUFFER_STARTPOS:

        /* Return parameter */
        *pValue = pDataParams->wRxBufStartPos;
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	8bda      	ldrh	r2, [r3, #30]
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	801a      	strh	r2, [r3, #0]
        break;
 800ef06:	e0e2      	b.n	800f0ce <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_RXBUFFER_BUFSIZE:

        /* Retrieve RxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetRxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 800ef08:	f107 0116 	add.w	r1, r7, #22
 800ef0c:	f107 0218 	add.w	r2, r7, #24
 800ef10:	f107 0314 	add.w	r3, r7, #20
 800ef14:	9300      	str	r3, [sp, #0]
 800ef16:	460b      	mov	r3, r1
 800ef18:	2101      	movs	r1, #1
 800ef1a:	68f8      	ldr	r0, [r7, #12]
 800ef1c:	f002 f80f 	bl	8010f3e <phhalHw_Pn5180_GetRxBuffer>
 800ef20:	4603      	mov	r3, r0
 800ef22:	83fb      	strh	r3, [r7, #30]
 800ef24:	8bfb      	ldrh	r3, [r7, #30]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d001      	beq.n	800ef2e <phhalHw_Pn5180_GetConfig+0x382>
 800ef2a:	8bfb      	ldrh	r3, [r7, #30]
 800ef2c:	e0d0      	b.n	800f0d0 <phhalHw_Pn5180_GetConfig+0x524>

        /* Return parameter */
        *pValue = wBufferSize;
 800ef2e:	8aba      	ldrh	r2, [r7, #20]
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	801a      	strh	r2, [r3, #0]
        break;
 800ef34:	e0cb      	b.n	800f0ce <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TXBUFFER_BUFSIZE:

        /* Retrieve TxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetTxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 800ef36:	f107 0116 	add.w	r1, r7, #22
 800ef3a:	f107 0218 	add.w	r2, r7, #24
 800ef3e:	f107 0314 	add.w	r3, r7, #20
 800ef42:	9300      	str	r3, [sp, #0]
 800ef44:	460b      	mov	r3, r1
 800ef46:	2101      	movs	r1, #1
 800ef48:	68f8      	ldr	r0, [r7, #12]
 800ef4a:	f001 ffbc 	bl	8010ec6 <phhalHw_Pn5180_GetTxBuffer>
 800ef4e:	4603      	mov	r3, r0
 800ef50:	83fb      	strh	r3, [r7, #30]
 800ef52:	8bfb      	ldrh	r3, [r7, #30]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d001      	beq.n	800ef5c <phhalHw_Pn5180_GetConfig+0x3b0>
 800ef58:	8bfb      	ldrh	r3, [r7, #30]
 800ef5a:	e0b9      	b.n	800f0d0 <phhalHw_Pn5180_GetConfig+0x524>

        /* Return parameter */
        *pValue = wBufferSize;
 800ef5c:	8aba      	ldrh	r2, [r7, #20]
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	801a      	strh	r2, [r3, #0]
        break;
 800ef62:	e0b4      	b.n	800f0ce <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TXBUFFER_LENGTH:

        /* Retrieve TxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetTxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 800ef64:	f107 0116 	add.w	r1, r7, #22
 800ef68:	f107 0218 	add.w	r2, r7, #24
 800ef6c:	f107 0314 	add.w	r3, r7, #20
 800ef70:	9300      	str	r3, [sp, #0]
 800ef72:	460b      	mov	r3, r1
 800ef74:	2101      	movs	r1, #1
 800ef76:	68f8      	ldr	r0, [r7, #12]
 800ef78:	f001 ffa5 	bl	8010ec6 <phhalHw_Pn5180_GetTxBuffer>
 800ef7c:	4603      	mov	r3, r0
 800ef7e:	83fb      	strh	r3, [r7, #30]
 800ef80:	8bfb      	ldrh	r3, [r7, #30]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d001      	beq.n	800ef8a <phhalHw_Pn5180_GetConfig+0x3de>
 800ef86:	8bfb      	ldrh	r3, [r7, #30]
 800ef88:	e0a2      	b.n	800f0d0 <phhalHw_Pn5180_GetConfig+0x524>

        /* Return parameter */
        *pValue = wBufferLen;
 800ef8a:	8afa      	ldrh	r2, [r7, #22]
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	801a      	strh	r2, [r3, #0]
        break;
 800ef90:	e09d      	b.n	800f0ce <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TXBUFFER:

        /* Retrieve TxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetTxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 800ef92:	f107 0116 	add.w	r1, r7, #22
 800ef96:	f107 0218 	add.w	r2, r7, #24
 800ef9a:	f107 0314 	add.w	r3, r7, #20
 800ef9e:	9300      	str	r3, [sp, #0]
 800efa0:	460b      	mov	r3, r1
 800efa2:	2101      	movs	r1, #1
 800efa4:	68f8      	ldr	r0, [r7, #12]
 800efa6:	f001 ff8e 	bl	8010ec6 <phhalHw_Pn5180_GetTxBuffer>
 800efaa:	4603      	mov	r3, r0
 800efac:	83fb      	strh	r3, [r7, #30]
 800efae:	8bfb      	ldrh	r3, [r7, #30]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d001      	beq.n	800efb8 <phhalHw_Pn5180_GetConfig+0x40c>
 800efb4:	8bfb      	ldrh	r3, [r7, #30]
 800efb6:	e08b      	b.n	800f0d0 <phhalHw_Pn5180_GetConfig+0x524>

        /* Check additional info parameter */
        if (pDataParams->wAdditionalInfo >= pDataParams->wTxBufSize)
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	8a1b      	ldrh	r3, [r3, #16]
 800efc0:	429a      	cmp	r2, r3
 800efc2:	d302      	bcc.n	800efca <phhalHw_Pn5180_GetConfig+0x41e>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 800efc4:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800efc8:	e082      	b.n	800f0d0 <phhalHw_Pn5180_GetConfig+0x524>
        }

        /* Retrieve TxBuffer byte */
        *pValue = (uint16_t)pBuffer[pDataParams->wAdditionalInfo];
 800efca:	69bb      	ldr	r3, [r7, #24]
 800efcc:	68fa      	ldr	r2, [r7, #12]
 800efce:	8e12      	ldrh	r2, [r2, #48]	@ 0x30
 800efd0:	4413      	add	r3, r2
 800efd2:	781b      	ldrb	r3, [r3, #0]
 800efd4:	461a      	mov	r2, r3
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	801a      	strh	r2, [r3, #0]
        break;
 800efda:	e078      	b.n	800f0ce <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_RXMULTIPLE:
        *pValue =  pDataParams->bRxMultiple;
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800efe2:	461a      	mov	r2, r3
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	801a      	strh	r2, [r3, #0]
        break;
 800efe8:	e071      	b.n	800f0ce <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_NFCIP_STARTBYTE:
        *pValue = pDataParams->bNfcipMode;
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800eff0:	461a      	mov	r2, r3
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	801a      	strh	r2, [r3, #0]
        break;
 800eff6:	e06a      	b.n	800f0ce <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TARGET_DATARATE_FRAMING:
        *pValue = pDataParams->wTargetMode;
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	801a      	strh	r2, [r3, #0]
        break;
 800f000:	e065      	b.n	800f0ce <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_ACTIVEMODE:
        /* Return parameter */
        *pValue = (uint16_t)pDataParams->bActiveMode;
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f008:	461a      	mov	r2, r3
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	801a      	strh	r2, [r3, #0]
        break;
 800f00e:	e05e      	b.n	800f0ce <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_EXT_RF_ON:
        /* Retrieve Status register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 800f010:	f107 0310 	add.w	r3, r7, #16
 800f014:	461a      	mov	r2, r3
 800f016:	211d      	movs	r1, #29
 800f018:	68f8      	ldr	r0, [r7, #12]
 800f01a:	f001 f997 	bl	801034c <phhalHw_Pn5180_Instr_ReadRegister>
 800f01e:	4603      	mov	r3, r0
 800f020:	83fb      	strh	r3, [r7, #30]
 800f022:	8bfb      	ldrh	r3, [r7, #30]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d001      	beq.n	800f02c <phhalHw_Pn5180_GetConfig+0x480>
 800f028:	8bfb      	ldrh	r3, [r7, #30]
 800f02a:	e051      	b.n	800f0d0 <phhalHw_Pn5180_GetConfig+0x524>
            phhalHw_Pn5180_Instr_ReadRegister(pDataParams, RF_STATUS, &dwRegister));

        /* Check EXT_RF_ON bit */
        if (0U != (dwRegister & RF_STATUS_RF_DET_STATUS_MASK))
 800f02c:	693b      	ldr	r3, [r7, #16]
 800f02e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f032:	2b00      	cmp	r3, #0
 800f034:	d003      	beq.n	800f03e <phhalHw_Pn5180_GetConfig+0x492>
        {
            *pValue = PH_ON; /* ON if external RF field is detected */
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	2201      	movs	r2, #1
 800f03a:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = PH_OFF; /* OFF if no external RF field is detected */
        }
        break;
 800f03c:	e047      	b.n	800f0ce <phhalHw_Pn5180_GetConfig+0x522>
            *pValue = PH_OFF; /* OFF if no external RF field is detected */
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	2200      	movs	r2, #0
 800f042:	801a      	strh	r2, [r3, #0]
        break;
 800f044:	e043      	b.n	800f0ce <phhalHw_Pn5180_GetConfig+0x522>
    case PHHAL_HW_CONFIG_MFHALTED:
    {
        PH_CHECK_SUCCESS_FCT(statusTmp,
 800f046:	f107 0310 	add.w	r3, r7, #16
 800f04a:	461a      	mov	r2, r3
 800f04c:	2100      	movs	r1, #0
 800f04e:	68f8      	ldr	r0, [r7, #12]
 800f050:	f001 f97c 	bl	801034c <phhalHw_Pn5180_Instr_ReadRegister>
 800f054:	4603      	mov	r3, r0
 800f056:	83fb      	strh	r3, [r7, #30]
 800f058:	8bfb      	ldrh	r3, [r7, #30]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d001      	beq.n	800f062 <phhalHw_Pn5180_GetConfig+0x4b6>
 800f05e:	8bfb      	ldrh	r3, [r7, #30]
 800f060:	e036      	b.n	800f0d0 <phhalHw_Pn5180_GetConfig+0x524>
            phhalHw_Pn5180_Instr_ReadRegister(pDataParams, SYSTEM_CONFIG, &dwRegister));
        if(0U != (dwRegister & SYSTEM_CONFIG_AUTOCOLL_STATE_A_MASK))
 800f062:	693b      	ldr	r3, [r7, #16]
 800f064:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d003      	beq.n	800f074 <phhalHw_Pn5180_GetConfig+0x4c8>
        {
            *pValue = PH_ON;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	2201      	movs	r2, #1
 800f070:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = PH_OFF;
        }
        break;
 800f072:	e02c      	b.n	800f0ce <phhalHw_Pn5180_GetConfig+0x522>
            *pValue = PH_OFF;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	2200      	movs	r2, #0
 800f078:	801a      	strh	r2, [r3, #0]
        break;
 800f07a:	e028      	b.n	800f0ce <phhalHw_Pn5180_GetConfig+0x522>
    }

    case PHHAL_HW_CONFIG_CARD_TYPE:
        *pValue = pDataParams->bCardType;
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f082:	461a      	mov	r2, r3
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	801a      	strh	r2, [r3, #0]
        break;
 800f088:	e021      	b.n	800f0ce <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_INT_RF_ON:
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegister(pDataParams, RF_STATUS, &dwRegister));
 800f08a:	f107 0310 	add.w	r3, r7, #16
 800f08e:	461a      	mov	r2, r3
 800f090:	211d      	movs	r1, #29
 800f092:	68f8      	ldr	r0, [r7, #12]
 800f094:	f001 f95a 	bl	801034c <phhalHw_Pn5180_Instr_ReadRegister>
 800f098:	4603      	mov	r3, r0
 800f09a:	83fb      	strh	r3, [r7, #30]
 800f09c:	8bfb      	ldrh	r3, [r7, #30]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d001      	beq.n	800f0a6 <phhalHw_Pn5180_GetConfig+0x4fa>
 800f0a2:	8bfb      	ldrh	r3, [r7, #30]
 800f0a4:	e014      	b.n	800f0d0 <phhalHw_Pn5180_GetConfig+0x524>
        if((dwRegister & RF_STATUS_TX_RF_STATUS_MASK ) == RF_STATUS_TX_RF_STATUS_MASK)
 800f0a6:	693b      	ldr	r3, [r7, #16]
 800f0a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d007      	beq.n	800f0c0 <phhalHw_Pn5180_GetConfig+0x514>
        {
            *pValue = PH_ON;
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	2201      	movs	r2, #1
 800f0b4:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = PH_OFF;
        }
        break;
 800f0b6:	e00a      	b.n	800f0ce <phhalHw_Pn5180_GetConfig+0x522>
 800f0b8:	10624dd3 	.word	0x10624dd3
 800f0bc:	03e7fc18 	.word	0x03e7fc18
            *pValue = PH_OFF;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	801a      	strh	r2, [r3, #0]
        break;
 800f0c6:	e002      	b.n	800f0ce <phhalHw_Pn5180_GetConfig+0x522>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 800f0c8:	f240 2323 	movw	r3, #547	@ 0x223
 800f0cc:	e000      	b.n	800f0d0 <phhalHw_Pn5180_GetConfig+0x524>
    }

    return PH_ERR_SUCCESS;
 800f0ce:	2300      	movs	r3, #0
}
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	3720      	adds	r7, #32
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	bd80      	pop	{r7, pc}

0800f0d8 <phhalHw_Pn5180_SetMinFDT>:

phStatus_t phhalHw_Pn5180_SetMinFDT(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wValue
    )
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b084      	sub	sp, #16
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
 800f0e0:	460b      	mov	r3, r1
 800f0e2:	807b      	strh	r3, [r7, #2]
    phStatus_t PH_MEMLOC_REM statusTmp = 0U;
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	81fb      	strh	r3, [r7, #14]
    uint16_t   PH_MEMLOC_REM wTimer = 0U;
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	81bb      	strh	r3, [r7, #12]
    uint16_t   PH_MEMLOC_REM wTxRate = 0U;
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	817b      	strh	r3, [r7, #10]

    if (wValue == PH_ON)
 800f0f0:	887b      	ldrh	r3, [r7, #2]
 800f0f2:	2b01      	cmp	r3, #1
 800f0f4:	d146      	bne.n	800f184 <phhalHw_Pn5180_SetMinFDT+0xac>
    {
        /*Backup the old Timer values and set min FDT*/
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetConfig(pDataParams,
 800f0f6:	f107 030c 	add.w	r3, r7, #12
 800f0fa:	461a      	mov	r2, r3
 800f0fc:	210e      	movs	r1, #14
 800f0fe:	6878      	ldr	r0, [r7, #4]
 800f100:	f7ff fd54 	bl	800ebac <phhalHw_Pn5180_GetConfig>
 800f104:	4603      	mov	r3, r0
 800f106:	81fb      	strh	r3, [r7, #14]
 800f108:	89fb      	ldrh	r3, [r7, #14]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d001      	beq.n	800f112 <phhalHw_Pn5180_SetMinFDT+0x3a>
 800f10e:	89fb      	ldrh	r3, [r7, #14]
 800f110:	e04a      	b.n	800f1a8 <phhalHw_Pn5180_SetMinFDT+0xd0>
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS, &wTimer));
        pDataParams->dwFdtPc = wTimer;
 800f112:	89ba      	ldrh	r2, [r7, #12]
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	855a      	strh	r2, [r3, #42]	@ 0x2a
        /* Calculate values for Microsecond values */
        /* Get the data rate */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetConfig(pDataParams,
 800f118:	f107 030a 	add.w	r3, r7, #10
 800f11c:	461a      	mov	r2, r3
 800f11e:	2109      	movs	r1, #9
 800f120:	6878      	ldr	r0, [r7, #4]
 800f122:	f7ff fd43 	bl	800ebac <phhalHw_Pn5180_GetConfig>
 800f126:	4603      	mov	r3, r0
 800f128:	81fb      	strh	r3, [r7, #14]
 800f12a:	89fb      	ldrh	r3, [r7, #14]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d001      	beq.n	800f134 <phhalHw_Pn5180_SetMinFDT+0x5c>
 800f130:	89fb      	ldrh	r3, [r7, #14]
 800f132:	e039      	b.n	800f1a8 <phhalHw_Pn5180_SetMinFDT+0xd0>
            PHHAL_HW_CONFIG_TXDATARATE_FRAMING, &wTxRate));
        switch(wTxRate)
 800f134:	897b      	ldrh	r3, [r7, #10]
 800f136:	2b03      	cmp	r3, #3
 800f138:	d816      	bhi.n	800f168 <phhalHw_Pn5180_SetMinFDT+0x90>
 800f13a:	a201      	add	r2, pc, #4	@ (adr r2, 800f140 <phhalHw_Pn5180_SetMinFDT+0x68>)
 800f13c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f140:	0800f151 	.word	0x0800f151
 800f144:	0800f157 	.word	0x0800f157
 800f148:	0800f15d 	.word	0x0800f15d
 800f14c:	0800f163 	.word	0x0800f163
        {
        case PHHAL_HW_RF_DATARATE_106:
            wTimer = PHHAL_HW_MINFDT_106_US;
 800f150:	2365      	movs	r3, #101	@ 0x65
 800f152:	81bb      	strh	r3, [r7, #12]
            break;
 800f154:	e009      	b.n	800f16a <phhalHw_Pn5180_SetMinFDT+0x92>
        case PHHAL_HW_RF_DATARATE_212:
            wTimer = PHHAL_HW_MINFDT_212_US;
 800f156:	237f      	movs	r3, #127	@ 0x7f
 800f158:	81bb      	strh	r3, [r7, #12]
            break;
 800f15a:	e006      	b.n	800f16a <phhalHw_Pn5180_SetMinFDT+0x92>
        case PHHAL_HW_RF_DATARATE_424:
            wTimer = PHHAL_HW_MINFDT_424_US;
 800f15c:	2377      	movs	r3, #119	@ 0x77
 800f15e:	81bb      	strh	r3, [r7, #12]
            break;
 800f160:	e003      	b.n	800f16a <phhalHw_Pn5180_SetMinFDT+0x92>
        case PHHAL_HW_RF_DATARATE_848:
            wTimer = PHHAL_HW_MINFDT_848_US;
 800f162:	2380      	movs	r3, #128	@ 0x80
 800f164:	81bb      	strh	r3, [r7, #12]
            break;
 800f166:	e000      	b.n	800f16a <phhalHw_Pn5180_SetMinFDT+0x92>
        default:
            break;
 800f168:	bf00      	nop
        }
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams,
 800f16a:	89bb      	ldrh	r3, [r7, #12]
 800f16c:	461a      	mov	r2, r3
 800f16e:	210d      	movs	r1, #13
 800f170:	6878      	ldr	r0, [r7, #4]
 800f172:	f7fe f8cd 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 800f176:	4603      	mov	r3, r0
 800f178:	81fb      	strh	r3, [r7, #14]
 800f17a:	89fb      	ldrh	r3, [r7, #14]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d012      	beq.n	800f1a6 <phhalHw_Pn5180_SetMinFDT+0xce>
 800f180:	89fb      	ldrh	r3, [r7, #14]
 800f182:	e011      	b.n	800f1a8 <phhalHw_Pn5180_SetMinFDT+0xd0>
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_US, wTimer));
    }
    else if (wValue == PH_OFF)
 800f184:	887b      	ldrh	r3, [r7, #2]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d10d      	bne.n	800f1a6 <phhalHw_Pn5180_SetMinFDT+0xce>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams,
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f18e:	461a      	mov	r2, r3
 800f190:	210e      	movs	r1, #14
 800f192:	6878      	ldr	r0, [r7, #4]
 800f194:	f7fe f8bc 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 800f198:	4603      	mov	r3, r0
 800f19a:	81fb      	strh	r3, [r7, #14]
 800f19c:	89fb      	ldrh	r3, [r7, #14]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d001      	beq.n	800f1a6 <phhalHw_Pn5180_SetMinFDT+0xce>
 800f1a2:	89fb      	ldrh	r3, [r7, #14]
 800f1a4:	e000      	b.n	800f1a8 <phhalHw_Pn5180_SetMinFDT+0xd0>
    }
    else
    {
        /* Do nothing*/
    }
    return PH_ERR_SUCCESS;
 800f1a6:	2300      	movs	r3, #0
}
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	3710      	adds	r7, #16
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	bd80      	pop	{r7, pc}

0800f1b0 <phhalHw_Pn5180_BalExchange>:
                                      uint16_t wTxLength,
                                      uint16_t wRxBufSize,
                                      uint8_t * pRxBuffer,
                                      uint16_t * pRxLength
                                      )
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b08a      	sub	sp, #40	@ 0x28
 800f1b4:	af04      	add	r7, sp, #16
 800f1b6:	60f8      	str	r0, [r7, #12]
 800f1b8:	60b9      	str	r1, [r7, #8]
 800f1ba:	4611      	mov	r1, r2
 800f1bc:	461a      	mov	r2, r3
 800f1be:	460b      	mov	r3, r1
 800f1c0:	80fb      	strh	r3, [r7, #6]
 800f1c2:	4613      	mov	r3, r2
 800f1c4:	80bb      	strh	r3, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;

    if (((phbalReg_Type_t *)(pDataParams->pBalDataParams))->bBalType == PHBAL_REG_TYPE_KERNEL_SPI)
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	685b      	ldr	r3, [r3, #4]
 800f1ca:	789b      	ldrb	r3, [r3, #2]
 800f1cc:	2b04      	cmp	r3, #4
 800f1ce:	d10f      	bne.n	800f1f0 <phhalHw_Pn5180_BalExchange+0x40>
    {
        return phbalReg_Exchange(
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	6858      	ldr	r0, [r3, #4]
 800f1d4:	88fa      	ldrh	r2, [r7, #6]
 800f1d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1d8:	9302      	str	r3, [sp, #8]
 800f1da:	6a3b      	ldr	r3, [r7, #32]
 800f1dc:	9301      	str	r3, [sp, #4]
 800f1de:	88bb      	ldrh	r3, [r7, #4]
 800f1e0:	9300      	str	r3, [sp, #0]
 800f1e2:	4613      	mov	r3, r2
 800f1e4:	68ba      	ldr	r2, [r7, #8]
 800f1e6:	2100      	movs	r1, #0
 800f1e8:	f007 fde2 	bl	8016db0 <phbalReg_Exchange>
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	e077      	b.n	800f2e0 <phhalHw_Pn5180_BalExchange+0x130>
    else
    {

#ifndef _WIN32
        /* Wait for the Busy to be low */
        while(phDriver_PinRead(PHDRIVER_PIN_BUSY, PH_DRIVER_PINFUNC_INPUT));
 800f1f0:	bf00      	nop
 800f1f2:	2201      	movs	r2, #1
 800f1f4:	2102      	movs	r1, #2
 800f1f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800f1fa:	f007 fd43 	bl	8016c84 <phDriver_PinRead>
 800f1fe:	4603      	mov	r3, r0
 800f200:	2b00      	cmp	r3, #0
 800f202:	d1f6      	bne.n	800f1f2 <phhalHw_Pn5180_BalExchange+0x42>
                0U,
                NULL,
                NULL));
#else
        /* Enable chip select connected to reader IC by pulling NSS low. */
        phhalHw_Pn5180_WriteSSEL(pDataParams->pBalDataParams, PH_DRIVER_SET_LOW);
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	685b      	ldr	r3, [r3, #4]
 800f208:	2100      	movs	r1, #0
 800f20a:	4618      	mov	r0, r3
 800f20c:	f000 fe3e 	bl	800fe8c <phhalHw_Pn5180_WriteSSEL>

        PH_CHECK_SUCCESS_FCT(statusTmp, phbalReg_Exchange(
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	6858      	ldr	r0, [r3, #4]
 800f214:	88fa      	ldrh	r2, [r7, #6]
 800f216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f218:	9302      	str	r3, [sp, #8]
 800f21a:	2300      	movs	r3, #0
 800f21c:	9301      	str	r3, [sp, #4]
 800f21e:	88fb      	ldrh	r3, [r7, #6]
 800f220:	9300      	str	r3, [sp, #0]
 800f222:	4613      	mov	r3, r2
 800f224:	68ba      	ldr	r2, [r7, #8]
 800f226:	2100      	movs	r1, #0
 800f228:	f007 fdc2 	bl	8016db0 <phbalReg_Exchange>
 800f22c:	4603      	mov	r3, r0
 800f22e:	82fb      	strh	r3, [r7, #22]
 800f230:	8afb      	ldrh	r3, [r7, #22]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d001      	beq.n	800f23a <phhalHw_Pn5180_BalExchange+0x8a>
 800f236:	8afb      	ldrh	r3, [r7, #22]
 800f238:	e052      	b.n	800f2e0 <phhalHw_Pn5180_BalExchange+0x130>
                wTxLength,
                wTxLength,
                NULL,
                pRxLength));

        if (pDataParams->bIsTestBusEnabled == PH_ON)
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 800f240:	2b01      	cmp	r3, #1
 800f242:	d109      	bne.n	800f258 <phhalHw_Pn5180_BalExchange+0xa8>
        {
            /* Wait for the Busy Pin to go high when TestBus is enabled. */
            while(!phDriver_PinRead(PHDRIVER_PIN_BUSY, PH_DRIVER_PINFUNC_INPUT));
 800f244:	bf00      	nop
 800f246:	2201      	movs	r2, #1
 800f248:	2102      	movs	r1, #2
 800f24a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800f24e:	f007 fd19 	bl	8016c84 <phDriver_PinRead>
 800f252:	4603      	mov	r3, r0
 800f254:	2b00      	cmp	r3, #0
 800f256:	d0f6      	beq.n	800f246 <phhalHw_Pn5180_BalExchange+0x96>
        }

        /* Disable chip select connected to reader IC by pulling NSS high. */
        phhalHw_Pn5180_WriteSSEL(pDataParams->pBalDataParams, PH_DRIVER_SET_HIGH);
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	685b      	ldr	r3, [r3, #4]
 800f25c:	2101      	movs	r1, #1
 800f25e:	4618      	mov	r0, r3
 800f260:	f000 fe14 	bl	800fe8c <phhalHw_Pn5180_WriteSSEL>
#endif

        if (0U != wRxBufSize)
 800f264:	88bb      	ldrh	r3, [r7, #4]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d039      	beq.n	800f2de <phhalHw_Pn5180_BalExchange+0x12e>
        {
#ifndef _WIN32
            while(phDriver_PinRead(PHDRIVER_PIN_BUSY, PH_DRIVER_PINFUNC_INPUT));
 800f26a:	bf00      	nop
 800f26c:	2201      	movs	r2, #1
 800f26e:	2102      	movs	r1, #2
 800f270:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800f274:	f007 fd06 	bl	8016c84 <phDriver_PinRead>
 800f278:	4603      	mov	r3, r0
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d1f6      	bne.n	800f26c <phhalHw_Pn5180_BalExchange+0xbc>
                    wRxBufSize,
                    pRxBuffer,
                    pRxLength));
#else
            /* Enable chip select connected to reader IC by pulling NSS low. */
            phhalHw_Pn5180_WriteSSEL(pDataParams->pBalDataParams, PH_DRIVER_SET_LOW);
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	685b      	ldr	r3, [r3, #4]
 800f282:	2100      	movs	r1, #0
 800f284:	4618      	mov	r0, r3
 800f286:	f000 fe01 	bl	800fe8c <phhalHw_Pn5180_WriteSSEL>

            PH_CHECK_SUCCESS_FCT(statusTmp, phbalReg_Exchange(
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	6858      	ldr	r0, [r3, #4]
 800f28e:	88ba      	ldrh	r2, [r7, #4]
 800f290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f292:	9302      	str	r3, [sp, #8]
 800f294:	6a3b      	ldr	r3, [r7, #32]
 800f296:	9301      	str	r3, [sp, #4]
 800f298:	88bb      	ldrh	r3, [r7, #4]
 800f29a:	9300      	str	r3, [sp, #0]
 800f29c:	4613      	mov	r3, r2
 800f29e:	2200      	movs	r2, #0
 800f2a0:	2100      	movs	r1, #0
 800f2a2:	f007 fd85 	bl	8016db0 <phbalReg_Exchange>
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	82fb      	strh	r3, [r7, #22]
 800f2aa:	8afb      	ldrh	r3, [r7, #22]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d001      	beq.n	800f2b4 <phhalHw_Pn5180_BalExchange+0x104>
 800f2b0:	8afb      	ldrh	r3, [r7, #22]
 800f2b2:	e015      	b.n	800f2e0 <phhalHw_Pn5180_BalExchange+0x130>
                    wRxBufSize,
                    wRxBufSize,
                    pRxBuffer,
                    pRxLength));

            if (pDataParams->bIsTestBusEnabled == PH_ON)
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 800f2ba:	2b01      	cmp	r3, #1
 800f2bc:	d109      	bne.n	800f2d2 <phhalHw_Pn5180_BalExchange+0x122>
            {
                /* Wait for the Busy Pin to go high when TestBus is enabled. */
                while(!phDriver_PinRead(PHDRIVER_PIN_BUSY, PH_DRIVER_PINFUNC_INPUT));
 800f2be:	bf00      	nop
 800f2c0:	2201      	movs	r2, #1
 800f2c2:	2102      	movs	r1, #2
 800f2c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800f2c8:	f007 fcdc 	bl	8016c84 <phDriver_PinRead>
 800f2cc:	4603      	mov	r3, r0
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d0f6      	beq.n	800f2c0 <phhalHw_Pn5180_BalExchange+0x110>
            }

            /* Disable chip select connected to reader IC by pulling NSS high. */
            phhalHw_Pn5180_WriteSSEL(pDataParams->pBalDataParams, PH_DRIVER_SET_HIGH);
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	685b      	ldr	r3, [r3, #4]
 800f2d6:	2101      	movs	r1, #1
 800f2d8:	4618      	mov	r0, r3
 800f2da:	f000 fdd7 	bl	800fe8c <phhalHw_Pn5180_WriteSSEL>
#endif
        }

    }

    return PH_ERR_SUCCESS;
 800f2de:	2300      	movs	r3, #0
}
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	3718      	adds	r7, #24
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	bd80      	pop	{r7, pc}

0800f2e8 <phhalHw_Pn5180_Autocoll>:
    uint16_t wMode,
    uint8_t ** ppRxBuffer,
    uint16_t * pRxLength,
    uint16_t * pProtParams
    )
{
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b090      	sub	sp, #64	@ 0x40
 800f2ec:	af02      	add	r7, sp, #8
 800f2ee:	60f8      	str	r0, [r7, #12]
 800f2f0:	607a      	str	r2, [r7, #4]
 800f2f2:	603b      	str	r3, [r7, #0]
 800f2f4:	460b      	mov	r3, r1
 800f2f6:	817b      	strh	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_INTERNAL_ERROR;
 800f2f8:	237f      	movs	r3, #127	@ 0x7f
 800f2fa:	86fb      	strh	r3, [r7, #54]	@ 0x36
    uint32_t    PH_MEMLOC_REM dwIrqWaitFor;
    uint32_t    PH_MEMLOC_REM dwRegValue = 0U;
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t    PH_MEMLOC_REM dwRfStatus;
    uint8_t     PH_MEMLOC_REM bRfTechnology = 0U;
 800f300:	2300      	movs	r3, #0
 800f302:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    uint8_t     PH_MEMLOC_REM offsetPos = 0U;
 800f306:	2300      	movs	r3, #0
 800f308:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    uint8_t     PH_MEMLOC_REM offsetLen = 0U;
 800f30c:	2300      	movs	r3, #0
 800f30e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    uint8_t     PH_MEMLOC_REM bFraming = 0U;
 800f312:	2300      	movs	r3, #0
 800f314:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    uint8_t     PH_MEMLOC_REM bSpeed = 0U;
 800f318:	2300      	movs	r3, #0
 800f31a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    uint8_t     PH_MEMLOC_REM pRegisters[4];
    uint8_t*    PH_MEMLOC_REM pTmpBuffer;

    /*Fixed for Autonomous mode not used, i.e. autocoll terminates when external RF field is not present*/
    uint8_t PH_MEMLOC_REM   bAutocollMode = 0U;
 800f31e:	2300      	movs	r3, #0
 800f320:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    uint32_t PH_MEMLOC_REM  dwIrqReg = 0U;
 800f324:	2300      	movs	r3, #0
 800f326:	617b      	str	r3, [r7, #20]

    /* Disable the EMD. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_OFF));
 800f328:	2200      	movs	r2, #0
 800f32a:	215e      	movs	r1, #94	@ 0x5e
 800f32c:	68f8      	ldr	r0, [r7, #12]
 800f32e:	f7fd ffef 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 800f332:	4603      	mov	r3, r0
 800f334:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f336:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d001      	beq.n	800f340 <phhalHw_Pn5180_Autocoll+0x58>
 800f33c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f33e:	e25e      	b.n	800f7fe <phhalHw_Pn5180_Autocoll+0x516>

    /*bTransmited is a flag which is used to identify if a transmit is followed by a receive.
    If any other api follows a transmit, then it should be reset */
    pDataParams->bTransmited = PH_OFF;
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	2200      	movs	r2, #0
 800f344:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    if ( (NULL == pDataParams) \
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d008      	beq.n	800f360 <phhalHw_Pn5180_Autocoll+0x78>
        || (NULL == ppRxBuffer)\
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d005      	beq.n	800f360 <phhalHw_Pn5180_Autocoll+0x78>
        || (NULL == pRxLength) \
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d002      	beq.n	800f360 <phhalHw_Pn5180_Autocoll+0x78>
        ||  (NULL == pProtParams) \
 800f35a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d102      	bne.n	800f366 <phhalHw_Pn5180_Autocoll+0x7e>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800f360:	f240 2321 	movw	r3, #545	@ 0x221
 800f364:	e24b      	b.n	800f7fe <phhalHw_Pn5180_Autocoll+0x516>
    }

    if(pDataParams->bCardMode == PH_ON)
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800f36c:	2b01      	cmp	r3, #1
 800f36e:	d103      	bne.n	800f378 <phhalHw_Pn5180_Autocoll+0x90>
    {
        bRfTechnology = PHHAL_HW_PN5180_AUTOCOLL_RF_TECHNOLOGY_MASK_NFC_A;
 800f370:	2301      	movs	r3, #1
 800f372:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800f376:	e037      	b.n	800f3e8 <phhalHw_Pn5180_Autocoll+0x100>
    }
    else
    {
        /*RFTech A*/
        if((wMode & A_MODE) == A_MODE)
 800f378:	897b      	ldrh	r3, [r7, #10]
 800f37a:	f003 0301 	and.w	r3, r3, #1
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d005      	beq.n	800f38e <phhalHw_Pn5180_Autocoll+0xa6>
        {
            bRfTechnology |= PHHAL_HW_PN5180_AUTOCOLL_RF_TECHNOLOGY_MASK_NFC_A;
 800f382:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800f386:	f043 0301 	orr.w	r3, r3, #1
 800f38a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        }
        /*RFTech F*/
        if((wMode & F_MODE) == F_MODE)
 800f38e:	897b      	ldrh	r3, [r7, #10]
 800f390:	f003 0304 	and.w	r3, r3, #4
 800f394:	2b00      	cmp	r3, #0
 800f396:	d005      	beq.n	800f3a4 <phhalHw_Pn5180_Autocoll+0xbc>
        {
            bRfTechnology |= PHHAL_HW_PN5180_AUTOCOLL_RF_TECHNOLOGY_MASK_NFC_F;
 800f398:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800f39c:	f043 0302 	orr.w	r3, r3, #2
 800f3a0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        }
        /*RFTech Active A*/
        if((wMode & ACTIVE_A_MODE) == ACTIVE_A_MODE)
 800f3a4:	897b      	ldrh	r3, [r7, #10]
 800f3a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d005      	beq.n	800f3ba <phhalHw_Pn5180_Autocoll+0xd2>
        {
            bRfTechnology |= PHHAL_HW_PN5180_AUTOCOLL_RF_TECHNOLOGY_MASK_ISO18092_ACTIVE;
 800f3ae:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800f3b2:	f043 0304 	orr.w	r3, r3, #4
 800f3b6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        }
        /*RFTech Active F*/
        if((wMode & ACTIVE_F_MODE) == ACTIVE_F_MODE)
 800f3ba:	897b      	ldrh	r3, [r7, #10]
 800f3bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d005      	beq.n	800f3d0 <phhalHw_Pn5180_Autocoll+0xe8>
        {
            bRfTechnology |= PHHAL_HW_PN5180_AUTOCOLL_RF_TECHNOLOGY_MASK_NFC_F_ACTIVE;
 800f3c4:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800f3c8:	f043 0308 	orr.w	r3, r3, #8
 800f3cc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        }
        /*RFTech B and Active B*/
        if(((wMode & B_MODE) == B_MODE)||((wMode & ACTIVE_B_MODE) == ACTIVE_B_MODE))
 800f3d0:	897b      	ldrh	r3, [r7, #10]
 800f3d2:	f003 0302 	and.w	r3, r3, #2
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d104      	bne.n	800f3e4 <phhalHw_Pn5180_Autocoll+0xfc>
 800f3da:	897b      	ldrh	r3, [r7, #10]
 800f3dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d001      	beq.n	800f3e8 <phhalHw_Pn5180_Autocoll+0x100>
        {
            /* Do nothing, ignore -- NFCP576 -- as the NFC forum DTA application expects success for Listen B */
            return PH_ERR_SUCCESS;
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	e20a      	b.n	800f7fe <phhalHw_Pn5180_Autocoll+0x516>
        }

    }

    /* set the receive length */
    *pRxLength = 0U;
 800f3e8:	683b      	ldr	r3, [r7, #0]
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	801a      	strh	r2, [r3, #0]

    pDataParams->wRxBufLen = 0U;
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	835a      	strh	r2, [r3, #26]

    /* Reset the Flag used to indicate if Passive Target is activated by ISO/IEC 18092 Frame */
    pDataParams->wTargetMode = PH_OFF;
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	865a      	strh	r2, [r3, #50]	@ 0x32
    pDataParams->bActiveMode = PH_OFF;
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    pDataParams->bNfcipMode  = PH_OFF;
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	2200      	movs	r2, #0
 800f406:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f

    /* Terminate a probably running command */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Int_IdleCommand(pDataParams));
 800f40a:	68f8      	ldr	r0, [r7, #12]
 800f40c:	f003 f84c 	bl	80124a8 <phhalHw_Pn5180_Int_IdleCommand>
 800f410:	4603      	mov	r3, r0
 800f412:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f414:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f416:	2b00      	cmp	r3, #0
 800f418:	d001      	beq.n	800f41e <phhalHw_Pn5180_Autocoll+0x136>
 800f41a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f41c:	e1ef      	b.n	800f7fe <phhalHw_Pn5180_Autocoll+0x516>

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_RfOff(pDataParams));
 800f41e:	68f8      	ldr	r0, [r7, #12]
 800f420:	f001 fd17 	bl	8010e52 <phhalHw_Pn5180_Instr_RfOff>
 800f424:	4603      	mov	r3, r0
 800f426:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f428:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d001      	beq.n	800f432 <phhalHw_Pn5180_Autocoll+0x14a>
 800f42e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f430:	e1e5      	b.n	800f7fe <phhalHw_Pn5180_Autocoll+0x516>

    /*Set wait IRQ */
    dwIrqWaitFor =  IRQ_STATUS_RX_IRQ_MASK | IRQ_STATUS_GENERAL_ERROR_IRQ_MASK | IRQ_STATUS_RFOFF_DET_IRQ_MASK;
 800f432:	4b9d      	ldr	r3, [pc, #628]	@ (800f6a8 <phhalHw_Pn5180_Autocoll+0x3c0>)
 800f434:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear all Interrupts for e.g Tx interrupt during receive */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, PHHAL_HW_PN5180_IRQ_SET_CLEAR_ALL_MASK));
 800f436:	4a9d      	ldr	r2, [pc, #628]	@ (800f6ac <phhalHw_Pn5180_Autocoll+0x3c4>)
 800f438:	2103      	movs	r1, #3
 800f43a:	68f8      	ldr	r0, [r7, #12]
 800f43c:	f000 fd72 	bl	800ff24 <phhalHw_Pn5180_Instr_WriteRegister>
 800f440:	4603      	mov	r3, r0
 800f442:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f444:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f446:	2b00      	cmp	r3, #0
 800f448:	d001      	beq.n	800f44e <phhalHw_Pn5180_Autocoll+0x166>
 800f44a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f44c:	e1d7      	b.n	800f7fe <phhalHw_Pn5180_Autocoll+0x516>

    (void)phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL);
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 800f454:	2300      	movs	r3, #0
 800f456:	2201      	movs	r2, #1
 800f458:	2100      	movs	r1, #0
 800f45a:	f007 fe4b 	bl	80170f4 <phOsal_EventClear>

    /* Enable IRQ sources */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_ENABLE, dwIrqWaitFor));
 800f45e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f460:	2101      	movs	r1, #1
 800f462:	68f8      	ldr	r0, [r7, #12]
 800f464:	f000 fd5e 	bl	800ff24 <phhalHw_Pn5180_Instr_WriteRegister>
 800f468:	4603      	mov	r3, r0
 800f46a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f46c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d001      	beq.n	800f476 <phhalHw_Pn5180_Autocoll+0x18e>
 800f472:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f474:	e1c3      	b.n	800f7fe <phhalHw_Pn5180_Autocoll+0x516>

    /*Go to autocoll mode*/
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeAutocoll(pDataParams, bRfTechnology, bAutocollMode ) );
 800f476:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 800f47a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800f47e:	4619      	mov	r1, r3
 800f480:	68f8      	ldr	r0, [r7, #12]
 800f482:	f001 fa3b 	bl	80108fc <phhalHw_Pn5180_Instr_SwitchModeAutocoll>
 800f486:	4603      	mov	r3, r0
 800f488:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f48a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d001      	beq.n	800f494 <phhalHw_Pn5180_Autocoll+0x1ac>
 800f490:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f492:	e1b4      	b.n	800f7fe <phhalHw_Pn5180_Autocoll+0x516>

    /* Wait for Interrupt to occur */
    statusTmp =  phhalHw_Pn5180_WaitIrq( pDataParams, PH_ON, PH_OFF, dwIrqWaitFor, &dwIrqReg);
 800f494:	f107 0314 	add.w	r3, r7, #20
 800f498:	9300      	str	r3, [sp, #0]
 800f49a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f49c:	2200      	movs	r2, #0
 800f49e:	2101      	movs	r1, #1
 800f4a0:	68f8      	ldr	r0, [r7, #12]
 800f4a2:	f003 f8b3 	bl	801260c <phhalHw_Pn5180_WaitIrq>
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	853b      	strh	r3, [r7, #40]	@ 0x28

    if((statusTmp & PH_ERR_MASK) == PH_ERR_ABORTED)
 800f4aa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f4ac:	b2db      	uxtb	r3, r3
 800f4ae:	2b12      	cmp	r3, #18
 800f4b0:	d10c      	bne.n	800f4cc <phhalHw_Pn5180_Autocoll+0x1e4>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams) );
 800f4b2:	68f8      	ldr	r0, [r7, #12]
 800f4b4:	f001 fa7b 	bl	80109ae <phhalHw_Pn5180_Instr_SwitchModeNormal>
 800f4b8:	4603      	mov	r3, r0
 800f4ba:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f4bc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d001      	beq.n	800f4c6 <phhalHw_Pn5180_Autocoll+0x1de>
 800f4c2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f4c4:	e19b      	b.n	800f7fe <phhalHw_Pn5180_Autocoll+0x516>
        return PH_ADD_COMPCODE_FIXED(PH_ERR_ABORTED, PH_COMP_HAL);
 800f4c6:	f240 2312 	movw	r3, #530	@ 0x212
 800f4ca:	e198      	b.n	800f7fe <phhalHw_Pn5180_Autocoll+0x516>
    }

    if(0U != (dwIrqReg & IRQ_STATUS_GENERAL_ERROR_IRQ_MASK))
 800f4cc:	697b      	ldr	r3, [r7, #20]
 800f4ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d00c      	beq.n	800f4f0 <phhalHw_Pn5180_Autocoll+0x208>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams) );
 800f4d6:	68f8      	ldr	r0, [r7, #12]
 800f4d8:	f001 fa69 	bl	80109ae <phhalHw_Pn5180_Instr_SwitchModeNormal>
 800f4dc:	4603      	mov	r3, r0
 800f4de:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f4e0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d001      	beq.n	800f4ea <phhalHw_Pn5180_Autocoll+0x202>
 800f4e6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f4e8:	e189      	b.n	800f7fe <phhalHw_Pn5180_Autocoll+0x516>
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 800f4ea:	f240 237f 	movw	r3, #639	@ 0x27f
 800f4ee:	e186      	b.n	800f7fe <phhalHw_Pn5180_Autocoll+0x516>
    }
    else if (0U != (dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))
 800f4f0:	697b      	ldr	r3, [r7, #20]
 800f4f2:	f003 0301 	and.w	r3, r3, #1
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	f000 815d 	beq.w	800f7b6 <phhalHw_Pn5180_Autocoll+0x4ce>
    {

        pRegisters[0] = SIGPRO_CM_CONFIG;
 800f4fc:	231b      	movs	r3, #27
 800f4fe:	773b      	strb	r3, [r7, #28]
        pRegisters[1] = SIGPRO_CONFIG;
 800f500:	231a      	movs	r3, #26
 800f502:	777b      	strb	r3, [r7, #29]
        pRegisters[2] = RX_STATUS;
 800f504:	2313      	movs	r3, #19
 800f506:	77bb      	strb	r3, [r7, #30]
        pRegisters[3] = RF_STATUS;
 800f508:	231d      	movs	r3, #29
 800f50a:	77fb      	strb	r3, [r7, #31]

        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegisterMultiple(pDataParams, pRegisters, 4U, &pTmpBuffer));
 800f50c:	f107 0318 	add.w	r3, r7, #24
 800f510:	f107 011c 	add.w	r1, r7, #28
 800f514:	2204      	movs	r2, #4
 800f516:	68f8      	ldr	r0, [r7, #12]
 800f518:	f000 ff86 	bl	8010428 <phhalHw_Pn5180_Instr_ReadRegisterMultiple>
 800f51c:	4603      	mov	r3, r0
 800f51e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f520:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f522:	2b00      	cmp	r3, #0
 800f524:	d001      	beq.n	800f52a <phhalHw_Pn5180_Autocoll+0x242>
 800f526:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f528:	e169      	b.n	800f7fe <phhalHw_Pn5180_Autocoll+0x516>

        dwRegValue = (uint32_t)pTmpBuffer[0];
 800f52a:	69bb      	ldr	r3, [r7, #24]
 800f52c:	781b      	ldrb	r3, [r3, #0]
 800f52e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[1]<<8U;
 800f530:	69bb      	ldr	r3, [r7, #24]
 800f532:	3301      	adds	r3, #1
 800f534:	781b      	ldrb	r3, [r3, #0]
 800f536:	021b      	lsls	r3, r3, #8
 800f538:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f53a:	4313      	orrs	r3, r2
 800f53c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[2]<<16U;
 800f53e:	69bb      	ldr	r3, [r7, #24]
 800f540:	3302      	adds	r3, #2
 800f542:	781b      	ldrb	r3, [r3, #0]
 800f544:	041b      	lsls	r3, r3, #16
 800f546:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f548:	4313      	orrs	r3, r2
 800f54a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[3]<<24U;
 800f54c:	69bb      	ldr	r3, [r7, #24]
 800f54e:	3303      	adds	r3, #3
 800f550:	781b      	ldrb	r3, [r3, #0]
 800f552:	061b      	lsls	r3, r3, #24
 800f554:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f556:	4313      	orrs	r3, r2
 800f558:	62fb      	str	r3, [r7, #44]	@ 0x2c

        bFraming = (uint8_t)((dwRegValue & SIGPRO_CM_CONFIG_RX_FRAMING_MASK) >> SIGPRO_CM_CONFIG_RX_FRAMING_POS);
 800f55a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f55c:	0f5b      	lsrs	r3, r3, #29
 800f55e:	b2db      	uxtb	r3, r3
 800f560:	f003 0303 	and.w	r3, r3, #3
 800f564:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

        dwRegValue = (uint32_t)pTmpBuffer[4];
 800f568:	69bb      	ldr	r3, [r7, #24]
 800f56a:	3304      	adds	r3, #4
 800f56c:	781b      	ldrb	r3, [r3, #0]
 800f56e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[5]<<8U;
 800f570:	69bb      	ldr	r3, [r7, #24]
 800f572:	3305      	adds	r3, #5
 800f574:	781b      	ldrb	r3, [r3, #0]
 800f576:	021b      	lsls	r3, r3, #8
 800f578:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f57a:	4313      	orrs	r3, r2
 800f57c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[6]<<16U;
 800f57e:	69bb      	ldr	r3, [r7, #24]
 800f580:	3306      	adds	r3, #6
 800f582:	781b      	ldrb	r3, [r3, #0]
 800f584:	041b      	lsls	r3, r3, #16
 800f586:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f588:	4313      	orrs	r3, r2
 800f58a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[7]<<24U;
 800f58c:	69bb      	ldr	r3, [r7, #24]
 800f58e:	3307      	adds	r3, #7
 800f590:	781b      	ldrb	r3, [r3, #0]
 800f592:	061b      	lsls	r3, r3, #24
 800f594:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f596:	4313      	orrs	r3, r2
 800f598:	62fb      	str	r3, [r7, #44]	@ 0x2c

        bSpeed = (uint8_t)(dwRegValue & SIGPRO_CONFIG_BAUDRATE_MASK);
 800f59a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f59c:	b2db      	uxtb	r3, r3
 800f59e:	f003 0307 	and.w	r3, r3, #7
 800f5a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        bSpeed -= PHHAL_HW_PN5180_SIGPRO_GENERAL_MAPPING;
 800f5a6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f5aa:	3b04      	subs	r3, #4
 800f5ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* Read RX_STATUS_REG to know the status of reception */
        dwRegValue = (uint32_t)pTmpBuffer[8];
 800f5b0:	69bb      	ldr	r3, [r7, #24]
 800f5b2:	3308      	adds	r3, #8
 800f5b4:	781b      	ldrb	r3, [r3, #0]
 800f5b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[9]<<8U;
 800f5b8:	69bb      	ldr	r3, [r7, #24]
 800f5ba:	3309      	adds	r3, #9
 800f5bc:	781b      	ldrb	r3, [r3, #0]
 800f5be:	021b      	lsls	r3, r3, #8
 800f5c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f5c2:	4313      	orrs	r3, r2
 800f5c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[10]<<16U;
 800f5c6:	69bb      	ldr	r3, [r7, #24]
 800f5c8:	330a      	adds	r3, #10
 800f5ca:	781b      	ldrb	r3, [r3, #0]
 800f5cc:	041b      	lsls	r3, r3, #16
 800f5ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f5d0:	4313      	orrs	r3, r2
 800f5d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[11]<<24U;
 800f5d4:	69bb      	ldr	r3, [r7, #24]
 800f5d6:	330b      	adds	r3, #11
 800f5d8:	781b      	ldrb	r3, [r3, #0]
 800f5da:	061b      	lsls	r3, r3, #24
 800f5dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f5de:	4313      	orrs	r3, r2
 800f5e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Read RF_STATUS_REG to know the status of reception */
        dwRfStatus = (uint32_t)pTmpBuffer[12];
 800f5e2:	69bb      	ldr	r3, [r7, #24]
 800f5e4:	330c      	adds	r3, #12
 800f5e6:	781b      	ldrb	r3, [r3, #0]
 800f5e8:	623b      	str	r3, [r7, #32]
        dwRfStatus |= (uint32_t)pTmpBuffer[13]<<8U;
 800f5ea:	69bb      	ldr	r3, [r7, #24]
 800f5ec:	330d      	adds	r3, #13
 800f5ee:	781b      	ldrb	r3, [r3, #0]
 800f5f0:	021b      	lsls	r3, r3, #8
 800f5f2:	6a3a      	ldr	r2, [r7, #32]
 800f5f4:	4313      	orrs	r3, r2
 800f5f6:	623b      	str	r3, [r7, #32]
        dwRfStatus |= (uint32_t)pTmpBuffer[14]<<16U;
 800f5f8:	69bb      	ldr	r3, [r7, #24]
 800f5fa:	330e      	adds	r3, #14
 800f5fc:	781b      	ldrb	r3, [r3, #0]
 800f5fe:	041b      	lsls	r3, r3, #16
 800f600:	6a3a      	ldr	r2, [r7, #32]
 800f602:	4313      	orrs	r3, r2
 800f604:	623b      	str	r3, [r7, #32]
        dwRfStatus |= (uint32_t)pTmpBuffer[15]<<24U;
 800f606:	69bb      	ldr	r3, [r7, #24]
 800f608:	330f      	adds	r3, #15
 800f60a:	781b      	ldrb	r3, [r3, #0]
 800f60c:	061b      	lsls	r3, r3, #24
 800f60e:	6a3a      	ldr	r2, [r7, #32]
 800f610:	4313      	orrs	r3, r2
 800f612:	623b      	str	r3, [r7, #32]

        if (0U != (dwRegValue & RX_STATUS_RX_DATA_INTEGRITY_ERROR_MASK))
 800f614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f616:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d00c      	beq.n	800f638 <phhalHw_Pn5180_Autocoll+0x350>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams));
 800f61e:	68f8      	ldr	r0, [r7, #12]
 800f620:	f001 f9c5 	bl	80109ae <phhalHw_Pn5180_Instr_SwitchModeNormal>
 800f624:	4603      	mov	r3, r0
 800f626:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f628:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d001      	beq.n	800f632 <phhalHw_Pn5180_Autocoll+0x34a>
 800f62e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f630:	e0e5      	b.n	800f7fe <phhalHw_Pn5180_Autocoll+0x516>
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INTEGRITY_ERROR, PH_COMP_HAL);
 800f632:	f240 2302 	movw	r3, #514	@ 0x202
 800f636:	e0e2      	b.n	800f7fe <phhalHw_Pn5180_Autocoll+0x516>
        }

        PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_ReadData(pDataParams, ppRxBuffer, pRxLength));
 800f638:	683a      	ldr	r2, [r7, #0]
 800f63a:	6879      	ldr	r1, [r7, #4]
 800f63c:	68f8      	ldr	r0, [r7, #12]
 800f63e:	f001 fd0a 	bl	8011056 <phhalHw_Pn5180_ReadData>
 800f642:	4603      	mov	r3, r0
 800f644:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f646:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d001      	beq.n	800f650 <phhalHw_Pn5180_Autocoll+0x368>
 800f64c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f64e:	e0d6      	b.n	800f7fe <phhalHw_Pn5180_Autocoll+0x516>

        if(0U != (dwIrqReg & IRQ_STATUS_CARD_ACTIVATED_IRQ_MASK))
 800f650:	697b      	ldr	r3, [r7, #20]
 800f652:	f003 0310 	and.w	r3, r3, #16
 800f656:	2b00      	cmp	r3, #0
 800f658:	d02a      	beq.n	800f6b0 <phhalHw_Pn5180_Autocoll+0x3c8>
        {
            /* In case External RF OFF also occurred then exit with RF Error. */
            if (0U != (dwIrqReg & IRQ_STATUS_RFOFF_DET_IRQ_MASK))
 800f65a:	697b      	ldr	r3, [r7, #20]
 800f65c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f660:	2b00      	cmp	r3, #0
 800f662:	d00c      	beq.n	800f67e <phhalHw_Pn5180_Autocoll+0x396>
            {
                /* Terminate Autocoll command before existing. */
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams) );
 800f664:	68f8      	ldr	r0, [r7, #12]
 800f666:	f001 f9a2 	bl	80109ae <phhalHw_Pn5180_Instr_SwitchModeNormal>
 800f66a:	4603      	mov	r3, r0
 800f66c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f66e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f670:	2b00      	cmp	r3, #0
 800f672:	d001      	beq.n	800f678 <phhalHw_Pn5180_Autocoll+0x390>
 800f674:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f676:	e0c2      	b.n	800f7fe <phhalHw_Pn5180_Autocoll+0x516>
                return PH_ADD_COMPCODE_FIXED(PH_ERR_EXT_RF_ERROR, PH_COMP_HAL);
 800f678:	f44f 7304 	mov.w	r3, #528	@ 0x210
 800f67c:	e0bf      	b.n	800f7fe <phhalHw_Pn5180_Autocoll+0x516>
            }
            /* Disable active mode */
            pDataParams->bActiveMode = PH_OFF;
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	2200      	movs	r2, #0
 800f682:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
            if((bSpeed == PHHAL_HW_RF_DATARATE_106) && (**ppRxBuffer == PHHAL_HW_PN5180_I18092MT_START_BYTE))
 800f686:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d134      	bne.n	800f6f8 <phhalHw_Pn5180_Autocoll+0x410>
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	781b      	ldrb	r3, [r3, #0]
 800f694:	2bf0      	cmp	r3, #240	@ 0xf0
 800f696:	d12f      	bne.n	800f6f8 <phhalHw_Pn5180_Autocoll+0x410>
            {
                /* Offset for StartByte as it included if Passive Communication in ISO/IEC 18092 */
                offsetPos = 1U;
 800f698:	2301      	movs	r3, #1
 800f69a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                offsetLen = 1U;
 800f69e:	2301      	movs	r3, #1
 800f6a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800f6a4:	e028      	b.n	800f6f8 <phhalHw_Pn5180_Autocoll+0x410>
 800f6a6:	bf00      	nop
 800f6a8:	00020041 	.word	0x00020041
 800f6ac:	000fffff 	.word	0x000fffff
            }
        }
        else if ((dwRfStatus & RF_STATUS_RF_DET_STATUS_MASK) == 0U)
 800f6b0:	6a3b      	ldr	r3, [r7, #32]
 800f6b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d111      	bne.n	800f6de <phhalHw_Pn5180_Autocoll+0x3f6>
        {
            /* Enable active mode */
            pDataParams->bActiveMode = PH_ON;
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	2201      	movs	r2, #1
 800f6be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
            if(bSpeed == PHHAL_HW_RF_DATARATE_106)
 800f6c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d105      	bne.n	800f6d6 <phhalHw_Pn5180_Autocoll+0x3ee>
            {
                /* Offset for StartByte and CRC as it is included if Active Communication in ISO/IEC 18092 */
                offsetPos = 1U;
 800f6ca:	2301      	movs	r3, #1
 800f6cc:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                offsetLen = 3U;
 800f6d0:	2303      	movs	r3, #3
 800f6d2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            }
            bFraming = PHHAL_HW_PN5180_BIT_ISO18092;
 800f6d6:	2301      	movs	r3, #1
 800f6d8:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 800f6dc:	e00c      	b.n	800f6f8 <phhalHw_Pn5180_Autocoll+0x410>
        }
        else
        {
            /* Terminate Autocoll command before existing. */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams) );
 800f6de:	68f8      	ldr	r0, [r7, #12]
 800f6e0:	f001 f965 	bl	80109ae <phhalHw_Pn5180_Instr_SwitchModeNormal>
 800f6e4:	4603      	mov	r3, r0
 800f6e6:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f6e8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d001      	beq.n	800f6f2 <phhalHw_Pn5180_Autocoll+0x40a>
 800f6ee:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f6f0:	e085      	b.n	800f7fe <phhalHw_Pn5180_Autocoll+0x516>
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_HAL);
 800f6f2:	f240 2306 	movw	r3, #518	@ 0x206
 800f6f6:	e082      	b.n	800f7fe <phhalHw_Pn5180_Autocoll+0x516>
        }
        if((pDataParams->bActiveMode == PH_ON) && ((wMode & ACTIVE_A_MODE) != ACTIVE_A_MODE) && (bSpeed == PHHAL_HW_RF_DATARATE_106))
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f6fe:	2b01      	cmp	r3, #1
 800f700:	d115      	bne.n	800f72e <phhalHw_Pn5180_Autocoll+0x446>
 800f702:	897b      	ldrh	r3, [r7, #10]
 800f704:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d110      	bne.n	800f72e <phhalHw_Pn5180_Autocoll+0x446>
 800f70c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f710:	2b00      	cmp	r3, #0
 800f712:	d10c      	bne.n	800f72e <phhalHw_Pn5180_Autocoll+0x446>
        {
            /* Terminate Autocoll command before existing. */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams) );
 800f714:	68f8      	ldr	r0, [r7, #12]
 800f716:	f001 f94a 	bl	80109ae <phhalHw_Pn5180_Instr_SwitchModeNormal>
 800f71a:	4603      	mov	r3, r0
 800f71c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f71e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f720:	2b00      	cmp	r3, #0
 800f722:	d001      	beq.n	800f728 <phhalHw_Pn5180_Autocoll+0x440>
 800f724:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f726:	e06a      	b.n	800f7fe <phhalHw_Pn5180_Autocoll+0x516>
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_HAL);
 800f728:	f240 2306 	movw	r3, #518	@ 0x206
 800f72c:	e067      	b.n	800f7fe <phhalHw_Pn5180_Autocoll+0x516>
        }

        if(bFraming == PHHAL_HW_PN5180_BIT_MIFARE)
 800f72e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800f732:	2b00      	cmp	r3, #0
 800f734:	d108      	bne.n	800f748 <phhalHw_Pn5180_Autocoll+0x460>
        {
            *pProtParams = PHHAL_HW_RF_TYPE_A_FRAMING | bSpeed;
 800f736:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f73a:	b29b      	uxth	r3, r3
 800f73c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f740:	b29a      	uxth	r2, r3
 800f742:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f744:	801a      	strh	r2, [r3, #0]
 800f746:	e01b      	b.n	800f780 <phhalHw_Pn5180_Autocoll+0x498>
        }
        else if(bFraming == PHHAL_HW_PN5180_BIT_ISO18092)
 800f748:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800f74c:	2b01      	cmp	r3, #1
 800f74e:	d108      	bne.n	800f762 <phhalHw_Pn5180_Autocoll+0x47a>
        {
            *pProtParams = PHHAL_HW_RF_TYPE_ACTIVE_FRAMING | bSpeed;
 800f750:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f754:	b29b      	uxth	r3, r3
 800f756:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800f75a:	b29a      	uxth	r2, r3
 800f75c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f75e:	801a      	strh	r2, [r3, #0]
 800f760:	e00e      	b.n	800f780 <phhalHw_Pn5180_Autocoll+0x498>
        }
        else if(bFraming == PHHAL_HW_PN5180_BIT_FELICA)
 800f762:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800f766:	2b02      	cmp	r3, #2
 800f768:	d108      	bne.n	800f77c <phhalHw_Pn5180_Autocoll+0x494>
        {
            *pProtParams = PHHAL_HW_RF_TYPE_F_FRAMING | bSpeed;
 800f76a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f76e:	b29b      	uxth	r3, r3
 800f770:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800f774:	b29a      	uxth	r2, r3
 800f776:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f778:	801a      	strh	r2, [r3, #0]
 800f77a:	e001      	b.n	800f780 <phhalHw_Pn5180_Autocoll+0x498>
        }
        else
        {
            /* Invalid Framing as PN5180 will not emulate other than Type-A, Type-F and Active Frame */
            status = PH_ERR_FRAMING_ERROR;
 800f77c:	2305      	movs	r3, #5
 800f77e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        }

        /* Store received data length in dataparams */
        pDataParams->wRxBufLen = *pRxLength;
 800f780:	683b      	ldr	r3, [r7, #0]
 800f782:	881a      	ldrh	r2, [r3, #0]
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	835a      	strh	r2, [r3, #26]

        /* Return RxBuffer pointer */
        /* Offset "F0" incase of Active communication */
        *ppRxBuffer = pDataParams->pRxBuffer + offsetPos;
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	695a      	ldr	r2, [r3, #20]
 800f78c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800f790:	441a      	add	r2, r3
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	601a      	str	r2, [r3, #0]

        /* Return RxBuffer length */
        /* Offset "F0" + CRC incase of Active communication */
        *pRxLength = pDataParams->wRxBufLen - offsetLen;
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	8b5a      	ldrh	r2, [r3, #26]
 800f79a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800f79e:	b29b      	uxth	r3, r3
 800f7a0:	1ad3      	subs	r3, r2, r3
 800f7a2:	b29a      	uxth	r2, r3
 800f7a4:	683b      	ldr	r3, [r7, #0]
 800f7a6:	801a      	strh	r2, [r3, #0]
        pDataParams->wTargetMode = *pProtParams;
 800f7a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f7aa:	881a      	ldrh	r2, [r3, #0]
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	865a      	strh	r2, [r3, #50]	@ 0x32

        status = PH_ERR_SUCCESS;
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800f7b4:	e006      	b.n	800f7c4 <phhalHw_Pn5180_Autocoll+0x4dc>
    }
    else if(0U != (dwIrqReg & IRQ_STATUS_RFOFF_DET_IRQ_MASK))
 800f7b6:	697b      	ldr	r3, [r7, #20]
 800f7b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d001      	beq.n	800f7c4 <phhalHw_Pn5180_Autocoll+0x4dc>
    {
        status = PH_ERR_EXT_RF_ERROR;
 800f7c0:	2310      	movs	r3, #16
 800f7c2:	86fb      	strh	r3, [r7, #54]	@ 0x36
    else
    {
        /* QAC */
    }

    if(status != PH_ERR_SUCCESS)
 800f7c4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d009      	beq.n	800f7de <phhalHw_Pn5180_Autocoll+0x4f6>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams) );
 800f7ca:	68f8      	ldr	r0, [r7, #12]
 800f7cc:	f001 f8ef 	bl	80109ae <phhalHw_Pn5180_Instr_SwitchModeNormal>
 800f7d0:	4603      	mov	r3, r0
 800f7d2:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f7d4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d001      	beq.n	800f7de <phhalHw_Pn5180_Autocoll+0x4f6>
 800f7da:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f7dc:	e00f      	b.n	800f7fe <phhalHw_Pn5180_Autocoll+0x516>
    }

    return PH_ADD_COMPCODE(status, PH_COMP_HAL);
 800f7de:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d00b      	beq.n	800f7fc <phhalHw_Pn5180_Autocoll+0x514>
 800f7e4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f7e6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d106      	bne.n	800f7fc <phhalHw_Pn5180_Autocoll+0x514>
 800f7ee:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f7f0:	b2db      	uxtb	r3, r3
 800f7f2:	b29b      	uxth	r3, r3
 800f7f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800f7f8:	b29b      	uxth	r3, r3
 800f7fa:	e000      	b.n	800f7fe <phhalHw_Pn5180_Autocoll+0x516>
 800f7fc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
}
 800f7fe:	4618      	mov	r0, r3
 800f800:	3738      	adds	r7, #56	@ 0x38
 800f802:	46bd      	mov	sp, r7
 800f804:	bd80      	pop	{r7, pc}
 800f806:	bf00      	nop

0800f808 <phhalHw_Pn5180_Lpcd>:

phStatus_t phhalHw_Pn5180_Lpcd(
    phhalHw_Pn5180_DataParams_t * pDataParams)
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b090      	sub	sp, #64	@ 0x40
 800f80c:	af02      	add	r7, sp, #8
 800f80e:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint32_t    PH_MEMLOC_REM dwRegister;
    uint32_t    PH_MEMLOC_REM dwIrqWaitFor= 0U;
 800f810:	2300      	movs	r3, #0
 800f812:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t    PH_MEMLOC_REM dwIrqReg;
    phStatus_t  PH_MEMLOC_REM status;
    uint8_t     PH_MEMLOC_REM bEPromData[5];
    uint32_t    PH_MEMLOC_REM dwAgcValVariation = 0U;
 800f814:	2300      	movs	r3, #0
 800f816:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t    PH_MEMLOC_REM dwAgcRefVal = 0U;
 800f818:	2300      	movs	r3, #0
 800f81a:	633b      	str	r3, [r7, #48]	@ 0x30
    uint32_t    PH_MEMLOC_REM dwLpcdThreshold = 0U;
 800f81c:	2300      	movs	r3, #0
 800f81e:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t     PH_MEMLOC_REM bOcProtControl[1];

    switch (pDataParams->bLpcdMode)
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800f826:	2b00      	cmp	r3, #0
 800f828:	d002      	beq.n	800f830 <phhalHw_Pn5180_Lpcd+0x28>
 800f82a:	2b01      	cmp	r3, #1
 800f82c:	d072      	beq.n	800f914 <phhalHw_Pn5180_Lpcd+0x10c>
 800f82e:	e0c4      	b.n	800f9ba <phhalHw_Pn5180_Lpcd+0x1b2>
    {
    case PHHAL_HW_PN5180_LPCD_MODE_DEFAULT:

        /*Get the current AGC measurement*/
        PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_ReadRegister( pDataParams, AGC_REF_CONFIG, &dwRegister));
 800f830:	f107 031c 	add.w	r3, r7, #28
 800f834:	461a      	mov	r2, r3
 800f836:	2126      	movs	r1, #38	@ 0x26
 800f838:	6878      	ldr	r0, [r7, #4]
 800f83a:	f000 fd87 	bl	801034c <phhalHw_Pn5180_Instr_ReadRegister>
 800f83e:	4603      	mov	r3, r0
 800f840:	847b      	strh	r3, [r7, #34]	@ 0x22
 800f842:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f844:	2b00      	cmp	r3, #0
 800f846:	d001      	beq.n	800f84c <phhalHw_Pn5180_Lpcd+0x44>
 800f848:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f84a:	e0c9      	b.n	800f9e0 <phhalHw_Pn5180_Lpcd+0x1d8>

        PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_ReadE2Prom( pDataParams, PHHAL_HW_PN5180_LPCD_REFERENCE_VALUE_ADDR, bEPromData,  5U));
 800f84c:	f107 0210 	add.w	r2, r7, #16
 800f850:	2305      	movs	r3, #5
 800f852:	2134      	movs	r1, #52	@ 0x34
 800f854:	6878      	ldr	r0, [r7, #4]
 800f856:	f000 fef9 	bl	801064c <phhalHw_Pn5180_Instr_ReadE2Prom>
 800f85a:	4603      	mov	r3, r0
 800f85c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800f85e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f860:	2b00      	cmp	r3, #0
 800f862:	d001      	beq.n	800f868 <phhalHw_Pn5180_Lpcd+0x60>
 800f864:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f866:	e0bb      	b.n	800f9e0 <phhalHw_Pn5180_Lpcd+0x1d8>

        PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_ReadE2Prom( pDataParams, PHHAL_HW_PN5180_OCPROT_CONTROL_ADDR, bOcProtControl,  1U));
 800f868:	f107 020c 	add.w	r2, r7, #12
 800f86c:	2301      	movs	r3, #1
 800f86e:	2159      	movs	r1, #89	@ 0x59
 800f870:	6878      	ldr	r0, [r7, #4]
 800f872:	f000 feeb 	bl	801064c <phhalHw_Pn5180_Instr_ReadE2Prom>
 800f876:	4603      	mov	r3, r0
 800f878:	847b      	strh	r3, [r7, #34]	@ 0x22
 800f87a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d001      	beq.n	800f884 <phhalHw_Pn5180_Lpcd+0x7c>
 800f880:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f882:	e0ad      	b.n	800f9e0 <phhalHw_Pn5180_Lpcd+0x1d8>

        /*Use EEPROM Value for reference value*/
        if((bEPromData[4] & LPCD_REFVAL_CONTROL_MASK) == 0U )
 800f884:	7d3b      	ldrb	r3, [r7, #20]
 800f886:	f003 0303 	and.w	r3, r3, #3
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d109      	bne.n	800f8a2 <phhalHw_Pn5180_Lpcd+0x9a>
        {
            /*Get the AGC Ref Value from E2PROM*/
            dwAgcRefVal = (uint8_t)bEPromData[0];
 800f88e:	7c3b      	ldrb	r3, [r7, #16]
 800f890:	633b      	str	r3, [r7, #48]	@ 0x30
            dwAgcRefVal |= (uint16_t)((uint16_t)bEPromData[1]<<8U);
 800f892:	7c7b      	ldrb	r3, [r7, #17]
 800f894:	021b      	lsls	r3, r3, #8
 800f896:	b29b      	uxth	r3, r3
 800f898:	461a      	mov	r2, r3
 800f89a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f89c:	4313      	orrs	r3, r2
 800f89e:	633b      	str	r3, [r7, #48]	@ 0x30
 800f8a0:	e002      	b.n	800f8a8 <phhalHw_Pn5180_Lpcd+0xa0>
        }

        else
        {
            /*used the stored reference value */
            dwAgcRefVal = pDataParams->wLpcdReference;
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f8a6:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        /*Get the AGV Variation threshold*/
        dwLpcdThreshold =(uint8_t)bEPromData[3];
 800f8a8:	7cfb      	ldrb	r3, [r7, #19]
 800f8aa:	627b      	str	r3, [r7, #36]	@ 0x24

        //Store the read AGC_REF_CONFIG reg value as reference for next comparison
        pDataParams->wLpcdReference = (uint16_t)(dwRegister &(AGC_REF_CONFIG_AGC_GEAR_MASK | AGC_REF_CONFIG_AGC_VALUE_MASK));
 800f8ac:	69fb      	ldr	r3, [r7, #28]
 800f8ae:	b29b      	uxth	r3, r3
 800f8b0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f8b4:	b29a      	uxth	r2, r3
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	86da      	strh	r2, [r3, #54]	@ 0x36

        /*If TXOCP is enabled, Then we need to compare gear*/
        if((bOcProtControl[0] & 0x01U) && (dwRegister & AGC_REF_CONFIG_AGC_GEAR_MASK)!= (dwAgcRefVal & AGC_REF_CONFIG_AGC_GEAR_MASK))
 800f8ba:	7b3b      	ldrb	r3, [r7, #12]
 800f8bc:	f003 0301 	and.w	r3, r3, #1
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d009      	beq.n	800f8d8 <phhalHw_Pn5180_Lpcd+0xd0>
 800f8c4:	69fa      	ldr	r2, [r7, #28]
 800f8c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8c8:	4053      	eors	r3, r2
 800f8ca:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d002      	beq.n	800f8d8 <phhalHw_Pn5180_Lpcd+0xd0>
        {
            status = PH_ERR_SUCCESS;
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	86fb      	strh	r3, [r7, #54]	@ 0x36
            {
                status = PH_ERR_IO_TIMEOUT;
            }
        }

        break;
 800f8d6:	e073      	b.n	800f9c0 <phhalHw_Pn5180_Lpcd+0x1b8>
            dwRegister &= AGC_REF_CONFIG_AGC_VALUE_MASK;
 800f8d8:	69fb      	ldr	r3, [r7, #28]
 800f8da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f8de:	61fb      	str	r3, [r7, #28]
            dwAgcRefVal &= AGC_REF_CONFIG_AGC_VALUE_MASK;
 800f8e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f8e6:	633b      	str	r3, [r7, #48]	@ 0x30
            dwAgcValVariation = ((dwRegister > dwAgcRefVal) ?
 800f8e8:	69fb      	ldr	r3, [r7, #28]
                (dwRegister - dwAgcRefVal) : (dwAgcRefVal - dwRegister));
 800f8ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f8ec:	429a      	cmp	r2, r3
 800f8ee:	d203      	bcs.n	800f8f8 <phhalHw_Pn5180_Lpcd+0xf0>
 800f8f0:	69fa      	ldr	r2, [r7, #28]
 800f8f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8f4:	1ad3      	subs	r3, r2, r3
 800f8f6:	e002      	b.n	800f8fe <phhalHw_Pn5180_Lpcd+0xf6>
 800f8f8:	69fb      	ldr	r3, [r7, #28]
 800f8fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f8fc:	1ad3      	subs	r3, r2, r3
            dwAgcValVariation = ((dwRegister > dwAgcRefVal) ?
 800f8fe:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (dwAgcValVariation > dwLpcdThreshold)
 800f900:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f904:	429a      	cmp	r2, r3
 800f906:	d902      	bls.n	800f90e <phhalHw_Pn5180_Lpcd+0x106>
                status = PH_ERR_SUCCESS;
 800f908:	2300      	movs	r3, #0
 800f90a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        break;
 800f90c:	e058      	b.n	800f9c0 <phhalHw_Pn5180_Lpcd+0x1b8>
                status = PH_ERR_IO_TIMEOUT;
 800f90e:	2301      	movs	r3, #1
 800f910:	86fb      	strh	r3, [r7, #54]	@ 0x36
        break;
 800f912:	e055      	b.n	800f9c0 <phhalHw_Pn5180_Lpcd+0x1b8>

    case PHHAL_HW_PN5180_LPCD_MODE_POWERDOWN:
        dwIrqWaitFor = (IRQ_STATUS_LPCD_IRQ_MASK | IRQ_STATUS_GENERAL_ERROR_IRQ_MASK);
 800f914:	f44f 2320 	mov.w	r3, #655360	@ 0xa0000
 800f918:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Clear above Interrupts  */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, dwIrqWaitFor));
 800f91a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f91c:	2103      	movs	r1, #3
 800f91e:	6878      	ldr	r0, [r7, #4]
 800f920:	f000 fb00 	bl	800ff24 <phhalHw_Pn5180_Instr_WriteRegister>
 800f924:	4603      	mov	r3, r0
 800f926:	847b      	strh	r3, [r7, #34]	@ 0x22
 800f928:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d001      	beq.n	800f932 <phhalHw_Pn5180_Lpcd+0x12a>
 800f92e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f930:	e056      	b.n	800f9e0 <phhalHw_Pn5180_Lpcd+0x1d8>
        (void)phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL);
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 800f938:	2300      	movs	r3, #0
 800f93a:	2201      	movs	r2, #1
 800f93c:	2100      	movs	r1, #0
 800f93e:	f007 fbd9 	bl	80170f4 <phOsal_EventClear>

        /* Enable IRQ sources */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_ENABLE, dwIrqWaitFor));
 800f942:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f944:	2101      	movs	r1, #1
 800f946:	6878      	ldr	r0, [r7, #4]
 800f948:	f000 faec 	bl	800ff24 <phhalHw_Pn5180_Instr_WriteRegister>
 800f94c:	4603      	mov	r3, r0
 800f94e:	847b      	strh	r3, [r7, #34]	@ 0x22
 800f950:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f952:	2b00      	cmp	r3, #0
 800f954:	d001      	beq.n	800f95a <phhalHw_Pn5180_Lpcd+0x152>
 800f956:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f958:	e042      	b.n	800f9e0 <phhalHw_Pn5180_Lpcd+0x1d8>

        PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_SwitchModeLpcd(
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800f95e:	4619      	mov	r1, r3
 800f960:	6878      	ldr	r0, [r7, #4]
 800f962:	f000 ff72 	bl	801084a <phhalHw_Pn5180_Instr_SwitchModeLpcd>
 800f966:	4603      	mov	r3, r0
 800f968:	847b      	strh	r3, [r7, #34]	@ 0x22
 800f96a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d001      	beq.n	800f974 <phhalHw_Pn5180_Lpcd+0x16c>
 800f970:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f972:	e035      	b.n	800f9e0 <phhalHw_Pn5180_Lpcd+0x1d8>
            pDataParams,
            (uint16_t)(pDataParams->wWakeupCounterInMs))
            );

        /* Now wait for the IRQ */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WaitIrq(
 800f974:	f107 0318 	add.w	r3, r7, #24
 800f978:	9300      	str	r3, [sp, #0]
 800f97a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f97c:	2200      	movs	r2, #0
 800f97e:	2101      	movs	r1, #1
 800f980:	6878      	ldr	r0, [r7, #4]
 800f982:	f002 fe43 	bl	801260c <phhalHw_Pn5180_WaitIrq>
 800f986:	4603      	mov	r3, r0
 800f988:	847b      	strh	r3, [r7, #34]	@ 0x22
 800f98a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d001      	beq.n	800f994 <phhalHw_Pn5180_Lpcd+0x18c>
 800f990:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f992:	e025      	b.n	800f9e0 <phhalHw_Pn5180_Lpcd+0x1d8>
            PH_ON,
            PH_OFF,
            dwIrqWaitFor,
            &dwIrqReg));

        if(0U != (dwIrqReg & IRQ_STATUS_LPCD_IRQ_MASK))
 800f994:	69bb      	ldr	r3, [r7, #24]
 800f996:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d002      	beq.n	800f9a4 <phhalHw_Pn5180_Lpcd+0x19c>
        {
            status = PH_ERR_SUCCESS;
 800f99e:	2300      	movs	r3, #0
 800f9a0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        }
        else
        {
            status = PH_ERR_IO_TIMEOUT;
        }
        break;
 800f9a2:	e00d      	b.n	800f9c0 <phhalHw_Pn5180_Lpcd+0x1b8>
        else if (0U != (dwIrqReg & IRQ_STATUS_GENERAL_ERROR_IRQ_MASK))
 800f9a4:	69bb      	ldr	r3, [r7, #24]
 800f9a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d002      	beq.n	800f9b4 <phhalHw_Pn5180_Lpcd+0x1ac>
            status = PH_ERR_INVALID_PARAMETER;
 800f9ae:	2321      	movs	r3, #33	@ 0x21
 800f9b0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        break;
 800f9b2:	e005      	b.n	800f9c0 <phhalHw_Pn5180_Lpcd+0x1b8>
            status = PH_ERR_IO_TIMEOUT;
 800f9b4:	2301      	movs	r3, #1
 800f9b6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        break;
 800f9b8:	e002      	b.n	800f9c0 <phhalHw_Pn5180_Lpcd+0x1b8>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800f9ba:	f240 2321 	movw	r3, #545	@ 0x221
 800f9be:	e00f      	b.n	800f9e0 <phhalHw_Pn5180_Lpcd+0x1d8>
    }

    return PH_ADD_COMPCODE(status, PH_COMP_HAL);
 800f9c0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d00b      	beq.n	800f9de <phhalHw_Pn5180_Lpcd+0x1d6>
 800f9c6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f9c8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d106      	bne.n	800f9de <phhalHw_Pn5180_Lpcd+0x1d6>
 800f9d0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f9d2:	b2db      	uxtb	r3, r3
 800f9d4:	b29b      	uxth	r3, r3
 800f9d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800f9da:	b29b      	uxth	r3, r3
 800f9dc:	e000      	b.n	800f9e0 <phhalHw_Pn5180_Lpcd+0x1d8>
 800f9de:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
}
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	3738      	adds	r7, #56	@ 0x38
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd80      	pop	{r7, pc}

0800f9e8 <phhalHw_Pn5180_I18000p3m3Inventory>:
    uint8_t * pBeginRndCmd,             /**< [In] ISO 18000p3m3 BeginRound command frame. This is 17bits i.e., 3 bytes are expected. CRC5 should not be provided. */
    uint8_t bTSprocessing,              /**< [In] TimeSlot processing behavior. */
    uint8_t ** ppRxBuffer,              /**< [In] Pointer to HAL Rx Buffer containing response from single/multiple tags. */
    uint16_t * wRxBufferLen             /**< [In] Length of response in hal Rx Buffer. */
    )
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b08e      	sub	sp, #56	@ 0x38
 800f9ec:	af02      	add	r7, sp, #8
 800f9ee:	60f8      	str	r0, [r7, #12]
 800f9f0:	60b9      	str	r1, [r7, #8]
 800f9f2:	4611      	mov	r1, r2
 800f9f4:	461a      	mov	r2, r3
 800f9f6:	460b      	mov	r3, r1
 800f9f8:	71fb      	strb	r3, [r7, #7]
 800f9fa:	4613      	mov	r3, r2
 800f9fc:	71bb      	strb	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM statusTmp = PH_ERR_SUCCESS;
 800f9fe:	2300      	movs	r3, #0
 800fa00:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 800fa02:	2300      	movs	r3, #0
 800fa04:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    uint16_t  PH_MEMLOC_REM ResultSize;
    uint32_t  PH_MEMLOC_REM dwIrqWaitFor;
    uint8_t  PH_MEMLOC_REM bTarget = 0U;
 800fa06:	2300      	movs	r3, #0
 800fa08:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    uint8_t  PH_MEMLOC_REM bSession = 0U;
 800fa0c:	2300      	movs	r3, #0
 800fa0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint32_t PH_MEMLOC_REM dwIrqReg;
    phOsal_EventBits_t PH_MEMLOC_REM dwEventFlags;
    uint8_t    PH_MEMLOC_COUNT bQ = 1;
 800fa12:	2301      	movs	r3, #1
 800fa14:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    uint8_t    PH_MEMLOC_REM bBuff1, bBuff2;
    uint16_t   PH_MEMLOC_REM index=0;
 800fa18:	2300      	movs	r3, #0
 800fa1a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint8_t    PH_MEMLOC_REM numOfSlots=0;
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

    /* Check all the pointers */
    PH_ASSERT_NULL(pSelCmd);
 800fa22:	68bb      	ldr	r3, [r7, #8]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d101      	bne.n	800fa2c <phhalHw_Pn5180_I18000p3m3Inventory+0x44>
 800fa28:	2321      	movs	r3, #33	@ 0x21
 800fa2a:	e16b      	b.n	800fd04 <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
    PH_ASSERT_NULL(pBeginRndCmd);
 800fa2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d101      	bne.n	800fa36 <phhalHw_Pn5180_I18000p3m3Inventory+0x4e>
 800fa32:	2321      	movs	r3, #33	@ 0x21
 800fa34:	e166      	b.n	800fd04 <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
    PH_ASSERT_NULL(ppRxBuffer);
 800fa36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d101      	bne.n	800fa40 <phhalHw_Pn5180_I18000p3m3Inventory+0x58>
 800fa3c:	2321      	movs	r3, #33	@ 0x21
 800fa3e:	e161      	b.n	800fd04 <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
    PH_ASSERT_NULL(wRxBufferLen);
 800fa40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d101      	bne.n	800fa4a <phhalHw_Pn5180_I18000p3m3Inventory+0x62>
 800fa46:	2321      	movs	r3, #33	@ 0x21
 800fa48:	e15c      	b.n	800fd04 <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>

    if(bSelCmdLen > 0U)
 800fa4a:	79fb      	ldrb	r3, [r7, #7]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d02f      	beq.n	800fab0 <phhalHw_Pn5180_I18000p3m3Inventory+0xc8>
    {
        bTarget = pSelCmd[0];
 800fa50:	68bb      	ldr	r3, [r7, #8]
 800fa52:	781b      	ldrb	r3, [r3, #0]
 800fa54:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        bTarget = bTarget>> 1U;
 800fa58:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fa5c:	085b      	lsrs	r3, r3, #1
 800fa5e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        bTarget = bTarget&0x07U;
 800fa62:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fa66:	f003 0307 	and.w	r3, r3, #7
 800fa6a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

        bSession = pBeginRndCmd[1]>> 4U;
 800fa6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa70:	3301      	adds	r3, #1
 800fa72:	781b      	ldrb	r3, [r3, #0]
 800fa74:	091b      	lsrs	r3, r3, #4
 800fa76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        bSession &= 0x03U;
 800fa7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fa7e:	f003 0303 	and.w	r3, r3, #3
 800fa82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        switch(bSession)
 800fa86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d001      	beq.n	800fa92 <phhalHw_Pn5180_I18000p3m3Inventory+0xaa>
 800fa8e:	2b02      	cmp	r3, #2
 800fa90:	d109      	bne.n	800faa6 <phhalHw_Pn5180_I18000p3m3Inventory+0xbe>
        {
        case 0:
        case 2:
        {
            if(bSession != bTarget)
 800fa92:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800fa96:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fa9a:	429a      	cmp	r2, r3
 800fa9c:	d007      	beq.n	800faae <phhalHw_Pn5180_I18000p3m3Inventory+0xc6>
            {
                statusTmp = (PH_ERR_INVALID_PARAMETER | PH_COMP_HAL);
 800fa9e:	f240 2321 	movw	r3, #545	@ 0x221
 800faa2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            }
            break;
 800faa4:	e003      	b.n	800faae <phhalHw_Pn5180_I18000p3m3Inventory+0xc6>
        }
        default:
            statusTmp = (PH_ERR_INVALID_PARAMETER | PH_COMP_HAL);
 800faa6:	f240 2321 	movw	r3, #545	@ 0x221
 800faaa:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800faac:	e000      	b.n	800fab0 <phhalHw_Pn5180_I18000p3m3Inventory+0xc8>
            break;
 800faae:	bf00      	nop
        }

    }

    if (pDataParams->bPollGuardTimeFlag == PH_ON)
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800fab6:	2b01      	cmp	r3, #1
 800fab8:	d120      	bne.n	800fafc <phhalHw_Pn5180_I18000p3m3Inventory+0x114>
    {
        pDataParams->bPollGuardTimeFlag = PH_OFF;
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	2200      	movs	r2, #0
 800fabe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        /* When there is no errors in preconditions wait till timer expire. */
        if (statusTmp == PH_ERR_SUCCESS)
 800fac2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d110      	bne.n	800faea <phhalHw_Pn5180_I18000p3m3Inventory+0x102>
        {
            /* Wait for the Poll Guard Time to Expire. */
            (void)phOsal_EventPend(&xEventHandle, (phOsal_EventOpt_t)(E_OS_EVENT_OPT_PEND_SET_ANY | E_OS_EVENT_OPT_PEND_CLEAR_ON_EXIT),
 800fac8:	f107 0314 	add.w	r3, r7, #20
 800facc:	9300      	str	r3, [sp, #0]
 800face:	2322      	movs	r3, #34	@ 0x22
 800fad0:	f04f 32ff 	mov.w	r2, #4294967295
 800fad4:	2105      	movs	r1, #5
 800fad6:	488d      	ldr	r0, [pc, #564]	@ (800fd0c <phhalHw_Pn5180_I18000p3m3Inventory+0x324>)
 800fad8:	f007 fa40 	bl	8016f5c <phOsal_EventPend>
                    PHOSAL_MAX_DELAY, E_PH_OSAL_EVT_GT_EXP | E_PH_OSAL_EVT_ABORT, &dwEventFlags);
            if(0U != (dwEventFlags & E_PH_OSAL_EVT_ABORT))
 800fadc:	697b      	ldr	r3, [r7, #20]
 800fade:	f003 0320 	and.w	r3, r3, #32
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d001      	beq.n	800faea <phhalHw_Pn5180_I18000p3m3Inventory+0x102>
            {
                statusTmp = PH_ERR_ABORTED;
 800fae6:	2312      	movs	r3, #18
 800fae8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            }
        }

        /* Stop Timer */
        PH_CHECK_SUCCESS_FCT(status, phDriver_TimerStop());
 800faea:	f007 f939 	bl	8016d60 <phDriver_TimerStop>
 800faee:	4603      	mov	r3, r0
 800faf0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800faf2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d001      	beq.n	800fafc <phhalHw_Pn5180_I18000p3m3Inventory+0x114>
 800faf8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800fafa:	e103      	b.n	800fd04 <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
    }

    if (statusTmp != PH_ERR_SUCCESS)
 800fafc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d001      	beq.n	800fb06 <phhalHw_Pn5180_I18000p3m3Inventory+0x11e>
    {
        return statusTmp;
 800fb02:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fb04:	e0fe      	b.n	800fd04 <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
    }

    dwIrqWaitFor = (IRQ_STATUS_RX_IRQ_MASK | IRQ_STATUS_GENERAL_ERROR_IRQ_MASK);
 800fb06:	4b82      	ldr	r3, [pc, #520]	@ (800fd10 <phhalHw_Pn5180_I18000p3m3Inventory+0x328>)
 800fb08:	623b      	str	r3, [r7, #32]

    /* Clear Interrupts  */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, PHHAL_HW_PN5180_IRQ_SET_CLEAR_ALL_MASK));
 800fb0a:	4a82      	ldr	r2, [pc, #520]	@ (800fd14 <phhalHw_Pn5180_I18000p3m3Inventory+0x32c>)
 800fb0c:	2103      	movs	r1, #3
 800fb0e:	68f8      	ldr	r0, [r7, #12]
 800fb10:	f000 fa08 	bl	800ff24 <phhalHw_Pn5180_Instr_WriteRegister>
 800fb14:	4603      	mov	r3, r0
 800fb16:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800fb18:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d001      	beq.n	800fb22 <phhalHw_Pn5180_I18000p3m3Inventory+0x13a>
 800fb1e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fb20:	e0f0      	b.n	800fd04 <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>

    /* Clear the Rf Event. */
    PH_CHECK_SUCCESS_FCT(status, phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL));
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 800fb28:	2300      	movs	r3, #0
 800fb2a:	2201      	movs	r2, #1
 800fb2c:	2100      	movs	r1, #0
 800fb2e:	f007 fae1 	bl	80170f4 <phOsal_EventClear>
 800fb32:	4603      	mov	r3, r0
 800fb34:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800fb36:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d001      	beq.n	800fb40 <phhalHw_Pn5180_I18000p3m3Inventory+0x158>
 800fb3c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800fb3e:	e0e1      	b.n	800fd04 <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>

    /* Enable IRQ sources */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, IRQ_ENABLE, dwIrqWaitFor));
 800fb40:	6a3a      	ldr	r2, [r7, #32]
 800fb42:	2101      	movs	r1, #1
 800fb44:	68f8      	ldr	r0, [r7, #12]
 800fb46:	f000 fa63 	bl	8010010 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 800fb4a:	4603      	mov	r3, r0
 800fb4c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800fb4e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d001      	beq.n	800fb58 <phhalHw_Pn5180_I18000p3m3Inventory+0x170>
 800fb54:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fb56:	e0d5      	b.n	800fd04 <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>

    if (bTSprocessing == PHHAL_HW_I18000P3M3_GET_MAX_RESPS)
 800fb58:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d101      	bne.n	800fb64 <phhalHw_Pn5180_I18000p3m3Inventory+0x17c>
    {
        bSelCmdLen = 0U;
 800fb60:	2300      	movs	r3, #0
 800fb62:	71fb      	strb	r3, [r7, #7]
    }

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_EpcGen2Inventory(
 800fb64:	79b9      	ldrb	r1, [r7, #6]
 800fb66:	79fa      	ldrb	r2, [r7, #7]
 800fb68:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800fb6c:	9301      	str	r3, [sp, #4]
 800fb6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb70:	9300      	str	r3, [sp, #0]
 800fb72:	460b      	mov	r3, r1
 800fb74:	68b9      	ldr	r1, [r7, #8]
 800fb76:	68f8      	ldr	r0, [r7, #12]
 800fb78:	f000 ff4e 	bl	8010a18 <phhalHw_Pn5180_Instr_EpcGen2Inventory>
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800fb80:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d001      	beq.n	800fb8a <phhalHw_Pn5180_I18000p3m3Inventory+0x1a2>
 800fb86:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fb88:	e0bc      	b.n	800fd04 <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
        pBeginRndCmd,
        bTSprocessing
        ));

    /* Now wait for the IRQ */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WaitIrq(
 800fb8a:	f107 0318 	add.w	r3, r7, #24
 800fb8e:	9300      	str	r3, [sp, #0]
 800fb90:	6a3b      	ldr	r3, [r7, #32]
 800fb92:	2200      	movs	r2, #0
 800fb94:	2101      	movs	r1, #1
 800fb96:	68f8      	ldr	r0, [r7, #12]
 800fb98:	f002 fd38 	bl	801260c <phhalHw_Pn5180_WaitIrq>
 800fb9c:	4603      	mov	r3, r0
 800fb9e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800fba0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d001      	beq.n	800fbaa <phhalHw_Pn5180_I18000p3m3Inventory+0x1c2>
 800fba6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fba8:	e0ac      	b.n	800fd04 <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
        PH_OFF,
        dwIrqWaitFor,
        &dwIrqReg));

    /* Check if an error has occured */
    if (0U != (dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))
 800fbaa:	69bb      	ldr	r3, [r7, #24]
 800fbac:	f003 0301 	and.w	r3, r3, #1
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	f000 8095 	beq.w	800fce0 <phhalHw_Pn5180_I18000p3m3Inventory+0x2f8>
    {
        /*Retrieve the result size and result*/
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize( pDataParams, &ResultSize));
 800fbb6:	f107 031c 	add.w	r3, r7, #28
 800fbba:	4619      	mov	r1, r3
 800fbbc:	68f8      	ldr	r0, [r7, #12]
 800fbbe:	f000 ffba 	bl	8010b36 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize>
 800fbc2:	4603      	mov	r3, r0
 800fbc4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800fbc6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d001      	beq.n	800fbd0 <phhalHw_Pn5180_I18000p3m3Inventory+0x1e8>
 800fbcc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fbce:	e099      	b.n	800fd04 <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_EpcGen2RetrieveResult( pDataParams, ppRxBuffer, ResultSize));
 800fbd0:	8bbb      	ldrh	r3, [r7, #28]
 800fbd2:	461a      	mov	r2, r3
 800fbd4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fbd6:	68f8      	ldr	r0, [r7, #12]
 800fbd8:	f001 f803 	bl	8010be2 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult>
 800fbdc:	4603      	mov	r3, r0
 800fbde:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800fbe0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d001      	beq.n	800fbea <phhalHw_Pn5180_I18000p3m3Inventory+0x202>
 800fbe6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fbe8:	e08c      	b.n	800fd04 <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>

        *wRxBufferLen = ResultSize;
 800fbea:	8bba      	ldrh	r2, [r7, #28]
 800fbec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fbee:	801a      	strh	r2, [r3, #0]
        if(ResultSize > 0U)
 800fbf0:	8bbb      	ldrh	r3, [r7, #28]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d071      	beq.n	800fcda <phhalHw_Pn5180_I18000p3m3Inventory+0x2f2>
            /* Response length is 3bytes by default. With 1st byte indicating Response status.
             * If 1st Byte has value '2' it indicates there is no response in any Timeslot,
             * all other values indicate response availability.(As specified in PN5180 Instruction Layer document) */

            /* Extract bQ value from pBeginRndCmd */
            bBuff1 = *(pBeginRndCmd + 1) & (uint8_t)0x7;
 800fbf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbf8:	3301      	adds	r3, #1
 800fbfa:	781b      	ldrb	r3, [r3, #0]
 800fbfc:	f003 0307 	and.w	r3, r3, #7
 800fc00:	77fb      	strb	r3, [r7, #31]
            bBuff2 = *(pBeginRndCmd + 2) & (uint8_t)0x80;
 800fc02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc04:	3302      	adds	r3, #2
 800fc06:	781b      	ldrb	r3, [r3, #0]
 800fc08:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800fc0c:	77bb      	strb	r3, [r7, #30]

            bQ = (bBuff1 << 1) | (bBuff2 >> 7);
 800fc0e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fc12:	005b      	lsls	r3, r3, #1
 800fc14:	b25a      	sxtb	r2, r3
 800fc16:	7fbb      	ldrb	r3, [r7, #30]
 800fc18:	09db      	lsrs	r3, r3, #7
 800fc1a:	b2db      	uxtb	r3, r3
 800fc1c:	b25b      	sxtb	r3, r3
 800fc1e:	4313      	orrs	r3, r2
 800fc20:	b25b      	sxtb	r3, r3
 800fc22:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

            index=0;
 800fc26:	2300      	movs	r3, #0
 800fc28:	857b      	strh	r3, [r7, #42]	@ 0x2a
            numOfSlots= 1 << bQ;
 800fc2a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fc2e:	2201      	movs	r2, #1
 800fc30:	fa02 f303 	lsl.w	r3, r2, r3
 800fc34:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

            while(numOfSlots)
 800fc38:	e04a      	b.n	800fcd0 <phhalHw_Pn5180_I18000p3m3Inventory+0x2e8>
            {
                if( ( (*ppRxBuffer)[index] == 2 )
 800fc3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fc3c:	681a      	ldr	r2, [r3, #0]
 800fc3e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fc40:	4413      	add	r3, r2
 800fc42:	781b      	ldrb	r3, [r3, #0]
 800fc44:	2b02      	cmp	r3, #2
 800fc46:	d112      	bne.n	800fc6e <phhalHw_Pn5180_I18000p3m3Inventory+0x286>
                    && ( (*ppRxBuffer)[index + 1] == 0 )
 800fc48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fc4a:	681a      	ldr	r2, [r3, #0]
 800fc4c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fc4e:	3301      	adds	r3, #1
 800fc50:	4413      	add	r3, r2
 800fc52:	781b      	ldrb	r3, [r3, #0]
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d10a      	bne.n	800fc6e <phhalHw_Pn5180_I18000p3m3Inventory+0x286>
                    && ( (*ppRxBuffer)[index + 2] == 0 )
 800fc58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fc5a:	681a      	ldr	r2, [r3, #0]
 800fc5c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fc5e:	3302      	adds	r3, #2
 800fc60:	4413      	add	r3, r2
 800fc62:	781b      	ldrb	r3, [r3, #0]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d102      	bne.n	800fc6e <phhalHw_Pn5180_I18000p3m3Inventory+0x286>
                    )
                {
                    status = PH_ERR_IO_TIMEOUT;
 800fc68:	2301      	movs	r3, #1
 800fc6a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800fc6c:	e028      	b.n	800fcc0 <phhalHw_Pn5180_I18000p3m3Inventory+0x2d8>
                }
                else if( ( (*ppRxBuffer)[index] == 3 )
 800fc6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fc70:	681a      	ldr	r2, [r3, #0]
 800fc72:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fc74:	4413      	add	r3, r2
 800fc76:	781b      	ldrb	r3, [r3, #0]
 800fc78:	2b03      	cmp	r3, #3
 800fc7a:	d11e      	bne.n	800fcba <phhalHw_Pn5180_I18000p3m3Inventory+0x2d2>
                    && ( (*ppRxBuffer)[index + 1] == 0 )
 800fc7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fc7e:	681a      	ldr	r2, [r3, #0]
 800fc80:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fc82:	3301      	adds	r3, #1
 800fc84:	4413      	add	r3, r2
 800fc86:	781b      	ldrb	r3, [r3, #0]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d116      	bne.n	800fcba <phhalHw_Pn5180_I18000p3m3Inventory+0x2d2>
                    && ( (*ppRxBuffer)[index + 2] == 0 )
 800fc8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fc8e:	681a      	ldr	r2, [r3, #0]
 800fc90:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fc92:	3302      	adds	r3, #2
 800fc94:	4413      	add	r3, r2
 800fc96:	781b      	ldrb	r3, [r3, #0]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d10e      	bne.n	800fcba <phhalHw_Pn5180_I18000p3m3Inventory+0x2d2>
                    )
                {
                    status = PH_ERR_COLLISION_ERROR;
 800fc9c:	2303      	movs	r3, #3
 800fc9e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                    // If TimeSlot behaviour is ONE_TS_ONLY or GET_TAG_HANDLE
                    if(bTSprocessing & PHHAL_HW_I18000P3M3_ONE_TS_ONLY ||
 800fca0:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800fca4:	f003 0301 	and.w	r3, r3, #1
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d11b      	bne.n	800fce4 <phhalHw_Pn5180_I18000p3m3Inventory+0x2fc>
                        bTSprocessing & PHHAL_HW_I18000P3M3_GET_TAG_HANDLE)
 800fcac:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800fcb0:	f003 0302 	and.w	r3, r3, #2
                    if(bTSprocessing & PHHAL_HW_I18000P3M3_ONE_TS_ONLY ||
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d115      	bne.n	800fce4 <phhalHw_Pn5180_I18000p3m3Inventory+0x2fc>
 800fcb8:	e002      	b.n	800fcc0 <phhalHw_Pn5180_I18000p3m3Inventory+0x2d8>
                        break;
                    }
                }
                else
                {
                    status = PH_ERR_SUCCESS;
 800fcba:	2300      	movs	r3, #0
 800fcbc:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                    break;
 800fcbe:	e011      	b.n	800fce4 <phhalHw_Pn5180_I18000p3m3Inventory+0x2fc>
                }
                index=index+3;
 800fcc0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fcc2:	3303      	adds	r3, #3
 800fcc4:	857b      	strh	r3, [r7, #42]	@ 0x2a
                numOfSlots--;
 800fcc6:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800fcca:	3b01      	subs	r3, #1
 800fccc:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
            while(numOfSlots)
 800fcd0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d1b0      	bne.n	800fc3a <phhalHw_Pn5180_I18000p3m3Inventory+0x252>
 800fcd8:	e004      	b.n	800fce4 <phhalHw_Pn5180_I18000p3m3Inventory+0x2fc>
            }
        }
        else
        {
            status = PH_ERR_INTERNAL_ERROR;
 800fcda:	237f      	movs	r3, #127	@ 0x7f
 800fcdc:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800fcde:	e001      	b.n	800fce4 <phhalHw_Pn5180_I18000p3m3Inventory+0x2fc>
        }
    }
    else
    {
        status = PH_ERR_IO_TIMEOUT;
 800fce0:	2301      	movs	r3, #1
 800fce2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    }

    return PH_ADD_COMPCODE(status, PH_COMP_HAL);
 800fce4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d00b      	beq.n	800fd02 <phhalHw_Pn5180_I18000p3m3Inventory+0x31a>
 800fcea:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800fcec:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d106      	bne.n	800fd02 <phhalHw_Pn5180_I18000p3m3Inventory+0x31a>
 800fcf4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800fcf6:	b2db      	uxtb	r3, r3
 800fcf8:	b29b      	uxth	r3, r3
 800fcfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800fcfe:	b29b      	uxth	r3, r3
 800fd00:	e000      	b.n	800fd04 <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
 800fd02:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
}
 800fd04:	4618      	mov	r0, r3
 800fd06:	3730      	adds	r7, #48	@ 0x30
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	bd80      	pop	{r7, pc}
 800fd0c:	2000178c 	.word	0x2000178c
 800fd10:	00020001 	.word	0x00020001
 800fd14:	000fffff 	.word	0x000fffff

0800fd18 <phhalHw_Pn5180_18000p3m3ResumeInventory>:
phStatus_t phhalHw_Pn5180_18000p3m3ResumeInventory(
    phhalHw_Pn5180_DataParams_t * pDataParams,  /**< [In] Pointer to this layer's parameter structure. */
    uint8_t ** ppRxBuffer,                      /**< [In] Pointer to HAL Rx Buffer containing response from single/multiple tags. */
    uint16_t * wRxBufferLen                     /**< [In] Length of response in hal Rx Buffer. */
    )
{
 800fd18:	b580      	push	{r7, lr}
 800fd1a:	b08a      	sub	sp, #40	@ 0x28
 800fd1c:	af02      	add	r7, sp, #8
 800fd1e:	60f8      	str	r0, [r7, #12]
 800fd20:	60b9      	str	r1, [r7, #8]
 800fd22:	607a      	str	r2, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 800fd24:	2300      	movs	r3, #0
 800fd26:	83fb      	strh	r3, [r7, #30]
    uint16_t  PH_MEMLOC_REM ResultSize;
    uint32_t  PH_MEMLOC_REM dwIrqWaitFor;
    uint32_t PH_MEMLOC_REM dwIrqReg;

    /* Check all the pointers */
    PH_ASSERT_NULL(ppRxBuffer);
 800fd28:	68bb      	ldr	r3, [r7, #8]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d101      	bne.n	800fd32 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x1a>
 800fd2e:	2321      	movs	r3, #33	@ 0x21
 800fd30:	e07d      	b.n	800fe2e <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>
    PH_ASSERT_NULL(wRxBufferLen);
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d101      	bne.n	800fd3c <phhalHw_Pn5180_18000p3m3ResumeInventory+0x24>
 800fd38:	2321      	movs	r3, #33	@ 0x21
 800fd3a:	e078      	b.n	800fe2e <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>

    dwIrqWaitFor =  (IRQ_STATUS_RX_IRQ_MASK| IRQ_STATUS_GENERAL_ERROR_IRQ_MASK);
 800fd3c:	4b3e      	ldr	r3, [pc, #248]	@ (800fe38 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x120>)
 800fd3e:	61bb      	str	r3, [r7, #24]

    /* Clear Interrupts  */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, dwIrqWaitFor));
 800fd40:	69ba      	ldr	r2, [r7, #24]
 800fd42:	2103      	movs	r1, #3
 800fd44:	68f8      	ldr	r0, [r7, #12]
 800fd46:	f000 f8ed 	bl	800ff24 <phhalHw_Pn5180_Instr_WriteRegister>
 800fd4a:	4603      	mov	r3, r0
 800fd4c:	82fb      	strh	r3, [r7, #22]
 800fd4e:	8afb      	ldrh	r3, [r7, #22]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d001      	beq.n	800fd58 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x40>
 800fd54:	8afb      	ldrh	r3, [r7, #22]
 800fd56:	e06a      	b.n	800fe2e <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>

    (void)phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL);
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 800fd5e:	2300      	movs	r3, #0
 800fd60:	2201      	movs	r2, #1
 800fd62:	2100      	movs	r1, #0
 800fd64:	f007 f9c6 	bl	80170f4 <phOsal_EventClear>

    /* Enable IRQ sources */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, IRQ_ENABLE, dwIrqWaitFor));
 800fd68:	69ba      	ldr	r2, [r7, #24]
 800fd6a:	2101      	movs	r1, #1
 800fd6c:	68f8      	ldr	r0, [r7, #12]
 800fd6e:	f000 f94f 	bl	8010010 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 800fd72:	4603      	mov	r3, r0
 800fd74:	82fb      	strh	r3, [r7, #22]
 800fd76:	8afb      	ldrh	r3, [r7, #22]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d001      	beq.n	800fd80 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x68>
 800fd7c:	8afb      	ldrh	r3, [r7, #22]
 800fd7e:	e056      	b.n	800fe2e <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_EpcGen2ResumeInventory(pDataParams));
 800fd80:	68f8      	ldr	r0, [r7, #12]
 800fd82:	f000 ff8e 	bl	8010ca2 <phhalHw_Pn5180_Instr_EpcGen2ResumeInventory>
 800fd86:	4603      	mov	r3, r0
 800fd88:	82fb      	strh	r3, [r7, #22]
 800fd8a:	8afb      	ldrh	r3, [r7, #22]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d001      	beq.n	800fd94 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x7c>
 800fd90:	8afb      	ldrh	r3, [r7, #22]
 800fd92:	e04c      	b.n	800fe2e <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>

    /* Now wait for the IRQ */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WaitIrq(
 800fd94:	f107 0310 	add.w	r3, r7, #16
 800fd98:	9300      	str	r3, [sp, #0]
 800fd9a:	69bb      	ldr	r3, [r7, #24]
 800fd9c:	2200      	movs	r2, #0
 800fd9e:	2101      	movs	r1, #1
 800fda0:	68f8      	ldr	r0, [r7, #12]
 800fda2:	f002 fc33 	bl	801260c <phhalHw_Pn5180_WaitIrq>
 800fda6:	4603      	mov	r3, r0
 800fda8:	82fb      	strh	r3, [r7, #22]
 800fdaa:	8afb      	ldrh	r3, [r7, #22]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d001      	beq.n	800fdb4 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x9c>
 800fdb0:	8afb      	ldrh	r3, [r7, #22]
 800fdb2:	e03c      	b.n	800fe2e <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>
        PH_OFF,
        dwIrqWaitFor,
        &dwIrqReg));

    /* Check if an error has occurred */
    if (0U != (dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))
 800fdb4:	693b      	ldr	r3, [r7, #16]
 800fdb6:	f003 0301 	and.w	r3, r3, #1
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d025      	beq.n	800fe0a <phhalHw_Pn5180_18000p3m3ResumeInventory+0xf2>
    {
        /*Retrieve the result size and result*/
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize( pDataParams, &ResultSize));
 800fdbe:	f107 0314 	add.w	r3, r7, #20
 800fdc2:	4619      	mov	r1, r3
 800fdc4:	68f8      	ldr	r0, [r7, #12]
 800fdc6:	f000 feb6 	bl	8010b36 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize>
 800fdca:	4603      	mov	r3, r0
 800fdcc:	82fb      	strh	r3, [r7, #22]
 800fdce:	8afb      	ldrh	r3, [r7, #22]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d001      	beq.n	800fdd8 <phhalHw_Pn5180_18000p3m3ResumeInventory+0xc0>
 800fdd4:	8afb      	ldrh	r3, [r7, #22]
 800fdd6:	e02a      	b.n	800fe2e <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>

        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_EpcGen2RetrieveResult( pDataParams, ppRxBuffer, ResultSize));
 800fdd8:	8abb      	ldrh	r3, [r7, #20]
 800fdda:	461a      	mov	r2, r3
 800fddc:	68b9      	ldr	r1, [r7, #8]
 800fdde:	68f8      	ldr	r0, [r7, #12]
 800fde0:	f000 feff 	bl	8010be2 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult>
 800fde4:	4603      	mov	r3, r0
 800fde6:	82fb      	strh	r3, [r7, #22]
 800fde8:	8afb      	ldrh	r3, [r7, #22]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d001      	beq.n	800fdf2 <phhalHw_Pn5180_18000p3m3ResumeInventory+0xda>
 800fdee:	8afb      	ldrh	r3, [r7, #22]
 800fdf0:	e01d      	b.n	800fe2e <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>

        *wRxBufferLen = ResultSize;
 800fdf2:	8aba      	ldrh	r2, [r7, #20]
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	801a      	strh	r2, [r3, #0]

        if(ResultSize>0U)
 800fdf8:	8abb      	ldrh	r3, [r7, #20]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d002      	beq.n	800fe04 <phhalHw_Pn5180_18000p3m3ResumeInventory+0xec>
        {
            status = PH_ERR_SUCCESS;
 800fdfe:	2300      	movs	r3, #0
 800fe00:	83fb      	strh	r3, [r7, #30]
 800fe02:	e004      	b.n	800fe0e <phhalHw_Pn5180_18000p3m3ResumeInventory+0xf6>
        }
        else
        {
            status = PH_ERR_INTERNAL_ERROR;
 800fe04:	237f      	movs	r3, #127	@ 0x7f
 800fe06:	83fb      	strh	r3, [r7, #30]
 800fe08:	e001      	b.n	800fe0e <phhalHw_Pn5180_18000p3m3ResumeInventory+0xf6>
        }
    }
    else
    {
        status = PH_ERR_IO_TIMEOUT;
 800fe0a:	2301      	movs	r3, #1
 800fe0c:	83fb      	strh	r3, [r7, #30]
    }

    return PH_ADD_COMPCODE(status, PH_COMP_HAL);
 800fe0e:	8bfb      	ldrh	r3, [r7, #30]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d00b      	beq.n	800fe2c <phhalHw_Pn5180_18000p3m3ResumeInventory+0x114>
 800fe14:	8bfb      	ldrh	r3, [r7, #30]
 800fe16:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d106      	bne.n	800fe2c <phhalHw_Pn5180_18000p3m3ResumeInventory+0x114>
 800fe1e:	8bfb      	ldrh	r3, [r7, #30]
 800fe20:	b2db      	uxtb	r3, r3
 800fe22:	b29b      	uxth	r3, r3
 800fe24:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800fe28:	b29b      	uxth	r3, r3
 800fe2a:	e000      	b.n	800fe2e <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>
 800fe2c:	8bfb      	ldrh	r3, [r7, #30]
}
 800fe2e:	4618      	mov	r0, r3
 800fe30:	3720      	adds	r7, #32
 800fe32:	46bd      	mov	sp, r7
 800fe34:	bd80      	pop	{r7, pc}
 800fe36:	bf00      	nop
 800fe38:	00020001 	.word	0x00020001

0800fe3c <phhalHw_Pn5180_Reset>:
    /* Delete event */
    return phOsal_EventDelete(&pDataParams->HwEventObj.EventHandle);
}

static void phhalHw_Pn5180_Reset(void)
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	af00      	add	r7, sp, #0
    /* As per current design, phDriver will not be implemented on PC Host side */
#ifndef _WIN32
    /* Send the reset pulse to FE to reset. */
    phDriver_PinWrite(PHDRIVER_PIN_RESET, RESET_POWERUP_LEVEL);
 800fe40:	2201      	movs	r2, #1
 800fe42:	2120      	movs	r1, #32
 800fe44:	4810      	ldr	r0, [pc, #64]	@ (800fe88 <phhalHw_Pn5180_Reset+0x4c>)
 800fe46:	f006 ff2f 	bl	8016ca8 <phDriver_PinWrite>
    /* delay of ~2 ms */
    phDriver_TimerStart(PH_DRIVER_TIMER_MILLI_SECS, PHHAL_HW_PN5180_RESET_DELAY_MILLI_SECS, NULL);
 800fe4a:	2200      	movs	r2, #0
 800fe4c:	2102      	movs	r1, #2
 800fe4e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800fe52:	f006 ff3b 	bl	8016ccc <phDriver_TimerStart>

    phDriver_PinWrite(PHDRIVER_PIN_RESET, RESET_POWERDOWN_LEVEL);
 800fe56:	2200      	movs	r2, #0
 800fe58:	2120      	movs	r1, #32
 800fe5a:	480b      	ldr	r0, [pc, #44]	@ (800fe88 <phhalHw_Pn5180_Reset+0x4c>)
 800fe5c:	f006 ff24 	bl	8016ca8 <phDriver_PinWrite>
    /* delay of ~2 ms */
    phDriver_TimerStart(PH_DRIVER_TIMER_MILLI_SECS, PHHAL_HW_PN5180_RESET_DELAY_MILLI_SECS, NULL);
 800fe60:	2200      	movs	r2, #0
 800fe62:	2102      	movs	r1, #2
 800fe64:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800fe68:	f006 ff30 	bl	8016ccc <phDriver_TimerStart>

    phDriver_PinWrite(PHDRIVER_PIN_RESET, RESET_POWERUP_LEVEL);
 800fe6c:	2201      	movs	r2, #1
 800fe6e:	2120      	movs	r1, #32
 800fe70:	4805      	ldr	r0, [pc, #20]	@ (800fe88 <phhalHw_Pn5180_Reset+0x4c>)
 800fe72:	f006 ff19 	bl	8016ca8 <phDriver_PinWrite>
    /* delay of ~2 ms */
    phDriver_TimerStart(PH_DRIVER_TIMER_MILLI_SECS, PHHAL_HW_PN5180_RESET_DELAY_MILLI_SECS, NULL);
 800fe76:	2200      	movs	r2, #0
 800fe78:	2102      	movs	r1, #2
 800fe7a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800fe7e:	f006 ff25 	bl	8016ccc <phDriver_TimerStart>
#endif /*_WIN32*/
}
 800fe82:	bf00      	nop
 800fe84:	bd80      	pop	{r7, pc}
 800fe86:	bf00      	nop
 800fe88:	48000400 	.word	0x48000400

0800fe8c <phhalHw_Pn5180_WriteSSEL>:

#ifndef _WIN32
static void phhalHw_Pn5180_WriteSSEL(phbalReg_Type_t *pBalDataParams, uint8_t bValue)
{
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b082      	sub	sp, #8
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
 800fe94:	460b      	mov	r3, r1
 800fe96:	70fb      	strb	r3, [r7, #3]
    if (pBalDataParams->bBalType == PHBAL_REG_TYPE_SPI)
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	789b      	ldrb	r3, [r3, #2]
 800fe9c:	2b01      	cmp	r3, #1
 800fe9e:	d107      	bne.n	800feb0 <phhalHw_Pn5180_WriteSSEL+0x24>
    {
        phDriver_PinWrite(PHDRIVER_PIN_SSEL, bValue);
 800fea0:	78fb      	ldrb	r3, [r7, #3]
 800fea2:	461a      	mov	r2, r3
 800fea4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800fea8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800feac:	f006 fefc 	bl	8016ca8 <phDriver_PinWrite>
    }
}
 800feb0:	bf00      	nop
 800feb2:	3708      	adds	r7, #8
 800feb4:	46bd      	mov	sp, r7
 800feb6:	bd80      	pop	{r7, pc}

0800feb8 <phhalHw_Pn5180_Instr_GetInstrBuffer>:
static void phhalHw_Pn5180_Instr_GetInstrBuffer(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t ** pTxBuffer,
    uint16_t * pTxBufferLen
    )
{
 800feb8:	b480      	push	{r7}
 800feba:	b085      	sub	sp, #20
 800febc:	af00      	add	r7, sp, #0
 800febe:	60f8      	str	r0, [r7, #12]
 800fec0:	60b9      	str	r1, [r7, #8]
 800fec2:	607a      	str	r2, [r7, #4]
    /*Return Instr buffer*/
    *pTxBuffer =pDataParams->pInstrBuffer;
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	f103 027a 	add.w	r2, r3, #122	@ 0x7a
 800feca:	68bb      	ldr	r3, [r7, #8]
 800fecc:	601a      	str	r2, [r3, #0]
    /* Return stored length */
    *pTxBufferLen = INSTR_BUFFER_SIZE;
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	f44f 7283 	mov.w	r2, #262	@ 0x106
 800fed4:	801a      	strh	r2, [r3, #0]
}
 800fed6:	bf00      	nop
 800fed8:	3714      	adds	r7, #20
 800feda:	46bd      	mov	sp, r7
 800fedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee0:	4770      	bx	lr
	...

0800fee4 <phhalHw_Pn5180_Check_Reg_Readonly>:
}

static phStatus_t phhalHw_Pn5180_Check_Reg_Readonly(
    uint8_t bRegister
    )
{
 800fee4:	b480      	push	{r7}
 800fee6:	b085      	sub	sp, #20
 800fee8:	af00      	add	r7, sp, #0
 800feea:	4603      	mov	r3, r0
 800feec:	71fb      	strb	r3, [r7, #7]
    uint8_t     PH_MEMLOC_REM bIndex;

    /* Validate the registers */
    for (bIndex = 0U; bIndex < sizeof(phhalHw_Pn5180_Instr_RO_Reg_Table); bIndex++)
 800feee:	2300      	movs	r3, #0
 800fef0:	73fb      	strb	r3, [r7, #15]
 800fef2:	e00b      	b.n	800ff0c <phhalHw_Pn5180_Check_Reg_Readonly+0x28>
    {
        /* Check if the register is read-only */
        if (bRegister == phhalHw_Pn5180_Instr_RO_Reg_Table[bIndex])
 800fef4:	7bfb      	ldrb	r3, [r7, #15]
 800fef6:	4a0a      	ldr	r2, [pc, #40]	@ (800ff20 <phhalHw_Pn5180_Check_Reg_Readonly+0x3c>)
 800fef8:	5cd3      	ldrb	r3, [r2, r3]
 800fefa:	79fa      	ldrb	r2, [r7, #7]
 800fefc:	429a      	cmp	r2, r3
 800fefe:	d102      	bne.n	800ff06 <phhalHw_Pn5180_Check_Reg_Readonly+0x22>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_READ_WRITE_ERROR, PH_COMP_HAL);
 800ff00:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ff04:	e006      	b.n	800ff14 <phhalHw_Pn5180_Check_Reg_Readonly+0x30>
    for (bIndex = 0U; bIndex < sizeof(phhalHw_Pn5180_Instr_RO_Reg_Table); bIndex++)
 800ff06:	7bfb      	ldrb	r3, [r7, #15]
 800ff08:	3301      	adds	r3, #1
 800ff0a:	73fb      	strb	r3, [r7, #15]
 800ff0c:	7bfb      	ldrb	r3, [r7, #15]
 800ff0e:	2b06      	cmp	r3, #6
 800ff10:	d9f0      	bls.n	800fef4 <phhalHw_Pn5180_Check_Reg_Readonly+0x10>
        }
    }
    return PH_ERR_SUCCESS;
 800ff12:	2300      	movs	r3, #0

}
 800ff14:	4618      	mov	r0, r3
 800ff16:	3714      	adds	r7, #20
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1e:	4770      	bx	lr
 800ff20:	0802030c 	.word	0x0802030c

0800ff24 <phhalHw_Pn5180_Instr_WriteRegister>:
phStatus_t phhalHw_Pn5180_Instr_WriteRegister(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRegister,
    uint32_t dwValue
    )
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b08a      	sub	sp, #40	@ 0x28
 800ff28:	af02      	add	r7, sp, #8
 800ff2a:	60f8      	str	r0, [r7, #12]
 800ff2c:	460b      	mov	r3, r1
 800ff2e:	607a      	str	r2, [r7, #4]
 800ff30:	72fb      	strb	r3, [r7, #11]
    uint8_t     PH_MEMLOC_REM pData[1];

    /* Validate pDataParams
    * Check if the Register address is invalid
    * */
    if ( (NULL == pDataParams)\
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d006      	beq.n	800ff46 <phhalHw_Pn5180_Instr_WriteRegister+0x22>
        ||((bRegister >= PHHAL_HW_PN5180_INVALID_REG_START_ADDRESS) \
 800ff38:	7afb      	ldrb	r3, [r7, #11]
 800ff3a:	2b43      	cmp	r3, #67	@ 0x43
 800ff3c:	d906      	bls.n	800ff4c <phhalHw_Pn5180_Instr_WriteRegister+0x28>
        && (bRegister <= PHHAL_HW_PN5180_INVALID_REG_END_ADDRESS)) \
 800ff3e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	db02      	blt.n	800ff4c <phhalHw_Pn5180_Instr_WriteRegister+0x28>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800ff46:	f240 2321 	movw	r3, #545	@ 0x221
 800ff4a:	e05d      	b.n	8010008 <phhalHw_Pn5180_Instr_WriteRegister+0xe4>
    }

    /* Check for read-only registers */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Check_Reg_Readonly(bRegister));
 800ff4c:	7afb      	ldrb	r3, [r7, #11]
 800ff4e:	4618      	mov	r0, r3
 800ff50:	f7ff ffc8 	bl	800fee4 <phhalHw_Pn5180_Check_Reg_Readonly>
 800ff54:	4603      	mov	r3, r0
 800ff56:	83fb      	strh	r3, [r7, #30]
 800ff58:	8bfb      	ldrh	r3, [r7, #30]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d001      	beq.n	800ff62 <phhalHw_Pn5180_Instr_WriteRegister+0x3e>
 800ff5e:	8bfb      	ldrh	r3, [r7, #30]
 800ff60:	e052      	b.n	8010008 <phhalHw_Pn5180_Instr_WriteRegister+0xe4>

    /* Build the command frame */
    wBufferLength = 0U;
 800ff62:	2300      	movs	r3, #0
 800ff64:	777b      	strb	r3, [r7, #29]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_WRITE_REGISTER;
 800ff66:	7f7b      	ldrb	r3, [r7, #29]
 800ff68:	1c5a      	adds	r2, r3, #1
 800ff6a:	777a      	strb	r2, [r7, #29]
 800ff6c:	3320      	adds	r3, #32
 800ff6e:	443b      	add	r3, r7
 800ff70:	2200      	movs	r2, #0
 800ff72:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bRegister;
 800ff76:	7f7b      	ldrb	r3, [r7, #29]
 800ff78:	1c5a      	adds	r2, r3, #1
 800ff7a:	777a      	strb	r2, [r7, #29]
 800ff7c:	3320      	adds	r3, #32
 800ff7e:	443b      	add	r3, r7
 800ff80:	7afa      	ldrb	r2, [r7, #11]
 800ff82:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* LSB1 */
    bDataBuffer[wBufferLength++] = (uint8_t)(dwValue & 0xFFU);
 800ff86:	7f7b      	ldrb	r3, [r7, #29]
 800ff88:	1c5a      	adds	r2, r3, #1
 800ff8a:	777a      	strb	r2, [r7, #29]
 800ff8c:	687a      	ldr	r2, [r7, #4]
 800ff8e:	b2d2      	uxtb	r2, r2
 800ff90:	3320      	adds	r3, #32
 800ff92:	443b      	add	r3, r7
 800ff94:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* LSB2 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwValue >> 8U) & 0xFFU);
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	0a1a      	lsrs	r2, r3, #8
 800ff9c:	7f7b      	ldrb	r3, [r7, #29]
 800ff9e:	1c59      	adds	r1, r3, #1
 800ffa0:	7779      	strb	r1, [r7, #29]
 800ffa2:	b2d2      	uxtb	r2, r2
 800ffa4:	3320      	adds	r3, #32
 800ffa6:	443b      	add	r3, r7
 800ffa8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* MSB1 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwValue >> 16U) & 0xFFU);
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	0c1a      	lsrs	r2, r3, #16
 800ffb0:	7f7b      	ldrb	r3, [r7, #29]
 800ffb2:	1c59      	adds	r1, r3, #1
 800ffb4:	7779      	strb	r1, [r7, #29]
 800ffb6:	b2d2      	uxtb	r2, r2
 800ffb8:	3320      	adds	r3, #32
 800ffba:	443b      	add	r3, r7
 800ffbc:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* MSB2 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwValue >> 24U) & 0xFFU);
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	0e1a      	lsrs	r2, r3, #24
 800ffc4:	7f7b      	ldrb	r3, [r7, #29]
 800ffc6:	1c59      	adds	r1, r3, #1
 800ffc8:	7779      	strb	r1, [r7, #29]
 800ffca:	b2d2      	uxtb	r2, r2
 800ffcc:	3320      	adds	r3, #32
 800ffce:	443b      	add	r3, r7
 800ffd0:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* No Response expected*/
    bNumExpBytes = 0U;
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	773b      	strb	r3, [r7, #28]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 800ffd8:	7f7b      	ldrb	r3, [r7, #29]
 800ffda:	b29a      	uxth	r2, r3
 800ffdc:	7f3b      	ldrb	r3, [r7, #28]
 800ffde:	b298      	uxth	r0, r3
 800ffe0:	f107 0114 	add.w	r1, r7, #20
 800ffe4:	f107 031a 	add.w	r3, r7, #26
 800ffe8:	9301      	str	r3, [sp, #4]
 800ffea:	f107 0310 	add.w	r3, r7, #16
 800ffee:	9300      	str	r3, [sp, #0]
 800fff0:	4603      	mov	r3, r0
 800fff2:	68f8      	ldr	r0, [r7, #12]
 800fff4:	f7ff f8dc 	bl	800f1b0 <phhalHw_Pn5180_BalExchange>
 800fff8:	4603      	mov	r3, r0
 800fffa:	83fb      	strh	r3, [r7, #30]
 800fffc:	8bfb      	ldrh	r3, [r7, #30]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d001      	beq.n	8010006 <phhalHw_Pn5180_Instr_WriteRegister+0xe2>
 8010002:	8bfb      	ldrh	r3, [r7, #30]
 8010004:	e000      	b.n	8010008 <phhalHw_Pn5180_Instr_WriteRegister+0xe4>
        wBufferLength,
        bNumExpBytes,
        pData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 8010006:	2300      	movs	r3, #0
}
 8010008:	4618      	mov	r0, r3
 801000a:	3720      	adds	r7, #32
 801000c:	46bd      	mov	sp, r7
 801000e:	bd80      	pop	{r7, pc}

08010010 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>:
phStatus_t phhalHw_Pn5180_Instr_WriteRegisterOrMask(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRegister,
    uint32_t dwMask
    )
{
 8010010:	b580      	push	{r7, lr}
 8010012:	b08a      	sub	sp, #40	@ 0x28
 8010014:	af02      	add	r7, sp, #8
 8010016:	60f8      	str	r0, [r7, #12]
 8010018:	460b      	mov	r3, r1
 801001a:	607a      	str	r2, [r7, #4]
 801001c:	72fb      	strb	r3, [r7, #11]
    uint8_t     PH_MEMLOC_REM pData[1];

    /* Validate pDataParams
    * Check if the Register address is invalid
    * */
    if ( (NULL == pDataParams)\
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d006      	beq.n	8010032 <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0x22>
        ||((bRegister >= PHHAL_HW_PN5180_INVALID_REG_START_ADDRESS) \
 8010024:	7afb      	ldrb	r3, [r7, #11]
 8010026:	2b43      	cmp	r3, #67	@ 0x43
 8010028:	d906      	bls.n	8010038 <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0x28>
        && (bRegister <= PHHAL_HW_PN5180_INVALID_REG_END_ADDRESS)) \
 801002a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801002e:	2b00      	cmp	r3, #0
 8010030:	db02      	blt.n	8010038 <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0x28>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010032:	f240 2321 	movw	r3, #545	@ 0x221
 8010036:	e05d      	b.n	80100f4 <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0xe4>
    }

    /* Check for read-only registers */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Check_Reg_Readonly(bRegister));
 8010038:	7afb      	ldrb	r3, [r7, #11]
 801003a:	4618      	mov	r0, r3
 801003c:	f7ff ff52 	bl	800fee4 <phhalHw_Pn5180_Check_Reg_Readonly>
 8010040:	4603      	mov	r3, r0
 8010042:	83fb      	strh	r3, [r7, #30]
 8010044:	8bfb      	ldrh	r3, [r7, #30]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d001      	beq.n	801004e <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0x3e>
 801004a:	8bfb      	ldrh	r3, [r7, #30]
 801004c:	e052      	b.n	80100f4 <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0xe4>

    /* Build the command frame */
    wBufferLength = 0U;
 801004e:	2300      	movs	r3, #0
 8010050:	777b      	strb	r3, [r7, #29]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_WRITE_REGISTER_OR_MASK;
 8010052:	7f7b      	ldrb	r3, [r7, #29]
 8010054:	1c5a      	adds	r2, r3, #1
 8010056:	777a      	strb	r2, [r7, #29]
 8010058:	3320      	adds	r3, #32
 801005a:	443b      	add	r3, r7
 801005c:	2201      	movs	r2, #1
 801005e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bRegister;
 8010062:	7f7b      	ldrb	r3, [r7, #29]
 8010064:	1c5a      	adds	r2, r3, #1
 8010066:	777a      	strb	r2, [r7, #29]
 8010068:	3320      	adds	r3, #32
 801006a:	443b      	add	r3, r7
 801006c:	7afa      	ldrb	r2, [r7, #11]
 801006e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* LSB1 */
    bDataBuffer[wBufferLength++] = (uint8_t)(dwMask & 0xFFU);
 8010072:	7f7b      	ldrb	r3, [r7, #29]
 8010074:	1c5a      	adds	r2, r3, #1
 8010076:	777a      	strb	r2, [r7, #29]
 8010078:	687a      	ldr	r2, [r7, #4]
 801007a:	b2d2      	uxtb	r2, r2
 801007c:	3320      	adds	r3, #32
 801007e:	443b      	add	r3, r7
 8010080:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* LSB2 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwMask >> 8U) & 0xFFU);
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	0a1a      	lsrs	r2, r3, #8
 8010088:	7f7b      	ldrb	r3, [r7, #29]
 801008a:	1c59      	adds	r1, r3, #1
 801008c:	7779      	strb	r1, [r7, #29]
 801008e:	b2d2      	uxtb	r2, r2
 8010090:	3320      	adds	r3, #32
 8010092:	443b      	add	r3, r7
 8010094:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* MSB1 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwMask >> 16U) & 0xFFU);
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	0c1a      	lsrs	r2, r3, #16
 801009c:	7f7b      	ldrb	r3, [r7, #29]
 801009e:	1c59      	adds	r1, r3, #1
 80100a0:	7779      	strb	r1, [r7, #29]
 80100a2:	b2d2      	uxtb	r2, r2
 80100a4:	3320      	adds	r3, #32
 80100a6:	443b      	add	r3, r7
 80100a8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* MSB2 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwMask >> 24U) & 0xFFU);
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	0e1a      	lsrs	r2, r3, #24
 80100b0:	7f7b      	ldrb	r3, [r7, #29]
 80100b2:	1c59      	adds	r1, r3, #1
 80100b4:	7779      	strb	r1, [r7, #29]
 80100b6:	b2d2      	uxtb	r2, r2
 80100b8:	3320      	adds	r3, #32
 80100ba:	443b      	add	r3, r7
 80100bc:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* No Response expected */
    bNumExpBytes = 0U;
 80100c0:	2300      	movs	r3, #0
 80100c2:	773b      	strb	r3, [r7, #28]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 80100c4:	7f7b      	ldrb	r3, [r7, #29]
 80100c6:	b29a      	uxth	r2, r3
 80100c8:	7f3b      	ldrb	r3, [r7, #28]
 80100ca:	b298      	uxth	r0, r3
 80100cc:	f107 0114 	add.w	r1, r7, #20
 80100d0:	f107 031a 	add.w	r3, r7, #26
 80100d4:	9301      	str	r3, [sp, #4]
 80100d6:	f107 0310 	add.w	r3, r7, #16
 80100da:	9300      	str	r3, [sp, #0]
 80100dc:	4603      	mov	r3, r0
 80100de:	68f8      	ldr	r0, [r7, #12]
 80100e0:	f7ff f866 	bl	800f1b0 <phhalHw_Pn5180_BalExchange>
 80100e4:	4603      	mov	r3, r0
 80100e6:	83fb      	strh	r3, [r7, #30]
 80100e8:	8bfb      	ldrh	r3, [r7, #30]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d001      	beq.n	80100f2 <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0xe2>
 80100ee:	8bfb      	ldrh	r3, [r7, #30]
 80100f0:	e000      	b.n	80100f4 <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0xe4>
        wBufferLength,
        bNumExpBytes,
        pData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 80100f2:	2300      	movs	r3, #0
}
 80100f4:	4618      	mov	r0, r3
 80100f6:	3720      	adds	r7, #32
 80100f8:	46bd      	mov	sp, r7
 80100fa:	bd80      	pop	{r7, pc}

080100fc <phhalHw_Pn5180_Instr_WriteRegisterAndMask>:
phStatus_t phhalHw_Pn5180_Instr_WriteRegisterAndMask(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRegister,
    uint32_t dwMask
    )
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b08a      	sub	sp, #40	@ 0x28
 8010100:	af02      	add	r7, sp, #8
 8010102:	60f8      	str	r0, [r7, #12]
 8010104:	460b      	mov	r3, r1
 8010106:	607a      	str	r2, [r7, #4]
 8010108:	72fb      	strb	r3, [r7, #11]
    uint8_t     PH_MEMLOC_REM bDataBuffer[6];
    uint8_t     PH_MEMLOC_REM pData[1];

    /* Validate pDataParams
    *  Check if the Register address is invalid */
    if ( (NULL == pDataParams)\
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d006      	beq.n	801011e <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0x22>
        ||((bRegister >= PHHAL_HW_PN5180_INVALID_REG_START_ADDRESS) \
 8010110:	7afb      	ldrb	r3, [r7, #11]
 8010112:	2b43      	cmp	r3, #67	@ 0x43
 8010114:	d906      	bls.n	8010124 <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0x28>
        && (bRegister <= PHHAL_HW_PN5180_INVALID_REG_END_ADDRESS)) \
 8010116:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801011a:	2b00      	cmp	r3, #0
 801011c:	db02      	blt.n	8010124 <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0x28>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 801011e:	f240 2321 	movw	r3, #545	@ 0x221
 8010122:	e05d      	b.n	80101e0 <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0xe4>
    }

    /* Check for read-only registers */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Check_Reg_Readonly(bRegister));
 8010124:	7afb      	ldrb	r3, [r7, #11]
 8010126:	4618      	mov	r0, r3
 8010128:	f7ff fedc 	bl	800fee4 <phhalHw_Pn5180_Check_Reg_Readonly>
 801012c:	4603      	mov	r3, r0
 801012e:	83fb      	strh	r3, [r7, #30]
 8010130:	8bfb      	ldrh	r3, [r7, #30]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d001      	beq.n	801013a <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0x3e>
 8010136:	8bfb      	ldrh	r3, [r7, #30]
 8010138:	e052      	b.n	80101e0 <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0xe4>

    /* Build the command frame */
    wBufferLength = 0U;
 801013a:	2300      	movs	r3, #0
 801013c:	777b      	strb	r3, [r7, #29]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_WRITE_REGISTER_AND_MASK;
 801013e:	7f7b      	ldrb	r3, [r7, #29]
 8010140:	1c5a      	adds	r2, r3, #1
 8010142:	777a      	strb	r2, [r7, #29]
 8010144:	3320      	adds	r3, #32
 8010146:	443b      	add	r3, r7
 8010148:	2202      	movs	r2, #2
 801014a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bRegister;
 801014e:	7f7b      	ldrb	r3, [r7, #29]
 8010150:	1c5a      	adds	r2, r3, #1
 8010152:	777a      	strb	r2, [r7, #29]
 8010154:	3320      	adds	r3, #32
 8010156:	443b      	add	r3, r7
 8010158:	7afa      	ldrb	r2, [r7, #11]
 801015a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* LSB1 */
    bDataBuffer[wBufferLength++] = (uint8_t)(dwMask & 0xFFU);
 801015e:	7f7b      	ldrb	r3, [r7, #29]
 8010160:	1c5a      	adds	r2, r3, #1
 8010162:	777a      	strb	r2, [r7, #29]
 8010164:	687a      	ldr	r2, [r7, #4]
 8010166:	b2d2      	uxtb	r2, r2
 8010168:	3320      	adds	r3, #32
 801016a:	443b      	add	r3, r7
 801016c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* LSB2 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwMask >> 8U) & 0xFFU);
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	0a1a      	lsrs	r2, r3, #8
 8010174:	7f7b      	ldrb	r3, [r7, #29]
 8010176:	1c59      	adds	r1, r3, #1
 8010178:	7779      	strb	r1, [r7, #29]
 801017a:	b2d2      	uxtb	r2, r2
 801017c:	3320      	adds	r3, #32
 801017e:	443b      	add	r3, r7
 8010180:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* MSB1 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwMask >> 16U) & 0xFFU);
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	0c1a      	lsrs	r2, r3, #16
 8010188:	7f7b      	ldrb	r3, [r7, #29]
 801018a:	1c59      	adds	r1, r3, #1
 801018c:	7779      	strb	r1, [r7, #29]
 801018e:	b2d2      	uxtb	r2, r2
 8010190:	3320      	adds	r3, #32
 8010192:	443b      	add	r3, r7
 8010194:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* MSB2 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwMask >> 24U) & 0xFFU);
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	0e1a      	lsrs	r2, r3, #24
 801019c:	7f7b      	ldrb	r3, [r7, #29]
 801019e:	1c59      	adds	r1, r3, #1
 80101a0:	7779      	strb	r1, [r7, #29]
 80101a2:	b2d2      	uxtb	r2, r2
 80101a4:	3320      	adds	r3, #32
 80101a6:	443b      	add	r3, r7
 80101a8:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* No Response expected */
    bNumExpBytes = 0U;
 80101ac:	2300      	movs	r3, #0
 80101ae:	773b      	strb	r3, [r7, #28]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 80101b0:	7f7b      	ldrb	r3, [r7, #29]
 80101b2:	b29a      	uxth	r2, r3
 80101b4:	7f3b      	ldrb	r3, [r7, #28]
 80101b6:	b298      	uxth	r0, r3
 80101b8:	f107 0114 	add.w	r1, r7, #20
 80101bc:	f107 031a 	add.w	r3, r7, #26
 80101c0:	9301      	str	r3, [sp, #4]
 80101c2:	f107 0310 	add.w	r3, r7, #16
 80101c6:	9300      	str	r3, [sp, #0]
 80101c8:	4603      	mov	r3, r0
 80101ca:	68f8      	ldr	r0, [r7, #12]
 80101cc:	f7fe fff0 	bl	800f1b0 <phhalHw_Pn5180_BalExchange>
 80101d0:	4603      	mov	r3, r0
 80101d2:	83fb      	strh	r3, [r7, #30]
 80101d4:	8bfb      	ldrh	r3, [r7, #30]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d001      	beq.n	80101de <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0xe2>
 80101da:	8bfb      	ldrh	r3, [r7, #30]
 80101dc:	e000      	b.n	80101e0 <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0xe4>
        wBufferLength,
        bNumExpBytes,
        pData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 80101de:	2300      	movs	r3, #0
}
 80101e0:	4618      	mov	r0, r3
 80101e2:	3720      	adds	r7, #32
 80101e4:	46bd      	mov	sp, r7
 80101e6:	bd80      	pop	{r7, pc}

080101e8 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>:
phStatus_t phhalHw_Pn5180_Instr_WriteRegisterMultiple(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t * pRegTypeValueSets,
    uint16_t wSizeOfRegTypeValueSets
    )
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b08c      	sub	sp, #48	@ 0x30
 80101ec:	af02      	add	r7, sp, #8
 80101ee:	60f8      	str	r0, [r7, #12]
 80101f0:	60b9      	str	r1, [r7, #8]
 80101f2:	4613      	mov	r3, r2
 80101f4:	80fb      	strh	r3, [r7, #6]
    uint8_t     PH_MEMLOC_REM bReg_offset;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t    PH_MEMLOC_REM wDataLenTmp;
    uint16_t    PH_MEMLOC_REM wBufferLength = 0;
 80101f6:	2300      	movs	r3, #0
 80101f8:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint8_t     PH_MEMLOC_REM bNumExpBytes;

    uint8_t*    PH_MEMLOC_REM pTmpBuffer;
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 80101fa:	2300      	movs	r3, #0
 80101fc:	82fb      	strh	r3, [r7, #22]
    * pDataParams
    * pRegTypeValueSets
    * wSizeOfRegTypeValueSets
    * wSizeOfRegTypeValueSets for modulus of 6. One set of write register is of 6 byte*/

    if ((NULL == pDataParams) \
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d016      	beq.n	8010232 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x4a>
        || (NULL == pRegTypeValueSets) \
 8010204:	68bb      	ldr	r3, [r7, #8]
 8010206:	2b00      	cmp	r3, #0
 8010208:	d013      	beq.n	8010232 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x4a>
        || (wSizeOfRegTypeValueSets > PHHAL_HW_PN5180_MAX_REGISTER_TYPE_VALUE_SET) \
 801020a:	88fb      	ldrh	r3, [r7, #6]
 801020c:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8010210:	d80f      	bhi.n	8010232 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x4a>
        || (wSizeOfRegTypeValueSets < PHHAL_HW_PN5180_MIN_REGISTER_TYPE_VALUE_SET) \
 8010212:	88fb      	ldrh	r3, [r7, #6]
 8010214:	2b05      	cmp	r3, #5
 8010216:	d90c      	bls.n	8010232 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x4a>
        || ( (wSizeOfRegTypeValueSets % PHHAL_HW_PN5180_MIN_REGISTER_TYPE_VALUE_SET) != 0U ) \
 8010218:	88fa      	ldrh	r2, [r7, #6]
 801021a:	4b4b      	ldr	r3, [pc, #300]	@ (8010348 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x160>)
 801021c:	fba3 1302 	umull	r1, r3, r3, r2
 8010220:	0899      	lsrs	r1, r3, #2
 8010222:	460b      	mov	r3, r1
 8010224:	005b      	lsls	r3, r3, #1
 8010226:	440b      	add	r3, r1
 8010228:	005b      	lsls	r3, r3, #1
 801022a:	1ad3      	subs	r3, r2, r3
 801022c:	b29b      	uxth	r3, r3
 801022e:	2b00      	cmp	r3, #0
 8010230:	d002      	beq.n	8010238 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x50>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010232:	f240 2321 	movw	r3, #545	@ 0x221
 8010236:	e082      	b.n	801033e <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x156>
    }

    /* Validate if the register addresses given in pRegTypeValueSets buffer are not READ only and have valid addresses */
    for (bReg_offset = 0U; bReg_offset < wSizeOfRegTypeValueSets; bReg_offset += PHHAL_HW_PN5180_MIN_REGISTER_TYPE_VALUE_SET)
 8010238:	2300      	movs	r3, #0
 801023a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801023e:	e038      	b.n	80102b2 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0xca>
    {
        /* Check for read-only registers */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Check_Reg_Readonly(*(pRegTypeValueSets+bReg_offset)));
 8010240:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010244:	68ba      	ldr	r2, [r7, #8]
 8010246:	4413      	add	r3, r2
 8010248:	781b      	ldrb	r3, [r3, #0]
 801024a:	4618      	mov	r0, r3
 801024c:	f7ff fe4a 	bl	800fee4 <phhalHw_Pn5180_Check_Reg_Readonly>
 8010250:	4603      	mov	r3, r0
 8010252:	843b      	strh	r3, [r7, #32]
 8010254:	8c3b      	ldrh	r3, [r7, #32]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d001      	beq.n	801025e <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x76>
 801025a:	8c3b      	ldrh	r3, [r7, #32]
 801025c:	e06f      	b.n	801033e <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x156>

        /* Check if the Register address is invalid */
        if((*(pRegTypeValueSets+bReg_offset) >= PHHAL_HW_PN5180_INVALID_REG_START_ADDRESS) \
 801025e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010262:	68ba      	ldr	r2, [r7, #8]
 8010264:	4413      	add	r3, r2
 8010266:	781b      	ldrb	r3, [r3, #0]
 8010268:	2b43      	cmp	r3, #67	@ 0x43
 801026a:	d90a      	bls.n	8010282 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x9a>
            && (*(pRegTypeValueSets+bReg_offset) <= PHHAL_HW_PN5180_INVALID_REG_END_ADDRESS)) \
 801026c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010270:	68ba      	ldr	r2, [r7, #8]
 8010272:	4413      	add	r3, r2
 8010274:	781b      	ldrb	r3, [r3, #0]
 8010276:	b25b      	sxtb	r3, r3
 8010278:	2b00      	cmp	r3, #0
 801027a:	db02      	blt.n	8010282 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x9a>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 801027c:	f240 2321 	movw	r3, #545	@ 0x221
 8010280:	e05d      	b.n	801033e <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x156>
        }

        /* Check if the operation TYPE are valid -  Type will be present after register address in every set */
        if ( ( *(pRegTypeValueSets+bReg_offset+1U) <  PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE ) || \
 8010282:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010286:	3301      	adds	r3, #1
 8010288:	68ba      	ldr	r2, [r7, #8]
 801028a:	4413      	add	r3, r2
 801028c:	781b      	ldrb	r3, [r3, #0]
 801028e:	2b00      	cmp	r3, #0
 8010290:	d007      	beq.n	80102a2 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0xba>
            ( *(pRegTypeValueSets+bReg_offset+1U) >  PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK) )
 8010292:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010296:	3301      	adds	r3, #1
 8010298:	68ba      	ldr	r2, [r7, #8]
 801029a:	4413      	add	r3, r2
 801029c:	781b      	ldrb	r3, [r3, #0]
        if ( ( *(pRegTypeValueSets+bReg_offset+1U) <  PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE ) || \
 801029e:	2b03      	cmp	r3, #3
 80102a0:	d902      	bls.n	80102a8 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0xc0>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80102a2:	f240 2321 	movw	r3, #545	@ 0x221
 80102a6:	e04a      	b.n	801033e <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x156>
    for (bReg_offset = 0U; bReg_offset < wSizeOfRegTypeValueSets; bReg_offset += PHHAL_HW_PN5180_MIN_REGISTER_TYPE_VALUE_SET)
 80102a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80102ac:	3306      	adds	r3, #6
 80102ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80102b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80102b6:	b29b      	uxth	r3, r3
 80102b8:	88fa      	ldrh	r2, [r7, #6]
 80102ba:	429a      	cmp	r2, r3
 80102bc:	d8c0      	bhi.n	8010240 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x58>
        }
    }
    /* Get Buffer */

    phhalHw_Pn5180_Instr_GetInstrBuffer(pDataParams, &pTmpBuffer, &wTmpBufferLen);
 80102be:	f107 0216 	add.w	r2, r7, #22
 80102c2:	f107 0318 	add.w	r3, r7, #24
 80102c6:	4619      	mov	r1, r3
 80102c8:	68f8      	ldr	r0, [r7, #12]
 80102ca:	f7ff fdf5 	bl	800feb8 <phhalHw_Pn5180_Instr_GetInstrBuffer>

    /* Check if the buffer size is sufficient*/
    if (wTmpBufferLen < (wSizeOfRegTypeValueSets + 1U))
 80102ce:	8afb      	ldrh	r3, [r7, #22]
 80102d0:	461a      	mov	r2, r3
 80102d2:	88fb      	ldrh	r3, [r7, #6]
 80102d4:	3301      	adds	r3, #1
 80102d6:	429a      	cmp	r2, r3
 80102d8:	d202      	bcs.n	80102e0 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0xf8>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 80102da:	f44f 7301 	mov.w	r3, #516	@ 0x204
 80102de:	e02e      	b.n	801033e <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x156>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 80102e0:	2300      	movs	r3, #0
 80102e2:	84bb      	strh	r3, [r7, #36]	@ 0x24
    pTmpBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_WRITE_REGISTER_MULTIPLE;
 80102e4:	69ba      	ldr	r2, [r7, #24]
 80102e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80102e8:	1c59      	adds	r1, r3, #1
 80102ea:	84b9      	strh	r1, [r7, #36]	@ 0x24
 80102ec:	4413      	add	r3, r2
 80102ee:	2203      	movs	r2, #3
 80102f0:	701a      	strb	r2, [r3, #0]

    /* Copy the Instruction payload and update the buffer length*/
    (void)memcpy(&pTmpBuffer[wBufferLength], pRegTypeValueSets, wSizeOfRegTypeValueSets);
 80102f2:	69ba      	ldr	r2, [r7, #24]
 80102f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80102f6:	4413      	add	r3, r2
 80102f8:	88fa      	ldrh	r2, [r7, #6]
 80102fa:	68b9      	ldr	r1, [r7, #8]
 80102fc:	4618      	mov	r0, r3
 80102fe:	f00c ff7e 	bl	801d1fe <memcpy>
    wBufferLength+= wSizeOfRegTypeValueSets;
 8010302:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010304:	88fb      	ldrh	r3, [r7, #6]
 8010306:	4413      	add	r3, r2
 8010308:	84bb      	strh	r3, [r7, #36]	@ 0x24

    /* No Response expected */
    bNumExpBytes = 0U;
 801030a:	2300      	movs	r3, #0
 801030c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8010310:	69b9      	ldr	r1, [r7, #24]
 8010312:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010316:	b298      	uxth	r0, r3
 8010318:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801031a:	f107 031e 	add.w	r3, r7, #30
 801031e:	9301      	str	r3, [sp, #4]
 8010320:	f107 0314 	add.w	r3, r7, #20
 8010324:	9300      	str	r3, [sp, #0]
 8010326:	4603      	mov	r3, r0
 8010328:	68f8      	ldr	r0, [r7, #12]
 801032a:	f7fe ff41 	bl	800f1b0 <phhalHw_Pn5180_BalExchange>
 801032e:	4603      	mov	r3, r0
 8010330:	843b      	strh	r3, [r7, #32]
 8010332:	8c3b      	ldrh	r3, [r7, #32]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d001      	beq.n	801033c <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x154>
 8010338:	8c3b      	ldrh	r3, [r7, #32]
 801033a:	e000      	b.n	801033e <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x156>
        wBufferLength,
        bNumExpBytes,
        pReceivedData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 801033c:	2300      	movs	r3, #0
}
 801033e:	4618      	mov	r0, r3
 8010340:	3728      	adds	r7, #40	@ 0x28
 8010342:	46bd      	mov	sp, r7
 8010344:	bd80      	pop	{r7, pc}
 8010346:	bf00      	nop
 8010348:	aaaaaaab 	.word	0xaaaaaaab

0801034c <phhalHw_Pn5180_Instr_ReadRegister>:
phStatus_t phhalHw_Pn5180_Instr_ReadRegister(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRegister,
    uint32_t * pValue
    )
{
 801034c:	b580      	push	{r7, lr}
 801034e:	b08c      	sub	sp, #48	@ 0x30
 8010350:	af02      	add	r7, sp, #8
 8010352:	60f8      	str	r0, [r7, #12]
 8010354:	460b      	mov	r3, r1
 8010356:	607a      	str	r2, [r7, #4]
 8010358:	72fb      	strb	r3, [r7, #11]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint16_t    PH_MEMLOC_REM wTempRxDataLen = 0;
 801035a:	2300      	movs	r3, #0
 801035c:	843b      	strh	r3, [r7, #32]
    uint8_t     PH_MEMLOC_REM bDataBuffer[2];
    uint8_t     PH_MEMLOC_REM bRecBuffer[5];

    /* Validate pDataParams
    * Check if the Register address is invalid*/
    if ( (NULL == pDataParams ) \
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d009      	beq.n	8010378 <phhalHw_Pn5180_Instr_ReadRegister+0x2c>
        || (NULL == pValue) \
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d006      	beq.n	8010378 <phhalHw_Pn5180_Instr_ReadRegister+0x2c>
        ||((bRegister >= PHHAL_HW_PN5180_INVALID_REG_START_ADDRESS) \
 801036a:	7afb      	ldrb	r3, [r7, #11]
 801036c:	2b43      	cmp	r3, #67	@ 0x43
 801036e:	d906      	bls.n	801037e <phhalHw_Pn5180_Instr_ReadRegister+0x32>
        && (bRegister <= PHHAL_HW_PN5180_INVALID_REG_END_ADDRESS)) \
 8010370:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010374:	2b00      	cmp	r3, #0
 8010376:	db02      	blt.n	801037e <phhalHw_Pn5180_Instr_ReadRegister+0x32>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010378:	f240 2321 	movw	r3, #545	@ 0x221
 801037c:	e050      	b.n	8010420 <phhalHw_Pn5180_Instr_ReadRegister+0xd4>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 801037e:	2300      	movs	r3, #0
 8010380:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_READ_REGISTER;
 8010384:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010388:	1c5a      	adds	r2, r3, #1
 801038a:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 801038e:	3328      	adds	r3, #40	@ 0x28
 8010390:	443b      	add	r3, r7
 8010392:	2204      	movs	r2, #4
 8010394:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bRegister;
 8010398:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801039c:	1c5a      	adds	r2, r3, #1
 801039e:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 80103a2:	3328      	adds	r3, #40	@ 0x28
 80103a4:	443b      	add	r3, r7
 80103a6:	7afa      	ldrb	r2, [r7, #11]
 80103a8:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* Expected number of bytes */
    bNumExpBytes = 4;
 80103ac:	2304      	movs	r3, #4
 80103ae:	84bb      	strh	r3, [r7, #36]	@ 0x24

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 80103b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80103b4:	b29a      	uxth	r2, r3
 80103b6:	8cb8      	ldrh	r0, [r7, #36]	@ 0x24
 80103b8:	f107 011c 	add.w	r1, r7, #28
 80103bc:	f107 0320 	add.w	r3, r7, #32
 80103c0:	9301      	str	r3, [sp, #4]
 80103c2:	f107 0314 	add.w	r3, r7, #20
 80103c6:	9300      	str	r3, [sp, #0]
 80103c8:	4603      	mov	r3, r0
 80103ca:	68f8      	ldr	r0, [r7, #12]
 80103cc:	f7fe fef0 	bl	800f1b0 <phhalHw_Pn5180_BalExchange>
 80103d0:	4603      	mov	r3, r0
 80103d2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80103d4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d001      	beq.n	80103de <phhalHw_Pn5180_Instr_ReadRegister+0x92>
 80103da:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80103dc:	e020      	b.n	8010420 <phhalHw_Pn5180_Instr_ReadRegister+0xd4>
        wBufferLength,
        bNumExpBytes,
        bRecBuffer,
        &wTempRxDataLen));

    if (wTempRxDataLen != bNumExpBytes)
 80103de:	8c3b      	ldrh	r3, [r7, #32]
 80103e0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80103e2:	429a      	cmp	r2, r3
 80103e4:	d002      	beq.n	80103ec <phhalHw_Pn5180_Instr_ReadRegister+0xa0>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 80103e6:	f240 237f 	movw	r3, #639	@ 0x27f
 80103ea:	e019      	b.n	8010420 <phhalHw_Pn5180_Instr_ReadRegister+0xd4>
    }

    /* Pack the data that was received */
    *pValue = bRecBuffer[0];
 80103ec:	7d3b      	ldrb	r3, [r7, #20]
 80103ee:	461a      	mov	r2, r3
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	601a      	str	r2, [r3, #0]
    *pValue |= (((uint32_t) bRecBuffer[1]) << 8U);
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	681a      	ldr	r2, [r3, #0]
 80103f8:	7d7b      	ldrb	r3, [r7, #21]
 80103fa:	021b      	lsls	r3, r3, #8
 80103fc:	431a      	orrs	r2, r3
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	601a      	str	r2, [r3, #0]
    *pValue |= (((uint32_t) bRecBuffer[2]) << 16U);
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	681a      	ldr	r2, [r3, #0]
 8010406:	7dbb      	ldrb	r3, [r7, #22]
 8010408:	041b      	lsls	r3, r3, #16
 801040a:	431a      	orrs	r2, r3
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	601a      	str	r2, [r3, #0]
    *pValue |= (((uint32_t) bRecBuffer[3]) << 24U);
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	681a      	ldr	r2, [r3, #0]
 8010414:	7dfb      	ldrb	r3, [r7, #23]
 8010416:	061b      	lsls	r3, r3, #24
 8010418:	431a      	orrs	r2, r3
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	601a      	str	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 801041e:	2300      	movs	r3, #0
}
 8010420:	4618      	mov	r0, r3
 8010422:	3728      	adds	r7, #40	@ 0x28
 8010424:	46bd      	mov	sp, r7
 8010426:	bd80      	pop	{r7, pc}

08010428 <phhalHw_Pn5180_Instr_ReadRegisterMultiple>:
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t * pRegisters,
    uint8_t bNumOfRegisters,
    uint8_t ** ppValues
    )
{
 8010428:	b590      	push	{r4, r7, lr}
 801042a:	b091      	sub	sp, #68	@ 0x44
 801042c:	af02      	add	r7, sp, #8
 801042e:	60f8      	str	r0, [r7, #12]
 8010430:	60b9      	str	r1, [r7, #8]
 8010432:	603b      	str	r3, [r7, #0]
 8010434:	4613      	mov	r3, r2
 8010436:	71fb      	strb	r3, [r7, #7]
    uint8_t *   PH_MEMLOC_REM pTmpBuffer = NULL;
 8010438:	2300      	movs	r3, #0
 801043a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 801043c:	2300      	movs	r3, #0
 801043e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* Validate pDataParams
    * Validate pRegisters
    * Validate ppValues
    * Validate bNumOfRegisters
    * */
    if ( (NULL == pDataParams) || (NULL == pRegisters) || (NULL == ppValues) \
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	2b00      	cmp	r3, #0
 8010444:	d00b      	beq.n	801045e <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x36>
 8010446:	68bb      	ldr	r3, [r7, #8]
 8010448:	2b00      	cmp	r3, #0
 801044a:	d008      	beq.n	801045e <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x36>
 801044c:	683b      	ldr	r3, [r7, #0]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d005      	beq.n	801045e <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x36>
        || (0U == bNumOfRegisters) \
 8010452:	79fb      	ldrb	r3, [r7, #7]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d002      	beq.n	801045e <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x36>
        || (bNumOfRegisters > PHHAL_HW_PN5180_MAX_REGISTERS_READ_MULTIPLE) \
 8010458:	79fb      	ldrb	r3, [r7, #7]
 801045a:	2b12      	cmp	r3, #18
 801045c:	d902      	bls.n	8010464 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x3c>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 801045e:	f240 2321 	movw	r3, #545	@ 0x221
 8010462:	e077      	b.n	8010554 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x12c>
    }

    /* Check if all the register addresses are valid */
    for (regIndex = 0U; regIndex < bNumOfRegisters; regIndex++)
 8010464:	2300      	movs	r3, #0
 8010466:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801046a:	e016      	b.n	801049a <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x72>
    {
        /* Check if the Register address is invalid */
        if((pRegisters[regIndex] >= PHHAL_HW_PN5180_INVALID_REG_START_ADDRESS) \
 801046c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010470:	68ba      	ldr	r2, [r7, #8]
 8010472:	4413      	add	r3, r2
 8010474:	781b      	ldrb	r3, [r3, #0]
 8010476:	2b43      	cmp	r3, #67	@ 0x43
 8010478:	d90a      	bls.n	8010490 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x68>
            && (pRegisters[regIndex] <= PHHAL_HW_PN5180_INVALID_REG_END_ADDRESS)) \
 801047a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801047e:	68ba      	ldr	r2, [r7, #8]
 8010480:	4413      	add	r3, r2
 8010482:	781b      	ldrb	r3, [r3, #0]
 8010484:	b25b      	sxtb	r3, r3
 8010486:	2b00      	cmp	r3, #0
 8010488:	db02      	blt.n	8010490 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x68>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 801048a:	f240 2321 	movw	r3, #545	@ 0x221
 801048e:	e061      	b.n	8010554 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x12c>
    for (regIndex = 0U; regIndex < bNumOfRegisters; regIndex++)
 8010490:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010494:	3301      	adds	r3, #1
 8010496:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801049a:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 801049e:	79fb      	ldrb	r3, [r7, #7]
 80104a0:	429a      	cmp	r2, r3
 80104a2:	d3e3      	bcc.n	801046c <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x44>
        }
    }

    /* Get Buffer*/
    phhalHw_Pn5180_Instr_GetInstrBuffer(pDataParams, &pTmpBuffer, &wTmpBufferLen);
 80104a4:	f107 022a 	add.w	r2, r7, #42	@ 0x2a
 80104a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80104ac:	4619      	mov	r1, r3
 80104ae:	68f8      	ldr	r0, [r7, #12]
 80104b0:	f7ff fd02 	bl	800feb8 <phhalHw_Pn5180_Instr_GetInstrBuffer>

    /* total number of expected bytes*/
    bNumExpBytes = (bNumOfRegisters * PHHAL_HW_PN5180_BYTES_PER_REGISTER);
 80104b4:	79fb      	ldrb	r3, [r7, #7]
 80104b6:	009b      	lsls	r3, r3, #2
 80104b8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Check if the buffer size is sufficient*/
    if (wTmpBufferLen < bNumExpBytes)
 80104bc:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80104c0:	b29a      	uxth	r2, r3
 80104c2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80104c4:	429a      	cmp	r2, r3
 80104c6:	d902      	bls.n	80104ce <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0xa6>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 80104c8:	f44f 7301 	mov.w	r3, #516	@ 0x204
 80104cc:	e042      	b.n	8010554 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x12c>
    }
    /* Build the command frame */
    wBufferLength = 0U;
 80104ce:	2300      	movs	r3, #0
 80104d0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_READ_REGISTER_MULTIPLE;
 80104d4:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80104d8:	1c5a      	adds	r2, r3, #1
 80104da:	f887 2035 	strb.w	r2, [r7, #53]	@ 0x35
 80104de:	3338      	adds	r3, #56	@ 0x38
 80104e0:	443b      	add	r3, r7
 80104e2:	2205      	movs	r2, #5
 80104e4:	f803 2c24 	strb.w	r2, [r3, #-36]

    /* Copy the Instruction payload and update the buffer length*/
    (void)memcpy(&bDataBuffer[wBufferLength], pRegisters, bNumOfRegisters);
 80104e8:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80104ec:	f107 0214 	add.w	r2, r7, #20
 80104f0:	4413      	add	r3, r2
 80104f2:	79fa      	ldrb	r2, [r7, #7]
 80104f4:	68b9      	ldr	r1, [r7, #8]
 80104f6:	4618      	mov	r0, r3
 80104f8:	f00c fe81 	bl	801d1fe <memcpy>
    wBufferLength+= bNumOfRegisters;
 80104fc:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8010500:	79fb      	ldrb	r3, [r7, #7]
 8010502:	4413      	add	r3, r2
 8010504:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8010508:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801050c:	b298      	uxth	r0, r3
 801050e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8010512:	b29c      	uxth	r4, r3
 8010514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010516:	f107 0114 	add.w	r1, r7, #20
 801051a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 801051e:	9201      	str	r2, [sp, #4]
 8010520:	9300      	str	r3, [sp, #0]
 8010522:	4623      	mov	r3, r4
 8010524:	4602      	mov	r2, r0
 8010526:	68f8      	ldr	r0, [r7, #12]
 8010528:	f7fe fe42 	bl	800f1b0 <phhalHw_Pn5180_BalExchange>
 801052c:	4603      	mov	r3, r0
 801052e:	867b      	strh	r3, [r7, #50]	@ 0x32
 8010530:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8010532:	2b00      	cmp	r3, #0
 8010534:	d001      	beq.n	801053a <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x112>
 8010536:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8010538:	e00c      	b.n	8010554 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x12c>
        bNumExpBytes,
        pTmpBuffer,
        &wDataLenTmp));

    /* Validate the response length */
    if (wDataLenTmp  != bNumExpBytes)
 801053a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 801053e:	b29a      	uxth	r2, r3
 8010540:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010542:	429a      	cmp	r2, r3
 8010544:	d002      	beq.n	801054c <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x124>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 8010546:	f240 237f 	movw	r3, #639	@ 0x27f
 801054a:	e003      	b.n	8010554 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x12c>
    }

    /* return the pointer to the buffer*/
    *ppValues = pTmpBuffer;
 801054c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801054e:	683b      	ldr	r3, [r7, #0]
 8010550:	601a      	str	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8010552:	2300      	movs	r3, #0
}
 8010554:	4618      	mov	r0, r3
 8010556:	373c      	adds	r7, #60	@ 0x3c
 8010558:	46bd      	mov	sp, r7
 801055a:	bd90      	pop	{r4, r7, pc}

0801055c <phhalHw_Pn5180_Instr_WriteE2Prom>:
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bE2PromAddress,
    uint8_t * pDataToWrite,
    uint8_t bDataLength
    )
{
 801055c:	b580      	push	{r7, lr}
 801055e:	b08a      	sub	sp, #40	@ 0x28
 8010560:	af02      	add	r7, sp, #8
 8010562:	60f8      	str	r0, [r7, #12]
 8010564:	607a      	str	r2, [r7, #4]
 8010566:	461a      	mov	r2, r3
 8010568:	460b      	mov	r3, r1
 801056a:	72fb      	strb	r3, [r7, #11]
 801056c:	4613      	mov	r3, r2
 801056e:	72bb      	strb	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t    PH_MEMLOC_REM wDataLenTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint8_t     PH_MEMLOC_REM bNumExpBytes;

    uint8_t *   PH_MEMLOC_REM pTmpBuffer = NULL;
 8010570:	2300      	movs	r3, #0
 8010572:	617b      	str	r3, [r7, #20]
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 8010574:	2300      	movs	r3, #0
 8010576:	827b      	strh	r3, [r7, #18]
    uint8_t     PH_MEMLOC_REM pReceivedData[1];

    /* Validate pDataParams and pDataToWrite
    * Validate E2PROM address
    * Validate the data length */
    if ( (NULL == pDataParams) || (NULL == pDataToWrite) \
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d00b      	beq.n	8010596 <phhalHw_Pn5180_Instr_WriteE2Prom+0x3a>
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	2b00      	cmp	r3, #0
 8010582:	d008      	beq.n	8010596 <phhalHw_Pn5180_Instr_WriteE2Prom+0x3a>
        || (bE2PromAddress > PHHAL_HW_PN5180_E2PROM_MAX_ADDESS) \
 8010584:	7afb      	ldrb	r3, [r7, #11]
 8010586:	2bfd      	cmp	r3, #253	@ 0xfd
 8010588:	d805      	bhi.n	8010596 <phhalHw_Pn5180_Instr_WriteE2Prom+0x3a>
        || (bE2PromAddress < PHHAL_HW_PN5180_E2PROM_MIN_ADDESS) \
 801058a:	7afb      	ldrb	r3, [r7, #11]
 801058c:	2b15      	cmp	r3, #21
 801058e:	d902      	bls.n	8010596 <phhalHw_Pn5180_Instr_WriteE2Prom+0x3a>
        || (0U == bDataLength) \
 8010590:	7abb      	ldrb	r3, [r7, #10]
 8010592:	2b00      	cmp	r3, #0
 8010594:	d102      	bne.n	801059c <phhalHw_Pn5180_Instr_WriteE2Prom+0x40>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010596:	f240 2321 	movw	r3, #545	@ 0x221
 801059a:	e053      	b.n	8010644 <phhalHw_Pn5180_Instr_WriteE2Prom+0xe8>
    }

    /* Calculate maximum writable data from current address*/
    bE2PLength = (PHHAL_HW_PN5180_E2PROM_MAX_ADDESS - bE2PromAddress) + 1U;
 801059c:	7afb      	ldrb	r3, [r7, #11]
 801059e:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 80105a2:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 80105a6:	33fe      	adds	r3, #254	@ 0xfe
 80105a8:	77fb      	strb	r3, [r7, #31]

    /* Validate The E2PROM minimum payload length of 1 byte */
    if (bE2PLength < bDataLength)
 80105aa:	7ffa      	ldrb	r2, [r7, #31]
 80105ac:	7abb      	ldrb	r3, [r7, #10]
 80105ae:	429a      	cmp	r2, r3
 80105b0:	d202      	bcs.n	80105b8 <phhalHw_Pn5180_Instr_WriteE2Prom+0x5c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
 80105b2:	f240 2322 	movw	r3, #546	@ 0x222
 80105b6:	e045      	b.n	8010644 <phhalHw_Pn5180_Instr_WriteE2Prom+0xe8>
    }

    /* Get Buffer */
    phhalHw_Pn5180_Instr_GetInstrBuffer(pDataParams, &pTmpBuffer, &wTmpBufferLen);
 80105b8:	f107 0212 	add.w	r2, r7, #18
 80105bc:	f107 0314 	add.w	r3, r7, #20
 80105c0:	4619      	mov	r1, r3
 80105c2:	68f8      	ldr	r0, [r7, #12]
 80105c4:	f7ff fc78 	bl	800feb8 <phhalHw_Pn5180_Instr_GetInstrBuffer>

    /* Check if the buffer size is sufficient*/
    if (wTmpBufferLen < (bDataLength + PHHAL_HW_PN5180_WRITE_E2PROM_FIXED_CMD_BYTES))
 80105c8:	8a7b      	ldrh	r3, [r7, #18]
 80105ca:	461a      	mov	r2, r3
 80105cc:	7abb      	ldrb	r3, [r7, #10]
 80105ce:	3303      	adds	r3, #3
 80105d0:	429a      	cmp	r2, r3
 80105d2:	d202      	bcs.n	80105da <phhalHw_Pn5180_Instr_WriteE2Prom+0x7e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 80105d4:	f44f 7301 	mov.w	r3, #516	@ 0x204
 80105d8:	e034      	b.n	8010644 <phhalHw_Pn5180_Instr_WriteE2Prom+0xe8>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 80105da:	2300      	movs	r3, #0
 80105dc:	77bb      	strb	r3, [r7, #30]
    pTmpBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_WRITE_E2PROM;
 80105de:	697a      	ldr	r2, [r7, #20]
 80105e0:	7fbb      	ldrb	r3, [r7, #30]
 80105e2:	1c59      	adds	r1, r3, #1
 80105e4:	77b9      	strb	r1, [r7, #30]
 80105e6:	4413      	add	r3, r2
 80105e8:	2206      	movs	r2, #6
 80105ea:	701a      	strb	r2, [r3, #0]
    pTmpBuffer[wBufferLength++] = bE2PromAddress;
 80105ec:	697a      	ldr	r2, [r7, #20]
 80105ee:	7fbb      	ldrb	r3, [r7, #30]
 80105f0:	1c59      	adds	r1, r3, #1
 80105f2:	77b9      	strb	r1, [r7, #30]
 80105f4:	4413      	add	r3, r2
 80105f6:	7afa      	ldrb	r2, [r7, #11]
 80105f8:	701a      	strb	r2, [r3, #0]

    /* Copy the Instruction payload and update the buffer length*/
    (void)memcpy(&pTmpBuffer[wBufferLength], pDataToWrite, bDataLength);
 80105fa:	697a      	ldr	r2, [r7, #20]
 80105fc:	7fbb      	ldrb	r3, [r7, #30]
 80105fe:	4413      	add	r3, r2
 8010600:	7aba      	ldrb	r2, [r7, #10]
 8010602:	6879      	ldr	r1, [r7, #4]
 8010604:	4618      	mov	r0, r3
 8010606:	f00c fdfa 	bl	801d1fe <memcpy>
    wBufferLength += bDataLength;
 801060a:	7fba      	ldrb	r2, [r7, #30]
 801060c:	7abb      	ldrb	r3, [r7, #10]
 801060e:	4413      	add	r3, r2
 8010610:	77bb      	strb	r3, [r7, #30]

    /* No Response expected*/
    bNumExpBytes = 0U;
 8010612:	2300      	movs	r3, #0
 8010614:	777b      	strb	r3, [r7, #29]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8010616:	6979      	ldr	r1, [r7, #20]
 8010618:	7fbb      	ldrb	r3, [r7, #30]
 801061a:	b29a      	uxth	r2, r3
 801061c:	7f7b      	ldrb	r3, [r7, #29]
 801061e:	b298      	uxth	r0, r3
 8010620:	f107 0318 	add.w	r3, r7, #24
 8010624:	9301      	str	r3, [sp, #4]
 8010626:	f107 0310 	add.w	r3, r7, #16
 801062a:	9300      	str	r3, [sp, #0]
 801062c:	4603      	mov	r3, r0
 801062e:	68f8      	ldr	r0, [r7, #12]
 8010630:	f7fe fdbe 	bl	800f1b0 <phhalHw_Pn5180_BalExchange>
 8010634:	4603      	mov	r3, r0
 8010636:	837b      	strh	r3, [r7, #26]
 8010638:	8b7b      	ldrh	r3, [r7, #26]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d001      	beq.n	8010642 <phhalHw_Pn5180_Instr_WriteE2Prom+0xe6>
 801063e:	8b7b      	ldrh	r3, [r7, #26]
 8010640:	e000      	b.n	8010644 <phhalHw_Pn5180_Instr_WriteE2Prom+0xe8>
        wBufferLength,
        bNumExpBytes,
        pReceivedData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 8010642:	2300      	movs	r3, #0
}
 8010644:	4618      	mov	r0, r3
 8010646:	3720      	adds	r7, #32
 8010648:	46bd      	mov	sp, r7
 801064a:	bd80      	pop	{r7, pc}

0801064c <phhalHw_Pn5180_Instr_ReadE2Prom>:
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bE2PromAddress,
    uint8_t * pReadData,
    uint8_t bDataLength
    )
{
 801064c:	b580      	push	{r7, lr}
 801064e:	b08a      	sub	sp, #40	@ 0x28
 8010650:	af02      	add	r7, sp, #8
 8010652:	60f8      	str	r0, [r7, #12]
 8010654:	607a      	str	r2, [r7, #4]
 8010656:	461a      	mov	r2, r3
 8010658:	460b      	mov	r3, r1
 801065a:	72fb      	strb	r3, [r7, #11]
 801065c:	4613      	mov	r3, r2
 801065e:	72bb      	strb	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t    PH_MEMLOC_REM wDataLenTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint8_t     PH_MEMLOC_REM bDataBuffer[3];
    uint8_t     PH_MEMLOC_REM bE2PLength;
    bE2PLength = 0U;
 8010660:	2300      	movs	r3, #0
 8010662:	77fb      	strb	r3, [r7, #31]

    /* Validate pDataParams
    * Validate E2PROM maximum address value
    * Validate the datalength*/
    if ( (NULL == pDataParams) || (NULL == pReadData) \
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d008      	beq.n	801067c <phhalHw_Pn5180_Instr_ReadE2Prom+0x30>
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d005      	beq.n	801067c <phhalHw_Pn5180_Instr_ReadE2Prom+0x30>
        || (bE2PromAddress > PHHAL_HW_PN5180_E2PROM_MAX_ADDESS) \
 8010670:	7afb      	ldrb	r3, [r7, #11]
 8010672:	2bfd      	cmp	r3, #253	@ 0xfd
 8010674:	d802      	bhi.n	801067c <phhalHw_Pn5180_Instr_ReadE2Prom+0x30>
        || (0U == bDataLength) \
 8010676:	7abb      	ldrb	r3, [r7, #10]
 8010678:	2b00      	cmp	r3, #0
 801067a:	d11f      	bne.n	80106bc <phhalHw_Pn5180_Instr_ReadE2Prom+0x70>
        )
    {
    	printf("Error: %s%s%s%s\n",
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	2b00      	cmp	r3, #0
 8010680:	d101      	bne.n	8010686 <phhalHw_Pn5180_Instr_ReadE2Prom+0x3a>
 8010682:	4934      	ldr	r1, [pc, #208]	@ (8010754 <phhalHw_Pn5180_Instr_ReadE2Prom+0x108>)
 8010684:	e000      	b.n	8010688 <phhalHw_Pn5180_Instr_ReadE2Prom+0x3c>
 8010686:	4934      	ldr	r1, [pc, #208]	@ (8010758 <phhalHw_Pn5180_Instr_ReadE2Prom+0x10c>)
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d101      	bne.n	8010692 <phhalHw_Pn5180_Instr_ReadE2Prom+0x46>
 801068e:	4a33      	ldr	r2, [pc, #204]	@ (801075c <phhalHw_Pn5180_Instr_ReadE2Prom+0x110>)
 8010690:	e000      	b.n	8010694 <phhalHw_Pn5180_Instr_ReadE2Prom+0x48>
 8010692:	4a31      	ldr	r2, [pc, #196]	@ (8010758 <phhalHw_Pn5180_Instr_ReadE2Prom+0x10c>)
 8010694:	7afb      	ldrb	r3, [r7, #11]
 8010696:	2bfd      	cmp	r3, #253	@ 0xfd
 8010698:	d901      	bls.n	801069e <phhalHw_Pn5180_Instr_ReadE2Prom+0x52>
 801069a:	4831      	ldr	r0, [pc, #196]	@ (8010760 <phhalHw_Pn5180_Instr_ReadE2Prom+0x114>)
 801069c:	e000      	b.n	80106a0 <phhalHw_Pn5180_Instr_ReadE2Prom+0x54>
 801069e:	482e      	ldr	r0, [pc, #184]	@ (8010758 <phhalHw_Pn5180_Instr_ReadE2Prom+0x10c>)
 80106a0:	7abb      	ldrb	r3, [r7, #10]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d101      	bne.n	80106aa <phhalHw_Pn5180_Instr_ReadE2Prom+0x5e>
 80106a6:	4b2f      	ldr	r3, [pc, #188]	@ (8010764 <phhalHw_Pn5180_Instr_ReadE2Prom+0x118>)
 80106a8:	e000      	b.n	80106ac <phhalHw_Pn5180_Instr_ReadE2Prom+0x60>
 80106aa:	4b2b      	ldr	r3, [pc, #172]	@ (8010758 <phhalHw_Pn5180_Instr_ReadE2Prom+0x10c>)
 80106ac:	9300      	str	r3, [sp, #0]
 80106ae:	4603      	mov	r3, r0
 80106b0:	482d      	ldr	r0, [pc, #180]	@ (8010768 <phhalHw_Pn5180_Instr_ReadE2Prom+0x11c>)
 80106b2:	f00c fbc5 	bl	801ce40 <iprintf>
    	           (NULL == pDataParams) ? "pDataParams=NULL " : "",
    	           (NULL == pReadData) ? "pReadData=NULL " : "",
    	           (bE2PromAddress > PHHAL_HW_PN5180_E2PROM_MAX_ADDESS) ? "E2PromAddr>MAX " : "",
    	           (0U == bDataLength) ? "bDataLength=0 " : ""); //debug printf

        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80106b6:	f240 2321 	movw	r3, #545	@ 0x221
 80106ba:	e046      	b.n	801074a <phhalHw_Pn5180_Instr_ReadE2Prom+0xfe>
    }

    /* Calculate maximum readable data from current address*/
    bE2PLength = (PHHAL_HW_PN5180_E2PROM_MAX_ADDESS - bE2PromAddress) + 1U;
 80106bc:	7afb      	ldrb	r3, [r7, #11]
 80106be:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 80106c2:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 80106c6:	33fe      	adds	r3, #254	@ 0xfe
 80106c8:	77fb      	strb	r3, [r7, #31]

    /* Validate The E2PROM minimum payload length of 1 byte */
    if  (bE2PLength < bDataLength)
 80106ca:	7ffa      	ldrb	r2, [r7, #31]
 80106cc:	7abb      	ldrb	r3, [r7, #10]
 80106ce:	429a      	cmp	r2, r3
 80106d0:	d202      	bcs.n	80106d8 <phhalHw_Pn5180_Instr_ReadE2Prom+0x8c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
 80106d2:	f240 2322 	movw	r3, #546	@ 0x222
 80106d6:	e038      	b.n	801074a <phhalHw_Pn5180_Instr_ReadE2Prom+0xfe>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 80106d8:	2300      	movs	r3, #0
 80106da:	77bb      	strb	r3, [r7, #30]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_READ_E2PROM;
 80106dc:	7fbb      	ldrb	r3, [r7, #30]
 80106de:	1c5a      	adds	r2, r3, #1
 80106e0:	77ba      	strb	r2, [r7, #30]
 80106e2:	3320      	adds	r3, #32
 80106e4:	443b      	add	r3, r7
 80106e6:	2207      	movs	r2, #7
 80106e8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bE2PromAddress;
 80106ec:	7fbb      	ldrb	r3, [r7, #30]
 80106ee:	1c5a      	adds	r2, r3, #1
 80106f0:	77ba      	strb	r2, [r7, #30]
 80106f2:	3320      	adds	r3, #32
 80106f4:	443b      	add	r3, r7
 80106f6:	7afa      	ldrb	r2, [r7, #11]
 80106f8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bDataLength;
 80106fc:	7fbb      	ldrb	r3, [r7, #30]
 80106fe:	1c5a      	adds	r2, r3, #1
 8010700:	77ba      	strb	r2, [r7, #30]
 8010702:	3320      	adds	r3, #32
 8010704:	443b      	add	r3, r7
 8010706:	7aba      	ldrb	r2, [r7, #10]
 8010708:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 801070c:	7fbb      	ldrb	r3, [r7, #30]
 801070e:	b29a      	uxth	r2, r3
 8010710:	7abb      	ldrb	r3, [r7, #10]
 8010712:	b298      	uxth	r0, r3
 8010714:	f107 0114 	add.w	r1, r7, #20
 8010718:	f107 031a 	add.w	r3, r7, #26
 801071c:	9301      	str	r3, [sp, #4]
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	9300      	str	r3, [sp, #0]
 8010722:	4603      	mov	r3, r0
 8010724:	68f8      	ldr	r0, [r7, #12]
 8010726:	f7fe fd43 	bl	800f1b0 <phhalHw_Pn5180_BalExchange>
 801072a:	4603      	mov	r3, r0
 801072c:	83bb      	strh	r3, [r7, #28]
 801072e:	8bbb      	ldrh	r3, [r7, #28]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d001      	beq.n	8010738 <phhalHw_Pn5180_Instr_ReadE2Prom+0xec>
 8010734:	8bbb      	ldrh	r3, [r7, #28]
 8010736:	e008      	b.n	801074a <phhalHw_Pn5180_Instr_ReadE2Prom+0xfe>
        bDataLength,
        pReadData,
        &wDataLenTmp));

    /* Validate the response, if any */
    if (wDataLenTmp  != bDataLength)
 8010738:	7abb      	ldrb	r3, [r7, #10]
 801073a:	b29a      	uxth	r2, r3
 801073c:	8b7b      	ldrh	r3, [r7, #26]
 801073e:	429a      	cmp	r2, r3
 8010740:	d002      	beq.n	8010748 <phhalHw_Pn5180_Instr_ReadE2Prom+0xfc>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 8010742:	f240 237f 	movw	r3, #639	@ 0x27f
 8010746:	e000      	b.n	801074a <phhalHw_Pn5180_Instr_ReadE2Prom+0xfe>
    }

    return PH_ERR_SUCCESS;
 8010748:	2300      	movs	r3, #0
}
 801074a:	4618      	mov	r0, r3
 801074c:	3720      	adds	r7, #32
 801074e:	46bd      	mov	sp, r7
 8010750:	bd80      	pop	{r7, pc}
 8010752:	bf00      	nop
 8010754:	0801f858 	.word	0x0801f858
 8010758:	0801f86c 	.word	0x0801f86c
 801075c:	0801f870 	.word	0x0801f870
 8010760:	0801f880 	.word	0x0801f880
 8010764:	0801f890 	.word	0x0801f890
 8010768:	0801f8a0 	.word	0x0801f8a0

0801076c <phhalHw_Pn5180_Instr_RetrieveRxData>:
phStatus_t phhalHw_Pn5180_Instr_RetrieveRxData(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t ** pRxBuffer,
    uint16_t wExpectedRxDataLength
    )
{
 801076c:	b590      	push	{r4, r7, lr}
 801076e:	b08b      	sub	sp, #44	@ 0x2c
 8010770:	af02      	add	r7, sp, #8
 8010772:	60f8      	str	r0, [r7, #12]
 8010774:	60b9      	str	r1, [r7, #8]
 8010776:	4613      	mov	r3, r2
 8010778:	80fb      	strh	r3, [r7, #6]
    uint8_t *   PH_MEMLOC_REM pTmpBuffer = NULL;
 801077a:	2300      	movs	r3, #0
 801077c:	61bb      	str	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 801077e:	2300      	movs	r3, #0
 8010780:	82fb      	strh	r3, [r7, #22]
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint8_t     PH_MEMLOC_REM bDataBuffer[2];

    /* Validate pDataParams
    * Validate reception buffer length*/
    if ( (NULL == pDataParams) || (NULL == pRxBuffer) )
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d002      	beq.n	801078e <phhalHw_Pn5180_Instr_RetrieveRxData+0x22>
 8010788:	68bb      	ldr	r3, [r7, #8]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d102      	bne.n	8010794 <phhalHw_Pn5180_Instr_RetrieveRxData+0x28>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 801078e:	f240 2321 	movw	r3, #545	@ 0x221
 8010792:	e056      	b.n	8010842 <phhalHw_Pn5180_Instr_RetrieveRxData+0xd6>
    }

    /* Validate reception buffer length*/
    if ( (wExpectedRxDataLength > PHHAL_HW_PN5180_RX_DATA_MAX_LENGTH) \
 8010794:	88fb      	ldrh	r3, [r7, #6]
 8010796:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801079a:	d802      	bhi.n	80107a2 <phhalHw_Pn5180_Instr_RetrieveRxData+0x36>
        || (wExpectedRxDataLength < PHHAL_HW_PN5180_RX_DATA_MIN_LENGTH) \
 801079c:	88fb      	ldrh	r3, [r7, #6]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d102      	bne.n	80107a8 <phhalHw_Pn5180_Instr_RetrieveRxData+0x3c>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 80107a2:	f44f 7301 	mov.w	r3, #516	@ 0x204
 80107a6:	e04c      	b.n	8010842 <phhalHw_Pn5180_Instr_RetrieveRxData+0xd6>
    }

    /* Get Buffer*/
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetRxBuffer(pDataParams, PH_ON, &pTmpBuffer, &wTmpBufferLen, &wTmpBufferSize));
 80107a8:	f107 0116 	add.w	r1, r7, #22
 80107ac:	f107 0218 	add.w	r2, r7, #24
 80107b0:	f107 0314 	add.w	r3, r7, #20
 80107b4:	9300      	str	r3, [sp, #0]
 80107b6:	460b      	mov	r3, r1
 80107b8:	2101      	movs	r1, #1
 80107ba:	68f8      	ldr	r0, [r7, #12]
 80107bc:	f000 fbbf 	bl	8010f3e <phhalHw_Pn5180_GetRxBuffer>
 80107c0:	4603      	mov	r3, r0
 80107c2:	83fb      	strh	r3, [r7, #30]
 80107c4:	8bfb      	ldrh	r3, [r7, #30]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d001      	beq.n	80107ce <phhalHw_Pn5180_Instr_RetrieveRxData+0x62>
 80107ca:	8bfb      	ldrh	r3, [r7, #30]
 80107cc:	e039      	b.n	8010842 <phhalHw_Pn5180_Instr_RetrieveRxData+0xd6>

    /* Check if the buffer size is sufficient*/
    if (wTmpBufferSize < wExpectedRxDataLength)
 80107ce:	8abb      	ldrh	r3, [r7, #20]
 80107d0:	88fa      	ldrh	r2, [r7, #6]
 80107d2:	429a      	cmp	r2, r3
 80107d4:	d902      	bls.n	80107dc <phhalHw_Pn5180_Instr_RetrieveRxData+0x70>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 80107d6:	f44f 7301 	mov.w	r3, #516	@ 0x204
 80107da:	e032      	b.n	8010842 <phhalHw_Pn5180_Instr_RetrieveRxData+0xd6>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 80107dc:	2300      	movs	r3, #0
 80107de:	777b      	strb	r3, [r7, #29]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_RETRIEVE_RX_DATA;
 80107e0:	7f7b      	ldrb	r3, [r7, #29]
 80107e2:	1c5a      	adds	r2, r3, #1
 80107e4:	777a      	strb	r2, [r7, #29]
 80107e6:	3320      	adds	r3, #32
 80107e8:	443b      	add	r3, r7
 80107ea:	220a      	movs	r2, #10
 80107ec:	f803 2c10 	strb.w	r2, [r3, #-16]
    /*bDataBuffer[wBufferLength++] = (uint8_t)wExpectedRxDataLength;*/ /* RFU */
    bDataBuffer[wBufferLength++] = 0U; /* RFU */
 80107f0:	7f7b      	ldrb	r3, [r7, #29]
 80107f2:	1c5a      	adds	r2, r3, #1
 80107f4:	777a      	strb	r2, [r7, #29]
 80107f6:	3320      	adds	r3, #32
 80107f8:	443b      	add	r3, r7
 80107fa:	2200      	movs	r2, #0
 80107fc:	f803 2c10 	strb.w	r2, [r3, #-16]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8010800:	7f7b      	ldrb	r3, [r7, #29]
 8010802:	b298      	uxth	r0, r3
 8010804:	69bb      	ldr	r3, [r7, #24]
 8010806:	88fc      	ldrh	r4, [r7, #6]
 8010808:	f107 0110 	add.w	r1, r7, #16
 801080c:	f107 0212 	add.w	r2, r7, #18
 8010810:	9201      	str	r2, [sp, #4]
 8010812:	9300      	str	r3, [sp, #0]
 8010814:	4623      	mov	r3, r4
 8010816:	4602      	mov	r2, r0
 8010818:	68f8      	ldr	r0, [r7, #12]
 801081a:	f7fe fcc9 	bl	800f1b0 <phhalHw_Pn5180_BalExchange>
 801081e:	4603      	mov	r3, r0
 8010820:	83fb      	strh	r3, [r7, #30]
 8010822:	8bfb      	ldrh	r3, [r7, #30]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d001      	beq.n	801082c <phhalHw_Pn5180_Instr_RetrieveRxData+0xc0>
 8010828:	8bfb      	ldrh	r3, [r7, #30]
 801082a:	e00a      	b.n	8010842 <phhalHw_Pn5180_Instr_RetrieveRxData+0xd6>
        wExpectedRxDataLength,
        pTmpBuffer,
        &wDataLenTmp));

    /* Validate the response, if any */
    if (wDataLenTmp  != wExpectedRxDataLength)
 801082c:	8a7b      	ldrh	r3, [r7, #18]
 801082e:	88fa      	ldrh	r2, [r7, #6]
 8010830:	429a      	cmp	r2, r3
 8010832:	d002      	beq.n	801083a <phhalHw_Pn5180_Instr_RetrieveRxData+0xce>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 8010834:	f240 237f 	movw	r3, #639	@ 0x27f
 8010838:	e003      	b.n	8010842 <phhalHw_Pn5180_Instr_RetrieveRxData+0xd6>
    }

    /* return the pointer to the buffer */
    *pRxBuffer = pTmpBuffer;
 801083a:	69ba      	ldr	r2, [r7, #24]
 801083c:	68bb      	ldr	r3, [r7, #8]
 801083e:	601a      	str	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8010840:	2300      	movs	r3, #0
}
 8010842:	4618      	mov	r0, r3
 8010844:	3724      	adds	r7, #36	@ 0x24
 8010846:	46bd      	mov	sp, r7
 8010848:	bd90      	pop	{r4, r7, pc}

0801084a <phhalHw_Pn5180_Instr_SwitchModeLpcd>:

phStatus_t phhalHw_Pn5180_Instr_SwitchModeLpcd(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wWakeupCounterInMs
    )
{
 801084a:	b580      	push	{r7, lr}
 801084c:	b088      	sub	sp, #32
 801084e:	af02      	add	r7, sp, #8
 8010850:	6078      	str	r0, [r7, #4]
 8010852:	460b      	mov	r3, r1
 8010854:	807b      	strh	r3, [r7, #2]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint16_t    PH_MEMLOC_REM wTempRxDataLen = 0;
 8010856:	2300      	movs	r3, #0
 8010858:	823b      	strh	r3, [r7, #16]

    /*
    Validate pDataParams
    Validate wWakeupCounterInMs
    */
    if ( (NULL == pDataParams) \
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d007      	beq.n	8010870 <phhalHw_Pn5180_Instr_SwitchModeLpcd+0x26>
        /* wWakeupCounterInMs is zero */
        || (wWakeupCounterInMs == 0U) \
 8010860:	887b      	ldrh	r3, [r7, #2]
 8010862:	2b00      	cmp	r3, #0
 8010864:	d004      	beq.n	8010870 <phhalHw_Pn5180_Instr_SwitchModeLpcd+0x26>
        /* wWakeupCounterInMs is more than the maximum value */
        || (wWakeupCounterInMs > PHHAL_HW_PN5180_MAX_WAKEUP_COUNTER)    \
 8010866:	887b      	ldrh	r3, [r7, #2]
 8010868:	f640 2282 	movw	r2, #2690	@ 0xa82
 801086c:	4293      	cmp	r3, r2
 801086e:	d902      	bls.n	8010876 <phhalHw_Pn5180_Instr_SwitchModeLpcd+0x2c>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010870:	f240 2321 	movw	r3, #545	@ 0x221
 8010874:	e03e      	b.n	80108f4 <phhalHw_Pn5180_Instr_SwitchModeLpcd+0xaa>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8010876:	2300      	movs	r3, #0
 8010878:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_SWITCH_MODE;
 801087a:	7dfb      	ldrb	r3, [r7, #23]
 801087c:	1c5a      	adds	r2, r3, #1
 801087e:	75fa      	strb	r2, [r7, #23]
 8010880:	3318      	adds	r3, #24
 8010882:	443b      	add	r3, r7
 8010884:	220b      	movs	r2, #11
 8010886:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SWITCH_MODE_LPCD;
 801088a:	7dfb      	ldrb	r3, [r7, #23]
 801088c:	1c5a      	adds	r2, r3, #1
 801088e:	75fa      	strb	r2, [r7, #23]
 8010890:	3318      	adds	r3, #24
 8010892:	443b      	add	r3, r7
 8010894:	2201      	movs	r2, #1
 8010896:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* wWakeupCounterInMs LSB */
    bDataBuffer[wBufferLength++] = (uint8_t)(wWakeupCounterInMs & 0xFFU);
 801089a:	7dfb      	ldrb	r3, [r7, #23]
 801089c:	1c5a      	adds	r2, r3, #1
 801089e:	75fa      	strb	r2, [r7, #23]
 80108a0:	887a      	ldrh	r2, [r7, #2]
 80108a2:	b2d2      	uxtb	r2, r2
 80108a4:	3318      	adds	r3, #24
 80108a6:	443b      	add	r3, r7
 80108a8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* wWakeupCounterInMs MSB */
    bDataBuffer[wBufferLength++] = (uint8_t)((wWakeupCounterInMs >> 8U) & 0xFFU);
 80108ac:	887b      	ldrh	r3, [r7, #2]
 80108ae:	0a1b      	lsrs	r3, r3, #8
 80108b0:	b29a      	uxth	r2, r3
 80108b2:	7dfb      	ldrb	r3, [r7, #23]
 80108b4:	1c59      	adds	r1, r3, #1
 80108b6:	75f9      	strb	r1, [r7, #23]
 80108b8:	b2d2      	uxtb	r2, r2
 80108ba:	3318      	adds	r3, #24
 80108bc:	443b      	add	r3, r7
 80108be:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* Expected number of bytes */
    bNumExpBytes = 0U;
 80108c2:	2300      	movs	r3, #0
 80108c4:	82bb      	strh	r3, [r7, #20]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 80108c6:	7dfb      	ldrb	r3, [r7, #23]
 80108c8:	b29a      	uxth	r2, r3
 80108ca:	8ab8      	ldrh	r0, [r7, #20]
 80108cc:	f107 010c 	add.w	r1, r7, #12
 80108d0:	f107 0310 	add.w	r3, r7, #16
 80108d4:	9301      	str	r3, [sp, #4]
 80108d6:	f107 0308 	add.w	r3, r7, #8
 80108da:	9300      	str	r3, [sp, #0]
 80108dc:	4603      	mov	r3, r0
 80108de:	6878      	ldr	r0, [r7, #4]
 80108e0:	f7fe fc66 	bl	800f1b0 <phhalHw_Pn5180_BalExchange>
 80108e4:	4603      	mov	r3, r0
 80108e6:	827b      	strh	r3, [r7, #18]
 80108e8:	8a7b      	ldrh	r3, [r7, #18]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d001      	beq.n	80108f2 <phhalHw_Pn5180_Instr_SwitchModeLpcd+0xa8>
 80108ee:	8a7b      	ldrh	r3, [r7, #18]
 80108f0:	e000      	b.n	80108f4 <phhalHw_Pn5180_Instr_SwitchModeLpcd+0xaa>
        wBufferLength,
        bNumExpBytes,
        bRecBuffer,
        &wTempRxDataLen));

    return PH_ERR_SUCCESS;
 80108f2:	2300      	movs	r3, #0
}
 80108f4:	4618      	mov	r0, r3
 80108f6:	3718      	adds	r7, #24
 80108f8:	46bd      	mov	sp, r7
 80108fa:	bd80      	pop	{r7, pc}

080108fc <phhalHw_Pn5180_Instr_SwitchModeAutocoll>:
phStatus_t phhalHw_Pn5180_Instr_SwitchModeAutocoll(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRfTechnology,
    uint8_t bAutocollMode
    )
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b088      	sub	sp, #32
 8010900:	af02      	add	r7, sp, #8
 8010902:	6078      	str	r0, [r7, #4]
 8010904:	460b      	mov	r3, r1
 8010906:	70fb      	strb	r3, [r7, #3]
 8010908:	4613      	mov	r3, r2
 801090a:	70bb      	strb	r3, [r7, #2]

    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint16_t    PH_MEMLOC_REM wTempRxDataLen = 0;
 801090c:	2300      	movs	r3, #0
 801090e:	823b      	strh	r3, [r7, #16]
    uint16_t    PH_MEMLOC_REM bNumExpBytes;
    uint8_t     PH_MEMLOC_REM bDataBuffer[4];
    uint8_t     PH_MEMLOC_REM bRecBuffer[1];

    bRfTechnology &= PHHAL_HW_PN5180_AUTOCOLL_RF_TECHNOLOGY_MASK;
 8010910:	78fb      	ldrb	r3, [r7, #3]
 8010912:	f003 030f 	and.w	r3, r3, #15
 8010916:	70fb      	strb	r3, [r7, #3]
    /* Validate pDataParams
    Validate bRfTechnologyMask
    Validate bAutocollMode
    */
    if ( (NULL == pDataParams)  \
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d005      	beq.n	801092a <phhalHw_Pn5180_Instr_SwitchModeAutocoll+0x2e>
        || (0U == bRfTechnology) \
 801091e:	78fb      	ldrb	r3, [r7, #3]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d002      	beq.n	801092a <phhalHw_Pn5180_Instr_SwitchModeAutocoll+0x2e>
        || ( bAutocollMode > 2U) \
 8010924:	78bb      	ldrb	r3, [r7, #2]
 8010926:	2b02      	cmp	r3, #2
 8010928:	d902      	bls.n	8010930 <phhalHw_Pn5180_Instr_SwitchModeAutocoll+0x34>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 801092a:	f240 2321 	movw	r3, #545	@ 0x221
 801092e:	e03a      	b.n	80109a6 <phhalHw_Pn5180_Instr_SwitchModeAutocoll+0xaa>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8010930:	2300      	movs	r3, #0
 8010932:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_SWITCH_MODE;
 8010934:	7dfb      	ldrb	r3, [r7, #23]
 8010936:	1c5a      	adds	r2, r3, #1
 8010938:	75fa      	strb	r2, [r7, #23]
 801093a:	3318      	adds	r3, #24
 801093c:	443b      	add	r3, r7
 801093e:	220b      	movs	r2, #11
 8010940:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SWITCH_MODE_AUTOCOLL;
 8010944:	7dfb      	ldrb	r3, [r7, #23]
 8010946:	1c5a      	adds	r2, r3, #1
 8010948:	75fa      	strb	r2, [r7, #23]
 801094a:	3318      	adds	r3, #24
 801094c:	443b      	add	r3, r7
 801094e:	2202      	movs	r2, #2
 8010950:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* RF technologies  */
    bDataBuffer[wBufferLength++] = bRfTechnology;
 8010954:	7dfb      	ldrb	r3, [r7, #23]
 8010956:	1c5a      	adds	r2, r3, #1
 8010958:	75fa      	strb	r2, [r7, #23]
 801095a:	3318      	adds	r3, #24
 801095c:	443b      	add	r3, r7
 801095e:	78fa      	ldrb	r2, [r7, #3]
 8010960:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* mode of autocoll*/
    bDataBuffer[wBufferLength++] = bAutocollMode;
 8010964:	7dfb      	ldrb	r3, [r7, #23]
 8010966:	1c5a      	adds	r2, r3, #1
 8010968:	75fa      	strb	r2, [r7, #23]
 801096a:	3318      	adds	r3, #24
 801096c:	443b      	add	r3, r7
 801096e:	78ba      	ldrb	r2, [r7, #2]
 8010970:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* Expected number of bytes */
    bNumExpBytes = 0U;
 8010974:	2300      	movs	r3, #0
 8010976:	82bb      	strh	r3, [r7, #20]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8010978:	7dfb      	ldrb	r3, [r7, #23]
 801097a:	b29a      	uxth	r2, r3
 801097c:	8ab8      	ldrh	r0, [r7, #20]
 801097e:	f107 010c 	add.w	r1, r7, #12
 8010982:	f107 0310 	add.w	r3, r7, #16
 8010986:	9301      	str	r3, [sp, #4]
 8010988:	f107 0308 	add.w	r3, r7, #8
 801098c:	9300      	str	r3, [sp, #0]
 801098e:	4603      	mov	r3, r0
 8010990:	6878      	ldr	r0, [r7, #4]
 8010992:	f7fe fc0d 	bl	800f1b0 <phhalHw_Pn5180_BalExchange>
 8010996:	4603      	mov	r3, r0
 8010998:	827b      	strh	r3, [r7, #18]
 801099a:	8a7b      	ldrh	r3, [r7, #18]
 801099c:	2b00      	cmp	r3, #0
 801099e:	d001      	beq.n	80109a4 <phhalHw_Pn5180_Instr_SwitchModeAutocoll+0xa8>
 80109a0:	8a7b      	ldrh	r3, [r7, #18]
 80109a2:	e000      	b.n	80109a6 <phhalHw_Pn5180_Instr_SwitchModeAutocoll+0xaa>
        wBufferLength,
        bNumExpBytes,
        bRecBuffer,
        &wTempRxDataLen));

    return PH_ERR_SUCCESS;
 80109a4:	2300      	movs	r3, #0
}
 80109a6:	4618      	mov	r0, r3
 80109a8:	3718      	adds	r7, #24
 80109aa:	46bd      	mov	sp, r7
 80109ac:	bd80      	pop	{r7, pc}

080109ae <phhalHw_Pn5180_Instr_SwitchModeNormal>:

phStatus_t phhalHw_Pn5180_Instr_SwitchModeNormal(phhalHw_Pn5180_DataParams_t * pDataParams)
{
 80109ae:	b580      	push	{r7, lr}
 80109b0:	b088      	sub	sp, #32
 80109b2:	af02      	add	r7, sp, #8
 80109b4:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint16_t    PH_MEMLOC_REM bNumExpBytes;
    uint8_t     PH_MEMLOC_REM bDataBuffer[2];
    uint8_t     PH_MEMLOC_REM bRecBuffer[1];
    uint16_t    PH_MEMLOC_REM wTempRxDataLen = 0;
 80109b6:	2300      	movs	r3, #0
 80109b8:	817b      	strh	r3, [r7, #10]
    /* Build the command frame */
    wBufferLength = 0U;
 80109ba:	2300      	movs	r3, #0
 80109bc:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_SWITCH_MODE;
 80109be:	7dfb      	ldrb	r3, [r7, #23]
 80109c0:	1c5a      	adds	r2, r3, #1
 80109c2:	75fa      	strb	r2, [r7, #23]
 80109c4:	3318      	adds	r3, #24
 80109c6:	443b      	add	r3, r7
 80109c8:	220b      	movs	r2, #11
 80109ca:	f803 2c08 	strb.w	r2, [r3, #-8]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SWITCH_MODE_NORMAL;
 80109ce:	7dfb      	ldrb	r3, [r7, #23]
 80109d0:	1c5a      	adds	r2, r3, #1
 80109d2:	75fa      	strb	r2, [r7, #23]
 80109d4:	3318      	adds	r3, #24
 80109d6:	443b      	add	r3, r7
 80109d8:	2203      	movs	r2, #3
 80109da:	f803 2c08 	strb.w	r2, [r3, #-8]

    /* Expected number of bytes */
    bNumExpBytes = 0U;
 80109de:	2300      	movs	r3, #0
 80109e0:	82bb      	strh	r3, [r7, #20]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 80109e2:	7dfb      	ldrb	r3, [r7, #23]
 80109e4:	b29a      	uxth	r2, r3
 80109e6:	8ab8      	ldrh	r0, [r7, #20]
 80109e8:	f107 0110 	add.w	r1, r7, #16
 80109ec:	f107 030a 	add.w	r3, r7, #10
 80109f0:	9301      	str	r3, [sp, #4]
 80109f2:	f107 030c 	add.w	r3, r7, #12
 80109f6:	9300      	str	r3, [sp, #0]
 80109f8:	4603      	mov	r3, r0
 80109fa:	6878      	ldr	r0, [r7, #4]
 80109fc:	f7fe fbd8 	bl	800f1b0 <phhalHw_Pn5180_BalExchange>
 8010a00:	4603      	mov	r3, r0
 8010a02:	827b      	strh	r3, [r7, #18]
 8010a04:	8a7b      	ldrh	r3, [r7, #18]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d001      	beq.n	8010a0e <phhalHw_Pn5180_Instr_SwitchModeNormal+0x60>
 8010a0a:	8a7b      	ldrh	r3, [r7, #18]
 8010a0c:	e000      	b.n	8010a10 <phhalHw_Pn5180_Instr_SwitchModeNormal+0x62>
        wBufferLength,
        bNumExpBytes,
        bRecBuffer,
        &wTempRxDataLen));

    return PH_ERR_SUCCESS;
 8010a0e:	2300      	movs	r3, #0
}
 8010a10:	4618      	mov	r0, r3
 8010a12:	3718      	adds	r7, #24
 8010a14:	46bd      	mov	sp, r7
 8010a16:	bd80      	pop	{r7, pc}

08010a18 <phhalHw_Pn5180_Instr_EpcGen2Inventory>:
    uint8_t bSelectCommandLength,
    uint8_t bSelectCommandBitsInLastByte,
    uint8_t * pBeginRoundCommand,
    uint8_t bTimeslotProcessingBehavior
    )
{
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	b08a      	sub	sp, #40	@ 0x28
 8010a1c:	af02      	add	r7, sp, #8
 8010a1e:	60f8      	str	r0, [r7, #12]
 8010a20:	60b9      	str	r1, [r7, #8]
 8010a22:	4611      	mov	r1, r2
 8010a24:	461a      	mov	r2, r3
 8010a26:	460b      	mov	r3, r1
 8010a28:	71fb      	strb	r3, [r7, #7]
 8010a2a:	4613      	mov	r3, r2
 8010a2c:	71bb      	strb	r3, [r7, #6]

    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t    PH_MEMLOC_REM wDataLenTmp;
    uint16_t    PH_MEMLOC_REM wBufferLength = 0;
 8010a2e:	2300      	movs	r3, #0
 8010a30:	83fb      	strh	r3, [r7, #30]
    uint8_t     PH_MEMLOC_REM bNumExpBytes;

    uint8_t*    PH_MEMLOC_REM pTmpBuffer;
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 8010a32:	2300      	movs	r3, #0
 8010a34:	827b      	strh	r3, [r7, #18]

    /* Validate pDataParams
    Validate pBeginRoundCommand
    Validate bTimeslotProcessingBehavior */

    if ( (NULL == pDataParams) \
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d006      	beq.n	8010a4a <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x32>
        || (NULL == pBeginRoundCommand)
 8010a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d003      	beq.n	8010a4a <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x32>
        || (bTimeslotProcessingBehavior > PHHAL_HW_PN5180_MAX_EPC_GEN2_TIMESLOT)
 8010a42:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010a46:	2b02      	cmp	r3, #2
 8010a48:	d902      	bls.n	8010a50 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x38>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010a4a:	f240 2321 	movw	r3, #545	@ 0x221
 8010a4e:	e06e      	b.n	8010b2e <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x116>
    }

    /* Validate the parameters of Select command */
    if (0U != (bSelectCommandLength))
 8010a50:	79fb      	ldrb	r3, [r7, #7]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d00b      	beq.n	8010a6e <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x56>
    {
        /* Validate pSelectCommand
        Validate bSelectCommandLength
        Validate bSelectCommandBitsInLastByte */
        if (                            \
 8010a56:	68bb      	ldr	r3, [r7, #8]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d005      	beq.n	8010a68 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x50>
            (NULL == pSelectCommand)    \
            || (bSelectCommandLength > PHHAL_HW_PN5180_MAX_SELECT_COMMAND_LENGTH)    \
 8010a5c:	79fb      	ldrb	r3, [r7, #7]
 8010a5e:	2b27      	cmp	r3, #39	@ 0x27
 8010a60:	d802      	bhi.n	8010a68 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x50>
            ||  (bSelectCommandBitsInLastByte > PHHAL_HW_PN5180_MAX_NUM_OF_BITS_FOR_LAST_BYTE) \
 8010a62:	79bb      	ldrb	r3, [r7, #6]
 8010a64:	2b07      	cmp	r3, #7
 8010a66:	d902      	bls.n	8010a6e <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x56>
            )
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010a68:	f240 2321 	movw	r3, #545	@ 0x221
 8010a6c:	e05f      	b.n	8010b2e <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x116>
        }
    }

    /* Get Buffer */
    phhalHw_Pn5180_Instr_GetInstrBuffer(pDataParams, &pTmpBuffer, &wTmpBufferLen);
 8010a6e:	f107 0212 	add.w	r2, r7, #18
 8010a72:	f107 0314 	add.w	r3, r7, #20
 8010a76:	4619      	mov	r1, r3
 8010a78:	68f8      	ldr	r0, [r7, #12]
 8010a7a:	f7ff fa1d 	bl	800feb8 <phhalHw_Pn5180_Instr_GetInstrBuffer>

    /* Check if the buffer size is sufficient*/
    if (wTmpBufferLen < 46U)
 8010a7e:	8a7b      	ldrh	r3, [r7, #18]
 8010a80:	2b2d      	cmp	r3, #45	@ 0x2d
 8010a82:	d802      	bhi.n	8010a8a <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x72>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 8010a84:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8010a88:	e051      	b.n	8010b2e <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x116>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	83fb      	strh	r3, [r7, #30]
    pTmpBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_EPC_GEN2_INVENTORY;
 8010a8e:	697a      	ldr	r2, [r7, #20]
 8010a90:	8bfb      	ldrh	r3, [r7, #30]
 8010a92:	1c59      	adds	r1, r3, #1
 8010a94:	83f9      	strh	r1, [r7, #30]
 8010a96:	4413      	add	r3, r2
 8010a98:	220d      	movs	r2, #13
 8010a9a:	701a      	strb	r2, [r3, #0]
    pTmpBuffer[wBufferLength++] = bSelectCommandLength;
 8010a9c:	697a      	ldr	r2, [r7, #20]
 8010a9e:	8bfb      	ldrh	r3, [r7, #30]
 8010aa0:	1c59      	adds	r1, r3, #1
 8010aa2:	83f9      	strh	r1, [r7, #30]
 8010aa4:	4413      	add	r3, r2
 8010aa6:	79fa      	ldrb	r2, [r7, #7]
 8010aa8:	701a      	strb	r2, [r3, #0]

    /*
    No Select command is set prior to BeginRound command.
    'Valid Bits in last Byte' field and 'Select command' field shall not be present.
    */
    if(0U != (bSelectCommandLength))
 8010aaa:	79fb      	ldrb	r3, [r7, #7]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d013      	beq.n	8010ad8 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0xc0>
    {
        pTmpBuffer[wBufferLength++] = bSelectCommandBitsInLastByte;
 8010ab0:	697a      	ldr	r2, [r7, #20]
 8010ab2:	8bfb      	ldrh	r3, [r7, #30]
 8010ab4:	1c59      	adds	r1, r3, #1
 8010ab6:	83f9      	strh	r1, [r7, #30]
 8010ab8:	4413      	add	r3, r2
 8010aba:	79ba      	ldrb	r2, [r7, #6]
 8010abc:	701a      	strb	r2, [r3, #0]

        /* Copy the Instruction payload and update the buffer length*/
        (void)memcpy(&pTmpBuffer[wBufferLength], pSelectCommand, bSelectCommandLength);
 8010abe:	697a      	ldr	r2, [r7, #20]
 8010ac0:	8bfb      	ldrh	r3, [r7, #30]
 8010ac2:	4413      	add	r3, r2
 8010ac4:	79fa      	ldrb	r2, [r7, #7]
 8010ac6:	68b9      	ldr	r1, [r7, #8]
 8010ac8:	4618      	mov	r0, r3
 8010aca:	f00c fb98 	bl	801d1fe <memcpy>
        wBufferLength+= bSelectCommandLength;
 8010ace:	79fb      	ldrb	r3, [r7, #7]
 8010ad0:	b29a      	uxth	r2, r3
 8010ad2:	8bfb      	ldrh	r3, [r7, #30]
 8010ad4:	4413      	add	r3, r2
 8010ad6:	83fb      	strh	r3, [r7, #30]
    }
    /* Copy the Instruction payload and update the buffer length*/
    (void)memcpy(&pTmpBuffer[wBufferLength], pBeginRoundCommand, PHHAL_HW_PN5180_BEGIN_COMMAND_LENGTH);
 8010ad8:	697a      	ldr	r2, [r7, #20]
 8010ada:	8bfb      	ldrh	r3, [r7, #30]
 8010adc:	4413      	add	r3, r2
 8010ade:	2203      	movs	r2, #3
 8010ae0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	f00c fb8b 	bl	801d1fe <memcpy>
    wBufferLength+= PHHAL_HW_PN5180_BEGIN_COMMAND_LENGTH;
 8010ae8:	8bfb      	ldrh	r3, [r7, #30]
 8010aea:	3303      	adds	r3, #3
 8010aec:	83fb      	strh	r3, [r7, #30]

    pTmpBuffer[wBufferLength++] = bTimeslotProcessingBehavior;
 8010aee:	697a      	ldr	r2, [r7, #20]
 8010af0:	8bfb      	ldrh	r3, [r7, #30]
 8010af2:	1c59      	adds	r1, r3, #1
 8010af4:	83f9      	strh	r1, [r7, #30]
 8010af6:	4413      	add	r3, r2
 8010af8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8010afc:	701a      	strb	r2, [r3, #0]

    /* No Response expected */
    bNumExpBytes = 0U;
 8010afe:	2300      	movs	r3, #0
 8010b00:	777b      	strb	r3, [r7, #29]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8010b02:	6979      	ldr	r1, [r7, #20]
 8010b04:	7f7b      	ldrb	r3, [r7, #29]
 8010b06:	b298      	uxth	r0, r3
 8010b08:	8bfa      	ldrh	r2, [r7, #30]
 8010b0a:	f107 0318 	add.w	r3, r7, #24
 8010b0e:	9301      	str	r3, [sp, #4]
 8010b10:	f107 0310 	add.w	r3, r7, #16
 8010b14:	9300      	str	r3, [sp, #0]
 8010b16:	4603      	mov	r3, r0
 8010b18:	68f8      	ldr	r0, [r7, #12]
 8010b1a:	f7fe fb49 	bl	800f1b0 <phhalHw_Pn5180_BalExchange>
 8010b1e:	4603      	mov	r3, r0
 8010b20:	837b      	strh	r3, [r7, #26]
 8010b22:	8b7b      	ldrh	r3, [r7, #26]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d001      	beq.n	8010b2c <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x114>
 8010b28:	8b7b      	ldrh	r3, [r7, #26]
 8010b2a:	e000      	b.n	8010b2e <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x116>
        wBufferLength,
        bNumExpBytes,
        pReceivedData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 8010b2c:	2300      	movs	r3, #0
}
 8010b2e:	4618      	mov	r0, r3
 8010b30:	3720      	adds	r7, #32
 8010b32:	46bd      	mov	sp, r7
 8010b34:	bd80      	pop	{r7, pc}

08010b36 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize>:

phStatus_t phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t * pResultSize
    )
{
 8010b36:	b580      	push	{r7, lr}
 8010b38:	b088      	sub	sp, #32
 8010b3a:	af02      	add	r7, sp, #8
 8010b3c:	6078      	str	r0, [r7, #4]
 8010b3e:	6039      	str	r1, [r7, #0]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint16_t    PH_MEMLOC_REM wTempRxDataLen = 0;
 8010b40:	2300      	movs	r3, #0
 8010b42:	823b      	strh	r3, [r7, #16]

    /*
    Validate pDataParams
    Validate pResultSize
    */
    if ( (NULL == pDataParams)    \
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d002      	beq.n	8010b50 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0x1a>
        || (NULL == pResultSize)    \
 8010b4a:	683b      	ldr	r3, [r7, #0]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d102      	bne.n	8010b56 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0x20>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010b50:	f240 2321 	movw	r3, #545	@ 0x221
 8010b54:	e041      	b.n	8010bda <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0xa4>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8010b56:	2300      	movs	r3, #0
 8010b58:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_EPC_GEN2_RETRIEVE_INVENTORY_RESULT_SIZE;
 8010b5a:	7dfb      	ldrb	r3, [r7, #23]
 8010b5c:	1c5a      	adds	r2, r3, #1
 8010b5e:	75fa      	strb	r2, [r7, #23]
 8010b60:	3318      	adds	r3, #24
 8010b62:	443b      	add	r3, r7
 8010b64:	220f      	movs	r2, #15
 8010b66:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = 0U;   /*RFU*/
 8010b6a:	7dfb      	ldrb	r3, [r7, #23]
 8010b6c:	1c5a      	adds	r2, r3, #1
 8010b6e:	75fa      	strb	r2, [r7, #23]
 8010b70:	3318      	adds	r3, #24
 8010b72:	443b      	add	r3, r7
 8010b74:	2200      	movs	r2, #0
 8010b76:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* Expected number of bytes */
    bNumExpBytes = 2;
 8010b7a:	2302      	movs	r3, #2
 8010b7c:	82bb      	strh	r3, [r7, #20]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8010b7e:	7dfb      	ldrb	r3, [r7, #23]
 8010b80:	b29a      	uxth	r2, r3
 8010b82:	8ab8      	ldrh	r0, [r7, #20]
 8010b84:	f107 010c 	add.w	r1, r7, #12
 8010b88:	f107 0310 	add.w	r3, r7, #16
 8010b8c:	9301      	str	r3, [sp, #4]
 8010b8e:	f107 0308 	add.w	r3, r7, #8
 8010b92:	9300      	str	r3, [sp, #0]
 8010b94:	4603      	mov	r3, r0
 8010b96:	6878      	ldr	r0, [r7, #4]
 8010b98:	f7fe fb0a 	bl	800f1b0 <phhalHw_Pn5180_BalExchange>
 8010b9c:	4603      	mov	r3, r0
 8010b9e:	827b      	strh	r3, [r7, #18]
 8010ba0:	8a7b      	ldrh	r3, [r7, #18]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d001      	beq.n	8010baa <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0x74>
 8010ba6:	8a7b      	ldrh	r3, [r7, #18]
 8010ba8:	e017      	b.n	8010bda <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0xa4>
        bNumExpBytes,
        bRecBuffer,
        &wTempRxDataLen));

    /* Validate the response, if any */
    if (wTempRxDataLen != bNumExpBytes)
 8010baa:	8a3b      	ldrh	r3, [r7, #16]
 8010bac:	8aba      	ldrh	r2, [r7, #20]
 8010bae:	429a      	cmp	r2, r3
 8010bb0:	d002      	beq.n	8010bb8 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0x82>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 8010bb2:	f240 237f 	movw	r3, #639	@ 0x27f
 8010bb6:	e010      	b.n	8010bda <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0xa4>
    }

    /* Pack the data that was received */
    *pResultSize = bRecBuffer[0];
 8010bb8:	7a3b      	ldrb	r3, [r7, #8]
 8010bba:	461a      	mov	r2, r3
 8010bbc:	683b      	ldr	r3, [r7, #0]
 8010bbe:	801a      	strh	r2, [r3, #0]
    *pResultSize |= (((uint16_t) bRecBuffer[1]) << 8U);
 8010bc0:	683b      	ldr	r3, [r7, #0]
 8010bc2:	881b      	ldrh	r3, [r3, #0]
 8010bc4:	b21a      	sxth	r2, r3
 8010bc6:	7a7b      	ldrb	r3, [r7, #9]
 8010bc8:	b21b      	sxth	r3, r3
 8010bca:	021b      	lsls	r3, r3, #8
 8010bcc:	b21b      	sxth	r3, r3
 8010bce:	4313      	orrs	r3, r2
 8010bd0:	b21b      	sxth	r3, r3
 8010bd2:	b29a      	uxth	r2, r3
 8010bd4:	683b      	ldr	r3, [r7, #0]
 8010bd6:	801a      	strh	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8010bd8:	2300      	movs	r3, #0
}
 8010bda:	4618      	mov	r0, r3
 8010bdc:	3718      	adds	r7, #24
 8010bde:	46bd      	mov	sp, r7
 8010be0:	bd80      	pop	{r7, pc}

08010be2 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult>:
phStatus_t phhalHw_Pn5180_Instr_EpcGen2RetrieveResult(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t ** ppInventoryResult,
    uint16_t wResultSize
    )
{
 8010be2:	b590      	push	{r4, r7, lr}
 8010be4:	b08b      	sub	sp, #44	@ 0x2c
 8010be6:	af02      	add	r7, sp, #8
 8010be8:	60f8      	str	r0, [r7, #12]
 8010bea:	60b9      	str	r1, [r7, #8]
 8010bec:	4613      	mov	r3, r2
 8010bee:	80fb      	strh	r3, [r7, #6]
    uint8_t *   PH_MEMLOC_REM pTmpBuffer = NULL;
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	61bb      	str	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	82fb      	strh	r3, [r7, #22]
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint8_t     PH_MEMLOC_REM bDataBuffer[2];

    /* Validate pDataParams */
    /* Validate ppInventoryResult */
    if (                        \
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d002      	beq.n	8010c04 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0x22>
        (NULL == pDataParams)   \
        || (NULL == ppInventoryResult)  \
 8010bfe:	68bb      	ldr	r3, [r7, #8]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d102      	bne.n	8010c0a <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0x28>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010c04:	f240 2321 	movw	r3, #545	@ 0x221
 8010c08:	e047      	b.n	8010c9a <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xb8>
    }

    /* Validate wResultSize */
    if (0x00U == wResultSize)
 8010c0a:	88fb      	ldrh	r3, [r7, #6]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d102      	bne.n	8010c16 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0x34>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010c10:	f240 2321 	movw	r3, #545	@ 0x221
 8010c14:	e041      	b.n	8010c9a <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xb8>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8010c16:	2300      	movs	r3, #0
 8010c18:	77fb      	strb	r3, [r7, #31]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_EPC_GEN2_RETRIEVE_INVENTORY_RESULT;
 8010c1a:	7ffb      	ldrb	r3, [r7, #31]
 8010c1c:	1c5a      	adds	r2, r3, #1
 8010c1e:	77fa      	strb	r2, [r7, #31]
 8010c20:	3320      	adds	r3, #32
 8010c22:	443b      	add	r3, r7
 8010c24:	2210      	movs	r2, #16
 8010c26:	f803 2c10 	strb.w	r2, [r3, #-16]
    bDataBuffer[wBufferLength++] = 0U;   /*RFU*/
 8010c2a:	7ffb      	ldrb	r3, [r7, #31]
 8010c2c:	1c5a      	adds	r2, r3, #1
 8010c2e:	77fa      	strb	r2, [r7, #31]
 8010c30:	3320      	adds	r3, #32
 8010c32:	443b      	add	r3, r7
 8010c34:	2200      	movs	r2, #0
 8010c36:	f803 2c10 	strb.w	r2, [r3, #-16]

    /* Get Buffer*/
    phhalHw_Pn5180_Instr_GetInstrBuffer(pDataParams, &pTmpBuffer, &wTmpBufferLen);
 8010c3a:	f107 0216 	add.w	r2, r7, #22
 8010c3e:	f107 0318 	add.w	r3, r7, #24
 8010c42:	4619      	mov	r1, r3
 8010c44:	68f8      	ldr	r0, [r7, #12]
 8010c46:	f7ff f937 	bl	800feb8 <phhalHw_Pn5180_Instr_GetInstrBuffer>

    /* Check if the buffer size is sufficient*/
    if (wTmpBufferLen < wResultSize)
 8010c4a:	8afb      	ldrh	r3, [r7, #22]
 8010c4c:	88fa      	ldrh	r2, [r7, #6]
 8010c4e:	429a      	cmp	r2, r3
 8010c50:	d902      	bls.n	8010c58 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0x76>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 8010c52:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8010c56:	e020      	b.n	8010c9a <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xb8>
    }

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8010c58:	7ffb      	ldrb	r3, [r7, #31]
 8010c5a:	b298      	uxth	r0, r3
 8010c5c:	69bb      	ldr	r3, [r7, #24]
 8010c5e:	88fc      	ldrh	r4, [r7, #6]
 8010c60:	f107 0110 	add.w	r1, r7, #16
 8010c64:	f107 0214 	add.w	r2, r7, #20
 8010c68:	9201      	str	r2, [sp, #4]
 8010c6a:	9300      	str	r3, [sp, #0]
 8010c6c:	4623      	mov	r3, r4
 8010c6e:	4602      	mov	r2, r0
 8010c70:	68f8      	ldr	r0, [r7, #12]
 8010c72:	f7fe fa9d 	bl	800f1b0 <phhalHw_Pn5180_BalExchange>
 8010c76:	4603      	mov	r3, r0
 8010c78:	83bb      	strh	r3, [r7, #28]
 8010c7a:	8bbb      	ldrh	r3, [r7, #28]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d001      	beq.n	8010c84 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xa2>
 8010c80:	8bbb      	ldrh	r3, [r7, #28]
 8010c82:	e00a      	b.n	8010c9a <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xb8>
        wResultSize,
        pTmpBuffer,
        &wDataLenTmp));

    /* Validate the response, if any */
    if (wDataLenTmp  != wResultSize)
 8010c84:	8abb      	ldrh	r3, [r7, #20]
 8010c86:	88fa      	ldrh	r2, [r7, #6]
 8010c88:	429a      	cmp	r2, r3
 8010c8a:	d002      	beq.n	8010c92 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xb0>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 8010c8c:	f240 237f 	movw	r3, #639	@ 0x27f
 8010c90:	e003      	b.n	8010c9a <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xb8>
    }
    /* return the pointer to the buffer*/
    *ppInventoryResult = pTmpBuffer;
 8010c92:	69ba      	ldr	r2, [r7, #24]
 8010c94:	68bb      	ldr	r3, [r7, #8]
 8010c96:	601a      	str	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8010c98:	2300      	movs	r3, #0

}
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	3724      	adds	r7, #36	@ 0x24
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	bd90      	pop	{r4, r7, pc}

08010ca2 <phhalHw_Pn5180_Instr_EpcGen2ResumeInventory>:

phStatus_t phhalHw_Pn5180_Instr_EpcGen2ResumeInventory(
    phhalHw_Pn5180_DataParams_t * pDataParams)
{
 8010ca2:	b580      	push	{r7, lr}
 8010ca4:	b088      	sub	sp, #32
 8010ca6:	af02      	add	r7, sp, #8
 8010ca8:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint16_t    PH_MEMLOC_REM wTempRxDataLen = 0;
 8010caa:	2300      	movs	r3, #0
 8010cac:	823b      	strh	r3, [r7, #16]
    uint16_t    PH_MEMLOC_REM bNumExpBytes;
    uint8_t     PH_MEMLOC_REM bDataBuffer[2];
    uint8_t     PH_MEMLOC_REM bRecBuffer[1];

    /* Validate pDataParams */
    if (NULL == pDataParams)
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d102      	bne.n	8010cba <phhalHw_Pn5180_Instr_EpcGen2ResumeInventory+0x18>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010cb4:	f240 2321 	movw	r3, #545	@ 0x221
 8010cb8:	e02a      	b.n	8010d10 <phhalHw_Pn5180_Instr_EpcGen2ResumeInventory+0x6e>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8010cba:	2300      	movs	r3, #0
 8010cbc:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_EPC_GEN2_RESUME_INVENTORY;
 8010cbe:	7dfb      	ldrb	r3, [r7, #23]
 8010cc0:	1c5a      	adds	r2, r3, #1
 8010cc2:	75fa      	strb	r2, [r7, #23]
 8010cc4:	3318      	adds	r3, #24
 8010cc6:	443b      	add	r3, r7
 8010cc8:	220e      	movs	r2, #14
 8010cca:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = 0U;   /*RFU*/
 8010cce:	7dfb      	ldrb	r3, [r7, #23]
 8010cd0:	1c5a      	adds	r2, r3, #1
 8010cd2:	75fa      	strb	r2, [r7, #23]
 8010cd4:	3318      	adds	r3, #24
 8010cd6:	443b      	add	r3, r7
 8010cd8:	2200      	movs	r2, #0
 8010cda:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* Expected number of bytes */
    bNumExpBytes = 0U;
 8010cde:	2300      	movs	r3, #0
 8010ce0:	82bb      	strh	r3, [r7, #20]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8010ce2:	7dfb      	ldrb	r3, [r7, #23]
 8010ce4:	b29a      	uxth	r2, r3
 8010ce6:	8ab8      	ldrh	r0, [r7, #20]
 8010ce8:	f107 010c 	add.w	r1, r7, #12
 8010cec:	f107 0310 	add.w	r3, r7, #16
 8010cf0:	9301      	str	r3, [sp, #4]
 8010cf2:	f107 0308 	add.w	r3, r7, #8
 8010cf6:	9300      	str	r3, [sp, #0]
 8010cf8:	4603      	mov	r3, r0
 8010cfa:	6878      	ldr	r0, [r7, #4]
 8010cfc:	f7fe fa58 	bl	800f1b0 <phhalHw_Pn5180_BalExchange>
 8010d00:	4603      	mov	r3, r0
 8010d02:	827b      	strh	r3, [r7, #18]
 8010d04:	8a7b      	ldrh	r3, [r7, #18]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d001      	beq.n	8010d0e <phhalHw_Pn5180_Instr_EpcGen2ResumeInventory+0x6c>
 8010d0a:	8a7b      	ldrh	r3, [r7, #18]
 8010d0c:	e000      	b.n	8010d10 <phhalHw_Pn5180_Instr_EpcGen2ResumeInventory+0x6e>
        wBufferLength,
        bNumExpBytes,
        bRecBuffer,
        &wTempRxDataLen));

    return PH_ERR_SUCCESS;
 8010d0e:	2300      	movs	r3, #0
}
 8010d10:	4618      	mov	r0, r3
 8010d12:	3718      	adds	r7, #24
 8010d14:	46bd      	mov	sp, r7
 8010d16:	bd80      	pop	{r7, pc}

08010d18 <phhalHw_Pn5180_Instr_LoadRfConfiguration>:
phStatus_t phhalHw_Pn5180_Instr_LoadRfConfiguration(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRfTxConfiguration,
    uint8_t bRfRxConfiguration
    )
{
 8010d18:	b580      	push	{r7, lr}
 8010d1a:	b088      	sub	sp, #32
 8010d1c:	af02      	add	r7, sp, #8
 8010d1e:	6078      	str	r0, [r7, #4]
 8010d20:	460b      	mov	r3, r1
 8010d22:	70fb      	strb	r3, [r7, #3]
 8010d24:	4613      	mov	r3, r2
 8010d26:	70bb      	strb	r3, [r7, #2]
    * bRfTxConfiguration is not the PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX
    * Validate bRfRxConfiguration
    * bRfRxConfiguration is lesser than the minimum RF RX configuration
    * bRfRxConfiguration is greater than the maximum RF RX configuration
    * and bRfRxConfiguration is not the PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX*/
    if ((NULL == pDataParams) \
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d00f      	beq.n	8010d4e <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x36>
        || ((bRfTxConfiguration > PHHAL_HW_PN5180_MAX_RF_TX_CONFIGURATION_INDEX) \
 8010d2e:	78fb      	ldrb	r3, [r7, #3]
 8010d30:	2b1c      	cmp	r3, #28
 8010d32:	d902      	bls.n	8010d3a <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x22>
        && (bRfTxConfiguration != PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX)) \
 8010d34:	78fb      	ldrb	r3, [r7, #3]
 8010d36:	2bff      	cmp	r3, #255	@ 0xff
 8010d38:	d109      	bne.n	8010d4e <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x36>
        || (bRfRxConfiguration < PHHAL_HW_PN5180_MIN_RF_RX_CONFIGURATION_INDEX) \
 8010d3a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	da05      	bge.n	8010d4e <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x36>
        || ((bRfRxConfiguration > PHHAL_HW_PN5180_MAX_RF_RX_CONFIGURATION_INDEX) \
 8010d42:	78bb      	ldrb	r3, [r7, #2]
 8010d44:	2b9d      	cmp	r3, #157	@ 0x9d
 8010d46:	d905      	bls.n	8010d54 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x3c>
        && (bRfRxConfiguration != PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX)) \
 8010d48:	78bb      	ldrb	r3, [r7, #2]
 8010d4a:	2bff      	cmp	r3, #255	@ 0xff
 8010d4c:	d002      	beq.n	8010d54 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x3c>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010d4e:	f240 2321 	movw	r3, #545	@ 0x221
 8010d52:	e03b      	b.n	8010dcc <phhalHw_Pn5180_Instr_LoadRfConfiguration+0xb4>
    }
    /*bRfTxConfiguration == bRfRxConfiguration == PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX then no change required*/
    if((bRfTxConfiguration & bRfRxConfiguration) == PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX)
 8010d54:	78fa      	ldrb	r2, [r7, #3]
 8010d56:	78bb      	ldrb	r3, [r7, #2]
 8010d58:	4013      	ands	r3, r2
 8010d5a:	b2db      	uxtb	r3, r3
 8010d5c:	2bff      	cmp	r3, #255	@ 0xff
 8010d5e:	d101      	bne.n	8010d64 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x4c>
    {
        return PH_ERR_SUCCESS;
 8010d60:	2300      	movs	r3, #0
 8010d62:	e033      	b.n	8010dcc <phhalHw_Pn5180_Instr_LoadRfConfiguration+0xb4>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8010d64:	2300      	movs	r3, #0
 8010d66:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_LOAD_RF_CONFIGURATION;
 8010d68:	7dfb      	ldrb	r3, [r7, #23]
 8010d6a:	1c5a      	adds	r2, r3, #1
 8010d6c:	75fa      	strb	r2, [r7, #23]
 8010d6e:	3318      	adds	r3, #24
 8010d70:	443b      	add	r3, r7
 8010d72:	2211      	movs	r2, #17
 8010d74:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bRfTxConfiguration;
 8010d78:	7dfb      	ldrb	r3, [r7, #23]
 8010d7a:	1c5a      	adds	r2, r3, #1
 8010d7c:	75fa      	strb	r2, [r7, #23]
 8010d7e:	3318      	adds	r3, #24
 8010d80:	443b      	add	r3, r7
 8010d82:	78fa      	ldrb	r2, [r7, #3]
 8010d84:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bRfRxConfiguration;
 8010d88:	7dfb      	ldrb	r3, [r7, #23]
 8010d8a:	1c5a      	adds	r2, r3, #1
 8010d8c:	75fa      	strb	r2, [r7, #23]
 8010d8e:	3318      	adds	r3, #24
 8010d90:	443b      	add	r3, r7
 8010d92:	78ba      	ldrb	r2, [r7, #2]
 8010d94:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* No Response expected*/
    bNumExpBytes = 0U;
 8010d98:	2300      	movs	r3, #0
 8010d9a:	75bb      	strb	r3, [r7, #22]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,
 8010d9c:	7dfb      	ldrb	r3, [r7, #23]
 8010d9e:	b29a      	uxth	r2, r3
 8010da0:	7dbb      	ldrb	r3, [r7, #22]
 8010da2:	b298      	uxth	r0, r3
 8010da4:	f107 010c 	add.w	r1, r7, #12
 8010da8:	f107 0312 	add.w	r3, r7, #18
 8010dac:	9301      	str	r3, [sp, #4]
 8010dae:	f107 0308 	add.w	r3, r7, #8
 8010db2:	9300      	str	r3, [sp, #0]
 8010db4:	4603      	mov	r3, r0
 8010db6:	6878      	ldr	r0, [r7, #4]
 8010db8:	f7fe f9fa 	bl	800f1b0 <phhalHw_Pn5180_BalExchange>
 8010dbc:	4603      	mov	r3, r0
 8010dbe:	82bb      	strh	r3, [r7, #20]
 8010dc0:	8abb      	ldrh	r3, [r7, #20]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d001      	beq.n	8010dca <phhalHw_Pn5180_Instr_LoadRfConfiguration+0xb2>
 8010dc6:	8abb      	ldrh	r3, [r7, #20]
 8010dc8:	e000      	b.n	8010dcc <phhalHw_Pn5180_Instr_LoadRfConfiguration+0xb4>
        wBufferLength,
        bNumExpBytes,
        pData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 8010dca:	2300      	movs	r3, #0
}
 8010dcc:	4618      	mov	r0, r3
 8010dce:	3718      	adds	r7, #24
 8010dd0:	46bd      	mov	sp, r7
 8010dd2:	bd80      	pop	{r7, pc}

08010dd4 <phhalHw_Pn5180_Instr_RfOn>:

phStatus_t phhalHw_Pn5180_Instr_RfOn(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRfOnConfig
    )
{
 8010dd4:	b580      	push	{r7, lr}
 8010dd6:	b088      	sub	sp, #32
 8010dd8:	af02      	add	r7, sp, #8
 8010dda:	6078      	str	r0, [r7, #4]
 8010ddc:	460b      	mov	r3, r1
 8010dde:	70fb      	strb	r3, [r7, #3]

    /* Validate pDataParams
    * Validate bRfOnConfig
    *
    * */
    if ( (NULL == pDataParams) \
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d002      	beq.n	8010dec <phhalHw_Pn5180_Instr_RfOn+0x18>
        || (bRfOnConfig > 3U) \
 8010de6:	78fb      	ldrb	r3, [r7, #3]
 8010de8:	2b03      	cmp	r3, #3
 8010dea:	d902      	bls.n	8010df2 <phhalHw_Pn5180_Instr_RfOn+0x1e>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010dec:	f240 2321 	movw	r3, #545	@ 0x221
 8010df0:	e02b      	b.n	8010e4a <phhalHw_Pn5180_Instr_RfOn+0x76>
    }

    /* Build the command frame */

    wBufferLength = 0U;
 8010df2:	2300      	movs	r3, #0
 8010df4:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_FIELD_ON;
 8010df6:	7dfb      	ldrb	r3, [r7, #23]
 8010df8:	1c5a      	adds	r2, r3, #1
 8010dfa:	75fa      	strb	r2, [r7, #23]
 8010dfc:	3318      	adds	r3, #24
 8010dfe:	443b      	add	r3, r7
 8010e00:	2216      	movs	r2, #22
 8010e02:	f803 2c08 	strb.w	r2, [r3, #-8]
    bDataBuffer[wBufferLength++] = bRfOnConfig;
 8010e06:	7dfb      	ldrb	r3, [r7, #23]
 8010e08:	1c5a      	adds	r2, r3, #1
 8010e0a:	75fa      	strb	r2, [r7, #23]
 8010e0c:	3318      	adds	r3, #24
 8010e0e:	443b      	add	r3, r7
 8010e10:	78fa      	ldrb	r2, [r7, #3]
 8010e12:	f803 2c08 	strb.w	r2, [r3, #-8]

    /* No Response expected*/
    bNumExpBytes = 0U;
 8010e16:	2300      	movs	r3, #0
 8010e18:	75bb      	strb	r3, [r7, #22]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,
 8010e1a:	7dfb      	ldrb	r3, [r7, #23]
 8010e1c:	b29a      	uxth	r2, r3
 8010e1e:	7dbb      	ldrb	r3, [r7, #22]
 8010e20:	b298      	uxth	r0, r3
 8010e22:	f107 0110 	add.w	r1, r7, #16
 8010e26:	f107 0312 	add.w	r3, r7, #18
 8010e2a:	9301      	str	r3, [sp, #4]
 8010e2c:	f107 030c 	add.w	r3, r7, #12
 8010e30:	9300      	str	r3, [sp, #0]
 8010e32:	4603      	mov	r3, r0
 8010e34:	6878      	ldr	r0, [r7, #4]
 8010e36:	f7fe f9bb 	bl	800f1b0 <phhalHw_Pn5180_BalExchange>
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	82bb      	strh	r3, [r7, #20]
 8010e3e:	8abb      	ldrh	r3, [r7, #20]
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d001      	beq.n	8010e48 <phhalHw_Pn5180_Instr_RfOn+0x74>
 8010e44:	8abb      	ldrh	r3, [r7, #20]
 8010e46:	e000      	b.n	8010e4a <phhalHw_Pn5180_Instr_RfOn+0x76>
        wBufferLength,
        bNumExpBytes,
        pData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 8010e48:	2300      	movs	r3, #0

}
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	3718      	adds	r7, #24
 8010e4e:	46bd      	mov	sp, r7
 8010e50:	bd80      	pop	{r7, pc}

08010e52 <phhalHw_Pn5180_Instr_RfOff>:

phStatus_t phhalHw_Pn5180_Instr_RfOff(
    phhalHw_Pn5180_DataParams_t * pDataParams
    )
{
 8010e52:	b580      	push	{r7, lr}
 8010e54:	b088      	sub	sp, #32
 8010e56:	af02      	add	r7, sp, #8
 8010e58:	6078      	str	r0, [r7, #4]
    uint8_t     PH_MEMLOC_REM bNumExpBytes;
    uint8_t     PH_MEMLOC_REM bDataBuffer[2];
    uint8_t     PH_MEMLOC_REM pData[1];

    /* Validate pDataParams */
    if (NULL == pDataParams)
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d102      	bne.n	8010e66 <phhalHw_Pn5180_Instr_RfOff+0x14>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010e60:	f240 2321 	movw	r3, #545	@ 0x221
 8010e64:	e02b      	b.n	8010ebe <phhalHw_Pn5180_Instr_RfOff+0x6c>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8010e66:	2300      	movs	r3, #0
 8010e68:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_FIELD_OFF;
 8010e6a:	7dfb      	ldrb	r3, [r7, #23]
 8010e6c:	1c5a      	adds	r2, r3, #1
 8010e6e:	75fa      	strb	r2, [r7, #23]
 8010e70:	3318      	adds	r3, #24
 8010e72:	443b      	add	r3, r7
 8010e74:	2217      	movs	r2, #23
 8010e76:	f803 2c08 	strb.w	r2, [r3, #-8]
    bDataBuffer[wBufferLength++] = 0U;
 8010e7a:	7dfb      	ldrb	r3, [r7, #23]
 8010e7c:	1c5a      	adds	r2, r3, #1
 8010e7e:	75fa      	strb	r2, [r7, #23]
 8010e80:	3318      	adds	r3, #24
 8010e82:	443b      	add	r3, r7
 8010e84:	2200      	movs	r2, #0
 8010e86:	f803 2c08 	strb.w	r2, [r3, #-8]

    /* No Response expected*/
    bNumExpBytes = 0U;
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	75bb      	strb	r3, [r7, #22]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,
 8010e8e:	7dfb      	ldrb	r3, [r7, #23]
 8010e90:	b29a      	uxth	r2, r3
 8010e92:	7dbb      	ldrb	r3, [r7, #22]
 8010e94:	b298      	uxth	r0, r3
 8010e96:	f107 0110 	add.w	r1, r7, #16
 8010e9a:	f107 0312 	add.w	r3, r7, #18
 8010e9e:	9301      	str	r3, [sp, #4]
 8010ea0:	f107 030c 	add.w	r3, r7, #12
 8010ea4:	9300      	str	r3, [sp, #0]
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	6878      	ldr	r0, [r7, #4]
 8010eaa:	f7fe f981 	bl	800f1b0 <phhalHw_Pn5180_BalExchange>
 8010eae:	4603      	mov	r3, r0
 8010eb0:	82bb      	strh	r3, [r7, #20]
 8010eb2:	8abb      	ldrh	r3, [r7, #20]
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d001      	beq.n	8010ebc <phhalHw_Pn5180_Instr_RfOff+0x6a>
 8010eb8:	8abb      	ldrh	r3, [r7, #20]
 8010eba:	e000      	b.n	8010ebe <phhalHw_Pn5180_Instr_RfOff+0x6c>
        wBufferLength,
        bNumExpBytes,
        pData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 8010ebc:	2300      	movs	r3, #0

}
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	3718      	adds	r7, #24
 8010ec2:	46bd      	mov	sp, r7
 8010ec4:	bd80      	pop	{r7, pc}

08010ec6 <phhalHw_Pn5180_GetTxBuffer>:
    uint8_t bIsExchange,
    uint8_t ** pTxBuffer,
    uint16_t * pTxBufferLen,
    uint16_t * pTxBufferSize
    )
{
 8010ec6:	b580      	push	{r7, lr}
 8010ec8:	b086      	sub	sp, #24
 8010eca:	af02      	add	r7, sp, #8
 8010ecc:	60f8      	str	r0, [r7, #12]
 8010ece:	607a      	str	r2, [r7, #4]
 8010ed0:	603b      	str	r3, [r7, #0]
 8010ed2:	460b      	mov	r3, r1
 8010ed4:	72fb      	strb	r3, [r7, #11]
    /* Exchange command -> RxBuffer overwriting is allowed */
    if (bIsExchange != PH_OFF)
 8010ed6:	7afb      	ldrb	r3, [r7, #11]
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d023      	beq.n	8010f24 <phhalHw_Pn5180_GetTxBuffer+0x5e>
    {
        /* We need to watch that we do not overwrite content below the RxStartPos though */
        if (pDataParams->pTxBuffer == pDataParams->pRxBuffer)
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	68da      	ldr	r2, [r3, #12]
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	695b      	ldr	r3, [r3, #20]
 8010ee4:	429a      	cmp	r2, r3
 8010ee6:	d10f      	bne.n	8010f08 <phhalHw_Pn5180_GetTxBuffer+0x42>
        {
            *pTxBuffer = &pDataParams->pTxBuffer[pDataParams->wRxBufStartPos];
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	68db      	ldr	r3, [r3, #12]
 8010eec:	68fa      	ldr	r2, [r7, #12]
 8010eee:	8bd2      	ldrh	r2, [r2, #30]
 8010ef0:	441a      	add	r2, r3
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	601a      	str	r2, [r3, #0]
            *pTxBufferSize = pDataParams->wTxBufSize - pDataParams->wRxBufStartPos;
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	8a1a      	ldrh	r2, [r3, #16]
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	8bdb      	ldrh	r3, [r3, #30]
 8010efe:	1ad3      	subs	r3, r2, r3
 8010f00:	b29a      	uxth	r2, r3
 8010f02:	69bb      	ldr	r3, [r7, #24]
 8010f04:	801a      	strh	r2, [r3, #0]
 8010f06:	e007      	b.n	8010f18 <phhalHw_Pn5180_GetTxBuffer+0x52>
        }
        /* Else just return the actual Buffer */
        else
        {
            *pTxBuffer = pDataParams->pTxBuffer;
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	68da      	ldr	r2, [r3, #12]
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	601a      	str	r2, [r3, #0]
            *pTxBufferSize = pDataParams->wTxBufSize;
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	8a1a      	ldrh	r2, [r3, #16]
 8010f14:	69bb      	ldr	r3, [r7, #24]
 8010f16:	801a      	strh	r2, [r3, #0]
        }

        /* Return stored length */
        *pTxBufferLen = pDataParams->wTxBufLen;
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	8a5a      	ldrh	r2, [r3, #18]
 8010f1c:	683b      	ldr	r3, [r7, #0]
 8010f1e:	801a      	strh	r2, [r3, #0]
    {
        /* Redundant code */
        return phhalHw_Pn5180_GetRxBuffer(pDataParams, bIsExchange, pTxBuffer, pTxBufferLen, pTxBufferSize);
    }

    return PH_ERR_SUCCESS;
 8010f20:	2300      	movs	r3, #0
 8010f22:	e008      	b.n	8010f36 <phhalHw_Pn5180_GetTxBuffer+0x70>
        return phhalHw_Pn5180_GetRxBuffer(pDataParams, bIsExchange, pTxBuffer, pTxBufferLen, pTxBufferSize);
 8010f24:	7af9      	ldrb	r1, [r7, #11]
 8010f26:	69bb      	ldr	r3, [r7, #24]
 8010f28:	9300      	str	r3, [sp, #0]
 8010f2a:	683b      	ldr	r3, [r7, #0]
 8010f2c:	687a      	ldr	r2, [r7, #4]
 8010f2e:	68f8      	ldr	r0, [r7, #12]
 8010f30:	f000 f805 	bl	8010f3e <phhalHw_Pn5180_GetRxBuffer>
 8010f34:	4603      	mov	r3, r0
}
 8010f36:	4618      	mov	r0, r3
 8010f38:	3710      	adds	r7, #16
 8010f3a:	46bd      	mov	sp, r7
 8010f3c:	bd80      	pop	{r7, pc}

08010f3e <phhalHw_Pn5180_GetRxBuffer>:
    uint8_t bIsExchange,
    uint8_t ** pRxBuffer,
    uint16_t * pRxBufferLen,
    uint16_t * pRxBufferSize
    )
{
 8010f3e:	b480      	push	{r7}
 8010f40:	b087      	sub	sp, #28
 8010f42:	af00      	add	r7, sp, #0
 8010f44:	60f8      	str	r0, [r7, #12]
 8010f46:	607a      	str	r2, [r7, #4]
 8010f48:	603b      	str	r3, [r7, #0]
 8010f4a:	460b      	mov	r3, r1
 8010f4c:	72fb      	strb	r3, [r7, #11]
    uint8_t bOffset = 0U;
 8010f4e:	2300      	movs	r3, #0
 8010f50:	75fb      	strb	r3, [r7, #23]

    /* Exchange command -> TxBuffer overwriting is allowed */
    if (bIsExchange != PH_OFF)
 8010f52:	7afb      	ldrb	r3, [r7, #11]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d021      	beq.n	8010f9c <phhalHw_Pn5180_GetRxBuffer+0x5e>
    {
#ifndef PN5180_P2P_HW_SYNC_BYTE
        if (pDataParams->bNfcipMode == PH_ON)
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8010f5e:	2b01      	cmp	r3, #1
 8010f60:	d101      	bne.n	8010f66 <phhalHw_Pn5180_GetRxBuffer+0x28>
        {
            bOffset = 1U;
 8010f62:	2301      	movs	r3, #1
 8010f64:	75fb      	strb	r3, [r7, #23]
        }
#endif
        *pRxBuffer = &pDataParams->pRxBuffer[pDataParams->wRxBufStartPos - bOffset];
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	695b      	ldr	r3, [r3, #20]
 8010f6a:	68fa      	ldr	r2, [r7, #12]
 8010f6c:	8bd2      	ldrh	r2, [r2, #30]
 8010f6e:	4611      	mov	r1, r2
 8010f70:	7dfa      	ldrb	r2, [r7, #23]
 8010f72:	1a8a      	subs	r2, r1, r2
 8010f74:	441a      	add	r2, r3
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	601a      	str	r2, [r3, #0]
        *pRxBufferSize = pDataParams->wRxBufSize - pDataParams->wRxBufStartPos - bOffset;
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	8b1a      	ldrh	r2, [r3, #24]
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	8bdb      	ldrh	r3, [r3, #30]
 8010f82:	1ad3      	subs	r3, r2, r3
 8010f84:	b29a      	uxth	r2, r3
 8010f86:	7dfb      	ldrb	r3, [r7, #23]
 8010f88:	b29b      	uxth	r3, r3
 8010f8a:	1ad3      	subs	r3, r2, r3
 8010f8c:	b29a      	uxth	r2, r3
 8010f8e:	6a3b      	ldr	r3, [r7, #32]
 8010f90:	801a      	strh	r2, [r3, #0]
        *pRxBufferLen = pDataParams->wRxBufLen;
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	8b5a      	ldrh	r2, [r3, #26]
 8010f96:	683b      	ldr	r3, [r7, #0]
 8010f98:	801a      	strh	r2, [r3, #0]
 8010f9a:	e055      	b.n	8011048 <phhalHw_Pn5180_GetRxBuffer+0x10a>
    }
    /* Normal command -> do not overwrite Tx- and Rx-Contents */
    else
    {
        /* Command buffering is NOT supported by this HAL */
        *pRxBufferLen = 0U;
 8010f9c:	683b      	ldr	r3, [r7, #0]
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	801a      	strh	r2, [r3, #0]

        /* TxBuffer equals RxBuffer */
        /* And the buffer contains something that needs to be preserved */
        if ((pDataParams->pTxBuffer == pDataParams->pRxBuffer) &&
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	68da      	ldr	r2, [r3, #12]
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	695b      	ldr	r3, [r3, #20]
 8010faa:	429a      	cmp	r2, r3
 8010fac:	d11f      	bne.n	8010fee <phhalHw_Pn5180_GetRxBuffer+0xb0>
            ((pDataParams->wTxBufLen != 0U) || (pDataParams->wRxBufStartPos != 0U)))
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	8a5b      	ldrh	r3, [r3, #18]
        if ((pDataParams->pTxBuffer == pDataParams->pRxBuffer) &&
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d103      	bne.n	8010fbe <phhalHw_Pn5180_GetRxBuffer+0x80>
            ((pDataParams->wTxBufLen != 0U) || (pDataParams->wRxBufStartPos != 0U)))
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	8bdb      	ldrh	r3, [r3, #30]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d017      	beq.n	8010fee <phhalHw_Pn5180_GetRxBuffer+0xb0>
        {
            /* Start at TxLenght if neccessary */
            if ((pDataParams->wRxBufStartPos + pDataParams->wTxBufLen) >= pDataParams->wRxBufStartPos)
            {
                *pRxBuffer = &pDataParams->pTxBuffer[pDataParams->wRxBufStartPos + pDataParams->wTxBufLen];
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	68db      	ldr	r3, [r3, #12]
 8010fc2:	68fa      	ldr	r2, [r7, #12]
 8010fc4:	8bd2      	ldrh	r2, [r2, #30]
 8010fc6:	4611      	mov	r1, r2
 8010fc8:	68fa      	ldr	r2, [r7, #12]
 8010fca:	8a52      	ldrh	r2, [r2, #18]
 8010fcc:	440a      	add	r2, r1
 8010fce:	441a      	add	r2, r3
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	601a      	str	r2, [r3, #0]
                *pRxBufferSize = pDataParams->wTxBufSize - (pDataParams->wRxBufStartPos + pDataParams->wTxBufLen);
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	8a1a      	ldrh	r2, [r3, #16]
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	8bd9      	ldrh	r1, [r3, #30]
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	8a5b      	ldrh	r3, [r3, #18]
 8010fe0:	440b      	add	r3, r1
 8010fe2:	b29b      	uxth	r3, r3
 8010fe4:	1ad3      	subs	r3, r2, r3
 8010fe6:	b29a      	uxth	r2, r3
 8010fe8:	6a3b      	ldr	r3, [r7, #32]
 8010fea:	801a      	strh	r2, [r3, #0]
            if ((pDataParams->wRxBufStartPos + pDataParams->wTxBufLen) >= pDataParams->wRxBufStartPos)
 8010fec:	e02c      	b.n	8011048 <phhalHw_Pn5180_GetRxBuffer+0x10a>
        }
        /* Buffers are different */
        else
        {
            /* Use TxBuffer if it has more space than RxBuffer */
            if ((pDataParams->wTxBufSize - pDataParams->wTxBufLen) >= (pDataParams->wRxBufSize - pDataParams->wRxBufStartPos))
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	8a1b      	ldrh	r3, [r3, #16]
 8010ff2:	461a      	mov	r2, r3
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	8a5b      	ldrh	r3, [r3, #18]
 8010ff8:	1ad2      	subs	r2, r2, r3
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	8b1b      	ldrh	r3, [r3, #24]
 8010ffe:	4619      	mov	r1, r3
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	8bdb      	ldrh	r3, [r3, #30]
 8011004:	1acb      	subs	r3, r1, r3
 8011006:	429a      	cmp	r2, r3
 8011008:	db0f      	blt.n	801102a <phhalHw_Pn5180_GetRxBuffer+0xec>
            {
                *pRxBuffer = &pDataParams->pTxBuffer[pDataParams->wTxBufLen];
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	68db      	ldr	r3, [r3, #12]
 801100e:	68fa      	ldr	r2, [r7, #12]
 8011010:	8a52      	ldrh	r2, [r2, #18]
 8011012:	441a      	add	r2, r3
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	601a      	str	r2, [r3, #0]
                *pRxBufferSize = pDataParams->wTxBufSize - pDataParams->wTxBufLen;
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	8a1a      	ldrh	r2, [r3, #16]
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	8a5b      	ldrh	r3, [r3, #18]
 8011020:	1ad3      	subs	r3, r2, r3
 8011022:	b29a      	uxth	r2, r3
 8011024:	6a3b      	ldr	r3, [r7, #32]
 8011026:	801a      	strh	r2, [r3, #0]
 8011028:	e00e      	b.n	8011048 <phhalHw_Pn5180_GetRxBuffer+0x10a>
            }
            /* Else use RxBuffer */
            else
            {
                *pRxBuffer = &pDataParams->pRxBuffer[pDataParams->wRxBufStartPos];
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	695b      	ldr	r3, [r3, #20]
 801102e:	68fa      	ldr	r2, [r7, #12]
 8011030:	8bd2      	ldrh	r2, [r2, #30]
 8011032:	441a      	add	r2, r3
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	601a      	str	r2, [r3, #0]
                *pRxBufferSize = pDataParams->wRxBufSize - pDataParams->wRxBufStartPos;
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	8b1a      	ldrh	r2, [r3, #24]
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	8bdb      	ldrh	r3, [r3, #30]
 8011040:	1ad3      	subs	r3, r2, r3
 8011042:	b29a      	uxth	r2, r3
 8011044:	6a3b      	ldr	r3, [r7, #32]
 8011046:	801a      	strh	r2, [r3, #0]
            }
        }
    }

    return PH_ERR_SUCCESS;
 8011048:	2300      	movs	r3, #0
}
 801104a:	4618      	mov	r0, r3
 801104c:	371c      	adds	r7, #28
 801104e:	46bd      	mov	sp, r7
 8011050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011054:	4770      	bx	lr

08011056 <phhalHw_Pn5180_ReadData>:
phStatus_t phhalHw_Pn5180_ReadData(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t ** ppData,
    uint16_t * pBytesRead
    )
{
 8011056:	b580      	push	{r7, lr}
 8011058:	b086      	sub	sp, #24
 801105a:	af00      	add	r7, sp, #0
 801105c:	60f8      	str	r0, [r7, #12]
 801105e:	60b9      	str	r1, [r7, #8]
 8011060:	607a      	str	r2, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp = PH_ERR_SUCCESS;
 8011062:	2300      	movs	r3, #0
 8011064:	82bb      	strh	r3, [r7, #20]

    uint16_t    PH_MEMLOC_REM wNumExpBytes;
    uint32_t    PH_MEMLOC_REM dwValue;

    /* Read the RX_STATUS */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_ReadRegister(
 8011066:	f107 0310 	add.w	r3, r7, #16
 801106a:	461a      	mov	r2, r3
 801106c:	2113      	movs	r1, #19
 801106e:	68f8      	ldr	r0, [r7, #12]
 8011070:	f7fb fbf6 	bl	800c860 <phhalHw_Pn5180_ReadRegister>
 8011074:	4603      	mov	r3, r0
 8011076:	82bb      	strh	r3, [r7, #20]
 8011078:	8abb      	ldrh	r3, [r7, #20]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d001      	beq.n	8011082 <phhalHw_Pn5180_ReadData+0x2c>
 801107e:	8abb      	ldrh	r3, [r7, #20]
 8011080:	e02d      	b.n	80110de <phhalHw_Pn5180_ReadData+0x88>
        pDataParams,
        RX_STATUS,
        &dwValue));

    if(pDataParams->bRxMultiple == PH_ON)
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011088:	2b01      	cmp	r3, #1
 801108a:	d10f      	bne.n	80110ac <phhalHw_Pn5180_ReadData+0x56>
    {
        wNumExpBytes = (uint16_t)((dwValue & RX_STATUS_RX_NUM_BYTES_RECEIVED_MASK) |
 801108c:	693b      	ldr	r3, [r7, #16]
 801108e:	b29b      	uxth	r3, r3
 8011090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011094:	b29a      	uxth	r2, r3
            (((dwValue & RX_STATUS_RX_NUM_FRAMES_RECEIVED_MASK) >>
 8011096:	693b      	ldr	r3, [r7, #16]
 8011098:	0a5b      	lsrs	r3, r3, #9
        wNumExpBytes = (uint16_t)((dwValue & RX_STATUS_RX_NUM_BYTES_RECEIVED_MASK) |
 801109a:	b29b      	uxth	r3, r3
 801109c:	f003 030f 	and.w	r3, r3, #15
 80110a0:	b29b      	uxth	r3, r3
 80110a2:	015b      	lsls	r3, r3, #5
 80110a4:	b29b      	uxth	r3, r3
 80110a6:	4313      	orrs	r3, r2
 80110a8:	82fb      	strh	r3, [r7, #22]
 80110aa:	e004      	b.n	80110b6 <phhalHw_Pn5180_ReadData+0x60>
            RX_STATUS_RX_NUM_FRAMES_RECEIVED_POS) * 32U));
    }
    else
    {
        wNumExpBytes = (uint16_t)(dwValue & RX_STATUS_RX_NUM_BYTES_RECEIVED_MASK);
 80110ac:	693b      	ldr	r3, [r7, #16]
 80110ae:	b29b      	uxth	r3, r3
 80110b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80110b4:	82fb      	strh	r3, [r7, #22]
    }

    if(wNumExpBytes != 0U)
 80110b6:	8afb      	ldrh	r3, [r7, #22]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d00c      	beq.n	80110d6 <phhalHw_Pn5180_ReadData+0x80>
    {
        /* Prepare the command for reading the RX FIFO of the Pn5180 */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_RetrieveRxData(
 80110bc:	8afb      	ldrh	r3, [r7, #22]
 80110be:	461a      	mov	r2, r3
 80110c0:	68b9      	ldr	r1, [r7, #8]
 80110c2:	68f8      	ldr	r0, [r7, #12]
 80110c4:	f7ff fb52 	bl	801076c <phhalHw_Pn5180_Instr_RetrieveRxData>
 80110c8:	4603      	mov	r3, r0
 80110ca:	82bb      	strh	r3, [r7, #20]
 80110cc:	8abb      	ldrh	r3, [r7, #20]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d001      	beq.n	80110d6 <phhalHw_Pn5180_ReadData+0x80>
 80110d2:	8abb      	ldrh	r3, [r7, #20]
 80110d4:	e003      	b.n	80110de <phhalHw_Pn5180_ReadData+0x88>
            ppData,
            wNumExpBytes));
    }

    /* Update the actual number of bytes received */
    *pBytesRead = wNumExpBytes;
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	8afa      	ldrh	r2, [r7, #22]
 80110da:	801a      	strh	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 80110dc:	2300      	movs	r3, #0
}
 80110de:	4618      	mov	r0, r3
 80110e0:	3718      	adds	r7, #24
 80110e2:	46bd      	mov	sp, r7
 80110e4:	bd80      	pop	{r7, pc}

080110e6 <phhalHw_Pn5180_TimerStart>:
    uint32_t dwStartCond,
    uint32_t dwStopCond,
    uint32_t wPrescaler,
    uint32_t dwLoadValue
    )
{
 80110e6:	b580      	push	{r7, lr}
 80110e8:	b08e      	sub	sp, #56	@ 0x38
 80110ea:	af00      	add	r7, sp, #0
 80110ec:	60f8      	str	r0, [r7, #12]
 80110ee:	607a      	str	r2, [r7, #4]
 80110f0:	603b      	str	r3, [r7, #0]
 80110f2:	460b      	mov	r3, r1
 80110f4:	72fb      	strb	r3, [r7, #11]
    uint8_t     PH_MEMLOC_BUF wRegTypeValueSets[18];
    uint16_t    PH_MEMLOC_REM wSizeOfRegTypeValueSets;

    /* Populate the timer configure and reload registers */

    switch(bTimer)
 80110f6:	7afb      	ldrb	r3, [r7, #11]
 80110f8:	2b10      	cmp	r3, #16
 80110fa:	d018      	beq.n	801112e <phhalHw_Pn5180_TimerStart+0x48>
 80110fc:	2b10      	cmp	r3, #16
 80110fe:	dc1f      	bgt.n	8011140 <phhalHw_Pn5180_TimerStart+0x5a>
 8011100:	2b0e      	cmp	r3, #14
 8011102:	d002      	beq.n	801110a <phhalHw_Pn5180_TimerStart+0x24>
 8011104:	2b0f      	cmp	r3, #15
 8011106:	d009      	beq.n	801111c <phhalHw_Pn5180_TimerStart+0x36>
 8011108:	e01a      	b.n	8011140 <phhalHw_Pn5180_TimerStart+0x5a>
    {
    case TIMER0_CONFIG:
        bTmrConfigReg = TIMER0_CONFIG;
 801110a:	230e      	movs	r3, #14
 801110c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        bTmrRelaodReg = TIMER0_RELOAD;
 8011110:	230b      	movs	r3, #11
 8011112:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        dwEnableMask = TIMER0_CONFIG_T0_ENABLE_MASK;
 8011116:	2301      	movs	r3, #1
 8011118:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 801111a:	e014      	b.n	8011146 <phhalHw_Pn5180_TimerStart+0x60>

    case TIMER1_CONFIG:
        bTmrConfigReg = TIMER1_CONFIG;
 801111c:	230f      	movs	r3, #15
 801111e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        bTmrRelaodReg = TIMER1_RELOAD;
 8011122:	230c      	movs	r3, #12
 8011124:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        dwEnableMask = TIMER1_CONFIG_T1_ENABLE_MASK;
 8011128:	2301      	movs	r3, #1
 801112a:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 801112c:	e00b      	b.n	8011146 <phhalHw_Pn5180_TimerStart+0x60>

    case TIMER2_CONFIG:
        bTmrConfigReg = TIMER2_CONFIG;
 801112e:	2310      	movs	r3, #16
 8011130:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        bTmrRelaodReg = TIMER2_RELOAD;
 8011134:	230d      	movs	r3, #13
 8011136:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        dwEnableMask = TIMER2_CONFIG_T2_ENABLE_MASK;
 801113a:	2301      	movs	r3, #1
 801113c:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 801113e:	e002      	b.n	8011146 <phhalHw_Pn5180_TimerStart+0x60>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011140:	f240 2321 	movw	r3, #545	@ 0x221
 8011144:	e0bd      	b.n	80112c2 <phhalHw_Pn5180_TimerStart+0x1dc>
    }

    /*write 0 to stop timer*/
    wSizeOfRegTypeValueSets = 0U;
 8011146:	2300      	movs	r3, #0
 8011148:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = bTmrConfigReg;
 801114a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801114c:	1c5a      	adds	r2, r3, #1
 801114e:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 8011150:	3338      	adds	r3, #56	@ 0x38
 8011152:	443b      	add	r3, r7
 8011154:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8011158:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE;
 801115c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801115e:	1c5a      	adds	r2, r3, #1
 8011160:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 8011162:	3338      	adds	r3, #56	@ 0x38
 8011164:	443b      	add	r3, r7
 8011166:	2201      	movs	r2, #1
 8011168:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 801116c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801116e:	1c5a      	adds	r2, r3, #1
 8011170:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 8011172:	3338      	adds	r3, #56	@ 0x38
 8011174:	443b      	add	r3, r7
 8011176:	2200      	movs	r2, #0
 8011178:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 801117c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801117e:	1c5a      	adds	r2, r3, #1
 8011180:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 8011182:	3338      	adds	r3, #56	@ 0x38
 8011184:	443b      	add	r3, r7
 8011186:	2200      	movs	r2, #0
 8011188:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 801118c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801118e:	1c5a      	adds	r2, r3, #1
 8011190:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 8011192:	3338      	adds	r3, #56	@ 0x38
 8011194:	443b      	add	r3, r7
 8011196:	2200      	movs	r2, #0
 8011198:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 801119c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801119e:	1c5a      	adds	r2, r3, #1
 80111a0:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 80111a2:	3338      	adds	r3, #56	@ 0x38
 80111a4:	443b      	add	r3, r7
 80111a6:	2200      	movs	r2, #0
 80111a8:	f803 2c24 	strb.w	r2, [r3, #-36]

    /*load the timer  reload value*/
    dwTemp = (dwLoadValue & TMR_RELOAD_VALUE_MASK);
 80111ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80111ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80111b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = bTmrRelaodReg;
 80111b4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80111b6:	1c5a      	adds	r2, r3, #1
 80111b8:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 80111ba:	3338      	adds	r3, #56	@ 0x38
 80111bc:	443b      	add	r3, r7
 80111be:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 80111c2:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE;
 80111c6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80111c8:	1c5a      	adds	r2, r3, #1
 80111ca:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 80111cc:	3338      	adds	r3, #56	@ 0x38
 80111ce:	443b      	add	r3, r7
 80111d0:	2201      	movs	r2, #1
 80111d2:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 80111d6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80111d8:	1c5a      	adds	r2, r3, #1
 80111da:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 80111dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80111de:	b2d2      	uxtb	r2, r2
 80111e0:	3338      	adds	r3, #56	@ 0x38
 80111e2:	443b      	add	r3, r7
 80111e4:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 80111e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111ea:	0a1a      	lsrs	r2, r3, #8
 80111ec:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80111ee:	1c59      	adds	r1, r3, #1
 80111f0:	85f9      	strh	r1, [r7, #46]	@ 0x2e
 80111f2:	b2d2      	uxtb	r2, r2
 80111f4:	3338      	adds	r3, #56	@ 0x38
 80111f6:	443b      	add	r3, r7
 80111f8:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 80111fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111fe:	0c1a      	lsrs	r2, r3, #16
 8011200:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011202:	1c59      	adds	r1, r3, #1
 8011204:	85f9      	strh	r1, [r7, #46]	@ 0x2e
 8011206:	b2d2      	uxtb	r2, r2
 8011208:	3338      	adds	r3, #56	@ 0x38
 801120a:	443b      	add	r3, r7
 801120c:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 8011210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011212:	0e1a      	lsrs	r2, r3, #24
 8011214:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011216:	1c59      	adds	r1, r3, #1
 8011218:	85f9      	strh	r1, [r7, #46]	@ 0x2e
 801121a:	b2d2      	uxtb	r2, r2
 801121c:	3338      	adds	r3, #56	@ 0x38
 801121e:	443b      	add	r3, r7
 8011220:	f803 2c24 	strb.w	r2, [r3, #-36]

    /* Timer MODE_SEL is defined by ePrescaler, 0x01U enables the timer */
    dwTemp = (dwStartCond | dwStopCond | wPrescaler | dwEnableMask );
 8011224:	687a      	ldr	r2, [r7, #4]
 8011226:	683b      	ldr	r3, [r7, #0]
 8011228:	431a      	orrs	r2, r3
 801122a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801122c:	4313      	orrs	r3, r2
 801122e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011230:	4313      	orrs	r3, r2
 8011232:	62bb      	str	r3, [r7, #40]	@ 0x28
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = bTmrConfigReg;
 8011234:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011236:	1c5a      	adds	r2, r3, #1
 8011238:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 801123a:	3338      	adds	r3, #56	@ 0x38
 801123c:	443b      	add	r3, r7
 801123e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8011242:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE;
 8011246:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011248:	1c5a      	adds	r2, r3, #1
 801124a:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 801124c:	3338      	adds	r3, #56	@ 0x38
 801124e:	443b      	add	r3, r7
 8011250:	2201      	movs	r2, #1
 8011252:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 8011256:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011258:	1c5a      	adds	r2, r3, #1
 801125a:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 801125c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801125e:	b2d2      	uxtb	r2, r2
 8011260:	3338      	adds	r3, #56	@ 0x38
 8011262:	443b      	add	r3, r7
 8011264:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 8011268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801126a:	0a1a      	lsrs	r2, r3, #8
 801126c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801126e:	1c59      	adds	r1, r3, #1
 8011270:	85f9      	strh	r1, [r7, #46]	@ 0x2e
 8011272:	b2d2      	uxtb	r2, r2
 8011274:	3338      	adds	r3, #56	@ 0x38
 8011276:	443b      	add	r3, r7
 8011278:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 801127c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801127e:	0c1a      	lsrs	r2, r3, #16
 8011280:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011282:	1c59      	adds	r1, r3, #1
 8011284:	85f9      	strh	r1, [r7, #46]	@ 0x2e
 8011286:	b2d2      	uxtb	r2, r2
 8011288:	3338      	adds	r3, #56	@ 0x38
 801128a:	443b      	add	r3, r7
 801128c:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 8011290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011292:	0e1a      	lsrs	r2, r3, #24
 8011294:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011296:	1c59      	adds	r1, r3, #1
 8011298:	85f9      	strh	r1, [r7, #46]	@ 0x2e
 801129a:	b2d2      	uxtb	r2, r2
 801129c:	3338      	adds	r3, #56	@ 0x38
 801129e:	443b      	add	r3, r7
 80112a0:	f803 2c24 	strb.w	r2, [r3, #-36]

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple( pDataParams, wRegTypeValueSets, wSizeOfRegTypeValueSets));
 80112a4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80112a6:	f107 0314 	add.w	r3, r7, #20
 80112aa:	4619      	mov	r1, r3
 80112ac:	68f8      	ldr	r0, [r7, #12]
 80112ae:	f7fe ff9b 	bl	80101e8 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 80112b2:	4603      	mov	r3, r0
 80112b4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80112b6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d001      	beq.n	80112c0 <phhalHw_Pn5180_TimerStart+0x1da>
 80112bc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80112be:	e000      	b.n	80112c2 <phhalHw_Pn5180_TimerStart+0x1dc>

    return PH_ERR_SUCCESS;
 80112c0:	2300      	movs	r3, #0
}
 80112c2:	4618      	mov	r0, r3
 80112c4:	3738      	adds	r7, #56	@ 0x38
 80112c6:	46bd      	mov	sp, r7
 80112c8:	bd80      	pop	{r7, pc}
	...

080112cc <phhalHw_Pn5180_SetConfig_Int>:
phStatus_t phhalHw_Pn5180_SetConfig_Int(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wConfig,
    uint16_t wValue
    )
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b088      	sub	sp, #32
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
 80112d4:	460b      	mov	r3, r1
 80112d6:	807b      	strh	r3, [r7, #2]
 80112d8:	4613      	mov	r3, r2
 80112da:	803b      	strh	r3, [r7, #0]
    uint32_t    PH_MEMLOC_REM dwValue;
    uint8_t     PH_MEMLOC_BUF wRegTypeValueSets[12];
    uint16_t    PH_MEMLOC_REM wSizeOfRegTypeValueSets;
    uint32_t    PH_MEMLOC_REM dwTemp;

    switch(wConfig)
 80112dc:	887b      	ldrh	r3, [r7, #2]
 80112de:	2b0c      	cmp	r3, #12
 80112e0:	f200 81ad 	bhi.w	801163e <phhalHw_Pn5180_SetConfig_Int+0x372>
 80112e4:	a201      	add	r2, pc, #4	@ (adr r2, 80112ec <phhalHw_Pn5180_SetConfig_Int+0x20>)
 80112e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112ea:	bf00      	nop
 80112ec:	08011321 	.word	0x08011321
 80112f0:	0801139b 	.word	0x0801139b
 80112f4:	080114db 	.word	0x080114db
 80112f8:	0801163f 	.word	0x0801163f
 80112fc:	0801163f 	.word	0x0801163f
 8011300:	0801163f 	.word	0x0801163f
 8011304:	0801163f 	.word	0x0801163f
 8011308:	0801163f 	.word	0x0801163f
 801130c:	0801163f 	.word	0x0801163f
 8011310:	0801163f 	.word	0x0801163f
 8011314:	0801163f 	.word	0x0801163f
 8011318:	0801163f 	.word	0x0801163f
 801131c:	08011619 	.word	0x08011619
    {
    case PHHAL_HW_CONFIG_PARITY:

        /* Tx-Parity,  Rx-Parity is OFF */
        if (wValue == PH_OFF)
 8011320:	883b      	ldrh	r3, [r7, #0]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d11e      	bne.n	8011364 <phhalHw_Pn5180_SetConfig_Int+0x98>
        {
            dwValue = (uint32_t)~(uint32_t)TX_CONFIG_TX_PARITY_ENABLE_MASK;
 8011326:	f46f 6300 	mvn.w	r3, #2048	@ 0x800
 801132a:	617b      	str	r3, [r7, #20]
            /* Perform write */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, TX_CONFIG, dwValue));
 801132c:	697a      	ldr	r2, [r7, #20]
 801132e:	2118      	movs	r1, #24
 8011330:	6878      	ldr	r0, [r7, #4]
 8011332:	f7fe fee3 	bl	80100fc <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 8011336:	4603      	mov	r3, r0
 8011338:	837b      	strh	r3, [r7, #26]
 801133a:	8b7b      	ldrh	r3, [r7, #26]
 801133c:	2b00      	cmp	r3, #0
 801133e:	d001      	beq.n	8011344 <phhalHw_Pn5180_SetConfig_Int+0x78>
 8011340:	8b7b      	ldrh	r3, [r7, #26]
 8011342:	e187      	b.n	8011654 <phhalHw_Pn5180_SetConfig_Int+0x388>

            dwValue = (uint32_t)~(uint32_t)CRC_RX_CONFIG_RX_PARITY_ENABLE_MASK;
 8011344:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8011348:	617b      	str	r3, [r7, #20]
            /* Perform write */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, CRC_RX_CONFIG, dwValue));
 801134a:	697a      	ldr	r2, [r7, #20]
 801134c:	2112      	movs	r1, #18
 801134e:	6878      	ldr	r0, [r7, #4]
 8011350:	f7fe fed4 	bl	80100fc <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 8011354:	4603      	mov	r3, r0
 8011356:	837b      	strh	r3, [r7, #26]
 8011358:	8b7b      	ldrh	r3, [r7, #26]
 801135a:	2b00      	cmp	r3, #0
 801135c:	f000 8172 	beq.w	8011644 <phhalHw_Pn5180_SetConfig_Int+0x378>
 8011360:	8b7b      	ldrh	r3, [r7, #26]
 8011362:	e177      	b.n	8011654 <phhalHw_Pn5180_SetConfig_Int+0x388>
        }
        else
        {
            /* Turn ON Tx-Parity */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, TX_CONFIG, TX_CONFIG_TX_PARITY_ENABLE_MASK));
 8011364:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011368:	2118      	movs	r1, #24
 801136a:	6878      	ldr	r0, [r7, #4]
 801136c:	f7fe fe50 	bl	8010010 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 8011370:	4603      	mov	r3, r0
 8011372:	837b      	strh	r3, [r7, #26]
 8011374:	8b7b      	ldrh	r3, [r7, #26]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d001      	beq.n	801137e <phhalHw_Pn5180_SetConfig_Int+0xb2>
 801137a:	8b7b      	ldrh	r3, [r7, #26]
 801137c:	e16a      	b.n	8011654 <phhalHw_Pn5180_SetConfig_Int+0x388>

            /* Turn ON Rx-Parity */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, CRC_RX_CONFIG, CRC_RX_CONFIG_RX_PARITY_ENABLE_MASK));
 801137e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8011382:	2112      	movs	r1, #18
 8011384:	6878      	ldr	r0, [r7, #4]
 8011386:	f7fe fe43 	bl	8010010 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 801138a:	4603      	mov	r3, r0
 801138c:	837b      	strh	r3, [r7, #26]
 801138e:	8b7b      	ldrh	r3, [r7, #26]
 8011390:	2b00      	cmp	r3, #0
 8011392:	f000 8157 	beq.w	8011644 <phhalHw_Pn5180_SetConfig_Int+0x378>
 8011396:	8b7b      	ldrh	r3, [r7, #26]
 8011398:	e15c      	b.n	8011654 <phhalHw_Pn5180_SetConfig_Int+0x388>

        break;

    case PHHAL_HW_CONFIG_TXCRC:

        if (wValue == PH_OFF)
 801139a:	883b      	ldrh	r3, [r7, #0]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d10f      	bne.n	80113c0 <phhalHw_Pn5180_SetConfig_Int+0xf4>
        {
            /* CRC calculator, your services are not required */
            dwValue = (uint32_t)~(uint32_t)CRC_TX_CONFIG_TX_CRC_ENABLE_MASK;
 80113a0:	f06f 0301 	mvn.w	r3, #1
 80113a4:	617b      	str	r3, [r7, #20]

            /* Perform write */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, CRC_TX_CONFIG, dwValue));
 80113a6:	697a      	ldr	r2, [r7, #20]
 80113a8:	2119      	movs	r1, #25
 80113aa:	6878      	ldr	r0, [r7, #4]
 80113ac:	f7fe fea6 	bl	80100fc <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 80113b0:	4603      	mov	r3, r0
 80113b2:	837b      	strh	r3, [r7, #26]
 80113b4:	8b7b      	ldrh	r3, [r7, #26]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	f000 8146 	beq.w	8011648 <phhalHw_Pn5180_SetConfig_Int+0x37c>
 80113bc:	8b7b      	ldrh	r3, [r7, #26]
 80113be:	e149      	b.n	8011654 <phhalHw_Pn5180_SetConfig_Int+0x388>
        }
        else
        {

            wSizeOfRegTypeValueSets = 0U;
 80113c0:	2300      	movs	r3, #0
 80113c2:	833b      	strh	r3, [r7, #24]

            /*Clear the Bits*/
            dwTemp = (uint32_t) ~( CRC_TX_CONFIG_TX_CRC_TYPE_MASK);
 80113c4:	f06f 0304 	mvn.w	r3, #4
 80113c8:	61fb      	str	r3, [r7, #28]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_TX_CONFIG;
 80113ca:	8b3b      	ldrh	r3, [r7, #24]
 80113cc:	1c5a      	adds	r2, r3, #1
 80113ce:	833a      	strh	r2, [r7, #24]
 80113d0:	3320      	adds	r3, #32
 80113d2:	443b      	add	r3, r7
 80113d4:	2219      	movs	r2, #25
 80113d6:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 80113da:	8b3b      	ldrh	r3, [r7, #24]
 80113dc:	1c5a      	adds	r2, r3, #1
 80113de:	833a      	strh	r2, [r7, #24]
 80113e0:	3320      	adds	r3, #32
 80113e2:	443b      	add	r3, r7
 80113e4:	2203      	movs	r2, #3
 80113e6:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 80113ea:	8b3b      	ldrh	r3, [r7, #24]
 80113ec:	1c5a      	adds	r2, r3, #1
 80113ee:	833a      	strh	r2, [r7, #24]
 80113f0:	69fa      	ldr	r2, [r7, #28]
 80113f2:	b2d2      	uxtb	r2, r2
 80113f4:	3320      	adds	r3, #32
 80113f6:	443b      	add	r3, r7
 80113f8:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 80113fc:	69fb      	ldr	r3, [r7, #28]
 80113fe:	0a1a      	lsrs	r2, r3, #8
 8011400:	8b3b      	ldrh	r3, [r7, #24]
 8011402:	1c59      	adds	r1, r3, #1
 8011404:	8339      	strh	r1, [r7, #24]
 8011406:	b2d2      	uxtb	r2, r2
 8011408:	3320      	adds	r3, #32
 801140a:	443b      	add	r3, r7
 801140c:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 8011410:	69fb      	ldr	r3, [r7, #28]
 8011412:	0c1a      	lsrs	r2, r3, #16
 8011414:	8b3b      	ldrh	r3, [r7, #24]
 8011416:	1c59      	adds	r1, r3, #1
 8011418:	8339      	strh	r1, [r7, #24]
 801141a:	b2d2      	uxtb	r2, r2
 801141c:	3320      	adds	r3, #32
 801141e:	443b      	add	r3, r7
 8011420:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 8011424:	69fb      	ldr	r3, [r7, #28]
 8011426:	0e1a      	lsrs	r2, r3, #24
 8011428:	8b3b      	ldrh	r3, [r7, #24]
 801142a:	1c59      	adds	r1, r3, #1
 801142c:	8339      	strh	r1, [r7, #24]
 801142e:	b2d2      	uxtb	r2, r2
 8011430:	3320      	adds	r3, #32
 8011432:	443b      	add	r3, r7
 8011434:	f803 2c18 	strb.w	r2, [r3, #-24]

            /*Set the new value  */
            dwTemp = (uint32_t)(CRC_TX_CONFIG_TX_CRC_ENABLE_MASK);
 8011438:	2301      	movs	r3, #1
 801143a:	61fb      	str	r3, [r7, #28]
            /* If the card type is other than I18000p3m3, operate the CRC in 16-bit mode */
            if (pDataParams->bCardType == PHHAL_HW_CARDTYPE_I18000P3M3)
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011442:	2b06      	cmp	r3, #6
 8011444:	d103      	bne.n	801144e <phhalHw_Pn5180_SetConfig_Int+0x182>
            {
                /* Just set the bit for 5-bit mode operation */
                dwTemp |= (uint32_t)CRC_TX_CONFIG_TX_CRC_TYPE_MASK;
 8011446:	69fb      	ldr	r3, [r7, #28]
 8011448:	f043 0304 	orr.w	r3, r3, #4
 801144c:	61fb      	str	r3, [r7, #28]
            }

            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_TX_CONFIG;
 801144e:	8b3b      	ldrh	r3, [r7, #24]
 8011450:	1c5a      	adds	r2, r3, #1
 8011452:	833a      	strh	r2, [r7, #24]
 8011454:	3320      	adds	r3, #32
 8011456:	443b      	add	r3, r7
 8011458:	2219      	movs	r2, #25
 801145a:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 801145e:	8b3b      	ldrh	r3, [r7, #24]
 8011460:	1c5a      	adds	r2, r3, #1
 8011462:	833a      	strh	r2, [r7, #24]
 8011464:	3320      	adds	r3, #32
 8011466:	443b      	add	r3, r7
 8011468:	2202      	movs	r2, #2
 801146a:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 801146e:	8b3b      	ldrh	r3, [r7, #24]
 8011470:	1c5a      	adds	r2, r3, #1
 8011472:	833a      	strh	r2, [r7, #24]
 8011474:	69fa      	ldr	r2, [r7, #28]
 8011476:	b2d2      	uxtb	r2, r2
 8011478:	3320      	adds	r3, #32
 801147a:	443b      	add	r3, r7
 801147c:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 8011480:	69fb      	ldr	r3, [r7, #28]
 8011482:	0a1a      	lsrs	r2, r3, #8
 8011484:	8b3b      	ldrh	r3, [r7, #24]
 8011486:	1c59      	adds	r1, r3, #1
 8011488:	8339      	strh	r1, [r7, #24]
 801148a:	b2d2      	uxtb	r2, r2
 801148c:	3320      	adds	r3, #32
 801148e:	443b      	add	r3, r7
 8011490:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 8011494:	69fb      	ldr	r3, [r7, #28]
 8011496:	0c1a      	lsrs	r2, r3, #16
 8011498:	8b3b      	ldrh	r3, [r7, #24]
 801149a:	1c59      	adds	r1, r3, #1
 801149c:	8339      	strh	r1, [r7, #24]
 801149e:	b2d2      	uxtb	r2, r2
 80114a0:	3320      	adds	r3, #32
 80114a2:	443b      	add	r3, r7
 80114a4:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 80114a8:	69fb      	ldr	r3, [r7, #28]
 80114aa:	0e1a      	lsrs	r2, r3, #24
 80114ac:	8b3b      	ldrh	r3, [r7, #24]
 80114ae:	1c59      	adds	r1, r3, #1
 80114b0:	8339      	strh	r1, [r7, #24]
 80114b2:	b2d2      	uxtb	r2, r2
 80114b4:	3320      	adds	r3, #32
 80114b6:	443b      	add	r3, r7
 80114b8:	f803 2c18 	strb.w	r2, [r3, #-24]

            /*Send the array to the IC*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 80114bc:	8b3a      	ldrh	r2, [r7, #24]
 80114be:	f107 0308 	add.w	r3, r7, #8
 80114c2:	4619      	mov	r1, r3
 80114c4:	6878      	ldr	r0, [r7, #4]
 80114c6:	f7fe fe8f 	bl	80101e8 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 80114ca:	4603      	mov	r3, r0
 80114cc:	837b      	strh	r3, [r7, #26]
 80114ce:	8b7b      	ldrh	r3, [r7, #26]
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	f000 80b9 	beq.w	8011648 <phhalHw_Pn5180_SetConfig_Int+0x37c>
 80114d6:	8b7b      	ldrh	r3, [r7, #26]
 80114d8:	e0bc      	b.n	8011654 <phhalHw_Pn5180_SetConfig_Int+0x388>
        }
        break;

    case PHHAL_HW_CONFIG_RXCRC:

        if (wValue == PH_OFF)
 80114da:	883b      	ldrh	r3, [r7, #0]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d10f      	bne.n	8011500 <phhalHw_Pn5180_SetConfig_Int+0x234>
        {
            /* CRC calculator, your services are not required */
            dwValue = (uint32_t)~(uint32_t)CRC_RX_CONFIG_RX_CRC_ENABLE_MASK;
 80114e0:	f06f 0301 	mvn.w	r3, #1
 80114e4:	617b      	str	r3, [r7, #20]

            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, CRC_RX_CONFIG, dwValue));
 80114e6:	697a      	ldr	r2, [r7, #20]
 80114e8:	2112      	movs	r1, #18
 80114ea:	6878      	ldr	r0, [r7, #4]
 80114ec:	f7fe fe06 	bl	80100fc <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 80114f0:	4603      	mov	r3, r0
 80114f2:	837b      	strh	r3, [r7, #26]
 80114f4:	8b7b      	ldrh	r3, [r7, #26]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	f000 80a8 	beq.w	801164c <phhalHw_Pn5180_SetConfig_Int+0x380>
 80114fc:	8b7b      	ldrh	r3, [r7, #26]
 80114fe:	e0a9      	b.n	8011654 <phhalHw_Pn5180_SetConfig_Int+0x388>
        }
        else
        {

            wSizeOfRegTypeValueSets = 0U;
 8011500:	2300      	movs	r3, #0
 8011502:	833b      	strh	r3, [r7, #24]

            /*Clear the Bits */
            dwTemp = (uint32_t) ~( CRC_RX_CONFIG_RX_CRC_TYPE_MASK);
 8011504:	f06f 0304 	mvn.w	r3, #4
 8011508:	61fb      	str	r3, [r7, #28]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_RX_CONFIG;
 801150a:	8b3b      	ldrh	r3, [r7, #24]
 801150c:	1c5a      	adds	r2, r3, #1
 801150e:	833a      	strh	r2, [r7, #24]
 8011510:	3320      	adds	r3, #32
 8011512:	443b      	add	r3, r7
 8011514:	2212      	movs	r2, #18
 8011516:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 801151a:	8b3b      	ldrh	r3, [r7, #24]
 801151c:	1c5a      	adds	r2, r3, #1
 801151e:	833a      	strh	r2, [r7, #24]
 8011520:	3320      	adds	r3, #32
 8011522:	443b      	add	r3, r7
 8011524:	2203      	movs	r2, #3
 8011526:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 801152a:	8b3b      	ldrh	r3, [r7, #24]
 801152c:	1c5a      	adds	r2, r3, #1
 801152e:	833a      	strh	r2, [r7, #24]
 8011530:	69fa      	ldr	r2, [r7, #28]
 8011532:	b2d2      	uxtb	r2, r2
 8011534:	3320      	adds	r3, #32
 8011536:	443b      	add	r3, r7
 8011538:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 801153c:	69fb      	ldr	r3, [r7, #28]
 801153e:	0a1a      	lsrs	r2, r3, #8
 8011540:	8b3b      	ldrh	r3, [r7, #24]
 8011542:	1c59      	adds	r1, r3, #1
 8011544:	8339      	strh	r1, [r7, #24]
 8011546:	b2d2      	uxtb	r2, r2
 8011548:	3320      	adds	r3, #32
 801154a:	443b      	add	r3, r7
 801154c:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 8011550:	69fb      	ldr	r3, [r7, #28]
 8011552:	0c1a      	lsrs	r2, r3, #16
 8011554:	8b3b      	ldrh	r3, [r7, #24]
 8011556:	1c59      	adds	r1, r3, #1
 8011558:	8339      	strh	r1, [r7, #24]
 801155a:	b2d2      	uxtb	r2, r2
 801155c:	3320      	adds	r3, #32
 801155e:	443b      	add	r3, r7
 8011560:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 8011564:	69fb      	ldr	r3, [r7, #28]
 8011566:	0e1a      	lsrs	r2, r3, #24
 8011568:	8b3b      	ldrh	r3, [r7, #24]
 801156a:	1c59      	adds	r1, r3, #1
 801156c:	8339      	strh	r1, [r7, #24]
 801156e:	b2d2      	uxtb	r2, r2
 8011570:	3320      	adds	r3, #32
 8011572:	443b      	add	r3, r7
 8011574:	f803 2c18 	strb.w	r2, [r3, #-24]

            /*Set the new value  */
            dwTemp = (uint32_t)CRC_RX_CONFIG_RX_CRC_ENABLE_MASK;
 8011578:	2301      	movs	r3, #1
 801157a:	61fb      	str	r3, [r7, #28]
            /* If the card type is other than I18000p3m3, operate the CRC in 16-bit mode */
            if (pDataParams->bCardType == PHHAL_HW_CARDTYPE_I18000P3M3)
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011582:	2b06      	cmp	r3, #6
 8011584:	d103      	bne.n	801158e <phhalHw_Pn5180_SetConfig_Int+0x2c2>
            {
                /* Just set the bit for 5-bit mode operation */
                dwTemp |= (uint32_t)CRC_RX_CONFIG_RX_CRC_TYPE_MASK;
 8011586:	69fb      	ldr	r3, [r7, #28]
 8011588:	f043 0304 	orr.w	r3, r3, #4
 801158c:	61fb      	str	r3, [r7, #28]
            }

            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_RX_CONFIG;
 801158e:	8b3b      	ldrh	r3, [r7, #24]
 8011590:	1c5a      	adds	r2, r3, #1
 8011592:	833a      	strh	r2, [r7, #24]
 8011594:	3320      	adds	r3, #32
 8011596:	443b      	add	r3, r7
 8011598:	2212      	movs	r2, #18
 801159a:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 801159e:	8b3b      	ldrh	r3, [r7, #24]
 80115a0:	1c5a      	adds	r2, r3, #1
 80115a2:	833a      	strh	r2, [r7, #24]
 80115a4:	3320      	adds	r3, #32
 80115a6:	443b      	add	r3, r7
 80115a8:	2202      	movs	r2, #2
 80115aa:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 80115ae:	8b3b      	ldrh	r3, [r7, #24]
 80115b0:	1c5a      	adds	r2, r3, #1
 80115b2:	833a      	strh	r2, [r7, #24]
 80115b4:	69fa      	ldr	r2, [r7, #28]
 80115b6:	b2d2      	uxtb	r2, r2
 80115b8:	3320      	adds	r3, #32
 80115ba:	443b      	add	r3, r7
 80115bc:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 80115c0:	69fb      	ldr	r3, [r7, #28]
 80115c2:	0a1a      	lsrs	r2, r3, #8
 80115c4:	8b3b      	ldrh	r3, [r7, #24]
 80115c6:	1c59      	adds	r1, r3, #1
 80115c8:	8339      	strh	r1, [r7, #24]
 80115ca:	b2d2      	uxtb	r2, r2
 80115cc:	3320      	adds	r3, #32
 80115ce:	443b      	add	r3, r7
 80115d0:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 80115d4:	69fb      	ldr	r3, [r7, #28]
 80115d6:	0c1a      	lsrs	r2, r3, #16
 80115d8:	8b3b      	ldrh	r3, [r7, #24]
 80115da:	1c59      	adds	r1, r3, #1
 80115dc:	8339      	strh	r1, [r7, #24]
 80115de:	b2d2      	uxtb	r2, r2
 80115e0:	3320      	adds	r3, #32
 80115e2:	443b      	add	r3, r7
 80115e4:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 80115e8:	69fb      	ldr	r3, [r7, #28]
 80115ea:	0e1a      	lsrs	r2, r3, #24
 80115ec:	8b3b      	ldrh	r3, [r7, #24]
 80115ee:	1c59      	adds	r1, r3, #1
 80115f0:	8339      	strh	r1, [r7, #24]
 80115f2:	b2d2      	uxtb	r2, r2
 80115f4:	3320      	adds	r3, #32
 80115f6:	443b      	add	r3, r7
 80115f8:	f803 2c18 	strb.w	r2, [r3, #-24]

            /*Send the array to the IC*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 80115fc:	8b3a      	ldrh	r2, [r7, #24]
 80115fe:	f107 0308 	add.w	r3, r7, #8
 8011602:	4619      	mov	r1, r3
 8011604:	6878      	ldr	r0, [r7, #4]
 8011606:	f7fe fdef 	bl	80101e8 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 801160a:	4603      	mov	r3, r0
 801160c:	837b      	strh	r3, [r7, #26]
 801160e:	8b7b      	ldrh	r3, [r7, #26]
 8011610:	2b00      	cmp	r3, #0
 8011612:	d01b      	beq.n	801164c <phhalHw_Pn5180_SetConfig_Int+0x380>
 8011614:	8b7b      	ldrh	r3, [r7, #26]
 8011616:	e01d      	b.n	8011654 <phhalHw_Pn5180_SetConfig_Int+0x388>
        break;

    case PHHAL_HW_CONFIG_ASK100:

        /* switch off 100% ASK */
        if (wValue == PH_OFF)
 8011618:	883b      	ldrh	r3, [r7, #0]
 801161a:	2b00      	cmp	r3, #0
 801161c:	d102      	bne.n	8011624 <phhalHw_Pn5180_SetConfig_Int+0x358>
        {
            /* ASK 10  is not supported for all the combinations*/;
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 801161e:	f240 2323 	movw	r3, #547	@ 0x223
 8011622:	e017      	b.n	8011654 <phhalHw_Pn5180_SetConfig_Int+0x388>
        }
        /* switch on 100% ASK */
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, ANA_RF_CONTROL_TX, ~(uint32_t)ANA_RF_CONTROL_TX_TX_RESIDUAL_CARRIER_MASK));
 8011624:	f46f 3278 	mvn.w	r2, #253952	@ 0x3e000
 8011628:	2120      	movs	r1, #32
 801162a:	6878      	ldr	r0, [r7, #4]
 801162c:	f7fe fd66 	bl	80100fc <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 8011630:	4603      	mov	r3, r0
 8011632:	837b      	strh	r3, [r7, #26]
 8011634:	8b7b      	ldrh	r3, [r7, #26]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d00a      	beq.n	8011650 <phhalHw_Pn5180_SetConfig_Int+0x384>
 801163a:	8b7b      	ldrh	r3, [r7, #26]
 801163c:	e00a      	b.n	8011654 <phhalHw_Pn5180_SetConfig_Int+0x388>
        }

        break;

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 801163e:	f240 237f 	movw	r3, #639	@ 0x27f
 8011642:	e007      	b.n	8011654 <phhalHw_Pn5180_SetConfig_Int+0x388>
        break;
 8011644:	bf00      	nop
 8011646:	e004      	b.n	8011652 <phhalHw_Pn5180_SetConfig_Int+0x386>
        break;
 8011648:	bf00      	nop
 801164a:	e002      	b.n	8011652 <phhalHw_Pn5180_SetConfig_Int+0x386>
        break;
 801164c:	bf00      	nop
 801164e:	e000      	b.n	8011652 <phhalHw_Pn5180_SetConfig_Int+0x386>
        break;
 8011650:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 8011652:	2300      	movs	r3, #0
}
 8011654:	4618      	mov	r0, r3
 8011656:	3720      	adds	r7, #32
 8011658:	46bd      	mov	sp, r7
 801165a:	bd80      	pop	{r7, pc}

0801165c <phhalHw_Pn5180_SetConfig_FelicaEmdReg>:

phStatus_t phhalHw_Pn5180_SetConfig_FelicaEmdReg(
    phhalHw_Pn5180_DataParams_t * pDataParams
    )
{
 801165c:	b580      	push	{r7, lr}
 801165e:	b084      	sub	sp, #16
 8011660:	af00      	add	r7, sp, #0
 8011662:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM statusTmp;

    if (pDataParams->bOpeMode != RD_LIB_MODE_FELICA)
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801166a:	2b04      	cmp	r3, #4
 801166c:	d00f      	beq.n	801168e <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x32>
    {
        /* Clear FeliCa EMD Control Register */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, FELICA_EMD_CONTROL, (uint32_t)0x0U));
 801166e:	2200      	movs	r2, #0
 8011670:	2143      	movs	r1, #67	@ 0x43
 8011672:	6878      	ldr	r0, [r7, #4]
 8011674:	f7fe fc56 	bl	800ff24 <phhalHw_Pn5180_Instr_WriteRegister>
 8011678:	4603      	mov	r3, r0
 801167a:	81fb      	strh	r3, [r7, #14]
 801167c:	89fb      	ldrh	r3, [r7, #14]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d001      	beq.n	8011686 <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x2a>
 8011682:	89fb      	ldrh	r3, [r7, #14]
 8011684:	e013      	b.n	80116ae <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x52>
        /* Reset shadow register */
        pDataParams->dwFelicaEmdReg = (uint32_t)0x0U;
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	2200      	movs	r2, #0
 801168a:	655a      	str	r2, [r3, #84]	@ 0x54
 801168c:	e00e      	b.n	80116ac <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x50>
    }
    else
    {
        /* Configure FeliCa EMD Control Register with default value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, FELICA_EMD_CONTROL, PHHAL_HW_PN5180_DEFAULT_FELICA_EMD_REGISTER));
 801168e:	4a0a      	ldr	r2, [pc, #40]	@ (80116b8 <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x5c>)
 8011690:	2143      	movs	r1, #67	@ 0x43
 8011692:	6878      	ldr	r0, [r7, #4]
 8011694:	f7fe fc46 	bl	800ff24 <phhalHw_Pn5180_Instr_WriteRegister>
 8011698:	4603      	mov	r3, r0
 801169a:	81fb      	strh	r3, [r7, #14]
 801169c:	89fb      	ldrh	r3, [r7, #14]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d001      	beq.n	80116a6 <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x4a>
 80116a2:	89fb      	ldrh	r3, [r7, #14]
 80116a4:	e003      	b.n	80116ae <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x52>
        /* Configure shadow register with default value */
        pDataParams->dwFelicaEmdReg = PHHAL_HW_PN5180_DEFAULT_FELICA_EMD_REGISTER;
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	4a03      	ldr	r2, [pc, #12]	@ (80116b8 <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x5c>)
 80116aa:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    return PH_ERR_SUCCESS;
 80116ac:	2300      	movs	r3, #0
}
 80116ae:	4618      	mov	r0, r3
 80116b0:	3710      	adds	r7, #16
 80116b2:	46bd      	mov	sp, r7
 80116b4:	bd80      	pop	{r7, pc}
 80116b6:	bf00      	nop
 80116b8:	00ff0019 	.word	0x00ff0019

080116bc <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit>:
phStatus_t phhalHw_Pn5180_SetConfig_FelicaEmdRegBit(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wValue,
    uint32_t dwMaskValue
    )
{
 80116bc:	b580      	push	{r7, lr}
 80116be:	b086      	sub	sp, #24
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	60f8      	str	r0, [r7, #12]
 80116c4:	460b      	mov	r3, r1
 80116c6:	607a      	str	r2, [r7, #4]
 80116c8:	817b      	strh	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM statusTmp;

    if ((wValue != PH_ON) && (wValue != PH_OFF))
 80116ca:	897b      	ldrh	r3, [r7, #10]
 80116cc:	2b01      	cmp	r3, #1
 80116ce:	d005      	beq.n	80116dc <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x20>
 80116d0:	897b      	ldrh	r3, [r7, #10]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d002      	beq.n	80116dc <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x20>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80116d6:	f240 2321 	movw	r3, #545	@ 0x221
 80116da:	e037      	b.n	801174c <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x90>
    }

    if(wValue != PH_OFF)
 80116dc:	897b      	ldrh	r3, [r7, #10]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d018      	beq.n	8011714 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x58>
    {
        if (!(pDataParams->dwFelicaEmdReg & dwMaskValue))
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	4013      	ands	r3, r2
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d12d      	bne.n	801174a <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x8e>
        {
            /* Update FELICA_EMD_CONTROL Register */
            PH_CHECK_SUCCESS_FCT(statusTmp,
 80116ee:	687a      	ldr	r2, [r7, #4]
 80116f0:	2143      	movs	r1, #67	@ 0x43
 80116f2:	68f8      	ldr	r0, [r7, #12]
 80116f4:	f7fe fc8c 	bl	8010010 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 80116f8:	4603      	mov	r3, r0
 80116fa:	82fb      	strh	r3, [r7, #22]
 80116fc:	8afb      	ldrh	r3, [r7, #22]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d001      	beq.n	8011706 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x4a>
 8011702:	8afb      	ldrh	r3, [r7, #22]
 8011704:	e022      	b.n	801174c <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x90>
                phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, FELICA_EMD_CONTROL, dwMaskValue));
            /* Update shadow register */
            pDataParams->dwFelicaEmdReg |= dwMaskValue;
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	431a      	orrs	r2, r3
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	655a      	str	r2, [r3, #84]	@ 0x54
 8011712:	e01a      	b.n	801174a <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x8e>
        }
    }
    else
    {
        if (pDataParams->dwFelicaEmdReg & dwMaskValue)
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	4013      	ands	r3, r2
 801171c:	2b00      	cmp	r3, #0
 801171e:	d014      	beq.n	801174a <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x8e>
        {
            /* Update FELICA_EMD_CONTROL Register */
            PH_CHECK_SUCCESS_FCT(statusTmp,
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	43db      	mvns	r3, r3
 8011724:	461a      	mov	r2, r3
 8011726:	2143      	movs	r1, #67	@ 0x43
 8011728:	68f8      	ldr	r0, [r7, #12]
 801172a:	f7fe fce7 	bl	80100fc <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 801172e:	4603      	mov	r3, r0
 8011730:	82fb      	strh	r3, [r7, #22]
 8011732:	8afb      	ldrh	r3, [r7, #22]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d001      	beq.n	801173c <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x80>
 8011738:	8afb      	ldrh	r3, [r7, #22]
 801173a:	e007      	b.n	801174c <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x90>
                phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, FELICA_EMD_CONTROL, (uint32_t)~dwMaskValue));
            /* Update shadow register */
            pDataParams->dwFelicaEmdReg &= (uint32_t)~dwMaskValue;
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	43db      	mvns	r3, r3
 8011744:	401a      	ands	r2, r3
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	655a      	str	r2, [r3, #84]	@ 0x54
        }
    }

    return PH_ERR_SUCCESS;
 801174a:	2300      	movs	r3, #0
}
 801174c:	4618      	mov	r0, r3
 801174e:	3718      	adds	r7, #24
 8011750:	46bd      	mov	sp, r7
 8011752:	bd80      	pop	{r7, pc}

08011754 <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte>:
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wValue,
    uint8_t bBytePos,
    uint32_t dwMaskValue
    )
{
 8011754:	b580      	push	{r7, lr}
 8011756:	b086      	sub	sp, #24
 8011758:	af00      	add	r7, sp, #0
 801175a:	60f8      	str	r0, [r7, #12]
 801175c:	607b      	str	r3, [r7, #4]
 801175e:	460b      	mov	r3, r1
 8011760:	817b      	strh	r3, [r7, #10]
 8011762:	4613      	mov	r3, r2
 8011764:	727b      	strb	r3, [r7, #9]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint32_t    PH_MEMLOC_REM dwValue;

    if (wValue & 0xFF00U)
 8011766:	897b      	ldrh	r3, [r7, #10]
 8011768:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801176c:	2b00      	cmp	r3, #0
 801176e:	d002      	beq.n	8011776 <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte+0x22>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011770:	f240 2321 	movw	r3, #545	@ 0x221
 8011774:	e028      	b.n	80117c8 <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte+0x74>
    }

    if ((uint8_t)(pDataParams->dwFelicaEmdReg >> bBytePos) != (uint8_t)wValue)
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801177a:	7a7b      	ldrb	r3, [r7, #9]
 801177c:	fa22 f303 	lsr.w	r3, r2, r3
 8011780:	b2da      	uxtb	r2, r3
 8011782:	897b      	ldrh	r3, [r7, #10]
 8011784:	b2db      	uxtb	r3, r3
 8011786:	429a      	cmp	r2, r3
 8011788:	d01d      	beq.n	80117c6 <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte+0x72>
    {
        dwValue = pDataParams->dwFelicaEmdReg;
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801178e:	617b      	str	r3, [r7, #20]
        dwValue &= ((uint32_t)~dwMaskValue);
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	43db      	mvns	r3, r3
 8011794:	697a      	ldr	r2, [r7, #20]
 8011796:	4013      	ands	r3, r2
 8011798:	617b      	str	r3, [r7, #20]
        dwValue |= ((uint32_t)wValue << bBytePos);
 801179a:	897a      	ldrh	r2, [r7, #10]
 801179c:	7a7b      	ldrb	r3, [r7, #9]
 801179e:	fa02 f303 	lsl.w	r3, r2, r3
 80117a2:	697a      	ldr	r2, [r7, #20]
 80117a4:	4313      	orrs	r3, r2
 80117a6:	617b      	str	r3, [r7, #20]
        /* Update FELICA_EMD_CONTROL Register */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, FELICA_EMD_CONTROL, dwValue));
 80117a8:	697a      	ldr	r2, [r7, #20]
 80117aa:	2143      	movs	r1, #67	@ 0x43
 80117ac:	68f8      	ldr	r0, [r7, #12]
 80117ae:	f7fe fbb9 	bl	800ff24 <phhalHw_Pn5180_Instr_WriteRegister>
 80117b2:	4603      	mov	r3, r0
 80117b4:	827b      	strh	r3, [r7, #18]
 80117b6:	8a7b      	ldrh	r3, [r7, #18]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d001      	beq.n	80117c0 <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte+0x6c>
 80117bc:	8a7b      	ldrh	r3, [r7, #18]
 80117be:	e003      	b.n	80117c8 <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte+0x74>
        /* Update shadow register */
        pDataParams->dwFelicaEmdReg = dwValue;
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	697a      	ldr	r2, [r7, #20]
 80117c4:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    return PH_ERR_SUCCESS;
 80117c6:	2300      	movs	r3, #0
}
 80117c8:	4618      	mov	r0, r3
 80117ca:	3718      	adds	r7, #24
 80117cc:	46bd      	mov	sp, r7
 80117ce:	bd80      	pop	{r7, pc}

080117d0 <phhalHw_Pn5180_SetCardMode>:
phStatus_t phhalHw_Pn5180_SetCardMode(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wTxDataRate,
    uint16_t wRxDataRate,
    uint16_t wSubcarrier )
{
 80117d0:	b580      	push	{r7, lr}
 80117d2:	b086      	sub	sp, #24
 80117d4:	af00      	add	r7, sp, #0
 80117d6:	60f8      	str	r0, [r7, #12]
 80117d8:	4608      	mov	r0, r1
 80117da:	4611      	mov	r1, r2
 80117dc:	461a      	mov	r2, r3
 80117de:	4603      	mov	r3, r0
 80117e0:	817b      	strh	r3, [r7, #10]
 80117e2:	460b      	mov	r3, r1
 80117e4:	813b      	strh	r3, [r7, #8]
 80117e6:	4613      	mov	r3, r2
 80117e8:	80fb      	strh	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bTxConfig = 0U;
 80117ea:	2300      	movs	r3, #0
 80117ec:	75fb      	strb	r3, [r7, #23]
    uint8_t     PH_MEMLOC_REM bRxConfig = 0U;
 80117ee:	2300      	movs	r3, #0
 80117f0:	75bb      	strb	r3, [r7, #22]

    if(pDataParams->wTargetMode == PH_OFF)
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d10f      	bne.n	801181a <phhalHw_Pn5180_SetCardMode+0x4a>
    {
        if(wTxDataRate == pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TXDATARATE_FRAMING])
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011800:	897a      	ldrh	r2, [r7, #10]
 8011802:	429a      	cmp	r2, r3
 8011804:	d101      	bne.n	801180a <phhalHw_Pn5180_SetCardMode+0x3a>
        {
            wTxDataRate = PHHAL_HW_RF_DATARATE_NO_CHANGE;
 8011806:	23ff      	movs	r3, #255	@ 0xff
 8011808:	817b      	strh	r3, [r7, #10]
        }
        if(wRxDataRate == pDataParams->wCfgShadow[PHHAL_HW_CONFIG_RXDATARATE_FRAMING])
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	f8b3 306c 	ldrh.w	r3, [r3, #108]	@ 0x6c
 8011810:	893a      	ldrh	r2, [r7, #8]
 8011812:	429a      	cmp	r2, r3
 8011814:	d101      	bne.n	801181a <phhalHw_Pn5180_SetCardMode+0x4a>
        {
            wRxDataRate = PHHAL_HW_RF_DATARATE_NO_CHANGE;
 8011816:	23ff      	movs	r3, #255	@ 0xff
 8011818:	813b      	strh	r3, [r7, #8]
        }
    }

    switch (pDataParams->bCardType)
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011820:	3b01      	subs	r3, #1
 8011822:	2b09      	cmp	r3, #9
 8011824:	f200 82a1 	bhi.w	8011d6a <phhalHw_Pn5180_SetCardMode+0x59a>
 8011828:	a201      	add	r2, pc, #4	@ (adr r2, 8011830 <phhalHw_Pn5180_SetCardMode+0x60>)
 801182a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801182e:	bf00      	nop
 8011830:	08011859 	.word	0x08011859
 8011834:	08011a21 	.word	0x08011a21
 8011838:	08011ac1 	.word	0x08011ac1
 801183c:	08011bdd 	.word	0x08011bdd
 8011840:	08011d6b 	.word	0x08011d6b
 8011844:	08011c73 	.word	0x08011c73
 8011848:	08011cf5 	.word	0x08011cf5
 801184c:	08011cf5 	.word	0x08011cf5
 8011850:	08011cf5 	.word	0x08011cf5
 8011854:	08011ac1 	.word	0x08011ac1
    {
    case PHHAL_HW_CARDTYPE_ISO14443A:

        /* Check if Target is activated and perform required change to switch BaudRate. */
        if (pDataParams->wTargetMode != PH_OFF)
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801185c:	2b00      	cmp	r3, #0
 801185e:	f000 808e 	beq.w	801197e <phhalHw_Pn5180_SetCardMode+0x1ae>
        {
            if(pDataParams->bActiveMode == PH_OFF)
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011868:	2b00      	cmp	r3, #0
 801186a:	d14e      	bne.n	801190a <phhalHw_Pn5180_SetCardMode+0x13a>
            {
                switch (wTxDataRate)
 801186c:	897b      	ldrh	r3, [r7, #10]
 801186e:	2b03      	cmp	r3, #3
 8011870:	dc0e      	bgt.n	8011890 <phhalHw_Pn5180_SetCardMode+0xc0>
 8011872:	2b00      	cmp	r3, #0
 8011874:	db1e      	blt.n	80118b4 <phhalHw_Pn5180_SetCardMode+0xe4>
 8011876:	2b03      	cmp	r3, #3
 8011878:	d81c      	bhi.n	80118b4 <phhalHw_Pn5180_SetCardMode+0xe4>
 801187a:	a201      	add	r2, pc, #4	@ (adr r2, 8011880 <phhalHw_Pn5180_SetCardMode+0xb0>)
 801187c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011880:	08011897 	.word	0x08011897
 8011884:	0801189d 	.word	0x0801189d
 8011888:	080118a3 	.word	0x080118a3
 801188c:	080118a9 	.word	0x080118a9
 8011890:	2bff      	cmp	r3, #255	@ 0xff
 8011892:	d00c      	beq.n	80118ae <phhalHw_Pn5180_SetCardMode+0xde>
 8011894:	e00e      	b.n	80118b4 <phhalHw_Pn5180_SetCardMode+0xe4>
                {
                    case PHHAL_HW_RF_DATARATE_106:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_PICC_106_MANCH_SUBC;
 8011896:	2313      	movs	r3, #19
 8011898:	75fb      	strb	r3, [r7, #23]
                        /*pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_106;*/
                        break;
 801189a:	e00e      	b.n	80118ba <phhalHw_Pn5180_SetCardMode+0xea>
                    case PHHAL_HW_RF_DATARATE_212:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_PICC_212_BPSK;
 801189c:	2314      	movs	r3, #20
 801189e:	75fb      	strb	r3, [r7, #23]
                        /*pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_212;*/
                        break;
 80118a0:	e00b      	b.n	80118ba <phhalHw_Pn5180_SetCardMode+0xea>
                    case PHHAL_HW_RF_DATARATE_424:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_PICC_424_BPSK;
 80118a2:	2315      	movs	r3, #21
 80118a4:	75fb      	strb	r3, [r7, #23]
                        /* pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_424;*/
                        break;
 80118a6:	e008      	b.n	80118ba <phhalHw_Pn5180_SetCardMode+0xea>
                    case PHHAL_HW_RF_DATARATE_848:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_PICC_848_BPSK;
 80118a8:	2316      	movs	r3, #22
 80118aa:	75fb      	strb	r3, [r7, #23]
                        /* pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_848;*/
                        break;
 80118ac:	e005      	b.n	80118ba <phhalHw_Pn5180_SetCardMode+0xea>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 80118ae:	23ff      	movs	r3, #255	@ 0xff
 80118b0:	75fb      	strb	r3, [r7, #23]
                        break;
 80118b2:	e002      	b.n	80118ba <phhalHw_Pn5180_SetCardMode+0xea>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80118b4:	f240 2321 	movw	r3, #545	@ 0x221
 80118b8:	e27c      	b.n	8011db4 <phhalHw_Pn5180_SetCardMode+0x5e4>
                }

                switch (wRxDataRate)
 80118ba:	893b      	ldrh	r3, [r7, #8]
 80118bc:	2b03      	cmp	r3, #3
 80118be:	dc0f      	bgt.n	80118e0 <phhalHw_Pn5180_SetCardMode+0x110>
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	db1f      	blt.n	8011904 <phhalHw_Pn5180_SetCardMode+0x134>
 80118c4:	2b03      	cmp	r3, #3
 80118c6:	d81d      	bhi.n	8011904 <phhalHw_Pn5180_SetCardMode+0x134>
 80118c8:	a201      	add	r2, pc, #4	@ (adr r2, 80118d0 <phhalHw_Pn5180_SetCardMode+0x100>)
 80118ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118ce:	bf00      	nop
 80118d0:	080118e7 	.word	0x080118e7
 80118d4:	080118ed 	.word	0x080118ed
 80118d8:	080118f3 	.word	0x080118f3
 80118dc:	080118f9 	.word	0x080118f9
 80118e0:	2bff      	cmp	r3, #255	@ 0xff
 80118e2:	d00c      	beq.n	80118fe <phhalHw_Pn5180_SetCardMode+0x12e>
 80118e4:	e00e      	b.n	8011904 <phhalHw_Pn5180_SetCardMode+0x134>
                {
                    case PHHAL_HW_RF_DATARATE_106:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_PICC_106_MILLER;
 80118e6:	2393      	movs	r3, #147	@ 0x93
 80118e8:	75bb      	strb	r3, [r7, #22]
                        /*pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_106;*/
                        break;
 80118ea:	e098      	b.n	8011a1e <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_212:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_PICC_212_MILLER;
 80118ec:	2394      	movs	r3, #148	@ 0x94
 80118ee:	75bb      	strb	r3, [r7, #22]
                        /*pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_212;*/
                        break;
 80118f0:	e095      	b.n	8011a1e <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_424:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_PICC_424_MILLER;
 80118f2:	2395      	movs	r3, #149	@ 0x95
 80118f4:	75bb      	strb	r3, [r7, #22]
                        /* pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_424;*/
                        break;
 80118f6:	e092      	b.n	8011a1e <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_848:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_PICC_848_MILLER;
 80118f8:	2396      	movs	r3, #150	@ 0x96
 80118fa:	75bb      	strb	r3, [r7, #22]
                        /* pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_848;*/
                        break;
 80118fc:	e08f      	b.n	8011a1e <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 80118fe:	23ff      	movs	r3, #255	@ 0xff
 8011900:	75bb      	strb	r3, [r7, #22]
                        break;
 8011902:	e08c      	b.n	8011a1e <phhalHw_Pn5180_SetCardMode+0x24e>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011904:	f240 2321 	movw	r3, #545	@ 0x221
 8011908:	e254      	b.n	8011db4 <phhalHw_Pn5180_SetCardMode+0x5e4>
                }
            }
            else
            {
                switch (wTxDataRate)
 801190a:	897b      	ldrh	r3, [r7, #10]
 801190c:	2bff      	cmp	r3, #255	@ 0xff
 801190e:	d013      	beq.n	8011938 <phhalHw_Pn5180_SetCardMode+0x168>
 8011910:	2bff      	cmp	r3, #255	@ 0xff
 8011912:	dc14      	bgt.n	801193e <phhalHw_Pn5180_SetCardMode+0x16e>
 8011914:	2b02      	cmp	r3, #2
 8011916:	d00c      	beq.n	8011932 <phhalHw_Pn5180_SetCardMode+0x162>
 8011918:	2b02      	cmp	r3, #2
 801191a:	dc10      	bgt.n	801193e <phhalHw_Pn5180_SetCardMode+0x16e>
 801191c:	2b00      	cmp	r3, #0
 801191e:	d002      	beq.n	8011926 <phhalHw_Pn5180_SetCardMode+0x156>
 8011920:	2b01      	cmp	r3, #1
 8011922:	d003      	beq.n	801192c <phhalHw_Pn5180_SetCardMode+0x15c>
 8011924:	e00b      	b.n	801193e <phhalHw_Pn5180_SetCardMode+0x16e>
                {
                    case PHHAL_HW_RF_DATARATE_106:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AT_106;
 8011926:	2319      	movs	r3, #25
 8011928:	75fb      	strb	r3, [r7, #23]
                        break;
 801192a:	e00b      	b.n	8011944 <phhalHw_Pn5180_SetCardMode+0x174>
                    case PHHAL_HW_RF_DATARATE_212:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AT_212;
 801192c:	231a      	movs	r3, #26
 801192e:	75fb      	strb	r3, [r7, #23]
                        break;
 8011930:	e008      	b.n	8011944 <phhalHw_Pn5180_SetCardMode+0x174>
                    case PHHAL_HW_RF_DATARATE_424:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AT_424;
 8011932:	231b      	movs	r3, #27
 8011934:	75fb      	strb	r3, [r7, #23]
                        break;
 8011936:	e005      	b.n	8011944 <phhalHw_Pn5180_SetCardMode+0x174>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011938:	23ff      	movs	r3, #255	@ 0xff
 801193a:	75fb      	strb	r3, [r7, #23]
                        break;
 801193c:	e002      	b.n	8011944 <phhalHw_Pn5180_SetCardMode+0x174>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 801193e:	f240 2321 	movw	r3, #545	@ 0x221
 8011942:	e237      	b.n	8011db4 <phhalHw_Pn5180_SetCardMode+0x5e4>
                }
                switch (wRxDataRate)
 8011944:	893b      	ldrh	r3, [r7, #8]
 8011946:	2bff      	cmp	r3, #255	@ 0xff
 8011948:	d013      	beq.n	8011972 <phhalHw_Pn5180_SetCardMode+0x1a2>
 801194a:	2bff      	cmp	r3, #255	@ 0xff
 801194c:	dc14      	bgt.n	8011978 <phhalHw_Pn5180_SetCardMode+0x1a8>
 801194e:	2b02      	cmp	r3, #2
 8011950:	d00c      	beq.n	801196c <phhalHw_Pn5180_SetCardMode+0x19c>
 8011952:	2b02      	cmp	r3, #2
 8011954:	dc10      	bgt.n	8011978 <phhalHw_Pn5180_SetCardMode+0x1a8>
 8011956:	2b00      	cmp	r3, #0
 8011958:	d002      	beq.n	8011960 <phhalHw_Pn5180_SetCardMode+0x190>
 801195a:	2b01      	cmp	r3, #1
 801195c:	d003      	beq.n	8011966 <phhalHw_Pn5180_SetCardMode+0x196>
 801195e:	e00b      	b.n	8011978 <phhalHw_Pn5180_SetCardMode+0x1a8>
                {
                    case PHHAL_HW_RF_DATARATE_106:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AT_106;
 8011960:	2399      	movs	r3, #153	@ 0x99
 8011962:	75bb      	strb	r3, [r7, #22]
                        break;
 8011964:	e05b      	b.n	8011a1e <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_212:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AT_212;
 8011966:	239a      	movs	r3, #154	@ 0x9a
 8011968:	75bb      	strb	r3, [r7, #22]
                        break;
 801196a:	e058      	b.n	8011a1e <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_424:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AT_424;
 801196c:	239b      	movs	r3, #155	@ 0x9b
 801196e:	75bb      	strb	r3, [r7, #22]
                        break;
 8011970:	e055      	b.n	8011a1e <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011972:	23ff      	movs	r3, #255	@ 0xff
 8011974:	75bb      	strb	r3, [r7, #22]
                        break;
 8011976:	e052      	b.n	8011a1e <phhalHw_Pn5180_SetCardMode+0x24e>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011978:	f240 2321 	movw	r3, #545	@ 0x221
 801197c:	e21a      	b.n	8011db4 <phhalHw_Pn5180_SetCardMode+0x5e4>
            }

        }
        else
        {
            switch (wTxDataRate)
 801197e:	897b      	ldrh	r3, [r7, #10]
 8011980:	2b03      	cmp	r3, #3
 8011982:	dc0f      	bgt.n	80119a4 <phhalHw_Pn5180_SetCardMode+0x1d4>
 8011984:	2b00      	cmp	r3, #0
 8011986:	db1f      	blt.n	80119c8 <phhalHw_Pn5180_SetCardMode+0x1f8>
 8011988:	2b03      	cmp	r3, #3
 801198a:	d81d      	bhi.n	80119c8 <phhalHw_Pn5180_SetCardMode+0x1f8>
 801198c:	a201      	add	r2, pc, #4	@ (adr r2, 8011994 <phhalHw_Pn5180_SetCardMode+0x1c4>)
 801198e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011992:	bf00      	nop
 8011994:	080119ab 	.word	0x080119ab
 8011998:	080119b1 	.word	0x080119b1
 801199c:	080119b7 	.word	0x080119b7
 80119a0:	080119bd 	.word	0x080119bd
 80119a4:	2bff      	cmp	r3, #255	@ 0xff
 80119a6:	d00c      	beq.n	80119c2 <phhalHw_Pn5180_SetCardMode+0x1f2>
 80119a8:	e00e      	b.n	80119c8 <phhalHw_Pn5180_SetCardMode+0x1f8>
            {
                case PHHAL_HW_RF_DATARATE_106:
                    bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_106_MILLER;
 80119aa:	2300      	movs	r3, #0
 80119ac:	75fb      	strb	r3, [r7, #23]
                    /*pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_106;*/
                    break;
 80119ae:	e00e      	b.n	80119ce <phhalHw_Pn5180_SetCardMode+0x1fe>
                case PHHAL_HW_RF_DATARATE_212:
                    bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_212_MILLER;
 80119b0:	2301      	movs	r3, #1
 80119b2:	75fb      	strb	r3, [r7, #23]
                    /*pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_212;*/
                    break;
 80119b4:	e00b      	b.n	80119ce <phhalHw_Pn5180_SetCardMode+0x1fe>
                case PHHAL_HW_RF_DATARATE_424:
                    bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_424_MILLER;
 80119b6:	2302      	movs	r3, #2
 80119b8:	75fb      	strb	r3, [r7, #23]
                    /* pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_424;*/
                    break;
 80119ba:	e008      	b.n	80119ce <phhalHw_Pn5180_SetCardMode+0x1fe>
                case PHHAL_HW_RF_DATARATE_848:
                    bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_848_MILLER;
 80119bc:	2303      	movs	r3, #3
 80119be:	75fb      	strb	r3, [r7, #23]
                    /* pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_848;*/
                    break;
 80119c0:	e005      	b.n	80119ce <phhalHw_Pn5180_SetCardMode+0x1fe>
                case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                    bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 80119c2:	23ff      	movs	r3, #255	@ 0xff
 80119c4:	75fb      	strb	r3, [r7, #23]
                    break;
 80119c6:	e002      	b.n	80119ce <phhalHw_Pn5180_SetCardMode+0x1fe>
                default:
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80119c8:	f240 2321 	movw	r3, #545	@ 0x221
 80119cc:	e1f2      	b.n	8011db4 <phhalHw_Pn5180_SetCardMode+0x5e4>
            }
            switch (wRxDataRate)
 80119ce:	893b      	ldrh	r3, [r7, #8]
 80119d0:	2b03      	cmp	r3, #3
 80119d2:	dc0f      	bgt.n	80119f4 <phhalHw_Pn5180_SetCardMode+0x224>
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	db1f      	blt.n	8011a18 <phhalHw_Pn5180_SetCardMode+0x248>
 80119d8:	2b03      	cmp	r3, #3
 80119da:	d81d      	bhi.n	8011a18 <phhalHw_Pn5180_SetCardMode+0x248>
 80119dc:	a201      	add	r2, pc, #4	@ (adr r2, 80119e4 <phhalHw_Pn5180_SetCardMode+0x214>)
 80119de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119e2:	bf00      	nop
 80119e4:	080119fb 	.word	0x080119fb
 80119e8:	08011a01 	.word	0x08011a01
 80119ec:	08011a07 	.word	0x08011a07
 80119f0:	08011a0d 	.word	0x08011a0d
 80119f4:	2bff      	cmp	r3, #255	@ 0xff
 80119f6:	d00c      	beq.n	8011a12 <phhalHw_Pn5180_SetCardMode+0x242>
 80119f8:	e00e      	b.n	8011a18 <phhalHw_Pn5180_SetCardMode+0x248>
            {
                case PHHAL_HW_RF_DATARATE_106:
                    bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_106_MANCH_SUBC;
 80119fa:	2380      	movs	r3, #128	@ 0x80
 80119fc:	75bb      	strb	r3, [r7, #22]
                    /*pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_106;*/
                    break;
 80119fe:	e00e      	b.n	8011a1e <phhalHw_Pn5180_SetCardMode+0x24e>
                case PHHAL_HW_RF_DATARATE_212:
                    bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_212_BPSK;
 8011a00:	2381      	movs	r3, #129	@ 0x81
 8011a02:	75bb      	strb	r3, [r7, #22]
                    /*pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_212;*/
                    break;
 8011a04:	e00b      	b.n	8011a1e <phhalHw_Pn5180_SetCardMode+0x24e>
                case PHHAL_HW_RF_DATARATE_424:
                    bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_424_BPSK;
 8011a06:	2382      	movs	r3, #130	@ 0x82
 8011a08:	75bb      	strb	r3, [r7, #22]
                    /* pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_424;*/
                    break;
 8011a0a:	e008      	b.n	8011a1e <phhalHw_Pn5180_SetCardMode+0x24e>
                case PHHAL_HW_RF_DATARATE_848:
                    bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_848_BPSK;
 8011a0c:	2383      	movs	r3, #131	@ 0x83
 8011a0e:	75bb      	strb	r3, [r7, #22]
                    /* pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_848;*/
                    break;
 8011a10:	e005      	b.n	8011a1e <phhalHw_Pn5180_SetCardMode+0x24e>
                case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                    bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011a12:	23ff      	movs	r3, #255	@ 0xff
 8011a14:	75bb      	strb	r3, [r7, #22]
                    break;
 8011a16:	e002      	b.n	8011a1e <phhalHw_Pn5180_SetCardMode+0x24e>
                default:
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011a18:	f240 2321 	movw	r3, #545	@ 0x221
 8011a1c:	e1ca      	b.n	8011db4 <phhalHw_Pn5180_SetCardMode+0x5e4>
            }
        }
        break;
 8011a1e:	e1a7      	b.n	8011d70 <phhalHw_Pn5180_SetCardMode+0x5a0>

    case PHHAL_HW_CARDTYPE_ISO14443B:

        switch (wTxDataRate)
 8011a20:	897b      	ldrh	r3, [r7, #10]
 8011a22:	2b03      	cmp	r3, #3
 8011a24:	dc0e      	bgt.n	8011a44 <phhalHw_Pn5180_SetCardMode+0x274>
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	db1e      	blt.n	8011a68 <phhalHw_Pn5180_SetCardMode+0x298>
 8011a2a:	2b03      	cmp	r3, #3
 8011a2c:	d81c      	bhi.n	8011a68 <phhalHw_Pn5180_SetCardMode+0x298>
 8011a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8011a34 <phhalHw_Pn5180_SetCardMode+0x264>)
 8011a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a34:	08011a4b 	.word	0x08011a4b
 8011a38:	08011a51 	.word	0x08011a51
 8011a3c:	08011a57 	.word	0x08011a57
 8011a40:	08011a5d 	.word	0x08011a5d
 8011a44:	2bff      	cmp	r3, #255	@ 0xff
 8011a46:	d00c      	beq.n	8011a62 <phhalHw_Pn5180_SetCardMode+0x292>
 8011a48:	e00e      	b.n	8011a68 <phhalHw_Pn5180_SetCardMode+0x298>
        {
            case PHHAL_HW_RF_DATARATE_106:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443B_106_NRZ;
 8011a4a:	2304      	movs	r3, #4
 8011a4c:	75fb      	strb	r3, [r7, #23]
                /* pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_106;*/
                break;
 8011a4e:	e00e      	b.n	8011a6e <phhalHw_Pn5180_SetCardMode+0x29e>
            case PHHAL_HW_RF_DATARATE_212:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443B_212_NRZ;
 8011a50:	2305      	movs	r3, #5
 8011a52:	75fb      	strb	r3, [r7, #23]
                /* pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_212;*/
                break;
 8011a54:	e00b      	b.n	8011a6e <phhalHw_Pn5180_SetCardMode+0x29e>
            case PHHAL_HW_RF_DATARATE_424:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443B_424_NRZ;
 8011a56:	2306      	movs	r3, #6
 8011a58:	75fb      	strb	r3, [r7, #23]
                /*pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_424;*/
                break;
 8011a5a:	e008      	b.n	8011a6e <phhalHw_Pn5180_SetCardMode+0x29e>
            case PHHAL_HW_RF_DATARATE_848:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443B_848_NRZ;
 8011a5c:	2307      	movs	r3, #7
 8011a5e:	75fb      	strb	r3, [r7, #23]
                /*pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_848;*/
                break;
 8011a60:	e005      	b.n	8011a6e <phhalHw_Pn5180_SetCardMode+0x29e>
            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011a62:	23ff      	movs	r3, #255	@ 0xff
 8011a64:	75fb      	strb	r3, [r7, #23]
                break;
 8011a66:	e002      	b.n	8011a6e <phhalHw_Pn5180_SetCardMode+0x29e>
            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011a68:	f240 2321 	movw	r3, #545	@ 0x221
 8011a6c:	e1a2      	b.n	8011db4 <phhalHw_Pn5180_SetCardMode+0x5e4>
        }

        switch (wRxDataRate)
 8011a6e:	893b      	ldrh	r3, [r7, #8]
 8011a70:	2b03      	cmp	r3, #3
 8011a72:	dc0f      	bgt.n	8011a94 <phhalHw_Pn5180_SetCardMode+0x2c4>
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	db1f      	blt.n	8011ab8 <phhalHw_Pn5180_SetCardMode+0x2e8>
 8011a78:	2b03      	cmp	r3, #3
 8011a7a:	d81d      	bhi.n	8011ab8 <phhalHw_Pn5180_SetCardMode+0x2e8>
 8011a7c:	a201      	add	r2, pc, #4	@ (adr r2, 8011a84 <phhalHw_Pn5180_SetCardMode+0x2b4>)
 8011a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a82:	bf00      	nop
 8011a84:	08011a9b 	.word	0x08011a9b
 8011a88:	08011aa1 	.word	0x08011aa1
 8011a8c:	08011aa7 	.word	0x08011aa7
 8011a90:	08011aad 	.word	0x08011aad
 8011a94:	2bff      	cmp	r3, #255	@ 0xff
 8011a96:	d00c      	beq.n	8011ab2 <phhalHw_Pn5180_SetCardMode+0x2e2>
 8011a98:	e00e      	b.n	8011ab8 <phhalHw_Pn5180_SetCardMode+0x2e8>
        {
            case PHHAL_HW_RF_DATARATE_106:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443B_106_BPSK;
 8011a9a:	2384      	movs	r3, #132	@ 0x84
 8011a9c:	75bb      	strb	r3, [r7, #22]
                /* pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_106;*/
                break;
 8011a9e:	e00e      	b.n	8011abe <phhalHw_Pn5180_SetCardMode+0x2ee>
            case PHHAL_HW_RF_DATARATE_212:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443B_212_BPSK;
 8011aa0:	2385      	movs	r3, #133	@ 0x85
 8011aa2:	75bb      	strb	r3, [r7, #22]
                /*pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_212;*/
                break;
 8011aa4:	e00b      	b.n	8011abe <phhalHw_Pn5180_SetCardMode+0x2ee>
            case PHHAL_HW_RF_DATARATE_424:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443B_424_BPSK;
 8011aa6:	2386      	movs	r3, #134	@ 0x86
 8011aa8:	75bb      	strb	r3, [r7, #22]
                /* pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_424;*/
                break;
 8011aaa:	e008      	b.n	8011abe <phhalHw_Pn5180_SetCardMode+0x2ee>
            case PHHAL_HW_RF_DATARATE_848:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443B_848_BPSK;
 8011aac:	2387      	movs	r3, #135	@ 0x87
 8011aae:	75bb      	strb	r3, [r7, #22]
                /*  pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_848;*/
                break;
 8011ab0:	e005      	b.n	8011abe <phhalHw_Pn5180_SetCardMode+0x2ee>
            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011ab2:	23ff      	movs	r3, #255	@ 0xff
 8011ab4:	75bb      	strb	r3, [r7, #22]
                break;
 8011ab6:	e002      	b.n	8011abe <phhalHw_Pn5180_SetCardMode+0x2ee>
            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011ab8:	f240 2321 	movw	r3, #545	@ 0x221
 8011abc:	e17a      	b.n	8011db4 <phhalHw_Pn5180_SetCardMode+0x5e4>
        }
        break;
 8011abe:	e157      	b.n	8011d70 <phhalHw_Pn5180_SetCardMode+0x5a0>

    case PHHAL_HW_CARDTYPE_FELICA_212:
    case PHHAL_HW_CARDTYPE_FELICA_424:

        if (pDataParams->wTargetMode != PH_OFF)
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d05c      	beq.n	8011b82 <phhalHw_Pn5180_SetCardMode+0x3b2>
        {
            if(pDataParams->bActiveMode == PH_OFF)
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d12b      	bne.n	8011b2a <phhalHw_Pn5180_SetCardMode+0x35a>
            {
                switch (wTxDataRate)
 8011ad2:	897b      	ldrh	r3, [r7, #10]
 8011ad4:	2bff      	cmp	r3, #255	@ 0xff
 8011ad6:	d00c      	beq.n	8011af2 <phhalHw_Pn5180_SetCardMode+0x322>
 8011ad8:	2bff      	cmp	r3, #255	@ 0xff
 8011ada:	dc0d      	bgt.n	8011af8 <phhalHw_Pn5180_SetCardMode+0x328>
 8011adc:	2b01      	cmp	r3, #1
 8011ade:	d002      	beq.n	8011ae6 <phhalHw_Pn5180_SetCardMode+0x316>
 8011ae0:	2b02      	cmp	r3, #2
 8011ae2:	d003      	beq.n	8011aec <phhalHw_Pn5180_SetCardMode+0x31c>
 8011ae4:	e008      	b.n	8011af8 <phhalHw_Pn5180_SetCardMode+0x328>
                {
                    case PHHAL_HW_RF_DATARATE_212:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_PT_212;
 8011ae6:	2317      	movs	r3, #23
 8011ae8:	75fb      	strb	r3, [r7, #23]
                        break;
 8011aea:	e008      	b.n	8011afe <phhalHw_Pn5180_SetCardMode+0x32e>

                    case PHHAL_HW_RF_DATARATE_424:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_PT_424;
 8011aec:	2318      	movs	r3, #24
 8011aee:	75fb      	strb	r3, [r7, #23]
                        break;
 8011af0:	e005      	b.n	8011afe <phhalHw_Pn5180_SetCardMode+0x32e>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011af2:	23ff      	movs	r3, #255	@ 0xff
 8011af4:	75fb      	strb	r3, [r7, #23]
                        break;
 8011af6:	e002      	b.n	8011afe <phhalHw_Pn5180_SetCardMode+0x32e>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011af8:	f240 2321 	movw	r3, #545	@ 0x221
 8011afc:	e15a      	b.n	8011db4 <phhalHw_Pn5180_SetCardMode+0x5e4>
                }

                switch (wRxDataRate)
 8011afe:	893b      	ldrh	r3, [r7, #8]
 8011b00:	2bff      	cmp	r3, #255	@ 0xff
 8011b02:	d00c      	beq.n	8011b1e <phhalHw_Pn5180_SetCardMode+0x34e>
 8011b04:	2bff      	cmp	r3, #255	@ 0xff
 8011b06:	dc0d      	bgt.n	8011b24 <phhalHw_Pn5180_SetCardMode+0x354>
 8011b08:	2b01      	cmp	r3, #1
 8011b0a:	d002      	beq.n	8011b12 <phhalHw_Pn5180_SetCardMode+0x342>
 8011b0c:	2b02      	cmp	r3, #2
 8011b0e:	d003      	beq.n	8011b18 <phhalHw_Pn5180_SetCardMode+0x348>
 8011b10:	e008      	b.n	8011b24 <phhalHw_Pn5180_SetCardMode+0x354>
                {
                    case PHHAL_HW_RF_DATARATE_212:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_PT_212;
 8011b12:	2397      	movs	r3, #151	@ 0x97
 8011b14:	75bb      	strb	r3, [r7, #22]
                        break;
 8011b16:	e060      	b.n	8011bda <phhalHw_Pn5180_SetCardMode+0x40a>

                    case PHHAL_HW_RF_DATARATE_424:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_PT_424;
 8011b18:	2398      	movs	r3, #152	@ 0x98
 8011b1a:	75bb      	strb	r3, [r7, #22]
                        break;
 8011b1c:	e05d      	b.n	8011bda <phhalHw_Pn5180_SetCardMode+0x40a>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011b1e:	23ff      	movs	r3, #255	@ 0xff
 8011b20:	75bb      	strb	r3, [r7, #22]
                        break;
 8011b22:	e05a      	b.n	8011bda <phhalHw_Pn5180_SetCardMode+0x40a>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011b24:	f240 2321 	movw	r3, #545	@ 0x221
 8011b28:	e144      	b.n	8011db4 <phhalHw_Pn5180_SetCardMode+0x5e4>
                }
            }
            else
            {
                switch (wTxDataRate)
 8011b2a:	897b      	ldrh	r3, [r7, #10]
 8011b2c:	2bff      	cmp	r3, #255	@ 0xff
 8011b2e:	d00c      	beq.n	8011b4a <phhalHw_Pn5180_SetCardMode+0x37a>
 8011b30:	2bff      	cmp	r3, #255	@ 0xff
 8011b32:	dc0d      	bgt.n	8011b50 <phhalHw_Pn5180_SetCardMode+0x380>
 8011b34:	2b01      	cmp	r3, #1
 8011b36:	d002      	beq.n	8011b3e <phhalHw_Pn5180_SetCardMode+0x36e>
 8011b38:	2b02      	cmp	r3, #2
 8011b3a:	d003      	beq.n	8011b44 <phhalHw_Pn5180_SetCardMode+0x374>
 8011b3c:	e008      	b.n	8011b50 <phhalHw_Pn5180_SetCardMode+0x380>
                {
                    case PHHAL_HW_RF_DATARATE_212:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AT_212;
 8011b3e:	231a      	movs	r3, #26
 8011b40:	75fb      	strb	r3, [r7, #23]
                        break;
 8011b42:	e008      	b.n	8011b56 <phhalHw_Pn5180_SetCardMode+0x386>
                    case PHHAL_HW_RF_DATARATE_424:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AT_424;
 8011b44:	231b      	movs	r3, #27
 8011b46:	75fb      	strb	r3, [r7, #23]
                        break;
 8011b48:	e005      	b.n	8011b56 <phhalHw_Pn5180_SetCardMode+0x386>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011b4a:	23ff      	movs	r3, #255	@ 0xff
 8011b4c:	75fb      	strb	r3, [r7, #23]
                        break;
 8011b4e:	e002      	b.n	8011b56 <phhalHw_Pn5180_SetCardMode+0x386>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011b50:	f240 2321 	movw	r3, #545	@ 0x221
 8011b54:	e12e      	b.n	8011db4 <phhalHw_Pn5180_SetCardMode+0x5e4>
                }

                switch (wRxDataRate)
 8011b56:	893b      	ldrh	r3, [r7, #8]
 8011b58:	2bff      	cmp	r3, #255	@ 0xff
 8011b5a:	d00c      	beq.n	8011b76 <phhalHw_Pn5180_SetCardMode+0x3a6>
 8011b5c:	2bff      	cmp	r3, #255	@ 0xff
 8011b5e:	dc0d      	bgt.n	8011b7c <phhalHw_Pn5180_SetCardMode+0x3ac>
 8011b60:	2b01      	cmp	r3, #1
 8011b62:	d002      	beq.n	8011b6a <phhalHw_Pn5180_SetCardMode+0x39a>
 8011b64:	2b02      	cmp	r3, #2
 8011b66:	d003      	beq.n	8011b70 <phhalHw_Pn5180_SetCardMode+0x3a0>
 8011b68:	e008      	b.n	8011b7c <phhalHw_Pn5180_SetCardMode+0x3ac>
                {
                    case PHHAL_HW_RF_DATARATE_212:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AT_212;
 8011b6a:	239a      	movs	r3, #154	@ 0x9a
 8011b6c:	75bb      	strb	r3, [r7, #22]
                        break;
 8011b6e:	e034      	b.n	8011bda <phhalHw_Pn5180_SetCardMode+0x40a>
                    case PHHAL_HW_RF_DATARATE_424:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AT_424;
 8011b70:	239b      	movs	r3, #155	@ 0x9b
 8011b72:	75bb      	strb	r3, [r7, #22]
                        break;
 8011b74:	e031      	b.n	8011bda <phhalHw_Pn5180_SetCardMode+0x40a>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011b76:	23ff      	movs	r3, #255	@ 0xff
 8011b78:	75bb      	strb	r3, [r7, #22]
                        break;
 8011b7a:	e02e      	b.n	8011bda <phhalHw_Pn5180_SetCardMode+0x40a>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011b7c:	f240 2321 	movw	r3, #545	@ 0x221
 8011b80:	e118      	b.n	8011db4 <phhalHw_Pn5180_SetCardMode+0x5e4>
                }
            }
        }
        else
        {
            switch (wTxDataRate)
 8011b82:	897b      	ldrh	r3, [r7, #10]
 8011b84:	2bff      	cmp	r3, #255	@ 0xff
 8011b86:	d00c      	beq.n	8011ba2 <phhalHw_Pn5180_SetCardMode+0x3d2>
 8011b88:	2bff      	cmp	r3, #255	@ 0xff
 8011b8a:	dc0d      	bgt.n	8011ba8 <phhalHw_Pn5180_SetCardMode+0x3d8>
 8011b8c:	2b01      	cmp	r3, #1
 8011b8e:	d002      	beq.n	8011b96 <phhalHw_Pn5180_SetCardMode+0x3c6>
 8011b90:	2b02      	cmp	r3, #2
 8011b92:	d003      	beq.n	8011b9c <phhalHw_Pn5180_SetCardMode+0x3cc>
 8011b94:	e008      	b.n	8011ba8 <phhalHw_Pn5180_SetCardMode+0x3d8>
            {
                case PHHAL_HW_RF_DATARATE_212:
                    bTxConfig = PHHAL_HW_PN5180_RF_TX_FELICA_212;
 8011b96:	2308      	movs	r3, #8
 8011b98:	75fb      	strb	r3, [r7, #23]
                    break;
 8011b9a:	e008      	b.n	8011bae <phhalHw_Pn5180_SetCardMode+0x3de>

                case PHHAL_HW_RF_DATARATE_424:
                    bTxConfig = PHHAL_HW_PN5180_RF_TX_FELICA_424;
 8011b9c:	2309      	movs	r3, #9
 8011b9e:	75fb      	strb	r3, [r7, #23]
                    break;
 8011ba0:	e005      	b.n	8011bae <phhalHw_Pn5180_SetCardMode+0x3de>

                case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                    bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011ba2:	23ff      	movs	r3, #255	@ 0xff
 8011ba4:	75fb      	strb	r3, [r7, #23]
                    break;
 8011ba6:	e002      	b.n	8011bae <phhalHw_Pn5180_SetCardMode+0x3de>

                default:
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011ba8:	f240 2321 	movw	r3, #545	@ 0x221
 8011bac:	e102      	b.n	8011db4 <phhalHw_Pn5180_SetCardMode+0x5e4>
            }

            switch (wRxDataRate)
 8011bae:	893b      	ldrh	r3, [r7, #8]
 8011bb0:	2bff      	cmp	r3, #255	@ 0xff
 8011bb2:	d00c      	beq.n	8011bce <phhalHw_Pn5180_SetCardMode+0x3fe>
 8011bb4:	2bff      	cmp	r3, #255	@ 0xff
 8011bb6:	dc0d      	bgt.n	8011bd4 <phhalHw_Pn5180_SetCardMode+0x404>
 8011bb8:	2b01      	cmp	r3, #1
 8011bba:	d002      	beq.n	8011bc2 <phhalHw_Pn5180_SetCardMode+0x3f2>
 8011bbc:	2b02      	cmp	r3, #2
 8011bbe:	d003      	beq.n	8011bc8 <phhalHw_Pn5180_SetCardMode+0x3f8>
 8011bc0:	e008      	b.n	8011bd4 <phhalHw_Pn5180_SetCardMode+0x404>
            {
                case PHHAL_HW_RF_DATARATE_212:
                    bRxConfig = PHHAL_HW_PN5180_RF_RX_FELICA_212;
 8011bc2:	2388      	movs	r3, #136	@ 0x88
 8011bc4:	75bb      	strb	r3, [r7, #22]
                    break;
 8011bc6:	e008      	b.n	8011bda <phhalHw_Pn5180_SetCardMode+0x40a>

                case PHHAL_HW_RF_DATARATE_424:
                    bRxConfig = PHHAL_HW_PN5180_RF_RX_FELICA_424;
 8011bc8:	2389      	movs	r3, #137	@ 0x89
 8011bca:	75bb      	strb	r3, [r7, #22]
                    break;
 8011bcc:	e005      	b.n	8011bda <phhalHw_Pn5180_SetCardMode+0x40a>

                case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                    bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011bce:	23ff      	movs	r3, #255	@ 0xff
 8011bd0:	75bb      	strb	r3, [r7, #22]
                    break;
 8011bd2:	e002      	b.n	8011bda <phhalHw_Pn5180_SetCardMode+0x40a>

                default:
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011bd4:	f240 2321 	movw	r3, #545	@ 0x221
 8011bd8:	e0ec      	b.n	8011db4 <phhalHw_Pn5180_SetCardMode+0x5e4>
            }

        }
        break;
 8011bda:	e0c9      	b.n	8011d70 <phhalHw_Pn5180_SetCardMode+0x5a0>

    case PHHAL_HW_CARDTYPE_ISO15693:

        switch (wTxDataRate)
 8011bdc:	897b      	ldrh	r3, [r7, #10]
 8011bde:	2b0b      	cmp	r3, #11
 8011be0:	d002      	beq.n	8011be8 <phhalHw_Pn5180_SetCardMode+0x418>
 8011be2:	2bff      	cmp	r3, #255	@ 0xff
 8011be4:	d003      	beq.n	8011bee <phhalHw_Pn5180_SetCardMode+0x41e>
 8011be6:	e005      	b.n	8011bf4 <phhalHw_Pn5180_SetCardMode+0x424>
        {
            case PHHAL_HW_RF_TX_DATARATE_1_OUT_OF_4:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO15693_26_1OF4_ASK10;
 8011be8:	230e      	movs	r3, #14
 8011bea:	75fb      	strb	r3, [r7, #23]
                break;
 8011bec:	e005      	b.n	8011bfa <phhalHw_Pn5180_SetCardMode+0x42a>

            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011bee:	23ff      	movs	r3, #255	@ 0xff
 8011bf0:	75fb      	strb	r3, [r7, #23]
                break;
 8011bf2:	e002      	b.n	8011bfa <phhalHw_Pn5180_SetCardMode+0x42a>

            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011bf4:	f240 2321 	movw	r3, #545	@ 0x221
 8011bf8:	e0dc      	b.n	8011db4 <phhalHw_Pn5180_SetCardMode+0x5e4>
        }

        switch (wRxDataRate)
 8011bfa:	893b      	ldrh	r3, [r7, #8]
 8011bfc:	2b0f      	cmp	r3, #15
 8011bfe:	dc25      	bgt.n	8011c4c <phhalHw_Pn5180_SetCardMode+0x47c>
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	dd32      	ble.n	8011c6a <phhalHw_Pn5180_SetCardMode+0x49a>
 8011c04:	3b01      	subs	r3, #1
 8011c06:	2b0e      	cmp	r3, #14
 8011c08:	d82f      	bhi.n	8011c6a <phhalHw_Pn5180_SetCardMode+0x49a>
 8011c0a:	a201      	add	r2, pc, #4	@ (adr r2, 8011c10 <phhalHw_Pn5180_SetCardMode+0x440>)
 8011c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c10:	08011c5f 	.word	0x08011c5f
 8011c14:	08011c6b 	.word	0x08011c6b
 8011c18:	08011c6b 	.word	0x08011c6b
 8011c1c:	08011c6b 	.word	0x08011c6b
 8011c20:	08011c6b 	.word	0x08011c6b
 8011c24:	08011c6b 	.word	0x08011c6b
 8011c28:	08011c6b 	.word	0x08011c6b
 8011c2c:	08011c6b 	.word	0x08011c6b
 8011c30:	08011c6b 	.word	0x08011c6b
 8011c34:	08011c6b 	.word	0x08011c6b
 8011c38:	08011c6b 	.word	0x08011c6b
 8011c3c:	08011c5f 	.word	0x08011c5f
 8011c40:	08011c53 	.word	0x08011c53
 8011c44:	08011c5f 	.word	0x08011c5f
 8011c48:	08011c59 	.word	0x08011c59
 8011c4c:	2bff      	cmp	r3, #255	@ 0xff
 8011c4e:	d009      	beq.n	8011c64 <phhalHw_Pn5180_SetCardMode+0x494>
 8011c50:	e00b      	b.n	8011c6a <phhalHw_Pn5180_SetCardMode+0x49a>
        {
            case PHHAL_HW_RF_RX_DATARATE_HIGH:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO15693_26_1OF4_SC;
 8011c52:	238d      	movs	r3, #141	@ 0x8d
 8011c54:	75bb      	strb	r3, [r7, #22]
                break;
 8011c56:	e00b      	b.n	8011c70 <phhalHw_Pn5180_SetCardMode+0x4a0>

            case PHHAL_HW_RF_RX_DATARATE_FAST_HIGH:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO15693_53_1OF4_SC;
 8011c58:	238e      	movs	r3, #142	@ 0x8e
 8011c5a:	75bb      	strb	r3, [r7, #22]
                break;
 8011c5c:	e008      	b.n	8011c70 <phhalHw_Pn5180_SetCardMode+0x4a0>

            case PHHAL_HW_RF_RX_DATARATE_LOW:
            case PHHAL_HW_RF_RX_DATARATE_FAST_LOW:
            case PHHAL_HW_RF_DATARATE_212:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 8011c5e:	f240 2323 	movw	r3, #547	@ 0x223
 8011c62:	e0a7      	b.n	8011db4 <phhalHw_Pn5180_SetCardMode+0x5e4>

            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011c64:	23ff      	movs	r3, #255	@ 0xff
 8011c66:	75bb      	strb	r3, [r7, #22]
                break;
 8011c68:	e002      	b.n	8011c70 <phhalHw_Pn5180_SetCardMode+0x4a0>

            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011c6a:	f240 2321 	movw	r3, #545	@ 0x221
 8011c6e:	e0a1      	b.n	8011db4 <phhalHw_Pn5180_SetCardMode+0x5e4>
        }
        break;
 8011c70:	e07e      	b.n	8011d70 <phhalHw_Pn5180_SetCardMode+0x5a0>

    case PHHAL_HW_CARDTYPE_I18000P3M3:

        switch (wTxDataRate)
 8011c72:	897b      	ldrh	r3, [r7, #10]
 8011c74:	2b11      	cmp	r3, #17
 8011c76:	d002      	beq.n	8011c7e <phhalHw_Pn5180_SetCardMode+0x4ae>
 8011c78:	2bff      	cmp	r3, #255	@ 0xff
 8011c7a:	d00c      	beq.n	8011c96 <phhalHw_Pn5180_SetCardMode+0x4c6>
 8011c7c:	e00e      	b.n	8011c9c <phhalHw_Pn5180_SetCardMode+0x4cc>
        {
            case PHHAL_HW_RF_TX_DATARATE_I18000P3M3:
                /* Subcarrier check */
                if ((wSubcarrier != PHHAL_HW_SUBCARRIER_DUAL) &&
 8011c7e:	88fb      	ldrh	r3, [r7, #6]
 8011c80:	2b01      	cmp	r3, #1
 8011c82:	d005      	beq.n	8011c90 <phhalHw_Pn5180_SetCardMode+0x4c0>
 8011c84:	88fb      	ldrh	r3, [r7, #6]
 8011c86:	2b02      	cmp	r3, #2
 8011c88:	d002      	beq.n	8011c90 <phhalHw_Pn5180_SetCardMode+0x4c0>
                    (wSubcarrier != PHHAL_HW_SUBCARRIER_QUAD))
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011c8a:	f240 2321 	movw	r3, #545	@ 0x221
 8011c8e:	e091      	b.n	8011db4 <phhalHw_Pn5180_SetCardMode+0x5e4>
                }

                bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO180003M3_TARI_9_44_ASK;
 8011c90:	2310      	movs	r3, #16
 8011c92:	75fb      	strb	r3, [r7, #23]
                break;
 8011c94:	e005      	b.n	8011ca2 <phhalHw_Pn5180_SetCardMode+0x4d2>

            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011c96:	23ff      	movs	r3, #255	@ 0xff
 8011c98:	75fb      	strb	r3, [r7, #23]
                break;
 8011c9a:	e002      	b.n	8011ca2 <phhalHw_Pn5180_SetCardMode+0x4d2>

            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011c9c:	f240 2321 	movw	r3, #545	@ 0x221
 8011ca0:	e088      	b.n	8011db4 <phhalHw_Pn5180_SetCardMode+0x5e4>
        }

        switch (wRxDataRate)
 8011ca2:	893b      	ldrh	r3, [r7, #8]
 8011ca4:	2b16      	cmp	r3, #22
 8011ca6:	dc0f      	bgt.n	8011cc8 <phhalHw_Pn5180_SetCardMode+0x4f8>
 8011ca8:	2b13      	cmp	r3, #19
 8011caa:	db1f      	blt.n	8011cec <phhalHw_Pn5180_SetCardMode+0x51c>
 8011cac:	3b13      	subs	r3, #19
 8011cae:	2b03      	cmp	r3, #3
 8011cb0:	d81c      	bhi.n	8011cec <phhalHw_Pn5180_SetCardMode+0x51c>
 8011cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8011cb8 <phhalHw_Pn5180_SetCardMode+0x4e8>)
 8011cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cb8:	08011ccf 	.word	0x08011ccf
 8011cbc:	08011cdb 	.word	0x08011cdb
 8011cc0:	08011cd5 	.word	0x08011cd5
 8011cc4:	08011ce1 	.word	0x08011ce1
 8011cc8:	2bff      	cmp	r3, #255	@ 0xff
 8011cca:	d00c      	beq.n	8011ce6 <phhalHw_Pn5180_SetCardMode+0x516>
 8011ccc:	e00e      	b.n	8011cec <phhalHw_Pn5180_SetCardMode+0x51c>
        {
            case PHHAL_HW_RX_I18000P3M3_FL_423_MAN2:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO180003M3_MANCH424_2_PERIOD;
 8011cce:	2390      	movs	r3, #144	@ 0x90
 8011cd0:	75bb      	strb	r3, [r7, #22]
                break;
 8011cd2:	e00e      	b.n	8011cf2 <phhalHw_Pn5180_SetCardMode+0x522>
            case PHHAL_HW_RX_I18000P3M3_FL_423_MAN4:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO180003M3_MANCH424_4_PERIOD;
 8011cd4:	238f      	movs	r3, #143	@ 0x8f
 8011cd6:	75bb      	strb	r3, [r7, #22]
                break;
 8011cd8:	e00b      	b.n	8011cf2 <phhalHw_Pn5180_SetCardMode+0x522>
            case PHHAL_HW_RX_I18000P3M3_FL_847_MAN2:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO180003M3_MANCH848_2_PERIOD;
 8011cda:	2392      	movs	r3, #146	@ 0x92
 8011cdc:	75bb      	strb	r3, [r7, #22]
                break;
 8011cde:	e008      	b.n	8011cf2 <phhalHw_Pn5180_SetCardMode+0x522>
            case PHHAL_HW_RX_I18000P3M3_FL_847_MAN4:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO180003M3_MANCH848_4_PERIOD;
 8011ce0:	2391      	movs	r3, #145	@ 0x91
 8011ce2:	75bb      	strb	r3, [r7, #22]
                break;
 8011ce4:	e005      	b.n	8011cf2 <phhalHw_Pn5180_SetCardMode+0x522>
            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011ce6:	23ff      	movs	r3, #255	@ 0xff
 8011ce8:	75bb      	strb	r3, [r7, #22]
                break;
 8011cea:	e002      	b.n	8011cf2 <phhalHw_Pn5180_SetCardMode+0x522>
            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011cec:	f240 2321 	movw	r3, #545	@ 0x221
 8011cf0:	e060      	b.n	8011db4 <phhalHw_Pn5180_SetCardMode+0x5e4>
        }
        break;
 8011cf2:	e03d      	b.n	8011d70 <phhalHw_Pn5180_SetCardMode+0x5a0>

    case PHHAL_HW_CARDTYPE_I18092M_ACTIVE_106:
    case PHHAL_HW_CARDTYPE_I18092M_ACTIVE_212:
    case PHHAL_HW_CARDTYPE_I18092M_ACTIVE_424:

        switch (wTxDataRate)
 8011cf4:	897b      	ldrh	r3, [r7, #10]
 8011cf6:	2bff      	cmp	r3, #255	@ 0xff
 8011cf8:	d013      	beq.n	8011d22 <phhalHw_Pn5180_SetCardMode+0x552>
 8011cfa:	2bff      	cmp	r3, #255	@ 0xff
 8011cfc:	dc14      	bgt.n	8011d28 <phhalHw_Pn5180_SetCardMode+0x558>
 8011cfe:	2b02      	cmp	r3, #2
 8011d00:	d00c      	beq.n	8011d1c <phhalHw_Pn5180_SetCardMode+0x54c>
 8011d02:	2b02      	cmp	r3, #2
 8011d04:	dc10      	bgt.n	8011d28 <phhalHw_Pn5180_SetCardMode+0x558>
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d002      	beq.n	8011d10 <phhalHw_Pn5180_SetCardMode+0x540>
 8011d0a:	2b01      	cmp	r3, #1
 8011d0c:	d003      	beq.n	8011d16 <phhalHw_Pn5180_SetCardMode+0x546>
 8011d0e:	e00b      	b.n	8011d28 <phhalHw_Pn5180_SetCardMode+0x558>
        {
            case PHHAL_HW_RF_DATARATE_106:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AI_106_106;
 8011d10:	230a      	movs	r3, #10
 8011d12:	75fb      	strb	r3, [r7, #23]
                break;
 8011d14:	e00b      	b.n	8011d2e <phhalHw_Pn5180_SetCardMode+0x55e>

            case PHHAL_HW_RF_DATARATE_212:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AI_212_212;
 8011d16:	230b      	movs	r3, #11
 8011d18:	75fb      	strb	r3, [r7, #23]
            break;
 8011d1a:	e008      	b.n	8011d2e <phhalHw_Pn5180_SetCardMode+0x55e>

            case PHHAL_HW_RF_DATARATE_424:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AI_424_424;
 8011d1c:	230c      	movs	r3, #12
 8011d1e:	75fb      	strb	r3, [r7, #23]
                break;
 8011d20:	e005      	b.n	8011d2e <phhalHw_Pn5180_SetCardMode+0x55e>

            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011d22:	23ff      	movs	r3, #255	@ 0xff
 8011d24:	75fb      	strb	r3, [r7, #23]
                break;
 8011d26:	e002      	b.n	8011d2e <phhalHw_Pn5180_SetCardMode+0x55e>

            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011d28:	f240 2321 	movw	r3, #545	@ 0x221
 8011d2c:	e042      	b.n	8011db4 <phhalHw_Pn5180_SetCardMode+0x5e4>
        }

        switch (wRxDataRate)
 8011d2e:	893b      	ldrh	r3, [r7, #8]
 8011d30:	2bff      	cmp	r3, #255	@ 0xff
 8011d32:	d013      	beq.n	8011d5c <phhalHw_Pn5180_SetCardMode+0x58c>
 8011d34:	2bff      	cmp	r3, #255	@ 0xff
 8011d36:	dc14      	bgt.n	8011d62 <phhalHw_Pn5180_SetCardMode+0x592>
 8011d38:	2b02      	cmp	r3, #2
 8011d3a:	d00c      	beq.n	8011d56 <phhalHw_Pn5180_SetCardMode+0x586>
 8011d3c:	2b02      	cmp	r3, #2
 8011d3e:	dc10      	bgt.n	8011d62 <phhalHw_Pn5180_SetCardMode+0x592>
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d002      	beq.n	8011d4a <phhalHw_Pn5180_SetCardMode+0x57a>
 8011d44:	2b01      	cmp	r3, #1
 8011d46:	d003      	beq.n	8011d50 <phhalHw_Pn5180_SetCardMode+0x580>
 8011d48:	e00b      	b.n	8011d62 <phhalHw_Pn5180_SetCardMode+0x592>
        {
            case PHHAL_HW_RF_DATARATE_106:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AI_106;
 8011d4a:	238a      	movs	r3, #138	@ 0x8a
 8011d4c:	75bb      	strb	r3, [r7, #22]
                break;
 8011d4e:	e00b      	b.n	8011d68 <phhalHw_Pn5180_SetCardMode+0x598>

            case PHHAL_HW_RF_DATARATE_212:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AI_212;
 8011d50:	238b      	movs	r3, #139	@ 0x8b
 8011d52:	75bb      	strb	r3, [r7, #22]
            break;
 8011d54:	e008      	b.n	8011d68 <phhalHw_Pn5180_SetCardMode+0x598>

            case PHHAL_HW_RF_DATARATE_424:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AI_424;
 8011d56:	238c      	movs	r3, #140	@ 0x8c
 8011d58:	75bb      	strb	r3, [r7, #22]
                break;
 8011d5a:	e005      	b.n	8011d68 <phhalHw_Pn5180_SetCardMode+0x598>

            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011d5c:	23ff      	movs	r3, #255	@ 0xff
 8011d5e:	75bb      	strb	r3, [r7, #22]
                break;
 8011d60:	e002      	b.n	8011d68 <phhalHw_Pn5180_SetCardMode+0x598>

            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011d62:	f240 2321 	movw	r3, #545	@ 0x221
 8011d66:	e025      	b.n	8011db4 <phhalHw_Pn5180_SetCardMode+0x5e4>
        }

        break;
 8011d68:	e002      	b.n	8011d70 <phhalHw_Pn5180_SetCardMode+0x5a0>

    case PHHAL_HW_CARDTYPE_ICODEEPCUID:
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011d6a:	f240 2321 	movw	r3, #545	@ 0x221
 8011d6e:	e021      	b.n	8011db4 <phhalHw_Pn5180_SetCardMode+0x5e4>
    }

    if((PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX != bTxConfig) || (PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX != bRxConfig))
 8011d70:	7dfb      	ldrb	r3, [r7, #23]
 8011d72:	2bff      	cmp	r3, #255	@ 0xff
 8011d74:	d102      	bne.n	8011d7c <phhalHw_Pn5180_SetCardMode+0x5ac>
 8011d76:	7dbb      	ldrb	r3, [r7, #22]
 8011d78:	2bff      	cmp	r3, #255	@ 0xff
 8011d7a:	d00c      	beq.n	8011d96 <phhalHw_Pn5180_SetCardMode+0x5c6>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp,
 8011d7c:	7dba      	ldrb	r2, [r7, #22]
 8011d7e:	7dfb      	ldrb	r3, [r7, #23]
 8011d80:	4619      	mov	r1, r3
 8011d82:	68f8      	ldr	r0, [r7, #12]
 8011d84:	f7fe ffc8 	bl	8010d18 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 8011d88:	4603      	mov	r3, r0
 8011d8a:	82bb      	strh	r3, [r7, #20]
 8011d8c:	8abb      	ldrh	r3, [r7, #20]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d001      	beq.n	8011d96 <phhalHw_Pn5180_SetCardMode+0x5c6>
 8011d92:	8abb      	ldrh	r3, [r7, #20]
 8011d94:	e00e      	b.n	8011db4 <phhalHw_Pn5180_SetCardMode+0x5e4>
            (uint8_t) bTxConfig,
            (uint8_t) bRxConfig ));
    }

    /* If Datarate is changed, then Update Data-rate in shadow for parity setting */
    if(wTxDataRate != PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX)
 8011d96:	897b      	ldrh	r3, [r7, #10]
 8011d98:	2bff      	cmp	r3, #255	@ 0xff
 8011d9a:	d003      	beq.n	8011da4 <phhalHw_Pn5180_SetCardMode+0x5d4>
    {
        pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TXDATARATE_FRAMING] = wTxDataRate;
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	897a      	ldrh	r2, [r7, #10]
 8011da0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if(wRxDataRate != PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX)
 8011da4:	893b      	ldrh	r3, [r7, #8]
 8011da6:	2bff      	cmp	r3, #255	@ 0xff
 8011da8:	d003      	beq.n	8011db2 <phhalHw_Pn5180_SetCardMode+0x5e2>
    {
        pDataParams->wCfgShadow[PHHAL_HW_CONFIG_RXDATARATE_FRAMING] = wRxDataRate;
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	893a      	ldrh	r2, [r7, #8]
 8011dae:	f8a3 206c 	strh.w	r2, [r3, #108]	@ 0x6c
    }

    return PH_ERR_SUCCESS;
 8011db2:	2300      	movs	r3, #0
}
 8011db4:	4618      	mov	r0, r3
 8011db6:	3718      	adds	r7, #24
 8011db8:	46bd      	mov	sp, r7
 8011dba:	bd80      	pop	{r7, pc}

08011dbc <phhalHw_Pn5180_SetTmo>:
phStatus_t phhalHw_Pn5180_SetTmo(
    phhalHw_Pn5180_DataParams_t *pDataParams,
    uint16_t wTimeout,
    uint8_t  bUnit
    )
{
 8011dbc:	b580      	push	{r7, lr}
 8011dbe:	b088      	sub	sp, #32
 8011dc0:	af02      	add	r7, sp, #8
 8011dc2:	6078      	str	r0, [r7, #4]
 8011dc4:	460b      	mov	r3, r1
 8011dc6:	807b      	strh	r3, [r7, #2]
 8011dc8:	4613      	mov	r3, r2
 8011dca:	707b      	strb	r3, [r7, #1]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint32_t    PH_MEMLOC_REM wPrescaler;
    uint32_t    PH_MEMLOC_REM dwLoadValue;
    uint16_t    PH_MEMLOC_REM wUDigitalDelay;

    wUDigitalDelay = 0U;
 8011dcc:	2300      	movs	r3, #0
 8011dce:	81bb      	strh	r3, [r7, #12]
    /* Parameter check */
    if ((bUnit != PHHAL_HW_TIME_MICROSECONDS) && (bUnit != PHHAL_HW_TIME_MILLISECONDS))
 8011dd0:	787b      	ldrb	r3, [r7, #1]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d005      	beq.n	8011de2 <phhalHw_Pn5180_SetTmo+0x26>
 8011dd6:	787b      	ldrb	r3, [r7, #1]
 8011dd8:	2b01      	cmp	r3, #1
 8011dda:	d002      	beq.n	8011de2 <phhalHw_Pn5180_SetTmo+0x26>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011ddc:	f240 2321 	movw	r3, #545	@ 0x221
 8011de0:	e051      	b.n	8011e86 <phhalHw_Pn5180_SetTmo+0xca>
    }

    if(wTimeout == 0U)
 8011de2:	887b      	ldrh	r3, [r7, #2]
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d101      	bne.n	8011dec <phhalHw_Pn5180_SetTmo+0x30>
    {
        return PH_ERR_SUCCESS;
 8011de8:	2300      	movs	r3, #0
 8011dea:	e04c      	b.n	8011e86 <phhalHw_Pn5180_SetTmo+0xca>
    }

    if (bUnit == PHHAL_HW_TIME_MICROSECONDS)
 8011dec:	787b      	ldrb	r3, [r7, #1]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d125      	bne.n	8011e3e <phhalHw_Pn5180_SetTmo+0x82>
    {
        if (pDataParams->wFirmwareVer < 0x308U)
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 8011df8:	f5b3 7f42 	cmp.w	r3, #776	@ 0x308
 8011dfc:	d20d      	bcs.n	8011e1a <phhalHw_Pn5180_SetTmo+0x5e>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Int_GetDigiDelay(
 8011dfe:	f107 030c 	add.w	r3, r7, #12
 8011e02:	461a      	mov	r2, r3
 8011e04:	2101      	movs	r1, #1
 8011e06:	6878      	ldr	r0, [r7, #4]
 8011e08:	f000 f844 	bl	8011e94 <phhalHw_Pn5180_Int_GetDigiDelay>
 8011e0c:	4603      	mov	r3, r0
 8011e0e:	81fb      	strh	r3, [r7, #14]
 8011e10:	89fb      	ldrh	r3, [r7, #14]
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d001      	beq.n	8011e1a <phhalHw_Pn5180_SetTmo+0x5e>
 8011e16:	89fb      	ldrh	r3, [r7, #14]
 8011e18:	e035      	b.n	8011e86 <phhalHw_Pn5180_SetTmo+0xca>
                PH_ON,
                &wUDigitalDelay));
        }

        /* here wTimeout will be in uS */
        wPrescaler = 0x00U;
 8011e1a:	2300      	movs	r3, #0
 8011e1c:	617b      	str	r3, [r7, #20]
        /*Reducing the division by 2 digits to retain the 2 digit decimal places which were getting wiped out*/
        dwLoadValue =(uint32_t) ( PHHAL_HW_PN5180_MAX_FREQ / (PHHAL_HW_PN5180_CONVERSION_US_SEC/100));
 8011e1e:	f240 534c 	movw	r3, #1356	@ 0x54c
 8011e22:	613b      	str	r3, [r7, #16]
        /*Restoring the division done in the earlier step*/
        dwLoadValue =(uint32_t) (((wTimeout + wUDigitalDelay) * dwLoadValue)/100);
 8011e24:	887b      	ldrh	r3, [r7, #2]
 8011e26:	89ba      	ldrh	r2, [r7, #12]
 8011e28:	4413      	add	r3, r2
 8011e2a:	461a      	mov	r2, r3
 8011e2c:	693b      	ldr	r3, [r7, #16]
 8011e2e:	fb02 f303 	mul.w	r3, r2, r3
 8011e32:	4a17      	ldr	r2, [pc, #92]	@ (8011e90 <phhalHw_Pn5180_SetTmo+0xd4>)
 8011e34:	fba2 2303 	umull	r2, r3, r2, r3
 8011e38:	095b      	lsrs	r3, r3, #5
 8011e3a:	613b      	str	r3, [r7, #16]
 8011e3c:	e00f      	b.n	8011e5e <phhalHw_Pn5180_SetTmo+0xa2>
    }
    else
    {
        wPrescaler = 0x3CU;
 8011e3e:	233c      	movs	r3, #60	@ 0x3c
 8011e40:	617b      	str	r3, [r7, #20]
        if(wTimeout <= PHHAL_HW_PN5180_MAX_TIME_DELAY_MS)
 8011e42:	887b      	ldrh	r3, [r7, #2]
 8011e44:	f644 5248 	movw	r2, #19784	@ 0x4d48
 8011e48:	4293      	cmp	r3, r2
 8011e4a:	d805      	bhi.n	8011e58 <phhalHw_Pn5180_SetTmo+0x9c>
        {
            dwLoadValue =(uint32_t) (  wTimeout * ( PHHAL_HW_PN5180_MIN_FREQ  / PHHAL_HW_PN5180_CONVERSION_MS_SEC) );
 8011e4c:	887b      	ldrh	r3, [r7, #2]
 8011e4e:	2235      	movs	r2, #53	@ 0x35
 8011e50:	fb02 f303 	mul.w	r3, r2, r3
 8011e54:	613b      	str	r3, [r7, #16]
 8011e56:	e002      	b.n	8011e5e <phhalHw_Pn5180_SetTmo+0xa2>
        }
        else
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
 8011e58:	f240 2322 	movw	r3, #546	@ 0x222
 8011e5c:	e013      	b.n	8011e86 <phhalHw_Pn5180_SetTmo+0xca>
        }
    }

    PH_CHECK_SUCCESS_FCT(statusTmp,
 8011e5e:	693b      	ldr	r3, [r7, #16]
 8011e60:	9301      	str	r3, [sp, #4]
 8011e62:	697b      	ldr	r3, [r7, #20]
 8011e64:	9300      	str	r3, [sp, #0]
 8011e66:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8011e6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011e6e:	210f      	movs	r1, #15
 8011e70:	6878      	ldr	r0, [r7, #4]
 8011e72:	f7ff f938 	bl	80110e6 <phhalHw_Pn5180_TimerStart>
 8011e76:	4603      	mov	r3, r0
 8011e78:	81fb      	strh	r3, [r7, #14]
 8011e7a:	89fb      	ldrh	r3, [r7, #14]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d001      	beq.n	8011e84 <phhalHw_Pn5180_SetTmo+0xc8>
 8011e80:	89fb      	ldrh	r3, [r7, #14]
 8011e82:	e000      	b.n	8011e86 <phhalHw_Pn5180_SetTmo+0xca>
        TIMER1_CONFIG_T1_STOP_ON_RX_STARTED_MASK,
        wPrescaler,
        dwLoadValue
        ));

    return PH_ERR_SUCCESS;
 8011e84:	2300      	movs	r3, #0
}
 8011e86:	4618      	mov	r0, r3
 8011e88:	3718      	adds	r7, #24
 8011e8a:	46bd      	mov	sp, r7
 8011e8c:	bd80      	pop	{r7, pc}
 8011e8e:	bf00      	nop
 8011e90:	51eb851f 	.word	0x51eb851f

08011e94 <phhalHw_Pn5180_Int_GetDigiDelay>:
phStatus_t phhalHw_Pn5180_Int_GetDigiDelay(
                                      phhalHw_Pn5180_DataParams_t * pDataParams,
                                      uint8_t bIsTimeout,
                                      uint16_t * pDelayUs
                                      )
{
 8011e94:	b480      	push	{r7}
 8011e96:	b087      	sub	sp, #28
 8011e98:	af00      	add	r7, sp, #0
 8011e9a:	60f8      	str	r0, [r7, #12]
 8011e9c:	460b      	mov	r3, r1
 8011e9e:	607a      	str	r2, [r7, #4]
 8011ea0:	72fb      	strb	r3, [r7, #11]
    uint16_t    PH_MEMLOC_REM wDataRate;
    uint8_t     PH_MEMLOC_REM bIndex;

    wDataRate = pDataParams->wCfgShadow[PHHAL_HW_CONFIG_RXDATARATE_FRAMING];
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	f8b3 306c 	ldrh.w	r3, [r3, #108]	@ 0x6c
 8011ea8:	82fb      	strh	r3, [r7, #22]
    bIndex = pDataParams->bCardType - 1U;
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011eb0:	3b01      	subs	r3, #1
 8011eb2:	757b      	strb	r3, [r7, #21]

    switch (pDataParams->bCardType)
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011eba:	3b01      	subs	r3, #1
 8011ebc:	2b09      	cmp	r3, #9
 8011ebe:	f200 8086 	bhi.w	8011fce <phhalHw_Pn5180_Int_GetDigiDelay+0x13a>
 8011ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8011ec8 <phhalHw_Pn5180_Int_GetDigiDelay+0x34>)
 8011ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ec8:	08011ef1 	.word	0x08011ef1
 8011ecc:	08011ef1 	.word	0x08011ef1
 8011ed0:	08011f2f 	.word	0x08011f2f
 8011ed4:	08011f47 	.word	0x08011f47
 8011ed8:	08011f5d 	.word	0x08011f5d
 8011edc:	08011f6b 	.word	0x08011f6b
 8011ee0:	08011fcf 	.word	0x08011fcf
 8011ee4:	08011fcf 	.word	0x08011fcf
 8011ee8:	08011fcf 	.word	0x08011fcf
 8011eec:	08011f2f 	.word	0x08011f2f
    {
    case PHHAL_HW_CARDTYPE_ISO14443A:
    case PHHAL_HW_CARDTYPE_ISO14443B:
        *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][wDataRate];
 8011ef0:	7d7a      	ldrb	r2, [r7, #21]
 8011ef2:	8afb      	ldrh	r3, [r7, #22]
 8011ef4:	493b      	ldr	r1, [pc, #236]	@ (8011fe4 <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 8011ef6:	0092      	lsls	r2, r2, #2
 8011ef8:	4413      	add	r3, r2
 8011efa:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	801a      	strh	r2, [r3, #0]
        /* In a timeout case we have to add an additional delay */
        if (bIsTimeout != PH_OFF)
 8011f02:	7afb      	ldrb	r3, [r7, #11]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d005      	beq.n	8011f14 <phhalHw_Pn5180_Int_GetDigiDelay+0x80>
        {
            *pDelayUs = *pDelayUs + PHHAL_HW_PN5180_I14443_ADD_DELAY_US;
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	881b      	ldrh	r3, [r3, #0]
 8011f0c:	330f      	adds	r3, #15
 8011f0e:	b29a      	uxth	r2, r3
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	801a      	strh	r2, [r3, #0]
        }

        if(pDataParams->bJewelActivated == PH_ON)
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8011f1a:	2b01      	cmp	r3, #1
 8011f1c:	d15a      	bne.n	8011fd4 <phhalHw_Pn5180_Int_GetDigiDelay+0x140>
        {
            *pDelayUs += 2000U;
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	881b      	ldrh	r3, [r3, #0]
 8011f22:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8011f26:	b29a      	uxth	r2, r3
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	801a      	strh	r2, [r3, #0]
        }
        break;
 8011f2c:	e052      	b.n	8011fd4 <phhalHw_Pn5180_Int_GetDigiDelay+0x140>
    case PHHAL_HW_CARDTYPE_FELICA_212:
    case PHHAL_HW_CARDTYPE_FELICA_424:
        bIndex = PHHAL_HW_CARDTYPE_FELICA_212 - 1U;
 8011f2e:	2302      	movs	r3, #2
 8011f30:	757b      	strb	r3, [r7, #21]
        *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][wDataRate];
 8011f32:	7d7a      	ldrb	r2, [r7, #21]
 8011f34:	8afb      	ldrh	r3, [r7, #22]
 8011f36:	492b      	ldr	r1, [pc, #172]	@ (8011fe4 <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 8011f38:	0092      	lsls	r2, r2, #2
 8011f3a:	4413      	add	r3, r2
 8011f3c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	801a      	strh	r2, [r3, #0]
        break;
 8011f44:	e047      	b.n	8011fd6 <phhalHw_Pn5180_Int_GetDigiDelay+0x142>
    case PHHAL_HW_CARDTYPE_ISO15693:
        *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][wDataRate - PHHAL_HW_RF_RX_DATARATE_LOW];
 8011f46:	7d7a      	ldrb	r2, [r7, #21]
 8011f48:	8afb      	ldrh	r3, [r7, #22]
 8011f4a:	3b0c      	subs	r3, #12
 8011f4c:	4925      	ldr	r1, [pc, #148]	@ (8011fe4 <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 8011f4e:	0092      	lsls	r2, r2, #2
 8011f50:	4413      	add	r3, r2
 8011f52:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	801a      	strh	r2, [r3, #0]
        break;
 8011f5a:	e03c      	b.n	8011fd6 <phhalHw_Pn5180_Int_GetDigiDelay+0x142>
    case PHHAL_HW_CARDTYPE_ICODEEPCUID:
        *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][0];
 8011f5c:	7d7b      	ldrb	r3, [r7, #21]
 8011f5e:	4a21      	ldr	r2, [pc, #132]	@ (8011fe4 <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 8011f60:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	801a      	strh	r2, [r3, #0]
        break;
 8011f68:	e035      	b.n	8011fd6 <phhalHw_Pn5180_Int_GetDigiDelay+0x142>
    case PHHAL_HW_CARDTYPE_I18000P3M3:
        switch (wDataRate)
 8011f6a:	8afb      	ldrh	r3, [r7, #22]
 8011f6c:	3b13      	subs	r3, #19
 8011f6e:	2b03      	cmp	r3, #3
 8011f70:	d829      	bhi.n	8011fc6 <phhalHw_Pn5180_Int_GetDigiDelay+0x132>
 8011f72:	a201      	add	r2, pc, #4	@ (adr r2, 8011f78 <phhalHw_Pn5180_Int_GetDigiDelay+0xe4>)
 8011f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f78:	08011f89 	.word	0x08011f89
 8011f7c:	08011fa7 	.word	0x08011fa7
 8011f80:	08011f97 	.word	0x08011f97
 8011f84:	08011fb7 	.word	0x08011fb7
        {
            case PHHAL_HW_RX_I18000P3M3_FL_423_MAN2:
                *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][0];
 8011f88:	7d7b      	ldrb	r3, [r7, #21]
 8011f8a:	4a16      	ldr	r2, [pc, #88]	@ (8011fe4 <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 8011f8c:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	801a      	strh	r2, [r3, #0]
                break;
 8011f94:	e01a      	b.n	8011fcc <phhalHw_Pn5180_Int_GetDigiDelay+0x138>
            case PHHAL_HW_RX_I18000P3M3_FL_423_MAN4:
                *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][1];
 8011f96:	7d7b      	ldrb	r3, [r7, #21]
 8011f98:	4a12      	ldr	r2, [pc, #72]	@ (8011fe4 <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 8011f9a:	00db      	lsls	r3, r3, #3
 8011f9c:	4413      	add	r3, r2
 8011f9e:	885a      	ldrh	r2, [r3, #2]
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	801a      	strh	r2, [r3, #0]
                break;
 8011fa4:	e012      	b.n	8011fcc <phhalHw_Pn5180_Int_GetDigiDelay+0x138>
            case PHHAL_HW_RX_I18000P3M3_FL_847_MAN2:
                *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][2];
 8011fa6:	7d7b      	ldrb	r3, [r7, #21]
 8011fa8:	4a0e      	ldr	r2, [pc, #56]	@ (8011fe4 <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 8011faa:	00db      	lsls	r3, r3, #3
 8011fac:	4413      	add	r3, r2
 8011fae:	889a      	ldrh	r2, [r3, #4]
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	801a      	strh	r2, [r3, #0]
                break;
 8011fb4:	e00a      	b.n	8011fcc <phhalHw_Pn5180_Int_GetDigiDelay+0x138>
            case PHHAL_HW_RX_I18000P3M3_FL_847_MAN4:
                *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][3];
 8011fb6:	7d7b      	ldrb	r3, [r7, #21]
 8011fb8:	4a0a      	ldr	r2, [pc, #40]	@ (8011fe4 <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 8011fba:	00db      	lsls	r3, r3, #3
 8011fbc:	4413      	add	r3, r2
 8011fbe:	88da      	ldrh	r2, [r3, #6]
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	801a      	strh	r2, [r3, #0]
                break;
 8011fc4:	e002      	b.n	8011fcc <phhalHw_Pn5180_Int_GetDigiDelay+0x138>
            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 8011fc6:	f240 237f 	movw	r3, #639	@ 0x27f
 8011fca:	e005      	b.n	8011fd8 <phhalHw_Pn5180_Int_GetDigiDelay+0x144>
        }
        break;
 8011fcc:	e003      	b.n	8011fd6 <phhalHw_Pn5180_Int_GetDigiDelay+0x142>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 8011fce:	f240 237f 	movw	r3, #639	@ 0x27f
 8011fd2:	e001      	b.n	8011fd8 <phhalHw_Pn5180_Int_GetDigiDelay+0x144>
        break;
 8011fd4:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 8011fd6:	2300      	movs	r3, #0
}
 8011fd8:	4618      	mov	r0, r3
 8011fda:	371c      	adds	r7, #28
 8011fdc:	46bd      	mov	sp, r7
 8011fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe2:	4770      	bx	lr
 8011fe4:	08020314 	.word	0x08020314

08011fe8 <phhalHw_Pn5180_Receive_Int>:
                                      uint32_t dwIrqWaitFor,
                                      uint8_t ** ppRxBuffer,
                                      uint16_t * pRxLength,
                                      uint8_t    bIrqEnable
                                      )
{
 8011fe8:	b5b0      	push	{r4, r5, r7, lr}
 8011fea:	b094      	sub	sp, #80	@ 0x50
 8011fec:	af04      	add	r7, sp, #16
 8011fee:	60f8      	str	r0, [r7, #12]
 8011ff0:	60b9      	str	r1, [r7, #8]
 8011ff2:	607a      	str	r2, [r7, #4]
 8011ff4:	603b      	str	r3, [r7, #0]
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 8011ff6:	2300      	movs	r3, #0
 8011ff8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint32_t    PH_MEMLOC_REM dwIrqReg;
    uint8_t *   PH_MEMLOC_REM pTmpBuffer = NULL;
 8011ffa:	2300      	movs	r3, #0
 8011ffc:	627b      	str	r3, [r7, #36]	@ 0x24
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 8011ffe:	2300      	movs	r3, #0
 8012000:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t    PH_MEMLOC_REM wTmpBufferSize;
    uint32_t    PH_MEMLOC_REM dwValue;
    uint32_t    PH_MEMLOC_REM dwTemp;
    uint32_t    PH_MEMLOC_REM dwColPos = 0U;
 8012002:	2300      	movs	r3, #0
 8012004:	63bb      	str	r3, [r7, #56]	@ 0x38
    uint32_t    PH_MEMLOC_REM dwRegister;
    uint16_t    PH_MEMLOC_REM wIndex = 0U;
 8012006:	2300      	movs	r3, #0
 8012008:	86fb      	strh	r3, [r7, #54]	@ 0x36
    uint8_t     PH_MEMLOC_REM bBitlen;
    uint8_t     PH_MEMLOC_REM aCrc[2];
    uint8_t     PH_MEMLOC_REM bBackup = 0U;
 801200a:	2300      	movs	r3, #0
 801200c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    uint8_t     PH_MEMLOC_REM bRfActiveErrCause = 0U;
 8012010:	2300      	movs	r3, #0
 8012012:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    /* Now wait for the IRQ */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WaitIrq(
 8012016:	f897 1050 	ldrb.w	r1, [r7, #80]	@ 0x50
 801201a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801201e:	9300      	str	r3, [sp, #0]
 8012020:	68bb      	ldr	r3, [r7, #8]
 8012022:	2200      	movs	r2, #0
 8012024:	68f8      	ldr	r0, [r7, #12]
 8012026:	f000 faf1 	bl	801260c <phhalHw_Pn5180_WaitIrq>
 801202a:	4603      	mov	r3, r0
 801202c:	867b      	strh	r3, [r7, #50]	@ 0x32
 801202e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8012030:	2b00      	cmp	r3, #0
 8012032:	d001      	beq.n	8012038 <phhalHw_Pn5180_Receive_Int+0x50>
 8012034:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8012036:	e233      	b.n	80124a0 <phhalHw_Pn5180_Receive_Int+0x4b8>
        PH_OFF,
        dwIrqWaitFor,
        &dwIrqReg));

    /* If in active mode, retrieve the content of the RF_STATUS register */
    if (pDataParams->bActiveMode == PH_ON)
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801203e:	2b01      	cmp	r3, #1
 8012040:	d10d      	bne.n	801205e <phhalHw_Pn5180_Receive_Int+0x76>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegister(pDataParams, RF_STATUS, &dwRegister));
 8012042:	f107 0318 	add.w	r3, r7, #24
 8012046:	461a      	mov	r2, r3
 8012048:	211d      	movs	r1, #29
 801204a:	68f8      	ldr	r0, [r7, #12]
 801204c:	f7fe f97e 	bl	801034c <phhalHw_Pn5180_Instr_ReadRegister>
 8012050:	4603      	mov	r3, r0
 8012052:	867b      	strh	r3, [r7, #50]	@ 0x32
 8012054:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8012056:	2b00      	cmp	r3, #0
 8012058:	d001      	beq.n	801205e <phhalHw_Pn5180_Receive_Int+0x76>
 801205a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801205c:	e220      	b.n	80124a0 <phhalHw_Pn5180_Receive_Int+0x4b8>
    }

    /* Check if an error has occurred */
    if (0U != (dwIrqReg & IRQ_STATUS_GENERAL_ERROR_IRQ_MASK))
 801205e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012060:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012064:	2b00      	cmp	r3, #0
 8012066:	d002      	beq.n	801206e <phhalHw_Pn5180_Receive_Int+0x86>
    {
        status = PH_ERR_INTERNAL_ERROR;
 8012068:	237f      	movs	r3, #127	@ 0x7f
 801206a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801206c:	e089      	b.n	8012182 <phhalHw_Pn5180_Receive_Int+0x19a>
    }
    else if((pDataParams->bRxMultiple == PH_ON) && (0U != ((dwIrqReg & IRQ_STATUS_TIMER1_IRQ_MASK))))
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012074:	2b01      	cmp	r3, #1
 8012076:	d10f      	bne.n	8012098 <phhalHw_Pn5180_Receive_Int+0xb0>
 8012078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801207a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801207e:	2b00      	cmp	r3, #0
 8012080:	d00a      	beq.n	8012098 <phhalHw_Pn5180_Receive_Int+0xb0>
    {
        if(0U != (dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))
 8012082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012084:	f003 0301 	and.w	r3, r3, #1
 8012088:	2b00      	cmp	r3, #0
 801208a:	d002      	beq.n	8012092 <phhalHw_Pn5180_Receive_Int+0xaa>
        {
            status = PH_ERR_SUCCESS;
 801208c:	2300      	movs	r3, #0
 801208e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if(0U != (dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))
 8012090:	e077      	b.n	8012182 <phhalHw_Pn5180_Receive_Int+0x19a>
        }
        else
        {
            status = PH_ERR_IO_TIMEOUT;
 8012092:	2301      	movs	r3, #1
 8012094:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if(0U != (dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))
 8012096:	e074      	b.n	8012182 <phhalHw_Pn5180_Receive_Int+0x19a>
        }
    }
    /* Timeout handling */
   else if ((dwIrqReg & IRQ_STATUS_TIMER1_IRQ_MASK))
 8012098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801209a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d02e      	beq.n	8012100 <phhalHw_Pn5180_Receive_Int+0x118>
   {
        /* Reset after timeout behavior */
        if (pDataParams->bRfResetAfterTo != PH_OFF)
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d009      	beq.n	80120c0 <phhalHw_Pn5180_Receive_Int+0xd8>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_FieldReset(pDataParams));
 80120ac:	68f8      	ldr	r0, [r7, #12]
 80120ae:	f7fb f8f3 	bl	800d298 <phhalHw_Pn5180_FieldReset>
 80120b2:	4603      	mov	r3, r0
 80120b4:	867b      	strh	r3, [r7, #50]	@ 0x32
 80120b6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d001      	beq.n	80120c0 <phhalHw_Pn5180_Receive_Int+0xd8>
 80120bc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80120be:	e1ef      	b.n	80124a0 <phhalHw_Pn5180_Receive_Int+0x4b8>
        }

        status = PH_ERR_IO_TIMEOUT;
 80120c0:	2301      	movs	r3, #1
 80120c2:	87fb      	strh	r3, [r7, #62]	@ 0x3e

        if ((pDataParams->bActiveMode == PH_ON) && (pDataParams->wTargetMode == PH_OFF))
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80120ca:	2b01      	cmp	r3, #1
 80120cc:	d159      	bne.n	8012182 <phhalHw_Pn5180_Receive_Int+0x19a>
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d155      	bne.n	8012182 <phhalHw_Pn5180_Receive_Int+0x19a>
        {
            if (0U != (dwRegister & RF_STATUS_TX_RF_STATUS_MASK ))
 80120d6:	69bb      	ldr	r3, [r7, #24]
 80120d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d007      	beq.n	80120f0 <phhalHw_Pn5180_Receive_Int+0x108>
            {
                /* If External RF ON Event occurred and Internal Field is ON then Internal Error Should
                 * not be returned, otherwise Internal Error is returned */
                if ((0U == ((dwIrqReg & IRQ_STATUS_RFON_DET_IRQ_MASK))))
 80120e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d14b      	bne.n	8012182 <phhalHw_Pn5180_Receive_Int+0x19a>
                {
                    /* After RWT Timeout if Internal RF is ON (Stuck) then return Internal Error. */
                    status = PH_ERR_INTERNAL_ERROR;
 80120ea:	237f      	movs	r3, #127	@ 0x7f
 80120ec:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80120ee:	e048      	b.n	8012182 <phhalHw_Pn5180_Receive_Int+0x19a>
                }
            }
            else if (0U != (dwRegister & RF_STATUS_RF_DET_STATUS_MASK))
 80120f0:	69bb      	ldr	r3, [r7, #24]
 80120f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d043      	beq.n	8012182 <phhalHw_Pn5180_Receive_Int+0x19a>
            {
                /* If External RF Field is ON after FWT Timeout, then return External RF Error. */
                status = PH_ERR_EXT_RF_ERROR;
 80120fa:	2310      	movs	r3, #16
 80120fc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80120fe:	e040      	b.n	8012182 <phhalHw_Pn5180_Receive_Int+0x19a>
                /* Do nothing */
            }
        }
    }
    /* Handle External RF error */
    else if ((pDataParams->bActiveMode == PH_ON) && (0U != ((dwIrqReg & IRQ_STATUS_RF_ACTIVE_ERROR_IRQ_MASK))))
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012106:	2b01      	cmp	r3, #1
 8012108:	d123      	bne.n	8012152 <phhalHw_Pn5180_Receive_Int+0x16a>
 801210a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801210c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8012110:	2b00      	cmp	r3, #0
 8012112:	d01e      	beq.n	8012152 <phhalHw_Pn5180_Receive_Int+0x16a>
    {
        bRfActiveErrCause = (uint8_t)((dwRegister & RF_STATUS_RF_ACTIVE_ERROR_CAUSE_MASK) >> RF_STATUS_RF_ACTIVE_ERROR_CAUSE_POS);
 8012114:	69bb      	ldr	r3, [r7, #24]
 8012116:	0b5b      	lsrs	r3, r3, #13
 8012118:	b2db      	uxtb	r3, r3
 801211a:	f003 0307 	and.w	r3, r3, #7
 801211e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

        if (pDataParams->wTargetMode != PH_OFF)
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012126:	2b00      	cmp	r3, #0
 8012128:	d009      	beq.n	801213e <phhalHw_Pn5180_Receive_Int+0x156>
        {
            if(bRfActiveErrCause != 4U)
 801212a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801212e:	2b04      	cmp	r3, #4
 8012130:	d002      	beq.n	8012138 <phhalHw_Pn5180_Receive_Int+0x150>
            {
                status = PH_ERR_EXT_RF_ERROR;
 8012132:	2310      	movs	r3, #16
 8012134:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (pDataParams->wTargetMode != PH_OFF)
 8012136:	e024      	b.n	8012182 <phhalHw_Pn5180_Receive_Int+0x19a>
            }
            else
            {
                status = PHHAL_HW_PN5180_ACTIVE_ERR_CAUSE4;
 8012138:	2344      	movs	r3, #68	@ 0x44
 801213a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (pDataParams->wTargetMode != PH_OFF)
 801213c:	e021      	b.n	8012182 <phhalHw_Pn5180_Receive_Int+0x19a>
            }
        }
        else
        {
            if((bRfActiveErrCause == 4U))
 801213e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8012142:	2b04      	cmp	r3, #4
 8012144:	d102      	bne.n	801214c <phhalHw_Pn5180_Receive_Int+0x164>
            {
                status = PH_ERR_IO_TIMEOUT;
 8012146:	2301      	movs	r3, #1
 8012148:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (pDataParams->wTargetMode != PH_OFF)
 801214a:	e01a      	b.n	8012182 <phhalHw_Pn5180_Receive_Int+0x19a>

            }
            else
            {
                status = PH_ERR_EXT_RF_ERROR;
 801214c:	2310      	movs	r3, #16
 801214e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (pDataParams->wTargetMode != PH_OFF)
 8012150:	e017      	b.n	8012182 <phhalHw_Pn5180_Receive_Int+0x19a>
            }
        }
    }
    /* Passive mode */
    else if(0U != (dwIrqReg & IRQ_STATUS_RFOFF_DET_IRQ_MASK))
 8012152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012158:	2b00      	cmp	r3, #0
 801215a:	d012      	beq.n	8012182 <phhalHw_Pn5180_Receive_Int+0x19a>
    {
        /* In case External RF OFF also occurred then exit with RF Error. */
        if ((pDataParams->bActiveMode == PH_OFF) && (pDataParams->wTargetMode))
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012162:	2b00      	cmp	r3, #0
 8012164:	d106      	bne.n	8012174 <phhalHw_Pn5180_Receive_Int+0x18c>
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801216a:	2b00      	cmp	r3, #0
 801216c:	d002      	beq.n	8012174 <phhalHw_Pn5180_Receive_Int+0x18c>
        {
            /* Terminate with RF_ERROR*/
            status = PH_ERR_EXT_RF_ERROR;
 801216e:	2310      	movs	r3, #16
 8012170:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8012172:	e006      	b.n	8012182 <phhalHw_Pn5180_Receive_Int+0x19a>
        }
        else if((0U == ((dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))))
 8012174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012176:	f003 0301 	and.w	r3, r3, #1
 801217a:	2b00      	cmp	r3, #0
 801217c:	d101      	bne.n	8012182 <phhalHw_Pn5180_Receive_Int+0x19a>
        {
            status = PH_ERR_INTEGRITY_ERROR;
 801217e:	2302      	movs	r3, #2
 8012180:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    {
        /*QAC*/
    }

    /* Receive data */
    if ((0U != ((dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))) && (status == PH_ERR_SUCCESS))
 8012182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012184:	f003 0301 	and.w	r3, r3, #1
 8012188:	2b00      	cmp	r3, #0
 801218a:	f000 8174 	beq.w	8012476 <phhalHw_Pn5180_Receive_Int+0x48e>
 801218e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012190:	2b00      	cmp	r3, #0
 8012192:	f040 8170 	bne.w	8012476 <phhalHw_Pn5180_Receive_Int+0x48e>
    {
        pDataParams->wRxBufLen = 0U;
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	2200      	movs	r2, #0
 801219a:	835a      	strh	r2, [r3, #26]

        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetRxBuffer(pDataParams, PH_ON, &pTmpBuffer, &wTmpBufferLen, &wTmpBufferSize));
 801219c:	f107 0122 	add.w	r1, r7, #34	@ 0x22
 80121a0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80121a4:	f107 0320 	add.w	r3, r7, #32
 80121a8:	9300      	str	r3, [sp, #0]
 80121aa:	460b      	mov	r3, r1
 80121ac:	2101      	movs	r1, #1
 80121ae:	68f8      	ldr	r0, [r7, #12]
 80121b0:	f7fe fec5 	bl	8010f3e <phhalHw_Pn5180_GetRxBuffer>
 80121b4:	4603      	mov	r3, r0
 80121b6:	867b      	strh	r3, [r7, #50]	@ 0x32
 80121b8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d001      	beq.n	80121c2 <phhalHw_Pn5180_Receive_Int+0x1da>
 80121be:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80121c0:	e16e      	b.n	80124a0 <phhalHw_Pn5180_Receive_Int+0x4b8>

#ifndef PN5180_P2P_HW_SYNC_BYTE
        if (pDataParams->bNfcipMode == PH_ON)
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80121c8:	2b01      	cmp	r3, #1
 80121ca:	d103      	bne.n	80121d4 <phhalHw_Pn5180_Receive_Int+0x1ec>
        {
            bBackup = pTmpBuffer[0];
 80121cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121ce:	781b      	ldrb	r3, [r3, #0]
 80121d0:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
        }
#endif
        /* Read the RX_STATUS */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_ReadRegister(pDataParams, RX_STATUS, &dwValue));
 80121d4:	f107 031c 	add.w	r3, r7, #28
 80121d8:	461a      	mov	r2, r3
 80121da:	2113      	movs	r1, #19
 80121dc:	68f8      	ldr	r0, [r7, #12]
 80121de:	f7fa fb3f 	bl	800c860 <phhalHw_Pn5180_ReadRegister>
 80121e2:	4603      	mov	r3, r0
 80121e4:	867b      	strh	r3, [r7, #50]	@ 0x32
 80121e6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d001      	beq.n	80121f0 <phhalHw_Pn5180_Receive_Int+0x208>
 80121ec:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80121ee:	e157      	b.n	80124a0 <phhalHw_Pn5180_Receive_Int+0x4b8>

        if(pDataParams->bRxMultiple == PH_ON)
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80121f6:	2b01      	cmp	r3, #1
 80121f8:	d110      	bne.n	801221c <phhalHw_Pn5180_Receive_Int+0x234>
        {
            wTmpBufferLen = (uint16_t)((dwValue & RX_STATUS_RX_NUM_BYTES_RECEIVED_MASK) |
 80121fa:	69fb      	ldr	r3, [r7, #28]
 80121fc:	b29b      	uxth	r3, r3
 80121fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012202:	b29a      	uxth	r2, r3
                (((dwValue & RX_STATUS_RX_NUM_FRAMES_RECEIVED_MASK) >>
 8012204:	69fb      	ldr	r3, [r7, #28]
 8012206:	0a5b      	lsrs	r3, r3, #9
            wTmpBufferLen = (uint16_t)((dwValue & RX_STATUS_RX_NUM_BYTES_RECEIVED_MASK) |
 8012208:	b29b      	uxth	r3, r3
 801220a:	f003 030f 	and.w	r3, r3, #15
 801220e:	b29b      	uxth	r3, r3
 8012210:	015b      	lsls	r3, r3, #5
 8012212:	b29b      	uxth	r3, r3
 8012214:	4313      	orrs	r3, r2
 8012216:	b29b      	uxth	r3, r3
 8012218:	847b      	strh	r3, [r7, #34]	@ 0x22
 801221a:	e005      	b.n	8012228 <phhalHw_Pn5180_Receive_Int+0x240>
                RX_STATUS_RX_NUM_FRAMES_RECEIVED_POS) * 32U));
        }
        else
        {
            wTmpBufferLen = (uint16_t)(dwValue & RX_STATUS_RX_NUM_BYTES_RECEIVED_MASK);
 801221c:	69fb      	ldr	r3, [r7, #28]
 801221e:	b29b      	uxth	r3, r3
 8012220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012224:	b29b      	uxth	r3, r3
 8012226:	847b      	strh	r3, [r7, #34]	@ 0x22
        }

        if(wTmpBufferLen != 0U)
 8012228:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801222a:	2b00      	cmp	r3, #0
 801222c:	d00c      	beq.n	8012248 <phhalHw_Pn5180_Receive_Int+0x260>
        {
            /* Prepare the command for reading the RX FIFO of the Pn5180 */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_RetrieveRxData(
 801222e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012230:	461a      	mov	r2, r3
 8012232:	6879      	ldr	r1, [r7, #4]
 8012234:	68f8      	ldr	r0, [r7, #12]
 8012236:	f7fe fa99 	bl	801076c <phhalHw_Pn5180_Instr_RetrieveRxData>
 801223a:	4603      	mov	r3, r0
 801223c:	867b      	strh	r3, [r7, #50]	@ 0x32
 801223e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8012240:	2b00      	cmp	r3, #0
 8012242:	d001      	beq.n	8012248 <phhalHw_Pn5180_Receive_Int+0x260>
 8012244:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8012246:	e12b      	b.n	80124a0 <phhalHw_Pn5180_Receive_Int+0x4b8>
                ppRxBuffer,
                wTmpBufferLen));
        }

        /* Extract RX last bits */
        dwTemp = dwValue & RX_STATUS_RX_NUM_LAST_BITS_MASK;
 8012248:	69fb      	ldr	r3, [r7, #28]
 801224a:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 801224e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwTemp = dwTemp >> RX_STATUS_RX_NUM_LAST_BITS_POS;
 8012250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012252:	0b5b      	lsrs	r3, r3, #13
 8012254:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Set RX last bits */
        pDataParams->wAdditionalInfo = (uint16_t)dwTemp;
 8012256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012258:	b29a      	uxth	r2, r3
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	861a      	strh	r2, [r3, #48]	@ 0x30

        if (0U != (dwValue & RX_STATUS_RX_COLLISION_DETECTED_MASK))
 801225e:	69fb      	ldr	r3, [r7, #28]
 8012260:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8012264:	2b00      	cmp	r3, #0
 8012266:	d044      	beq.n	80122f2 <phhalHw_Pn5180_Receive_Int+0x30a>
        {
            if ((wTmpBufferLen == 0U) && ((dwValue & RX_STATUS_RX_COLL_POS_MASK) == 0U))
 8012268:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801226a:	2b00      	cmp	r3, #0
 801226c:	d107      	bne.n	801227e <phhalHw_Pn5180_Receive_Int+0x296>
 801226e:	69fb      	ldr	r3, [r7, #28]
 8012270:	f003 737e 	and.w	r3, r3, #66584576	@ 0x3f80000
 8012274:	2b00      	cmp	r3, #0
 8012276:	d102      	bne.n	801227e <phhalHw_Pn5180_Receive_Int+0x296>
            {
                /* No data received */
                status = PH_ERR_IO_TIMEOUT;
 8012278:	2301      	movs	r3, #1
 801227a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801227c:	e051      	b.n	8012322 <phhalHw_Pn5180_Receive_Int+0x33a>
            }
            else
            {
                status = PH_ERR_COLLISION_ERROR;
 801227e:	2303      	movs	r3, #3
 8012280:	87fb      	strh	r3, [r7, #62]	@ 0x3e

                /* Retrieve collision position */
                dwColPos = dwValue & RX_STATUS_RX_COLL_POS_MASK;
 8012282:	69fb      	ldr	r3, [r7, #28]
 8012284:	f003 737e 	and.w	r3, r3, #66584576	@ 0x3f80000
 8012288:	63bb      	str	r3, [r7, #56]	@ 0x38
                dwColPos = dwColPos >> RX_STATUS_RX_COLL_POS_POS;
 801228a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801228c:	0cdb      	lsrs	r3, r3, #19
 801228e:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Restore RX buffer size */
                wTmpBufferSize = wTmpBufferSize + wTmpBufferLen;
 8012290:	8c3a      	ldrh	r2, [r7, #32]
 8012292:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012294:	4413      	add	r3, r2
 8012296:	b29b      	uxth	r3, r3
 8012298:	843b      	strh	r3, [r7, #32]
                if (dwColPos > wTmpBufferSize)
 801229a:	8c3b      	ldrh	r3, [r7, #32]
 801229c:	461a      	mov	r2, r3
 801229e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122a0:	4293      	cmp	r3, r2
 80122a2:	d904      	bls.n	80122ae <phhalHw_Pn5180_Receive_Int+0x2c6>
                {
                    wTmpBufferLen = wTmpBufferSize;
 80122a4:	8c3b      	ldrh	r3, [r7, #32]
 80122a6:	847b      	strh	r3, [r7, #34]	@ 0x22
                    status = PH_ERR_BUFFER_OVERFLOW;
 80122a8:	2304      	movs	r3, #4
 80122aa:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80122ac:	e004      	b.n	80122b8 <phhalHw_Pn5180_Receive_Int+0x2d0>
                }
                else
                {
                    wTmpBufferLen = ((uint16_t)dwColPos >> 3U);
 80122ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122b0:	b29b      	uxth	r3, r3
 80122b2:	08db      	lsrs	r3, r3, #3
 80122b4:	b29b      	uxth	r3, r3
 80122b6:	847b      	strh	r3, [r7, #34]	@ 0x22
                }

                /* Extracting valid bits from Collision position */
                if(dwColPos >= 8U)
 80122b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122ba:	2b07      	cmp	r3, #7
 80122bc:	d904      	bls.n	80122c8 <phhalHw_Pn5180_Receive_Int+0x2e0>
                {
                    dwValue = dwColPos % 8U ;
 80122be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122c0:	f003 0307 	and.w	r3, r3, #7
 80122c4:	61fb      	str	r3, [r7, #28]
 80122c6:	e001      	b.n	80122cc <phhalHw_Pn5180_Receive_Int+0x2e4>
                }
                else
                {
                    dwValue = dwColPos;
 80122c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122ca:	61fb      	str	r3, [r7, #28]
                }

                if (0U != (dwValue))
 80122cc:	69fb      	ldr	r3, [r7, #28]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d00a      	beq.n	80122e8 <phhalHw_Pn5180_Receive_Int+0x300>
                {
                    /* If it is non zero, some valid bits are received */
                    if (wTmpBufferLen == wTmpBufferSize)
 80122d2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80122d4:	8c3b      	ldrh	r3, [r7, #32]
 80122d6:	429a      	cmp	r2, r3
 80122d8:	d102      	bne.n	80122e0 <phhalHw_Pn5180_Receive_Int+0x2f8>
                    {
                        status = PH_ERR_BUFFER_OVERFLOW;
 80122da:	2304      	movs	r3, #4
 80122dc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80122de:	e003      	b.n	80122e8 <phhalHw_Pn5180_Receive_Int+0x300>
                    }
                    else
                    {
                        ++wTmpBufferLen;
 80122e0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80122e2:	3301      	adds	r3, #1
 80122e4:	b29b      	uxth	r3, r3
 80122e6:	847b      	strh	r3, [r7, #34]	@ 0x22
                    }
                }

                /* Store valid bits of last byte */
                pDataParams->wAdditionalInfo = (uint16_t)dwValue;
 80122e8:	69fb      	ldr	r3, [r7, #28]
 80122ea:	b29a      	uxth	r2, r3
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	861a      	strh	r2, [r3, #48]	@ 0x30
 80122f0:	e017      	b.n	8012322 <phhalHw_Pn5180_Receive_Int+0x33a>
            }
        }
        else if (0U != (dwValue & RX_STATUS_RX_DATA_INTEGRITY_ERROR_MASK))
 80122f2:	69fb      	ldr	r3, [r7, #28]
 80122f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d002      	beq.n	8012302 <phhalHw_Pn5180_Receive_Int+0x31a>
        {
            status = PH_ERR_INTEGRITY_ERROR;
 80122fc:	2302      	movs	r3, #2
 80122fe:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8012300:	e00f      	b.n	8012322 <phhalHw_Pn5180_Receive_Int+0x33a>
        }
        else if (0U != (dwValue & RX_STATUS_RX_PROTOCOL_ERROR_MASK))
 8012302:	69fb      	ldr	r3, [r7, #28]
 8012304:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012308:	2b00      	cmp	r3, #0
 801230a:	d002      	beq.n	8012312 <phhalHw_Pn5180_Receive_Int+0x32a>
        {
            status = PH_ERR_PROTOCOL_ERROR;
 801230c:	2306      	movs	r3, #6
 801230e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8012310:	e007      	b.n	8012322 <phhalHw_Pn5180_Receive_Int+0x33a>
        }
        else if (dwTemp != 0x00U && dwTemp != 0x08U)
 8012312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012314:	2b00      	cmp	r3, #0
 8012316:	d004      	beq.n	8012322 <phhalHw_Pn5180_Receive_Int+0x33a>
 8012318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801231a:	2b08      	cmp	r3, #8
 801231c:	d001      	beq.n	8012322 <phhalHw_Pn5180_Receive_Int+0x33a>
        {
            /* Set incomplete byte status if applicable */
            status =  PH_ERR_SUCCESS_INCOMPLETE_BYTE;
 801231e:	2373      	movs	r3, #115	@ 0x73
 8012320:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        {
            /* For QAC */
        }

#ifndef PN5180_P2P_HW_SYNC_BYTE
        if ((pDataParams->bNfcipMode) == PH_ON && (wTmpBufferLen != 0U))
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8012328:	2b01      	cmp	r3, #1
 801232a:	d117      	bne.n	801235c <phhalHw_Pn5180_Receive_Int+0x374>
 801232c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801232e:	2b00      	cmp	r3, #0
 8012330:	d014      	beq.n	801235c <phhalHw_Pn5180_Receive_Int+0x374>
        {
            if(*ppRxBuffer[0] != 0xF0U)
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	781b      	ldrb	r3, [r3, #0]
 8012338:	2bf0      	cmp	r3, #240	@ 0xf0
 801233a:	d002      	beq.n	8012342 <phhalHw_Pn5180_Receive_Int+0x35a>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_IO_TIMEOUT, PH_COMP_HAL);
 801233c:	f240 2301 	movw	r3, #513	@ 0x201
 8012340:	e0ae      	b.n	80124a0 <phhalHw_Pn5180_Receive_Int+0x4b8>
            }
            pTmpBuffer[0] = bBackup;
 8012342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012344:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8012348:	701a      	strb	r2, [r3, #0]
            (*ppRxBuffer)++;
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	1c5a      	adds	r2, r3, #1
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	601a      	str	r2, [r3, #0]
            wTmpBufferLen--;
 8012354:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012356:	3b01      	subs	r3, #1
 8012358:	b29b      	uxth	r3, r3
 801235a:	847b      	strh	r3, [r7, #34]	@ 0x22
        }
#endif
        /* Store received data length in dataparams */
        pDataParams->wRxBufLen = pDataParams->wRxBufStartPos + wTmpBufferLen;
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	8bda      	ldrh	r2, [r3, #30]
 8012360:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012362:	4413      	add	r3, r2
 8012364:	b29a      	uxth	r2, r3
 8012366:	68fb      	ldr	r3, [r7, #12]
 8012368:	835a      	strh	r2, [r3, #26]

        if (ppRxBuffer != NULL)
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	2b00      	cmp	r3, #0
 801236e:	d005      	beq.n	801237c <phhalHw_Pn5180_Receive_Int+0x394>
        {
            *ppRxBuffer = pDataParams->pRxBuffer  + wIndex;;
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	695a      	ldr	r2, [r3, #20]
 8012374:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012376:	441a      	add	r2, r3
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	601a      	str	r2, [r3, #0]
        }

        if (pRxLength != NULL)
 801237c:	683b      	ldr	r3, [r7, #0]
 801237e:	2b00      	cmp	r3, #0
 8012380:	d003      	beq.n	801238a <phhalHw_Pn5180_Receive_Int+0x3a2>
        {
            *pRxLength = pDataParams->wRxBufLen;
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	8b5a      	ldrh	r2, [r3, #26]
 8012386:	683b      	ldr	r3, [r7, #0]
 8012388:	801a      	strh	r2, [r3, #0]
        }

        if(pDataParams->bJewelActivated == PH_ON && ((status == PH_ERR_SUCCESS) || ( status & PH_ERR_MASK) == PH_ERR_SUCCESS_INCOMPLETE_BYTE))
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8012390:	2b01      	cmp	r3, #1
 8012392:	d169      	bne.n	8012468 <phhalHw_Pn5180_Receive_Int+0x480>
 8012394:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012396:	2b00      	cmp	r3, #0
 8012398:	d003      	beq.n	80123a2 <phhalHw_Pn5180_Receive_Int+0x3ba>
 801239a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801239c:	b2db      	uxtb	r3, r3
 801239e:	2b73      	cmp	r3, #115	@ 0x73
 80123a0:	d162      	bne.n	8012468 <phhalHw_Pn5180_Receive_Int+0x480>
        {
            do
            {
                if ((ppRxBuffer != NULL) && (pRxLength != NULL))
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d025      	beq.n	80123f4 <phhalHw_Pn5180_Receive_Int+0x40c>
 80123a8:	683b      	ldr	r3, [r7, #0]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d022      	beq.n	80123f4 <phhalHw_Pn5180_Receive_Int+0x40c>
                {
                    /*remove parity of the received data-as harware's parity is off*/
                    statusTmp = phTools_DecodeParity(
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	6818      	ldr	r0, [r3, #0]
 80123b2:	683b      	ldr	r3, [r7, #0]
 80123b4:	881c      	ldrh	r4, [r3, #0]
                        PH_TOOLS_PARITY_OPTION_ODD ,
                        *ppRxBuffer,
                        *pRxLength,
                        (uint8_t)pDataParams->wAdditionalInfo,
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
                    statusTmp = phTools_DecodeParity(
 80123ba:	b2dd      	uxtb	r5, r3
 80123bc:	683b      	ldr	r3, [r7, #0]
 80123be:	881b      	ldrh	r3, [r3, #0]
 80123c0:	687a      	ldr	r2, [r7, #4]
 80123c2:	6812      	ldr	r2, [r2, #0]
 80123c4:	f107 0117 	add.w	r1, r7, #23
 80123c8:	9103      	str	r1, [sp, #12]
 80123ca:	f107 0122 	add.w	r1, r7, #34	@ 0x22
 80123ce:	9102      	str	r1, [sp, #8]
 80123d0:	9201      	str	r2, [sp, #4]
 80123d2:	9300      	str	r3, [sp, #0]
 80123d4:	462b      	mov	r3, r5
 80123d6:	4622      	mov	r2, r4
 80123d8:	4601      	mov	r1, r0
 80123da:	2001      	movs	r0, #1
 80123dc:	f7f4 f882 	bl	80064e4 <phTools_DecodeParity>
 80123e0:	4603      	mov	r3, r0
 80123e2:	867b      	strh	r3, [r7, #50]	@ 0x32
                        *ppRxBuffer,
                        &wTmpBufferLen,
                        &bBitlen);

                    /* Return error if there is a Parity error */
                    if ((statusTmp & PH_ERR_MASK) != PH_ERR_SUCCESS)
 80123e4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80123e6:	b2db      	uxtb	r3, r3
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d003      	beq.n	80123f4 <phhalHw_Pn5180_Receive_Int+0x40c>
                    {
                        status = statusTmp & PH_ERR_MASK;
 80123ec:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80123ee:	b2db      	uxtb	r3, r3
 80123f0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                        break;
 80123f2:	e039      	b.n	8012468 <phhalHw_Pn5180_Receive_Int+0x480>
                    }
                }
                /* Check for response length
                * For Type 1 tag, valid minimum response length is 4 */
                if((wTmpBufferLen >= 4U) && (ppRxBuffer != NULL) && (pRxLength != NULL))
 80123f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80123f6:	2b03      	cmp	r3, #3
 80123f8:	d933      	bls.n	8012462 <phhalHw_Pn5180_Receive_Int+0x47a>
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d030      	beq.n	8012462 <phhalHw_Pn5180_Receive_Int+0x47a>
 8012400:	683b      	ldr	r3, [r7, #0]
 8012402:	2b00      	cmp	r3, #0
 8012404:	d02d      	beq.n	8012462 <phhalHw_Pn5180_Receive_Int+0x47a>
                {
                    /*verify Crc_B for the received data*/
                    PH_CHECK_SUCCESS_FCT(statusTmp,phTools_ComputeCrc_B( *ppRxBuffer, wTmpBufferLen-2, aCrc));
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801240c:	3a02      	subs	r2, #2
 801240e:	4611      	mov	r1, r2
 8012410:	f107 0214 	add.w	r2, r7, #20
 8012414:	4618      	mov	r0, r3
 8012416:	f7f4 f9e4 	bl	80067e2 <phTools_ComputeCrc_B>
 801241a:	4603      	mov	r3, r0
 801241c:	867b      	strh	r3, [r7, #50]	@ 0x32
 801241e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8012420:	2b00      	cmp	r3, #0
 8012422:	d001      	beq.n	8012428 <phhalHw_Pn5180_Receive_Int+0x440>
 8012424:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8012426:	e03b      	b.n	80124a0 <phhalHw_Pn5180_Receive_Int+0x4b8>
                    if((aCrc[0] != ((*ppRxBuffer)[wTmpBufferLen - 2U])) || (aCrc[1] != ((*ppRxBuffer)[wTmpBufferLen - 1U])))
 8012428:	7d3a      	ldrb	r2, [r7, #20]
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	6819      	ldr	r1, [r3, #0]
 801242e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012430:	3b02      	subs	r3, #2
 8012432:	440b      	add	r3, r1
 8012434:	781b      	ldrb	r3, [r3, #0]
 8012436:	429a      	cmp	r2, r3
 8012438:	d108      	bne.n	801244c <phhalHw_Pn5180_Receive_Int+0x464>
 801243a:	7d7a      	ldrb	r2, [r7, #21]
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	6819      	ldr	r1, [r3, #0]
 8012440:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012442:	3b01      	subs	r3, #1
 8012444:	440b      	add	r3, r1
 8012446:	781b      	ldrb	r3, [r3, #0]
 8012448:	429a      	cmp	r2, r3
 801244a:	d002      	beq.n	8012452 <phhalHw_Pn5180_Receive_Int+0x46a>
                    {
                        status = PH_ERR_INTEGRITY_ERROR;
 801244c:	2302      	movs	r3, #2
 801244e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                        break;
 8012450:	e00a      	b.n	8012468 <phhalHw_Pn5180_Receive_Int+0x480>
                    }
                    else
                    {
                        /* subtract CRC from Rx buffer */
                        *pRxLength = wTmpBufferLen - 2U;
 8012452:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012454:	3b02      	subs	r3, #2
 8012456:	b29a      	uxth	r2, r3
 8012458:	683b      	ldr	r3, [r7, #0]
 801245a:	801a      	strh	r2, [r3, #0]
                        status = PH_ERR_SUCCESS;
 801245c:	2300      	movs	r3, #0
 801245e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                    if((aCrc[0] != ((*ppRxBuffer)[wTmpBufferLen - 2U])) || (aCrc[1] != ((*ppRxBuffer)[wTmpBufferLen - 1U])))
 8012460:	e002      	b.n	8012468 <phhalHw_Pn5180_Receive_Int+0x480>
                    }
                }
                else
                {
                    status = PH_ERR_PROTOCOL_ERROR;
 8012462:	2306      	movs	r3, #6
 8012464:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                    break;
 8012466:	bf00      	nop
                }
            }while (FALSE);
        }

        if (wTmpBufferLen > PHHAL_HW_PN5180_MAX_FSD)  // Frame Size > FSD
 8012468:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801246a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801246e:	d907      	bls.n	8012480 <phhalHw_Pn5180_Receive_Int+0x498>
        {
            status = PH_ERR_BUFFER_OVERFLOW;
 8012470:	2304      	movs	r3, #4
 8012472:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (wTmpBufferLen > PHHAL_HW_PN5180_MAX_FSD)  // Frame Size > FSD
 8012474:	e004      	b.n	8012480 <phhalHw_Pn5180_Receive_Int+0x498>
        }
    }
    else
    {
        if(PH_ERR_SUCCESS == status)
 8012476:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012478:	2b00      	cmp	r3, #0
 801247a:	d101      	bne.n	8012480 <phhalHw_Pn5180_Receive_Int+0x498>
        {
            status = PH_ERR_INTERNAL_ERROR;
 801247c:	237f      	movs	r3, #127	@ 0x7f
 801247e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        }
    }

    return PH_ADD_COMPCODE(status, PH_COMP_HAL);
 8012480:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012482:	2b00      	cmp	r3, #0
 8012484:	d00b      	beq.n	801249e <phhalHw_Pn5180_Receive_Int+0x4b6>
 8012486:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012488:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801248c:	2b00      	cmp	r3, #0
 801248e:	d106      	bne.n	801249e <phhalHw_Pn5180_Receive_Int+0x4b6>
 8012490:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012492:	b2db      	uxtb	r3, r3
 8012494:	b29b      	uxth	r3, r3
 8012496:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801249a:	b29b      	uxth	r3, r3
 801249c:	e000      	b.n	80124a0 <phhalHw_Pn5180_Receive_Int+0x4b8>
 801249e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
}
 80124a0:	4618      	mov	r0, r3
 80124a2:	3740      	adds	r7, #64	@ 0x40
 80124a4:	46bd      	mov	sp, r7
 80124a6:	bdb0      	pop	{r4, r5, r7, pc}

080124a8 <phhalHw_Pn5180_Int_IdleCommand>:

phStatus_t phhalHw_Pn5180_Int_IdleCommand(phhalHw_Pn5180_DataParams_t * pDataParams)
{
 80124a8:	b580      	push	{r7, lr}
 80124aa:	b084      	sub	sp, #16
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(
 80124b0:	f06f 0207 	mvn.w	r2, #7
 80124b4:	2100      	movs	r1, #0
 80124b6:	6878      	ldr	r0, [r7, #4]
 80124b8:	f7fd fe20 	bl	80100fc <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 80124bc:	4603      	mov	r3, r0
 80124be:	81fb      	strh	r3, [r7, #14]
 80124c0:	89fb      	ldrh	r3, [r7, #14]
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d001      	beq.n	80124ca <phhalHw_Pn5180_Int_IdleCommand+0x22>
 80124c6:	89fb      	ldrh	r3, [r7, #14]
 80124c8:	e00c      	b.n	80124e4 <phhalHw_Pn5180_Int_IdleCommand+0x3c>
        pDataParams,
        SYSTEM_CONFIG,
        (uint32_t)~(SYSTEM_CONFIG_COMMAND_MASK)));
#ifndef _WIN32
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, IRQ_SET_CLEAR_IDLE_IRQ_CLR_MASK));
 80124ca:	2204      	movs	r2, #4
 80124cc:	2103      	movs	r1, #3
 80124ce:	6878      	ldr	r0, [r7, #4]
 80124d0:	f7fd fd28 	bl	800ff24 <phhalHw_Pn5180_Instr_WriteRegister>
 80124d4:	4603      	mov	r3, r0
 80124d6:	81fb      	strh	r3, [r7, #14]
 80124d8:	89fb      	ldrh	r3, [r7, #14]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d001      	beq.n	80124e2 <phhalHw_Pn5180_Int_IdleCommand+0x3a>
 80124de:	89fb      	ldrh	r3, [r7, #14]
 80124e0:	e000      	b.n	80124e4 <phhalHw_Pn5180_Int_IdleCommand+0x3c>
#endif

    return PH_ERR_SUCCESS;
 80124e2:	2300      	movs	r3, #0
}
 80124e4:	4618      	mov	r0, r3
 80124e6:	3710      	adds	r7, #16
 80124e8:	46bd      	mov	sp, r7
 80124ea:	bd80      	pop	{r7, pc}

080124ec <phhalHw_Pn5180_Int_LoadCommand>:

phStatus_t phhalHw_Pn5180_Int_LoadCommand(phhalHw_Pn5180_DataParams_t * pDataParams, uint8_t bCmd)
{
 80124ec:	b580      	push	{r7, lr}
 80124ee:	b088      	sub	sp, #32
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	6078      	str	r0, [r7, #4]
 80124f4:	460b      	mov	r3, r1
 80124f6:	70fb      	strb	r3, [r7, #3]

    uint8_t     PH_MEMLOC_BUF wRegTypeValueSets[12];
    uint16_t    PH_MEMLOC_REM wSizeOfRegTypeValueSets;
    uint32_t    PH_MEMLOC_REM dwTemp;

    wSizeOfRegTypeValueSets = 0U;
 80124f8:	2300      	movs	r3, #0
 80124fa:	83fb      	strh	r3, [r7, #30]

    /*Clear the Bits of TX_CONFIG_TX_STOP_SYMBOL_MASK*/
    dwTemp = (uint32_t) ~( SYSTEM_CONFIG_COMMAND_MASK );
 80124fc:	f06f 0307 	mvn.w	r3, #7
 8012500:	61bb      	str	r3, [r7, #24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = SYSTEM_CONFIG;
 8012502:	8bfb      	ldrh	r3, [r7, #30]
 8012504:	1c5a      	adds	r2, r3, #1
 8012506:	83fa      	strh	r2, [r7, #30]
 8012508:	3320      	adds	r3, #32
 801250a:	443b      	add	r3, r7
 801250c:	2200      	movs	r2, #0
 801250e:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 8012512:	8bfb      	ldrh	r3, [r7, #30]
 8012514:	1c5a      	adds	r2, r3, #1
 8012516:	83fa      	strh	r2, [r7, #30]
 8012518:	3320      	adds	r3, #32
 801251a:	443b      	add	r3, r7
 801251c:	2203      	movs	r2, #3
 801251e:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 8012522:	8bfb      	ldrh	r3, [r7, #30]
 8012524:	1c5a      	adds	r2, r3, #1
 8012526:	83fa      	strh	r2, [r7, #30]
 8012528:	69ba      	ldr	r2, [r7, #24]
 801252a:	b2d2      	uxtb	r2, r2
 801252c:	3320      	adds	r3, #32
 801252e:	443b      	add	r3, r7
 8012530:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 8012534:	69bb      	ldr	r3, [r7, #24]
 8012536:	0a1a      	lsrs	r2, r3, #8
 8012538:	8bfb      	ldrh	r3, [r7, #30]
 801253a:	1c59      	adds	r1, r3, #1
 801253c:	83f9      	strh	r1, [r7, #30]
 801253e:	b2d2      	uxtb	r2, r2
 8012540:	3320      	adds	r3, #32
 8012542:	443b      	add	r3, r7
 8012544:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 8012548:	69bb      	ldr	r3, [r7, #24]
 801254a:	0c1a      	lsrs	r2, r3, #16
 801254c:	8bfb      	ldrh	r3, [r7, #30]
 801254e:	1c59      	adds	r1, r3, #1
 8012550:	83f9      	strh	r1, [r7, #30]
 8012552:	b2d2      	uxtb	r2, r2
 8012554:	3320      	adds	r3, #32
 8012556:	443b      	add	r3, r7
 8012558:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 801255c:	69bb      	ldr	r3, [r7, #24]
 801255e:	0e1a      	lsrs	r2, r3, #24
 8012560:	8bfb      	ldrh	r3, [r7, #30]
 8012562:	1c59      	adds	r1, r3, #1
 8012564:	83f9      	strh	r1, [r7, #30]
 8012566:	b2d2      	uxtb	r2, r2
 8012568:	3320      	adds	r3, #32
 801256a:	443b      	add	r3, r7
 801256c:	f803 2c18 	strb.w	r2, [r3, #-24]

    /*Set the new value  */
    dwTemp = ((uint32_t)bCmd & SYSTEM_CONFIG_COMMAND_MASK);
 8012570:	78fb      	ldrb	r3, [r7, #3]
 8012572:	f003 0307 	and.w	r3, r3, #7
 8012576:	61bb      	str	r3, [r7, #24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = SYSTEM_CONFIG;
 8012578:	8bfb      	ldrh	r3, [r7, #30]
 801257a:	1c5a      	adds	r2, r3, #1
 801257c:	83fa      	strh	r2, [r7, #30]
 801257e:	3320      	adds	r3, #32
 8012580:	443b      	add	r3, r7
 8012582:	2200      	movs	r2, #0
 8012584:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 8012588:	8bfb      	ldrh	r3, [r7, #30]
 801258a:	1c5a      	adds	r2, r3, #1
 801258c:	83fa      	strh	r2, [r7, #30]
 801258e:	3320      	adds	r3, #32
 8012590:	443b      	add	r3, r7
 8012592:	2202      	movs	r2, #2
 8012594:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 8012598:	8bfb      	ldrh	r3, [r7, #30]
 801259a:	1c5a      	adds	r2, r3, #1
 801259c:	83fa      	strh	r2, [r7, #30]
 801259e:	69ba      	ldr	r2, [r7, #24]
 80125a0:	b2d2      	uxtb	r2, r2
 80125a2:	3320      	adds	r3, #32
 80125a4:	443b      	add	r3, r7
 80125a6:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 80125aa:	69bb      	ldr	r3, [r7, #24]
 80125ac:	0a1a      	lsrs	r2, r3, #8
 80125ae:	8bfb      	ldrh	r3, [r7, #30]
 80125b0:	1c59      	adds	r1, r3, #1
 80125b2:	83f9      	strh	r1, [r7, #30]
 80125b4:	b2d2      	uxtb	r2, r2
 80125b6:	3320      	adds	r3, #32
 80125b8:	443b      	add	r3, r7
 80125ba:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 80125be:	69bb      	ldr	r3, [r7, #24]
 80125c0:	0c1a      	lsrs	r2, r3, #16
 80125c2:	8bfb      	ldrh	r3, [r7, #30]
 80125c4:	1c59      	adds	r1, r3, #1
 80125c6:	83f9      	strh	r1, [r7, #30]
 80125c8:	b2d2      	uxtb	r2, r2
 80125ca:	3320      	adds	r3, #32
 80125cc:	443b      	add	r3, r7
 80125ce:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 80125d2:	69bb      	ldr	r3, [r7, #24]
 80125d4:	0e1a      	lsrs	r2, r3, #24
 80125d6:	8bfb      	ldrh	r3, [r7, #30]
 80125d8:	1c59      	adds	r1, r3, #1
 80125da:	83f9      	strh	r1, [r7, #30]
 80125dc:	b2d2      	uxtb	r2, r2
 80125de:	3320      	adds	r3, #32
 80125e0:	443b      	add	r3, r7
 80125e2:	f803 2c18 	strb.w	r2, [r3, #-24]

    /*Send the array to the IC*/
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 80125e6:	8bfa      	ldrh	r2, [r7, #30]
 80125e8:	f107 0308 	add.w	r3, r7, #8
 80125ec:	4619      	mov	r1, r3
 80125ee:	6878      	ldr	r0, [r7, #4]
 80125f0:	f7fd fdfa 	bl	80101e8 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 80125f4:	4603      	mov	r3, r0
 80125f6:	82fb      	strh	r3, [r7, #22]
 80125f8:	8afb      	ldrh	r3, [r7, #22]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d001      	beq.n	8012602 <phhalHw_Pn5180_Int_LoadCommand+0x116>
 80125fe:	8afb      	ldrh	r3, [r7, #22]
 8012600:	e000      	b.n	8012604 <phhalHw_Pn5180_Int_LoadCommand+0x118>

    return PH_ERR_SUCCESS;
 8012602:	2300      	movs	r3, #0

}
 8012604:	4618      	mov	r0, r3
 8012606:	3720      	adds	r7, #32
 8012608:	46bd      	mov	sp, r7
 801260a:	bd80      	pop	{r7, pc}

0801260c <phhalHw_Pn5180_WaitIrq>:
    uint8_t bEnableIrq,
    uint8_t bWaitUntilPowerUp,
    uint32_t dwIrqWaitFor,
    uint32_t * dwIrqReg
    )
{
 801260c:	b580      	push	{r7, lr}
 801260e:	b08a      	sub	sp, #40	@ 0x28
 8012610:	af02      	add	r7, sp, #8
 8012612:	60f8      	str	r0, [r7, #12]
 8012614:	607b      	str	r3, [r7, #4]
 8012616:	460b      	mov	r3, r1
 8012618:	72fb      	strb	r3, [r7, #11]
 801261a:	4613      	mov	r3, r2
 801261c:	72bb      	strb	r3, [r7, #10]
    phStatus_t PH_MEMLOC_REM statusTmp;
    uint32_t   PH_MEMLOC_REM dwRegister;
    phOsal_EventBits_t PH_MEMLOC_REM tReceivedEvents;

    // debug below----
    printf("WaitIrq: bEnableIrq=0x%02X, dwIrqWaitFor=0x%08X\n", bEnableIrq, dwIrqWaitFor);
 801261e:	7afb      	ldrb	r3, [r7, #11]
 8012620:	687a      	ldr	r2, [r7, #4]
 8012622:	4619      	mov	r1, r3
 8012624:	4869      	ldr	r0, [pc, #420]	@ (80127cc <phhalHw_Pn5180_WaitIrq+0x1c0>)
 8012626:	f00a fc0b 	bl	801ce40 <iprintf>

    // debug top----

    /* Parameter check */
    if (0U == (dwIrqWaitFor))
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	2b00      	cmp	r3, #0
 801262e:	d102      	bne.n	8012636 <phhalHw_Pn5180_WaitIrq+0x2a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 8012630:	f240 237f 	movw	r3, #639	@ 0x27f
 8012634:	e0c5      	b.n	80127c2 <phhalHw_Pn5180_WaitIrq+0x1b6>
        /* Need to add power up behaviour */
    }

    /* If Test Bus is enabled, we should not relay on IRQ Pin
     * instead poll on IRQ Status register. */
    if ( pDataParams->bIsTestBusEnabled == PH_ON)
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 801263c:	2b01      	cmp	r3, #1
 801263e:	d103      	bne.n	8012648 <phhalHw_Pn5180_WaitIrq+0x3c>
    {
        /* Test Bus is enabled */
        bEnableIrq &= (uint8_t)~(uint8_t)PHHAL_HW_CHECK_IRQ_PIN_MASK;
 8012640:	7afb      	ldrb	r3, [r7, #11]
 8012642:	f023 0301 	bic.w	r3, r3, #1
 8012646:	72fb      	strb	r3, [r7, #11]
    }

    /* If requested by the user, enable the corresponding IRQs */
    if ((bEnableIrq & PHHAL_HW_CHECK_IRQ_PIN_MASK) != PH_OFF)
 8012648:	7afb      	ldrb	r3, [r7, #11]
 801264a:	f003 0301 	and.w	r3, r3, #1
 801264e:	2b00      	cmp	r3, #0
 8012650:	d075      	beq.n	801273e <phhalHw_Pn5180_WaitIrq+0x132>
    {
    	printf("Using IRQ PIN mode\n"); //debug
 8012652:	485f      	ldr	r0, [pc, #380]	@ (80127d0 <phhalHw_Pn5180_WaitIrq+0x1c4>)
 8012654:	f00a fc64 	bl	801cf20 <puts>
        /*wait for IRQ pin event or Abort event*/

        {
            statusTmp = phOsal_EventPend((volatile phOsal_Event_t * )(&pDataParams->HwEventObj.EventHandle), E_OS_EVENT_OPT_PEND_SET_ANY, PHOSAL_MAX_DELAY,
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 801265e:	f107 0314 	add.w	r3, r7, #20
 8012662:	9300      	str	r3, [sp, #0]
 8012664:	2321      	movs	r3, #33	@ 0x21
 8012666:	f04f 32ff 	mov.w	r2, #4294967295
 801266a:	2101      	movs	r1, #1
 801266c:	f004 fc76 	bl	8016f5c <phOsal_EventPend>
 8012670:	4603      	mov	r3, r0
 8012672:	83fb      	strh	r3, [r7, #30]
                (E_PH_OSAL_EVT_RF | E_PH_OSAL_EVT_ABORT), &tReceivedEvents);
        }

        /*Handle abort event*/
        if ((E_PH_OSAL_EVT_ABORT & tReceivedEvents) || (statusTmp != PH_ERR_SUCCESS))
 8012674:	697b      	ldr	r3, [r7, #20]
 8012676:	f003 0320 	and.w	r3, r3, #32
 801267a:	2b00      	cmp	r3, #0
 801267c:	d102      	bne.n	8012684 <phhalHw_Pn5180_WaitIrq+0x78>
 801267e:	8bfb      	ldrh	r3, [r7, #30]
 8012680:	2b00      	cmp	r3, #0
 8012682:	d022      	beq.n	80126ca <phhalHw_Pn5180_WaitIrq+0xbe>
        {

            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Int_IdleCommand(pDataParams));
 8012684:	68f8      	ldr	r0, [r7, #12]
 8012686:	f7ff ff0f 	bl	80124a8 <phhalHw_Pn5180_Int_IdleCommand>
 801268a:	4603      	mov	r3, r0
 801268c:	83fb      	strh	r3, [r7, #30]
 801268e:	8bfb      	ldrh	r3, [r7, #30]
 8012690:	2b00      	cmp	r3, #0
 8012692:	d001      	beq.n	8012698 <phhalHw_Pn5180_WaitIrq+0x8c>
 8012694:	8bfb      	ldrh	r3, [r7, #30]
 8012696:	e094      	b.n	80127c2 <phhalHw_Pn5180_WaitIrq+0x1b6>

            /* Disable IRQ sources */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, IRQ_ENABLE, (uint32_t)~dwIrqWaitFor));
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	43db      	mvns	r3, r3
 801269c:	461a      	mov	r2, r3
 801269e:	2101      	movs	r1, #1
 80126a0:	68f8      	ldr	r0, [r7, #12]
 80126a2:	f7fd fd2b 	bl	80100fc <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 80126a6:	4603      	mov	r3, r0
 80126a8:	83fb      	strh	r3, [r7, #30]
 80126aa:	8bfb      	ldrh	r3, [r7, #30]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d001      	beq.n	80126b4 <phhalHw_Pn5180_WaitIrq+0xa8>
 80126b0:	8bfb      	ldrh	r3, [r7, #30]
 80126b2:	e086      	b.n	80127c2 <phhalHw_Pn5180_WaitIrq+0x1b6>

            (void)phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_ABORT, NULL);
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 80126ba:	2300      	movs	r3, #0
 80126bc:	2220      	movs	r2, #32
 80126be:	2100      	movs	r1, #0
 80126c0:	f004 fd18 	bl	80170f4 <phOsal_EventClear>
            return PH_ADD_COMPCODE_FIXED(PH_ERR_ABORTED, PH_COMP_HAL);
 80126c4:	f240 2312 	movw	r3, #530	@ 0x212
 80126c8:	e07b      	b.n	80127c2 <phhalHw_Pn5180_WaitIrq+0x1b6>
        }
        else
        {
            /* Read the IRQ register and check if the interrupt has occured */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegister(pDataParams, IRQ_STATUS, &dwRegister));
 80126ca:	f107 0318 	add.w	r3, r7, #24
 80126ce:	461a      	mov	r2, r3
 80126d0:	2102      	movs	r1, #2
 80126d2:	68f8      	ldr	r0, [r7, #12]
 80126d4:	f7fd fe3a 	bl	801034c <phhalHw_Pn5180_Instr_ReadRegister>
 80126d8:	4603      	mov	r3, r0
 80126da:	83fb      	strh	r3, [r7, #30]
 80126dc:	8bfb      	ldrh	r3, [r7, #30]
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d001      	beq.n	80126e6 <phhalHw_Pn5180_WaitIrq+0xda>
 80126e2:	8bfb      	ldrh	r3, [r7, #30]
 80126e4:	e06d      	b.n	80127c2 <phhalHw_Pn5180_WaitIrq+0x1b6>

            /* Store the state of status register */
            *dwIrqReg = dwRegister;
 80126e6:	69ba      	ldr	r2, [r7, #24]
 80126e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126ea:	601a      	str	r2, [r3, #0]

            if ((bEnableIrq & PHHAL_HW_DISABLE_IRQ_CLEAR_MASK) == PH_OFF)
 80126ec:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	db0c      	blt.n	801270e <phhalHw_Pn5180_WaitIrq+0x102>
            {
                /* Clear all Interrupts for e.g Tx interrupt during receive */
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, dwRegister));
 80126f4:	69bb      	ldr	r3, [r7, #24]
 80126f6:	461a      	mov	r2, r3
 80126f8:	2103      	movs	r1, #3
 80126fa:	68f8      	ldr	r0, [r7, #12]
 80126fc:	f7fd fc12 	bl	800ff24 <phhalHw_Pn5180_Instr_WriteRegister>
 8012700:	4603      	mov	r3, r0
 8012702:	83fb      	strh	r3, [r7, #30]
 8012704:	8bfb      	ldrh	r3, [r7, #30]
 8012706:	2b00      	cmp	r3, #0
 8012708:	d001      	beq.n	801270e <phhalHw_Pn5180_WaitIrq+0x102>
 801270a:	8bfb      	ldrh	r3, [r7, #30]
 801270c:	e059      	b.n	80127c2 <phhalHw_Pn5180_WaitIrq+0x1b6>
            }
            /* Disable IRQ sources */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, IRQ_ENABLE, (uint32_t)~dwIrqWaitFor));
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	43db      	mvns	r3, r3
 8012712:	461a      	mov	r2, r3
 8012714:	2101      	movs	r1, #1
 8012716:	68f8      	ldr	r0, [r7, #12]
 8012718:	f7fd fcf0 	bl	80100fc <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 801271c:	4603      	mov	r3, r0
 801271e:	83fb      	strh	r3, [r7, #30]
 8012720:	8bfb      	ldrh	r3, [r7, #30]
 8012722:	2b00      	cmp	r3, #0
 8012724:	d001      	beq.n	801272a <phhalHw_Pn5180_WaitIrq+0x11e>
 8012726:	8bfb      	ldrh	r3, [r7, #30]
 8012728:	e04b      	b.n	80127c2 <phhalHw_Pn5180_WaitIrq+0x1b6>

            (void)phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL);
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 8012730:	2300      	movs	r3, #0
 8012732:	2201      	movs	r2, #1
 8012734:	2100      	movs	r1, #0
 8012736:	f004 fcdd 	bl	80170f4 <phOsal_EventClear>

            return PH_ERR_SUCCESS;
 801273a:	2300      	movs	r3, #0
 801273c:	e041      	b.n	80127c2 <phhalHw_Pn5180_WaitIrq+0x1b6>
        /* Wait until any of the IRQ bits that we are subscribing for occurs */
        do
        {
            /* If Test Bus is enabled, we should avoid polling on registers
             * continuously as we put SPI noise on RF. */
            if ( pDataParams->bIsTestBusEnabled == PH_ON)
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 8012744:	2b01      	cmp	r3, #1
 8012746:	d114      	bne.n	8012772 <phhalHw_Pn5180_WaitIrq+0x166>
            {
                if (pDataParams->wWaitIRQDelayWithTestBus == 0x00U)
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	f8b3 3182 	ldrh.w	r3, [r3, #386]	@ 0x182
 801274e:	2b00      	cmp	r3, #0
 8012750:	d106      	bne.n	8012760 <phhalHw_Pn5180_WaitIrq+0x154>
                {
                    /* Wait for atleast 1milli sec. */
                    phDriver_TimerStart(PH_DRIVER_TIMER_MILLI_SECS, 0x01U, NULL);
 8012752:	2200      	movs	r2, #0
 8012754:	2101      	movs	r1, #1
 8012756:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801275a:	f004 fab7 	bl	8016ccc <phDriver_TimerStart>
 801275e:	e008      	b.n	8012772 <phhalHw_Pn5180_WaitIrq+0x166>
                }
                else
                {
                    phDriver_TimerStart(PH_DRIVER_TIMER_MILLI_SECS, pDataParams->wWaitIRQDelayWithTestBus, NULL);
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	f8b3 3182 	ldrh.w	r3, [r3, #386]	@ 0x182
 8012766:	2200      	movs	r2, #0
 8012768:	4619      	mov	r1, r3
 801276a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801276e:	f004 faad 	bl	8016ccc <phDriver_TimerStart>
                }
            }

            /* Read the IRQ register and check if the interrupt has occured */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegister(pDataParams, IRQ_STATUS, &dwRegister));
 8012772:	f107 0318 	add.w	r3, r7, #24
 8012776:	461a      	mov	r2, r3
 8012778:	2102      	movs	r1, #2
 801277a:	68f8      	ldr	r0, [r7, #12]
 801277c:	f7fd fde6 	bl	801034c <phhalHw_Pn5180_Instr_ReadRegister>
 8012780:	4603      	mov	r3, r0
 8012782:	83fb      	strh	r3, [r7, #30]
 8012784:	8bfb      	ldrh	r3, [r7, #30]
 8012786:	2b00      	cmp	r3, #0
 8012788:	d001      	beq.n	801278e <phhalHw_Pn5180_WaitIrq+0x182>
 801278a:	8bfb      	ldrh	r3, [r7, #30]
 801278c:	e019      	b.n	80127c2 <phhalHw_Pn5180_WaitIrq+0x1b6>
        }while((0U == ((dwRegister & dwIrqWaitFor))));
 801278e:	69ba      	ldr	r2, [r7, #24]
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	4013      	ands	r3, r2
 8012794:	2b00      	cmp	r3, #0
 8012796:	d0d2      	beq.n	801273e <phhalHw_Pn5180_WaitIrq+0x132>

        /* Store the state of status register */
        *dwIrqReg = dwRegister;
 8012798:	69ba      	ldr	r2, [r7, #24]
 801279a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801279c:	601a      	str	r2, [r3, #0]

        if ((bEnableIrq & PHHAL_HW_DISABLE_IRQ_CLEAR_MASK) == PH_OFF)
 801279e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	db0c      	blt.n	80127c0 <phhalHw_Pn5180_WaitIrq+0x1b4>
        {
            /* Clear all Interrupts for e.g Tx interrupt during receive */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, dwRegister));
 80127a6:	69bb      	ldr	r3, [r7, #24]
 80127a8:	461a      	mov	r2, r3
 80127aa:	2103      	movs	r1, #3
 80127ac:	68f8      	ldr	r0, [r7, #12]
 80127ae:	f7fd fbb9 	bl	800ff24 <phhalHw_Pn5180_Instr_WriteRegister>
 80127b2:	4603      	mov	r3, r0
 80127b4:	83fb      	strh	r3, [r7, #30]
 80127b6:	8bfb      	ldrh	r3, [r7, #30]
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d001      	beq.n	80127c0 <phhalHw_Pn5180_WaitIrq+0x1b4>
 80127bc:	8bfb      	ldrh	r3, [r7, #30]
 80127be:	e000      	b.n	80127c2 <phhalHw_Pn5180_WaitIrq+0x1b6>
        }
    }

    return PH_ERR_SUCCESS;
 80127c0:	2300      	movs	r3, #0

}
 80127c2:	4618      	mov	r0, r3
 80127c4:	3720      	adds	r7, #32
 80127c6:	46bd      	mov	sp, r7
 80127c8:	bd80      	pop	{r7, pc}
 80127ca:	bf00      	nop
 80127cc:	0801f8b4 	.word	0x0801f8b4
 80127d0:	0801f8e8 	.word	0x0801f8e8

080127d4 <phpalFelica_Sw_Init>:
phStatus_t phpalFelica_Sw_Init(
                               phpalFelica_Sw_DataParams_t * pDataParams,
                               uint16_t wSizeOfDataParams,
                               void * pHalDataParams
                               )
{
 80127d4:	b480      	push	{r7}
 80127d6:	b085      	sub	sp, #20
 80127d8:	af00      	add	r7, sp, #0
 80127da:	60f8      	str	r0, [r7, #12]
 80127dc:	460b      	mov	r3, r1
 80127de:	607a      	str	r2, [r7, #4]
 80127e0:	817b      	strh	r3, [r7, #10]
    /* parameter structure length check */
    if (sizeof(phpalFelica_Sw_DataParams_t) != wSizeOfDataParams)
 80127e2:	897b      	ldrh	r3, [r7, #10]
 80127e4:	2b20      	cmp	r3, #32
 80127e6:	d002      	beq.n	80127ee <phpalFelica_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_FELICA);
 80127e8:	f44f 6302 	mov.w	r3, #2080	@ 0x820
 80127ec:	e01d      	b.n	801282a <phpalFelica_Sw_Init+0x56>
    }
    PH_ASSERT_NULL (pDataParams);
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d101      	bne.n	80127f8 <phpalFelica_Sw_Init+0x24>
 80127f4:	2321      	movs	r3, #33	@ 0x21
 80127f6:	e018      	b.n	801282a <phpalFelica_Sw_Init+0x56>
    PH_ASSERT_NULL (pHalDataParams);
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d101      	bne.n	8012802 <phpalFelica_Sw_Init+0x2e>
 80127fe:	2321      	movs	r3, #33	@ 0x21
 8012800:	e013      	b.n	801282a <phpalFelica_Sw_Init+0x56>

    /* init private data */
    pDataParams->wId            = PH_COMP_PAL_FELICA | PHPAL_FELICA_SW_ID;
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	f640 0201 	movw	r2, #2049	@ 0x801
 8012808:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams = pHalDataParams;
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	687a      	ldr	r2, [r7, #4]
 801280e:	605a      	str	r2, [r3, #4]
    pDataParams->bIDmPMmValid   = PHPAL_FELICA_SW_IDMPMM_INVALID;
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	2200      	movs	r2, #0
 8012814:	769a      	strb	r2, [r3, #26]
    pDataParams->bLength        = 0x00;
 8012816:	68fb      	ldr	r3, [r7, #12]
 8012818:	2200      	movs	r2, #0
 801281a:	76da      	strb	r2, [r3, #27]
    pDataParams->bRequestCode   = 0x00;
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	2200      	movs	r2, #0
 8012820:	771a      	strb	r2, [r3, #28]
    pDataParams->bPreambleLen   = PHPAL_FELICA_PREAMBLE_LEN_48BITS;
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	2200      	movs	r2, #0
 8012826:	779a      	strb	r2, [r3, #30]

    return PH_ERR_SUCCESS;
 8012828:	2300      	movs	r3, #0
}
 801282a:	4618      	mov	r0, r3
 801282c:	3714      	adds	r7, #20
 801282e:	46bd      	mov	sp, r7
 8012830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012834:	4770      	bx	lr
	...

08012838 <phpalFelica_Sw_ReqC>:
                               uint8_t * pSystemCode,
                               uint8_t  bNumTimeSlots,
                               uint8_t ** ppRxBuffer,
                               uint16_t * pRxLength
                               )
{
 8012838:	b580      	push	{r7, lr}
 801283a:	b08c      	sub	sp, #48	@ 0x30
 801283c:	af02      	add	r7, sp, #8
 801283e:	60f8      	str	r0, [r7, #12]
 8012840:	60b9      	str	r1, [r7, #8]
 8012842:	603b      	str	r3, [r7, #0]
 8012844:	4613      	mov	r3, r2
 8012846:	71fb      	strb	r3, [r7, #7]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aCmd[6];
    uint8_t *   PH_MEMLOC_REM pRxBufferTmp = NULL;
 8012848:	2300      	movs	r3, #0
 801284a:	617b      	str	r3, [r7, #20]
    uint16_t    PH_MEMLOC_REM wRxLengthTmp = 0;
 801284c:	2300      	movs	r3, #0
 801284e:	827b      	strh	r3, [r7, #18]
    uint16_t    PH_MEMLOC_REM wTimeOutUs;
    uint16_t    PH_MEMLOC_REM wCardType = 0;
 8012850:	2300      	movs	r3, #0
 8012852:	823b      	strh	r3, [r7, #16]
    uint16_t    PH_MEMLOC_REM wTR1ValueUs;

    /* Reset IDm, PMm and RD data*/
    (void)memset(pDataParams->aIDmPMm, 0x00, (PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH + PHPAL_FELICA_RD_LENGTH));
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	3308      	adds	r3, #8
 8012858:	2212      	movs	r2, #18
 801285a:	2100      	movs	r1, #0
 801285c:	4618      	mov	r0, r3
 801285e:	f00a fc4f 	bl	801d100 <memset>
    /* Reset validity of stored card IDs */
    pDataParams->bIDmPMmValid = PHPAL_FELICA_SW_IDMPMM_INVALID;
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	2200      	movs	r2, #0
 8012866:	769a      	strb	r2, [r3, #26]

    /* Reset received frame count */
    pDataParams->bTotalFrames = 0;
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	2200      	movs	r2, #0
 801286c:	775a      	strb	r2, [r3, #29]

    /* parameter check and timeout setting */
    if(!((bNumTimeSlots == PHPAL_FELICA_NUMSLOTS_1) ||
 801286e:	79fb      	ldrb	r3, [r7, #7]
 8012870:	2b00      	cmp	r3, #0
 8012872:	d00e      	beq.n	8012892 <phpalFelica_Sw_ReqC+0x5a>
 8012874:	79fb      	ldrb	r3, [r7, #7]
 8012876:	2b01      	cmp	r3, #1
 8012878:	d00b      	beq.n	8012892 <phpalFelica_Sw_ReqC+0x5a>
        (bNumTimeSlots == PHPAL_FELICA_NUMSLOTS_2) ||
 801287a:	79fb      	ldrb	r3, [r7, #7]
 801287c:	2b03      	cmp	r3, #3
 801287e:	d008      	beq.n	8012892 <phpalFelica_Sw_ReqC+0x5a>
        (bNumTimeSlots == PHPAL_FELICA_NUMSLOTS_4) ||
 8012880:	79fb      	ldrb	r3, [r7, #7]
 8012882:	2b07      	cmp	r3, #7
 8012884:	d005      	beq.n	8012892 <phpalFelica_Sw_ReqC+0x5a>
    if(!((bNumTimeSlots == PHPAL_FELICA_NUMSLOTS_1) ||
 8012886:	79fb      	ldrb	r3, [r7, #7]
 8012888:	2b0f      	cmp	r3, #15
 801288a:	d002      	beq.n	8012892 <phpalFelica_Sw_ReqC+0x5a>
        (bNumTimeSlots == PHPAL_FELICA_NUMSLOTS_8) ||
        (bNumTimeSlots == PHPAL_FELICA_NUMSLOTS_16))
      )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_FELICA);
 801288c:	f640 0321 	movw	r3, #2081	@ 0x821
 8012890:	e0e2      	b.n	8012a58 <phpalFelica_Sw_ReqC+0x220>
    }
    else
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	685b      	ldr	r3, [r3, #4]
 8012896:	f107 0210 	add.w	r2, r7, #16
 801289a:	2121      	movs	r1, #33	@ 0x21
 801289c:	4618      	mov	r0, r3
 801289e:	f7fc f985 	bl	800ebac <phhalHw_Pn5180_GetConfig>
 80128a2:	4603      	mov	r3, r0
 80128a4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80128a6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d001      	beq.n	80128b0 <phpalFelica_Sw_ReqC+0x78>
 80128ac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80128ae:	e0d3      	b.n	8012a58 <phpalFelica_Sw_ReqC+0x220>
            PHHAL_HW_CONFIG_CARD_TYPE,
            &wCardType));
        /* NFC Forum Digital Protocol Technical Specification v2.3
         * 8.7.1.3 : wTimeOutUs = FDTF,LISTEN,SENSF_REQ(TSN+1U) - TR1 + (delta)TF,POLL
         * Using TR1 value @212kbps */
        if ((wCardType != PHHAL_HW_CARDTYPE_FELICA_212) && (wCardType != PHHAL_HW_CARDTYPE_FELICA_424))
 80128b0:	8a3b      	ldrh	r3, [r7, #16]
 80128b2:	2b03      	cmp	r3, #3
 80128b4:	d005      	beq.n	80128c2 <phpalFelica_Sw_ReqC+0x8a>
 80128b6:	8a3b      	ldrh	r3, [r7, #16]
 80128b8:	2b0a      	cmp	r3, #10
 80128ba:	d002      	beq.n	80128c2 <phpalFelica_Sw_ReqC+0x8a>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_PAL_FELICA);
 80128bc:	f640 0325 	movw	r3, #2085	@ 0x825
 80128c0:	e0ca      	b.n	8012a58 <phpalFelica_Sw_ReqC+0x220>
        }

        if (wCardType == PHHAL_HW_CARDTYPE_FELICA_212)
 80128c2:	8a3b      	ldrh	r3, [r7, #16]
 80128c4:	2b03      	cmp	r3, #3
 80128c6:	d107      	bne.n	80128d8 <phpalFelica_Sw_ReqC+0xa0>
        {
            wTR1ValueUs = aFelica_TR1_Value_Us[pDataParams->bPreambleLen][0];
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	7f9b      	ldrb	r3, [r3, #30]
 80128cc:	461a      	mov	r2, r3
 80128ce:	4b64      	ldr	r3, [pc, #400]	@ (8012a60 <phpalFelica_Sw_ReqC+0x228>)
 80128d0:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 80128d4:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80128d6:	e006      	b.n	80128e6 <phpalFelica_Sw_ReqC+0xae>
        }
        else
        {
            wTR1ValueUs = aFelica_TR1_Value_Us[pDataParams->bPreambleLen][1];
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	7f9b      	ldrb	r3, [r3, #30]
 80128dc:	4a60      	ldr	r2, [pc, #384]	@ (8012a60 <phpalFelica_Sw_ReqC+0x228>)
 80128de:	009b      	lsls	r3, r3, #2
 80128e0:	4413      	add	r3, r2
 80128e2:	885b      	ldrh	r3, [r3, #2]
 80128e4:	84bb      	strh	r3, [r7, #36]	@ 0x24
        }

        wTimeOutUs = FDTF_LISTEN_SENSF_REQ((((uint16_t)bNumTimeSlots) + 1U), wTR1ValueUs) - wTR1ValueUs + PHPAL_FELICA_SW_T_DELTA_F_POLL_US;
 80128e6:	79fb      	ldrb	r3, [r7, #7]
 80128e8:	b29b      	uxth	r3, r3
 80128ea:	461a      	mov	r2, r3
 80128ec:	0092      	lsls	r2, r2, #2
 80128ee:	441a      	add	r2, r3
 80128f0:	4611      	mov	r1, r2
 80128f2:	0109      	lsls	r1, r1, #4
 80128f4:	1a8a      	subs	r2, r1, r2
 80128f6:	0052      	lsls	r2, r2, #1
 80128f8:	4413      	add	r3, r2
 80128fa:	00db      	lsls	r3, r3, #3
 80128fc:	b29b      	uxth	r3, r3
 80128fe:	f603 632a 	addw	r3, r3, #3626	@ 0xe2a
 8012902:	847b      	strh	r3, [r7, #34]	@ 0x22
    }

    /* build the command frame */
    aCmd[0] = 6;
 8012904:	2306      	movs	r3, #6
 8012906:	763b      	strb	r3, [r7, #24]
    aCmd[1] = PHPAL_FELICA_SW_CMD_REQC;
 8012908:	2300      	movs	r3, #0
 801290a:	767b      	strb	r3, [r7, #25]
    aCmd[2] = pSystemCode[0];
 801290c:	68bb      	ldr	r3, [r7, #8]
 801290e:	781b      	ldrb	r3, [r3, #0]
 8012910:	76bb      	strb	r3, [r7, #26]
    aCmd[3] = pSystemCode[1];
 8012912:	68bb      	ldr	r3, [r7, #8]
 8012914:	785b      	ldrb	r3, [r3, #1]
 8012916:	76fb      	strb	r3, [r7, #27]
    aCmd[4] = pDataParams->bRequestCode;
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	7f1b      	ldrb	r3, [r3, #28]
 801291c:	773b      	strb	r3, [r7, #28]
    aCmd[5] = bNumTimeSlots;
 801291e:	79fb      	ldrb	r3, [r7, #7]
 8012920:	777b      	strb	r3, [r7, #29]

    /* Set ReqC timeout according to the number of slots */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	685b      	ldr	r3, [r3, #4]
 8012926:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8012928:	210d      	movs	r1, #13
 801292a:	4618      	mov	r0, r3
 801292c:	f7fa fcf0 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8012930:	4603      	mov	r3, r0
 8012932:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8012934:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012936:	2b00      	cmp	r3, #0
 8012938:	d001      	beq.n	801293e <phpalFelica_Sw_ReqC+0x106>
 801293a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801293c:	e08c      	b.n	8012a58 <phpalFelica_Sw_ReqC+0x220>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
        wTimeOutUs));

    if(bNumTimeSlots > PHPAL_FELICA_NUMSLOTS_1)
 801293e:	79fb      	ldrb	r3, [r7, #7]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d00d      	beq.n	8012960 <phpalFelica_Sw_ReqC+0x128>
    {
        /* Set RX Multiple feature of HW */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	685b      	ldr	r3, [r3, #4]
 8012948:	2201      	movs	r2, #1
 801294a:	2153      	movs	r1, #83	@ 0x53
 801294c:	4618      	mov	r0, r3
 801294e:	f7fa fcdf 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8012952:	4603      	mov	r3, r0
 8012954:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8012956:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012958:	2b00      	cmp	r3, #0
 801295a:	d001      	beq.n	8012960 <phpalFelica_Sw_ReqC+0x128>
 801295c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801295e:	e07b      	b.n	8012a58 <phpalFelica_Sw_ReqC+0x220>
                PHHAL_HW_CONFIG_RXMULTIPLE,
                PH_ON));
    }

    /* Exchange command */
     status = phhalHw_Exchange(
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	6858      	ldr	r0, [r3, #4]
 8012964:	f107 0218 	add.w	r2, r7, #24
 8012968:	f107 0312 	add.w	r3, r7, #18
 801296c:	9301      	str	r3, [sp, #4]
 801296e:	f107 0314 	add.w	r3, r7, #20
 8012972:	9300      	str	r3, [sp, #0]
 8012974:	2306      	movs	r3, #6
 8012976:	2100      	movs	r1, #0
 8012978:	f7fa f94a 	bl	800cc10 <phhalHw_Pn5180_Exchange>
 801297c:	4603      	mov	r3, r0
 801297e:	843b      	strh	r3, [r7, #32]
        aCmd,
        6,
        &pRxBufferTmp,
        &wRxLengthTmp);

    if(bNumTimeSlots > PHPAL_FELICA_NUMSLOTS_1)
 8012980:	79fb      	ldrb	r3, [r7, #7]
 8012982:	2b00      	cmp	r3, #0
 8012984:	d00d      	beq.n	80129a2 <phpalFelica_Sw_ReqC+0x16a>
    {
        /* Re-Set RX Multiple feature of HW */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8012986:	68fb      	ldr	r3, [r7, #12]
 8012988:	685b      	ldr	r3, [r3, #4]
 801298a:	2200      	movs	r2, #0
 801298c:	2153      	movs	r1, #83	@ 0x53
 801298e:	4618      	mov	r0, r3
 8012990:	f7fa fcbe 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8012994:	4603      	mov	r3, r0
 8012996:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8012998:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801299a:	2b00      	cmp	r3, #0
 801299c:	d001      	beq.n	80129a2 <phpalFelica_Sw_ReqC+0x16a>
 801299e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80129a0:	e05a      	b.n	8012a58 <phpalFelica_Sw_ReqC+0x220>
                PHHAL_HW_CONFIG_RXMULTIPLE,
                PH_OFF));
    }

    /* Error check */
    PH_CHECK_SUCCESS(status);
 80129a2:	8c3b      	ldrh	r3, [r7, #32]
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d001      	beq.n	80129ac <phpalFelica_Sw_ReqC+0x174>
 80129a8:	8c3b      	ldrh	r3, [r7, #32]
 80129aa:	e055      	b.n	8012a58 <phpalFelica_Sw_ReqC+0x220>

    /* Check length and update info*/
    if(bNumTimeSlots > PHPAL_FELICA_NUMSLOTS_1)
 80129ac:	79fb      	ldrb	r3, [r7, #7]
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d015      	beq.n	80129de <phpalFelica_Sw_ReqC+0x1a6>
    {
        /* Rx Length should be multiple of response frame size */
        if(0U != (wRxLengthTmp % PHPAL_FELICA_SW_RESP_FRAME_SIZE))
 80129b2:	8a7b      	ldrh	r3, [r7, #18]
 80129b4:	f003 031f 	and.w	r3, r3, #31
 80129b8:	b29b      	uxth	r3, r3
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d002      	beq.n	80129c4 <phpalFelica_Sw_ReqC+0x18c>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_FELICA);
 80129be:	f640 0306 	movw	r3, #2054	@ 0x806
 80129c2:	e049      	b.n	8012a58 <phpalFelica_Sw_ReqC+0x220>
        }
        /* assign and update IDm and PMm and length */
        *ppRxBuffer = pRxBufferTmp;
 80129c4:	697a      	ldr	r2, [r7, #20]
 80129c6:	683b      	ldr	r3, [r7, #0]
 80129c8:	601a      	str	r2, [r3, #0]
        *pRxLength = wRxLengthTmp;
 80129ca:	8a7a      	ldrh	r2, [r7, #18]
 80129cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129ce:	801a      	strh	r2, [r3, #0]

        pDataParams->bTotalFrames = (uint8_t)(wRxLengthTmp / PHPAL_FELICA_SW_RESP_FRAME_SIZE);
 80129d0:	8a7b      	ldrh	r3, [r7, #18]
 80129d2:	095b      	lsrs	r3, r3, #5
 80129d4:	b29b      	uxth	r3, r3
 80129d6:	b2da      	uxtb	r2, r3
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	775a      	strb	r2, [r3, #29]
 80129dc:	e038      	b.n	8012a50 <phpalFelica_Sw_ReqC+0x218>
    }
    else
    {
        if (((wRxLengthTmp != (PHPAL_FELICA_ATQC_LENGTH + 1U)) &&
 80129de:	8a7b      	ldrh	r3, [r7, #18]
 80129e0:	2b12      	cmp	r3, #18
 80129e2:	d002      	beq.n	80129ea <phpalFelica_Sw_ReqC+0x1b2>
            (wRxLengthTmp != (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_RD_LENGTH + 1U))) ||
 80129e4:	8a7b      	ldrh	r3, [r7, #18]
        if (((wRxLengthTmp != (PHPAL_FELICA_ATQC_LENGTH + 1U)) &&
 80129e6:	2b14      	cmp	r3, #20
 80129e8:	d10a      	bne.n	8012a00 <phpalFelica_Sw_ReqC+0x1c8>
            (pRxBufferTmp[0] != wRxLengthTmp) ||
 80129ea:	697b      	ldr	r3, [r7, #20]
 80129ec:	781b      	ldrb	r3, [r3, #0]
 80129ee:	461a      	mov	r2, r3
 80129f0:	8a7b      	ldrh	r3, [r7, #18]
            (wRxLengthTmp != (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_RD_LENGTH + 1U))) ||
 80129f2:	429a      	cmp	r2, r3
 80129f4:	d104      	bne.n	8012a00 <phpalFelica_Sw_ReqC+0x1c8>
            (pRxBufferTmp[1] != PHPAL_FELICA_SW_RSP_REQC))
 80129f6:	697b      	ldr	r3, [r7, #20]
 80129f8:	3301      	adds	r3, #1
 80129fa:	781b      	ldrb	r3, [r3, #0]
            (pRxBufferTmp[0] != wRxLengthTmp) ||
 80129fc:	2b01      	cmp	r3, #1
 80129fe:	d002      	beq.n	8012a06 <phpalFelica_Sw_ReqC+0x1ce>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_FELICA);
 8012a00:	f640 0306 	movw	r3, #2054	@ 0x806
 8012a04:	e028      	b.n	8012a58 <phpalFelica_Sw_ReqC+0x220>
        }

        /* RC = 0 and card response with RD information */
        if((wRxLengthTmp == (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_RD_LENGTH + 1U)) && (pDataParams->bRequestCode == 0U))
 8012a06:	8a7b      	ldrh	r3, [r7, #18]
 8012a08:	2b14      	cmp	r3, #20
 8012a0a:	d106      	bne.n	8012a1a <phpalFelica_Sw_ReqC+0x1e2>
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	7f1b      	ldrb	r3, [r3, #28]
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d102      	bne.n	8012a1a <phpalFelica_Sw_ReqC+0x1e2>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_FELICA);
 8012a14:	f640 0306 	movw	r3, #2054	@ 0x806
 8012a18:	e01e      	b.n	8012a58 <phpalFelica_Sw_ReqC+0x220>
        }
        /* Store IDm and PMm */
        (void)memcpy(pDataParams->aIDmPMm, &pRxBufferTmp[2], (((uint32_t)(pRxBufferTmp[0])) - 2U));
 8012a1a:	68fb      	ldr	r3, [r7, #12]
 8012a1c:	f103 0008 	add.w	r0, r3, #8
 8012a20:	697b      	ldr	r3, [r7, #20]
 8012a22:	1c99      	adds	r1, r3, #2
 8012a24:	697b      	ldr	r3, [r7, #20]
 8012a26:	781b      	ldrb	r3, [r3, #0]
 8012a28:	3b02      	subs	r3, #2
 8012a2a:	461a      	mov	r2, r3
 8012a2c:	f00a fbe7 	bl	801d1fe <memcpy>
        pDataParams->bIDmPMmValid = PHPAL_FELICA_SW_IDMPMM_VALID;
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	2201      	movs	r2, #1
 8012a34:	769a      	strb	r2, [r3, #26]

        /* Remove LEN Byte and Response Byte from response and assign start position of ID */
        *ppRxBuffer = &pRxBufferTmp[PHPAL_FELICA_SW_LEN_BYTE_SIZE + PHPAL_FELICA_SW_RESP_REQC_SIZE];
 8012a36:	697b      	ldr	r3, [r7, #20]
 8012a38:	1c9a      	adds	r2, r3, #2
 8012a3a:	683b      	ldr	r3, [r7, #0]
 8012a3c:	601a      	str	r2, [r3, #0]
        *pRxLength = (uint16_t)(((uint16_t)pRxBufferTmp[0]) - (PHPAL_FELICA_SW_LEN_BYTE_SIZE + PHPAL_FELICA_SW_RESP_REQC_SIZE));
 8012a3e:	697b      	ldr	r3, [r7, #20]
 8012a40:	781b      	ldrb	r3, [r3, #0]
 8012a42:	3b02      	subs	r3, #2
 8012a44:	b29a      	uxth	r2, r3
 8012a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a48:	801a      	strh	r2, [r3, #0]

        pDataParams->bTotalFrames = 1;
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	2201      	movs	r2, #1
 8012a4e:	775a      	strb	r2, [r3, #29]
    }

    pDataParams->bIDmPMmValid = PHPAL_FELICA_SW_IDMPMM_VALID;
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	2201      	movs	r2, #1
 8012a54:	769a      	strb	r2, [r3, #26]

    return PH_ERR_SUCCESS;
 8012a56:	2300      	movs	r3, #0
}
 8012a58:	4618      	mov	r0, r3
 8012a5a:	3728      	adds	r7, #40	@ 0x28
 8012a5c:	46bd      	mov	sp, r7
 8012a5e:	bd80      	pop	{r7, pc}
 8012a60:	0802034c 	.word	0x0802034c

08012a64 <phpalFelica_Sw_GetFrameInfo>:
                                        uint8_t * pResponseBuffer,
                                        uint16_t *pwStatus,
                                        uint8_t** ppID,
                                        uint8_t * pLen
                                        )
{
 8012a64:	b480      	push	{r7}
 8012a66:	b087      	sub	sp, #28
 8012a68:	af00      	add	r7, sp, #0
 8012a6a:	60f8      	str	r0, [r7, #12]
 8012a6c:	607a      	str	r2, [r7, #4]
 8012a6e:	603b      	str	r3, [r7, #0]
 8012a70:	460b      	mov	r3, r1
 8012a72:	72fb      	strb	r3, [r7, #11]
    uint8_t PH_MEMLOC_REM       bError;
    uint8_t PH_MEMLOC_REM       bStartPos;

    /* check frame number */
    if((bFrameNum > pDataParams->bTotalFrames) || (bFrameNum == 0U))
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	7f5b      	ldrb	r3, [r3, #29]
 8012a78:	7afa      	ldrb	r2, [r7, #11]
 8012a7a:	429a      	cmp	r2, r3
 8012a7c:	d802      	bhi.n	8012a84 <phpalFelica_Sw_GetFrameInfo+0x20>
 8012a7e:	7afb      	ldrb	r3, [r7, #11]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d102      	bne.n	8012a8a <phpalFelica_Sw_GetFrameInfo+0x26>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_FELICA);
 8012a84:	f640 0321 	movw	r3, #2081	@ 0x821
 8012a88:	e06f      	b.n	8012b6a <phpalFelica_Sw_GetFrameInfo+0x106>
    }

    *pwStatus = PH_ERR_SUCCESS;
 8012a8a:	683b      	ldr	r3, [r7, #0]
 8012a8c:	2200      	movs	r2, #0
 8012a8e:	801a      	strh	r2, [r3, #0]

    /* get start position of frame */
    bStartPos = (uint8_t)(PHPAL_FELICA_SW_RESP_FRAME_SIZE * (bFrameNum - 1U));
 8012a90:	7afb      	ldrb	r3, [r7, #11]
 8012a92:	3b01      	subs	r3, #1
 8012a94:	b2db      	uxtb	r3, r3
 8012a96:	015b      	lsls	r3, r3, #5
 8012a98:	75fb      	strb	r3, [r7, #23]

    /* Check length */
    if( ((pResponseBuffer[bStartPos + PHHAL_HW_STATUS_FRAME_LEN_BYTE_POS] != (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_SW_LEN_BYTE_SIZE)) &&
 8012a9a:	7dfb      	ldrb	r3, [r7, #23]
 8012a9c:	331c      	adds	r3, #28
 8012a9e:	687a      	ldr	r2, [r7, #4]
 8012aa0:	4413      	add	r3, r2
 8012aa2:	781b      	ldrb	r3, [r3, #0]
 8012aa4:	2b12      	cmp	r3, #18
 8012aa6:	d006      	beq.n	8012ab6 <phpalFelica_Sw_GetFrameInfo+0x52>
        (pResponseBuffer[bStartPos + PHHAL_HW_STATUS_FRAME_LEN_BYTE_POS] != (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_RD_LENGTH + PHPAL_FELICA_SW_LEN_BYTE_SIZE))) ||
 8012aa8:	7dfb      	ldrb	r3, [r7, #23]
 8012aaa:	331c      	adds	r3, #28
 8012aac:	687a      	ldr	r2, [r7, #4]
 8012aae:	4413      	add	r3, r2
 8012ab0:	781b      	ldrb	r3, [r3, #0]
    if( ((pResponseBuffer[bStartPos + PHHAL_HW_STATUS_FRAME_LEN_BYTE_POS] != (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_SW_LEN_BYTE_SIZE)) &&
 8012ab2:	2b14      	cmp	r3, #20
 8012ab4:	d106      	bne.n	8012ac4 <phpalFelica_Sw_GetFrameInfo+0x60>
        (pResponseBuffer[bStartPos + 1U] != PHPAL_FELICA_SW_RSP_REQC))
 8012ab6:	7dfb      	ldrb	r3, [r7, #23]
 8012ab8:	3301      	adds	r3, #1
 8012aba:	687a      	ldr	r2, [r7, #4]
 8012abc:	4413      	add	r3, r2
 8012abe:	781b      	ldrb	r3, [r3, #0]
        (pResponseBuffer[bStartPos + PHHAL_HW_STATUS_FRAME_LEN_BYTE_POS] != (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_RD_LENGTH + PHPAL_FELICA_SW_LEN_BYTE_SIZE))) ||
 8012ac0:	2b01      	cmp	r3, #1
 8012ac2:	d002      	beq.n	8012aca <phpalFelica_Sw_GetFrameInfo+0x66>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_FELICA);
 8012ac4:	f640 0306 	movw	r3, #2054	@ 0x806
 8012ac8:	e04f      	b.n	8012b6a <phpalFelica_Sw_GetFrameInfo+0x106>
    }

    /* RC = 0 and card response with RD information */
    if((pResponseBuffer[bStartPos + PHHAL_HW_STATUS_FRAME_LEN_BYTE_POS] == (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_RD_LENGTH + PHPAL_FELICA_SW_LEN_BYTE_SIZE)) && (pDataParams->bRequestCode == 0U))
 8012aca:	7dfb      	ldrb	r3, [r7, #23]
 8012acc:	331c      	adds	r3, #28
 8012ace:	687a      	ldr	r2, [r7, #4]
 8012ad0:	4413      	add	r3, r2
 8012ad2:	781b      	ldrb	r3, [r3, #0]
 8012ad4:	2b14      	cmp	r3, #20
 8012ad6:	d106      	bne.n	8012ae6 <phpalFelica_Sw_GetFrameInfo+0x82>
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	7f1b      	ldrb	r3, [r3, #28]
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d102      	bne.n	8012ae6 <phpalFelica_Sw_GetFrameInfo+0x82>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_FELICA);
 8012ae0:	f640 0306 	movw	r3, #2054	@ 0x806
 8012ae4:	e041      	b.n	8012b6a <phpalFelica_Sw_GetFrameInfo+0x106>
    }

    /* Extract error from Status byte */
    bError = pResponseBuffer[(bStartPos) + PHHAL_HW_STATUS_FRAME_ERR_BYTE_POS ] & PHHAL_HW_STATUS_FRAME_ERR_MASK;
 8012ae6:	7dfb      	ldrb	r3, [r7, #23]
 8012ae8:	331d      	adds	r3, #29
 8012aea:	687a      	ldr	r2, [r7, #4]
 8012aec:	4413      	add	r3, r2
 8012aee:	781b      	ldrb	r3, [r3, #0]
 8012af0:	f003 031f 	and.w	r3, r3, #31
 8012af4:	75bb      	strb	r3, [r7, #22]

    if(bError != 0x00U)
 8012af6:	7dbb      	ldrb	r3, [r7, #22]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d026      	beq.n	8012b4a <phpalFelica_Sw_GetFrameInfo+0xe6>
    {
        /* check for contact less error */
        if(0U != (bError & PHHAL_HW_STATUS_FRAME_CL_ERR_POS))
 8012afc:	7dbb      	ldrb	r3, [r7, #22]
 8012afe:	f003 0301 	and.w	r3, r3, #1
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d01d      	beq.n	8012b42 <phpalFelica_Sw_GetFrameInfo+0xde>
        {
            /* check for protocol error */
            if(0U != (bError & PHHAL_HW_STATUS_FRAME_PROT_ERR_POS))
 8012b06:	7dbb      	ldrb	r3, [r7, #22]
 8012b08:	f003 0304 	and.w	r3, r3, #4
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d003      	beq.n	8012b18 <phpalFelica_Sw_GetFrameInfo+0xb4>
            {
                *pwStatus = PH_ERR_PROTOCOL_ERROR;
 8012b10:	683b      	ldr	r3, [r7, #0]
 8012b12:	2206      	movs	r2, #6
 8012b14:	801a      	strh	r2, [r3, #0]
 8012b16:	e027      	b.n	8012b68 <phpalFelica_Sw_GetFrameInfo+0x104>
            }
            /* check for collision error */
            else if(0U != (bError & PHHAL_HW_STATUS_FRAME_COLL_ERR_POS))
 8012b18:	7dbb      	ldrb	r3, [r7, #22]
 8012b1a:	f003 0308 	and.w	r3, r3, #8
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d003      	beq.n	8012b2a <phpalFelica_Sw_GetFrameInfo+0xc6>
            {
                *pwStatus = PH_ERR_COLLISION_ERROR;
 8012b22:	683b      	ldr	r3, [r7, #0]
 8012b24:	2203      	movs	r2, #3
 8012b26:	801a      	strh	r2, [r3, #0]
 8012b28:	e01e      	b.n	8012b68 <phpalFelica_Sw_GetFrameInfo+0x104>
            }
            /* check for Integrity error */
            else if(0U != (bError & PHHAL_HW_STATUS_FRAME_DATA_ERR_POS))
 8012b2a:	7dbb      	ldrb	r3, [r7, #22]
 8012b2c:	f003 0302 	and.w	r3, r3, #2
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d003      	beq.n	8012b3c <phpalFelica_Sw_GetFrameInfo+0xd8>
            {
                *pwStatus = PH_ERR_INTEGRITY_ERROR;
 8012b34:	683b      	ldr	r3, [r7, #0]
 8012b36:	2202      	movs	r2, #2
 8012b38:	801a      	strh	r2, [r3, #0]
 8012b3a:	e015      	b.n	8012b68 <phpalFelica_Sw_GetFrameInfo+0x104>
            }
            else
            {
                /* If CL Error is set and no Protocol, Collision, Integrity flag is set */
                return (PH_ERR_PROTOCOL_ERROR | PH_COMP_PAL_FELICA);
 8012b3c:	f640 0306 	movw	r3, #2054	@ 0x806
 8012b40:	e013      	b.n	8012b6a <phpalFelica_Sw_GetFrameInfo+0x106>
            }
        }
        else
        {   /* Length error */
            *pwStatus = PH_ERR_LENGTH_ERROR;
 8012b42:	683b      	ldr	r3, [r7, #0]
 8012b44:	220c      	movs	r2, #12
 8012b46:	801a      	strh	r2, [r3, #0]
 8012b48:	e00e      	b.n	8012b68 <phpalFelica_Sw_GetFrameInfo+0x104>

    }
    else
    {
      /* Remove LEN Byte and Response Byte (0x01) from response and assign start position of ID */
      *ppID = &pResponseBuffer[bStartPos + (PHPAL_FELICA_SW_LEN_BYTE_SIZE + PHPAL_FELICA_SW_RESP_REQC_SIZE)];
 8012b4a:	7dfb      	ldrb	r3, [r7, #23]
 8012b4c:	3302      	adds	r3, #2
 8012b4e:	687a      	ldr	r2, [r7, #4]
 8012b50:	441a      	add	r2, r3
 8012b52:	6a3b      	ldr	r3, [r7, #32]
 8012b54:	601a      	str	r2, [r3, #0]
      *pLen = pResponseBuffer[bStartPos + PHHAL_HW_STATUS_FRAME_LEN_BYTE_POS] - (PHPAL_FELICA_SW_LEN_BYTE_SIZE + PHPAL_FELICA_SW_RESP_REQC_SIZE);
 8012b56:	7dfb      	ldrb	r3, [r7, #23]
 8012b58:	331c      	adds	r3, #28
 8012b5a:	687a      	ldr	r2, [r7, #4]
 8012b5c:	4413      	add	r3, r2
 8012b5e:	781b      	ldrb	r3, [r3, #0]
 8012b60:	3b02      	subs	r3, #2
 8012b62:	b2da      	uxtb	r2, r3
 8012b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b66:	701a      	strb	r2, [r3, #0]
    }

    return PH_ERR_SUCCESS;
 8012b68:	2300      	movs	r3, #0
}
 8012b6a:	4618      	mov	r0, r3
 8012b6c:	371c      	adds	r7, #28
 8012b6e:	46bd      	mov	sp, r7
 8012b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b74:	4770      	bx	lr

08012b76 <phpalFelica_Sw_SetSerialNo>:

phStatus_t phpalFelica_Sw_SetSerialNo(
                                      phpalFelica_Sw_DataParams_t * pDataParams,
                                      uint8_t * pIDmPMm
                                      )
{
 8012b76:	b580      	push	{r7, lr}
 8012b78:	b082      	sub	sp, #8
 8012b7a:	af00      	add	r7, sp, #0
 8012b7c:	6078      	str	r0, [r7, #4]
 8012b7e:	6039      	str	r1, [r7, #0]

    pDataParams->bIDmPMmValid = PHPAL_FELICA_SW_IDMPMM_VALID;
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	2201      	movs	r2, #1
 8012b84:	769a      	strb	r2, [r3, #26]
    /* copy IDm and PMm */
    (void)memcpy(pDataParams->aIDmPMm, pIDmPMm, (PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH));
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	3308      	adds	r3, #8
 8012b8a:	2210      	movs	r2, #16
 8012b8c:	6839      	ldr	r1, [r7, #0]
 8012b8e:	4618      	mov	r0, r3
 8012b90:	f00a fb35 	bl	801d1fe <memcpy>

    return PH_ERR_SUCCESS;
 8012b94:	2300      	movs	r3, #0

}
 8012b96:	4618      	mov	r0, r3
 8012b98:	3708      	adds	r7, #8
 8012b9a:	46bd      	mov	sp, r7
 8012b9c:	bd80      	pop	{r7, pc}

08012b9e <phpalFelica_Sw_SetConfig>:
phStatus_t phpalFelica_Sw_SetConfig(
                                    phpalFelica_Sw_DataParams_t* pDataParams,
                                    uint16_t wConfig,
                                    uint16_t wValue
                                    )
{
 8012b9e:	b480      	push	{r7}
 8012ba0:	b083      	sub	sp, #12
 8012ba2:	af00      	add	r7, sp, #0
 8012ba4:	6078      	str	r0, [r7, #4]
 8012ba6:	460b      	mov	r3, r1
 8012ba8:	807b      	strh	r3, [r7, #2]
 8012baa:	4613      	mov	r3, r2
 8012bac:	803b      	strh	r3, [r7, #0]
    switch(wConfig)
 8012bae:	887b      	ldrh	r3, [r7, #2]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d002      	beq.n	8012bba <phpalFelica_Sw_SetConfig+0x1c>
 8012bb4:	2b02      	cmp	r3, #2
 8012bb6:	d00c      	beq.n	8012bd2 <phpalFelica_Sw_SetConfig+0x34>
 8012bb8:	e01f      	b.n	8012bfa <phpalFelica_Sw_SetConfig+0x5c>
    {
    case PHPAL_FELICA_CONFIG_RC:
        if ((uint8_t)wValue > 0x02U)
 8012bba:	883b      	ldrh	r3, [r7, #0]
 8012bbc:	b2db      	uxtb	r3, r3
 8012bbe:	2b02      	cmp	r3, #2
 8012bc0:	d902      	bls.n	8012bc8 <phpalFelica_Sw_SetConfig+0x2a>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_FELICA);
 8012bc2:	f640 0321 	movw	r3, #2081	@ 0x821
 8012bc6:	e01c      	b.n	8012c02 <phpalFelica_Sw_SetConfig+0x64>
        }
        pDataParams->bRequestCode = (uint8_t)(wValue);
 8012bc8:	883b      	ldrh	r3, [r7, #0]
 8012bca:	b2da      	uxtb	r2, r3
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	771a      	strb	r2, [r3, #28]
        break;
 8012bd0:	e016      	b.n	8012c00 <phpalFelica_Sw_SetConfig+0x62>

    case PHPAL_FELICA_PREAMBLE_LENGTH:
        if(!((wValue == PHPAL_FELICA_PREAMBLE_LEN_48BITS) ||
 8012bd2:	883b      	ldrh	r3, [r7, #0]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d00b      	beq.n	8012bf0 <phpalFelica_Sw_SetConfig+0x52>
 8012bd8:	883b      	ldrh	r3, [r7, #0]
 8012bda:	2b02      	cmp	r3, #2
 8012bdc:	d008      	beq.n	8012bf0 <phpalFelica_Sw_SetConfig+0x52>
            (wValue == PHPAL_FELICA_PREAMBLE_LEN_56BITS) ||
 8012bde:	883b      	ldrh	r3, [r7, #0]
 8012be0:	2b03      	cmp	r3, #3
 8012be2:	d005      	beq.n	8012bf0 <phpalFelica_Sw_SetConfig+0x52>
        if(!((wValue == PHPAL_FELICA_PREAMBLE_LEN_48BITS) ||
 8012be4:	883b      	ldrh	r3, [r7, #0]
 8012be6:	2b04      	cmp	r3, #4
 8012be8:	d002      	beq.n	8012bf0 <phpalFelica_Sw_SetConfig+0x52>
            (wValue == PHPAL_FELICA_PREAMBLE_LEN_64BITS) ||
            (wValue == PHPAL_FELICA_PREAMBLE_LEN_72BITS))
          )
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_FELICA);
 8012bea:	f640 0321 	movw	r3, #2081	@ 0x821
 8012bee:	e008      	b.n	8012c02 <phpalFelica_Sw_SetConfig+0x64>
        }
        pDataParams->bPreambleLen = (uint8_t)(wValue);
 8012bf0:	883b      	ldrh	r3, [r7, #0]
 8012bf2:	b2da      	uxtb	r2, r3
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	779a      	strb	r2, [r3, #30]
        break;
 8012bf8:	e002      	b.n	8012c00 <phpalFelica_Sw_SetConfig+0x62>

    default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_FELICA);
 8012bfa:	f640 0323 	movw	r3, #2083	@ 0x823
 8012bfe:	e000      	b.n	8012c02 <phpalFelica_Sw_SetConfig+0x64>
    }

    return PH_ERR_SUCCESS;
 8012c00:	2300      	movs	r3, #0
}
 8012c02:	4618      	mov	r0, r3
 8012c04:	370c      	adds	r7, #12
 8012c06:	46bd      	mov	sp, r7
 8012c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c0c:	4770      	bx	lr

08012c0e <phpalFelica_Sw_GetConfig>:
phStatus_t phpalFelica_Sw_GetConfig(
                                    phpalFelica_Sw_DataParams_t* pDataParams,
                                    uint16_t wConfig,
                                    uint16_t * pValue
                                    )
{
 8012c0e:	b480      	push	{r7}
 8012c10:	b085      	sub	sp, #20
 8012c12:	af00      	add	r7, sp, #0
 8012c14:	60f8      	str	r0, [r7, #12]
 8012c16:	460b      	mov	r3, r1
 8012c18:	607a      	str	r2, [r7, #4]
 8012c1a:	817b      	strh	r3, [r7, #10]
    switch(wConfig)
 8012c1c:	897b      	ldrh	r3, [r7, #10]
 8012c1e:	2b03      	cmp	r3, #3
 8012c20:	d012      	beq.n	8012c48 <phpalFelica_Sw_GetConfig+0x3a>
 8012c22:	2b03      	cmp	r3, #3
 8012c24:	dc26      	bgt.n	8012c74 <phpalFelica_Sw_GetConfig+0x66>
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d002      	beq.n	8012c30 <phpalFelica_Sw_GetConfig+0x22>
 8012c2a:	2b01      	cmp	r3, #1
 8012c2c:	d006      	beq.n	8012c3c <phpalFelica_Sw_GetConfig+0x2e>
 8012c2e:	e021      	b.n	8012c74 <phpalFelica_Sw_GetConfig+0x66>
    {
    case PHPAL_FELICA_CONFIG_RC:
        *pValue = (uint16_t)pDataParams->bRequestCode;
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	7f1b      	ldrb	r3, [r3, #28]
 8012c34:	461a      	mov	r2, r3
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	801a      	strh	r2, [r3, #0]
        break;
 8012c3a:	e01e      	b.n	8012c7a <phpalFelica_Sw_GetConfig+0x6c>

    case PH_PALFELICA_CONFIG_NUM_RESPONSE_FRAMES:
        *pValue = (uint16_t)pDataParams->bTotalFrames;
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	7f5b      	ldrb	r3, [r3, #29]
 8012c40:	461a      	mov	r2, r3
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	801a      	strh	r2, [r3, #0]
        break;
 8012c46:	e018      	b.n	8012c7a <phpalFelica_Sw_GetConfig+0x6c>

    case PHPAL_FELICA_RD:
        if(pDataParams->bIDmPMmValid == PHPAL_FELICA_SW_IDMPMM_VALID)
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	7e9b      	ldrb	r3, [r3, #26]
 8012c4c:	2b01      	cmp	r3, #1
 8012c4e:	d10d      	bne.n	8012c6c <phpalFelica_Sw_GetConfig+0x5e>
        {
            *pValue = (((uint16_t)pDataParams->aIDmPMm[PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH ] << 8U) |
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	7e1b      	ldrb	r3, [r3, #24]
 8012c54:	b21b      	sxth	r3, r3
 8012c56:	021b      	lsls	r3, r3, #8
 8012c58:	b21a      	sxth	r2, r3
                       ((uint16_t)pDataParams->aIDmPMm[PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH + 1U]));
 8012c5a:	68fb      	ldr	r3, [r7, #12]
 8012c5c:	7e5b      	ldrb	r3, [r3, #25]
 8012c5e:	b21b      	sxth	r3, r3
            *pValue = (((uint16_t)pDataParams->aIDmPMm[PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH ] << 8U) |
 8012c60:	4313      	orrs	r3, r2
 8012c62:	b21b      	sxth	r3, r3
 8012c64:	b29a      	uxth	r2, r3
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = 0;
        }
        break;
 8012c6a:	e006      	b.n	8012c7a <phpalFelica_Sw_GetConfig+0x6c>
            *pValue = 0;
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	2200      	movs	r2, #0
 8012c70:	801a      	strh	r2, [r3, #0]
        break;
 8012c72:	e002      	b.n	8012c7a <phpalFelica_Sw_GetConfig+0x6c>

    default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_FELICA);
 8012c74:	f640 0323 	movw	r3, #2083	@ 0x823
 8012c78:	e000      	b.n	8012c7c <phpalFelica_Sw_GetConfig+0x6e>
    }

    return PH_ERR_SUCCESS;
 8012c7a:	2300      	movs	r3, #0
}
 8012c7c:	4618      	mov	r0, r3
 8012c7e:	3714      	adds	r7, #20
 8012c80:	46bd      	mov	sp, r7
 8012c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c86:	4770      	bx	lr

08012c88 <phpalI14443p3a_Sw_Init>:
phStatus_t phpalI14443p3a_Sw_Init(
                                  phpalI14443p3a_Sw_DataParams_t * pDataParams,
                                  uint16_t wSizeOfDataParams,
                                  void * pHalDataParams
                                  )
{
 8012c88:	b480      	push	{r7}
 8012c8a:	b085      	sub	sp, #20
 8012c8c:	af00      	add	r7, sp, #0
 8012c8e:	60f8      	str	r0, [r7, #12]
 8012c90:	460b      	mov	r3, r1
 8012c92:	607a      	str	r2, [r7, #4]
 8012c94:	817b      	strh	r3, [r7, #10]
    if (sizeof(phpalI14443p3a_Sw_DataParams_t) != wSizeOfDataParams)
 8012c96:	897b      	ldrh	r3, [r7, #10]
 8012c98:	2b18      	cmp	r3, #24
 8012c9a:	d002      	beq.n	8012ca2 <phpalI14443p3a_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_ISO14443P3A);
 8012c9c:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8012ca0:	e01d      	b.n	8012cde <phpalI14443p3a_Sw_Init+0x56>
    }
    PH_ASSERT_NULL (pDataParams);
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d101      	bne.n	8012cac <phpalI14443p3a_Sw_Init+0x24>
 8012ca8:	2321      	movs	r3, #33	@ 0x21
 8012caa:	e018      	b.n	8012cde <phpalI14443p3a_Sw_Init+0x56>
    PH_ASSERT_NULL (pHalDataParams);
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d101      	bne.n	8012cb6 <phpalI14443p3a_Sw_Init+0x2e>
 8012cb2:	2321      	movs	r3, #33	@ 0x21
 8012cb4:	e013      	b.n	8012cde <phpalI14443p3a_Sw_Init+0x56>

    /* init private data */
    pDataParams->wId            = PH_COMP_PAL_ISO14443P3A | PHPAL_I14443P3A_SW_ID;
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	f240 3201 	movw	r2, #769	@ 0x301
 8012cbc:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams = pHalDataParams;
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	687a      	ldr	r2, [r7, #4]
 8012cc2:	605a      	str	r2, [r3, #4]
    pDataParams->bUidLength     = 0;
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	2200      	movs	r2, #0
 8012cc8:	749a      	strb	r2, [r3, #18]
    pDataParams->bUidComplete   = 0;
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	2200      	movs	r2, #0
 8012cce:	74da      	strb	r2, [r3, #19]
    pDataParams->bOpeMode       = RD_LIB_MODE_NFC;
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	2202      	movs	r2, #2
 8012cd4:	751a      	strb	r2, [r3, #20]
    pDataParams->bPollCmd       = PHPAL_I14443P3A_USE_REQA;
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	2200      	movs	r2, #0
 8012cda:	755a      	strb	r2, [r3, #21]
    return PH_ERR_SUCCESS;
 8012cdc:	2300      	movs	r3, #0
}
 8012cde:	4618      	mov	r0, r3
 8012ce0:	3714      	adds	r7, #20
 8012ce2:	46bd      	mov	sp, r7
 8012ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce8:	4770      	bx	lr

08012cea <phpalI14443p3a_Sw_SetConfig>:
phStatus_t phpalI14443p3a_Sw_SetConfig(
                                       phpalI14443p3a_Sw_DataParams_t * pDataParams,
                                       uint16_t wConfig,
                                       uint16_t wValue
                                     )
{
 8012cea:	b580      	push	{r7, lr}
 8012cec:	b084      	sub	sp, #16
 8012cee:	af00      	add	r7, sp, #0
 8012cf0:	6078      	str	r0, [r7, #4]
 8012cf2:	460b      	mov	r3, r1
 8012cf4:	807b      	strh	r3, [r7, #2]
 8012cf6:	4613      	mov	r3, r2
 8012cf8:	803b      	strh	r3, [r7, #0]
    phStatus_t PH_MEMLOC_REM statusTmp;

    switch (wConfig)
 8012cfa:	887b      	ldrh	r3, [r7, #2]
 8012cfc:	2b03      	cmp	r3, #3
 8012cfe:	d010      	beq.n	8012d22 <phpalI14443p3a_Sw_SetConfig+0x38>
 8012d00:	2b03      	cmp	r3, #3
 8012d02:	dc1c      	bgt.n	8012d3e <phpalI14443p3a_Sw_SetConfig+0x54>
 8012d04:	2b01      	cmp	r3, #1
 8012d06:	d002      	beq.n	8012d0e <phpalI14443p3a_Sw_SetConfig+0x24>
 8012d08:	2b02      	cmp	r3, #2
 8012d0a:	d005      	beq.n	8012d18 <phpalI14443p3a_Sw_SetConfig+0x2e>
 8012d0c:	e017      	b.n	8012d3e <phpalI14443p3a_Sw_SetConfig+0x54>
    {
    /* Emvco: To Define Running Mode for RdLib: Either Nfc, EMVCO, ISO */
    case PHPAL_I14443P3A_CONFIG_OPE_MODE:
    {
       pDataParams->bOpeMode = (uint8_t)wValue;
 8012d0e:	883b      	ldrh	r3, [r7, #0]
 8012d10:	b2da      	uxtb	r2, r3
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	751a      	strb	r2, [r3, #20]
       break;
 8012d16:	e016      	b.n	8012d46 <phpalI14443p3a_Sw_SetConfig+0x5c>
    }

    case PHPAL_I14443P3A_CONFIG_POLL_CMD:
    {
       pDataParams->bPollCmd = (uint8_t)wValue;
 8012d18:	883b      	ldrh	r3, [r7, #0]
 8012d1a:	b2da      	uxtb	r2, r3
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	755a      	strb	r2, [r3, #21]
       break;
 8012d20:	e011      	b.n	8012d46 <phpalI14443p3a_Sw_SetConfig+0x5c>
    }

    case PHPAL_I14443P3A_CONFIG_TIMEOUT_VALUE_US:
    {
       PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	685b      	ldr	r3, [r3, #4]
 8012d26:	883a      	ldrh	r2, [r7, #0]
 8012d28:	210d      	movs	r1, #13
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	f7fa faf0 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8012d30:	4603      	mov	r3, r0
 8012d32:	81fb      	strh	r3, [r7, #14]
 8012d34:	89fb      	ldrh	r3, [r7, #14]
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d004      	beq.n	8012d44 <phpalI14443p3a_Sw_SetConfig+0x5a>
 8012d3a:	89fb      	ldrh	r3, [r7, #14]
 8012d3c:	e004      	b.n	8012d48 <phpalI14443p3a_Sw_SetConfig+0x5e>
                   wValue));
       break;
    }

    default:
       return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_ISO14443P3A);
 8012d3e:	f240 3323 	movw	r3, #803	@ 0x323
 8012d42:	e001      	b.n	8012d48 <phpalI14443p3a_Sw_SetConfig+0x5e>
       break;
 8012d44:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 8012d46:	2300      	movs	r3, #0

}
 8012d48:	4618      	mov	r0, r3
 8012d4a:	3710      	adds	r7, #16
 8012d4c:	46bd      	mov	sp, r7
 8012d4e:	bd80      	pop	{r7, pc}

08012d50 <phpalI14443p3a_Sw_RequestA>:

phStatus_t phpalI14443p3a_Sw_RequestA(
                                      phpalI14443p3a_Sw_DataParams_t * pDataParams,
                                      uint8_t * pAtqa
                                      )
{
 8012d50:	b580      	push	{r7, lr}
 8012d52:	b082      	sub	sp, #8
 8012d54:	af00      	add	r7, sp, #0
 8012d56:	6078      	str	r0, [r7, #4]
 8012d58:	6039      	str	r1, [r7, #0]
    return phpalI14443p3a_Sw_RequestAEx(pDataParams, PHPAL_I14443P3A_REQUEST_CMD, pAtqa);
 8012d5a:	683a      	ldr	r2, [r7, #0]
 8012d5c:	2126      	movs	r1, #38	@ 0x26
 8012d5e:	6878      	ldr	r0, [r7, #4]
 8012d60:	f000 fc89 	bl	8013676 <phpalI14443p3a_Sw_RequestAEx>
 8012d64:	4603      	mov	r3, r0
}
 8012d66:	4618      	mov	r0, r3
 8012d68:	3708      	adds	r7, #8
 8012d6a:	46bd      	mov	sp, r7
 8012d6c:	bd80      	pop	{r7, pc}

08012d6e <phpalI14443p3a_Sw_WakeUpA>:

phStatus_t phpalI14443p3a_Sw_WakeUpA(
                                     phpalI14443p3a_Sw_DataParams_t * pDataParams,
                                     uint8_t * pAtqa
                                     )
{
 8012d6e:	b580      	push	{r7, lr}
 8012d70:	b082      	sub	sp, #8
 8012d72:	af00      	add	r7, sp, #0
 8012d74:	6078      	str	r0, [r7, #4]
 8012d76:	6039      	str	r1, [r7, #0]
    return phpalI14443p3a_Sw_RequestAEx(pDataParams, PHPAL_I14443P3A_WAKEUP_CMD, pAtqa);
 8012d78:	683a      	ldr	r2, [r7, #0]
 8012d7a:	2152      	movs	r1, #82	@ 0x52
 8012d7c:	6878      	ldr	r0, [r7, #4]
 8012d7e:	f000 fc7a 	bl	8013676 <phpalI14443p3a_Sw_RequestAEx>
 8012d82:	4603      	mov	r3, r0
}
 8012d84:	4618      	mov	r0, r3
 8012d86:	3708      	adds	r7, #8
 8012d88:	46bd      	mov	sp, r7
 8012d8a:	bd80      	pop	{r7, pc}

08012d8c <phpalI14443p3a_Sw_HaltA>:

phStatus_t phpalI14443p3a_Sw_HaltA(
                                   phpalI14443p3a_Sw_DataParams_t * pDataParams
                                   )
{
 8012d8c:	b580      	push	{r7, lr}
 8012d8e:	b088      	sub	sp, #32
 8012d90:	af02      	add	r7, sp, #8
 8012d92:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM cmd[2];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8012d94:	2300      	movs	r3, #0
 8012d96:	60fb      	str	r3, [r7, #12]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8012d98:	2300      	movs	r3, #0
 8012d9a:	817b      	strh	r3, [r7, #10]

    /* Set halt timeout */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	685b      	ldr	r3, [r3, #4]
 8012da0:	f44f 6291 	mov.w	r2, #1160	@ 0x488
 8012da4:	210d      	movs	r1, #13
 8012da6:	4618      	mov	r0, r3
 8012da8:	f7fa fab2 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8012dac:	4603      	mov	r3, r0
 8012dae:	82fb      	strh	r3, [r7, #22]
 8012db0:	8afb      	ldrh	r3, [r7, #22]
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d001      	beq.n	8012dba <phpalI14443p3a_Sw_HaltA+0x2e>
 8012db6:	8afb      	ldrh	r3, [r7, #22]
 8012db8:	e03b      	b.n	8012e32 <phpalI14443p3a_Sw_HaltA+0xa6>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
        PHPAL_I14443P3A_HALT_TIME_US + PHPAL_I14443P3A_EXT_TIME_US));

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXCRC, PH_ON));
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	685b      	ldr	r3, [r3, #4]
 8012dbe:	2201      	movs	r2, #1
 8012dc0:	2101      	movs	r1, #1
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	f7fa faa4 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8012dc8:	4603      	mov	r3, r0
 8012dca:	82fb      	strh	r3, [r7, #22]
 8012dcc:	8afb      	ldrh	r3, [r7, #22]
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d001      	beq.n	8012dd6 <phpalI14443p3a_Sw_HaltA+0x4a>
 8012dd2:	8afb      	ldrh	r3, [r7, #22]
 8012dd4:	e02d      	b.n	8012e32 <phpalI14443p3a_Sw_HaltA+0xa6>
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXCRC, PH_ON));
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	685b      	ldr	r3, [r3, #4]
 8012dda:	2201      	movs	r2, #1
 8012ddc:	2102      	movs	r1, #2
 8012dde:	4618      	mov	r0, r3
 8012de0:	f7fa fa96 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8012de4:	4603      	mov	r3, r0
 8012de6:	82fb      	strh	r3, [r7, #22]
 8012de8:	8afb      	ldrh	r3, [r7, #22]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d001      	beq.n	8012df2 <phpalI14443p3a_Sw_HaltA+0x66>
 8012dee:	8afb      	ldrh	r3, [r7, #22]
 8012df0:	e01f      	b.n	8012e32 <phpalI14443p3a_Sw_HaltA+0xa6>

    /* Send HltA command */
    cmd[0] = PHPAL_I14443P3A_HALT_CMD;
 8012df2:	2350      	movs	r3, #80	@ 0x50
 8012df4:	743b      	strb	r3, [r7, #16]
    cmd[1] = 0x00;
 8012df6:	2300      	movs	r3, #0
 8012df8:	747b      	strb	r3, [r7, #17]

    status = phhalHw_Exchange(pDataParams->pHalDataParams, PH_EXCHANGE_DEFAULT, cmd, 2, &pResp, &wRespLength);
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	6858      	ldr	r0, [r3, #4]
 8012dfe:	f107 0210 	add.w	r2, r7, #16
 8012e02:	f107 030a 	add.w	r3, r7, #10
 8012e06:	9301      	str	r3, [sp, #4]
 8012e08:	f107 030c 	add.w	r3, r7, #12
 8012e0c:	9300      	str	r3, [sp, #0]
 8012e0e:	2302      	movs	r3, #2
 8012e10:	2100      	movs	r1, #0
 8012e12:	f7f9 fefd 	bl	800cc10 <phhalHw_Pn5180_Exchange>
 8012e16:	4603      	mov	r3, r0
 8012e18:	82bb      	strh	r3, [r7, #20]

    switch (status & PH_ERR_MASK)
 8012e1a:	8abb      	ldrh	r3, [r7, #20]
 8012e1c:	b2db      	uxtb	r3, r3
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d003      	beq.n	8012e2a <phpalI14443p3a_Sw_HaltA+0x9e>
 8012e22:	2b01      	cmp	r3, #1
 8012e24:	d104      	bne.n	8012e30 <phpalI14443p3a_Sw_HaltA+0xa4>
    {
        /* HltA command should timeout -> success */
    case PH_ERR_IO_TIMEOUT:
        return PH_ERR_SUCCESS;
 8012e26:	2300      	movs	r3, #0
 8012e28:	e003      	b.n	8012e32 <phpalI14443p3a_Sw_HaltA+0xa6>
        /* Return protocol error */
    case PH_ERR_SUCCESS:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 8012e2a:	f240 3306 	movw	r3, #774	@ 0x306
 8012e2e:	e000      	b.n	8012e32 <phpalI14443p3a_Sw_HaltA+0xa6>
        /* Return other errors */
    default:
        return status;
 8012e30:	8abb      	ldrh	r3, [r7, #20]
    }
}
 8012e32:	4618      	mov	r0, r3
 8012e34:	3718      	adds	r7, #24
 8012e36:	46bd      	mov	sp, r7
 8012e38:	bd80      	pop	{r7, pc}

08012e3a <phpalI14443p3a_Sw_Anticollision>:
    uint8_t * pUidIn,
    uint8_t bNvbUidIn,
    uint8_t * pUidOut,
    uint8_t * pNvbUidOut
    )
{
 8012e3a:	b580      	push	{r7, lr}
 8012e3c:	b08e      	sub	sp, #56	@ 0x38
 8012e3e:	af02      	add	r7, sp, #8
 8012e40:	60f8      	str	r0, [r7, #12]
 8012e42:	607a      	str	r2, [r7, #4]
 8012e44:	461a      	mov	r2, r3
 8012e46:	460b      	mov	r3, r1
 8012e48:	72fb      	strb	r3, [r7, #11]
 8012e4a:	4613      	mov	r3, r2
 8012e4c:	72bb      	strb	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bIsSelect;
    uint8_t     PH_MEMLOC_REM bCmdBuffer[10];
    uint8_t *   PH_MEMLOC_REM pRcvBuffer = NULL;
 8012e4e:	2300      	movs	r3, #0
 8012e50:	617b      	str	r3, [r7, #20]
    uint16_t    PH_MEMLOC_REM wSndBytes;
    uint16_t    PH_MEMLOC_REM wRcvBytes = 0;
 8012e52:	2300      	movs	r3, #0
 8012e54:	827b      	strh	r3, [r7, #18]
    uint16_t    PH_MEMLOC_REM wRcvBits = 0;
 8012e56:	2300      	movs	r3, #0
 8012e58:	823b      	strh	r3, [r7, #16]
    uint8_t     PH_MEMLOC_REM bUidStartIndex;
    uint8_t     PH_MEMLOC_REM bBitCount;

    /* Check for invalid bNvbUidIn parameter */
    if ((bNvbUidIn > 0x40U) || ((bNvbUidIn & 0x0FU) > 0x07U))
 8012e5a:	7abb      	ldrb	r3, [r7, #10]
 8012e5c:	2b40      	cmp	r3, #64	@ 0x40
 8012e5e:	d804      	bhi.n	8012e6a <phpalI14443p3a_Sw_Anticollision+0x30>
 8012e60:	7abb      	ldrb	r3, [r7, #10]
 8012e62:	f003 0308 	and.w	r3, r3, #8
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d002      	beq.n	8012e70 <phpalI14443p3a_Sw_Anticollision+0x36>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3A);
 8012e6a:	f240 3321 	movw	r3, #801	@ 0x321
 8012e6e:	e217      	b.n	80132a0 <phpalI14443p3a_Sw_Anticollision+0x466>
    }

    /* Check for invalid bCascadeIndex parameter */
    switch (bCascadeLevel)
 8012e70:	7afb      	ldrb	r3, [r7, #11]
 8012e72:	2b97      	cmp	r3, #151	@ 0x97
 8012e74:	d00d      	beq.n	8012e92 <phpalI14443p3a_Sw_Anticollision+0x58>
 8012e76:	2b97      	cmp	r3, #151	@ 0x97
 8012e78:	dc08      	bgt.n	8012e8c <phpalI14443p3a_Sw_Anticollision+0x52>
 8012e7a:	2b93      	cmp	r3, #147	@ 0x93
 8012e7c:	d002      	beq.n	8012e84 <phpalI14443p3a_Sw_Anticollision+0x4a>
 8012e7e:	2b95      	cmp	r3, #149	@ 0x95
 8012e80:	d007      	beq.n	8012e92 <phpalI14443p3a_Sw_Anticollision+0x58>
 8012e82:	e003      	b.n	8012e8c <phpalI14443p3a_Sw_Anticollision+0x52>
    {
    case PHPAL_I14443P3A_CASCADE_LEVEL_1:
        /* Reset UID length */
        pDataParams->bUidLength = 0;
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	2200      	movs	r2, #0
 8012e88:	749a      	strb	r2, [r3, #18]
    case PHPAL_I14443P3A_CASCADE_LEVEL_2:
    case PHPAL_I14443P3A_CASCADE_LEVEL_3:
        break;
 8012e8a:	e002      	b.n	8012e92 <phpalI14443p3a_Sw_Anticollision+0x58>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3A);
 8012e8c:	f240 3321 	movw	r3, #801	@ 0x321
 8012e90:	e206      	b.n	80132a0 <phpalI14443p3a_Sw_Anticollision+0x466>
        break;
 8012e92:	bf00      	nop
    }

    /* Reset UID complete flag */
    pDataParams->bUidComplete = 0;
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	2200      	movs	r2, #0
 8012e98:	74da      	strb	r2, [r3, #19]

    /* ANTICOLLISION: Disable CRC */
    if (bNvbUidIn != 0x40U)
 8012e9a:	7abb      	ldrb	r3, [r7, #10]
 8012e9c:	2b40      	cmp	r3, #64	@ 0x40
 8012e9e:	d01e      	beq.n	8012ede <phpalI14443p3a_Sw_Anticollision+0xa4>
    {
        bIsSelect = 0;
 8012ea0:	2300      	movs	r3, #0
 8012ea2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXCRC, PH_OFF));
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	685b      	ldr	r3, [r3, #4]
 8012eaa:	2200      	movs	r2, #0
 8012eac:	2101      	movs	r1, #1
 8012eae:	4618      	mov	r0, r3
 8012eb0:	f7fa fa2e 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8012eb4:	4603      	mov	r3, r0
 8012eb6:	853b      	strh	r3, [r7, #40]	@ 0x28
 8012eb8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d001      	beq.n	8012ec2 <phpalI14443p3a_Sw_Anticollision+0x88>
 8012ebe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012ec0:	e1ee      	b.n	80132a0 <phpalI14443p3a_Sw_Anticollision+0x466>
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXCRC, PH_OFF));
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	685b      	ldr	r3, [r3, #4]
 8012ec6:	2200      	movs	r2, #0
 8012ec8:	2102      	movs	r1, #2
 8012eca:	4618      	mov	r0, r3
 8012ecc:	f7fa fa20 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8012ed0:	4603      	mov	r3, r0
 8012ed2:	853b      	strh	r3, [r7, #40]	@ 0x28
 8012ed4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d020      	beq.n	8012f1c <phpalI14443p3a_Sw_Anticollision+0xe2>
 8012eda:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012edc:	e1e0      	b.n	80132a0 <phpalI14443p3a_Sw_Anticollision+0x466>
    }
    /* SELECT: Enable CRC */
    else
    {
        bIsSelect = 1;
 8012ede:	2301      	movs	r3, #1
 8012ee0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXCRC, PH_ON));
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	685b      	ldr	r3, [r3, #4]
 8012ee8:	2201      	movs	r2, #1
 8012eea:	2101      	movs	r1, #1
 8012eec:	4618      	mov	r0, r3
 8012eee:	f7fa fa0f 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8012ef2:	4603      	mov	r3, r0
 8012ef4:	853b      	strh	r3, [r7, #40]	@ 0x28
 8012ef6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d001      	beq.n	8012f00 <phpalI14443p3a_Sw_Anticollision+0xc6>
 8012efc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012efe:	e1cf      	b.n	80132a0 <phpalI14443p3a_Sw_Anticollision+0x466>
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXCRC, PH_ON));
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	685b      	ldr	r3, [r3, #4]
 8012f04:	2201      	movs	r2, #1
 8012f06:	2102      	movs	r1, #2
 8012f08:	4618      	mov	r0, r3
 8012f0a:	f7fa fa01 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8012f0e:	4603      	mov	r3, r0
 8012f10:	853b      	strh	r3, [r7, #40]	@ 0x28
 8012f12:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d001      	beq.n	8012f1c <phpalI14443p3a_Sw_Anticollision+0xe2>
 8012f18:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012f1a:	e1c1      	b.n	80132a0 <phpalI14443p3a_Sw_Anticollision+0x466>
    }

    /* Init. command buffer */
    bCmdBuffer[0] = bCascadeLevel;
 8012f1c:	7afb      	ldrb	r3, [r7, #11]
 8012f1e:	763b      	strb	r3, [r7, #24]
    (void)memset(&bCmdBuffer[2], 0x00, 5);
 8012f20:	f107 0318 	add.w	r3, r7, #24
 8012f24:	3302      	adds	r3, #2
 8012f26:	2205      	movs	r2, #5
 8012f28:	2100      	movs	r1, #0
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	f00a f8e8 	bl	801d100 <memset>

    /* Copy valid UID bits */
    wSndBytes = (uint16_t)(((((uint16_t)bNvbUidIn) & 0xF0U) >> 4U) + (((bNvbUidIn & 0x0FU) != 0U) ? 1U : 0U));
 8012f30:	7abb      	ldrb	r3, [r7, #10]
 8012f32:	091b      	lsrs	r3, r3, #4
 8012f34:	b2db      	uxtb	r3, r3
 8012f36:	461a      	mov	r2, r3
 8012f38:	7abb      	ldrb	r3, [r7, #10]
 8012f3a:	f003 030f 	and.w	r3, r3, #15
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d001      	beq.n	8012f46 <phpalI14443p3a_Sw_Anticollision+0x10c>
 8012f42:	2301      	movs	r3, #1
 8012f44:	e000      	b.n	8012f48 <phpalI14443p3a_Sw_Anticollision+0x10e>
 8012f46:	2300      	movs	r3, #0
 8012f48:	4413      	add	r3, r2
 8012f4a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    (void)memcpy(&bCmdBuffer[2], pUidIn, (size_t)wSndBytes);
 8012f4c:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8012f4e:	f107 0318 	add.w	r3, r7, #24
 8012f52:	3302      	adds	r3, #2
 8012f54:	6879      	ldr	r1, [r7, #4]
 8012f56:	4618      	mov	r0, r3
 8012f58:	f00a f951 	bl	801d1fe <memcpy>
    wSndBytes += 2U;
 8012f5c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012f5e:	3302      	adds	r3, #2
 8012f60:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    /* SELECT: Add BCC */
    if (0U != (bIsSelect))
 8012f62:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d016      	beq.n	8012f98 <phpalI14443p3a_Sw_Anticollision+0x15e>
    {
        bNvbUidIn = 0x50;
 8012f6a:	2350      	movs	r3, #80	@ 0x50
 8012f6c:	72bb      	strb	r3, [r7, #10]
        bCmdBuffer[6] = pUidIn[0] ^ pUidIn[1] ^ pUidIn[2] ^ pUidIn[3];
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	781a      	ldrb	r2, [r3, #0]
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	3301      	adds	r3, #1
 8012f76:	781b      	ldrb	r3, [r3, #0]
 8012f78:	4053      	eors	r3, r2
 8012f7a:	b2da      	uxtb	r2, r3
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	3302      	adds	r3, #2
 8012f80:	781b      	ldrb	r3, [r3, #0]
 8012f82:	4053      	eors	r3, r2
 8012f84:	b2da      	uxtb	r2, r3
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	3303      	adds	r3, #3
 8012f8a:	781b      	ldrb	r3, [r3, #0]
 8012f8c:	4053      	eors	r3, r2
 8012f8e:	b2db      	uxtb	r3, r3
 8012f90:	77bb      	strb	r3, [r7, #30]
        ++wSndBytes;
 8012f92:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012f94:	3301      	adds	r3, #1
 8012f96:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    }

    /* Encode NVB */
    bCmdBuffer[1] = bNvbUidIn + 0x20U;
 8012f98:	7abb      	ldrb	r3, [r7, #10]
 8012f9a:	3320      	adds	r3, #32
 8012f9c:	b2db      	uxtb	r3, r3
 8012f9e:	767b      	strb	r3, [r7, #25]

    /* Adjust Rx-Align */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXALIGN, (((uint16_t)bNvbUidIn) & 0x07U)));
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	6858      	ldr	r0, [r3, #4]
 8012fa4:	7abb      	ldrb	r3, [r7, #10]
 8012fa6:	b29b      	uxth	r3, r3
 8012fa8:	f003 0307 	and.w	r3, r3, #7
 8012fac:	b29b      	uxth	r3, r3
 8012fae:	461a      	mov	r2, r3
 8012fb0:	2105      	movs	r1, #5
 8012fb2:	f7fa f9ad 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8012fb6:	4603      	mov	r3, r0
 8012fb8:	853b      	strh	r3, [r7, #40]	@ 0x28
 8012fba:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d001      	beq.n	8012fc4 <phpalI14443p3a_Sw_Anticollision+0x18a>
 8012fc0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012fc2:	e16d      	b.n	80132a0 <phpalI14443p3a_Sw_Anticollision+0x466>

    /* Adjust TxBits */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXLASTBITS, (((uint16_t)bNvbUidIn) & 0x07U)));
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	6858      	ldr	r0, [r3, #4]
 8012fc8:	7abb      	ldrb	r3, [r7, #10]
 8012fca:	b29b      	uxth	r3, r3
 8012fcc:	f003 0307 	and.w	r3, r3, #7
 8012fd0:	b29b      	uxth	r3, r3
 8012fd2:	461a      	mov	r2, r3
 8012fd4:	2103      	movs	r1, #3
 8012fd6:	f7fa f99b 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8012fda:	4603      	mov	r3, r0
 8012fdc:	853b      	strh	r3, [r7, #40]	@ 0x28
 8012fde:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d001      	beq.n	8012fe8 <phpalI14443p3a_Sw_Anticollision+0x1ae>
 8012fe4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012fe6:	e15b      	b.n	80132a0 <phpalI14443p3a_Sw_Anticollision+0x466>

    /* Send the ANTICOLLISION command */
    status = phhalHw_Exchange(pDataParams->pHalDataParams, PH_EXCHANGE_DEFAULT, bCmdBuffer, wSndBytes, &pRcvBuffer, &wRcvBytes);
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	6858      	ldr	r0, [r3, #4]
 8012fec:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8012fee:	f107 0218 	add.w	r2, r7, #24
 8012ff2:	f107 0312 	add.w	r3, r7, #18
 8012ff6:	9301      	str	r3, [sp, #4]
 8012ff8:	f107 0314 	add.w	r3, r7, #20
 8012ffc:	9300      	str	r3, [sp, #0]
 8012ffe:	460b      	mov	r3, r1
 8013000:	2100      	movs	r1, #0
 8013002:	f7f9 fe05 	bl	800cc10 <phhalHw_Pn5180_Exchange>
 8013006:	4603      	mov	r3, r0
 8013008:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /* Reset RxAlignment */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXALIGN, 0));
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	685b      	ldr	r3, [r3, #4]
 801300e:	2200      	movs	r2, #0
 8013010:	2105      	movs	r1, #5
 8013012:	4618      	mov	r0, r3
 8013014:	f7fa f97c 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8013018:	4603      	mov	r3, r0
 801301a:	853b      	strh	r3, [r7, #40]	@ 0x28
 801301c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801301e:	2b00      	cmp	r3, #0
 8013020:	d001      	beq.n	8013026 <phpalI14443p3a_Sw_Anticollision+0x1ec>
 8013022:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8013024:	e13c      	b.n	80132a0 <phpalI14443p3a_Sw_Anticollision+0x466>

    /* Check status, Collision is allowed for anti-collision command. */
    if ((bIsSelect == 0U) && ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR))
 8013026:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801302a:	2b00      	cmp	r3, #0
 801302c:	d112      	bne.n	8013054 <phpalI14443p3a_Sw_Anticollision+0x21a>
 801302e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013030:	b2db      	uxtb	r3, r3
 8013032:	2b03      	cmp	r3, #3
 8013034:	d10e      	bne.n	8013054 <phpalI14443p3a_Sw_Anticollision+0x21a>
    {
        /* Retrieve number of valid bits of last byte */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXLASTBITS, &wRcvBits));
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	685b      	ldr	r3, [r3, #4]
 801303a:	f107 0210 	add.w	r2, r7, #16
 801303e:	2104      	movs	r1, #4
 8013040:	4618      	mov	r0, r3
 8013042:	f7fb fdb3 	bl	800ebac <phhalHw_Pn5180_GetConfig>
 8013046:	4603      	mov	r3, r0
 8013048:	853b      	strh	r3, [r7, #40]	@ 0x28
 801304a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801304c:	2b00      	cmp	r3, #0
 801304e:	d00f      	beq.n	8013070 <phpalI14443p3a_Sw_Anticollision+0x236>
 8013050:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8013052:	e125      	b.n	80132a0 <phpalI14443p3a_Sw_Anticollision+0x466>
    }
    else
    {
        /* Check for protocol error */
        if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS_INCOMPLETE_BYTE)
 8013054:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013056:	b2db      	uxtb	r3, r3
 8013058:	2b73      	cmp	r3, #115	@ 0x73
 801305a:	d102      	bne.n	8013062 <phpalI14443p3a_Sw_Anticollision+0x228>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 801305c:	f240 3306 	movw	r3, #774	@ 0x306
 8013060:	e11e      	b.n	80132a0 <phpalI14443p3a_Sw_Anticollision+0x466>
        }
        /* Return on other errors */
        else
        {
            PH_CHECK_SUCCESS(status);
 8013062:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013064:	2b00      	cmp	r3, #0
 8013066:	d001      	beq.n	801306c <phpalI14443p3a_Sw_Anticollision+0x232>
 8013068:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801306a:	e119      	b.n	80132a0 <phpalI14443p3a_Sw_Anticollision+0x466>
        }

        /* whole byte valid */
        wRcvBits = 0;
 801306c:	2300      	movs	r3, #0
 801306e:	823b      	strh	r3, [r7, #16]
    }

    /* Add received data to UID */
    if (bIsSelect == 0U)
 8013070:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013074:	2b00      	cmp	r3, #0
 8013076:	f040 80ae 	bne.w	80131d6 <phpalI14443p3a_Sw_Anticollision+0x39c>
    {
        /* Retrieve byte-starting-index of received Uid */
        bUidStartIndex = (uint8_t)((bNvbUidIn & 0xF0U) >> 4U);
 801307a:	7abb      	ldrb	r3, [r7, #10]
 801307c:	091b      	lsrs	r3, r3, #4
 801307e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

        /* Add new bitcount */
        bBitCount = (uint8_t)(((((uint16_t)bNvbUidIn) >> 4U) << 3U) + (wRcvBytes << 3U) + wRcvBits);
 8013082:	7abb      	ldrb	r3, [r7, #10]
 8013084:	091b      	lsrs	r3, r3, #4
 8013086:	b2da      	uxtb	r2, r3
 8013088:	8a7b      	ldrh	r3, [r7, #18]
 801308a:	b2db      	uxtb	r3, r3
 801308c:	4413      	add	r3, r2
 801308e:	b2db      	uxtb	r3, r3
 8013090:	00db      	lsls	r3, r3, #3
 8013092:	b2da      	uxtb	r2, r3
 8013094:	8a3b      	ldrh	r3, [r7, #16]
 8013096:	b2db      	uxtb	r3, r3
 8013098:	4413      	add	r3, r2
 801309a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* Last incomplete byte is added to wRcvBytes, so remove that again */
        if (wRcvBits > 0U)
 801309e:	8a3b      	ldrh	r3, [r7, #16]
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d004      	beq.n	80130ae <phpalI14443p3a_Sw_Anticollision+0x274>
        {
            bBitCount -= 8U;
 80130a4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80130a8:	3b08      	subs	r3, #8
 80130aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        }

        /* Convert bitcount to NVB format */
        *pNvbUidOut = (uint8_t)(((bBitCount >> 3U) << 4U) + (bBitCount & 0x07U));
 80130ae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80130b2:	08db      	lsrs	r3, r3, #3
 80130b4:	b2db      	uxtb	r3, r3
 80130b6:	011b      	lsls	r3, r3, #4
 80130b8:	b2da      	uxtb	r2, r3
 80130ba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80130be:	f003 0307 	and.w	r3, r3, #7
 80130c2:	b2db      	uxtb	r3, r3
 80130c4:	4413      	add	r3, r2
 80130c6:	b2da      	uxtb	r2, r3
 80130c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80130ca:	701a      	strb	r2, [r3, #0]

        /* We do not tolerate more than (5u * 8 =)40 bits because it would lead to buffer overflows */
        if (*pNvbUidOut > 0x50U)
 80130cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80130ce:	781b      	ldrb	r3, [r3, #0]
 80130d0:	2b50      	cmp	r3, #80	@ 0x50
 80130d2:	d902      	bls.n	80130da <phpalI14443p3a_Sw_Anticollision+0x2a0>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 80130d4:	f240 3306 	movw	r3, #774	@ 0x306
 80130d8:	e0e2      	b.n	80132a0 <phpalI14443p3a_Sw_Anticollision+0x466>
        }

        /* After successfull reception, the UID must be exact 40 bits */
        if (((status & PH_ERR_MASK) == PH_ERR_SUCCESS) && (*pNvbUidOut != 0x50U))
 80130da:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80130dc:	b2db      	uxtb	r3, r3
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d106      	bne.n	80130f0 <phpalI14443p3a_Sw_Anticollision+0x2b6>
 80130e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80130e4:	781b      	ldrb	r3, [r3, #0]
 80130e6:	2b50      	cmp	r3, #80	@ 0x50
 80130e8:	d002      	beq.n	80130f0 <phpalI14443p3a_Sw_Anticollision+0x2b6>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 80130ea:	f240 3306 	movw	r3, #774	@ 0x306
 80130ee:	e0d7      	b.n	80132a0 <phpalI14443p3a_Sw_Anticollision+0x466>
        }

        /* Copy received bytes to uid */
        if (wRcvBytes > 0U)
 80130f0:	8a7b      	ldrh	r3, [r7, #18]
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d041      	beq.n	801317a <phpalI14443p3a_Sw_Anticollision+0x340>
        {
            /* Incomplete byte sent: Merge Rx-Aligned first byte */
            if (0U != (bNvbUidIn & 0x07U))
 80130f6:	7abb      	ldrb	r3, [r7, #10]
 80130f8:	f003 0307 	and.w	r3, r3, #7
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d026      	beq.n	801314e <phpalI14443p3a_Sw_Anticollision+0x314>
            {
                bCmdBuffer[2U + bUidStartIndex] = (bCmdBuffer[2U + bUidStartIndex] & (uint8_t)((1U << (bNvbUidIn & 0x07U)) - 1U)) |
 8013100:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8013104:	3302      	adds	r3, #2
 8013106:	3330      	adds	r3, #48	@ 0x30
 8013108:	443b      	add	r3, r7
 801310a:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 801310e:	7abb      	ldrb	r3, [r7, #10]
 8013110:	f003 0307 	and.w	r3, r3, #7
 8013114:	2101      	movs	r1, #1
 8013116:	fa01 f303 	lsl.w	r3, r1, r3
 801311a:	b2db      	uxtb	r3, r3
 801311c:	3b01      	subs	r3, #1
 801311e:	b2db      	uxtb	r3, r3
 8013120:	4013      	ands	r3, r2
 8013122:	b2d9      	uxtb	r1, r3
                                                 (pRcvBuffer[0] & (uint8_t)(0xFFU << (bNvbUidIn & 0x07U)));
 8013124:	697b      	ldr	r3, [r7, #20]
 8013126:	781a      	ldrb	r2, [r3, #0]
 8013128:	7abb      	ldrb	r3, [r7, #10]
 801312a:	f003 0307 	and.w	r3, r3, #7
 801312e:	20ff      	movs	r0, #255	@ 0xff
 8013130:	fa00 f303 	lsl.w	r3, r0, r3
 8013134:	b2db      	uxtb	r3, r3
                bCmdBuffer[2U + bUidStartIndex] = (bCmdBuffer[2U + bUidStartIndex] & (uint8_t)((1U << (bNvbUidIn & 0x07U)) - 1U)) |
 8013136:	4013      	ands	r3, r2
 8013138:	b2da      	uxtb	r2, r3
 801313a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 801313e:	3302      	adds	r3, #2
 8013140:	430a      	orrs	r2, r1
 8013142:	b2d2      	uxtb	r2, r2
 8013144:	3330      	adds	r3, #48	@ 0x30
 8013146:	443b      	add	r3, r7
 8013148:	f803 2c18 	strb.w	r2, [r3, #-24]
 801314c:	e008      	b.n	8013160 <phpalI14443p3a_Sw_Anticollision+0x326>
            }
            /* Else just copy the first byte */
            else
            {
                bCmdBuffer[2U + bUidStartIndex] = pRcvBuffer[0];
 801314e:	697a      	ldr	r2, [r7, #20]
 8013150:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8013154:	3302      	adds	r3, #2
 8013156:	7812      	ldrb	r2, [r2, #0]
 8013158:	3330      	adds	r3, #48	@ 0x30
 801315a:	443b      	add	r3, r7
 801315c:	f803 2c18 	strb.w	r2, [r3, #-24]
            }

            /* Add the rest of the uid bytes */
            (void)memcpy(&bCmdBuffer[2U + bUidStartIndex + 1U], &pRcvBuffer[1], (size_t)(((uint32_t)wRcvBytes) - 1u));
 8013160:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8013164:	3303      	adds	r3, #3
 8013166:	f107 0218 	add.w	r2, r7, #24
 801316a:	18d0      	adds	r0, r2, r3
 801316c:	697b      	ldr	r3, [r7, #20]
 801316e:	3301      	adds	r3, #1
 8013170:	8a7a      	ldrh	r2, [r7, #18]
 8013172:	3a01      	subs	r2, #1
 8013174:	4619      	mov	r1, r3
 8013176:	f00a f842 	bl	801d1fe <memcpy>
        }

        /* Anticollision finished */
        if (*pNvbUidOut > 0x40U)
 801317a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801317c:	781b      	ldrb	r3, [r3, #0]
 801317e:	2b40      	cmp	r3, #64	@ 0x40
 8013180:	d91d      	bls.n	80131be <phpalI14443p3a_Sw_Anticollision+0x384>
        {
            /* Collision in BCC byte can never happen */
            if (*pNvbUidOut < 0x50U)
 8013182:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013184:	781b      	ldrb	r3, [r3, #0]
 8013186:	2b4f      	cmp	r3, #79	@ 0x4f
 8013188:	d802      	bhi.n	8013190 <phpalI14443p3a_Sw_Anticollision+0x356>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_FRAMING_ERROR, PH_COMP_PAL_ISO14443P3A);
 801318a:	f240 3305 	movw	r3, #773	@ 0x305
 801318e:	e087      	b.n	80132a0 <phpalI14443p3a_Sw_Anticollision+0x466>
            }

            /* Remove BCC from NvbUidOut */
            *pNvbUidOut = 0x40;
 8013190:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013192:	2240      	movs	r2, #64	@ 0x40
 8013194:	701a      	strb	r2, [r3, #0]
            --wRcvBytes;
 8013196:	8a7b      	ldrh	r3, [r7, #18]
 8013198:	3b01      	subs	r3, #1
 801319a:	b29b      	uxth	r3, r3
 801319c:	827b      	strh	r3, [r7, #18]

            /* BCC Check */
            if ((bCmdBuffer[2] ^ bCmdBuffer[3] ^ bCmdBuffer[4] ^ bCmdBuffer[5]) != bCmdBuffer[6])
 801319e:	7eba      	ldrb	r2, [r7, #26]
 80131a0:	7efb      	ldrb	r3, [r7, #27]
 80131a2:	4053      	eors	r3, r2
 80131a4:	b2da      	uxtb	r2, r3
 80131a6:	7f3b      	ldrb	r3, [r7, #28]
 80131a8:	4053      	eors	r3, r2
 80131aa:	b2da      	uxtb	r2, r3
 80131ac:	7f7b      	ldrb	r3, [r7, #29]
 80131ae:	4053      	eors	r3, r2
 80131b0:	b2da      	uxtb	r2, r3
 80131b2:	7fbb      	ldrb	r3, [r7, #30]
 80131b4:	429a      	cmp	r2, r3
 80131b6:	d002      	beq.n	80131be <phpalI14443p3a_Sw_Anticollision+0x384>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_FRAMING_ERROR, PH_COMP_PAL_ISO14443P3A);
 80131b8:	f240 3305 	movw	r3, #773	@ 0x305
 80131bc:	e070      	b.n	80132a0 <phpalI14443p3a_Sw_Anticollision+0x466>
            }
        }

        /* Copy UID */
        (void)memcpy(pUidOut, &bCmdBuffer[2], (size_t)(bUidStartIndex + ((uint32_t)wRcvBytes)));
 80131be:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80131c2:	8a7a      	ldrh	r2, [r7, #18]
 80131c4:	441a      	add	r2, r3
 80131c6:	f107 0318 	add.w	r3, r7, #24
 80131ca:	3302      	adds	r3, #2
 80131cc:	4619      	mov	r1, r3
 80131ce:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80131d0:	f00a f815 	bl	801d1fe <memcpy>
 80131d4:	e054      	b.n	8013280 <phpalI14443p3a_Sw_Anticollision+0x446>
    }
    /* Return SAK instead of the UID */
    else
    {
        /* only one byte allowed */
        if (wRcvBytes != 1U)
 80131d6:	8a7b      	ldrh	r3, [r7, #18]
 80131d8:	2b01      	cmp	r3, #1
 80131da:	d002      	beq.n	80131e2 <phpalI14443p3a_Sw_Anticollision+0x3a8>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 80131dc:	f240 3306 	movw	r3, #774	@ 0x306
 80131e0:	e05e      	b.n	80132a0 <phpalI14443p3a_Sw_Anticollision+0x466>
        }

        /* Cascade Bit is set */
        if (0U != (pRcvBuffer[0] & 0x04U))
 80131e2:	697b      	ldr	r3, [r7, #20]
 80131e4:	781b      	ldrb	r3, [r3, #0]
 80131e6:	f003 0304 	and.w	r3, r3, #4
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d01e      	beq.n	801322c <phpalI14443p3a_Sw_Anticollision+0x3f2>
        {
            /* If additional cascade levels are impossible -> protocol error */
            if (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_3)
 80131ee:	7afb      	ldrb	r3, [r7, #11]
 80131f0:	2b97      	cmp	r3, #151	@ 0x97
 80131f2:	d102      	bne.n	80131fa <phpalI14443p3a_Sw_Anticollision+0x3c0>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 80131f4:	f240 3306 	movw	r3, #774	@ 0x306
 80131f8:	e052      	b.n	80132a0 <phpalI14443p3a_Sw_Anticollision+0x466>
            }

            /* Cascade tag does not match -> protocol error */
            if (pUidIn[0] != PHPAL_I14443P3A_CASCADE_TAG)
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	781b      	ldrb	r3, [r3, #0]
 80131fe:	2b88      	cmp	r3, #136	@ 0x88
 8013200:	d002      	beq.n	8013208 <phpalI14443p3a_Sw_Anticollision+0x3ce>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 8013202:	f240 3306 	movw	r3, #774	@ 0x306
 8013206:	e04b      	b.n	80132a0 <phpalI14443p3a_Sw_Anticollision+0x466>
            }

            /* Ignore Cascade Tag */
            (void)memcpy(&pDataParams->abUid[pDataParams->bUidLength], &pUidIn[1], 3);
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	7c9b      	ldrb	r3, [r3, #18]
 801320c:	3308      	adds	r3, #8
 801320e:	68fa      	ldr	r2, [r7, #12]
 8013210:	18d0      	adds	r0, r2, r3
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	3301      	adds	r3, #1
 8013216:	2203      	movs	r2, #3
 8013218:	4619      	mov	r1, r3
 801321a:	f009 fff0 	bl	801d1fe <memcpy>

            /* Increment Uid length */
            pDataParams->bUidLength += 3U;
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	7c9b      	ldrb	r3, [r3, #18]
 8013222:	3303      	adds	r3, #3
 8013224:	b2da      	uxtb	r2, r3
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	749a      	strb	r2, [r3, #18]
 801322a:	e025      	b.n	8013278 <phpalI14443p3a_Sw_Anticollision+0x43e>
        }
        /* Cascade Bit is cleared -> no further cascade levels */
        else
        {
            /* Cascade tag does not match -> protocol error */
            if (pUidIn[0] == PHPAL_I14443P3A_CASCADE_TAG)
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	781b      	ldrb	r3, [r3, #0]
 8013230:	2b88      	cmp	r3, #136	@ 0x88
 8013232:	d102      	bne.n	801323a <phpalI14443p3a_Sw_Anticollision+0x400>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 8013234:	f240 3306 	movw	r3, #774	@ 0x306
 8013238:	e032      	b.n	80132a0 <phpalI14443p3a_Sw_Anticollision+0x466>
            }

            /* Copy all uid bytes except BCC */
            (void)memcpy(&pDataParams->abUid[pDataParams->bUidLength], &pUidIn[0], 4);
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	7c9b      	ldrb	r3, [r3, #18]
 801323e:	3308      	adds	r3, #8
 8013240:	68fa      	ldr	r2, [r7, #12]
 8013242:	4413      	add	r3, r2
 8013244:	687a      	ldr	r2, [r7, #4]
 8013246:	6812      	ldr	r2, [r2, #0]
 8013248:	601a      	str	r2, [r3, #0]

            /* Increment Uid length */
            pDataParams->bUidLength += 4U;
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	7c9b      	ldrb	r3, [r3, #18]
 801324e:	3304      	adds	r3, #4
 8013250:	b2da      	uxtb	r2, r3
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	749a      	strb	r2, [r3, #18]

            /* Set UID complete flag */
            pDataParams->bUidComplete = 1;
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	2201      	movs	r2, #1
 801325a:	74da      	strb	r2, [r3, #19]

            /* set default card timeout */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	685b      	ldr	r3, [r3, #4]
 8013260:	220a      	movs	r2, #10
 8013262:	210e      	movs	r1, #14
 8013264:	4618      	mov	r0, r3
 8013266:	f7fa f853 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 801326a:	4603      	mov	r3, r0
 801326c:	853b      	strh	r3, [r7, #40]	@ 0x28
 801326e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8013270:	2b00      	cmp	r3, #0
 8013272:	d001      	beq.n	8013278 <phpalI14443p3a_Sw_Anticollision+0x43e>
 8013274:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8013276:	e013      	b.n	80132a0 <phpalI14443p3a_Sw_Anticollision+0x466>
                PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
                PHPAL_I14443P3A_TIMEOUT_DEFAULT_MS));
        }

        /* Copy SAK */
        pUidOut[0] = pRcvBuffer[0];
 8013278:	697b      	ldr	r3, [r7, #20]
 801327a:	781a      	ldrb	r2, [r3, #0]
 801327c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801327e:	701a      	strb	r2, [r3, #0]
    }

    return PH_ADD_COMPCODE(status, PH_COMP_PAL_ISO14443P3A);
 8013280:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013282:	2b00      	cmp	r3, #0
 8013284:	d00b      	beq.n	801329e <phpalI14443p3a_Sw_Anticollision+0x464>
 8013286:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013288:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801328c:	2b00      	cmp	r3, #0
 801328e:	d106      	bne.n	801329e <phpalI14443p3a_Sw_Anticollision+0x464>
 8013290:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013292:	b2db      	uxtb	r3, r3
 8013294:	b29b      	uxth	r3, r3
 8013296:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 801329a:	b29b      	uxth	r3, r3
 801329c:	e000      	b.n	80132a0 <phpalI14443p3a_Sw_Anticollision+0x466>
 801329e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 80132a0:	4618      	mov	r0, r3
 80132a2:	3730      	adds	r7, #48	@ 0x30
 80132a4:	46bd      	mov	sp, r7
 80132a6:	bd80      	pop	{r7, pc}

080132a8 <phpalI14443p3a_Sw_Select>:
                                    phpalI14443p3a_Sw_DataParams_t * pDataParams,
                                    uint8_t bCascadeLevel,
                                    uint8_t * pUidIn,
                                    uint8_t * pSak
                                    )
{
 80132a8:	b580      	push	{r7, lr}
 80132aa:	b088      	sub	sp, #32
 80132ac:	af02      	add	r7, sp, #8
 80132ae:	60f8      	str	r0, [r7, #12]
 80132b0:	607a      	str	r2, [r7, #4]
 80132b2:	603b      	str	r3, [r7, #0]
 80132b4:	460b      	mov	r3, r1
 80132b6:	72fb      	strb	r3, [r7, #11]
    uint8_t PH_MEMLOC_REM bDummy;
    return phpalI14443p3a_Sw_Anticollision(pDataParams, bCascadeLevel, pUidIn, 0x40, pSak, &bDummy);
 80132b8:	7af9      	ldrb	r1, [r7, #11]
 80132ba:	f107 0317 	add.w	r3, r7, #23
 80132be:	9301      	str	r3, [sp, #4]
 80132c0:	683b      	ldr	r3, [r7, #0]
 80132c2:	9300      	str	r3, [sp, #0]
 80132c4:	2340      	movs	r3, #64	@ 0x40
 80132c6:	687a      	ldr	r2, [r7, #4]
 80132c8:	68f8      	ldr	r0, [r7, #12]
 80132ca:	f7ff fdb6 	bl	8012e3a <phpalI14443p3a_Sw_Anticollision>
 80132ce:	4603      	mov	r3, r0
}
 80132d0:	4618      	mov	r0, r3
 80132d2:	3718      	adds	r7, #24
 80132d4:	46bd      	mov	sp, r7
 80132d6:	bd80      	pop	{r7, pc}

080132d8 <phpalI14443p3a_Sw_ActivateCard>:
    uint8_t * pUidOut,
    uint8_t * pLenUidOut,
    uint8_t * pSak,
    uint8_t * pMoreCardsAvailable
    )
{
 80132d8:	b580      	push	{r7, lr}
 80132da:	b08a      	sub	sp, #40	@ 0x28
 80132dc:	af02      	add	r7, sp, #8
 80132de:	60f8      	str	r0, [r7, #12]
 80132e0:	60b9      	str	r1, [r7, #8]
 80132e2:	603b      	str	r3, [r7, #0]
 80132e4:	4613      	mov	r3, r2
 80132e6:	71fb      	strb	r3, [r7, #7]
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 80132e8:	2300      	movs	r3, #0
 80132ea:	83fb      	strh	r3, [r7, #30]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bCascadeLevel;
    uint8_t     PH_MEMLOC_COUNT bCascadeIndex;
    uint8_t     PH_MEMLOC_REM bUidIndex;
    uint8_t     PH_MEMLOC_REM bNvbUid;
    uint8_t     PH_MEMLOC_REM bAtqa[2] = {0};
 80132ec:	2300      	movs	r3, #0
 80132ee:	82bb      	strh	r3, [r7, #20]
    uint8_t     PH_MEMLOC_REM bUid[4];
    uint8_t     PH_MEMLOC_COUNT bRetryCount;
    uint8_t     PH_MEMLOC_REM bCollDetected = PH_OFF;
 80132f0:	2300      	movs	r3, #0
 80132f2:	75fb      	strb	r3, [r7, #23]

    bRetryCount = 0;
 80132f4:	2300      	movs	r3, #0
 80132f6:	763b      	strb	r3, [r7, #24]

    /* Parameter check */
    if ((bLenUidIn != 0U) &&
 80132f8:	79fb      	ldrb	r3, [r7, #7]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d00f      	beq.n	801331e <phpalI14443p3a_Sw_ActivateCard+0x46>
 80132fe:	79fb      	ldrb	r3, [r7, #7]
 8013300:	2b04      	cmp	r3, #4
 8013302:	d00c      	beq.n	801331e <phpalI14443p3a_Sw_ActivateCard+0x46>
        (bLenUidIn != 4U) &&
 8013304:	79fb      	ldrb	r3, [r7, #7]
 8013306:	2b07      	cmp	r3, #7
 8013308:	d009      	beq.n	801331e <phpalI14443p3a_Sw_ActivateCard+0x46>
        (bLenUidIn != 7U) &&
 801330a:	79fb      	ldrb	r3, [r7, #7]
 801330c:	2b0a      	cmp	r3, #10
 801330e:	d006      	beq.n	801331e <phpalI14443p3a_Sw_ActivateCard+0x46>
        (bLenUidIn != 10U)&&
        (pDataParams->bPollCmd != PHPAL_I14443P3A_USE_WUPA))
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	7d5b      	ldrb	r3, [r3, #21]
        (bLenUidIn != 10U)&&
 8013314:	2b01      	cmp	r3, #1
 8013316:	d002      	beq.n	801331e <phpalI14443p3a_Sw_ActivateCard+0x46>
    {
        /* Given UID length is invalid, return error */
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3A);
 8013318:	f240 3321 	movw	r3, #801	@ 0x321
 801331c:	e18c      	b.n	8013638 <phpalI14443p3a_Sw_ActivateCard+0x360>
    }
    /* initialise to zero, for VS studio warning */
    bCascadeLevel = 0;
 801331e:	2300      	movs	r3, #0
 8013320:	76fb      	strb	r3, [r7, #27]
    /* Clear Uid */
    (void)memset(bUid, 0x00, 4);
 8013322:	f107 0310 	add.w	r3, r7, #16
 8013326:	2204      	movs	r2, #4
 8013328:	2100      	movs	r1, #0
 801332a:	4618      	mov	r0, r3
 801332c:	f009 fee8 	bl	801d100 <memset>

    /* Clear Uid lengths */
    bUidIndex = 0;
 8013330:	2300      	movs	r3, #0
 8013332:	767b      	strb	r3, [r7, #25]
    *pLenUidOut = 0;
 8013334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013336:	2200      	movs	r2, #0
 8013338:	701a      	strb	r2, [r3, #0]

    /* Clear the more cards available flag */
    *pMoreCardsAvailable = PH_OFF;
 801333a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801333c:	2200      	movs	r2, #0
 801333e:	701a      	strb	r2, [r3, #0]

    if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	7d1b      	ldrb	r3, [r3, #20]
 8013344:	2b01      	cmp	r3, #1
 8013346:	d12a      	bne.n	801339e <phpalI14443p3a_Sw_ActivateCard+0xc6>
    {
        status = phpalI14443p3a_Sw_WakeUpA(pDataParams, bAtqa);
 8013348:	f107 0314 	add.w	r3, r7, #20
 801334c:	4619      	mov	r1, r3
 801334e:	68f8      	ldr	r0, [r7, #12]
 8013350:	f7ff fd0d 	bl	8012d6e <phpalI14443p3a_Sw_WakeUpA>
 8013354:	4603      	mov	r3, r0
 8013356:	83fb      	strh	r3, [r7, #30]
        /* As per EMVCo 2.6 req 9.6.1.3, wait for at least Tmin retransmission in case of timeout error. */
        while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 8013358:	e019      	b.n	801338e <phpalI14443p3a_Sw_ActivateCard+0xb6>
        {
            bRetryCount++;
 801335a:	7e3b      	ldrb	r3, [r7, #24]
 801335c:	3301      	adds	r3, #1
 801335e:	763b      	strb	r3, [r7, #24]
            /* Wait for at least Tmin retransmission delay. */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	685b      	ldr	r3, [r3, #4]
 8013364:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8013368:	2100      	movs	r1, #0
 801336a:	4618      	mov	r0, r3
 801336c:	f7f9 ff4c 	bl	800d208 <phhalHw_Pn5180_Wait>
 8013370:	4603      	mov	r3, r0
 8013372:	83fb      	strh	r3, [r7, #30]
 8013374:	8bfb      	ldrh	r3, [r7, #30]
 8013376:	2b00      	cmp	r3, #0
 8013378:	d001      	beq.n	801337e <phpalI14443p3a_Sw_ActivateCard+0xa6>
 801337a:	8bfb      	ldrh	r3, [r7, #30]
 801337c:	e15c      	b.n	8013638 <phpalI14443p3a_Sw_ActivateCard+0x360>
                pDataParams->pHalDataParams,
                PHHAL_HW_TIME_MICROSECONDS,
                PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

            status = phpalI14443p3a_Sw_WakeUpA(pDataParams, bAtqa);
 801337e:	f107 0314 	add.w	r3, r7, #20
 8013382:	4619      	mov	r1, r3
 8013384:	68f8      	ldr	r0, [r7, #12]
 8013386:	f7ff fcf2 	bl	8012d6e <phpalI14443p3a_Sw_WakeUpA>
 801338a:	4603      	mov	r3, r0
 801338c:	83fb      	strh	r3, [r7, #30]
        while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 801338e:	8bfb      	ldrh	r3, [r7, #30]
 8013390:	b2db      	uxtb	r3, r3
 8013392:	2b01      	cmp	r3, #1
 8013394:	d128      	bne.n	80133e8 <phpalI14443p3a_Sw_ActivateCard+0x110>
 8013396:	7e3b      	ldrb	r3, [r7, #24]
 8013398:	2b01      	cmp	r3, #1
 801339a:	d9de      	bls.n	801335a <phpalI14443p3a_Sw_ActivateCard+0x82>
 801339c:	e024      	b.n	80133e8 <phpalI14443p3a_Sw_ActivateCard+0x110>
        }
    }
    else
    {
        if( (pDataParams->bOpeMode == RD_LIB_MODE_ISO) && (pDataParams->bPollCmd == PHPAL_I14443P3A_USE_WUPA))
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	7d1b      	ldrb	r3, [r3, #20]
 80133a2:	2b03      	cmp	r3, #3
 80133a4:	d10c      	bne.n	80133c0 <phpalI14443p3a_Sw_ActivateCard+0xe8>
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	7d5b      	ldrb	r3, [r3, #21]
 80133aa:	2b01      	cmp	r3, #1
 80133ac:	d108      	bne.n	80133c0 <phpalI14443p3a_Sw_ActivateCard+0xe8>
        {
            status = phpalI14443p3a_Sw_WakeUpA(pDataParams, bAtqa);
 80133ae:	f107 0314 	add.w	r3, r7, #20
 80133b2:	4619      	mov	r1, r3
 80133b4:	68f8      	ldr	r0, [r7, #12]
 80133b6:	f7ff fcda 	bl	8012d6e <phpalI14443p3a_Sw_WakeUpA>
 80133ba:	4603      	mov	r3, r0
 80133bc:	83fb      	strh	r3, [r7, #30]
 80133be:	e013      	b.n	80133e8 <phpalI14443p3a_Sw_ActivateCard+0x110>
        }
        else
        {
            if (bLenUidIn == 0U)
 80133c0:	79fb      	ldrb	r3, [r7, #7]
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d108      	bne.n	80133d8 <phpalI14443p3a_Sw_ActivateCard+0x100>
            {
                status = phpalI14443p3a_Sw_RequestA(pDataParams, bAtqa);
 80133c6:	f107 0314 	add.w	r3, r7, #20
 80133ca:	4619      	mov	r1, r3
 80133cc:	68f8      	ldr	r0, [r7, #12]
 80133ce:	f7ff fcbf 	bl	8012d50 <phpalI14443p3a_Sw_RequestA>
 80133d2:	4603      	mov	r3, r0
 80133d4:	83fb      	strh	r3, [r7, #30]
 80133d6:	e007      	b.n	80133e8 <phpalI14443p3a_Sw_ActivateCard+0x110>
            }
            /* UidIn is given -> WupA */
            else
            {
                status = phpalI14443p3a_Sw_WakeUpA(pDataParams, bAtqa);
 80133d8:	f107 0314 	add.w	r3, r7, #20
 80133dc:	4619      	mov	r1, r3
 80133de:	68f8      	ldr	r0, [r7, #12]
 80133e0:	f7ff fcc5 	bl	8012d6e <phpalI14443p3a_Sw_WakeUpA>
 80133e4:	4603      	mov	r3, r0
 80133e6:	83fb      	strh	r3, [r7, #30]
            }
        }
    }

    /* Collision error may happen */
    if ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 80133e8:	8bfb      	ldrh	r3, [r7, #30]
 80133ea:	b2db      	uxtb	r3, r3
 80133ec:	2b03      	cmp	r3, #3
 80133ee:	d10b      	bne.n	8013408 <phpalI14443p3a_Sw_ActivateCard+0x130>
    {
        /* Emvco: case_id TA304_XY */
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	7d1b      	ldrb	r3, [r3, #20]
 80133f4:	2b01      	cmp	r3, #1
 80133f6:	d101      	bne.n	80133fc <phpalI14443p3a_Sw_ActivateCard+0x124>
        {
            return status;
 80133f8:	8bfb      	ldrh	r3, [r7, #30]
 80133fa:	e11d      	b.n	8013638 <phpalI14443p3a_Sw_ActivateCard+0x360>
        }
        bCollDetected = PH_ON;
 80133fc:	2301      	movs	r3, #1
 80133fe:	75fb      	strb	r3, [r7, #23]

        /* Set the more cards available flag */
        *pMoreCardsAvailable = PH_ON;
 8013400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013402:	2201      	movs	r2, #1
 8013404:	701a      	strb	r2, [r3, #0]
 8013406:	e004      	b.n	8013412 <phpalI14443p3a_Sw_ActivateCard+0x13a>
    }
    /* Status check */
    else
    {
        PH_CHECK_SUCCESS(status);
 8013408:	8bfb      	ldrh	r3, [r7, #30]
 801340a:	2b00      	cmp	r3, #0
 801340c:	d001      	beq.n	8013412 <phpalI14443p3a_Sw_ActivateCard+0x13a>
 801340e:	8bfb      	ldrh	r3, [r7, #30]
 8013410:	e112      	b.n	8013638 <phpalI14443p3a_Sw_ActivateCard+0x360>
    }

    /* Go through all cascade levels */
    for (bCascadeIndex = 0; bCascadeIndex < 3U; bCascadeIndex++)
 8013412:	2300      	movs	r3, #0
 8013414:	76bb      	strb	r3, [r7, #26]
 8013416:	e0fb      	b.n	8013610 <phpalI14443p3a_Sw_ActivateCard+0x338>
    {
        /* Set cascade level tags */
        switch (bCascadeIndex)
 8013418:	7ebb      	ldrb	r3, [r7, #26]
 801341a:	2b02      	cmp	r3, #2
 801341c:	d00c      	beq.n	8013438 <phpalI14443p3a_Sw_ActivateCard+0x160>
 801341e:	2b02      	cmp	r3, #2
 8013420:	dc0d      	bgt.n	801343e <phpalI14443p3a_Sw_ActivateCard+0x166>
 8013422:	2b00      	cmp	r3, #0
 8013424:	d002      	beq.n	801342c <phpalI14443p3a_Sw_ActivateCard+0x154>
 8013426:	2b01      	cmp	r3, #1
 8013428:	d003      	beq.n	8013432 <phpalI14443p3a_Sw_ActivateCard+0x15a>
 801342a:	e008      	b.n	801343e <phpalI14443p3a_Sw_ActivateCard+0x166>
        {
        case 0:
            bCascadeLevel = PHPAL_I14443P3A_CASCADE_LEVEL_1;
 801342c:	2393      	movs	r3, #147	@ 0x93
 801342e:	76fb      	strb	r3, [r7, #27]
            break;
 8013430:	e005      	b.n	801343e <phpalI14443p3a_Sw_ActivateCard+0x166>
        case 1:
            bCascadeLevel = PHPAL_I14443P3A_CASCADE_LEVEL_2;
 8013432:	2395      	movs	r3, #149	@ 0x95
 8013434:	76fb      	strb	r3, [r7, #27]
            break;
 8013436:	e002      	b.n	801343e <phpalI14443p3a_Sw_ActivateCard+0x166>
        case 2:
            bCascadeLevel = PHPAL_I14443P3A_CASCADE_LEVEL_3;
 8013438:	2397      	movs	r3, #151	@ 0x97
 801343a:	76fb      	strb	r3, [r7, #27]
            break;
 801343c:	bf00      	nop
        /* Default Case is not required as it will be a Dead Code due to the condition in for() loop statement. */
        } /* PRQA S 2002 */

        /* Copy know Uid part if neccessary */
        if (bLenUidIn == (bUidIndex + 4U))
 801343e:	79fa      	ldrb	r2, [r7, #7]
 8013440:	7e7b      	ldrb	r3, [r7, #25]
 8013442:	3304      	adds	r3, #4
 8013444:	429a      	cmp	r2, r3
 8013446:	d107      	bne.n	8013458 <phpalI14443p3a_Sw_ActivateCard+0x180>
        {
            /* Copy whole Uid if this is the only cascade level */
            (void)memcpy(&bUid[0], &pUidIn[bUidIndex], 4);
 8013448:	7e7b      	ldrb	r3, [r7, #25]
 801344a:	68ba      	ldr	r2, [r7, #8]
 801344c:	4413      	add	r3, r2
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	613b      	str	r3, [r7, #16]

            /* [Incrementing Uid index would have no effect] */

            /* All bits except BCC are valid */
            bNvbUid = 0x40;
 8013452:	2340      	movs	r3, #64	@ 0x40
 8013454:	75bb      	strb	r3, [r7, #22]
 8013456:	e097      	b.n	8013588 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
        }
        else if (bLenUidIn > (bUidIndex + /* */ 4U))
 8013458:	79fa      	ldrb	r2, [r7, #7]
 801345a:	7e7b      	ldrb	r3, [r7, #25]
 801345c:	3304      	adds	r3, #4
 801345e:	429a      	cmp	r2, r3
 8013460:	d911      	bls.n	8013486 <phpalI14443p3a_Sw_ActivateCard+0x1ae>
        {
            /* Prepend cascade tag if we expect more cascade levels*/
            bUid[0] = PHPAL_I14443P3A_CASCADE_TAG;
 8013462:	2388      	movs	r3, #136	@ 0x88
 8013464:	743b      	strb	r3, [r7, #16]

            /* Only three more uid bytes are valid for this level */
            (void)memcpy(&bUid[1], &pUidIn[bUidIndex], 3);
 8013466:	7e7b      	ldrb	r3, [r7, #25]
 8013468:	68ba      	ldr	r2, [r7, #8]
 801346a:	18d1      	adds	r1, r2, r3
 801346c:	f107 0310 	add.w	r3, r7, #16
 8013470:	3301      	adds	r3, #1
 8013472:	2203      	movs	r2, #3
 8013474:	4618      	mov	r0, r3
 8013476:	f009 fec2 	bl	801d1fe <memcpy>

            /* Increment Uid index */
            bUidIndex += 3U;
 801347a:	7e7b      	ldrb	r3, [r7, #25]
 801347c:	3303      	adds	r3, #3
 801347e:	767b      	strb	r3, [r7, #25]

            /* All bits except BCC are valid */
            bNvbUid = 0x40;
 8013480:	2340      	movs	r3, #64	@ 0x40
 8013482:	75bb      	strb	r3, [r7, #22]
 8013484:	e080      	b.n	8013588 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
        }
        else
        {
            /* No Uid given */
            bNvbUid = 0;
 8013486:	2300      	movs	r3, #0
 8013488:	75bb      	strb	r3, [r7, #22]
        }

        /* Anticollision Loop */
        while (bNvbUid != 0x40U)
 801348a:	e07d      	b.n	8013588 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
        {
            /* Perform single anticollision command */
            status = phpalI14443p3a_Sw_Anticollision(pDataParams, bCascadeLevel, bUid, bNvbUid, bUid, &bNvbUid);
 801348c:	7db8      	ldrb	r0, [r7, #22]
 801348e:	f107 0210 	add.w	r2, r7, #16
 8013492:	7ef9      	ldrb	r1, [r7, #27]
 8013494:	f107 0316 	add.w	r3, r7, #22
 8013498:	9301      	str	r3, [sp, #4]
 801349a:	f107 0310 	add.w	r3, r7, #16
 801349e:	9300      	str	r3, [sp, #0]
 80134a0:	4603      	mov	r3, r0
 80134a2:	68f8      	ldr	r0, [r7, #12]
 80134a4:	f7ff fcc9 	bl	8012e3a <phpalI14443p3a_Sw_Anticollision>
 80134a8:	4603      	mov	r3, r0
 80134aa:	83fb      	strh	r3, [r7, #30]

            /* As per EMVCo 2.6 req 9.6.1.3, wait for at least Tmin retransmission in case of timeout error. */
            if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	7d1b      	ldrb	r3, [r3, #20]
 80134b0:	2b01      	cmp	r3, #1
 80134b2:	d12b      	bne.n	801350c <phpalI14443p3a_Sw_ActivateCard+0x234>
            {
                bRetryCount = 0;
 80134b4:	2300      	movs	r3, #0
 80134b6:	763b      	strb	r3, [r7, #24]
                while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 80134b8:	e021      	b.n	80134fe <phpalI14443p3a_Sw_ActivateCard+0x226>
                {
                    bRetryCount++;
 80134ba:	7e3b      	ldrb	r3, [r7, #24]
 80134bc:	3301      	adds	r3, #1
 80134be:	763b      	strb	r3, [r7, #24]
                    /* Wait for at least Tmin retransmission delay. */
                    PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	685b      	ldr	r3, [r3, #4]
 80134c4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80134c8:	2100      	movs	r1, #0
 80134ca:	4618      	mov	r0, r3
 80134cc:	f7f9 fe9c 	bl	800d208 <phhalHw_Pn5180_Wait>
 80134d0:	4603      	mov	r3, r0
 80134d2:	83fb      	strh	r3, [r7, #30]
 80134d4:	8bfb      	ldrh	r3, [r7, #30]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d001      	beq.n	80134de <phpalI14443p3a_Sw_ActivateCard+0x206>
 80134da:	8bfb      	ldrh	r3, [r7, #30]
 80134dc:	e0ac      	b.n	8013638 <phpalI14443p3a_Sw_ActivateCard+0x360>
                        pDataParams->pHalDataParams,
                        PHHAL_HW_TIME_MICROSECONDS,
                        PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

                    status = phpalI14443p3a_Sw_Anticollision(pDataParams, bCascadeLevel, bUid, bNvbUid, bUid, &bNvbUid);
 80134de:	7db8      	ldrb	r0, [r7, #22]
 80134e0:	f107 0210 	add.w	r2, r7, #16
 80134e4:	7ef9      	ldrb	r1, [r7, #27]
 80134e6:	f107 0316 	add.w	r3, r7, #22
 80134ea:	9301      	str	r3, [sp, #4]
 80134ec:	f107 0310 	add.w	r3, r7, #16
 80134f0:	9300      	str	r3, [sp, #0]
 80134f2:	4603      	mov	r3, r0
 80134f4:	68f8      	ldr	r0, [r7, #12]
 80134f6:	f7ff fca0 	bl	8012e3a <phpalI14443p3a_Sw_Anticollision>
 80134fa:	4603      	mov	r3, r0
 80134fc:	83fb      	strh	r3, [r7, #30]
                while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 80134fe:	8bfb      	ldrh	r3, [r7, #30]
 8013500:	b2db      	uxtb	r3, r3
 8013502:	2b01      	cmp	r3, #1
 8013504:	d102      	bne.n	801350c <phpalI14443p3a_Sw_ActivateCard+0x234>
 8013506:	7e3b      	ldrb	r3, [r7, #24]
 8013508:	2b01      	cmp	r3, #1
 801350a:	d9d6      	bls.n	80134ba <phpalI14443p3a_Sw_ActivateCard+0x1e2>
                }
            }
            /* Collision error occured, add one (zero-)bit to Uid */
            if ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 801350c:	8bfb      	ldrh	r3, [r7, #30]
 801350e:	b2db      	uxtb	r3, r3
 8013510:	2b03      	cmp	r3, #3
 8013512:	d11b      	bne.n	801354c <phpalI14443p3a_Sw_ActivateCard+0x274>
            {
                /* Emvco: case_id TA302_00 */
                if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	7d1b      	ldrb	r3, [r3, #20]
 8013518:	2b01      	cmp	r3, #1
 801351a:	d101      	bne.n	8013520 <phpalI14443p3a_Sw_ActivateCard+0x248>
                {
                    /* Report Error to Application and Application will perform PICC Reset */
                    return status;
 801351c:	8bfb      	ldrh	r3, [r7, #30]
 801351e:	e08b      	b.n	8013638 <phpalI14443p3a_Sw_ActivateCard+0x360>
                }

                /* Set the more cards available flag */
                *pMoreCardsAvailable = PH_ON;
 8013520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013522:	2201      	movs	r2, #1
 8013524:	701a      	strb	r2, [r3, #0]

                /* Increment NvbUid by one bit */
                if ((bNvbUid & 0x07U) < 7U)
 8013526:	7dbb      	ldrb	r3, [r7, #22]
 8013528:	f003 0307 	and.w	r3, r3, #7
 801352c:	2b06      	cmp	r3, #6
 801352e:	d804      	bhi.n	801353a <phpalI14443p3a_Sw_ActivateCard+0x262>
                {
                    bNvbUid++;
 8013530:	7dbb      	ldrb	r3, [r7, #22]
 8013532:	3301      	adds	r3, #1
 8013534:	b2db      	uxtb	r3, r3
 8013536:	75bb      	strb	r3, [r7, #22]
 8013538:	e00d      	b.n	8013556 <phpalI14443p3a_Sw_ActivateCard+0x27e>
                }
                /* This is more difficult if we have to increment the bytecount */
                else
                {
                    bNvbUid = (uint8_t)((((bNvbUid & 0xF0U) >> 4U) + 1U) << 4U);
 801353a:	7dbb      	ldrb	r3, [r7, #22]
 801353c:	091b      	lsrs	r3, r3, #4
 801353e:	b2db      	uxtb	r3, r3
 8013540:	3301      	adds	r3, #1
 8013542:	b2db      	uxtb	r3, r3
 8013544:	011b      	lsls	r3, r3, #4
 8013546:	b2db      	uxtb	r3, r3
 8013548:	75bb      	strb	r3, [r7, #22]
 801354a:	e004      	b.n	8013556 <phpalI14443p3a_Sw_ActivateCard+0x27e>
                }
            }
            else
            {
                /* Check success */
                PH_CHECK_SUCCESS(status);
 801354c:	8bfb      	ldrh	r3, [r7, #30]
 801354e:	2b00      	cmp	r3, #0
 8013550:	d001      	beq.n	8013556 <phpalI14443p3a_Sw_ActivateCard+0x27e>
 8013552:	8bfb      	ldrh	r3, [r7, #30]
 8013554:	e070      	b.n	8013638 <phpalI14443p3a_Sw_ActivateCard+0x360>
            }

            if(bCollDetected == PH_OFF)
 8013556:	7dfb      	ldrb	r3, [r7, #23]
 8013558:	2b00      	cmp	r3, #0
 801355a:	d115      	bne.n	8013588 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
                 * EMVCo article 5.4.2
                 * So For Single UID Size The NFC Forum Device MUST set nfcid10 of a single-size NFCID1 and nfcid13
                 * of a double-size NFCID1 to a value different from 88h.
                 */
                if(
                    ( (((bAtqa[0] & 0xC0U) == 0x00U) && (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_1))||
 801355c:	7d3b      	ldrb	r3, [r7, #20]
 801355e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
                if(
 8013562:	2b00      	cmp	r3, #0
 8013564:	d102      	bne.n	801356c <phpalI14443p3a_Sw_ActivateCard+0x294>
                    ( (((bAtqa[0] & 0xC0U) == 0x00U) && (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_1))||
 8013566:	7efb      	ldrb	r3, [r7, #27]
 8013568:	2b93      	cmp	r3, #147	@ 0x93
 801356a:	d007      	beq.n	801357c <phpalI14443p3a_Sw_ActivateCard+0x2a4>
                      (((bAtqa[0] & 0xC0U) == 0x40U) && (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_2)) ) &&
 801356c:	7d3b      	ldrb	r3, [r7, #20]
 801356e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
                    ( (((bAtqa[0] & 0xC0U) == 0x00U) && (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_1))||
 8013572:	2b40      	cmp	r3, #64	@ 0x40
 8013574:	d108      	bne.n	8013588 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
                      (((bAtqa[0] & 0xC0U) == 0x40U) && (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_2)) ) &&
 8013576:	7efb      	ldrb	r3, [r7, #27]
 8013578:	2b95      	cmp	r3, #149	@ 0x95
 801357a:	d105      	bne.n	8013588 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
                      (bUid[0] == PHPAL_I14443P3A_CASCADE_TAG)
 801357c:	7c3b      	ldrb	r3, [r7, #16]
                      (((bAtqa[0] & 0xC0U) == 0x40U) && (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_2)) ) &&
 801357e:	2b88      	cmp	r3, #136	@ 0x88
 8013580:	d102      	bne.n	8013588 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
                  )
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 8013582:	f240 3306 	movw	r3, #774	@ 0x306
 8013586:	e057      	b.n	8013638 <phpalI14443p3a_Sw_ActivateCard+0x360>
        while (bNvbUid != 0x40U)
 8013588:	7dbb      	ldrb	r3, [r7, #22]
 801358a:	2b40      	cmp	r3, #64	@ 0x40
 801358c:	f47f af7e 	bne.w	801348c <phpalI14443p3a_Sw_ActivateCard+0x1b4>
                }
            }
        }

        statusTmp = phpalI14443p3a_Sw_Select(pDataParams, bCascadeLevel, bUid, pSak);
 8013590:	f107 0210 	add.w	r2, r7, #16
 8013594:	7ef9      	ldrb	r1, [r7, #27]
 8013596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013598:	68f8      	ldr	r0, [r7, #12]
 801359a:	f7ff fe85 	bl	80132a8 <phpalI14443p3a_Sw_Select>
 801359e:	4603      	mov	r3, r0
 80135a0:	83bb      	strh	r3, [r7, #28]

        /* As per EMVCo 2.6 req 9.6.1.3, wait for at least Tmin retransmission in case of timeout error. */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	7d1b      	ldrb	r3, [r3, #20]
 80135a6:	2b01      	cmp	r3, #1
 80135a8:	d124      	bne.n	80135f4 <phpalI14443p3a_Sw_ActivateCard+0x31c>
        {
            bRetryCount = 0;
 80135aa:	2300      	movs	r3, #0
 80135ac:	763b      	strb	r3, [r7, #24]
            while (((statusTmp & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 80135ae:	e01a      	b.n	80135e6 <phpalI14443p3a_Sw_ActivateCard+0x30e>
            {
                bRetryCount++;
 80135b0:	7e3b      	ldrb	r3, [r7, #24]
 80135b2:	3301      	adds	r3, #1
 80135b4:	763b      	strb	r3, [r7, #24]
                /* Wait for at least Tmin retransmission delay. */
                PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 80135b6:	68fb      	ldr	r3, [r7, #12]
 80135b8:	685b      	ldr	r3, [r3, #4]
 80135ba:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80135be:	2100      	movs	r1, #0
 80135c0:	4618      	mov	r0, r3
 80135c2:	f7f9 fe21 	bl	800d208 <phhalHw_Pn5180_Wait>
 80135c6:	4603      	mov	r3, r0
 80135c8:	83fb      	strh	r3, [r7, #30]
 80135ca:	8bfb      	ldrh	r3, [r7, #30]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d001      	beq.n	80135d4 <phpalI14443p3a_Sw_ActivateCard+0x2fc>
 80135d0:	8bfb      	ldrh	r3, [r7, #30]
 80135d2:	e031      	b.n	8013638 <phpalI14443p3a_Sw_ActivateCard+0x360>
                    pDataParams->pHalDataParams,
                    PHHAL_HW_TIME_MICROSECONDS,
                    PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

                statusTmp = phpalI14443p3a_Sw_Select(pDataParams, bCascadeLevel, bUid, pSak);
 80135d4:	f107 0210 	add.w	r2, r7, #16
 80135d8:	7ef9      	ldrb	r1, [r7, #27]
 80135da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135dc:	68f8      	ldr	r0, [r7, #12]
 80135de:	f7ff fe63 	bl	80132a8 <phpalI14443p3a_Sw_Select>
 80135e2:	4603      	mov	r3, r0
 80135e4:	83bb      	strh	r3, [r7, #28]
            while (((statusTmp & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 80135e6:	8bbb      	ldrh	r3, [r7, #28]
 80135e8:	b2db      	uxtb	r3, r3
 80135ea:	2b01      	cmp	r3, #1
 80135ec:	d102      	bne.n	80135f4 <phpalI14443p3a_Sw_ActivateCard+0x31c>
 80135ee:	7e3b      	ldrb	r3, [r7, #24]
 80135f0:	2b01      	cmp	r3, #1
 80135f2:	d9dd      	bls.n	80135b0 <phpalI14443p3a_Sw_ActivateCard+0x2d8>
            }
        }

        /* Emvco: Case_id TA305. EMVCo Req. 9.6.1.2 */
        PH_CHECK_SUCCESS(statusTmp);
 80135f4:	8bbb      	ldrh	r3, [r7, #28]
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d001      	beq.n	80135fe <phpalI14443p3a_Sw_ActivateCard+0x326>
 80135fa:	8bbb      	ldrh	r3, [r7, #28]
 80135fc:	e01c      	b.n	8013638 <phpalI14443p3a_Sw_ActivateCard+0x360>

        /* Cascade Bit is cleared -> no further cascade levels */
        if ((pSak[0] & 0x04U) == 0U)
 80135fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013600:	781b      	ldrb	r3, [r3, #0]
 8013602:	f003 0304 	and.w	r3, r3, #4
 8013606:	2b00      	cmp	r3, #0
 8013608:	d007      	beq.n	801361a <phpalI14443p3a_Sw_ActivateCard+0x342>
    for (bCascadeIndex = 0; bCascadeIndex < 3U; bCascadeIndex++)
 801360a:	7ebb      	ldrb	r3, [r7, #26]
 801360c:	3301      	adds	r3, #1
 801360e:	76bb      	strb	r3, [r7, #26]
 8013610:	7ebb      	ldrb	r3, [r7, #26]
 8013612:	2b02      	cmp	r3, #2
 8013614:	f67f af00 	bls.w	8013418 <phpalI14443p3a_Sw_ActivateCard+0x140>
 8013618:	e000      	b.n	801361c <phpalI14443p3a_Sw_ActivateCard+0x344>
        {
            break;
 801361a:	bf00      	nop
        }
    }

    /* Return UID */
    (void)memcpy(pUidOut, pDataParams->abUid, pDataParams->bUidLength);
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	f103 0108 	add.w	r1, r3, #8
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	7c9b      	ldrb	r3, [r3, #18]
 8013626:	461a      	mov	r2, r3
 8013628:	6838      	ldr	r0, [r7, #0]
 801362a:	f009 fde8 	bl	801d1fe <memcpy>
    *pLenUidOut = pDataParams->bUidLength;
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	7c9a      	ldrb	r2, [r3, #18]
 8013632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013634:	701a      	strb	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8013636:	2300      	movs	r3, #0
}
 8013638:	4618      	mov	r0, r3
 801363a:	3720      	adds	r7, #32
 801363c:	46bd      	mov	sp, r7
 801363e:	bd80      	pop	{r7, pc}

08013640 <phpalI14443p3a_Sw_Exchange>:
                                      uint8_t * pTxBuffer,
                                      uint16_t wTxLength,
                                      uint8_t ** ppRxBuffer,
                                      uint16_t * pRxLength
                                      )
{
 8013640:	b580      	push	{r7, lr}
 8013642:	b086      	sub	sp, #24
 8013644:	af02      	add	r7, sp, #8
 8013646:	60f8      	str	r0, [r7, #12]
 8013648:	607a      	str	r2, [r7, #4]
 801364a:	461a      	mov	r2, r3
 801364c:	460b      	mov	r3, r1
 801364e:	817b      	strh	r3, [r7, #10]
 8013650:	4613      	mov	r3, r2
 8013652:	813b      	strh	r3, [r7, #8]
    /* direct mapping of HAL exchange function */
    return phhalHw_Exchange(
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	6858      	ldr	r0, [r3, #4]
 8013658:	893a      	ldrh	r2, [r7, #8]
 801365a:	8979      	ldrh	r1, [r7, #10]
 801365c:	69fb      	ldr	r3, [r7, #28]
 801365e:	9301      	str	r3, [sp, #4]
 8013660:	69bb      	ldr	r3, [r7, #24]
 8013662:	9300      	str	r3, [sp, #0]
 8013664:	4613      	mov	r3, r2
 8013666:	687a      	ldr	r2, [r7, #4]
 8013668:	f7f9 fad2 	bl	800cc10 <phhalHw_Pn5180_Exchange>
 801366c:	4603      	mov	r3, r0
        wOption,
        pTxBuffer,
        wTxLength,
        ppRxBuffer,
        pRxLength);
}
 801366e:	4618      	mov	r0, r3
 8013670:	3710      	adds	r7, #16
 8013672:	46bd      	mov	sp, r7
 8013674:	bd80      	pop	{r7, pc}

08013676 <phpalI14443p3a_Sw_RequestAEx>:
phStatus_t phpalI14443p3a_Sw_RequestAEx(
                                        phpalI14443p3a_Sw_DataParams_t * pDataParams,
                                        uint8_t bReqCode,
                                        uint8_t * pAtqa
                                        )
{
 8013676:	b580      	push	{r7, lr}
 8013678:	b08a      	sub	sp, #40	@ 0x28
 801367a:	af02      	add	r7, sp, #8
 801367c:	60f8      	str	r0, [r7, #12]
 801367e:	460b      	mov	r3, r1
 8013680:	607a      	str	r2, [r7, #4]
 8013682:	72fb      	strb	r3, [r7, #11]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    phStatus_t  PH_MEMLOC_REM Status;
    uint8_t     PH_MEMLOC_REM cmd[1];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8013684:	2300      	movs	r3, #0
 8013686:	617b      	str	r3, [r7, #20]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8013688:	2300      	movs	r3, #0
 801368a:	827b      	strh	r3, [r7, #18]
    uint16_t    PH_MEMLOC_REM wRegister;

    /* Disable MIFARE Classic contactless IC Crypto1 */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	685b      	ldr	r3, [r3, #4]
 8013690:	2201      	movs	r2, #1
 8013692:	212e      	movs	r1, #46	@ 0x2e
 8013694:	4618      	mov	r0, r3
 8013696:	f7f9 fe3b 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 801369a:	4603      	mov	r3, r0
 801369c:	83fb      	strh	r3, [r7, #30]
 801369e:	8bfb      	ldrh	r3, [r7, #30]
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d001      	beq.n	80136a8 <phpalI14443p3a_Sw_RequestAEx+0x32>
 80136a4:	8bfb      	ldrh	r3, [r7, #30]
 80136a6:	e0cc      	b.n	8013842 <phpalI14443p3a_Sw_RequestAEx+0x1cc>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_DISABLE_MF_CRYPTO1,
        PH_ON));

    /* Reset default data rates */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	685b      	ldr	r3, [r3, #4]
 80136ac:	2200      	movs	r2, #0
 80136ae:	2109      	movs	r1, #9
 80136b0:	4618      	mov	r0, r3
 80136b2:	f7f9 fe2d 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 80136b6:	4603      	mov	r3, r0
 80136b8:	83fb      	strh	r3, [r7, #30]
 80136ba:	8bfb      	ldrh	r3, [r7, #30]
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d001      	beq.n	80136c4 <phpalI14443p3a_Sw_RequestAEx+0x4e>
 80136c0:	8bfb      	ldrh	r3, [r7, #30]
 80136c2:	e0be      	b.n	8013842 <phpalI14443p3a_Sw_RequestAEx+0x1cc>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TXDATARATE_FRAMING,
        PHHAL_HW_RF_DATARATE_106));
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80136c4:	68fb      	ldr	r3, [r7, #12]
 80136c6:	685b      	ldr	r3, [r3, #4]
 80136c8:	2200      	movs	r2, #0
 80136ca:	210a      	movs	r1, #10
 80136cc:	4618      	mov	r0, r3
 80136ce:	f7f9 fe1f 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 80136d2:	4603      	mov	r3, r0
 80136d4:	83fb      	strh	r3, [r7, #30]
 80136d6:	8bfb      	ldrh	r3, [r7, #30]
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d001      	beq.n	80136e0 <phpalI14443p3a_Sw_RequestAEx+0x6a>
 80136dc:	8bfb      	ldrh	r3, [r7, #30]
 80136de:	e0b0      	b.n	8013842 <phpalI14443p3a_Sw_RequestAEx+0x1cc>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_RXDATARATE_FRAMING,
        PHHAL_HW_RF_DATARATE_106));

    /* Set selection timeout */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	685b      	ldr	r3, [r3, #4]
 80136e4:	2291      	movs	r2, #145	@ 0x91
 80136e6:	210d      	movs	r1, #13
 80136e8:	4618      	mov	r0, r3
 80136ea:	f7f9 fe11 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 80136ee:	4603      	mov	r3, r0
 80136f0:	83fb      	strh	r3, [r7, #30]
 80136f2:	8bfb      	ldrh	r3, [r7, #30]
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d001      	beq.n	80136fc <phpalI14443p3a_Sw_RequestAEx+0x86>
 80136f8:	8bfb      	ldrh	r3, [r7, #30]
 80136fa:	e0a2      	b.n	8013842 <phpalI14443p3a_Sw_RequestAEx+0x1cc>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
        PHPAL_I14443P3A_SELECTION_TIME_US + PHPAL_I14443P3A_EXT_TIME_US));

    /* Retrieve RxWaitTime */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXWAIT_US, &wRegister));
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	685b      	ldr	r3, [r3, #4]
 8013700:	f107 0210 	add.w	r2, r7, #16
 8013704:	2106      	movs	r1, #6
 8013706:	4618      	mov	r0, r3
 8013708:	f7fb fa50 	bl	800ebac <phhalHw_Pn5180_GetConfig>
 801370c:	4603      	mov	r3, r0
 801370e:	83fb      	strh	r3, [r7, #30]
 8013710:	8bfb      	ldrh	r3, [r7, #30]
 8013712:	2b00      	cmp	r3, #0
 8013714:	d001      	beq.n	801371a <phpalI14443p3a_Sw_RequestAEx+0xa4>
 8013716:	8bfb      	ldrh	r3, [r7, #30]
 8013718:	e093      	b.n	8013842 <phpalI14443p3a_Sw_RequestAEx+0x1cc>
    /* Set RxWaitTime to 76 microseconds equivalent to 8 Bits. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXWAIT_US, 76));
 801371a:	68fb      	ldr	r3, [r7, #12]
 801371c:	685b      	ldr	r3, [r3, #4]
 801371e:	224c      	movs	r2, #76	@ 0x4c
 8013720:	2106      	movs	r1, #6
 8013722:	4618      	mov	r0, r3
 8013724:	f7f9 fdf4 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8013728:	4603      	mov	r3, r0
 801372a:	83fb      	strh	r3, [r7, #30]
 801372c:	8bfb      	ldrh	r3, [r7, #30]
 801372e:	2b00      	cmp	r3, #0
 8013730:	d001      	beq.n	8013736 <phpalI14443p3a_Sw_RequestAEx+0xc0>
 8013732:	8bfb      	ldrh	r3, [r7, #30]
 8013734:	e085      	b.n	8013842 <phpalI14443p3a_Sw_RequestAEx+0x1cc>

    /* Switch off CRC */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXCRC, PH_OFF));
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	685b      	ldr	r3, [r3, #4]
 801373a:	2200      	movs	r2, #0
 801373c:	2101      	movs	r1, #1
 801373e:	4618      	mov	r0, r3
 8013740:	f7f9 fde6 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8013744:	4603      	mov	r3, r0
 8013746:	83fb      	strh	r3, [r7, #30]
 8013748:	8bfb      	ldrh	r3, [r7, #30]
 801374a:	2b00      	cmp	r3, #0
 801374c:	d001      	beq.n	8013752 <phpalI14443p3a_Sw_RequestAEx+0xdc>
 801374e:	8bfb      	ldrh	r3, [r7, #30]
 8013750:	e077      	b.n	8013842 <phpalI14443p3a_Sw_RequestAEx+0x1cc>
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXCRC, PH_OFF));
 8013752:	68fb      	ldr	r3, [r7, #12]
 8013754:	685b      	ldr	r3, [r3, #4]
 8013756:	2200      	movs	r2, #0
 8013758:	2102      	movs	r1, #2
 801375a:	4618      	mov	r0, r3
 801375c:	f7f9 fdd8 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8013760:	4603      	mov	r3, r0
 8013762:	83fb      	strh	r3, [r7, #30]
 8013764:	8bfb      	ldrh	r3, [r7, #30]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d001      	beq.n	801376e <phpalI14443p3a_Sw_RequestAEx+0xf8>
 801376a:	8bfb      	ldrh	r3, [r7, #30]
 801376c:	e069      	b.n	8013842 <phpalI14443p3a_Sw_RequestAEx+0x1cc>

    /* Only 7 bits are valid */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXLASTBITS, 7));
 801376e:	68fb      	ldr	r3, [r7, #12]
 8013770:	685b      	ldr	r3, [r3, #4]
 8013772:	2207      	movs	r2, #7
 8013774:	2103      	movs	r1, #3
 8013776:	4618      	mov	r0, r3
 8013778:	f7f9 fdca 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 801377c:	4603      	mov	r3, r0
 801377e:	83fb      	strh	r3, [r7, #30]
 8013780:	8bfb      	ldrh	r3, [r7, #30]
 8013782:	2b00      	cmp	r3, #0
 8013784:	d001      	beq.n	801378a <phpalI14443p3a_Sw_RequestAEx+0x114>
 8013786:	8bfb      	ldrh	r3, [r7, #30]
 8013788:	e05b      	b.n	8013842 <phpalI14443p3a_Sw_RequestAEx+0x1cc>

    /* Send ReqA command */
    cmd[0] = bReqCode;
 801378a:	7afb      	ldrb	r3, [r7, #11]
 801378c:	763b      	strb	r3, [r7, #24]
    statusTmp = phhalHw_Exchange(pDataParams->pHalDataParams, PH_EXCHANGE_DEFAULT, cmd, 1, &pResp, &wRespLength);
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	6858      	ldr	r0, [r3, #4]
 8013792:	f107 0218 	add.w	r2, r7, #24
 8013796:	f107 0312 	add.w	r3, r7, #18
 801379a:	9301      	str	r3, [sp, #4]
 801379c:	f107 0314 	add.w	r3, r7, #20
 80137a0:	9300      	str	r3, [sp, #0]
 80137a2:	2301      	movs	r3, #1
 80137a4:	2100      	movs	r1, #0
 80137a6:	f7f9 fa33 	bl	800cc10 <phhalHw_Pn5180_Exchange>
 80137aa:	4603      	mov	r3, r0
 80137ac:	83fb      	strh	r3, [r7, #30]

    /* Restore previous RxWaitTime */
    PH_CHECK_SUCCESS_FCT(Status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXWAIT_US, wRegister));
 80137ae:	68fb      	ldr	r3, [r7, #12]
 80137b0:	685b      	ldr	r3, [r3, #4]
 80137b2:	8a3a      	ldrh	r2, [r7, #16]
 80137b4:	2106      	movs	r1, #6
 80137b6:	4618      	mov	r0, r3
 80137b8:	f7f9 fdaa 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 80137bc:	4603      	mov	r3, r0
 80137be:	83bb      	strh	r3, [r7, #28]
 80137c0:	8bbb      	ldrh	r3, [r7, #28]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d001      	beq.n	80137ca <phpalI14443p3a_Sw_RequestAEx+0x154>
 80137c6:	8bbb      	ldrh	r3, [r7, #28]
 80137c8:	e03b      	b.n	8013842 <phpalI14443p3a_Sw_RequestAEx+0x1cc>

    PH_CHECK_SUCCESS(statusTmp);
 80137ca:	8bfb      	ldrh	r3, [r7, #30]
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d001      	beq.n	80137d4 <phpalI14443p3a_Sw_RequestAEx+0x15e>
 80137d0:	8bfb      	ldrh	r3, [r7, #30]
 80137d2:	e036      	b.n	8013842 <phpalI14443p3a_Sw_RequestAEx+0x1cc>
    /* Check and copy ATQA */
    if (wRespLength == PHPAL_I14443P3A_ATQA_LENGTH)
 80137d4:	8a7b      	ldrh	r3, [r7, #18]
 80137d6:	2b02      	cmp	r3, #2
 80137d8:	d12f      	bne.n	801383a <phpalI14443p3a_Sw_RequestAEx+0x1c4>
    {
        (void)memcpy(pAtqa, pResp, PHPAL_I14443P3A_ATQA_LENGTH);
 80137da:	697b      	ldr	r3, [r7, #20]
 80137dc:	881b      	ldrh	r3, [r3, #0]
 80137de:	b29a      	uxth	r2, r3
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	801a      	strh	r2, [r3, #0]
        /* Emvco: case_id: TA304_10, TA304_11, TA304_12 */
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	7d1b      	ldrb	r3, [r3, #20]
 80137e8:	2b01      	cmp	r3, #1
 80137ea:	d109      	bne.n	8013800 <phpalI14443p3a_Sw_RequestAEx+0x18a>
        {
            /*5.3.2*/
            if(0U != (pAtqa[1] & 0xF0U))    /* Most significant nibble of byte 2 must be 0 */
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	3301      	adds	r3, #1
 80137f0:	781b      	ldrb	r3, [r3, #0]
 80137f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d022      	beq.n	8013840 <phpalI14443p3a_Sw_RequestAEx+0x1ca>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 80137fa:	f240 3306 	movw	r3, #774	@ 0x306
 80137fe:	e020      	b.n	8013842 <phpalI14443p3a_Sw_RequestAEx+0x1cc>
            }
        }
        else
        {
            /* NFCForum-TS-DigitalProtocol-1.0, Requirement 18, Section 4.6.3.3 */
            if((((pAtqa[0] & 0x1FU) == 0x00U) && ((pAtqa[1] & 0x0FU) != 0x0CU)) || (((pAtqa[1] & 0x0FU) == 0x0CU) && ((pAtqa[0] & 0x1FU) != 0x00U)))
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	781b      	ldrb	r3, [r3, #0]
 8013804:	f003 031f 	and.w	r3, r3, #31
 8013808:	2b00      	cmp	r3, #0
 801380a:	d106      	bne.n	801381a <phpalI14443p3a_Sw_RequestAEx+0x1a4>
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	3301      	adds	r3, #1
 8013810:	781b      	ldrb	r3, [r3, #0]
 8013812:	f003 030f 	and.w	r3, r3, #15
 8013816:	2b0c      	cmp	r3, #12
 8013818:	d10c      	bne.n	8013834 <phpalI14443p3a_Sw_RequestAEx+0x1be>
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	3301      	adds	r3, #1
 801381e:	781b      	ldrb	r3, [r3, #0]
 8013820:	f003 030f 	and.w	r3, r3, #15
 8013824:	2b0c      	cmp	r3, #12
 8013826:	d10b      	bne.n	8013840 <phpalI14443p3a_Sw_RequestAEx+0x1ca>
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	781b      	ldrb	r3, [r3, #0]
 801382c:	f003 031f 	and.w	r3, r3, #31
 8013830:	2b00      	cmp	r3, #0
 8013832:	d005      	beq.n	8013840 <phpalI14443p3a_Sw_RequestAEx+0x1ca>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 8013834:	f240 3306 	movw	r3, #774	@ 0x306
 8013838:	e003      	b.n	8013842 <phpalI14443p3a_Sw_RequestAEx+0x1cc>
            }
        }
    }
    else
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 801383a:	f240 3306 	movw	r3, #774	@ 0x306
 801383e:	e000      	b.n	8013842 <phpalI14443p3a_Sw_RequestAEx+0x1cc>
    }

    return PH_ERR_SUCCESS;
 8013840:	2300      	movs	r3, #0
}
 8013842:	4618      	mov	r0, r3
 8013844:	3720      	adds	r7, #32
 8013846:	46bd      	mov	sp, r7
 8013848:	bd80      	pop	{r7, pc}

0801384a <phpalI14443p3a_Sw_GetSerialNo>:
phStatus_t phpalI14443p3a_Sw_GetSerialNo(
    phpalI14443p3a_Sw_DataParams_t * pDataParams,
    uint8_t * pUidOut,
    uint8_t * pLenUidOut
    )
{
 801384a:	b580      	push	{r7, lr}
 801384c:	b084      	sub	sp, #16
 801384e:	af00      	add	r7, sp, #0
 8013850:	60f8      	str	r0, [r7, #12]
 8013852:	60b9      	str	r1, [r7, #8]
 8013854:	607a      	str	r2, [r7, #4]
    /* Return an error if UID is not complete */
    if (0U == (pDataParams->bUidComplete))
 8013856:	68fb      	ldr	r3, [r7, #12]
 8013858:	7cdb      	ldrb	r3, [r3, #19]
 801385a:	2b00      	cmp	r3, #0
 801385c:	d102      	bne.n	8013864 <phpalI14443p3a_Sw_GetSerialNo+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_PAL_ISO14443P3A);
 801385e:	f240 3325 	movw	r3, #805	@ 0x325
 8013862:	e00d      	b.n	8013880 <phpalI14443p3a_Sw_GetSerialNo+0x36>
    }

    /* Copy UID */
    (void)memcpy(pUidOut, pDataParams->abUid, pDataParams->bUidLength);
 8013864:	68fb      	ldr	r3, [r7, #12]
 8013866:	f103 0108 	add.w	r1, r3, #8
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	7c9b      	ldrb	r3, [r3, #18]
 801386e:	461a      	mov	r2, r3
 8013870:	68b8      	ldr	r0, [r7, #8]
 8013872:	f009 fcc4 	bl	801d1fe <memcpy>
    *pLenUidOut = pDataParams->bUidLength;
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	7c9a      	ldrb	r2, [r3, #18]
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	701a      	strb	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 801387e:	2300      	movs	r3, #0
}
 8013880:	4618      	mov	r0, r3
 8013882:	3710      	adds	r7, #16
 8013884:	46bd      	mov	sp, r7
 8013886:	bd80      	pop	{r7, pc}

08013888 <phpalI14443p3b_Sw_Init>:
phStatus_t phpalI14443p3b_Sw_Init(
                                  phpalI14443p3b_Sw_DataParams_t * pDataParams,
                                  uint16_t wSizeOfDataParams,
                                  void * pHalDataParams
                                  )
{
 8013888:	b480      	push	{r7}
 801388a:	b085      	sub	sp, #20
 801388c:	af00      	add	r7, sp, #0
 801388e:	60f8      	str	r0, [r7, #12]
 8013890:	460b      	mov	r3, r1
 8013892:	607a      	str	r2, [r7, #4]
 8013894:	817b      	strh	r3, [r7, #10]
    if (sizeof(phpalI14443p3b_Sw_DataParams_t) != wSizeOfDataParams)
 8013896:	897b      	ldrh	r3, [r7, #10]
 8013898:	2b2c      	cmp	r3, #44	@ 0x2c
 801389a:	d002      	beq.n	80138a2 <phpalI14443p3b_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_ISO14443P3B);
 801389c:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 80138a0:	e051      	b.n	8013946 <phpalI14443p3b_Sw_Init+0xbe>
    }
    PH_ASSERT_NULL (pDataParams);
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d101      	bne.n	80138ac <phpalI14443p3b_Sw_Init+0x24>
 80138a8:	2321      	movs	r3, #33	@ 0x21
 80138aa:	e04c      	b.n	8013946 <phpalI14443p3b_Sw_Init+0xbe>
    PH_ASSERT_NULL (pHalDataParams);
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d101      	bne.n	80138b6 <phpalI14443p3b_Sw_Init+0x2e>
 80138b2:	2321      	movs	r3, #33	@ 0x21
 80138b4:	e047      	b.n	8013946 <phpalI14443p3b_Sw_Init+0xbe>

    /* init private data */
    pDataParams->wId                    = PH_COMP_PAL_ISO14443P3B | PHPAL_I14443P3B_SW_ID;
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	f240 4201 	movw	r2, #1025	@ 0x401
 80138bc:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams         = pHalDataParams;
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	687a      	ldr	r2, [r7, #4]
 80138c2:	605a      	str	r2, [r3, #4]
    pDataParams->bExtAtqb               = PH_OFF;
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	2200      	movs	r2, #0
 80138c8:	721a      	strb	r2, [r3, #8]
    pDataParams->bPupiValid             = PH_OFF;
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	2200      	movs	r2, #0
 80138ce:	735a      	strb	r2, [r3, #13]
    pDataParams->bCidSupported          = 0;
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	2200      	movs	r2, #0
 80138d4:	739a      	strb	r2, [r3, #14]
    pDataParams->bNadSupported          = 0;
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	2200      	movs	r2, #0
 80138da:	73da      	strb	r2, [r3, #15]
    pDataParams->bCid                   = 0;
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	2200      	movs	r2, #0
 80138e0:	741a      	strb	r2, [r3, #16]
    pDataParams->bFwi                   = PHPAL_I14443P3B_SW_FWI_DEFAULT;
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	2204      	movs	r2, #4
 80138e6:	745a      	strb	r2, [r3, #17]
    pDataParams->bFsci                  = PHPAL_I14443P3B_SW_FSCI_DEFAULT;
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	2202      	movs	r2, #2
 80138ec:	749a      	strb	r2, [r3, #18]
    pDataParams->bFsdi                  = 0;
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	2200      	movs	r2, #0
 80138f2:	74da      	strb	r2, [r3, #19]
    pDataParams->bDri                   = 0;
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	2200      	movs	r2, #0
 80138f8:	751a      	strb	r2, [r3, #20]
    pDataParams->bDsi                   = 0;
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	2200      	movs	r2, #0
 80138fe:	755a      	strb	r2, [r3, #21]
    pDataParams->bAttribParam1          = PHPAL_I14443P3B_SW_ATTRIB_PARAM1_DEFAULT;
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	2200      	movs	r2, #0
 8013904:	759a      	strb	r2, [r3, #22]
    pDataParams->pHigherLayerInf        = NULL;
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	2200      	movs	r2, #0
 801390a:	619a      	str	r2, [r3, #24]
    pDataParams->wTxWait                = PHPAL_I14443P3B_SW_TXWAIT_US_DEFAULT;
 801390c:	68fb      	ldr	r3, [r7, #12]
 801390e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8013912:	839a      	strh	r2, [r3, #28]
    pDataParams->wHigherLayerInfLen     = 0;
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	2200      	movs	r2, #0
 8013918:	83da      	strh	r2, [r3, #30]
    pDataParams->pHigherLayerResp       = NULL;
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	2200      	movs	r2, #0
 801391e:	621a      	str	r2, [r3, #32]
    pDataParams->wHigherLayerRespSize   = 0;
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	2200      	movs	r2, #0
 8013924:	849a      	strh	r2, [r3, #36]	@ 0x24
    pDataParams->wHigherLayerRespLen    = 0;
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	2200      	movs	r2, #0
 801392a:	84da      	strh	r2, [r3, #38]	@ 0x26
    pDataParams->bOpeMode               = RD_LIB_MODE_NFC;
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	2202      	movs	r2, #2
 8013930:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    pDataParams->bPollCmd               = PHPAL_I14443P3B_USE_REQB;
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	2200      	movs	r2, #0
 8013938:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    pDataParams->bRetryCount            = PHPAL_I14443P3B_ATTRIB_RETRY_MAX;
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	2201      	movs	r2, #1
 8013940:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

    return PH_ERR_SUCCESS;
 8013944:	2300      	movs	r3, #0
}
 8013946:	4618      	mov	r0, r3
 8013948:	3714      	adds	r7, #20
 801394a:	46bd      	mov	sp, r7
 801394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013950:	4770      	bx	lr
	...

08013954 <phpalI14443p3b_Sw_SetConfig>:
phStatus_t phpalI14443p3b_Sw_SetConfig(
                                       phpalI14443p3b_Sw_DataParams_t * pDataParams,
                                       uint16_t wConfig,
                                       uint16_t wValue
                                       )
{
 8013954:	b480      	push	{r7}
 8013956:	b083      	sub	sp, #12
 8013958:	af00      	add	r7, sp, #0
 801395a:	6078      	str	r0, [r7, #4]
 801395c:	460b      	mov	r3, r1
 801395e:	807b      	strh	r3, [r7, #2]
 8013960:	4613      	mov	r3, r2
 8013962:	803b      	strh	r3, [r7, #0]
    switch (wConfig)
 8013964:	887b      	ldrh	r3, [r7, #2]
 8013966:	2b03      	cmp	r3, #3
 8013968:	d82c      	bhi.n	80139c4 <phpalI14443p3b_Sw_SetConfig+0x70>
 801396a:	a201      	add	r2, pc, #4	@ (adr r2, 8013970 <phpalI14443p3b_Sw_SetConfig+0x1c>)
 801396c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013970:	08013981 	.word	0x08013981
 8013974:	0801398b 	.word	0x0801398b
 8013978:	08013997 	.word	0x08013997
 801397c:	080139a3 	.word	0x080139a3
    {
    case PHPAL_I14443P3B_CONFIG_ATTRIB_PARAM1:
        pDataParams->bAttribParam1 = (uint8_t)wValue;
 8013980:	883b      	ldrh	r3, [r7, #0]
 8013982:	b2da      	uxtb	r2, r3
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	759a      	strb	r2, [r3, #22]
        break;
 8013988:	e01f      	b.n	80139ca <phpalI14443p3b_Sw_SetConfig+0x76>

    /* Emvco: To Define Running Mode for RdLib: Either Normal, EMVCO, ISO */
    case PHPAL_I14443P3B_CONFIG_OPE_MODE:
      {
         pDataParams->bOpeMode = (uint8_t)wValue;
 801398a:	883b      	ldrh	r3, [r7, #0]
 801398c:	b2da      	uxtb	r2, r3
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
         break;
 8013994:	e019      	b.n	80139ca <phpalI14443p3b_Sw_SetConfig+0x76>
      }

    case PHPAL_I14443P3B_CONFIG_POLL_CMD:
    {
        pDataParams->bPollCmd = (uint8_t)wValue;
 8013996:	883b      	ldrh	r3, [r7, #0]
 8013998:	b2da      	uxtb	r2, r3
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
        break;
 80139a0:	e013      	b.n	80139ca <phpalI14443p3b_Sw_SetConfig+0x76>
    }

    case PHPAL_I14443P3B_CONFIG_ATTRIB_RETRY_COUNT:
    {
        if(!(((wValue & 0xFFU) == PHPAL_I14443P3B_ATTRIB_RETRY_MIN) ||
 80139a2:	883b      	ldrh	r3, [r7, #0]
 80139a4:	b2db      	uxtb	r3, r3
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d006      	beq.n	80139b8 <phpalI14443p3b_Sw_SetConfig+0x64>
             ((wValue & 0xFFU) == PHPAL_I14443P3B_ATTRIB_RETRY_MAX)))
 80139aa:	883b      	ldrh	r3, [r7, #0]
 80139ac:	b2db      	uxtb	r3, r3
        if(!(((wValue & 0xFFU) == PHPAL_I14443P3B_ATTRIB_RETRY_MIN) ||
 80139ae:	2b01      	cmp	r3, #1
 80139b0:	d002      	beq.n	80139b8 <phpalI14443p3b_Sw_SetConfig+0x64>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 80139b2:	f240 4321 	movw	r3, #1057	@ 0x421
 80139b6:	e009      	b.n	80139cc <phpalI14443p3b_Sw_SetConfig+0x78>
        }

        pDataParams->bRetryCount = (uint8_t)wValue;
 80139b8:	883b      	ldrh	r3, [r7, #0]
 80139ba:	b2da      	uxtb	r2, r3
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
        break;
 80139c2:	e002      	b.n	80139ca <phpalI14443p3b_Sw_SetConfig+0x76>
    }
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 80139c4:	f240 4323 	movw	r3, #1059	@ 0x423
 80139c8:	e000      	b.n	80139cc <phpalI14443p3b_Sw_SetConfig+0x78>
    }

    return PH_ERR_SUCCESS;
 80139ca:	2300      	movs	r3, #0
}
 80139cc:	4618      	mov	r0, r3
 80139ce:	370c      	adds	r7, #12
 80139d0:	46bd      	mov	sp, r7
 80139d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139d6:	4770      	bx	lr

080139d8 <phpalI14443p3b_Sw_GetConfig>:
phStatus_t phpalI14443p3b_Sw_GetConfig(
                                       phpalI14443p3b_Sw_DataParams_t * pDataParams,
                                       uint16_t wConfig,
                                       uint16_t* pValue
                                       )
{
 80139d8:	b480      	push	{r7}
 80139da:	b085      	sub	sp, #20
 80139dc:	af00      	add	r7, sp, #0
 80139de:	60f8      	str	r0, [r7, #12]
 80139e0:	460b      	mov	r3, r1
 80139e2:	607a      	str	r2, [r7, #4]
 80139e4:	817b      	strh	r3, [r7, #10]
    switch (wConfig)
 80139e6:	897b      	ldrh	r3, [r7, #10]
 80139e8:	2b05      	cmp	r3, #5
 80139ea:	d828      	bhi.n	8013a3e <phpalI14443p3b_Sw_GetConfig+0x66>
 80139ec:	a201      	add	r2, pc, #4	@ (adr r2, 80139f4 <phpalI14443p3b_Sw_GetConfig+0x1c>)
 80139ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80139f2:	bf00      	nop
 80139f4:	08013a0d 	.word	0x08013a0d
 80139f8:	08013a3f 	.word	0x08013a3f
 80139fc:	08013a3f 	.word	0x08013a3f
 8013a00:	08013a19 	.word	0x08013a19
 8013a04:	08013a27 	.word	0x08013a27
 8013a08:	08013a33 	.word	0x08013a33
    {
    case PHPAL_I14443P3B_CONFIG_ATTRIB_PARAM1:
        *pValue = (uint16_t)pDataParams->bAttribParam1;
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	7d9b      	ldrb	r3, [r3, #22]
 8013a10:	461a      	mov	r2, r3
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	801a      	strh	r2, [r3, #0]
        break;
 8013a16:	e015      	b.n	8013a44 <phpalI14443p3b_Sw_GetConfig+0x6c>

    case PHPAL_I14443P3B_CONFIG_ATTRIB_RETRY_COUNT:
        *pValue = (uint16_t)pDataParams->bRetryCount;
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8013a1e:	461a      	mov	r2, r3
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	801a      	strh	r2, [r3, #0]
        break;
 8013a24:	e00e      	b.n	8013a44 <phpalI14443p3b_Sw_GetConfig+0x6c>

    case PHPAL_I14443P3B_CONFIG_DRI:
        *pValue = (uint16_t)pDataParams->bDri;
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	7d1b      	ldrb	r3, [r3, #20]
 8013a2a:	461a      	mov	r2, r3
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	801a      	strh	r2, [r3, #0]
        break;
 8013a30:	e008      	b.n	8013a44 <phpalI14443p3b_Sw_GetConfig+0x6c>

    case PHPAL_I14443P3B_CONFIG_DSI:
        *pValue = (uint16_t)pDataParams->bDsi;
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	7d5b      	ldrb	r3, [r3, #21]
 8013a36:	461a      	mov	r2, r3
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	801a      	strh	r2, [r3, #0]
        break;
 8013a3c:	e002      	b.n	8013a44 <phpalI14443p3b_Sw_GetConfig+0x6c>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8013a3e:	f240 4323 	movw	r3, #1059	@ 0x423
 8013a42:	e000      	b.n	8013a46 <phpalI14443p3b_Sw_GetConfig+0x6e>
    }

    return PH_ERR_SUCCESS;
 8013a44:	2300      	movs	r3, #0
}
 8013a46:	4618      	mov	r0, r3
 8013a48:	3714      	adds	r7, #20
 8013a4a:	46bd      	mov	sp, r7
 8013a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a50:	4770      	bx	lr
 8013a52:	bf00      	nop

08013a54 <phpalI14443p3b_Sw_RequestB>:
                                      uint8_t bAfi,
                                      uint8_t bExtAtqb,
                                      uint8_t * pAtqb,
                                      uint8_t * pAtqbLen
                                      )
{
 8013a54:	b580      	push	{r7, lr}
 8013a56:	b086      	sub	sp, #24
 8013a58:	af04      	add	r7, sp, #16
 8013a5a:	6078      	str	r0, [r7, #4]
 8013a5c:	4608      	mov	r0, r1
 8013a5e:	4611      	mov	r1, r2
 8013a60:	461a      	mov	r2, r3
 8013a62:	4603      	mov	r3, r0
 8013a64:	70fb      	strb	r3, [r7, #3]
 8013a66:	460b      	mov	r3, r1
 8013a68:	70bb      	strb	r3, [r7, #2]
 8013a6a:	4613      	mov	r3, r2
 8013a6c:	707b      	strb	r3, [r7, #1]
    return phpalI14443p3b_Sw_RequestBEx(pDataParams, 0, bNumSlots, bAfi, bExtAtqb, pAtqb, pAtqbLen);
 8013a6e:	78b9      	ldrb	r1, [r7, #2]
 8013a70:	78fa      	ldrb	r2, [r7, #3]
 8013a72:	697b      	ldr	r3, [r7, #20]
 8013a74:	9302      	str	r3, [sp, #8]
 8013a76:	693b      	ldr	r3, [r7, #16]
 8013a78:	9301      	str	r3, [sp, #4]
 8013a7a:	787b      	ldrb	r3, [r7, #1]
 8013a7c:	9300      	str	r3, [sp, #0]
 8013a7e:	460b      	mov	r3, r1
 8013a80:	2100      	movs	r1, #0
 8013a82:	6878      	ldr	r0, [r7, #4]
 8013a84:	f000 fc54 	bl	8014330 <phpalI14443p3b_Sw_RequestBEx>
 8013a88:	4603      	mov	r3, r0
}
 8013a8a:	4618      	mov	r0, r3
 8013a8c:	3708      	adds	r7, #8
 8013a8e:	46bd      	mov	sp, r7
 8013a90:	bd80      	pop	{r7, pc}

08013a92 <phpalI14443p3b_Sw_WakeUpB>:
                                     uint8_t bAfi,
                                     uint8_t bExtAtqb,
                                     uint8_t * pAtqb,
                                     uint8_t * pAtqbLen
                                     )
{
 8013a92:	b580      	push	{r7, lr}
 8013a94:	b086      	sub	sp, #24
 8013a96:	af04      	add	r7, sp, #16
 8013a98:	6078      	str	r0, [r7, #4]
 8013a9a:	4608      	mov	r0, r1
 8013a9c:	4611      	mov	r1, r2
 8013a9e:	461a      	mov	r2, r3
 8013aa0:	4603      	mov	r3, r0
 8013aa2:	70fb      	strb	r3, [r7, #3]
 8013aa4:	460b      	mov	r3, r1
 8013aa6:	70bb      	strb	r3, [r7, #2]
 8013aa8:	4613      	mov	r3, r2
 8013aaa:	707b      	strb	r3, [r7, #1]
    return phpalI14443p3b_Sw_RequestBEx(pDataParams, 1, bNumSlots, bAfi, bExtAtqb, pAtqb, pAtqbLen);
 8013aac:	78b9      	ldrb	r1, [r7, #2]
 8013aae:	78fa      	ldrb	r2, [r7, #3]
 8013ab0:	697b      	ldr	r3, [r7, #20]
 8013ab2:	9302      	str	r3, [sp, #8]
 8013ab4:	693b      	ldr	r3, [r7, #16]
 8013ab6:	9301      	str	r3, [sp, #4]
 8013ab8:	787b      	ldrb	r3, [r7, #1]
 8013aba:	9300      	str	r3, [sp, #0]
 8013abc:	460b      	mov	r3, r1
 8013abe:	2101      	movs	r1, #1
 8013ac0:	6878      	ldr	r0, [r7, #4]
 8013ac2:	f000 fc35 	bl	8014330 <phpalI14443p3b_Sw_RequestBEx>
 8013ac6:	4603      	mov	r3, r0
}
 8013ac8:	4618      	mov	r0, r3
 8013aca:	3708      	adds	r7, #8
 8013acc:	46bd      	mov	sp, r7
 8013ace:	bd80      	pop	{r7, pc}

08013ad0 <phpalI14443p3b_Sw_SlotMarker>:
                                        phpalI14443p3b_Sw_DataParams_t * pDataParams,
                                        uint8_t bSlotNumber,
                                        uint8_t * pAtqb,
                                        uint8_t * pAtqbLen
                                        )
{
 8013ad0:	b580      	push	{r7, lr}
 8013ad2:	b08a      	sub	sp, #40	@ 0x28
 8013ad4:	af02      	add	r7, sp, #8
 8013ad6:	60f8      	str	r0, [r7, #12]
 8013ad8:	607a      	str	r2, [r7, #4]
 8013ada:	603b      	str	r3, [r7, #0]
 8013adc:	460b      	mov	r3, r1
 8013ade:	72fb      	strb	r3, [r7, #11]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aCmd[1];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8013ae0:	2300      	movs	r3, #0
 8013ae2:	61bb      	str	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8013ae4:	2300      	movs	r3, #0
 8013ae6:	82fb      	strh	r3, [r7, #22]

    /* Parameter check */
    if ((bSlotNumber < 2U) || (bSlotNumber > 16U))
 8013ae8:	7afb      	ldrb	r3, [r7, #11]
 8013aea:	2b01      	cmp	r3, #1
 8013aec:	d902      	bls.n	8013af4 <phpalI14443p3b_Sw_SlotMarker+0x24>
 8013aee:	7afb      	ldrb	r3, [r7, #11]
 8013af0:	2b10      	cmp	r3, #16
 8013af2:	d902      	bls.n	8013afa <phpalI14443p3b_Sw_SlotMarker+0x2a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8013af4:	f240 4321 	movw	r3, #1057	@ 0x421
 8013af8:	e026      	b.n	8013b48 <phpalI14443p3b_Sw_SlotMarker+0x78>

    /* Note: No need to set time out and RxDeafTime since this is done in RequestB,
    which must be the previous command. */

    /* Build the command */
    aCmd[0] = (uint8_t)(((uint8_t)(bSlotNumber-1U) & 0x0FU) << 4U) | 0x05U;
 8013afa:	7afb      	ldrb	r3, [r7, #11]
 8013afc:	3b01      	subs	r3, #1
 8013afe:	b2db      	uxtb	r3, r3
 8013b00:	011b      	lsls	r3, r3, #4
 8013b02:	b2db      	uxtb	r3, r3
 8013b04:	f043 0305 	orr.w	r3, r3, #5
 8013b08:	b2db      	uxtb	r3, r3
 8013b0a:	773b      	strb	r3, [r7, #28]

    /* Exchange command */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	6858      	ldr	r0, [r3, #4]
 8013b10:	f107 021c 	add.w	r2, r7, #28
 8013b14:	f107 0316 	add.w	r3, r7, #22
 8013b18:	9301      	str	r3, [sp, #4]
 8013b1a:	f107 0318 	add.w	r3, r7, #24
 8013b1e:	9300      	str	r3, [sp, #0]
 8013b20:	2301      	movs	r3, #1
 8013b22:	2100      	movs	r1, #0
 8013b24:	f7f9 f874 	bl	800cc10 <phhalHw_Pn5180_Exchange>
 8013b28:	4603      	mov	r3, r0
 8013b2a:	83fb      	strh	r3, [r7, #30]
 8013b2c:	8bfb      	ldrh	r3, [r7, #30]
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d001      	beq.n	8013b36 <phpalI14443p3b_Sw_SlotMarker+0x66>
 8013b32:	8bfb      	ldrh	r3, [r7, #30]
 8013b34:	e008      	b.n	8013b48 <phpalI14443p3b_Sw_SlotMarker+0x78>
        aCmd,
        1,
        &pResp,
        &wRespLength));

    return phpalI14443p3b_Sw_CheckATQBEx( pDataParams,
 8013b36:	69b9      	ldr	r1, [r7, #24]
 8013b38:	8afa      	ldrh	r2, [r7, #22]
 8013b3a:	683b      	ldr	r3, [r7, #0]
 8013b3c:	9300      	str	r3, [sp, #0]
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	68f8      	ldr	r0, [r7, #12]
 8013b42:	f000 fb31 	bl	80141a8 <phpalI14443p3b_Sw_CheckATQBEx>
 8013b46:	4603      	mov	r3, r0
        pResp,
        wRespLength,
        pAtqb,
        pAtqbLen
        );
}
 8013b48:	4618      	mov	r0, r3
 8013b4a:	3720      	adds	r7, #32
 8013b4c:	46bd      	mov	sp, r7
 8013b4e:	bd80      	pop	{r7, pc}

08013b50 <phpalI14443p3b_Sw_HaltB>:

phStatus_t phpalI14443p3b_Sw_HaltB(
                                   phpalI14443p3b_Sw_DataParams_t * pDataParams
                                   )
{
 8013b50:	b580      	push	{r7, lr}
 8013b52:	b088      	sub	sp, #32
 8013b54:	af02      	add	r7, sp, #8
 8013b56:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aCmd[5];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8013b58:	2300      	movs	r3, #0
 8013b5a:	60fb      	str	r3, [r7, #12]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8013b5c:	2300      	movs	r3, #0
 8013b5e:	817b      	strh	r3, [r7, #10]

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	685b      	ldr	r3, [r3, #4]
 8013b64:	f241 22ff 	movw	r2, #4863	@ 0x12ff
 8013b68:	210d      	movs	r1, #13
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	f7f9 fbd0 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8013b70:	4603      	mov	r3, r0
 8013b72:	82fb      	strh	r3, [r7, #22]
 8013b74:	8afb      	ldrh	r3, [r7, #22]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d001      	beq.n	8013b7e <phpalI14443p3b_Sw_HaltB+0x2e>
 8013b7a:	8afb      	ldrh	r3, [r7, #22]
 8013b7c:	e029      	b.n	8013bd2 <phpalI14443p3b_Sw_HaltB+0x82>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
        PHPAL_I14443P3B_SW_ATTRIB_TIME_US + PHPAL_I14443P3B_SW_EXT_TIME_US));

    /* Build the command */
    aCmd[0] = PHPAL_I14443P3B_SW_HALT_CMD;
 8013b7e:	2350      	movs	r3, #80	@ 0x50
 8013b80:	743b      	strb	r3, [r7, #16]
    (void)memcpy(&aCmd[1], pDataParams->pPupi, (uint32_t)(sizeof(pDataParams->pPupi)));
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	3309      	adds	r3, #9
 8013b86:	681b      	ldr	r3, [r3, #0]
 8013b88:	f8c7 3011 	str.w	r3, [r7, #17]

    /* Exchange command */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	6858      	ldr	r0, [r3, #4]
 8013b90:	f107 0210 	add.w	r2, r7, #16
 8013b94:	f107 030a 	add.w	r3, r7, #10
 8013b98:	9301      	str	r3, [sp, #4]
 8013b9a:	f107 030c 	add.w	r3, r7, #12
 8013b9e:	9300      	str	r3, [sp, #0]
 8013ba0:	2305      	movs	r3, #5
 8013ba2:	2100      	movs	r1, #0
 8013ba4:	f7f9 f834 	bl	800cc10 <phhalHw_Pn5180_Exchange>
 8013ba8:	4603      	mov	r3, r0
 8013baa:	82fb      	strh	r3, [r7, #22]
 8013bac:	8afb      	ldrh	r3, [r7, #22]
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d001      	beq.n	8013bb6 <phpalI14443p3b_Sw_HaltB+0x66>
 8013bb2:	8afb      	ldrh	r3, [r7, #22]
 8013bb4:	e00d      	b.n	8013bd2 <phpalI14443p3b_Sw_HaltB+0x82>
        5,
        &pResp,
        &wRespLength));

    /* Response check */
    if ((wRespLength != 1U) || (pResp[0] != PHPAL_I14443P3B_SW_HALT_RESP))
 8013bb6:	897b      	ldrh	r3, [r7, #10]
 8013bb8:	2b01      	cmp	r3, #1
 8013bba:	d103      	bne.n	8013bc4 <phpalI14443p3b_Sw_HaltB+0x74>
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	781b      	ldrb	r3, [r3, #0]
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d002      	beq.n	8013bca <phpalI14443p3b_Sw_HaltB+0x7a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 8013bc4:	f240 4306 	movw	r3, #1030	@ 0x406
 8013bc8:	e003      	b.n	8013bd2 <phpalI14443p3b_Sw_HaltB+0x82>
    }

    /* PUPI is invalid */
    pDataParams->bPupiValid = PH_OFF;
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	2200      	movs	r2, #0
 8013bce:	735a      	strb	r2, [r3, #13]

    return PH_ERR_SUCCESS;
 8013bd0:	2300      	movs	r3, #0
}
 8013bd2:	4618      	mov	r0, r3
 8013bd4:	3718      	adds	r7, #24
 8013bd6:	46bd      	mov	sp, r7
 8013bd8:	bd80      	pop	{r7, pc}
 8013bda:	0000      	movs	r0, r0
 8013bdc:	0000      	movs	r0, r0
	...

08013be0 <phpalI14443p3b_Sw_Attrib>:
                                    uint8_t bCid,
                                    uint8_t bDri,
                                    uint8_t bDsi,
                                    uint8_t * pMbli
                                    )
{
 8013be0:	b580      	push	{r7, lr}
 8013be2:	b090      	sub	sp, #64	@ 0x40
 8013be4:	af02      	add	r7, sp, #8
 8013be6:	60f8      	str	r0, [r7, #12]
 8013be8:	60b9      	str	r1, [r7, #8]
 8013bea:	4611      	mov	r1, r2
 8013bec:	461a      	mov	r2, r3
 8013bee:	460b      	mov	r3, r1
 8013bf0:	71fb      	strb	r3, [r7, #7]
 8013bf2:	4613      	mov	r3, r2
 8013bf4:	71bb      	strb	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aCmd[9];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8013bf6:	2300      	movs	r3, #0
 8013bf8:	61bb      	str	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8013bfa:	2300      	movs	r3, #0
 8013bfc:	82fb      	strh	r3, [r7, #22]
    uint8_t     PH_MEMLOC_REM bTemp = 0;
 8013bfe:	2300      	movs	r3, #0
 8013c00:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    uint32_t    PH_MEMLOC_REM dwSfgt = 0;
 8013c04:	2300      	movs	r3, #0
 8013c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t    PH_MEMLOC_REM dwFwt = 0;
 8013c08:	2300      	movs	r3, #0
 8013c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t   PH_MEMLOC_REM fFwt = 0;
 8013c0c:	f04f 0300 	mov.w	r3, #0
 8013c10:	633b      	str	r3, [r7, #48]	@ 0x30

    /* parameter check */
    /* ATQB length */
    if ((bAtqbLen != 12U) && (bAtqbLen != 13U))
 8013c12:	79fb      	ldrb	r3, [r7, #7]
 8013c14:	2b0c      	cmp	r3, #12
 8013c16:	d005      	beq.n	8013c24 <phpalI14443p3b_Sw_Attrib+0x44>
 8013c18:	79fb      	ldrb	r3, [r7, #7]
 8013c1a:	2b0d      	cmp	r3, #13
 8013c1c:	d002      	beq.n	8013c24 <phpalI14443p3b_Sw_Attrib+0x44>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8013c1e:	f240 4321 	movw	r3, #1057	@ 0x421
 8013c22:	e295      	b.n	8014150 <phpalI14443p3b_Sw_Attrib+0x570>
    }

    /* check given DSI, DRI, FSDI */
    if ((bFsdi > PHPAL_I14443P3B_FRAMESIZE_MAX) || (bDri > 0x03U) || (bDsi > 0x03U))
 8013c24:	79bb      	ldrb	r3, [r7, #6]
 8013c26:	2b0c      	cmp	r3, #12
 8013c28:	d807      	bhi.n	8013c3a <phpalI14443p3b_Sw_Attrib+0x5a>
 8013c2a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8013c2e:	2b03      	cmp	r3, #3
 8013c30:	d803      	bhi.n	8013c3a <phpalI14443p3b_Sw_Attrib+0x5a>
 8013c32:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8013c36:	2b03      	cmp	r3, #3
 8013c38:	d902      	bls.n	8013c40 <phpalI14443p3b_Sw_Attrib+0x60>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8013c3a:	f240 4321 	movw	r3, #1057	@ 0x421
 8013c3e:	e287      	b.n	8014150 <phpalI14443p3b_Sw_Attrib+0x570>
    }

    if ((bFsdi < PHPAL_I14443P3B_EMVCO_FRAMESIZE_MIN) && (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO))
 8013c40:	79bb      	ldrb	r3, [r7, #6]
 8013c42:	2b07      	cmp	r3, #7
 8013c44:	d807      	bhi.n	8013c56 <phpalI14443p3b_Sw_Attrib+0x76>
 8013c46:	68fb      	ldr	r3, [r7, #12]
 8013c48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013c4c:	2b01      	cmp	r3, #1
 8013c4e:	d102      	bne.n	8013c56 <phpalI14443p3b_Sw_Attrib+0x76>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8013c50:	f240 4321 	movw	r3, #1057	@ 0x421
 8013c54:	e27c      	b.n	8014150 <phpalI14443p3b_Sw_Attrib+0x570>
    }

    /* build the command frame */
    aCmd[0] = PHPAL_I14443P3B_SW_ATTRIB_CMD;
 8013c56:	231d      	movs	r3, #29
 8013c58:	773b      	strb	r3, [r7, #28]

    /* copy PUPI to command frame */
    (void)memcpy(&aCmd[1], &pAtqb[1], 4);
 8013c5a:	68bb      	ldr	r3, [r7, #8]
 8013c5c:	3301      	adds	r3, #1
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	f8c7 301d 	str.w	r3, [r7, #29]

    /* Param1: TR0, TR1, SOF/EOF suppression */
    aCmd[5] = pDataParams->bAttribParam1;
 8013c64:	68fb      	ldr	r3, [r7, #12]
 8013c66:	7d9b      	ldrb	r3, [r3, #22]
 8013c68:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    /* Param2: Dsi, Dri, FSDI */
    aCmd[6] = (bDsi << 6U) | (bDri << 4U) | bFsdi;
 8013c6c:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 8013c70:	019b      	lsls	r3, r3, #6
 8013c72:	b25a      	sxtb	r2, r3
 8013c74:	f997 3044 	ldrsb.w	r3, [r7, #68]	@ 0x44
 8013c78:	011b      	lsls	r3, r3, #4
 8013c7a:	b25b      	sxtb	r3, r3
 8013c7c:	4313      	orrs	r3, r2
 8013c7e:	b25a      	sxtb	r2, r3
 8013c80:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8013c84:	4313      	orrs	r3, r2
 8013c86:	b25b      	sxtb	r3, r3
 8013c88:	b2db      	uxtb	r3, r3
 8013c8a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

    /* Emvco: case_id TB107_X
     * PCD shall disregards the value of bits b4-b2 of Protocol_Type
     */
    if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013c94:	2b01      	cmp	r3, #1
 8013c96:	d108      	bne.n	8013caa <phpalI14443p3b_Sw_Attrib+0xca>
    {
        aCmd[7] = pAtqb[10] & 0x01U;
 8013c98:	68bb      	ldr	r3, [r7, #8]
 8013c9a:	330a      	adds	r3, #10
 8013c9c:	781b      	ldrb	r3, [r3, #0]
 8013c9e:	f003 0301 	and.w	r3, r3, #1
 8013ca2:	b2db      	uxtb	r3, r3
 8013ca4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8013ca8:	e007      	b.n	8013cba <phpalI14443p3b_Sw_Attrib+0xda>
    }
    else
    {
        /* Param3: confirmation of protocol info byte 2 (protocol type and minimum TR2) */
        aCmd[7] = pAtqb[10] & 0x07U;
 8013caa:	68bb      	ldr	r3, [r7, #8]
 8013cac:	330a      	adds	r3, #10
 8013cae:	781b      	ldrb	r3, [r3, #0]
 8013cb0:	f003 0307 	and.w	r3, r3, #7
 8013cb4:	b2db      	uxtb	r3, r3
 8013cb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    }

    /* Param4: Cid */
    /* check if supported by PICC, check given value for < 0x0F */
    if (0U != (pAtqb[11] & 0x01U))
 8013cba:	68bb      	ldr	r3, [r7, #8]
 8013cbc:	330b      	adds	r3, #11
 8013cbe:	781b      	ldrb	r3, [r3, #0]
 8013cc0:	f003 0301 	and.w	r3, r3, #1
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d006      	beq.n	8013cd6 <phpalI14443p3b_Sw_Attrib+0xf6>
    {
        if (bCid > 0x0EU)
 8013cc8:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8013ccc:	2b0e      	cmp	r3, #14
 8013cce:	d905      	bls.n	8013cdc <phpalI14443p3b_Sw_Attrib+0xfc>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8013cd0:	f240 4321 	movw	r3, #1057	@ 0x421
 8013cd4:	e23c      	b.n	8014150 <phpalI14443p3b_Sw_Attrib+0x570>
        }
    }
    else
    {
        bCid = 0x00;
 8013cd6:	2300      	movs	r3, #0
 8013cd8:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    }
    aCmd[8] = bCid;
 8013cdc:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8013ce0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

    /* Calculate FWT timeout */
    /* get the Fwt, because we need it for the timeout. */
    pDataParams->bFwi = (uint8_t)(pAtqb[11] >> 4U);
 8013ce4:	68bb      	ldr	r3, [r7, #8]
 8013ce6:	330b      	adds	r3, #11
 8013ce8:	781b      	ldrb	r3, [r3, #0]
 8013cea:	091b      	lsrs	r3, r3, #4
 8013cec:	b2da      	uxtb	r2, r3
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	745a      	strb	r2, [r3, #17]
    if (pDataParams->bFwi == 0x0FU)
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	7c5b      	ldrb	r3, [r3, #17]
 8013cf6:	2b0f      	cmp	r3, #15
 8013cf8:	d102      	bne.n	8013d00 <phpalI14443p3b_Sw_Attrib+0x120>
    {
        pDataParams->bFwi = PHPAL_I14443P3B_SW_FWI_DEFAULT;
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	2204      	movs	r2, #4
 8013cfe:	745a      	strb	r2, [r3, #17]
    }

    /* Calculate FWT timeout */
    fFwt = (PHPAL_I14443P3B_SW_FWT_MIN_US * ((uint32_t)1U << pDataParams->bFwi));
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	7c5b      	ldrb	r3, [r3, #17]
 8013d04:	461a      	mov	r2, r3
 8013d06:	2301      	movs	r3, #1
 8013d08:	4093      	lsls	r3, r2
 8013d0a:	4618      	mov	r0, r3
 8013d0c:	f7ec fbfa 	bl	8000504 <__aeabi_ui2d>
 8013d10:	a3ab      	add	r3, pc, #684	@ (adr r3, 8013fc0 <phpalI14443p3b_Sw_Attrib+0x3e0>)
 8013d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d16:	f7ec fc6f 	bl	80005f8 <__aeabi_dmul>
 8013d1a:	4602      	mov	r2, r0
 8013d1c:	460b      	mov	r3, r1
 8013d1e:	4610      	mov	r0, r2
 8013d20:	4619      	mov	r1, r3
 8013d22:	f7ec ff41 	bl	8000ba8 <__aeabi_d2f>
 8013d26:	4603      	mov	r3, r0
 8013d28:	633b      	str	r3, [r7, #48]	@ 0x30
    if(pDataParams->bOpeMode == RD_LIB_MODE_ISO)
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013d30:	2b03      	cmp	r3, #3
 8013d32:	d108      	bne.n	8013d46 <phpalI14443p3b_Sw_Attrib+0x166>
    {
        /* Add extension time */
        fFwt += PHPAL_I14443P3B_SW_EXT_TIME_US;
 8013d34:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8013d38:	ed9f 7a9d 	vldr	s14, [pc, #628]	@ 8013fb0 <phpalI14443p3b_Sw_Attrib+0x3d0>
 8013d3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013d40:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
 8013d44:	e014      	b.n	8013d70 <phpalI14443p3b_Sw_Attrib+0x190>
    }
    else
    {
        /* As per Digital Spec V1.1 req 7.9.1.3, NFC Forum Device SHALL wait at least FWT + delta FWTB for a Response */
        fFwt += PHPAL_I14443P3B_SW_DELTA_FWT_US;
 8013d46:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8013d4a:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8013fb4 <phpalI14443p3b_Sw_Attrib+0x3d4>
 8013d4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013d52:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) {
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013d5c:	2b01      	cmp	r3, #1
 8013d5e:	d107      	bne.n	8013d70 <phpalI14443p3b_Sw_Attrib+0x190>
            /* As per EMVCo, add delta Tpcd time along with delta FWT time */
            fFwt += PHPAL_I14443P3B_SW_DELTA_TPCD_US;
 8013d60:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8013d64:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8013fb8 <phpalI14443p3b_Sw_Attrib+0x3d8>
 8013d68:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013d6c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        }
    }
    dwFwt = (uint32_t)fFwt;
 8013d70:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8013d74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013d78:	ee17 3a90 	vmov	r3, s15
 8013d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* ISO IEC 14443-3, 7.9.4.3 FWI:
    In case of extended ATQB ...
    ... FWT applies after the Answer to ATTRIB and
    ... the waiting time for the Answer to ATTRIB is fixed to ~4,8 ms */

    if (bAtqbLen == 13U)
 8013d7e:	79fb      	ldrb	r3, [r7, #7]
 8013d80:	2b0d      	cmp	r3, #13
 8013d82:	d10e      	bne.n	8013da2 <phpalI14443p3b_Sw_Attrib+0x1c2>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	685b      	ldr	r3, [r3, #4]
 8013d88:	f241 22ff 	movw	r2, #4863	@ 0x12ff
 8013d8c:	210d      	movs	r1, #13
 8013d8e:	4618      	mov	r0, r3
 8013d90:	f7f9 fabe 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8013d94:	4603      	mov	r3, r0
 8013d96:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8013d98:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d029      	beq.n	8013df2 <phpalI14443p3b_Sw_Attrib+0x212>
 8013d9e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013da0:	e1d6      	b.n	8014150 <phpalI14443p3b_Sw_Attrib+0x570>
            PHPAL_I14443P3B_SW_ATTRIB_TIME_US + PHPAL_I14443P3B_SW_EXT_TIME_US));
    }
    else
    {
        /* Set FWT timeout */
        if (dwFwt > 0xFFFFU)
 8013da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013da4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013da8:	d314      	bcc.n	8013dd4 <phpalI14443p3b_Sw_Attrib+0x1f4>
        {
            /* +1 is added to the timeout in millisecond to compensate the
             * fractional microseconds lost in division by 1000 */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	6858      	ldr	r0, [r3, #4]
 8013dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013db0:	4a82      	ldr	r2, [pc, #520]	@ (8013fbc <phpalI14443p3b_Sw_Attrib+0x3dc>)
 8013db2:	fba2 2303 	umull	r2, r3, r2, r3
 8013db6:	099b      	lsrs	r3, r3, #6
 8013db8:	b29b      	uxth	r3, r3
 8013dba:	3301      	adds	r3, #1
 8013dbc:	b29b      	uxth	r3, r3
 8013dbe:	461a      	mov	r2, r3
 8013dc0:	210e      	movs	r1, #14
 8013dc2:	f7f9 faa5 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8013dc6:	4603      	mov	r3, r0
 8013dc8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8013dca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d010      	beq.n	8013df2 <phpalI14443p3b_Sw_Attrib+0x212>
 8013dd0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013dd2:	e1bd      	b.n	8014150 <phpalI14443p3b_Sw_Attrib+0x570>
                PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
                (uint16_t)((dwFwt / 1000U) + 1U)));
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	685b      	ldr	r3, [r3, #4]
 8013dd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013dda:	b292      	uxth	r2, r2
 8013ddc:	210d      	movs	r1, #13
 8013dde:	4618      	mov	r0, r3
 8013de0:	f7f9 fa96 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8013de4:	4603      	mov	r3, r0
 8013de6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8013de8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d001      	beq.n	8013df2 <phpalI14443p3b_Sw_Attrib+0x212>
 8013dee:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013df0:	e1ae      	b.n	8014150 <phpalI14443p3b_Sw_Attrib+0x570>

        }
    }

    /* Exchange command */
    wRespLength = 0;
 8013df2:	2300      	movs	r3, #0
 8013df4:	82fb      	strh	r3, [r7, #22]
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	6858      	ldr	r0, [r3, #4]
 8013dfa:	f107 021c 	add.w	r2, r7, #28
 8013dfe:	f107 0316 	add.w	r3, r7, #22
 8013e02:	9301      	str	r3, [sp, #4]
 8013e04:	f107 0318 	add.w	r3, r7, #24
 8013e08:	9300      	str	r3, [sp, #0]
 8013e0a:	2309      	movs	r3, #9
 8013e0c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8013e10:	f7f8 fefe 	bl	800cc10 <phhalHw_Pn5180_Exchange>
 8013e14:	4603      	mov	r3, r0
 8013e16:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8013e18:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d001      	beq.n	8013e22 <phpalI14443p3b_Sw_Attrib+0x242>
 8013e1e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013e20:	e196      	b.n	8014150 <phpalI14443p3b_Sw_Attrib+0x570>
        9,
        &pResp,
        &wRespLength));

    /* the remaining part of the ATTRIB command frame holds the Higher Layer INF */
    statusTmp = phhalHw_Exchange(
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	6858      	ldr	r0, [r3, #4]
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	699a      	ldr	r2, [r3, #24]
 8013e2a:	68fb      	ldr	r3, [r7, #12]
 8013e2c:	8bd9      	ldrh	r1, [r3, #30]
 8013e2e:	f107 0316 	add.w	r3, r7, #22
 8013e32:	9301      	str	r3, [sp, #4]
 8013e34:	f107 0318 	add.w	r3, r7, #24
 8013e38:	9300      	str	r3, [sp, #0]
 8013e3a:	460b      	mov	r3, r1
 8013e3c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8013e40:	f7f8 fee6 	bl	800cc10 <phhalHw_Pn5180_Exchange>
 8013e44:	4603      	mov	r3, r0
 8013e46:	86fb      	strh	r3, [r7, #54]	@ 0x36
        pDataParams->pHigherLayerInf,
        pDataParams->wHigherLayerInfLen,
        &pResp,
        &wRespLength);

    bTemp = pDataParams->bRetryCount;
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8013e4e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    /* check and perform re-transmission of ATTRIB in case of Transmission or Timeout error
     * Nfc Digital Specification ver 1.1, Req 14.7.1.1
     */
    while((bTemp > 0U) && (PH_ERR_SUCCESS != (statusTmp & PH_ERR_MASK)))
 8013e52:	e04d      	b.n	8013ef0 <phpalI14443p3b_Sw_Attrib+0x310>
    {
        /* Return error other than Timeout or Noise Error */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013e5a:	2b01      	cmp	r3, #1
 8013e5c:	d118      	bne.n	8013e90 <phpalI14443p3b_Sw_Attrib+0x2b0>
        {
            if((((statusTmp & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) || ((statusTmp & PH_ERR_MASK) == PH_ERR_NOISE_ERROR)))
 8013e5e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013e60:	b2db      	uxtb	r3, r3
 8013e62:	2b01      	cmp	r3, #1
 8013e64:	d003      	beq.n	8013e6e <phpalI14443p3b_Sw_Attrib+0x28e>
 8013e66:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013e68:	b2db      	uxtb	r3, r3
 8013e6a:	2b11      	cmp	r3, #17
 8013e6c:	d10e      	bne.n	8013e8c <phpalI14443p3b_Sw_Attrib+0x2ac>
            {
                /* Wait for at least Tmin retransmission delay. */
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	685b      	ldr	r3, [r3, #4]
 8013e72:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8013e76:	2100      	movs	r1, #0
 8013e78:	4618      	mov	r0, r3
 8013e7a:	f7f9 f9c5 	bl	800d208 <phhalHw_Pn5180_Wait>
 8013e7e:	4603      	mov	r3, r0
 8013e80:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8013e82:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d003      	beq.n	8013e90 <phpalI14443p3b_Sw_Attrib+0x2b0>
 8013e88:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013e8a:	e161      	b.n	8014150 <phpalI14443p3b_Sw_Attrib+0x570>
                    PHHAL_HW_TIME_MICROSECONDS,
                    PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));
            }
            else
            {
                return statusTmp;
 8013e8c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013e8e:	e15f      	b.n	8014150 <phpalI14443p3b_Sw_Attrib+0x570>
            }
        }

         /* Emvco:  case_id TB305_X  TB312_X and Req. 9.6.1.3 */
        wRespLength = 0;
 8013e90:	2300      	movs	r3, #0
 8013e92:	82fb      	strh	r3, [r7, #22]

        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	6858      	ldr	r0, [r3, #4]
 8013e98:	f107 021c 	add.w	r2, r7, #28
 8013e9c:	f107 0316 	add.w	r3, r7, #22
 8013ea0:	9301      	str	r3, [sp, #4]
 8013ea2:	f107 0318 	add.w	r3, r7, #24
 8013ea6:	9300      	str	r3, [sp, #0]
 8013ea8:	2309      	movs	r3, #9
 8013eaa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8013eae:	f7f8 feaf 	bl	800cc10 <phhalHw_Pn5180_Exchange>
 8013eb2:	4603      	mov	r3, r0
 8013eb4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8013eb6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d001      	beq.n	8013ec0 <phpalI14443p3b_Sw_Attrib+0x2e0>
 8013ebc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013ebe:	e147      	b.n	8014150 <phpalI14443p3b_Sw_Attrib+0x570>
            9,
            &pResp,
            &wRespLength));

        /* the remaining part of the ATTRIB command frame holds the Higher Layer INF */
        statusTmp = phhalHw_Exchange(
 8013ec0:	68fb      	ldr	r3, [r7, #12]
 8013ec2:	6858      	ldr	r0, [r3, #4]
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	699a      	ldr	r2, [r3, #24]
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	8bd9      	ldrh	r1, [r3, #30]
 8013ecc:	f107 0316 	add.w	r3, r7, #22
 8013ed0:	9301      	str	r3, [sp, #4]
 8013ed2:	f107 0318 	add.w	r3, r7, #24
 8013ed6:	9300      	str	r3, [sp, #0]
 8013ed8:	460b      	mov	r3, r1
 8013eda:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8013ede:	f7f8 fe97 	bl	800cc10 <phhalHw_Pn5180_Exchange>
 8013ee2:	4603      	mov	r3, r0
 8013ee4:	86fb      	strh	r3, [r7, #54]	@ 0x36
            pDataParams->pHigherLayerInf,
            pDataParams->wHigherLayerInfLen,
            &pResp,
            &wRespLength);

        bTemp--;
 8013ee6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8013eea:	3b01      	subs	r3, #1
 8013eec:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    while((bTemp > 0U) && (PH_ERR_SUCCESS != (statusTmp & PH_ERR_MASK)))
 8013ef0:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d003      	beq.n	8013f00 <phpalI14443p3b_Sw_Attrib+0x320>
 8013ef8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013efa:	b2db      	uxtb	r3, r3
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d1a9      	bne.n	8013e54 <phpalI14443p3b_Sw_Attrib+0x274>
    }

    PH_CHECK_SUCCESS(statusTmp);
 8013f00:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d001      	beq.n	8013f0a <phpalI14443p3b_Sw_Attrib+0x32a>
 8013f06:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013f08:	e122      	b.n	8014150 <phpalI14443p3b_Sw_Attrib+0x570>

    /* we hopefully received at least one byte */
    if (wRespLength < 1U)
 8013f0a:	8afb      	ldrh	r3, [r7, #22]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d102      	bne.n	8013f16 <phpalI14443p3b_Sw_Attrib+0x336>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 8013f10:	f240 4306 	movw	r3, #1030	@ 0x406
 8013f14:	e11c      	b.n	8014150 <phpalI14443p3b_Sw_Attrib+0x570>
    }

    /* we receive MBLI and CID in the first byte: */
    /* check the received cid: */
    if (((pAtqb[11] & 0x01U) != 0U) && ((pResp[0] & 0x0FU) != bCid))
 8013f16:	68bb      	ldr	r3, [r7, #8]
 8013f18:	330b      	adds	r3, #11
 8013f1a:	781b      	ldrb	r3, [r3, #0]
 8013f1c:	f003 0301 	and.w	r3, r3, #1
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d00a      	beq.n	8013f3a <phpalI14443p3b_Sw_Attrib+0x35a>
 8013f24:	69bb      	ldr	r3, [r7, #24]
 8013f26:	781b      	ldrb	r3, [r3, #0]
 8013f28:	f003 020f 	and.w	r2, r3, #15
 8013f2c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8013f30:	429a      	cmp	r2, r3
 8013f32:	d002      	beq.n	8013f3a <phpalI14443p3b_Sw_Attrib+0x35a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 8013f34:	f240 4306 	movw	r3, #1030	@ 0x406
 8013f38:	e10a      	b.n	8014150 <phpalI14443p3b_Sw_Attrib+0x570>
    }

    /* If the CID is not supported, PICC SHALL set the CID to 0 */
    /* PCD SHALL treat a CID field with a different value as Protocol Error */
    /* Digital Protocol 1.1, Requirements 166 and EMVCo 2.6, Requirements 6.24, 6.4.1.10 */
    if ((pDataParams->bOpeMode != RD_LIB_MODE_ISO) && (((pAtqb[11] & 0x01U) == 0U) && ((pResp[0] & 0x0FU) != 0x0U)))
 8013f3a:	68fb      	ldr	r3, [r7, #12]
 8013f3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013f40:	2b03      	cmp	r3, #3
 8013f42:	d00f      	beq.n	8013f64 <phpalI14443p3b_Sw_Attrib+0x384>
 8013f44:	68bb      	ldr	r3, [r7, #8]
 8013f46:	330b      	adds	r3, #11
 8013f48:	781b      	ldrb	r3, [r3, #0]
 8013f4a:	f003 0301 	and.w	r3, r3, #1
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d108      	bne.n	8013f64 <phpalI14443p3b_Sw_Attrib+0x384>
 8013f52:	69bb      	ldr	r3, [r7, #24]
 8013f54:	781b      	ldrb	r3, [r3, #0]
 8013f56:	f003 030f 	and.w	r3, r3, #15
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d002      	beq.n	8013f64 <phpalI14443p3b_Sw_Attrib+0x384>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 8013f5e:	f240 4306 	movw	r3, #1030	@ 0x406
 8013f62:	e0f5      	b.n	8014150 <phpalI14443p3b_Sw_Attrib+0x570>
    }

    /* Note: ISO14443-3 7.11: The MBLI (maximum buffer size) gives information about
    the PICCs internal buffer */
    *pMbli = (uint8_t)(pResp[0] >> 4U);
 8013f64:	69bb      	ldr	r3, [r7, #24]
 8013f66:	781b      	ldrb	r3, [r3, #0]
 8013f68:	091b      	lsrs	r3, r3, #4
 8013f6a:	b2da      	uxtb	r2, r3
 8013f6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013f6e:	701a      	strb	r2, [r3, #0]

    if (1U < wRespLength)
 8013f70:	8afb      	ldrh	r3, [r7, #22]
 8013f72:	2b01      	cmp	r3, #1
 8013f74:	d931      	bls.n	8013fda <phpalI14443p3b_Sw_Attrib+0x3fa>
    {
        /* we received some Higher Layer INF bytes:
        ISO14443-3 TypeB, 7.11 Higher Response (optional 0 or "more" bytes) --> see page 46. */
        pDataParams->wHigherLayerRespLen = wRespLength - 1u;
 8013f76:	8afb      	ldrh	r3, [r7, #22]
 8013f78:	3b01      	subs	r3, #1
 8013f7a:	b29a      	uxth	r2, r3
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	84da      	strh	r2, [r3, #38]	@ 0x26

        /* should we have received it? */
        if ( pDataParams->wHigherLayerInfLen == 0U )
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	8bdb      	ldrh	r3, [r3, #30]
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d105      	bne.n	8013f94 <phpalI14443p3b_Sw_Attrib+0x3b4>
        {
            pDataParams->wHigherLayerRespLen = 0;
 8013f88:	68fb      	ldr	r3, [r7, #12]
 8013f8a:	2200      	movs	r2, #0
 8013f8c:	84da      	strh	r2, [r3, #38]	@ 0x26
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 8013f8e:	f240 4306 	movw	r3, #1030	@ 0x406
 8013f92:	e0dd      	b.n	8014150 <phpalI14443p3b_Sw_Attrib+0x570>
        }

        if (pDataParams->wHigherLayerRespLen > pDataParams->wHigherLayerRespSize)
 8013f94:	68fb      	ldr	r3, [r7, #12]
 8013f96:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013f9c:	429a      	cmp	r2, r3
 8013f9e:	d913      	bls.n	8013fc8 <phpalI14443p3b_Sw_Attrib+0x3e8>
        {
            pDataParams->wHigherLayerRespLen = 0;
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	2200      	movs	r2, #0
 8013fa4:	84da      	strh	r2, [r3, #38]	@ 0x26
            return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_PAL_ISO14443P3B);
 8013fa6:	f240 4304 	movw	r3, #1028	@ 0x404
 8013faa:	e0d1      	b.n	8014150 <phpalI14443p3b_Sw_Attrib+0x570>
 8013fac:	f3af 8000 	nop.w
 8013fb0:	427c0000 	.word	0x427c0000
 8013fb4:	4566a000 	.word	0x4566a000
 8013fb8:	447a0000 	.word	0x447a0000
 8013fbc:	10624dd3 	.word	0x10624dd3
 8013fc0:	d12e109d 	.word	0xd12e109d
 8013fc4:	4072e109 	.word	0x4072e109
        }
        (void)memcpy( pDataParams->pHigherLayerResp, &pResp[1], pDataParams->wHigherLayerRespLen );
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	6a18      	ldr	r0, [r3, #32]
 8013fcc:	69bb      	ldr	r3, [r7, #24]
 8013fce:	1c59      	adds	r1, r3, #1
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8013fd4:	461a      	mov	r2, r3
 8013fd6:	f009 f912 	bl	801d1fe <memcpy>
    }

    /* Now, that the PICC accepted our protocol settings, we can store them in the structure */
    if (pDataParams->bOpeMode != RD_LIB_MODE_ISO)
 8013fda:	68fb      	ldr	r3, [r7, #12]
 8013fdc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013fe0:	2b03      	cmp	r3, #3
 8013fe2:	d006      	beq.n	8013ff2 <phpalI14443p3b_Sw_Attrib+0x412>
    {
        pDataParams->bCidSupported = 0x00;
 8013fe4:	68fb      	ldr	r3, [r7, #12]
 8013fe6:	2200      	movs	r2, #0
 8013fe8:	739a      	strb	r2, [r3, #14]
        pDataParams->bNadSupported = 0x00;
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	2200      	movs	r2, #0
 8013fee:	73da      	strb	r2, [r3, #15]
 8013ff0:	e011      	b.n	8014016 <phpalI14443p3b_Sw_Attrib+0x436>
    }
    else
    {
        pDataParams->bCidSupported = pAtqb[11] & 0x01U;
 8013ff2:	68bb      	ldr	r3, [r7, #8]
 8013ff4:	330b      	adds	r3, #11
 8013ff6:	781b      	ldrb	r3, [r3, #0]
 8013ff8:	f003 0301 	and.w	r3, r3, #1
 8013ffc:	b2da      	uxtb	r2, r3
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	739a      	strb	r2, [r3, #14]
        pDataParams->bNadSupported = (pAtqb[11] & 0x02U) >> 1U;
 8014002:	68bb      	ldr	r3, [r7, #8]
 8014004:	330b      	adds	r3, #11
 8014006:	781b      	ldrb	r3, [r3, #0]
 8014008:	085b      	lsrs	r3, r3, #1
 801400a:	b2db      	uxtb	r3, r3
 801400c:	f003 0301 	and.w	r3, r3, #1
 8014010:	b2da      	uxtb	r2, r3
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	73da      	strb	r2, [r3, #15]
    }
    pDataParams->bCid = pResp[0] & 0x0FU;
 8014016:	69bb      	ldr	r3, [r7, #24]
 8014018:	781b      	ldrb	r3, [r3, #0]
 801401a:	f003 030f 	and.w	r3, r3, #15
 801401e:	b2da      	uxtb	r2, r3
 8014020:	68fb      	ldr	r3, [r7, #12]
 8014022:	741a      	strb	r2, [r3, #16]
    pDataParams->bFsci = (uint8_t)(pAtqb[10] >> 4U);
 8014024:	68bb      	ldr	r3, [r7, #8]
 8014026:	330a      	adds	r3, #10
 8014028:	781b      	ldrb	r3, [r3, #0]
 801402a:	091b      	lsrs	r3, r3, #4
 801402c:	b2da      	uxtb	r2, r3
 801402e:	68fb      	ldr	r3, [r7, #12]
 8014030:	749a      	strb	r2, [r3, #18]
    pDataParams->bFsdi = bFsdi;
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	79ba      	ldrb	r2, [r7, #6]
 8014036:	74da      	strb	r2, [r3, #19]
    pDataParams->bDri = bDri;
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 801403e:	751a      	strb	r2, [r3, #20]
    pDataParams->bDsi = bDsi;
 8014040:	68fb      	ldr	r3, [r7, #12]
 8014042:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 8014046:	755a      	strb	r2, [r3, #21]

    bTemp = 0;
 8014048:	2300      	movs	r3, #0
 801404a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* If we had an extended ATQB, the timeout was set for the reception
    of the ATTRIB command (see line 280). */
    if (bAtqbLen == 13U)
 801404e:	79fb      	ldrb	r3, [r7, #7]
 8014050:	2b0d      	cmp	r3, #13
 8014052:	d125      	bne.n	80140a0 <phpalI14443p3b_Sw_Attrib+0x4c0>
    {
        /* Set FWT timeout */
        if (dwFwt > 0xFFFFU)
 8014054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014056:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801405a:	d312      	bcc.n	8014082 <phpalI14443p3b_Sw_Attrib+0x4a2>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	6858      	ldr	r0, [r3, #4]
 8014060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014062:	4a3d      	ldr	r2, [pc, #244]	@ (8014158 <phpalI14443p3b_Sw_Attrib+0x578>)
 8014064:	fba2 2303 	umull	r2, r3, r2, r3
 8014068:	099b      	lsrs	r3, r3, #6
 801406a:	b29b      	uxth	r3, r3
 801406c:	461a      	mov	r2, r3
 801406e:	210e      	movs	r1, #14
 8014070:	f7f9 f94e 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8014074:	4603      	mov	r3, r0
 8014076:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8014078:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801407a:	2b00      	cmp	r3, #0
 801407c:	d010      	beq.n	80140a0 <phpalI14443p3b_Sw_Attrib+0x4c0>
 801407e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014080:	e066      	b.n	8014150 <phpalI14443p3b_Sw_Attrib+0x570>
                PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
                (uint16_t)(dwFwt / 1000U)));
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	685b      	ldr	r3, [r3, #4]
 8014086:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014088:	b292      	uxth	r2, r2
 801408a:	210d      	movs	r1, #13
 801408c:	4618      	mov	r0, r3
 801408e:	f7f9 f93f 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8014092:	4603      	mov	r3, r0
 8014094:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8014096:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014098:	2b00      	cmp	r3, #0
 801409a:	d001      	beq.n	80140a0 <phpalI14443p3b_Sw_Attrib+0x4c0>
 801409c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801409e:	e057      	b.n	8014150 <phpalI14443p3b_Sw_Attrib+0x570>
                (uint16_t)dwFwt));
        }
    }

    /* Set baud rate on Pcd */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p3b_Sw_SetReaderBaudRateEx(pDataParams));
 80140a0:	68f8      	ldr	r0, [r7, #12]
 80140a2:	f000 f9ef 	bl	8014484 <phpalI14443p3b_Sw_SetReaderBaudRateEx>
 80140a6:	4603      	mov	r3, r0
 80140a8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80140aa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d001      	beq.n	80140b4 <phpalI14443p3b_Sw_Attrib+0x4d4>
 80140b0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80140b2:	e04d      	b.n	8014150 <phpalI14443p3b_Sw_Attrib+0x570>

    /* Applying Tx Wait saved according to the TR value of ATQb as setreaderbaudrateEx restores default */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	6858      	ldr	r0, [r3, #4]
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	8b9b      	ldrh	r3, [r3, #28]
 80140bc:	461a      	mov	r2, r3
 80140be:	2107      	movs	r1, #7
 80140c0:	f7f9 f926 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 80140c4:	4603      	mov	r3, r0
 80140c6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80140c8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d001      	beq.n	80140d2 <phpalI14443p3b_Sw_Attrib+0x4f2>
 80140ce:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80140d0:	e03e      	b.n	8014150 <phpalI14443p3b_Sw_Attrib+0x570>
        PHHAL_HW_CONFIG_TXWAIT_US,
        pDataParams->wTxWait));

    /* If we have had received an extended ATQB with an SFGT (startup frame guard time)
    we need to wait this time here. */
    if (bAtqbLen == 13U)
 80140d2:	79fb      	ldrb	r3, [r7, #7]
 80140d4:	2b0d      	cmp	r3, #13
 80140d6:	d13a      	bne.n	801414e <phpalI14443p3b_Sw_Attrib+0x56e>
    {
        /* fetch sfgi value from response */
        bTemp = (uint8_t)(pAtqb[12] >> 4U);
 80140d8:	68bb      	ldr	r3, [r7, #8]
 80140da:	330c      	adds	r3, #12
 80140dc:	781b      	ldrb	r3, [r3, #0]
 80140de:	091b      	lsrs	r3, r3, #4
 80140e0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

        if (bTemp == 0x0FU)
 80140e4:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80140e8:	2b0f      	cmp	r3, #15
 80140ea:	d102      	bne.n	80140f2 <phpalI14443p3b_Sw_Attrib+0x512>
        {
            bTemp = PHPAL_I14443P3B_SW_SFGI_DEFAULT;
 80140ec:	2300      	movs	r3, #0
 80140ee:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        }
        /* Calculate SFGT in Microseconds */
        dwSfgt = ((uint32_t)(PHPAL_I14443P3B_SW_FWT_MIN_US) * ((uint32_t)1U << bTemp)) + PHPAL_I14443P3B_SW_EXT_TIME_US;
 80140f2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80140f6:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 80140fa:	fa02 f303 	lsl.w	r3, r2, r3
 80140fe:	333f      	adds	r3, #63	@ 0x3f
 8014100:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Perform SFGT Wait */
        if (dwSfgt > 0xFFFFU)
 8014102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014104:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014108:	d312      	bcc.n	8014130 <phpalI14443p3b_Sw_Attrib+0x550>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(pDataParams->pHalDataParams, PHHAL_HW_TIME_MILLISECONDS, (uint16_t)(dwSfgt / 1000U)));
 801410a:	68fb      	ldr	r3, [r7, #12]
 801410c:	6858      	ldr	r0, [r3, #4]
 801410e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014110:	4a11      	ldr	r2, [pc, #68]	@ (8014158 <phpalI14443p3b_Sw_Attrib+0x578>)
 8014112:	fba2 2303 	umull	r2, r3, r2, r3
 8014116:	099b      	lsrs	r3, r3, #6
 8014118:	b29b      	uxth	r3, r3
 801411a:	461a      	mov	r2, r3
 801411c:	2101      	movs	r1, #1
 801411e:	f7f9 f873 	bl	800d208 <phhalHw_Pn5180_Wait>
 8014122:	4603      	mov	r3, r0
 8014124:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8014126:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014128:	2b00      	cmp	r3, #0
 801412a:	d010      	beq.n	801414e <phpalI14443p3b_Sw_Attrib+0x56e>
 801412c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801412e:	e00f      	b.n	8014150 <phpalI14443p3b_Sw_Attrib+0x570>
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(pDataParams->pHalDataParams, PHHAL_HW_TIME_MICROSECONDS, (uint16_t)dwSfgt));
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	685b      	ldr	r3, [r3, #4]
 8014134:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014136:	b292      	uxth	r2, r2
 8014138:	2100      	movs	r1, #0
 801413a:	4618      	mov	r0, r3
 801413c:	f7f9 f864 	bl	800d208 <phhalHw_Pn5180_Wait>
 8014140:	4603      	mov	r3, r0
 8014142:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8014144:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014146:	2b00      	cmp	r3, #0
 8014148:	d001      	beq.n	801414e <phpalI14443p3b_Sw_Attrib+0x56e>
 801414a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801414c:	e000      	b.n	8014150 <phpalI14443p3b_Sw_Attrib+0x570>
        }
    }

    return PH_ERR_SUCCESS;
 801414e:	2300      	movs	r3, #0
}
 8014150:	4618      	mov	r0, r3
 8014152:	3738      	adds	r7, #56	@ 0x38
 8014154:	46bd      	mov	sp, r7
 8014156:	bd80      	pop	{r7, pc}
 8014158:	10624dd3 	.word	0x10624dd3

0801415c <phpalI14443p3b_Sw_GetProtocolParams>:
    uint8_t * pNadSupported,
    uint8_t * pFwi,
    uint8_t * pFsdi,
    uint8_t * pFsci
    )
{
 801415c:	b480      	push	{r7}
 801415e:	b085      	sub	sp, #20
 8014160:	af00      	add	r7, sp, #0
 8014162:	60f8      	str	r0, [r7, #12]
 8014164:	60b9      	str	r1, [r7, #8]
 8014166:	607a      	str	r2, [r7, #4]
 8014168:	603b      	str	r3, [r7, #0]
    *pCidEnabled    = pDataParams->bCidSupported;
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	7b9a      	ldrb	r2, [r3, #14]
 801416e:	68bb      	ldr	r3, [r7, #8]
 8014170:	701a      	strb	r2, [r3, #0]
    *pCid           = pDataParams->bCid;
 8014172:	68fb      	ldr	r3, [r7, #12]
 8014174:	7c1a      	ldrb	r2, [r3, #16]
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	701a      	strb	r2, [r3, #0]
    *pNadSupported  = pDataParams->bNadSupported;
 801417a:	68fb      	ldr	r3, [r7, #12]
 801417c:	7bda      	ldrb	r2, [r3, #15]
 801417e:	683b      	ldr	r3, [r7, #0]
 8014180:	701a      	strb	r2, [r3, #0]
    *pFwi           = pDataParams->bFwi;
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	7c5a      	ldrb	r2, [r3, #17]
 8014186:	69bb      	ldr	r3, [r7, #24]
 8014188:	701a      	strb	r2, [r3, #0]
    *pFsdi          = pDataParams->bFsdi;
 801418a:	68fb      	ldr	r3, [r7, #12]
 801418c:	7cda      	ldrb	r2, [r3, #19]
 801418e:	69fb      	ldr	r3, [r7, #28]
 8014190:	701a      	strb	r2, [r3, #0]
    *pFsci          = pDataParams->bFsci;
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	7c9a      	ldrb	r2, [r3, #18]
 8014196:	6a3b      	ldr	r3, [r7, #32]
 8014198:	701a      	strb	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 801419a:	2300      	movs	r3, #0
}
 801419c:	4618      	mov	r0, r3
 801419e:	3714      	adds	r7, #20
 80141a0:	46bd      	mov	sp, r7
 80141a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141a6:	4770      	bx	lr

080141a8 <phpalI14443p3b_Sw_CheckATQBEx>:
    uint8_t * pResp,
    uint16_t wRespLength,
    uint8_t * pAtqb,
    uint8_t * pAtqbLen
    )
{
 80141a8:	b580      	push	{r7, lr}
 80141aa:	b086      	sub	sp, #24
 80141ac:	af00      	add	r7, sp, #0
 80141ae:	60f8      	str	r0, [r7, #12]
 80141b0:	60b9      	str	r1, [r7, #8]
 80141b2:	603b      	str	r3, [r7, #0]
 80141b4:	4613      	mov	r3, r2
 80141b6:	80fb      	strh	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bTR2;

    /* Response check */
    /* Digital Protocol Requirement 49, Section 5.6.1.5 */
    if ((wRespLength != 12U) && (wRespLength != 13U))
 80141b8:	88fb      	ldrh	r3, [r7, #6]
 80141ba:	2b0c      	cmp	r3, #12
 80141bc:	d005      	beq.n	80141ca <phpalI14443p3b_Sw_CheckATQBEx+0x22>
 80141be:	88fb      	ldrh	r3, [r7, #6]
 80141c0:	2b0d      	cmp	r3, #13
 80141c2:	d002      	beq.n	80141ca <phpalI14443p3b_Sw_CheckATQBEx+0x22>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 80141c4:	f240 4306 	movw	r3, #1030	@ 0x406
 80141c8:	e0ae      	b.n	8014328 <phpalI14443p3b_Sw_CheckATQBEx+0x180>
    }

    /* The ATQB should look like the following (see ISO14443-3 7.9.1): */
    /* [0x50][PUPI0][PUPI1][PUPI2][PUPI3][PInfo0][PInfo1][PInfo2]([PInfo3])[CRC][CRC] */

    if ( pResp[0] != 0x50U )    /* ATQB byte */
 80141ca:	68bb      	ldr	r3, [r7, #8]
 80141cc:	781b      	ldrb	r3, [r3, #0]
 80141ce:	2b50      	cmp	r3, #80	@ 0x50
 80141d0:	d002      	beq.n	80141d8 <phpalI14443p3b_Sw_CheckATQBEx+0x30>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 80141d2:	f240 4306 	movw	r3, #1030	@ 0x406
 80141d6:	e0a7      	b.n	8014328 <phpalI14443p3b_Sw_CheckATQBEx+0x180>
    }

    /* Copy received AtqB */
    (void)memcpy(pAtqb, pResp, wRespLength);
 80141d8:	88fb      	ldrh	r3, [r7, #6]
 80141da:	461a      	mov	r2, r3
 80141dc:	68b9      	ldr	r1, [r7, #8]
 80141de:	6838      	ldr	r0, [r7, #0]
 80141e0:	f009 f80d 	bl	801d1fe <memcpy>
    *pAtqbLen = (uint8_t)wRespLength;
 80141e4:	88fb      	ldrh	r3, [r7, #6]
 80141e6:	b2da      	uxtb	r2, r3
 80141e8:	6a3b      	ldr	r3, [r7, #32]
 80141ea:	701a      	strb	r2, [r3, #0]

    if (pDataParams->bOpeMode != RD_LIB_MODE_NFC)
 80141ec:	68fb      	ldr	r3, [r7, #12]
 80141ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80141f2:	2b02      	cmp	r3, #2
 80141f4:	d013      	beq.n	801421e <phpalI14443p3b_Sw_CheckATQBEx+0x76>
    {
        /* Max allowed frame size integer for ISO and EMVCo(v3.0) mode is less than or equals to 0x0C (4096 bytes) */
        if ((uint8_t)(pAtqb[10] & 0xF0U) > 0xC0U)
 80141f6:	683b      	ldr	r3, [r7, #0]
 80141f8:	330a      	adds	r3, #10
 80141fa:	781b      	ldrb	r3, [r3, #0]
 80141fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014200:	2bc0      	cmp	r3, #192	@ 0xc0
 8014202:	d91f      	bls.n	8014244 <phpalI14443p3b_Sw_CheckATQBEx+0x9c>
        {
            pAtqb[10] = (pAtqb[10] & 0x0FU) | 0xC0U;
 8014204:	683b      	ldr	r3, [r7, #0]
 8014206:	330a      	adds	r3, #10
 8014208:	781b      	ldrb	r3, [r3, #0]
 801420a:	f003 030f 	and.w	r3, r3, #15
 801420e:	b2da      	uxtb	r2, r3
 8014210:	683b      	ldr	r3, [r7, #0]
 8014212:	330a      	adds	r3, #10
 8014214:	f062 023f 	orn	r2, r2, #63	@ 0x3f
 8014218:	b2d2      	uxtb	r2, r2
 801421a:	701a      	strb	r2, [r3, #0]
 801421c:	e012      	b.n	8014244 <phpalI14443p3b_Sw_CheckATQBEx+0x9c>
        }
    }
    else
    {
        /* Max allowed frame size integer for NFC(DP 1.1, Requirements 64) mode is less than or equals to 0x08 (256 bytes) */
        if ((uint8_t)(pAtqb[10] & 0xF0U) > 0x80U)
 801421e:	683b      	ldr	r3, [r7, #0]
 8014220:	330a      	adds	r3, #10
 8014222:	781b      	ldrb	r3, [r3, #0]
 8014224:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014228:	2b80      	cmp	r3, #128	@ 0x80
 801422a:	d90b      	bls.n	8014244 <phpalI14443p3b_Sw_CheckATQBEx+0x9c>
        {
            pAtqb[10] = (pAtqb[10] & 0x0FU) | 0x80U;
 801422c:	683b      	ldr	r3, [r7, #0]
 801422e:	330a      	adds	r3, #10
 8014230:	781b      	ldrb	r3, [r3, #0]
 8014232:	f003 030f 	and.w	r3, r3, #15
 8014236:	b2da      	uxtb	r2, r3
 8014238:	683b      	ldr	r3, [r7, #0]
 801423a:	330a      	adds	r3, #10
 801423c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8014240:	b2d2      	uxtb	r2, r2
 8014242:	701a      	strb	r2, [r3, #0]
/* Emvco: case_id 304_14
 * Conflict with TC304_14(added in 2.3.1a) and TC107_04
 * As per 6.3.2.8a in EMV Contactless Communication Protocol Specification Book D
 * Reset if b4 of Protocol Type set to (1)b
*/
    if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801424a:	2b01      	cmp	r3, #1
 801424c:	d109      	bne.n	8014262 <phpalI14443p3b_Sw_CheckATQBEx+0xba>
    {
        if((uint8_t)(pAtqb[10]& 0x08U) ==0x08U)
 801424e:	683b      	ldr	r3, [r7, #0]
 8014250:	330a      	adds	r3, #10
 8014252:	781b      	ldrb	r3, [r3, #0]
 8014254:	f003 0308 	and.w	r3, r3, #8
 8014258:	2b00      	cmp	r3, #0
 801425a:	d002      	beq.n	8014262 <phpalI14443p3b_Sw_CheckATQBEx+0xba>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 801425c:	f240 4306 	movw	r3, #1030	@ 0x406
 8014260:	e062      	b.n	8014328 <phpalI14443p3b_Sw_CheckATQBEx+0x180>
        }
    }

    if (pDataParams->bOpeMode == RD_LIB_MODE_ISO)
 8014262:	68fb      	ldr	r3, [r7, #12]
 8014264:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014268:	2b03      	cmp	r3, #3
 801426a:	d132      	bne.n	80142d2 <phpalI14443p3b_Sw_CheckATQBEx+0x12a>
    {
        /* Check TR2 value received in Atqb and set relevant TxWait as per ISO-IEC 14443-3. */
        bTR2 = (uint8_t)((pAtqb[10] & PHPAL_I14443P3B_SW_MINIMUM_TR2_MASK) >> PHPAL_I14443P3B_SW_MINIMUM_TR2_POS);
 801426c:	683b      	ldr	r3, [r7, #0]
 801426e:	330a      	adds	r3, #10
 8014270:	781b      	ldrb	r3, [r3, #0]
 8014272:	085b      	lsrs	r3, r3, #1
 8014274:	b2db      	uxtb	r3, r3
 8014276:	f003 0303 	and.w	r3, r3, #3
 801427a:	757b      	strb	r3, [r7, #21]
        switch(bTR2)
 801427c:	7d7b      	ldrb	r3, [r7, #21]
 801427e:	2b02      	cmp	r3, #2
 8014280:	d00e      	beq.n	80142a0 <phpalI14443p3b_Sw_CheckATQBEx+0xf8>
 8014282:	2b02      	cmp	r3, #2
 8014284:	dc11      	bgt.n	80142aa <phpalI14443p3b_Sw_CheckATQBEx+0x102>
 8014286:	2b00      	cmp	r3, #0
 8014288:	d002      	beq.n	8014290 <phpalI14443p3b_Sw_CheckATQBEx+0xe8>
 801428a:	2b01      	cmp	r3, #1
 801428c:	d004      	beq.n	8014298 <phpalI14443p3b_Sw_CheckATQBEx+0xf0>
 801428e:	e00c      	b.n	80142aa <phpalI14443p3b_Sw_CheckATQBEx+0x102>
        {
        case PHPAL_I14443P3B_SW_MINIMUM_TR2_VALUE_0:
            pDataParams->wTxWait = (uint16_t)PHPAL_I14443P3B_SW_TXWAIT_US_TR2_0;
 8014290:	68fb      	ldr	r3, [r7, #12]
 8014292:	2285      	movs	r2, #133	@ 0x85
 8014294:	839a      	strh	r2, [r3, #28]
            break;
 8014296:	e00d      	b.n	80142b4 <phpalI14443p3b_Sw_CheckATQBEx+0x10c>
        case PHPAL_I14443P3B_SW_MINIMUM_TR2_VALUE_1:
            pDataParams->wTxWait = (uint16_t)PHPAL_I14443P3B_SW_TXWAIT_US_TR2_1;
 8014298:	68fb      	ldr	r3, [r7, #12]
 801429a:	22f6      	movs	r2, #246	@ 0xf6
 801429c:	839a      	strh	r2, [r3, #28]
            break;
 801429e:	e009      	b.n	80142b4 <phpalI14443p3b_Sw_CheckATQBEx+0x10c>
        case PHPAL_I14443P3B_SW_MINIMUM_TR2_VALUE_2:
            pDataParams->wTxWait = (uint16_t)PHPAL_I14443P3B_SW_TXWAIT_US_TR2_2;
 80142a0:	68fb      	ldr	r3, [r7, #12]
 80142a2:	f240 128d 	movw	r2, #397	@ 0x18d
 80142a6:	839a      	strh	r2, [r3, #28]
            break;
 80142a8:	e004      	b.n	80142b4 <phpalI14443p3b_Sw_CheckATQBEx+0x10c>
        default:
            pDataParams->wTxWait = (uint16_t)PHPAL_I14443P3B_SW_TXWAIT_US_TR2_3;
 80142aa:	68fb      	ldr	r3, [r7, #12]
 80142ac:	f240 22bb 	movw	r2, #699	@ 0x2bb
 80142b0:	839a      	strh	r2, [r3, #28]
            break;
 80142b2:	bf00      	nop
        }

        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80142b4:	68fb      	ldr	r3, [r7, #12]
 80142b6:	6858      	ldr	r0, [r3, #4]
 80142b8:	68fb      	ldr	r3, [r7, #12]
 80142ba:	8b9b      	ldrh	r3, [r3, #28]
 80142bc:	461a      	mov	r2, r3
 80142be:	2107      	movs	r1, #7
 80142c0:	f7f9 f826 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 80142c4:	4603      	mov	r3, r0
 80142c6:	82fb      	strh	r3, [r7, #22]
 80142c8:	8afb      	ldrh	r3, [r7, #22]
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d022      	beq.n	8014314 <phpalI14443p3b_Sw_CheckATQBEx+0x16c>
 80142ce:	8afb      	ldrh	r3, [r7, #22]
 80142d0:	e02a      	b.n	8014328 <phpalI14443p3b_Sw_CheckATQBEx+0x180>
            pDataParams->wTxWait));
    }
    else
    {
        /* If the TR2 value is (11)b then the default TxWait of 500us (6780/fc) has to changed to 699us (9472/fc). */
        if ((uint8_t)((pAtqb[10] & PHPAL_I14443P3B_SW_MINIMUM_TR2_MASK) >> PHPAL_I14443P3B_SW_MINIMUM_TR2_POS)
 80142d2:	683b      	ldr	r3, [r7, #0]
 80142d4:	330a      	adds	r3, #10
 80142d6:	781b      	ldrb	r3, [r3, #0]
 80142d8:	085b      	lsrs	r3, r3, #1
 80142da:	b2db      	uxtb	r3, r3
 80142dc:	f003 0303 	and.w	r3, r3, #3
 80142e0:	b2db      	uxtb	r3, r3
 80142e2:	2b03      	cmp	r3, #3
 80142e4:	d112      	bne.n	801430c <phpalI14443p3b_Sw_CheckATQBEx+0x164>
            == PHPAL_I14443P3B_SW_MINIMUM_TR2_VALUE_3)
        {
            pDataParams->wTxWait = (uint16_t)PHPAL_I14443P3B_SW_TXWAIT_US_TR2_3;
 80142e6:	68fb      	ldr	r3, [r7, #12]
 80142e8:	f240 22bb 	movw	r2, #699	@ 0x2bb
 80142ec:	839a      	strh	r2, [r3, #28]
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	685b      	ldr	r3, [r3, #4]
 80142f2:	f240 22bb 	movw	r2, #699	@ 0x2bb
 80142f6:	2107      	movs	r1, #7
 80142f8:	4618      	mov	r0, r3
 80142fa:	f7f9 f809 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 80142fe:	4603      	mov	r3, r0
 8014300:	82fb      	strh	r3, [r7, #22]
 8014302:	8afb      	ldrh	r3, [r7, #22]
 8014304:	2b00      	cmp	r3, #0
 8014306:	d005      	beq.n	8014314 <phpalI14443p3b_Sw_CheckATQBEx+0x16c>
 8014308:	8afb      	ldrh	r3, [r7, #22]
 801430a:	e00d      	b.n	8014328 <phpalI14443p3b_Sw_CheckATQBEx+0x180>
                PHHAL_HW_CONFIG_TXWAIT_US,
                PHPAL_I14443P3B_SW_TXWAIT_US_TR2_3));
        }
        else
        {
            pDataParams->wTxWait = PHPAL_I14443P3B_SW_TXWAIT_US_DEFAULT;
 801430c:	68fb      	ldr	r3, [r7, #12]
 801430e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8014312:	839a      	strh	r2, [r3, #28]
        }
    }

    /* and also copy the PUPI into the protocol params structure to be available
    for a possible following HaltB command */
    (void)memcpy( pDataParams->pPupi, &pAtqb[1], (uint32_t)(sizeof(pDataParams->pPupi)) );
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	3309      	adds	r3, #9
 8014318:	683a      	ldr	r2, [r7, #0]
 801431a:	3201      	adds	r2, #1
 801431c:	6812      	ldr	r2, [r2, #0]
 801431e:	601a      	str	r2, [r3, #0]
    pDataParams->bPupiValid = PH_ON;
 8014320:	68fb      	ldr	r3, [r7, #12]
 8014322:	2201      	movs	r2, #1
 8014324:	735a      	strb	r2, [r3, #13]

    return PH_ERR_SUCCESS;
 8014326:	2300      	movs	r3, #0
}
 8014328:	4618      	mov	r0, r3
 801432a:	3718      	adds	r7, #24
 801432c:	46bd      	mov	sp, r7
 801432e:	bd80      	pop	{r7, pc}

08014330 <phpalI14443p3b_Sw_RequestBEx>:
                                        uint8_t bAfi,
                                        uint8_t bExtAtqb,
                                        uint8_t * pAtqb,
                                        uint8_t * pAtqbLen
                                        )
{
 8014330:	b580      	push	{r7, lr}
 8014332:	b088      	sub	sp, #32
 8014334:	af02      	add	r7, sp, #8
 8014336:	6078      	str	r0, [r7, #4]
 8014338:	4608      	mov	r0, r1
 801433a:	4611      	mov	r1, r2
 801433c:	461a      	mov	r2, r3
 801433e:	4603      	mov	r3, r0
 8014340:	70fb      	strb	r3, [r7, #3]
 8014342:	460b      	mov	r3, r1
 8014344:	70bb      	strb	r3, [r7, #2]
 8014346:	4613      	mov	r3, r2
 8014348:	707b      	strb	r3, [r7, #1]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aCmd[3];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 801434a:	2300      	movs	r3, #0
 801434c:	60fb      	str	r3, [r7, #12]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 801434e:	2300      	movs	r3, #0
 8014350:	817b      	strh	r3, [r7, #10]

    /* parameter check */
    if (bNumSlots > 4U)
 8014352:	78bb      	ldrb	r3, [r7, #2]
 8014354:	2b04      	cmp	r3, #4
 8014356:	d902      	bls.n	801435e <phpalI14443p3b_Sw_RequestBEx+0x2e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8014358:	f240 4321 	movw	r3, #1057	@ 0x421
 801435c:	e08d      	b.n	801447a <phpalI14443p3b_Sw_RequestBEx+0x14a>
    }

    /* Build the command */
    aCmd[0] = PHPAL_I14443P3B_SW_APF;
 801435e:	2305      	movs	r3, #5
 8014360:	743b      	strb	r3, [r7, #16]
    aCmd[1] = bAfi;
 8014362:	787b      	ldrb	r3, [r7, #1]
 8014364:	747b      	strb	r3, [r7, #17]
    aCmd[2] = bNumSlots;    /* N = 2^bNumSlots*/
 8014366:	78bb      	ldrb	r3, [r7, #2]
 8014368:	74bb      	strb	r3, [r7, #18]

    /* Set wakeup bit if necessary */
    if (0U != (bIsWakeUp))
 801436a:	78fb      	ldrb	r3, [r7, #3]
 801436c:	2b00      	cmp	r3, #0
 801436e:	d004      	beq.n	801437a <phpalI14443p3b_Sw_RequestBEx+0x4a>
    {
        aCmd[2] |= PHPAL_I14443P3B_SW_PARAM_WUP_BIT;
 8014370:	7cbb      	ldrb	r3, [r7, #18]
 8014372:	f043 0308 	orr.w	r3, r3, #8
 8014376:	b2db      	uxtb	r3, r3
 8014378:	74bb      	strb	r3, [r7, #18]
    }

    /* Enable Extended ATQB if necessary */
    if (bExtAtqb != PH_OFF)
 801437a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801437e:	2b00      	cmp	r3, #0
 8014380:	d004      	beq.n	801438c <phpalI14443p3b_Sw_RequestBEx+0x5c>
    {
        aCmd[2] |= PHPAL_I14443P3B_SW_PARAM_EXTATQB_BIT;
 8014382:	7cbb      	ldrb	r3, [r7, #18]
 8014384:	f043 0310 	orr.w	r3, r3, #16
 8014388:	b2db      	uxtb	r3, r3
 801438a:	74bb      	strb	r3, [r7, #18]
    }

    /* Store usage of Extended ATQB */
    pDataParams->bExtAtqb = bExtAtqb;
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8014392:	721a      	strb	r2, [r3, #8]

    /* PUPI is invalid */
    pDataParams->bPupiValid = PH_OFF;
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	2200      	movs	r2, #0
 8014398:	735a      	strb	r2, [r3, #13]

    /* Reset default data rates */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	685b      	ldr	r3, [r3, #4]
 801439e:	2200      	movs	r2, #0
 80143a0:	2109      	movs	r1, #9
 80143a2:	4618      	mov	r0, r3
 80143a4:	f7f8 ffb4 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 80143a8:	4603      	mov	r3, r0
 80143aa:	82fb      	strh	r3, [r7, #22]
 80143ac:	8afb      	ldrh	r3, [r7, #22]
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d001      	beq.n	80143b6 <phpalI14443p3b_Sw_RequestBEx+0x86>
 80143b2:	8afb      	ldrh	r3, [r7, #22]
 80143b4:	e061      	b.n	801447a <phpalI14443p3b_Sw_RequestBEx+0x14a>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TXDATARATE_FRAMING,
        PHHAL_HW_RF_DATARATE_106));
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	685b      	ldr	r3, [r3, #4]
 80143ba:	2200      	movs	r2, #0
 80143bc:	210a      	movs	r1, #10
 80143be:	4618      	mov	r0, r3
 80143c0:	f7f8 ffa6 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 80143c4:	4603      	mov	r3, r0
 80143c6:	82fb      	strh	r3, [r7, #22]
 80143c8:	8afb      	ldrh	r3, [r7, #22]
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d001      	beq.n	80143d2 <phpalI14443p3b_Sw_RequestBEx+0xa2>
 80143ce:	8afb      	ldrh	r3, [r7, #22]
 80143d0:	e053      	b.n	801447a <phpalI14443p3b_Sw_RequestBEx+0x14a>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_RXDATARATE_FRAMING,
        PHHAL_HW_RF_DATARATE_106));

    /* Set RequestB timeout */
    if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80143d8:	2b01      	cmp	r3, #1
 80143da:	d10e      	bne.n	80143fa <phpalI14443p3b_Sw_RequestBEx+0xca>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	685b      	ldr	r3, [r3, #4]
 80143e0:	f240 22d6 	movw	r2, #726	@ 0x2d6
 80143e4:	210d      	movs	r1, #13
 80143e6:	4618      	mov	r0, r3
 80143e8:	f7f8 ff92 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 80143ec:	4603      	mov	r3, r0
 80143ee:	82fb      	strh	r3, [r7, #22]
 80143f0:	8afb      	ldrh	r3, [r7, #22]
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d023      	beq.n	801443e <phpalI14443p3b_Sw_RequestBEx+0x10e>
 80143f6:	8afb      	ldrh	r3, [r7, #22]
 80143f8:	e03f      	b.n	801447a <phpalI14443p3b_Sw_RequestBEx+0x14a>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
            PHPAL_I14443P3B_SW_ATQB_TIME_US + (PHPAL_I14443P3B_SW_EXT_TIME_US * 2U)));
    }
    else if(pDataParams->bOpeMode == RD_LIB_MODE_ISO)
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014400:	2b03      	cmp	r3, #3
 8014402:	d10e      	bne.n	8014422 <phpalI14443p3b_Sw_RequestBEx+0xf2>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	685b      	ldr	r3, [r3, #4]
 8014408:	f240 2297 	movw	r2, #663	@ 0x297
 801440c:	210d      	movs	r1, #13
 801440e:	4618      	mov	r0, r3
 8014410:	f7f8 ff7e 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8014414:	4603      	mov	r3, r0
 8014416:	82fb      	strh	r3, [r7, #22]
 8014418:	8afb      	ldrh	r3, [r7, #22]
 801441a:	2b00      	cmp	r3, #0
 801441c:	d00f      	beq.n	801443e <phpalI14443p3b_Sw_RequestBEx+0x10e>
 801441e:	8afb      	ldrh	r3, [r7, #22]
 8014420:	e02b      	b.n	801447a <phpalI14443p3b_Sw_RequestBEx+0x14a>
    else
    {
        /* As per Digital Protocol Ver1.1 Article 7.9.1.5
         * PCD should wait ~17ms (FWT(B,SENSB) + T(B,POLL)) * (566us + 16.4ms = ~17ms)
         */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	685b      	ldr	r3, [r3, #4]
 8014426:	2211      	movs	r2, #17
 8014428:	210e      	movs	r1, #14
 801442a:	4618      	mov	r0, r3
 801442c:	f7f8 ff70 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8014430:	4603      	mov	r3, r0
 8014432:	82fb      	strh	r3, [r7, #22]
 8014434:	8afb      	ldrh	r3, [r7, #22]
 8014436:	2b00      	cmp	r3, #0
 8014438:	d001      	beq.n	801443e <phpalI14443p3b_Sw_RequestBEx+0x10e>
 801443a:	8afb      	ldrh	r3, [r7, #22]
 801443c:	e01d      	b.n	801447a <phpalI14443p3b_Sw_RequestBEx+0x14a>
                    PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
                    PHPAL_I14443P3B_SW_DELTA_POLL));
    }

    /* Exchange command */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	6858      	ldr	r0, [r3, #4]
 8014442:	f107 0210 	add.w	r2, r7, #16
 8014446:	f107 030a 	add.w	r3, r7, #10
 801444a:	9301      	str	r3, [sp, #4]
 801444c:	f107 030c 	add.w	r3, r7, #12
 8014450:	9300      	str	r3, [sp, #0]
 8014452:	2303      	movs	r3, #3
 8014454:	2100      	movs	r1, #0
 8014456:	f7f8 fbdb 	bl	800cc10 <phhalHw_Pn5180_Exchange>
 801445a:	4603      	mov	r3, r0
 801445c:	82fb      	strh	r3, [r7, #22]
 801445e:	8afb      	ldrh	r3, [r7, #22]
 8014460:	2b00      	cmp	r3, #0
 8014462:	d001      	beq.n	8014468 <phpalI14443p3b_Sw_RequestBEx+0x138>
 8014464:	8afb      	ldrh	r3, [r7, #22]
 8014466:	e008      	b.n	801447a <phpalI14443p3b_Sw_RequestBEx+0x14a>
        aCmd,
        3,
        &pResp,
        &wRespLength));

    return phpalI14443p3b_Sw_CheckATQBEx( pDataParams,
 8014468:	68f9      	ldr	r1, [r7, #12]
 801446a:	897a      	ldrh	r2, [r7, #10]
 801446c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801446e:	9300      	str	r3, [sp, #0]
 8014470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014472:	6878      	ldr	r0, [r7, #4]
 8014474:	f7ff fe98 	bl	80141a8 <phpalI14443p3b_Sw_CheckATQBEx>
 8014478:	4603      	mov	r3, r0
        pResp,
        wRespLength,
        pAtqb,
        pAtqbLen
        );
}
 801447a:	4618      	mov	r0, r3
 801447c:	3718      	adds	r7, #24
 801447e:	46bd      	mov	sp, r7
 8014480:	bd80      	pop	{r7, pc}
	...

08014484 <phpalI14443p3b_Sw_SetReaderBaudRateEx>:

phStatus_t phpalI14443p3b_Sw_SetReaderBaudRateEx( phpalI14443p3b_Sw_DataParams_t * pDataParams )
{
 8014484:	b580      	push	{r7, lr}
 8014486:	b084      	sub	sp, #16
 8014488:	af00      	add	r7, sp, #0
 801448a:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t    PH_MEMLOC_REM wTxDataRate;
    uint16_t    PH_MEMLOC_REM wRxDataRate;

    /* Check and convert Dri value */
    switch (pDataParams->bDri)
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	7d1b      	ldrb	r3, [r3, #20]
 8014490:	2b03      	cmp	r3, #3
 8014492:	d817      	bhi.n	80144c4 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x40>
 8014494:	a201      	add	r2, pc, #4	@ (adr r2, 801449c <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x18>)
 8014496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801449a:	bf00      	nop
 801449c:	080144ad 	.word	0x080144ad
 80144a0:	080144b3 	.word	0x080144b3
 80144a4:	080144b9 	.word	0x080144b9
 80144a8:	080144bf 	.word	0x080144bf
    {
    case PHPAL_I14443P3B_DATARATE_106:
        wTxDataRate = PHHAL_HW_RF_DATARATE_106;
 80144ac:	2300      	movs	r3, #0
 80144ae:	81fb      	strh	r3, [r7, #14]
        break;
 80144b0:	e00b      	b.n	80144ca <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x46>
    case PHPAL_I14443P3B_DATARATE_212:
        wTxDataRate = PHHAL_HW_RF_DATARATE_212;
 80144b2:	2301      	movs	r3, #1
 80144b4:	81fb      	strh	r3, [r7, #14]
        break;
 80144b6:	e008      	b.n	80144ca <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x46>
    case PHPAL_I14443P3B_DATARATE_424:
        wTxDataRate = PHHAL_HW_RF_DATARATE_424;
 80144b8:	2302      	movs	r3, #2
 80144ba:	81fb      	strh	r3, [r7, #14]
        break;
 80144bc:	e005      	b.n	80144ca <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x46>
    case PHPAL_I14443P3B_DATARATE_848:
        wTxDataRate = PHHAL_HW_RF_DATARATE_848;
 80144be:	2303      	movs	r3, #3
 80144c0:	81fb      	strh	r3, [r7, #14]
        break;
 80144c2:	e002      	b.n	80144ca <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x46>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 80144c4:	f240 4321 	movw	r3, #1057	@ 0x421
 80144c8:	e03a      	b.n	8014540 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0xbc>
    }

    /* Check and convert Dsi value */
    switch (pDataParams->bDsi)
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	7d5b      	ldrb	r3, [r3, #21]
 80144ce:	2b03      	cmp	r3, #3
 80144d0:	d816      	bhi.n	8014500 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x7c>
 80144d2:	a201      	add	r2, pc, #4	@ (adr r2, 80144d8 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x54>)
 80144d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144d8:	080144e9 	.word	0x080144e9
 80144dc:	080144ef 	.word	0x080144ef
 80144e0:	080144f5 	.word	0x080144f5
 80144e4:	080144fb 	.word	0x080144fb
    {
    case PHPAL_I14443P3B_DATARATE_106:
        wRxDataRate = PHHAL_HW_RF_DATARATE_106;
 80144e8:	2300      	movs	r3, #0
 80144ea:	81bb      	strh	r3, [r7, #12]
        break;
 80144ec:	e00b      	b.n	8014506 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x82>
    case PHPAL_I14443P3B_DATARATE_212:
        wRxDataRate = PHHAL_HW_RF_DATARATE_212;
 80144ee:	2301      	movs	r3, #1
 80144f0:	81bb      	strh	r3, [r7, #12]
        break;
 80144f2:	e008      	b.n	8014506 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x82>
    case PHPAL_I14443P3B_DATARATE_424:
        wRxDataRate = PHHAL_HW_RF_DATARATE_424;
 80144f4:	2302      	movs	r3, #2
 80144f6:	81bb      	strh	r3, [r7, #12]
        break;
 80144f8:	e005      	b.n	8014506 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x82>
    case PHPAL_I14443P3B_DATARATE_848:
        wRxDataRate = PHHAL_HW_RF_DATARATE_848;
 80144fa:	2303      	movs	r3, #3
 80144fc:	81bb      	strh	r3, [r7, #12]
        break;
 80144fe:	e002      	b.n	8014506 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x82>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8014500:	f240 4321 	movw	r3, #1057	@ 0x421
 8014504:	e01c      	b.n	8014540 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0xbc>
    }

    /* Apply new data rates to Pcd */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXDATARATE_FRAMING, wTxDataRate));
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	685b      	ldr	r3, [r3, #4]
 801450a:	89fa      	ldrh	r2, [r7, #14]
 801450c:	2109      	movs	r1, #9
 801450e:	4618      	mov	r0, r3
 8014510:	f7f8 fefe 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8014514:	4603      	mov	r3, r0
 8014516:	817b      	strh	r3, [r7, #10]
 8014518:	897b      	ldrh	r3, [r7, #10]
 801451a:	2b00      	cmp	r3, #0
 801451c:	d001      	beq.n	8014522 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x9e>
 801451e:	897b      	ldrh	r3, [r7, #10]
 8014520:	e00e      	b.n	8014540 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0xbc>
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXDATARATE_FRAMING, wRxDataRate));
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	685b      	ldr	r3, [r3, #4]
 8014526:	89ba      	ldrh	r2, [r7, #12]
 8014528:	210a      	movs	r1, #10
 801452a:	4618      	mov	r0, r3
 801452c:	f7f8 fef0 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8014530:	4603      	mov	r3, r0
 8014532:	817b      	strh	r3, [r7, #10]
 8014534:	897b      	ldrh	r3, [r7, #10]
 8014536:	2b00      	cmp	r3, #0
 8014538:	d001      	beq.n	801453e <phpalI14443p3b_Sw_SetReaderBaudRateEx+0xba>
 801453a:	897b      	ldrh	r3, [r7, #10]
 801453c:	e000      	b.n	8014540 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0xbc>

    return PH_ERR_SUCCESS;
 801453e:	2300      	movs	r3, #0

}
 8014540:	4618      	mov	r0, r3
 8014542:	3710      	adds	r7, #16
 8014544:	46bd      	mov	sp, r7
 8014546:	bd80      	pop	{r7, pc}

08014548 <phpalI14443p3b_Sw_SetSerialNo>:

    return PH_ERR_SUCCESS;
}

phStatus_t phpalI14443p3b_Sw_SetSerialNo(phpalI14443p3b_Sw_DataParams_t * pDataParams, uint8_t *pPupi)
{
 8014548:	b480      	push	{r7}
 801454a:	b083      	sub	sp, #12
 801454c:	af00      	add	r7, sp, #0
 801454e:	6078      	str	r0, [r7, #4]
 8014550:	6039      	str	r1, [r7, #0]
    (void)memcpy(pDataParams->pPupi, pPupi, (uint32_t)(sizeof(pDataParams->pPupi)));
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	3309      	adds	r3, #9
 8014556:	683a      	ldr	r2, [r7, #0]
 8014558:	6812      	ldr	r2, [r2, #0]
 801455a:	601a      	str	r2, [r3, #0]
    pDataParams->bPupiValid = PH_ON;
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	2201      	movs	r2, #1
 8014560:	735a      	strb	r2, [r3, #13]

    return PH_ERR_SUCCESS;
 8014562:	2300      	movs	r3, #0
}
 8014564:	4618      	mov	r0, r3
 8014566:	370c      	adds	r7, #12
 8014568:	46bd      	mov	sp, r7
 801456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801456e:	4770      	bx	lr

08014570 <phpalI14443p4_Sw_Init>:
phStatus_t phpalI14443p4_Sw_Init(
                                 phpalI14443p4_Sw_DataParams_t * pDataParams,
                                 uint16_t wSizeOfDataParams,
                                 void * pHalDataParams
                                 )
{
 8014570:	b580      	push	{r7, lr}
 8014572:	b084      	sub	sp, #16
 8014574:	af00      	add	r7, sp, #0
 8014576:	60f8      	str	r0, [r7, #12]
 8014578:	460b      	mov	r3, r1
 801457a:	607a      	str	r2, [r7, #4]
 801457c:	817b      	strh	r3, [r7, #10]
    if (sizeof(phpalI14443p4_Sw_DataParams_t) != wSizeOfDataParams)
 801457e:	897b      	ldrh	r3, [r7, #10]
 8014580:	2b14      	cmp	r3, #20
 8014582:	d002      	beq.n	801458a <phpalI14443p4_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_ISO14443P4);
 8014584:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8014588:	e017      	b.n	80145ba <phpalI14443p4_Sw_Init+0x4a>
    }
    PH_ASSERT_NULL (pDataParams);
 801458a:	68fb      	ldr	r3, [r7, #12]
 801458c:	2b00      	cmp	r3, #0
 801458e:	d101      	bne.n	8014594 <phpalI14443p4_Sw_Init+0x24>
 8014590:	2321      	movs	r3, #33	@ 0x21
 8014592:	e012      	b.n	80145ba <phpalI14443p4_Sw_Init+0x4a>
    PH_ASSERT_NULL (pHalDataParams);
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	2b00      	cmp	r3, #0
 8014598:	d101      	bne.n	801459e <phpalI14443p4_Sw_Init+0x2e>
 801459a:	2321      	movs	r3, #33	@ 0x21
 801459c:	e00d      	b.n	80145ba <phpalI14443p4_Sw_Init+0x4a>

    /* Init private data */
    pDataParams->wId            = PH_COMP_PAL_ISO14443P4 | PHPAL_I14443P4_SW_ID;
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	f240 6201 	movw	r2, #1537	@ 0x601
 80145a4:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams = pHalDataParams;
 80145a6:	68fb      	ldr	r3, [r7, #12]
 80145a8:	687a      	ldr	r2, [r7, #4]
 80145aa:	605a      	str	r2, [r3, #4]
    pDataParams->bOpeMode       = RD_LIB_MODE_NFC;
 80145ac:	68fb      	ldr	r3, [r7, #12]
 80145ae:	2202      	movs	r2, #2
 80145b0:	749a      	strb	r2, [r3, #18]

    /* Reset protocol to defaults */
    return phpalI14443p4_Sw_ResetProtocol(pDataParams);
 80145b2:	68f8      	ldr	r0, [r7, #12]
 80145b4:	f000 f840 	bl	8014638 <phpalI14443p4_Sw_ResetProtocol>
 80145b8:	4603      	mov	r3, r0
}
 80145ba:	4618      	mov	r0, r3
 80145bc:	3710      	adds	r7, #16
 80145be:	46bd      	mov	sp, r7
 80145c0:	bd80      	pop	{r7, pc}

080145c2 <phpalI14443p4_Sw_SetProtocol>:
                                        uint8_t   bNad,
                                        uint8_t   bFwi,
                                        uint8_t   bFsdi,
                                        uint8_t   bFsci
                                        )
{
 80145c2:	b480      	push	{r7}
 80145c4:	b083      	sub	sp, #12
 80145c6:	af00      	add	r7, sp, #0
 80145c8:	6078      	str	r0, [r7, #4]
 80145ca:	4608      	mov	r0, r1
 80145cc:	4611      	mov	r1, r2
 80145ce:	461a      	mov	r2, r3
 80145d0:	4603      	mov	r3, r0
 80145d2:	70fb      	strb	r3, [r7, #3]
 80145d4:	460b      	mov	r3, r1
 80145d6:	70bb      	strb	r3, [r7, #2]
 80145d8:	4613      	mov	r3, r2
 80145da:	707b      	strb	r3, [r7, #1]
    /* Rule A, ISO/IEC 14443-4:2008(E), init. Blocknumber to zero */
    pDataParams->bPcbBlockNum = 0;
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	2200      	movs	r2, #0
 80145e0:	741a      	strb	r2, [r3, #16]

    /* Check parameters */
    if ((bCid > PHPAL_I14443P4_CID_MAX) ||
 80145e2:	78bb      	ldrb	r3, [r7, #2]
 80145e4:	2b0e      	cmp	r3, #14
 80145e6:	d808      	bhi.n	80145fa <phpalI14443p4_Sw_SetProtocol+0x38>
 80145e8:	7d3b      	ldrb	r3, [r7, #20]
 80145ea:	2b0e      	cmp	r3, #14
 80145ec:	d805      	bhi.n	80145fa <phpalI14443p4_Sw_SetProtocol+0x38>
        (bFwi > PHPAL_I14443P4_FWI_MAX) ||
 80145ee:	7e3b      	ldrb	r3, [r7, #24]
 80145f0:	2b0c      	cmp	r3, #12
 80145f2:	d802      	bhi.n	80145fa <phpalI14443p4_Sw_SetProtocol+0x38>
        (bFsdi > PHPAL_I14443P4_FRAMESIZE_MAX) ||
 80145f4:	7f3b      	ldrb	r3, [r7, #28]
 80145f6:	2b0c      	cmp	r3, #12
 80145f8:	d902      	bls.n	8014600 <phpalI14443p4_Sw_SetProtocol+0x3e>
        (bFsci > PHPAL_I14443P4_FRAMESIZE_MAX))
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4);
 80145fa:	f240 6321 	movw	r3, #1569	@ 0x621
 80145fe:	e015      	b.n	801462c <phpalI14443p4_Sw_SetProtocol+0x6a>
    }

    /* Apply parameters */
    pDataParams->bCidEnabled = bCidEnable;
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	78fa      	ldrb	r2, [r7, #3]
 8014604:	725a      	strb	r2, [r3, #9]
    pDataParams->bCid = bCid;
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	78ba      	ldrb	r2, [r7, #2]
 801460a:	729a      	strb	r2, [r3, #10]
    pDataParams->bNadEnabled = bNadEnable;
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	787a      	ldrb	r2, [r7, #1]
 8014610:	72da      	strb	r2, [r3, #11]
    pDataParams->bNad = bNad;
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	7c3a      	ldrb	r2, [r7, #16]
 8014616:	731a      	strb	r2, [r3, #12]
    pDataParams->bFwi = bFwi;
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	7d3a      	ldrb	r2, [r7, #20]
 801461c:	735a      	strb	r2, [r3, #13]
    pDataParams->bFsdi = bFsdi;
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	7e3a      	ldrb	r2, [r7, #24]
 8014622:	739a      	strb	r2, [r3, #14]
    pDataParams->bFsci = bFsci;
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	7f3a      	ldrb	r2, [r7, #28]
 8014628:	73da      	strb	r2, [r3, #15]

    return PH_ERR_SUCCESS;
 801462a:	2300      	movs	r3, #0
}
 801462c:	4618      	mov	r0, r3
 801462e:	370c      	adds	r7, #12
 8014630:	46bd      	mov	sp, r7
 8014632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014636:	4770      	bx	lr

08014638 <phpalI14443p4_Sw_ResetProtocol>:

phStatus_t phpalI14443p4_Sw_ResetProtocol(
    phpalI14443p4_Sw_DataParams_t * pDataParams
    )
{
 8014638:	b480      	push	{r7}
 801463a:	b083      	sub	sp, #12
 801463c:	af00      	add	r7, sp, #0
 801463e:	6078      	str	r0, [r7, #4]
    /* Set default state */
    pDataParams->bStateNow = PHPAL_I14443P4_SW_STATE_I_BLOCK_TX;
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	2201      	movs	r2, #1
 8014644:	721a      	strb	r2, [r3, #8]

    /* Rule A, ISO/IEC 14443-4:2008(E), init. Blocknumber to zero */
    pDataParams->bPcbBlockNum = 0;
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	2200      	movs	r2, #0
 801464a:	741a      	strb	r2, [r3, #16]

    /* Apply default parameters */
    pDataParams->bCidEnabled        = 0x00;
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	2200      	movs	r2, #0
 8014650:	725a      	strb	r2, [r3, #9]
    pDataParams->bCid               = 0x00;
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	2200      	movs	r2, #0
 8014656:	729a      	strb	r2, [r3, #10]
    pDataParams->bNadEnabled        = 0x00;
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	2200      	movs	r2, #0
 801465c:	72da      	strb	r2, [r3, #11]
    pDataParams->bNad               = 0x00;
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	2200      	movs	r2, #0
 8014662:	731a      	strb	r2, [r3, #12]
    pDataParams->bFwi               = PHPAL_I14443P4_SW_FWI_DEFAULT;
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	2204      	movs	r2, #4
 8014668:	735a      	strb	r2, [r3, #13]
    pDataParams->bFsdi              = 0x00;
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	2200      	movs	r2, #0
 801466e:	739a      	strb	r2, [r3, #14]
    pDataParams->bFsci              = PHPAL_I14443P4_SW_FSCI_DEFAULT;
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	2202      	movs	r2, #2
 8014674:	73da      	strb	r2, [r3, #15]
    pDataParams->bMaxRetryCount     = PHPAL_I14443P4_SW_MAX_RETRIES_DEFAULT;
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	2202      	movs	r2, #2
 801467a:	745a      	strb	r2, [r3, #17]

    return PH_ERR_SUCCESS;
 801467c:	2300      	movs	r3, #0
}
 801467e:	4618      	mov	r0, r3
 8014680:	370c      	adds	r7, #12
 8014682:	46bd      	mov	sp, r7
 8014684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014688:	4770      	bx	lr
	...

0801468c <phpalI14443p4_Sw_SetConfig>:
phStatus_t phpalI14443p4_Sw_SetConfig(
                                      phpalI14443p4_Sw_DataParams_t * pDataParams,
                                      uint16_t wConfig,
                                      uint16_t wValue
                                      )
{
 801468c:	b480      	push	{r7}
 801468e:	b083      	sub	sp, #12
 8014690:	af00      	add	r7, sp, #0
 8014692:	6078      	str	r0, [r7, #4]
 8014694:	460b      	mov	r3, r1
 8014696:	807b      	strh	r3, [r7, #2]
 8014698:	4613      	mov	r3, r2
 801469a:	803b      	strh	r3, [r7, #0]
    switch (wConfig)
 801469c:	887b      	ldrh	r3, [r7, #2]
 801469e:	2b06      	cmp	r3, #6
 80146a0:	d876      	bhi.n	8014790 <phpalI14443p4_Sw_SetConfig+0x104>
 80146a2:	a201      	add	r2, pc, #4	@ (adr r2, 80146a8 <phpalI14443p4_Sw_SetConfig+0x1c>)
 80146a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146a8:	080146cf 	.word	0x080146cf
 80146ac:	080146e5 	.word	0x080146e5
 80146b0:	0801471b 	.word	0x0801471b
 80146b4:	08014743 	.word	0x08014743
 80146b8:	08014759 	.word	0x08014759
 80146bc:	08014787 	.word	0x08014787
 80146c0:	080146c5 	.word	0x080146c5
    {
    case PHPAL_I14443P4_CONFIG_OPE_MODE:
        {
            pDataParams->bOpeMode = (uint8_t)wValue;
 80146c4:	883b      	ldrh	r3, [r7, #0]
 80146c6:	b2da      	uxtb	r2, r3
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	749a      	strb	r2, [r3, #18]
            break;
 80146cc:	e063      	b.n	8014796 <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    case PHPAL_I14443P4_CONFIG_BLOCKNO:
        {
            if (wValue == 0U)
 80146ce:	883b      	ldrh	r3, [r7, #0]
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d103      	bne.n	80146dc <phpalI14443p4_Sw_SetConfig+0x50>
            {
                pDataParams->bPcbBlockNum = 0;
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	2200      	movs	r2, #0
 80146d8:	741a      	strb	r2, [r3, #16]
            else
            {
                pDataParams->bPcbBlockNum = 1;
            }

            break;
 80146da:	e05c      	b.n	8014796 <phpalI14443p4_Sw_SetConfig+0x10a>
                pDataParams->bPcbBlockNum = 1;
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	2201      	movs	r2, #1
 80146e0:	741a      	strb	r2, [r3, #16]
            break;
 80146e2:	e058      	b.n	8014796 <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    case PHPAL_I14443P4_CONFIG_CID:
        {
            if (0U != (wValue & 0xFF00U))
 80146e4:	883b      	ldrh	r3, [r7, #0]
 80146e6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d00e      	beq.n	801470c <phpalI14443p4_Sw_SetConfig+0x80>
            {
                if ((wValue & 0x00FFU) > PHPAL_I14443P4_CID_MAX)
 80146ee:	883b      	ldrh	r3, [r7, #0]
 80146f0:	b2db      	uxtb	r3, r3
 80146f2:	2b0e      	cmp	r3, #14
 80146f4:	d902      	bls.n	80146fc <phpalI14443p4_Sw_SetConfig+0x70>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4);
 80146f6:	f240 6321 	movw	r3, #1569	@ 0x621
 80146fa:	e04d      	b.n	8014798 <phpalI14443p4_Sw_SetConfig+0x10c>
                }
                pDataParams->bCidEnabled = 1;
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	2201      	movs	r2, #1
 8014700:	725a      	strb	r2, [r3, #9]
                pDataParams->bCid = (uint8_t)(wValue);
 8014702:	883b      	ldrh	r3, [r7, #0]
 8014704:	b2da      	uxtb	r2, r3
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	729a      	strb	r2, [r3, #10]
            {
                pDataParams->bCidEnabled = 0;
                pDataParams->bCid = 0;
            }

            break;
 801470a:	e044      	b.n	8014796 <phpalI14443p4_Sw_SetConfig+0x10a>
                pDataParams->bCidEnabled = 0;
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	2200      	movs	r2, #0
 8014710:	725a      	strb	r2, [r3, #9]
                pDataParams->bCid = 0;
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	2200      	movs	r2, #0
 8014716:	729a      	strb	r2, [r3, #10]
            break;
 8014718:	e03d      	b.n	8014796 <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    case PHPAL_I14443P4_CONFIG_NAD:
        {
            if (0U != (wValue & 0xFF00U))
 801471a:	883b      	ldrh	r3, [r7, #0]
 801471c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014720:	2b00      	cmp	r3, #0
 8014722:	d007      	beq.n	8014734 <phpalI14443p4_Sw_SetConfig+0xa8>
            {
                pDataParams->bNadEnabled = 1;
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	2201      	movs	r2, #1
 8014728:	72da      	strb	r2, [r3, #11]
                pDataParams->bNad = (uint8_t)(wValue);
 801472a:	883b      	ldrh	r3, [r7, #0]
 801472c:	b2da      	uxtb	r2, r3
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	731a      	strb	r2, [r3, #12]
            {
                pDataParams->bNadEnabled = 0;
                pDataParams->bNad = 0;
            }

            break;
 8014732:	e030      	b.n	8014796 <phpalI14443p4_Sw_SetConfig+0x10a>
                pDataParams->bNadEnabled = 0;
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	2200      	movs	r2, #0
 8014738:	72da      	strb	r2, [r3, #11]
                pDataParams->bNad = 0;
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	2200      	movs	r2, #0
 801473e:	731a      	strb	r2, [r3, #12]
            break;
 8014740:	e029      	b.n	8014796 <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    case PHPAL_I14443P4_CONFIG_FWI:
        {
            if (wValue > PHPAL_I14443P4_FWI_MAX)
 8014742:	883b      	ldrh	r3, [r7, #0]
 8014744:	2b0e      	cmp	r3, #14
 8014746:	d902      	bls.n	801474e <phpalI14443p4_Sw_SetConfig+0xc2>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4);
 8014748:	f240 6321 	movw	r3, #1569	@ 0x621
 801474c:	e024      	b.n	8014798 <phpalI14443p4_Sw_SetConfig+0x10c>
            }
            pDataParams->bFwi = (uint8_t)(wValue);
 801474e:	883b      	ldrh	r3, [r7, #0]
 8014750:	b2da      	uxtb	r2, r3
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	735a      	strb	r2, [r3, #13]
            break;
 8014756:	e01e      	b.n	8014796 <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    case PHPAL_I14443P4_CONFIG_FSI:
        {
            if (((wValue >> 8U) > PHPAL_I14443P4_FRAMESIZE_MAX) ||
 8014758:	883b      	ldrh	r3, [r7, #0]
 801475a:	0a1b      	lsrs	r3, r3, #8
 801475c:	b29b      	uxth	r3, r3
 801475e:	2b0c      	cmp	r3, #12
 8014760:	d803      	bhi.n	801476a <phpalI14443p4_Sw_SetConfig+0xde>
                ((wValue & 0xFFU) > PHPAL_I14443P4_FRAMESIZE_MAX))
 8014762:	883b      	ldrh	r3, [r7, #0]
 8014764:	b2db      	uxtb	r3, r3
            if (((wValue >> 8U) > PHPAL_I14443P4_FRAMESIZE_MAX) ||
 8014766:	2b0c      	cmp	r3, #12
 8014768:	d902      	bls.n	8014770 <phpalI14443p4_Sw_SetConfig+0xe4>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4);
 801476a:	f240 6321 	movw	r3, #1569	@ 0x621
 801476e:	e013      	b.n	8014798 <phpalI14443p4_Sw_SetConfig+0x10c>
            }

            pDataParams->bFsdi = (uint8_t)(wValue >> 8U);
 8014770:	883b      	ldrh	r3, [r7, #0]
 8014772:	0a1b      	lsrs	r3, r3, #8
 8014774:	b29b      	uxth	r3, r3
 8014776:	b2da      	uxtb	r2, r3
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	739a      	strb	r2, [r3, #14]
            pDataParams->bFsci = (uint8_t)(wValue);
 801477c:	883b      	ldrh	r3, [r7, #0]
 801477e:	b2da      	uxtb	r2, r3
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	73da      	strb	r2, [r3, #15]
            break;
 8014784:	e007      	b.n	8014796 <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    case PHPAL_I14443P4_CONFIG_MAXRETRYCOUNT:
        {
            pDataParams->bMaxRetryCount = (uint8_t)(wValue);
 8014786:	883b      	ldrh	r3, [r7, #0]
 8014788:	b2da      	uxtb	r2, r3
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	745a      	strb	r2, [r3, #17]
            break;
 801478e:	e002      	b.n	8014796 <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    default:
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_ISO14443P4);
 8014790:	f240 6323 	movw	r3, #1571	@ 0x623
 8014794:	e000      	b.n	8014798 <phpalI14443p4_Sw_SetConfig+0x10c>
        }
    }

    return PH_ERR_SUCCESS;
 8014796:	2300      	movs	r3, #0
}
 8014798:	4618      	mov	r0, r3
 801479a:	370c      	adds	r7, #12
 801479c:	46bd      	mov	sp, r7
 801479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147a2:	4770      	bx	lr

080147a4 <phpalI14443p4a_Sw_Init>:
phStatus_t phpalI14443p4a_Sw_Init(
                                  phpalI14443p4a_Sw_DataParams_t * pDataParams,
                                  uint16_t wSizeOfDataParams,
                                  void * pHalDataParams
                                  )
{
 80147a4:	b480      	push	{r7}
 80147a6:	b085      	sub	sp, #20
 80147a8:	af00      	add	r7, sp, #0
 80147aa:	60f8      	str	r0, [r7, #12]
 80147ac:	460b      	mov	r3, r1
 80147ae:	607a      	str	r2, [r7, #4]
 80147b0:	817b      	strh	r3, [r7, #10]
    if (sizeof(phpalI14443p4a_Sw_DataParams_t) != wSizeOfDataParams)
 80147b2:	897b      	ldrh	r3, [r7, #10]
 80147b4:	2b14      	cmp	r3, #20
 80147b6:	d002      	beq.n	80147be <phpalI14443p4a_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_ISO14443P4A);
 80147b8:	f44f 63a4 	mov.w	r3, #1312	@ 0x520
 80147bc:	e032      	b.n	8014824 <phpalI14443p4a_Sw_Init+0x80>
    }
    PH_ASSERT_NULL (pDataParams);
 80147be:	68fb      	ldr	r3, [r7, #12]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d101      	bne.n	80147c8 <phpalI14443p4a_Sw_Init+0x24>
 80147c4:	2321      	movs	r3, #33	@ 0x21
 80147c6:	e02d      	b.n	8014824 <phpalI14443p4a_Sw_Init+0x80>
    PH_ASSERT_NULL (pHalDataParams);
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d101      	bne.n	80147d2 <phpalI14443p4a_Sw_Init+0x2e>
 80147ce:	2321      	movs	r3, #33	@ 0x21
 80147d0:	e028      	b.n	8014824 <phpalI14443p4a_Sw_Init+0x80>

    /* init private data */
    pDataParams->wId            = PH_COMP_PAL_ISO14443P4A | PHPAL_I14443P4A_SW_ID;
 80147d2:	68fb      	ldr	r3, [r7, #12]
 80147d4:	f240 5201 	movw	r2, #1281	@ 0x501
 80147d8:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams = pHalDataParams;
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	687a      	ldr	r2, [r7, #4]
 80147de:	605a      	str	r2, [r3, #4]
    pDataParams->bCidSupported  = PH_OFF;
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	2200      	movs	r2, #0
 80147e4:	721a      	strb	r2, [r3, #8]
    pDataParams->bNadSupported  = PH_OFF;
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	2200      	movs	r2, #0
 80147ea:	725a      	strb	r2, [r3, #9]
    pDataParams->bCid           = 0x00;
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	2200      	movs	r2, #0
 80147f0:	729a      	strb	r2, [r3, #10]
    pDataParams->bBitRateCaps   = 0x00;
 80147f2:	68fb      	ldr	r3, [r7, #12]
 80147f4:	2200      	movs	r2, #0
 80147f6:	72da      	strb	r2, [r3, #11]
    pDataParams->bFwi           = PHPAL_I14443P4A_SW_FWI_DEFAULT;
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	2204      	movs	r2, #4
 80147fc:	731a      	strb	r2, [r3, #12]
    pDataParams->bFsci          = PHPAL_I14443P4A_SW_FSCI_DEFAULT;
 80147fe:	68fb      	ldr	r3, [r7, #12]
 8014800:	2202      	movs	r2, #2
 8014802:	735a      	strb	r2, [r3, #13]
    pDataParams->bFsdi          = 0x00;
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	2200      	movs	r2, #0
 8014808:	739a      	strb	r2, [r3, #14]
    pDataParams->bDri           = 0x00;
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	2200      	movs	r2, #0
 801480e:	73da      	strb	r2, [r3, #15]
    pDataParams->bDsi           = 0x00;
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	2200      	movs	r2, #0
 8014814:	741a      	strb	r2, [r3, #16]
    pDataParams->bOpeMode       = RD_LIB_MODE_NFC;
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	2202      	movs	r2, #2
 801481a:	745a      	strb	r2, [r3, #17]
    pDataParams->bRetryCount    = PHPAL_I14443P4A_RATS_RETRY_MAX;
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	2201      	movs	r2, #1
 8014820:	749a      	strb	r2, [r3, #18]

    return PH_ERR_SUCCESS;
 8014822:	2300      	movs	r3, #0
}
 8014824:	4618      	mov	r0, r3
 8014826:	3714      	adds	r7, #20
 8014828:	46bd      	mov	sp, r7
 801482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801482e:	4770      	bx	lr

08014830 <phpalI14443p4a_Sw_SetConfig>:
phStatus_t phpalI14443p4a_Sw_SetConfig(
                                       phpalI14443p4a_Sw_DataParams_t * pDataParams,
                                       uint16_t wConfig,
                                       uint16_t wValue
                                     )
{
 8014830:	b480      	push	{r7}
 8014832:	b083      	sub	sp, #12
 8014834:	af00      	add	r7, sp, #0
 8014836:	6078      	str	r0, [r7, #4]
 8014838:	460b      	mov	r3, r1
 801483a:	807b      	strh	r3, [r7, #2]
 801483c:	4613      	mov	r3, r2
 801483e:	803b      	strh	r3, [r7, #0]
   switch (wConfig)
 8014840:	887b      	ldrh	r3, [r7, #2]
 8014842:	2b01      	cmp	r3, #1
 8014844:	d002      	beq.n	801484c <phpalI14443p4a_Sw_SetConfig+0x1c>
 8014846:	2b02      	cmp	r3, #2
 8014848:	d005      	beq.n	8014856 <phpalI14443p4a_Sw_SetConfig+0x26>
 801484a:	e014      	b.n	8014876 <phpalI14443p4a_Sw_SetConfig+0x46>
   {
   /* Emvco: To Define Running Mode for RdLib: Either NFC, EMVCO or ISO */
   case PHPAL_I14443P4A_CONFIG_OPE_MODE:
   {
      pDataParams->bOpeMode = (uint8_t)wValue;
 801484c:	883b      	ldrh	r3, [r7, #0]
 801484e:	b2da      	uxtb	r2, r3
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	745a      	strb	r2, [r3, #17]
      break;
 8014854:	e012      	b.n	801487c <phpalI14443p4a_Sw_SetConfig+0x4c>
   }

   case PHPAL_I14443P4A_CONFIG_RATS_RETRY_COUNT:
   {
      if(!(((wValue & 0xFFU) == PHPAL_I14443P4A_RATS_RETRY_MIN) ||
 8014856:	883b      	ldrh	r3, [r7, #0]
 8014858:	b2db      	uxtb	r3, r3
 801485a:	2b00      	cmp	r3, #0
 801485c:	d006      	beq.n	801486c <phpalI14443p4a_Sw_SetConfig+0x3c>
                  ((wValue & 0xFFU) == PHPAL_I14443P4A_RATS_RETRY_MAX)))
 801485e:	883b      	ldrh	r3, [r7, #0]
 8014860:	b2db      	uxtb	r3, r3
      if(!(((wValue & 0xFFU) == PHPAL_I14443P4A_RATS_RETRY_MIN) ||
 8014862:	2b01      	cmp	r3, #1
 8014864:	d002      	beq.n	801486c <phpalI14443p4a_Sw_SetConfig+0x3c>
      {
         return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8014866:	f240 5321 	movw	r3, #1313	@ 0x521
 801486a:	e008      	b.n	801487e <phpalI14443p4a_Sw_SetConfig+0x4e>
      }

      pDataParams->bRetryCount = (uint8_t)wValue;
 801486c:	883b      	ldrh	r3, [r7, #0]
 801486e:	b2da      	uxtb	r2, r3
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	749a      	strb	r2, [r3, #18]
      break;
 8014874:	e002      	b.n	801487c <phpalI14443p4a_Sw_SetConfig+0x4c>
   }

   default:
      return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8014876:	f240 5323 	movw	r3, #1315	@ 0x523
 801487a:	e000      	b.n	801487e <phpalI14443p4a_Sw_SetConfig+0x4e>
   }

   return PH_ERR_SUCCESS;
 801487c:	2300      	movs	r3, #0
}
 801487e:	4618      	mov	r0, r3
 8014880:	370c      	adds	r7, #12
 8014882:	46bd      	mov	sp, r7
 8014884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014888:	4770      	bx	lr
	...

0801488c <phpalI14443p4a_Sw_GetConfig>:
phStatus_t phpalI14443p4a_Sw_GetConfig(
                                       phpalI14443p4a_Sw_DataParams_t * pDataParams,
                                       uint16_t wConfig,
                                       uint16_t *pValue
                                     )
{
 801488c:	b480      	push	{r7}
 801488e:	b085      	sub	sp, #20
 8014890:	af00      	add	r7, sp, #0
 8014892:	60f8      	str	r0, [r7, #12]
 8014894:	460b      	mov	r3, r1
 8014896:	607a      	str	r2, [r7, #4]
 8014898:	817b      	strh	r3, [r7, #10]
    switch (wConfig)
 801489a:	897b      	ldrh	r3, [r7, #10]
 801489c:	3b01      	subs	r3, #1
 801489e:	2b03      	cmp	r3, #3
 80148a0:	d822      	bhi.n	80148e8 <phpalI14443p4a_Sw_GetConfig+0x5c>
 80148a2:	a201      	add	r2, pc, #4	@ (adr r2, 80148a8 <phpalI14443p4a_Sw_GetConfig+0x1c>)
 80148a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80148a8:	080148b9 	.word	0x080148b9
 80148ac:	080148c5 	.word	0x080148c5
 80148b0:	080148d1 	.word	0x080148d1
 80148b4:	080148dd 	.word	0x080148dd
    {
    case PHPAL_I14443P4A_CONFIG_OPE_MODE:
        *pValue = (uint16_t)pDataParams->bOpeMode;
 80148b8:	68fb      	ldr	r3, [r7, #12]
 80148ba:	7c5b      	ldrb	r3, [r3, #17]
 80148bc:	461a      	mov	r2, r3
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	801a      	strh	r2, [r3, #0]
        break;
 80148c2:	e014      	b.n	80148ee <phpalI14443p4a_Sw_GetConfig+0x62>

    case PHPAL_I14443P4A_CONFIG_RATS_RETRY_COUNT:
        *pValue = (uint16_t)pDataParams->bRetryCount;
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	7c9b      	ldrb	r3, [r3, #18]
 80148c8:	461a      	mov	r2, r3
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	801a      	strh	r2, [r3, #0]
        break;
 80148ce:	e00e      	b.n	80148ee <phpalI14443p4a_Sw_GetConfig+0x62>

    case PHPAL_I14443P4A_CONFIG_DRI:
        *pValue = (uint16_t)pDataParams->bDri;
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	7bdb      	ldrb	r3, [r3, #15]
 80148d4:	461a      	mov	r2, r3
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	801a      	strh	r2, [r3, #0]
        break;
 80148da:	e008      	b.n	80148ee <phpalI14443p4a_Sw_GetConfig+0x62>

    case PHPAL_I14443P4A_CONFIG_DSI:
        *pValue = (uint16_t)pDataParams->bDsi;
 80148dc:	68fb      	ldr	r3, [r7, #12]
 80148de:	7c1b      	ldrb	r3, [r3, #16]
 80148e0:	461a      	mov	r2, r3
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	801a      	strh	r2, [r3, #0]
        break;
 80148e6:	e002      	b.n	80148ee <phpalI14443p4a_Sw_GetConfig+0x62>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 80148e8:	f240 5323 	movw	r3, #1315	@ 0x523
 80148ec:	e000      	b.n	80148f0 <phpalI14443p4a_Sw_GetConfig+0x64>
    }

    return PH_ERR_SUCCESS;
 80148ee:	2300      	movs	r3, #0
}
 80148f0:	4618      	mov	r0, r3
 80148f2:	3714      	adds	r7, #20
 80148f4:	46bd      	mov	sp, r7
 80148f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148fa:	4770      	bx	lr
 80148fc:	0000      	movs	r0, r0
	...

08014900 <phpalI14443p4a_Sw_Rats>:
                                  phpalI14443p4a_Sw_DataParams_t * pDataParams,
                                  uint8_t bFsdi,
                                  uint8_t bCid,
                                  uint8_t * pAts
                                  )
{
 8014900:	b5b0      	push	{r4, r5, r7, lr}
 8014902:	b08e      	sub	sp, #56	@ 0x38
 8014904:	af02      	add	r7, sp, #8
 8014906:	60f8      	str	r0, [r7, #12]
 8014908:	607b      	str	r3, [r7, #4]
 801490a:	460b      	mov	r3, r1
 801490c:	72fb      	strb	r3, [r7, #11]
 801490e:	4613      	mov	r3, r2
 8014910:	72bb      	strb	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM cmd[2];
    uint16_t    PH_MEMLOC_REM wCmdLength = 0;
 8014912:	2300      	movs	r3, #0
 8014914:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint8_t     PH_MEMLOC_REM bAtsIndex;
    uint8_t     PH_MEMLOC_REM bSfgi;
    uint32_t    PH_MEMLOC_REM dwSfgt;
    uint32_t    PH_MEMLOC_REM dwFwt;
    float32_t   PH_MEMLOC_REM fDelay;
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8014916:	2300      	movs	r3, #0
 8014918:	617b      	str	r3, [r7, #20]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 801491a:	2300      	movs	r3, #0
 801491c:	827b      	strh	r3, [r7, #18]

    /* Parameter check */
    if(pDataParams->bOpeMode != RD_LIB_MODE_NFC)
 801491e:	68fb      	ldr	r3, [r7, #12]
 8014920:	7c5b      	ldrb	r3, [r3, #17]
 8014922:	2b02      	cmp	r3, #2
 8014924:	d012      	beq.n	801494c <phpalI14443p4a_Sw_Rats+0x4c>
    {
        if ((bFsdi > PHPAL_I14443P4A_FRAMESIZE_MAX) || (bCid > 14U))
 8014926:	7afb      	ldrb	r3, [r7, #11]
 8014928:	2b0c      	cmp	r3, #12
 801492a:	d802      	bhi.n	8014932 <phpalI14443p4a_Sw_Rats+0x32>
 801492c:	7abb      	ldrb	r3, [r7, #10]
 801492e:	2b0e      	cmp	r3, #14
 8014930:	d902      	bls.n	8014938 <phpalI14443p4a_Sw_Rats+0x38>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8014932:	f240 5321 	movw	r3, #1313	@ 0x521
 8014936:	e2c5      	b.n	8014ec4 <phpalI14443p4a_Sw_Rats+0x5c4>
        }
        if ((bFsdi < PHPAL_I14443P4A_EMVCO_FRAMESIZE_MIN) && (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO))
 8014938:	7afb      	ldrb	r3, [r7, #11]
 801493a:	2b07      	cmp	r3, #7
 801493c:	d80f      	bhi.n	801495e <phpalI14443p4a_Sw_Rats+0x5e>
 801493e:	68fb      	ldr	r3, [r7, #12]
 8014940:	7c5b      	ldrb	r3, [r3, #17]
 8014942:	2b01      	cmp	r3, #1
 8014944:	d10b      	bne.n	801495e <phpalI14443p4a_Sw_Rats+0x5e>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8014946:	f240 5321 	movw	r3, #1313	@ 0x521
 801494a:	e2bb      	b.n	8014ec4 <phpalI14443p4a_Sw_Rats+0x5c4>
        }
    }
    else
    {
        if ((bFsdi > PHPAL_I14443P4A_NFC_FRAMESIZE_MAX) || (bCid > 14U))
 801494c:	7afb      	ldrb	r3, [r7, #11]
 801494e:	2b08      	cmp	r3, #8
 8014950:	d802      	bhi.n	8014958 <phpalI14443p4a_Sw_Rats+0x58>
 8014952:	7abb      	ldrb	r3, [r7, #10]
 8014954:	2b0e      	cmp	r3, #14
 8014956:	d902      	bls.n	801495e <phpalI14443p4a_Sw_Rats+0x5e>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8014958:	f240 5321 	movw	r3, #1313	@ 0x521
 801495c:	e2b2      	b.n	8014ec4 <phpalI14443p4a_Sw_Rats+0x5c4>
        }
    }

    /* Set Activation timeout */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	685b      	ldr	r3, [r3, #4]
 8014962:	f241 42e2 	movw	r2, #5346	@ 0x14e2
 8014966:	210d      	movs	r1, #13
 8014968:	4618      	mov	r0, r3
 801496a:	f7f8 fcd1 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 801496e:	4603      	mov	r3, r0
 8014970:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8014972:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014974:	2b00      	cmp	r3, #0
 8014976:	d001      	beq.n	801497c <phpalI14443p4a_Sw_Rats+0x7c>
 8014978:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801497a:	e2a3      	b.n	8014ec4 <phpalI14443p4a_Sw_Rats+0x5c4>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
        PHPAL_I14443P4A_SW_FWT_ACTIVATION_US + PHPAL_I14443P4A_SW_EXT_TIME_US));

    /* Send Rats command */
    cmd[0] = PHPAL_I14443P4A_SW_RATS;
 801497c:	23e0      	movs	r3, #224	@ 0xe0
 801497e:	763b      	strb	r3, [r7, #24]
    cmd[1] = (uint8_t)(((bFsdi << 4U) & 0xF0U) | (bCid & 0x0FU));
 8014980:	7afb      	ldrb	r3, [r7, #11]
 8014982:	011b      	lsls	r3, r3, #4
 8014984:	b2da      	uxtb	r2, r3
 8014986:	7abb      	ldrb	r3, [r7, #10]
 8014988:	f003 030f 	and.w	r3, r3, #15
 801498c:	b2db      	uxtb	r3, r3
 801498e:	4313      	orrs	r3, r2
 8014990:	b2db      	uxtb	r3, r3
 8014992:	767b      	strb	r3, [r7, #25]

    status = phhalHw_Exchange(
 8014994:	68fb      	ldr	r3, [r7, #12]
 8014996:	6858      	ldr	r0, [r3, #4]
 8014998:	f107 0218 	add.w	r2, r7, #24
 801499c:	f107 0312 	add.w	r3, r7, #18
 80149a0:	9301      	str	r3, [sp, #4]
 80149a2:	f107 0314 	add.w	r3, r7, #20
 80149a6:	9300      	str	r3, [sp, #0]
 80149a8:	2302      	movs	r3, #2
 80149aa:	2100      	movs	r1, #0
 80149ac:	f7f8 f930 	bl	800cc10 <phhalHw_Pn5180_Exchange>
 80149b0:	4603      	mov	r3, r0
 80149b2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        &wRespLength);

    /* check and perform re-transmission of RATS in case of Transmission or Timeout error
     * Nfc Digital Specification ver 1.1, Req 13.7.1.1
     */
    bAtsIndex = pDataParams->bRetryCount;
 80149b4:	68fb      	ldr	r3, [r7, #12]
 80149b6:	7c9b      	ldrb	r3, [r3, #18]
 80149b8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    while((bAtsIndex > 0U) && (PH_ERR_SUCCESS != (status & PH_ERR_MASK)))
 80149bc:	e031      	b.n	8014a22 <phpalI14443p4a_Sw_Rats+0x122>
    {
        /* Return error other than Timeout or Noise Error */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	7c5b      	ldrb	r3, [r3, #17]
 80149c2:	2b01      	cmp	r3, #1
 80149c4:	d118      	bne.n	80149f8 <phpalI14443p4a_Sw_Rats+0xf8>
        {
            if((((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) || ((status & PH_ERR_MASK) == PH_ERR_NOISE_ERROR)))
 80149c6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80149c8:	b2db      	uxtb	r3, r3
 80149ca:	2b01      	cmp	r3, #1
 80149cc:	d003      	beq.n	80149d6 <phpalI14443p4a_Sw_Rats+0xd6>
 80149ce:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80149d0:	b2db      	uxtb	r3, r3
 80149d2:	2b11      	cmp	r3, #17
 80149d4:	d10e      	bne.n	80149f4 <phpalI14443p4a_Sw_Rats+0xf4>
            {
                /* Wait for at least Tmin retransmission delay. */
                PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	685b      	ldr	r3, [r3, #4]
 80149da:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80149de:	2100      	movs	r1, #0
 80149e0:	4618      	mov	r0, r3
 80149e2:	f7f8 fc11 	bl	800d208 <phhalHw_Pn5180_Wait>
 80149e6:	4603      	mov	r3, r0
 80149e8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80149ea:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d003      	beq.n	80149f8 <phpalI14443p4a_Sw_Rats+0xf8>
 80149f0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80149f2:	e267      	b.n	8014ec4 <phpalI14443p4a_Sw_Rats+0x5c4>
                    PHHAL_HW_TIME_MICROSECONDS,
                    PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));
            }
            else
            {
                return status;
 80149f4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80149f6:	e265      	b.n	8014ec4 <phpalI14443p4a_Sw_Rats+0x5c4>
            }
        }

        /* Emvco: case_id TA313, TA307_X, TA306_10-15, TA340_1 */
        status = phhalHw_Exchange(
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	6858      	ldr	r0, [r3, #4]
 80149fc:	f107 0218 	add.w	r2, r7, #24
 8014a00:	f107 0312 	add.w	r3, r7, #18
 8014a04:	9301      	str	r3, [sp, #4]
 8014a06:	f107 0314 	add.w	r3, r7, #20
 8014a0a:	9300      	str	r3, [sp, #0]
 8014a0c:	2302      	movs	r3, #2
 8014a0e:	2100      	movs	r1, #0
 8014a10:	f7f8 f8fe 	bl	800cc10 <phhalHw_Pn5180_Exchange>
 8014a14:	4603      	mov	r3, r0
 8014a16:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            cmd,
            2,
            &pResp,
            &wRespLength);

        bAtsIndex--;
 8014a18:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014a1c:	3b01      	subs	r3, #1
 8014a1e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    while((bAtsIndex > 0U) && (PH_ERR_SUCCESS != (status & PH_ERR_MASK)))
 8014a22:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d003      	beq.n	8014a32 <phpalI14443p4a_Sw_Rats+0x132>
 8014a2a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014a2c:	b2db      	uxtb	r3, r3
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d1c5      	bne.n	80149be <phpalI14443p4a_Sw_Rats+0xbe>
    }

    if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 8014a32:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014a34:	b2db      	uxtb	r3, r3
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	f040 81c5 	bne.w	8014dc6 <phpalI14443p4a_Sw_Rats+0x4c6>
    {
        /* Check for protocol error */
        if (((uint8_t)wRespLength != pResp[0]) || (wRespLength < 1U))
 8014a3c:	8a7b      	ldrh	r3, [r7, #18]
 8014a3e:	b2da      	uxtb	r2, r3
 8014a40:	697b      	ldr	r3, [r7, #20]
 8014a42:	781b      	ldrb	r3, [r3, #0]
 8014a44:	429a      	cmp	r2, r3
 8014a46:	d102      	bne.n	8014a4e <phpalI14443p4a_Sw_Rats+0x14e>
 8014a48:	8a7b      	ldrh	r3, [r7, #18]
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d102      	bne.n	8014a54 <phpalI14443p4a_Sw_Rats+0x154>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4A);
 8014a4e:	f240 5306 	movw	r3, #1286	@ 0x506
 8014a52:	e237      	b.n	8014ec4 <phpalI14443p4a_Sw_Rats+0x5c4>
        }

        /* Copy ATS buffer */
        (void)memcpy(pAts, pResp, wRespLength);
 8014a54:	697b      	ldr	r3, [r7, #20]
 8014a56:	8a7a      	ldrh	r2, [r7, #18]
 8014a58:	4619      	mov	r1, r3
 8014a5a:	6878      	ldr	r0, [r7, #4]
 8014a5c:	f008 fbcf 	bl	801d1fe <memcpy>

        /* Set default values */
        if (pDataParams->bOpeMode != RD_LIB_MODE_ISO)
 8014a60:	68fb      	ldr	r3, [r7, #12]
 8014a62:	7c5b      	ldrb	r3, [r3, #17]
 8014a64:	2b03      	cmp	r3, #3
 8014a66:	d006      	beq.n	8014a76 <phpalI14443p4a_Sw_Rats+0x176>
        {
            pDataParams->bCidSupported = PH_OFF;
 8014a68:	68fb      	ldr	r3, [r7, #12]
 8014a6a:	2200      	movs	r2, #0
 8014a6c:	721a      	strb	r2, [r3, #8]
            pDataParams->bCid          = 0x00;
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	2200      	movs	r2, #0
 8014a72:	729a      	strb	r2, [r3, #10]
 8014a74:	e005      	b.n	8014a82 <phpalI14443p4a_Sw_Rats+0x182>
        }
        else
        {
            pDataParams->bCidSupported  = PH_ON;
 8014a76:	68fb      	ldr	r3, [r7, #12]
 8014a78:	2201      	movs	r2, #1
 8014a7a:	721a      	strb	r2, [r3, #8]
            pDataParams->bCid           = bCid;
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	7aba      	ldrb	r2, [r7, #10]
 8014a80:	729a      	strb	r2, [r3, #10]
        }
        pDataParams->bNadSupported  = PH_OFF;
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	2200      	movs	r2, #0
 8014a86:	725a      	strb	r2, [r3, #9]
        pDataParams->bBitRateCaps   = 0x00;
 8014a88:	68fb      	ldr	r3, [r7, #12]
 8014a8a:	2200      	movs	r2, #0
 8014a8c:	72da      	strb	r2, [r3, #11]
        pDataParams->bFwi           = PHPAL_I14443P4A_SW_FWI_DEFAULT;
 8014a8e:	68fb      	ldr	r3, [r7, #12]
 8014a90:	2204      	movs	r2, #4
 8014a92:	731a      	strb	r2, [r3, #12]
        pDataParams->bFsdi          = bFsdi;
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	7afa      	ldrb	r2, [r7, #11]
 8014a98:	739a      	strb	r2, [r3, #14]
        pDataParams->bFsci          = PHPAL_I14443P4A_SW_FSCI_DEFAULT;
 8014a9a:	68fb      	ldr	r3, [r7, #12]
 8014a9c:	2202      	movs	r2, #2
 8014a9e:	735a      	strb	r2, [r3, #13]
        pDataParams->bDri           = 0x00;
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	2200      	movs	r2, #0
 8014aa4:	73da      	strb	r2, [r3, #15]
        pDataParams->bDsi           = 0x00;
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	2200      	movs	r2, #0
 8014aaa:	741a      	strb	r2, [r3, #16]
        bSfgi                       = PHPAL_I14443P4A_SW_SFGI_DEFAULT;
 8014aac:	2300      	movs	r3, #0
 8014aae:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

        /* Retrieve ATS information */
        /* Start parsing with T0 byte */
        bAtsIndex = PHPAL_I14443P4A_SW_ATS_T0;
 8014ab2:	2301      	movs	r3, #1
 8014ab4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

        /* Parse T0/TA/TB/TC */
        if (wRespLength > 1U)
 8014ab8:	8a7b      	ldrh	r3, [r7, #18]
 8014aba:	2b01      	cmp	r3, #1
 8014abc:	f240 80ba 	bls.w	8014c34 <phpalI14443p4a_Sw_Rats+0x334>
        {
            /* Parse T0 */
            pDataParams->bFsci = pAts[bAtsIndex] & 0x0FU;
 8014ac0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014ac4:	687a      	ldr	r2, [r7, #4]
 8014ac6:	4413      	add	r3, r2
 8014ac8:	781b      	ldrb	r3, [r3, #0]
 8014aca:	f003 030f 	and.w	r3, r3, #15
 8014ace:	b2da      	uxtb	r2, r3
 8014ad0:	68fb      	ldr	r3, [r7, #12]
 8014ad2:	735a      	strb	r2, [r3, #13]
            if(pDataParams->bOpeMode != RD_LIB_MODE_NFC)
 8014ad4:	68fb      	ldr	r3, [r7, #12]
 8014ad6:	7c5b      	ldrb	r3, [r3, #17]
 8014ad8:	2b02      	cmp	r3, #2
 8014ada:	d007      	beq.n	8014aec <phpalI14443p4a_Sw_Rats+0x1ec>
            {
                if (pDataParams->bFsci > PHPAL_I14443P4A_FRAMESIZE_MAX)
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	7b5b      	ldrb	r3, [r3, #13]
 8014ae0:	2b0c      	cmp	r3, #12
 8014ae2:	d90a      	bls.n	8014afa <phpalI14443p4a_Sw_Rats+0x1fa>
                {
                    pDataParams->bFsci = PHPAL_I14443P4A_FRAMESIZE_MAX;
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	220c      	movs	r2, #12
 8014ae8:	735a      	strb	r2, [r3, #13]
 8014aea:	e006      	b.n	8014afa <phpalI14443p4a_Sw_Rats+0x1fa>
                }
            }
            else
            {   /* Nfc: Digital Specification Ver 1.1 Table 59 */
                if (pDataParams->bFsci > PHPAL_I14443P4A_NFC_FRAMESIZE_MAX)
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	7b5b      	ldrb	r3, [r3, #13]
 8014af0:	2b08      	cmp	r3, #8
 8014af2:	d902      	bls.n	8014afa <phpalI14443p4a_Sw_Rats+0x1fa>
                {
                    pDataParams->bFsci = PHPAL_I14443P4A_NFC_FRAMESIZE_MAX;
 8014af4:	68fb      	ldr	r3, [r7, #12]
 8014af6:	2208      	movs	r2, #8
 8014af8:	735a      	strb	r2, [r3, #13]
                }
            }

            bAtsIndex++;
 8014afa:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014afe:	3301      	adds	r3, #1
 8014b00:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

            /* Parse TA(1) */
            if (0U != (pAts[PHPAL_I14443P4A_SW_ATS_T0] & PHPAL_I14443P4A_SW_ATS_TA1_PRESENT))
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	3301      	adds	r3, #1
 8014b08:	781b      	ldrb	r3, [r3, #0]
 8014b0a:	f003 0310 	and.w	r3, r3, #16
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d021      	beq.n	8014b56 <phpalI14443p4a_Sw_Rats+0x256>
            {
                /* Check for protocol error */
                if (wRespLength <= bAtsIndex)
 8014b12:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014b16:	b29a      	uxth	r2, r3
 8014b18:	8a7b      	ldrh	r3, [r7, #18]
 8014b1a:	429a      	cmp	r2, r3
 8014b1c:	d302      	bcc.n	8014b24 <phpalI14443p4a_Sw_Rats+0x224>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4A);
 8014b1e:	f240 5306 	movw	r3, #1286	@ 0x506
 8014b22:	e1cf      	b.n	8014ec4 <phpalI14443p4a_Sw_Rats+0x5c4>
                }

                /* Check for RFU bit b4 (b4 shall be 0; 1 is RFU) */
                if(0U != (pAts[bAtsIndex] & 0x08U))
 8014b24:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014b28:	687a      	ldr	r2, [r7, #4]
 8014b2a:	4413      	add	r3, r2
 8014b2c:	781b      	ldrb	r3, [r3, #0]
 8014b2e:	f003 0308 	and.w	r3, r3, #8
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d003      	beq.n	8014b3e <phpalI14443p4a_Sw_Rats+0x23e>
                {
                    /* Only 106 kbps in both direction */
                    pDataParams->bBitRateCaps = 0x00;
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	2200      	movs	r2, #0
 8014b3a:	72da      	strb	r2, [r3, #11]
 8014b3c:	e006      	b.n	8014b4c <phpalI14443p4a_Sw_Rats+0x24c>
                }
                else
                {
                    /* Store Bit rate capabilities */
                    pDataParams->bBitRateCaps = pAts[bAtsIndex];
 8014b3e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014b42:	687a      	ldr	r2, [r7, #4]
 8014b44:	4413      	add	r3, r2
 8014b46:	781a      	ldrb	r2, [r3, #0]
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	72da      	strb	r2, [r3, #11]
                }

                bAtsIndex++;
 8014b4c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014b50:	3301      	adds	r3, #1
 8014b52:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            }

            /* Parse TB(1) */
            if (0U != (pAts[PHPAL_I14443P4A_SW_ATS_T0] & PHPAL_I14443P4A_SW_ATS_TB1_PRESENT))
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	3301      	adds	r3, #1
 8014b5a:	781b      	ldrb	r3, [r3, #0]
 8014b5c:	f003 0320 	and.w	r3, r3, #32
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d02d      	beq.n	8014bc0 <phpalI14443p4a_Sw_Rats+0x2c0>
            {
                /* Check for protocol error */
                if (wRespLength <= bAtsIndex)
 8014b64:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014b68:	b29a      	uxth	r2, r3
 8014b6a:	8a7b      	ldrh	r3, [r7, #18]
 8014b6c:	429a      	cmp	r2, r3
 8014b6e:	d302      	bcc.n	8014b76 <phpalI14443p4a_Sw_Rats+0x276>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4A);
 8014b70:	f240 5306 	movw	r3, #1286	@ 0x506
 8014b74:	e1a6      	b.n	8014ec4 <phpalI14443p4a_Sw_Rats+0x5c4>
                }
                else
                {
                    /* Store Sfgi */
                    bSfgi = pAts[bAtsIndex] & 0x0FU;
 8014b76:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014b7a:	687a      	ldr	r2, [r7, #4]
 8014b7c:	4413      	add	r3, r2
 8014b7e:	781b      	ldrb	r3, [r3, #0]
 8014b80:	f003 030f 	and.w	r3, r3, #15
 8014b84:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    if (bSfgi == 0x0FU)
 8014b88:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8014b8c:	2b0f      	cmp	r3, #15
 8014b8e:	d102      	bne.n	8014b96 <phpalI14443p4a_Sw_Rats+0x296>
                    {
                        bSfgi = PHPAL_I14443P4A_SW_SFGI_DEFAULT;
 8014b90:	2300      	movs	r3, #0
 8014b92:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    }

                    /* Store Fwi */
                    pDataParams->bFwi = (pAts[bAtsIndex] >> 4U) & 0x0FU;
 8014b96:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014b9a:	687a      	ldr	r2, [r7, #4]
 8014b9c:	4413      	add	r3, r2
 8014b9e:	781b      	ldrb	r3, [r3, #0]
 8014ba0:	091b      	lsrs	r3, r3, #4
 8014ba2:	b2da      	uxtb	r2, r3
 8014ba4:	68fb      	ldr	r3, [r7, #12]
 8014ba6:	731a      	strb	r2, [r3, #12]
                    if (pDataParams->bFwi == 0x0FU)
 8014ba8:	68fb      	ldr	r3, [r7, #12]
 8014baa:	7b1b      	ldrb	r3, [r3, #12]
 8014bac:	2b0f      	cmp	r3, #15
 8014bae:	d102      	bne.n	8014bb6 <phpalI14443p4a_Sw_Rats+0x2b6>
                    {
                        pDataParams->bFwi = PHPAL_I14443P4A_SW_FWI_DEFAULT;
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	2204      	movs	r2, #4
 8014bb4:	731a      	strb	r2, [r3, #12]
                    }

                    bAtsIndex++;
 8014bb6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014bba:	3301      	adds	r3, #1
 8014bbc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
                }
            }

            /* Parse TC(1) */
            if (0U != (pAts[PHPAL_I14443P4A_SW_ATS_T0] & PHPAL_I14443P4A_SW_ATS_TC1_PRESENT))
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	3301      	adds	r3, #1
 8014bc4:	781b      	ldrb	r3, [r3, #0]
 8014bc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d032      	beq.n	8014c34 <phpalI14443p4a_Sw_Rats+0x334>
            {
                /* Check for protocol error */
                if (wRespLength <= bAtsIndex)
 8014bce:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014bd2:	b29a      	uxth	r2, r3
 8014bd4:	8a7b      	ldrh	r3, [r7, #18]
 8014bd6:	429a      	cmp	r2, r3
 8014bd8:	d302      	bcc.n	8014be0 <phpalI14443p4a_Sw_Rats+0x2e0>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4A);
 8014bda:	f240 5306 	movw	r3, #1286	@ 0x506
 8014bde:	e171      	b.n	8014ec4 <phpalI14443p4a_Sw_Rats+0x5c4>
                }
                else
                {
                    /* CID/NAD is not supported by EMVCo 2.5v specification. */
                    if (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO)
 8014be0:	68fb      	ldr	r3, [r7, #12]
 8014be2:	7c5b      	ldrb	r3, [r3, #17]
 8014be4:	2b01      	cmp	r3, #1
 8014be6:	d025      	beq.n	8014c34 <phpalI14443p4a_Sw_Rats+0x334>
                    {
                        /* NAD is supported only in ISO/IEC 14443-4 specification. */
                        if (pDataParams->bOpeMode == RD_LIB_MODE_ISO)
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	7c5b      	ldrb	r3, [r3, #17]
 8014bec:	2b03      	cmp	r3, #3
 8014bee:	d10b      	bne.n	8014c08 <phpalI14443p4a_Sw_Rats+0x308>
                        {
                            /* Check NAD Support */
                            if (0U != (pAts[bAtsIndex] & PHPAL_I14443P4A_SW_ATS_TC1_NAD_SUPPORT))
 8014bf0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014bf4:	687a      	ldr	r2, [r7, #4]
 8014bf6:	4413      	add	r3, r2
 8014bf8:	781b      	ldrb	r3, [r3, #0]
 8014bfa:	f003 0301 	and.w	r3, r3, #1
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d002      	beq.n	8014c08 <phpalI14443p4a_Sw_Rats+0x308>
                            {
                                pDataParams->bNadSupported = PH_ON;
 8014c02:	68fb      	ldr	r3, [r7, #12]
 8014c04:	2201      	movs	r2, #1
 8014c06:	725a      	strb	r2, [r3, #9]
                            }
                        }

                        /* Check CID Support */
                        if ((pAts[bAtsIndex] & PHPAL_I14443P4A_SW_ATS_TC1_CID_SUPPORT) == 0U)
 8014c08:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014c0c:	687a      	ldr	r2, [r7, #4]
 8014c0e:	4413      	add	r3, r2
 8014c10:	781b      	ldrb	r3, [r3, #0]
 8014c12:	f003 0302 	and.w	r3, r3, #2
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d106      	bne.n	8014c28 <phpalI14443p4a_Sw_Rats+0x328>
                        {
                            pDataParams->bCidSupported = PH_OFF;
 8014c1a:	68fb      	ldr	r3, [r7, #12]
 8014c1c:	2200      	movs	r2, #0
 8014c1e:	721a      	strb	r2, [r3, #8]
                            pDataParams->bCid = 0x00;
 8014c20:	68fb      	ldr	r3, [r7, #12]
 8014c22:	2200      	movs	r2, #0
 8014c24:	729a      	strb	r2, [r3, #10]
 8014c26:	e005      	b.n	8014c34 <phpalI14443p4a_Sw_Rats+0x334>
                        }
                        else
                        {
                            pDataParams->bCidSupported = PH_ON;
 8014c28:	68fb      	ldr	r3, [r7, #12]
 8014c2a:	2201      	movs	r2, #1
 8014c2c:	721a      	strb	r2, [r3, #8]
                            pDataParams->bCid          = bCid;
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	7aba      	ldrb	r2, [r7, #10]
 8014c32:	729a      	strb	r2, [r3, #10]
                }
            }
        }

        /* Calculate SFGT in Microseconds */
        fDelay = PHPAL_I14443P4A_SW_FWT_MIN_US * ((uint32_t)1U << bSfgi);
 8014c34:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8014c38:	2201      	movs	r2, #1
 8014c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8014c3e:	4618      	mov	r0, r3
 8014c40:	f7eb fc60 	bl	8000504 <__aeabi_ui2d>
 8014c44:	a3a7      	add	r3, pc, #668	@ (adr r3, 8014ee4 <phpalI14443p4a_Sw_Rats+0x5e4>)
 8014c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c4a:	f7eb fcd5 	bl	80005f8 <__aeabi_dmul>
 8014c4e:	4602      	mov	r2, r0
 8014c50:	460b      	mov	r3, r1
 8014c52:	4610      	mov	r0, r2
 8014c54:	4619      	mov	r1, r3
 8014c56:	f7eb ffa7 	bl	8000ba8 <__aeabi_d2f>
 8014c5a:	4603      	mov	r3, r0
 8014c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
        if(pDataParams->bOpeMode != RD_LIB_MODE_ISO)
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	7c5b      	ldrb	r3, [r3, #17]
 8014c62:	2b03      	cmp	r3, #3
 8014c64:	d01f      	beq.n	8014ca6 <phpalI14443p4a_Sw_Rats+0x3a6>
        {
            fDelay += (PHPAL_I14443P4A_DELTA_SFGT_US) * ((uint32_t)1U << bSfgi);
 8014c66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014c68:	f7eb fc6e 	bl	8000548 <__aeabi_f2d>
 8014c6c:	4604      	mov	r4, r0
 8014c6e:	460d      	mov	r5, r1
 8014c70:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8014c74:	2201      	movs	r2, #1
 8014c76:	fa02 f303 	lsl.w	r3, r2, r3
 8014c7a:	4618      	mov	r0, r3
 8014c7c:	f7eb fc42 	bl	8000504 <__aeabi_ui2d>
 8014c80:	a39a      	add	r3, pc, #616	@ (adr r3, 8014eec <phpalI14443p4a_Sw_Rats+0x5ec>)
 8014c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c86:	f7eb fcb7 	bl	80005f8 <__aeabi_dmul>
 8014c8a:	4602      	mov	r2, r0
 8014c8c:	460b      	mov	r3, r1
 8014c8e:	4620      	mov	r0, r4
 8014c90:	4629      	mov	r1, r5
 8014c92:	f7eb fafb 	bl	800028c <__adddf3>
 8014c96:	4602      	mov	r2, r0
 8014c98:	460b      	mov	r3, r1
 8014c9a:	4610      	mov	r0, r2
 8014c9c:	4619      	mov	r1, r3
 8014c9e:	f7eb ff83 	bl	8000ba8 <__aeabi_d2f>
 8014ca2:	4603      	mov	r3, r0
 8014ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
        dwSfgt = (uint32_t)fDelay;
 8014ca6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8014caa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014cae:	ee17 3a90 	vmov	r3, s15
 8014cb2:	623b      	str	r3, [r7, #32]
        /* Perform SFGT Wait */
        if (dwSfgt > 0xFFFFU)
 8014cb4:	6a3b      	ldr	r3, [r7, #32]
 8014cb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014cba:	d314      	bcc.n	8014ce6 <phpalI14443p4a_Sw_Rats+0x3e6>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 8014cbc:	68fb      	ldr	r3, [r7, #12]
 8014cbe:	6858      	ldr	r0, [r3, #4]
 8014cc0:	6a3b      	ldr	r3, [r7, #32]
 8014cc2:	4a83      	ldr	r2, [pc, #524]	@ (8014ed0 <phpalI14443p4a_Sw_Rats+0x5d0>)
 8014cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8014cc8:	099b      	lsrs	r3, r3, #6
 8014cca:	b29b      	uxth	r3, r3
 8014ccc:	3301      	adds	r3, #1
 8014cce:	b29b      	uxth	r3, r3
 8014cd0:	461a      	mov	r2, r3
 8014cd2:	2101      	movs	r1, #1
 8014cd4:	f7f8 fa98 	bl	800d208 <phhalHw_Pn5180_Wait>
 8014cd8:	4603      	mov	r3, r0
 8014cda:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8014cdc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d010      	beq.n	8014d04 <phpalI14443p4a_Sw_Rats+0x404>
 8014ce2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014ce4:	e0ee      	b.n	8014ec4 <phpalI14443p4a_Sw_Rats+0x5c4>
                PHHAL_HW_TIME_MILLISECONDS,
                (uint16_t)((dwSfgt / 1000U) + 1U)));
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	685b      	ldr	r3, [r3, #4]
 8014cea:	6a3a      	ldr	r2, [r7, #32]
 8014cec:	b292      	uxth	r2, r2
 8014cee:	2100      	movs	r1, #0
 8014cf0:	4618      	mov	r0, r3
 8014cf2:	f7f8 fa89 	bl	800d208 <phhalHw_Pn5180_Wait>
 8014cf6:	4603      	mov	r3, r0
 8014cf8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8014cfa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d001      	beq.n	8014d04 <phpalI14443p4a_Sw_Rats+0x404>
 8014d00:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014d02:	e0df      	b.n	8014ec4 <phpalI14443p4a_Sw_Rats+0x5c4>
                PHHAL_HW_TIME_MICROSECONDS,
                (uint16_t)dwSfgt));
        }

        /* Calculate FWT timeout */
        fDelay = PHPAL_I14443P4A_SW_FWT_MIN_US;
 8014d04:	4b73      	ldr	r3, [pc, #460]	@ (8014ed4 <phpalI14443p4a_Sw_Rats+0x5d4>)
 8014d06:	62bb      	str	r3, [r7, #40]	@ 0x28
        fDelay = (fDelay * ((uint32_t)1U << pDataParams->bFwi));
 8014d08:	68fb      	ldr	r3, [r7, #12]
 8014d0a:	7b1b      	ldrb	r3, [r3, #12]
 8014d0c:	461a      	mov	r2, r3
 8014d0e:	2301      	movs	r3, #1
 8014d10:	4093      	lsls	r3, r2
 8014d12:	ee07 3a90 	vmov	s15, r3
 8014d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014d1a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8014d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014d22:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

        if(pDataParams->bOpeMode == RD_LIB_MODE_ISO)
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	7c5b      	ldrb	r3, [r3, #17]
 8014d2a:	2b03      	cmp	r3, #3
 8014d2c:	d108      	bne.n	8014d40 <phpalI14443p4a_Sw_Rats+0x440>
        {
            /* Add extension time */
            fDelay = fDelay + PHPAL_I14443P4A_SW_EXT_TIME_US;
 8014d2e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8014d32:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8014ed8 <phpalI14443p4a_Sw_Rats+0x5d8>
 8014d36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014d3a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
 8014d3e:	e013      	b.n	8014d68 <phpalI14443p4a_Sw_Rats+0x468>
        }
        else
        {
            /* As per Digital Spec V1.1 req 13.8.1.3, NFC Forum Device SHALL wait at least FWT + delta FWTT4AT for a Response */
            fDelay = fDelay + PHPAL_I14443P4A_SW_DELTA_FWT_US;
 8014d40:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8014d44:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8014edc <phpalI14443p4a_Sw_Rats+0x5dc>
 8014d48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014d4c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

            if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) {
 8014d50:	68fb      	ldr	r3, [r7, #12]
 8014d52:	7c5b      	ldrb	r3, [r3, #17]
 8014d54:	2b01      	cmp	r3, #1
 8014d56:	d107      	bne.n	8014d68 <phpalI14443p4a_Sw_Rats+0x468>
                /* As per EMVCo, add delta Tpcd time along with delta FWT time */
                fDelay += PHPAL_I14443P4A_SW_DELTA_TPCD_US;
 8014d58:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8014d5c:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8014ee0 <phpalI14443p4a_Sw_Rats+0x5e0>
 8014d60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014d64:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            }
        }
        dwFwt = (uint32_t)fDelay;
 8014d68:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8014d6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014d70:	ee17 3a90 	vmov	r3, s15
 8014d74:	61fb      	str	r3, [r7, #28]

        /* Set FWT timeout */
        if (dwFwt > 0xFFFFU)
 8014d76:	69fb      	ldr	r3, [r7, #28]
 8014d78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014d7c:	d314      	bcc.n	8014da8 <phpalI14443p4a_Sw_Rats+0x4a8>
        {
            /* +1 is added to the timeout in millisecond to compensate the
             * fractional microseconds lost in division by 1000 */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8014d7e:	68fb      	ldr	r3, [r7, #12]
 8014d80:	6858      	ldr	r0, [r3, #4]
 8014d82:	69fb      	ldr	r3, [r7, #28]
 8014d84:	4a52      	ldr	r2, [pc, #328]	@ (8014ed0 <phpalI14443p4a_Sw_Rats+0x5d0>)
 8014d86:	fba2 2303 	umull	r2, r3, r2, r3
 8014d8a:	099b      	lsrs	r3, r3, #6
 8014d8c:	b29b      	uxth	r3, r3
 8014d8e:	3301      	adds	r3, #1
 8014d90:	b29b      	uxth	r3, r3
 8014d92:	461a      	mov	r2, r3
 8014d94:	210e      	movs	r1, #14
 8014d96:	f7f8 fabb 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8014d9a:	4603      	mov	r3, r0
 8014d9c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8014d9e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d07f      	beq.n	8014ea4 <phpalI14443p4a_Sw_Rats+0x5a4>
 8014da4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014da6:	e08d      	b.n	8014ec4 <phpalI14443p4a_Sw_Rats+0x5c4>
                PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
                (uint16_t)((dwFwt / 1000U) + 1U)));
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	685b      	ldr	r3, [r3, #4]
 8014dac:	69fa      	ldr	r2, [r7, #28]
 8014dae:	b292      	uxth	r2, r2
 8014db0:	210d      	movs	r1, #13
 8014db2:	4618      	mov	r0, r3
 8014db4:	f7f8 faac 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8014db8:	4603      	mov	r3, r0
 8014dba:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8014dbc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d070      	beq.n	8014ea4 <phpalI14443p4a_Sw_Rats+0x5a4>
 8014dc2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014dc4:	e07e      	b.n	8014ec4 <phpalI14443p4a_Sw_Rats+0x5c4>
    }
    /* Perform protocol error handling */
    else
    {
        /* Emvco: case_id TA306_XY and TA307 */
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8014dc6:	68fb      	ldr	r3, [r7, #12]
 8014dc8:	7c5b      	ldrb	r3, [r3, #17]
 8014dca:	2b01      	cmp	r3, #1
 8014dcc:	d101      	bne.n	8014dd2 <phpalI14443p4a_Sw_Rats+0x4d2>
        {
            return status;
 8014dce:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014dd0:	e078      	b.n	8014ec4 <phpalI14443p4a_Sw_Rats+0x5c4>
        }
        else
        {
            if (I14443P4A_SW_IS_INVALID_BLOCK_STATUS(status) == 0U)
 8014dd2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014dd4:	b2db      	uxtb	r3, r3
 8014dd6:	2b01      	cmp	r3, #1
 8014dd8:	d00d      	beq.n	8014df6 <phpalI14443p4a_Sw_Rats+0x4f6>
 8014dda:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014ddc:	b2db      	uxtb	r3, r3
 8014dde:	2b02      	cmp	r3, #2
 8014de0:	d009      	beq.n	8014df6 <phpalI14443p4a_Sw_Rats+0x4f6>
 8014de2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014de4:	b2db      	uxtb	r3, r3
 8014de6:	2b05      	cmp	r3, #5
 8014de8:	d005      	beq.n	8014df6 <phpalI14443p4a_Sw_Rats+0x4f6>
 8014dea:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014dec:	b2db      	uxtb	r3, r3
 8014dee:	2b03      	cmp	r3, #3
 8014df0:	d001      	beq.n	8014df6 <phpalI14443p4a_Sw_Rats+0x4f6>
            {
                return status;
 8014df2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014df4:	e066      	b.n	8014ec4 <phpalI14443p4a_Sw_Rats+0x5c4>
            }

            /* Wait FWTmin after RATS */
            if ((status & PH_ERR_MASK) != PH_ERR_IO_TIMEOUT)
 8014df6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014df8:	b2db      	uxtb	r3, r3
 8014dfa:	2b01      	cmp	r3, #1
 8014dfc:	d00e      	beq.n	8014e1c <phpalI14443p4a_Sw_Rats+0x51c>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 8014dfe:	68fb      	ldr	r3, [r7, #12]
 8014e00:	685b      	ldr	r3, [r3, #4]
 8014e02:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 8014e06:	2100      	movs	r1, #0
 8014e08:	4618      	mov	r0, r3
 8014e0a:	f7f8 f9fd 	bl	800d208 <phhalHw_Pn5180_Wait>
 8014e0e:	4603      	mov	r3, r0
 8014e10:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8014e12:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d001      	beq.n	8014e1c <phpalI14443p4a_Sw_Rats+0x51c>
 8014e18:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014e1a:	e053      	b.n	8014ec4 <phpalI14443p4a_Sw_Rats+0x5c4>
                    PHHAL_HW_TIME_MICROSECONDS,
                    (uint16_t)(PHPAL_I14443P4A_SW_FWT_MIN_US) + PHPAL_I14443P4A_SW_EXT_TIME_US));
            }

            /* Send S(DESELECT) command */
            cmd[0] = PHPAL_I14443P4A_SW_S_BLOCK | PHPAL_I14443P4A_SW_S_BLOCK_RFU_BITS | PHPAL_I14443P4A_SW_PCB_DESELECT;
 8014e1c:	23c2      	movs	r3, #194	@ 0xc2
 8014e1e:	763b      	strb	r3, [r7, #24]
            wCmdLength = 1;
 8014e20:	2301      	movs	r3, #1
 8014e22:	84fb      	strh	r3, [r7, #38]	@ 0x26

            statusTmp = phhalHw_Exchange(
 8014e24:	68fb      	ldr	r3, [r7, #12]
 8014e26:	6858      	ldr	r0, [r3, #4]
 8014e28:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 8014e2a:	f107 0218 	add.w	r2, r7, #24
 8014e2e:	f107 0312 	add.w	r3, r7, #18
 8014e32:	9301      	str	r3, [sp, #4]
 8014e34:	f107 0314 	add.w	r3, r7, #20
 8014e38:	9300      	str	r3, [sp, #0]
 8014e3a:	460b      	mov	r3, r1
 8014e3c:	2100      	movs	r1, #0
 8014e3e:	f7f7 fee7 	bl	800cc10 <phhalHw_Pn5180_Exchange>
 8014e42:	4603      	mov	r3, r0
 8014e44:	84bb      	strh	r3, [r7, #36]	@ 0x24
                wCmdLength,
                &pResp,
                &wRespLength);

            /* S(DESELECT) failure */
            if (((statusTmp & PH_ERR_MASK) != PH_ERR_SUCCESS) || (wRespLength != 1U) || (pResp[0] != cmd[0]))
 8014e46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014e48:	b2db      	uxtb	r3, r3
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d107      	bne.n	8014e5e <phpalI14443p4a_Sw_Rats+0x55e>
 8014e4e:	8a7b      	ldrh	r3, [r7, #18]
 8014e50:	2b01      	cmp	r3, #1
 8014e52:	d104      	bne.n	8014e5e <phpalI14443p4a_Sw_Rats+0x55e>
 8014e54:	697b      	ldr	r3, [r7, #20]
 8014e56:	781a      	ldrb	r2, [r3, #0]
 8014e58:	7e3b      	ldrb	r3, [r7, #24]
 8014e5a:	429a      	cmp	r2, r3
 8014e5c:	d022      	beq.n	8014ea4 <phpalI14443p4a_Sw_Rats+0x5a4>
            {
                /* Set HLTA timeout */
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	685b      	ldr	r3, [r3, #4]
 8014e62:	f240 424c 	movw	r2, #1100	@ 0x44c
 8014e66:	210d      	movs	r1, #13
 8014e68:	4618      	mov	r0, r3
 8014e6a:	f7f8 fa51 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8014e6e:	4603      	mov	r3, r0
 8014e70:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8014e72:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d001      	beq.n	8014e7c <phpalI14443p4a_Sw_Rats+0x57c>
 8014e78:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014e7a:	e023      	b.n	8014ec4 <phpalI14443p4a_Sw_Rats+0x5c4>
                    pDataParams->pHalDataParams,
                    PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
                    PHPAL_I14443P4A_SW_HALT_TIME_US));

                /* Send HLTA */
                cmd[0] = PHPAL_I14443P4A_SW_HALT_CMD;
 8014e7c:	2350      	movs	r3, #80	@ 0x50
 8014e7e:	763b      	strb	r3, [r7, #24]
                cmd[1] = 0x00;
 8014e80:	2300      	movs	r3, #0
 8014e82:	767b      	strb	r3, [r7, #25]

                statusTmp = phhalHw_Exchange(
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	6858      	ldr	r0, [r3, #4]
 8014e88:	f107 0218 	add.w	r2, r7, #24
 8014e8c:	f107 0312 	add.w	r3, r7, #18
 8014e90:	9301      	str	r3, [sp, #4]
 8014e92:	f107 0314 	add.w	r3, r7, #20
 8014e96:	9300      	str	r3, [sp, #0]
 8014e98:	2302      	movs	r3, #2
 8014e9a:	2100      	movs	r1, #0
 8014e9c:	f7f7 feb8 	bl	800cc10 <phhalHw_Pn5180_Exchange>
 8014ea0:	4603      	mov	r3, r0
 8014ea2:	84bb      	strh	r3, [r7, #36]	@ 0x24
                    &wRespLength);
            }
        }
    }

    return PH_ADD_COMPCODE(status, PH_COMP_PAL_ISO14443P4A);
 8014ea4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d00b      	beq.n	8014ec2 <phpalI14443p4a_Sw_Rats+0x5c2>
 8014eaa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014eac:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d106      	bne.n	8014ec2 <phpalI14443p4a_Sw_Rats+0x5c2>
 8014eb4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014eb6:	b2db      	uxtb	r3, r3
 8014eb8:	b29b      	uxth	r3, r3
 8014eba:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8014ebe:	b29b      	uxth	r3, r3
 8014ec0:	e000      	b.n	8014ec4 <phpalI14443p4a_Sw_Rats+0x5c4>
 8014ec2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
}
 8014ec4:	4618      	mov	r0, r3
 8014ec6:	3730      	adds	r7, #48	@ 0x30
 8014ec8:	46bd      	mov	sp, r7
 8014eca:	bdb0      	pop	{r4, r5, r7, pc}
 8014ecc:	f3af 8000 	nop.w
 8014ed0:	10624dd3 	.word	0x10624dd3
 8014ed4:	4397084f 	.word	0x4397084f
 8014ed8:	42700000 	.word	0x42700000
 8014edc:	45638000 	.word	0x45638000
 8014ee0:	447a0000 	.word	0x447a0000
 8014ee4:	d12e109d 	.word	0xd12e109d
 8014ee8:	4072e109 	.word	0x4072e109
 8014eec:	b9c518eb 	.word	0xb9c518eb
 8014ef0:	403c518e 	.word	0x403c518e

08014ef4 <phpalI14443p4a_Sw_Pps>:
phStatus_t phpalI14443p4a_Sw_Pps(
                                 phpalI14443p4a_Sw_DataParams_t * pDataParams,
                                 uint8_t bDri,
                                 uint8_t bDsi
                                 )
{
 8014ef4:	b580      	push	{r7, lr}
 8014ef6:	b08a      	sub	sp, #40	@ 0x28
 8014ef8:	af02      	add	r7, sp, #8
 8014efa:	6078      	str	r0, [r7, #4]
 8014efc:	460b      	mov	r3, r1
 8014efe:	70fb      	strb	r3, [r7, #3]
 8014f00:	4613      	mov	r3, r2
 8014f02:	70bb      	strb	r3, [r7, #2]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM cmd[3];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8014f04:	2300      	movs	r3, #0
 8014f06:	613b      	str	r3, [r7, #16]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8014f08:	2300      	movs	r3, #0
 8014f0a:	81fb      	strh	r3, [r7, #14]
    uint16_t    PH_MEMLOC_REM wTxDataRate;
    uint16_t    PH_MEMLOC_REM wRxDataRate;

    /* Check and convert Dri value */
    switch (bDri)
 8014f0c:	78fb      	ldrb	r3, [r7, #3]
 8014f0e:	2b03      	cmp	r3, #3
 8014f10:	d816      	bhi.n	8014f40 <phpalI14443p4a_Sw_Pps+0x4c>
 8014f12:	a201      	add	r2, pc, #4	@ (adr r2, 8014f18 <phpalI14443p4a_Sw_Pps+0x24>)
 8014f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f18:	08014f29 	.word	0x08014f29
 8014f1c:	08014f2f 	.word	0x08014f2f
 8014f20:	08014f35 	.word	0x08014f35
 8014f24:	08014f3b 	.word	0x08014f3b
    {
    case PHPAL_I14443P4A_DATARATE_106:
        wTxDataRate = PHHAL_HW_RF_DATARATE_106;
 8014f28:	2300      	movs	r3, #0
 8014f2a:	83fb      	strh	r3, [r7, #30]
        break;
 8014f2c:	e00b      	b.n	8014f46 <phpalI14443p4a_Sw_Pps+0x52>
    case PHPAL_I14443P4A_DATARATE_212:
        wTxDataRate = PHHAL_HW_RF_DATARATE_212;
 8014f2e:	2301      	movs	r3, #1
 8014f30:	83fb      	strh	r3, [r7, #30]
        break;
 8014f32:	e008      	b.n	8014f46 <phpalI14443p4a_Sw_Pps+0x52>
    case PHPAL_I14443P4A_DATARATE_424:
        wTxDataRate = PHHAL_HW_RF_DATARATE_424;
 8014f34:	2302      	movs	r3, #2
 8014f36:	83fb      	strh	r3, [r7, #30]
        break;
 8014f38:	e005      	b.n	8014f46 <phpalI14443p4a_Sw_Pps+0x52>
    case PHPAL_I14443P4A_DATARATE_848:
        wTxDataRate = PHHAL_HW_RF_DATARATE_848;
 8014f3a:	2303      	movs	r3, #3
 8014f3c:	83fb      	strh	r3, [r7, #30]
        break;
 8014f3e:	e002      	b.n	8014f46 <phpalI14443p4a_Sw_Pps+0x52>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8014f40:	f240 5321 	movw	r3, #1313	@ 0x521
 8014f44:	e080      	b.n	8015048 <phpalI14443p4a_Sw_Pps+0x154>
    }

    /* Check and convert Dsi value */
    switch (bDsi)
 8014f46:	78bb      	ldrb	r3, [r7, #2]
 8014f48:	2b03      	cmp	r3, #3
 8014f4a:	d817      	bhi.n	8014f7c <phpalI14443p4a_Sw_Pps+0x88>
 8014f4c:	a201      	add	r2, pc, #4	@ (adr r2, 8014f54 <phpalI14443p4a_Sw_Pps+0x60>)
 8014f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f52:	bf00      	nop
 8014f54:	08014f65 	.word	0x08014f65
 8014f58:	08014f6b 	.word	0x08014f6b
 8014f5c:	08014f71 	.word	0x08014f71
 8014f60:	08014f77 	.word	0x08014f77
    {
    case PHPAL_I14443P4A_DATARATE_106:
        wRxDataRate = PHHAL_HW_RF_DATARATE_106;
 8014f64:	2300      	movs	r3, #0
 8014f66:	83bb      	strh	r3, [r7, #28]
        break;
 8014f68:	e00b      	b.n	8014f82 <phpalI14443p4a_Sw_Pps+0x8e>
    case PHPAL_I14443P4A_DATARATE_212:
        wRxDataRate = PHHAL_HW_RF_DATARATE_212;
 8014f6a:	2301      	movs	r3, #1
 8014f6c:	83bb      	strh	r3, [r7, #28]
        break;
 8014f6e:	e008      	b.n	8014f82 <phpalI14443p4a_Sw_Pps+0x8e>
    case PHPAL_I14443P4A_DATARATE_424:
        wRxDataRate = PHHAL_HW_RF_DATARATE_424;
 8014f70:	2302      	movs	r3, #2
 8014f72:	83bb      	strh	r3, [r7, #28]
        break;
 8014f74:	e005      	b.n	8014f82 <phpalI14443p4a_Sw_Pps+0x8e>
    case PHPAL_I14443P4A_DATARATE_848:
        wRxDataRate = PHHAL_HW_RF_DATARATE_848;
 8014f76:	2303      	movs	r3, #3
 8014f78:	83bb      	strh	r3, [r7, #28]
        break;
 8014f7a:	e002      	b.n	8014f82 <phpalI14443p4a_Sw_Pps+0x8e>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8014f7c:	f240 5321 	movw	r3, #1313	@ 0x521
 8014f80:	e062      	b.n	8015048 <phpalI14443p4a_Sw_Pps+0x154>
    }

    /* Send Pps command */
    cmd[0] = PHPAL_I14443P4A_SW_PPSS | pDataParams->bCid;
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	7a9b      	ldrb	r3, [r3, #10]
 8014f86:	f063 032f 	orn	r3, r3, #47	@ 0x2f
 8014f8a:	b2db      	uxtb	r3, r3
 8014f8c:	753b      	strb	r3, [r7, #20]
    cmd[1] = PHPAL_I14443P4A_SW_PPS0;
 8014f8e:	2311      	movs	r3, #17
 8014f90:	757b      	strb	r3, [r7, #21]
    cmd[2] = ((bDsi << 2U) & 0x0CU) | (bDri & 0x03U);
 8014f92:	78bb      	ldrb	r3, [r7, #2]
 8014f94:	009b      	lsls	r3, r3, #2
 8014f96:	b2db      	uxtb	r3, r3
 8014f98:	f003 030c 	and.w	r3, r3, #12
 8014f9c:	b2da      	uxtb	r2, r3
 8014f9e:	78fb      	ldrb	r3, [r7, #3]
 8014fa0:	f003 0303 	and.w	r3, r3, #3
 8014fa4:	b2db      	uxtb	r3, r3
 8014fa6:	4313      	orrs	r3, r2
 8014fa8:	b2db      	uxtb	r3, r3
 8014faa:	75bb      	strb	r3, [r7, #22]
    status = phhalHw_Exchange(
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	6858      	ldr	r0, [r3, #4]
 8014fb0:	f107 0214 	add.w	r2, r7, #20
 8014fb4:	f107 030e 	add.w	r3, r7, #14
 8014fb8:	9301      	str	r3, [sp, #4]
 8014fba:	f107 0310 	add.w	r3, r7, #16
 8014fbe:	9300      	str	r3, [sp, #0]
 8014fc0:	2303      	movs	r3, #3
 8014fc2:	2100      	movs	r1, #0
 8014fc4:	f7f7 fe24 	bl	800cc10 <phhalHw_Pn5180_Exchange>
 8014fc8:	4603      	mov	r3, r0
 8014fca:	837b      	strh	r3, [r7, #26]
        3,
        &pResp,
        &wRespLength);

    /* NAK means protocol error */
    if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS_INCOMPLETE_BYTE)
 8014fcc:	8b7b      	ldrh	r3, [r7, #26]
 8014fce:	b2db      	uxtb	r3, r3
 8014fd0:	2b73      	cmp	r3, #115	@ 0x73
 8014fd2:	d102      	bne.n	8014fda <phpalI14443p4a_Sw_Pps+0xe6>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4A);
 8014fd4:	f240 5306 	movw	r3, #1286	@ 0x506
 8014fd8:	e036      	b.n	8015048 <phpalI14443p4a_Sw_Pps+0x154>
    }

    /* Success check */
    PH_CHECK_SUCCESS(status);
 8014fda:	8b7b      	ldrh	r3, [r7, #26]
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d001      	beq.n	8014fe4 <phpalI14443p4a_Sw_Pps+0xf0>
 8014fe0:	8b7b      	ldrh	r3, [r7, #26]
 8014fe2:	e031      	b.n	8015048 <phpalI14443p4a_Sw_Pps+0x154>

    /* Check length and start byte of PPS */
    if ((wRespLength != 1U) || (pResp[0] != (PHPAL_I14443P4A_SW_PPSS | pDataParams->bCid)))
 8014fe4:	89fb      	ldrh	r3, [r7, #14]
 8014fe6:	2b01      	cmp	r3, #1
 8014fe8:	d108      	bne.n	8014ffc <phpalI14443p4a_Sw_Pps+0x108>
 8014fea:	693b      	ldr	r3, [r7, #16]
 8014fec:	781a      	ldrb	r2, [r3, #0]
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	7a9b      	ldrb	r3, [r3, #10]
 8014ff2:	f063 032f 	orn	r3, r3, #47	@ 0x2f
 8014ff6:	b2db      	uxtb	r3, r3
 8014ff8:	429a      	cmp	r2, r3
 8014ffa:	d002      	beq.n	8015002 <phpalI14443p4a_Sw_Pps+0x10e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4A);
 8014ffc:	f240 5306 	movw	r3, #1286	@ 0x506
 8015000:	e022      	b.n	8015048 <phpalI14443p4a_Sw_Pps+0x154>
    }

    /* Store data rates */
    pDataParams->bDri = bDri;
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	78fa      	ldrb	r2, [r7, #3]
 8015006:	73da      	strb	r2, [r3, #15]
    pDataParams->bDsi = bDsi;
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	78ba      	ldrb	r2, [r7, #2]
 801500c:	741a      	strb	r2, [r3, #16]

    /* Apply new data rates to Pcd */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXDATARATE_FRAMING, wTxDataRate));
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	685b      	ldr	r3, [r3, #4]
 8015012:	8bfa      	ldrh	r2, [r7, #30]
 8015014:	2109      	movs	r1, #9
 8015016:	4618      	mov	r0, r3
 8015018:	f7f8 f97a 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 801501c:	4603      	mov	r3, r0
 801501e:	833b      	strh	r3, [r7, #24]
 8015020:	8b3b      	ldrh	r3, [r7, #24]
 8015022:	2b00      	cmp	r3, #0
 8015024:	d001      	beq.n	801502a <phpalI14443p4a_Sw_Pps+0x136>
 8015026:	8b3b      	ldrh	r3, [r7, #24]
 8015028:	e00e      	b.n	8015048 <phpalI14443p4a_Sw_Pps+0x154>
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXDATARATE_FRAMING, wRxDataRate));
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	685b      	ldr	r3, [r3, #4]
 801502e:	8bba      	ldrh	r2, [r7, #28]
 8015030:	210a      	movs	r1, #10
 8015032:	4618      	mov	r0, r3
 8015034:	f7f8 f96c 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8015038:	4603      	mov	r3, r0
 801503a:	833b      	strh	r3, [r7, #24]
 801503c:	8b3b      	ldrh	r3, [r7, #24]
 801503e:	2b00      	cmp	r3, #0
 8015040:	d001      	beq.n	8015046 <phpalI14443p4a_Sw_Pps+0x152>
 8015042:	8b3b      	ldrh	r3, [r7, #24]
 8015044:	e000      	b.n	8015048 <phpalI14443p4a_Sw_Pps+0x154>

    return PH_ERR_SUCCESS;
 8015046:	2300      	movs	r3, #0
}
 8015048:	4618      	mov	r0, r3
 801504a:	3720      	adds	r7, #32
 801504c:	46bd      	mov	sp, r7
 801504e:	bd80      	pop	{r7, pc}

08015050 <phpalI14443p4a_Sw_ActivateCard>:
    uint8_t bCid,
    uint8_t bDri,
    uint8_t bDsi,
    uint8_t * pAts
    )
{
 8015050:	b580      	push	{r7, lr}
 8015052:	b084      	sub	sp, #16
 8015054:	af00      	add	r7, sp, #0
 8015056:	6078      	str	r0, [r7, #4]
 8015058:	4608      	mov	r0, r1
 801505a:	4611      	mov	r1, r2
 801505c:	461a      	mov	r2, r3
 801505e:	4603      	mov	r3, r0
 8015060:	70fb      	strb	r3, [r7, #3]
 8015062:	460b      	mov	r3, r1
 8015064:	70bb      	strb	r3, [r7, #2]
 8015066:	4613      	mov	r3, r2
 8015068:	707b      	strb	r3, [r7, #1]
    phStatus_t PH_MEMLOC_REM statusTmp;
    uint8_t PH_MEMLOC_REM bAts_Dsi;
    uint8_t PH_MEMLOC_REM bAts_Dri;

    /* Check Dri value */
    switch (bDri)
 801506a:	787b      	ldrb	r3, [r7, #1]
 801506c:	2b03      	cmp	r3, #3
 801506e:	d902      	bls.n	8015076 <phpalI14443p4a_Sw_ActivateCard+0x26>
    case PHPAL_I14443P4A_DATARATE_424:
        /* fall through */
    case PHPAL_I14443P4A_DATARATE_848:
        break;
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8015070:	f240 5321 	movw	r3, #1313	@ 0x521
 8015074:	e0a0      	b.n	80151b8 <phpalI14443p4a_Sw_ActivateCard+0x168>
        break;
 8015076:	bf00      	nop
    }

    /* Check Dri value */
    switch (bDsi)
 8015078:	7e3b      	ldrb	r3, [r7, #24]
 801507a:	2b03      	cmp	r3, #3
 801507c:	d902      	bls.n	8015084 <phpalI14443p4a_Sw_ActivateCard+0x34>
    case PHPAL_I14443P4A_DATARATE_424:
        /* fall through */
    case PHPAL_I14443P4A_DATARATE_848:
        break;
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 801507e:	f240 5321 	movw	r3, #1313	@ 0x521
 8015082:	e099      	b.n	80151b8 <phpalI14443p4a_Sw_ActivateCard+0x168>
        break;
 8015084:	bf00      	nop
    }

    /* Perform RATS */
    statusTmp = phpalI14443p4a_Sw_Rats(pDataParams, bFsdi, bCid, pAts);
 8015086:	78ba      	ldrb	r2, [r7, #2]
 8015088:	78f9      	ldrb	r1, [r7, #3]
 801508a:	69fb      	ldr	r3, [r7, #28]
 801508c:	6878      	ldr	r0, [r7, #4]
 801508e:	f7ff fc37 	bl	8014900 <phpalI14443p4a_Sw_Rats>
 8015092:	4603      	mov	r3, r0
 8015094:	81fb      	strh	r3, [r7, #14]
    if ((statusTmp & PH_ERR_MASK) == PH_ERR_SUCCESS)
 8015096:	89fb      	ldrh	r3, [r7, #14]
 8015098:	b2db      	uxtb	r3, r3
 801509a:	2b00      	cmp	r3, #0
 801509c:	d17c      	bne.n	8015198 <phpalI14443p4a_Sw_ActivateCard+0x148>
    {
        /* Check user parameter change request versus Card bit rate capabilities and send PPS if required. */
        if (((bDri != PHPAL_I14443P4A_DATARATE_106) || (bDsi != PHPAL_I14443P4A_DATARATE_106)) &&
 801509e:	787b      	ldrb	r3, [r7, #1]
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d102      	bne.n	80150aa <phpalI14443p4a_Sw_ActivateCard+0x5a>
 80150a4:	7e3b      	ldrb	r3, [r7, #24]
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d076      	beq.n	8015198 <phpalI14443p4a_Sw_ActivateCard+0x148>
            (pDataParams->bBitRateCaps != 0x00))
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	7adb      	ldrb	r3, [r3, #11]
        if (((bDri != PHPAL_I14443P4A_DATARATE_106) || (bDsi != PHPAL_I14443P4A_DATARATE_106)) &&
 80150ae:	2b00      	cmp	r3, #0
 80150b0:	d072      	beq.n	8015198 <phpalI14443p4a_Sw_ActivateCard+0x148>
        {
            if (pDataParams->bBitRateCaps & 0x40U)
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	7adb      	ldrb	r3, [r3, #11]
 80150b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d002      	beq.n	80150c4 <phpalI14443p4a_Sw_ActivateCard+0x74>
            {
                bAts_Dsi = PHPAL_I14443P4A_DATARATE_848;
 80150be:	2303      	movs	r3, #3
 80150c0:	737b      	strb	r3, [r7, #13]
 80150c2:	e013      	b.n	80150ec <phpalI14443p4a_Sw_ActivateCard+0x9c>
            }
            else if (pDataParams->bBitRateCaps & 0x20U)
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	7adb      	ldrb	r3, [r3, #11]
 80150c8:	f003 0320 	and.w	r3, r3, #32
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d002      	beq.n	80150d6 <phpalI14443p4a_Sw_ActivateCard+0x86>
            {
                bAts_Dsi = PHPAL_I14443P4A_DATARATE_424;
 80150d0:	2302      	movs	r3, #2
 80150d2:	737b      	strb	r3, [r7, #13]
 80150d4:	e00a      	b.n	80150ec <phpalI14443p4a_Sw_ActivateCard+0x9c>
            }
            else if (pDataParams->bBitRateCaps & 0x10U)
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	7adb      	ldrb	r3, [r3, #11]
 80150da:	f003 0310 	and.w	r3, r3, #16
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d002      	beq.n	80150e8 <phpalI14443p4a_Sw_ActivateCard+0x98>
            {
                bAts_Dsi = PHPAL_I14443P4A_DATARATE_212;
 80150e2:	2301      	movs	r3, #1
 80150e4:	737b      	strb	r3, [r7, #13]
 80150e6:	e001      	b.n	80150ec <phpalI14443p4a_Sw_ActivateCard+0x9c>
            }
            else
            {
                bAts_Dsi = PHPAL_I14443P4A_DATARATE_106;
 80150e8:	2300      	movs	r3, #0
 80150ea:	737b      	strb	r3, [r7, #13]
            }

            if (pDataParams->bBitRateCaps & 0x04U)
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	7adb      	ldrb	r3, [r3, #11]
 80150f0:	f003 0304 	and.w	r3, r3, #4
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	d002      	beq.n	80150fe <phpalI14443p4a_Sw_ActivateCard+0xae>
            {
                bAts_Dri = PHPAL_I14443P4A_DATARATE_848;
 80150f8:	2303      	movs	r3, #3
 80150fa:	733b      	strb	r3, [r7, #12]
 80150fc:	e013      	b.n	8015126 <phpalI14443p4a_Sw_ActivateCard+0xd6>
            }
            else if (pDataParams->bBitRateCaps & 0x02U)
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	7adb      	ldrb	r3, [r3, #11]
 8015102:	f003 0302 	and.w	r3, r3, #2
 8015106:	2b00      	cmp	r3, #0
 8015108:	d002      	beq.n	8015110 <phpalI14443p4a_Sw_ActivateCard+0xc0>
            {
                bAts_Dri = PHPAL_I14443P4A_DATARATE_424;
 801510a:	2302      	movs	r3, #2
 801510c:	733b      	strb	r3, [r7, #12]
 801510e:	e00a      	b.n	8015126 <phpalI14443p4a_Sw_ActivateCard+0xd6>
            }
            else if (pDataParams->bBitRateCaps & 0x01U)
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	7adb      	ldrb	r3, [r3, #11]
 8015114:	f003 0301 	and.w	r3, r3, #1
 8015118:	2b00      	cmp	r3, #0
 801511a:	d002      	beq.n	8015122 <phpalI14443p4a_Sw_ActivateCard+0xd2>
            {
                bAts_Dri = PHPAL_I14443P4A_DATARATE_212;
 801511c:	2301      	movs	r3, #1
 801511e:	733b      	strb	r3, [r7, #12]
 8015120:	e001      	b.n	8015126 <phpalI14443p4a_Sw_ActivateCard+0xd6>
            }
            else
            {
                bAts_Dri = PHPAL_I14443P4A_DATARATE_106;
 8015122:	2300      	movs	r3, #0
 8015124:	733b      	strb	r3, [r7, #12]
            }

            if ((bDsi != bAts_Dsi) && (bDsi > bAts_Dsi))
 8015126:	7e3a      	ldrb	r2, [r7, #24]
 8015128:	7b7b      	ldrb	r3, [r7, #13]
 801512a:	429a      	cmp	r2, r3
 801512c:	d005      	beq.n	801513a <phpalI14443p4a_Sw_ActivateCard+0xea>
 801512e:	7e3a      	ldrb	r2, [r7, #24]
 8015130:	7b7b      	ldrb	r3, [r7, #13]
 8015132:	429a      	cmp	r2, r3
 8015134:	d901      	bls.n	801513a <phpalI14443p4a_Sw_ActivateCard+0xea>
            {
                bDsi = bAts_Dsi;
 8015136:	7b7b      	ldrb	r3, [r7, #13]
 8015138:	763b      	strb	r3, [r7, #24]
            }

            if ((bDri != bAts_Dri) && (bDri > bAts_Dri))
 801513a:	787a      	ldrb	r2, [r7, #1]
 801513c:	7b3b      	ldrb	r3, [r7, #12]
 801513e:	429a      	cmp	r2, r3
 8015140:	d005      	beq.n	801514e <phpalI14443p4a_Sw_ActivateCard+0xfe>
 8015142:	787a      	ldrb	r2, [r7, #1]
 8015144:	7b3b      	ldrb	r3, [r7, #12]
 8015146:	429a      	cmp	r2, r3
 8015148:	d901      	bls.n	801514e <phpalI14443p4a_Sw_ActivateCard+0xfe>
            {
                bDri = bAts_Dri;
 801514a:	7b3b      	ldrb	r3, [r7, #12]
 801514c:	707b      	strb	r3, [r7, #1]
            }

            if (pDataParams->bBitRateCaps & 0x80U)
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	7adb      	ldrb	r3, [r3, #11]
 8015152:	b25b      	sxtb	r3, r3
 8015154:	2b00      	cmp	r3, #0
 8015156:	da0c      	bge.n	8015172 <phpalI14443p4a_Sw_ActivateCard+0x122>
            {
                /* Only same bit rate allowed in both directions. */
                if (bDsi != bDri)
 8015158:	7e3a      	ldrb	r2, [r7, #24]
 801515a:	787b      	ldrb	r3, [r7, #1]
 801515c:	429a      	cmp	r2, r3
 801515e:	d008      	beq.n	8015172 <phpalI14443p4a_Sw_ActivateCard+0x122>
                {
                    (bDsi < bDri) ? (bDri = bDsi) : (bDsi = bDri);
 8015160:	7e3a      	ldrb	r2, [r7, #24]
 8015162:	787b      	ldrb	r3, [r7, #1]
 8015164:	429a      	cmp	r2, r3
 8015166:	d202      	bcs.n	801516e <phpalI14443p4a_Sw_ActivateCard+0x11e>
 8015168:	7e3b      	ldrb	r3, [r7, #24]
 801516a:	707b      	strb	r3, [r7, #1]
 801516c:	e001      	b.n	8015172 <phpalI14443p4a_Sw_ActivateCard+0x122>
 801516e:	787b      	ldrb	r3, [r7, #1]
 8015170:	763b      	strb	r3, [r7, #24]
                }
            }

            if ((bDri != PHPAL_I14443P4A_DATARATE_106) || (bDsi != PHPAL_I14443P4A_DATARATE_106))
 8015172:	787b      	ldrb	r3, [r7, #1]
 8015174:	2b00      	cmp	r3, #0
 8015176:	d102      	bne.n	801517e <phpalI14443p4a_Sw_ActivateCard+0x12e>
 8015178:	7e3b      	ldrb	r3, [r7, #24]
 801517a:	2b00      	cmp	r3, #0
 801517c:	d00c      	beq.n	8015198 <phpalI14443p4a_Sw_ActivateCard+0x148>
            {
                /* Perform PPS */
                PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p4a_Sw_Pps(pDataParams, bDri, bDsi));
 801517e:	7e3a      	ldrb	r2, [r7, #24]
 8015180:	787b      	ldrb	r3, [r7, #1]
 8015182:	4619      	mov	r1, r3
 8015184:	6878      	ldr	r0, [r7, #4]
 8015186:	f7ff feb5 	bl	8014ef4 <phpalI14443p4a_Sw_Pps>
 801518a:	4603      	mov	r3, r0
 801518c:	81fb      	strh	r3, [r7, #14]
 801518e:	89fb      	ldrh	r3, [r7, #14]
 8015190:	2b00      	cmp	r3, #0
 8015192:	d001      	beq.n	8015198 <phpalI14443p4a_Sw_ActivateCard+0x148>
 8015194:	89fb      	ldrh	r3, [r7, #14]
 8015196:	e00f      	b.n	80151b8 <phpalI14443p4a_Sw_ActivateCard+0x168>
            }
        }
    }

    return PH_ADD_COMPCODE(statusTmp, PH_COMP_PAL_ISO14443P4A);
 8015198:	89fb      	ldrh	r3, [r7, #14]
 801519a:	2b00      	cmp	r3, #0
 801519c:	d00b      	beq.n	80151b6 <phpalI14443p4a_Sw_ActivateCard+0x166>
 801519e:	89fb      	ldrh	r3, [r7, #14]
 80151a0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d106      	bne.n	80151b6 <phpalI14443p4a_Sw_ActivateCard+0x166>
 80151a8:	89fb      	ldrh	r3, [r7, #14]
 80151aa:	b2db      	uxtb	r3, r3
 80151ac:	b29b      	uxth	r3, r3
 80151ae:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80151b2:	b29b      	uxth	r3, r3
 80151b4:	e000      	b.n	80151b8 <phpalI14443p4a_Sw_ActivateCard+0x168>
 80151b6:	89fb      	ldrh	r3, [r7, #14]
}
 80151b8:	4618      	mov	r0, r3
 80151ba:	3710      	adds	r7, #16
 80151bc:	46bd      	mov	sp, r7
 80151be:	bd80      	pop	{r7, pc}

080151c0 <phpalI14443p4a_Sw_GetProtocolParams>:
    uint8_t * pNadSupported,
    uint8_t * pFwi,
    uint8_t * pFsdi,
    uint8_t * pFsci
    )
{
 80151c0:	b480      	push	{r7}
 80151c2:	b085      	sub	sp, #20
 80151c4:	af00      	add	r7, sp, #0
 80151c6:	60f8      	str	r0, [r7, #12]
 80151c8:	60b9      	str	r1, [r7, #8]
 80151ca:	607a      	str	r2, [r7, #4]
 80151cc:	603b      	str	r3, [r7, #0]
    *pCidEnabled    = pDataParams->bCidSupported;
 80151ce:	68fb      	ldr	r3, [r7, #12]
 80151d0:	7a1a      	ldrb	r2, [r3, #8]
 80151d2:	68bb      	ldr	r3, [r7, #8]
 80151d4:	701a      	strb	r2, [r3, #0]
    *pCid           = pDataParams->bCid;
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	7a9a      	ldrb	r2, [r3, #10]
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	701a      	strb	r2, [r3, #0]
    *pNadSupported  = pDataParams->bNadSupported;
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	7a5a      	ldrb	r2, [r3, #9]
 80151e2:	683b      	ldr	r3, [r7, #0]
 80151e4:	701a      	strb	r2, [r3, #0]
    *pFwi           = pDataParams->bFwi;
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	7b1a      	ldrb	r2, [r3, #12]
 80151ea:	69bb      	ldr	r3, [r7, #24]
 80151ec:	701a      	strb	r2, [r3, #0]
    *pFsdi          = pDataParams->bFsdi;
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	7b9a      	ldrb	r2, [r3, #14]
 80151f2:	69fb      	ldr	r3, [r7, #28]
 80151f4:	701a      	strb	r2, [r3, #0]
    *pFsci          = pDataParams->bFsci;
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	7b5a      	ldrb	r2, [r3, #13]
 80151fa:	6a3b      	ldr	r3, [r7, #32]
 80151fc:	701a      	strb	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 80151fe:	2300      	movs	r3, #0
}
 8015200:	4618      	mov	r0, r3
 8015202:	3714      	adds	r7, #20
 8015204:	46bd      	mov	sp, r7
 8015206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801520a:	4770      	bx	lr

0801520c <phpalI14443p4mC_Sw_Init>:
                                   phpalI14443p4mC_Sw_DataParams_t * pDataParams,
                                   uint16_t wSizeOfDataParams,
                                   void * pHalDataParams,
                                   pWtxTimerCallback pWtxCallback
                                   )
{
 801520c:	b580      	push	{r7, lr}
 801520e:	b086      	sub	sp, #24
 8015210:	af00      	add	r7, sp, #0
 8015212:	60f8      	str	r0, [r7, #12]
 8015214:	607a      	str	r2, [r7, #4]
 8015216:	603b      	str	r3, [r7, #0]
 8015218:	460b      	mov	r3, r1
 801521a:	817b      	strh	r3, [r7, #10]
    phStatus_t wStatus = PH_ERR_SUCCESS;
 801521c:	2300      	movs	r3, #0
 801521e:	82fb      	strh	r3, [r7, #22]

    if (sizeof(phpalI14443p4mC_Sw_DataParams_t) != wSizeOfDataParams)
 8015220:	897b      	ldrh	r3, [r7, #10]
 8015222:	2b34      	cmp	r3, #52	@ 0x34
 8015224:	d002      	beq.n	801522c <phpalI14443p4mC_Sw_Init+0x20>
    {
        return (PH_ERR_INVALID_DATA_PARAMS | PH_COMP_PAL_I14443P4MC);
 8015226:	f44f 6372 	mov.w	r3, #3872	@ 0xf20
 801522a:	e039      	b.n	80152a0 <phpalI14443p4mC_Sw_Init+0x94>
    }
    PH_ASSERT_NULL (pDataParams);
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	2b00      	cmp	r3, #0
 8015230:	d101      	bne.n	8015236 <phpalI14443p4mC_Sw_Init+0x2a>
 8015232:	2321      	movs	r3, #33	@ 0x21
 8015234:	e034      	b.n	80152a0 <phpalI14443p4mC_Sw_Init+0x94>
    PH_ASSERT_NULL (pHalDataParams);
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	2b00      	cmp	r3, #0
 801523a:	d101      	bne.n	8015240 <phpalI14443p4mC_Sw_Init+0x34>
 801523c:	2321      	movs	r3, #33	@ 0x21
 801523e:	e02f      	b.n	80152a0 <phpalI14443p4mC_Sw_Init+0x94>

    /* Initialize data parameters */
    pDataParams->wId                = PH_COMP_PAL_I14443P4MC | PHPAL_I14443P4MC_SW_ID;
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	f640 7201 	movw	r2, #3841	@ 0xf01
 8015246:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams     = pHalDataParams;
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	687a      	ldr	r2, [r7, #4]
 801524c:	605a      	str	r2, [r3, #4]
    pDataParams->pWtxTimerCallback  = pWtxCallback;
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	683a      	ldr	r2, [r7, #0]
 8015252:	631a      	str	r2, [r3, #48]	@ 0x30

    pDataParams->bWtx               = PHPAL_I14443P4MC_SW_MIN_WTX_VALUE;
 8015254:	68fb      	ldr	r3, [r7, #12]
 8015256:	2201      	movs	r2, #1
 8015258:	765a      	strb	r2, [r3, #25]
    pDataParams->bDisableWtx        = PH_OFF;
 801525a:	68fb      	ldr	r3, [r7, #12]
 801525c:	2200      	movs	r2, #0
 801525e:	761a      	strb	r2, [r3, #24]
    /* Default operating mode is NFC */
    pDataParams->bOpMode            = RD_LIB_MODE_NFC;
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	2202      	movs	r2, #2
 8015264:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
    /* By default delta time to be subtracted from WTX timer time is set to 0 */
    pDataParams->wWtDelta           = 0;
 8015268:	68fb      	ldr	r3, [r7, #12]
 801526a:	2200      	movs	r2, #0
 801526c:	859a      	strh	r2, [r3, #44]	@ 0x2c
    /* Default percentage of actual time to be used in WTX timer is set to 75% */
    pDataParams->bWtPercentage      = 75;
 801526e:	68fb      	ldr	r3, [r7, #12]
 8015270:	224b      	movs	r2, #75	@ 0x4b
 8015272:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

    /* Reset protocol to defaults */
    (void)phpalI14443p4mC_Sw_ResetProtocol(pDataParams);
 8015276:	68f8      	ldr	r0, [r7, #12]
 8015278:	f000 f818 	bl	80152ac <phpalI14443p4mC_Sw_ResetProtocol>

    /* check whether event is already created. */
    pDataParams->mcEventObj.intialValue = 0;
 801527c:	68fb      	ldr	r3, [r7, #12]
 801527e:	2200      	movs	r2, #0
 8015280:	611a      	str	r2, [r3, #16]
    pDataParams->mcEventObj.pEvtName = (uint8_t *)bmcEventName;
 8015282:	68fb      	ldr	r3, [r7, #12]
 8015284:	4a08      	ldr	r2, [pc, #32]	@ (80152a8 <phpalI14443p4mC_Sw_Init+0x9c>)
 8015286:	60da      	str	r2, [r3, #12]
    wStatus = phOsal_EventCreate(&pDataParams->mcEventObj.EventHandle, &pDataParams->mcEventObj);
 8015288:	68fb      	ldr	r3, [r7, #12]
 801528a:	f103 0208 	add.w	r2, r3, #8
 801528e:	68fb      	ldr	r3, [r7, #12]
 8015290:	3308      	adds	r3, #8
 8015292:	4619      	mov	r1, r3
 8015294:	4610      	mov	r0, r2
 8015296:	f001 fe15 	bl	8016ec4 <phOsal_EventCreate>
 801529a:	4603      	mov	r3, r0
 801529c:	82fb      	strh	r3, [r7, #22]

    return wStatus;
 801529e:	8afb      	ldrh	r3, [r7, #22]
}
 80152a0:	4618      	mov	r0, r3
 80152a2:	3718      	adds	r7, #24
 80152a4:	46bd      	mov	sp, r7
 80152a6:	bd80      	pop	{r7, pc}
 80152a8:	0802035c 	.word	0x0802035c

080152ac <phpalI14443p4mC_Sw_ResetProtocol>:
}

phStatus_t phpalI14443p4mC_Sw_ResetProtocol(
                                            phpalI14443p4mC_Sw_DataParams_t * pDataParams
                                            )
{
 80152ac:	b580      	push	{r7, lr}
 80152ae:	b084      	sub	sp, #16
 80152b0:	af00      	add	r7, sp, #0
 80152b2:	6078      	str	r0, [r7, #4]
    phStatus_t wStatus = PH_ERR_SUCCESS;
 80152b4:	2300      	movs	r3, #0
 80152b6:	81fb      	strh	r3, [r7, #14]
    pDataParams->bStateNow        = PHPAL_I14443P4MC_STATE_NONE;
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	2200      	movs	r2, #0
 80152bc:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    /* Default block number is 1. ISO14443-4 7.5.3.2. Rule C */
    pDataParams->bBlockNr         = 1;
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	2201      	movs	r2, #1
 80152c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    pDataParams->bFsdi            = 0;
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	2200      	movs	r2, #0
 80152cc:	769a      	strb	r2, [r3, #26]
    /* Default FSCI value is 2 */
    pDataParams->bFsci            = PHPALI14443P4MC_FSCI_DEFAULT;
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	2202      	movs	r2, #2
 80152d2:	76da      	strb	r2, [r3, #27]
    pDataParams->bDr              = PHPAL_I14443P4MC_106;
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	2200      	movs	r2, #0
 80152d8:	771a      	strb	r2, [r3, #28]
    pDataParams->bDs              = PHPAL_I14443P4MC_106;
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	2200      	movs	r2, #0
 80152de:	775a      	strb	r2, [r3, #29]
    pDataParams->bSameDSupport    = 0;
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	2200      	movs	r2, #0
 80152e4:	779a      	strb	r2, [r3, #30]
    pDataParams->bFwi             = PHPALI14443P4MC_FWI_DEFAULT;
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	2204      	movs	r2, #4
 80152ea:	77da      	strb	r2, [r3, #31]
    pDataParams->bSfgi            = PHPALI14443P4MC_SFGI_DEFAULT;
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	2200      	movs	r2, #0
 80152f0:	f883 2020 	strb.w	r2, [r3, #32]
    pDataParams->bCid             = 0;
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	2200      	movs	r2, #0
 80152f8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    pDataParams->bNad             = 0;
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	2200      	movs	r2, #0
 8015300:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    pDataParams->bChainingRx      = 0;
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	2200      	movs	r2, #0
 8015308:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    pDataParams->bChainingTx      = 0;
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	2200      	movs	r2, #0
 8015310:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    /* Default CID supported ISO14443-4 5.2.6 */
    pDataParams->bCidEnable       = PH_ON;
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	2201      	movs	r2, #1
 8015318:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    /* Default NAD not supported ISO14443-4 5.2.6 */
    pDataParams->bNadEnable       = PH_OFF;
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	2200      	movs	r2, #0
 8015320:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    pDataParams->bCidPresence     = FALSE;
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	2200      	movs	r2, #0
 8015328:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    pDataParams->bNadPresence     = FALSE;
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	2200      	movs	r2, #0
 8015330:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Reset the position in case the PICC stopped abruptly due to RF OFF during chaining */
    PH_CHECK_SUCCESS_FCT(wStatus, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXBUFFER_STARTPOS, 0));
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	685b      	ldr	r3, [r3, #4]
 8015338:	2200      	movs	r2, #0
 801533a:	2130      	movs	r1, #48	@ 0x30
 801533c:	4618      	mov	r0, r3
 801533e:	f7f7 ffe7 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8015342:	4603      	mov	r3, r0
 8015344:	81fb      	strh	r3, [r7, #14]
 8015346:	89fb      	ldrh	r3, [r7, #14]
 8015348:	2b00      	cmp	r3, #0
 801534a:	d001      	beq.n	8015350 <phpalI14443p4mC_Sw_ResetProtocol+0xa4>
 801534c:	89fb      	ldrh	r3, [r7, #14]
 801534e:	e000      	b.n	8015352 <phpalI14443p4mC_Sw_ResetProtocol+0xa6>

    return wStatus;
 8015350:	89fb      	ldrh	r3, [r7, #14]
}
 8015352:	4618      	mov	r0, r3
 8015354:	3710      	adds	r7, #16
 8015356:	46bd      	mov	sp, r7
 8015358:	bd80      	pop	{r7, pc}

0801535a <phpalI18000p3m3_Sw_Init>:
phStatus_t phpalI18000p3m3_Sw_Init(
                                   phpalI18000p3m3_Sw_DataParams_t * pDataParams,
                                   uint16_t wSizeOfDataParams,
                                   void * pHalDataParams
                                   )
{
 801535a:	b480      	push	{r7}
 801535c:	b085      	sub	sp, #20
 801535e:	af00      	add	r7, sp, #0
 8015360:	60f8      	str	r0, [r7, #12]
 8015362:	460b      	mov	r3, r1
 8015364:	607a      	str	r2, [r7, #4]
 8015366:	817b      	strh	r3, [r7, #10]
    if (sizeof(phpalI18000p3m3_Sw_DataParams_t) != wSizeOfDataParams)
 8015368:	897b      	ldrh	r3, [r7, #10]
 801536a:	2b0c      	cmp	r3, #12
 801536c:	d002      	beq.n	8015374 <phpalI18000p3m3_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_I18000P3M3);
 801536e:	f44f 6332 	mov.w	r3, #2848	@ 0xb20
 8015372:	e017      	b.n	80153a4 <phpalI18000p3m3_Sw_Init+0x4a>
    }
    PH_ASSERT_NULL (pDataParams);
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	2b00      	cmp	r3, #0
 8015378:	d101      	bne.n	801537e <phpalI18000p3m3_Sw_Init+0x24>
 801537a:	2321      	movs	r3, #33	@ 0x21
 801537c:	e012      	b.n	80153a4 <phpalI18000p3m3_Sw_Init+0x4a>
    PH_ASSERT_NULL (pHalDataParams);
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	2b00      	cmp	r3, #0
 8015382:	d101      	bne.n	8015388 <phpalI18000p3m3_Sw_Init+0x2e>
 8015384:	2321      	movs	r3, #33	@ 0x21
 8015386:	e00d      	b.n	80153a4 <phpalI18000p3m3_Sw_Init+0x4a>

    pDataParams->wId                = PH_COMP_PAL_I18000P3M3 | PHPAL_I18000P3M3_SW_ID;
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	f640 3201 	movw	r2, #2817	@ 0xb01
 801538e:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams     = pHalDataParams;
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	687a      	ldr	r2, [r7, #4]
 8015394:	605a      	str	r2, [r3, #4]
    pDataParams->bSession           = PHPAL_I18000P3M3_SESSION_S0;
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	2200      	movs	r2, #0
 801539a:	721a      	strb	r2, [r3, #8]
    pDataParams->bStoredCRCValid    = PH_OFF;
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	2200      	movs	r2, #0
 80153a0:	72da      	strb	r2, [r3, #11]

    return PH_ERR_SUCCESS;
 80153a2:	2300      	movs	r3, #0
}
 80153a4:	4618      	mov	r0, r3
 80153a6:	3714      	adds	r7, #20
 80153a8:	46bd      	mov	sp, r7
 80153aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ae:	4770      	bx	lr

080153b0 <phpalI18000p3m3_Sw_CreateSelectCmd>:
                                         uint8_t bTruncate,
                                         uint8_t * pSelectCmd,
                                         uint8_t * bLen,
                                         uint8_t * bValidBits
                                        )
{
 80153b0:	b480      	push	{r7}
 80153b2:	b085      	sub	sp, #20
 80153b4:	af00      	add	r7, sp, #0
 80153b6:	6078      	str	r0, [r7, #4]
 80153b8:	4608      	mov	r0, r1
 80153ba:	4611      	mov	r1, r2
 80153bc:	461a      	mov	r2, r3
 80153be:	4603      	mov	r3, r0
 80153c0:	70fb      	strb	r3, [r7, #3]
 80153c2:	460b      	mov	r3, r1
 80153c4:	70bb      	strb	r3, [r7, #2]
 80153c6:	4613      	mov	r3, r2
 80153c8:	707b      	strb	r3, [r7, #1]
    uint8_t     PH_MEMLOC_COUNT bIndex;
    uint8_t     PH_MEMLOC_REM bCmdLength;
    uint8_t     PH_MEMLOC_REM bTmp;
    uint8_t     PH_MEMLOC_REM bMaskByteLength;
    uint16_t    PH_MEMLOC_REM wCmdBitLength = 0;
 80153ca:	2300      	movs	r3, #0
 80153cc:	817b      	strh	r3, [r7, #10]
    PH_UNUSED_VARIABLE(pDataParams);
    /* Parameter check */
    if ((bTarget > 0x07U) || (bAction > 0x07U) || (bMemBank > 0x03U) || (bPointerLength > 3U) || (bTruncate > 1U))
 80153ce:	78fb      	ldrb	r3, [r7, #3]
 80153d0:	2b07      	cmp	r3, #7
 80153d2:	d80c      	bhi.n	80153ee <phpalI18000p3m3_Sw_CreateSelectCmd+0x3e>
 80153d4:	78bb      	ldrb	r3, [r7, #2]
 80153d6:	2b07      	cmp	r3, #7
 80153d8:	d809      	bhi.n	80153ee <phpalI18000p3m3_Sw_CreateSelectCmd+0x3e>
 80153da:	787b      	ldrb	r3, [r7, #1]
 80153dc:	2b03      	cmp	r3, #3
 80153de:	d806      	bhi.n	80153ee <phpalI18000p3m3_Sw_CreateSelectCmd+0x3e>
 80153e0:	7f3b      	ldrb	r3, [r7, #28]
 80153e2:	2b03      	cmp	r3, #3
 80153e4:	d803      	bhi.n	80153ee <phpalI18000p3m3_Sw_CreateSelectCmd+0x3e>
 80153e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80153ea:	2b01      	cmp	r3, #1
 80153ec:	d902      	bls.n	80153f4 <phpalI18000p3m3_Sw_CreateSelectCmd+0x44>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_I18000P3M3);
 80153ee:	f640 3321 	movw	r3, #2849	@ 0xb21
 80153f2:	e0f0      	b.n	80155d6 <phpalI18000p3m3_Sw_CreateSelectCmd+0x226>
    }

    /* Build Command frame */
    bCmdLength = 0;
 80153f4:	2300      	movs	r3, #0
 80153f6:	73bb      	strb	r3, [r7, #14]
    *(pSelectCmd + bCmdLength++) = (PHPAL_I18000P3M3_CMD_SELECT << 4U) | (bTarget << 1U) | (bAction >> 2U);  /* 0 bits left */
 80153f8:	78fb      	ldrb	r3, [r7, #3]
 80153fa:	005b      	lsls	r3, r3, #1
 80153fc:	b2da      	uxtb	r2, r3
 80153fe:	78bb      	ldrb	r3, [r7, #2]
 8015400:	089b      	lsrs	r3, r3, #2
 8015402:	b2db      	uxtb	r3, r3
 8015404:	4313      	orrs	r3, r2
 8015406:	b2da      	uxtb	r2, r3
 8015408:	7bbb      	ldrb	r3, [r7, #14]
 801540a:	1c59      	adds	r1, r3, #1
 801540c:	73b9      	strb	r1, [r7, #14]
 801540e:	4619      	mov	r1, r3
 8015410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015412:	440b      	add	r3, r1
 8015414:	f062 025f 	orn	r2, r2, #95	@ 0x5f
 8015418:	b2d2      	uxtb	r2, r2
 801541a:	701a      	strb	r2, [r3, #0]
    *(pSelectCmd + bCmdLength)   = (bAction << 6U) | (bMemBank <<  4U) | (bPointerLength << 2U);             /* 2 bits left */
 801541c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8015420:	019b      	lsls	r3, r3, #6
 8015422:	b25a      	sxtb	r2, r3
 8015424:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8015428:	011b      	lsls	r3, r3, #4
 801542a:	b25b      	sxtb	r3, r3
 801542c:	4313      	orrs	r3, r2
 801542e:	b25a      	sxtb	r2, r3
 8015430:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8015434:	009b      	lsls	r3, r3, #2
 8015436:	b25b      	sxtb	r3, r3
 8015438:	4313      	orrs	r3, r2
 801543a:	b259      	sxtb	r1, r3
 801543c:	7bbb      	ldrb	r3, [r7, #14]
 801543e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015440:	4413      	add	r3, r2
 8015442:	b2ca      	uxtb	r2, r1
 8015444:	701a      	strb	r2, [r3, #0]

    /* append pointer */
    for (bIndex = 0; bIndex < (bPointerLength + /* */ 1U); ++bIndex)
 8015446:	2300      	movs	r3, #0
 8015448:	73fb      	strb	r3, [r7, #15]
 801544a:	e01f      	b.n	801548c <phpalI18000p3m3_Sw_CreateSelectCmd+0xdc>
    {
        *(pSelectCmd + bCmdLength++) |= (pPointer[bIndex]) >> 6U;
 801544c:	7bbb      	ldrb	r3, [r7, #14]
 801544e:	1c5a      	adds	r2, r3, #1
 8015450:	73ba      	strb	r2, [r7, #14]
 8015452:	4619      	mov	r1, r3
 8015454:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015456:	440a      	add	r2, r1
 8015458:	7811      	ldrb	r1, [r2, #0]
 801545a:	7bfa      	ldrb	r2, [r7, #15]
 801545c:	69b8      	ldr	r0, [r7, #24]
 801545e:	4402      	add	r2, r0
 8015460:	7812      	ldrb	r2, [r2, #0]
 8015462:	0992      	lsrs	r2, r2, #6
 8015464:	b2d2      	uxtb	r2, r2
 8015466:	4618      	mov	r0, r3
 8015468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801546a:	4403      	add	r3, r0
 801546c:	430a      	orrs	r2, r1
 801546e:	b2d2      	uxtb	r2, r2
 8015470:	701a      	strb	r2, [r3, #0]
        *(pSelectCmd + bCmdLength)    = (pPointer[bIndex]) << 2U;
 8015472:	7bfb      	ldrb	r3, [r7, #15]
 8015474:	69ba      	ldr	r2, [r7, #24]
 8015476:	4413      	add	r3, r2
 8015478:	781a      	ldrb	r2, [r3, #0]
 801547a:	7bbb      	ldrb	r3, [r7, #14]
 801547c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801547e:	440b      	add	r3, r1
 8015480:	0092      	lsls	r2, r2, #2
 8015482:	b2d2      	uxtb	r2, r2
 8015484:	701a      	strb	r2, [r3, #0]
    for (bIndex = 0; bIndex < (bPointerLength + /* */ 1U); ++bIndex)
 8015486:	7bfb      	ldrb	r3, [r7, #15]
 8015488:	3301      	adds	r3, #1
 801548a:	73fb      	strb	r3, [r7, #15]
 801548c:	7bfa      	ldrb	r2, [r7, #15]
 801548e:	7f3b      	ldrb	r3, [r7, #28]
 8015490:	3301      	adds	r3, #1
 8015492:	429a      	cmp	r2, r3
 8015494:	d3da      	bcc.n	801544c <phpalI18000p3m3_Sw_CreateSelectCmd+0x9c>
    }
    /* 2 bits left */

    *(pSelectCmd + bCmdLength++) |= bMaskBitLength >> 6U;
 8015496:	7bbb      	ldrb	r3, [r7, #14]
 8015498:	1c5a      	adds	r2, r3, #1
 801549a:	73ba      	strb	r2, [r7, #14]
 801549c:	4619      	mov	r1, r3
 801549e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80154a0:	440a      	add	r2, r1
 80154a2:	7811      	ldrb	r1, [r2, #0]
 80154a4:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80154a8:	0992      	lsrs	r2, r2, #6
 80154aa:	b2d2      	uxtb	r2, r2
 80154ac:	4618      	mov	r0, r3
 80154ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154b0:	4403      	add	r3, r0
 80154b2:	430a      	orrs	r2, r1
 80154b4:	b2d2      	uxtb	r2, r2
 80154b6:	701a      	strb	r2, [r3, #0]
    *(pSelectCmd + bCmdLength)    = bMaskBitLength << 2U;  /* 2 bits left */
 80154b8:	7bbb      	ldrb	r3, [r7, #14]
 80154ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80154bc:	4413      	add	r3, r2
 80154be:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80154c2:	0092      	lsls	r2, r2, #2
 80154c4:	b2d2      	uxtb	r2, r2
 80154c6:	701a      	strb	r2, [r3, #0]

    /* calculate intermediate bitlength */
    wCmdBitLength = ((uint16_t)bCmdLength << 3U) + 6U;
 80154c8:	7bbb      	ldrb	r3, [r7, #14]
 80154ca:	b29b      	uxth	r3, r3
 80154cc:	00db      	lsls	r3, r3, #3
 80154ce:	b29b      	uxth	r3, r3
 80154d0:	3306      	adds	r3, #6
 80154d2:	817b      	strh	r3, [r7, #10]

    /* get byte-length of mask */
    bMaskByteLength = bMaskBitLength >> 3U;
 80154d4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80154d8:	08db      	lsrs	r3, r3, #3
 80154da:	733b      	strb	r3, [r7, #12]
    if (0U != (bMaskBitLength & 0x07U))
 80154dc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80154e0:	f003 0307 	and.w	r3, r3, #7
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d002      	beq.n	80154ee <phpalI18000p3m3_Sw_CreateSelectCmd+0x13e>
    {
        ++bMaskByteLength;
 80154e8:	7b3b      	ldrb	r3, [r7, #12]
 80154ea:	3301      	adds	r3, #1
 80154ec:	733b      	strb	r3, [r7, #12]
    }

    /* append mask value */
    for (bIndex = 0; bIndex < bMaskByteLength; ++bIndex)
 80154ee:	2300      	movs	r3, #0
 80154f0:	73fb      	strb	r3, [r7, #15]
 80154f2:	e036      	b.n	8015562 <phpalI18000p3m3_Sw_CreateSelectCmd+0x1b2>
    {
        bTmp = pMask[bIndex];
 80154f4:	7bfb      	ldrb	r3, [r7, #15]
 80154f6:	6a3a      	ldr	r2, [r7, #32]
 80154f8:	4413      	add	r3, r2
 80154fa:	781b      	ldrb	r3, [r3, #0]
 80154fc:	737b      	strb	r3, [r7, #13]

        /* Mask out invalid bits of last byte */
        if ((bIndex == (bMaskByteLength - 1U)) && ((bMaskBitLength & 0x07U) > 0U))
 80154fe:	7bfa      	ldrb	r2, [r7, #15]
 8015500:	7b3b      	ldrb	r3, [r7, #12]
 8015502:	3b01      	subs	r3, #1
 8015504:	429a      	cmp	r2, r3
 8015506:	d112      	bne.n	801552e <phpalI18000p3m3_Sw_CreateSelectCmd+0x17e>
 8015508:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801550c:	f003 0307 	and.w	r3, r3, #7
 8015510:	2b00      	cmp	r3, #0
 8015512:	d00c      	beq.n	801552e <phpalI18000p3m3_Sw_CreateSelectCmd+0x17e>
        {
            bTmp &= (uint8_t)(0xFFU << (8U - (bMaskBitLength & 0x07U)));
 8015514:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015518:	f003 0307 	and.w	r3, r3, #7
 801551c:	f1c3 0308 	rsb	r3, r3, #8
 8015520:	22ff      	movs	r2, #255	@ 0xff
 8015522:	fa02 f303 	lsl.w	r3, r2, r3
 8015526:	b2da      	uxtb	r2, r3
 8015528:	7b7b      	ldrb	r3, [r7, #13]
 801552a:	4013      	ands	r3, r2
 801552c:	737b      	strb	r3, [r7, #13]
        }

        /* Append mask value */
        *(pSelectCmd + bCmdLength++) |= bTmp >> 6U;
 801552e:	7bbb      	ldrb	r3, [r7, #14]
 8015530:	1c5a      	adds	r2, r3, #1
 8015532:	73ba      	strb	r2, [r7, #14]
 8015534:	4619      	mov	r1, r3
 8015536:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015538:	440a      	add	r2, r1
 801553a:	7811      	ldrb	r1, [r2, #0]
 801553c:	7b7a      	ldrb	r2, [r7, #13]
 801553e:	0992      	lsrs	r2, r2, #6
 8015540:	b2d2      	uxtb	r2, r2
 8015542:	4618      	mov	r0, r3
 8015544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015546:	4403      	add	r3, r0
 8015548:	430a      	orrs	r2, r1
 801554a:	b2d2      	uxtb	r2, r2
 801554c:	701a      	strb	r2, [r3, #0]
        *(pSelectCmd + bCmdLength)    = bTmp << 2U;
 801554e:	7bbb      	ldrb	r3, [r7, #14]
 8015550:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015552:	4413      	add	r3, r2
 8015554:	7b7a      	ldrb	r2, [r7, #13]
 8015556:	0092      	lsls	r2, r2, #2
 8015558:	b2d2      	uxtb	r2, r2
 801555a:	701a      	strb	r2, [r3, #0]
    for (bIndex = 0; bIndex < bMaskByteLength; ++bIndex)
 801555c:	7bfb      	ldrb	r3, [r7, #15]
 801555e:	3301      	adds	r3, #1
 8015560:	73fb      	strb	r3, [r7, #15]
 8015562:	7bfa      	ldrb	r2, [r7, #15]
 8015564:	7b3b      	ldrb	r3, [r7, #12]
 8015566:	429a      	cmp	r2, r3
 8015568:	d3c4      	bcc.n	80154f4 <phpalI18000p3m3_Sw_CreateSelectCmd+0x144>
    }
    /* calculate new bit length */
    wCmdBitLength = wCmdBitLength + bMaskBitLength;
 801556a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801556e:	b29a      	uxth	r2, r3
 8015570:	897b      	ldrh	r3, [r7, #10]
 8015572:	4413      	add	r3, r2
 8015574:	817b      	strh	r3, [r7, #10]

    /* decrement length if we incremented too much */
    if ((wCmdBitLength >> 3U) != bCmdLength)
 8015576:	897b      	ldrh	r3, [r7, #10]
 8015578:	08db      	lsrs	r3, r3, #3
 801557a:	b29a      	uxth	r2, r3
 801557c:	7bbb      	ldrb	r3, [r7, #14]
 801557e:	b29b      	uxth	r3, r3
 8015580:	429a      	cmp	r2, r3
 8015582:	d002      	beq.n	801558a <phpalI18000p3m3_Sw_CreateSelectCmd+0x1da>
    {
        --bCmdLength;
 8015584:	7bbb      	ldrb	r3, [r7, #14]
 8015586:	3b01      	subs	r3, #1
 8015588:	73bb      	strb	r3, [r7, #14]
    }

    /* append truncate bit */
    if (bTruncate != PH_OFF)
 801558a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801558e:	2b00      	cmp	r3, #0
 8015590:	d010      	beq.n	80155b4 <phpalI18000p3m3_Sw_CreateSelectCmd+0x204>
    {
        *(pSelectCmd + bCmdLength) |= (uint8_t)(0x80U >> (wCmdBitLength & 0x07U));
 8015592:	7bbb      	ldrb	r3, [r7, #14]
 8015594:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015596:	4413      	add	r3, r2
 8015598:	7819      	ldrb	r1, [r3, #0]
 801559a:	897b      	ldrh	r3, [r7, #10]
 801559c:	f003 0307 	and.w	r3, r3, #7
 80155a0:	2280      	movs	r2, #128	@ 0x80
 80155a2:	fa22 f303 	lsr.w	r3, r2, r3
 80155a6:	b2da      	uxtb	r2, r3
 80155a8:	7bbb      	ldrb	r3, [r7, #14]
 80155aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80155ac:	4403      	add	r3, r0
 80155ae:	430a      	orrs	r2, r1
 80155b0:	b2d2      	uxtb	r2, r2
 80155b2:	701a      	strb	r2, [r3, #0]
    }
    ++bCmdLength;
 80155b4:	7bbb      	ldrb	r3, [r7, #14]
 80155b6:	3301      	adds	r3, #1
 80155b8:	73bb      	strb	r3, [r7, #14]
    ++wCmdBitLength;
 80155ba:	897b      	ldrh	r3, [r7, #10]
 80155bc:	3301      	adds	r3, #1
 80155be:	817b      	strh	r3, [r7, #10]
    *bLen = bCmdLength;
 80155c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155c2:	7bba      	ldrb	r2, [r7, #14]
 80155c4:	701a      	strb	r2, [r3, #0]
    *bValidBits = (uint8_t)(wCmdBitLength & 0x07U);
 80155c6:	897b      	ldrh	r3, [r7, #10]
 80155c8:	b2db      	uxtb	r3, r3
 80155ca:	f003 0307 	and.w	r3, r3, #7
 80155ce:	b2da      	uxtb	r2, r3
 80155d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80155d2:	701a      	strb	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 80155d4:	2300      	movs	r3, #0
}
 80155d6:	4618      	mov	r0, r3
 80155d8:	3714      	adds	r7, #20
 80155da:	46bd      	mov	sp, r7
 80155dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155e0:	4770      	bx	lr

080155e2 <phpalI18000p3m3_Sw_CreateBeginRoundCmd>:
    uint8_t bSession,
    uint8_t bRfu,
    uint8_t bQ,
    uint8_t * pBeginRnd
    )
{
 80155e2:	b580      	push	{r7, lr}
 80155e4:	b084      	sub	sp, #16
 80155e6:	af00      	add	r7, sp, #0
 80155e8:	6078      	str	r0, [r7, #4]
 80155ea:	4608      	mov	r0, r1
 80155ec:	4611      	mov	r1, r2
 80155ee:	461a      	mov	r2, r3
 80155f0:	4603      	mov	r3, r0
 80155f2:	70fb      	strb	r3, [r7, #3]
 80155f4:	460b      	mov	r3, r1
 80155f6:	70bb      	strb	r3, [r7, #2]
 80155f8:	4613      	mov	r3, r2
 80155fa:	707b      	strb	r3, [r7, #1]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t PH_MEMLOC_REM wValue = 0;
 80155fc:	2300      	movs	r3, #0
 80155fe:	81fb      	strh	r3, [r7, #14]
    /* Parameter check */
    if ((bDr > 0x01U) || (bM < 0x02U) || (bM > 0x03U) || (bTRext > 1U) || (bSel > 0x03U) || (bSession > 0x03U) || (bRfu > 0x01U) || (bQ > 0x0FU))
 8015600:	78fb      	ldrb	r3, [r7, #3]
 8015602:	2b01      	cmp	r3, #1
 8015604:	d816      	bhi.n	8015634 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 8015606:	78bb      	ldrb	r3, [r7, #2]
 8015608:	2b01      	cmp	r3, #1
 801560a:	d913      	bls.n	8015634 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 801560c:	78bb      	ldrb	r3, [r7, #2]
 801560e:	2b03      	cmp	r3, #3
 8015610:	d810      	bhi.n	8015634 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 8015612:	787b      	ldrb	r3, [r7, #1]
 8015614:	2b01      	cmp	r3, #1
 8015616:	d80d      	bhi.n	8015634 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 8015618:	7e3b      	ldrb	r3, [r7, #24]
 801561a:	2b03      	cmp	r3, #3
 801561c:	d80a      	bhi.n	8015634 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 801561e:	7f3b      	ldrb	r3, [r7, #28]
 8015620:	2b03      	cmp	r3, #3
 8015622:	d807      	bhi.n	8015634 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 8015624:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015628:	2b01      	cmp	r3, #1
 801562a:	d803      	bhi.n	8015634 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 801562c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015630:	2b0f      	cmp	r3, #15
 8015632:	d902      	bls.n	801563a <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x58>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_I18000P3M3);
 8015634:	f640 3321 	movw	r3, #2849	@ 0xb21
 8015638:	e072      	b.n	8015720 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x13e>
    }

    /* Store new session parameter */
   pDataParams->bSession = bSession;
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	7f3a      	ldrb	r2, [r7, #28]
 801563e:	721a      	strb	r2, [r3, #8]

    /* Map TRext to 0 or 1 */
    if (bTRext != PH_OFF)
 8015640:	787b      	ldrb	r3, [r7, #1]
 8015642:	2b00      	cmp	r3, #0
 8015644:	d002      	beq.n	801564c <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x6a>
    {
        bTRext = 1;
 8015646:	2301      	movs	r3, #1
 8015648:	707b      	strb	r3, [r7, #1]
 801564a:	e001      	b.n	8015650 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x6e>
    }
    else
    {
        bTRext = 0;
 801564c:	2300      	movs	r3, #0
 801564e:	707b      	strb	r3, [r7, #1]
    }

    /* Build Command frame */
    *pBeginRnd = (PHPAL_I18000P3M3_CMD_BEGIN_ROUND << 4U) | (bDr << 3U) | (bM << 1U) | (bTRext);  /* 0 bits left */
 8015650:	78fb      	ldrb	r3, [r7, #3]
 8015652:	00db      	lsls	r3, r3, #3
 8015654:	b2da      	uxtb	r2, r3
 8015656:	78bb      	ldrb	r3, [r7, #2]
 8015658:	005b      	lsls	r3, r3, #1
 801565a:	b2db      	uxtb	r3, r3
 801565c:	4313      	orrs	r3, r2
 801565e:	b2da      	uxtb	r2, r3
 8015660:	787b      	ldrb	r3, [r7, #1]
 8015662:	4313      	orrs	r3, r2
 8015664:	b2db      	uxtb	r3, r3
 8015666:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801566a:	b2da      	uxtb	r2, r3
 801566c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801566e:	701a      	strb	r2, [r3, #0]
    *(pBeginRnd+1U) = (bSel << 6U) | (bSession << 4U) | (bRfu << 3U) | (bQ >> 1U);                      /* 0 bits left */
 8015670:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8015674:	019b      	lsls	r3, r3, #6
 8015676:	b25a      	sxtb	r2, r3
 8015678:	f997 301c 	ldrsb.w	r3, [r7, #28]
 801567c:	011b      	lsls	r3, r3, #4
 801567e:	b25b      	sxtb	r3, r3
 8015680:	4313      	orrs	r3, r2
 8015682:	b25a      	sxtb	r2, r3
 8015684:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8015688:	00db      	lsls	r3, r3, #3
 801568a:	b25b      	sxtb	r3, r3
 801568c:	4313      	orrs	r3, r2
 801568e:	b25a      	sxtb	r2, r3
 8015690:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015694:	085b      	lsrs	r3, r3, #1
 8015696:	b2db      	uxtb	r3, r3
 8015698:	b25b      	sxtb	r3, r3
 801569a:	4313      	orrs	r3, r2
 801569c:	b25a      	sxtb	r2, r3
 801569e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156a0:	3301      	adds	r3, #1
 80156a2:	b2d2      	uxtb	r2, r2
 80156a4:	701a      	strb	r2, [r3, #0]
    *(pBeginRnd+2U) = (bQ << 7U);                                                                    /* 7 bits left */
 80156a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156a8:	3302      	adds	r3, #2
 80156aa:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80156ae:	01d2      	lsls	r2, r2, #7
 80156b0:	b2d2      	uxtb	r2, r2
 80156b2:	701a      	strb	r2, [r3, #0]

    if(bDr == 0U)
 80156b4:	78fb      	ldrb	r3, [r7, #3]
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d108      	bne.n	80156cc <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0xea>
    {
        if(bM == 2U)
 80156ba:	78bb      	ldrb	r3, [r7, #2]
 80156bc:	2b02      	cmp	r3, #2
 80156be:	d102      	bne.n	80156c6 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0xe4>
        {
            wValue = PHHAL_HW_RX_I18000P3M3_FL_423_MAN2;
 80156c0:	2313      	movs	r3, #19
 80156c2:	81fb      	strh	r3, [r7, #14]
 80156c4:	e00a      	b.n	80156dc <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0xfa>
        }
        else
        {
            wValue = PHHAL_HW_RX_I18000P3M3_FL_423_MAN4;
 80156c6:	2315      	movs	r3, #21
 80156c8:	81fb      	strh	r3, [r7, #14]
 80156ca:	e007      	b.n	80156dc <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0xfa>
        }
    }
    else
    {
        if(bM == 2U)
 80156cc:	78bb      	ldrb	r3, [r7, #2]
 80156ce:	2b02      	cmp	r3, #2
 80156d0:	d102      	bne.n	80156d8 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0xf6>
        {
            wValue = PHHAL_HW_RX_I18000P3M3_FL_847_MAN2;
 80156d2:	2314      	movs	r3, #20
 80156d4:	81fb      	strh	r3, [r7, #14]
 80156d6:	e001      	b.n	80156dc <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0xfa>
        }
        else
        {
            wValue = PHHAL_HW_RX_I18000P3M3_FL_847_MAN4;
 80156d8:	2316      	movs	r3, #22
 80156da:	81fb      	strh	r3, [r7, #14]
        }
    }

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	685b      	ldr	r3, [r3, #4]
 80156e0:	89fa      	ldrh	r2, [r7, #14]
 80156e2:	210a      	movs	r1, #10
 80156e4:	4618      	mov	r0, r3
 80156e6:	f7f7 fe13 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 80156ea:	4603      	mov	r3, r0
 80156ec:	81bb      	strh	r3, [r7, #12]
 80156ee:	89bb      	ldrh	r3, [r7, #12]
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	d001      	beq.n	80156f8 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x116>
 80156f4:	89bb      	ldrh	r3, [r7, #12]
 80156f6:	e013      	b.n	8015720 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x13e>
                pDataParams->pHalDataParams,
                PHHAL_HW_CONFIG_RXDATARATE_FRAMING,
                wValue));

    /* Set Subcarrier */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	6858      	ldr	r0, [r3, #4]
 80156fc:	78fb      	ldrb	r3, [r7, #3]
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d101      	bne.n	8015706 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x124>
 8015702:	2301      	movs	r3, #1
 8015704:	e000      	b.n	8015708 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x126>
 8015706:	2302      	movs	r3, #2
 8015708:	461a      	mov	r2, r3
 801570a:	210f      	movs	r1, #15
 801570c:	f7f7 fe00 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8015710:	4603      	mov	r3, r0
 8015712:	81bb      	strh	r3, [r7, #12]
 8015714:	89bb      	ldrh	r3, [r7, #12]
 8015716:	2b00      	cmp	r3, #0
 8015718:	d001      	beq.n	801571e <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x13c>
 801571a:	89bb      	ldrh	r3, [r7, #12]
 801571c:	e000      	b.n	8015720 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x13e>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_SUBCARRIER,
        (bDr == 0U) ? PHHAL_HW_SUBCARRIER_DUAL : PHHAL_HW_SUBCARRIER_QUAD));

    return PH_ERR_SUCCESS;
 801571e:	2300      	movs	r3, #0
}
 8015720:	4618      	mov	r0, r3
 8015722:	3710      	adds	r7, #16
 8015724:	46bd      	mov	sp, r7
 8015726:	bd80      	pop	{r7, pc}

08015728 <phpalMifare_Sw_Init>:
                               phpalMifare_Sw_DataParams_t * pDataParams,
                               uint16_t wSizeOfDataParams,
                               void * pHalDataParams,
                               void * pPalI14443p4DataParams
                               )
{
 8015728:	b480      	push	{r7}
 801572a:	b085      	sub	sp, #20
 801572c:	af00      	add	r7, sp, #0
 801572e:	60f8      	str	r0, [r7, #12]
 8015730:	607a      	str	r2, [r7, #4]
 8015732:	603b      	str	r3, [r7, #0]
 8015734:	460b      	mov	r3, r1
 8015736:	817b      	strh	r3, [r7, #10]
    if (sizeof(phpalMifare_Sw_DataParams_t) != wSizeOfDataParams)
 8015738:	897b      	ldrh	r3, [r7, #10]
 801573a:	2b0c      	cmp	r3, #12
 801573c:	d002      	beq.n	8015744 <phpalMifare_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_MIFARE);
 801573e:	f44f 63e4 	mov.w	r3, #1824	@ 0x720
 8015742:	e014      	b.n	801576e <phpalMifare_Sw_Init+0x46>
    }
    PH_ASSERT_NULL (pDataParams);
 8015744:	68fb      	ldr	r3, [r7, #12]
 8015746:	2b00      	cmp	r3, #0
 8015748:	d101      	bne.n	801574e <phpalMifare_Sw_Init+0x26>
 801574a:	2321      	movs	r3, #33	@ 0x21
 801574c:	e00f      	b.n	801576e <phpalMifare_Sw_Init+0x46>
    PH_ASSERT_NULL (pHalDataParams);
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	2b00      	cmp	r3, #0
 8015752:	d101      	bne.n	8015758 <phpalMifare_Sw_Init+0x30>
 8015754:	2321      	movs	r3, #33	@ 0x21
 8015756:	e00a      	b.n	801576e <phpalMifare_Sw_Init+0x46>

    /* init private data */
    pDataParams->wId                    = PH_COMP_PAL_MIFARE | PHPAL_MIFARE_SW_ID;
 8015758:	68fb      	ldr	r3, [r7, #12]
 801575a:	f240 7202 	movw	r2, #1794	@ 0x702
 801575e:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams         = pHalDataParams;
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	687a      	ldr	r2, [r7, #4]
 8015764:	605a      	str	r2, [r3, #4]
    pDataParams->pPalI14443p4DataParams = pPalI14443p4DataParams;
 8015766:	68fb      	ldr	r3, [r7, #12]
 8015768:	683a      	ldr	r2, [r7, #0]
 801576a:	609a      	str	r2, [r3, #8]
    return PH_ERR_SUCCESS;
 801576c:	2300      	movs	r3, #0
}
 801576e:	4618      	mov	r0, r3
 8015770:	3714      	adds	r7, #20
 8015772:	46bd      	mov	sp, r7
 8015774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015778:	4770      	bx	lr

0801577a <phpalSli15693_Sw_Init>:
phStatus_t phpalSli15693_Sw_Init(
                                 phpalSli15693_Sw_DataParams_t * pDataParams,
                                 uint16_t wSizeOfDataParams,
                                 void * pHalDataParams
                                 )
{
 801577a:	b480      	push	{r7}
 801577c:	b085      	sub	sp, #20
 801577e:	af00      	add	r7, sp, #0
 8015780:	60f8      	str	r0, [r7, #12]
 8015782:	460b      	mov	r3, r1
 8015784:	607a      	str	r2, [r7, #4]
 8015786:	817b      	strh	r3, [r7, #10]
    PH_ASSERT_NULL (pDataParams);
 8015788:	68fb      	ldr	r3, [r7, #12]
 801578a:	2b00      	cmp	r3, #0
 801578c:	d101      	bne.n	8015792 <phpalSli15693_Sw_Init+0x18>
 801578e:	2321      	movs	r3, #33	@ 0x21
 8015790:	e02d      	b.n	80157ee <phpalSli15693_Sw_Init+0x74>
    PH_ASSERT_NULL (pHalDataParams);
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	2b00      	cmp	r3, #0
 8015796:	d101      	bne.n	801579c <phpalSli15693_Sw_Init+0x22>
 8015798:	2321      	movs	r3, #33	@ 0x21
 801579a:	e028      	b.n	80157ee <phpalSli15693_Sw_Init+0x74>

    /* parameter structure length check */
    if (sizeof(phpalSli15693_Sw_DataParams_t) != wSizeOfDataParams)
 801579c:	897b      	ldrh	r3, [r7, #10]
 801579e:	2b1c      	cmp	r3, #28
 80157a0:	d002      	beq.n	80157a8 <phpalSli15693_Sw_Init+0x2e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_SLI15693);
 80157a2:	f44f 6322 	mov.w	r3, #2592	@ 0xa20
 80157a6:	e022      	b.n	80157ee <phpalSli15693_Sw_Init+0x74>
    }

    /* init private data */
    pDataParams->wId                = PH_COMP_PAL_SLI15693 | PHPAL_SLI15693_SW_ID;
 80157a8:	68fb      	ldr	r3, [r7, #12]
 80157aa:	f640 2201 	movw	r2, #2561	@ 0xa01
 80157ae:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams     = pHalDataParams;
 80157b0:	68fb      	ldr	r3, [r7, #12]
 80157b2:	687a      	ldr	r2, [r7, #4]
 80157b4:	605a      	str	r2, [r3, #4]
    pDataParams->wAdditionalInfo    = 0;
 80157b6:	68fb      	ldr	r3, [r7, #12]
 80157b8:	2200      	movs	r2, #0
 80157ba:	811a      	strh	r2, [r3, #8]
    pDataParams->bFlags             = PHPAL_SLI15693_SW_FLAGS_DEFAULT;
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	2206      	movs	r2, #6
 80157c0:	729a      	strb	r2, [r3, #10]
    pDataParams->bUidBitLength      = 0;
 80157c2:	68fb      	ldr	r3, [r7, #12]
 80157c4:	2200      	movs	r2, #0
 80157c6:	751a      	strb	r2, [r3, #20]
    pDataParams->bExplicitlyAddressed = 0;
 80157c8:	68fb      	ldr	r3, [r7, #12]
 80157ca:	2200      	movs	r2, #0
 80157cc:	755a      	strb	r2, [r3, #21]
    pDataParams->bOpeMode           = RD_LIB_MODE_ISO; /* Default Mode is ISO */
 80157ce:	68fb      	ldr	r3, [r7, #12]
 80157d0:	2203      	movs	r2, #3
 80157d2:	759a      	strb	r2, [r3, #22]
    pDataParams->bBuffering         = 0;
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	2200      	movs	r2, #0
 80157d8:	75da      	strb	r2, [r3, #23]
    pDataParams->bMaxRetryCount     = PHPAL_SLI15693_SW_RETRYCOUNT_DEFAULT;
 80157da:	68fb      	ldr	r3, [r7, #12]
 80157dc:	2202      	movs	r2, #2
 80157de:	761a      	strb	r2, [r3, #24]
    pDataParams->bIcMfgCode         = PHPAL_SLI15693_SW_NXP_MFG_CODE;
 80157e0:	68fb      	ldr	r3, [r7, #12]
 80157e2:	2204      	movs	r2, #4
 80157e4:	765a      	strb	r2, [r3, #25]
    pDataParams->bResFlags          = 0;
 80157e6:	68fb      	ldr	r3, [r7, #12]
 80157e8:	2200      	movs	r2, #0
 80157ea:	72da      	strb	r2, [r3, #11]

    return PH_ERR_SUCCESS;
 80157ec:	2300      	movs	r3, #0
}
 80157ee:	4618      	mov	r0, r3
 80157f0:	3714      	adds	r7, #20
 80157f2:	46bd      	mov	sp, r7
 80157f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157f8:	4770      	bx	lr

080157fa <phpalSli15693_Sw_Inventory>:
                                      uint8_t * pMask,
                                      uint8_t bMaskBitLength,
                                      uint8_t * pDsfid,
                                      uint8_t * pUid
                                      )
{
 80157fa:	b580      	push	{r7, lr}
 80157fc:	b08e      	sub	sp, #56	@ 0x38
 80157fe:	af08      	add	r7, sp, #32
 8015800:	60f8      	str	r0, [r7, #12]
 8015802:	607b      	str	r3, [r7, #4]
 8015804:	460b      	mov	r3, r1
 8015806:	72fb      	strb	r3, [r7, #11]
 8015808:	4613      	mov	r3, r2
 801580a:	72bb      	strb	r3, [r7, #10]
    uint8_t     PH_MEMLOC_REM bUidLength;
    uint16_t    PH_MEMLOC_REM wDataLength = 0;
 801580c:	2300      	movs	r3, #0
 801580e:	82bb      	strh	r3, [r7, #20]

    return phpalSli15693_Sw_InventoryEx(
 8015810:	7ab9      	ldrb	r1, [r7, #10]
 8015812:	7afa      	ldrb	r2, [r7, #11]
 8015814:	f107 0314 	add.w	r3, r7, #20
 8015818:	9307      	str	r3, [sp, #28]
 801581a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801581c:	9306      	str	r3, [sp, #24]
 801581e:	f107 0317 	add.w	r3, r7, #23
 8015822:	9305      	str	r3, [sp, #20]
 8015824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015826:	9304      	str	r3, [sp, #16]
 8015828:	2300      	movs	r3, #0
 801582a:	9303      	str	r3, [sp, #12]
 801582c:	2300      	movs	r3, #0
 801582e:	9302      	str	r3, [sp, #8]
 8015830:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015834:	9301      	str	r3, [sp, #4]
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	9300      	str	r3, [sp, #0]
 801583a:	460b      	mov	r3, r1
 801583c:	2101      	movs	r1, #1
 801583e:	68f8      	ldr	r0, [r7, #12]
 8015840:	f000 fe64 	bl	801650c <phpalSli15693_Sw_InventoryEx>
 8015844:	4603      	mov	r3, r0
        0,
        pUid,
        &bUidLength,
        pDsfid,
        &wDataLength);
}
 8015846:	4618      	mov	r0, r3
 8015848:	3718      	adds	r7, #24
 801584a:	46bd      	mov	sp, r7
 801584c:	bd80      	pop	{r7, pc}

0801584e <phpalSli15693_Sw_SendEof>:
                                    uint8_t * pUid,
                                    uint8_t * pUidLength,
                                    uint8_t * pData,
                                    uint16_t * pDataLength
                                    )
{
 801584e:	b580      	push	{r7, lr}
 8015850:	b08a      	sub	sp, #40	@ 0x28
 8015852:	af02      	add	r7, sp, #8
 8015854:	60f8      	str	r0, [r7, #12]
 8015856:	607a      	str	r2, [r7, #4]
 8015858:	603b      	str	r3, [r7, #0]
 801585a:	460b      	mov	r3, r1
 801585c:	72fb      	strb	r3, [r7, #11]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 801585e:	2300      	movs	r3, #0
 8015860:	617b      	str	r3, [r7, #20]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8015862:	2300      	movs	r3, #0
 8015864:	827b      	strh	r3, [r7, #18]
    uint8_t     PH_MEMLOC_REM bStoredUidLength;
    uint16_t    PH_MEMLOC_REM wAsk;
    uint16_t    PH_MEMLOC_REM wTimeout;

    /* Check bOption */
    switch (bOption)
 8015866:	7afb      	ldrb	r3, [r7, #11]
 8015868:	2b03      	cmp	r3, #3
 801586a:	d902      	bls.n	8015872 <phpalSli15693_Sw_SendEof+0x24>
    case PHPAL_SLI15693_EOF_NEXT_SLOT_INV_READ:
    case PHPAL_SLI15693_EOF_WRITE_ALIKE:
    case PHPAL_SLI15693_EOF_WRITE_ALIKE_WITH_WAIT:
        break;
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 801586c:	f640 2321 	movw	r3, #2593	@ 0xa21
 8015870:	e1c1      	b.n	8015bf6 <phpalSli15693_Sw_SendEof+0x3a8>
        break;
 8015872:	bf00      	nop
    }

    /* Reset UID and data lengths */
    *pDsfid = 0;
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	2200      	movs	r2, #0
 8015878:	701a      	strb	r2, [r3, #0]
    *pUidLength = 0;
 801587a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801587c:	2200      	movs	r2, #0
 801587e:	701a      	strb	r2, [r3, #0]
    *pDataLength = 0;
 8015880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015882:	2200      	movs	r2, #0
 8015884:	801a      	strh	r2, [r3, #0]

    /* if requested, wait ~20ms upon sending EOF */
    if (bOption == PHPAL_SLI15693_EOF_WRITE_ALIKE_WITH_WAIT)
 8015886:	7afb      	ldrb	r3, [r7, #11]
 8015888:	2b03      	cmp	r3, #3
 801588a:	d10e      	bne.n	80158aa <phpalSli15693_Sw_SendEof+0x5c>
    {
        /* in case of write alike commands wait 20 ms. */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	685b      	ldr	r3, [r3, #4]
 8015890:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8015894:	2100      	movs	r1, #0
 8015896:	4618      	mov	r0, r3
 8015898:	f7f7 fcb6 	bl	800d208 <phhalHw_Pn5180_Wait>
 801589c:	4603      	mov	r3, r0
 801589e:	83bb      	strh	r3, [r7, #28]
 80158a0:	8bbb      	ldrh	r3, [r7, #28]
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	d001      	beq.n	80158aa <phpalSli15693_Sw_SendEof+0x5c>
 80158a6:	8bbb      	ldrh	r3, [r7, #28]
 80158a8:	e1a5      	b.n	8015bf6 <phpalSli15693_Sw_SendEof+0x3a8>
            PHHAL_HW_TIME_MICROSECONDS,
            PHPAL_SLI15693_TIMEOUT_LONG_US));
    }

    /* Get the ASK 100 Condition */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	685b      	ldr	r3, [r3, #4]
 80158ae:	f107 0210 	add.w	r2, r7, #16
 80158b2:	210c      	movs	r1, #12
 80158b4:	4618      	mov	r0, r3
 80158b6:	f7f9 f979 	bl	800ebac <phhalHw_Pn5180_GetConfig>
 80158ba:	4603      	mov	r3, r0
 80158bc:	83bb      	strh	r3, [r7, #28]
 80158be:	8bbb      	ldrh	r3, [r7, #28]
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d001      	beq.n	80158c8 <phpalSli15693_Sw_SendEof+0x7a>
 80158c4:	8bbb      	ldrh	r3, [r7, #28]
 80158c6:	e196      	b.n	8015bf6 <phpalSli15693_Sw_SendEof+0x3a8>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_ASK100,
        &wAsk));

    if(bOption == PHPAL_SLI15693_EOF_NEXT_SLOT)
 80158c8:	7afb      	ldrb	r3, [r7, #11]
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d12a      	bne.n	8015924 <phpalSli15693_Sw_SendEof+0xd6>
    {
        if(0U != (wAsk))
 80158ce:	8a3b      	ldrh	r3, [r7, #16]
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d00d      	beq.n	80158f0 <phpalSli15693_Sw_SendEof+0xa2>
        {
            if(0U != (pDataParams->bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 80158d4:	68fb      	ldr	r3, [r7, #12]
 80158d6:	7a9b      	ldrb	r3, [r3, #10]
 80158d8:	f003 0302 	and.w	r3, r3, #2
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d003      	beq.n	80158e8 <phpalSli15693_Sw_SendEof+0x9a>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_HIGH_SOF_US;
 80158e0:	f44f 73ee 	mov.w	r3, #476	@ 0x1dc
 80158e4:	83fb      	strh	r3, [r7, #30]
 80158e6:	e010      	b.n	801590a <phpalSli15693_Sw_SendEof+0xbc>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_LOW_SOF_US;
 80158e8:	f240 33a1 	movw	r3, #929	@ 0x3a1
 80158ec:	83fb      	strh	r3, [r7, #30]
 80158ee:	e00c      	b.n	801590a <phpalSli15693_Sw_SendEof+0xbc>
            }
        }
        else
        {
            if(0U != (pDataParams->bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 80158f0:	68fb      	ldr	r3, [r7, #12]
 80158f2:	7a9b      	ldrb	r3, [r3, #10]
 80158f4:	f003 0302 	and.w	r3, r3, #2
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	d003      	beq.n	8015904 <phpalSli15693_Sw_SendEof+0xb6>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_HIGH_NRT_US;
 80158fc:	f241 039c 	movw	r3, #4252	@ 0x109c
 8015900:	83fb      	strh	r3, [r7, #30]
 8015902:	e002      	b.n	801590a <phpalSli15693_Sw_SendEof+0xbc>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_LOW_NRT_US;
 8015904:	f643 63a1 	movw	r3, #16033	@ 0x3ea1
 8015908:	83fb      	strh	r3, [r7, #30]
            }
        }
        /* Set  timeout. */
        PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 801590a:	8bfb      	ldrh	r3, [r7, #30]
 801590c:	461a      	mov	r2, r3
 801590e:	2102      	movs	r1, #2
 8015910:	68f8      	ldr	r0, [r7, #12]
 8015912:	f000 faf9 	bl	8015f08 <phpalSli15693_Sw_SetConfig>
 8015916:	4603      	mov	r3, r0
 8015918:	83bb      	strh	r3, [r7, #28]
 801591a:	8bbb      	ldrh	r3, [r7, #28]
 801591c:	2b00      	cmp	r3, #0
 801591e:	d04b      	beq.n	80159b8 <phpalSli15693_Sw_SendEof+0x16a>
 8015920:	8bbb      	ldrh	r3, [r7, #28]
 8015922:	e168      	b.n	8015bf6 <phpalSli15693_Sw_SendEof+0x3a8>
            pDataParams,
            PHPAL_SLI15693_CONFIG_TIMEOUT_US,
            wTimeout));
    }
    else if(bOption == PHPAL_SLI15693_EOF_NEXT_SLOT_INV_READ)
 8015924:	7afb      	ldrb	r3, [r7, #11]
 8015926:	2b01      	cmp	r3, #1
 8015928:	d12a      	bne.n	8015980 <phpalSli15693_Sw_SendEof+0x132>
    {
        if(0U != (wAsk))
 801592a:	8a3b      	ldrh	r3, [r7, #16]
 801592c:	2b00      	cmp	r3, #0
 801592e:	d00d      	beq.n	801594c <phpalSli15693_Sw_SendEof+0xfe>
        {
            if(0U != (pDataParams->bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 8015930:	68fb      	ldr	r3, [r7, #12]
 8015932:	7a9b      	ldrb	r3, [r3, #10]
 8015934:	f003 0302 	and.w	r3, r3, #2
 8015938:	2b00      	cmp	r3, #0
 801593a:	d003      	beq.n	8015944 <phpalSli15693_Sw_SendEof+0xf6>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTHIGH_SOF_US;
 801593c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8015940:	83fb      	strh	r3, [r7, #30]
 8015942:	e010      	b.n	8015966 <phpalSli15693_Sw_SendEof+0x118>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTLOW_SOF_US;
 8015944:	f240 2373 	movw	r3, #627	@ 0x273
 8015948:	83fb      	strh	r3, [r7, #30]
 801594a:	e00c      	b.n	8015966 <phpalSli15693_Sw_SendEof+0x118>
            }
        }
        else
        {
            if(0U != (pDataParams->bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 801594c:	68fb      	ldr	r3, [r7, #12]
 801594e:	7a9b      	ldrb	r3, [r3, #10]
 8015950:	f003 0302 	and.w	r3, r3, #2
 8015954:	2b00      	cmp	r3, #0
 8015956:	d003      	beq.n	8015960 <phpalSli15693_Sw_SendEof+0x112>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTHIGH_NRT_US;
 8015958:	f44f 630f 	mov.w	r3, #2288	@ 0x8f0
 801595c:	83fb      	strh	r3, [r7, #30]
 801595e:	e002      	b.n	8015966 <phpalSli15693_Sw_SendEof+0x118>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTLOW_NRT_US;
 8015960:	f641 73f3 	movw	r3, #8179	@ 0x1ff3
 8015964:	83fb      	strh	r3, [r7, #30]
            }
        }

        /* Set  timeout. */
        PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 8015966:	8bfb      	ldrh	r3, [r7, #30]
 8015968:	461a      	mov	r2, r3
 801596a:	2102      	movs	r1, #2
 801596c:	68f8      	ldr	r0, [r7, #12]
 801596e:	f000 facb 	bl	8015f08 <phpalSli15693_Sw_SetConfig>
 8015972:	4603      	mov	r3, r0
 8015974:	83bb      	strh	r3, [r7, #28]
 8015976:	8bbb      	ldrh	r3, [r7, #28]
 8015978:	2b00      	cmp	r3, #0
 801597a:	d01d      	beq.n	80159b8 <phpalSli15693_Sw_SendEof+0x16a>
 801597c:	8bbb      	ldrh	r3, [r7, #28]
 801597e:	e13a      	b.n	8015bf6 <phpalSli15693_Sw_SendEof+0x3a8>
            PHPAL_SLI15693_CONFIG_TIMEOUT_US,
            wTimeout));
    }
    else
    {
        if(pDataParams->bOpeMode == RD_LIB_MODE_NFC)
 8015980:	68fb      	ldr	r3, [r7, #12]
 8015982:	7d9b      	ldrb	r3, [r3, #22]
 8015984:	2b02      	cmp	r3, #2
 8015986:	d10b      	bne.n	80159a0 <phpalSli15693_Sw_SendEof+0x152>
        {
            /* Set FDT time max2(19.95ms) + Tolerance(Delta) Timeout(50ms). */
            PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 8015988:	2246      	movs	r2, #70	@ 0x46
 801598a:	2103      	movs	r1, #3
 801598c:	68f8      	ldr	r0, [r7, #12]
 801598e:	f000 fabb 	bl	8015f08 <phpalSli15693_Sw_SetConfig>
 8015992:	4603      	mov	r3, r0
 8015994:	83bb      	strh	r3, [r7, #28]
 8015996:	8bbb      	ldrh	r3, [r7, #28]
 8015998:	2b00      	cmp	r3, #0
 801599a:	d00d      	beq.n	80159b8 <phpalSli15693_Sw_SendEof+0x16a>
 801599c:	8bbb      	ldrh	r3, [r7, #28]
 801599e:	e12a      	b.n	8015bf6 <phpalSli15693_Sw_SendEof+0x3a8>
                (((PHPAL_SLI15693_TIMEOUT_MAX2_US + PHPAL_SLI15693_NFC_MODE_TIMEOUT_DELTA_US) / 1000) + ((((PHPAL_SLI15693_TIMEOUT_MAX2_US + PHPAL_SLI15693_NFC_MODE_TIMEOUT_DELTA_US) % 1000) > 500) ? 1 : 0))));
        }
        else
        {
            /* Set FDT time max2(19.95ms) + Tolerance(Delta) Timeout. */
            PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 80159a0:	2214      	movs	r2, #20
 80159a2:	2103      	movs	r1, #3
 80159a4:	68f8      	ldr	r0, [r7, #12]
 80159a6:	f000 faaf 	bl	8015f08 <phpalSli15693_Sw_SetConfig>
 80159aa:	4603      	mov	r3, r0
 80159ac:	83bb      	strh	r3, [r7, #28]
 80159ae:	8bbb      	ldrh	r3, [r7, #28]
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	d001      	beq.n	80159b8 <phpalSli15693_Sw_SendEof+0x16a>
 80159b4:	8bbb      	ldrh	r3, [r7, #28]
 80159b6:	e11e      	b.n	8015bf6 <phpalSli15693_Sw_SendEof+0x3a8>
                (((PHPAL_SLI15693_TIMEOUT_MAX2_US + PHPAL_SLI15693_ISO_MODE_TIMEOUT_DELTA_US) / 1000) + ((((PHPAL_SLI15693_TIMEOUT_MAX2_US + PHPAL_SLI15693_ISO_MODE_TIMEOUT_DELTA_US) % 1000) > 500) ? 1 : 0))));
        }
    }

    /* Disable SOF, so only EOF is sent */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80159b8:	68fb      	ldr	r3, [r7, #12]
 80159ba:	685b      	ldr	r3, [r3, #4]
 80159bc:	2200      	movs	r2, #0
 80159be:	2115      	movs	r1, #21
 80159c0:	4618      	mov	r0, r3
 80159c2:	f7f7 fca5 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 80159c6:	4603      	mov	r3, r0
 80159c8:	83bb      	strh	r3, [r7, #28]
 80159ca:	8bbb      	ldrh	r3, [r7, #28]
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d001      	beq.n	80159d4 <phpalSli15693_Sw_SendEof+0x186>
 80159d0:	8bbb      	ldrh	r3, [r7, #28]
 80159d2:	e110      	b.n	8015bf6 <phpalSli15693_Sw_SendEof+0x3a8>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_SYMBOL_START,
        PH_OFF));

    /* Exchange command */
    status = phhalHw_Exchange(
 80159d4:	68fb      	ldr	r3, [r7, #12]
 80159d6:	6858      	ldr	r0, [r3, #4]
 80159d8:	f107 0312 	add.w	r3, r7, #18
 80159dc:	9301      	str	r3, [sp, #4]
 80159de:	f107 0314 	add.w	r3, r7, #20
 80159e2:	9300      	str	r3, [sp, #0]
 80159e4:	2300      	movs	r3, #0
 80159e6:	2200      	movs	r2, #0
 80159e8:	2100      	movs	r1, #0
 80159ea:	f7f7 f911 	bl	800cc10 <phhalHw_Pn5180_Exchange>
 80159ee:	4603      	mov	r3, r0
 80159f0:	837b      	strh	r3, [r7, #26]
        0,
        &pResp,
        &wRespLength);

    /* Reset HAL to send SOF and EOF */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80159f2:	68fb      	ldr	r3, [r7, #12]
 80159f4:	685b      	ldr	r3, [r3, #4]
 80159f6:	2205      	movs	r2, #5
 80159f8:	2115      	movs	r1, #21
 80159fa:	4618      	mov	r0, r3
 80159fc:	f7f7 fc88 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8015a00:	4603      	mov	r3, r0
 8015a02:	83bb      	strh	r3, [r7, #28]
 8015a04:	8bbb      	ldrh	r3, [r7, #28]
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	d001      	beq.n	8015a0e <phpalSli15693_Sw_SendEof+0x1c0>
 8015a0a:	8bbb      	ldrh	r3, [r7, #28]
 8015a0c:	e0f3      	b.n	8015bf6 <phpalSli15693_Sw_SendEof+0x3a8>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_SYMBOL_START,
        PHHAL_HW_SYMBOL_I15693_SOF));

    /* Check Success */
    PH_CHECK_SUCCESS(status);
 8015a0e:	8b7b      	ldrh	r3, [r7, #26]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d001      	beq.n	8015a18 <phpalSli15693_Sw_SendEof+0x1ca>
 8015a14:	8b7b      	ldrh	r3, [r7, #26]
 8015a16:	e0ee      	b.n	8015bf6 <phpalSli15693_Sw_SendEof+0x3a8>

    /* Check RespLength */
    if (wRespLength == 0U)
 8015a18:	8a7b      	ldrh	r3, [r7, #18]
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d102      	bne.n	8015a24 <phpalSli15693_Sw_SendEof+0x1d6>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 8015a1e:	f640 2306 	movw	r3, #2566	@ 0xa06
 8015a22:	e0e8      	b.n	8015bf6 <phpalSli15693_Sw_SendEof+0x3a8>
    }

    /* check error flag */
    if (0U != (pResp[0] & PHPAL_SLI15693_FLAG_RESP_ERROR))
 8015a24:	697b      	ldr	r3, [r7, #20]
 8015a26:	781b      	ldrb	r3, [r3, #0]
 8015a28:	f003 0301 	and.w	r3, r3, #1
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d00e      	beq.n	8015a4e <phpalSli15693_Sw_SendEof+0x200>
    {
        /* check the length in case of error */
        if (wRespLength != 2U)
 8015a30:	8a7b      	ldrh	r3, [r7, #18]
 8015a32:	2b02      	cmp	r3, #2
 8015a34:	d002      	beq.n	8015a3c <phpalSli15693_Sw_SendEof+0x1ee>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 8015a36:	f640 2306 	movw	r3, #2566	@ 0xa06
 8015a3a:	e0dc      	b.n	8015bf6 <phpalSli15693_Sw_SendEof+0x3a8>
        }

        pDataParams->wAdditionalInfo = pResp[1];
 8015a3c:	697b      	ldr	r3, [r7, #20]
 8015a3e:	3301      	adds	r3, #1
 8015a40:	781b      	ldrb	r3, [r3, #0]
 8015a42:	461a      	mov	r2, r3
 8015a44:	68fb      	ldr	r3, [r7, #12]
 8015a46:	811a      	strh	r2, [r3, #8]
        return PH_ADD_COMPCODE_FIXED(PHPAL_SLI15693_ERR_ISO15693, PH_COMP_PAL_SLI15693);
 8015a48:	f44f 6328 	mov.w	r3, #2688	@ 0xa80
 8015a4c:	e0d3      	b.n	8015bf6 <phpalSli15693_Sw_SendEof+0x3a8>
    }

    if (bOption == PHPAL_SLI15693_EOF_NEXT_SLOT)
 8015a4e:	7afb      	ldrb	r3, [r7, #11]
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d13d      	bne.n	8015ad0 <phpalSli15693_Sw_SendEof+0x282>
    {
        /* ignore flag byte */
        ++pResp;
 8015a54:	697b      	ldr	r3, [r7, #20]
 8015a56:	3301      	adds	r3, #1
 8015a58:	617b      	str	r3, [r7, #20]
        --wRespLength;
 8015a5a:	8a7b      	ldrh	r3, [r7, #18]
 8015a5c:	3b01      	subs	r3, #1
 8015a5e:	b29b      	uxth	r3, r3
 8015a60:	827b      	strh	r3, [r7, #18]

        /* the UID is only returned on a next slot command. */
        if (wRespLength != (1u + PHPAL_SLI15693_UID_LENGTH))
 8015a62:	8a7b      	ldrh	r3, [r7, #18]
 8015a64:	2b09      	cmp	r3, #9
 8015a66:	d002      	beq.n	8015a6e <phpalSli15693_Sw_SendEof+0x220>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 8015a68:	f640 2306 	movw	r3, #2566	@ 0xa06
 8015a6c:	e0c3      	b.n	8015bf6 <phpalSli15693_Sw_SendEof+0x3a8>
        }

        /* wait T2 */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 8015a6e:	68fb      	ldr	r3, [r7, #12]
 8015a70:	685b      	ldr	r3, [r3, #4]
 8015a72:	f44f 729b 	mov.w	r2, #310	@ 0x136
 8015a76:	2100      	movs	r1, #0
 8015a78:	4618      	mov	r0, r3
 8015a7a:	f7f7 fbc5 	bl	800d208 <phhalHw_Pn5180_Wait>
 8015a7e:	4603      	mov	r3, r0
 8015a80:	83bb      	strh	r3, [r7, #28]
 8015a82:	8bbb      	ldrh	r3, [r7, #28]
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	d001      	beq.n	8015a8c <phpalSli15693_Sw_SendEof+0x23e>
 8015a88:	8bbb      	ldrh	r3, [r7, #28]
 8015a8a:	e0b4      	b.n	8015bf6 <phpalSli15693_Sw_SendEof+0x3a8>
            pDataParams->pHalDataParams,
            PHHAL_HW_TIME_MICROSECONDS,
            PHPAL_SLI15693_SW_T2_WAITING_TIME));

        /* Copy the DSFID to the data buffer */
        *pDsfid = pResp[0];
 8015a8c:	697b      	ldr	r3, [r7, #20]
 8015a8e:	781a      	ldrb	r2, [r3, #0]
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	701a      	strb	r2, [r3, #0]

        /* retrieve the UID */
        (void)memcpy(pDataParams->pUid, &pResp[1], PHPAL_SLI15693_UID_LENGTH);
 8015a94:	68fb      	ldr	r3, [r7, #12]
 8015a96:	f103 000c 	add.w	r0, r3, #12
 8015a9a:	697b      	ldr	r3, [r7, #20]
 8015a9c:	3301      	adds	r3, #1
 8015a9e:	2208      	movs	r2, #8
 8015aa0:	4619      	mov	r1, r3
 8015aa2:	f007 fbac 	bl	801d1fe <memcpy>
        pDataParams->bUidBitLength = PHPAL_SLI15693_SW_UID_COMPLETE;
 8015aa6:	68fb      	ldr	r3, [r7, #12]
 8015aa8:	2240      	movs	r2, #64	@ 0x40
 8015aaa:	751a      	strb	r2, [r3, #20]

        /* return the UID */
        (void)memcpy(pUid, &pResp[1], PHPAL_SLI15693_UID_LENGTH);
 8015aac:	697b      	ldr	r3, [r7, #20]
 8015aae:	3301      	adds	r3, #1
 8015ab0:	2208      	movs	r2, #8
 8015ab2:	4619      	mov	r1, r3
 8015ab4:	6838      	ldr	r0, [r7, #0]
 8015ab6:	f007 fba2 	bl	801d1fe <memcpy>
        *pUidLength = PHPAL_SLI15693_UID_LENGTH;
 8015aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015abc:	2208      	movs	r2, #8
 8015abe:	701a      	strb	r2, [r3, #0]

        /* set addressed flag */
        pDataParams->bFlags |= PHPAL_SLI15693_FLAG_ADDRESSED;
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	7a9b      	ldrb	r3, [r3, #10]
 8015ac4:	f043 0320 	orr.w	r3, r3, #32
 8015ac8:	b2da      	uxtb	r2, r3
 8015aca:	68fb      	ldr	r3, [r7, #12]
 8015acc:	729a      	strb	r2, [r3, #10]
 8015ace:	e091      	b.n	8015bf4 <phpalSli15693_Sw_SendEof+0x3a6>
    }
    else if (bOption == PHPAL_SLI15693_EOF_NEXT_SLOT_INV_READ)
 8015ad0:	7afb      	ldrb	r3, [r7, #11]
 8015ad2:	2b01      	cmp	r3, #1
 8015ad4:	f040 8088 	bne.w	8015be8 <phpalSli15693_Sw_SendEof+0x39a>
    {
        /* ignore flag byte */
        ++pResp;
 8015ad8:	697b      	ldr	r3, [r7, #20]
 8015ada:	3301      	adds	r3, #1
 8015adc:	617b      	str	r3, [r7, #20]
        --wRespLength;
 8015ade:	8a7b      	ldrh	r3, [r7, #18]
 8015ae0:	3b01      	subs	r3, #1
 8015ae2:	b29b      	uxth	r3, r3
 8015ae4:	827b      	strh	r3, [r7, #18]

        /* Option flag is set -> we also received (partial) UID */
        if (0U != (pDataParams->bFlags & PHPAL_SLI15693_FLAG_OPTION))
 8015ae6:	68fb      	ldr	r3, [r7, #12]
 8015ae8:	7a9b      	ldrb	r3, [r3, #10]
 8015aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d05b      	beq.n	8015baa <phpalSli15693_Sw_SendEof+0x35c>
        {
            /* The response length should not be less than the remaining UID */
            bStoredUidLength = pDataParams->bUidBitLength >> 3U;
 8015af2:	68fb      	ldr	r3, [r7, #12]
 8015af4:	7d1b      	ldrb	r3, [r3, #20]
 8015af6:	08db      	lsrs	r3, r3, #3
 8015af8:	767b      	strb	r3, [r7, #25]
            *pUidLength = PHPAL_SLI15693_UID_LENGTH - bStoredUidLength;
 8015afa:	7e7b      	ldrb	r3, [r7, #25]
 8015afc:	f1c3 0308 	rsb	r3, r3, #8
 8015b00:	b2da      	uxtb	r2, r3
 8015b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b04:	701a      	strb	r2, [r3, #0]
            if (wRespLength < *pUidLength)
 8015b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b08:	781b      	ldrb	r3, [r3, #0]
 8015b0a:	461a      	mov	r2, r3
 8015b0c:	8a7b      	ldrh	r3, [r7, #18]
 8015b0e:	429a      	cmp	r2, r3
 8015b10:	d902      	bls.n	8015b18 <phpalSli15693_Sw_SendEof+0x2ca>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 8015b12:	f640 2306 	movw	r3, #2566	@ 0xa06
 8015b16:	e06e      	b.n	8015bf6 <phpalSli15693_Sw_SendEof+0x3a8>
            }

            if (bStoredUidLength < PHPAL_SLI15693_UID_LENGTH)
 8015b18:	7e7b      	ldrb	r3, [r7, #25]
 8015b1a:	2b07      	cmp	r3, #7
 8015b1c:	d837      	bhi.n	8015b8e <phpalSli15693_Sw_SendEof+0x340>
            {
                /* We need to merge the contents of the mask buffer and the received data */
                if (0U != (pDataParams->bUidBitLength % 8U))
 8015b1e:	68fb      	ldr	r3, [r7, #12]
 8015b20:	7d1b      	ldrb	r3, [r3, #20]
 8015b22:	f003 0307 	and.w	r3, r3, #7
 8015b26:	b2db      	uxtb	r3, r3
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d01e      	beq.n	8015b6a <phpalSli15693_Sw_SendEof+0x31c>
                {
                    if (bStoredUidLength < 7U)
 8015b2c:	7e7b      	ldrb	r3, [r7, #25]
 8015b2e:	2b06      	cmp	r3, #6
 8015b30:	d80d      	bhi.n	8015b4e <phpalSli15693_Sw_SendEof+0x300>
                    {
                        /* copy the UID bytes we received from the card */
                        (void)memcpy(&(pDataParams->pUid[bStoredUidLength + 1U]), &pResp[1], ((uint32_t)(*pUidLength)-1U));
 8015b32:	7e7b      	ldrb	r3, [r7, #25]
 8015b34:	3301      	adds	r3, #1
 8015b36:	3308      	adds	r3, #8
 8015b38:	68fa      	ldr	r2, [r7, #12]
 8015b3a:	4413      	add	r3, r2
 8015b3c:	1d18      	adds	r0, r3, #4
 8015b3e:	697b      	ldr	r3, [r7, #20]
 8015b40:	1c59      	adds	r1, r3, #1
 8015b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b44:	781b      	ldrb	r3, [r3, #0]
 8015b46:	3b01      	subs	r3, #1
 8015b48:	461a      	mov	r2, r3
 8015b4a:	f007 fb58 	bl	801d1fe <memcpy>
                    }

                    /* merge mask-bits with received bits */
                    pDataParams->pUid[bStoredUidLength] |= pResp[0];
 8015b4e:	7e7b      	ldrb	r3, [r7, #25]
 8015b50:	68fa      	ldr	r2, [r7, #12]
 8015b52:	4413      	add	r3, r2
 8015b54:	7b19      	ldrb	r1, [r3, #12]
 8015b56:	697b      	ldr	r3, [r7, #20]
 8015b58:	781a      	ldrb	r2, [r3, #0]
 8015b5a:	7e7b      	ldrb	r3, [r7, #25]
 8015b5c:	430a      	orrs	r2, r1
 8015b5e:	b2d1      	uxtb	r1, r2
 8015b60:	68fa      	ldr	r2, [r7, #12]
 8015b62:	4413      	add	r3, r2
 8015b64:	460a      	mov	r2, r1
 8015b66:	731a      	strb	r2, [r3, #12]
 8015b68:	e00a      	b.n	8015b80 <phpalSli15693_Sw_SendEof+0x332>
                }
                else
                {
                    /* copy the UID bytes we received from the card */
                    (void)memcpy(&(pDataParams->pUid[bStoredUidLength]), pResp, *pUidLength);
 8015b6a:	7e7b      	ldrb	r3, [r7, #25]
 8015b6c:	3308      	adds	r3, #8
 8015b6e:	68fa      	ldr	r2, [r7, #12]
 8015b70:	4413      	add	r3, r2
 8015b72:	1d18      	adds	r0, r3, #4
 8015b74:	6979      	ldr	r1, [r7, #20]
 8015b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b78:	781b      	ldrb	r3, [r3, #0]
 8015b7a:	461a      	mov	r2, r3
 8015b7c:	f007 fb3f 	bl	801d1fe <memcpy>
                }

                /* Return the received (partial) UID */
                (void)memcpy(pUid, pResp, *pUidLength);
 8015b80:	6979      	ldr	r1, [r7, #20]
 8015b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b84:	781b      	ldrb	r3, [r3, #0]
 8015b86:	461a      	mov	r2, r3
 8015b88:	6838      	ldr	r0, [r7, #0]
 8015b8a:	f007 fb38 	bl	801d1fe <memcpy>
            }

            /* UID is now complete */
            pDataParams->bUidBitLength = PHPAL_SLI15693_SW_UID_COMPLETE;
 8015b8e:	68fb      	ldr	r3, [r7, #12]
 8015b90:	2240      	movs	r2, #64	@ 0x40
 8015b92:	751a      	strb	r2, [r3, #20]

            /* shift pointer and length */
            pResp += *pUidLength;
 8015b94:	697b      	ldr	r3, [r7, #20]
 8015b96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015b98:	7812      	ldrb	r2, [r2, #0]
 8015b9a:	4413      	add	r3, r2
 8015b9c:	617b      	str	r3, [r7, #20]
            wRespLength = wRespLength - *pUidLength;
 8015b9e:	8a7b      	ldrh	r3, [r7, #18]
 8015ba0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015ba2:	7812      	ldrb	r2, [r2, #0]
 8015ba4:	1a9b      	subs	r3, r3, r2
 8015ba6:	b29b      	uxth	r3, r3
 8015ba8:	827b      	strh	r3, [r7, #18]
        }

        /* copy the received data to the provided buffer */
        (void)memcpy(pData, pResp, wRespLength);
 8015baa:	697b      	ldr	r3, [r7, #20]
 8015bac:	8a7a      	ldrh	r2, [r7, #18]
 8015bae:	4619      	mov	r1, r3
 8015bb0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015bb2:	f007 fb24 	bl	801d1fe <memcpy>

        /* the remaining bytes of the response are the data bytes */
        *pDataLength = wRespLength;
 8015bb6:	8a7a      	ldrh	r2, [r7, #18]
 8015bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015bba:	801a      	strh	r2, [r3, #0]

        /* set addressed flag */
        pDataParams->bFlags |= PHPAL_SLI15693_FLAG_ADDRESSED;
 8015bbc:	68fb      	ldr	r3, [r7, #12]
 8015bbe:	7a9b      	ldrb	r3, [r3, #10]
 8015bc0:	f043 0320 	orr.w	r3, r3, #32
 8015bc4:	b2da      	uxtb	r2, r3
 8015bc6:	68fb      	ldr	r3, [r7, #12]
 8015bc8:	729a      	strb	r2, [r3, #10]

        /* wait T2 */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 8015bca:	68fb      	ldr	r3, [r7, #12]
 8015bcc:	685b      	ldr	r3, [r3, #4]
 8015bce:	f44f 729b 	mov.w	r2, #310	@ 0x136
 8015bd2:	2100      	movs	r1, #0
 8015bd4:	4618      	mov	r0, r3
 8015bd6:	f7f7 fb17 	bl	800d208 <phhalHw_Pn5180_Wait>
 8015bda:	4603      	mov	r3, r0
 8015bdc:	83bb      	strh	r3, [r7, #28]
 8015bde:	8bbb      	ldrh	r3, [r7, #28]
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	d007      	beq.n	8015bf4 <phpalSli15693_Sw_SendEof+0x3a6>
 8015be4:	8bbb      	ldrh	r3, [r7, #28]
 8015be6:	e006      	b.n	8015bf6 <phpalSli15693_Sw_SendEof+0x3a8>
            PHPAL_SLI15693_SW_T2_WAITING_TIME));
    }
    else
    {
        /* 1 byte is only returned on a eof for a write alike command. */
        if (wRespLength != 1U)
 8015be8:	8a7b      	ldrh	r3, [r7, #18]
 8015bea:	2b01      	cmp	r3, #1
 8015bec:	d002      	beq.n	8015bf4 <phpalSli15693_Sw_SendEof+0x3a6>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 8015bee:	f640 2306 	movw	r3, #2566	@ 0xa06
 8015bf2:	e000      	b.n	8015bf6 <phpalSli15693_Sw_SendEof+0x3a8>
        }
    }

    return PH_ERR_SUCCESS;
 8015bf4:	2300      	movs	r3, #0
}
 8015bf6:	4618      	mov	r0, r3
 8015bf8:	3720      	adds	r7, #32
 8015bfa:	46bd      	mov	sp, r7
 8015bfc:	bd80      	pop	{r7, pc}

08015bfe <phpalSli15693_Sw_Select>:
}

phStatus_t phpalSli15693_Sw_Select(
                                   phpalSli15693_Sw_DataParams_t * pDataParams
                                   )
{
 8015bfe:	b580      	push	{r7, lr}
 8015c00:	b088      	sub	sp, #32
 8015c02:	af02      	add	r7, sp, #8
 8015c04:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aCmd[1];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8015c06:	2300      	movs	r3, #0
 8015c08:	613b      	str	r3, [r7, #16]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8015c0a:	2300      	movs	r3, #0
 8015c0c:	81fb      	strh	r3, [r7, #14]

    /* clear selected flag */
    pDataParams->bFlags &= (uint8_t)~(uint8_t)PHPAL_SLI15693_FLAG_SELECTED;
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	7a9b      	ldrb	r3, [r3, #10]
 8015c12:	f023 0310 	bic.w	r3, r3, #16
 8015c16:	b2da      	uxtb	r2, r3
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	729a      	strb	r2, [r3, #10]

    /* set addressed flag */
    pDataParams->bFlags |= PHPAL_SLI15693_FLAG_ADDRESSED;
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	7a9b      	ldrb	r3, [r3, #10]
 8015c20:	f043 0320 	orr.w	r3, r3, #32
 8015c24:	b2da      	uxtb	r2, r3
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	729a      	strb	r2, [r3, #10]

    /* reset to ready command */
    aCmd[0] = PHPAL_SLI15693_SW_CMD_SELECT;
 8015c2a:	2325      	movs	r3, #37	@ 0x25
 8015c2c:	753b      	strb	r3, [r7, #20]

    /* Set short timeout. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 8015c2e:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8015c32:	2102      	movs	r1, #2
 8015c34:	6878      	ldr	r0, [r7, #4]
 8015c36:	f000 f967 	bl	8015f08 <phpalSli15693_Sw_SetConfig>
 8015c3a:	4603      	mov	r3, r0
 8015c3c:	82fb      	strh	r3, [r7, #22]
 8015c3e:	8afb      	ldrh	r3, [r7, #22]
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d001      	beq.n	8015c48 <phpalSli15693_Sw_Select+0x4a>
 8015c44:	8afb      	ldrh	r3, [r7, #22]
 8015c46:	e028      	b.n	8015c9a <phpalSli15693_Sw_Select+0x9c>
        pDataParams,
        PHPAL_SLI15693_CONFIG_TIMEOUT_US,
        PHPAL_SLI15693_TIMEOUT_SHORT_US));

    /* Exchange command */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_Exchange(
 8015c48:	f107 0214 	add.w	r2, r7, #20
 8015c4c:	f107 030e 	add.w	r3, r7, #14
 8015c50:	9301      	str	r3, [sp, #4]
 8015c52:	f107 0310 	add.w	r3, r7, #16
 8015c56:	9300      	str	r3, [sp, #0]
 8015c58:	2301      	movs	r3, #1
 8015c5a:	2100      	movs	r1, #0
 8015c5c:	6878      	ldr	r0, [r7, #4]
 8015c5e:	f000 f820 	bl	8015ca2 <phpalSli15693_Sw_Exchange>
 8015c62:	4603      	mov	r3, r0
 8015c64:	82fb      	strh	r3, [r7, #22]
 8015c66:	8afb      	ldrh	r3, [r7, #22]
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d001      	beq.n	8015c70 <phpalSli15693_Sw_Select+0x72>
 8015c6c:	8afb      	ldrh	r3, [r7, #22]
 8015c6e:	e014      	b.n	8015c9a <phpalSli15693_Sw_Select+0x9c>
        1,
        &pResp,
        &wRespLength));

    /* We shall not receive any data */
    if (wRespLength != 0U)
 8015c70:	89fb      	ldrh	r3, [r7, #14]
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d002      	beq.n	8015c7c <phpalSli15693_Sw_Select+0x7e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 8015c76:	f640 2306 	movw	r3, #2566	@ 0xa06
 8015c7a:	e00e      	b.n	8015c9a <phpalSli15693_Sw_Select+0x9c>
    }

    /* clear addressed flag */
    pDataParams->bFlags &= (uint8_t)~(uint8_t)PHPAL_SLI15693_FLAG_ADDRESSED;
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	7a9b      	ldrb	r3, [r3, #10]
 8015c80:	f023 0320 	bic.w	r3, r3, #32
 8015c84:	b2da      	uxtb	r2, r3
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	729a      	strb	r2, [r3, #10]

    /* set selected flag */
    pDataParams->bFlags |= PHPAL_SLI15693_FLAG_SELECTED;
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	7a9b      	ldrb	r3, [r3, #10]
 8015c8e:	f043 0310 	orr.w	r3, r3, #16
 8015c92:	b2da      	uxtb	r2, r3
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	729a      	strb	r2, [r3, #10]

    return PH_ERR_SUCCESS;
 8015c98:	2300      	movs	r3, #0
}
 8015c9a:	4618      	mov	r0, r3
 8015c9c:	3718      	adds	r7, #24
 8015c9e:	46bd      	mov	sp, r7
 8015ca0:	bd80      	pop	{r7, pc}

08015ca2 <phpalSli15693_Sw_Exchange>:
                                     uint8_t * pTxBuffer,
                                     uint16_t wTxLength,
                                     uint8_t ** ppRxBuffer,
                                     uint16_t * pRxLength
                                     )
{
 8015ca2:	b580      	push	{r7, lr}
 8015ca4:	b08a      	sub	sp, #40	@ 0x28
 8015ca6:	af02      	add	r7, sp, #8
 8015ca8:	60f8      	str	r0, [r7, #12]
 8015caa:	607a      	str	r2, [r7, #4]
 8015cac:	461a      	mov	r2, r3
 8015cae:	460b      	mov	r3, r1
 8015cb0:	817b      	strh	r3, [r7, #10]
 8015cb2:	4613      	mov	r3, r2
 8015cb4:	813b      	strh	r3, [r7, #8]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bFirstBlock[3];
    uint16_t    PH_MEMLOC_REM wTransmitLength = 0;
 8015cb6:	2300      	movs	r3, #0
 8015cb8:	83fb      	strh	r3, [r7, #30]
    uint16_t    PH_MEMLOC_REM RxLength;
    uint8_t *   PH_MEMLOC_REM pRxBuffer = NULL;
 8015cba:	2300      	movs	r3, #0
 8015cbc:	613b      	str	r3, [r7, #16]
    /* the frame to exchange looks like the following:
    {optional} [one byte]
    [flags][CMD]{[MFC]}{[UID0] .. [UID3]}[CMDParam(0)] .. [CMDParam(N)] */

    /* Check for valid UID in addressed mode */
    if ((0U == ((pDataParams->bFlags & PHPAL_SLI15693_FLAG_INVENTORY))) && (0U != ((pDataParams->bFlags & PHPAL_SLI15693_FLAG_ADDRESSED))))
 8015cbe:	68fb      	ldr	r3, [r7, #12]
 8015cc0:	7a9b      	ldrb	r3, [r3, #10]
 8015cc2:	f003 0304 	and.w	r3, r3, #4
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	d10c      	bne.n	8015ce4 <phpalSli15693_Sw_Exchange+0x42>
 8015cca:	68fb      	ldr	r3, [r7, #12]
 8015ccc:	7a9b      	ldrb	r3, [r3, #10]
 8015cce:	f003 0320 	and.w	r3, r3, #32
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d006      	beq.n	8015ce4 <phpalSli15693_Sw_Exchange+0x42>
    {
        /* Return an error if UID is not valid */
        if (pDataParams->bUidBitLength != PHPAL_SLI15693_SW_UID_COMPLETE)
 8015cd6:	68fb      	ldr	r3, [r7, #12]
 8015cd8:	7d1b      	ldrb	r3, [r3, #20]
 8015cda:	2b40      	cmp	r3, #64	@ 0x40
 8015cdc:	d002      	beq.n	8015ce4 <phpalSli15693_Sw_Exchange+0x42>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_PAL_SLI15693);
 8015cde:	f640 2325 	movw	r3, #2597	@ 0xa25
 8015ce2:	e0f0      	b.n	8015ec6 <phpalSli15693_Sw_Exchange+0x224>
        }
    }

    /* Check if caller has provided valid RxBuffer */
    if (ppRxBuffer == NULL)
 8015ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d102      	bne.n	8015cf0 <phpalSli15693_Sw_Exchange+0x4e>
    {
        ppRxBuffer = &pRxBuffer;
 8015cea:	f107 0310 	add.w	r3, r7, #16
 8015cee:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
    if (pRxLength == NULL)
 8015cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d102      	bne.n	8015cfc <phpalSli15693_Sw_Exchange+0x5a>
    {
        pRxLength = &RxLength;
 8015cf6:	f107 0316 	add.w	r3, r7, #22
 8015cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    if ((0U == ((wOption & PH_EXCHANGE_LEAVE_BUFFER_BIT))))
 8015cfc:	897b      	ldrh	r3, [r7, #10]
 8015cfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	f040 8086 	bne.w	8015e14 <phpalSli15693_Sw_Exchange+0x172>
    {
        /* This is the first chunk of a command frame. Add the Flags byte and ... */
        bFirstBlock[wTransmitLength++] = pDataParams->bFlags;
 8015d08:	8bfb      	ldrh	r3, [r7, #30]
 8015d0a:	1c5a      	adds	r2, r3, #1
 8015d0c:	83fa      	strh	r2, [r7, #30]
 8015d0e:	4619      	mov	r1, r3
 8015d10:	68fb      	ldr	r3, [r7, #12]
 8015d12:	7a9a      	ldrb	r2, [r3, #10]
 8015d14:	f101 0320 	add.w	r3, r1, #32
 8015d18:	443b      	add	r3, r7
 8015d1a:	f803 2c08 	strb.w	r2, [r3, #-8]
        bFirstBlock[wTransmitLength++] = pTxBuffer[0];
 8015d1e:	8bfb      	ldrh	r3, [r7, #30]
 8015d20:	1c5a      	adds	r2, r3, #1
 8015d22:	83fa      	strh	r2, [r7, #30]
 8015d24:	4619      	mov	r1, r3
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	781a      	ldrb	r2, [r3, #0]
 8015d2a:	f101 0320 	add.w	r3, r1, #32
 8015d2e:	443b      	add	r3, r7
 8015d30:	f803 2c08 	strb.w	r2, [r3, #-8]

        /* add MFC byte for custom commands */
        if ((pTxBuffer[0] > PHPAL_SLI15693_SW_CUSTOM_CMD_CODE_BEGIN) && (pTxBuffer[0] < PHPAL_SLI15693_SW_CUSTOM_CMD_CODE_END))
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	781b      	ldrb	r3, [r3, #0]
 8015d38:	2b9f      	cmp	r3, #159	@ 0x9f
 8015d3a:	d90f      	bls.n	8015d5c <phpalSli15693_Sw_Exchange+0xba>
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	781b      	ldrb	r3, [r3, #0]
 8015d40:	2bdf      	cmp	r3, #223	@ 0xdf
 8015d42:	d80b      	bhi.n	8015d5c <phpalSli15693_Sw_Exchange+0xba>
        {
            /* if no serial number is valid we assume that we use only NXP tags. */
            bFirstBlock[wTransmitLength++] = pDataParams->bIcMfgCode;
 8015d44:	8bfb      	ldrh	r3, [r7, #30]
 8015d46:	1c5a      	adds	r2, r3, #1
 8015d48:	83fa      	strh	r2, [r7, #30]
 8015d4a:	4619      	mov	r1, r3
 8015d4c:	68fb      	ldr	r3, [r7, #12]
 8015d4e:	7e5a      	ldrb	r2, [r3, #25]
 8015d50:	f101 0320 	add.w	r3, r1, #32
 8015d54:	443b      	add	r3, r7
 8015d56:	f803 2c08 	strb.w	r2, [r3, #-8]
 8015d5a:	e017      	b.n	8015d8c <phpalSli15693_Sw_Exchange+0xea>
        }
        else
        {
            if((pTxBuffer[0] == PHPAL_SLI15693_SW_CMD_EXTENDED_GET_SYSTEM_INFORMATION)
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	781b      	ldrb	r3, [r3, #0]
 8015d60:	2b3b      	cmp	r3, #59	@ 0x3b
 8015d62:	d113      	bne.n	8015d8c <phpalSli15693_Sw_Exchange+0xea>
               && (wTxLength > 1U))
 8015d64:	893b      	ldrh	r3, [r7, #8]
 8015d66:	2b01      	cmp	r3, #1
 8015d68:	d910      	bls.n	8015d8c <phpalSli15693_Sw_Exchange+0xea>
                *  UID from 3rd Byte whereas rest other commands take UID from 2nd Byte
                *  SOF + FLAGS + COMMAND CODE +  INFO FLAGS  + UID  + CRC + EOF.
                */

               /* Copy Info Flags */
               bFirstBlock[wTransmitLength++] = pTxBuffer[1];
 8015d6a:	8bfb      	ldrh	r3, [r7, #30]
 8015d6c:	1c5a      	adds	r2, r3, #1
 8015d6e:	83fa      	strh	r2, [r7, #30]
 8015d70:	4619      	mov	r1, r3
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	785a      	ldrb	r2, [r3, #1]
 8015d76:	f101 0320 	add.w	r3, r1, #32
 8015d7a:	443b      	add	r3, r7
 8015d7c:	f803 2c08 	strb.w	r2, [r3, #-8]

               /* First byte was the command byte */
               ++pTxBuffer;
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	3301      	adds	r3, #1
 8015d84:	607b      	str	r3, [r7, #4]
               --wTxLength;
 8015d86:	893b      	ldrh	r3, [r7, #8]
 8015d88:	3b01      	subs	r3, #1
 8015d8a:	813b      	strh	r3, [r7, #8]
           }
        }

        /* Exchange command */
        /* clear buffer but do not send */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 8015d8c:	68fb      	ldr	r3, [r7, #12]
 8015d8e:	6858      	ldr	r0, [r3, #4]
 8015d90:	8bf9      	ldrh	r1, [r7, #30]
 8015d92:	f107 0218 	add.w	r2, r7, #24
 8015d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d98:	9301      	str	r3, [sp, #4]
 8015d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d9c:	9300      	str	r3, [sp, #0]
 8015d9e:	460b      	mov	r3, r1
 8015da0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8015da4:	f7f6 ff34 	bl	800cc10 <phhalHw_Pn5180_Exchange>
 8015da8:	4603      	mov	r3, r0
 8015daa:	83bb      	strh	r3, [r7, #28]
 8015dac:	8bbb      	ldrh	r3, [r7, #28]
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d001      	beq.n	8015db6 <phpalSli15693_Sw_Exchange+0x114>
 8015db2:	8bbb      	ldrh	r3, [r7, #28]
 8015db4:	e087      	b.n	8015ec6 <phpalSli15693_Sw_Exchange+0x224>

        /* First set of TxBuffer contains
         *  1. command code + Info Bytes
         *  2. command Code
         */
        ++pTxBuffer;
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	3301      	adds	r3, #1
 8015dba:	607b      	str	r3, [r7, #4]
        --wTxLength;
 8015dbc:	893b      	ldrh	r3, [r7, #8]
 8015dbe:	3b01      	subs	r3, #1
 8015dc0:	813b      	strh	r3, [r7, #8]

        /* If we are not waiting any more we can transmit the UID bytes, if necessary. */
        if ((0U == ((pDataParams->bFlags & PHPAL_SLI15693_FLAG_INVENTORY))) && (0U != ((pDataParams->bFlags & PHPAL_SLI15693_FLAG_ADDRESSED))))
 8015dc2:	68fb      	ldr	r3, [r7, #12]
 8015dc4:	7a9b      	ldrb	r3, [r3, #10]
 8015dc6:	f003 0304 	and.w	r3, r3, #4
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d11e      	bne.n	8015e0c <phpalSli15693_Sw_Exchange+0x16a>
 8015dce:	68fb      	ldr	r3, [r7, #12]
 8015dd0:	7a9b      	ldrb	r3, [r3, #10]
 8015dd2:	f003 0320 	and.w	r3, r3, #32
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d018      	beq.n	8015e0c <phpalSli15693_Sw_Exchange+0x16a>
        {
            if(0U == (pDataParams->bExplicitlyAddressed))
 8015dda:	68fb      	ldr	r3, [r7, #12]
 8015ddc:	7d5b      	ldrb	r3, [r3, #21]
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d114      	bne.n	8015e0c <phpalSli15693_Sw_Exchange+0x16a>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 8015de2:	68fb      	ldr	r3, [r7, #12]
 8015de4:	6858      	ldr	r0, [r3, #4]
 8015de6:	68fb      	ldr	r3, [r7, #12]
 8015de8:	f103 020c 	add.w	r2, r3, #12
 8015dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dee:	9301      	str	r3, [sp, #4]
 8015df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015df2:	9300      	str	r3, [sp, #0]
 8015df4:	2308      	movs	r3, #8
 8015df6:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8015dfa:	f7f6 ff09 	bl	800cc10 <phhalHw_Pn5180_Exchange>
 8015dfe:	4603      	mov	r3, r0
 8015e00:	83bb      	strh	r3, [r7, #28]
 8015e02:	8bbb      	ldrh	r3, [r7, #28]
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d001      	beq.n	8015e0c <phpalSli15693_Sw_Exchange+0x16a>
 8015e08:	8bbb      	ldrh	r3, [r7, #28]
 8015e0a:	e05c      	b.n	8015ec6 <phpalSli15693_Sw_Exchange+0x224>
                    pRxLength));
            }
        }

        /* Now we need to keep our buffered contents */
        wOption |= PH_EXCHANGE_LEAVE_BUFFER_BIT;
 8015e0c:	897b      	ldrh	r3, [r7, #10]
 8015e0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8015e12:	817b      	strh	r3, [r7, #10]
    }

    /* Exchange command */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 8015e14:	68fb      	ldr	r3, [r7, #12]
 8015e16:	6858      	ldr	r0, [r3, #4]
 8015e18:	893a      	ldrh	r2, [r7, #8]
 8015e1a:	8979      	ldrh	r1, [r7, #10]
 8015e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e1e:	9301      	str	r3, [sp, #4]
 8015e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e22:	9300      	str	r3, [sp, #0]
 8015e24:	4613      	mov	r3, r2
 8015e26:	687a      	ldr	r2, [r7, #4]
 8015e28:	f7f6 fef2 	bl	800cc10 <phhalHw_Pn5180_Exchange>
 8015e2c:	4603      	mov	r3, r0
 8015e2e:	83bb      	strh	r3, [r7, #28]
 8015e30:	8bbb      	ldrh	r3, [r7, #28]
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d001      	beq.n	8015e3a <phpalSli15693_Sw_Exchange+0x198>
 8015e36:	8bbb      	ldrh	r3, [r7, #28]
 8015e38:	e045      	b.n	8015ec6 <phpalSli15693_Sw_Exchange+0x224>
        ppRxBuffer,
        pRxLength));

    /* If this was the last (or only) chunk, we shoult have received a response,
    so we extract the Flags byte and check the status */
    if ((0U == ((wOption & PH_EXCHANGE_BUFFERED_BIT))))
 8015e3a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	db40      	blt.n	8015ec4 <phpalSli15693_Sw_Exchange+0x222>
    {
        /* First Check RespLength*/
        if (*pRxLength == 0U)
 8015e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e44:	881b      	ldrh	r3, [r3, #0]
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	d102      	bne.n	8015e50 <phpalSli15693_Sw_Exchange+0x1ae>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 8015e4a:	f640 2306 	movw	r3, #2566	@ 0xa06
 8015e4e:	e03a      	b.n	8015ec6 <phpalSli15693_Sw_Exchange+0x224>
        }

        /*check error flag*/
        pDataParams->bResFlags = 0;
 8015e50:	68fb      	ldr	r3, [r7, #12]
 8015e52:	2200      	movs	r2, #0
 8015e54:	72da      	strb	r2, [r3, #11]
        if (0U != ((*ppRxBuffer[0]) & PHPAL_SLI15693_FLAG_RESP_ERROR))
 8015e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e58:	681b      	ldr	r3, [r3, #0]
 8015e5a:	781b      	ldrb	r3, [r3, #0]
 8015e5c:	f003 0301 	and.w	r3, r3, #1
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d019      	beq.n	8015e98 <phpalSli15693_Sw_Exchange+0x1f6>
        {
            pDataParams->bResFlags = PHPAL_SLI15693_FLAG_RESP_ERROR;
 8015e64:	68fb      	ldr	r3, [r7, #12]
 8015e66:	2201      	movs	r2, #1
 8015e68:	72da      	strb	r2, [r3, #11]

            /* check the length in case of error */
            if (*pRxLength != 2U)
 8015e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e6c:	881b      	ldrh	r3, [r3, #0]
 8015e6e:	2b02      	cmp	r3, #2
 8015e70:	d002      	beq.n	8015e78 <phpalSli15693_Sw_Exchange+0x1d6>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 8015e72:	f640 2306 	movw	r3, #2566	@ 0xa06
 8015e76:	e026      	b.n	8015ec6 <phpalSli15693_Sw_Exchange+0x224>
            }

            /* Copy error code to additional info */
            pDataParams->wAdditionalInfo = (*ppRxBuffer)[1];
 8015e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e7a:	681b      	ldr	r3, [r3, #0]
 8015e7c:	3301      	adds	r3, #1
 8015e7e:	781b      	ldrb	r3, [r3, #0]
 8015e80:	461a      	mov	r2, r3
 8015e82:	68fb      	ldr	r3, [r7, #12]
 8015e84:	811a      	strh	r2, [r3, #8]

            /* Return empty receive buffer */
            *ppRxBuffer = NULL;
 8015e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e88:	2200      	movs	r2, #0
 8015e8a:	601a      	str	r2, [r3, #0]
            *pRxLength = 0;
 8015e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e8e:	2200      	movs	r2, #0
 8015e90:	801a      	strh	r2, [r3, #0]

            return PH_ADD_COMPCODE_FIXED(PHPAL_SLI15693_ERR_ISO15693, PH_COMP_PAL_SLI15693);
 8015e92:	f44f 6328 	mov.w	r3, #2688	@ 0xa80
 8015e96:	e016      	b.n	8015ec6 <phpalSli15693_Sw_Exchange+0x224>
        }

        /* Copy response flag to additional info */
        pDataParams->wAdditionalInfo = (*ppRxBuffer)[0];
 8015e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e9a:	681b      	ldr	r3, [r3, #0]
 8015e9c:	781b      	ldrb	r3, [r3, #0]
 8015e9e:	461a      	mov	r2, r3
 8015ea0:	68fb      	ldr	r3, [r7, #12]
 8015ea2:	811a      	strh	r2, [r3, #8]
        pDataParams->bResFlags = (*ppRxBuffer)[0];
 8015ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ea6:	681b      	ldr	r3, [r3, #0]
 8015ea8:	781a      	ldrb	r2, [r3, #0]
 8015eaa:	68fb      	ldr	r3, [r7, #12]
 8015eac:	72da      	strb	r2, [r3, #11]

        /* adjust pointer and length */
        ++(*ppRxBuffer);
 8015eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	1c5a      	adds	r2, r3, #1
 8015eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015eb6:	601a      	str	r2, [r3, #0]
        --(*pRxLength);
 8015eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015eba:	881b      	ldrh	r3, [r3, #0]
 8015ebc:	3b01      	subs	r3, #1
 8015ebe:	b29a      	uxth	r2, r3
 8015ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ec2:	801a      	strh	r2, [r3, #0]
    }

    return PH_ERR_SUCCESS;
 8015ec4:	2300      	movs	r3, #0
}
 8015ec6:	4618      	mov	r0, r3
 8015ec8:	3720      	adds	r7, #32
 8015eca:	46bd      	mov	sp, r7
 8015ecc:	bd80      	pop	{r7, pc}

08015ece <phpalSli15693_Sw_SetSerialNo>:
phStatus_t phpalSli15693_Sw_SetSerialNo(
                                        phpalSli15693_Sw_DataParams_t * pDataParams,
                                        uint8_t * pUid,
                                        uint8_t bUidLength
                                        )
{
 8015ece:	b580      	push	{r7, lr}
 8015ed0:	b084      	sub	sp, #16
 8015ed2:	af00      	add	r7, sp, #0
 8015ed4:	60f8      	str	r0, [r7, #12]
 8015ed6:	60b9      	str	r1, [r7, #8]
 8015ed8:	4613      	mov	r3, r2
 8015eda:	71fb      	strb	r3, [r7, #7]
    /* Check for valid UID length */
    if(bUidLength != PHPAL_SLI15693_UID_LENGTH)
 8015edc:	79fb      	ldrb	r3, [r7, #7]
 8015ede:	2b08      	cmp	r3, #8
 8015ee0:	d002      	beq.n	8015ee8 <phpalSli15693_Sw_SetSerialNo+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 8015ee2:	f640 2321 	movw	r3, #2593	@ 0xa21
 8015ee6:	e00a      	b.n	8015efe <phpalSli15693_Sw_SetSerialNo+0x30>
    }

    /* Copy UID and UID length */
    (void)memcpy(pDataParams->pUid, pUid, PHPAL_SLI15693_UID_LENGTH);
 8015ee8:	68fb      	ldr	r3, [r7, #12]
 8015eea:	330c      	adds	r3, #12
 8015eec:	2208      	movs	r2, #8
 8015eee:	68b9      	ldr	r1, [r7, #8]
 8015ef0:	4618      	mov	r0, r3
 8015ef2:	f007 f984 	bl	801d1fe <memcpy>
    pDataParams->bUidBitLength = PHPAL_SLI15693_SW_UID_COMPLETE;
 8015ef6:	68fb      	ldr	r3, [r7, #12]
 8015ef8:	2240      	movs	r2, #64	@ 0x40
 8015efa:	751a      	strb	r2, [r3, #20]

    return PH_ERR_SUCCESS;
 8015efc:	2300      	movs	r3, #0
}
 8015efe:	4618      	mov	r0, r3
 8015f00:	3710      	adds	r7, #16
 8015f02:	46bd      	mov	sp, r7
 8015f04:	bd80      	pop	{r7, pc}
	...

08015f08 <phpalSli15693_Sw_SetConfig>:
phStatus_t phpalSli15693_Sw_SetConfig(
                                      phpalSli15693_Sw_DataParams_t * pDataParams,
                                      uint16_t wConfig,
                                      uint16_t wValue
                                      )
{
 8015f08:	b580      	push	{r7, lr}
 8015f0a:	b084      	sub	sp, #16
 8015f0c:	af00      	add	r7, sp, #0
 8015f0e:	6078      	str	r0, [r7, #4]
 8015f10:	460b      	mov	r3, r1
 8015f12:	807b      	strh	r3, [r7, #2]
 8015f14:	4613      	mov	r3, r2
 8015f16:	803b      	strh	r3, [r7, #0]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t    PH_MEMLOC_REM wValueOld;

    switch (wConfig)
 8015f18:	887b      	ldrh	r3, [r7, #2]
 8015f1a:	2b0a      	cmp	r3, #10
 8015f1c:	f200 81b9 	bhi.w	8016292 <phpalSli15693_Sw_SetConfig+0x38a>
 8015f20:	a201      	add	r2, pc, #4	@ (adr r2, 8015f28 <phpalSli15693_Sw_SetConfig+0x20>)
 8015f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f26:	bf00      	nop
 8015f28:	08015f55 	.word	0x08015f55
 8015f2c:	08016293 	.word	0x08016293
 8015f30:	08016053 	.word	0x08016053
 8015f34:	080160bf 	.word	0x080160bf
 8015f38:	0801618b 	.word	0x0801618b
 8015f3c:	080161ff 	.word	0x080161ff
 8015f40:	08016105 	.word	0x08016105
 8015f44:	08016181 	.word	0x08016181
 8015f48:	08016267 	.word	0x08016267
 8015f4c:	0801627f 	.word	0x0801627f
 8015f50:	08016289 	.word	0x08016289
    {
    case PHPAL_SLI15693_CONFIG_FLAGS:

        /* Retrieve current subcarrier setting */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	685b      	ldr	r3, [r3, #4]
 8015f58:	f107 020c 	add.w	r2, r7, #12
 8015f5c:	210f      	movs	r1, #15
 8015f5e:	4618      	mov	r0, r3
 8015f60:	f7f8 fe24 	bl	800ebac <phhalHw_Pn5180_GetConfig>
 8015f64:	4603      	mov	r3, r0
 8015f66:	81fb      	strh	r3, [r7, #14]
 8015f68:	89fb      	ldrh	r3, [r7, #14]
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d001      	beq.n	8015f72 <phpalSli15693_Sw_SetConfig+0x6a>
 8015f6e:	89fb      	ldrh	r3, [r7, #14]
 8015f70:	e19c      	b.n	80162ac <phpalSli15693_Sw_SetConfig+0x3a4>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_SUBCARRIER,
            &wValueOld));

        /* Set dual subcarrier if HAL is not already configured for it */
        if (0U != (wValue & PHPAL_SLI15693_FLAG_TWO_SUB_CARRIERS))
 8015f72:	883b      	ldrh	r3, [r7, #0]
 8015f74:	f003 0301 	and.w	r3, r3, #1
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	d017      	beq.n	8015fac <phpalSli15693_Sw_SetConfig+0xa4>
        {
            /* NFC mode supports only single sub-carrier mode */
            if(pDataParams->bOpeMode == RD_LIB_MODE_NFC)
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	7d9b      	ldrb	r3, [r3, #22]
 8015f80:	2b02      	cmp	r3, #2
 8015f82:	d102      	bne.n	8015f8a <phpalSli15693_Sw_SetConfig+0x82>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 8015f84:	f640 2321 	movw	r3, #2593	@ 0xa21
 8015f88:	e190      	b.n	80162ac <phpalSli15693_Sw_SetConfig+0x3a4>
            }

            if (wValueOld != PHHAL_HW_SUBCARRIER_DUAL)
 8015f8a:	89bb      	ldrh	r3, [r7, #12]
 8015f8c:	2b01      	cmp	r3, #1
 8015f8e:	d01e      	beq.n	8015fce <phpalSli15693_Sw_SetConfig+0xc6>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	685b      	ldr	r3, [r3, #4]
 8015f94:	2201      	movs	r2, #1
 8015f96:	210f      	movs	r1, #15
 8015f98:	4618      	mov	r0, r3
 8015f9a:	f7f7 f9b9 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8015f9e:	4603      	mov	r3, r0
 8015fa0:	81fb      	strh	r3, [r7, #14]
 8015fa2:	89fb      	ldrh	r3, [r7, #14]
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d012      	beq.n	8015fce <phpalSli15693_Sw_SetConfig+0xc6>
 8015fa8:	89fb      	ldrh	r3, [r7, #14]
 8015faa:	e17f      	b.n	80162ac <phpalSli15693_Sw_SetConfig+0x3a4>
            }
        }
        /* Set single subcarrier if HAL is not already configured for it */
        else
        {
            if (wValueOld != PHHAL_HW_SUBCARRIER_SINGLE)
 8015fac:	89bb      	ldrh	r3, [r7, #12]
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d00d      	beq.n	8015fce <phpalSli15693_Sw_SetConfig+0xc6>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	685b      	ldr	r3, [r3, #4]
 8015fb6:	2200      	movs	r2, #0
 8015fb8:	210f      	movs	r1, #15
 8015fba:	4618      	mov	r0, r3
 8015fbc:	f7f7 f9a8 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8015fc0:	4603      	mov	r3, r0
 8015fc2:	81fb      	strh	r3, [r7, #14]
 8015fc4:	89fb      	ldrh	r3, [r7, #14]
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d001      	beq.n	8015fce <phpalSli15693_Sw_SetConfig+0xc6>
 8015fca:	89fb      	ldrh	r3, [r7, #14]
 8015fcc:	e16e      	b.n	80162ac <phpalSli15693_Sw_SetConfig+0x3a4>
                    PHHAL_HW_SUBCARRIER_SINGLE));
            }
        }

        /* Retrieve current datarate setting */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	685b      	ldr	r3, [r3, #4]
 8015fd2:	f107 020c 	add.w	r2, r7, #12
 8015fd6:	210a      	movs	r1, #10
 8015fd8:	4618      	mov	r0, r3
 8015fda:	f7f8 fde7 	bl	800ebac <phhalHw_Pn5180_GetConfig>
 8015fde:	4603      	mov	r3, r0
 8015fe0:	81fb      	strh	r3, [r7, #14]
 8015fe2:	89fb      	ldrh	r3, [r7, #14]
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d001      	beq.n	8015fec <phpalSli15693_Sw_SetConfig+0xe4>
 8015fe8:	89fb      	ldrh	r3, [r7, #14]
 8015fea:	e15f      	b.n	80162ac <phpalSli15693_Sw_SetConfig+0x3a4>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_RXDATARATE_FRAMING,
            &wValueOld));

        /* Set low data rate if HAL is not already configured for it */
        if (0U == (wValue & PHPAL_SLI15693_FLAG_DATA_RATE))
 8015fec:	883b      	ldrh	r3, [r7, #0]
 8015fee:	f003 0302 	and.w	r3, r3, #2
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	d117      	bne.n	8016026 <phpalSli15693_Sw_SetConfig+0x11e>
        {
            /* NFC mode supports only HIGH Data Rate */
            if(pDataParams->bOpeMode == RD_LIB_MODE_NFC)
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	7d9b      	ldrb	r3, [r3, #22]
 8015ffa:	2b02      	cmp	r3, #2
 8015ffc:	d102      	bne.n	8016004 <phpalSli15693_Sw_SetConfig+0xfc>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 8015ffe:	f640 2321 	movw	r3, #2593	@ 0xa21
 8016002:	e153      	b.n	80162ac <phpalSli15693_Sw_SetConfig+0x3a4>
            }

            if (wValueOld != PHHAL_HW_RF_RX_DATARATE_LOW)
 8016004:	89bb      	ldrh	r3, [r7, #12]
 8016006:	2b0c      	cmp	r3, #12
 8016008:	d01e      	beq.n	8016048 <phpalSli15693_Sw_SetConfig+0x140>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	685b      	ldr	r3, [r3, #4]
 801600e:	220c      	movs	r2, #12
 8016010:	210a      	movs	r1, #10
 8016012:	4618      	mov	r0, r3
 8016014:	f7f7 f97c 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8016018:	4603      	mov	r3, r0
 801601a:	81fb      	strh	r3, [r7, #14]
 801601c:	89fb      	ldrh	r3, [r7, #14]
 801601e:	2b00      	cmp	r3, #0
 8016020:	d012      	beq.n	8016048 <phpalSli15693_Sw_SetConfig+0x140>
 8016022:	89fb      	ldrh	r3, [r7, #14]
 8016024:	e142      	b.n	80162ac <phpalSli15693_Sw_SetConfig+0x3a4>

        }
        /* Set high data rate if HAL is not already configured for it */
        else
        {
            if (wValueOld != PHHAL_HW_RF_RX_DATARATE_HIGH)
 8016026:	89bb      	ldrh	r3, [r7, #12]
 8016028:	2b0d      	cmp	r3, #13
 801602a:	d00d      	beq.n	8016048 <phpalSli15693_Sw_SetConfig+0x140>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	685b      	ldr	r3, [r3, #4]
 8016030:	220d      	movs	r2, #13
 8016032:	210a      	movs	r1, #10
 8016034:	4618      	mov	r0, r3
 8016036:	f7f7 f96b 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 801603a:	4603      	mov	r3, r0
 801603c:	81fb      	strh	r3, [r7, #14]
 801603e:	89fb      	ldrh	r3, [r7, #14]
 8016040:	2b00      	cmp	r3, #0
 8016042:	d001      	beq.n	8016048 <phpalSli15693_Sw_SetConfig+0x140>
 8016044:	89fb      	ldrh	r3, [r7, #14]
 8016046:	e131      	b.n	80162ac <phpalSli15693_Sw_SetConfig+0x3a4>
                    PHHAL_HW_RF_RX_DATARATE_HIGH));
            }
        }

        /* retrieve flags */
        pDataParams->bFlags = (uint8_t)wValue;
 8016048:	883b      	ldrh	r3, [r7, #0]
 801604a:	b2da      	uxtb	r2, r3
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	729a      	strb	r2, [r3, #10]

        break;
 8016050:	e12b      	b.n	80162aa <phpalSli15693_Sw_SetConfig+0x3a2>

    case PHPAL_SLI15693_CONFIG_TIMEOUT_US:

        if (((uint32_t)wValue + PHPAL_SLI15693_SW_EXT_TIME_US) > 0xFFFFU)
 8016052:	883b      	ldrh	r3, [r7, #0]
 8016054:	333c      	adds	r3, #60	@ 0x3c
 8016056:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801605a:	d302      	bcc.n	8016062 <phpalSli15693_Sw_SetConfig+0x15a>
        {
            /* Return error */
            /* Maximum allowed value is 0xFFC3 (0xFFFF - PHPAL_SLI15693_SW_EXT_TIME_US) */
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_PAL_SLI15693);
 801605c:	f640 2322 	movw	r3, #2594	@ 0xa22
 8016060:	e124      	b.n	80162ac <phpalSli15693_Sw_SetConfig+0x3a4>
        }

        /* Extend timeout a little */
        wValue += PHPAL_SLI15693_SW_EXT_TIME_US;
 8016062:	883b      	ldrh	r3, [r7, #0]
 8016064:	333c      	adds	r3, #60	@ 0x3c
 8016066:	803b      	strh	r3, [r7, #0]

        /* Retrieve current timeout */
        statusTmp = phhalHw_GetConfig(
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	685b      	ldr	r3, [r3, #4]
 801606c:	f107 020c 	add.w	r2, r7, #12
 8016070:	210d      	movs	r1, #13
 8016072:	4618      	mov	r0, r3
 8016074:	f7f8 fd9a 	bl	800ebac <phhalHw_Pn5180_GetConfig>
 8016078:	4603      	mov	r3, r0
 801607a:	81fb      	strh	r3, [r7, #14]
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
            &wValueOld);

        /* Set the new timeout */
        if ((((statusTmp & PH_ERR_MASK) == PH_ERR_SUCCESS) && (wValue != wValueOld)) ||
 801607c:	89fb      	ldrh	r3, [r7, #14]
 801607e:	b2db      	uxtb	r3, r3
 8016080:	2b00      	cmp	r3, #0
 8016082:	d103      	bne.n	801608c <phpalSli15693_Sw_SetConfig+0x184>
 8016084:	89bb      	ldrh	r3, [r7, #12]
 8016086:	883a      	ldrh	r2, [r7, #0]
 8016088:	429a      	cmp	r2, r3
 801608a:	d103      	bne.n	8016094 <phpalSli15693_Sw_SetConfig+0x18c>
            ((statusTmp & PH_ERR_MASK) == PH_ERR_PARAMETER_OVERFLOW))
 801608c:	89fb      	ldrh	r3, [r7, #14]
 801608e:	b2db      	uxtb	r3, r3
        if ((((statusTmp & PH_ERR_MASK) == PH_ERR_SUCCESS) && (wValue != wValueOld)) ||
 8016090:	2b22      	cmp	r3, #34	@ 0x22
 8016092:	d10d      	bne.n	80160b0 <phpalSli15693_Sw_SetConfig+0x1a8>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	685b      	ldr	r3, [r3, #4]
 8016098:	883a      	ldrh	r2, [r7, #0]
 801609a:	210d      	movs	r1, #13
 801609c:	4618      	mov	r0, r3
 801609e:	f7f7 f937 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 80160a2:	4603      	mov	r3, r0
 80160a4:	81fb      	strh	r3, [r7, #14]
 80160a6:	89fb      	ldrh	r3, [r7, #14]
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d007      	beq.n	80160bc <phpalSli15693_Sw_SetConfig+0x1b4>
 80160ac:	89fb      	ldrh	r3, [r7, #14]
 80160ae:	e0fd      	b.n	80162ac <phpalSli15693_Sw_SetConfig+0x3a4>
                wValue));
        }
        else
        {
            /* Return error if the error is other than PH_ERR_PARAMETER_OVERFLOW */
            PH_CHECK_SUCCESS(statusTmp);
 80160b0:	89fb      	ldrh	r3, [r7, #14]
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	f000 80f0 	beq.w	8016298 <phpalSli15693_Sw_SetConfig+0x390>
 80160b8:	89fb      	ldrh	r3, [r7, #14]
 80160ba:	e0f7      	b.n	80162ac <phpalSli15693_Sw_SetConfig+0x3a4>
        }
        break;
 80160bc:	e0ec      	b.n	8016298 <phpalSli15693_Sw_SetConfig+0x390>

    case PHPAL_SLI15693_CONFIG_TIMEOUT_MS:

        /* Retrieve current timeout */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	685b      	ldr	r3, [r3, #4]
 80160c2:	f107 020c 	add.w	r2, r7, #12
 80160c6:	210e      	movs	r1, #14
 80160c8:	4618      	mov	r0, r3
 80160ca:	f7f8 fd6f 	bl	800ebac <phhalHw_Pn5180_GetConfig>
 80160ce:	4603      	mov	r3, r0
 80160d0:	81fb      	strh	r3, [r7, #14]
 80160d2:	89fb      	ldrh	r3, [r7, #14]
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d001      	beq.n	80160dc <phpalSli15693_Sw_SetConfig+0x1d4>
 80160d8:	89fb      	ldrh	r3, [r7, #14]
 80160da:	e0e7      	b.n	80162ac <phpalSli15693_Sw_SetConfig+0x3a4>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
            &wValueOld));

        /* Set the new timeout */
        if (wValue != wValueOld)
 80160dc:	89bb      	ldrh	r3, [r7, #12]
 80160de:	883a      	ldrh	r2, [r7, #0]
 80160e0:	429a      	cmp	r2, r3
 80160e2:	f000 80db 	beq.w	801629c <phpalSli15693_Sw_SetConfig+0x394>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	685b      	ldr	r3, [r3, #4]
 80160ea:	883a      	ldrh	r2, [r7, #0]
 80160ec:	210e      	movs	r1, #14
 80160ee:	4618      	mov	r0, r3
 80160f0:	f7f7 f90e 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 80160f4:	4603      	mov	r3, r0
 80160f6:	81fb      	strh	r3, [r7, #14]
 80160f8:	89fb      	ldrh	r3, [r7, #14]
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	f000 80ce 	beq.w	801629c <phpalSli15693_Sw_SetConfig+0x394>
 8016100:	89fb      	ldrh	r3, [r7, #14]
 8016102:	e0d3      	b.n	80162ac <phpalSli15693_Sw_SetConfig+0x3a4>
        }
        break;

    case PHPAL_SLI15693_CONFIG_T1_PARAMETER:

        if((wValue != PHPAL_SLI15693_TIMEOUT_SHORT_US) && (pDataParams->bOpeMode == RD_LIB_MODE_NFC))
 8016104:	883b      	ldrh	r3, [r7, #0]
 8016106:	f5b3 7fa2 	cmp.w	r3, #324	@ 0x144
 801610a:	d006      	beq.n	801611a <phpalSli15693_Sw_SetConfig+0x212>
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	7d9b      	ldrb	r3, [r3, #22]
 8016110:	2b02      	cmp	r3, #2
 8016112:	d102      	bne.n	801611a <phpalSli15693_Sw_SetConfig+0x212>
        {
            return PH_ADD_COMPCODE(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 8016114:	f640 2321 	movw	r3, #2593	@ 0xa21
 8016118:	e0c8      	b.n	80162ac <phpalSli15693_Sw_SetConfig+0x3a4>
        }

        /* Retrieve current T1 Value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	685b      	ldr	r3, [r3, #4]
 801611e:	f107 020c 	add.w	r2, r7, #12
 8016122:	210d      	movs	r1, #13
 8016124:	4618      	mov	r0, r3
 8016126:	f7f8 fd41 	bl	800ebac <phhalHw_Pn5180_GetConfig>
 801612a:	4603      	mov	r3, r0
 801612c:	81fb      	strh	r3, [r7, #14]
 801612e:	89fb      	ldrh	r3, [r7, #14]
 8016130:	2b00      	cmp	r3, #0
 8016132:	d001      	beq.n	8016138 <phpalSli15693_Sw_SetConfig+0x230>
 8016134:	89fb      	ldrh	r3, [r7, #14]
 8016136:	e0b9      	b.n	80162ac <phpalSli15693_Sw_SetConfig+0x3a4>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
            &wValueOld));

        /* Set the new T1 Value */
        if (wValue != wValueOld)
 8016138:	89bb      	ldrh	r3, [r7, #12]
 801613a:	883a      	ldrh	r2, [r7, #0]
 801613c:	429a      	cmp	r2, r3
 801613e:	f000 80af 	beq.w	80162a0 <phpalSli15693_Sw_SetConfig+0x398>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	6858      	ldr	r0, [r3, #4]
 8016146:	883b      	ldrh	r3, [r7, #0]
 8016148:	3b0a      	subs	r3, #10
 801614a:	b29b      	uxth	r3, r3
 801614c:	461a      	mov	r2, r3
 801614e:	2106      	movs	r1, #6
 8016150:	f7f7 f8de 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8016154:	4603      	mov	r3, r0
 8016156:	81fb      	strh	r3, [r7, #14]
 8016158:	89fb      	ldrh	r3, [r7, #14]
 801615a:	2b00      	cmp	r3, #0
 801615c:	d001      	beq.n	8016162 <phpalSli15693_Sw_SetConfig+0x25a>
 801615e:	89fb      	ldrh	r3, [r7, #14]
 8016160:	e0a4      	b.n	80162ac <phpalSli15693_Sw_SetConfig+0x3a4>
                pDataParams->pHalDataParams,
                PHHAL_HW_CONFIG_RXWAIT_US,
                (wValue - 10U)));

            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	685b      	ldr	r3, [r3, #4]
 8016166:	883a      	ldrh	r2, [r7, #0]
 8016168:	210d      	movs	r1, #13
 801616a:	4618      	mov	r0, r3
 801616c:	f7f7 f8d0 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8016170:	4603      	mov	r3, r0
 8016172:	81fb      	strh	r3, [r7, #14]
 8016174:	89fb      	ldrh	r3, [r7, #14]
 8016176:	2b00      	cmp	r3, #0
 8016178:	f000 8092 	beq.w	80162a0 <phpalSli15693_Sw_SetConfig+0x398>
 801617c:	89fb      	ldrh	r3, [r7, #14]
 801617e:	e095      	b.n	80162ac <phpalSli15693_Sw_SetConfig+0x3a4>
                wValue));
        }
        break;

    case PHPAL_SLI15693_CONFIG_ENABLE_BUFFERING:
        pDataParams->bBuffering = (uint8_t)wValue;
 8016180:	883b      	ldrh	r3, [r7, #0]
 8016182:	b2da      	uxtb	r2, r3
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	75da      	strb	r2, [r3, #23]
        break;
 8016188:	e08f      	b.n	80162aa <phpalSli15693_Sw_SetConfig+0x3a2>

    case PHPAL_SLI15693_CONFIG_TXDATARATE:

        if((pDataParams->bOpeMode == RD_LIB_MODE_NFC) && (wValue != PHPAL_SLI15693_26KBPS_DATARATE ))
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	7d9b      	ldrb	r3, [r3, #22]
 801618e:	2b02      	cmp	r3, #2
 8016190:	d105      	bne.n	801619e <phpalSli15693_Sw_SetConfig+0x296>
 8016192:	883b      	ldrh	r3, [r7, #0]
 8016194:	2b1a      	cmp	r3, #26
 8016196:	d002      	beq.n	801619e <phpalSli15693_Sw_SetConfig+0x296>
        {
            return PH_ADD_COMPCODE(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 8016198:	f640 2321 	movw	r3, #2593	@ 0xa21
 801619c:	e086      	b.n	80162ac <phpalSli15693_Sw_SetConfig+0x3a4>
        }

        if(wValue > PHPAL_SLI15693_212KBPS_DATARATE)
 801619e:	883b      	ldrh	r3, [r7, #0]
 80161a0:	2b1d      	cmp	r3, #29
 80161a2:	d902      	bls.n	80161aa <phpalSli15693_Sw_SetConfig+0x2a2>
        {
            return PH_ADD_COMPCODE(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_SLI15693);
 80161a4:	f640 2323 	movw	r3, #2595	@ 0xa23
 80161a8:	e080      	b.n	80162ac <phpalSli15693_Sw_SetConfig+0x3a4>
        }

        switch(wValue)
 80161aa:	883b      	ldrh	r3, [r7, #0]
 80161ac:	3b1a      	subs	r3, #26
 80161ae:	2b03      	cmp	r3, #3
 80161b0:	d816      	bhi.n	80161e0 <phpalSli15693_Sw_SetConfig+0x2d8>
 80161b2:	a201      	add	r2, pc, #4	@ (adr r2, 80161b8 <phpalSli15693_Sw_SetConfig+0x2b0>)
 80161b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80161b8:	080161c9 	.word	0x080161c9
 80161bc:	080161cf 	.word	0x080161cf
 80161c0:	080161d5 	.word	0x080161d5
 80161c4:	080161db 	.word	0x080161db
        {
        case PHPAL_SLI15693_26KBPS_DATARATE:
            wValue = PHHAL_HW_RF_TX_DATARATE_1_OUT_OF_4;
 80161c8:	230b      	movs	r3, #11
 80161ca:	803b      	strh	r3, [r7, #0]
            break;
 80161cc:	e009      	b.n	80161e2 <phpalSli15693_Sw_SetConfig+0x2da>
        case PHPAL_SLI15693_53KBPS_DATARATE:
            wValue =  PHHAL_HW_RF_I15693_53KBPS_DATARATE;
 80161ce:	231b      	movs	r3, #27
 80161d0:	803b      	strh	r3, [r7, #0]
            break;
 80161d2:	e006      	b.n	80161e2 <phpalSli15693_Sw_SetConfig+0x2da>
        case PHPAL_SLI15693_106KBPS_DATARATE:
            wValue = PHHAL_HW_RF_DATARATE_106;
 80161d4:	2300      	movs	r3, #0
 80161d6:	803b      	strh	r3, [r7, #0]
            break;
 80161d8:	e003      	b.n	80161e2 <phpalSli15693_Sw_SetConfig+0x2da>
        case PHPAL_SLI15693_212KBPS_DATARATE:
            wValue = PHHAL_HW_RF_DATARATE_212;
 80161da:	2301      	movs	r3, #1
 80161dc:	803b      	strh	r3, [r7, #0]
            break;
 80161de:	e000      	b.n	80161e2 <phpalSli15693_Sw_SetConfig+0x2da>
        default:
            break;
 80161e0:	bf00      	nop
        }

        /* Set the new TX data rate */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	685b      	ldr	r3, [r3, #4]
 80161e6:	883a      	ldrh	r2, [r7, #0]
 80161e8:	2109      	movs	r1, #9
 80161ea:	4618      	mov	r0, r3
 80161ec:	f7f7 f890 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 80161f0:	4603      	mov	r3, r0
 80161f2:	81fb      	strh	r3, [r7, #14]
 80161f4:	89fb      	ldrh	r3, [r7, #14]
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d054      	beq.n	80162a4 <phpalSli15693_Sw_SetConfig+0x39c>
 80161fa:	89fb      	ldrh	r3, [r7, #14]
 80161fc:	e056      	b.n	80162ac <phpalSli15693_Sw_SetConfig+0x3a4>

        break;

    case PHPAL_SLI15693_CONFIG_RXDATARATE:

        if((pDataParams->bOpeMode == RD_LIB_MODE_NFC) && (wValue != PHPAL_SLI15693_26KBPS_DATARATE))
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	7d9b      	ldrb	r3, [r3, #22]
 8016202:	2b02      	cmp	r3, #2
 8016204:	d105      	bne.n	8016212 <phpalSli15693_Sw_SetConfig+0x30a>
 8016206:	883b      	ldrh	r3, [r7, #0]
 8016208:	2b1a      	cmp	r3, #26
 801620a:	d002      	beq.n	8016212 <phpalSli15693_Sw_SetConfig+0x30a>
        {
            return PH_ADD_COMPCODE(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 801620c:	f640 2321 	movw	r3, #2593	@ 0xa21
 8016210:	e04c      	b.n	80162ac <phpalSli15693_Sw_SetConfig+0x3a4>
        }

        switch(wValue)
 8016212:	883b      	ldrh	r3, [r7, #0]
 8016214:	3b1a      	subs	r3, #26
 8016216:	2b03      	cmp	r3, #3
 8016218:	d816      	bhi.n	8016248 <phpalSli15693_Sw_SetConfig+0x340>
 801621a:	a201      	add	r2, pc, #4	@ (adr r2, 8016220 <phpalSli15693_Sw_SetConfig+0x318>)
 801621c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016220:	08016231 	.word	0x08016231
 8016224:	08016237 	.word	0x08016237
 8016228:	0801623d 	.word	0x0801623d
 801622c:	08016243 	.word	0x08016243
        {
        case PHPAL_SLI15693_26KBPS_DATARATE:
            wValue = PHHAL_HW_RF_RX_DATARATE_HIGH;
 8016230:	230d      	movs	r3, #13
 8016232:	803b      	strh	r3, [r7, #0]
            break;
 8016234:	e009      	b.n	801624a <phpalSli15693_Sw_SetConfig+0x342>
        case PHPAL_SLI15693_53KBPS_DATARATE:
            wValue = PHHAL_HW_RF_RX_DATARATE_FAST_HIGH;
 8016236:	230f      	movs	r3, #15
 8016238:	803b      	strh	r3, [r7, #0]
            break;
 801623a:	e006      	b.n	801624a <phpalSli15693_Sw_SetConfig+0x342>
        case PHPAL_SLI15693_106KBPS_DATARATE:
            wValue = PHHAL_HW_RF_DATARATE_106;
 801623c:	2300      	movs	r3, #0
 801623e:	803b      	strh	r3, [r7, #0]
            break;
 8016240:	e003      	b.n	801624a <phpalSli15693_Sw_SetConfig+0x342>
        case PHPAL_SLI15693_212KBPS_DATARATE:
            wValue = PHHAL_HW_RF_DATARATE_212;
 8016242:	2301      	movs	r3, #1
 8016244:	803b      	strh	r3, [r7, #0]
            break;
 8016246:	e000      	b.n	801624a <phpalSli15693_Sw_SetConfig+0x342>
        default:
            break;
 8016248:	bf00      	nop
        }

        /* Set the new RX data rate */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	685b      	ldr	r3, [r3, #4]
 801624e:	883a      	ldrh	r2, [r7, #0]
 8016250:	210a      	movs	r1, #10
 8016252:	4618      	mov	r0, r3
 8016254:	f7f7 f85c 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 8016258:	4603      	mov	r3, r0
 801625a:	81fb      	strh	r3, [r7, #14]
 801625c:	89fb      	ldrh	r3, [r7, #14]
 801625e:	2b00      	cmp	r3, #0
 8016260:	d022      	beq.n	80162a8 <phpalSli15693_Sw_SetConfig+0x3a0>
 8016262:	89fb      	ldrh	r3, [r7, #14]
 8016264:	e022      	b.n	80162ac <phpalSli15693_Sw_SetConfig+0x3a4>
            wValue));

        break;

    case PHPAL_SLI15693_CONFIG_MAXRETRYCOUNT:
            if(pDataParams->bMaxRetryCount > PHPAL_SLI15693_SW_RETRYCOUNT_MAX)
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	7e1b      	ldrb	r3, [r3, #24]
 801626a:	2b05      	cmp	r3, #5
 801626c:	d902      	bls.n	8016274 <phpalSli15693_Sw_SetConfig+0x36c>
            {
                return PH_ADD_COMPCODE(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 801626e:	f640 2321 	movw	r3, #2593	@ 0xa21
 8016272:	e01b      	b.n	80162ac <phpalSli15693_Sw_SetConfig+0x3a4>
            }
            pDataParams->bMaxRetryCount = (uint8_t)wValue;
 8016274:	883b      	ldrh	r3, [r7, #0]
 8016276:	b2da      	uxtb	r2, r3
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	761a      	strb	r2, [r3, #24]
            break;
 801627c:	e015      	b.n	80162aa <phpalSli15693_Sw_SetConfig+0x3a2>

    case PHPAL_SLI15693_CONFIG_ICMFGCODE:
            pDataParams->bIcMfgCode = (uint8_t)wValue;
 801627e:	883b      	ldrh	r3, [r7, #0]
 8016280:	b2da      	uxtb	r2, r3
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	765a      	strb	r2, [r3, #25]
            break;
 8016286:	e010      	b.n	80162aa <phpalSli15693_Sw_SetConfig+0x3a2>

    case PHPAL_SLI15693_CONFIG_OPE_MODE:
            pDataParams->bOpeMode = (uint8_t)wValue;
 8016288:	883b      	ldrh	r3, [r7, #0]
 801628a:	b2da      	uxtb	r2, r3
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	759a      	strb	r2, [r3, #22]
            break;
 8016290:	e00b      	b.n	80162aa <phpalSli15693_Sw_SetConfig+0x3a2>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_SLI15693);
 8016292:	f640 2323 	movw	r3, #2595	@ 0xa23
 8016296:	e009      	b.n	80162ac <phpalSli15693_Sw_SetConfig+0x3a4>
        break;
 8016298:	bf00      	nop
 801629a:	e006      	b.n	80162aa <phpalSli15693_Sw_SetConfig+0x3a2>
        break;
 801629c:	bf00      	nop
 801629e:	e004      	b.n	80162aa <phpalSli15693_Sw_SetConfig+0x3a2>
        break;
 80162a0:	bf00      	nop
 80162a2:	e002      	b.n	80162aa <phpalSli15693_Sw_SetConfig+0x3a2>
        break;
 80162a4:	bf00      	nop
 80162a6:	e000      	b.n	80162aa <phpalSli15693_Sw_SetConfig+0x3a2>
        break;
 80162a8:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 80162aa:	2300      	movs	r3, #0
}
 80162ac:	4618      	mov	r0, r3
 80162ae:	3710      	adds	r7, #16
 80162b0:	46bd      	mov	sp, r7
 80162b2:	bd80      	pop	{r7, pc}

080162b4 <phpalSli15693_Sw_GetConfig>:
phStatus_t phpalSli15693_Sw_GetConfig(
                                      phpalSli15693_Sw_DataParams_t * pDataParams,
                                      uint16_t wConfig,
                                      uint16_t * pValue
                                      )
{
 80162b4:	b580      	push	{r7, lr}
 80162b6:	b086      	sub	sp, #24
 80162b8:	af00      	add	r7, sp, #0
 80162ba:	60f8      	str	r0, [r7, #12]
 80162bc:	460b      	mov	r3, r1
 80162be:	607a      	str	r2, [r7, #4]
 80162c0:	817b      	strh	r3, [r7, #10]
    phStatus_t PH_MEMLOC_REM statusTmp;

    switch (wConfig)
 80162c2:	897b      	ldrh	r3, [r7, #10]
 80162c4:	2b0a      	cmp	r3, #10
 80162c6:	f200 8115 	bhi.w	80164f4 <phpalSli15693_Sw_GetConfig+0x240>
 80162ca:	a201      	add	r2, pc, #4	@ (adr r2, 80162d0 <phpalSli15693_Sw_GetConfig+0x1c>)
 80162cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80162d0:	080162fd 	.word	0x080162fd
 80162d4:	08016309 	.word	0x08016309
 80162d8:	08016313 	.word	0x08016313
 80162dc:	0801633d 	.word	0x0801633d
 80162e0:	0801635b 	.word	0x0801635b
 80162e4:	08016419 	.word	0x08016419
 80162e8:	080164a9 	.word	0x080164a9
 80162ec:	080164c5 	.word	0x080164c5
 80162f0:	080164d1 	.word	0x080164d1
 80162f4:	080164dd 	.word	0x080164dd
 80162f8:	080164e9 	.word	0x080164e9
    {
    case PHPAL_SLI15693_CONFIG_FLAGS:
        *pValue = pDataParams->bFlags;
 80162fc:	68fb      	ldr	r3, [r7, #12]
 80162fe:	7a9b      	ldrb	r3, [r3, #10]
 8016300:	461a      	mov	r2, r3
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	801a      	strh	r2, [r3, #0]
        break;
 8016306:	e0fb      	b.n	8016500 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_ADD_INFO:
        *pValue = pDataParams->wAdditionalInfo;
 8016308:	68fb      	ldr	r3, [r7, #12]
 801630a:	891a      	ldrh	r2, [r3, #8]
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	801a      	strh	r2, [r3, #0]
        break;
 8016310:	e0f6      	b.n	8016500 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_TIMEOUT_US:
        /* Get HAL timeout value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 8016312:	68fb      	ldr	r3, [r7, #12]
 8016314:	685b      	ldr	r3, [r3, #4]
 8016316:	687a      	ldr	r2, [r7, #4]
 8016318:	210d      	movs	r1, #13
 801631a:	4618      	mov	r0, r3
 801631c:	f7f8 fc46 	bl	800ebac <phhalHw_Pn5180_GetConfig>
 8016320:	4603      	mov	r3, r0
 8016322:	82fb      	strh	r3, [r7, #22]
 8016324:	8afb      	ldrh	r3, [r7, #22]
 8016326:	2b00      	cmp	r3, #0
 8016328:	d001      	beq.n	801632e <phpalSli15693_Sw_GetConfig+0x7a>
 801632a:	8afb      	ldrh	r3, [r7, #22]
 801632c:	e0e9      	b.n	8016502 <phpalSli15693_Sw_GetConfig+0x24e>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
            pValue));

        /* Remove timeout extension */
        *pValue -= PHPAL_SLI15693_SW_EXT_TIME_US;
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	881b      	ldrh	r3, [r3, #0]
 8016332:	3b3c      	subs	r3, #60	@ 0x3c
 8016334:	b29a      	uxth	r2, r3
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	801a      	strh	r2, [r3, #0]
        break;
 801633a:	e0e1      	b.n	8016500 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_TIMEOUT_MS:
        /* Get HAL timeout value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 801633c:	68fb      	ldr	r3, [r7, #12]
 801633e:	685b      	ldr	r3, [r3, #4]
 8016340:	687a      	ldr	r2, [r7, #4]
 8016342:	210e      	movs	r1, #14
 8016344:	4618      	mov	r0, r3
 8016346:	f7f8 fc31 	bl	800ebac <phhalHw_Pn5180_GetConfig>
 801634a:	4603      	mov	r3, r0
 801634c:	82fb      	strh	r3, [r7, #22]
 801634e:	8afb      	ldrh	r3, [r7, #22]
 8016350:	2b00      	cmp	r3, #0
 8016352:	f000 80d2 	beq.w	80164fa <phpalSli15693_Sw_GetConfig+0x246>
 8016356:	8afb      	ldrh	r3, [r7, #22]
 8016358:	e0d3      	b.n	8016502 <phpalSli15693_Sw_GetConfig+0x24e>

        break;

    case PHPAL_SLI15693_CONFIG_TXDATARATE:
        /* Get HAL Tx Data Rate value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 801635a:	68fb      	ldr	r3, [r7, #12]
 801635c:	685b      	ldr	r3, [r3, #4]
 801635e:	687a      	ldr	r2, [r7, #4]
 8016360:	2109      	movs	r1, #9
 8016362:	4618      	mov	r0, r3
 8016364:	f7f8 fc22 	bl	800ebac <phhalHw_Pn5180_GetConfig>
 8016368:	4603      	mov	r3, r0
 801636a:	82fb      	strh	r3, [r7, #22]
 801636c:	8afb      	ldrh	r3, [r7, #22]
 801636e:	2b00      	cmp	r3, #0
 8016370:	d001      	beq.n	8016376 <phpalSli15693_Sw_GetConfig+0xc2>
 8016372:	8afb      	ldrh	r3, [r7, #22]
 8016374:	e0c5      	b.n	8016502 <phpalSli15693_Sw_GetConfig+0x24e>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_TXDATARATE_FRAMING,
            pValue));

        /* Map the HAL TX BaudRates to generic 15693 BaudRates */
        switch(*pValue)
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	881b      	ldrh	r3, [r3, #0]
 801637a:	2b1b      	cmp	r3, #27
 801637c:	d84a      	bhi.n	8016414 <phpalSli15693_Sw_GetConfig+0x160>
 801637e:	a201      	add	r2, pc, #4	@ (adr r2, 8016384 <phpalSli15693_Sw_GetConfig+0xd0>)
 8016380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016384:	08016405 	.word	0x08016405
 8016388:	0801640d 	.word	0x0801640d
 801638c:	08016415 	.word	0x08016415
 8016390:	08016415 	.word	0x08016415
 8016394:	08016415 	.word	0x08016415
 8016398:	08016415 	.word	0x08016415
 801639c:	08016415 	.word	0x08016415
 80163a0:	08016415 	.word	0x08016415
 80163a4:	08016415 	.word	0x08016415
 80163a8:	08016415 	.word	0x08016415
 80163ac:	08016415 	.word	0x08016415
 80163b0:	080163f5 	.word	0x080163f5
 80163b4:	08016415 	.word	0x08016415
 80163b8:	08016415 	.word	0x08016415
 80163bc:	08016415 	.word	0x08016415
 80163c0:	08016415 	.word	0x08016415
 80163c4:	08016415 	.word	0x08016415
 80163c8:	08016415 	.word	0x08016415
 80163cc:	08016415 	.word	0x08016415
 80163d0:	08016415 	.word	0x08016415
 80163d4:	08016415 	.word	0x08016415
 80163d8:	08016415 	.word	0x08016415
 80163dc:	08016415 	.word	0x08016415
 80163e0:	08016415 	.word	0x08016415
 80163e4:	08016415 	.word	0x08016415
 80163e8:	08016415 	.word	0x08016415
 80163ec:	08016415 	.word	0x08016415
 80163f0:	080163fd 	.word	0x080163fd
        {
        case PHHAL_HW_RF_TX_DATARATE_1_OUT_OF_4:
            *pValue = PHPAL_SLI15693_26KBPS_DATARATE;
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	221a      	movs	r2, #26
 80163f8:	801a      	strh	r2, [r3, #0]
            break;
 80163fa:	e00c      	b.n	8016416 <phpalSli15693_Sw_GetConfig+0x162>
        case PHHAL_HW_RF_I15693_53KBPS_DATARATE:
            *pValue = PHPAL_SLI15693_53KBPS_DATARATE;
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	221b      	movs	r2, #27
 8016400:	801a      	strh	r2, [r3, #0]
            break;
 8016402:	e008      	b.n	8016416 <phpalSli15693_Sw_GetConfig+0x162>
        case PHHAL_HW_RF_DATARATE_106:
            *pValue = PHPAL_SLI15693_106KBPS_DATARATE;
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	221c      	movs	r2, #28
 8016408:	801a      	strh	r2, [r3, #0]
            break;
 801640a:	e004      	b.n	8016416 <phpalSli15693_Sw_GetConfig+0x162>
        case PHHAL_HW_RF_DATARATE_212:
            *pValue = PHPAL_SLI15693_212KBPS_DATARATE;
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	221d      	movs	r2, #29
 8016410:	801a      	strh	r2, [r3, #0]
            break;
 8016412:	e000      	b.n	8016416 <phpalSli15693_Sw_GetConfig+0x162>
        default:
            break;
 8016414:	bf00      	nop
        }
        break;
 8016416:	e073      	b.n	8016500 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_RXDATARATE:
        /* Get HAL timeout value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	685b      	ldr	r3, [r3, #4]
 801641c:	687a      	ldr	r2, [r7, #4]
 801641e:	210a      	movs	r1, #10
 8016420:	4618      	mov	r0, r3
 8016422:	f7f8 fbc3 	bl	800ebac <phhalHw_Pn5180_GetConfig>
 8016426:	4603      	mov	r3, r0
 8016428:	82fb      	strh	r3, [r7, #22]
 801642a:	8afb      	ldrh	r3, [r7, #22]
 801642c:	2b00      	cmp	r3, #0
 801642e:	d001      	beq.n	8016434 <phpalSli15693_Sw_GetConfig+0x180>
 8016430:	8afb      	ldrh	r3, [r7, #22]
 8016432:	e066      	b.n	8016502 <phpalSli15693_Sw_GetConfig+0x24e>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_RXDATARATE_FRAMING,
            pValue));

        /* Map the HAL RX BaudRates to generic 15693 BaudRates */
        switch(*pValue)
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	881b      	ldrh	r3, [r3, #0]
 8016438:	2b0f      	cmp	r3, #15
 801643a:	d833      	bhi.n	80164a4 <phpalSli15693_Sw_GetConfig+0x1f0>
 801643c:	a201      	add	r2, pc, #4	@ (adr r2, 8016444 <phpalSli15693_Sw_GetConfig+0x190>)
 801643e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016442:	bf00      	nop
 8016444:	08016495 	.word	0x08016495
 8016448:	0801649d 	.word	0x0801649d
 801644c:	080164a5 	.word	0x080164a5
 8016450:	080164a5 	.word	0x080164a5
 8016454:	080164a5 	.word	0x080164a5
 8016458:	080164a5 	.word	0x080164a5
 801645c:	080164a5 	.word	0x080164a5
 8016460:	080164a5 	.word	0x080164a5
 8016464:	080164a5 	.word	0x080164a5
 8016468:	080164a5 	.word	0x080164a5
 801646c:	080164a5 	.word	0x080164a5
 8016470:	080164a5 	.word	0x080164a5
 8016474:	080164a5 	.word	0x080164a5
 8016478:	08016485 	.word	0x08016485
 801647c:	080164a5 	.word	0x080164a5
 8016480:	0801648d 	.word	0x0801648d
        {
        case PHHAL_HW_RF_RX_DATARATE_HIGH:
            *pValue = PHPAL_SLI15693_26KBPS_DATARATE;
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	221a      	movs	r2, #26
 8016488:	801a      	strh	r2, [r3, #0]
            break;
 801648a:	e00c      	b.n	80164a6 <phpalSli15693_Sw_GetConfig+0x1f2>
        case PHHAL_HW_RF_RX_DATARATE_FAST_HIGH:
            *pValue = PHPAL_SLI15693_53KBPS_DATARATE;
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	221b      	movs	r2, #27
 8016490:	801a      	strh	r2, [r3, #0]
            break;
 8016492:	e008      	b.n	80164a6 <phpalSli15693_Sw_GetConfig+0x1f2>
        case PHHAL_HW_RF_DATARATE_106:
            *pValue = PHPAL_SLI15693_106KBPS_DATARATE;
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	221c      	movs	r2, #28
 8016498:	801a      	strh	r2, [r3, #0]
            break;
 801649a:	e004      	b.n	80164a6 <phpalSli15693_Sw_GetConfig+0x1f2>
        case PHHAL_HW_RF_DATARATE_212:
            *pValue = PHPAL_SLI15693_212KBPS_DATARATE;
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	221d      	movs	r2, #29
 80164a0:	801a      	strh	r2, [r3, #0]
            break;
 80164a2:	e000      	b.n	80164a6 <phpalSli15693_Sw_GetConfig+0x1f2>
        default:
            break;
 80164a4:	bf00      	nop
        }
        break;
 80164a6:	e02b      	b.n	8016500 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_T1_PARAMETER:

        /* Retrieve current T1 Value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 80164a8:	68fb      	ldr	r3, [r7, #12]
 80164aa:	685b      	ldr	r3, [r3, #4]
 80164ac:	687a      	ldr	r2, [r7, #4]
 80164ae:	210d      	movs	r1, #13
 80164b0:	4618      	mov	r0, r3
 80164b2:	f7f8 fb7b 	bl	800ebac <phhalHw_Pn5180_GetConfig>
 80164b6:	4603      	mov	r3, r0
 80164b8:	82fb      	strh	r3, [r7, #22]
 80164ba:	8afb      	ldrh	r3, [r7, #22]
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d01e      	beq.n	80164fe <phpalSli15693_Sw_GetConfig+0x24a>
 80164c0:	8afb      	ldrh	r3, [r7, #22]
 80164c2:	e01e      	b.n	8016502 <phpalSli15693_Sw_GetConfig+0x24e>
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
            pValue));
        break;

    case PHPAL_SLI15693_CONFIG_ENABLE_BUFFERING:
        *pValue = pDataParams->bBuffering;
 80164c4:	68fb      	ldr	r3, [r7, #12]
 80164c6:	7ddb      	ldrb	r3, [r3, #23]
 80164c8:	461a      	mov	r2, r3
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	801a      	strh	r2, [r3, #0]
        break;
 80164ce:	e017      	b.n	8016500 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_MAXRETRYCOUNT:
        *pValue = pDataParams->bMaxRetryCount;
 80164d0:	68fb      	ldr	r3, [r7, #12]
 80164d2:	7e1b      	ldrb	r3, [r3, #24]
 80164d4:	461a      	mov	r2, r3
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	801a      	strh	r2, [r3, #0]
        break;
 80164da:	e011      	b.n	8016500 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_ICMFGCODE:
        *pValue = pDataParams->bIcMfgCode;
 80164dc:	68fb      	ldr	r3, [r7, #12]
 80164de:	7e5b      	ldrb	r3, [r3, #25]
 80164e0:	461a      	mov	r2, r3
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	801a      	strh	r2, [r3, #0]
        break;
 80164e6:	e00b      	b.n	8016500 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_OPE_MODE:
        *pValue = pDataParams->bOpeMode;
 80164e8:	68fb      	ldr	r3, [r7, #12]
 80164ea:	7d9b      	ldrb	r3, [r3, #22]
 80164ec:	461a      	mov	r2, r3
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	801a      	strh	r2, [r3, #0]
        break;
 80164f2:	e005      	b.n	8016500 <phpalSli15693_Sw_GetConfig+0x24c>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_SLI15693);
 80164f4:	f640 2323 	movw	r3, #2595	@ 0xa23
 80164f8:	e003      	b.n	8016502 <phpalSli15693_Sw_GetConfig+0x24e>
        break;
 80164fa:	bf00      	nop
 80164fc:	e000      	b.n	8016500 <phpalSli15693_Sw_GetConfig+0x24c>
        break;
 80164fe:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 8016500:	2300      	movs	r3, #0
}
 8016502:	4618      	mov	r0, r3
 8016504:	3718      	adds	r7, #24
 8016506:	46bd      	mov	sp, r7
 8016508:	bd80      	pop	{r7, pc}
 801650a:	bf00      	nop

0801650c <phpalSli15693_Sw_InventoryEx>:
                                        uint8_t * pUid,
                                        uint8_t * pUidLength,
                                        uint8_t * pData,
                                        uint16_t * pDataLength
                                        )
{
 801650c:	b580      	push	{r7, lr}
 801650e:	b08e      	sub	sp, #56	@ 0x38
 8016510:	af0c      	add	r7, sp, #48	@ 0x30
 8016512:	6078      	str	r0, [r7, #4]
 8016514:	4608      	mov	r0, r1
 8016516:	4611      	mov	r1, r2
 8016518:	461a      	mov	r2, r3
 801651a:	4603      	mov	r3, r0
 801651c:	70fb      	strb	r3, [r7, #3]
 801651e:	460b      	mov	r3, r1
 8016520:	70bb      	strb	r3, [r7, #2]
 8016522:	4613      	mov	r3, r2
 8016524:	707b      	strb	r3, [r7, #1]
        return  phpalSli15693_Sw_InventoryExt(
 8016526:	7878      	ldrb	r0, [r7, #1]
 8016528:	78ba      	ldrb	r2, [r7, #2]
 801652a:	78f9      	ldrb	r1, [r7, #3]
 801652c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801652e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016532:	930a      	str	r3, [sp, #40]	@ 0x28
 8016534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016536:	9309      	str	r3, [sp, #36]	@ 0x24
 8016538:	6a3b      	ldr	r3, [r7, #32]
 801653a:	9308      	str	r3, [sp, #32]
 801653c:	2300      	movs	r3, #0
 801653e:	9307      	str	r3, [sp, #28]
 8016540:	8bbb      	ldrh	r3, [r7, #28]
 8016542:	9306      	str	r3, [sp, #24]
 8016544:	7e3b      	ldrb	r3, [r7, #24]
 8016546:	9305      	str	r3, [sp, #20]
 8016548:	7d3b      	ldrb	r3, [r7, #20]
 801654a:	9304      	str	r3, [sp, #16]
 801654c:	693b      	ldr	r3, [r7, #16]
 801654e:	9303      	str	r3, [sp, #12]
 8016550:	2300      	movs	r3, #0
 8016552:	9302      	str	r3, [sp, #8]
 8016554:	2300      	movs	r3, #0
 8016556:	9301      	str	r3, [sp, #4]
 8016558:	2300      	movs	r3, #0
 801655a:	9300      	str	r3, [sp, #0]
 801655c:	4603      	mov	r3, r0
 801655e:	6878      	ldr	r0, [r7, #4]
 8016560:	f000 f805 	bl	801656e <phpalSli15693_Sw_InventoryExt>
 8016564:	4603      	mov	r3, r0
                pUid,
                pUidLength,
                pData,
                pDataLength
                );
}
 8016566:	4618      	mov	r0, r3
 8016568:	3708      	adds	r7, #8
 801656a:	46bd      	mov	sp, r7
 801656c:	bd80      	pop	{r7, pc}

0801656e <phpalSli15693_Sw_InventoryExt>:
                                        uint8_t * pUid,
                                        uint8_t * pUidLength,
                                        uint8_t * pData,
                                        uint16_t * pDataLength
                                        )
{
 801656e:	b580      	push	{r7, lr}
 8016570:	b090      	sub	sp, #64	@ 0x40
 8016572:	af02      	add	r7, sp, #8
 8016574:	6078      	str	r0, [r7, #4]
 8016576:	4608      	mov	r0, r1
 8016578:	4611      	mov	r1, r2
 801657a:	461a      	mov	r2, r3
 801657c:	4603      	mov	r3, r0
 801657e:	70fb      	strb	r3, [r7, #3]
 8016580:	460b      	mov	r3, r1
 8016582:	70bb      	strb	r3, [r7, #2]
 8016584:	4613      	mov	r3, r2
 8016586:	707b      	strb	r3, [r7, #1]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bCmdBuffer[15];
    uint8_t     PH_MEMLOC_REM bCmdBufferLen = 0;
 8016588:	2300      	movs	r3, #0
 801658a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint8_t     PH_MEMLOC_REM bCmdOffset = 0;
 801658e:	2300      	movs	r3, #0
 8016590:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    uint8_t     PH_MEMLOC_REM bMaskByteLength;
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8016594:	2300      	movs	r3, #0
 8016596:	613b      	str	r3, [r7, #16]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8016598:	2300      	movs	r3, #0
 801659a:	81fb      	strh	r3, [r7, #14]
    uint8_t     PH_MEMLOC_REM bStoredUidLength = 0;
 801659c:	2300      	movs	r3, #0
 801659e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    uint16_t    PH_MEMLOC_REM wAsk = 0;
 80165a2:	2300      	movs	r3, #0
 80165a4:	81bb      	strh	r3, [r7, #12]
    uint16_t    PH_MEMLOC_REM wTimeout = 0;
 80165a6:	2300      	movs	r3, #0
 80165a8:	867b      	strh	r3, [r7, #50]	@ 0x32
    uint16_t    PH_MEMLOC_REM wCurrBlocksToRead = 0;
 80165aa:	2300      	movs	r3, #0
 80165ac:	863b      	strh	r3, [r7, #48]	@ 0x30
    uint16_t    PH_MEMLOC_REM wCurrBlockNo = 0;
 80165ae:	2300      	movs	r3, #0
 80165b0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    uint16_t    PH_MEMLOC_REM wMaxNoBlocks = 0;
 80165b2:	2300      	movs	r3, #0
 80165b4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    uint8_t     PH_MEMLOC_REM bAllBlocksRead = 0;
 80165b6:	2300      	movs	r3, #0
 80165b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    uint8_t     PH_MEMLOC_REM bFirst = 0;
 80165bc:	2300      	movs	r3, #0
 80165be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

    /* Reset UID and data length */
    pDataParams->bUidBitLength = 0;
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	2200      	movs	r2, #0
 80165c6:	751a      	strb	r2, [r3, #20]

    if(((pUidLength == NULL) || (pUid == NULL)) || ((0U != ((bExtendedOptions & PHPAL_SLI15693_FLAG_SKIP_DATA))) && ((pDataLength == NULL) || (pData == NULL))))
 80165c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d00e      	beq.n	80165ec <phpalSli15693_Sw_InventoryExt+0x7e>
 80165ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	d00b      	beq.n	80165ec <phpalSli15693_Sw_InventoryExt+0x7e>
 80165d4:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80165d8:	f003 0310 	and.w	r3, r3, #16
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d008      	beq.n	80165f2 <phpalSli15693_Sw_InventoryExt+0x84>
 80165e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d002      	beq.n	80165ec <phpalSli15693_Sw_InventoryExt+0x7e>
 80165e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	d102      	bne.n	80165f2 <phpalSli15693_Sw_InventoryExt+0x84>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 80165ec:	f640 2321 	movw	r3, #2593	@ 0xa21
 80165f0:	e334      	b.n	8016c5c <phpalSli15693_Sw_InventoryExt+0x6ee>
    }

    /* If Extended Option is looking for CID response then CID should not be null */
    if ((0U != ((bExtendedOptions & PHPAL_SLI15693_FLAG_CID_COMPARE))) && (pCID == NULL))
 80165f2:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80165f6:	f003 0304 	and.w	r3, r3, #4
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d005      	beq.n	801660a <phpalSli15693_Sw_InventoryExt+0x9c>
 80165fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016600:	2b00      	cmp	r3, #0
 8016602:	d102      	bne.n	801660a <phpalSli15693_Sw_InventoryExt+0x9c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 8016604:	f640 2321 	movw	r3, #2593	@ 0xa21
 8016608:	e328      	b.n	8016c5c <phpalSli15693_Sw_InventoryExt+0x6ee>
    }
    /* If Extended Option is looking for CID response then CID should not be null */
    if((0U != ((bExtendedOptions & PHPAL_SLI15693_FLAG_CID_RESPONSE))) && (pCIDOut == NULL))
 801660a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801660e:	f003 0308 	and.w	r3, r3, #8
 8016612:	2b00      	cmp	r3, #0
 8016614:	d005      	beq.n	8016622 <phpalSli15693_Sw_InventoryExt+0xb4>
 8016616:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016618:	2b00      	cmp	r3, #0
 801661a:	d102      	bne.n	8016622 <phpalSli15693_Sw_InventoryExt+0xb4>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 801661c:	f640 2321 	movw	r3, #2593	@ 0xa21
 8016620:	e31c      	b.n	8016c5c <phpalSli15693_Sw_InventoryExt+0x6ee>
    }

    *pUidLength = 0;
 8016622:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016624:	2200      	movs	r2, #0
 8016626:	701a      	strb	r2, [r3, #0]
    *pDataLength = 0;
 8016628:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801662a:	2200      	movs	r2, #0
 801662c:	801a      	strh	r2, [r3, #0]

    /* first of all we check the bMaskBitLength according to ISO/IEC15693, 8.1, assuming
    the inventory flag to be set, si b6 deines the number of slots
    b6 = 1: --> one slot --> mask length = [0 .. 64] bits
    b6 = 0: --> 16 slots --> mask length = [0 .. 60] bits */
    if (((0U != ((bFlags & PHPAL_SLI15693_FLAG_NBSLOTS))) && (bMaskBitLength > 64U)) ||
 801662e:	78bb      	ldrb	r3, [r7, #2]
 8016630:	f003 0320 	and.w	r3, r3, #32
 8016634:	2b00      	cmp	r3, #0
 8016636:	d003      	beq.n	8016640 <phpalSli15693_Sw_InventoryExt+0xd2>
 8016638:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 801663c:	2b40      	cmp	r3, #64	@ 0x40
 801663e:	d808      	bhi.n	8016652 <phpalSli15693_Sw_InventoryExt+0xe4>
        ((0U == ((bFlags & PHPAL_SLI15693_FLAG_NBSLOTS))) && (bMaskBitLength > 60U)))
 8016640:	78bb      	ldrb	r3, [r7, #2]
 8016642:	f003 0320 	and.w	r3, r3, #32
    if (((0U != ((bFlags & PHPAL_SLI15693_FLAG_NBSLOTS))) && (bMaskBitLength > 64U)) ||
 8016646:	2b00      	cmp	r3, #0
 8016648:	d106      	bne.n	8016658 <phpalSli15693_Sw_InventoryExt+0xea>
        ((0U == ((bFlags & PHPAL_SLI15693_FLAG_NBSLOTS))) && (bMaskBitLength > 60U)))
 801664a:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 801664e:	2b3c      	cmp	r3, #60	@ 0x3c
 8016650:	d902      	bls.n	8016658 <phpalSli15693_Sw_InventoryExt+0xea>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 8016652:	f640 2321 	movw	r3, #2593	@ 0xa21
 8016656:	e301      	b.n	8016c5c <phpalSli15693_Sw_InventoryExt+0x6ee>
    }

    /* Number of Pages/Blocks check */
    if (bCmd != PHPAL_SLI15693_SW_CMD_INVENTORY)
 8016658:	78fb      	ldrb	r3, [r7, #3]
 801665a:	2b01      	cmp	r3, #1
 801665c:	d010      	beq.n	8016680 <phpalSli15693_Sw_InventoryExt+0x112>
    {
        /* Number of Pages/Blocks can't be zero */
        if (wNoOfPages_Blocks == 0U)
 801665e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8016662:	2b00      	cmp	r3, #0
 8016664:	d102      	bne.n	801666c <phpalSli15693_Sw_InventoryExt+0xfe>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 8016666:	f640 2321 	movw	r3, #2593	@ 0xa21
 801666a:	e2f7      	b.n	8016c5c <phpalSli15693_Sw_InventoryExt+0x6ee>
        }

        /* check if the block number exceeds the limit */
        if (((uint16_t)bPage_Block_No + wNoOfPages_Blocks) >= PHPAL_SLI15693_SW_MAX_BLOCKS)
 801666c:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8016670:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8016674:	4413      	add	r3, r2
 8016676:	2bff      	cmp	r3, #255	@ 0xff
 8016678:	d902      	bls.n	8016680 <phpalSli15693_Sw_InventoryExt+0x112>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 801667a:	f640 2321 	movw	r3, #2593	@ 0xa21
 801667e:	e2ed      	b.n	8016c5c <phpalSli15693_Sw_InventoryExt+0x6ee>
        }
    }

    /* Add command code */
    bCmdBuffer[bCmdBufferLen++] = bCmd;
 8016680:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016684:	1c5a      	adds	r2, r3, #1
 8016686:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 801668a:	3338      	adds	r3, #56	@ 0x38
 801668c:	443b      	add	r3, r7
 801668e:	78fa      	ldrb	r2, [r7, #3]
 8016690:	f803 2c24 	strb.w	r2, [r3, #-36]

    /* Apply flag settings */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 8016694:	78bb      	ldrb	r3, [r7, #2]
 8016696:	b29b      	uxth	r3, r3
 8016698:	461a      	mov	r2, r3
 801669a:	2100      	movs	r1, #0
 801669c:	6878      	ldr	r0, [r7, #4]
 801669e:	f7ff fc33 	bl	8015f08 <phpalSli15693_Sw_SetConfig>
 80166a2:	4603      	mov	r3, r0
 80166a4:	853b      	strh	r3, [r7, #40]	@ 0x28
 80166a6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d001      	beq.n	80166b0 <phpalSli15693_Sw_InventoryExt+0x142>
 80166ac:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80166ae:	e2d5      	b.n	8016c5c <phpalSli15693_Sw_InventoryExt+0x6ee>
        pDataParams,
        PHPAL_SLI15693_CONFIG_FLAGS,
        bFlags));

    /* Overwrite datarate for fast inventory (page-)read */
    if ((bCmd == PHPAL_SLI15693_SW_CMD_FAST_INVENTORY_READ) ||
 80166b0:	78fb      	ldrb	r3, [r7, #3]
 80166b2:	2ba1      	cmp	r3, #161	@ 0xa1
 80166b4:	d002      	beq.n	80166bc <phpalSli15693_Sw_InventoryExt+0x14e>
 80166b6:	78fb      	ldrb	r3, [r7, #3]
 80166b8:	2bb1      	cmp	r3, #177	@ 0xb1
 80166ba:	d120      	bne.n	80166fe <phpalSli15693_Sw_InventoryExt+0x190>
        (bCmd == PHPAL_SLI15693_SW_CMD_FAST_INVENTORY_PAGE_READ))
    {
        if (0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 80166bc:	78bb      	ldrb	r3, [r7, #2]
 80166be:	f003 0302 	and.w	r3, r3, #2
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	d00d      	beq.n	80166e2 <phpalSli15693_Sw_InventoryExt+0x174>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	685b      	ldr	r3, [r3, #4]
 80166ca:	220f      	movs	r2, #15
 80166cc:	210a      	movs	r1, #10
 80166ce:	4618      	mov	r0, r3
 80166d0:	f7f6 fe1e 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 80166d4:	4603      	mov	r3, r0
 80166d6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80166d8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d00f      	beq.n	80166fe <phpalSli15693_Sw_InventoryExt+0x190>
 80166de:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80166e0:	e2bc      	b.n	8016c5c <phpalSli15693_Sw_InventoryExt+0x6ee>
                PHHAL_HW_CONFIG_RXDATARATE_FRAMING,
                PHHAL_HW_RF_RX_DATARATE_FAST_HIGH));
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	685b      	ldr	r3, [r3, #4]
 80166e6:	220e      	movs	r2, #14
 80166e8:	210a      	movs	r1, #10
 80166ea:	4618      	mov	r0, r3
 80166ec:	f7f6 fe10 	bl	800d310 <phhalHw_Pn5180_SetConfig>
 80166f0:	4603      	mov	r3, r0
 80166f2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80166f4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d001      	beq.n	80166fe <phpalSli15693_Sw_InventoryExt+0x190>
 80166fa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80166fc:	e2ae      	b.n	8016c5c <phpalSli15693_Sw_InventoryExt+0x6ee>
                PHHAL_HW_RF_RX_DATARATE_FAST_LOW));
        }
    }

    /* check if AFI shall be sent: */
    if ((0U != ((bFlags & PHPAL_SLI15693_FLAG_AFI))) && (0U != ((bFlags & PHPAL_SLI15693_FLAG_INVENTORY))))
 80166fe:	78bb      	ldrb	r3, [r7, #2]
 8016700:	f003 0310 	and.w	r3, r3, #16
 8016704:	2b00      	cmp	r3, #0
 8016706:	d00e      	beq.n	8016726 <phpalSli15693_Sw_InventoryExt+0x1b8>
 8016708:	78bb      	ldrb	r3, [r7, #2]
 801670a:	f003 0304 	and.w	r3, r3, #4
 801670e:	2b00      	cmp	r3, #0
 8016710:	d009      	beq.n	8016726 <phpalSli15693_Sw_InventoryExt+0x1b8>
    {
        bCmdBuffer[bCmdBufferLen++] = bAfi;
 8016712:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016716:	1c5a      	adds	r2, r3, #1
 8016718:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 801671c:	3338      	adds	r3, #56	@ 0x38
 801671e:	443b      	add	r3, r7
 8016720:	787a      	ldrb	r2, [r7, #1]
 8016722:	f803 2c24 	strb.w	r2, [r3, #-36]
    }

    /* Add mask length */
    /* Making the MSB of mask length byte as 1 to show extended mode */
    /* In case of extended mode add the extended option in command */
    if (0U != (bExtended))
 8016726:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 801672a:	2b00      	cmp	r3, #0
 801672c:	d03b      	beq.n	80167a6 <phpalSli15693_Sw_InventoryExt+0x238>
    {
        bCmdBuffer[bCmdBufferLen++] = bMaskBitLength | PHPAL_SLI15693_FLAG_INVENTORY_READ_EXTENSION;
 801672e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016732:	1c5a      	adds	r2, r3, #1
 8016734:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 8016738:	4619      	mov	r1, r3
 801673a:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 801673e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8016742:	b2da      	uxtb	r2, r3
 8016744:	f101 0338 	add.w	r3, r1, #56	@ 0x38
 8016748:	443b      	add	r3, r7
 801674a:	f803 2c24 	strb.w	r2, [r3, #-36]
        bCmdBuffer[bCmdBufferLen++] = bExtendedOptions;
 801674e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016752:	1c5a      	adds	r2, r3, #1
 8016754:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 8016758:	3338      	adds	r3, #56	@ 0x38
 801675a:	443b      	add	r3, r7
 801675c:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8016760:	f803 2c24 	strb.w	r2, [r3, #-36]
        if (0U != (bExtendedOptions & PHPAL_SLI15693_FLAG_CID_COMPARE))
 8016764:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8016768:	f003 0304 	and.w	r3, r3, #4
 801676c:	2b00      	cmp	r3, #0
 801676e:	d025      	beq.n	80167bc <phpalSli15693_Sw_InventoryExt+0x24e>
        {
            bCmdBuffer[bCmdBufferLen++] = pCID[0];
 8016770:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016774:	1c5a      	adds	r2, r3, #1
 8016776:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 801677a:	4619      	mov	r1, r3
 801677c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801677e:	781a      	ldrb	r2, [r3, #0]
 8016780:	f101 0338 	add.w	r3, r1, #56	@ 0x38
 8016784:	443b      	add	r3, r7
 8016786:	f803 2c24 	strb.w	r2, [r3, #-36]
            bCmdBuffer[bCmdBufferLen++] = pCID[1];
 801678a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801678e:	1c5a      	adds	r2, r3, #1
 8016790:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 8016794:	4619      	mov	r1, r3
 8016796:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016798:	785a      	ldrb	r2, [r3, #1]
 801679a:	f101 0338 	add.w	r3, r1, #56	@ 0x38
 801679e:	443b      	add	r3, r7
 80167a0:	f803 2c24 	strb.w	r2, [r3, #-36]
 80167a4:	e00a      	b.n	80167bc <phpalSli15693_Sw_InventoryExt+0x24e>
        }
    }
    else
    {
        bCmdBuffer[bCmdBufferLen++] = bMaskBitLength;
 80167a6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80167aa:	1c5a      	adds	r2, r3, #1
 80167ac:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 80167b0:	3338      	adds	r3, #56	@ 0x38
 80167b2:	443b      	add	r3, r7
 80167b4:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 80167b8:	f803 2c24 	strb.w	r2, [r3, #-36]
    }

    /* Retrieve mask byte length */
    bMaskByteLength = ((bMaskBitLength % 8U) != 0U) ? ((bMaskBitLength >> 3U) + 1U) : (bMaskBitLength >> 3U);
 80167bc:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80167c0:	f003 0307 	and.w	r3, r3, #7
 80167c4:	b2db      	uxtb	r3, r3
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d006      	beq.n	80167d8 <phpalSli15693_Sw_InventoryExt+0x26a>
 80167ca:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80167ce:	08db      	lsrs	r3, r3, #3
 80167d0:	b2db      	uxtb	r3, r3
 80167d2:	3301      	adds	r3, #1
 80167d4:	b2db      	uxtb	r3, r3
 80167d6:	e003      	b.n	80167e0 <phpalSli15693_Sw_InventoryExt+0x272>
 80167d8:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80167dc:	08db      	lsrs	r3, r3, #3
 80167de:	b2db      	uxtb	r3, r3
 80167e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* prepare mask in dataparams */
    (void)memcpy(pDataParams->pUid, pMask, bMaskByteLength );
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	330c      	adds	r3, #12
 80167e8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80167ec:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80167ee:	4618      	mov	r0, r3
 80167f0:	f006 fd05 	bl	801d1fe <memcpy>
    pDataParams->bUidBitLength = bMaskBitLength;
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 80167fa:	751a      	strb	r2, [r3, #20]

    /* prepare mask to send */
    (void)memcpy(&bCmdBuffer[bCmdBufferLen], pMask, bMaskByteLength );
 80167fc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016800:	f107 0214 	add.w	r2, r7, #20
 8016804:	4413      	add	r3, r2
 8016806:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801680a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801680c:	4618      	mov	r0, r3
 801680e:	f006 fcf6 	bl	801d1fe <memcpy>
    bCmdBufferLen = bCmdBufferLen + bMaskByteLength;
 8016812:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8016816:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801681a:	4413      	add	r3, r2
 801681c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    /* mask out invalid bits */
    if (0U != (bMaskBitLength & 0x07U))
 8016820:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8016824:	f003 0307 	and.w	r3, r3, #7
 8016828:	2b00      	cmp	r3, #0
 801682a:	d019      	beq.n	8016860 <phpalSli15693_Sw_InventoryExt+0x2f2>
    {
        bCmdBuffer[bCmdBufferLen - 1U] &= (uint8_t)(0xFFU >> (8U - (bMaskBitLength & 0x07U)));
 801682c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016830:	3b01      	subs	r3, #1
 8016832:	3338      	adds	r3, #56	@ 0x38
 8016834:	443b      	add	r3, r7
 8016836:	f813 1c24 	ldrb.w	r1, [r3, #-36]
 801683a:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 801683e:	f003 0307 	and.w	r3, r3, #7
 8016842:	f1c3 0308 	rsb	r3, r3, #8
 8016846:	22ff      	movs	r2, #255	@ 0xff
 8016848:	fa22 f303 	lsr.w	r3, r2, r3
 801684c:	b2da      	uxtb	r2, r3
 801684e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016852:	3b01      	subs	r3, #1
 8016854:	400a      	ands	r2, r1
 8016856:	b2d2      	uxtb	r2, r2
 8016858:	3338      	adds	r3, #56	@ 0x38
 801685a:	443b      	add	r3, r7
 801685c:	f803 2c24 	strb.w	r2, [r3, #-36]
    }

    /* Get the ASK 100 Condition */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	685b      	ldr	r3, [r3, #4]
 8016864:	f107 020c 	add.w	r2, r7, #12
 8016868:	210c      	movs	r1, #12
 801686a:	4618      	mov	r0, r3
 801686c:	f7f8 f99e 	bl	800ebac <phhalHw_Pn5180_GetConfig>
 8016870:	4603      	mov	r3, r0
 8016872:	853b      	strh	r3, [r7, #40]	@ 0x28
 8016874:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8016876:	2b00      	cmp	r3, #0
 8016878:	d001      	beq.n	801687e <phpalSli15693_Sw_InventoryExt+0x310>
 801687a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801687c:	e1ee      	b.n	8016c5c <phpalSli15693_Sw_InventoryExt+0x6ee>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_ASK100,
        &wAsk));

    /* Calculate Timeout based on ask and baud rate */
    if(wAsk != 0U)
 801687e:	89bb      	ldrh	r3, [r7, #12]
 8016880:	2b00      	cmp	r3, #0
 8016882:	d01f      	beq.n	80168c4 <phpalSli15693_Sw_InventoryExt+0x356>
    {
        if ((bCmd == PHPAL_SLI15693_SW_CMD_FAST_INVENTORY_READ) ||
 8016884:	78fb      	ldrb	r3, [r7, #3]
 8016886:	2ba1      	cmp	r3, #161	@ 0xa1
 8016888:	d002      	beq.n	8016890 <phpalSli15693_Sw_InventoryExt+0x322>
 801688a:	78fb      	ldrb	r3, [r7, #3]
 801688c:	2bb1      	cmp	r3, #177	@ 0xb1
 801688e:	d10c      	bne.n	80168aa <phpalSli15693_Sw_InventoryExt+0x33c>
            (bCmd == PHPAL_SLI15693_SW_CMD_FAST_INVENTORY_PAGE_READ))
        {
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 8016890:	78bb      	ldrb	r3, [r7, #2]
 8016892:	f003 0302 	and.w	r3, r3, #2
 8016896:	2b00      	cmp	r3, #0
 8016898:	d003      	beq.n	80168a2 <phpalSli15693_Sw_InventoryExt+0x334>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTHIGH_SOF_US;
 801689a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801689e:	867b      	strh	r3, [r7, #50]	@ 0x32
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 80168a0:	e02f      	b.n	8016902 <phpalSli15693_Sw_InventoryExt+0x394>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTLOW_SOF_US;
 80168a2:	f240 2373 	movw	r3, #627	@ 0x273
 80168a6:	867b      	strh	r3, [r7, #50]	@ 0x32
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 80168a8:	e02b      	b.n	8016902 <phpalSli15693_Sw_InventoryExt+0x394>
            }
        }
        else
        {
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 80168aa:	78bb      	ldrb	r3, [r7, #2]
 80168ac:	f003 0302 	and.w	r3, r3, #2
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	d003      	beq.n	80168bc <phpalSli15693_Sw_InventoryExt+0x34e>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_HIGH_SOF_US;
 80168b4:	f44f 73ee 	mov.w	r3, #476	@ 0x1dc
 80168b8:	867b      	strh	r3, [r7, #50]	@ 0x32
 80168ba:	e022      	b.n	8016902 <phpalSli15693_Sw_InventoryExt+0x394>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_LOW_SOF_US;
 80168bc:	f240 33a1 	movw	r3, #929	@ 0x3a1
 80168c0:	867b      	strh	r3, [r7, #50]	@ 0x32
 80168c2:	e01e      	b.n	8016902 <phpalSli15693_Sw_InventoryExt+0x394>
            }
        }
    }
    else
    {
        if ((bCmd == PHPAL_SLI15693_SW_CMD_FAST_INVENTORY_READ) ||
 80168c4:	78fb      	ldrb	r3, [r7, #3]
 80168c6:	2ba1      	cmp	r3, #161	@ 0xa1
 80168c8:	d002      	beq.n	80168d0 <phpalSli15693_Sw_InventoryExt+0x362>
 80168ca:	78fb      	ldrb	r3, [r7, #3]
 80168cc:	2bb1      	cmp	r3, #177	@ 0xb1
 80168ce:	d10c      	bne.n	80168ea <phpalSli15693_Sw_InventoryExt+0x37c>
            (bCmd == PHPAL_SLI15693_SW_CMD_FAST_INVENTORY_PAGE_READ))
        {
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 80168d0:	78bb      	ldrb	r3, [r7, #2]
 80168d2:	f003 0302 	and.w	r3, r3, #2
 80168d6:	2b00      	cmp	r3, #0
 80168d8:	d003      	beq.n	80168e2 <phpalSli15693_Sw_InventoryExt+0x374>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTHIGH_NRT_US;
 80168da:	f44f 630f 	mov.w	r3, #2288	@ 0x8f0
 80168de:	867b      	strh	r3, [r7, #50]	@ 0x32
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 80168e0:	e00f      	b.n	8016902 <phpalSli15693_Sw_InventoryExt+0x394>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTLOW_NRT_US;
 80168e2:	f641 73f3 	movw	r3, #8179	@ 0x1ff3
 80168e6:	867b      	strh	r3, [r7, #50]	@ 0x32
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 80168e8:	e00b      	b.n	8016902 <phpalSli15693_Sw_InventoryExt+0x394>
            }
        }
        else
        {
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 80168ea:	78bb      	ldrb	r3, [r7, #2]
 80168ec:	f003 0302 	and.w	r3, r3, #2
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	d003      	beq.n	80168fc <phpalSli15693_Sw_InventoryExt+0x38e>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_HIGH_NRT_US;
 80168f4:	f241 039c 	movw	r3, #4252	@ 0x109c
 80168f8:	867b      	strh	r3, [r7, #50]	@ 0x32
 80168fa:	e002      	b.n	8016902 <phpalSli15693_Sw_InventoryExt+0x394>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_LOW_NRT_US;
 80168fc:	f643 63a1 	movw	r3, #16033	@ 0x3ea1
 8016900:	867b      	strh	r3, [r7, #50]	@ 0x32
            }
        }
    }

    /* Set  timeout. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 8016902:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8016904:	461a      	mov	r2, r3
 8016906:	2102      	movs	r1, #2
 8016908:	6878      	ldr	r0, [r7, #4]
 801690a:	f7ff fafd 	bl	8015f08 <phpalSli15693_Sw_SetConfig>
 801690e:	4603      	mov	r3, r0
 8016910:	853b      	strh	r3, [r7, #40]	@ 0x28
 8016912:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8016914:	2b00      	cmp	r3, #0
 8016916:	d001      	beq.n	801691c <phpalSli15693_Sw_InventoryExt+0x3ae>
 8016918:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801691a:	e19f      	b.n	8016c5c <phpalSli15693_Sw_InventoryExt+0x6ee>
        pDataParams,
        PHPAL_SLI15693_CONFIG_TIMEOUT_US,
        wTimeout));

    /* Update the command offset variable. */
    bCmdOffset = bCmdBufferLen;
 801691c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016920:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* If buffering is set. */
    if((pDataParams->bBuffering) != 0U)
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	7ddb      	ldrb	r3, [r3, #23]
 8016928:	2b00      	cmp	r3, #0
 801692a:	d016      	beq.n	801695a <phpalSli15693_Sw_InventoryExt+0x3ec>
    {
        /* Update the maximum number of blocks with respect to Option flag setting. The value for the blocks is fixed to 60 and 40 to avoid multiple
         * handling of different data in response. RD70x can respond with more amount of data but CM1 cannot. So fixing the blocks count to a lower
         * value.
         */
        wMaxNoBlocks = (uint8_t) (((bFlags & PHPAL_SLI15693_FLAG_OPTION) != 0U) ? 40U : 60U);
 801692c:	78bb      	ldrb	r3, [r7, #2]
 801692e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016932:	2b00      	cmp	r3, #0
 8016934:	d001      	beq.n	801693a <phpalSli15693_Sw_InventoryExt+0x3cc>
 8016936:	2328      	movs	r3, #40	@ 0x28
 8016938:	e000      	b.n	801693c <phpalSli15693_Sw_InventoryExt+0x3ce>
 801693a:	233c      	movs	r3, #60	@ 0x3c
 801693c:	85bb      	strh	r3, [r7, #44]	@ 0x2c

        /* Blocks to read. */
        wCurrBlocksToRead = wMaxNoBlocks;
 801693e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8016940:	863b      	strh	r3, [r7, #48]	@ 0x30

        /* Update the number of blocks to read if its less than the internal required one. */
        if(wNoOfPages_Blocks < wMaxNoBlocks)
 8016942:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8016946:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8016948:	429a      	cmp	r2, r3
 801694a:	d20c      	bcs.n	8016966 <phpalSli15693_Sw_InventoryExt+0x3f8>
        {
            wCurrBlocksToRead = wNoOfPages_Blocks;
 801694c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8016950:	863b      	strh	r3, [r7, #48]	@ 0x30
            bAllBlocksRead = 1U;
 8016952:	2301      	movs	r3, #1
 8016954:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8016958:	e005      	b.n	8016966 <phpalSli15693_Sw_InventoryExt+0x3f8>
        }
    }
    else
    {
        wCurrBlocksToRead = wNoOfPages_Blocks;
 801695a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 801695e:	863b      	strh	r3, [r7, #48]	@ 0x30
        bAllBlocksRead = 1U;
 8016960:	2301      	movs	r3, #1
 8016962:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    }

    if((((pDataParams->bFlags & PHPAL_SLI15693_FLAG_INVENTORY) == 0U) && ((pDataParams->bFlags & PHPAL_SLI15693_FLAG_ADDRESSED) != 0U)) != 0U)
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	7a9b      	ldrb	r3, [r3, #10]
 801696a:	f003 0304 	and.w	r3, r3, #4
 801696e:	2b00      	cmp	r3, #0
 8016970:	d107      	bne.n	8016982 <phpalSli15693_Sw_InventoryExt+0x414>
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	7a9b      	ldrb	r3, [r3, #10]
 8016976:	f003 0320 	and.w	r3, r3, #32
 801697a:	2b00      	cmp	r3, #0
 801697c:	d001      	beq.n	8016982 <phpalSli15693_Sw_InventoryExt+0x414>
 801697e:	2301      	movs	r3, #1
 8016980:	e000      	b.n	8016984 <phpalSli15693_Sw_InventoryExt+0x416>
 8016982:	2300      	movs	r3, #0
 8016984:	2b00      	cmp	r3, #0
 8016986:	d002      	beq.n	801698e <phpalSli15693_Sw_InventoryExt+0x420>
    {
        pDataParams->bExplicitlyAddressed = 1U;
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	2201      	movs	r2, #1
 801698c:	755a      	strb	r2, [r3, #21]
    }

    /* Set First variable. This variable will be used to validate the response only once in case if chaining is enabled. */
    bFirst = PH_ON;
 801698e:	2301      	movs	r3, #1
 8016990:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

    /* Exchange the information. */
    do
    {
        /* Page (or block) number and count */
        if (bCmd != PHPAL_SLI15693_SW_CMD_INVENTORY)
 8016994:	78fb      	ldrb	r3, [r7, #3]
 8016996:	2b01      	cmp	r3, #1
 8016998:	d028      	beq.n	80169ec <phpalSli15693_Sw_InventoryExt+0x47e>
        {
         /* Adjust number of blocks. Adjustment is made because the User or the application will pass
         * the number of blocks starting from 1 to N. But as per Iso15693 specification the number
         * of blocks ranges from 0 - (N - 1).
         */
            --wCurrBlocksToRead;
 801699a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801699c:	3b01      	subs	r3, #1
 801699e:	863b      	strh	r3, [r7, #48]	@ 0x30

            if (!((bExtended != 0U) && ((bExtendedOptions & PHPAL_SLI15693_FLAG_SKIP_DATA) != 0U)))
 80169a0:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	d005      	beq.n	80169b4 <phpalSli15693_Sw_InventoryExt+0x446>
 80169a8:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80169ac:	f003 0310 	and.w	r3, r3, #16
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d11b      	bne.n	80169ec <phpalSli15693_Sw_InventoryExt+0x47e>
            {
                bCmdBuffer[bCmdOffset++] = (uint8_t) ((wCurrBlockNo + bPage_Block_No) & 0x00FFU);
 80169b4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80169b6:	b2da      	uxtb	r2, r3
 80169b8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80169bc:	1c59      	adds	r1, r3, #1
 80169be:	f887 1036 	strb.w	r1, [r7, #54]	@ 0x36
 80169c2:	4619      	mov	r1, r3
 80169c4:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80169c8:	4413      	add	r3, r2
 80169ca:	b2da      	uxtb	r2, r3
 80169cc:	f101 0338 	add.w	r3, r1, #56	@ 0x38
 80169d0:	443b      	add	r3, r7
 80169d2:	f803 2c24 	strb.w	r2, [r3, #-36]
                bCmdBuffer[bCmdOffset++] = (uint8_t) wCurrBlocksToRead;
 80169d6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80169da:	1c5a      	adds	r2, r3, #1
 80169dc:	f887 2036 	strb.w	r2, [r7, #54]	@ 0x36
 80169e0:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80169e2:	b2d2      	uxtb	r2, r2
 80169e4:	3338      	adds	r3, #56	@ 0x38
 80169e6:	443b      	add	r3, r7
 80169e8:	f803 2c24 	strb.w	r2, [r3, #-36]
            }
        }

        /* Exchange the command information to Hal layer. */
        status = phpalSli15693_Exchange(
 80169ec:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80169f0:	b299      	uxth	r1, r3
 80169f2:	f107 0214 	add.w	r2, r7, #20
 80169f6:	f107 030e 	add.w	r3, r7, #14
 80169fa:	9301      	str	r3, [sp, #4]
 80169fc:	f107 0310 	add.w	r3, r7, #16
 8016a00:	9300      	str	r3, [sp, #0]
 8016a02:	460b      	mov	r3, r1
 8016a04:	2100      	movs	r1, #0
 8016a06:	6878      	ldr	r0, [r7, #4]
 8016a08:	f7ff f94b 	bl	8015ca2 <phpalSli15693_Sw_Exchange>
 8016a0c:	4603      	mov	r3, r0
 8016a0e:	84bb      	strh	r3, [r7, #36]	@ 0x24
            bCmdOffset,
            &pResp,
            &wRespLength);

        /* Clear INVENTORY, AFI and NBSLOTS flag */
        if((status & PH_ERR_MASK) != PH_ERR_SUCCESS)
 8016a10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016a12:	b2db      	uxtb	r3, r3
 8016a14:	2b00      	cmp	r3, #0
 8016a16:	d006      	beq.n	8016a26 <phpalSli15693_Sw_InventoryExt+0x4b8>
        {
            pDataParams->bFlags &= (uint8_t)~(uint8_t)(PHPAL_SLI15693_FLAG_INVENTORY | PHPAL_SLI15693_FLAG_AFI | PHPAL_SLI15693_FLAG_NBSLOTS);
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	7a9b      	ldrb	r3, [r3, #10]
 8016a1c:	f023 0334 	bic.w	r3, r3, #52	@ 0x34
 8016a20:	b2da      	uxtb	r2, r3
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	729a      	strb	r2, [r3, #10]
        }

        /* Verify the exchange status. */
        PH_CHECK_SUCCESS(status);
 8016a26:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	d001      	beq.n	8016a30 <phpalSli15693_Sw_InventoryExt+0x4c2>
 8016a2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016a2e:	e115      	b.n	8016c5c <phpalSli15693_Sw_InventoryExt+0x6ee>

        /* Extracting  the CID as sent by the VICC. */
        if ((bExtended != 0U) && ((bExtendedOptions & PHPAL_SLI15693_FLAG_CID_RESPONSE) != 0U))
 8016a30:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d011      	beq.n	8016a5c <phpalSli15693_Sw_InventoryExt+0x4ee>
 8016a38:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8016a3c:	f003 0308 	and.w	r3, r3, #8
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d00b      	beq.n	8016a5c <phpalSli15693_Sw_InventoryExt+0x4ee>
        {
            (void)memcpy(pCIDOut, pResp, 2U);
 8016a44:	693b      	ldr	r3, [r7, #16]
 8016a46:	881b      	ldrh	r3, [r3, #0]
 8016a48:	b29a      	uxth	r2, r3
 8016a4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016a4c:	801a      	strh	r2, [r3, #0]

            /* Update the response pointer address and length to Skip CID. */
            pResp += 2U;
 8016a4e:	693b      	ldr	r3, [r7, #16]
 8016a50:	3302      	adds	r3, #2
 8016a52:	613b      	str	r3, [r7, #16]
            wRespLength -= 2U;
 8016a54:	89fb      	ldrh	r3, [r7, #14]
 8016a56:	3b02      	subs	r3, #2
 8016a58:	b29b      	uxth	r3, r3
 8016a5a:	81fb      	strh	r3, [r7, #14]
        }

        /* Set the length (amount) of expected UID bytes. */
        if (bCmd == PHPAL_SLI15693_SW_CMD_INVENTORY)
 8016a5c:	78fb      	ldrb	r3, [r7, #3]
 8016a5e:	2b01      	cmp	r3, #1
 8016a60:	d123      	bne.n	8016aaa <phpalSli15693_Sw_InventoryExt+0x53c>
        {
            /* The response length should be exactly the complete UID */
            if (wRespLength != (1U + PHPAL_SLI15693_UID_LENGTH))
 8016a62:	89fb      	ldrh	r3, [r7, #14]
 8016a64:	2b09      	cmp	r3, #9
 8016a66:	d002      	beq.n	8016a6e <phpalSli15693_Sw_InventoryExt+0x500>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 8016a68:	f640 2306 	movw	r3, #2566	@ 0xa06
 8016a6c:	e0f6      	b.n	8016c5c <phpalSli15693_Sw_InventoryExt+0x6ee>
            }

            /* Copy the DSFID to the data buffer. */
            pData[0] = pResp[0];
 8016a6e:	693b      	ldr	r3, [r7, #16]
 8016a70:	781a      	ldrb	r2, [r3, #0]
 8016a72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8016a74:	701a      	strb	r2, [r3, #0]
            *pDataLength = 1U;
 8016a76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016a78:	2201      	movs	r2, #1
 8016a7a:	801a      	strh	r2, [r3, #0]

            /* Store the UID */
            (void)memcpy(pDataParams->pUid, &pResp[1], PHPAL_SLI15693_UID_LENGTH);
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	f103 000c 	add.w	r0, r3, #12
 8016a82:	693b      	ldr	r3, [r7, #16]
 8016a84:	3301      	adds	r3, #1
 8016a86:	2208      	movs	r2, #8
 8016a88:	4619      	mov	r1, r3
 8016a8a:	f006 fbb8 	bl	801d1fe <memcpy>
            pDataParams->bUidBitLength = PHPAL_SLI15693_SW_UID_COMPLETE;
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	2240      	movs	r2, #64	@ 0x40
 8016a92:	751a      	strb	r2, [r3, #20]

            /* Return the UID */
            (void)memcpy(pUid, pDataParams->pUid, PHPAL_SLI15693_UID_LENGTH);
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	330c      	adds	r3, #12
 8016a98:	2208      	movs	r2, #8
 8016a9a:	4619      	mov	r1, r3
 8016a9c:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8016a9e:	f006 fbae 	bl	801d1fe <memcpy>
            *pUidLength = PHPAL_SLI15693_UID_LENGTH;
 8016aa2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016aa4:	2208      	movs	r2, #8
 8016aa6:	701a      	strb	r2, [r3, #0]
 8016aa8:	e099      	b.n	8016bde <phpalSli15693_Sw_InventoryExt+0x670>
        }
        else
        {
            if ((bFlags & PHPAL_SLI15693_FLAG_OPTION) != 0U)
 8016aaa:	78bb      	ldrb	r3, [r7, #2]
 8016aac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016ab0:	2b00      	cmp	r3, #0
 8016ab2:	f000 8083 	beq.w	8016bbc <phpalSli15693_Sw_InventoryExt+0x64e>
            {
                *pUidLength = PHPAL_SLI15693_UID_LENGTH - bStoredUidLength;
 8016ab6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8016aba:	f1c3 0308 	rsb	r3, r3, #8
 8016abe:	b2da      	uxtb	r2, r3
 8016ac0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016ac2:	701a      	strb	r2, [r3, #0]

                /* The response length should not be less than the remaining UID. */
                if(bFirst != 0U)
 8016ac4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d018      	beq.n	8016afe <phpalSli15693_Sw_InventoryExt+0x590>
                {
                    bStoredUidLength = pDataParams->bUidBitLength >> 3U;
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	7d1b      	ldrb	r3, [r3, #20]
 8016ad0:	08db      	lsrs	r3, r3, #3
 8016ad2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                    *pUidLength = PHPAL_SLI15693_UID_LENGTH - bStoredUidLength;
 8016ad6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8016ada:	f1c3 0308 	rsb	r3, r3, #8
 8016ade:	b2da      	uxtb	r2, r3
 8016ae0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016ae2:	701a      	strb	r2, [r3, #0]

                    /* Update the UID length if extended. */
                    if((bExtended != 0U) && ((bExtendedOptions & PHPAL_SLI15693_FLAG_UID_MODE) != 0U))
 8016ae4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8016ae8:	2b00      	cmp	r3, #0
 8016aea:	d008      	beq.n	8016afe <phpalSli15693_Sw_InventoryExt+0x590>
 8016aec:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8016af0:	f003 0302 	and.w	r3, r3, #2
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d002      	beq.n	8016afe <phpalSli15693_Sw_InventoryExt+0x590>
                    {
                        *pUidLength = PHPAL_SLI15693_UID_LENGTH;
 8016af8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016afa:	2208      	movs	r2, #8
 8016afc:	701a      	strb	r2, [r3, #0]
                    }
                }
                /* Validate the response length against UID length. */
                if (wRespLength < (*pUidLength))
 8016afe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016b00:	781b      	ldrb	r3, [r3, #0]
 8016b02:	461a      	mov	r2, r3
 8016b04:	89fb      	ldrh	r3, [r7, #14]
 8016b06:	429a      	cmp	r2, r3
 8016b08:	d902      	bls.n	8016b10 <phpalSli15693_Sw_InventoryExt+0x5a2>
                {
                    return PH_ADD_COMPCODE(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 8016b0a:	f640 2306 	movw	r3, #2566	@ 0xa06
 8016b0e:	e0a5      	b.n	8016c5c <phpalSli15693_Sw_InventoryExt+0x6ee>
                }

                if (bStoredUidLength < PHPAL_SLI15693_UID_LENGTH)
 8016b10:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8016b14:	2b07      	cmp	r3, #7
 8016b16:	d843      	bhi.n	8016ba0 <phpalSli15693_Sw_InventoryExt+0x632>
                {
                    if ((*pUidLength) == 0U)
 8016b18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016b1a:	781b      	ldrb	r3, [r3, #0]
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d102      	bne.n	8016b26 <phpalSli15693_Sw_InventoryExt+0x5b8>
                    {
                        return PH_ADD_COMPCODE(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 8016b20:	f640 2306 	movw	r3, #2566	@ 0xa06
 8016b24:	e09a      	b.n	8016c5c <phpalSli15693_Sw_InventoryExt+0x6ee>
                    }
                    /* Return the received (partial) UID */
                    (void)memcpy(pUid, pResp, (size_t)(*pUidLength));
 8016b26:	6939      	ldr	r1, [r7, #16]
 8016b28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016b2a:	781b      	ldrb	r3, [r3, #0]
 8016b2c:	461a      	mov	r2, r3
 8016b2e:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8016b30:	f006 fb65 	bl	801d1fe <memcpy>

                    /* We need to merge the contents of the mask buffer and the received data */
                    if ((bMaskBitLength % 8U) != 0u)
 8016b34:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8016b38:	f003 0307 	and.w	r3, r3, #7
 8016b3c:	b2db      	uxtb	r3, r3
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d022      	beq.n	8016b88 <phpalSli15693_Sw_InventoryExt+0x61a>
                    {
                        if (bStoredUidLength < 7U)
 8016b42:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8016b46:	2b06      	cmp	r3, #6
 8016b48:	d80e      	bhi.n	8016b68 <phpalSli15693_Sw_InventoryExt+0x5fa>
                        {
                            /* copy the UID bytes we received from the card */
                            (void)memcpy(&(pDataParams->pUid[bStoredUidLength + 1U]), &pResp[1], (size_t)(*pUidLength)-1U);
 8016b4a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8016b4e:	3301      	adds	r3, #1
 8016b50:	3308      	adds	r3, #8
 8016b52:	687a      	ldr	r2, [r7, #4]
 8016b54:	4413      	add	r3, r2
 8016b56:	1d18      	adds	r0, r3, #4
 8016b58:	693b      	ldr	r3, [r7, #16]
 8016b5a:	1c59      	adds	r1, r3, #1
 8016b5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016b5e:	781b      	ldrb	r3, [r3, #0]
 8016b60:	3b01      	subs	r3, #1
 8016b62:	461a      	mov	r2, r3
 8016b64:	f006 fb4b 	bl	801d1fe <memcpy>
                        }

                        /* merge mask-bits with received bits */
                        pDataParams->pUid[bStoredUidLength] |= pResp[0];
 8016b68:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8016b6c:	687a      	ldr	r2, [r7, #4]
 8016b6e:	4413      	add	r3, r2
 8016b70:	7b19      	ldrb	r1, [r3, #12]
 8016b72:	693b      	ldr	r3, [r7, #16]
 8016b74:	781a      	ldrb	r2, [r3, #0]
 8016b76:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8016b7a:	430a      	orrs	r2, r1
 8016b7c:	b2d1      	uxtb	r1, r2
 8016b7e:	687a      	ldr	r2, [r7, #4]
 8016b80:	4413      	add	r3, r2
 8016b82:	460a      	mov	r2, r1
 8016b84:	731a      	strb	r2, [r3, #12]
 8016b86:	e00b      	b.n	8016ba0 <phpalSli15693_Sw_InventoryExt+0x632>
                    }
                    else
                    {
                        /* Copy the UID bytes we received from the card */
                        (void)memcpy(&(pDataParams->pUid[bStoredUidLength]), pResp, *pUidLength);
 8016b88:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8016b8c:	3308      	adds	r3, #8
 8016b8e:	687a      	ldr	r2, [r7, #4]
 8016b90:	4413      	add	r3, r2
 8016b92:	1d18      	adds	r0, r3, #4
 8016b94:	6939      	ldr	r1, [r7, #16]
 8016b96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016b98:	781b      	ldrb	r3, [r3, #0]
 8016b9a:	461a      	mov	r2, r3
 8016b9c:	f006 fb2f 	bl	801d1fe <memcpy>
                    }
                }

                /* Update UID length. */
                pDataParams->bUidBitLength = PHPAL_SLI15693_SW_UID_COMPLETE;
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	2240      	movs	r2, #64	@ 0x40
 8016ba4:	751a      	strb	r2, [r3, #20]

                /* Shift pointer and length */
                pResp += *pUidLength;
 8016ba6:	693b      	ldr	r3, [r7, #16]
 8016ba8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8016baa:	7812      	ldrb	r2, [r2, #0]
 8016bac:	4413      	add	r3, r2
 8016bae:	613b      	str	r3, [r7, #16]
                wRespLength = (uint16_t) (wRespLength - *pUidLength);
 8016bb0:	89fb      	ldrh	r3, [r7, #14]
 8016bb2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8016bb4:	7812      	ldrb	r2, [r2, #0]
 8016bb6:	1a9b      	subs	r3, r3, r2
 8016bb8:	b29b      	uxth	r3, r3
 8016bba:	81fb      	strh	r3, [r7, #14]
            }
            /* Copy the received data to internal buffer. */
            (void)memcpy(&pData[*pDataLength], pResp, wRespLength);
 8016bbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016bbe:	881b      	ldrh	r3, [r3, #0]
 8016bc0:	461a      	mov	r2, r3
 8016bc2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8016bc4:	4413      	add	r3, r2
 8016bc6:	6939      	ldr	r1, [r7, #16]
 8016bc8:	89fa      	ldrh	r2, [r7, #14]
 8016bca:	4618      	mov	r0, r3
 8016bcc:	f006 fb17 	bl	801d1fe <memcpy>
            *pDataLength += wRespLength;
 8016bd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016bd2:	881a      	ldrh	r2, [r3, #0]
 8016bd4:	89fb      	ldrh	r3, [r7, #14]
 8016bd6:	4413      	add	r3, r2
 8016bd8:	b29a      	uxth	r2, r3
 8016bda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016bdc:	801a      	strh	r2, [r3, #0]
        }

        /* Update the variables to read the remaining data. */
        wCurrBlockNo += wMaxNoBlocks;
 8016bde:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8016be0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8016be2:	4413      	add	r3, r2
 8016be4:	85fb      	strh	r3, [r7, #46]	@ 0x2e

        /* Update the Current blocks to read. */
        wCurrBlocksToRead = wMaxNoBlocks;
 8016be6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8016be8:	863b      	strh	r3, [r7, #48]	@ 0x30

        /* Reset the command buffer offset. */
        bCmdOffset = bCmdBufferLen;
 8016bea:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016bee:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

        /* Set the remaining blocks to read. */
        if((wNoOfPages_Blocks - wCurrBlockNo) < wMaxNoBlocks)
 8016bf2:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8016bf6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8016bf8:	1ad2      	subs	r2, r2, r3
 8016bfa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8016bfc:	429a      	cmp	r2, r3
 8016bfe:	da04      	bge.n	8016c0a <phpalSli15693_Sw_InventoryExt+0x69c>
        {
            wCurrBlocksToRead = (uint16_t) (wNoOfPages_Blocks - wCurrBlockNo);
 8016c00:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8016c04:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8016c06:	1ad3      	subs	r3, r2, r3
 8016c08:	863b      	strh	r3, [r7, #48]	@ 0x30
        }

        /* Set the flag to finish the loop. */
        if((wNoOfPages_Blocks * 4U) == *pDataLength)
 8016c0a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8016c0e:	009b      	lsls	r3, r3, #2
 8016c10:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8016c12:	8812      	ldrh	r2, [r2, #0]
 8016c14:	4293      	cmp	r3, r2
 8016c16:	d102      	bne.n	8016c1e <phpalSli15693_Sw_InventoryExt+0x6b0>
        {
            bAllBlocksRead = 1;
 8016c18:	2301      	movs	r3, #1
 8016c1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        }

        /* Set First variable. This variable will be used to validate the response only once in case if chaining is enabled. */
        bFirst = PH_OFF;
 8016c1e:	2300      	movs	r3, #0
 8016c20:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

    }while(bAllBlocksRead == 0U);
 8016c24:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	f43f aeb3 	beq.w	8016994 <phpalSli15693_Sw_InventoryExt+0x426>

    /* Clear INVENTORY, AFI and NBSLOTS flag */
    pDataParams->bFlags &= (uint8_t)~(uint8_t)(PHPAL_SLI15693_FLAG_INVENTORY | PHPAL_SLI15693_FLAG_AFI | PHPAL_SLI15693_FLAG_NBSLOTS);
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	7a9b      	ldrb	r3, [r3, #10]
 8016c32:	f023 0334 	bic.w	r3, r3, #52	@ 0x34
 8016c36:	b2da      	uxtb	r2, r3
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	729a      	strb	r2, [r3, #10]

    pDataParams->bExplicitlyAddressed = 0;
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	2200      	movs	r2, #0
 8016c40:	755a      	strb	r2, [r3, #21]

    /* Error check */
    PH_CHECK_SUCCESS(status);
 8016c42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d001      	beq.n	8016c4c <phpalSli15693_Sw_InventoryExt+0x6de>
 8016c48:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016c4a:	e007      	b.n	8016c5c <phpalSli15693_Sw_InventoryExt+0x6ee>

    /* set addressed flag */
    pDataParams->bFlags |= PHPAL_SLI15693_FLAG_ADDRESSED;
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	7a9b      	ldrb	r3, [r3, #10]
 8016c50:	f043 0320 	orr.w	r3, r3, #32
 8016c54:	b2da      	uxtb	r2, r3
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	729a      	strb	r2, [r3, #10]

    return PH_ERR_SUCCESS;
 8016c5a:	2300      	movs	r3, #0
}
 8016c5c:	4618      	mov	r0, r3
 8016c5e:	3738      	adds	r7, #56	@ 0x38
 8016c60:	46bd      	mov	sp, r7
 8016c62:	bd80      	pop	{r7, pc}

08016c64 <phDriver_PinConfig>:
 * PORT/GPIO PIN API's
 *******************************************************************************/

/* GPIO FUNC_1:配置GPIO引脚的功能和属性 */
phStatus_t phDriver_PinConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, phDriver_Pin_Func_t ePinFunc, phDriver_Pin_Config_t *pPinConfig)
{
 8016c64:	b480      	push	{r7}
 8016c66:	b085      	sub	sp, #20
 8016c68:	af00      	add	r7, sp, #0
 8016c6a:	60f8      	str	r0, [r7, #12]
 8016c6c:	607b      	str	r3, [r7, #4]
 8016c6e:	460b      	mov	r3, r1
 8016c70:	817b      	strh	r3, [r7, #10]
 8016c72:	4613      	mov	r3, r2
 8016c74:	727b      	strb	r3, [r7, #9]
    /* 已经在GPIO_INIT实现 */
    return PH_DRIVER_SUCCESS;
 8016c76:	2300      	movs	r3, #0
}
 8016c78:	4618      	mov	r0, r3
 8016c7a:	3714      	adds	r7, #20
 8016c7c:	46bd      	mov	sp, r7
 8016c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c82:	4770      	bx	lr

08016c84 <phDriver_PinRead>:

/* GPIO FUNC_2：读GPIO引脚状态是高or低电平 */
uint8_t phDriver_PinRead(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, phDriver_Pin_Func_t ePinFunc)
{
 8016c84:	b580      	push	{r7, lr}
 8016c86:	b082      	sub	sp, #8
 8016c88:	af00      	add	r7, sp, #0
 8016c8a:	6078      	str	r0, [r7, #4]
 8016c8c:	460b      	mov	r3, r1
 8016c8e:	807b      	strh	r3, [r7, #2]
 8016c90:	4613      	mov	r3, r2
 8016c92:	707b      	strb	r3, [r7, #1]
    return HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8016c94:	887b      	ldrh	r3, [r7, #2]
 8016c96:	4619      	mov	r1, r3
 8016c98:	6878      	ldr	r0, [r7, #4]
 8016c9a:	f000 fed1 	bl	8017a40 <HAL_GPIO_ReadPin>
 8016c9e:	4603      	mov	r3, r0
}
 8016ca0:	4618      	mov	r0, r3
 8016ca2:	3708      	adds	r7, #8
 8016ca4:	46bd      	mov	sp, r7
 8016ca6:	bd80      	pop	{r7, pc}

08016ca8 <phDriver_PinWrite>:
    return PH_DRIVER_SUCCESS;
}

/* GPIO FUNC_4：写GPIO引脚 */
void phDriver_PinWrite(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t bValue)
{
 8016ca8:	b580      	push	{r7, lr}
 8016caa:	b082      	sub	sp, #8
 8016cac:	af00      	add	r7, sp, #0
 8016cae:	6078      	str	r0, [r7, #4]
 8016cb0:	460b      	mov	r3, r1
 8016cb2:	807b      	strh	r3, [r7, #2]
 8016cb4:	4613      	mov	r3, r2
 8016cb6:	707b      	strb	r3, [r7, #1]
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, bValue);
 8016cb8:	787a      	ldrb	r2, [r7, #1]
 8016cba:	887b      	ldrh	r3, [r7, #2]
 8016cbc:	4619      	mov	r1, r3
 8016cbe:	6878      	ldr	r0, [r7, #4]
 8016cc0:	f000 fed6 	bl	8017a70 <HAL_GPIO_WritePin>
}
 8016cc4:	bf00      	nop
 8016cc6:	3708      	adds	r7, #8
 8016cc8:	46bd      	mov	sp, r7
 8016cca:	bd80      	pop	{r7, pc}

08016ccc <phDriver_TimerStart>:
 * PH_DRIVER_TIMER_SECS = 1 (每秒1个单位)
 * PH_DRIVER_TIMER_MILLI_SECS = 1000 (每秒1000个单位)
 * PH_DRIVER_TIMER_MICRO_SECS = 1000000 (每秒1000000个单位)
 */
phStatus_t phDriver_TimerStart(phDriver_Timer_Unit_t eTimerUnit, uint32_t dwTimePeriod, pphDriver_TimerCallBck_t pTimerCallBack)
{
 8016ccc:	b580      	push	{r7, lr}
 8016cce:	b084      	sub	sp, #16
 8016cd0:	af00      	add	r7, sp, #0
 8016cd2:	60f8      	str	r0, [r7, #12]
 8016cd4:	60b9      	str	r1, [r7, #8]
 8016cd6:	607a      	str	r2, [r7, #4]
	if(pTimerCallBack == NULL)
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d11d      	bne.n	8016d1a <phDriver_TimerStart+0x4e>
	{
		/* 时间单位都转成微秒 */
	    if(eTimerUnit == PH_DRIVER_TIMER_SECS)
 8016cde:	68fb      	ldr	r3, [r7, #12]
 8016ce0:	2b01      	cmp	r3, #1
 8016ce2:	d108      	bne.n	8016cf6 <phDriver_TimerStart+0x2a>
	    {
	    	HAL_Delay(dwTimePeriod * 1000); // s -> ms
 8016ce4:	68bb      	ldr	r3, [r7, #8]
 8016ce6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8016cea:	fb02 f303 	mul.w	r3, r2, r3
 8016cee:	4618      	mov	r0, r3
 8016cf0:	f000 fb78 	bl	80173e4 <HAL_Delay>
 8016cf4:	e029      	b.n	8016d4a <phDriver_TimerStart+0x7e>
	    }
	    else if(eTimerUnit == PH_DRIVER_TIMER_MILLI_SECS)
 8016cf6:	68fb      	ldr	r3, [r7, #12]
 8016cf8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8016cfc:	d103      	bne.n	8016d06 <phDriver_TimerStart+0x3a>
	    {
	    	HAL_Delay(dwTimePeriod);
 8016cfe:	68b8      	ldr	r0, [r7, #8]
 8016d00:	f000 fb70 	bl	80173e4 <HAL_Delay>
 8016d04:	e021      	b.n	8016d4a <phDriver_TimerStart+0x7e>
	    }
	    else if(eTimerUnit == PH_DRIVER_TIMER_MICRO_SECS)
 8016d06:	68fb      	ldr	r3, [r7, #12]
 8016d08:	4a12      	ldr	r2, [pc, #72]	@ (8016d54 <phDriver_TimerStart+0x88>)
 8016d0a:	4293      	cmp	r3, r2
 8016d0c:	d11d      	bne.n	8016d4a <phDriver_TimerStart+0x7e>
	    {
	    	delay_us(dwTimePeriod);
 8016d0e:	68bb      	ldr	r3, [r7, #8]
 8016d10:	b29b      	uxth	r3, r3
 8016d12:	4618      	mov	r0, r3
 8016d14:	f7eb fab4 	bl	8002280 <delay_us>
 8016d18:	e017      	b.n	8016d4a <phDriver_TimerStart+0x7e>
	    }
	}
    else	/* Call the Timer callback. */
    {
        pTimerIsrCallBack = pTimerCallBack;
 8016d1a:	4a0f      	ldr	r2, [pc, #60]	@ (8016d58 <phDriver_TimerStart+0x8c>)
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	6013      	str	r3, [r2, #0]

        __HAL_TIM_SET_AUTORELOAD(&htim2, dwTimePeriod-1);   // 替代TIMER_Open的周期设置
 8016d20:	4b0e      	ldr	r3, [pc, #56]	@ (8016d5c <phDriver_TimerStart+0x90>)
 8016d22:	681b      	ldr	r3, [r3, #0]
 8016d24:	68ba      	ldr	r2, [r7, #8]
 8016d26:	3a01      	subs	r2, #1
 8016d28:	62da      	str	r2, [r3, #44]	@ 0x2c
 8016d2a:	68bb      	ldr	r3, [r7, #8]
 8016d2c:	3b01      	subs	r3, #1
 8016d2e:	4a0b      	ldr	r2, [pc, #44]	@ (8016d5c <phDriver_TimerStart+0x90>)
 8016d30:	60d3      	str	r3, [r2, #12]
        __HAL_TIM_SET_COUNTER(&htim2, 0);				    // 重置计数器
 8016d32:	4b0a      	ldr	r3, [pc, #40]	@ (8016d5c <phDriver_TimerStart+0x90>)
 8016d34:	681b      	ldr	r3, [r3, #0]
 8016d36:	2200      	movs	r2, #0
 8016d38:	625a      	str	r2, [r3, #36]	@ 0x24
        __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);	 		// 清除中断标志
 8016d3a:	4b08      	ldr	r3, [pc, #32]	@ (8016d5c <phDriver_TimerStart+0x90>)
 8016d3c:	681b      	ldr	r3, [r3, #0]
 8016d3e:	f06f 0201 	mvn.w	r2, #1
 8016d42:	611a      	str	r2, [r3, #16]

        // 一次性启动定时器并使能中断
        HAL_TIM_Base_Start_IT(&htim2);
 8016d44:	4805      	ldr	r0, [pc, #20]	@ (8016d5c <phDriver_TimerStart+0x90>)
 8016d46:	f002 fd43 	bl	80197d0 <HAL_TIM_Base_Start_IT>
    }

    return PH_DRIVER_SUCCESS;
 8016d4a:	2300      	movs	r3, #0
}
 8016d4c:	4618      	mov	r0, r3
 8016d4e:	3710      	adds	r7, #16
 8016d50:	46bd      	mov	sp, r7
 8016d52:	bd80      	pop	{r7, pc}
 8016d54:	000f4240 	.word	0x000f4240
 8016d58:	20001790 	.word	0x20001790
 8016d5c:	200002c0 	.word	0x200002c0

08016d60 <phDriver_TimerStop>:


phStatus_t phDriver_TimerStop(void)
{
 8016d60:	b580      	push	{r7, lr}
 8016d62:	af00      	add	r7, sp, #0
	 printf("NFC: Timer stop called (HAL_Delay mode - no action needed)\r\n");
 8016d64:	4802      	ldr	r0, [pc, #8]	@ (8016d70 <phDriver_TimerStop+0x10>)
 8016d66:	f006 f8db 	bl	801cf20 <puts>

    return PH_DRIVER_SUCCESS;
 8016d6a:	2300      	movs	r3, #0
}
 8016d6c:	4618      	mov	r0, r3
 8016d6e:	bd80      	pop	{r7, pc}
 8016d70:	0801f8fc 	.word	0x0801f8fc

08016d74 <phbalReg_Init>:
*/
phStatus_t phbalReg_Init(
                                      void * pDataParams,
                                      uint16_t wSizeOfDataParams
                                      )
{
 8016d74:	b480      	push	{r7}
 8016d76:	b085      	sub	sp, #20
 8016d78:	af00      	add	r7, sp, #0
 8016d7a:	6078      	str	r0, [r7, #4]
 8016d7c:	460b      	mov	r3, r1
 8016d7e:	807b      	strh	r3, [r7, #2]
	volatile uint32_t delay;

    // 参数检查
    if((pDataParams == NULL) || (sizeof(phbalReg_Type_t) != wSizeOfDataParams))
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	d002      	beq.n	8016d8c <phbalReg_Init+0x18>
 8016d86:	887b      	ldrh	r3, [r7, #2]
 8016d88:	2b04      	cmp	r3, #4
 8016d8a:	d002      	beq.n	8016d92 <phbalReg_Init+0x1e>
    {
        return (PH_DRIVER_ERROR | PH_COMP_DRIVER);
 8016d8c:	f24f 1380 	movw	r3, #61824	@ 0xf180
 8016d90:	e007      	b.n	8016da2 <phbalReg_Init+0x2e>
    }

    // 设置BAL层参数:驱动模块的ID和总线是SPI类型
    ((phbalReg_Type_t *)pDataParams)->wId      = PH_COMP_DRIVER | PHBAL_REG_LPCOPEN_SPI_ID;
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	f24f 120d 	movw	r2, #61709	@ 0xf10d
 8016d98:	801a      	strh	r2, [r3, #0]
    ((phbalReg_Type_t *)pDataParams)->bBalType = PHBAL_REG_TYPE_SPI;
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	2201      	movs	r2, #1
 8016d9e:	709a      	strb	r2, [r3, #2]

    /* Wait Startup time */
    for(delay=0; delay<10000; delay++){}
#endif	// ---NXP原代码

    return PH_DRIVER_SUCCESS;
 8016da0:	2300      	movs	r3, #0
}
 8016da2:	4618      	mov	r0, r3
 8016da4:	3714      	adds	r7, #20
 8016da6:	46bd      	mov	sp, r7
 8016da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dac:	4770      	bx	lr
	...

08016db0 <phbalReg_Exchange>:
                                        uint16_t wTxLength,
                                        uint16_t wRxBufSize,
                                        uint8_t * pRxBuffer,
                                        uint16_t * pRxLength
                                        )
{
 8016db0:	b580      	push	{r7, lr}
 8016db2:	b08a      	sub	sp, #40	@ 0x28
 8016db4:	af02      	add	r7, sp, #8
 8016db6:	60f8      	str	r0, [r7, #12]
 8016db8:	607a      	str	r2, [r7, #4]
 8016dba:	461a      	mov	r2, r3
 8016dbc:	460b      	mov	r3, r1
 8016dbe:	817b      	strh	r3, [r7, #10]
 8016dc0:	4613      	mov	r3, r2
 8016dc2:	813b      	strh	r3, [r7, #8]
	uint8_t * pRxBuf = NULL;                    // 实际接收缓存指针
 8016dc4:	2300      	movs	r3, #0
 8016dc6:	61fb      	str	r3, [r7, #28]
	uint8_t dummyTxByte = 0xFF;
 8016dc8:	23ff      	movs	r3, #255	@ 0xff
 8016dca:	74fb      	strb	r3, [r7, #19]

	/* 只发送不接收 */
	if (pRxBuffer == NULL)
 8016dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016dce:	2b00      	cmp	r3, #0
 8016dd0:	d102      	bne.n	8016dd8 <phbalReg_Exchange+0x28>
	{
		pRxBuf = NULL;
 8016dd2:	2300      	movs	r3, #0
 8016dd4:	61fb      	str	r3, [r7, #28]
 8016dd6:	e001      	b.n	8016ddc <phbalReg_Exchange+0x2c>
	}
	else /* 接收 */
	{
		pRxBuf = pRxBuffer;
 8016dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016dda:	61fb      	str	r3, [r7, #28]
	}

	printf("SPITX>> ");
 8016ddc:	4835      	ldr	r0, [pc, #212]	@ (8016eb4 <phbalReg_Exchange+0x104>)
 8016dde:	f006 f82f 	bl	801ce40 <iprintf>
	for (int i = 0; i < wTxLength; i++)
 8016de2:	2300      	movs	r3, #0
 8016de4:	61bb      	str	r3, [r7, #24]
 8016de6:	e02f      	b.n	8016e48 <phbalReg_Exchange+0x98>
	{
		uint8_t txByte = (pTxBuffer != NULL) ? pTxBuffer[i] : dummyTxByte;	// 发送1字节
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	d004      	beq.n	8016df8 <phbalReg_Exchange+0x48>
 8016dee:	69bb      	ldr	r3, [r7, #24]
 8016df0:	687a      	ldr	r2, [r7, #4]
 8016df2:	4413      	add	r3, r2
 8016df4:	781b      	ldrb	r3, [r3, #0]
 8016df6:	e000      	b.n	8016dfa <phbalReg_Exchange+0x4a>
 8016df8:	7cfb      	ldrb	r3, [r7, #19]
 8016dfa:	74bb      	strb	r3, [r7, #18]
		uint8_t rxByte = 0x00;	// 接收1字节
 8016dfc:	2300      	movs	r3, #0
 8016dfe:	747b      	strb	r3, [r7, #17]

		// 单字节全双工发送+接收
		if (HAL_SPI_TransmitReceive(&hspi3, &txByte, &rxByte, 1, 100) != HAL_OK)
 8016e00:	f107 0211 	add.w	r2, r7, #17
 8016e04:	f107 0112 	add.w	r1, r7, #18
 8016e08:	2364      	movs	r3, #100	@ 0x64
 8016e0a:	9300      	str	r3, [sp, #0]
 8016e0c:	2301      	movs	r3, #1
 8016e0e:	482a      	ldr	r0, [pc, #168]	@ (8016eb8 <phbalReg_Exchange+0x108>)
 8016e10:	f002 f88f 	bl	8018f32 <HAL_SPI_TransmitReceive>
 8016e14:	4603      	mov	r3, r0
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	d002      	beq.n	8016e20 <phbalReg_Exchange+0x70>
		{
			return (PH_DRIVER_FAILURE | PH_COMP_DRIVER);
 8016e1a:	f24f 1381 	movw	r3, #61825	@ 0xf181
 8016e1e:	e045      	b.n	8016eac <phbalReg_Exchange+0xfc>
		}

		printf("%02X ", txByte);  // 打印发送内容
 8016e20:	7cbb      	ldrb	r3, [r7, #18]
 8016e22:	4619      	mov	r1, r3
 8016e24:	4825      	ldr	r0, [pc, #148]	@ (8016ebc <phbalReg_Exchange+0x10c>)
 8016e26:	f006 f80b 	bl	801ce40 <iprintf>

		if (pRxBuf != NULL && i < wRxBufSize)
 8016e2a:	69fb      	ldr	r3, [r7, #28]
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	d008      	beq.n	8016e42 <phbalReg_Exchange+0x92>
 8016e30:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8016e32:	69ba      	ldr	r2, [r7, #24]
 8016e34:	429a      	cmp	r2, r3
 8016e36:	da04      	bge.n	8016e42 <phbalReg_Exchange+0x92>
		{
			pRxBuf[i] = rxByte;
 8016e38:	69bb      	ldr	r3, [r7, #24]
 8016e3a:	69fa      	ldr	r2, [r7, #28]
 8016e3c:	4413      	add	r3, r2
 8016e3e:	7c7a      	ldrb	r2, [r7, #17]
 8016e40:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < wTxLength; i++)
 8016e42:	69bb      	ldr	r3, [r7, #24]
 8016e44:	3301      	adds	r3, #1
 8016e46:	61bb      	str	r3, [r7, #24]
 8016e48:	893b      	ldrh	r3, [r7, #8]
 8016e4a:	69ba      	ldr	r2, [r7, #24]
 8016e4c:	429a      	cmp	r2, r3
 8016e4e:	dbcb      	blt.n	8016de8 <phbalReg_Exchange+0x38>
		}
	}
	printf("\n");
 8016e50:	200a      	movs	r0, #10
 8016e52:	f006 f807 	bl	801ce64 <putchar>

	if (pRxBuf != NULL)
 8016e56:	69fb      	ldr	r3, [r7, #28]
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	d01b      	beq.n	8016e94 <phbalReg_Exchange+0xe4>
	{
		printf("SPIRX<< ");
 8016e5c:	4818      	ldr	r0, [pc, #96]	@ (8016ec0 <phbalReg_Exchange+0x110>)
 8016e5e:	f005 ffef 	bl	801ce40 <iprintf>
		for (int i = 0; i < wTxLength && i < wRxBufSize; i++)
 8016e62:	2300      	movs	r3, #0
 8016e64:	617b      	str	r3, [r7, #20]
 8016e66:	e00a      	b.n	8016e7e <phbalReg_Exchange+0xce>
		{
			printf("%02X ", pRxBuf[i]);
 8016e68:	697b      	ldr	r3, [r7, #20]
 8016e6a:	69fa      	ldr	r2, [r7, #28]
 8016e6c:	4413      	add	r3, r2
 8016e6e:	781b      	ldrb	r3, [r3, #0]
 8016e70:	4619      	mov	r1, r3
 8016e72:	4812      	ldr	r0, [pc, #72]	@ (8016ebc <phbalReg_Exchange+0x10c>)
 8016e74:	f005 ffe4 	bl	801ce40 <iprintf>
		for (int i = 0; i < wTxLength && i < wRxBufSize; i++)
 8016e78:	697b      	ldr	r3, [r7, #20]
 8016e7a:	3301      	adds	r3, #1
 8016e7c:	617b      	str	r3, [r7, #20]
 8016e7e:	893b      	ldrh	r3, [r7, #8]
 8016e80:	697a      	ldr	r2, [r7, #20]
 8016e82:	429a      	cmp	r2, r3
 8016e84:	da03      	bge.n	8016e8e <phbalReg_Exchange+0xde>
 8016e86:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8016e88:	697a      	ldr	r2, [r7, #20]
 8016e8a:	429a      	cmp	r2, r3
 8016e8c:	dbec      	blt.n	8016e68 <phbalReg_Exchange+0xb8>
		}
		printf("\n");
 8016e8e:	200a      	movs	r0, #10
 8016e90:	f005 ffe8 	bl	801ce64 <putchar>
	}

	// 返回接收到的数据长度
	if (pRxLength != NULL)
 8016e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d007      	beq.n	8016eaa <phbalReg_Exchange+0xfa>
	{
		*pRxLength = (pRxBuf != NULL) ? wTxLength : 0;
 8016e9a:	69fb      	ldr	r3, [r7, #28]
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	d001      	beq.n	8016ea4 <phbalReg_Exchange+0xf4>
 8016ea0:	893a      	ldrh	r2, [r7, #8]
 8016ea2:	e000      	b.n	8016ea6 <phbalReg_Exchange+0xf6>
 8016ea4:	2200      	movs	r2, #0
 8016ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ea8:	801a      	strh	r2, [r3, #0]
	}

	return PH_DRIVER_SUCCESS;
 8016eaa:	2300      	movs	r3, #0
}
 8016eac:	4618      	mov	r0, r3
 8016eae:	3720      	adds	r7, #32
 8016eb0:	46bd      	mov	sp, r7
 8016eb2:	bd80      	pop	{r7, pc}
 8016eb4:	0801f938 	.word	0x0801f938
 8016eb8:	2000020c 	.word	0x2000020c
 8016ebc:	0801f944 	.word	0x0801f944
 8016ec0:	0801f94c 	.word	0x0801f94c

08016ec4 <phOsal_EventCreate>:

    return phOsal_InitTickTimer(&phOsal_NullOsSysTickHandler);
}

phStatus_t phOsal_EventCreate(phOsal_Event_t *eventHandle, pphOsal_EventObj_t eventObj)
{
 8016ec4:	b580      	push	{r7, lr}
 8016ec6:	b084      	sub	sp, #16
 8016ec8:	af00      	add	r7, sp, #0
 8016eca:	6078      	str	r0, [r7, #4]
 8016ecc:	6039      	str	r1, [r7, #0]
    uint32_t bEventIndex = 0;
 8016ece:	2300      	movs	r3, #0
 8016ed0:	60fb      	str	r3, [r7, #12]

    if ((eventHandle == NULL) || (eventObj == NULL))
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d002      	beq.n	8016ede <phOsal_EventCreate+0x1a>
 8016ed8:	683b      	ldr	r3, [r7, #0]
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d102      	bne.n	8016ee4 <phOsal_EventCreate+0x20>
    {
        return PH_OSAL_ADD_COMPCODE(PH_OSAL_ERROR, PH_COMP_OSAL);
 8016ede:	f24f 0327 	movw	r3, #61479	@ 0xf027
 8016ee2:	e033      	b.n	8016f4c <phOsal_EventCreate+0x88>
    }

    PH_OSAL_CHECK_SUCCESS(phOsal_NullOs_GetFreeIndex(&bEventIndex, gdwEventBitMap, PH_OSAL_CONFIG_MAX_NUM_EVENTS));
 8016ee4:	4b1b      	ldr	r3, [pc, #108]	@ (8016f54 <phOsal_EventCreate+0x90>)
 8016ee6:	6819      	ldr	r1, [r3, #0]
 8016ee8:	f107 030c 	add.w	r3, r7, #12
 8016eec:	2205      	movs	r2, #5
 8016eee:	4618      	mov	r0, r3
 8016ef0:	f000 f92c 	bl	801714c <phOsal_NullOs_GetFreeIndex>
 8016ef4:	4603      	mov	r3, r0
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	d009      	beq.n	8016f0e <phOsal_EventCreate+0x4a>
 8016efa:	4b16      	ldr	r3, [pc, #88]	@ (8016f54 <phOsal_EventCreate+0x90>)
 8016efc:	6819      	ldr	r1, [r3, #0]
 8016efe:	f107 030c 	add.w	r3, r7, #12
 8016f02:	2205      	movs	r2, #5
 8016f04:	4618      	mov	r0, r3
 8016f06:	f000 f921 	bl	801714c <phOsal_NullOs_GetFreeIndex>
 8016f0a:	4603      	mov	r3, r0
 8016f0c:	e01e      	b.n	8016f4c <phOsal_EventCreate+0x88>

    gdwEvents[bEventIndex] = 0;
 8016f0e:	68fb      	ldr	r3, [r7, #12]
 8016f10:	4a11      	ldr	r2, [pc, #68]	@ (8016f58 <phOsal_EventCreate+0x94>)
 8016f12:	2100      	movs	r1, #0
 8016f14:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    gdwEventBitMap |= (1 << bEventIndex);
 8016f18:	68fb      	ldr	r3, [r7, #12]
 8016f1a:	2201      	movs	r2, #1
 8016f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8016f20:	461a      	mov	r2, r3
 8016f22:	4b0c      	ldr	r3, [pc, #48]	@ (8016f54 <phOsal_EventCreate+0x90>)
 8016f24:	681b      	ldr	r3, [r3, #0]
 8016f26:	4313      	orrs	r3, r2
 8016f28:	4a0a      	ldr	r2, [pc, #40]	@ (8016f54 <phOsal_EventCreate+0x90>)
 8016f2a:	6013      	str	r3, [r2, #0]
    *eventHandle = (phOsal_Event_t)(&gdwEvents[bEventIndex]);
 8016f2c:	68fb      	ldr	r3, [r7, #12]
 8016f2e:	009b      	lsls	r3, r3, #2
 8016f30:	4a09      	ldr	r2, [pc, #36]	@ (8016f58 <phOsal_EventCreate+0x94>)
 8016f32:	441a      	add	r2, r3
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	601a      	str	r2, [r3, #0]
    eventObj->EventHandle = (phOsal_Event_t)(&gdwEvents[bEventIndex]);
 8016f38:	68fb      	ldr	r3, [r7, #12]
 8016f3a:	009b      	lsls	r3, r3, #2
 8016f3c:	4a06      	ldr	r2, [pc, #24]	@ (8016f58 <phOsal_EventCreate+0x94>)
 8016f3e:	441a      	add	r2, r3
 8016f40:	683b      	ldr	r3, [r7, #0]
 8016f42:	601a      	str	r2, [r3, #0]
    eventObj->dwEventIndex = bEventIndex;
 8016f44:	68fa      	ldr	r2, [r7, #12]
 8016f46:	683b      	ldr	r3, [r7, #0]
 8016f48:	60da      	str	r2, [r3, #12]

    return PH_OSAL_SUCCESS;
 8016f4a:	2300      	movs	r3, #0
}
 8016f4c:	4618      	mov	r0, r3
 8016f4e:	3710      	adds	r7, #16
 8016f50:	46bd      	mov	sp, r7
 8016f52:	bd80      	pop	{r7, pc}
 8016f54:	200017ac 	.word	0x200017ac
 8016f58:	20001798 	.word	0x20001798

08016f5c <phOsal_EventPend>:

phStatus_t phOsal_EventPend(volatile phOsal_Event_t * eventHandle, phOsal_EventOpt_t options, phOsal_Ticks_t ticksToWait,
                           phOsal_EventBits_t FlagsToWait, phOsal_EventBits_t *pCurrFlags)
{
 8016f5c:	b580      	push	{r7, lr}
 8016f5e:	b086      	sub	sp, #24
 8016f60:	af00      	add	r7, sp, #0
 8016f62:	60f8      	str	r0, [r7, #12]
 8016f64:	607a      	str	r2, [r7, #4]
 8016f66:	603b      	str	r3, [r7, #0]
 8016f68:	460b      	mov	r3, r1
 8016f6a:	72fb      	strb	r3, [r7, #11]
    phStatus_t status;

    printf("EventPend START\r\n");
 8016f6c:	4842      	ldr	r0, [pc, #264]	@ (8017078 <phOsal_EventPend+0x11c>)
 8016f6e:	f005 ffd7 	bl	801cf20 <puts>
    printf("WAIT: 0x%08lX\r\n", FlagsToWait);  // 看等待什么标志
 8016f72:	6839      	ldr	r1, [r7, #0]
 8016f74:	4841      	ldr	r0, [pc, #260]	@ (801707c <phOsal_EventPend+0x120>)
 8016f76:	f005 ff63 	bl	801ce40 <iprintf>

    if((eventHandle == NULL) || ((*eventHandle) == NULL))
 8016f7a:	68fb      	ldr	r3, [r7, #12]
 8016f7c:	2b00      	cmp	r3, #0
 8016f7e:	d003      	beq.n	8016f88 <phOsal_EventPend+0x2c>
 8016f80:	68fb      	ldr	r3, [r7, #12]
 8016f82:	681b      	ldr	r3, [r3, #0]
 8016f84:	2b00      	cmp	r3, #0
 8016f86:	d102      	bne.n	8016f8e <phOsal_EventPend+0x32>
    {
        return PH_OSAL_ADD_COMPCODE(PH_OSAL_ERROR, PH_COMP_OSAL);
 8016f88:	f24f 0327 	movw	r3, #61479	@ 0xf027
 8016f8c:	e06f      	b.n	801706e <phOsal_EventPend+0x112>
    }

    status = PH_OSAL_IO_TIMEOUT;
 8016f8e:	2301      	movs	r3, #1
 8016f90:	82fb      	strh	r3, [r7, #22]

    /* Check whether infinite wait, if not config timer. */
    if (ticksToWait != PHOSAL_MAX_DELAY)
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f98:	d002      	beq.n	8016fa0 <phOsal_EventPend+0x44>
    {
        phOsal_StartTickTimer(ticksToWait);
 8016f9a:	6878      	ldr	r0, [r7, #4]
 8016f9c:	f000 f942 	bl	8017224 <phOsal_StartTickTimer>
    }

    while(1)
    {
        /* Enter Critical Section */
        phOsal_EnterCriticalSection();
 8016fa0:	f000 f980 	bl	80172a4 <phOsal_EnterCriticalSection>

        if ((((options & E_OS_EVENT_OPT_PEND_SET_ALL) && (((*((uint32_t *)(*eventHandle))) & FlagsToWait) == FlagsToWait))
 8016fa4:	7afb      	ldrb	r3, [r7, #11]
 8016fa6:	f003 0302 	and.w	r3, r3, #2
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d007      	beq.n	8016fbe <phOsal_EventPend+0x62>
 8016fae:	68fb      	ldr	r3, [r7, #12]
 8016fb0:	681b      	ldr	r3, [r3, #0]
 8016fb2:	681a      	ldr	r2, [r3, #0]
 8016fb4:	683b      	ldr	r3, [r7, #0]
 8016fb6:	4013      	ands	r3, r2
 8016fb8:	683a      	ldr	r2, [r7, #0]
 8016fba:	429a      	cmp	r2, r3
 8016fbc:	d010      	beq.n	8016fe0 <phOsal_EventPend+0x84>
            || ((!(options & E_OS_EVENT_OPT_PEND_SET_ALL)) && ((*((uint32_t *)(*eventHandle))) & FlagsToWait)))
 8016fbe:	7afb      	ldrb	r3, [r7, #11]
 8016fc0:	f003 0302 	and.w	r3, r3, #2
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	d106      	bne.n	8016fd6 <phOsal_EventPend+0x7a>
 8016fc8:	68fb      	ldr	r3, [r7, #12]
 8016fca:	681b      	ldr	r3, [r3, #0]
 8016fcc:	681a      	ldr	r2, [r3, #0]
 8016fce:	683b      	ldr	r3, [r7, #0]
 8016fd0:	4013      	ands	r3, r2
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d104      	bne.n	8016fe0 <phOsal_EventPend+0x84>
            || (gbWaitTimedOut))
 8016fd6:	4b2a      	ldr	r3, [pc, #168]	@ (8017080 <phOsal_EventPend+0x124>)
 8016fd8:	781b      	ldrb	r3, [r3, #0]
 8016fda:	b2db      	uxtb	r3, r3
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	d009      	beq.n	8016ff4 <phOsal_EventPend+0x98>
        {
            /* Exit Critical Section. */
            phOsal_ExitCriticalSection();
 8016fe0:	f000 f968 	bl	80172b4 <phOsal_ExitCriticalSection>
            if (gbWaitTimedOut != 0x01)
 8016fe4:	4b26      	ldr	r3, [pc, #152]	@ (8017080 <phOsal_EventPend+0x124>)
 8016fe6:	781b      	ldrb	r3, [r3, #0]
 8016fe8:	b2db      	uxtb	r3, r3
 8016fea:	2b01      	cmp	r3, #1
 8016fec:	d007      	beq.n	8016ffe <phOsal_EventPend+0xa2>
            {
                status = PH_OSAL_SUCCESS;
 8016fee:	2300      	movs	r3, #0
 8016ff0:	82fb      	strh	r3, [r7, #22]
            }
            break;
 8016ff2:	e004      	b.n	8016ffe <phOsal_EventPend+0xa2>
        }

        /* Exit Critical Section. */
        phOsal_ExitCriticalSection();
 8016ff4:	f000 f95e 	bl	80172b4 <phOsal_ExitCriticalSection>

        /* Wait for interrupts/events to occur */
        phOsal_Sleep();
 8016ff8:	f000 f964 	bl	80172c4 <phOsal_Sleep>
        phOsal_EnterCriticalSection();
 8016ffc:	e7d0      	b.n	8016fa0 <phOsal_EventPend+0x44>
            break;
 8016ffe:	bf00      	nop
    }

    /* Check whether infinite wait, if not config timer. */
    if (ticksToWait != PHOSAL_MAX_DELAY)
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017006:	d001      	beq.n	801700c <phOsal_EventPend+0xb0>
    {
        phOsal_StopTickTimer();
 8017008:	f000 f93c 	bl	8017284 <phOsal_StopTickTimer>
    }
    gbWaitTimedOut = 0;
 801700c:	4b1c      	ldr	r3, [pc, #112]	@ (8017080 <phOsal_EventPend+0x124>)
 801700e:	2200      	movs	r2, #0
 8017010:	701a      	strb	r2, [r3, #0]

    phOsal_EnterCriticalSection();
 8017012:	f000 f947 	bl	80172a4 <phOsal_EnterCriticalSection>
    if (pCurrFlags != NULL)
 8017016:	6a3b      	ldr	r3, [r7, #32]
 8017018:	2b00      	cmp	r3, #0
 801701a:	d004      	beq.n	8017026 <phOsal_EventPend+0xca>
    {
        *pCurrFlags = (*((uint32_t *)(*eventHandle)));
 801701c:	68fb      	ldr	r3, [r7, #12]
 801701e:	681b      	ldr	r3, [r3, #0]
 8017020:	681a      	ldr	r2, [r3, #0]
 8017022:	6a3b      	ldr	r3, [r7, #32]
 8017024:	601a      	str	r2, [r3, #0]
    }

    if (options & E_OS_EVENT_OPT_PEND_CLEAR_ON_EXIT)
 8017026:	7afb      	ldrb	r3, [r7, #11]
 8017028:	f003 0304 	and.w	r3, r3, #4
 801702c:	2b00      	cmp	r3, #0
 801702e:	d00a      	beq.n	8017046 <phOsal_EventPend+0xea>
    {
        (*((uint32_t *)(*eventHandle))) &= (~(FlagsToWait & (*((uint32_t *)(*eventHandle)))));
 8017030:	68fb      	ldr	r3, [r7, #12]
 8017032:	681b      	ldr	r3, [r3, #0]
 8017034:	681a      	ldr	r2, [r3, #0]
 8017036:	683b      	ldr	r3, [r7, #0]
 8017038:	4013      	ands	r3, r2
 801703a:	43d9      	mvns	r1, r3
 801703c:	68fb      	ldr	r3, [r7, #12]
 801703e:	681b      	ldr	r3, [r3, #0]
 8017040:	681a      	ldr	r2, [r3, #0]
 8017042:	400a      	ands	r2, r1
 8017044:	601a      	str	r2, [r3, #0]
    }
    phOsal_ExitCriticalSection();
 8017046:	f000 f935 	bl	80172b4 <phOsal_ExitCriticalSection>

    return PH_OSAL_ADD_COMPCODE(status, PH_COMP_OSAL);
 801704a:	8afb      	ldrh	r3, [r7, #22]
 801704c:	2b00      	cmp	r3, #0
 801704e:	d00d      	beq.n	801706c <phOsal_EventPend+0x110>
 8017050:	8afb      	ldrh	r3, [r7, #22]
 8017052:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8017056:	2b00      	cmp	r3, #0
 8017058:	d108      	bne.n	801706c <phOsal_EventPend+0x110>
 801705a:	8afb      	ldrh	r3, [r7, #22]
 801705c:	b2db      	uxtb	r3, r3
 801705e:	b29b      	uxth	r3, r3
 8017060:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8017064:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8017068:	b29b      	uxth	r3, r3
 801706a:	e000      	b.n	801706e <phOsal_EventPend+0x112>
 801706c:	8afb      	ldrh	r3, [r7, #22]


}
 801706e:	4618      	mov	r0, r3
 8017070:	3718      	adds	r7, #24
 8017072:	46bd      	mov	sp, r7
 8017074:	bd80      	pop	{r7, pc}
 8017076:	bf00      	nop
 8017078:	0801f958 	.word	0x0801f958
 801707c:	0801f96c 	.word	0x0801f96c
 8017080:	20001794 	.word	0x20001794

08017084 <phOsal_EventPost>:

phStatus_t phOsal_EventPost(phOsal_Event_t * eventHandle, phOsal_EventOpt_t options, phOsal_EventBits_t FlagsToPost,
    phOsal_EventBits_t *pCurrFlags)
{
 8017084:	b580      	push	{r7, lr}
 8017086:	b084      	sub	sp, #16
 8017088:	af00      	add	r7, sp, #0
 801708a:	60f8      	str	r0, [r7, #12]
 801708c:	607a      	str	r2, [r7, #4]
 801708e:	603b      	str	r3, [r7, #0]
 8017090:	460b      	mov	r3, r1
 8017092:	72fb      	strb	r3, [r7, #11]
	printf("POST: 0x%08lX\r\n", FlagsToPost);  // 添加这行
 8017094:	6879      	ldr	r1, [r7, #4]
 8017096:	4815      	ldr	r0, [pc, #84]	@ (80170ec <phOsal_EventPost+0x68>)
 8017098:	f005 fed2 	bl	801ce40 <iprintf>

    if((eventHandle == NULL) || ((*eventHandle) == NULL))
 801709c:	68fb      	ldr	r3, [r7, #12]
 801709e:	2b00      	cmp	r3, #0
 80170a0:	d003      	beq.n	80170aa <phOsal_EventPost+0x26>
 80170a2:	68fb      	ldr	r3, [r7, #12]
 80170a4:	681b      	ldr	r3, [r3, #0]
 80170a6:	2b00      	cmp	r3, #0
 80170a8:	d105      	bne.n	80170b6 <phOsal_EventPost+0x32>
    {
    	printf("POST NULL\r\n");  // 添加这行
 80170aa:	4811      	ldr	r0, [pc, #68]	@ (80170f0 <phOsal_EventPost+0x6c>)
 80170ac:	f005 ff38 	bl	801cf20 <puts>
        return PH_OSAL_ADD_COMPCODE(PH_OSAL_ERROR, PH_COMP_OSAL);
 80170b0:	f24f 0327 	movw	r3, #61479	@ 0xf027
 80170b4:	e016      	b.n	80170e4 <phOsal_EventPost+0x60>
    }

    /* Enter Critical Section */
    phOsal_EnterCriticalSection();
 80170b6:	f000 f8f5 	bl	80172a4 <phOsal_EnterCriticalSection>

    /* Set the events. */
    (*((uint32_t *)(*eventHandle))) |= FlagsToPost;
 80170ba:	68fb      	ldr	r3, [r7, #12]
 80170bc:	681b      	ldr	r3, [r3, #0]
 80170be:	6819      	ldr	r1, [r3, #0]
 80170c0:	68fb      	ldr	r3, [r7, #12]
 80170c2:	681b      	ldr	r3, [r3, #0]
 80170c4:	687a      	ldr	r2, [r7, #4]
 80170c6:	430a      	orrs	r2, r1
 80170c8:	601a      	str	r2, [r3, #0]

    if (pCurrFlags != NULL)
 80170ca:	683b      	ldr	r3, [r7, #0]
 80170cc:	2b00      	cmp	r3, #0
 80170ce:	d004      	beq.n	80170da <phOsal_EventPost+0x56>
    {
        *pCurrFlags = (*((uint32_t *)(*eventHandle)));
 80170d0:	68fb      	ldr	r3, [r7, #12]
 80170d2:	681b      	ldr	r3, [r3, #0]
 80170d4:	681a      	ldr	r2, [r3, #0]
 80170d6:	683b      	ldr	r3, [r7, #0]
 80170d8:	601a      	str	r2, [r3, #0]
    }

    /* Exit Critical Section */
    phOsal_ExitCriticalSection();
 80170da:	f000 f8eb 	bl	80172b4 <phOsal_ExitCriticalSection>

    phOsal_WakeUp();
 80170de:	f000 f905 	bl	80172ec <phOsal_WakeUp>

    return PH_OSAL_SUCCESS;
 80170e2:	2300      	movs	r3, #0

}
 80170e4:	4618      	mov	r0, r3
 80170e6:	3710      	adds	r7, #16
 80170e8:	46bd      	mov	sp, r7
 80170ea:	bd80      	pop	{r7, pc}
 80170ec:	0801f97c 	.word	0x0801f97c
 80170f0:	0801f98c 	.word	0x0801f98c

080170f4 <phOsal_EventClear>:

phStatus_t phOsal_EventClear(phOsal_Event_t * eventHandle, phOsal_EventOpt_t options, phOsal_EventBits_t FlagsToClear,
    phOsal_EventBits_t *pCurrFlags)
{
 80170f4:	b580      	push	{r7, lr}
 80170f6:	b084      	sub	sp, #16
 80170f8:	af00      	add	r7, sp, #0
 80170fa:	60f8      	str	r0, [r7, #12]
 80170fc:	607a      	str	r2, [r7, #4]
 80170fe:	603b      	str	r3, [r7, #0]
 8017100:	460b      	mov	r3, r1
 8017102:	72fb      	strb	r3, [r7, #11]
    if((eventHandle == NULL) || ((*eventHandle) == NULL))
 8017104:	68fb      	ldr	r3, [r7, #12]
 8017106:	2b00      	cmp	r3, #0
 8017108:	d003      	beq.n	8017112 <phOsal_EventClear+0x1e>
 801710a:	68fb      	ldr	r3, [r7, #12]
 801710c:	681b      	ldr	r3, [r3, #0]
 801710e:	2b00      	cmp	r3, #0
 8017110:	d102      	bne.n	8017118 <phOsal_EventClear+0x24>
    {
        return PH_OSAL_ADD_COMPCODE(PH_OSAL_ERROR, PH_COMP_OSAL);
 8017112:	f24f 0327 	movw	r3, #61479	@ 0xf027
 8017116:	e015      	b.n	8017144 <phOsal_EventClear+0x50>
    }

    /* Enter Critical Section */
    phOsal_EnterCriticalSection();
 8017118:	f000 f8c4 	bl	80172a4 <phOsal_EnterCriticalSection>

    if (pCurrFlags != NULL)
 801711c:	683b      	ldr	r3, [r7, #0]
 801711e:	2b00      	cmp	r3, #0
 8017120:	d004      	beq.n	801712c <phOsal_EventClear+0x38>
    {
        *pCurrFlags = (*((uint32_t *)(*eventHandle)));
 8017122:	68fb      	ldr	r3, [r7, #12]
 8017124:	681b      	ldr	r3, [r3, #0]
 8017126:	681a      	ldr	r2, [r3, #0]
 8017128:	683b      	ldr	r3, [r7, #0]
 801712a:	601a      	str	r2, [r3, #0]
    }

    (*((uint32_t *)(*eventHandle))) &= (~FlagsToClear);
 801712c:	68fb      	ldr	r3, [r7, #12]
 801712e:	681b      	ldr	r3, [r3, #0]
 8017130:	6819      	ldr	r1, [r3, #0]
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	43da      	mvns	r2, r3
 8017136:	68fb      	ldr	r3, [r7, #12]
 8017138:	681b      	ldr	r3, [r3, #0]
 801713a:	400a      	ands	r2, r1
 801713c:	601a      	str	r2, [r3, #0]

    /* Exit Critical Section. */
    phOsal_ExitCriticalSection();
 801713e:	f000 f8b9 	bl	80172b4 <phOsal_ExitCriticalSection>

    return PH_OSAL_SUCCESS;
 8017142:	2300      	movs	r3, #0
}
 8017144:	4618      	mov	r0, r3
 8017146:	3710      	adds	r7, #16
 8017148:	46bd      	mov	sp, r7
 801714a:	bd80      	pop	{r7, pc}

0801714c <phOsal_NullOs_GetFreeIndex>:
{
    return (PH_OSAL_UNSUPPORTED_COMMAND | PH_COMP_OSAL);
}

static phStatus_t phOsal_NullOs_GetFreeIndex(uint32_t * dwFreeIndex, uint32_t dwBitMap, uint32_t dwMaxLimit)
{
 801714c:	b480      	push	{r7}
 801714e:	b087      	sub	sp, #28
 8017150:	af00      	add	r7, sp, #0
 8017152:	60f8      	str	r0, [r7, #12]
 8017154:	60b9      	str	r1, [r7, #8]
 8017156:	607a      	str	r2, [r7, #4]
    phStatus_t status;

    (*dwFreeIndex) = 0;
 8017158:	68fb      	ldr	r3, [r7, #12]
 801715a:	2200      	movs	r2, #0
 801715c:	601a      	str	r2, [r3, #0]

    while(((1 << (*dwFreeIndex)) & dwBitMap) && ((*dwFreeIndex) < dwMaxLimit))
 801715e:	e004      	b.n	801716a <phOsal_NullOs_GetFreeIndex+0x1e>
    {
        (*dwFreeIndex)++;
 8017160:	68fb      	ldr	r3, [r7, #12]
 8017162:	681b      	ldr	r3, [r3, #0]
 8017164:	1c5a      	adds	r2, r3, #1
 8017166:	68fb      	ldr	r3, [r7, #12]
 8017168:	601a      	str	r2, [r3, #0]
    while(((1 << (*dwFreeIndex)) & dwBitMap) && ((*dwFreeIndex) < dwMaxLimit))
 801716a:	68fb      	ldr	r3, [r7, #12]
 801716c:	681b      	ldr	r3, [r3, #0]
 801716e:	2201      	movs	r2, #1
 8017170:	fa02 f303 	lsl.w	r3, r2, r3
 8017174:	461a      	mov	r2, r3
 8017176:	68bb      	ldr	r3, [r7, #8]
 8017178:	4013      	ands	r3, r2
 801717a:	2b00      	cmp	r3, #0
 801717c:	d004      	beq.n	8017188 <phOsal_NullOs_GetFreeIndex+0x3c>
 801717e:	68fb      	ldr	r3, [r7, #12]
 8017180:	681b      	ldr	r3, [r3, #0]
 8017182:	687a      	ldr	r2, [r7, #4]
 8017184:	429a      	cmp	r2, r3
 8017186:	d8eb      	bhi.n	8017160 <phOsal_NullOs_GetFreeIndex+0x14>
    }

    if (*dwFreeIndex == dwMaxLimit)
 8017188:	68fb      	ldr	r3, [r7, #12]
 801718a:	681b      	ldr	r3, [r3, #0]
 801718c:	687a      	ldr	r2, [r7, #4]
 801718e:	429a      	cmp	r2, r3
 8017190:	d103      	bne.n	801719a <phOsal_NullOs_GetFreeIndex+0x4e>
    {
        status = (PH_OSAL_ERROR | PH_COMP_OSAL);
 8017192:	f24f 0327 	movw	r3, #61479	@ 0xf027
 8017196:	82fb      	strh	r3, [r7, #22]
 8017198:	e001      	b.n	801719e <phOsal_NullOs_GetFreeIndex+0x52>
    }
    else
    {
        status = PH_OSAL_SUCCESS;
 801719a:	2300      	movs	r3, #0
 801719c:	82fb      	strh	r3, [r7, #22]
    }

    return status;
 801719e:	8afb      	ldrh	r3, [r7, #22]
}
 80171a0:	4618      	mov	r0, r3
 80171a2:	371c      	adds	r7, #28
 80171a4:	46bd      	mov	sp, r7
 80171a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171aa:	4770      	bx	lr

080171ac <phOsal_ConfigTick>:

    return PH_OSAL_SUCCESS;
}

static void phOsal_ConfigTick(void)
{
 80171ac:	b490      	push	{r4, r7}
 80171ae:	af00      	add	r7, sp, #0
    /* Disable systick */
    SysTick->CTRL = 0x0;
 80171b0:	4b19      	ldr	r3, [pc, #100]	@ (8017218 <phOsal_ConfigTick+0x6c>)
 80171b2:	2200      	movs	r2, #0
 80171b4:	601a      	str	r2, [r3, #0]

    /* Configure SysTick count down value to interrupt at the requested time. */
    if(qwLoadValue > SYSTICK_TIMER_MAX)
 80171b6:	4b19      	ldr	r3, [pc, #100]	@ (801721c <phOsal_ConfigTick+0x70>)
 80171b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171bc:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 80171c0:	f173 0300 	sbcs.w	r3, r3, #0
 80171c4:	d30e      	bcc.n	80171e4 <phOsal_ConfigTick+0x38>
    {
        qwLoadValue -= SYSTICK_TIMER_MAX;
 80171c6:	4b15      	ldr	r3, [pc, #84]	@ (801721c <phOsal_ConfigTick+0x70>)
 80171c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171cc:	4c14      	ldr	r4, [pc, #80]	@ (8017220 <phOsal_ConfigTick+0x74>)
 80171ce:	1910      	adds	r0, r2, r4
 80171d0:	f143 31ff 	adc.w	r1, r3, #4294967295
 80171d4:	4b11      	ldr	r3, [pc, #68]	@ (801721c <phOsal_ConfigTick+0x70>)
 80171d6:	e9c3 0100 	strd	r0, r1, [r3]
        SysTick->LOAD = SYSTICK_TIMER_MAX;
 80171da:	4b0f      	ldr	r3, [pc, #60]	@ (8017218 <phOsal_ConfigTick+0x6c>)
 80171dc:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 80171e0:	605a      	str	r2, [r3, #4]
 80171e2:	e00e      	b.n	8017202 <phOsal_ConfigTick+0x56>
    }
    else
    {
        SysTick->LOAD = (uint32_t)(qwLoadValue & SYSTICK_TIMER_MAX);
 80171e4:	4b0d      	ldr	r3, [pc, #52]	@ (801721c <phOsal_ConfigTick+0x70>)
 80171e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171ea:	4613      	mov	r3, r2
 80171ec:	4a0a      	ldr	r2, [pc, #40]	@ (8017218 <phOsal_ConfigTick+0x6c>)
 80171ee:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80171f2:	6053      	str	r3, [r2, #4]
        qwLoadValue = 0;
 80171f4:	4909      	ldr	r1, [pc, #36]	@ (801721c <phOsal_ConfigTick+0x70>)
 80171f6:	f04f 0200 	mov.w	r2, #0
 80171fa:	f04f 0300 	mov.w	r3, #0
 80171fe:	e9c1 2300 	strd	r2, r3, [r1]
    }

    /*Clear the current count value and also SysTick CTRL.COUNTFLAG. */
    SysTick->VAL = 0;
 8017202:	4b05      	ldr	r3, [pc, #20]	@ (8017218 <phOsal_ConfigTick+0x6c>)
 8017204:	2200      	movs	r2, #0
 8017206:	609a      	str	r2, [r3, #8]

    SysTick->CTRL = SYSTICK_TIMER_CLK | SYSTICK_TIMER_INT | SYSTICK_TIMER_ENABLE;
 8017208:	4b03      	ldr	r3, [pc, #12]	@ (8017218 <phOsal_ConfigTick+0x6c>)
 801720a:	2207      	movs	r2, #7
 801720c:	601a      	str	r2, [r3, #0]
}
 801720e:	bf00      	nop
 8017210:	46bd      	mov	sp, r7
 8017212:	bc90      	pop	{r4, r7}
 8017214:	4770      	bx	lr
 8017216:	bf00      	nop
 8017218:	e000e010 	.word	0xe000e010
 801721c:	200017b0 	.word	0x200017b0
 8017220:	ff000001 	.word	0xff000001

08017224 <phOsal_StartTickTimer>:

phStatus_t phOsal_StartTickTimer(uint32_t dwTimeMilliSecs)
{
 8017224:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8017228:	b082      	sub	sp, #8
 801722a:	af00      	add	r7, sp, #0
 801722c:	6078      	str	r0, [r7, #4]
    qwLoadValue = ((uint64_t)dwTimeMilliSecs * (uint64_t)dwSysTickTimerFreq)/PH_PLATFORM_TIMER_UNIT_MS;
 801722e:	6879      	ldr	r1, [r7, #4]
 8017230:	2000      	movs	r0, #0
 8017232:	4688      	mov	r8, r1
 8017234:	4681      	mov	r9, r0
 8017236:	4911      	ldr	r1, [pc, #68]	@ (801727c <phOsal_StartTickTimer+0x58>)
 8017238:	6809      	ldr	r1, [r1, #0]
 801723a:	2000      	movs	r0, #0
 801723c:	460a      	mov	r2, r1
 801723e:	4603      	mov	r3, r0
 8017240:	fb02 f009 	mul.w	r0, r2, r9
 8017244:	fb08 f103 	mul.w	r1, r8, r3
 8017248:	4401      	add	r1, r0
 801724a:	fba8 4502 	umull	r4, r5, r8, r2
 801724e:	194b      	adds	r3, r1, r5
 8017250:	461d      	mov	r5, r3
 8017252:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017256:	f04f 0300 	mov.w	r3, #0
 801725a:	4620      	mov	r0, r4
 801725c:	4629      	mov	r1, r5
 801725e:	f7e9 fcf3 	bl	8000c48 <__aeabi_uldivmod>
 8017262:	4602      	mov	r2, r0
 8017264:	460b      	mov	r3, r1
 8017266:	4906      	ldr	r1, [pc, #24]	@ (8017280 <phOsal_StartTickTimer+0x5c>)
 8017268:	e9c1 2300 	strd	r2, r3, [r1]

    phOsal_ConfigTick();
 801726c:	f7ff ff9e 	bl	80171ac <phOsal_ConfigTick>

    return PH_OSAL_SUCCESS;
 8017270:	2300      	movs	r3, #0
}
 8017272:	4618      	mov	r0, r3
 8017274:	3708      	adds	r7, #8
 8017276:	46bd      	mov	sp, r7
 8017278:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801727c:	200017b8 	.word	0x200017b8
 8017280:	200017b0 	.word	0x200017b0

08017284 <phOsal_StopTickTimer>:

phStatus_t phOsal_StopTickTimer(void)
{
 8017284:	b480      	push	{r7}
 8017286:	af00      	add	r7, sp, #0
    /* Disable systick and clear the Load value. */
    SysTick->CTRL = 0x0;
 8017288:	4b05      	ldr	r3, [pc, #20]	@ (80172a0 <phOsal_StopTickTimer+0x1c>)
 801728a:	2200      	movs	r2, #0
 801728c:	601a      	str	r2, [r3, #0]
    SysTick->LOAD = 0x0;
 801728e:	4b04      	ldr	r3, [pc, #16]	@ (80172a0 <phOsal_StopTickTimer+0x1c>)
 8017290:	2200      	movs	r2, #0
 8017292:	605a      	str	r2, [r3, #4]

    return PH_OSAL_SUCCESS;
 8017294:	2300      	movs	r3, #0
}
 8017296:	4618      	mov	r0, r3
 8017298:	46bd      	mov	sp, r7
 801729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801729e:	4770      	bx	lr
 80172a0:	e000e010 	.word	0xe000e010

080172a4 <phOsal_EnterCriticalSection>:

void phOsal_EnterCriticalSection(void)
{
 80172a4:	b480      	push	{r7}
 80172a6:	af00      	add	r7, sp, #0
    __DISABLE_IRQ();
 80172a8:	b672      	cpsid	i
}
 80172aa:	bf00      	nop
 80172ac:	46bd      	mov	sp, r7
 80172ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172b2:	4770      	bx	lr

080172b4 <phOsal_ExitCriticalSection>:

void phOsal_ExitCriticalSection(void)
{
 80172b4:	b480      	push	{r7}
 80172b6:	af00      	add	r7, sp, #0
    __ENABLE_IRQ();
 80172b8:	b662      	cpsie	i
}
 80172ba:	bf00      	nop
 80172bc:	46bd      	mov	sp, r7
 80172be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172c2:	4770      	bx	lr

080172c4 <phOsal_Sleep>:

void phOsal_Sleep(void)
{
 80172c4:	b480      	push	{r7}
 80172c6:	b083      	sub	sp, #12
 80172c8:	af00      	add	r7, sp, #0
    // 不使用 __WFE()，改为短暂延时
    // __WFE();
    for(volatile int i = 0; i < 1000; i++);
 80172ca:	2300      	movs	r3, #0
 80172cc:	607b      	str	r3, [r7, #4]
 80172ce:	e002      	b.n	80172d6 <phOsal_Sleep+0x12>
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	3301      	adds	r3, #1
 80172d4:	607b      	str	r3, [r7, #4]
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80172dc:	dbf8      	blt.n	80172d0 <phOsal_Sleep+0xc>
}
 80172de:	bf00      	nop
 80172e0:	bf00      	nop
 80172e2:	370c      	adds	r7, #12
 80172e4:	46bd      	mov	sp, r7
 80172e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172ea:	4770      	bx	lr

080172ec <phOsal_WakeUp>:

void phOsal_WakeUp(void)
{
 80172ec:	b480      	push	{r7}
 80172ee:	af00      	add	r7, sp, #0
    __SEV();
 80172f0:	bf40      	sev
}
 80172f2:	bf00      	nop
 80172f4:	46bd      	mov	sp, r7
 80172f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172fa:	4770      	bx	lr

080172fc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80172fc:	b580      	push	{r7, lr}
 80172fe:	b082      	sub	sp, #8
 8017300:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8017302:	2300      	movs	r3, #0
 8017304:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8017306:	2003      	movs	r0, #3
 8017308:	f000 f960 	bl	80175cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 801730c:	2001      	movs	r0, #1
 801730e:	f000 f80d 	bl	801732c <HAL_InitTick>
 8017312:	4603      	mov	r3, r0
 8017314:	2b00      	cmp	r3, #0
 8017316:	d002      	beq.n	801731e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8017318:	2301      	movs	r3, #1
 801731a:	71fb      	strb	r3, [r7, #7]
 801731c:	e001      	b.n	8017322 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 801731e:	f7ea fccd 	bl	8001cbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8017322:	79fb      	ldrb	r3, [r7, #7]
}
 8017324:	4618      	mov	r0, r3
 8017326:	3708      	adds	r7, #8
 8017328:	46bd      	mov	sp, r7
 801732a:	bd80      	pop	{r7, pc}

0801732c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801732c:	b580      	push	{r7, lr}
 801732e:	b084      	sub	sp, #16
 8017330:	af00      	add	r7, sp, #0
 8017332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8017334:	2300      	movs	r3, #0
 8017336:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8017338:	4b17      	ldr	r3, [pc, #92]	@ (8017398 <HAL_InitTick+0x6c>)
 801733a:	781b      	ldrb	r3, [r3, #0]
 801733c:	2b00      	cmp	r3, #0
 801733e:	d023      	beq.n	8017388 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8017340:	4b16      	ldr	r3, [pc, #88]	@ (801739c <HAL_InitTick+0x70>)
 8017342:	681a      	ldr	r2, [r3, #0]
 8017344:	4b14      	ldr	r3, [pc, #80]	@ (8017398 <HAL_InitTick+0x6c>)
 8017346:	781b      	ldrb	r3, [r3, #0]
 8017348:	4619      	mov	r1, r3
 801734a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801734e:	fbb3 f3f1 	udiv	r3, r3, r1
 8017352:	fbb2 f3f3 	udiv	r3, r2, r3
 8017356:	4618      	mov	r0, r3
 8017358:	f000 f96d 	bl	8017636 <HAL_SYSTICK_Config>
 801735c:	4603      	mov	r3, r0
 801735e:	2b00      	cmp	r3, #0
 8017360:	d10f      	bne.n	8017382 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	2b0f      	cmp	r3, #15
 8017366:	d809      	bhi.n	801737c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8017368:	2200      	movs	r2, #0
 801736a:	6879      	ldr	r1, [r7, #4]
 801736c:	f04f 30ff 	mov.w	r0, #4294967295
 8017370:	f000 f937 	bl	80175e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8017374:	4a0a      	ldr	r2, [pc, #40]	@ (80173a0 <HAL_InitTick+0x74>)
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	6013      	str	r3, [r2, #0]
 801737a:	e007      	b.n	801738c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 801737c:	2301      	movs	r3, #1
 801737e:	73fb      	strb	r3, [r7, #15]
 8017380:	e004      	b.n	801738c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8017382:	2301      	movs	r3, #1
 8017384:	73fb      	strb	r3, [r7, #15]
 8017386:	e001      	b.n	801738c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8017388:	2301      	movs	r3, #1
 801738a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 801738c:	7bfb      	ldrb	r3, [r7, #15]
}
 801738e:	4618      	mov	r0, r3
 8017390:	3710      	adds	r7, #16
 8017392:	46bd      	mov	sp, r7
 8017394:	bd80      	pop	{r7, pc}
 8017396:	bf00      	nop
 8017398:	2000001c 	.word	0x2000001c
 801739c:	20000004 	.word	0x20000004
 80173a0:	20000018 	.word	0x20000018

080173a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80173a4:	b480      	push	{r7}
 80173a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80173a8:	4b06      	ldr	r3, [pc, #24]	@ (80173c4 <HAL_IncTick+0x20>)
 80173aa:	781b      	ldrb	r3, [r3, #0]
 80173ac:	461a      	mov	r2, r3
 80173ae:	4b06      	ldr	r3, [pc, #24]	@ (80173c8 <HAL_IncTick+0x24>)
 80173b0:	681b      	ldr	r3, [r3, #0]
 80173b2:	4413      	add	r3, r2
 80173b4:	4a04      	ldr	r2, [pc, #16]	@ (80173c8 <HAL_IncTick+0x24>)
 80173b6:	6013      	str	r3, [r2, #0]
}
 80173b8:	bf00      	nop
 80173ba:	46bd      	mov	sp, r7
 80173bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173c0:	4770      	bx	lr
 80173c2:	bf00      	nop
 80173c4:	2000001c 	.word	0x2000001c
 80173c8:	200017bc 	.word	0x200017bc

080173cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80173cc:	b480      	push	{r7}
 80173ce:	af00      	add	r7, sp, #0
  return uwTick;
 80173d0:	4b03      	ldr	r3, [pc, #12]	@ (80173e0 <HAL_GetTick+0x14>)
 80173d2:	681b      	ldr	r3, [r3, #0]
}
 80173d4:	4618      	mov	r0, r3
 80173d6:	46bd      	mov	sp, r7
 80173d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173dc:	4770      	bx	lr
 80173de:	bf00      	nop
 80173e0:	200017bc 	.word	0x200017bc

080173e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80173e4:	b580      	push	{r7, lr}
 80173e6:	b084      	sub	sp, #16
 80173e8:	af00      	add	r7, sp, #0
 80173ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80173ec:	f7ff ffee 	bl	80173cc <HAL_GetTick>
 80173f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80173f6:	68fb      	ldr	r3, [r7, #12]
 80173f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80173fc:	d005      	beq.n	801740a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80173fe:	4b0a      	ldr	r3, [pc, #40]	@ (8017428 <HAL_Delay+0x44>)
 8017400:	781b      	ldrb	r3, [r3, #0]
 8017402:	461a      	mov	r2, r3
 8017404:	68fb      	ldr	r3, [r7, #12]
 8017406:	4413      	add	r3, r2
 8017408:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 801740a:	bf00      	nop
 801740c:	f7ff ffde 	bl	80173cc <HAL_GetTick>
 8017410:	4602      	mov	r2, r0
 8017412:	68bb      	ldr	r3, [r7, #8]
 8017414:	1ad3      	subs	r3, r2, r3
 8017416:	68fa      	ldr	r2, [r7, #12]
 8017418:	429a      	cmp	r2, r3
 801741a:	d8f7      	bhi.n	801740c <HAL_Delay+0x28>
  {
  }
}
 801741c:	bf00      	nop
 801741e:	bf00      	nop
 8017420:	3710      	adds	r7, #16
 8017422:	46bd      	mov	sp, r7
 8017424:	bd80      	pop	{r7, pc}
 8017426:	bf00      	nop
 8017428:	2000001c 	.word	0x2000001c

0801742c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801742c:	b480      	push	{r7}
 801742e:	b085      	sub	sp, #20
 8017430:	af00      	add	r7, sp, #0
 8017432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	f003 0307 	and.w	r3, r3, #7
 801743a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801743c:	4b0c      	ldr	r3, [pc, #48]	@ (8017470 <__NVIC_SetPriorityGrouping+0x44>)
 801743e:	68db      	ldr	r3, [r3, #12]
 8017440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8017442:	68ba      	ldr	r2, [r7, #8]
 8017444:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8017448:	4013      	ands	r3, r2
 801744a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801744c:	68fb      	ldr	r3, [r7, #12]
 801744e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8017450:	68bb      	ldr	r3, [r7, #8]
 8017452:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8017454:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8017458:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801745c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801745e:	4a04      	ldr	r2, [pc, #16]	@ (8017470 <__NVIC_SetPriorityGrouping+0x44>)
 8017460:	68bb      	ldr	r3, [r7, #8]
 8017462:	60d3      	str	r3, [r2, #12]
}
 8017464:	bf00      	nop
 8017466:	3714      	adds	r7, #20
 8017468:	46bd      	mov	sp, r7
 801746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801746e:	4770      	bx	lr
 8017470:	e000ed00 	.word	0xe000ed00

08017474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8017474:	b480      	push	{r7}
 8017476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8017478:	4b04      	ldr	r3, [pc, #16]	@ (801748c <__NVIC_GetPriorityGrouping+0x18>)
 801747a:	68db      	ldr	r3, [r3, #12]
 801747c:	0a1b      	lsrs	r3, r3, #8
 801747e:	f003 0307 	and.w	r3, r3, #7
}
 8017482:	4618      	mov	r0, r3
 8017484:	46bd      	mov	sp, r7
 8017486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801748a:	4770      	bx	lr
 801748c:	e000ed00 	.word	0xe000ed00

08017490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8017490:	b480      	push	{r7}
 8017492:	b083      	sub	sp, #12
 8017494:	af00      	add	r7, sp, #0
 8017496:	4603      	mov	r3, r0
 8017498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801749a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801749e:	2b00      	cmp	r3, #0
 80174a0:	db0b      	blt.n	80174ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80174a2:	79fb      	ldrb	r3, [r7, #7]
 80174a4:	f003 021f 	and.w	r2, r3, #31
 80174a8:	4907      	ldr	r1, [pc, #28]	@ (80174c8 <__NVIC_EnableIRQ+0x38>)
 80174aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80174ae:	095b      	lsrs	r3, r3, #5
 80174b0:	2001      	movs	r0, #1
 80174b2:	fa00 f202 	lsl.w	r2, r0, r2
 80174b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80174ba:	bf00      	nop
 80174bc:	370c      	adds	r7, #12
 80174be:	46bd      	mov	sp, r7
 80174c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174c4:	4770      	bx	lr
 80174c6:	bf00      	nop
 80174c8:	e000e100 	.word	0xe000e100

080174cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80174cc:	b480      	push	{r7}
 80174ce:	b083      	sub	sp, #12
 80174d0:	af00      	add	r7, sp, #0
 80174d2:	4603      	mov	r3, r0
 80174d4:	6039      	str	r1, [r7, #0]
 80174d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80174d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80174dc:	2b00      	cmp	r3, #0
 80174de:	db0a      	blt.n	80174f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80174e0:	683b      	ldr	r3, [r7, #0]
 80174e2:	b2da      	uxtb	r2, r3
 80174e4:	490c      	ldr	r1, [pc, #48]	@ (8017518 <__NVIC_SetPriority+0x4c>)
 80174e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80174ea:	0112      	lsls	r2, r2, #4
 80174ec:	b2d2      	uxtb	r2, r2
 80174ee:	440b      	add	r3, r1
 80174f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80174f4:	e00a      	b.n	801750c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80174f6:	683b      	ldr	r3, [r7, #0]
 80174f8:	b2da      	uxtb	r2, r3
 80174fa:	4908      	ldr	r1, [pc, #32]	@ (801751c <__NVIC_SetPriority+0x50>)
 80174fc:	79fb      	ldrb	r3, [r7, #7]
 80174fe:	f003 030f 	and.w	r3, r3, #15
 8017502:	3b04      	subs	r3, #4
 8017504:	0112      	lsls	r2, r2, #4
 8017506:	b2d2      	uxtb	r2, r2
 8017508:	440b      	add	r3, r1
 801750a:	761a      	strb	r2, [r3, #24]
}
 801750c:	bf00      	nop
 801750e:	370c      	adds	r7, #12
 8017510:	46bd      	mov	sp, r7
 8017512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017516:	4770      	bx	lr
 8017518:	e000e100 	.word	0xe000e100
 801751c:	e000ed00 	.word	0xe000ed00

08017520 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8017520:	b480      	push	{r7}
 8017522:	b089      	sub	sp, #36	@ 0x24
 8017524:	af00      	add	r7, sp, #0
 8017526:	60f8      	str	r0, [r7, #12]
 8017528:	60b9      	str	r1, [r7, #8]
 801752a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801752c:	68fb      	ldr	r3, [r7, #12]
 801752e:	f003 0307 	and.w	r3, r3, #7
 8017532:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8017534:	69fb      	ldr	r3, [r7, #28]
 8017536:	f1c3 0307 	rsb	r3, r3, #7
 801753a:	2b04      	cmp	r3, #4
 801753c:	bf28      	it	cs
 801753e:	2304      	movcs	r3, #4
 8017540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8017542:	69fb      	ldr	r3, [r7, #28]
 8017544:	3304      	adds	r3, #4
 8017546:	2b06      	cmp	r3, #6
 8017548:	d902      	bls.n	8017550 <NVIC_EncodePriority+0x30>
 801754a:	69fb      	ldr	r3, [r7, #28]
 801754c:	3b03      	subs	r3, #3
 801754e:	e000      	b.n	8017552 <NVIC_EncodePriority+0x32>
 8017550:	2300      	movs	r3, #0
 8017552:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8017554:	f04f 32ff 	mov.w	r2, #4294967295
 8017558:	69bb      	ldr	r3, [r7, #24]
 801755a:	fa02 f303 	lsl.w	r3, r2, r3
 801755e:	43da      	mvns	r2, r3
 8017560:	68bb      	ldr	r3, [r7, #8]
 8017562:	401a      	ands	r2, r3
 8017564:	697b      	ldr	r3, [r7, #20]
 8017566:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8017568:	f04f 31ff 	mov.w	r1, #4294967295
 801756c:	697b      	ldr	r3, [r7, #20]
 801756e:	fa01 f303 	lsl.w	r3, r1, r3
 8017572:	43d9      	mvns	r1, r3
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8017578:	4313      	orrs	r3, r2
         );
}
 801757a:	4618      	mov	r0, r3
 801757c:	3724      	adds	r7, #36	@ 0x24
 801757e:	46bd      	mov	sp, r7
 8017580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017584:	4770      	bx	lr
	...

08017588 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8017588:	b580      	push	{r7, lr}
 801758a:	b082      	sub	sp, #8
 801758c:	af00      	add	r7, sp, #0
 801758e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	3b01      	subs	r3, #1
 8017594:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8017598:	d301      	bcc.n	801759e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801759a:	2301      	movs	r3, #1
 801759c:	e00f      	b.n	80175be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801759e:	4a0a      	ldr	r2, [pc, #40]	@ (80175c8 <SysTick_Config+0x40>)
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	3b01      	subs	r3, #1
 80175a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80175a6:	210f      	movs	r1, #15
 80175a8:	f04f 30ff 	mov.w	r0, #4294967295
 80175ac:	f7ff ff8e 	bl	80174cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80175b0:	4b05      	ldr	r3, [pc, #20]	@ (80175c8 <SysTick_Config+0x40>)
 80175b2:	2200      	movs	r2, #0
 80175b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80175b6:	4b04      	ldr	r3, [pc, #16]	@ (80175c8 <SysTick_Config+0x40>)
 80175b8:	2207      	movs	r2, #7
 80175ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80175bc:	2300      	movs	r3, #0
}
 80175be:	4618      	mov	r0, r3
 80175c0:	3708      	adds	r7, #8
 80175c2:	46bd      	mov	sp, r7
 80175c4:	bd80      	pop	{r7, pc}
 80175c6:	bf00      	nop
 80175c8:	e000e010 	.word	0xe000e010

080175cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80175cc:	b580      	push	{r7, lr}
 80175ce:	b082      	sub	sp, #8
 80175d0:	af00      	add	r7, sp, #0
 80175d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80175d4:	6878      	ldr	r0, [r7, #4]
 80175d6:	f7ff ff29 	bl	801742c <__NVIC_SetPriorityGrouping>
}
 80175da:	bf00      	nop
 80175dc:	3708      	adds	r7, #8
 80175de:	46bd      	mov	sp, r7
 80175e0:	bd80      	pop	{r7, pc}

080175e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80175e2:	b580      	push	{r7, lr}
 80175e4:	b086      	sub	sp, #24
 80175e6:	af00      	add	r7, sp, #0
 80175e8:	4603      	mov	r3, r0
 80175ea:	60b9      	str	r1, [r7, #8]
 80175ec:	607a      	str	r2, [r7, #4]
 80175ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80175f0:	2300      	movs	r3, #0
 80175f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80175f4:	f7ff ff3e 	bl	8017474 <__NVIC_GetPriorityGrouping>
 80175f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80175fa:	687a      	ldr	r2, [r7, #4]
 80175fc:	68b9      	ldr	r1, [r7, #8]
 80175fe:	6978      	ldr	r0, [r7, #20]
 8017600:	f7ff ff8e 	bl	8017520 <NVIC_EncodePriority>
 8017604:	4602      	mov	r2, r0
 8017606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801760a:	4611      	mov	r1, r2
 801760c:	4618      	mov	r0, r3
 801760e:	f7ff ff5d 	bl	80174cc <__NVIC_SetPriority>
}
 8017612:	bf00      	nop
 8017614:	3718      	adds	r7, #24
 8017616:	46bd      	mov	sp, r7
 8017618:	bd80      	pop	{r7, pc}

0801761a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801761a:	b580      	push	{r7, lr}
 801761c:	b082      	sub	sp, #8
 801761e:	af00      	add	r7, sp, #0
 8017620:	4603      	mov	r3, r0
 8017622:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8017624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017628:	4618      	mov	r0, r3
 801762a:	f7ff ff31 	bl	8017490 <__NVIC_EnableIRQ>
}
 801762e:	bf00      	nop
 8017630:	3708      	adds	r7, #8
 8017632:	46bd      	mov	sp, r7
 8017634:	bd80      	pop	{r7, pc}

08017636 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8017636:	b580      	push	{r7, lr}
 8017638:	b082      	sub	sp, #8
 801763a:	af00      	add	r7, sp, #0
 801763c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801763e:	6878      	ldr	r0, [r7, #4]
 8017640:	f7ff ffa2 	bl	8017588 <SysTick_Config>
 8017644:	4603      	mov	r3, r0
}
 8017646:	4618      	mov	r0, r3
 8017648:	3708      	adds	r7, #8
 801764a:	46bd      	mov	sp, r7
 801764c:	bd80      	pop	{r7, pc}

0801764e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801764e:	b480      	push	{r7}
 8017650:	b085      	sub	sp, #20
 8017652:	af00      	add	r7, sp, #0
 8017654:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8017656:	2300      	movs	r3, #0
 8017658:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8017660:	b2db      	uxtb	r3, r3
 8017662:	2b02      	cmp	r3, #2
 8017664:	d008      	beq.n	8017678 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8017666:	687b      	ldr	r3, [r7, #4]
 8017668:	2204      	movs	r2, #4
 801766a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	2200      	movs	r2, #0
 8017670:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8017674:	2301      	movs	r3, #1
 8017676:	e022      	b.n	80176be <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	681b      	ldr	r3, [r3, #0]
 801767c:	681a      	ldr	r2, [r3, #0]
 801767e:	687b      	ldr	r3, [r7, #4]
 8017680:	681b      	ldr	r3, [r3, #0]
 8017682:	f022 020e 	bic.w	r2, r2, #14
 8017686:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	681b      	ldr	r3, [r3, #0]
 801768c:	681a      	ldr	r2, [r3, #0]
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	681b      	ldr	r3, [r3, #0]
 8017692:	f022 0201 	bic.w	r2, r2, #1
 8017696:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801769c:	f003 021c 	and.w	r2, r3, #28
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80176a4:	2101      	movs	r1, #1
 80176a6:	fa01 f202 	lsl.w	r2, r1, r2
 80176aa:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	2201      	movs	r2, #1
 80176b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	2200      	movs	r2, #0
 80176b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80176bc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80176be:	4618      	mov	r0, r3
 80176c0:	3714      	adds	r7, #20
 80176c2:	46bd      	mov	sp, r7
 80176c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176c8:	4770      	bx	lr

080176ca <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80176ca:	b580      	push	{r7, lr}
 80176cc:	b084      	sub	sp, #16
 80176ce:	af00      	add	r7, sp, #0
 80176d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80176d2:	2300      	movs	r3, #0
 80176d4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80176dc:	b2db      	uxtb	r3, r3
 80176de:	2b02      	cmp	r3, #2
 80176e0:	d005      	beq.n	80176ee <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	2204      	movs	r2, #4
 80176e6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80176e8:	2301      	movs	r3, #1
 80176ea:	73fb      	strb	r3, [r7, #15]
 80176ec:	e029      	b.n	8017742 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	681b      	ldr	r3, [r3, #0]
 80176f2:	681a      	ldr	r2, [r3, #0]
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	681b      	ldr	r3, [r3, #0]
 80176f8:	f022 020e 	bic.w	r2, r2, #14
 80176fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	681b      	ldr	r3, [r3, #0]
 8017702:	681a      	ldr	r2, [r3, #0]
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	681b      	ldr	r3, [r3, #0]
 8017708:	f022 0201 	bic.w	r2, r2, #1
 801770c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017712:	f003 021c 	and.w	r2, r3, #28
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801771a:	2101      	movs	r1, #1
 801771c:	fa01 f202 	lsl.w	r2, r1, r2
 8017720:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8017722:	687b      	ldr	r3, [r7, #4]
 8017724:	2201      	movs	r2, #1
 8017726:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	2200      	movs	r2, #0
 801772e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017736:	2b00      	cmp	r3, #0
 8017738:	d003      	beq.n	8017742 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801773e:	6878      	ldr	r0, [r7, #4]
 8017740:	4798      	blx	r3
    }
  }
  return status;
 8017742:	7bfb      	ldrb	r3, [r7, #15]
}
 8017744:	4618      	mov	r0, r3
 8017746:	3710      	adds	r7, #16
 8017748:	46bd      	mov	sp, r7
 801774a:	bd80      	pop	{r7, pc}

0801774c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801774c:	b480      	push	{r7}
 801774e:	b087      	sub	sp, #28
 8017750:	af00      	add	r7, sp, #0
 8017752:	6078      	str	r0, [r7, #4]
 8017754:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8017756:	2300      	movs	r3, #0
 8017758:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 801775a:	e154      	b.n	8017a06 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 801775c:	683b      	ldr	r3, [r7, #0]
 801775e:	681a      	ldr	r2, [r3, #0]
 8017760:	2101      	movs	r1, #1
 8017762:	697b      	ldr	r3, [r7, #20]
 8017764:	fa01 f303 	lsl.w	r3, r1, r3
 8017768:	4013      	ands	r3, r2
 801776a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 801776c:	68fb      	ldr	r3, [r7, #12]
 801776e:	2b00      	cmp	r3, #0
 8017770:	f000 8146 	beq.w	8017a00 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8017774:	683b      	ldr	r3, [r7, #0]
 8017776:	685b      	ldr	r3, [r3, #4]
 8017778:	f003 0303 	and.w	r3, r3, #3
 801777c:	2b01      	cmp	r3, #1
 801777e:	d005      	beq.n	801778c <HAL_GPIO_Init+0x40>
 8017780:	683b      	ldr	r3, [r7, #0]
 8017782:	685b      	ldr	r3, [r3, #4]
 8017784:	f003 0303 	and.w	r3, r3, #3
 8017788:	2b02      	cmp	r3, #2
 801778a:	d130      	bne.n	80177ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	689b      	ldr	r3, [r3, #8]
 8017790:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8017792:	697b      	ldr	r3, [r7, #20]
 8017794:	005b      	lsls	r3, r3, #1
 8017796:	2203      	movs	r2, #3
 8017798:	fa02 f303 	lsl.w	r3, r2, r3
 801779c:	43db      	mvns	r3, r3
 801779e:	693a      	ldr	r2, [r7, #16]
 80177a0:	4013      	ands	r3, r2
 80177a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80177a4:	683b      	ldr	r3, [r7, #0]
 80177a6:	68da      	ldr	r2, [r3, #12]
 80177a8:	697b      	ldr	r3, [r7, #20]
 80177aa:	005b      	lsls	r3, r3, #1
 80177ac:	fa02 f303 	lsl.w	r3, r2, r3
 80177b0:	693a      	ldr	r2, [r7, #16]
 80177b2:	4313      	orrs	r3, r2
 80177b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	693a      	ldr	r2, [r7, #16]
 80177ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	685b      	ldr	r3, [r3, #4]
 80177c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80177c2:	2201      	movs	r2, #1
 80177c4:	697b      	ldr	r3, [r7, #20]
 80177c6:	fa02 f303 	lsl.w	r3, r2, r3
 80177ca:	43db      	mvns	r3, r3
 80177cc:	693a      	ldr	r2, [r7, #16]
 80177ce:	4013      	ands	r3, r2
 80177d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80177d2:	683b      	ldr	r3, [r7, #0]
 80177d4:	685b      	ldr	r3, [r3, #4]
 80177d6:	091b      	lsrs	r3, r3, #4
 80177d8:	f003 0201 	and.w	r2, r3, #1
 80177dc:	697b      	ldr	r3, [r7, #20]
 80177de:	fa02 f303 	lsl.w	r3, r2, r3
 80177e2:	693a      	ldr	r2, [r7, #16]
 80177e4:	4313      	orrs	r3, r2
 80177e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80177e8:	687b      	ldr	r3, [r7, #4]
 80177ea:	693a      	ldr	r2, [r7, #16]
 80177ec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80177ee:	683b      	ldr	r3, [r7, #0]
 80177f0:	685b      	ldr	r3, [r3, #4]
 80177f2:	f003 0303 	and.w	r3, r3, #3
 80177f6:	2b03      	cmp	r3, #3
 80177f8:	d017      	beq.n	801782a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80177fa:	687b      	ldr	r3, [r7, #4]
 80177fc:	68db      	ldr	r3, [r3, #12]
 80177fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8017800:	697b      	ldr	r3, [r7, #20]
 8017802:	005b      	lsls	r3, r3, #1
 8017804:	2203      	movs	r2, #3
 8017806:	fa02 f303 	lsl.w	r3, r2, r3
 801780a:	43db      	mvns	r3, r3
 801780c:	693a      	ldr	r2, [r7, #16]
 801780e:	4013      	ands	r3, r2
 8017810:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8017812:	683b      	ldr	r3, [r7, #0]
 8017814:	689a      	ldr	r2, [r3, #8]
 8017816:	697b      	ldr	r3, [r7, #20]
 8017818:	005b      	lsls	r3, r3, #1
 801781a:	fa02 f303 	lsl.w	r3, r2, r3
 801781e:	693a      	ldr	r2, [r7, #16]
 8017820:	4313      	orrs	r3, r2
 8017822:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8017824:	687b      	ldr	r3, [r7, #4]
 8017826:	693a      	ldr	r2, [r7, #16]
 8017828:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801782a:	683b      	ldr	r3, [r7, #0]
 801782c:	685b      	ldr	r3, [r3, #4]
 801782e:	f003 0303 	and.w	r3, r3, #3
 8017832:	2b02      	cmp	r3, #2
 8017834:	d123      	bne.n	801787e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8017836:	697b      	ldr	r3, [r7, #20]
 8017838:	08da      	lsrs	r2, r3, #3
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	3208      	adds	r2, #8
 801783e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017842:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8017844:	697b      	ldr	r3, [r7, #20]
 8017846:	f003 0307 	and.w	r3, r3, #7
 801784a:	009b      	lsls	r3, r3, #2
 801784c:	220f      	movs	r2, #15
 801784e:	fa02 f303 	lsl.w	r3, r2, r3
 8017852:	43db      	mvns	r3, r3
 8017854:	693a      	ldr	r2, [r7, #16]
 8017856:	4013      	ands	r3, r2
 8017858:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 801785a:	683b      	ldr	r3, [r7, #0]
 801785c:	691a      	ldr	r2, [r3, #16]
 801785e:	697b      	ldr	r3, [r7, #20]
 8017860:	f003 0307 	and.w	r3, r3, #7
 8017864:	009b      	lsls	r3, r3, #2
 8017866:	fa02 f303 	lsl.w	r3, r2, r3
 801786a:	693a      	ldr	r2, [r7, #16]
 801786c:	4313      	orrs	r3, r2
 801786e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8017870:	697b      	ldr	r3, [r7, #20]
 8017872:	08da      	lsrs	r2, r3, #3
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	3208      	adds	r2, #8
 8017878:	6939      	ldr	r1, [r7, #16]
 801787a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801787e:	687b      	ldr	r3, [r7, #4]
 8017880:	681b      	ldr	r3, [r3, #0]
 8017882:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8017884:	697b      	ldr	r3, [r7, #20]
 8017886:	005b      	lsls	r3, r3, #1
 8017888:	2203      	movs	r2, #3
 801788a:	fa02 f303 	lsl.w	r3, r2, r3
 801788e:	43db      	mvns	r3, r3
 8017890:	693a      	ldr	r2, [r7, #16]
 8017892:	4013      	ands	r3, r2
 8017894:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8017896:	683b      	ldr	r3, [r7, #0]
 8017898:	685b      	ldr	r3, [r3, #4]
 801789a:	f003 0203 	and.w	r2, r3, #3
 801789e:	697b      	ldr	r3, [r7, #20]
 80178a0:	005b      	lsls	r3, r3, #1
 80178a2:	fa02 f303 	lsl.w	r3, r2, r3
 80178a6:	693a      	ldr	r2, [r7, #16]
 80178a8:	4313      	orrs	r3, r2
 80178aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80178ac:	687b      	ldr	r3, [r7, #4]
 80178ae:	693a      	ldr	r2, [r7, #16]
 80178b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80178b2:	683b      	ldr	r3, [r7, #0]
 80178b4:	685b      	ldr	r3, [r3, #4]
 80178b6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80178ba:	2b00      	cmp	r3, #0
 80178bc:	f000 80a0 	beq.w	8017a00 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80178c0:	4b58      	ldr	r3, [pc, #352]	@ (8017a24 <HAL_GPIO_Init+0x2d8>)
 80178c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80178c4:	4a57      	ldr	r2, [pc, #348]	@ (8017a24 <HAL_GPIO_Init+0x2d8>)
 80178c6:	f043 0301 	orr.w	r3, r3, #1
 80178ca:	6613      	str	r3, [r2, #96]	@ 0x60
 80178cc:	4b55      	ldr	r3, [pc, #340]	@ (8017a24 <HAL_GPIO_Init+0x2d8>)
 80178ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80178d0:	f003 0301 	and.w	r3, r3, #1
 80178d4:	60bb      	str	r3, [r7, #8]
 80178d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80178d8:	4a53      	ldr	r2, [pc, #332]	@ (8017a28 <HAL_GPIO_Init+0x2dc>)
 80178da:	697b      	ldr	r3, [r7, #20]
 80178dc:	089b      	lsrs	r3, r3, #2
 80178de:	3302      	adds	r3, #2
 80178e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80178e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80178e6:	697b      	ldr	r3, [r7, #20]
 80178e8:	f003 0303 	and.w	r3, r3, #3
 80178ec:	009b      	lsls	r3, r3, #2
 80178ee:	220f      	movs	r2, #15
 80178f0:	fa02 f303 	lsl.w	r3, r2, r3
 80178f4:	43db      	mvns	r3, r3
 80178f6:	693a      	ldr	r2, [r7, #16]
 80178f8:	4013      	ands	r3, r2
 80178fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80178fc:	687b      	ldr	r3, [r7, #4]
 80178fe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8017902:	d019      	beq.n	8017938 <HAL_GPIO_Init+0x1ec>
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	4a49      	ldr	r2, [pc, #292]	@ (8017a2c <HAL_GPIO_Init+0x2e0>)
 8017908:	4293      	cmp	r3, r2
 801790a:	d013      	beq.n	8017934 <HAL_GPIO_Init+0x1e8>
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	4a48      	ldr	r2, [pc, #288]	@ (8017a30 <HAL_GPIO_Init+0x2e4>)
 8017910:	4293      	cmp	r3, r2
 8017912:	d00d      	beq.n	8017930 <HAL_GPIO_Init+0x1e4>
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	4a47      	ldr	r2, [pc, #284]	@ (8017a34 <HAL_GPIO_Init+0x2e8>)
 8017918:	4293      	cmp	r3, r2
 801791a:	d007      	beq.n	801792c <HAL_GPIO_Init+0x1e0>
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	4a46      	ldr	r2, [pc, #280]	@ (8017a38 <HAL_GPIO_Init+0x2ec>)
 8017920:	4293      	cmp	r3, r2
 8017922:	d101      	bne.n	8017928 <HAL_GPIO_Init+0x1dc>
 8017924:	2304      	movs	r3, #4
 8017926:	e008      	b.n	801793a <HAL_GPIO_Init+0x1ee>
 8017928:	2307      	movs	r3, #7
 801792a:	e006      	b.n	801793a <HAL_GPIO_Init+0x1ee>
 801792c:	2303      	movs	r3, #3
 801792e:	e004      	b.n	801793a <HAL_GPIO_Init+0x1ee>
 8017930:	2302      	movs	r3, #2
 8017932:	e002      	b.n	801793a <HAL_GPIO_Init+0x1ee>
 8017934:	2301      	movs	r3, #1
 8017936:	e000      	b.n	801793a <HAL_GPIO_Init+0x1ee>
 8017938:	2300      	movs	r3, #0
 801793a:	697a      	ldr	r2, [r7, #20]
 801793c:	f002 0203 	and.w	r2, r2, #3
 8017940:	0092      	lsls	r2, r2, #2
 8017942:	4093      	lsls	r3, r2
 8017944:	693a      	ldr	r2, [r7, #16]
 8017946:	4313      	orrs	r3, r2
 8017948:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 801794a:	4937      	ldr	r1, [pc, #220]	@ (8017a28 <HAL_GPIO_Init+0x2dc>)
 801794c:	697b      	ldr	r3, [r7, #20]
 801794e:	089b      	lsrs	r3, r3, #2
 8017950:	3302      	adds	r3, #2
 8017952:	693a      	ldr	r2, [r7, #16]
 8017954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8017958:	4b38      	ldr	r3, [pc, #224]	@ (8017a3c <HAL_GPIO_Init+0x2f0>)
 801795a:	689b      	ldr	r3, [r3, #8]
 801795c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801795e:	68fb      	ldr	r3, [r7, #12]
 8017960:	43db      	mvns	r3, r3
 8017962:	693a      	ldr	r2, [r7, #16]
 8017964:	4013      	ands	r3, r2
 8017966:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8017968:	683b      	ldr	r3, [r7, #0]
 801796a:	685b      	ldr	r3, [r3, #4]
 801796c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8017970:	2b00      	cmp	r3, #0
 8017972:	d003      	beq.n	801797c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8017974:	693a      	ldr	r2, [r7, #16]
 8017976:	68fb      	ldr	r3, [r7, #12]
 8017978:	4313      	orrs	r3, r2
 801797a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 801797c:	4a2f      	ldr	r2, [pc, #188]	@ (8017a3c <HAL_GPIO_Init+0x2f0>)
 801797e:	693b      	ldr	r3, [r7, #16]
 8017980:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8017982:	4b2e      	ldr	r3, [pc, #184]	@ (8017a3c <HAL_GPIO_Init+0x2f0>)
 8017984:	68db      	ldr	r3, [r3, #12]
 8017986:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8017988:	68fb      	ldr	r3, [r7, #12]
 801798a:	43db      	mvns	r3, r3
 801798c:	693a      	ldr	r2, [r7, #16]
 801798e:	4013      	ands	r3, r2
 8017990:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8017992:	683b      	ldr	r3, [r7, #0]
 8017994:	685b      	ldr	r3, [r3, #4]
 8017996:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801799a:	2b00      	cmp	r3, #0
 801799c:	d003      	beq.n	80179a6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 801799e:	693a      	ldr	r2, [r7, #16]
 80179a0:	68fb      	ldr	r3, [r7, #12]
 80179a2:	4313      	orrs	r3, r2
 80179a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80179a6:	4a25      	ldr	r2, [pc, #148]	@ (8017a3c <HAL_GPIO_Init+0x2f0>)
 80179a8:	693b      	ldr	r3, [r7, #16]
 80179aa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80179ac:	4b23      	ldr	r3, [pc, #140]	@ (8017a3c <HAL_GPIO_Init+0x2f0>)
 80179ae:	685b      	ldr	r3, [r3, #4]
 80179b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80179b2:	68fb      	ldr	r3, [r7, #12]
 80179b4:	43db      	mvns	r3, r3
 80179b6:	693a      	ldr	r2, [r7, #16]
 80179b8:	4013      	ands	r3, r2
 80179ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80179bc:	683b      	ldr	r3, [r7, #0]
 80179be:	685b      	ldr	r3, [r3, #4]
 80179c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	d003      	beq.n	80179d0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80179c8:	693a      	ldr	r2, [r7, #16]
 80179ca:	68fb      	ldr	r3, [r7, #12]
 80179cc:	4313      	orrs	r3, r2
 80179ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80179d0:	4a1a      	ldr	r2, [pc, #104]	@ (8017a3c <HAL_GPIO_Init+0x2f0>)
 80179d2:	693b      	ldr	r3, [r7, #16]
 80179d4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80179d6:	4b19      	ldr	r3, [pc, #100]	@ (8017a3c <HAL_GPIO_Init+0x2f0>)
 80179d8:	681b      	ldr	r3, [r3, #0]
 80179da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80179dc:	68fb      	ldr	r3, [r7, #12]
 80179de:	43db      	mvns	r3, r3
 80179e0:	693a      	ldr	r2, [r7, #16]
 80179e2:	4013      	ands	r3, r2
 80179e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80179e6:	683b      	ldr	r3, [r7, #0]
 80179e8:	685b      	ldr	r3, [r3, #4]
 80179ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	d003      	beq.n	80179fa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80179f2:	693a      	ldr	r2, [r7, #16]
 80179f4:	68fb      	ldr	r3, [r7, #12]
 80179f6:	4313      	orrs	r3, r2
 80179f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80179fa:	4a10      	ldr	r2, [pc, #64]	@ (8017a3c <HAL_GPIO_Init+0x2f0>)
 80179fc:	693b      	ldr	r3, [r7, #16]
 80179fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8017a00:	697b      	ldr	r3, [r7, #20]
 8017a02:	3301      	adds	r3, #1
 8017a04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8017a06:	683b      	ldr	r3, [r7, #0]
 8017a08:	681a      	ldr	r2, [r3, #0]
 8017a0a:	697b      	ldr	r3, [r7, #20]
 8017a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8017a10:	2b00      	cmp	r3, #0
 8017a12:	f47f aea3 	bne.w	801775c <HAL_GPIO_Init+0x10>
  }
}
 8017a16:	bf00      	nop
 8017a18:	bf00      	nop
 8017a1a:	371c      	adds	r7, #28
 8017a1c:	46bd      	mov	sp, r7
 8017a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a22:	4770      	bx	lr
 8017a24:	40021000 	.word	0x40021000
 8017a28:	40010000 	.word	0x40010000
 8017a2c:	48000400 	.word	0x48000400
 8017a30:	48000800 	.word	0x48000800
 8017a34:	48000c00 	.word	0x48000c00
 8017a38:	48001000 	.word	0x48001000
 8017a3c:	40010400 	.word	0x40010400

08017a40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8017a40:	b480      	push	{r7}
 8017a42:	b085      	sub	sp, #20
 8017a44:	af00      	add	r7, sp, #0
 8017a46:	6078      	str	r0, [r7, #4]
 8017a48:	460b      	mov	r3, r1
 8017a4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	691a      	ldr	r2, [r3, #16]
 8017a50:	887b      	ldrh	r3, [r7, #2]
 8017a52:	4013      	ands	r3, r2
 8017a54:	2b00      	cmp	r3, #0
 8017a56:	d002      	beq.n	8017a5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8017a58:	2301      	movs	r3, #1
 8017a5a:	73fb      	strb	r3, [r7, #15]
 8017a5c:	e001      	b.n	8017a62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8017a5e:	2300      	movs	r3, #0
 8017a60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8017a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8017a64:	4618      	mov	r0, r3
 8017a66:	3714      	adds	r7, #20
 8017a68:	46bd      	mov	sp, r7
 8017a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a6e:	4770      	bx	lr

08017a70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8017a70:	b480      	push	{r7}
 8017a72:	b083      	sub	sp, #12
 8017a74:	af00      	add	r7, sp, #0
 8017a76:	6078      	str	r0, [r7, #4]
 8017a78:	460b      	mov	r3, r1
 8017a7a:	807b      	strh	r3, [r7, #2]
 8017a7c:	4613      	mov	r3, r2
 8017a7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8017a80:	787b      	ldrb	r3, [r7, #1]
 8017a82:	2b00      	cmp	r3, #0
 8017a84:	d003      	beq.n	8017a8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8017a86:	887a      	ldrh	r2, [r7, #2]
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8017a8c:	e002      	b.n	8017a94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8017a8e:	887a      	ldrh	r2, [r7, #2]
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8017a94:	bf00      	nop
 8017a96:	370c      	adds	r7, #12
 8017a98:	46bd      	mov	sp, r7
 8017a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a9e:	4770      	bx	lr

08017aa0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8017aa0:	b480      	push	{r7}
 8017aa2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8017aa4:	4b04      	ldr	r3, [pc, #16]	@ (8017ab8 <HAL_PWREx_GetVoltageRange+0x18>)
 8017aa6:	681b      	ldr	r3, [r3, #0]
 8017aa8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8017aac:	4618      	mov	r0, r3
 8017aae:	46bd      	mov	sp, r7
 8017ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ab4:	4770      	bx	lr
 8017ab6:	bf00      	nop
 8017ab8:	40007000 	.word	0x40007000

08017abc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8017abc:	b480      	push	{r7}
 8017abe:	b085      	sub	sp, #20
 8017ac0:	af00      	add	r7, sp, #0
 8017ac2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8017ac4:	687b      	ldr	r3, [r7, #4]
 8017ac6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017aca:	d130      	bne.n	8017b2e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8017acc:	4b23      	ldr	r3, [pc, #140]	@ (8017b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8017ace:	681b      	ldr	r3, [r3, #0]
 8017ad0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8017ad4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017ad8:	d038      	beq.n	8017b4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8017ada:	4b20      	ldr	r3, [pc, #128]	@ (8017b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8017adc:	681b      	ldr	r3, [r3, #0]
 8017ade:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8017ae2:	4a1e      	ldr	r2, [pc, #120]	@ (8017b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8017ae4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8017ae8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8017aea:	4b1d      	ldr	r3, [pc, #116]	@ (8017b60 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8017aec:	681b      	ldr	r3, [r3, #0]
 8017aee:	2232      	movs	r2, #50	@ 0x32
 8017af0:	fb02 f303 	mul.w	r3, r2, r3
 8017af4:	4a1b      	ldr	r2, [pc, #108]	@ (8017b64 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8017af6:	fba2 2303 	umull	r2, r3, r2, r3
 8017afa:	0c9b      	lsrs	r3, r3, #18
 8017afc:	3301      	adds	r3, #1
 8017afe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8017b00:	e002      	b.n	8017b08 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8017b02:	68fb      	ldr	r3, [r7, #12]
 8017b04:	3b01      	subs	r3, #1
 8017b06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8017b08:	4b14      	ldr	r3, [pc, #80]	@ (8017b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8017b0a:	695b      	ldr	r3, [r3, #20]
 8017b0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8017b10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017b14:	d102      	bne.n	8017b1c <HAL_PWREx_ControlVoltageScaling+0x60>
 8017b16:	68fb      	ldr	r3, [r7, #12]
 8017b18:	2b00      	cmp	r3, #0
 8017b1a:	d1f2      	bne.n	8017b02 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8017b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8017b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8017b1e:	695b      	ldr	r3, [r3, #20]
 8017b20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8017b24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017b28:	d110      	bne.n	8017b4c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8017b2a:	2303      	movs	r3, #3
 8017b2c:	e00f      	b.n	8017b4e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8017b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8017b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8017b30:	681b      	ldr	r3, [r3, #0]
 8017b32:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8017b36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017b3a:	d007      	beq.n	8017b4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8017b3c:	4b07      	ldr	r3, [pc, #28]	@ (8017b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8017b3e:	681b      	ldr	r3, [r3, #0]
 8017b40:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8017b44:	4a05      	ldr	r2, [pc, #20]	@ (8017b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8017b46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8017b4a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8017b4c:	2300      	movs	r3, #0
}
 8017b4e:	4618      	mov	r0, r3
 8017b50:	3714      	adds	r7, #20
 8017b52:	46bd      	mov	sp, r7
 8017b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b58:	4770      	bx	lr
 8017b5a:	bf00      	nop
 8017b5c:	40007000 	.word	0x40007000
 8017b60:	20000004 	.word	0x20000004
 8017b64:	431bde83 	.word	0x431bde83

08017b68 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8017b68:	b580      	push	{r7, lr}
 8017b6a:	b088      	sub	sp, #32
 8017b6c:	af00      	add	r7, sp, #0
 8017b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8017b70:	687b      	ldr	r3, [r7, #4]
 8017b72:	2b00      	cmp	r3, #0
 8017b74:	d102      	bne.n	8017b7c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8017b76:	2301      	movs	r3, #1
 8017b78:	f000 bc02 	b.w	8018380 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8017b7c:	4b96      	ldr	r3, [pc, #600]	@ (8017dd8 <HAL_RCC_OscConfig+0x270>)
 8017b7e:	689b      	ldr	r3, [r3, #8]
 8017b80:	f003 030c 	and.w	r3, r3, #12
 8017b84:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8017b86:	4b94      	ldr	r3, [pc, #592]	@ (8017dd8 <HAL_RCC_OscConfig+0x270>)
 8017b88:	68db      	ldr	r3, [r3, #12]
 8017b8a:	f003 0303 	and.w	r3, r3, #3
 8017b8e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	681b      	ldr	r3, [r3, #0]
 8017b94:	f003 0310 	and.w	r3, r3, #16
 8017b98:	2b00      	cmp	r3, #0
 8017b9a:	f000 80e4 	beq.w	8017d66 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8017b9e:	69bb      	ldr	r3, [r7, #24]
 8017ba0:	2b00      	cmp	r3, #0
 8017ba2:	d007      	beq.n	8017bb4 <HAL_RCC_OscConfig+0x4c>
 8017ba4:	69bb      	ldr	r3, [r7, #24]
 8017ba6:	2b0c      	cmp	r3, #12
 8017ba8:	f040 808b 	bne.w	8017cc2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8017bac:	697b      	ldr	r3, [r7, #20]
 8017bae:	2b01      	cmp	r3, #1
 8017bb0:	f040 8087 	bne.w	8017cc2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8017bb4:	4b88      	ldr	r3, [pc, #544]	@ (8017dd8 <HAL_RCC_OscConfig+0x270>)
 8017bb6:	681b      	ldr	r3, [r3, #0]
 8017bb8:	f003 0302 	and.w	r3, r3, #2
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	d005      	beq.n	8017bcc <HAL_RCC_OscConfig+0x64>
 8017bc0:	687b      	ldr	r3, [r7, #4]
 8017bc2:	699b      	ldr	r3, [r3, #24]
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d101      	bne.n	8017bcc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8017bc8:	2301      	movs	r3, #1
 8017bca:	e3d9      	b.n	8018380 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8017bcc:	687b      	ldr	r3, [r7, #4]
 8017bce:	6a1a      	ldr	r2, [r3, #32]
 8017bd0:	4b81      	ldr	r3, [pc, #516]	@ (8017dd8 <HAL_RCC_OscConfig+0x270>)
 8017bd2:	681b      	ldr	r3, [r3, #0]
 8017bd4:	f003 0308 	and.w	r3, r3, #8
 8017bd8:	2b00      	cmp	r3, #0
 8017bda:	d004      	beq.n	8017be6 <HAL_RCC_OscConfig+0x7e>
 8017bdc:	4b7e      	ldr	r3, [pc, #504]	@ (8017dd8 <HAL_RCC_OscConfig+0x270>)
 8017bde:	681b      	ldr	r3, [r3, #0]
 8017be0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017be4:	e005      	b.n	8017bf2 <HAL_RCC_OscConfig+0x8a>
 8017be6:	4b7c      	ldr	r3, [pc, #496]	@ (8017dd8 <HAL_RCC_OscConfig+0x270>)
 8017be8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8017bec:	091b      	lsrs	r3, r3, #4
 8017bee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017bf2:	4293      	cmp	r3, r2
 8017bf4:	d223      	bcs.n	8017c3e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	6a1b      	ldr	r3, [r3, #32]
 8017bfa:	4618      	mov	r0, r3
 8017bfc:	f000 fd8c 	bl	8018718 <RCC_SetFlashLatencyFromMSIRange>
 8017c00:	4603      	mov	r3, r0
 8017c02:	2b00      	cmp	r3, #0
 8017c04:	d001      	beq.n	8017c0a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8017c06:	2301      	movs	r3, #1
 8017c08:	e3ba      	b.n	8018380 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8017c0a:	4b73      	ldr	r3, [pc, #460]	@ (8017dd8 <HAL_RCC_OscConfig+0x270>)
 8017c0c:	681b      	ldr	r3, [r3, #0]
 8017c0e:	4a72      	ldr	r2, [pc, #456]	@ (8017dd8 <HAL_RCC_OscConfig+0x270>)
 8017c10:	f043 0308 	orr.w	r3, r3, #8
 8017c14:	6013      	str	r3, [r2, #0]
 8017c16:	4b70      	ldr	r3, [pc, #448]	@ (8017dd8 <HAL_RCC_OscConfig+0x270>)
 8017c18:	681b      	ldr	r3, [r3, #0]
 8017c1a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	6a1b      	ldr	r3, [r3, #32]
 8017c22:	496d      	ldr	r1, [pc, #436]	@ (8017dd8 <HAL_RCC_OscConfig+0x270>)
 8017c24:	4313      	orrs	r3, r2
 8017c26:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8017c28:	4b6b      	ldr	r3, [pc, #428]	@ (8017dd8 <HAL_RCC_OscConfig+0x270>)
 8017c2a:	685b      	ldr	r3, [r3, #4]
 8017c2c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8017c30:	687b      	ldr	r3, [r7, #4]
 8017c32:	69db      	ldr	r3, [r3, #28]
 8017c34:	021b      	lsls	r3, r3, #8
 8017c36:	4968      	ldr	r1, [pc, #416]	@ (8017dd8 <HAL_RCC_OscConfig+0x270>)
 8017c38:	4313      	orrs	r3, r2
 8017c3a:	604b      	str	r3, [r1, #4]
 8017c3c:	e025      	b.n	8017c8a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8017c3e:	4b66      	ldr	r3, [pc, #408]	@ (8017dd8 <HAL_RCC_OscConfig+0x270>)
 8017c40:	681b      	ldr	r3, [r3, #0]
 8017c42:	4a65      	ldr	r2, [pc, #404]	@ (8017dd8 <HAL_RCC_OscConfig+0x270>)
 8017c44:	f043 0308 	orr.w	r3, r3, #8
 8017c48:	6013      	str	r3, [r2, #0]
 8017c4a:	4b63      	ldr	r3, [pc, #396]	@ (8017dd8 <HAL_RCC_OscConfig+0x270>)
 8017c4c:	681b      	ldr	r3, [r3, #0]
 8017c4e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	6a1b      	ldr	r3, [r3, #32]
 8017c56:	4960      	ldr	r1, [pc, #384]	@ (8017dd8 <HAL_RCC_OscConfig+0x270>)
 8017c58:	4313      	orrs	r3, r2
 8017c5a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8017c5c:	4b5e      	ldr	r3, [pc, #376]	@ (8017dd8 <HAL_RCC_OscConfig+0x270>)
 8017c5e:	685b      	ldr	r3, [r3, #4]
 8017c60:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	69db      	ldr	r3, [r3, #28]
 8017c68:	021b      	lsls	r3, r3, #8
 8017c6a:	495b      	ldr	r1, [pc, #364]	@ (8017dd8 <HAL_RCC_OscConfig+0x270>)
 8017c6c:	4313      	orrs	r3, r2
 8017c6e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8017c70:	69bb      	ldr	r3, [r7, #24]
 8017c72:	2b00      	cmp	r3, #0
 8017c74:	d109      	bne.n	8017c8a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8017c76:	687b      	ldr	r3, [r7, #4]
 8017c78:	6a1b      	ldr	r3, [r3, #32]
 8017c7a:	4618      	mov	r0, r3
 8017c7c:	f000 fd4c 	bl	8018718 <RCC_SetFlashLatencyFromMSIRange>
 8017c80:	4603      	mov	r3, r0
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	d001      	beq.n	8017c8a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8017c86:	2301      	movs	r3, #1
 8017c88:	e37a      	b.n	8018380 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8017c8a:	f000 fc81 	bl	8018590 <HAL_RCC_GetSysClockFreq>
 8017c8e:	4602      	mov	r2, r0
 8017c90:	4b51      	ldr	r3, [pc, #324]	@ (8017dd8 <HAL_RCC_OscConfig+0x270>)
 8017c92:	689b      	ldr	r3, [r3, #8]
 8017c94:	091b      	lsrs	r3, r3, #4
 8017c96:	f003 030f 	and.w	r3, r3, #15
 8017c9a:	4950      	ldr	r1, [pc, #320]	@ (8017ddc <HAL_RCC_OscConfig+0x274>)
 8017c9c:	5ccb      	ldrb	r3, [r1, r3]
 8017c9e:	f003 031f 	and.w	r3, r3, #31
 8017ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8017ca6:	4a4e      	ldr	r2, [pc, #312]	@ (8017de0 <HAL_RCC_OscConfig+0x278>)
 8017ca8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8017caa:	4b4e      	ldr	r3, [pc, #312]	@ (8017de4 <HAL_RCC_OscConfig+0x27c>)
 8017cac:	681b      	ldr	r3, [r3, #0]
 8017cae:	4618      	mov	r0, r3
 8017cb0:	f7ff fb3c 	bl	801732c <HAL_InitTick>
 8017cb4:	4603      	mov	r3, r0
 8017cb6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8017cb8:	7bfb      	ldrb	r3, [r7, #15]
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	d052      	beq.n	8017d64 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8017cbe:	7bfb      	ldrb	r3, [r7, #15]
 8017cc0:	e35e      	b.n	8018380 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	699b      	ldr	r3, [r3, #24]
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d032      	beq.n	8017d30 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8017cca:	4b43      	ldr	r3, [pc, #268]	@ (8017dd8 <HAL_RCC_OscConfig+0x270>)
 8017ccc:	681b      	ldr	r3, [r3, #0]
 8017cce:	4a42      	ldr	r2, [pc, #264]	@ (8017dd8 <HAL_RCC_OscConfig+0x270>)
 8017cd0:	f043 0301 	orr.w	r3, r3, #1
 8017cd4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8017cd6:	f7ff fb79 	bl	80173cc <HAL_GetTick>
 8017cda:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8017cdc:	e008      	b.n	8017cf0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8017cde:	f7ff fb75 	bl	80173cc <HAL_GetTick>
 8017ce2:	4602      	mov	r2, r0
 8017ce4:	693b      	ldr	r3, [r7, #16]
 8017ce6:	1ad3      	subs	r3, r2, r3
 8017ce8:	2b02      	cmp	r3, #2
 8017cea:	d901      	bls.n	8017cf0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8017cec:	2303      	movs	r3, #3
 8017cee:	e347      	b.n	8018380 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8017cf0:	4b39      	ldr	r3, [pc, #228]	@ (8017dd8 <HAL_RCC_OscConfig+0x270>)
 8017cf2:	681b      	ldr	r3, [r3, #0]
 8017cf4:	f003 0302 	and.w	r3, r3, #2
 8017cf8:	2b00      	cmp	r3, #0
 8017cfa:	d0f0      	beq.n	8017cde <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8017cfc:	4b36      	ldr	r3, [pc, #216]	@ (8017dd8 <HAL_RCC_OscConfig+0x270>)
 8017cfe:	681b      	ldr	r3, [r3, #0]
 8017d00:	4a35      	ldr	r2, [pc, #212]	@ (8017dd8 <HAL_RCC_OscConfig+0x270>)
 8017d02:	f043 0308 	orr.w	r3, r3, #8
 8017d06:	6013      	str	r3, [r2, #0]
 8017d08:	4b33      	ldr	r3, [pc, #204]	@ (8017dd8 <HAL_RCC_OscConfig+0x270>)
 8017d0a:	681b      	ldr	r3, [r3, #0]
 8017d0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	6a1b      	ldr	r3, [r3, #32]
 8017d14:	4930      	ldr	r1, [pc, #192]	@ (8017dd8 <HAL_RCC_OscConfig+0x270>)
 8017d16:	4313      	orrs	r3, r2
 8017d18:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8017d1a:	4b2f      	ldr	r3, [pc, #188]	@ (8017dd8 <HAL_RCC_OscConfig+0x270>)
 8017d1c:	685b      	ldr	r3, [r3, #4]
 8017d1e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8017d22:	687b      	ldr	r3, [r7, #4]
 8017d24:	69db      	ldr	r3, [r3, #28]
 8017d26:	021b      	lsls	r3, r3, #8
 8017d28:	492b      	ldr	r1, [pc, #172]	@ (8017dd8 <HAL_RCC_OscConfig+0x270>)
 8017d2a:	4313      	orrs	r3, r2
 8017d2c:	604b      	str	r3, [r1, #4]
 8017d2e:	e01a      	b.n	8017d66 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8017d30:	4b29      	ldr	r3, [pc, #164]	@ (8017dd8 <HAL_RCC_OscConfig+0x270>)
 8017d32:	681b      	ldr	r3, [r3, #0]
 8017d34:	4a28      	ldr	r2, [pc, #160]	@ (8017dd8 <HAL_RCC_OscConfig+0x270>)
 8017d36:	f023 0301 	bic.w	r3, r3, #1
 8017d3a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8017d3c:	f7ff fb46 	bl	80173cc <HAL_GetTick>
 8017d40:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8017d42:	e008      	b.n	8017d56 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8017d44:	f7ff fb42 	bl	80173cc <HAL_GetTick>
 8017d48:	4602      	mov	r2, r0
 8017d4a:	693b      	ldr	r3, [r7, #16]
 8017d4c:	1ad3      	subs	r3, r2, r3
 8017d4e:	2b02      	cmp	r3, #2
 8017d50:	d901      	bls.n	8017d56 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8017d52:	2303      	movs	r3, #3
 8017d54:	e314      	b.n	8018380 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8017d56:	4b20      	ldr	r3, [pc, #128]	@ (8017dd8 <HAL_RCC_OscConfig+0x270>)
 8017d58:	681b      	ldr	r3, [r3, #0]
 8017d5a:	f003 0302 	and.w	r3, r3, #2
 8017d5e:	2b00      	cmp	r3, #0
 8017d60:	d1f0      	bne.n	8017d44 <HAL_RCC_OscConfig+0x1dc>
 8017d62:	e000      	b.n	8017d66 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8017d64:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8017d66:	687b      	ldr	r3, [r7, #4]
 8017d68:	681b      	ldr	r3, [r3, #0]
 8017d6a:	f003 0301 	and.w	r3, r3, #1
 8017d6e:	2b00      	cmp	r3, #0
 8017d70:	d073      	beq.n	8017e5a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8017d72:	69bb      	ldr	r3, [r7, #24]
 8017d74:	2b08      	cmp	r3, #8
 8017d76:	d005      	beq.n	8017d84 <HAL_RCC_OscConfig+0x21c>
 8017d78:	69bb      	ldr	r3, [r7, #24]
 8017d7a:	2b0c      	cmp	r3, #12
 8017d7c:	d10e      	bne.n	8017d9c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8017d7e:	697b      	ldr	r3, [r7, #20]
 8017d80:	2b03      	cmp	r3, #3
 8017d82:	d10b      	bne.n	8017d9c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8017d84:	4b14      	ldr	r3, [pc, #80]	@ (8017dd8 <HAL_RCC_OscConfig+0x270>)
 8017d86:	681b      	ldr	r3, [r3, #0]
 8017d88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8017d8c:	2b00      	cmp	r3, #0
 8017d8e:	d063      	beq.n	8017e58 <HAL_RCC_OscConfig+0x2f0>
 8017d90:	687b      	ldr	r3, [r7, #4]
 8017d92:	685b      	ldr	r3, [r3, #4]
 8017d94:	2b00      	cmp	r3, #0
 8017d96:	d15f      	bne.n	8017e58 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8017d98:	2301      	movs	r3, #1
 8017d9a:	e2f1      	b.n	8018380 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8017d9c:	687b      	ldr	r3, [r7, #4]
 8017d9e:	685b      	ldr	r3, [r3, #4]
 8017da0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017da4:	d106      	bne.n	8017db4 <HAL_RCC_OscConfig+0x24c>
 8017da6:	4b0c      	ldr	r3, [pc, #48]	@ (8017dd8 <HAL_RCC_OscConfig+0x270>)
 8017da8:	681b      	ldr	r3, [r3, #0]
 8017daa:	4a0b      	ldr	r2, [pc, #44]	@ (8017dd8 <HAL_RCC_OscConfig+0x270>)
 8017dac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8017db0:	6013      	str	r3, [r2, #0]
 8017db2:	e025      	b.n	8017e00 <HAL_RCC_OscConfig+0x298>
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	685b      	ldr	r3, [r3, #4]
 8017db8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8017dbc:	d114      	bne.n	8017de8 <HAL_RCC_OscConfig+0x280>
 8017dbe:	4b06      	ldr	r3, [pc, #24]	@ (8017dd8 <HAL_RCC_OscConfig+0x270>)
 8017dc0:	681b      	ldr	r3, [r3, #0]
 8017dc2:	4a05      	ldr	r2, [pc, #20]	@ (8017dd8 <HAL_RCC_OscConfig+0x270>)
 8017dc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8017dc8:	6013      	str	r3, [r2, #0]
 8017dca:	4b03      	ldr	r3, [pc, #12]	@ (8017dd8 <HAL_RCC_OscConfig+0x270>)
 8017dcc:	681b      	ldr	r3, [r3, #0]
 8017dce:	4a02      	ldr	r2, [pc, #8]	@ (8017dd8 <HAL_RCC_OscConfig+0x270>)
 8017dd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8017dd4:	6013      	str	r3, [r2, #0]
 8017dd6:	e013      	b.n	8017e00 <HAL_RCC_OscConfig+0x298>
 8017dd8:	40021000 	.word	0x40021000
 8017ddc:	0801f998 	.word	0x0801f998
 8017de0:	20000004 	.word	0x20000004
 8017de4:	20000018 	.word	0x20000018
 8017de8:	4ba0      	ldr	r3, [pc, #640]	@ (801806c <HAL_RCC_OscConfig+0x504>)
 8017dea:	681b      	ldr	r3, [r3, #0]
 8017dec:	4a9f      	ldr	r2, [pc, #636]	@ (801806c <HAL_RCC_OscConfig+0x504>)
 8017dee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8017df2:	6013      	str	r3, [r2, #0]
 8017df4:	4b9d      	ldr	r3, [pc, #628]	@ (801806c <HAL_RCC_OscConfig+0x504>)
 8017df6:	681b      	ldr	r3, [r3, #0]
 8017df8:	4a9c      	ldr	r2, [pc, #624]	@ (801806c <HAL_RCC_OscConfig+0x504>)
 8017dfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8017dfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	685b      	ldr	r3, [r3, #4]
 8017e04:	2b00      	cmp	r3, #0
 8017e06:	d013      	beq.n	8017e30 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017e08:	f7ff fae0 	bl	80173cc <HAL_GetTick>
 8017e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8017e0e:	e008      	b.n	8017e22 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8017e10:	f7ff fadc 	bl	80173cc <HAL_GetTick>
 8017e14:	4602      	mov	r2, r0
 8017e16:	693b      	ldr	r3, [r7, #16]
 8017e18:	1ad3      	subs	r3, r2, r3
 8017e1a:	2b64      	cmp	r3, #100	@ 0x64
 8017e1c:	d901      	bls.n	8017e22 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8017e1e:	2303      	movs	r3, #3
 8017e20:	e2ae      	b.n	8018380 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8017e22:	4b92      	ldr	r3, [pc, #584]	@ (801806c <HAL_RCC_OscConfig+0x504>)
 8017e24:	681b      	ldr	r3, [r3, #0]
 8017e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	d0f0      	beq.n	8017e10 <HAL_RCC_OscConfig+0x2a8>
 8017e2e:	e014      	b.n	8017e5a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017e30:	f7ff facc 	bl	80173cc <HAL_GetTick>
 8017e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8017e36:	e008      	b.n	8017e4a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8017e38:	f7ff fac8 	bl	80173cc <HAL_GetTick>
 8017e3c:	4602      	mov	r2, r0
 8017e3e:	693b      	ldr	r3, [r7, #16]
 8017e40:	1ad3      	subs	r3, r2, r3
 8017e42:	2b64      	cmp	r3, #100	@ 0x64
 8017e44:	d901      	bls.n	8017e4a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8017e46:	2303      	movs	r3, #3
 8017e48:	e29a      	b.n	8018380 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8017e4a:	4b88      	ldr	r3, [pc, #544]	@ (801806c <HAL_RCC_OscConfig+0x504>)
 8017e4c:	681b      	ldr	r3, [r3, #0]
 8017e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8017e52:	2b00      	cmp	r3, #0
 8017e54:	d1f0      	bne.n	8017e38 <HAL_RCC_OscConfig+0x2d0>
 8017e56:	e000      	b.n	8017e5a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8017e58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	681b      	ldr	r3, [r3, #0]
 8017e5e:	f003 0302 	and.w	r3, r3, #2
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	d060      	beq.n	8017f28 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8017e66:	69bb      	ldr	r3, [r7, #24]
 8017e68:	2b04      	cmp	r3, #4
 8017e6a:	d005      	beq.n	8017e78 <HAL_RCC_OscConfig+0x310>
 8017e6c:	69bb      	ldr	r3, [r7, #24]
 8017e6e:	2b0c      	cmp	r3, #12
 8017e70:	d119      	bne.n	8017ea6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8017e72:	697b      	ldr	r3, [r7, #20]
 8017e74:	2b02      	cmp	r3, #2
 8017e76:	d116      	bne.n	8017ea6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8017e78:	4b7c      	ldr	r3, [pc, #496]	@ (801806c <HAL_RCC_OscConfig+0x504>)
 8017e7a:	681b      	ldr	r3, [r3, #0]
 8017e7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	d005      	beq.n	8017e90 <HAL_RCC_OscConfig+0x328>
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	68db      	ldr	r3, [r3, #12]
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	d101      	bne.n	8017e90 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8017e8c:	2301      	movs	r3, #1
 8017e8e:	e277      	b.n	8018380 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8017e90:	4b76      	ldr	r3, [pc, #472]	@ (801806c <HAL_RCC_OscConfig+0x504>)
 8017e92:	685b      	ldr	r3, [r3, #4]
 8017e94:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8017e98:	687b      	ldr	r3, [r7, #4]
 8017e9a:	691b      	ldr	r3, [r3, #16]
 8017e9c:	061b      	lsls	r3, r3, #24
 8017e9e:	4973      	ldr	r1, [pc, #460]	@ (801806c <HAL_RCC_OscConfig+0x504>)
 8017ea0:	4313      	orrs	r3, r2
 8017ea2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8017ea4:	e040      	b.n	8017f28 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8017ea6:	687b      	ldr	r3, [r7, #4]
 8017ea8:	68db      	ldr	r3, [r3, #12]
 8017eaa:	2b00      	cmp	r3, #0
 8017eac:	d023      	beq.n	8017ef6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8017eae:	4b6f      	ldr	r3, [pc, #444]	@ (801806c <HAL_RCC_OscConfig+0x504>)
 8017eb0:	681b      	ldr	r3, [r3, #0]
 8017eb2:	4a6e      	ldr	r2, [pc, #440]	@ (801806c <HAL_RCC_OscConfig+0x504>)
 8017eb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8017eb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017eba:	f7ff fa87 	bl	80173cc <HAL_GetTick>
 8017ebe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8017ec0:	e008      	b.n	8017ed4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8017ec2:	f7ff fa83 	bl	80173cc <HAL_GetTick>
 8017ec6:	4602      	mov	r2, r0
 8017ec8:	693b      	ldr	r3, [r7, #16]
 8017eca:	1ad3      	subs	r3, r2, r3
 8017ecc:	2b02      	cmp	r3, #2
 8017ece:	d901      	bls.n	8017ed4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8017ed0:	2303      	movs	r3, #3
 8017ed2:	e255      	b.n	8018380 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8017ed4:	4b65      	ldr	r3, [pc, #404]	@ (801806c <HAL_RCC_OscConfig+0x504>)
 8017ed6:	681b      	ldr	r3, [r3, #0]
 8017ed8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	d0f0      	beq.n	8017ec2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8017ee0:	4b62      	ldr	r3, [pc, #392]	@ (801806c <HAL_RCC_OscConfig+0x504>)
 8017ee2:	685b      	ldr	r3, [r3, #4]
 8017ee4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	691b      	ldr	r3, [r3, #16]
 8017eec:	061b      	lsls	r3, r3, #24
 8017eee:	495f      	ldr	r1, [pc, #380]	@ (801806c <HAL_RCC_OscConfig+0x504>)
 8017ef0:	4313      	orrs	r3, r2
 8017ef2:	604b      	str	r3, [r1, #4]
 8017ef4:	e018      	b.n	8017f28 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8017ef6:	4b5d      	ldr	r3, [pc, #372]	@ (801806c <HAL_RCC_OscConfig+0x504>)
 8017ef8:	681b      	ldr	r3, [r3, #0]
 8017efa:	4a5c      	ldr	r2, [pc, #368]	@ (801806c <HAL_RCC_OscConfig+0x504>)
 8017efc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8017f00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017f02:	f7ff fa63 	bl	80173cc <HAL_GetTick>
 8017f06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8017f08:	e008      	b.n	8017f1c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8017f0a:	f7ff fa5f 	bl	80173cc <HAL_GetTick>
 8017f0e:	4602      	mov	r2, r0
 8017f10:	693b      	ldr	r3, [r7, #16]
 8017f12:	1ad3      	subs	r3, r2, r3
 8017f14:	2b02      	cmp	r3, #2
 8017f16:	d901      	bls.n	8017f1c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8017f18:	2303      	movs	r3, #3
 8017f1a:	e231      	b.n	8018380 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8017f1c:	4b53      	ldr	r3, [pc, #332]	@ (801806c <HAL_RCC_OscConfig+0x504>)
 8017f1e:	681b      	ldr	r3, [r3, #0]
 8017f20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8017f24:	2b00      	cmp	r3, #0
 8017f26:	d1f0      	bne.n	8017f0a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	681b      	ldr	r3, [r3, #0]
 8017f2c:	f003 0308 	and.w	r3, r3, #8
 8017f30:	2b00      	cmp	r3, #0
 8017f32:	d03c      	beq.n	8017fae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	695b      	ldr	r3, [r3, #20]
 8017f38:	2b00      	cmp	r3, #0
 8017f3a:	d01c      	beq.n	8017f76 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8017f3c:	4b4b      	ldr	r3, [pc, #300]	@ (801806c <HAL_RCC_OscConfig+0x504>)
 8017f3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8017f42:	4a4a      	ldr	r2, [pc, #296]	@ (801806c <HAL_RCC_OscConfig+0x504>)
 8017f44:	f043 0301 	orr.w	r3, r3, #1
 8017f48:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017f4c:	f7ff fa3e 	bl	80173cc <HAL_GetTick>
 8017f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8017f52:	e008      	b.n	8017f66 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8017f54:	f7ff fa3a 	bl	80173cc <HAL_GetTick>
 8017f58:	4602      	mov	r2, r0
 8017f5a:	693b      	ldr	r3, [r7, #16]
 8017f5c:	1ad3      	subs	r3, r2, r3
 8017f5e:	2b02      	cmp	r3, #2
 8017f60:	d901      	bls.n	8017f66 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8017f62:	2303      	movs	r3, #3
 8017f64:	e20c      	b.n	8018380 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8017f66:	4b41      	ldr	r3, [pc, #260]	@ (801806c <HAL_RCC_OscConfig+0x504>)
 8017f68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8017f6c:	f003 0302 	and.w	r3, r3, #2
 8017f70:	2b00      	cmp	r3, #0
 8017f72:	d0ef      	beq.n	8017f54 <HAL_RCC_OscConfig+0x3ec>
 8017f74:	e01b      	b.n	8017fae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8017f76:	4b3d      	ldr	r3, [pc, #244]	@ (801806c <HAL_RCC_OscConfig+0x504>)
 8017f78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8017f7c:	4a3b      	ldr	r2, [pc, #236]	@ (801806c <HAL_RCC_OscConfig+0x504>)
 8017f7e:	f023 0301 	bic.w	r3, r3, #1
 8017f82:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017f86:	f7ff fa21 	bl	80173cc <HAL_GetTick>
 8017f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8017f8c:	e008      	b.n	8017fa0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8017f8e:	f7ff fa1d 	bl	80173cc <HAL_GetTick>
 8017f92:	4602      	mov	r2, r0
 8017f94:	693b      	ldr	r3, [r7, #16]
 8017f96:	1ad3      	subs	r3, r2, r3
 8017f98:	2b02      	cmp	r3, #2
 8017f9a:	d901      	bls.n	8017fa0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8017f9c:	2303      	movs	r3, #3
 8017f9e:	e1ef      	b.n	8018380 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8017fa0:	4b32      	ldr	r3, [pc, #200]	@ (801806c <HAL_RCC_OscConfig+0x504>)
 8017fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8017fa6:	f003 0302 	and.w	r3, r3, #2
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	d1ef      	bne.n	8017f8e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8017fae:	687b      	ldr	r3, [r7, #4]
 8017fb0:	681b      	ldr	r3, [r3, #0]
 8017fb2:	f003 0304 	and.w	r3, r3, #4
 8017fb6:	2b00      	cmp	r3, #0
 8017fb8:	f000 80a6 	beq.w	8018108 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8017fbc:	2300      	movs	r3, #0
 8017fbe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8017fc0:	4b2a      	ldr	r3, [pc, #168]	@ (801806c <HAL_RCC_OscConfig+0x504>)
 8017fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017fc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8017fc8:	2b00      	cmp	r3, #0
 8017fca:	d10d      	bne.n	8017fe8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8017fcc:	4b27      	ldr	r3, [pc, #156]	@ (801806c <HAL_RCC_OscConfig+0x504>)
 8017fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017fd0:	4a26      	ldr	r2, [pc, #152]	@ (801806c <HAL_RCC_OscConfig+0x504>)
 8017fd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8017fd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8017fd8:	4b24      	ldr	r3, [pc, #144]	@ (801806c <HAL_RCC_OscConfig+0x504>)
 8017fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017fdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8017fe0:	60bb      	str	r3, [r7, #8]
 8017fe2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8017fe4:	2301      	movs	r3, #1
 8017fe6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8017fe8:	4b21      	ldr	r3, [pc, #132]	@ (8018070 <HAL_RCC_OscConfig+0x508>)
 8017fea:	681b      	ldr	r3, [r3, #0]
 8017fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	d118      	bne.n	8018026 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8017ff4:	4b1e      	ldr	r3, [pc, #120]	@ (8018070 <HAL_RCC_OscConfig+0x508>)
 8017ff6:	681b      	ldr	r3, [r3, #0]
 8017ff8:	4a1d      	ldr	r2, [pc, #116]	@ (8018070 <HAL_RCC_OscConfig+0x508>)
 8017ffa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8017ffe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8018000:	f7ff f9e4 	bl	80173cc <HAL_GetTick>
 8018004:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8018006:	e008      	b.n	801801a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8018008:	f7ff f9e0 	bl	80173cc <HAL_GetTick>
 801800c:	4602      	mov	r2, r0
 801800e:	693b      	ldr	r3, [r7, #16]
 8018010:	1ad3      	subs	r3, r2, r3
 8018012:	2b02      	cmp	r3, #2
 8018014:	d901      	bls.n	801801a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8018016:	2303      	movs	r3, #3
 8018018:	e1b2      	b.n	8018380 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801801a:	4b15      	ldr	r3, [pc, #84]	@ (8018070 <HAL_RCC_OscConfig+0x508>)
 801801c:	681b      	ldr	r3, [r3, #0]
 801801e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8018022:	2b00      	cmp	r3, #0
 8018024:	d0f0      	beq.n	8018008 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8018026:	687b      	ldr	r3, [r7, #4]
 8018028:	689b      	ldr	r3, [r3, #8]
 801802a:	2b01      	cmp	r3, #1
 801802c:	d108      	bne.n	8018040 <HAL_RCC_OscConfig+0x4d8>
 801802e:	4b0f      	ldr	r3, [pc, #60]	@ (801806c <HAL_RCC_OscConfig+0x504>)
 8018030:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018034:	4a0d      	ldr	r2, [pc, #52]	@ (801806c <HAL_RCC_OscConfig+0x504>)
 8018036:	f043 0301 	orr.w	r3, r3, #1
 801803a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 801803e:	e029      	b.n	8018094 <HAL_RCC_OscConfig+0x52c>
 8018040:	687b      	ldr	r3, [r7, #4]
 8018042:	689b      	ldr	r3, [r3, #8]
 8018044:	2b05      	cmp	r3, #5
 8018046:	d115      	bne.n	8018074 <HAL_RCC_OscConfig+0x50c>
 8018048:	4b08      	ldr	r3, [pc, #32]	@ (801806c <HAL_RCC_OscConfig+0x504>)
 801804a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801804e:	4a07      	ldr	r2, [pc, #28]	@ (801806c <HAL_RCC_OscConfig+0x504>)
 8018050:	f043 0304 	orr.w	r3, r3, #4
 8018054:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8018058:	4b04      	ldr	r3, [pc, #16]	@ (801806c <HAL_RCC_OscConfig+0x504>)
 801805a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801805e:	4a03      	ldr	r2, [pc, #12]	@ (801806c <HAL_RCC_OscConfig+0x504>)
 8018060:	f043 0301 	orr.w	r3, r3, #1
 8018064:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8018068:	e014      	b.n	8018094 <HAL_RCC_OscConfig+0x52c>
 801806a:	bf00      	nop
 801806c:	40021000 	.word	0x40021000
 8018070:	40007000 	.word	0x40007000
 8018074:	4b9a      	ldr	r3, [pc, #616]	@ (80182e0 <HAL_RCC_OscConfig+0x778>)
 8018076:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801807a:	4a99      	ldr	r2, [pc, #612]	@ (80182e0 <HAL_RCC_OscConfig+0x778>)
 801807c:	f023 0301 	bic.w	r3, r3, #1
 8018080:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8018084:	4b96      	ldr	r3, [pc, #600]	@ (80182e0 <HAL_RCC_OscConfig+0x778>)
 8018086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801808a:	4a95      	ldr	r2, [pc, #596]	@ (80182e0 <HAL_RCC_OscConfig+0x778>)
 801808c:	f023 0304 	bic.w	r3, r3, #4
 8018090:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8018094:	687b      	ldr	r3, [r7, #4]
 8018096:	689b      	ldr	r3, [r3, #8]
 8018098:	2b00      	cmp	r3, #0
 801809a:	d016      	beq.n	80180ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801809c:	f7ff f996 	bl	80173cc <HAL_GetTick>
 80180a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80180a2:	e00a      	b.n	80180ba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80180a4:	f7ff f992 	bl	80173cc <HAL_GetTick>
 80180a8:	4602      	mov	r2, r0
 80180aa:	693b      	ldr	r3, [r7, #16]
 80180ac:	1ad3      	subs	r3, r2, r3
 80180ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80180b2:	4293      	cmp	r3, r2
 80180b4:	d901      	bls.n	80180ba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80180b6:	2303      	movs	r3, #3
 80180b8:	e162      	b.n	8018380 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80180ba:	4b89      	ldr	r3, [pc, #548]	@ (80182e0 <HAL_RCC_OscConfig+0x778>)
 80180bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80180c0:	f003 0302 	and.w	r3, r3, #2
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	d0ed      	beq.n	80180a4 <HAL_RCC_OscConfig+0x53c>
 80180c8:	e015      	b.n	80180f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80180ca:	f7ff f97f 	bl	80173cc <HAL_GetTick>
 80180ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80180d0:	e00a      	b.n	80180e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80180d2:	f7ff f97b 	bl	80173cc <HAL_GetTick>
 80180d6:	4602      	mov	r2, r0
 80180d8:	693b      	ldr	r3, [r7, #16]
 80180da:	1ad3      	subs	r3, r2, r3
 80180dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80180e0:	4293      	cmp	r3, r2
 80180e2:	d901      	bls.n	80180e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80180e4:	2303      	movs	r3, #3
 80180e6:	e14b      	b.n	8018380 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80180e8:	4b7d      	ldr	r3, [pc, #500]	@ (80182e0 <HAL_RCC_OscConfig+0x778>)
 80180ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80180ee:	f003 0302 	and.w	r3, r3, #2
 80180f2:	2b00      	cmp	r3, #0
 80180f4:	d1ed      	bne.n	80180d2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80180f6:	7ffb      	ldrb	r3, [r7, #31]
 80180f8:	2b01      	cmp	r3, #1
 80180fa:	d105      	bne.n	8018108 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80180fc:	4b78      	ldr	r3, [pc, #480]	@ (80182e0 <HAL_RCC_OscConfig+0x778>)
 80180fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018100:	4a77      	ldr	r2, [pc, #476]	@ (80182e0 <HAL_RCC_OscConfig+0x778>)
 8018102:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8018106:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	681b      	ldr	r3, [r3, #0]
 801810c:	f003 0320 	and.w	r3, r3, #32
 8018110:	2b00      	cmp	r3, #0
 8018112:	d03c      	beq.n	801818e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018118:	2b00      	cmp	r3, #0
 801811a:	d01c      	beq.n	8018156 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801811c:	4b70      	ldr	r3, [pc, #448]	@ (80182e0 <HAL_RCC_OscConfig+0x778>)
 801811e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8018122:	4a6f      	ldr	r2, [pc, #444]	@ (80182e0 <HAL_RCC_OscConfig+0x778>)
 8018124:	f043 0301 	orr.w	r3, r3, #1
 8018128:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801812c:	f7ff f94e 	bl	80173cc <HAL_GetTick>
 8018130:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8018132:	e008      	b.n	8018146 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8018134:	f7ff f94a 	bl	80173cc <HAL_GetTick>
 8018138:	4602      	mov	r2, r0
 801813a:	693b      	ldr	r3, [r7, #16]
 801813c:	1ad3      	subs	r3, r2, r3
 801813e:	2b02      	cmp	r3, #2
 8018140:	d901      	bls.n	8018146 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8018142:	2303      	movs	r3, #3
 8018144:	e11c      	b.n	8018380 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8018146:	4b66      	ldr	r3, [pc, #408]	@ (80182e0 <HAL_RCC_OscConfig+0x778>)
 8018148:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801814c:	f003 0302 	and.w	r3, r3, #2
 8018150:	2b00      	cmp	r3, #0
 8018152:	d0ef      	beq.n	8018134 <HAL_RCC_OscConfig+0x5cc>
 8018154:	e01b      	b.n	801818e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8018156:	4b62      	ldr	r3, [pc, #392]	@ (80182e0 <HAL_RCC_OscConfig+0x778>)
 8018158:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801815c:	4a60      	ldr	r2, [pc, #384]	@ (80182e0 <HAL_RCC_OscConfig+0x778>)
 801815e:	f023 0301 	bic.w	r3, r3, #1
 8018162:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018166:	f7ff f931 	bl	80173cc <HAL_GetTick>
 801816a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801816c:	e008      	b.n	8018180 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801816e:	f7ff f92d 	bl	80173cc <HAL_GetTick>
 8018172:	4602      	mov	r2, r0
 8018174:	693b      	ldr	r3, [r7, #16]
 8018176:	1ad3      	subs	r3, r2, r3
 8018178:	2b02      	cmp	r3, #2
 801817a:	d901      	bls.n	8018180 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 801817c:	2303      	movs	r3, #3
 801817e:	e0ff      	b.n	8018380 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8018180:	4b57      	ldr	r3, [pc, #348]	@ (80182e0 <HAL_RCC_OscConfig+0x778>)
 8018182:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8018186:	f003 0302 	and.w	r3, r3, #2
 801818a:	2b00      	cmp	r3, #0
 801818c:	d1ef      	bne.n	801816e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801818e:	687b      	ldr	r3, [r7, #4]
 8018190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018192:	2b00      	cmp	r3, #0
 8018194:	f000 80f3 	beq.w	801837e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801819c:	2b02      	cmp	r3, #2
 801819e:	f040 80c9 	bne.w	8018334 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80181a2:	4b4f      	ldr	r3, [pc, #316]	@ (80182e0 <HAL_RCC_OscConfig+0x778>)
 80181a4:	68db      	ldr	r3, [r3, #12]
 80181a6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80181a8:	697b      	ldr	r3, [r7, #20]
 80181aa:	f003 0203 	and.w	r2, r3, #3
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80181b2:	429a      	cmp	r2, r3
 80181b4:	d12c      	bne.n	8018210 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80181b6:	697b      	ldr	r3, [r7, #20]
 80181b8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80181c0:	3b01      	subs	r3, #1
 80181c2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80181c4:	429a      	cmp	r2, r3
 80181c6:	d123      	bne.n	8018210 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80181c8:	697b      	ldr	r3, [r7, #20]
 80181ca:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80181d2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80181d4:	429a      	cmp	r2, r3
 80181d6:	d11b      	bne.n	8018210 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80181d8:	697b      	ldr	r3, [r7, #20]
 80181da:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80181e2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80181e4:	429a      	cmp	r2, r3
 80181e6:	d113      	bne.n	8018210 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80181e8:	697b      	ldr	r3, [r7, #20]
 80181ea:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80181f2:	085b      	lsrs	r3, r3, #1
 80181f4:	3b01      	subs	r3, #1
 80181f6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80181f8:	429a      	cmp	r2, r3
 80181fa:	d109      	bne.n	8018210 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80181fc:	697b      	ldr	r3, [r7, #20]
 80181fe:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018206:	085b      	lsrs	r3, r3, #1
 8018208:	3b01      	subs	r3, #1
 801820a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801820c:	429a      	cmp	r2, r3
 801820e:	d06b      	beq.n	80182e8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8018210:	69bb      	ldr	r3, [r7, #24]
 8018212:	2b0c      	cmp	r3, #12
 8018214:	d062      	beq.n	80182dc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8018216:	4b32      	ldr	r3, [pc, #200]	@ (80182e0 <HAL_RCC_OscConfig+0x778>)
 8018218:	681b      	ldr	r3, [r3, #0]
 801821a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801821e:	2b00      	cmp	r3, #0
 8018220:	d001      	beq.n	8018226 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8018222:	2301      	movs	r3, #1
 8018224:	e0ac      	b.n	8018380 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8018226:	4b2e      	ldr	r3, [pc, #184]	@ (80182e0 <HAL_RCC_OscConfig+0x778>)
 8018228:	681b      	ldr	r3, [r3, #0]
 801822a:	4a2d      	ldr	r2, [pc, #180]	@ (80182e0 <HAL_RCC_OscConfig+0x778>)
 801822c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8018230:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8018232:	f7ff f8cb 	bl	80173cc <HAL_GetTick>
 8018236:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8018238:	e008      	b.n	801824c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801823a:	f7ff f8c7 	bl	80173cc <HAL_GetTick>
 801823e:	4602      	mov	r2, r0
 8018240:	693b      	ldr	r3, [r7, #16]
 8018242:	1ad3      	subs	r3, r2, r3
 8018244:	2b02      	cmp	r3, #2
 8018246:	d901      	bls.n	801824c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8018248:	2303      	movs	r3, #3
 801824a:	e099      	b.n	8018380 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801824c:	4b24      	ldr	r3, [pc, #144]	@ (80182e0 <HAL_RCC_OscConfig+0x778>)
 801824e:	681b      	ldr	r3, [r3, #0]
 8018250:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8018254:	2b00      	cmp	r3, #0
 8018256:	d1f0      	bne.n	801823a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8018258:	4b21      	ldr	r3, [pc, #132]	@ (80182e0 <HAL_RCC_OscConfig+0x778>)
 801825a:	68da      	ldr	r2, [r3, #12]
 801825c:	4b21      	ldr	r3, [pc, #132]	@ (80182e4 <HAL_RCC_OscConfig+0x77c>)
 801825e:	4013      	ands	r3, r2
 8018260:	687a      	ldr	r2, [r7, #4]
 8018262:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8018264:	687a      	ldr	r2, [r7, #4]
 8018266:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8018268:	3a01      	subs	r2, #1
 801826a:	0112      	lsls	r2, r2, #4
 801826c:	4311      	orrs	r1, r2
 801826e:	687a      	ldr	r2, [r7, #4]
 8018270:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8018272:	0212      	lsls	r2, r2, #8
 8018274:	4311      	orrs	r1, r2
 8018276:	687a      	ldr	r2, [r7, #4]
 8018278:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 801827a:	0852      	lsrs	r2, r2, #1
 801827c:	3a01      	subs	r2, #1
 801827e:	0552      	lsls	r2, r2, #21
 8018280:	4311      	orrs	r1, r2
 8018282:	687a      	ldr	r2, [r7, #4]
 8018284:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8018286:	0852      	lsrs	r2, r2, #1
 8018288:	3a01      	subs	r2, #1
 801828a:	0652      	lsls	r2, r2, #25
 801828c:	4311      	orrs	r1, r2
 801828e:	687a      	ldr	r2, [r7, #4]
 8018290:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8018292:	06d2      	lsls	r2, r2, #27
 8018294:	430a      	orrs	r2, r1
 8018296:	4912      	ldr	r1, [pc, #72]	@ (80182e0 <HAL_RCC_OscConfig+0x778>)
 8018298:	4313      	orrs	r3, r2
 801829a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 801829c:	4b10      	ldr	r3, [pc, #64]	@ (80182e0 <HAL_RCC_OscConfig+0x778>)
 801829e:	681b      	ldr	r3, [r3, #0]
 80182a0:	4a0f      	ldr	r2, [pc, #60]	@ (80182e0 <HAL_RCC_OscConfig+0x778>)
 80182a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80182a6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80182a8:	4b0d      	ldr	r3, [pc, #52]	@ (80182e0 <HAL_RCC_OscConfig+0x778>)
 80182aa:	68db      	ldr	r3, [r3, #12]
 80182ac:	4a0c      	ldr	r2, [pc, #48]	@ (80182e0 <HAL_RCC_OscConfig+0x778>)
 80182ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80182b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80182b4:	f7ff f88a 	bl	80173cc <HAL_GetTick>
 80182b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80182ba:	e008      	b.n	80182ce <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80182bc:	f7ff f886 	bl	80173cc <HAL_GetTick>
 80182c0:	4602      	mov	r2, r0
 80182c2:	693b      	ldr	r3, [r7, #16]
 80182c4:	1ad3      	subs	r3, r2, r3
 80182c6:	2b02      	cmp	r3, #2
 80182c8:	d901      	bls.n	80182ce <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80182ca:	2303      	movs	r3, #3
 80182cc:	e058      	b.n	8018380 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80182ce:	4b04      	ldr	r3, [pc, #16]	@ (80182e0 <HAL_RCC_OscConfig+0x778>)
 80182d0:	681b      	ldr	r3, [r3, #0]
 80182d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80182d6:	2b00      	cmp	r3, #0
 80182d8:	d0f0      	beq.n	80182bc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80182da:	e050      	b.n	801837e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80182dc:	2301      	movs	r3, #1
 80182de:	e04f      	b.n	8018380 <HAL_RCC_OscConfig+0x818>
 80182e0:	40021000 	.word	0x40021000
 80182e4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80182e8:	4b27      	ldr	r3, [pc, #156]	@ (8018388 <HAL_RCC_OscConfig+0x820>)
 80182ea:	681b      	ldr	r3, [r3, #0]
 80182ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	d144      	bne.n	801837e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80182f4:	4b24      	ldr	r3, [pc, #144]	@ (8018388 <HAL_RCC_OscConfig+0x820>)
 80182f6:	681b      	ldr	r3, [r3, #0]
 80182f8:	4a23      	ldr	r2, [pc, #140]	@ (8018388 <HAL_RCC_OscConfig+0x820>)
 80182fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80182fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8018300:	4b21      	ldr	r3, [pc, #132]	@ (8018388 <HAL_RCC_OscConfig+0x820>)
 8018302:	68db      	ldr	r3, [r3, #12]
 8018304:	4a20      	ldr	r2, [pc, #128]	@ (8018388 <HAL_RCC_OscConfig+0x820>)
 8018306:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801830a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801830c:	f7ff f85e 	bl	80173cc <HAL_GetTick>
 8018310:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8018312:	e008      	b.n	8018326 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8018314:	f7ff f85a 	bl	80173cc <HAL_GetTick>
 8018318:	4602      	mov	r2, r0
 801831a:	693b      	ldr	r3, [r7, #16]
 801831c:	1ad3      	subs	r3, r2, r3
 801831e:	2b02      	cmp	r3, #2
 8018320:	d901      	bls.n	8018326 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8018322:	2303      	movs	r3, #3
 8018324:	e02c      	b.n	8018380 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8018326:	4b18      	ldr	r3, [pc, #96]	@ (8018388 <HAL_RCC_OscConfig+0x820>)
 8018328:	681b      	ldr	r3, [r3, #0]
 801832a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801832e:	2b00      	cmp	r3, #0
 8018330:	d0f0      	beq.n	8018314 <HAL_RCC_OscConfig+0x7ac>
 8018332:	e024      	b.n	801837e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8018334:	69bb      	ldr	r3, [r7, #24]
 8018336:	2b0c      	cmp	r3, #12
 8018338:	d01f      	beq.n	801837a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801833a:	4b13      	ldr	r3, [pc, #76]	@ (8018388 <HAL_RCC_OscConfig+0x820>)
 801833c:	681b      	ldr	r3, [r3, #0]
 801833e:	4a12      	ldr	r2, [pc, #72]	@ (8018388 <HAL_RCC_OscConfig+0x820>)
 8018340:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8018344:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018346:	f7ff f841 	bl	80173cc <HAL_GetTick>
 801834a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801834c:	e008      	b.n	8018360 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801834e:	f7ff f83d 	bl	80173cc <HAL_GetTick>
 8018352:	4602      	mov	r2, r0
 8018354:	693b      	ldr	r3, [r7, #16]
 8018356:	1ad3      	subs	r3, r2, r3
 8018358:	2b02      	cmp	r3, #2
 801835a:	d901      	bls.n	8018360 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 801835c:	2303      	movs	r3, #3
 801835e:	e00f      	b.n	8018380 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8018360:	4b09      	ldr	r3, [pc, #36]	@ (8018388 <HAL_RCC_OscConfig+0x820>)
 8018362:	681b      	ldr	r3, [r3, #0]
 8018364:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8018368:	2b00      	cmp	r3, #0
 801836a:	d1f0      	bne.n	801834e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 801836c:	4b06      	ldr	r3, [pc, #24]	@ (8018388 <HAL_RCC_OscConfig+0x820>)
 801836e:	68da      	ldr	r2, [r3, #12]
 8018370:	4905      	ldr	r1, [pc, #20]	@ (8018388 <HAL_RCC_OscConfig+0x820>)
 8018372:	4b06      	ldr	r3, [pc, #24]	@ (801838c <HAL_RCC_OscConfig+0x824>)
 8018374:	4013      	ands	r3, r2
 8018376:	60cb      	str	r3, [r1, #12]
 8018378:	e001      	b.n	801837e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 801837a:	2301      	movs	r3, #1
 801837c:	e000      	b.n	8018380 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 801837e:	2300      	movs	r3, #0
}
 8018380:	4618      	mov	r0, r3
 8018382:	3720      	adds	r7, #32
 8018384:	46bd      	mov	sp, r7
 8018386:	bd80      	pop	{r7, pc}
 8018388:	40021000 	.word	0x40021000
 801838c:	feeefffc 	.word	0xfeeefffc

08018390 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8018390:	b580      	push	{r7, lr}
 8018392:	b084      	sub	sp, #16
 8018394:	af00      	add	r7, sp, #0
 8018396:	6078      	str	r0, [r7, #4]
 8018398:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	2b00      	cmp	r3, #0
 801839e:	d101      	bne.n	80183a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80183a0:	2301      	movs	r3, #1
 80183a2:	e0e7      	b.n	8018574 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80183a4:	4b75      	ldr	r3, [pc, #468]	@ (801857c <HAL_RCC_ClockConfig+0x1ec>)
 80183a6:	681b      	ldr	r3, [r3, #0]
 80183a8:	f003 0307 	and.w	r3, r3, #7
 80183ac:	683a      	ldr	r2, [r7, #0]
 80183ae:	429a      	cmp	r2, r3
 80183b0:	d910      	bls.n	80183d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80183b2:	4b72      	ldr	r3, [pc, #456]	@ (801857c <HAL_RCC_ClockConfig+0x1ec>)
 80183b4:	681b      	ldr	r3, [r3, #0]
 80183b6:	f023 0207 	bic.w	r2, r3, #7
 80183ba:	4970      	ldr	r1, [pc, #448]	@ (801857c <HAL_RCC_ClockConfig+0x1ec>)
 80183bc:	683b      	ldr	r3, [r7, #0]
 80183be:	4313      	orrs	r3, r2
 80183c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80183c2:	4b6e      	ldr	r3, [pc, #440]	@ (801857c <HAL_RCC_ClockConfig+0x1ec>)
 80183c4:	681b      	ldr	r3, [r3, #0]
 80183c6:	f003 0307 	and.w	r3, r3, #7
 80183ca:	683a      	ldr	r2, [r7, #0]
 80183cc:	429a      	cmp	r2, r3
 80183ce:	d001      	beq.n	80183d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80183d0:	2301      	movs	r3, #1
 80183d2:	e0cf      	b.n	8018574 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	681b      	ldr	r3, [r3, #0]
 80183d8:	f003 0302 	and.w	r3, r3, #2
 80183dc:	2b00      	cmp	r3, #0
 80183de:	d010      	beq.n	8018402 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	689a      	ldr	r2, [r3, #8]
 80183e4:	4b66      	ldr	r3, [pc, #408]	@ (8018580 <HAL_RCC_ClockConfig+0x1f0>)
 80183e6:	689b      	ldr	r3, [r3, #8]
 80183e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80183ec:	429a      	cmp	r2, r3
 80183ee:	d908      	bls.n	8018402 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80183f0:	4b63      	ldr	r3, [pc, #396]	@ (8018580 <HAL_RCC_ClockConfig+0x1f0>)
 80183f2:	689b      	ldr	r3, [r3, #8]
 80183f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	689b      	ldr	r3, [r3, #8]
 80183fc:	4960      	ldr	r1, [pc, #384]	@ (8018580 <HAL_RCC_ClockConfig+0x1f0>)
 80183fe:	4313      	orrs	r3, r2
 8018400:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8018402:	687b      	ldr	r3, [r7, #4]
 8018404:	681b      	ldr	r3, [r3, #0]
 8018406:	f003 0301 	and.w	r3, r3, #1
 801840a:	2b00      	cmp	r3, #0
 801840c:	d04c      	beq.n	80184a8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801840e:	687b      	ldr	r3, [r7, #4]
 8018410:	685b      	ldr	r3, [r3, #4]
 8018412:	2b03      	cmp	r3, #3
 8018414:	d107      	bne.n	8018426 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8018416:	4b5a      	ldr	r3, [pc, #360]	@ (8018580 <HAL_RCC_ClockConfig+0x1f0>)
 8018418:	681b      	ldr	r3, [r3, #0]
 801841a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801841e:	2b00      	cmp	r3, #0
 8018420:	d121      	bne.n	8018466 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8018422:	2301      	movs	r3, #1
 8018424:	e0a6      	b.n	8018574 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8018426:	687b      	ldr	r3, [r7, #4]
 8018428:	685b      	ldr	r3, [r3, #4]
 801842a:	2b02      	cmp	r3, #2
 801842c:	d107      	bne.n	801843e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801842e:	4b54      	ldr	r3, [pc, #336]	@ (8018580 <HAL_RCC_ClockConfig+0x1f0>)
 8018430:	681b      	ldr	r3, [r3, #0]
 8018432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8018436:	2b00      	cmp	r3, #0
 8018438:	d115      	bne.n	8018466 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 801843a:	2301      	movs	r3, #1
 801843c:	e09a      	b.n	8018574 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 801843e:	687b      	ldr	r3, [r7, #4]
 8018440:	685b      	ldr	r3, [r3, #4]
 8018442:	2b00      	cmp	r3, #0
 8018444:	d107      	bne.n	8018456 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8018446:	4b4e      	ldr	r3, [pc, #312]	@ (8018580 <HAL_RCC_ClockConfig+0x1f0>)
 8018448:	681b      	ldr	r3, [r3, #0]
 801844a:	f003 0302 	and.w	r3, r3, #2
 801844e:	2b00      	cmp	r3, #0
 8018450:	d109      	bne.n	8018466 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8018452:	2301      	movs	r3, #1
 8018454:	e08e      	b.n	8018574 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8018456:	4b4a      	ldr	r3, [pc, #296]	@ (8018580 <HAL_RCC_ClockConfig+0x1f0>)
 8018458:	681b      	ldr	r3, [r3, #0]
 801845a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801845e:	2b00      	cmp	r3, #0
 8018460:	d101      	bne.n	8018466 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8018462:	2301      	movs	r3, #1
 8018464:	e086      	b.n	8018574 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8018466:	4b46      	ldr	r3, [pc, #280]	@ (8018580 <HAL_RCC_ClockConfig+0x1f0>)
 8018468:	689b      	ldr	r3, [r3, #8]
 801846a:	f023 0203 	bic.w	r2, r3, #3
 801846e:	687b      	ldr	r3, [r7, #4]
 8018470:	685b      	ldr	r3, [r3, #4]
 8018472:	4943      	ldr	r1, [pc, #268]	@ (8018580 <HAL_RCC_ClockConfig+0x1f0>)
 8018474:	4313      	orrs	r3, r2
 8018476:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8018478:	f7fe ffa8 	bl	80173cc <HAL_GetTick>
 801847c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801847e:	e00a      	b.n	8018496 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8018480:	f7fe ffa4 	bl	80173cc <HAL_GetTick>
 8018484:	4602      	mov	r2, r0
 8018486:	68fb      	ldr	r3, [r7, #12]
 8018488:	1ad3      	subs	r3, r2, r3
 801848a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801848e:	4293      	cmp	r3, r2
 8018490:	d901      	bls.n	8018496 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8018492:	2303      	movs	r3, #3
 8018494:	e06e      	b.n	8018574 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8018496:	4b3a      	ldr	r3, [pc, #232]	@ (8018580 <HAL_RCC_ClockConfig+0x1f0>)
 8018498:	689b      	ldr	r3, [r3, #8]
 801849a:	f003 020c 	and.w	r2, r3, #12
 801849e:	687b      	ldr	r3, [r7, #4]
 80184a0:	685b      	ldr	r3, [r3, #4]
 80184a2:	009b      	lsls	r3, r3, #2
 80184a4:	429a      	cmp	r2, r3
 80184a6:	d1eb      	bne.n	8018480 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80184a8:	687b      	ldr	r3, [r7, #4]
 80184aa:	681b      	ldr	r3, [r3, #0]
 80184ac:	f003 0302 	and.w	r3, r3, #2
 80184b0:	2b00      	cmp	r3, #0
 80184b2:	d010      	beq.n	80184d6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80184b4:	687b      	ldr	r3, [r7, #4]
 80184b6:	689a      	ldr	r2, [r3, #8]
 80184b8:	4b31      	ldr	r3, [pc, #196]	@ (8018580 <HAL_RCC_ClockConfig+0x1f0>)
 80184ba:	689b      	ldr	r3, [r3, #8]
 80184bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80184c0:	429a      	cmp	r2, r3
 80184c2:	d208      	bcs.n	80184d6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80184c4:	4b2e      	ldr	r3, [pc, #184]	@ (8018580 <HAL_RCC_ClockConfig+0x1f0>)
 80184c6:	689b      	ldr	r3, [r3, #8]
 80184c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	689b      	ldr	r3, [r3, #8]
 80184d0:	492b      	ldr	r1, [pc, #172]	@ (8018580 <HAL_RCC_ClockConfig+0x1f0>)
 80184d2:	4313      	orrs	r3, r2
 80184d4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80184d6:	4b29      	ldr	r3, [pc, #164]	@ (801857c <HAL_RCC_ClockConfig+0x1ec>)
 80184d8:	681b      	ldr	r3, [r3, #0]
 80184da:	f003 0307 	and.w	r3, r3, #7
 80184de:	683a      	ldr	r2, [r7, #0]
 80184e0:	429a      	cmp	r2, r3
 80184e2:	d210      	bcs.n	8018506 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80184e4:	4b25      	ldr	r3, [pc, #148]	@ (801857c <HAL_RCC_ClockConfig+0x1ec>)
 80184e6:	681b      	ldr	r3, [r3, #0]
 80184e8:	f023 0207 	bic.w	r2, r3, #7
 80184ec:	4923      	ldr	r1, [pc, #140]	@ (801857c <HAL_RCC_ClockConfig+0x1ec>)
 80184ee:	683b      	ldr	r3, [r7, #0]
 80184f0:	4313      	orrs	r3, r2
 80184f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80184f4:	4b21      	ldr	r3, [pc, #132]	@ (801857c <HAL_RCC_ClockConfig+0x1ec>)
 80184f6:	681b      	ldr	r3, [r3, #0]
 80184f8:	f003 0307 	and.w	r3, r3, #7
 80184fc:	683a      	ldr	r2, [r7, #0]
 80184fe:	429a      	cmp	r2, r3
 8018500:	d001      	beq.n	8018506 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8018502:	2301      	movs	r3, #1
 8018504:	e036      	b.n	8018574 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	681b      	ldr	r3, [r3, #0]
 801850a:	f003 0304 	and.w	r3, r3, #4
 801850e:	2b00      	cmp	r3, #0
 8018510:	d008      	beq.n	8018524 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8018512:	4b1b      	ldr	r3, [pc, #108]	@ (8018580 <HAL_RCC_ClockConfig+0x1f0>)
 8018514:	689b      	ldr	r3, [r3, #8]
 8018516:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801851a:	687b      	ldr	r3, [r7, #4]
 801851c:	68db      	ldr	r3, [r3, #12]
 801851e:	4918      	ldr	r1, [pc, #96]	@ (8018580 <HAL_RCC_ClockConfig+0x1f0>)
 8018520:	4313      	orrs	r3, r2
 8018522:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8018524:	687b      	ldr	r3, [r7, #4]
 8018526:	681b      	ldr	r3, [r3, #0]
 8018528:	f003 0308 	and.w	r3, r3, #8
 801852c:	2b00      	cmp	r3, #0
 801852e:	d009      	beq.n	8018544 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8018530:	4b13      	ldr	r3, [pc, #76]	@ (8018580 <HAL_RCC_ClockConfig+0x1f0>)
 8018532:	689b      	ldr	r3, [r3, #8]
 8018534:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	691b      	ldr	r3, [r3, #16]
 801853c:	00db      	lsls	r3, r3, #3
 801853e:	4910      	ldr	r1, [pc, #64]	@ (8018580 <HAL_RCC_ClockConfig+0x1f0>)
 8018540:	4313      	orrs	r3, r2
 8018542:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8018544:	f000 f824 	bl	8018590 <HAL_RCC_GetSysClockFreq>
 8018548:	4602      	mov	r2, r0
 801854a:	4b0d      	ldr	r3, [pc, #52]	@ (8018580 <HAL_RCC_ClockConfig+0x1f0>)
 801854c:	689b      	ldr	r3, [r3, #8]
 801854e:	091b      	lsrs	r3, r3, #4
 8018550:	f003 030f 	and.w	r3, r3, #15
 8018554:	490b      	ldr	r1, [pc, #44]	@ (8018584 <HAL_RCC_ClockConfig+0x1f4>)
 8018556:	5ccb      	ldrb	r3, [r1, r3]
 8018558:	f003 031f 	and.w	r3, r3, #31
 801855c:	fa22 f303 	lsr.w	r3, r2, r3
 8018560:	4a09      	ldr	r2, [pc, #36]	@ (8018588 <HAL_RCC_ClockConfig+0x1f8>)
 8018562:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8018564:	4b09      	ldr	r3, [pc, #36]	@ (801858c <HAL_RCC_ClockConfig+0x1fc>)
 8018566:	681b      	ldr	r3, [r3, #0]
 8018568:	4618      	mov	r0, r3
 801856a:	f7fe fedf 	bl	801732c <HAL_InitTick>
 801856e:	4603      	mov	r3, r0
 8018570:	72fb      	strb	r3, [r7, #11]

  return status;
 8018572:	7afb      	ldrb	r3, [r7, #11]
}
 8018574:	4618      	mov	r0, r3
 8018576:	3710      	adds	r7, #16
 8018578:	46bd      	mov	sp, r7
 801857a:	bd80      	pop	{r7, pc}
 801857c:	40022000 	.word	0x40022000
 8018580:	40021000 	.word	0x40021000
 8018584:	0801f998 	.word	0x0801f998
 8018588:	20000004 	.word	0x20000004
 801858c:	20000018 	.word	0x20000018

08018590 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8018590:	b480      	push	{r7}
 8018592:	b089      	sub	sp, #36	@ 0x24
 8018594:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8018596:	2300      	movs	r3, #0
 8018598:	61fb      	str	r3, [r7, #28]
 801859a:	2300      	movs	r3, #0
 801859c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801859e:	4b3e      	ldr	r3, [pc, #248]	@ (8018698 <HAL_RCC_GetSysClockFreq+0x108>)
 80185a0:	689b      	ldr	r3, [r3, #8]
 80185a2:	f003 030c 	and.w	r3, r3, #12
 80185a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80185a8:	4b3b      	ldr	r3, [pc, #236]	@ (8018698 <HAL_RCC_GetSysClockFreq+0x108>)
 80185aa:	68db      	ldr	r3, [r3, #12]
 80185ac:	f003 0303 	and.w	r3, r3, #3
 80185b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80185b2:	693b      	ldr	r3, [r7, #16]
 80185b4:	2b00      	cmp	r3, #0
 80185b6:	d005      	beq.n	80185c4 <HAL_RCC_GetSysClockFreq+0x34>
 80185b8:	693b      	ldr	r3, [r7, #16]
 80185ba:	2b0c      	cmp	r3, #12
 80185bc:	d121      	bne.n	8018602 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80185be:	68fb      	ldr	r3, [r7, #12]
 80185c0:	2b01      	cmp	r3, #1
 80185c2:	d11e      	bne.n	8018602 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80185c4:	4b34      	ldr	r3, [pc, #208]	@ (8018698 <HAL_RCC_GetSysClockFreq+0x108>)
 80185c6:	681b      	ldr	r3, [r3, #0]
 80185c8:	f003 0308 	and.w	r3, r3, #8
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	d107      	bne.n	80185e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80185d0:	4b31      	ldr	r3, [pc, #196]	@ (8018698 <HAL_RCC_GetSysClockFreq+0x108>)
 80185d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80185d6:	0a1b      	lsrs	r3, r3, #8
 80185d8:	f003 030f 	and.w	r3, r3, #15
 80185dc:	61fb      	str	r3, [r7, #28]
 80185de:	e005      	b.n	80185ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80185e0:	4b2d      	ldr	r3, [pc, #180]	@ (8018698 <HAL_RCC_GetSysClockFreq+0x108>)
 80185e2:	681b      	ldr	r3, [r3, #0]
 80185e4:	091b      	lsrs	r3, r3, #4
 80185e6:	f003 030f 	and.w	r3, r3, #15
 80185ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80185ec:	4a2b      	ldr	r2, [pc, #172]	@ (801869c <HAL_RCC_GetSysClockFreq+0x10c>)
 80185ee:	69fb      	ldr	r3, [r7, #28]
 80185f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80185f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80185f6:	693b      	ldr	r3, [r7, #16]
 80185f8:	2b00      	cmp	r3, #0
 80185fa:	d10d      	bne.n	8018618 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80185fc:	69fb      	ldr	r3, [r7, #28]
 80185fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8018600:	e00a      	b.n	8018618 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8018602:	693b      	ldr	r3, [r7, #16]
 8018604:	2b04      	cmp	r3, #4
 8018606:	d102      	bne.n	801860e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8018608:	4b25      	ldr	r3, [pc, #148]	@ (80186a0 <HAL_RCC_GetSysClockFreq+0x110>)
 801860a:	61bb      	str	r3, [r7, #24]
 801860c:	e004      	b.n	8018618 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 801860e:	693b      	ldr	r3, [r7, #16]
 8018610:	2b08      	cmp	r3, #8
 8018612:	d101      	bne.n	8018618 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8018614:	4b23      	ldr	r3, [pc, #140]	@ (80186a4 <HAL_RCC_GetSysClockFreq+0x114>)
 8018616:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8018618:	693b      	ldr	r3, [r7, #16]
 801861a:	2b0c      	cmp	r3, #12
 801861c:	d134      	bne.n	8018688 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801861e:	4b1e      	ldr	r3, [pc, #120]	@ (8018698 <HAL_RCC_GetSysClockFreq+0x108>)
 8018620:	68db      	ldr	r3, [r3, #12]
 8018622:	f003 0303 	and.w	r3, r3, #3
 8018626:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8018628:	68bb      	ldr	r3, [r7, #8]
 801862a:	2b02      	cmp	r3, #2
 801862c:	d003      	beq.n	8018636 <HAL_RCC_GetSysClockFreq+0xa6>
 801862e:	68bb      	ldr	r3, [r7, #8]
 8018630:	2b03      	cmp	r3, #3
 8018632:	d003      	beq.n	801863c <HAL_RCC_GetSysClockFreq+0xac>
 8018634:	e005      	b.n	8018642 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8018636:	4b1a      	ldr	r3, [pc, #104]	@ (80186a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8018638:	617b      	str	r3, [r7, #20]
      break;
 801863a:	e005      	b.n	8018648 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 801863c:	4b19      	ldr	r3, [pc, #100]	@ (80186a4 <HAL_RCC_GetSysClockFreq+0x114>)
 801863e:	617b      	str	r3, [r7, #20]
      break;
 8018640:	e002      	b.n	8018648 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8018642:	69fb      	ldr	r3, [r7, #28]
 8018644:	617b      	str	r3, [r7, #20]
      break;
 8018646:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8018648:	4b13      	ldr	r3, [pc, #76]	@ (8018698 <HAL_RCC_GetSysClockFreq+0x108>)
 801864a:	68db      	ldr	r3, [r3, #12]
 801864c:	091b      	lsrs	r3, r3, #4
 801864e:	f003 0307 	and.w	r3, r3, #7
 8018652:	3301      	adds	r3, #1
 8018654:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8018656:	4b10      	ldr	r3, [pc, #64]	@ (8018698 <HAL_RCC_GetSysClockFreq+0x108>)
 8018658:	68db      	ldr	r3, [r3, #12]
 801865a:	0a1b      	lsrs	r3, r3, #8
 801865c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018660:	697a      	ldr	r2, [r7, #20]
 8018662:	fb03 f202 	mul.w	r2, r3, r2
 8018666:	687b      	ldr	r3, [r7, #4]
 8018668:	fbb2 f3f3 	udiv	r3, r2, r3
 801866c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801866e:	4b0a      	ldr	r3, [pc, #40]	@ (8018698 <HAL_RCC_GetSysClockFreq+0x108>)
 8018670:	68db      	ldr	r3, [r3, #12]
 8018672:	0e5b      	lsrs	r3, r3, #25
 8018674:	f003 0303 	and.w	r3, r3, #3
 8018678:	3301      	adds	r3, #1
 801867a:	005b      	lsls	r3, r3, #1
 801867c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 801867e:	697a      	ldr	r2, [r7, #20]
 8018680:	683b      	ldr	r3, [r7, #0]
 8018682:	fbb2 f3f3 	udiv	r3, r2, r3
 8018686:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8018688:	69bb      	ldr	r3, [r7, #24]
}
 801868a:	4618      	mov	r0, r3
 801868c:	3724      	adds	r7, #36	@ 0x24
 801868e:	46bd      	mov	sp, r7
 8018690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018694:	4770      	bx	lr
 8018696:	bf00      	nop
 8018698:	40021000 	.word	0x40021000
 801869c:	0801f9b0 	.word	0x0801f9b0
 80186a0:	00f42400 	.word	0x00f42400
 80186a4:	007a1200 	.word	0x007a1200

080186a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80186a8:	b480      	push	{r7}
 80186aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80186ac:	4b03      	ldr	r3, [pc, #12]	@ (80186bc <HAL_RCC_GetHCLKFreq+0x14>)
 80186ae:	681b      	ldr	r3, [r3, #0]
}
 80186b0:	4618      	mov	r0, r3
 80186b2:	46bd      	mov	sp, r7
 80186b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186b8:	4770      	bx	lr
 80186ba:	bf00      	nop
 80186bc:	20000004 	.word	0x20000004

080186c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80186c0:	b580      	push	{r7, lr}
 80186c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80186c4:	f7ff fff0 	bl	80186a8 <HAL_RCC_GetHCLKFreq>
 80186c8:	4602      	mov	r2, r0
 80186ca:	4b06      	ldr	r3, [pc, #24]	@ (80186e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80186cc:	689b      	ldr	r3, [r3, #8]
 80186ce:	0a1b      	lsrs	r3, r3, #8
 80186d0:	f003 0307 	and.w	r3, r3, #7
 80186d4:	4904      	ldr	r1, [pc, #16]	@ (80186e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80186d6:	5ccb      	ldrb	r3, [r1, r3]
 80186d8:	f003 031f 	and.w	r3, r3, #31
 80186dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80186e0:	4618      	mov	r0, r3
 80186e2:	bd80      	pop	{r7, pc}
 80186e4:	40021000 	.word	0x40021000
 80186e8:	0801f9a8 	.word	0x0801f9a8

080186ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80186ec:	b580      	push	{r7, lr}
 80186ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80186f0:	f7ff ffda 	bl	80186a8 <HAL_RCC_GetHCLKFreq>
 80186f4:	4602      	mov	r2, r0
 80186f6:	4b06      	ldr	r3, [pc, #24]	@ (8018710 <HAL_RCC_GetPCLK2Freq+0x24>)
 80186f8:	689b      	ldr	r3, [r3, #8]
 80186fa:	0adb      	lsrs	r3, r3, #11
 80186fc:	f003 0307 	and.w	r3, r3, #7
 8018700:	4904      	ldr	r1, [pc, #16]	@ (8018714 <HAL_RCC_GetPCLK2Freq+0x28>)
 8018702:	5ccb      	ldrb	r3, [r1, r3]
 8018704:	f003 031f 	and.w	r3, r3, #31
 8018708:	fa22 f303 	lsr.w	r3, r2, r3
}
 801870c:	4618      	mov	r0, r3
 801870e:	bd80      	pop	{r7, pc}
 8018710:	40021000 	.word	0x40021000
 8018714:	0801f9a8 	.word	0x0801f9a8

08018718 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8018718:	b580      	push	{r7, lr}
 801871a:	b086      	sub	sp, #24
 801871c:	af00      	add	r7, sp, #0
 801871e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8018720:	2300      	movs	r3, #0
 8018722:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8018724:	4b2a      	ldr	r3, [pc, #168]	@ (80187d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8018726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018728:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801872c:	2b00      	cmp	r3, #0
 801872e:	d003      	beq.n	8018738 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8018730:	f7ff f9b6 	bl	8017aa0 <HAL_PWREx_GetVoltageRange>
 8018734:	6178      	str	r0, [r7, #20]
 8018736:	e014      	b.n	8018762 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8018738:	4b25      	ldr	r3, [pc, #148]	@ (80187d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801873a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801873c:	4a24      	ldr	r2, [pc, #144]	@ (80187d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801873e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8018742:	6593      	str	r3, [r2, #88]	@ 0x58
 8018744:	4b22      	ldr	r3, [pc, #136]	@ (80187d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8018746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018748:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801874c:	60fb      	str	r3, [r7, #12]
 801874e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8018750:	f7ff f9a6 	bl	8017aa0 <HAL_PWREx_GetVoltageRange>
 8018754:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8018756:	4b1e      	ldr	r3, [pc, #120]	@ (80187d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8018758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801875a:	4a1d      	ldr	r2, [pc, #116]	@ (80187d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801875c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8018760:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8018762:	697b      	ldr	r3, [r7, #20]
 8018764:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018768:	d10b      	bne.n	8018782 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	2b80      	cmp	r3, #128	@ 0x80
 801876e:	d919      	bls.n	80187a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8018770:	687b      	ldr	r3, [r7, #4]
 8018772:	2ba0      	cmp	r3, #160	@ 0xa0
 8018774:	d902      	bls.n	801877c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8018776:	2302      	movs	r3, #2
 8018778:	613b      	str	r3, [r7, #16]
 801877a:	e013      	b.n	80187a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 801877c:	2301      	movs	r3, #1
 801877e:	613b      	str	r3, [r7, #16]
 8018780:	e010      	b.n	80187a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	2b80      	cmp	r3, #128	@ 0x80
 8018786:	d902      	bls.n	801878e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8018788:	2303      	movs	r3, #3
 801878a:	613b      	str	r3, [r7, #16]
 801878c:	e00a      	b.n	80187a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 801878e:	687b      	ldr	r3, [r7, #4]
 8018790:	2b80      	cmp	r3, #128	@ 0x80
 8018792:	d102      	bne.n	801879a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8018794:	2302      	movs	r3, #2
 8018796:	613b      	str	r3, [r7, #16]
 8018798:	e004      	b.n	80187a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 801879a:	687b      	ldr	r3, [r7, #4]
 801879c:	2b70      	cmp	r3, #112	@ 0x70
 801879e:	d101      	bne.n	80187a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80187a0:	2301      	movs	r3, #1
 80187a2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80187a4:	4b0b      	ldr	r3, [pc, #44]	@ (80187d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80187a6:	681b      	ldr	r3, [r3, #0]
 80187a8:	f023 0207 	bic.w	r2, r3, #7
 80187ac:	4909      	ldr	r1, [pc, #36]	@ (80187d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80187ae:	693b      	ldr	r3, [r7, #16]
 80187b0:	4313      	orrs	r3, r2
 80187b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80187b4:	4b07      	ldr	r3, [pc, #28]	@ (80187d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80187b6:	681b      	ldr	r3, [r3, #0]
 80187b8:	f003 0307 	and.w	r3, r3, #7
 80187bc:	693a      	ldr	r2, [r7, #16]
 80187be:	429a      	cmp	r2, r3
 80187c0:	d001      	beq.n	80187c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80187c2:	2301      	movs	r3, #1
 80187c4:	e000      	b.n	80187c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80187c6:	2300      	movs	r3, #0
}
 80187c8:	4618      	mov	r0, r3
 80187ca:	3718      	adds	r7, #24
 80187cc:	46bd      	mov	sp, r7
 80187ce:	bd80      	pop	{r7, pc}
 80187d0:	40021000 	.word	0x40021000
 80187d4:	40022000 	.word	0x40022000

080187d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80187d8:	b580      	push	{r7, lr}
 80187da:	b086      	sub	sp, #24
 80187dc:	af00      	add	r7, sp, #0
 80187de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80187e0:	2300      	movs	r3, #0
 80187e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80187e4:	2300      	movs	r3, #0
 80187e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80187e8:	687b      	ldr	r3, [r7, #4]
 80187ea:	681b      	ldr	r3, [r3, #0]
 80187ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80187f0:	2b00      	cmp	r3, #0
 80187f2:	d031      	beq.n	8018858 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80187f4:	687b      	ldr	r3, [r7, #4]
 80187f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80187f8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80187fc:	d01a      	beq.n	8018834 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80187fe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8018802:	d814      	bhi.n	801882e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8018804:	2b00      	cmp	r3, #0
 8018806:	d009      	beq.n	801881c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8018808:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801880c:	d10f      	bne.n	801882e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 801880e:	4b5d      	ldr	r3, [pc, #372]	@ (8018984 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8018810:	68db      	ldr	r3, [r3, #12]
 8018812:	4a5c      	ldr	r2, [pc, #368]	@ (8018984 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8018814:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8018818:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 801881a:	e00c      	b.n	8018836 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	3304      	adds	r3, #4
 8018820:	2100      	movs	r1, #0
 8018822:	4618      	mov	r0, r3
 8018824:	f000 f9f0 	bl	8018c08 <RCCEx_PLLSAI1_Config>
 8018828:	4603      	mov	r3, r0
 801882a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 801882c:	e003      	b.n	8018836 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801882e:	2301      	movs	r3, #1
 8018830:	74fb      	strb	r3, [r7, #19]
      break;
 8018832:	e000      	b.n	8018836 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8018834:	bf00      	nop
    }

    if(ret == HAL_OK)
 8018836:	7cfb      	ldrb	r3, [r7, #19]
 8018838:	2b00      	cmp	r3, #0
 801883a:	d10b      	bne.n	8018854 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801883c:	4b51      	ldr	r3, [pc, #324]	@ (8018984 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801883e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018842:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8018846:	687b      	ldr	r3, [r7, #4]
 8018848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801884a:	494e      	ldr	r1, [pc, #312]	@ (8018984 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801884c:	4313      	orrs	r3, r2
 801884e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8018852:	e001      	b.n	8018858 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8018854:	7cfb      	ldrb	r3, [r7, #19]
 8018856:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	681b      	ldr	r3, [r3, #0]
 801885c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8018860:	2b00      	cmp	r3, #0
 8018862:	f000 809e 	beq.w	80189a2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8018866:	2300      	movs	r3, #0
 8018868:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 801886a:	4b46      	ldr	r3, [pc, #280]	@ (8018984 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801886c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801886e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8018872:	2b00      	cmp	r3, #0
 8018874:	d101      	bne.n	801887a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8018876:	2301      	movs	r3, #1
 8018878:	e000      	b.n	801887c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 801887a:	2300      	movs	r3, #0
 801887c:	2b00      	cmp	r3, #0
 801887e:	d00d      	beq.n	801889c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8018880:	4b40      	ldr	r3, [pc, #256]	@ (8018984 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8018882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018884:	4a3f      	ldr	r2, [pc, #252]	@ (8018984 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8018886:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801888a:	6593      	str	r3, [r2, #88]	@ 0x58
 801888c:	4b3d      	ldr	r3, [pc, #244]	@ (8018984 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801888e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018890:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8018894:	60bb      	str	r3, [r7, #8]
 8018896:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8018898:	2301      	movs	r3, #1
 801889a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801889c:	4b3a      	ldr	r3, [pc, #232]	@ (8018988 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 801889e:	681b      	ldr	r3, [r3, #0]
 80188a0:	4a39      	ldr	r2, [pc, #228]	@ (8018988 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80188a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80188a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80188a8:	f7fe fd90 	bl	80173cc <HAL_GetTick>
 80188ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80188ae:	e009      	b.n	80188c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80188b0:	f7fe fd8c 	bl	80173cc <HAL_GetTick>
 80188b4:	4602      	mov	r2, r0
 80188b6:	68fb      	ldr	r3, [r7, #12]
 80188b8:	1ad3      	subs	r3, r2, r3
 80188ba:	2b02      	cmp	r3, #2
 80188bc:	d902      	bls.n	80188c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80188be:	2303      	movs	r3, #3
 80188c0:	74fb      	strb	r3, [r7, #19]
        break;
 80188c2:	e005      	b.n	80188d0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80188c4:	4b30      	ldr	r3, [pc, #192]	@ (8018988 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80188c6:	681b      	ldr	r3, [r3, #0]
 80188c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80188cc:	2b00      	cmp	r3, #0
 80188ce:	d0ef      	beq.n	80188b0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80188d0:	7cfb      	ldrb	r3, [r7, #19]
 80188d2:	2b00      	cmp	r3, #0
 80188d4:	d15a      	bne.n	801898c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80188d6:	4b2b      	ldr	r3, [pc, #172]	@ (8018984 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80188d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80188dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80188e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80188e2:	697b      	ldr	r3, [r7, #20]
 80188e4:	2b00      	cmp	r3, #0
 80188e6:	d01e      	beq.n	8018926 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80188ec:	697a      	ldr	r2, [r7, #20]
 80188ee:	429a      	cmp	r2, r3
 80188f0:	d019      	beq.n	8018926 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80188f2:	4b24      	ldr	r3, [pc, #144]	@ (8018984 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80188f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80188f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80188fc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80188fe:	4b21      	ldr	r3, [pc, #132]	@ (8018984 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8018900:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018904:	4a1f      	ldr	r2, [pc, #124]	@ (8018984 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8018906:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801890a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 801890e:	4b1d      	ldr	r3, [pc, #116]	@ (8018984 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8018910:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018914:	4a1b      	ldr	r2, [pc, #108]	@ (8018984 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8018916:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801891a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 801891e:	4a19      	ldr	r2, [pc, #100]	@ (8018984 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8018920:	697b      	ldr	r3, [r7, #20]
 8018922:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8018926:	697b      	ldr	r3, [r7, #20]
 8018928:	f003 0301 	and.w	r3, r3, #1
 801892c:	2b00      	cmp	r3, #0
 801892e:	d016      	beq.n	801895e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018930:	f7fe fd4c 	bl	80173cc <HAL_GetTick>
 8018934:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8018936:	e00b      	b.n	8018950 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8018938:	f7fe fd48 	bl	80173cc <HAL_GetTick>
 801893c:	4602      	mov	r2, r0
 801893e:	68fb      	ldr	r3, [r7, #12]
 8018940:	1ad3      	subs	r3, r2, r3
 8018942:	f241 3288 	movw	r2, #5000	@ 0x1388
 8018946:	4293      	cmp	r3, r2
 8018948:	d902      	bls.n	8018950 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 801894a:	2303      	movs	r3, #3
 801894c:	74fb      	strb	r3, [r7, #19]
            break;
 801894e:	e006      	b.n	801895e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8018950:	4b0c      	ldr	r3, [pc, #48]	@ (8018984 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8018952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018956:	f003 0302 	and.w	r3, r3, #2
 801895a:	2b00      	cmp	r3, #0
 801895c:	d0ec      	beq.n	8018938 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 801895e:	7cfb      	ldrb	r3, [r7, #19]
 8018960:	2b00      	cmp	r3, #0
 8018962:	d10b      	bne.n	801897c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8018964:	4b07      	ldr	r3, [pc, #28]	@ (8018984 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8018966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801896a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 801896e:	687b      	ldr	r3, [r7, #4]
 8018970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018972:	4904      	ldr	r1, [pc, #16]	@ (8018984 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8018974:	4313      	orrs	r3, r2
 8018976:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 801897a:	e009      	b.n	8018990 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801897c:	7cfb      	ldrb	r3, [r7, #19]
 801897e:	74bb      	strb	r3, [r7, #18]
 8018980:	e006      	b.n	8018990 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8018982:	bf00      	nop
 8018984:	40021000 	.word	0x40021000
 8018988:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801898c:	7cfb      	ldrb	r3, [r7, #19]
 801898e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8018990:	7c7b      	ldrb	r3, [r7, #17]
 8018992:	2b01      	cmp	r3, #1
 8018994:	d105      	bne.n	80189a2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8018996:	4b9b      	ldr	r3, [pc, #620]	@ (8018c04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801899a:	4a9a      	ldr	r2, [pc, #616]	@ (8018c04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801899c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80189a0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80189a2:	687b      	ldr	r3, [r7, #4]
 80189a4:	681b      	ldr	r3, [r3, #0]
 80189a6:	f003 0301 	and.w	r3, r3, #1
 80189aa:	2b00      	cmp	r3, #0
 80189ac:	d00a      	beq.n	80189c4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80189ae:	4b95      	ldr	r3, [pc, #596]	@ (8018c04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80189b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80189b4:	f023 0203 	bic.w	r2, r3, #3
 80189b8:	687b      	ldr	r3, [r7, #4]
 80189ba:	6a1b      	ldr	r3, [r3, #32]
 80189bc:	4991      	ldr	r1, [pc, #580]	@ (8018c04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80189be:	4313      	orrs	r3, r2
 80189c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	681b      	ldr	r3, [r3, #0]
 80189c8:	f003 0302 	and.w	r3, r3, #2
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	d00a      	beq.n	80189e6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80189d0:	4b8c      	ldr	r3, [pc, #560]	@ (8018c04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80189d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80189d6:	f023 020c 	bic.w	r2, r3, #12
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80189de:	4989      	ldr	r1, [pc, #548]	@ (8018c04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80189e0:	4313      	orrs	r3, r2
 80189e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80189e6:	687b      	ldr	r3, [r7, #4]
 80189e8:	681b      	ldr	r3, [r3, #0]
 80189ea:	f003 0304 	and.w	r3, r3, #4
 80189ee:	2b00      	cmp	r3, #0
 80189f0:	d00a      	beq.n	8018a08 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80189f2:	4b84      	ldr	r3, [pc, #528]	@ (8018c04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80189f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80189f8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80189fc:	687b      	ldr	r3, [r7, #4]
 80189fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018a00:	4980      	ldr	r1, [pc, #512]	@ (8018c04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018a02:	4313      	orrs	r3, r2
 8018a04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8018a08:	687b      	ldr	r3, [r7, #4]
 8018a0a:	681b      	ldr	r3, [r3, #0]
 8018a0c:	f003 0320 	and.w	r3, r3, #32
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	d00a      	beq.n	8018a2a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8018a14:	4b7b      	ldr	r3, [pc, #492]	@ (8018c04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018a1a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8018a1e:	687b      	ldr	r3, [r7, #4]
 8018a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018a22:	4978      	ldr	r1, [pc, #480]	@ (8018c04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018a24:	4313      	orrs	r3, r2
 8018a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8018a2a:	687b      	ldr	r3, [r7, #4]
 8018a2c:	681b      	ldr	r3, [r3, #0]
 8018a2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8018a32:	2b00      	cmp	r3, #0
 8018a34:	d00a      	beq.n	8018a4c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8018a36:	4b73      	ldr	r3, [pc, #460]	@ (8018c04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018a3c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8018a40:	687b      	ldr	r3, [r7, #4]
 8018a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018a44:	496f      	ldr	r1, [pc, #444]	@ (8018c04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018a46:	4313      	orrs	r3, r2
 8018a48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	681b      	ldr	r3, [r3, #0]
 8018a50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8018a54:	2b00      	cmp	r3, #0
 8018a56:	d00a      	beq.n	8018a6e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8018a58:	4b6a      	ldr	r3, [pc, #424]	@ (8018c04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018a5e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8018a62:	687b      	ldr	r3, [r7, #4]
 8018a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018a66:	4967      	ldr	r1, [pc, #412]	@ (8018c04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018a68:	4313      	orrs	r3, r2
 8018a6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8018a6e:	687b      	ldr	r3, [r7, #4]
 8018a70:	681b      	ldr	r3, [r3, #0]
 8018a72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018a76:	2b00      	cmp	r3, #0
 8018a78:	d00a      	beq.n	8018a90 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8018a7a:	4b62      	ldr	r3, [pc, #392]	@ (8018c04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018a80:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8018a84:	687b      	ldr	r3, [r7, #4]
 8018a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018a88:	495e      	ldr	r1, [pc, #376]	@ (8018c04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018a8a:	4313      	orrs	r3, r2
 8018a8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	681b      	ldr	r3, [r3, #0]
 8018a94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018a98:	2b00      	cmp	r3, #0
 8018a9a:	d00a      	beq.n	8018ab2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8018a9c:	4b59      	ldr	r3, [pc, #356]	@ (8018c04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018aa2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8018aa6:	687b      	ldr	r3, [r7, #4]
 8018aa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018aaa:	4956      	ldr	r1, [pc, #344]	@ (8018c04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018aac:	4313      	orrs	r3, r2
 8018aae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8018ab2:	687b      	ldr	r3, [r7, #4]
 8018ab4:	681b      	ldr	r3, [r3, #0]
 8018ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8018aba:	2b00      	cmp	r3, #0
 8018abc:	d00a      	beq.n	8018ad4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8018abe:	4b51      	ldr	r3, [pc, #324]	@ (8018c04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018ac4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8018ac8:	687b      	ldr	r3, [r7, #4]
 8018aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018acc:	494d      	ldr	r1, [pc, #308]	@ (8018c04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018ace:	4313      	orrs	r3, r2
 8018ad0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8018ad4:	687b      	ldr	r3, [r7, #4]
 8018ad6:	681b      	ldr	r3, [r3, #0]
 8018ad8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8018adc:	2b00      	cmp	r3, #0
 8018ade:	d028      	beq.n	8018b32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8018ae0:	4b48      	ldr	r3, [pc, #288]	@ (8018c04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018ae6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8018aea:	687b      	ldr	r3, [r7, #4]
 8018aec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018aee:	4945      	ldr	r1, [pc, #276]	@ (8018c04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018af0:	4313      	orrs	r3, r2
 8018af2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8018af6:	687b      	ldr	r3, [r7, #4]
 8018af8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018afa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8018afe:	d106      	bne.n	8018b0e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8018b00:	4b40      	ldr	r3, [pc, #256]	@ (8018c04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018b02:	68db      	ldr	r3, [r3, #12]
 8018b04:	4a3f      	ldr	r2, [pc, #252]	@ (8018c04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018b06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8018b0a:	60d3      	str	r3, [r2, #12]
 8018b0c:	e011      	b.n	8018b32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018b12:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8018b16:	d10c      	bne.n	8018b32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8018b18:	687b      	ldr	r3, [r7, #4]
 8018b1a:	3304      	adds	r3, #4
 8018b1c:	2101      	movs	r1, #1
 8018b1e:	4618      	mov	r0, r3
 8018b20:	f000 f872 	bl	8018c08 <RCCEx_PLLSAI1_Config>
 8018b24:	4603      	mov	r3, r0
 8018b26:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8018b28:	7cfb      	ldrb	r3, [r7, #19]
 8018b2a:	2b00      	cmp	r3, #0
 8018b2c:	d001      	beq.n	8018b32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8018b2e:	7cfb      	ldrb	r3, [r7, #19]
 8018b30:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8018b32:	687b      	ldr	r3, [r7, #4]
 8018b34:	681b      	ldr	r3, [r3, #0]
 8018b36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8018b3a:	2b00      	cmp	r3, #0
 8018b3c:	d028      	beq.n	8018b90 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8018b3e:	4b31      	ldr	r3, [pc, #196]	@ (8018c04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018b44:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8018b48:	687b      	ldr	r3, [r7, #4]
 8018b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018b4c:	492d      	ldr	r1, [pc, #180]	@ (8018c04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018b4e:	4313      	orrs	r3, r2
 8018b50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018b58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8018b5c:	d106      	bne.n	8018b6c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8018b5e:	4b29      	ldr	r3, [pc, #164]	@ (8018c04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018b60:	68db      	ldr	r3, [r3, #12]
 8018b62:	4a28      	ldr	r2, [pc, #160]	@ (8018c04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018b64:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8018b68:	60d3      	str	r3, [r2, #12]
 8018b6a:	e011      	b.n	8018b90 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8018b6c:	687b      	ldr	r3, [r7, #4]
 8018b6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018b70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8018b74:	d10c      	bne.n	8018b90 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8018b76:	687b      	ldr	r3, [r7, #4]
 8018b78:	3304      	adds	r3, #4
 8018b7a:	2101      	movs	r1, #1
 8018b7c:	4618      	mov	r0, r3
 8018b7e:	f000 f843 	bl	8018c08 <RCCEx_PLLSAI1_Config>
 8018b82:	4603      	mov	r3, r0
 8018b84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8018b86:	7cfb      	ldrb	r3, [r7, #19]
 8018b88:	2b00      	cmp	r3, #0
 8018b8a:	d001      	beq.n	8018b90 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8018b8c:	7cfb      	ldrb	r3, [r7, #19]
 8018b8e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	681b      	ldr	r3, [r3, #0]
 8018b94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8018b98:	2b00      	cmp	r3, #0
 8018b9a:	d01c      	beq.n	8018bd6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8018b9c:	4b19      	ldr	r3, [pc, #100]	@ (8018c04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018ba2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018baa:	4916      	ldr	r1, [pc, #88]	@ (8018c04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018bac:	4313      	orrs	r3, r2
 8018bae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018bb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8018bba:	d10c      	bne.n	8018bd6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8018bbc:	687b      	ldr	r3, [r7, #4]
 8018bbe:	3304      	adds	r3, #4
 8018bc0:	2102      	movs	r1, #2
 8018bc2:	4618      	mov	r0, r3
 8018bc4:	f000 f820 	bl	8018c08 <RCCEx_PLLSAI1_Config>
 8018bc8:	4603      	mov	r3, r0
 8018bca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8018bcc:	7cfb      	ldrb	r3, [r7, #19]
 8018bce:	2b00      	cmp	r3, #0
 8018bd0:	d001      	beq.n	8018bd6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8018bd2:	7cfb      	ldrb	r3, [r7, #19]
 8018bd4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	681b      	ldr	r3, [r3, #0]
 8018bda:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8018bde:	2b00      	cmp	r3, #0
 8018be0:	d00a      	beq.n	8018bf8 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8018be2:	4b08      	ldr	r3, [pc, #32]	@ (8018c04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018be8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8018bec:	687b      	ldr	r3, [r7, #4]
 8018bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018bf0:	4904      	ldr	r1, [pc, #16]	@ (8018c04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018bf2:	4313      	orrs	r3, r2
 8018bf4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8018bf8:	7cbb      	ldrb	r3, [r7, #18]
}
 8018bfa:	4618      	mov	r0, r3
 8018bfc:	3718      	adds	r7, #24
 8018bfe:	46bd      	mov	sp, r7
 8018c00:	bd80      	pop	{r7, pc}
 8018c02:	bf00      	nop
 8018c04:	40021000 	.word	0x40021000

08018c08 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8018c08:	b580      	push	{r7, lr}
 8018c0a:	b084      	sub	sp, #16
 8018c0c:	af00      	add	r7, sp, #0
 8018c0e:	6078      	str	r0, [r7, #4]
 8018c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8018c12:	2300      	movs	r3, #0
 8018c14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8018c16:	4b74      	ldr	r3, [pc, #464]	@ (8018de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8018c18:	68db      	ldr	r3, [r3, #12]
 8018c1a:	f003 0303 	and.w	r3, r3, #3
 8018c1e:	2b00      	cmp	r3, #0
 8018c20:	d018      	beq.n	8018c54 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8018c22:	4b71      	ldr	r3, [pc, #452]	@ (8018de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8018c24:	68db      	ldr	r3, [r3, #12]
 8018c26:	f003 0203 	and.w	r2, r3, #3
 8018c2a:	687b      	ldr	r3, [r7, #4]
 8018c2c:	681b      	ldr	r3, [r3, #0]
 8018c2e:	429a      	cmp	r2, r3
 8018c30:	d10d      	bne.n	8018c4e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8018c32:	687b      	ldr	r3, [r7, #4]
 8018c34:	681b      	ldr	r3, [r3, #0]
       ||
 8018c36:	2b00      	cmp	r3, #0
 8018c38:	d009      	beq.n	8018c4e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8018c3a:	4b6b      	ldr	r3, [pc, #428]	@ (8018de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8018c3c:	68db      	ldr	r3, [r3, #12]
 8018c3e:	091b      	lsrs	r3, r3, #4
 8018c40:	f003 0307 	and.w	r3, r3, #7
 8018c44:	1c5a      	adds	r2, r3, #1
 8018c46:	687b      	ldr	r3, [r7, #4]
 8018c48:	685b      	ldr	r3, [r3, #4]
       ||
 8018c4a:	429a      	cmp	r2, r3
 8018c4c:	d047      	beq.n	8018cde <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8018c4e:	2301      	movs	r3, #1
 8018c50:	73fb      	strb	r3, [r7, #15]
 8018c52:	e044      	b.n	8018cde <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	681b      	ldr	r3, [r3, #0]
 8018c58:	2b03      	cmp	r3, #3
 8018c5a:	d018      	beq.n	8018c8e <RCCEx_PLLSAI1_Config+0x86>
 8018c5c:	2b03      	cmp	r3, #3
 8018c5e:	d825      	bhi.n	8018cac <RCCEx_PLLSAI1_Config+0xa4>
 8018c60:	2b01      	cmp	r3, #1
 8018c62:	d002      	beq.n	8018c6a <RCCEx_PLLSAI1_Config+0x62>
 8018c64:	2b02      	cmp	r3, #2
 8018c66:	d009      	beq.n	8018c7c <RCCEx_PLLSAI1_Config+0x74>
 8018c68:	e020      	b.n	8018cac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8018c6a:	4b5f      	ldr	r3, [pc, #380]	@ (8018de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8018c6c:	681b      	ldr	r3, [r3, #0]
 8018c6e:	f003 0302 	and.w	r3, r3, #2
 8018c72:	2b00      	cmp	r3, #0
 8018c74:	d11d      	bne.n	8018cb2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8018c76:	2301      	movs	r3, #1
 8018c78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8018c7a:	e01a      	b.n	8018cb2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8018c7c:	4b5a      	ldr	r3, [pc, #360]	@ (8018de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8018c7e:	681b      	ldr	r3, [r3, #0]
 8018c80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8018c84:	2b00      	cmp	r3, #0
 8018c86:	d116      	bne.n	8018cb6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8018c88:	2301      	movs	r3, #1
 8018c8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8018c8c:	e013      	b.n	8018cb6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8018c8e:	4b56      	ldr	r3, [pc, #344]	@ (8018de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8018c90:	681b      	ldr	r3, [r3, #0]
 8018c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8018c96:	2b00      	cmp	r3, #0
 8018c98:	d10f      	bne.n	8018cba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8018c9a:	4b53      	ldr	r3, [pc, #332]	@ (8018de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8018c9c:	681b      	ldr	r3, [r3, #0]
 8018c9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8018ca2:	2b00      	cmp	r3, #0
 8018ca4:	d109      	bne.n	8018cba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8018ca6:	2301      	movs	r3, #1
 8018ca8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8018caa:	e006      	b.n	8018cba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8018cac:	2301      	movs	r3, #1
 8018cae:	73fb      	strb	r3, [r7, #15]
      break;
 8018cb0:	e004      	b.n	8018cbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8018cb2:	bf00      	nop
 8018cb4:	e002      	b.n	8018cbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8018cb6:	bf00      	nop
 8018cb8:	e000      	b.n	8018cbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8018cba:	bf00      	nop
    }

    if(status == HAL_OK)
 8018cbc:	7bfb      	ldrb	r3, [r7, #15]
 8018cbe:	2b00      	cmp	r3, #0
 8018cc0:	d10d      	bne.n	8018cde <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8018cc2:	4b49      	ldr	r3, [pc, #292]	@ (8018de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8018cc4:	68db      	ldr	r3, [r3, #12]
 8018cc6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	6819      	ldr	r1, [r3, #0]
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	685b      	ldr	r3, [r3, #4]
 8018cd2:	3b01      	subs	r3, #1
 8018cd4:	011b      	lsls	r3, r3, #4
 8018cd6:	430b      	orrs	r3, r1
 8018cd8:	4943      	ldr	r1, [pc, #268]	@ (8018de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8018cda:	4313      	orrs	r3, r2
 8018cdc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8018cde:	7bfb      	ldrb	r3, [r7, #15]
 8018ce0:	2b00      	cmp	r3, #0
 8018ce2:	d17c      	bne.n	8018dde <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8018ce4:	4b40      	ldr	r3, [pc, #256]	@ (8018de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8018ce6:	681b      	ldr	r3, [r3, #0]
 8018ce8:	4a3f      	ldr	r2, [pc, #252]	@ (8018de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8018cea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8018cee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8018cf0:	f7fe fb6c 	bl	80173cc <HAL_GetTick>
 8018cf4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8018cf6:	e009      	b.n	8018d0c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8018cf8:	f7fe fb68 	bl	80173cc <HAL_GetTick>
 8018cfc:	4602      	mov	r2, r0
 8018cfe:	68bb      	ldr	r3, [r7, #8]
 8018d00:	1ad3      	subs	r3, r2, r3
 8018d02:	2b02      	cmp	r3, #2
 8018d04:	d902      	bls.n	8018d0c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8018d06:	2303      	movs	r3, #3
 8018d08:	73fb      	strb	r3, [r7, #15]
        break;
 8018d0a:	e005      	b.n	8018d18 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8018d0c:	4b36      	ldr	r3, [pc, #216]	@ (8018de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8018d0e:	681b      	ldr	r3, [r3, #0]
 8018d10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8018d14:	2b00      	cmp	r3, #0
 8018d16:	d1ef      	bne.n	8018cf8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8018d18:	7bfb      	ldrb	r3, [r7, #15]
 8018d1a:	2b00      	cmp	r3, #0
 8018d1c:	d15f      	bne.n	8018dde <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8018d1e:	683b      	ldr	r3, [r7, #0]
 8018d20:	2b00      	cmp	r3, #0
 8018d22:	d110      	bne.n	8018d46 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8018d24:	4b30      	ldr	r3, [pc, #192]	@ (8018de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8018d26:	691b      	ldr	r3, [r3, #16]
 8018d28:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8018d2c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8018d30:	687a      	ldr	r2, [r7, #4]
 8018d32:	6892      	ldr	r2, [r2, #8]
 8018d34:	0211      	lsls	r1, r2, #8
 8018d36:	687a      	ldr	r2, [r7, #4]
 8018d38:	68d2      	ldr	r2, [r2, #12]
 8018d3a:	06d2      	lsls	r2, r2, #27
 8018d3c:	430a      	orrs	r2, r1
 8018d3e:	492a      	ldr	r1, [pc, #168]	@ (8018de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8018d40:	4313      	orrs	r3, r2
 8018d42:	610b      	str	r3, [r1, #16]
 8018d44:	e027      	b.n	8018d96 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8018d46:	683b      	ldr	r3, [r7, #0]
 8018d48:	2b01      	cmp	r3, #1
 8018d4a:	d112      	bne.n	8018d72 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8018d4c:	4b26      	ldr	r3, [pc, #152]	@ (8018de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8018d4e:	691b      	ldr	r3, [r3, #16]
 8018d50:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8018d54:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8018d58:	687a      	ldr	r2, [r7, #4]
 8018d5a:	6892      	ldr	r2, [r2, #8]
 8018d5c:	0211      	lsls	r1, r2, #8
 8018d5e:	687a      	ldr	r2, [r7, #4]
 8018d60:	6912      	ldr	r2, [r2, #16]
 8018d62:	0852      	lsrs	r2, r2, #1
 8018d64:	3a01      	subs	r2, #1
 8018d66:	0552      	lsls	r2, r2, #21
 8018d68:	430a      	orrs	r2, r1
 8018d6a:	491f      	ldr	r1, [pc, #124]	@ (8018de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8018d6c:	4313      	orrs	r3, r2
 8018d6e:	610b      	str	r3, [r1, #16]
 8018d70:	e011      	b.n	8018d96 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8018d72:	4b1d      	ldr	r3, [pc, #116]	@ (8018de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8018d74:	691b      	ldr	r3, [r3, #16]
 8018d76:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8018d7a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8018d7e:	687a      	ldr	r2, [r7, #4]
 8018d80:	6892      	ldr	r2, [r2, #8]
 8018d82:	0211      	lsls	r1, r2, #8
 8018d84:	687a      	ldr	r2, [r7, #4]
 8018d86:	6952      	ldr	r2, [r2, #20]
 8018d88:	0852      	lsrs	r2, r2, #1
 8018d8a:	3a01      	subs	r2, #1
 8018d8c:	0652      	lsls	r2, r2, #25
 8018d8e:	430a      	orrs	r2, r1
 8018d90:	4915      	ldr	r1, [pc, #84]	@ (8018de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8018d92:	4313      	orrs	r3, r2
 8018d94:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8018d96:	4b14      	ldr	r3, [pc, #80]	@ (8018de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8018d98:	681b      	ldr	r3, [r3, #0]
 8018d9a:	4a13      	ldr	r2, [pc, #76]	@ (8018de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8018d9c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8018da0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018da2:	f7fe fb13 	bl	80173cc <HAL_GetTick>
 8018da6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8018da8:	e009      	b.n	8018dbe <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8018daa:	f7fe fb0f 	bl	80173cc <HAL_GetTick>
 8018dae:	4602      	mov	r2, r0
 8018db0:	68bb      	ldr	r3, [r7, #8]
 8018db2:	1ad3      	subs	r3, r2, r3
 8018db4:	2b02      	cmp	r3, #2
 8018db6:	d902      	bls.n	8018dbe <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8018db8:	2303      	movs	r3, #3
 8018dba:	73fb      	strb	r3, [r7, #15]
          break;
 8018dbc:	e005      	b.n	8018dca <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8018dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8018de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8018dc0:	681b      	ldr	r3, [r3, #0]
 8018dc2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8018dc6:	2b00      	cmp	r3, #0
 8018dc8:	d0ef      	beq.n	8018daa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8018dca:	7bfb      	ldrb	r3, [r7, #15]
 8018dcc:	2b00      	cmp	r3, #0
 8018dce:	d106      	bne.n	8018dde <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8018dd0:	4b05      	ldr	r3, [pc, #20]	@ (8018de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8018dd2:	691a      	ldr	r2, [r3, #16]
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	699b      	ldr	r3, [r3, #24]
 8018dd8:	4903      	ldr	r1, [pc, #12]	@ (8018de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8018dda:	4313      	orrs	r3, r2
 8018ddc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8018dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8018de0:	4618      	mov	r0, r3
 8018de2:	3710      	adds	r7, #16
 8018de4:	46bd      	mov	sp, r7
 8018de6:	bd80      	pop	{r7, pc}
 8018de8:	40021000 	.word	0x40021000

08018dec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8018dec:	b580      	push	{r7, lr}
 8018dee:	b084      	sub	sp, #16
 8018df0:	af00      	add	r7, sp, #0
 8018df2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	2b00      	cmp	r3, #0
 8018df8:	d101      	bne.n	8018dfe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8018dfa:	2301      	movs	r3, #1
 8018dfc:	e095      	b.n	8018f2a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018e02:	2b00      	cmp	r3, #0
 8018e04:	d108      	bne.n	8018e18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8018e06:	687b      	ldr	r3, [r7, #4]
 8018e08:	685b      	ldr	r3, [r3, #4]
 8018e0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8018e0e:	d009      	beq.n	8018e24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8018e10:	687b      	ldr	r3, [r7, #4]
 8018e12:	2200      	movs	r2, #0
 8018e14:	61da      	str	r2, [r3, #28]
 8018e16:	e005      	b.n	8018e24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	2200      	movs	r2, #0
 8018e1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8018e1e:	687b      	ldr	r3, [r7, #4]
 8018e20:	2200      	movs	r2, #0
 8018e22:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	2200      	movs	r2, #0
 8018e28:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8018e30:	b2db      	uxtb	r3, r3
 8018e32:	2b00      	cmp	r3, #0
 8018e34:	d106      	bne.n	8018e44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	2200      	movs	r2, #0
 8018e3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8018e3e:	6878      	ldr	r0, [r7, #4]
 8018e40:	f7e8 fef8 	bl	8001c34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	2202      	movs	r2, #2
 8018e48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8018e4c:	687b      	ldr	r3, [r7, #4]
 8018e4e:	681b      	ldr	r3, [r3, #0]
 8018e50:	681a      	ldr	r2, [r3, #0]
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	681b      	ldr	r3, [r3, #0]
 8018e56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8018e5a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	68db      	ldr	r3, [r3, #12]
 8018e60:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8018e64:	d902      	bls.n	8018e6c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8018e66:	2300      	movs	r3, #0
 8018e68:	60fb      	str	r3, [r7, #12]
 8018e6a:	e002      	b.n	8018e72 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8018e6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8018e70:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8018e72:	687b      	ldr	r3, [r7, #4]
 8018e74:	68db      	ldr	r3, [r3, #12]
 8018e76:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8018e7a:	d007      	beq.n	8018e8c <HAL_SPI_Init+0xa0>
 8018e7c:	687b      	ldr	r3, [r7, #4]
 8018e7e:	68db      	ldr	r3, [r3, #12]
 8018e80:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8018e84:	d002      	beq.n	8018e8c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	2200      	movs	r2, #0
 8018e8a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8018e8c:	687b      	ldr	r3, [r7, #4]
 8018e8e:	685b      	ldr	r3, [r3, #4]
 8018e90:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	689b      	ldr	r3, [r3, #8]
 8018e98:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8018e9c:	431a      	orrs	r2, r3
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	691b      	ldr	r3, [r3, #16]
 8018ea2:	f003 0302 	and.w	r3, r3, #2
 8018ea6:	431a      	orrs	r2, r3
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	695b      	ldr	r3, [r3, #20]
 8018eac:	f003 0301 	and.w	r3, r3, #1
 8018eb0:	431a      	orrs	r2, r3
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	699b      	ldr	r3, [r3, #24]
 8018eb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8018eba:	431a      	orrs	r2, r3
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	69db      	ldr	r3, [r3, #28]
 8018ec0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018ec4:	431a      	orrs	r2, r3
 8018ec6:	687b      	ldr	r3, [r7, #4]
 8018ec8:	6a1b      	ldr	r3, [r3, #32]
 8018eca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018ece:	ea42 0103 	orr.w	r1, r2, r3
 8018ed2:	687b      	ldr	r3, [r7, #4]
 8018ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018ed6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8018eda:	687b      	ldr	r3, [r7, #4]
 8018edc:	681b      	ldr	r3, [r3, #0]
 8018ede:	430a      	orrs	r2, r1
 8018ee0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8018ee2:	687b      	ldr	r3, [r7, #4]
 8018ee4:	699b      	ldr	r3, [r3, #24]
 8018ee6:	0c1b      	lsrs	r3, r3, #16
 8018ee8:	f003 0204 	and.w	r2, r3, #4
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018ef0:	f003 0310 	and.w	r3, r3, #16
 8018ef4:	431a      	orrs	r2, r3
 8018ef6:	687b      	ldr	r3, [r7, #4]
 8018ef8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018efa:	f003 0308 	and.w	r3, r3, #8
 8018efe:	431a      	orrs	r2, r3
 8018f00:	687b      	ldr	r3, [r7, #4]
 8018f02:	68db      	ldr	r3, [r3, #12]
 8018f04:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8018f08:	ea42 0103 	orr.w	r1, r2, r3
 8018f0c:	68fb      	ldr	r3, [r7, #12]
 8018f0e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8018f12:	687b      	ldr	r3, [r7, #4]
 8018f14:	681b      	ldr	r3, [r3, #0]
 8018f16:	430a      	orrs	r2, r1
 8018f18:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8018f1a:	687b      	ldr	r3, [r7, #4]
 8018f1c:	2200      	movs	r2, #0
 8018f1e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	2201      	movs	r2, #1
 8018f24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8018f28:	2300      	movs	r3, #0
}
 8018f2a:	4618      	mov	r0, r3
 8018f2c:	3710      	adds	r7, #16
 8018f2e:	46bd      	mov	sp, r7
 8018f30:	bd80      	pop	{r7, pc}

08018f32 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8018f32:	b580      	push	{r7, lr}
 8018f34:	b08a      	sub	sp, #40	@ 0x28
 8018f36:	af00      	add	r7, sp, #0
 8018f38:	60f8      	str	r0, [r7, #12]
 8018f3a:	60b9      	str	r1, [r7, #8]
 8018f3c:	607a      	str	r2, [r7, #4]
 8018f3e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8018f40:	2301      	movs	r3, #1
 8018f42:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8018f44:	f7fe fa42 	bl	80173cc <HAL_GetTick>
 8018f48:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8018f4a:	68fb      	ldr	r3, [r7, #12]
 8018f4c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8018f50:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8018f52:	68fb      	ldr	r3, [r7, #12]
 8018f54:	685b      	ldr	r3, [r3, #4]
 8018f56:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8018f58:	887b      	ldrh	r3, [r7, #2]
 8018f5a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8018f5c:	887b      	ldrh	r3, [r7, #2]
 8018f5e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8018f60:	7ffb      	ldrb	r3, [r7, #31]
 8018f62:	2b01      	cmp	r3, #1
 8018f64:	d00c      	beq.n	8018f80 <HAL_SPI_TransmitReceive+0x4e>
 8018f66:	69bb      	ldr	r3, [r7, #24]
 8018f68:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8018f6c:	d106      	bne.n	8018f7c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8018f6e:	68fb      	ldr	r3, [r7, #12]
 8018f70:	689b      	ldr	r3, [r3, #8]
 8018f72:	2b00      	cmp	r3, #0
 8018f74:	d102      	bne.n	8018f7c <HAL_SPI_TransmitReceive+0x4a>
 8018f76:	7ffb      	ldrb	r3, [r7, #31]
 8018f78:	2b04      	cmp	r3, #4
 8018f7a:	d001      	beq.n	8018f80 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8018f7c:	2302      	movs	r3, #2
 8018f7e:	e1f3      	b.n	8019368 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8018f80:	68bb      	ldr	r3, [r7, #8]
 8018f82:	2b00      	cmp	r3, #0
 8018f84:	d005      	beq.n	8018f92 <HAL_SPI_TransmitReceive+0x60>
 8018f86:	687b      	ldr	r3, [r7, #4]
 8018f88:	2b00      	cmp	r3, #0
 8018f8a:	d002      	beq.n	8018f92 <HAL_SPI_TransmitReceive+0x60>
 8018f8c:	887b      	ldrh	r3, [r7, #2]
 8018f8e:	2b00      	cmp	r3, #0
 8018f90:	d101      	bne.n	8018f96 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8018f92:	2301      	movs	r3, #1
 8018f94:	e1e8      	b.n	8019368 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8018f96:	68fb      	ldr	r3, [r7, #12]
 8018f98:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8018f9c:	2b01      	cmp	r3, #1
 8018f9e:	d101      	bne.n	8018fa4 <HAL_SPI_TransmitReceive+0x72>
 8018fa0:	2302      	movs	r3, #2
 8018fa2:	e1e1      	b.n	8019368 <HAL_SPI_TransmitReceive+0x436>
 8018fa4:	68fb      	ldr	r3, [r7, #12]
 8018fa6:	2201      	movs	r2, #1
 8018fa8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8018fac:	68fb      	ldr	r3, [r7, #12]
 8018fae:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8018fb2:	b2db      	uxtb	r3, r3
 8018fb4:	2b04      	cmp	r3, #4
 8018fb6:	d003      	beq.n	8018fc0 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8018fb8:	68fb      	ldr	r3, [r7, #12]
 8018fba:	2205      	movs	r2, #5
 8018fbc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8018fc0:	68fb      	ldr	r3, [r7, #12]
 8018fc2:	2200      	movs	r2, #0
 8018fc4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8018fc6:	68fb      	ldr	r3, [r7, #12]
 8018fc8:	687a      	ldr	r2, [r7, #4]
 8018fca:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8018fcc:	68fb      	ldr	r3, [r7, #12]
 8018fce:	887a      	ldrh	r2, [r7, #2]
 8018fd0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8018fd4:	68fb      	ldr	r3, [r7, #12]
 8018fd6:	887a      	ldrh	r2, [r7, #2]
 8018fd8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8018fdc:	68fb      	ldr	r3, [r7, #12]
 8018fde:	68ba      	ldr	r2, [r7, #8]
 8018fe0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8018fe2:	68fb      	ldr	r3, [r7, #12]
 8018fe4:	887a      	ldrh	r2, [r7, #2]
 8018fe6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8018fe8:	68fb      	ldr	r3, [r7, #12]
 8018fea:	887a      	ldrh	r2, [r7, #2]
 8018fec:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8018fee:	68fb      	ldr	r3, [r7, #12]
 8018ff0:	2200      	movs	r2, #0
 8018ff2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8018ff4:	68fb      	ldr	r3, [r7, #12]
 8018ff6:	2200      	movs	r2, #0
 8018ff8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8018ffa:	68fb      	ldr	r3, [r7, #12]
 8018ffc:	68db      	ldr	r3, [r3, #12]
 8018ffe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8019002:	d802      	bhi.n	801900a <HAL_SPI_TransmitReceive+0xd8>
 8019004:	8abb      	ldrh	r3, [r7, #20]
 8019006:	2b01      	cmp	r3, #1
 8019008:	d908      	bls.n	801901c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801900a:	68fb      	ldr	r3, [r7, #12]
 801900c:	681b      	ldr	r3, [r3, #0]
 801900e:	685a      	ldr	r2, [r3, #4]
 8019010:	68fb      	ldr	r3, [r7, #12]
 8019012:	681b      	ldr	r3, [r3, #0]
 8019014:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8019018:	605a      	str	r2, [r3, #4]
 801901a:	e007      	b.n	801902c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801901c:	68fb      	ldr	r3, [r7, #12]
 801901e:	681b      	ldr	r3, [r3, #0]
 8019020:	685a      	ldr	r2, [r3, #4]
 8019022:	68fb      	ldr	r3, [r7, #12]
 8019024:	681b      	ldr	r3, [r3, #0]
 8019026:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 801902a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801902c:	68fb      	ldr	r3, [r7, #12]
 801902e:	681b      	ldr	r3, [r3, #0]
 8019030:	681b      	ldr	r3, [r3, #0]
 8019032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019036:	2b40      	cmp	r3, #64	@ 0x40
 8019038:	d007      	beq.n	801904a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801903a:	68fb      	ldr	r3, [r7, #12]
 801903c:	681b      	ldr	r3, [r3, #0]
 801903e:	681a      	ldr	r2, [r3, #0]
 8019040:	68fb      	ldr	r3, [r7, #12]
 8019042:	681b      	ldr	r3, [r3, #0]
 8019044:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8019048:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801904a:	68fb      	ldr	r3, [r7, #12]
 801904c:	68db      	ldr	r3, [r3, #12]
 801904e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8019052:	f240 8083 	bls.w	801915c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8019056:	68fb      	ldr	r3, [r7, #12]
 8019058:	685b      	ldr	r3, [r3, #4]
 801905a:	2b00      	cmp	r3, #0
 801905c:	d002      	beq.n	8019064 <HAL_SPI_TransmitReceive+0x132>
 801905e:	8afb      	ldrh	r3, [r7, #22]
 8019060:	2b01      	cmp	r3, #1
 8019062:	d16f      	bne.n	8019144 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8019064:	68fb      	ldr	r3, [r7, #12]
 8019066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019068:	881a      	ldrh	r2, [r3, #0]
 801906a:	68fb      	ldr	r3, [r7, #12]
 801906c:	681b      	ldr	r3, [r3, #0]
 801906e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8019070:	68fb      	ldr	r3, [r7, #12]
 8019072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019074:	1c9a      	adds	r2, r3, #2
 8019076:	68fb      	ldr	r3, [r7, #12]
 8019078:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 801907a:	68fb      	ldr	r3, [r7, #12]
 801907c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801907e:	b29b      	uxth	r3, r3
 8019080:	3b01      	subs	r3, #1
 8019082:	b29a      	uxth	r2, r3
 8019084:	68fb      	ldr	r3, [r7, #12]
 8019086:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8019088:	e05c      	b.n	8019144 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801908a:	68fb      	ldr	r3, [r7, #12]
 801908c:	681b      	ldr	r3, [r3, #0]
 801908e:	689b      	ldr	r3, [r3, #8]
 8019090:	f003 0302 	and.w	r3, r3, #2
 8019094:	2b02      	cmp	r3, #2
 8019096:	d11b      	bne.n	80190d0 <HAL_SPI_TransmitReceive+0x19e>
 8019098:	68fb      	ldr	r3, [r7, #12]
 801909a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801909c:	b29b      	uxth	r3, r3
 801909e:	2b00      	cmp	r3, #0
 80190a0:	d016      	beq.n	80190d0 <HAL_SPI_TransmitReceive+0x19e>
 80190a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80190a4:	2b01      	cmp	r3, #1
 80190a6:	d113      	bne.n	80190d0 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80190a8:	68fb      	ldr	r3, [r7, #12]
 80190aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80190ac:	881a      	ldrh	r2, [r3, #0]
 80190ae:	68fb      	ldr	r3, [r7, #12]
 80190b0:	681b      	ldr	r3, [r3, #0]
 80190b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80190b4:	68fb      	ldr	r3, [r7, #12]
 80190b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80190b8:	1c9a      	adds	r2, r3, #2
 80190ba:	68fb      	ldr	r3, [r7, #12]
 80190bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80190be:	68fb      	ldr	r3, [r7, #12]
 80190c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80190c2:	b29b      	uxth	r3, r3
 80190c4:	3b01      	subs	r3, #1
 80190c6:	b29a      	uxth	r2, r3
 80190c8:	68fb      	ldr	r3, [r7, #12]
 80190ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80190cc:	2300      	movs	r3, #0
 80190ce:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80190d0:	68fb      	ldr	r3, [r7, #12]
 80190d2:	681b      	ldr	r3, [r3, #0]
 80190d4:	689b      	ldr	r3, [r3, #8]
 80190d6:	f003 0301 	and.w	r3, r3, #1
 80190da:	2b01      	cmp	r3, #1
 80190dc:	d11c      	bne.n	8019118 <HAL_SPI_TransmitReceive+0x1e6>
 80190de:	68fb      	ldr	r3, [r7, #12]
 80190e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80190e4:	b29b      	uxth	r3, r3
 80190e6:	2b00      	cmp	r3, #0
 80190e8:	d016      	beq.n	8019118 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80190ea:	68fb      	ldr	r3, [r7, #12]
 80190ec:	681b      	ldr	r3, [r3, #0]
 80190ee:	68da      	ldr	r2, [r3, #12]
 80190f0:	68fb      	ldr	r3, [r7, #12]
 80190f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80190f4:	b292      	uxth	r2, r2
 80190f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80190f8:	68fb      	ldr	r3, [r7, #12]
 80190fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80190fc:	1c9a      	adds	r2, r3, #2
 80190fe:	68fb      	ldr	r3, [r7, #12]
 8019100:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8019102:	68fb      	ldr	r3, [r7, #12]
 8019104:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8019108:	b29b      	uxth	r3, r3
 801910a:	3b01      	subs	r3, #1
 801910c:	b29a      	uxth	r2, r3
 801910e:	68fb      	ldr	r3, [r7, #12]
 8019110:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8019114:	2301      	movs	r3, #1
 8019116:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8019118:	f7fe f958 	bl	80173cc <HAL_GetTick>
 801911c:	4602      	mov	r2, r0
 801911e:	6a3b      	ldr	r3, [r7, #32]
 8019120:	1ad3      	subs	r3, r2, r3
 8019122:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019124:	429a      	cmp	r2, r3
 8019126:	d80d      	bhi.n	8019144 <HAL_SPI_TransmitReceive+0x212>
 8019128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801912a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801912e:	d009      	beq.n	8019144 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8019130:	68fb      	ldr	r3, [r7, #12]
 8019132:	2201      	movs	r2, #1
 8019134:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8019138:	68fb      	ldr	r3, [r7, #12]
 801913a:	2200      	movs	r2, #0
 801913c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8019140:	2303      	movs	r3, #3
 8019142:	e111      	b.n	8019368 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8019144:	68fb      	ldr	r3, [r7, #12]
 8019146:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8019148:	b29b      	uxth	r3, r3
 801914a:	2b00      	cmp	r3, #0
 801914c:	d19d      	bne.n	801908a <HAL_SPI_TransmitReceive+0x158>
 801914e:	68fb      	ldr	r3, [r7, #12]
 8019150:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8019154:	b29b      	uxth	r3, r3
 8019156:	2b00      	cmp	r3, #0
 8019158:	d197      	bne.n	801908a <HAL_SPI_TransmitReceive+0x158>
 801915a:	e0e5      	b.n	8019328 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801915c:	68fb      	ldr	r3, [r7, #12]
 801915e:	685b      	ldr	r3, [r3, #4]
 8019160:	2b00      	cmp	r3, #0
 8019162:	d003      	beq.n	801916c <HAL_SPI_TransmitReceive+0x23a>
 8019164:	8afb      	ldrh	r3, [r7, #22]
 8019166:	2b01      	cmp	r3, #1
 8019168:	f040 80d1 	bne.w	801930e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 801916c:	68fb      	ldr	r3, [r7, #12]
 801916e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8019170:	b29b      	uxth	r3, r3
 8019172:	2b01      	cmp	r3, #1
 8019174:	d912      	bls.n	801919c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8019176:	68fb      	ldr	r3, [r7, #12]
 8019178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801917a:	881a      	ldrh	r2, [r3, #0]
 801917c:	68fb      	ldr	r3, [r7, #12]
 801917e:	681b      	ldr	r3, [r3, #0]
 8019180:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8019182:	68fb      	ldr	r3, [r7, #12]
 8019184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019186:	1c9a      	adds	r2, r3, #2
 8019188:	68fb      	ldr	r3, [r7, #12]
 801918a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 801918c:	68fb      	ldr	r3, [r7, #12]
 801918e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8019190:	b29b      	uxth	r3, r3
 8019192:	3b02      	subs	r3, #2
 8019194:	b29a      	uxth	r2, r3
 8019196:	68fb      	ldr	r3, [r7, #12]
 8019198:	87da      	strh	r2, [r3, #62]	@ 0x3e
 801919a:	e0b8      	b.n	801930e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 801919c:	68fb      	ldr	r3, [r7, #12]
 801919e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80191a0:	68fb      	ldr	r3, [r7, #12]
 80191a2:	681b      	ldr	r3, [r3, #0]
 80191a4:	330c      	adds	r3, #12
 80191a6:	7812      	ldrb	r2, [r2, #0]
 80191a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80191aa:	68fb      	ldr	r3, [r7, #12]
 80191ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80191ae:	1c5a      	adds	r2, r3, #1
 80191b0:	68fb      	ldr	r3, [r7, #12]
 80191b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80191b4:	68fb      	ldr	r3, [r7, #12]
 80191b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80191b8:	b29b      	uxth	r3, r3
 80191ba:	3b01      	subs	r3, #1
 80191bc:	b29a      	uxth	r2, r3
 80191be:	68fb      	ldr	r3, [r7, #12]
 80191c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80191c2:	e0a4      	b.n	801930e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80191c4:	68fb      	ldr	r3, [r7, #12]
 80191c6:	681b      	ldr	r3, [r3, #0]
 80191c8:	689b      	ldr	r3, [r3, #8]
 80191ca:	f003 0302 	and.w	r3, r3, #2
 80191ce:	2b02      	cmp	r3, #2
 80191d0:	d134      	bne.n	801923c <HAL_SPI_TransmitReceive+0x30a>
 80191d2:	68fb      	ldr	r3, [r7, #12]
 80191d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80191d6:	b29b      	uxth	r3, r3
 80191d8:	2b00      	cmp	r3, #0
 80191da:	d02f      	beq.n	801923c <HAL_SPI_TransmitReceive+0x30a>
 80191dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80191de:	2b01      	cmp	r3, #1
 80191e0:	d12c      	bne.n	801923c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80191e2:	68fb      	ldr	r3, [r7, #12]
 80191e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80191e6:	b29b      	uxth	r3, r3
 80191e8:	2b01      	cmp	r3, #1
 80191ea:	d912      	bls.n	8019212 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80191ec:	68fb      	ldr	r3, [r7, #12]
 80191ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80191f0:	881a      	ldrh	r2, [r3, #0]
 80191f2:	68fb      	ldr	r3, [r7, #12]
 80191f4:	681b      	ldr	r3, [r3, #0]
 80191f6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80191f8:	68fb      	ldr	r3, [r7, #12]
 80191fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80191fc:	1c9a      	adds	r2, r3, #2
 80191fe:	68fb      	ldr	r3, [r7, #12]
 8019200:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8019202:	68fb      	ldr	r3, [r7, #12]
 8019204:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8019206:	b29b      	uxth	r3, r3
 8019208:	3b02      	subs	r3, #2
 801920a:	b29a      	uxth	r2, r3
 801920c:	68fb      	ldr	r3, [r7, #12]
 801920e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8019210:	e012      	b.n	8019238 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8019212:	68fb      	ldr	r3, [r7, #12]
 8019214:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019216:	68fb      	ldr	r3, [r7, #12]
 8019218:	681b      	ldr	r3, [r3, #0]
 801921a:	330c      	adds	r3, #12
 801921c:	7812      	ldrb	r2, [r2, #0]
 801921e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8019220:	68fb      	ldr	r3, [r7, #12]
 8019222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019224:	1c5a      	adds	r2, r3, #1
 8019226:	68fb      	ldr	r3, [r7, #12]
 8019228:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 801922a:	68fb      	ldr	r3, [r7, #12]
 801922c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801922e:	b29b      	uxth	r3, r3
 8019230:	3b01      	subs	r3, #1
 8019232:	b29a      	uxth	r2, r3
 8019234:	68fb      	ldr	r3, [r7, #12]
 8019236:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8019238:	2300      	movs	r3, #0
 801923a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801923c:	68fb      	ldr	r3, [r7, #12]
 801923e:	681b      	ldr	r3, [r3, #0]
 8019240:	689b      	ldr	r3, [r3, #8]
 8019242:	f003 0301 	and.w	r3, r3, #1
 8019246:	2b01      	cmp	r3, #1
 8019248:	d148      	bne.n	80192dc <HAL_SPI_TransmitReceive+0x3aa>
 801924a:	68fb      	ldr	r3, [r7, #12]
 801924c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8019250:	b29b      	uxth	r3, r3
 8019252:	2b00      	cmp	r3, #0
 8019254:	d042      	beq.n	80192dc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8019256:	68fb      	ldr	r3, [r7, #12]
 8019258:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801925c:	b29b      	uxth	r3, r3
 801925e:	2b01      	cmp	r3, #1
 8019260:	d923      	bls.n	80192aa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8019262:	68fb      	ldr	r3, [r7, #12]
 8019264:	681b      	ldr	r3, [r3, #0]
 8019266:	68da      	ldr	r2, [r3, #12]
 8019268:	68fb      	ldr	r3, [r7, #12]
 801926a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801926c:	b292      	uxth	r2, r2
 801926e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8019270:	68fb      	ldr	r3, [r7, #12]
 8019272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019274:	1c9a      	adds	r2, r3, #2
 8019276:	68fb      	ldr	r3, [r7, #12]
 8019278:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 801927a:	68fb      	ldr	r3, [r7, #12]
 801927c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8019280:	b29b      	uxth	r3, r3
 8019282:	3b02      	subs	r3, #2
 8019284:	b29a      	uxth	r2, r3
 8019286:	68fb      	ldr	r3, [r7, #12]
 8019288:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 801928c:	68fb      	ldr	r3, [r7, #12]
 801928e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8019292:	b29b      	uxth	r3, r3
 8019294:	2b01      	cmp	r3, #1
 8019296:	d81f      	bhi.n	80192d8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8019298:	68fb      	ldr	r3, [r7, #12]
 801929a:	681b      	ldr	r3, [r3, #0]
 801929c:	685a      	ldr	r2, [r3, #4]
 801929e:	68fb      	ldr	r3, [r7, #12]
 80192a0:	681b      	ldr	r3, [r3, #0]
 80192a2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80192a6:	605a      	str	r2, [r3, #4]
 80192a8:	e016      	b.n	80192d8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80192aa:	68fb      	ldr	r3, [r7, #12]
 80192ac:	681b      	ldr	r3, [r3, #0]
 80192ae:	f103 020c 	add.w	r2, r3, #12
 80192b2:	68fb      	ldr	r3, [r7, #12]
 80192b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80192b6:	7812      	ldrb	r2, [r2, #0]
 80192b8:	b2d2      	uxtb	r2, r2
 80192ba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80192bc:	68fb      	ldr	r3, [r7, #12]
 80192be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80192c0:	1c5a      	adds	r2, r3, #1
 80192c2:	68fb      	ldr	r3, [r7, #12]
 80192c4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80192c6:	68fb      	ldr	r3, [r7, #12]
 80192c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80192cc:	b29b      	uxth	r3, r3
 80192ce:	3b01      	subs	r3, #1
 80192d0:	b29a      	uxth	r2, r3
 80192d2:	68fb      	ldr	r3, [r7, #12]
 80192d4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80192d8:	2301      	movs	r3, #1
 80192da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80192dc:	f7fe f876 	bl	80173cc <HAL_GetTick>
 80192e0:	4602      	mov	r2, r0
 80192e2:	6a3b      	ldr	r3, [r7, #32]
 80192e4:	1ad3      	subs	r3, r2, r3
 80192e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80192e8:	429a      	cmp	r2, r3
 80192ea:	d803      	bhi.n	80192f4 <HAL_SPI_TransmitReceive+0x3c2>
 80192ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80192ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80192f2:	d102      	bne.n	80192fa <HAL_SPI_TransmitReceive+0x3c8>
 80192f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80192f6:	2b00      	cmp	r3, #0
 80192f8:	d109      	bne.n	801930e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80192fa:	68fb      	ldr	r3, [r7, #12]
 80192fc:	2201      	movs	r2, #1
 80192fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8019302:	68fb      	ldr	r3, [r7, #12]
 8019304:	2200      	movs	r2, #0
 8019306:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 801930a:	2303      	movs	r3, #3
 801930c:	e02c      	b.n	8019368 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801930e:	68fb      	ldr	r3, [r7, #12]
 8019310:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8019312:	b29b      	uxth	r3, r3
 8019314:	2b00      	cmp	r3, #0
 8019316:	f47f af55 	bne.w	80191c4 <HAL_SPI_TransmitReceive+0x292>
 801931a:	68fb      	ldr	r3, [r7, #12]
 801931c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8019320:	b29b      	uxth	r3, r3
 8019322:	2b00      	cmp	r3, #0
 8019324:	f47f af4e 	bne.w	80191c4 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8019328:	6a3a      	ldr	r2, [r7, #32]
 801932a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801932c:	68f8      	ldr	r0, [r7, #12]
 801932e:	f000 f93d 	bl	80195ac <SPI_EndRxTxTransaction>
 8019332:	4603      	mov	r3, r0
 8019334:	2b00      	cmp	r3, #0
 8019336:	d008      	beq.n	801934a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8019338:	68fb      	ldr	r3, [r7, #12]
 801933a:	2220      	movs	r2, #32
 801933c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 801933e:	68fb      	ldr	r3, [r7, #12]
 8019340:	2200      	movs	r2, #0
 8019342:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8019346:	2301      	movs	r3, #1
 8019348:	e00e      	b.n	8019368 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 801934a:	68fb      	ldr	r3, [r7, #12]
 801934c:	2201      	movs	r2, #1
 801934e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8019352:	68fb      	ldr	r3, [r7, #12]
 8019354:	2200      	movs	r2, #0
 8019356:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801935a:	68fb      	ldr	r3, [r7, #12]
 801935c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801935e:	2b00      	cmp	r3, #0
 8019360:	d001      	beq.n	8019366 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8019362:	2301      	movs	r3, #1
 8019364:	e000      	b.n	8019368 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8019366:	2300      	movs	r3, #0
  }
}
 8019368:	4618      	mov	r0, r3
 801936a:	3728      	adds	r7, #40	@ 0x28
 801936c:	46bd      	mov	sp, r7
 801936e:	bd80      	pop	{r7, pc}

08019370 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8019370:	b580      	push	{r7, lr}
 8019372:	b088      	sub	sp, #32
 8019374:	af00      	add	r7, sp, #0
 8019376:	60f8      	str	r0, [r7, #12]
 8019378:	60b9      	str	r1, [r7, #8]
 801937a:	603b      	str	r3, [r7, #0]
 801937c:	4613      	mov	r3, r2
 801937e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8019380:	f7fe f824 	bl	80173cc <HAL_GetTick>
 8019384:	4602      	mov	r2, r0
 8019386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019388:	1a9b      	subs	r3, r3, r2
 801938a:	683a      	ldr	r2, [r7, #0]
 801938c:	4413      	add	r3, r2
 801938e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8019390:	f7fe f81c 	bl	80173cc <HAL_GetTick>
 8019394:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8019396:	4b39      	ldr	r3, [pc, #228]	@ (801947c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8019398:	681b      	ldr	r3, [r3, #0]
 801939a:	015b      	lsls	r3, r3, #5
 801939c:	0d1b      	lsrs	r3, r3, #20
 801939e:	69fa      	ldr	r2, [r7, #28]
 80193a0:	fb02 f303 	mul.w	r3, r2, r3
 80193a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80193a6:	e054      	b.n	8019452 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80193a8:	683b      	ldr	r3, [r7, #0]
 80193aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80193ae:	d050      	beq.n	8019452 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80193b0:	f7fe f80c 	bl	80173cc <HAL_GetTick>
 80193b4:	4602      	mov	r2, r0
 80193b6:	69bb      	ldr	r3, [r7, #24]
 80193b8:	1ad3      	subs	r3, r2, r3
 80193ba:	69fa      	ldr	r2, [r7, #28]
 80193bc:	429a      	cmp	r2, r3
 80193be:	d902      	bls.n	80193c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80193c0:	69fb      	ldr	r3, [r7, #28]
 80193c2:	2b00      	cmp	r3, #0
 80193c4:	d13d      	bne.n	8019442 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80193c6:	68fb      	ldr	r3, [r7, #12]
 80193c8:	681b      	ldr	r3, [r3, #0]
 80193ca:	685a      	ldr	r2, [r3, #4]
 80193cc:	68fb      	ldr	r3, [r7, #12]
 80193ce:	681b      	ldr	r3, [r3, #0]
 80193d0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80193d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80193d6:	68fb      	ldr	r3, [r7, #12]
 80193d8:	685b      	ldr	r3, [r3, #4]
 80193da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80193de:	d111      	bne.n	8019404 <SPI_WaitFlagStateUntilTimeout+0x94>
 80193e0:	68fb      	ldr	r3, [r7, #12]
 80193e2:	689b      	ldr	r3, [r3, #8]
 80193e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80193e8:	d004      	beq.n	80193f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80193ea:	68fb      	ldr	r3, [r7, #12]
 80193ec:	689b      	ldr	r3, [r3, #8]
 80193ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80193f2:	d107      	bne.n	8019404 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80193f4:	68fb      	ldr	r3, [r7, #12]
 80193f6:	681b      	ldr	r3, [r3, #0]
 80193f8:	681a      	ldr	r2, [r3, #0]
 80193fa:	68fb      	ldr	r3, [r7, #12]
 80193fc:	681b      	ldr	r3, [r3, #0]
 80193fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8019402:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8019404:	68fb      	ldr	r3, [r7, #12]
 8019406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019408:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801940c:	d10f      	bne.n	801942e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801940e:	68fb      	ldr	r3, [r7, #12]
 8019410:	681b      	ldr	r3, [r3, #0]
 8019412:	681a      	ldr	r2, [r3, #0]
 8019414:	68fb      	ldr	r3, [r7, #12]
 8019416:	681b      	ldr	r3, [r3, #0]
 8019418:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 801941c:	601a      	str	r2, [r3, #0]
 801941e:	68fb      	ldr	r3, [r7, #12]
 8019420:	681b      	ldr	r3, [r3, #0]
 8019422:	681a      	ldr	r2, [r3, #0]
 8019424:	68fb      	ldr	r3, [r7, #12]
 8019426:	681b      	ldr	r3, [r3, #0]
 8019428:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 801942c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801942e:	68fb      	ldr	r3, [r7, #12]
 8019430:	2201      	movs	r2, #1
 8019432:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8019436:	68fb      	ldr	r3, [r7, #12]
 8019438:	2200      	movs	r2, #0
 801943a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 801943e:	2303      	movs	r3, #3
 8019440:	e017      	b.n	8019472 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8019442:	697b      	ldr	r3, [r7, #20]
 8019444:	2b00      	cmp	r3, #0
 8019446:	d101      	bne.n	801944c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8019448:	2300      	movs	r3, #0
 801944a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801944c:	697b      	ldr	r3, [r7, #20]
 801944e:	3b01      	subs	r3, #1
 8019450:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8019452:	68fb      	ldr	r3, [r7, #12]
 8019454:	681b      	ldr	r3, [r3, #0]
 8019456:	689a      	ldr	r2, [r3, #8]
 8019458:	68bb      	ldr	r3, [r7, #8]
 801945a:	4013      	ands	r3, r2
 801945c:	68ba      	ldr	r2, [r7, #8]
 801945e:	429a      	cmp	r2, r3
 8019460:	bf0c      	ite	eq
 8019462:	2301      	moveq	r3, #1
 8019464:	2300      	movne	r3, #0
 8019466:	b2db      	uxtb	r3, r3
 8019468:	461a      	mov	r2, r3
 801946a:	79fb      	ldrb	r3, [r7, #7]
 801946c:	429a      	cmp	r2, r3
 801946e:	d19b      	bne.n	80193a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8019470:	2300      	movs	r3, #0
}
 8019472:	4618      	mov	r0, r3
 8019474:	3720      	adds	r7, #32
 8019476:	46bd      	mov	sp, r7
 8019478:	bd80      	pop	{r7, pc}
 801947a:	bf00      	nop
 801947c:	20000004 	.word	0x20000004

08019480 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8019480:	b580      	push	{r7, lr}
 8019482:	b08a      	sub	sp, #40	@ 0x28
 8019484:	af00      	add	r7, sp, #0
 8019486:	60f8      	str	r0, [r7, #12]
 8019488:	60b9      	str	r1, [r7, #8]
 801948a:	607a      	str	r2, [r7, #4]
 801948c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801948e:	2300      	movs	r3, #0
 8019490:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8019492:	f7fd ff9b 	bl	80173cc <HAL_GetTick>
 8019496:	4602      	mov	r2, r0
 8019498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801949a:	1a9b      	subs	r3, r3, r2
 801949c:	683a      	ldr	r2, [r7, #0]
 801949e:	4413      	add	r3, r2
 80194a0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80194a2:	f7fd ff93 	bl	80173cc <HAL_GetTick>
 80194a6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80194a8:	68fb      	ldr	r3, [r7, #12]
 80194aa:	681b      	ldr	r3, [r3, #0]
 80194ac:	330c      	adds	r3, #12
 80194ae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80194b0:	4b3d      	ldr	r3, [pc, #244]	@ (80195a8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80194b2:	681a      	ldr	r2, [r3, #0]
 80194b4:	4613      	mov	r3, r2
 80194b6:	009b      	lsls	r3, r3, #2
 80194b8:	4413      	add	r3, r2
 80194ba:	00da      	lsls	r2, r3, #3
 80194bc:	1ad3      	subs	r3, r2, r3
 80194be:	0d1b      	lsrs	r3, r3, #20
 80194c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80194c2:	fb02 f303 	mul.w	r3, r2, r3
 80194c6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80194c8:	e060      	b.n	801958c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80194ca:	68bb      	ldr	r3, [r7, #8]
 80194cc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80194d0:	d107      	bne.n	80194e2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80194d2:	687b      	ldr	r3, [r7, #4]
 80194d4:	2b00      	cmp	r3, #0
 80194d6:	d104      	bne.n	80194e2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80194d8:	69fb      	ldr	r3, [r7, #28]
 80194da:	781b      	ldrb	r3, [r3, #0]
 80194dc:	b2db      	uxtb	r3, r3
 80194de:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80194e0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80194e2:	683b      	ldr	r3, [r7, #0]
 80194e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80194e8:	d050      	beq.n	801958c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80194ea:	f7fd ff6f 	bl	80173cc <HAL_GetTick>
 80194ee:	4602      	mov	r2, r0
 80194f0:	6a3b      	ldr	r3, [r7, #32]
 80194f2:	1ad3      	subs	r3, r2, r3
 80194f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80194f6:	429a      	cmp	r2, r3
 80194f8:	d902      	bls.n	8019500 <SPI_WaitFifoStateUntilTimeout+0x80>
 80194fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194fc:	2b00      	cmp	r3, #0
 80194fe:	d13d      	bne.n	801957c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8019500:	68fb      	ldr	r3, [r7, #12]
 8019502:	681b      	ldr	r3, [r3, #0]
 8019504:	685a      	ldr	r2, [r3, #4]
 8019506:	68fb      	ldr	r3, [r7, #12]
 8019508:	681b      	ldr	r3, [r3, #0]
 801950a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 801950e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8019510:	68fb      	ldr	r3, [r7, #12]
 8019512:	685b      	ldr	r3, [r3, #4]
 8019514:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8019518:	d111      	bne.n	801953e <SPI_WaitFifoStateUntilTimeout+0xbe>
 801951a:	68fb      	ldr	r3, [r7, #12]
 801951c:	689b      	ldr	r3, [r3, #8]
 801951e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8019522:	d004      	beq.n	801952e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8019524:	68fb      	ldr	r3, [r7, #12]
 8019526:	689b      	ldr	r3, [r3, #8]
 8019528:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801952c:	d107      	bne.n	801953e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801952e:	68fb      	ldr	r3, [r7, #12]
 8019530:	681b      	ldr	r3, [r3, #0]
 8019532:	681a      	ldr	r2, [r3, #0]
 8019534:	68fb      	ldr	r3, [r7, #12]
 8019536:	681b      	ldr	r3, [r3, #0]
 8019538:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801953c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801953e:	68fb      	ldr	r3, [r7, #12]
 8019540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019542:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8019546:	d10f      	bne.n	8019568 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8019548:	68fb      	ldr	r3, [r7, #12]
 801954a:	681b      	ldr	r3, [r3, #0]
 801954c:	681a      	ldr	r2, [r3, #0]
 801954e:	68fb      	ldr	r3, [r7, #12]
 8019550:	681b      	ldr	r3, [r3, #0]
 8019552:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8019556:	601a      	str	r2, [r3, #0]
 8019558:	68fb      	ldr	r3, [r7, #12]
 801955a:	681b      	ldr	r3, [r3, #0]
 801955c:	681a      	ldr	r2, [r3, #0]
 801955e:	68fb      	ldr	r3, [r7, #12]
 8019560:	681b      	ldr	r3, [r3, #0]
 8019562:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8019566:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8019568:	68fb      	ldr	r3, [r7, #12]
 801956a:	2201      	movs	r2, #1
 801956c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8019570:	68fb      	ldr	r3, [r7, #12]
 8019572:	2200      	movs	r2, #0
 8019574:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8019578:	2303      	movs	r3, #3
 801957a:	e010      	b.n	801959e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801957c:	69bb      	ldr	r3, [r7, #24]
 801957e:	2b00      	cmp	r3, #0
 8019580:	d101      	bne.n	8019586 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8019582:	2300      	movs	r3, #0
 8019584:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8019586:	69bb      	ldr	r3, [r7, #24]
 8019588:	3b01      	subs	r3, #1
 801958a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 801958c:	68fb      	ldr	r3, [r7, #12]
 801958e:	681b      	ldr	r3, [r3, #0]
 8019590:	689a      	ldr	r2, [r3, #8]
 8019592:	68bb      	ldr	r3, [r7, #8]
 8019594:	4013      	ands	r3, r2
 8019596:	687a      	ldr	r2, [r7, #4]
 8019598:	429a      	cmp	r2, r3
 801959a:	d196      	bne.n	80194ca <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 801959c:	2300      	movs	r3, #0
}
 801959e:	4618      	mov	r0, r3
 80195a0:	3728      	adds	r7, #40	@ 0x28
 80195a2:	46bd      	mov	sp, r7
 80195a4:	bd80      	pop	{r7, pc}
 80195a6:	bf00      	nop
 80195a8:	20000004 	.word	0x20000004

080195ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80195ac:	b580      	push	{r7, lr}
 80195ae:	b086      	sub	sp, #24
 80195b0:	af02      	add	r7, sp, #8
 80195b2:	60f8      	str	r0, [r7, #12]
 80195b4:	60b9      	str	r1, [r7, #8]
 80195b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80195b8:	687b      	ldr	r3, [r7, #4]
 80195ba:	9300      	str	r3, [sp, #0]
 80195bc:	68bb      	ldr	r3, [r7, #8]
 80195be:	2200      	movs	r2, #0
 80195c0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80195c4:	68f8      	ldr	r0, [r7, #12]
 80195c6:	f7ff ff5b 	bl	8019480 <SPI_WaitFifoStateUntilTimeout>
 80195ca:	4603      	mov	r3, r0
 80195cc:	2b00      	cmp	r3, #0
 80195ce:	d007      	beq.n	80195e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80195d0:	68fb      	ldr	r3, [r7, #12]
 80195d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80195d4:	f043 0220 	orr.w	r2, r3, #32
 80195d8:	68fb      	ldr	r3, [r7, #12]
 80195da:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80195dc:	2303      	movs	r3, #3
 80195de:	e027      	b.n	8019630 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80195e0:	687b      	ldr	r3, [r7, #4]
 80195e2:	9300      	str	r3, [sp, #0]
 80195e4:	68bb      	ldr	r3, [r7, #8]
 80195e6:	2200      	movs	r2, #0
 80195e8:	2180      	movs	r1, #128	@ 0x80
 80195ea:	68f8      	ldr	r0, [r7, #12]
 80195ec:	f7ff fec0 	bl	8019370 <SPI_WaitFlagStateUntilTimeout>
 80195f0:	4603      	mov	r3, r0
 80195f2:	2b00      	cmp	r3, #0
 80195f4:	d007      	beq.n	8019606 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80195f6:	68fb      	ldr	r3, [r7, #12]
 80195f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80195fa:	f043 0220 	orr.w	r2, r3, #32
 80195fe:	68fb      	ldr	r3, [r7, #12]
 8019600:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8019602:	2303      	movs	r3, #3
 8019604:	e014      	b.n	8019630 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8019606:	687b      	ldr	r3, [r7, #4]
 8019608:	9300      	str	r3, [sp, #0]
 801960a:	68bb      	ldr	r3, [r7, #8]
 801960c:	2200      	movs	r2, #0
 801960e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8019612:	68f8      	ldr	r0, [r7, #12]
 8019614:	f7ff ff34 	bl	8019480 <SPI_WaitFifoStateUntilTimeout>
 8019618:	4603      	mov	r3, r0
 801961a:	2b00      	cmp	r3, #0
 801961c:	d007      	beq.n	801962e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801961e:	68fb      	ldr	r3, [r7, #12]
 8019620:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8019622:	f043 0220 	orr.w	r2, r3, #32
 8019626:	68fb      	ldr	r3, [r7, #12]
 8019628:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 801962a:	2303      	movs	r3, #3
 801962c:	e000      	b.n	8019630 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 801962e:	2300      	movs	r3, #0
}
 8019630:	4618      	mov	r0, r3
 8019632:	3710      	adds	r7, #16
 8019634:	46bd      	mov	sp, r7
 8019636:	bd80      	pop	{r7, pc}

08019638 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8019638:	b580      	push	{r7, lr}
 801963a:	b082      	sub	sp, #8
 801963c:	af00      	add	r7, sp, #0
 801963e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8019640:	687b      	ldr	r3, [r7, #4]
 8019642:	2b00      	cmp	r3, #0
 8019644:	d101      	bne.n	801964a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8019646:	2301      	movs	r3, #1
 8019648:	e049      	b.n	80196de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801964a:	687b      	ldr	r3, [r7, #4]
 801964c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8019650:	b2db      	uxtb	r3, r3
 8019652:	2b00      	cmp	r3, #0
 8019654:	d106      	bne.n	8019664 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8019656:	687b      	ldr	r3, [r7, #4]
 8019658:	2200      	movs	r2, #0
 801965a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801965e:	6878      	ldr	r0, [r7, #4]
 8019660:	f7e8 fd9e 	bl	80021a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8019664:	687b      	ldr	r3, [r7, #4]
 8019666:	2202      	movs	r2, #2
 8019668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801966c:	687b      	ldr	r3, [r7, #4]
 801966e:	681a      	ldr	r2, [r3, #0]
 8019670:	687b      	ldr	r3, [r7, #4]
 8019672:	3304      	adds	r3, #4
 8019674:	4619      	mov	r1, r3
 8019676:	4610      	mov	r0, r2
 8019678:	f000 fdd4 	bl	801a224 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801967c:	687b      	ldr	r3, [r7, #4]
 801967e:	2201      	movs	r2, #1
 8019680:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8019684:	687b      	ldr	r3, [r7, #4]
 8019686:	2201      	movs	r2, #1
 8019688:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801968c:	687b      	ldr	r3, [r7, #4]
 801968e:	2201      	movs	r2, #1
 8019690:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8019694:	687b      	ldr	r3, [r7, #4]
 8019696:	2201      	movs	r2, #1
 8019698:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801969c:	687b      	ldr	r3, [r7, #4]
 801969e:	2201      	movs	r2, #1
 80196a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80196a4:	687b      	ldr	r3, [r7, #4]
 80196a6:	2201      	movs	r2, #1
 80196a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80196ac:	687b      	ldr	r3, [r7, #4]
 80196ae:	2201      	movs	r2, #1
 80196b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80196b4:	687b      	ldr	r3, [r7, #4]
 80196b6:	2201      	movs	r2, #1
 80196b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80196bc:	687b      	ldr	r3, [r7, #4]
 80196be:	2201      	movs	r2, #1
 80196c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80196c4:	687b      	ldr	r3, [r7, #4]
 80196c6:	2201      	movs	r2, #1
 80196c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80196cc:	687b      	ldr	r3, [r7, #4]
 80196ce:	2201      	movs	r2, #1
 80196d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80196d4:	687b      	ldr	r3, [r7, #4]
 80196d6:	2201      	movs	r2, #1
 80196d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80196dc:	2300      	movs	r3, #0
}
 80196de:	4618      	mov	r0, r3
 80196e0:	3708      	adds	r7, #8
 80196e2:	46bd      	mov	sp, r7
 80196e4:	bd80      	pop	{r7, pc}
	...

080196e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80196e8:	b480      	push	{r7}
 80196ea:	b085      	sub	sp, #20
 80196ec:	af00      	add	r7, sp, #0
 80196ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80196f0:	687b      	ldr	r3, [r7, #4]
 80196f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80196f6:	b2db      	uxtb	r3, r3
 80196f8:	2b01      	cmp	r3, #1
 80196fa:	d001      	beq.n	8019700 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80196fc:	2301      	movs	r3, #1
 80196fe:	e033      	b.n	8019768 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8019700:	687b      	ldr	r3, [r7, #4]
 8019702:	2202      	movs	r2, #2
 8019704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8019708:	687b      	ldr	r3, [r7, #4]
 801970a:	681b      	ldr	r3, [r3, #0]
 801970c:	4a19      	ldr	r2, [pc, #100]	@ (8019774 <HAL_TIM_Base_Start+0x8c>)
 801970e:	4293      	cmp	r3, r2
 8019710:	d009      	beq.n	8019726 <HAL_TIM_Base_Start+0x3e>
 8019712:	687b      	ldr	r3, [r7, #4]
 8019714:	681b      	ldr	r3, [r3, #0]
 8019716:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801971a:	d004      	beq.n	8019726 <HAL_TIM_Base_Start+0x3e>
 801971c:	687b      	ldr	r3, [r7, #4]
 801971e:	681b      	ldr	r3, [r3, #0]
 8019720:	4a15      	ldr	r2, [pc, #84]	@ (8019778 <HAL_TIM_Base_Start+0x90>)
 8019722:	4293      	cmp	r3, r2
 8019724:	d115      	bne.n	8019752 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8019726:	687b      	ldr	r3, [r7, #4]
 8019728:	681b      	ldr	r3, [r3, #0]
 801972a:	689a      	ldr	r2, [r3, #8]
 801972c:	4b13      	ldr	r3, [pc, #76]	@ (801977c <HAL_TIM_Base_Start+0x94>)
 801972e:	4013      	ands	r3, r2
 8019730:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019732:	68fb      	ldr	r3, [r7, #12]
 8019734:	2b06      	cmp	r3, #6
 8019736:	d015      	beq.n	8019764 <HAL_TIM_Base_Start+0x7c>
 8019738:	68fb      	ldr	r3, [r7, #12]
 801973a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801973e:	d011      	beq.n	8019764 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	681b      	ldr	r3, [r3, #0]
 8019744:	681a      	ldr	r2, [r3, #0]
 8019746:	687b      	ldr	r3, [r7, #4]
 8019748:	681b      	ldr	r3, [r3, #0]
 801974a:	f042 0201 	orr.w	r2, r2, #1
 801974e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019750:	e008      	b.n	8019764 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8019752:	687b      	ldr	r3, [r7, #4]
 8019754:	681b      	ldr	r3, [r3, #0]
 8019756:	681a      	ldr	r2, [r3, #0]
 8019758:	687b      	ldr	r3, [r7, #4]
 801975a:	681b      	ldr	r3, [r3, #0]
 801975c:	f042 0201 	orr.w	r2, r2, #1
 8019760:	601a      	str	r2, [r3, #0]
 8019762:	e000      	b.n	8019766 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019764:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8019766:	2300      	movs	r3, #0
}
 8019768:	4618      	mov	r0, r3
 801976a:	3714      	adds	r7, #20
 801976c:	46bd      	mov	sp, r7
 801976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019772:	4770      	bx	lr
 8019774:	40012c00 	.word	0x40012c00
 8019778:	40014000 	.word	0x40014000
 801977c:	00010007 	.word	0x00010007

08019780 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8019780:	b480      	push	{r7}
 8019782:	b083      	sub	sp, #12
 8019784:	af00      	add	r7, sp, #0
 8019786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8019788:	687b      	ldr	r3, [r7, #4]
 801978a:	681b      	ldr	r3, [r3, #0]
 801978c:	6a1a      	ldr	r2, [r3, #32]
 801978e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8019792:	4013      	ands	r3, r2
 8019794:	2b00      	cmp	r3, #0
 8019796:	d10f      	bne.n	80197b8 <HAL_TIM_Base_Stop+0x38>
 8019798:	687b      	ldr	r3, [r7, #4]
 801979a:	681b      	ldr	r3, [r3, #0]
 801979c:	6a1a      	ldr	r2, [r3, #32]
 801979e:	f240 4344 	movw	r3, #1092	@ 0x444
 80197a2:	4013      	ands	r3, r2
 80197a4:	2b00      	cmp	r3, #0
 80197a6:	d107      	bne.n	80197b8 <HAL_TIM_Base_Stop+0x38>
 80197a8:	687b      	ldr	r3, [r7, #4]
 80197aa:	681b      	ldr	r3, [r3, #0]
 80197ac:	681a      	ldr	r2, [r3, #0]
 80197ae:	687b      	ldr	r3, [r7, #4]
 80197b0:	681b      	ldr	r3, [r3, #0]
 80197b2:	f022 0201 	bic.w	r2, r2, #1
 80197b6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80197b8:	687b      	ldr	r3, [r7, #4]
 80197ba:	2201      	movs	r2, #1
 80197bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80197c0:	2300      	movs	r3, #0
}
 80197c2:	4618      	mov	r0, r3
 80197c4:	370c      	adds	r7, #12
 80197c6:	46bd      	mov	sp, r7
 80197c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197cc:	4770      	bx	lr
	...

080197d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80197d0:	b480      	push	{r7}
 80197d2:	b085      	sub	sp, #20
 80197d4:	af00      	add	r7, sp, #0
 80197d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80197d8:	687b      	ldr	r3, [r7, #4]
 80197da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80197de:	b2db      	uxtb	r3, r3
 80197e0:	2b01      	cmp	r3, #1
 80197e2:	d001      	beq.n	80197e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80197e4:	2301      	movs	r3, #1
 80197e6:	e03b      	b.n	8019860 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80197e8:	687b      	ldr	r3, [r7, #4]
 80197ea:	2202      	movs	r2, #2
 80197ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80197f0:	687b      	ldr	r3, [r7, #4]
 80197f2:	681b      	ldr	r3, [r3, #0]
 80197f4:	68da      	ldr	r2, [r3, #12]
 80197f6:	687b      	ldr	r3, [r7, #4]
 80197f8:	681b      	ldr	r3, [r3, #0]
 80197fa:	f042 0201 	orr.w	r2, r2, #1
 80197fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8019800:	687b      	ldr	r3, [r7, #4]
 8019802:	681b      	ldr	r3, [r3, #0]
 8019804:	4a19      	ldr	r2, [pc, #100]	@ (801986c <HAL_TIM_Base_Start_IT+0x9c>)
 8019806:	4293      	cmp	r3, r2
 8019808:	d009      	beq.n	801981e <HAL_TIM_Base_Start_IT+0x4e>
 801980a:	687b      	ldr	r3, [r7, #4]
 801980c:	681b      	ldr	r3, [r3, #0]
 801980e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8019812:	d004      	beq.n	801981e <HAL_TIM_Base_Start_IT+0x4e>
 8019814:	687b      	ldr	r3, [r7, #4]
 8019816:	681b      	ldr	r3, [r3, #0]
 8019818:	4a15      	ldr	r2, [pc, #84]	@ (8019870 <HAL_TIM_Base_Start_IT+0xa0>)
 801981a:	4293      	cmp	r3, r2
 801981c:	d115      	bne.n	801984a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	681b      	ldr	r3, [r3, #0]
 8019822:	689a      	ldr	r2, [r3, #8]
 8019824:	4b13      	ldr	r3, [pc, #76]	@ (8019874 <HAL_TIM_Base_Start_IT+0xa4>)
 8019826:	4013      	ands	r3, r2
 8019828:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801982a:	68fb      	ldr	r3, [r7, #12]
 801982c:	2b06      	cmp	r3, #6
 801982e:	d015      	beq.n	801985c <HAL_TIM_Base_Start_IT+0x8c>
 8019830:	68fb      	ldr	r3, [r7, #12]
 8019832:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019836:	d011      	beq.n	801985c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8019838:	687b      	ldr	r3, [r7, #4]
 801983a:	681b      	ldr	r3, [r3, #0]
 801983c:	681a      	ldr	r2, [r3, #0]
 801983e:	687b      	ldr	r3, [r7, #4]
 8019840:	681b      	ldr	r3, [r3, #0]
 8019842:	f042 0201 	orr.w	r2, r2, #1
 8019846:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019848:	e008      	b.n	801985c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801984a:	687b      	ldr	r3, [r7, #4]
 801984c:	681b      	ldr	r3, [r3, #0]
 801984e:	681a      	ldr	r2, [r3, #0]
 8019850:	687b      	ldr	r3, [r7, #4]
 8019852:	681b      	ldr	r3, [r3, #0]
 8019854:	f042 0201 	orr.w	r2, r2, #1
 8019858:	601a      	str	r2, [r3, #0]
 801985a:	e000      	b.n	801985e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801985c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801985e:	2300      	movs	r3, #0
}
 8019860:	4618      	mov	r0, r3
 8019862:	3714      	adds	r7, #20
 8019864:	46bd      	mov	sp, r7
 8019866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801986a:	4770      	bx	lr
 801986c:	40012c00 	.word	0x40012c00
 8019870:	40014000 	.word	0x40014000
 8019874:	00010007 	.word	0x00010007

08019878 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8019878:	b580      	push	{r7, lr}
 801987a:	b082      	sub	sp, #8
 801987c:	af00      	add	r7, sp, #0
 801987e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8019880:	687b      	ldr	r3, [r7, #4]
 8019882:	2b00      	cmp	r3, #0
 8019884:	d101      	bne.n	801988a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8019886:	2301      	movs	r3, #1
 8019888:	e049      	b.n	801991e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801988a:	687b      	ldr	r3, [r7, #4]
 801988c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8019890:	b2db      	uxtb	r3, r3
 8019892:	2b00      	cmp	r3, #0
 8019894:	d106      	bne.n	80198a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8019896:	687b      	ldr	r3, [r7, #4]
 8019898:	2200      	movs	r2, #0
 801989a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801989e:	6878      	ldr	r0, [r7, #4]
 80198a0:	f7e8 fc5e 	bl	8002160 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80198a4:	687b      	ldr	r3, [r7, #4]
 80198a6:	2202      	movs	r2, #2
 80198a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	681a      	ldr	r2, [r3, #0]
 80198b0:	687b      	ldr	r3, [r7, #4]
 80198b2:	3304      	adds	r3, #4
 80198b4:	4619      	mov	r1, r3
 80198b6:	4610      	mov	r0, r2
 80198b8:	f000 fcb4 	bl	801a224 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80198bc:	687b      	ldr	r3, [r7, #4]
 80198be:	2201      	movs	r2, #1
 80198c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80198c4:	687b      	ldr	r3, [r7, #4]
 80198c6:	2201      	movs	r2, #1
 80198c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80198cc:	687b      	ldr	r3, [r7, #4]
 80198ce:	2201      	movs	r2, #1
 80198d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	2201      	movs	r2, #1
 80198d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80198dc:	687b      	ldr	r3, [r7, #4]
 80198de:	2201      	movs	r2, #1
 80198e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80198e4:	687b      	ldr	r3, [r7, #4]
 80198e6:	2201      	movs	r2, #1
 80198e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80198ec:	687b      	ldr	r3, [r7, #4]
 80198ee:	2201      	movs	r2, #1
 80198f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80198f4:	687b      	ldr	r3, [r7, #4]
 80198f6:	2201      	movs	r2, #1
 80198f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80198fc:	687b      	ldr	r3, [r7, #4]
 80198fe:	2201      	movs	r2, #1
 8019900:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8019904:	687b      	ldr	r3, [r7, #4]
 8019906:	2201      	movs	r2, #1
 8019908:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801990c:	687b      	ldr	r3, [r7, #4]
 801990e:	2201      	movs	r2, #1
 8019910:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	2201      	movs	r2, #1
 8019918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801991c:	2300      	movs	r3, #0
}
 801991e:	4618      	mov	r0, r3
 8019920:	3708      	adds	r7, #8
 8019922:	46bd      	mov	sp, r7
 8019924:	bd80      	pop	{r7, pc}
	...

08019928 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8019928:	b580      	push	{r7, lr}
 801992a:	b084      	sub	sp, #16
 801992c:	af00      	add	r7, sp, #0
 801992e:	6078      	str	r0, [r7, #4]
 8019930:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8019932:	683b      	ldr	r3, [r7, #0]
 8019934:	2b00      	cmp	r3, #0
 8019936:	d109      	bne.n	801994c <HAL_TIM_PWM_Start+0x24>
 8019938:	687b      	ldr	r3, [r7, #4]
 801993a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801993e:	b2db      	uxtb	r3, r3
 8019940:	2b01      	cmp	r3, #1
 8019942:	bf14      	ite	ne
 8019944:	2301      	movne	r3, #1
 8019946:	2300      	moveq	r3, #0
 8019948:	b2db      	uxtb	r3, r3
 801994a:	e03c      	b.n	80199c6 <HAL_TIM_PWM_Start+0x9e>
 801994c:	683b      	ldr	r3, [r7, #0]
 801994e:	2b04      	cmp	r3, #4
 8019950:	d109      	bne.n	8019966 <HAL_TIM_PWM_Start+0x3e>
 8019952:	687b      	ldr	r3, [r7, #4]
 8019954:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8019958:	b2db      	uxtb	r3, r3
 801995a:	2b01      	cmp	r3, #1
 801995c:	bf14      	ite	ne
 801995e:	2301      	movne	r3, #1
 8019960:	2300      	moveq	r3, #0
 8019962:	b2db      	uxtb	r3, r3
 8019964:	e02f      	b.n	80199c6 <HAL_TIM_PWM_Start+0x9e>
 8019966:	683b      	ldr	r3, [r7, #0]
 8019968:	2b08      	cmp	r3, #8
 801996a:	d109      	bne.n	8019980 <HAL_TIM_PWM_Start+0x58>
 801996c:	687b      	ldr	r3, [r7, #4]
 801996e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8019972:	b2db      	uxtb	r3, r3
 8019974:	2b01      	cmp	r3, #1
 8019976:	bf14      	ite	ne
 8019978:	2301      	movne	r3, #1
 801997a:	2300      	moveq	r3, #0
 801997c:	b2db      	uxtb	r3, r3
 801997e:	e022      	b.n	80199c6 <HAL_TIM_PWM_Start+0x9e>
 8019980:	683b      	ldr	r3, [r7, #0]
 8019982:	2b0c      	cmp	r3, #12
 8019984:	d109      	bne.n	801999a <HAL_TIM_PWM_Start+0x72>
 8019986:	687b      	ldr	r3, [r7, #4]
 8019988:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801998c:	b2db      	uxtb	r3, r3
 801998e:	2b01      	cmp	r3, #1
 8019990:	bf14      	ite	ne
 8019992:	2301      	movne	r3, #1
 8019994:	2300      	moveq	r3, #0
 8019996:	b2db      	uxtb	r3, r3
 8019998:	e015      	b.n	80199c6 <HAL_TIM_PWM_Start+0x9e>
 801999a:	683b      	ldr	r3, [r7, #0]
 801999c:	2b10      	cmp	r3, #16
 801999e:	d109      	bne.n	80199b4 <HAL_TIM_PWM_Start+0x8c>
 80199a0:	687b      	ldr	r3, [r7, #4]
 80199a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80199a6:	b2db      	uxtb	r3, r3
 80199a8:	2b01      	cmp	r3, #1
 80199aa:	bf14      	ite	ne
 80199ac:	2301      	movne	r3, #1
 80199ae:	2300      	moveq	r3, #0
 80199b0:	b2db      	uxtb	r3, r3
 80199b2:	e008      	b.n	80199c6 <HAL_TIM_PWM_Start+0x9e>
 80199b4:	687b      	ldr	r3, [r7, #4]
 80199b6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80199ba:	b2db      	uxtb	r3, r3
 80199bc:	2b01      	cmp	r3, #1
 80199be:	bf14      	ite	ne
 80199c0:	2301      	movne	r3, #1
 80199c2:	2300      	moveq	r3, #0
 80199c4:	b2db      	uxtb	r3, r3
 80199c6:	2b00      	cmp	r3, #0
 80199c8:	d001      	beq.n	80199ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80199ca:	2301      	movs	r3, #1
 80199cc:	e07e      	b.n	8019acc <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80199ce:	683b      	ldr	r3, [r7, #0]
 80199d0:	2b00      	cmp	r3, #0
 80199d2:	d104      	bne.n	80199de <HAL_TIM_PWM_Start+0xb6>
 80199d4:	687b      	ldr	r3, [r7, #4]
 80199d6:	2202      	movs	r2, #2
 80199d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80199dc:	e023      	b.n	8019a26 <HAL_TIM_PWM_Start+0xfe>
 80199de:	683b      	ldr	r3, [r7, #0]
 80199e0:	2b04      	cmp	r3, #4
 80199e2:	d104      	bne.n	80199ee <HAL_TIM_PWM_Start+0xc6>
 80199e4:	687b      	ldr	r3, [r7, #4]
 80199e6:	2202      	movs	r2, #2
 80199e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80199ec:	e01b      	b.n	8019a26 <HAL_TIM_PWM_Start+0xfe>
 80199ee:	683b      	ldr	r3, [r7, #0]
 80199f0:	2b08      	cmp	r3, #8
 80199f2:	d104      	bne.n	80199fe <HAL_TIM_PWM_Start+0xd6>
 80199f4:	687b      	ldr	r3, [r7, #4]
 80199f6:	2202      	movs	r2, #2
 80199f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80199fc:	e013      	b.n	8019a26 <HAL_TIM_PWM_Start+0xfe>
 80199fe:	683b      	ldr	r3, [r7, #0]
 8019a00:	2b0c      	cmp	r3, #12
 8019a02:	d104      	bne.n	8019a0e <HAL_TIM_PWM_Start+0xe6>
 8019a04:	687b      	ldr	r3, [r7, #4]
 8019a06:	2202      	movs	r2, #2
 8019a08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8019a0c:	e00b      	b.n	8019a26 <HAL_TIM_PWM_Start+0xfe>
 8019a0e:	683b      	ldr	r3, [r7, #0]
 8019a10:	2b10      	cmp	r3, #16
 8019a12:	d104      	bne.n	8019a1e <HAL_TIM_PWM_Start+0xf6>
 8019a14:	687b      	ldr	r3, [r7, #4]
 8019a16:	2202      	movs	r2, #2
 8019a18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8019a1c:	e003      	b.n	8019a26 <HAL_TIM_PWM_Start+0xfe>
 8019a1e:	687b      	ldr	r3, [r7, #4]
 8019a20:	2202      	movs	r2, #2
 8019a22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8019a26:	687b      	ldr	r3, [r7, #4]
 8019a28:	681b      	ldr	r3, [r3, #0]
 8019a2a:	2201      	movs	r2, #1
 8019a2c:	6839      	ldr	r1, [r7, #0]
 8019a2e:	4618      	mov	r0, r3
 8019a30:	f000 ff80 	bl	801a934 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8019a34:	687b      	ldr	r3, [r7, #4]
 8019a36:	681b      	ldr	r3, [r3, #0]
 8019a38:	4a26      	ldr	r2, [pc, #152]	@ (8019ad4 <HAL_TIM_PWM_Start+0x1ac>)
 8019a3a:	4293      	cmp	r3, r2
 8019a3c:	d009      	beq.n	8019a52 <HAL_TIM_PWM_Start+0x12a>
 8019a3e:	687b      	ldr	r3, [r7, #4]
 8019a40:	681b      	ldr	r3, [r3, #0]
 8019a42:	4a25      	ldr	r2, [pc, #148]	@ (8019ad8 <HAL_TIM_PWM_Start+0x1b0>)
 8019a44:	4293      	cmp	r3, r2
 8019a46:	d004      	beq.n	8019a52 <HAL_TIM_PWM_Start+0x12a>
 8019a48:	687b      	ldr	r3, [r7, #4]
 8019a4a:	681b      	ldr	r3, [r3, #0]
 8019a4c:	4a23      	ldr	r2, [pc, #140]	@ (8019adc <HAL_TIM_PWM_Start+0x1b4>)
 8019a4e:	4293      	cmp	r3, r2
 8019a50:	d101      	bne.n	8019a56 <HAL_TIM_PWM_Start+0x12e>
 8019a52:	2301      	movs	r3, #1
 8019a54:	e000      	b.n	8019a58 <HAL_TIM_PWM_Start+0x130>
 8019a56:	2300      	movs	r3, #0
 8019a58:	2b00      	cmp	r3, #0
 8019a5a:	d007      	beq.n	8019a6c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8019a5c:	687b      	ldr	r3, [r7, #4]
 8019a5e:	681b      	ldr	r3, [r3, #0]
 8019a60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8019a62:	687b      	ldr	r3, [r7, #4]
 8019a64:	681b      	ldr	r3, [r3, #0]
 8019a66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8019a6a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8019a6c:	687b      	ldr	r3, [r7, #4]
 8019a6e:	681b      	ldr	r3, [r3, #0]
 8019a70:	4a18      	ldr	r2, [pc, #96]	@ (8019ad4 <HAL_TIM_PWM_Start+0x1ac>)
 8019a72:	4293      	cmp	r3, r2
 8019a74:	d009      	beq.n	8019a8a <HAL_TIM_PWM_Start+0x162>
 8019a76:	687b      	ldr	r3, [r7, #4]
 8019a78:	681b      	ldr	r3, [r3, #0]
 8019a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8019a7e:	d004      	beq.n	8019a8a <HAL_TIM_PWM_Start+0x162>
 8019a80:	687b      	ldr	r3, [r7, #4]
 8019a82:	681b      	ldr	r3, [r3, #0]
 8019a84:	4a14      	ldr	r2, [pc, #80]	@ (8019ad8 <HAL_TIM_PWM_Start+0x1b0>)
 8019a86:	4293      	cmp	r3, r2
 8019a88:	d115      	bne.n	8019ab6 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8019a8a:	687b      	ldr	r3, [r7, #4]
 8019a8c:	681b      	ldr	r3, [r3, #0]
 8019a8e:	689a      	ldr	r2, [r3, #8]
 8019a90:	4b13      	ldr	r3, [pc, #76]	@ (8019ae0 <HAL_TIM_PWM_Start+0x1b8>)
 8019a92:	4013      	ands	r3, r2
 8019a94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019a96:	68fb      	ldr	r3, [r7, #12]
 8019a98:	2b06      	cmp	r3, #6
 8019a9a:	d015      	beq.n	8019ac8 <HAL_TIM_PWM_Start+0x1a0>
 8019a9c:	68fb      	ldr	r3, [r7, #12]
 8019a9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019aa2:	d011      	beq.n	8019ac8 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8019aa4:	687b      	ldr	r3, [r7, #4]
 8019aa6:	681b      	ldr	r3, [r3, #0]
 8019aa8:	681a      	ldr	r2, [r3, #0]
 8019aaa:	687b      	ldr	r3, [r7, #4]
 8019aac:	681b      	ldr	r3, [r3, #0]
 8019aae:	f042 0201 	orr.w	r2, r2, #1
 8019ab2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019ab4:	e008      	b.n	8019ac8 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8019ab6:	687b      	ldr	r3, [r7, #4]
 8019ab8:	681b      	ldr	r3, [r3, #0]
 8019aba:	681a      	ldr	r2, [r3, #0]
 8019abc:	687b      	ldr	r3, [r7, #4]
 8019abe:	681b      	ldr	r3, [r3, #0]
 8019ac0:	f042 0201 	orr.w	r2, r2, #1
 8019ac4:	601a      	str	r2, [r3, #0]
 8019ac6:	e000      	b.n	8019aca <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019ac8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8019aca:	2300      	movs	r3, #0
}
 8019acc:	4618      	mov	r0, r3
 8019ace:	3710      	adds	r7, #16
 8019ad0:	46bd      	mov	sp, r7
 8019ad2:	bd80      	pop	{r7, pc}
 8019ad4:	40012c00 	.word	0x40012c00
 8019ad8:	40014000 	.word	0x40014000
 8019adc:	40014400 	.word	0x40014400
 8019ae0:	00010007 	.word	0x00010007

08019ae4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8019ae4:	b580      	push	{r7, lr}
 8019ae6:	b082      	sub	sp, #8
 8019ae8:	af00      	add	r7, sp, #0
 8019aea:	6078      	str	r0, [r7, #4]
 8019aec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8019aee:	687b      	ldr	r3, [r7, #4]
 8019af0:	681b      	ldr	r3, [r3, #0]
 8019af2:	2200      	movs	r2, #0
 8019af4:	6839      	ldr	r1, [r7, #0]
 8019af6:	4618      	mov	r0, r3
 8019af8:	f000 ff1c 	bl	801a934 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8019afc:	687b      	ldr	r3, [r7, #4]
 8019afe:	681b      	ldr	r3, [r3, #0]
 8019b00:	4a39      	ldr	r2, [pc, #228]	@ (8019be8 <HAL_TIM_PWM_Stop+0x104>)
 8019b02:	4293      	cmp	r3, r2
 8019b04:	d009      	beq.n	8019b1a <HAL_TIM_PWM_Stop+0x36>
 8019b06:	687b      	ldr	r3, [r7, #4]
 8019b08:	681b      	ldr	r3, [r3, #0]
 8019b0a:	4a38      	ldr	r2, [pc, #224]	@ (8019bec <HAL_TIM_PWM_Stop+0x108>)
 8019b0c:	4293      	cmp	r3, r2
 8019b0e:	d004      	beq.n	8019b1a <HAL_TIM_PWM_Stop+0x36>
 8019b10:	687b      	ldr	r3, [r7, #4]
 8019b12:	681b      	ldr	r3, [r3, #0]
 8019b14:	4a36      	ldr	r2, [pc, #216]	@ (8019bf0 <HAL_TIM_PWM_Stop+0x10c>)
 8019b16:	4293      	cmp	r3, r2
 8019b18:	d101      	bne.n	8019b1e <HAL_TIM_PWM_Stop+0x3a>
 8019b1a:	2301      	movs	r3, #1
 8019b1c:	e000      	b.n	8019b20 <HAL_TIM_PWM_Stop+0x3c>
 8019b1e:	2300      	movs	r3, #0
 8019b20:	2b00      	cmp	r3, #0
 8019b22:	d017      	beq.n	8019b54 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8019b24:	687b      	ldr	r3, [r7, #4]
 8019b26:	681b      	ldr	r3, [r3, #0]
 8019b28:	6a1a      	ldr	r2, [r3, #32]
 8019b2a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8019b2e:	4013      	ands	r3, r2
 8019b30:	2b00      	cmp	r3, #0
 8019b32:	d10f      	bne.n	8019b54 <HAL_TIM_PWM_Stop+0x70>
 8019b34:	687b      	ldr	r3, [r7, #4]
 8019b36:	681b      	ldr	r3, [r3, #0]
 8019b38:	6a1a      	ldr	r2, [r3, #32]
 8019b3a:	f240 4344 	movw	r3, #1092	@ 0x444
 8019b3e:	4013      	ands	r3, r2
 8019b40:	2b00      	cmp	r3, #0
 8019b42:	d107      	bne.n	8019b54 <HAL_TIM_PWM_Stop+0x70>
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	681b      	ldr	r3, [r3, #0]
 8019b48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8019b4a:	687b      	ldr	r3, [r7, #4]
 8019b4c:	681b      	ldr	r3, [r3, #0]
 8019b4e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8019b52:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8019b54:	687b      	ldr	r3, [r7, #4]
 8019b56:	681b      	ldr	r3, [r3, #0]
 8019b58:	6a1a      	ldr	r2, [r3, #32]
 8019b5a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8019b5e:	4013      	ands	r3, r2
 8019b60:	2b00      	cmp	r3, #0
 8019b62:	d10f      	bne.n	8019b84 <HAL_TIM_PWM_Stop+0xa0>
 8019b64:	687b      	ldr	r3, [r7, #4]
 8019b66:	681b      	ldr	r3, [r3, #0]
 8019b68:	6a1a      	ldr	r2, [r3, #32]
 8019b6a:	f240 4344 	movw	r3, #1092	@ 0x444
 8019b6e:	4013      	ands	r3, r2
 8019b70:	2b00      	cmp	r3, #0
 8019b72:	d107      	bne.n	8019b84 <HAL_TIM_PWM_Stop+0xa0>
 8019b74:	687b      	ldr	r3, [r7, #4]
 8019b76:	681b      	ldr	r3, [r3, #0]
 8019b78:	681a      	ldr	r2, [r3, #0]
 8019b7a:	687b      	ldr	r3, [r7, #4]
 8019b7c:	681b      	ldr	r3, [r3, #0]
 8019b7e:	f022 0201 	bic.w	r2, r2, #1
 8019b82:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8019b84:	683b      	ldr	r3, [r7, #0]
 8019b86:	2b00      	cmp	r3, #0
 8019b88:	d104      	bne.n	8019b94 <HAL_TIM_PWM_Stop+0xb0>
 8019b8a:	687b      	ldr	r3, [r7, #4]
 8019b8c:	2201      	movs	r2, #1
 8019b8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8019b92:	e023      	b.n	8019bdc <HAL_TIM_PWM_Stop+0xf8>
 8019b94:	683b      	ldr	r3, [r7, #0]
 8019b96:	2b04      	cmp	r3, #4
 8019b98:	d104      	bne.n	8019ba4 <HAL_TIM_PWM_Stop+0xc0>
 8019b9a:	687b      	ldr	r3, [r7, #4]
 8019b9c:	2201      	movs	r2, #1
 8019b9e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8019ba2:	e01b      	b.n	8019bdc <HAL_TIM_PWM_Stop+0xf8>
 8019ba4:	683b      	ldr	r3, [r7, #0]
 8019ba6:	2b08      	cmp	r3, #8
 8019ba8:	d104      	bne.n	8019bb4 <HAL_TIM_PWM_Stop+0xd0>
 8019baa:	687b      	ldr	r3, [r7, #4]
 8019bac:	2201      	movs	r2, #1
 8019bae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8019bb2:	e013      	b.n	8019bdc <HAL_TIM_PWM_Stop+0xf8>
 8019bb4:	683b      	ldr	r3, [r7, #0]
 8019bb6:	2b0c      	cmp	r3, #12
 8019bb8:	d104      	bne.n	8019bc4 <HAL_TIM_PWM_Stop+0xe0>
 8019bba:	687b      	ldr	r3, [r7, #4]
 8019bbc:	2201      	movs	r2, #1
 8019bbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8019bc2:	e00b      	b.n	8019bdc <HAL_TIM_PWM_Stop+0xf8>
 8019bc4:	683b      	ldr	r3, [r7, #0]
 8019bc6:	2b10      	cmp	r3, #16
 8019bc8:	d104      	bne.n	8019bd4 <HAL_TIM_PWM_Stop+0xf0>
 8019bca:	687b      	ldr	r3, [r7, #4]
 8019bcc:	2201      	movs	r2, #1
 8019bce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8019bd2:	e003      	b.n	8019bdc <HAL_TIM_PWM_Stop+0xf8>
 8019bd4:	687b      	ldr	r3, [r7, #4]
 8019bd6:	2201      	movs	r2, #1
 8019bd8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8019bdc:	2300      	movs	r3, #0
}
 8019bde:	4618      	mov	r0, r3
 8019be0:	3708      	adds	r7, #8
 8019be2:	46bd      	mov	sp, r7
 8019be4:	bd80      	pop	{r7, pc}
 8019be6:	bf00      	nop
 8019be8:	40012c00 	.word	0x40012c00
 8019bec:	40014000 	.word	0x40014000
 8019bf0:	40014400 	.word	0x40014400

08019bf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8019bf4:	b580      	push	{r7, lr}
 8019bf6:	b084      	sub	sp, #16
 8019bf8:	af00      	add	r7, sp, #0
 8019bfa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8019bfc:	687b      	ldr	r3, [r7, #4]
 8019bfe:	681b      	ldr	r3, [r3, #0]
 8019c00:	68db      	ldr	r3, [r3, #12]
 8019c02:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8019c04:	687b      	ldr	r3, [r7, #4]
 8019c06:	681b      	ldr	r3, [r3, #0]
 8019c08:	691b      	ldr	r3, [r3, #16]
 8019c0a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8019c0c:	68bb      	ldr	r3, [r7, #8]
 8019c0e:	f003 0302 	and.w	r3, r3, #2
 8019c12:	2b00      	cmp	r3, #0
 8019c14:	d020      	beq.n	8019c58 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8019c16:	68fb      	ldr	r3, [r7, #12]
 8019c18:	f003 0302 	and.w	r3, r3, #2
 8019c1c:	2b00      	cmp	r3, #0
 8019c1e:	d01b      	beq.n	8019c58 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8019c20:	687b      	ldr	r3, [r7, #4]
 8019c22:	681b      	ldr	r3, [r3, #0]
 8019c24:	f06f 0202 	mvn.w	r2, #2
 8019c28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8019c2a:	687b      	ldr	r3, [r7, #4]
 8019c2c:	2201      	movs	r2, #1
 8019c2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8019c30:	687b      	ldr	r3, [r7, #4]
 8019c32:	681b      	ldr	r3, [r3, #0]
 8019c34:	699b      	ldr	r3, [r3, #24]
 8019c36:	f003 0303 	and.w	r3, r3, #3
 8019c3a:	2b00      	cmp	r3, #0
 8019c3c:	d003      	beq.n	8019c46 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8019c3e:	6878      	ldr	r0, [r7, #4]
 8019c40:	f000 fad1 	bl	801a1e6 <HAL_TIM_IC_CaptureCallback>
 8019c44:	e005      	b.n	8019c52 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8019c46:	6878      	ldr	r0, [r7, #4]
 8019c48:	f000 fac3 	bl	801a1d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8019c4c:	6878      	ldr	r0, [r7, #4]
 8019c4e:	f000 fad4 	bl	801a1fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8019c52:	687b      	ldr	r3, [r7, #4]
 8019c54:	2200      	movs	r2, #0
 8019c56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8019c58:	68bb      	ldr	r3, [r7, #8]
 8019c5a:	f003 0304 	and.w	r3, r3, #4
 8019c5e:	2b00      	cmp	r3, #0
 8019c60:	d020      	beq.n	8019ca4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8019c62:	68fb      	ldr	r3, [r7, #12]
 8019c64:	f003 0304 	and.w	r3, r3, #4
 8019c68:	2b00      	cmp	r3, #0
 8019c6a:	d01b      	beq.n	8019ca4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8019c6c:	687b      	ldr	r3, [r7, #4]
 8019c6e:	681b      	ldr	r3, [r3, #0]
 8019c70:	f06f 0204 	mvn.w	r2, #4
 8019c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8019c76:	687b      	ldr	r3, [r7, #4]
 8019c78:	2202      	movs	r2, #2
 8019c7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8019c7c:	687b      	ldr	r3, [r7, #4]
 8019c7e:	681b      	ldr	r3, [r3, #0]
 8019c80:	699b      	ldr	r3, [r3, #24]
 8019c82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8019c86:	2b00      	cmp	r3, #0
 8019c88:	d003      	beq.n	8019c92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8019c8a:	6878      	ldr	r0, [r7, #4]
 8019c8c:	f000 faab 	bl	801a1e6 <HAL_TIM_IC_CaptureCallback>
 8019c90:	e005      	b.n	8019c9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8019c92:	6878      	ldr	r0, [r7, #4]
 8019c94:	f000 fa9d 	bl	801a1d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8019c98:	6878      	ldr	r0, [r7, #4]
 8019c9a:	f000 faae 	bl	801a1fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	2200      	movs	r2, #0
 8019ca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8019ca4:	68bb      	ldr	r3, [r7, #8]
 8019ca6:	f003 0308 	and.w	r3, r3, #8
 8019caa:	2b00      	cmp	r3, #0
 8019cac:	d020      	beq.n	8019cf0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8019cae:	68fb      	ldr	r3, [r7, #12]
 8019cb0:	f003 0308 	and.w	r3, r3, #8
 8019cb4:	2b00      	cmp	r3, #0
 8019cb6:	d01b      	beq.n	8019cf0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8019cb8:	687b      	ldr	r3, [r7, #4]
 8019cba:	681b      	ldr	r3, [r3, #0]
 8019cbc:	f06f 0208 	mvn.w	r2, #8
 8019cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8019cc2:	687b      	ldr	r3, [r7, #4]
 8019cc4:	2204      	movs	r2, #4
 8019cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8019cc8:	687b      	ldr	r3, [r7, #4]
 8019cca:	681b      	ldr	r3, [r3, #0]
 8019ccc:	69db      	ldr	r3, [r3, #28]
 8019cce:	f003 0303 	and.w	r3, r3, #3
 8019cd2:	2b00      	cmp	r3, #0
 8019cd4:	d003      	beq.n	8019cde <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8019cd6:	6878      	ldr	r0, [r7, #4]
 8019cd8:	f000 fa85 	bl	801a1e6 <HAL_TIM_IC_CaptureCallback>
 8019cdc:	e005      	b.n	8019cea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8019cde:	6878      	ldr	r0, [r7, #4]
 8019ce0:	f000 fa77 	bl	801a1d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8019ce4:	6878      	ldr	r0, [r7, #4]
 8019ce6:	f000 fa88 	bl	801a1fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8019cea:	687b      	ldr	r3, [r7, #4]
 8019cec:	2200      	movs	r2, #0
 8019cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8019cf0:	68bb      	ldr	r3, [r7, #8]
 8019cf2:	f003 0310 	and.w	r3, r3, #16
 8019cf6:	2b00      	cmp	r3, #0
 8019cf8:	d020      	beq.n	8019d3c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8019cfa:	68fb      	ldr	r3, [r7, #12]
 8019cfc:	f003 0310 	and.w	r3, r3, #16
 8019d00:	2b00      	cmp	r3, #0
 8019d02:	d01b      	beq.n	8019d3c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8019d04:	687b      	ldr	r3, [r7, #4]
 8019d06:	681b      	ldr	r3, [r3, #0]
 8019d08:	f06f 0210 	mvn.w	r2, #16
 8019d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8019d0e:	687b      	ldr	r3, [r7, #4]
 8019d10:	2208      	movs	r2, #8
 8019d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8019d14:	687b      	ldr	r3, [r7, #4]
 8019d16:	681b      	ldr	r3, [r3, #0]
 8019d18:	69db      	ldr	r3, [r3, #28]
 8019d1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8019d1e:	2b00      	cmp	r3, #0
 8019d20:	d003      	beq.n	8019d2a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8019d22:	6878      	ldr	r0, [r7, #4]
 8019d24:	f000 fa5f 	bl	801a1e6 <HAL_TIM_IC_CaptureCallback>
 8019d28:	e005      	b.n	8019d36 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8019d2a:	6878      	ldr	r0, [r7, #4]
 8019d2c:	f000 fa51 	bl	801a1d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8019d30:	6878      	ldr	r0, [r7, #4]
 8019d32:	f000 fa62 	bl	801a1fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8019d36:	687b      	ldr	r3, [r7, #4]
 8019d38:	2200      	movs	r2, #0
 8019d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8019d3c:	68bb      	ldr	r3, [r7, #8]
 8019d3e:	f003 0301 	and.w	r3, r3, #1
 8019d42:	2b00      	cmp	r3, #0
 8019d44:	d00c      	beq.n	8019d60 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8019d46:	68fb      	ldr	r3, [r7, #12]
 8019d48:	f003 0301 	and.w	r3, r3, #1
 8019d4c:	2b00      	cmp	r3, #0
 8019d4e:	d007      	beq.n	8019d60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8019d50:	687b      	ldr	r3, [r7, #4]
 8019d52:	681b      	ldr	r3, [r3, #0]
 8019d54:	f06f 0201 	mvn.w	r2, #1
 8019d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8019d5a:	6878      	ldr	r0, [r7, #4]
 8019d5c:	f000 fa2f 	bl	801a1be <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8019d60:	68bb      	ldr	r3, [r7, #8]
 8019d62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019d66:	2b00      	cmp	r3, #0
 8019d68:	d104      	bne.n	8019d74 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8019d6a:	68bb      	ldr	r3, [r7, #8]
 8019d6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8019d70:	2b00      	cmp	r3, #0
 8019d72:	d00c      	beq.n	8019d8e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8019d74:	68fb      	ldr	r3, [r7, #12]
 8019d76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019d7a:	2b00      	cmp	r3, #0
 8019d7c:	d007      	beq.n	8019d8e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8019d7e:	687b      	ldr	r3, [r7, #4]
 8019d80:	681b      	ldr	r3, [r3, #0]
 8019d82:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8019d86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8019d88:	6878      	ldr	r0, [r7, #4]
 8019d8a:	f000 fee1 	bl	801ab50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8019d8e:	68bb      	ldr	r3, [r7, #8]
 8019d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019d94:	2b00      	cmp	r3, #0
 8019d96:	d00c      	beq.n	8019db2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8019d98:	68fb      	ldr	r3, [r7, #12]
 8019d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019d9e:	2b00      	cmp	r3, #0
 8019da0:	d007      	beq.n	8019db2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8019da2:	687b      	ldr	r3, [r7, #4]
 8019da4:	681b      	ldr	r3, [r3, #0]
 8019da6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8019daa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8019dac:	6878      	ldr	r0, [r7, #4]
 8019dae:	f000 fed9 	bl	801ab64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8019db2:	68bb      	ldr	r3, [r7, #8]
 8019db4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019db8:	2b00      	cmp	r3, #0
 8019dba:	d00c      	beq.n	8019dd6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8019dbc:	68fb      	ldr	r3, [r7, #12]
 8019dbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019dc2:	2b00      	cmp	r3, #0
 8019dc4:	d007      	beq.n	8019dd6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8019dc6:	687b      	ldr	r3, [r7, #4]
 8019dc8:	681b      	ldr	r3, [r3, #0]
 8019dca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8019dce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8019dd0:	6878      	ldr	r0, [r7, #4]
 8019dd2:	f000 fa1c 	bl	801a20e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8019dd6:	68bb      	ldr	r3, [r7, #8]
 8019dd8:	f003 0320 	and.w	r3, r3, #32
 8019ddc:	2b00      	cmp	r3, #0
 8019dde:	d00c      	beq.n	8019dfa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8019de0:	68fb      	ldr	r3, [r7, #12]
 8019de2:	f003 0320 	and.w	r3, r3, #32
 8019de6:	2b00      	cmp	r3, #0
 8019de8:	d007      	beq.n	8019dfa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8019dea:	687b      	ldr	r3, [r7, #4]
 8019dec:	681b      	ldr	r3, [r3, #0]
 8019dee:	f06f 0220 	mvn.w	r2, #32
 8019df2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8019df4:	6878      	ldr	r0, [r7, #4]
 8019df6:	f000 fea1 	bl	801ab3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8019dfa:	bf00      	nop
 8019dfc:	3710      	adds	r7, #16
 8019dfe:	46bd      	mov	sp, r7
 8019e00:	bd80      	pop	{r7, pc}
	...

08019e04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8019e04:	b580      	push	{r7, lr}
 8019e06:	b086      	sub	sp, #24
 8019e08:	af00      	add	r7, sp, #0
 8019e0a:	60f8      	str	r0, [r7, #12]
 8019e0c:	60b9      	str	r1, [r7, #8]
 8019e0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8019e10:	2300      	movs	r3, #0
 8019e12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8019e14:	68fb      	ldr	r3, [r7, #12]
 8019e16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8019e1a:	2b01      	cmp	r3, #1
 8019e1c:	d101      	bne.n	8019e22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8019e1e:	2302      	movs	r3, #2
 8019e20:	e0ff      	b.n	801a022 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8019e22:	68fb      	ldr	r3, [r7, #12]
 8019e24:	2201      	movs	r2, #1
 8019e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8019e2a:	687b      	ldr	r3, [r7, #4]
 8019e2c:	2b14      	cmp	r3, #20
 8019e2e:	f200 80f0 	bhi.w	801a012 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8019e32:	a201      	add	r2, pc, #4	@ (adr r2, 8019e38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8019e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019e38:	08019e8d 	.word	0x08019e8d
 8019e3c:	0801a013 	.word	0x0801a013
 8019e40:	0801a013 	.word	0x0801a013
 8019e44:	0801a013 	.word	0x0801a013
 8019e48:	08019ecd 	.word	0x08019ecd
 8019e4c:	0801a013 	.word	0x0801a013
 8019e50:	0801a013 	.word	0x0801a013
 8019e54:	0801a013 	.word	0x0801a013
 8019e58:	08019f0f 	.word	0x08019f0f
 8019e5c:	0801a013 	.word	0x0801a013
 8019e60:	0801a013 	.word	0x0801a013
 8019e64:	0801a013 	.word	0x0801a013
 8019e68:	08019f4f 	.word	0x08019f4f
 8019e6c:	0801a013 	.word	0x0801a013
 8019e70:	0801a013 	.word	0x0801a013
 8019e74:	0801a013 	.word	0x0801a013
 8019e78:	08019f91 	.word	0x08019f91
 8019e7c:	0801a013 	.word	0x0801a013
 8019e80:	0801a013 	.word	0x0801a013
 8019e84:	0801a013 	.word	0x0801a013
 8019e88:	08019fd1 	.word	0x08019fd1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8019e8c:	68fb      	ldr	r3, [r7, #12]
 8019e8e:	681b      	ldr	r3, [r3, #0]
 8019e90:	68b9      	ldr	r1, [r7, #8]
 8019e92:	4618      	mov	r0, r3
 8019e94:	f000 fa36 	bl	801a304 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8019e98:	68fb      	ldr	r3, [r7, #12]
 8019e9a:	681b      	ldr	r3, [r3, #0]
 8019e9c:	699a      	ldr	r2, [r3, #24]
 8019e9e:	68fb      	ldr	r3, [r7, #12]
 8019ea0:	681b      	ldr	r3, [r3, #0]
 8019ea2:	f042 0208 	orr.w	r2, r2, #8
 8019ea6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8019ea8:	68fb      	ldr	r3, [r7, #12]
 8019eaa:	681b      	ldr	r3, [r3, #0]
 8019eac:	699a      	ldr	r2, [r3, #24]
 8019eae:	68fb      	ldr	r3, [r7, #12]
 8019eb0:	681b      	ldr	r3, [r3, #0]
 8019eb2:	f022 0204 	bic.w	r2, r2, #4
 8019eb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8019eb8:	68fb      	ldr	r3, [r7, #12]
 8019eba:	681b      	ldr	r3, [r3, #0]
 8019ebc:	6999      	ldr	r1, [r3, #24]
 8019ebe:	68bb      	ldr	r3, [r7, #8]
 8019ec0:	691a      	ldr	r2, [r3, #16]
 8019ec2:	68fb      	ldr	r3, [r7, #12]
 8019ec4:	681b      	ldr	r3, [r3, #0]
 8019ec6:	430a      	orrs	r2, r1
 8019ec8:	619a      	str	r2, [r3, #24]
      break;
 8019eca:	e0a5      	b.n	801a018 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8019ecc:	68fb      	ldr	r3, [r7, #12]
 8019ece:	681b      	ldr	r3, [r3, #0]
 8019ed0:	68b9      	ldr	r1, [r7, #8]
 8019ed2:	4618      	mov	r0, r3
 8019ed4:	f000 fa92 	bl	801a3fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8019ed8:	68fb      	ldr	r3, [r7, #12]
 8019eda:	681b      	ldr	r3, [r3, #0]
 8019edc:	699a      	ldr	r2, [r3, #24]
 8019ede:	68fb      	ldr	r3, [r7, #12]
 8019ee0:	681b      	ldr	r3, [r3, #0]
 8019ee2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8019ee6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8019ee8:	68fb      	ldr	r3, [r7, #12]
 8019eea:	681b      	ldr	r3, [r3, #0]
 8019eec:	699a      	ldr	r2, [r3, #24]
 8019eee:	68fb      	ldr	r3, [r7, #12]
 8019ef0:	681b      	ldr	r3, [r3, #0]
 8019ef2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8019ef6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8019ef8:	68fb      	ldr	r3, [r7, #12]
 8019efa:	681b      	ldr	r3, [r3, #0]
 8019efc:	6999      	ldr	r1, [r3, #24]
 8019efe:	68bb      	ldr	r3, [r7, #8]
 8019f00:	691b      	ldr	r3, [r3, #16]
 8019f02:	021a      	lsls	r2, r3, #8
 8019f04:	68fb      	ldr	r3, [r7, #12]
 8019f06:	681b      	ldr	r3, [r3, #0]
 8019f08:	430a      	orrs	r2, r1
 8019f0a:	619a      	str	r2, [r3, #24]
      break;
 8019f0c:	e084      	b.n	801a018 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8019f0e:	68fb      	ldr	r3, [r7, #12]
 8019f10:	681b      	ldr	r3, [r3, #0]
 8019f12:	68b9      	ldr	r1, [r7, #8]
 8019f14:	4618      	mov	r0, r3
 8019f16:	f000 faeb 	bl	801a4f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8019f1a:	68fb      	ldr	r3, [r7, #12]
 8019f1c:	681b      	ldr	r3, [r3, #0]
 8019f1e:	69da      	ldr	r2, [r3, #28]
 8019f20:	68fb      	ldr	r3, [r7, #12]
 8019f22:	681b      	ldr	r3, [r3, #0]
 8019f24:	f042 0208 	orr.w	r2, r2, #8
 8019f28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8019f2a:	68fb      	ldr	r3, [r7, #12]
 8019f2c:	681b      	ldr	r3, [r3, #0]
 8019f2e:	69da      	ldr	r2, [r3, #28]
 8019f30:	68fb      	ldr	r3, [r7, #12]
 8019f32:	681b      	ldr	r3, [r3, #0]
 8019f34:	f022 0204 	bic.w	r2, r2, #4
 8019f38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8019f3a:	68fb      	ldr	r3, [r7, #12]
 8019f3c:	681b      	ldr	r3, [r3, #0]
 8019f3e:	69d9      	ldr	r1, [r3, #28]
 8019f40:	68bb      	ldr	r3, [r7, #8]
 8019f42:	691a      	ldr	r2, [r3, #16]
 8019f44:	68fb      	ldr	r3, [r7, #12]
 8019f46:	681b      	ldr	r3, [r3, #0]
 8019f48:	430a      	orrs	r2, r1
 8019f4a:	61da      	str	r2, [r3, #28]
      break;
 8019f4c:	e064      	b.n	801a018 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8019f4e:	68fb      	ldr	r3, [r7, #12]
 8019f50:	681b      	ldr	r3, [r3, #0]
 8019f52:	68b9      	ldr	r1, [r7, #8]
 8019f54:	4618      	mov	r0, r3
 8019f56:	f000 fb43 	bl	801a5e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8019f5a:	68fb      	ldr	r3, [r7, #12]
 8019f5c:	681b      	ldr	r3, [r3, #0]
 8019f5e:	69da      	ldr	r2, [r3, #28]
 8019f60:	68fb      	ldr	r3, [r7, #12]
 8019f62:	681b      	ldr	r3, [r3, #0]
 8019f64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8019f68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8019f6a:	68fb      	ldr	r3, [r7, #12]
 8019f6c:	681b      	ldr	r3, [r3, #0]
 8019f6e:	69da      	ldr	r2, [r3, #28]
 8019f70:	68fb      	ldr	r3, [r7, #12]
 8019f72:	681b      	ldr	r3, [r3, #0]
 8019f74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8019f78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8019f7a:	68fb      	ldr	r3, [r7, #12]
 8019f7c:	681b      	ldr	r3, [r3, #0]
 8019f7e:	69d9      	ldr	r1, [r3, #28]
 8019f80:	68bb      	ldr	r3, [r7, #8]
 8019f82:	691b      	ldr	r3, [r3, #16]
 8019f84:	021a      	lsls	r2, r3, #8
 8019f86:	68fb      	ldr	r3, [r7, #12]
 8019f88:	681b      	ldr	r3, [r3, #0]
 8019f8a:	430a      	orrs	r2, r1
 8019f8c:	61da      	str	r2, [r3, #28]
      break;
 8019f8e:	e043      	b.n	801a018 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8019f90:	68fb      	ldr	r3, [r7, #12]
 8019f92:	681b      	ldr	r3, [r3, #0]
 8019f94:	68b9      	ldr	r1, [r7, #8]
 8019f96:	4618      	mov	r0, r3
 8019f98:	f000 fb80 	bl	801a69c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8019f9c:	68fb      	ldr	r3, [r7, #12]
 8019f9e:	681b      	ldr	r3, [r3, #0]
 8019fa0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8019fa2:	68fb      	ldr	r3, [r7, #12]
 8019fa4:	681b      	ldr	r3, [r3, #0]
 8019fa6:	f042 0208 	orr.w	r2, r2, #8
 8019faa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8019fac:	68fb      	ldr	r3, [r7, #12]
 8019fae:	681b      	ldr	r3, [r3, #0]
 8019fb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8019fb2:	68fb      	ldr	r3, [r7, #12]
 8019fb4:	681b      	ldr	r3, [r3, #0]
 8019fb6:	f022 0204 	bic.w	r2, r2, #4
 8019fba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8019fbc:	68fb      	ldr	r3, [r7, #12]
 8019fbe:	681b      	ldr	r3, [r3, #0]
 8019fc0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8019fc2:	68bb      	ldr	r3, [r7, #8]
 8019fc4:	691a      	ldr	r2, [r3, #16]
 8019fc6:	68fb      	ldr	r3, [r7, #12]
 8019fc8:	681b      	ldr	r3, [r3, #0]
 8019fca:	430a      	orrs	r2, r1
 8019fcc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8019fce:	e023      	b.n	801a018 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8019fd0:	68fb      	ldr	r3, [r7, #12]
 8019fd2:	681b      	ldr	r3, [r3, #0]
 8019fd4:	68b9      	ldr	r1, [r7, #8]
 8019fd6:	4618      	mov	r0, r3
 8019fd8:	f000 fbb8 	bl	801a74c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8019fdc:	68fb      	ldr	r3, [r7, #12]
 8019fde:	681b      	ldr	r3, [r3, #0]
 8019fe0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8019fe2:	68fb      	ldr	r3, [r7, #12]
 8019fe4:	681b      	ldr	r3, [r3, #0]
 8019fe6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8019fea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8019fec:	68fb      	ldr	r3, [r7, #12]
 8019fee:	681b      	ldr	r3, [r3, #0]
 8019ff0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8019ff2:	68fb      	ldr	r3, [r7, #12]
 8019ff4:	681b      	ldr	r3, [r3, #0]
 8019ff6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8019ffa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8019ffc:	68fb      	ldr	r3, [r7, #12]
 8019ffe:	681b      	ldr	r3, [r3, #0]
 801a000:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801a002:	68bb      	ldr	r3, [r7, #8]
 801a004:	691b      	ldr	r3, [r3, #16]
 801a006:	021a      	lsls	r2, r3, #8
 801a008:	68fb      	ldr	r3, [r7, #12]
 801a00a:	681b      	ldr	r3, [r3, #0]
 801a00c:	430a      	orrs	r2, r1
 801a00e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 801a010:	e002      	b.n	801a018 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801a012:	2301      	movs	r3, #1
 801a014:	75fb      	strb	r3, [r7, #23]
      break;
 801a016:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801a018:	68fb      	ldr	r3, [r7, #12]
 801a01a:	2200      	movs	r2, #0
 801a01c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801a020:	7dfb      	ldrb	r3, [r7, #23]
}
 801a022:	4618      	mov	r0, r3
 801a024:	3718      	adds	r7, #24
 801a026:	46bd      	mov	sp, r7
 801a028:	bd80      	pop	{r7, pc}
 801a02a:	bf00      	nop

0801a02c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801a02c:	b580      	push	{r7, lr}
 801a02e:	b084      	sub	sp, #16
 801a030:	af00      	add	r7, sp, #0
 801a032:	6078      	str	r0, [r7, #4]
 801a034:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801a036:	2300      	movs	r3, #0
 801a038:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801a03a:	687b      	ldr	r3, [r7, #4]
 801a03c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801a040:	2b01      	cmp	r3, #1
 801a042:	d101      	bne.n	801a048 <HAL_TIM_ConfigClockSource+0x1c>
 801a044:	2302      	movs	r3, #2
 801a046:	e0b6      	b.n	801a1b6 <HAL_TIM_ConfigClockSource+0x18a>
 801a048:	687b      	ldr	r3, [r7, #4]
 801a04a:	2201      	movs	r2, #1
 801a04c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801a050:	687b      	ldr	r3, [r7, #4]
 801a052:	2202      	movs	r2, #2
 801a054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801a058:	687b      	ldr	r3, [r7, #4]
 801a05a:	681b      	ldr	r3, [r3, #0]
 801a05c:	689b      	ldr	r3, [r3, #8]
 801a05e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801a060:	68bb      	ldr	r3, [r7, #8]
 801a062:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801a066:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 801a06a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801a06c:	68bb      	ldr	r3, [r7, #8]
 801a06e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801a072:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801a074:	687b      	ldr	r3, [r7, #4]
 801a076:	681b      	ldr	r3, [r3, #0]
 801a078:	68ba      	ldr	r2, [r7, #8]
 801a07a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801a07c:	683b      	ldr	r3, [r7, #0]
 801a07e:	681b      	ldr	r3, [r3, #0]
 801a080:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801a084:	d03e      	beq.n	801a104 <HAL_TIM_ConfigClockSource+0xd8>
 801a086:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801a08a:	f200 8087 	bhi.w	801a19c <HAL_TIM_ConfigClockSource+0x170>
 801a08e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801a092:	f000 8086 	beq.w	801a1a2 <HAL_TIM_ConfigClockSource+0x176>
 801a096:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801a09a:	d87f      	bhi.n	801a19c <HAL_TIM_ConfigClockSource+0x170>
 801a09c:	2b70      	cmp	r3, #112	@ 0x70
 801a09e:	d01a      	beq.n	801a0d6 <HAL_TIM_ConfigClockSource+0xaa>
 801a0a0:	2b70      	cmp	r3, #112	@ 0x70
 801a0a2:	d87b      	bhi.n	801a19c <HAL_TIM_ConfigClockSource+0x170>
 801a0a4:	2b60      	cmp	r3, #96	@ 0x60
 801a0a6:	d050      	beq.n	801a14a <HAL_TIM_ConfigClockSource+0x11e>
 801a0a8:	2b60      	cmp	r3, #96	@ 0x60
 801a0aa:	d877      	bhi.n	801a19c <HAL_TIM_ConfigClockSource+0x170>
 801a0ac:	2b50      	cmp	r3, #80	@ 0x50
 801a0ae:	d03c      	beq.n	801a12a <HAL_TIM_ConfigClockSource+0xfe>
 801a0b0:	2b50      	cmp	r3, #80	@ 0x50
 801a0b2:	d873      	bhi.n	801a19c <HAL_TIM_ConfigClockSource+0x170>
 801a0b4:	2b40      	cmp	r3, #64	@ 0x40
 801a0b6:	d058      	beq.n	801a16a <HAL_TIM_ConfigClockSource+0x13e>
 801a0b8:	2b40      	cmp	r3, #64	@ 0x40
 801a0ba:	d86f      	bhi.n	801a19c <HAL_TIM_ConfigClockSource+0x170>
 801a0bc:	2b30      	cmp	r3, #48	@ 0x30
 801a0be:	d064      	beq.n	801a18a <HAL_TIM_ConfigClockSource+0x15e>
 801a0c0:	2b30      	cmp	r3, #48	@ 0x30
 801a0c2:	d86b      	bhi.n	801a19c <HAL_TIM_ConfigClockSource+0x170>
 801a0c4:	2b20      	cmp	r3, #32
 801a0c6:	d060      	beq.n	801a18a <HAL_TIM_ConfigClockSource+0x15e>
 801a0c8:	2b20      	cmp	r3, #32
 801a0ca:	d867      	bhi.n	801a19c <HAL_TIM_ConfigClockSource+0x170>
 801a0cc:	2b00      	cmp	r3, #0
 801a0ce:	d05c      	beq.n	801a18a <HAL_TIM_ConfigClockSource+0x15e>
 801a0d0:	2b10      	cmp	r3, #16
 801a0d2:	d05a      	beq.n	801a18a <HAL_TIM_ConfigClockSource+0x15e>
 801a0d4:	e062      	b.n	801a19c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801a0d6:	687b      	ldr	r3, [r7, #4]
 801a0d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801a0da:	683b      	ldr	r3, [r7, #0]
 801a0dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801a0de:	683b      	ldr	r3, [r7, #0]
 801a0e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801a0e2:	683b      	ldr	r3, [r7, #0]
 801a0e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801a0e6:	f000 fc05 	bl	801a8f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801a0ea:	687b      	ldr	r3, [r7, #4]
 801a0ec:	681b      	ldr	r3, [r3, #0]
 801a0ee:	689b      	ldr	r3, [r3, #8]
 801a0f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801a0f2:	68bb      	ldr	r3, [r7, #8]
 801a0f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 801a0f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801a0fa:	687b      	ldr	r3, [r7, #4]
 801a0fc:	681b      	ldr	r3, [r3, #0]
 801a0fe:	68ba      	ldr	r2, [r7, #8]
 801a100:	609a      	str	r2, [r3, #8]
      break;
 801a102:	e04f      	b.n	801a1a4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801a104:	687b      	ldr	r3, [r7, #4]
 801a106:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801a108:	683b      	ldr	r3, [r7, #0]
 801a10a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801a10c:	683b      	ldr	r3, [r7, #0]
 801a10e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801a110:	683b      	ldr	r3, [r7, #0]
 801a112:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801a114:	f000 fbee 	bl	801a8f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801a118:	687b      	ldr	r3, [r7, #4]
 801a11a:	681b      	ldr	r3, [r3, #0]
 801a11c:	689a      	ldr	r2, [r3, #8]
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	681b      	ldr	r3, [r3, #0]
 801a122:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801a126:	609a      	str	r2, [r3, #8]
      break;
 801a128:	e03c      	b.n	801a1a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801a12a:	687b      	ldr	r3, [r7, #4]
 801a12c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801a12e:	683b      	ldr	r3, [r7, #0]
 801a130:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801a132:	683b      	ldr	r3, [r7, #0]
 801a134:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801a136:	461a      	mov	r2, r3
 801a138:	f000 fb62 	bl	801a800 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801a13c:	687b      	ldr	r3, [r7, #4]
 801a13e:	681b      	ldr	r3, [r3, #0]
 801a140:	2150      	movs	r1, #80	@ 0x50
 801a142:	4618      	mov	r0, r3
 801a144:	f000 fbbb 	bl	801a8be <TIM_ITRx_SetConfig>
      break;
 801a148:	e02c      	b.n	801a1a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801a14a:	687b      	ldr	r3, [r7, #4]
 801a14c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801a14e:	683b      	ldr	r3, [r7, #0]
 801a150:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801a152:	683b      	ldr	r3, [r7, #0]
 801a154:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801a156:	461a      	mov	r2, r3
 801a158:	f000 fb81 	bl	801a85e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801a15c:	687b      	ldr	r3, [r7, #4]
 801a15e:	681b      	ldr	r3, [r3, #0]
 801a160:	2160      	movs	r1, #96	@ 0x60
 801a162:	4618      	mov	r0, r3
 801a164:	f000 fbab 	bl	801a8be <TIM_ITRx_SetConfig>
      break;
 801a168:	e01c      	b.n	801a1a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801a16e:	683b      	ldr	r3, [r7, #0]
 801a170:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801a172:	683b      	ldr	r3, [r7, #0]
 801a174:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801a176:	461a      	mov	r2, r3
 801a178:	f000 fb42 	bl	801a800 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801a17c:	687b      	ldr	r3, [r7, #4]
 801a17e:	681b      	ldr	r3, [r3, #0]
 801a180:	2140      	movs	r1, #64	@ 0x40
 801a182:	4618      	mov	r0, r3
 801a184:	f000 fb9b 	bl	801a8be <TIM_ITRx_SetConfig>
      break;
 801a188:	e00c      	b.n	801a1a4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801a18a:	687b      	ldr	r3, [r7, #4]
 801a18c:	681a      	ldr	r2, [r3, #0]
 801a18e:	683b      	ldr	r3, [r7, #0]
 801a190:	681b      	ldr	r3, [r3, #0]
 801a192:	4619      	mov	r1, r3
 801a194:	4610      	mov	r0, r2
 801a196:	f000 fb92 	bl	801a8be <TIM_ITRx_SetConfig>
      break;
 801a19a:	e003      	b.n	801a1a4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 801a19c:	2301      	movs	r3, #1
 801a19e:	73fb      	strb	r3, [r7, #15]
      break;
 801a1a0:	e000      	b.n	801a1a4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 801a1a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801a1a4:	687b      	ldr	r3, [r7, #4]
 801a1a6:	2201      	movs	r2, #1
 801a1a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801a1ac:	687b      	ldr	r3, [r7, #4]
 801a1ae:	2200      	movs	r2, #0
 801a1b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801a1b4:	7bfb      	ldrb	r3, [r7, #15]
}
 801a1b6:	4618      	mov	r0, r3
 801a1b8:	3710      	adds	r7, #16
 801a1ba:	46bd      	mov	sp, r7
 801a1bc:	bd80      	pop	{r7, pc}

0801a1be <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801a1be:	b480      	push	{r7}
 801a1c0:	b083      	sub	sp, #12
 801a1c2:	af00      	add	r7, sp, #0
 801a1c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 801a1c6:	bf00      	nop
 801a1c8:	370c      	adds	r7, #12
 801a1ca:	46bd      	mov	sp, r7
 801a1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1d0:	4770      	bx	lr

0801a1d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801a1d2:	b480      	push	{r7}
 801a1d4:	b083      	sub	sp, #12
 801a1d6:	af00      	add	r7, sp, #0
 801a1d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801a1da:	bf00      	nop
 801a1dc:	370c      	adds	r7, #12
 801a1de:	46bd      	mov	sp, r7
 801a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1e4:	4770      	bx	lr

0801a1e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801a1e6:	b480      	push	{r7}
 801a1e8:	b083      	sub	sp, #12
 801a1ea:	af00      	add	r7, sp, #0
 801a1ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801a1ee:	bf00      	nop
 801a1f0:	370c      	adds	r7, #12
 801a1f2:	46bd      	mov	sp, r7
 801a1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1f8:	4770      	bx	lr

0801a1fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801a1fa:	b480      	push	{r7}
 801a1fc:	b083      	sub	sp, #12
 801a1fe:	af00      	add	r7, sp, #0
 801a200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801a202:	bf00      	nop
 801a204:	370c      	adds	r7, #12
 801a206:	46bd      	mov	sp, r7
 801a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a20c:	4770      	bx	lr

0801a20e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801a20e:	b480      	push	{r7}
 801a210:	b083      	sub	sp, #12
 801a212:	af00      	add	r7, sp, #0
 801a214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801a216:	bf00      	nop
 801a218:	370c      	adds	r7, #12
 801a21a:	46bd      	mov	sp, r7
 801a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a220:	4770      	bx	lr
	...

0801a224 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801a224:	b480      	push	{r7}
 801a226:	b085      	sub	sp, #20
 801a228:	af00      	add	r7, sp, #0
 801a22a:	6078      	str	r0, [r7, #4]
 801a22c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801a22e:	687b      	ldr	r3, [r7, #4]
 801a230:	681b      	ldr	r3, [r3, #0]
 801a232:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801a234:	687b      	ldr	r3, [r7, #4]
 801a236:	4a30      	ldr	r2, [pc, #192]	@ (801a2f8 <TIM_Base_SetConfig+0xd4>)
 801a238:	4293      	cmp	r3, r2
 801a23a:	d003      	beq.n	801a244 <TIM_Base_SetConfig+0x20>
 801a23c:	687b      	ldr	r3, [r7, #4]
 801a23e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801a242:	d108      	bne.n	801a256 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801a244:	68fb      	ldr	r3, [r7, #12]
 801a246:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801a24a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801a24c:	683b      	ldr	r3, [r7, #0]
 801a24e:	685b      	ldr	r3, [r3, #4]
 801a250:	68fa      	ldr	r2, [r7, #12]
 801a252:	4313      	orrs	r3, r2
 801a254:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801a256:	687b      	ldr	r3, [r7, #4]
 801a258:	4a27      	ldr	r2, [pc, #156]	@ (801a2f8 <TIM_Base_SetConfig+0xd4>)
 801a25a:	4293      	cmp	r3, r2
 801a25c:	d00b      	beq.n	801a276 <TIM_Base_SetConfig+0x52>
 801a25e:	687b      	ldr	r3, [r7, #4]
 801a260:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801a264:	d007      	beq.n	801a276 <TIM_Base_SetConfig+0x52>
 801a266:	687b      	ldr	r3, [r7, #4]
 801a268:	4a24      	ldr	r2, [pc, #144]	@ (801a2fc <TIM_Base_SetConfig+0xd8>)
 801a26a:	4293      	cmp	r3, r2
 801a26c:	d003      	beq.n	801a276 <TIM_Base_SetConfig+0x52>
 801a26e:	687b      	ldr	r3, [r7, #4]
 801a270:	4a23      	ldr	r2, [pc, #140]	@ (801a300 <TIM_Base_SetConfig+0xdc>)
 801a272:	4293      	cmp	r3, r2
 801a274:	d108      	bne.n	801a288 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801a276:	68fb      	ldr	r3, [r7, #12]
 801a278:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801a27c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801a27e:	683b      	ldr	r3, [r7, #0]
 801a280:	68db      	ldr	r3, [r3, #12]
 801a282:	68fa      	ldr	r2, [r7, #12]
 801a284:	4313      	orrs	r3, r2
 801a286:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801a288:	68fb      	ldr	r3, [r7, #12]
 801a28a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801a28e:	683b      	ldr	r3, [r7, #0]
 801a290:	695b      	ldr	r3, [r3, #20]
 801a292:	4313      	orrs	r3, r2
 801a294:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801a296:	687b      	ldr	r3, [r7, #4]
 801a298:	68fa      	ldr	r2, [r7, #12]
 801a29a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801a29c:	683b      	ldr	r3, [r7, #0]
 801a29e:	689a      	ldr	r2, [r3, #8]
 801a2a0:	687b      	ldr	r3, [r7, #4]
 801a2a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801a2a4:	683b      	ldr	r3, [r7, #0]
 801a2a6:	681a      	ldr	r2, [r3, #0]
 801a2a8:	687b      	ldr	r3, [r7, #4]
 801a2aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801a2ac:	687b      	ldr	r3, [r7, #4]
 801a2ae:	4a12      	ldr	r2, [pc, #72]	@ (801a2f8 <TIM_Base_SetConfig+0xd4>)
 801a2b0:	4293      	cmp	r3, r2
 801a2b2:	d007      	beq.n	801a2c4 <TIM_Base_SetConfig+0xa0>
 801a2b4:	687b      	ldr	r3, [r7, #4]
 801a2b6:	4a11      	ldr	r2, [pc, #68]	@ (801a2fc <TIM_Base_SetConfig+0xd8>)
 801a2b8:	4293      	cmp	r3, r2
 801a2ba:	d003      	beq.n	801a2c4 <TIM_Base_SetConfig+0xa0>
 801a2bc:	687b      	ldr	r3, [r7, #4]
 801a2be:	4a10      	ldr	r2, [pc, #64]	@ (801a300 <TIM_Base_SetConfig+0xdc>)
 801a2c0:	4293      	cmp	r3, r2
 801a2c2:	d103      	bne.n	801a2cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801a2c4:	683b      	ldr	r3, [r7, #0]
 801a2c6:	691a      	ldr	r2, [r3, #16]
 801a2c8:	687b      	ldr	r3, [r7, #4]
 801a2ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801a2cc:	687b      	ldr	r3, [r7, #4]
 801a2ce:	2201      	movs	r2, #1
 801a2d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 801a2d2:	687b      	ldr	r3, [r7, #4]
 801a2d4:	691b      	ldr	r3, [r3, #16]
 801a2d6:	f003 0301 	and.w	r3, r3, #1
 801a2da:	2b01      	cmp	r3, #1
 801a2dc:	d105      	bne.n	801a2ea <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 801a2de:	687b      	ldr	r3, [r7, #4]
 801a2e0:	691b      	ldr	r3, [r3, #16]
 801a2e2:	f023 0201 	bic.w	r2, r3, #1
 801a2e6:	687b      	ldr	r3, [r7, #4]
 801a2e8:	611a      	str	r2, [r3, #16]
  }
}
 801a2ea:	bf00      	nop
 801a2ec:	3714      	adds	r7, #20
 801a2ee:	46bd      	mov	sp, r7
 801a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2f4:	4770      	bx	lr
 801a2f6:	bf00      	nop
 801a2f8:	40012c00 	.word	0x40012c00
 801a2fc:	40014000 	.word	0x40014000
 801a300:	40014400 	.word	0x40014400

0801a304 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801a304:	b480      	push	{r7}
 801a306:	b087      	sub	sp, #28
 801a308:	af00      	add	r7, sp, #0
 801a30a:	6078      	str	r0, [r7, #4]
 801a30c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801a30e:	687b      	ldr	r3, [r7, #4]
 801a310:	6a1b      	ldr	r3, [r3, #32]
 801a312:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801a314:	687b      	ldr	r3, [r7, #4]
 801a316:	6a1b      	ldr	r3, [r3, #32]
 801a318:	f023 0201 	bic.w	r2, r3, #1
 801a31c:	687b      	ldr	r3, [r7, #4]
 801a31e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801a320:	687b      	ldr	r3, [r7, #4]
 801a322:	685b      	ldr	r3, [r3, #4]
 801a324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801a326:	687b      	ldr	r3, [r7, #4]
 801a328:	699b      	ldr	r3, [r3, #24]
 801a32a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801a32c:	68fb      	ldr	r3, [r7, #12]
 801a32e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801a332:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801a336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801a338:	68fb      	ldr	r3, [r7, #12]
 801a33a:	f023 0303 	bic.w	r3, r3, #3
 801a33e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801a340:	683b      	ldr	r3, [r7, #0]
 801a342:	681b      	ldr	r3, [r3, #0]
 801a344:	68fa      	ldr	r2, [r7, #12]
 801a346:	4313      	orrs	r3, r2
 801a348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801a34a:	697b      	ldr	r3, [r7, #20]
 801a34c:	f023 0302 	bic.w	r3, r3, #2
 801a350:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801a352:	683b      	ldr	r3, [r7, #0]
 801a354:	689b      	ldr	r3, [r3, #8]
 801a356:	697a      	ldr	r2, [r7, #20]
 801a358:	4313      	orrs	r3, r2
 801a35a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801a35c:	687b      	ldr	r3, [r7, #4]
 801a35e:	4a24      	ldr	r2, [pc, #144]	@ (801a3f0 <TIM_OC1_SetConfig+0xec>)
 801a360:	4293      	cmp	r3, r2
 801a362:	d007      	beq.n	801a374 <TIM_OC1_SetConfig+0x70>
 801a364:	687b      	ldr	r3, [r7, #4]
 801a366:	4a23      	ldr	r2, [pc, #140]	@ (801a3f4 <TIM_OC1_SetConfig+0xf0>)
 801a368:	4293      	cmp	r3, r2
 801a36a:	d003      	beq.n	801a374 <TIM_OC1_SetConfig+0x70>
 801a36c:	687b      	ldr	r3, [r7, #4]
 801a36e:	4a22      	ldr	r2, [pc, #136]	@ (801a3f8 <TIM_OC1_SetConfig+0xf4>)
 801a370:	4293      	cmp	r3, r2
 801a372:	d10c      	bne.n	801a38e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801a374:	697b      	ldr	r3, [r7, #20]
 801a376:	f023 0308 	bic.w	r3, r3, #8
 801a37a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801a37c:	683b      	ldr	r3, [r7, #0]
 801a37e:	68db      	ldr	r3, [r3, #12]
 801a380:	697a      	ldr	r2, [r7, #20]
 801a382:	4313      	orrs	r3, r2
 801a384:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801a386:	697b      	ldr	r3, [r7, #20]
 801a388:	f023 0304 	bic.w	r3, r3, #4
 801a38c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801a38e:	687b      	ldr	r3, [r7, #4]
 801a390:	4a17      	ldr	r2, [pc, #92]	@ (801a3f0 <TIM_OC1_SetConfig+0xec>)
 801a392:	4293      	cmp	r3, r2
 801a394:	d007      	beq.n	801a3a6 <TIM_OC1_SetConfig+0xa2>
 801a396:	687b      	ldr	r3, [r7, #4]
 801a398:	4a16      	ldr	r2, [pc, #88]	@ (801a3f4 <TIM_OC1_SetConfig+0xf0>)
 801a39a:	4293      	cmp	r3, r2
 801a39c:	d003      	beq.n	801a3a6 <TIM_OC1_SetConfig+0xa2>
 801a39e:	687b      	ldr	r3, [r7, #4]
 801a3a0:	4a15      	ldr	r2, [pc, #84]	@ (801a3f8 <TIM_OC1_SetConfig+0xf4>)
 801a3a2:	4293      	cmp	r3, r2
 801a3a4:	d111      	bne.n	801a3ca <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801a3a6:	693b      	ldr	r3, [r7, #16]
 801a3a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801a3ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801a3ae:	693b      	ldr	r3, [r7, #16]
 801a3b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801a3b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801a3b6:	683b      	ldr	r3, [r7, #0]
 801a3b8:	695b      	ldr	r3, [r3, #20]
 801a3ba:	693a      	ldr	r2, [r7, #16]
 801a3bc:	4313      	orrs	r3, r2
 801a3be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801a3c0:	683b      	ldr	r3, [r7, #0]
 801a3c2:	699b      	ldr	r3, [r3, #24]
 801a3c4:	693a      	ldr	r2, [r7, #16]
 801a3c6:	4313      	orrs	r3, r2
 801a3c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801a3ca:	687b      	ldr	r3, [r7, #4]
 801a3cc:	693a      	ldr	r2, [r7, #16]
 801a3ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801a3d0:	687b      	ldr	r3, [r7, #4]
 801a3d2:	68fa      	ldr	r2, [r7, #12]
 801a3d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801a3d6:	683b      	ldr	r3, [r7, #0]
 801a3d8:	685a      	ldr	r2, [r3, #4]
 801a3da:	687b      	ldr	r3, [r7, #4]
 801a3dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801a3de:	687b      	ldr	r3, [r7, #4]
 801a3e0:	697a      	ldr	r2, [r7, #20]
 801a3e2:	621a      	str	r2, [r3, #32]
}
 801a3e4:	bf00      	nop
 801a3e6:	371c      	adds	r7, #28
 801a3e8:	46bd      	mov	sp, r7
 801a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3ee:	4770      	bx	lr
 801a3f0:	40012c00 	.word	0x40012c00
 801a3f4:	40014000 	.word	0x40014000
 801a3f8:	40014400 	.word	0x40014400

0801a3fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801a3fc:	b480      	push	{r7}
 801a3fe:	b087      	sub	sp, #28
 801a400:	af00      	add	r7, sp, #0
 801a402:	6078      	str	r0, [r7, #4]
 801a404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801a406:	687b      	ldr	r3, [r7, #4]
 801a408:	6a1b      	ldr	r3, [r3, #32]
 801a40a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801a40c:	687b      	ldr	r3, [r7, #4]
 801a40e:	6a1b      	ldr	r3, [r3, #32]
 801a410:	f023 0210 	bic.w	r2, r3, #16
 801a414:	687b      	ldr	r3, [r7, #4]
 801a416:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801a418:	687b      	ldr	r3, [r7, #4]
 801a41a:	685b      	ldr	r3, [r3, #4]
 801a41c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801a41e:	687b      	ldr	r3, [r7, #4]
 801a420:	699b      	ldr	r3, [r3, #24]
 801a422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801a424:	68fb      	ldr	r3, [r7, #12]
 801a426:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801a42a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801a42e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801a430:	68fb      	ldr	r3, [r7, #12]
 801a432:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801a436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801a438:	683b      	ldr	r3, [r7, #0]
 801a43a:	681b      	ldr	r3, [r3, #0]
 801a43c:	021b      	lsls	r3, r3, #8
 801a43e:	68fa      	ldr	r2, [r7, #12]
 801a440:	4313      	orrs	r3, r2
 801a442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801a444:	697b      	ldr	r3, [r7, #20]
 801a446:	f023 0320 	bic.w	r3, r3, #32
 801a44a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801a44c:	683b      	ldr	r3, [r7, #0]
 801a44e:	689b      	ldr	r3, [r3, #8]
 801a450:	011b      	lsls	r3, r3, #4
 801a452:	697a      	ldr	r2, [r7, #20]
 801a454:	4313      	orrs	r3, r2
 801a456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801a458:	687b      	ldr	r3, [r7, #4]
 801a45a:	4a22      	ldr	r2, [pc, #136]	@ (801a4e4 <TIM_OC2_SetConfig+0xe8>)
 801a45c:	4293      	cmp	r3, r2
 801a45e:	d10d      	bne.n	801a47c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801a460:	697b      	ldr	r3, [r7, #20]
 801a462:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801a466:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801a468:	683b      	ldr	r3, [r7, #0]
 801a46a:	68db      	ldr	r3, [r3, #12]
 801a46c:	011b      	lsls	r3, r3, #4
 801a46e:	697a      	ldr	r2, [r7, #20]
 801a470:	4313      	orrs	r3, r2
 801a472:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801a474:	697b      	ldr	r3, [r7, #20]
 801a476:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801a47a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801a47c:	687b      	ldr	r3, [r7, #4]
 801a47e:	4a19      	ldr	r2, [pc, #100]	@ (801a4e4 <TIM_OC2_SetConfig+0xe8>)
 801a480:	4293      	cmp	r3, r2
 801a482:	d007      	beq.n	801a494 <TIM_OC2_SetConfig+0x98>
 801a484:	687b      	ldr	r3, [r7, #4]
 801a486:	4a18      	ldr	r2, [pc, #96]	@ (801a4e8 <TIM_OC2_SetConfig+0xec>)
 801a488:	4293      	cmp	r3, r2
 801a48a:	d003      	beq.n	801a494 <TIM_OC2_SetConfig+0x98>
 801a48c:	687b      	ldr	r3, [r7, #4]
 801a48e:	4a17      	ldr	r2, [pc, #92]	@ (801a4ec <TIM_OC2_SetConfig+0xf0>)
 801a490:	4293      	cmp	r3, r2
 801a492:	d113      	bne.n	801a4bc <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801a494:	693b      	ldr	r3, [r7, #16]
 801a496:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801a49a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801a49c:	693b      	ldr	r3, [r7, #16]
 801a49e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801a4a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801a4a4:	683b      	ldr	r3, [r7, #0]
 801a4a6:	695b      	ldr	r3, [r3, #20]
 801a4a8:	009b      	lsls	r3, r3, #2
 801a4aa:	693a      	ldr	r2, [r7, #16]
 801a4ac:	4313      	orrs	r3, r2
 801a4ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801a4b0:	683b      	ldr	r3, [r7, #0]
 801a4b2:	699b      	ldr	r3, [r3, #24]
 801a4b4:	009b      	lsls	r3, r3, #2
 801a4b6:	693a      	ldr	r2, [r7, #16]
 801a4b8:	4313      	orrs	r3, r2
 801a4ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801a4bc:	687b      	ldr	r3, [r7, #4]
 801a4be:	693a      	ldr	r2, [r7, #16]
 801a4c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801a4c2:	687b      	ldr	r3, [r7, #4]
 801a4c4:	68fa      	ldr	r2, [r7, #12]
 801a4c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801a4c8:	683b      	ldr	r3, [r7, #0]
 801a4ca:	685a      	ldr	r2, [r3, #4]
 801a4cc:	687b      	ldr	r3, [r7, #4]
 801a4ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801a4d0:	687b      	ldr	r3, [r7, #4]
 801a4d2:	697a      	ldr	r2, [r7, #20]
 801a4d4:	621a      	str	r2, [r3, #32]
}
 801a4d6:	bf00      	nop
 801a4d8:	371c      	adds	r7, #28
 801a4da:	46bd      	mov	sp, r7
 801a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4e0:	4770      	bx	lr
 801a4e2:	bf00      	nop
 801a4e4:	40012c00 	.word	0x40012c00
 801a4e8:	40014000 	.word	0x40014000
 801a4ec:	40014400 	.word	0x40014400

0801a4f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801a4f0:	b480      	push	{r7}
 801a4f2:	b087      	sub	sp, #28
 801a4f4:	af00      	add	r7, sp, #0
 801a4f6:	6078      	str	r0, [r7, #4]
 801a4f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801a4fa:	687b      	ldr	r3, [r7, #4]
 801a4fc:	6a1b      	ldr	r3, [r3, #32]
 801a4fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801a500:	687b      	ldr	r3, [r7, #4]
 801a502:	6a1b      	ldr	r3, [r3, #32]
 801a504:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 801a508:	687b      	ldr	r3, [r7, #4]
 801a50a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801a50c:	687b      	ldr	r3, [r7, #4]
 801a50e:	685b      	ldr	r3, [r3, #4]
 801a510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801a512:	687b      	ldr	r3, [r7, #4]
 801a514:	69db      	ldr	r3, [r3, #28]
 801a516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801a518:	68fb      	ldr	r3, [r7, #12]
 801a51a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801a51e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801a522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801a524:	68fb      	ldr	r3, [r7, #12]
 801a526:	f023 0303 	bic.w	r3, r3, #3
 801a52a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801a52c:	683b      	ldr	r3, [r7, #0]
 801a52e:	681b      	ldr	r3, [r3, #0]
 801a530:	68fa      	ldr	r2, [r7, #12]
 801a532:	4313      	orrs	r3, r2
 801a534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801a536:	697b      	ldr	r3, [r7, #20]
 801a538:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801a53c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801a53e:	683b      	ldr	r3, [r7, #0]
 801a540:	689b      	ldr	r3, [r3, #8]
 801a542:	021b      	lsls	r3, r3, #8
 801a544:	697a      	ldr	r2, [r7, #20]
 801a546:	4313      	orrs	r3, r2
 801a548:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801a54a:	687b      	ldr	r3, [r7, #4]
 801a54c:	4a21      	ldr	r2, [pc, #132]	@ (801a5d4 <TIM_OC3_SetConfig+0xe4>)
 801a54e:	4293      	cmp	r3, r2
 801a550:	d10d      	bne.n	801a56e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801a552:	697b      	ldr	r3, [r7, #20]
 801a554:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801a558:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801a55a:	683b      	ldr	r3, [r7, #0]
 801a55c:	68db      	ldr	r3, [r3, #12]
 801a55e:	021b      	lsls	r3, r3, #8
 801a560:	697a      	ldr	r2, [r7, #20]
 801a562:	4313      	orrs	r3, r2
 801a564:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801a566:	697b      	ldr	r3, [r7, #20]
 801a568:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801a56c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801a56e:	687b      	ldr	r3, [r7, #4]
 801a570:	4a18      	ldr	r2, [pc, #96]	@ (801a5d4 <TIM_OC3_SetConfig+0xe4>)
 801a572:	4293      	cmp	r3, r2
 801a574:	d007      	beq.n	801a586 <TIM_OC3_SetConfig+0x96>
 801a576:	687b      	ldr	r3, [r7, #4]
 801a578:	4a17      	ldr	r2, [pc, #92]	@ (801a5d8 <TIM_OC3_SetConfig+0xe8>)
 801a57a:	4293      	cmp	r3, r2
 801a57c:	d003      	beq.n	801a586 <TIM_OC3_SetConfig+0x96>
 801a57e:	687b      	ldr	r3, [r7, #4]
 801a580:	4a16      	ldr	r2, [pc, #88]	@ (801a5dc <TIM_OC3_SetConfig+0xec>)
 801a582:	4293      	cmp	r3, r2
 801a584:	d113      	bne.n	801a5ae <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801a586:	693b      	ldr	r3, [r7, #16]
 801a588:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801a58c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801a58e:	693b      	ldr	r3, [r7, #16]
 801a590:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801a594:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801a596:	683b      	ldr	r3, [r7, #0]
 801a598:	695b      	ldr	r3, [r3, #20]
 801a59a:	011b      	lsls	r3, r3, #4
 801a59c:	693a      	ldr	r2, [r7, #16]
 801a59e:	4313      	orrs	r3, r2
 801a5a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801a5a2:	683b      	ldr	r3, [r7, #0]
 801a5a4:	699b      	ldr	r3, [r3, #24]
 801a5a6:	011b      	lsls	r3, r3, #4
 801a5a8:	693a      	ldr	r2, [r7, #16]
 801a5aa:	4313      	orrs	r3, r2
 801a5ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801a5ae:	687b      	ldr	r3, [r7, #4]
 801a5b0:	693a      	ldr	r2, [r7, #16]
 801a5b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801a5b4:	687b      	ldr	r3, [r7, #4]
 801a5b6:	68fa      	ldr	r2, [r7, #12]
 801a5b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801a5ba:	683b      	ldr	r3, [r7, #0]
 801a5bc:	685a      	ldr	r2, [r3, #4]
 801a5be:	687b      	ldr	r3, [r7, #4]
 801a5c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801a5c2:	687b      	ldr	r3, [r7, #4]
 801a5c4:	697a      	ldr	r2, [r7, #20]
 801a5c6:	621a      	str	r2, [r3, #32]
}
 801a5c8:	bf00      	nop
 801a5ca:	371c      	adds	r7, #28
 801a5cc:	46bd      	mov	sp, r7
 801a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5d2:	4770      	bx	lr
 801a5d4:	40012c00 	.word	0x40012c00
 801a5d8:	40014000 	.word	0x40014000
 801a5dc:	40014400 	.word	0x40014400

0801a5e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801a5e0:	b480      	push	{r7}
 801a5e2:	b087      	sub	sp, #28
 801a5e4:	af00      	add	r7, sp, #0
 801a5e6:	6078      	str	r0, [r7, #4]
 801a5e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801a5ea:	687b      	ldr	r3, [r7, #4]
 801a5ec:	6a1b      	ldr	r3, [r3, #32]
 801a5ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801a5f0:	687b      	ldr	r3, [r7, #4]
 801a5f2:	6a1b      	ldr	r3, [r3, #32]
 801a5f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801a5f8:	687b      	ldr	r3, [r7, #4]
 801a5fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801a5fc:	687b      	ldr	r3, [r7, #4]
 801a5fe:	685b      	ldr	r3, [r3, #4]
 801a600:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801a602:	687b      	ldr	r3, [r7, #4]
 801a604:	69db      	ldr	r3, [r3, #28]
 801a606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801a608:	68fb      	ldr	r3, [r7, #12]
 801a60a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801a60e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801a612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801a614:	68fb      	ldr	r3, [r7, #12]
 801a616:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801a61a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801a61c:	683b      	ldr	r3, [r7, #0]
 801a61e:	681b      	ldr	r3, [r3, #0]
 801a620:	021b      	lsls	r3, r3, #8
 801a622:	68fa      	ldr	r2, [r7, #12]
 801a624:	4313      	orrs	r3, r2
 801a626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801a628:	693b      	ldr	r3, [r7, #16]
 801a62a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801a62e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801a630:	683b      	ldr	r3, [r7, #0]
 801a632:	689b      	ldr	r3, [r3, #8]
 801a634:	031b      	lsls	r3, r3, #12
 801a636:	693a      	ldr	r2, [r7, #16]
 801a638:	4313      	orrs	r3, r2
 801a63a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801a63c:	687b      	ldr	r3, [r7, #4]
 801a63e:	4a14      	ldr	r2, [pc, #80]	@ (801a690 <TIM_OC4_SetConfig+0xb0>)
 801a640:	4293      	cmp	r3, r2
 801a642:	d007      	beq.n	801a654 <TIM_OC4_SetConfig+0x74>
 801a644:	687b      	ldr	r3, [r7, #4]
 801a646:	4a13      	ldr	r2, [pc, #76]	@ (801a694 <TIM_OC4_SetConfig+0xb4>)
 801a648:	4293      	cmp	r3, r2
 801a64a:	d003      	beq.n	801a654 <TIM_OC4_SetConfig+0x74>
 801a64c:	687b      	ldr	r3, [r7, #4]
 801a64e:	4a12      	ldr	r2, [pc, #72]	@ (801a698 <TIM_OC4_SetConfig+0xb8>)
 801a650:	4293      	cmp	r3, r2
 801a652:	d109      	bne.n	801a668 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801a654:	697b      	ldr	r3, [r7, #20]
 801a656:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801a65a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801a65c:	683b      	ldr	r3, [r7, #0]
 801a65e:	695b      	ldr	r3, [r3, #20]
 801a660:	019b      	lsls	r3, r3, #6
 801a662:	697a      	ldr	r2, [r7, #20]
 801a664:	4313      	orrs	r3, r2
 801a666:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801a668:	687b      	ldr	r3, [r7, #4]
 801a66a:	697a      	ldr	r2, [r7, #20]
 801a66c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801a66e:	687b      	ldr	r3, [r7, #4]
 801a670:	68fa      	ldr	r2, [r7, #12]
 801a672:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801a674:	683b      	ldr	r3, [r7, #0]
 801a676:	685a      	ldr	r2, [r3, #4]
 801a678:	687b      	ldr	r3, [r7, #4]
 801a67a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801a67c:	687b      	ldr	r3, [r7, #4]
 801a67e:	693a      	ldr	r2, [r7, #16]
 801a680:	621a      	str	r2, [r3, #32]
}
 801a682:	bf00      	nop
 801a684:	371c      	adds	r7, #28
 801a686:	46bd      	mov	sp, r7
 801a688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a68c:	4770      	bx	lr
 801a68e:	bf00      	nop
 801a690:	40012c00 	.word	0x40012c00
 801a694:	40014000 	.word	0x40014000
 801a698:	40014400 	.word	0x40014400

0801a69c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801a69c:	b480      	push	{r7}
 801a69e:	b087      	sub	sp, #28
 801a6a0:	af00      	add	r7, sp, #0
 801a6a2:	6078      	str	r0, [r7, #4]
 801a6a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801a6a6:	687b      	ldr	r3, [r7, #4]
 801a6a8:	6a1b      	ldr	r3, [r3, #32]
 801a6aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801a6ac:	687b      	ldr	r3, [r7, #4]
 801a6ae:	6a1b      	ldr	r3, [r3, #32]
 801a6b0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801a6b4:	687b      	ldr	r3, [r7, #4]
 801a6b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801a6b8:	687b      	ldr	r3, [r7, #4]
 801a6ba:	685b      	ldr	r3, [r3, #4]
 801a6bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801a6be:	687b      	ldr	r3, [r7, #4]
 801a6c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a6c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801a6c4:	68fb      	ldr	r3, [r7, #12]
 801a6c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801a6ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801a6ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801a6d0:	683b      	ldr	r3, [r7, #0]
 801a6d2:	681b      	ldr	r3, [r3, #0]
 801a6d4:	68fa      	ldr	r2, [r7, #12]
 801a6d6:	4313      	orrs	r3, r2
 801a6d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801a6da:	693b      	ldr	r3, [r7, #16]
 801a6dc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 801a6e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801a6e2:	683b      	ldr	r3, [r7, #0]
 801a6e4:	689b      	ldr	r3, [r3, #8]
 801a6e6:	041b      	lsls	r3, r3, #16
 801a6e8:	693a      	ldr	r2, [r7, #16]
 801a6ea:	4313      	orrs	r3, r2
 801a6ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801a6ee:	687b      	ldr	r3, [r7, #4]
 801a6f0:	4a13      	ldr	r2, [pc, #76]	@ (801a740 <TIM_OC5_SetConfig+0xa4>)
 801a6f2:	4293      	cmp	r3, r2
 801a6f4:	d007      	beq.n	801a706 <TIM_OC5_SetConfig+0x6a>
 801a6f6:	687b      	ldr	r3, [r7, #4]
 801a6f8:	4a12      	ldr	r2, [pc, #72]	@ (801a744 <TIM_OC5_SetConfig+0xa8>)
 801a6fa:	4293      	cmp	r3, r2
 801a6fc:	d003      	beq.n	801a706 <TIM_OC5_SetConfig+0x6a>
 801a6fe:	687b      	ldr	r3, [r7, #4]
 801a700:	4a11      	ldr	r2, [pc, #68]	@ (801a748 <TIM_OC5_SetConfig+0xac>)
 801a702:	4293      	cmp	r3, r2
 801a704:	d109      	bne.n	801a71a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801a706:	697b      	ldr	r3, [r7, #20]
 801a708:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801a70c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801a70e:	683b      	ldr	r3, [r7, #0]
 801a710:	695b      	ldr	r3, [r3, #20]
 801a712:	021b      	lsls	r3, r3, #8
 801a714:	697a      	ldr	r2, [r7, #20]
 801a716:	4313      	orrs	r3, r2
 801a718:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801a71a:	687b      	ldr	r3, [r7, #4]
 801a71c:	697a      	ldr	r2, [r7, #20]
 801a71e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801a720:	687b      	ldr	r3, [r7, #4]
 801a722:	68fa      	ldr	r2, [r7, #12]
 801a724:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801a726:	683b      	ldr	r3, [r7, #0]
 801a728:	685a      	ldr	r2, [r3, #4]
 801a72a:	687b      	ldr	r3, [r7, #4]
 801a72c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801a72e:	687b      	ldr	r3, [r7, #4]
 801a730:	693a      	ldr	r2, [r7, #16]
 801a732:	621a      	str	r2, [r3, #32]
}
 801a734:	bf00      	nop
 801a736:	371c      	adds	r7, #28
 801a738:	46bd      	mov	sp, r7
 801a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a73e:	4770      	bx	lr
 801a740:	40012c00 	.word	0x40012c00
 801a744:	40014000 	.word	0x40014000
 801a748:	40014400 	.word	0x40014400

0801a74c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801a74c:	b480      	push	{r7}
 801a74e:	b087      	sub	sp, #28
 801a750:	af00      	add	r7, sp, #0
 801a752:	6078      	str	r0, [r7, #4]
 801a754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801a756:	687b      	ldr	r3, [r7, #4]
 801a758:	6a1b      	ldr	r3, [r3, #32]
 801a75a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801a75c:	687b      	ldr	r3, [r7, #4]
 801a75e:	6a1b      	ldr	r3, [r3, #32]
 801a760:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 801a764:	687b      	ldr	r3, [r7, #4]
 801a766:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801a768:	687b      	ldr	r3, [r7, #4]
 801a76a:	685b      	ldr	r3, [r3, #4]
 801a76c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801a76e:	687b      	ldr	r3, [r7, #4]
 801a770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801a774:	68fb      	ldr	r3, [r7, #12]
 801a776:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801a77a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801a77e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801a780:	683b      	ldr	r3, [r7, #0]
 801a782:	681b      	ldr	r3, [r3, #0]
 801a784:	021b      	lsls	r3, r3, #8
 801a786:	68fa      	ldr	r2, [r7, #12]
 801a788:	4313      	orrs	r3, r2
 801a78a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801a78c:	693b      	ldr	r3, [r7, #16]
 801a78e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801a792:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801a794:	683b      	ldr	r3, [r7, #0]
 801a796:	689b      	ldr	r3, [r3, #8]
 801a798:	051b      	lsls	r3, r3, #20
 801a79a:	693a      	ldr	r2, [r7, #16]
 801a79c:	4313      	orrs	r3, r2
 801a79e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801a7a0:	687b      	ldr	r3, [r7, #4]
 801a7a2:	4a14      	ldr	r2, [pc, #80]	@ (801a7f4 <TIM_OC6_SetConfig+0xa8>)
 801a7a4:	4293      	cmp	r3, r2
 801a7a6:	d007      	beq.n	801a7b8 <TIM_OC6_SetConfig+0x6c>
 801a7a8:	687b      	ldr	r3, [r7, #4]
 801a7aa:	4a13      	ldr	r2, [pc, #76]	@ (801a7f8 <TIM_OC6_SetConfig+0xac>)
 801a7ac:	4293      	cmp	r3, r2
 801a7ae:	d003      	beq.n	801a7b8 <TIM_OC6_SetConfig+0x6c>
 801a7b0:	687b      	ldr	r3, [r7, #4]
 801a7b2:	4a12      	ldr	r2, [pc, #72]	@ (801a7fc <TIM_OC6_SetConfig+0xb0>)
 801a7b4:	4293      	cmp	r3, r2
 801a7b6:	d109      	bne.n	801a7cc <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801a7b8:	697b      	ldr	r3, [r7, #20]
 801a7ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801a7be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801a7c0:	683b      	ldr	r3, [r7, #0]
 801a7c2:	695b      	ldr	r3, [r3, #20]
 801a7c4:	029b      	lsls	r3, r3, #10
 801a7c6:	697a      	ldr	r2, [r7, #20]
 801a7c8:	4313      	orrs	r3, r2
 801a7ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801a7cc:	687b      	ldr	r3, [r7, #4]
 801a7ce:	697a      	ldr	r2, [r7, #20]
 801a7d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801a7d2:	687b      	ldr	r3, [r7, #4]
 801a7d4:	68fa      	ldr	r2, [r7, #12]
 801a7d6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801a7d8:	683b      	ldr	r3, [r7, #0]
 801a7da:	685a      	ldr	r2, [r3, #4]
 801a7dc:	687b      	ldr	r3, [r7, #4]
 801a7de:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801a7e0:	687b      	ldr	r3, [r7, #4]
 801a7e2:	693a      	ldr	r2, [r7, #16]
 801a7e4:	621a      	str	r2, [r3, #32]
}
 801a7e6:	bf00      	nop
 801a7e8:	371c      	adds	r7, #28
 801a7ea:	46bd      	mov	sp, r7
 801a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7f0:	4770      	bx	lr
 801a7f2:	bf00      	nop
 801a7f4:	40012c00 	.word	0x40012c00
 801a7f8:	40014000 	.word	0x40014000
 801a7fc:	40014400 	.word	0x40014400

0801a800 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801a800:	b480      	push	{r7}
 801a802:	b087      	sub	sp, #28
 801a804:	af00      	add	r7, sp, #0
 801a806:	60f8      	str	r0, [r7, #12]
 801a808:	60b9      	str	r1, [r7, #8]
 801a80a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801a80c:	68fb      	ldr	r3, [r7, #12]
 801a80e:	6a1b      	ldr	r3, [r3, #32]
 801a810:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801a812:	68fb      	ldr	r3, [r7, #12]
 801a814:	6a1b      	ldr	r3, [r3, #32]
 801a816:	f023 0201 	bic.w	r2, r3, #1
 801a81a:	68fb      	ldr	r3, [r7, #12]
 801a81c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801a81e:	68fb      	ldr	r3, [r7, #12]
 801a820:	699b      	ldr	r3, [r3, #24]
 801a822:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801a824:	693b      	ldr	r3, [r7, #16]
 801a826:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801a82a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801a82c:	687b      	ldr	r3, [r7, #4]
 801a82e:	011b      	lsls	r3, r3, #4
 801a830:	693a      	ldr	r2, [r7, #16]
 801a832:	4313      	orrs	r3, r2
 801a834:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801a836:	697b      	ldr	r3, [r7, #20]
 801a838:	f023 030a 	bic.w	r3, r3, #10
 801a83c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801a83e:	697a      	ldr	r2, [r7, #20]
 801a840:	68bb      	ldr	r3, [r7, #8]
 801a842:	4313      	orrs	r3, r2
 801a844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801a846:	68fb      	ldr	r3, [r7, #12]
 801a848:	693a      	ldr	r2, [r7, #16]
 801a84a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801a84c:	68fb      	ldr	r3, [r7, #12]
 801a84e:	697a      	ldr	r2, [r7, #20]
 801a850:	621a      	str	r2, [r3, #32]
}
 801a852:	bf00      	nop
 801a854:	371c      	adds	r7, #28
 801a856:	46bd      	mov	sp, r7
 801a858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a85c:	4770      	bx	lr

0801a85e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801a85e:	b480      	push	{r7}
 801a860:	b087      	sub	sp, #28
 801a862:	af00      	add	r7, sp, #0
 801a864:	60f8      	str	r0, [r7, #12]
 801a866:	60b9      	str	r1, [r7, #8]
 801a868:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 801a86a:	68fb      	ldr	r3, [r7, #12]
 801a86c:	6a1b      	ldr	r3, [r3, #32]
 801a86e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801a870:	68fb      	ldr	r3, [r7, #12]
 801a872:	6a1b      	ldr	r3, [r3, #32]
 801a874:	f023 0210 	bic.w	r2, r3, #16
 801a878:	68fb      	ldr	r3, [r7, #12]
 801a87a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801a87c:	68fb      	ldr	r3, [r7, #12]
 801a87e:	699b      	ldr	r3, [r3, #24]
 801a880:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801a882:	693b      	ldr	r3, [r7, #16]
 801a884:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 801a888:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801a88a:	687b      	ldr	r3, [r7, #4]
 801a88c:	031b      	lsls	r3, r3, #12
 801a88e:	693a      	ldr	r2, [r7, #16]
 801a890:	4313      	orrs	r3, r2
 801a892:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801a894:	697b      	ldr	r3, [r7, #20]
 801a896:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 801a89a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 801a89c:	68bb      	ldr	r3, [r7, #8]
 801a89e:	011b      	lsls	r3, r3, #4
 801a8a0:	697a      	ldr	r2, [r7, #20]
 801a8a2:	4313      	orrs	r3, r2
 801a8a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801a8a6:	68fb      	ldr	r3, [r7, #12]
 801a8a8:	693a      	ldr	r2, [r7, #16]
 801a8aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801a8ac:	68fb      	ldr	r3, [r7, #12]
 801a8ae:	697a      	ldr	r2, [r7, #20]
 801a8b0:	621a      	str	r2, [r3, #32]
}
 801a8b2:	bf00      	nop
 801a8b4:	371c      	adds	r7, #28
 801a8b6:	46bd      	mov	sp, r7
 801a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8bc:	4770      	bx	lr

0801a8be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801a8be:	b480      	push	{r7}
 801a8c0:	b085      	sub	sp, #20
 801a8c2:	af00      	add	r7, sp, #0
 801a8c4:	6078      	str	r0, [r7, #4]
 801a8c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801a8c8:	687b      	ldr	r3, [r7, #4]
 801a8ca:	689b      	ldr	r3, [r3, #8]
 801a8cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801a8ce:	68fb      	ldr	r3, [r7, #12]
 801a8d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801a8d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801a8d6:	683a      	ldr	r2, [r7, #0]
 801a8d8:	68fb      	ldr	r3, [r7, #12]
 801a8da:	4313      	orrs	r3, r2
 801a8dc:	f043 0307 	orr.w	r3, r3, #7
 801a8e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801a8e2:	687b      	ldr	r3, [r7, #4]
 801a8e4:	68fa      	ldr	r2, [r7, #12]
 801a8e6:	609a      	str	r2, [r3, #8]
}
 801a8e8:	bf00      	nop
 801a8ea:	3714      	adds	r7, #20
 801a8ec:	46bd      	mov	sp, r7
 801a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8f2:	4770      	bx	lr

0801a8f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801a8f4:	b480      	push	{r7}
 801a8f6:	b087      	sub	sp, #28
 801a8f8:	af00      	add	r7, sp, #0
 801a8fa:	60f8      	str	r0, [r7, #12]
 801a8fc:	60b9      	str	r1, [r7, #8]
 801a8fe:	607a      	str	r2, [r7, #4]
 801a900:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801a902:	68fb      	ldr	r3, [r7, #12]
 801a904:	689b      	ldr	r3, [r3, #8]
 801a906:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801a908:	697b      	ldr	r3, [r7, #20]
 801a90a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801a90e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801a910:	683b      	ldr	r3, [r7, #0]
 801a912:	021a      	lsls	r2, r3, #8
 801a914:	687b      	ldr	r3, [r7, #4]
 801a916:	431a      	orrs	r2, r3
 801a918:	68bb      	ldr	r3, [r7, #8]
 801a91a:	4313      	orrs	r3, r2
 801a91c:	697a      	ldr	r2, [r7, #20]
 801a91e:	4313      	orrs	r3, r2
 801a920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801a922:	68fb      	ldr	r3, [r7, #12]
 801a924:	697a      	ldr	r2, [r7, #20]
 801a926:	609a      	str	r2, [r3, #8]
}
 801a928:	bf00      	nop
 801a92a:	371c      	adds	r7, #28
 801a92c:	46bd      	mov	sp, r7
 801a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a932:	4770      	bx	lr

0801a934 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801a934:	b480      	push	{r7}
 801a936:	b087      	sub	sp, #28
 801a938:	af00      	add	r7, sp, #0
 801a93a:	60f8      	str	r0, [r7, #12]
 801a93c:	60b9      	str	r1, [r7, #8]
 801a93e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801a940:	68bb      	ldr	r3, [r7, #8]
 801a942:	f003 031f 	and.w	r3, r3, #31
 801a946:	2201      	movs	r2, #1
 801a948:	fa02 f303 	lsl.w	r3, r2, r3
 801a94c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801a94e:	68fb      	ldr	r3, [r7, #12]
 801a950:	6a1a      	ldr	r2, [r3, #32]
 801a952:	697b      	ldr	r3, [r7, #20]
 801a954:	43db      	mvns	r3, r3
 801a956:	401a      	ands	r2, r3
 801a958:	68fb      	ldr	r3, [r7, #12]
 801a95a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801a95c:	68fb      	ldr	r3, [r7, #12]
 801a95e:	6a1a      	ldr	r2, [r3, #32]
 801a960:	68bb      	ldr	r3, [r7, #8]
 801a962:	f003 031f 	and.w	r3, r3, #31
 801a966:	6879      	ldr	r1, [r7, #4]
 801a968:	fa01 f303 	lsl.w	r3, r1, r3
 801a96c:	431a      	orrs	r2, r3
 801a96e:	68fb      	ldr	r3, [r7, #12]
 801a970:	621a      	str	r2, [r3, #32]
}
 801a972:	bf00      	nop
 801a974:	371c      	adds	r7, #28
 801a976:	46bd      	mov	sp, r7
 801a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a97c:	4770      	bx	lr
	...

0801a980 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801a980:	b480      	push	{r7}
 801a982:	b085      	sub	sp, #20
 801a984:	af00      	add	r7, sp, #0
 801a986:	6078      	str	r0, [r7, #4]
 801a988:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801a98a:	687b      	ldr	r3, [r7, #4]
 801a98c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801a990:	2b01      	cmp	r3, #1
 801a992:	d101      	bne.n	801a998 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801a994:	2302      	movs	r3, #2
 801a996:	e04f      	b.n	801aa38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 801a998:	687b      	ldr	r3, [r7, #4]
 801a99a:	2201      	movs	r2, #1
 801a99c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a9a0:	687b      	ldr	r3, [r7, #4]
 801a9a2:	2202      	movs	r2, #2
 801a9a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801a9a8:	687b      	ldr	r3, [r7, #4]
 801a9aa:	681b      	ldr	r3, [r3, #0]
 801a9ac:	685b      	ldr	r3, [r3, #4]
 801a9ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801a9b0:	687b      	ldr	r3, [r7, #4]
 801a9b2:	681b      	ldr	r3, [r3, #0]
 801a9b4:	689b      	ldr	r3, [r3, #8]
 801a9b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	681b      	ldr	r3, [r3, #0]
 801a9bc:	4a21      	ldr	r2, [pc, #132]	@ (801aa44 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 801a9be:	4293      	cmp	r3, r2
 801a9c0:	d108      	bne.n	801a9d4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801a9c2:	68fb      	ldr	r3, [r7, #12]
 801a9c4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 801a9c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801a9ca:	683b      	ldr	r3, [r7, #0]
 801a9cc:	685b      	ldr	r3, [r3, #4]
 801a9ce:	68fa      	ldr	r2, [r7, #12]
 801a9d0:	4313      	orrs	r3, r2
 801a9d2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801a9d4:	68fb      	ldr	r3, [r7, #12]
 801a9d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801a9da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801a9dc:	683b      	ldr	r3, [r7, #0]
 801a9de:	681b      	ldr	r3, [r3, #0]
 801a9e0:	68fa      	ldr	r2, [r7, #12]
 801a9e2:	4313      	orrs	r3, r2
 801a9e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801a9e6:	687b      	ldr	r3, [r7, #4]
 801a9e8:	681b      	ldr	r3, [r3, #0]
 801a9ea:	68fa      	ldr	r2, [r7, #12]
 801a9ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801a9ee:	687b      	ldr	r3, [r7, #4]
 801a9f0:	681b      	ldr	r3, [r3, #0]
 801a9f2:	4a14      	ldr	r2, [pc, #80]	@ (801aa44 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 801a9f4:	4293      	cmp	r3, r2
 801a9f6:	d009      	beq.n	801aa0c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 801a9f8:	687b      	ldr	r3, [r7, #4]
 801a9fa:	681b      	ldr	r3, [r3, #0]
 801a9fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801aa00:	d004      	beq.n	801aa0c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 801aa02:	687b      	ldr	r3, [r7, #4]
 801aa04:	681b      	ldr	r3, [r3, #0]
 801aa06:	4a10      	ldr	r2, [pc, #64]	@ (801aa48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 801aa08:	4293      	cmp	r3, r2
 801aa0a:	d10c      	bne.n	801aa26 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801aa0c:	68bb      	ldr	r3, [r7, #8]
 801aa0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801aa12:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801aa14:	683b      	ldr	r3, [r7, #0]
 801aa16:	689b      	ldr	r3, [r3, #8]
 801aa18:	68ba      	ldr	r2, [r7, #8]
 801aa1a:	4313      	orrs	r3, r2
 801aa1c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801aa1e:	687b      	ldr	r3, [r7, #4]
 801aa20:	681b      	ldr	r3, [r3, #0]
 801aa22:	68ba      	ldr	r2, [r7, #8]
 801aa24:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801aa26:	687b      	ldr	r3, [r7, #4]
 801aa28:	2201      	movs	r2, #1
 801aa2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801aa2e:	687b      	ldr	r3, [r7, #4]
 801aa30:	2200      	movs	r2, #0
 801aa32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801aa36:	2300      	movs	r3, #0
}
 801aa38:	4618      	mov	r0, r3
 801aa3a:	3714      	adds	r7, #20
 801aa3c:	46bd      	mov	sp, r7
 801aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa42:	4770      	bx	lr
 801aa44:	40012c00 	.word	0x40012c00
 801aa48:	40014000 	.word	0x40014000

0801aa4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801aa4c:	b480      	push	{r7}
 801aa4e:	b085      	sub	sp, #20
 801aa50:	af00      	add	r7, sp, #0
 801aa52:	6078      	str	r0, [r7, #4]
 801aa54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801aa56:	2300      	movs	r3, #0
 801aa58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801aa5a:	687b      	ldr	r3, [r7, #4]
 801aa5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801aa60:	2b01      	cmp	r3, #1
 801aa62:	d101      	bne.n	801aa68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801aa64:	2302      	movs	r3, #2
 801aa66:	e060      	b.n	801ab2a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 801aa68:	687b      	ldr	r3, [r7, #4]
 801aa6a:	2201      	movs	r2, #1
 801aa6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801aa70:	68fb      	ldr	r3, [r7, #12]
 801aa72:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801aa76:	683b      	ldr	r3, [r7, #0]
 801aa78:	68db      	ldr	r3, [r3, #12]
 801aa7a:	4313      	orrs	r3, r2
 801aa7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801aa7e:	68fb      	ldr	r3, [r7, #12]
 801aa80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 801aa84:	683b      	ldr	r3, [r7, #0]
 801aa86:	689b      	ldr	r3, [r3, #8]
 801aa88:	4313      	orrs	r3, r2
 801aa8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801aa8c:	68fb      	ldr	r3, [r7, #12]
 801aa8e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801aa92:	683b      	ldr	r3, [r7, #0]
 801aa94:	685b      	ldr	r3, [r3, #4]
 801aa96:	4313      	orrs	r3, r2
 801aa98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801aa9a:	68fb      	ldr	r3, [r7, #12]
 801aa9c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 801aaa0:	683b      	ldr	r3, [r7, #0]
 801aaa2:	681b      	ldr	r3, [r3, #0]
 801aaa4:	4313      	orrs	r3, r2
 801aaa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801aaa8:	68fb      	ldr	r3, [r7, #12]
 801aaaa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801aaae:	683b      	ldr	r3, [r7, #0]
 801aab0:	691b      	ldr	r3, [r3, #16]
 801aab2:	4313      	orrs	r3, r2
 801aab4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801aab6:	68fb      	ldr	r3, [r7, #12]
 801aab8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 801aabc:	683b      	ldr	r3, [r7, #0]
 801aabe:	695b      	ldr	r3, [r3, #20]
 801aac0:	4313      	orrs	r3, r2
 801aac2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801aac4:	68fb      	ldr	r3, [r7, #12]
 801aac6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 801aaca:	683b      	ldr	r3, [r7, #0]
 801aacc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801aace:	4313      	orrs	r3, r2
 801aad0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801aad2:	68fb      	ldr	r3, [r7, #12]
 801aad4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 801aad8:	683b      	ldr	r3, [r7, #0]
 801aada:	699b      	ldr	r3, [r3, #24]
 801aadc:	041b      	lsls	r3, r3, #16
 801aade:	4313      	orrs	r3, r2
 801aae0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801aae2:	687b      	ldr	r3, [r7, #4]
 801aae4:	681b      	ldr	r3, [r3, #0]
 801aae6:	4a14      	ldr	r2, [pc, #80]	@ (801ab38 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 801aae8:	4293      	cmp	r3, r2
 801aaea:	d115      	bne.n	801ab18 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801aaec:	68fb      	ldr	r3, [r7, #12]
 801aaee:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 801aaf2:	683b      	ldr	r3, [r7, #0]
 801aaf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801aaf6:	051b      	lsls	r3, r3, #20
 801aaf8:	4313      	orrs	r3, r2
 801aafa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801aafc:	68fb      	ldr	r3, [r7, #12]
 801aafe:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 801ab02:	683b      	ldr	r3, [r7, #0]
 801ab04:	69db      	ldr	r3, [r3, #28]
 801ab06:	4313      	orrs	r3, r2
 801ab08:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801ab0a:	68fb      	ldr	r3, [r7, #12]
 801ab0c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 801ab10:	683b      	ldr	r3, [r7, #0]
 801ab12:	6a1b      	ldr	r3, [r3, #32]
 801ab14:	4313      	orrs	r3, r2
 801ab16:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801ab18:	687b      	ldr	r3, [r7, #4]
 801ab1a:	681b      	ldr	r3, [r3, #0]
 801ab1c:	68fa      	ldr	r2, [r7, #12]
 801ab1e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 801ab20:	687b      	ldr	r3, [r7, #4]
 801ab22:	2200      	movs	r2, #0
 801ab24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801ab28:	2300      	movs	r3, #0
}
 801ab2a:	4618      	mov	r0, r3
 801ab2c:	3714      	adds	r7, #20
 801ab2e:	46bd      	mov	sp, r7
 801ab30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab34:	4770      	bx	lr
 801ab36:	bf00      	nop
 801ab38:	40012c00 	.word	0x40012c00

0801ab3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801ab3c:	b480      	push	{r7}
 801ab3e:	b083      	sub	sp, #12
 801ab40:	af00      	add	r7, sp, #0
 801ab42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801ab44:	bf00      	nop
 801ab46:	370c      	adds	r7, #12
 801ab48:	46bd      	mov	sp, r7
 801ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab4e:	4770      	bx	lr

0801ab50 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801ab50:	b480      	push	{r7}
 801ab52:	b083      	sub	sp, #12
 801ab54:	af00      	add	r7, sp, #0
 801ab56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801ab58:	bf00      	nop
 801ab5a:	370c      	adds	r7, #12
 801ab5c:	46bd      	mov	sp, r7
 801ab5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab62:	4770      	bx	lr

0801ab64 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801ab64:	b480      	push	{r7}
 801ab66:	b083      	sub	sp, #12
 801ab68:	af00      	add	r7, sp, #0
 801ab6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801ab6c:	bf00      	nop
 801ab6e:	370c      	adds	r7, #12
 801ab70:	46bd      	mov	sp, r7
 801ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab76:	4770      	bx	lr

0801ab78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801ab78:	b580      	push	{r7, lr}
 801ab7a:	b082      	sub	sp, #8
 801ab7c:	af00      	add	r7, sp, #0
 801ab7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801ab80:	687b      	ldr	r3, [r7, #4]
 801ab82:	2b00      	cmp	r3, #0
 801ab84:	d101      	bne.n	801ab8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801ab86:	2301      	movs	r3, #1
 801ab88:	e040      	b.n	801ac0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801ab8a:	687b      	ldr	r3, [r7, #4]
 801ab8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801ab8e:	2b00      	cmp	r3, #0
 801ab90:	d106      	bne.n	801aba0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801ab92:	687b      	ldr	r3, [r7, #4]
 801ab94:	2200      	movs	r2, #0
 801ab96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801ab9a:	6878      	ldr	r0, [r7, #4]
 801ab9c:	f7e7 fbfe 	bl	800239c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801aba0:	687b      	ldr	r3, [r7, #4]
 801aba2:	2224      	movs	r2, #36	@ 0x24
 801aba4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 801aba6:	687b      	ldr	r3, [r7, #4]
 801aba8:	681b      	ldr	r3, [r3, #0]
 801abaa:	681a      	ldr	r2, [r3, #0]
 801abac:	687b      	ldr	r3, [r7, #4]
 801abae:	681b      	ldr	r3, [r3, #0]
 801abb0:	f022 0201 	bic.w	r2, r2, #1
 801abb4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801abb6:	687b      	ldr	r3, [r7, #4]
 801abb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801abba:	2b00      	cmp	r3, #0
 801abbc:	d002      	beq.n	801abc4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 801abbe:	6878      	ldr	r0, [r7, #4]
 801abc0:	f000 fe7e 	bl	801b8c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801abc4:	6878      	ldr	r0, [r7, #4]
 801abc6:	f000 fc21 	bl	801b40c <UART_SetConfig>
 801abca:	4603      	mov	r3, r0
 801abcc:	2b01      	cmp	r3, #1
 801abce:	d101      	bne.n	801abd4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 801abd0:	2301      	movs	r3, #1
 801abd2:	e01b      	b.n	801ac0c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801abd4:	687b      	ldr	r3, [r7, #4]
 801abd6:	681b      	ldr	r3, [r3, #0]
 801abd8:	685a      	ldr	r2, [r3, #4]
 801abda:	687b      	ldr	r3, [r7, #4]
 801abdc:	681b      	ldr	r3, [r3, #0]
 801abde:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801abe2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801abe4:	687b      	ldr	r3, [r7, #4]
 801abe6:	681b      	ldr	r3, [r3, #0]
 801abe8:	689a      	ldr	r2, [r3, #8]
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	681b      	ldr	r3, [r3, #0]
 801abee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801abf2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801abf4:	687b      	ldr	r3, [r7, #4]
 801abf6:	681b      	ldr	r3, [r3, #0]
 801abf8:	681a      	ldr	r2, [r3, #0]
 801abfa:	687b      	ldr	r3, [r7, #4]
 801abfc:	681b      	ldr	r3, [r3, #0]
 801abfe:	f042 0201 	orr.w	r2, r2, #1
 801ac02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801ac04:	6878      	ldr	r0, [r7, #4]
 801ac06:	f000 fefd 	bl	801ba04 <UART_CheckIdleState>
 801ac0a:	4603      	mov	r3, r0
}
 801ac0c:	4618      	mov	r0, r3
 801ac0e:	3708      	adds	r7, #8
 801ac10:	46bd      	mov	sp, r7
 801ac12:	bd80      	pop	{r7, pc}

0801ac14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801ac14:	b580      	push	{r7, lr}
 801ac16:	b08a      	sub	sp, #40	@ 0x28
 801ac18:	af02      	add	r7, sp, #8
 801ac1a:	60f8      	str	r0, [r7, #12]
 801ac1c:	60b9      	str	r1, [r7, #8]
 801ac1e:	603b      	str	r3, [r7, #0]
 801ac20:	4613      	mov	r3, r2
 801ac22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801ac24:	68fb      	ldr	r3, [r7, #12]
 801ac26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801ac28:	2b20      	cmp	r3, #32
 801ac2a:	d177      	bne.n	801ad1c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 801ac2c:	68bb      	ldr	r3, [r7, #8]
 801ac2e:	2b00      	cmp	r3, #0
 801ac30:	d002      	beq.n	801ac38 <HAL_UART_Transmit+0x24>
 801ac32:	88fb      	ldrh	r3, [r7, #6]
 801ac34:	2b00      	cmp	r3, #0
 801ac36:	d101      	bne.n	801ac3c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 801ac38:	2301      	movs	r3, #1
 801ac3a:	e070      	b.n	801ad1e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801ac3c:	68fb      	ldr	r3, [r7, #12]
 801ac3e:	2200      	movs	r2, #0
 801ac40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801ac44:	68fb      	ldr	r3, [r7, #12]
 801ac46:	2221      	movs	r2, #33	@ 0x21
 801ac48:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801ac4a:	f7fc fbbf 	bl	80173cc <HAL_GetTick>
 801ac4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801ac50:	68fb      	ldr	r3, [r7, #12]
 801ac52:	88fa      	ldrh	r2, [r7, #6]
 801ac54:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 801ac58:	68fb      	ldr	r3, [r7, #12]
 801ac5a:	88fa      	ldrh	r2, [r7, #6]
 801ac5c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801ac60:	68fb      	ldr	r3, [r7, #12]
 801ac62:	689b      	ldr	r3, [r3, #8]
 801ac64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801ac68:	d108      	bne.n	801ac7c <HAL_UART_Transmit+0x68>
 801ac6a:	68fb      	ldr	r3, [r7, #12]
 801ac6c:	691b      	ldr	r3, [r3, #16]
 801ac6e:	2b00      	cmp	r3, #0
 801ac70:	d104      	bne.n	801ac7c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 801ac72:	2300      	movs	r3, #0
 801ac74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801ac76:	68bb      	ldr	r3, [r7, #8]
 801ac78:	61bb      	str	r3, [r7, #24]
 801ac7a:	e003      	b.n	801ac84 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 801ac7c:	68bb      	ldr	r3, [r7, #8]
 801ac7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801ac80:	2300      	movs	r3, #0
 801ac82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801ac84:	e02f      	b.n	801ace6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801ac86:	683b      	ldr	r3, [r7, #0]
 801ac88:	9300      	str	r3, [sp, #0]
 801ac8a:	697b      	ldr	r3, [r7, #20]
 801ac8c:	2200      	movs	r2, #0
 801ac8e:	2180      	movs	r1, #128	@ 0x80
 801ac90:	68f8      	ldr	r0, [r7, #12]
 801ac92:	f000 ff5f 	bl	801bb54 <UART_WaitOnFlagUntilTimeout>
 801ac96:	4603      	mov	r3, r0
 801ac98:	2b00      	cmp	r3, #0
 801ac9a:	d004      	beq.n	801aca6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 801ac9c:	68fb      	ldr	r3, [r7, #12]
 801ac9e:	2220      	movs	r2, #32
 801aca0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801aca2:	2303      	movs	r3, #3
 801aca4:	e03b      	b.n	801ad1e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 801aca6:	69fb      	ldr	r3, [r7, #28]
 801aca8:	2b00      	cmp	r3, #0
 801acaa:	d10b      	bne.n	801acc4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801acac:	69bb      	ldr	r3, [r7, #24]
 801acae:	881a      	ldrh	r2, [r3, #0]
 801acb0:	68fb      	ldr	r3, [r7, #12]
 801acb2:	681b      	ldr	r3, [r3, #0]
 801acb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801acb8:	b292      	uxth	r2, r2
 801acba:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801acbc:	69bb      	ldr	r3, [r7, #24]
 801acbe:	3302      	adds	r3, #2
 801acc0:	61bb      	str	r3, [r7, #24]
 801acc2:	e007      	b.n	801acd4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801acc4:	69fb      	ldr	r3, [r7, #28]
 801acc6:	781a      	ldrb	r2, [r3, #0]
 801acc8:	68fb      	ldr	r3, [r7, #12]
 801acca:	681b      	ldr	r3, [r3, #0]
 801accc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801acce:	69fb      	ldr	r3, [r7, #28]
 801acd0:	3301      	adds	r3, #1
 801acd2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801acd4:	68fb      	ldr	r3, [r7, #12]
 801acd6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 801acda:	b29b      	uxth	r3, r3
 801acdc:	3b01      	subs	r3, #1
 801acde:	b29a      	uxth	r2, r3
 801ace0:	68fb      	ldr	r3, [r7, #12]
 801ace2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 801ace6:	68fb      	ldr	r3, [r7, #12]
 801ace8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 801acec:	b29b      	uxth	r3, r3
 801acee:	2b00      	cmp	r3, #0
 801acf0:	d1c9      	bne.n	801ac86 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801acf2:	683b      	ldr	r3, [r7, #0]
 801acf4:	9300      	str	r3, [sp, #0]
 801acf6:	697b      	ldr	r3, [r7, #20]
 801acf8:	2200      	movs	r2, #0
 801acfa:	2140      	movs	r1, #64	@ 0x40
 801acfc:	68f8      	ldr	r0, [r7, #12]
 801acfe:	f000 ff29 	bl	801bb54 <UART_WaitOnFlagUntilTimeout>
 801ad02:	4603      	mov	r3, r0
 801ad04:	2b00      	cmp	r3, #0
 801ad06:	d004      	beq.n	801ad12 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 801ad08:	68fb      	ldr	r3, [r7, #12]
 801ad0a:	2220      	movs	r2, #32
 801ad0c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801ad0e:	2303      	movs	r3, #3
 801ad10:	e005      	b.n	801ad1e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801ad12:	68fb      	ldr	r3, [r7, #12]
 801ad14:	2220      	movs	r2, #32
 801ad16:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 801ad18:	2300      	movs	r3, #0
 801ad1a:	e000      	b.n	801ad1e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 801ad1c:	2302      	movs	r3, #2
  }
}
 801ad1e:	4618      	mov	r0, r3
 801ad20:	3720      	adds	r7, #32
 801ad22:	46bd      	mov	sp, r7
 801ad24:	bd80      	pop	{r7, pc}
	...

0801ad28 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801ad28:	b580      	push	{r7, lr}
 801ad2a:	b08a      	sub	sp, #40	@ 0x28
 801ad2c:	af00      	add	r7, sp, #0
 801ad2e:	60f8      	str	r0, [r7, #12]
 801ad30:	60b9      	str	r1, [r7, #8]
 801ad32:	4613      	mov	r3, r2
 801ad34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801ad36:	68fb      	ldr	r3, [r7, #12]
 801ad38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801ad3c:	2b20      	cmp	r3, #32
 801ad3e:	d137      	bne.n	801adb0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 801ad40:	68bb      	ldr	r3, [r7, #8]
 801ad42:	2b00      	cmp	r3, #0
 801ad44:	d002      	beq.n	801ad4c <HAL_UART_Receive_IT+0x24>
 801ad46:	88fb      	ldrh	r3, [r7, #6]
 801ad48:	2b00      	cmp	r3, #0
 801ad4a:	d101      	bne.n	801ad50 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 801ad4c:	2301      	movs	r3, #1
 801ad4e:	e030      	b.n	801adb2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ad50:	68fb      	ldr	r3, [r7, #12]
 801ad52:	2200      	movs	r2, #0
 801ad54:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801ad56:	68fb      	ldr	r3, [r7, #12]
 801ad58:	681b      	ldr	r3, [r3, #0]
 801ad5a:	4a18      	ldr	r2, [pc, #96]	@ (801adbc <HAL_UART_Receive_IT+0x94>)
 801ad5c:	4293      	cmp	r3, r2
 801ad5e:	d01f      	beq.n	801ada0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801ad60:	68fb      	ldr	r3, [r7, #12]
 801ad62:	681b      	ldr	r3, [r3, #0]
 801ad64:	685b      	ldr	r3, [r3, #4]
 801ad66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801ad6a:	2b00      	cmp	r3, #0
 801ad6c:	d018      	beq.n	801ada0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801ad6e:	68fb      	ldr	r3, [r7, #12]
 801ad70:	681b      	ldr	r3, [r3, #0]
 801ad72:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ad74:	697b      	ldr	r3, [r7, #20]
 801ad76:	e853 3f00 	ldrex	r3, [r3]
 801ad7a:	613b      	str	r3, [r7, #16]
   return(result);
 801ad7c:	693b      	ldr	r3, [r7, #16]
 801ad7e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801ad82:	627b      	str	r3, [r7, #36]	@ 0x24
 801ad84:	68fb      	ldr	r3, [r7, #12]
 801ad86:	681b      	ldr	r3, [r3, #0]
 801ad88:	461a      	mov	r2, r3
 801ad8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad8c:	623b      	str	r3, [r7, #32]
 801ad8e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ad90:	69f9      	ldr	r1, [r7, #28]
 801ad92:	6a3a      	ldr	r2, [r7, #32]
 801ad94:	e841 2300 	strex	r3, r2, [r1]
 801ad98:	61bb      	str	r3, [r7, #24]
   return(result);
 801ad9a:	69bb      	ldr	r3, [r7, #24]
 801ad9c:	2b00      	cmp	r3, #0
 801ad9e:	d1e6      	bne.n	801ad6e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801ada0:	88fb      	ldrh	r3, [r7, #6]
 801ada2:	461a      	mov	r2, r3
 801ada4:	68b9      	ldr	r1, [r7, #8]
 801ada6:	68f8      	ldr	r0, [r7, #12]
 801ada8:	f000 ff42 	bl	801bc30 <UART_Start_Receive_IT>
 801adac:	4603      	mov	r3, r0
 801adae:	e000      	b.n	801adb2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801adb0:	2302      	movs	r3, #2
  }
}
 801adb2:	4618      	mov	r0, r3
 801adb4:	3728      	adds	r7, #40	@ 0x28
 801adb6:	46bd      	mov	sp, r7
 801adb8:	bd80      	pop	{r7, pc}
 801adba:	bf00      	nop
 801adbc:	40008000 	.word	0x40008000

0801adc0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801adc0:	b580      	push	{r7, lr}
 801adc2:	b0ba      	sub	sp, #232	@ 0xe8
 801adc4:	af00      	add	r7, sp, #0
 801adc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801adc8:	687b      	ldr	r3, [r7, #4]
 801adca:	681b      	ldr	r3, [r3, #0]
 801adcc:	69db      	ldr	r3, [r3, #28]
 801adce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801add2:	687b      	ldr	r3, [r7, #4]
 801add4:	681b      	ldr	r3, [r3, #0]
 801add6:	681b      	ldr	r3, [r3, #0]
 801add8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801addc:	687b      	ldr	r3, [r7, #4]
 801adde:	681b      	ldr	r3, [r3, #0]
 801ade0:	689b      	ldr	r3, [r3, #8]
 801ade2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801ade6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801adea:	f640 030f 	movw	r3, #2063	@ 0x80f
 801adee:	4013      	ands	r3, r2
 801adf0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 801adf4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801adf8:	2b00      	cmp	r3, #0
 801adfa:	d115      	bne.n	801ae28 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801adfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801ae00:	f003 0320 	and.w	r3, r3, #32
 801ae04:	2b00      	cmp	r3, #0
 801ae06:	d00f      	beq.n	801ae28 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801ae08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801ae0c:	f003 0320 	and.w	r3, r3, #32
 801ae10:	2b00      	cmp	r3, #0
 801ae12:	d009      	beq.n	801ae28 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 801ae14:	687b      	ldr	r3, [r7, #4]
 801ae16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801ae18:	2b00      	cmp	r3, #0
 801ae1a:	f000 82ca 	beq.w	801b3b2 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 801ae1e:	687b      	ldr	r3, [r7, #4]
 801ae20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801ae22:	6878      	ldr	r0, [r7, #4]
 801ae24:	4798      	blx	r3
      }
      return;
 801ae26:	e2c4      	b.n	801b3b2 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 801ae28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801ae2c:	2b00      	cmp	r3, #0
 801ae2e:	f000 8117 	beq.w	801b060 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801ae32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801ae36:	f003 0301 	and.w	r3, r3, #1
 801ae3a:	2b00      	cmp	r3, #0
 801ae3c:	d106      	bne.n	801ae4c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801ae3e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801ae42:	4b85      	ldr	r3, [pc, #532]	@ (801b058 <HAL_UART_IRQHandler+0x298>)
 801ae44:	4013      	ands	r3, r2
 801ae46:	2b00      	cmp	r3, #0
 801ae48:	f000 810a 	beq.w	801b060 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801ae4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801ae50:	f003 0301 	and.w	r3, r3, #1
 801ae54:	2b00      	cmp	r3, #0
 801ae56:	d011      	beq.n	801ae7c <HAL_UART_IRQHandler+0xbc>
 801ae58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801ae5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ae60:	2b00      	cmp	r3, #0
 801ae62:	d00b      	beq.n	801ae7c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801ae64:	687b      	ldr	r3, [r7, #4]
 801ae66:	681b      	ldr	r3, [r3, #0]
 801ae68:	2201      	movs	r2, #1
 801ae6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801ae6c:	687b      	ldr	r3, [r7, #4]
 801ae6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801ae72:	f043 0201 	orr.w	r2, r3, #1
 801ae76:	687b      	ldr	r3, [r7, #4]
 801ae78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801ae7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801ae80:	f003 0302 	and.w	r3, r3, #2
 801ae84:	2b00      	cmp	r3, #0
 801ae86:	d011      	beq.n	801aeac <HAL_UART_IRQHandler+0xec>
 801ae88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801ae8c:	f003 0301 	and.w	r3, r3, #1
 801ae90:	2b00      	cmp	r3, #0
 801ae92:	d00b      	beq.n	801aeac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801ae94:	687b      	ldr	r3, [r7, #4]
 801ae96:	681b      	ldr	r3, [r3, #0]
 801ae98:	2202      	movs	r2, #2
 801ae9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801ae9c:	687b      	ldr	r3, [r7, #4]
 801ae9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801aea2:	f043 0204 	orr.w	r2, r3, #4
 801aea6:	687b      	ldr	r3, [r7, #4]
 801aea8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801aeac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801aeb0:	f003 0304 	and.w	r3, r3, #4
 801aeb4:	2b00      	cmp	r3, #0
 801aeb6:	d011      	beq.n	801aedc <HAL_UART_IRQHandler+0x11c>
 801aeb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801aebc:	f003 0301 	and.w	r3, r3, #1
 801aec0:	2b00      	cmp	r3, #0
 801aec2:	d00b      	beq.n	801aedc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801aec4:	687b      	ldr	r3, [r7, #4]
 801aec6:	681b      	ldr	r3, [r3, #0]
 801aec8:	2204      	movs	r2, #4
 801aeca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801aecc:	687b      	ldr	r3, [r7, #4]
 801aece:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801aed2:	f043 0202 	orr.w	r2, r3, #2
 801aed6:	687b      	ldr	r3, [r7, #4]
 801aed8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 801aedc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801aee0:	f003 0308 	and.w	r3, r3, #8
 801aee4:	2b00      	cmp	r3, #0
 801aee6:	d017      	beq.n	801af18 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801aee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801aeec:	f003 0320 	and.w	r3, r3, #32
 801aef0:	2b00      	cmp	r3, #0
 801aef2:	d105      	bne.n	801af00 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801aef4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801aef8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801aefc:	2b00      	cmp	r3, #0
 801aefe:	d00b      	beq.n	801af18 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801af00:	687b      	ldr	r3, [r7, #4]
 801af02:	681b      	ldr	r3, [r3, #0]
 801af04:	2208      	movs	r2, #8
 801af06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801af08:	687b      	ldr	r3, [r7, #4]
 801af0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801af0e:	f043 0208 	orr.w	r2, r3, #8
 801af12:	687b      	ldr	r3, [r7, #4]
 801af14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801af18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801af1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801af20:	2b00      	cmp	r3, #0
 801af22:	d012      	beq.n	801af4a <HAL_UART_IRQHandler+0x18a>
 801af24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801af28:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801af2c:	2b00      	cmp	r3, #0
 801af2e:	d00c      	beq.n	801af4a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801af30:	687b      	ldr	r3, [r7, #4]
 801af32:	681b      	ldr	r3, [r3, #0]
 801af34:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801af38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801af3a:	687b      	ldr	r3, [r7, #4]
 801af3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801af40:	f043 0220 	orr.w	r2, r3, #32
 801af44:	687b      	ldr	r3, [r7, #4]
 801af46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801af4a:	687b      	ldr	r3, [r7, #4]
 801af4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801af50:	2b00      	cmp	r3, #0
 801af52:	f000 8230 	beq.w	801b3b6 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801af56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801af5a:	f003 0320 	and.w	r3, r3, #32
 801af5e:	2b00      	cmp	r3, #0
 801af60:	d00d      	beq.n	801af7e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801af62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801af66:	f003 0320 	and.w	r3, r3, #32
 801af6a:	2b00      	cmp	r3, #0
 801af6c:	d007      	beq.n	801af7e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 801af6e:	687b      	ldr	r3, [r7, #4]
 801af70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801af72:	2b00      	cmp	r3, #0
 801af74:	d003      	beq.n	801af7e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 801af76:	687b      	ldr	r3, [r7, #4]
 801af78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801af7a:	6878      	ldr	r0, [r7, #4]
 801af7c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801af7e:	687b      	ldr	r3, [r7, #4]
 801af80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801af84:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801af88:	687b      	ldr	r3, [r7, #4]
 801af8a:	681b      	ldr	r3, [r3, #0]
 801af8c:	689b      	ldr	r3, [r3, #8]
 801af8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801af92:	2b40      	cmp	r3, #64	@ 0x40
 801af94:	d005      	beq.n	801afa2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801af96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801af9a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801af9e:	2b00      	cmp	r3, #0
 801afa0:	d04f      	beq.n	801b042 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801afa2:	6878      	ldr	r0, [r7, #4]
 801afa4:	f000 ff0a 	bl	801bdbc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801afa8:	687b      	ldr	r3, [r7, #4]
 801afaa:	681b      	ldr	r3, [r3, #0]
 801afac:	689b      	ldr	r3, [r3, #8]
 801afae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801afb2:	2b40      	cmp	r3, #64	@ 0x40
 801afb4:	d141      	bne.n	801b03a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801afb6:	687b      	ldr	r3, [r7, #4]
 801afb8:	681b      	ldr	r3, [r3, #0]
 801afba:	3308      	adds	r3, #8
 801afbc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801afc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801afc4:	e853 3f00 	ldrex	r3, [r3]
 801afc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 801afcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801afd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801afd4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801afd8:	687b      	ldr	r3, [r7, #4]
 801afda:	681b      	ldr	r3, [r3, #0]
 801afdc:	3308      	adds	r3, #8
 801afde:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801afe2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801afe6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801afea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 801afee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801aff2:	e841 2300 	strex	r3, r2, [r1]
 801aff6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 801affa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801affe:	2b00      	cmp	r3, #0
 801b000:	d1d9      	bne.n	801afb6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801b002:	687b      	ldr	r3, [r7, #4]
 801b004:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b006:	2b00      	cmp	r3, #0
 801b008:	d013      	beq.n	801b032 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801b00a:	687b      	ldr	r3, [r7, #4]
 801b00c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b00e:	4a13      	ldr	r2, [pc, #76]	@ (801b05c <HAL_UART_IRQHandler+0x29c>)
 801b010:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801b012:	687b      	ldr	r3, [r7, #4]
 801b014:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b016:	4618      	mov	r0, r3
 801b018:	f7fc fb57 	bl	80176ca <HAL_DMA_Abort_IT>
 801b01c:	4603      	mov	r3, r0
 801b01e:	2b00      	cmp	r3, #0
 801b020:	d017      	beq.n	801b052 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801b022:	687b      	ldr	r3, [r7, #4]
 801b024:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801b028:	687a      	ldr	r2, [r7, #4]
 801b02a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801b02c:	4610      	mov	r0, r2
 801b02e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b030:	e00f      	b.n	801b052 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801b032:	6878      	ldr	r0, [r7, #4]
 801b034:	f000 f9d4 	bl	801b3e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b038:	e00b      	b.n	801b052 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801b03a:	6878      	ldr	r0, [r7, #4]
 801b03c:	f000 f9d0 	bl	801b3e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b040:	e007      	b.n	801b052 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801b042:	6878      	ldr	r0, [r7, #4]
 801b044:	f000 f9cc 	bl	801b3e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b048:	687b      	ldr	r3, [r7, #4]
 801b04a:	2200      	movs	r2, #0
 801b04c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 801b050:	e1b1      	b.n	801b3b6 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b052:	bf00      	nop
    return;
 801b054:	e1af      	b.n	801b3b6 <HAL_UART_IRQHandler+0x5f6>
 801b056:	bf00      	nop
 801b058:	04000120 	.word	0x04000120
 801b05c:	0801be85 	.word	0x0801be85

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b060:	687b      	ldr	r3, [r7, #4]
 801b062:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b064:	2b01      	cmp	r3, #1
 801b066:	f040 816a 	bne.w	801b33e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801b06a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801b06e:	f003 0310 	and.w	r3, r3, #16
 801b072:	2b00      	cmp	r3, #0
 801b074:	f000 8163 	beq.w	801b33e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801b078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801b07c:	f003 0310 	and.w	r3, r3, #16
 801b080:	2b00      	cmp	r3, #0
 801b082:	f000 815c 	beq.w	801b33e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801b086:	687b      	ldr	r3, [r7, #4]
 801b088:	681b      	ldr	r3, [r3, #0]
 801b08a:	2210      	movs	r2, #16
 801b08c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b08e:	687b      	ldr	r3, [r7, #4]
 801b090:	681b      	ldr	r3, [r3, #0]
 801b092:	689b      	ldr	r3, [r3, #8]
 801b094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b098:	2b40      	cmp	r3, #64	@ 0x40
 801b09a:	f040 80d4 	bne.w	801b246 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801b09e:	687b      	ldr	r3, [r7, #4]
 801b0a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b0a2:	681b      	ldr	r3, [r3, #0]
 801b0a4:	685b      	ldr	r3, [r3, #4]
 801b0a6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 801b0aa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 801b0ae:	2b00      	cmp	r3, #0
 801b0b0:	f000 80ad 	beq.w	801b20e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801b0b4:	687b      	ldr	r3, [r7, #4]
 801b0b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801b0ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801b0be:	429a      	cmp	r2, r3
 801b0c0:	f080 80a5 	bcs.w	801b20e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801b0c4:	687b      	ldr	r3, [r7, #4]
 801b0c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801b0ca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801b0ce:	687b      	ldr	r3, [r7, #4]
 801b0d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b0d2:	681b      	ldr	r3, [r3, #0]
 801b0d4:	681b      	ldr	r3, [r3, #0]
 801b0d6:	f003 0320 	and.w	r3, r3, #32
 801b0da:	2b00      	cmp	r3, #0
 801b0dc:	f040 8086 	bne.w	801b1ec <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801b0e0:	687b      	ldr	r3, [r7, #4]
 801b0e2:	681b      	ldr	r3, [r3, #0]
 801b0e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b0e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801b0ec:	e853 3f00 	ldrex	r3, [r3]
 801b0f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 801b0f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801b0f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801b0fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801b100:	687b      	ldr	r3, [r7, #4]
 801b102:	681b      	ldr	r3, [r3, #0]
 801b104:	461a      	mov	r2, r3
 801b106:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801b10a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801b10e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b112:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801b116:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801b11a:	e841 2300 	strex	r3, r2, [r1]
 801b11e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 801b122:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801b126:	2b00      	cmp	r3, #0
 801b128:	d1da      	bne.n	801b0e0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b12a:	687b      	ldr	r3, [r7, #4]
 801b12c:	681b      	ldr	r3, [r3, #0]
 801b12e:	3308      	adds	r3, #8
 801b130:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b132:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801b134:	e853 3f00 	ldrex	r3, [r3]
 801b138:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801b13a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b13c:	f023 0301 	bic.w	r3, r3, #1
 801b140:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801b144:	687b      	ldr	r3, [r7, #4]
 801b146:	681b      	ldr	r3, [r3, #0]
 801b148:	3308      	adds	r3, #8
 801b14a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801b14e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 801b152:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b154:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801b156:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801b15a:	e841 2300 	strex	r3, r2, [r1]
 801b15e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801b160:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b162:	2b00      	cmp	r3, #0
 801b164:	d1e1      	bne.n	801b12a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801b166:	687b      	ldr	r3, [r7, #4]
 801b168:	681b      	ldr	r3, [r3, #0]
 801b16a:	3308      	adds	r3, #8
 801b16c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b16e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b170:	e853 3f00 	ldrex	r3, [r3]
 801b174:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801b176:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b178:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801b17c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801b180:	687b      	ldr	r3, [r7, #4]
 801b182:	681b      	ldr	r3, [r3, #0]
 801b184:	3308      	adds	r3, #8
 801b186:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801b18a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801b18c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b18e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801b190:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801b192:	e841 2300 	strex	r3, r2, [r1]
 801b196:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801b198:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801b19a:	2b00      	cmp	r3, #0
 801b19c:	d1e3      	bne.n	801b166 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801b19e:	687b      	ldr	r3, [r7, #4]
 801b1a0:	2220      	movs	r2, #32
 801b1a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b1a6:	687b      	ldr	r3, [r7, #4]
 801b1a8:	2200      	movs	r2, #0
 801b1aa:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b1ac:	687b      	ldr	r3, [r7, #4]
 801b1ae:	681b      	ldr	r3, [r3, #0]
 801b1b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b1b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b1b4:	e853 3f00 	ldrex	r3, [r3]
 801b1b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801b1ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b1bc:	f023 0310 	bic.w	r3, r3, #16
 801b1c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801b1c4:	687b      	ldr	r3, [r7, #4]
 801b1c6:	681b      	ldr	r3, [r3, #0]
 801b1c8:	461a      	mov	r2, r3
 801b1ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801b1ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 801b1d0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b1d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801b1d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801b1d6:	e841 2300 	strex	r3, r2, [r1]
 801b1da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801b1dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b1de:	2b00      	cmp	r3, #0
 801b1e0:	d1e4      	bne.n	801b1ac <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801b1e2:	687b      	ldr	r3, [r7, #4]
 801b1e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b1e6:	4618      	mov	r0, r3
 801b1e8:	f7fc fa31 	bl	801764e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801b1ec:	687b      	ldr	r3, [r7, #4]
 801b1ee:	2202      	movs	r2, #2
 801b1f0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801b1f2:	687b      	ldr	r3, [r7, #4]
 801b1f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 801b1f8:	687b      	ldr	r3, [r7, #4]
 801b1fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801b1fe:	b29b      	uxth	r3, r3
 801b200:	1ad3      	subs	r3, r2, r3
 801b202:	b29b      	uxth	r3, r3
 801b204:	4619      	mov	r1, r3
 801b206:	6878      	ldr	r0, [r7, #4]
 801b208:	f000 f8f4 	bl	801b3f4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 801b20c:	e0d5      	b.n	801b3ba <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 801b20e:	687b      	ldr	r3, [r7, #4]
 801b210:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801b214:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801b218:	429a      	cmp	r2, r3
 801b21a:	f040 80ce 	bne.w	801b3ba <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801b21e:	687b      	ldr	r3, [r7, #4]
 801b220:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b222:	681b      	ldr	r3, [r3, #0]
 801b224:	681b      	ldr	r3, [r3, #0]
 801b226:	f003 0320 	and.w	r3, r3, #32
 801b22a:	2b20      	cmp	r3, #32
 801b22c:	f040 80c5 	bne.w	801b3ba <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801b230:	687b      	ldr	r3, [r7, #4]
 801b232:	2202      	movs	r2, #2
 801b234:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801b236:	687b      	ldr	r3, [r7, #4]
 801b238:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801b23c:	4619      	mov	r1, r3
 801b23e:	6878      	ldr	r0, [r7, #4]
 801b240:	f000 f8d8 	bl	801b3f4 <HAL_UARTEx_RxEventCallback>
      return;
 801b244:	e0b9      	b.n	801b3ba <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801b246:	687b      	ldr	r3, [r7, #4]
 801b248:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 801b24c:	687b      	ldr	r3, [r7, #4]
 801b24e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801b252:	b29b      	uxth	r3, r3
 801b254:	1ad3      	subs	r3, r2, r3
 801b256:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 801b25a:	687b      	ldr	r3, [r7, #4]
 801b25c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801b260:	b29b      	uxth	r3, r3
 801b262:	2b00      	cmp	r3, #0
 801b264:	f000 80ab 	beq.w	801b3be <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 801b268:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801b26c:	2b00      	cmp	r3, #0
 801b26e:	f000 80a6 	beq.w	801b3be <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801b272:	687b      	ldr	r3, [r7, #4]
 801b274:	681b      	ldr	r3, [r3, #0]
 801b276:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b27a:	e853 3f00 	ldrex	r3, [r3]
 801b27e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801b280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b282:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801b286:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801b28a:	687b      	ldr	r3, [r7, #4]
 801b28c:	681b      	ldr	r3, [r3, #0]
 801b28e:	461a      	mov	r2, r3
 801b290:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801b294:	647b      	str	r3, [r7, #68]	@ 0x44
 801b296:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b298:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801b29a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801b29c:	e841 2300 	strex	r3, r2, [r1]
 801b2a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801b2a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b2a4:	2b00      	cmp	r3, #0
 801b2a6:	d1e4      	bne.n	801b272 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b2a8:	687b      	ldr	r3, [r7, #4]
 801b2aa:	681b      	ldr	r3, [r3, #0]
 801b2ac:	3308      	adds	r3, #8
 801b2ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b2b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b2b2:	e853 3f00 	ldrex	r3, [r3]
 801b2b6:	623b      	str	r3, [r7, #32]
   return(result);
 801b2b8:	6a3b      	ldr	r3, [r7, #32]
 801b2ba:	f023 0301 	bic.w	r3, r3, #1
 801b2be:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801b2c2:	687b      	ldr	r3, [r7, #4]
 801b2c4:	681b      	ldr	r3, [r3, #0]
 801b2c6:	3308      	adds	r3, #8
 801b2c8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801b2cc:	633a      	str	r2, [r7, #48]	@ 0x30
 801b2ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b2d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801b2d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b2d4:	e841 2300 	strex	r3, r2, [r1]
 801b2d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801b2da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b2dc:	2b00      	cmp	r3, #0
 801b2de:	d1e3      	bne.n	801b2a8 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801b2e0:	687b      	ldr	r3, [r7, #4]
 801b2e2:	2220      	movs	r2, #32
 801b2e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b2e8:	687b      	ldr	r3, [r7, #4]
 801b2ea:	2200      	movs	r2, #0
 801b2ec:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801b2ee:	687b      	ldr	r3, [r7, #4]
 801b2f0:	2200      	movs	r2, #0
 801b2f2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b2f4:	687b      	ldr	r3, [r7, #4]
 801b2f6:	681b      	ldr	r3, [r3, #0]
 801b2f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b2fa:	693b      	ldr	r3, [r7, #16]
 801b2fc:	e853 3f00 	ldrex	r3, [r3]
 801b300:	60fb      	str	r3, [r7, #12]
   return(result);
 801b302:	68fb      	ldr	r3, [r7, #12]
 801b304:	f023 0310 	bic.w	r3, r3, #16
 801b308:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801b30c:	687b      	ldr	r3, [r7, #4]
 801b30e:	681b      	ldr	r3, [r3, #0]
 801b310:	461a      	mov	r2, r3
 801b312:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801b316:	61fb      	str	r3, [r7, #28]
 801b318:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b31a:	69b9      	ldr	r1, [r7, #24]
 801b31c:	69fa      	ldr	r2, [r7, #28]
 801b31e:	e841 2300 	strex	r3, r2, [r1]
 801b322:	617b      	str	r3, [r7, #20]
   return(result);
 801b324:	697b      	ldr	r3, [r7, #20]
 801b326:	2b00      	cmp	r3, #0
 801b328:	d1e4      	bne.n	801b2f4 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801b32a:	687b      	ldr	r3, [r7, #4]
 801b32c:	2202      	movs	r2, #2
 801b32e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801b330:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801b334:	4619      	mov	r1, r3
 801b336:	6878      	ldr	r0, [r7, #4]
 801b338:	f000 f85c 	bl	801b3f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801b33c:	e03f      	b.n	801b3be <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801b33e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801b342:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801b346:	2b00      	cmp	r3, #0
 801b348:	d00e      	beq.n	801b368 <HAL_UART_IRQHandler+0x5a8>
 801b34a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801b34e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801b352:	2b00      	cmp	r3, #0
 801b354:	d008      	beq.n	801b368 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801b356:	687b      	ldr	r3, [r7, #4]
 801b358:	681b      	ldr	r3, [r3, #0]
 801b35a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 801b35e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801b360:	6878      	ldr	r0, [r7, #4]
 801b362:	f000 ff8b 	bl	801c27c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801b366:	e02d      	b.n	801b3c4 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 801b368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801b36c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801b370:	2b00      	cmp	r3, #0
 801b372:	d00e      	beq.n	801b392 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801b374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801b378:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801b37c:	2b00      	cmp	r3, #0
 801b37e:	d008      	beq.n	801b392 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 801b380:	687b      	ldr	r3, [r7, #4]
 801b382:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b384:	2b00      	cmp	r3, #0
 801b386:	d01c      	beq.n	801b3c2 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 801b388:	687b      	ldr	r3, [r7, #4]
 801b38a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b38c:	6878      	ldr	r0, [r7, #4]
 801b38e:	4798      	blx	r3
    }
    return;
 801b390:	e017      	b.n	801b3c2 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801b392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801b396:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b39a:	2b00      	cmp	r3, #0
 801b39c:	d012      	beq.n	801b3c4 <HAL_UART_IRQHandler+0x604>
 801b39e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801b3a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b3a6:	2b00      	cmp	r3, #0
 801b3a8:	d00c      	beq.n	801b3c4 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 801b3aa:	6878      	ldr	r0, [r7, #4]
 801b3ac:	f000 fd80 	bl	801beb0 <UART_EndTransmit_IT>
    return;
 801b3b0:	e008      	b.n	801b3c4 <HAL_UART_IRQHandler+0x604>
      return;
 801b3b2:	bf00      	nop
 801b3b4:	e006      	b.n	801b3c4 <HAL_UART_IRQHandler+0x604>
    return;
 801b3b6:	bf00      	nop
 801b3b8:	e004      	b.n	801b3c4 <HAL_UART_IRQHandler+0x604>
      return;
 801b3ba:	bf00      	nop
 801b3bc:	e002      	b.n	801b3c4 <HAL_UART_IRQHandler+0x604>
      return;
 801b3be:	bf00      	nop
 801b3c0:	e000      	b.n	801b3c4 <HAL_UART_IRQHandler+0x604>
    return;
 801b3c2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 801b3c4:	37e8      	adds	r7, #232	@ 0xe8
 801b3c6:	46bd      	mov	sp, r7
 801b3c8:	bd80      	pop	{r7, pc}
 801b3ca:	bf00      	nop

0801b3cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801b3cc:	b480      	push	{r7}
 801b3ce:	b083      	sub	sp, #12
 801b3d0:	af00      	add	r7, sp, #0
 801b3d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801b3d4:	bf00      	nop
 801b3d6:	370c      	adds	r7, #12
 801b3d8:	46bd      	mov	sp, r7
 801b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3de:	4770      	bx	lr

0801b3e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801b3e0:	b480      	push	{r7}
 801b3e2:	b083      	sub	sp, #12
 801b3e4:	af00      	add	r7, sp, #0
 801b3e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801b3e8:	bf00      	nop
 801b3ea:	370c      	adds	r7, #12
 801b3ec:	46bd      	mov	sp, r7
 801b3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3f2:	4770      	bx	lr

0801b3f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801b3f4:	b480      	push	{r7}
 801b3f6:	b083      	sub	sp, #12
 801b3f8:	af00      	add	r7, sp, #0
 801b3fa:	6078      	str	r0, [r7, #4]
 801b3fc:	460b      	mov	r3, r1
 801b3fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801b400:	bf00      	nop
 801b402:	370c      	adds	r7, #12
 801b404:	46bd      	mov	sp, r7
 801b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b40a:	4770      	bx	lr

0801b40c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801b40c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801b410:	b08a      	sub	sp, #40	@ 0x28
 801b412:	af00      	add	r7, sp, #0
 801b414:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801b416:	2300      	movs	r3, #0
 801b418:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801b41c:	68fb      	ldr	r3, [r7, #12]
 801b41e:	689a      	ldr	r2, [r3, #8]
 801b420:	68fb      	ldr	r3, [r7, #12]
 801b422:	691b      	ldr	r3, [r3, #16]
 801b424:	431a      	orrs	r2, r3
 801b426:	68fb      	ldr	r3, [r7, #12]
 801b428:	695b      	ldr	r3, [r3, #20]
 801b42a:	431a      	orrs	r2, r3
 801b42c:	68fb      	ldr	r3, [r7, #12]
 801b42e:	69db      	ldr	r3, [r3, #28]
 801b430:	4313      	orrs	r3, r2
 801b432:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801b434:	68fb      	ldr	r3, [r7, #12]
 801b436:	681b      	ldr	r3, [r3, #0]
 801b438:	681a      	ldr	r2, [r3, #0]
 801b43a:	4b9e      	ldr	r3, [pc, #632]	@ (801b6b4 <UART_SetConfig+0x2a8>)
 801b43c:	4013      	ands	r3, r2
 801b43e:	68fa      	ldr	r2, [r7, #12]
 801b440:	6812      	ldr	r2, [r2, #0]
 801b442:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801b444:	430b      	orrs	r3, r1
 801b446:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801b448:	68fb      	ldr	r3, [r7, #12]
 801b44a:	681b      	ldr	r3, [r3, #0]
 801b44c:	685b      	ldr	r3, [r3, #4]
 801b44e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801b452:	68fb      	ldr	r3, [r7, #12]
 801b454:	68da      	ldr	r2, [r3, #12]
 801b456:	68fb      	ldr	r3, [r7, #12]
 801b458:	681b      	ldr	r3, [r3, #0]
 801b45a:	430a      	orrs	r2, r1
 801b45c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801b45e:	68fb      	ldr	r3, [r7, #12]
 801b460:	699b      	ldr	r3, [r3, #24]
 801b462:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801b464:	68fb      	ldr	r3, [r7, #12]
 801b466:	681b      	ldr	r3, [r3, #0]
 801b468:	4a93      	ldr	r2, [pc, #588]	@ (801b6b8 <UART_SetConfig+0x2ac>)
 801b46a:	4293      	cmp	r3, r2
 801b46c:	d004      	beq.n	801b478 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801b46e:	68fb      	ldr	r3, [r7, #12]
 801b470:	6a1b      	ldr	r3, [r3, #32]
 801b472:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b474:	4313      	orrs	r3, r2
 801b476:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801b478:	68fb      	ldr	r3, [r7, #12]
 801b47a:	681b      	ldr	r3, [r3, #0]
 801b47c:	689b      	ldr	r3, [r3, #8]
 801b47e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 801b482:	68fb      	ldr	r3, [r7, #12]
 801b484:	681b      	ldr	r3, [r3, #0]
 801b486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b488:	430a      	orrs	r2, r1
 801b48a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801b48c:	68fb      	ldr	r3, [r7, #12]
 801b48e:	681b      	ldr	r3, [r3, #0]
 801b490:	4a8a      	ldr	r2, [pc, #552]	@ (801b6bc <UART_SetConfig+0x2b0>)
 801b492:	4293      	cmp	r3, r2
 801b494:	d126      	bne.n	801b4e4 <UART_SetConfig+0xd8>
 801b496:	4b8a      	ldr	r3, [pc, #552]	@ (801b6c0 <UART_SetConfig+0x2b4>)
 801b498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801b49c:	f003 0303 	and.w	r3, r3, #3
 801b4a0:	2b03      	cmp	r3, #3
 801b4a2:	d81b      	bhi.n	801b4dc <UART_SetConfig+0xd0>
 801b4a4:	a201      	add	r2, pc, #4	@ (adr r2, 801b4ac <UART_SetConfig+0xa0>)
 801b4a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b4aa:	bf00      	nop
 801b4ac:	0801b4bd 	.word	0x0801b4bd
 801b4b0:	0801b4cd 	.word	0x0801b4cd
 801b4b4:	0801b4c5 	.word	0x0801b4c5
 801b4b8:	0801b4d5 	.word	0x0801b4d5
 801b4bc:	2301      	movs	r3, #1
 801b4be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b4c2:	e0ab      	b.n	801b61c <UART_SetConfig+0x210>
 801b4c4:	2302      	movs	r3, #2
 801b4c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b4ca:	e0a7      	b.n	801b61c <UART_SetConfig+0x210>
 801b4cc:	2304      	movs	r3, #4
 801b4ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b4d2:	e0a3      	b.n	801b61c <UART_SetConfig+0x210>
 801b4d4:	2308      	movs	r3, #8
 801b4d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b4da:	e09f      	b.n	801b61c <UART_SetConfig+0x210>
 801b4dc:	2310      	movs	r3, #16
 801b4de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b4e2:	e09b      	b.n	801b61c <UART_SetConfig+0x210>
 801b4e4:	68fb      	ldr	r3, [r7, #12]
 801b4e6:	681b      	ldr	r3, [r3, #0]
 801b4e8:	4a76      	ldr	r2, [pc, #472]	@ (801b6c4 <UART_SetConfig+0x2b8>)
 801b4ea:	4293      	cmp	r3, r2
 801b4ec:	d138      	bne.n	801b560 <UART_SetConfig+0x154>
 801b4ee:	4b74      	ldr	r3, [pc, #464]	@ (801b6c0 <UART_SetConfig+0x2b4>)
 801b4f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801b4f4:	f003 030c 	and.w	r3, r3, #12
 801b4f8:	2b0c      	cmp	r3, #12
 801b4fa:	d82d      	bhi.n	801b558 <UART_SetConfig+0x14c>
 801b4fc:	a201      	add	r2, pc, #4	@ (adr r2, 801b504 <UART_SetConfig+0xf8>)
 801b4fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b502:	bf00      	nop
 801b504:	0801b539 	.word	0x0801b539
 801b508:	0801b559 	.word	0x0801b559
 801b50c:	0801b559 	.word	0x0801b559
 801b510:	0801b559 	.word	0x0801b559
 801b514:	0801b549 	.word	0x0801b549
 801b518:	0801b559 	.word	0x0801b559
 801b51c:	0801b559 	.word	0x0801b559
 801b520:	0801b559 	.word	0x0801b559
 801b524:	0801b541 	.word	0x0801b541
 801b528:	0801b559 	.word	0x0801b559
 801b52c:	0801b559 	.word	0x0801b559
 801b530:	0801b559 	.word	0x0801b559
 801b534:	0801b551 	.word	0x0801b551
 801b538:	2300      	movs	r3, #0
 801b53a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b53e:	e06d      	b.n	801b61c <UART_SetConfig+0x210>
 801b540:	2302      	movs	r3, #2
 801b542:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b546:	e069      	b.n	801b61c <UART_SetConfig+0x210>
 801b548:	2304      	movs	r3, #4
 801b54a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b54e:	e065      	b.n	801b61c <UART_SetConfig+0x210>
 801b550:	2308      	movs	r3, #8
 801b552:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b556:	e061      	b.n	801b61c <UART_SetConfig+0x210>
 801b558:	2310      	movs	r3, #16
 801b55a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b55e:	e05d      	b.n	801b61c <UART_SetConfig+0x210>
 801b560:	68fb      	ldr	r3, [r7, #12]
 801b562:	681b      	ldr	r3, [r3, #0]
 801b564:	4a58      	ldr	r2, [pc, #352]	@ (801b6c8 <UART_SetConfig+0x2bc>)
 801b566:	4293      	cmp	r3, r2
 801b568:	d125      	bne.n	801b5b6 <UART_SetConfig+0x1aa>
 801b56a:	4b55      	ldr	r3, [pc, #340]	@ (801b6c0 <UART_SetConfig+0x2b4>)
 801b56c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801b570:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 801b574:	2b30      	cmp	r3, #48	@ 0x30
 801b576:	d016      	beq.n	801b5a6 <UART_SetConfig+0x19a>
 801b578:	2b30      	cmp	r3, #48	@ 0x30
 801b57a:	d818      	bhi.n	801b5ae <UART_SetConfig+0x1a2>
 801b57c:	2b20      	cmp	r3, #32
 801b57e:	d00a      	beq.n	801b596 <UART_SetConfig+0x18a>
 801b580:	2b20      	cmp	r3, #32
 801b582:	d814      	bhi.n	801b5ae <UART_SetConfig+0x1a2>
 801b584:	2b00      	cmp	r3, #0
 801b586:	d002      	beq.n	801b58e <UART_SetConfig+0x182>
 801b588:	2b10      	cmp	r3, #16
 801b58a:	d008      	beq.n	801b59e <UART_SetConfig+0x192>
 801b58c:	e00f      	b.n	801b5ae <UART_SetConfig+0x1a2>
 801b58e:	2300      	movs	r3, #0
 801b590:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b594:	e042      	b.n	801b61c <UART_SetConfig+0x210>
 801b596:	2302      	movs	r3, #2
 801b598:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b59c:	e03e      	b.n	801b61c <UART_SetConfig+0x210>
 801b59e:	2304      	movs	r3, #4
 801b5a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b5a4:	e03a      	b.n	801b61c <UART_SetConfig+0x210>
 801b5a6:	2308      	movs	r3, #8
 801b5a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b5ac:	e036      	b.n	801b61c <UART_SetConfig+0x210>
 801b5ae:	2310      	movs	r3, #16
 801b5b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b5b4:	e032      	b.n	801b61c <UART_SetConfig+0x210>
 801b5b6:	68fb      	ldr	r3, [r7, #12]
 801b5b8:	681b      	ldr	r3, [r3, #0]
 801b5ba:	4a3f      	ldr	r2, [pc, #252]	@ (801b6b8 <UART_SetConfig+0x2ac>)
 801b5bc:	4293      	cmp	r3, r2
 801b5be:	d12a      	bne.n	801b616 <UART_SetConfig+0x20a>
 801b5c0:	4b3f      	ldr	r3, [pc, #252]	@ (801b6c0 <UART_SetConfig+0x2b4>)
 801b5c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801b5c6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 801b5ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801b5ce:	d01a      	beq.n	801b606 <UART_SetConfig+0x1fa>
 801b5d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801b5d4:	d81b      	bhi.n	801b60e <UART_SetConfig+0x202>
 801b5d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801b5da:	d00c      	beq.n	801b5f6 <UART_SetConfig+0x1ea>
 801b5dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801b5e0:	d815      	bhi.n	801b60e <UART_SetConfig+0x202>
 801b5e2:	2b00      	cmp	r3, #0
 801b5e4:	d003      	beq.n	801b5ee <UART_SetConfig+0x1e2>
 801b5e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801b5ea:	d008      	beq.n	801b5fe <UART_SetConfig+0x1f2>
 801b5ec:	e00f      	b.n	801b60e <UART_SetConfig+0x202>
 801b5ee:	2300      	movs	r3, #0
 801b5f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b5f4:	e012      	b.n	801b61c <UART_SetConfig+0x210>
 801b5f6:	2302      	movs	r3, #2
 801b5f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b5fc:	e00e      	b.n	801b61c <UART_SetConfig+0x210>
 801b5fe:	2304      	movs	r3, #4
 801b600:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b604:	e00a      	b.n	801b61c <UART_SetConfig+0x210>
 801b606:	2308      	movs	r3, #8
 801b608:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b60c:	e006      	b.n	801b61c <UART_SetConfig+0x210>
 801b60e:	2310      	movs	r3, #16
 801b610:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b614:	e002      	b.n	801b61c <UART_SetConfig+0x210>
 801b616:	2310      	movs	r3, #16
 801b618:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801b61c:	68fb      	ldr	r3, [r7, #12]
 801b61e:	681b      	ldr	r3, [r3, #0]
 801b620:	4a25      	ldr	r2, [pc, #148]	@ (801b6b8 <UART_SetConfig+0x2ac>)
 801b622:	4293      	cmp	r3, r2
 801b624:	f040 808a 	bne.w	801b73c <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801b628:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801b62c:	2b08      	cmp	r3, #8
 801b62e:	d824      	bhi.n	801b67a <UART_SetConfig+0x26e>
 801b630:	a201      	add	r2, pc, #4	@ (adr r2, 801b638 <UART_SetConfig+0x22c>)
 801b632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b636:	bf00      	nop
 801b638:	0801b65d 	.word	0x0801b65d
 801b63c:	0801b67b 	.word	0x0801b67b
 801b640:	0801b665 	.word	0x0801b665
 801b644:	0801b67b 	.word	0x0801b67b
 801b648:	0801b66b 	.word	0x0801b66b
 801b64c:	0801b67b 	.word	0x0801b67b
 801b650:	0801b67b 	.word	0x0801b67b
 801b654:	0801b67b 	.word	0x0801b67b
 801b658:	0801b673 	.word	0x0801b673
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801b65c:	f7fd f830 	bl	80186c0 <HAL_RCC_GetPCLK1Freq>
 801b660:	61f8      	str	r0, [r7, #28]
        break;
 801b662:	e010      	b.n	801b686 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801b664:	4b19      	ldr	r3, [pc, #100]	@ (801b6cc <UART_SetConfig+0x2c0>)
 801b666:	61fb      	str	r3, [r7, #28]
        break;
 801b668:	e00d      	b.n	801b686 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801b66a:	f7fc ff91 	bl	8018590 <HAL_RCC_GetSysClockFreq>
 801b66e:	61f8      	str	r0, [r7, #28]
        break;
 801b670:	e009      	b.n	801b686 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801b672:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801b676:	61fb      	str	r3, [r7, #28]
        break;
 801b678:	e005      	b.n	801b686 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 801b67a:	2300      	movs	r3, #0
 801b67c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 801b67e:	2301      	movs	r3, #1
 801b680:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 801b684:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801b686:	69fb      	ldr	r3, [r7, #28]
 801b688:	2b00      	cmp	r3, #0
 801b68a:	f000 8109 	beq.w	801b8a0 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801b68e:	68fb      	ldr	r3, [r7, #12]
 801b690:	685a      	ldr	r2, [r3, #4]
 801b692:	4613      	mov	r3, r2
 801b694:	005b      	lsls	r3, r3, #1
 801b696:	4413      	add	r3, r2
 801b698:	69fa      	ldr	r2, [r7, #28]
 801b69a:	429a      	cmp	r2, r3
 801b69c:	d305      	bcc.n	801b6aa <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 801b69e:	68fb      	ldr	r3, [r7, #12]
 801b6a0:	685b      	ldr	r3, [r3, #4]
 801b6a2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801b6a4:	69fa      	ldr	r2, [r7, #28]
 801b6a6:	429a      	cmp	r2, r3
 801b6a8:	d912      	bls.n	801b6d0 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 801b6aa:	2301      	movs	r3, #1
 801b6ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801b6b0:	e0f6      	b.n	801b8a0 <UART_SetConfig+0x494>
 801b6b2:	bf00      	nop
 801b6b4:	efff69f3 	.word	0xefff69f3
 801b6b8:	40008000 	.word	0x40008000
 801b6bc:	40013800 	.word	0x40013800
 801b6c0:	40021000 	.word	0x40021000
 801b6c4:	40004400 	.word	0x40004400
 801b6c8:	40004800 	.word	0x40004800
 801b6cc:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801b6d0:	69fb      	ldr	r3, [r7, #28]
 801b6d2:	2200      	movs	r2, #0
 801b6d4:	461c      	mov	r4, r3
 801b6d6:	4615      	mov	r5, r2
 801b6d8:	f04f 0200 	mov.w	r2, #0
 801b6dc:	f04f 0300 	mov.w	r3, #0
 801b6e0:	022b      	lsls	r3, r5, #8
 801b6e2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 801b6e6:	0222      	lsls	r2, r4, #8
 801b6e8:	68f9      	ldr	r1, [r7, #12]
 801b6ea:	6849      	ldr	r1, [r1, #4]
 801b6ec:	0849      	lsrs	r1, r1, #1
 801b6ee:	2000      	movs	r0, #0
 801b6f0:	4688      	mov	r8, r1
 801b6f2:	4681      	mov	r9, r0
 801b6f4:	eb12 0a08 	adds.w	sl, r2, r8
 801b6f8:	eb43 0b09 	adc.w	fp, r3, r9
 801b6fc:	68fb      	ldr	r3, [r7, #12]
 801b6fe:	685b      	ldr	r3, [r3, #4]
 801b700:	2200      	movs	r2, #0
 801b702:	603b      	str	r3, [r7, #0]
 801b704:	607a      	str	r2, [r7, #4]
 801b706:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b70a:	4650      	mov	r0, sl
 801b70c:	4659      	mov	r1, fp
 801b70e:	f7e5 fa9b 	bl	8000c48 <__aeabi_uldivmod>
 801b712:	4602      	mov	r2, r0
 801b714:	460b      	mov	r3, r1
 801b716:	4613      	mov	r3, r2
 801b718:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801b71a:	69bb      	ldr	r3, [r7, #24]
 801b71c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801b720:	d308      	bcc.n	801b734 <UART_SetConfig+0x328>
 801b722:	69bb      	ldr	r3, [r7, #24]
 801b724:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801b728:	d204      	bcs.n	801b734 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 801b72a:	68fb      	ldr	r3, [r7, #12]
 801b72c:	681b      	ldr	r3, [r3, #0]
 801b72e:	69ba      	ldr	r2, [r7, #24]
 801b730:	60da      	str	r2, [r3, #12]
 801b732:	e0b5      	b.n	801b8a0 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 801b734:	2301      	movs	r3, #1
 801b736:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801b73a:	e0b1      	b.n	801b8a0 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801b73c:	68fb      	ldr	r3, [r7, #12]
 801b73e:	69db      	ldr	r3, [r3, #28]
 801b740:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801b744:	d15d      	bne.n	801b802 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 801b746:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801b74a:	2b08      	cmp	r3, #8
 801b74c:	d827      	bhi.n	801b79e <UART_SetConfig+0x392>
 801b74e:	a201      	add	r2, pc, #4	@ (adr r2, 801b754 <UART_SetConfig+0x348>)
 801b750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b754:	0801b779 	.word	0x0801b779
 801b758:	0801b781 	.word	0x0801b781
 801b75c:	0801b789 	.word	0x0801b789
 801b760:	0801b79f 	.word	0x0801b79f
 801b764:	0801b78f 	.word	0x0801b78f
 801b768:	0801b79f 	.word	0x0801b79f
 801b76c:	0801b79f 	.word	0x0801b79f
 801b770:	0801b79f 	.word	0x0801b79f
 801b774:	0801b797 	.word	0x0801b797
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801b778:	f7fc ffa2 	bl	80186c0 <HAL_RCC_GetPCLK1Freq>
 801b77c:	61f8      	str	r0, [r7, #28]
        break;
 801b77e:	e014      	b.n	801b7aa <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801b780:	f7fc ffb4 	bl	80186ec <HAL_RCC_GetPCLK2Freq>
 801b784:	61f8      	str	r0, [r7, #28]
        break;
 801b786:	e010      	b.n	801b7aa <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801b788:	4b4c      	ldr	r3, [pc, #304]	@ (801b8bc <UART_SetConfig+0x4b0>)
 801b78a:	61fb      	str	r3, [r7, #28]
        break;
 801b78c:	e00d      	b.n	801b7aa <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801b78e:	f7fc feff 	bl	8018590 <HAL_RCC_GetSysClockFreq>
 801b792:	61f8      	str	r0, [r7, #28]
        break;
 801b794:	e009      	b.n	801b7aa <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801b796:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801b79a:	61fb      	str	r3, [r7, #28]
        break;
 801b79c:	e005      	b.n	801b7aa <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 801b79e:	2300      	movs	r3, #0
 801b7a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 801b7a2:	2301      	movs	r3, #1
 801b7a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 801b7a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801b7aa:	69fb      	ldr	r3, [r7, #28]
 801b7ac:	2b00      	cmp	r3, #0
 801b7ae:	d077      	beq.n	801b8a0 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801b7b0:	69fb      	ldr	r3, [r7, #28]
 801b7b2:	005a      	lsls	r2, r3, #1
 801b7b4:	68fb      	ldr	r3, [r7, #12]
 801b7b6:	685b      	ldr	r3, [r3, #4]
 801b7b8:	085b      	lsrs	r3, r3, #1
 801b7ba:	441a      	add	r2, r3
 801b7bc:	68fb      	ldr	r3, [r7, #12]
 801b7be:	685b      	ldr	r3, [r3, #4]
 801b7c0:	fbb2 f3f3 	udiv	r3, r2, r3
 801b7c4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801b7c6:	69bb      	ldr	r3, [r7, #24]
 801b7c8:	2b0f      	cmp	r3, #15
 801b7ca:	d916      	bls.n	801b7fa <UART_SetConfig+0x3ee>
 801b7cc:	69bb      	ldr	r3, [r7, #24]
 801b7ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b7d2:	d212      	bcs.n	801b7fa <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801b7d4:	69bb      	ldr	r3, [r7, #24]
 801b7d6:	b29b      	uxth	r3, r3
 801b7d8:	f023 030f 	bic.w	r3, r3, #15
 801b7dc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801b7de:	69bb      	ldr	r3, [r7, #24]
 801b7e0:	085b      	lsrs	r3, r3, #1
 801b7e2:	b29b      	uxth	r3, r3
 801b7e4:	f003 0307 	and.w	r3, r3, #7
 801b7e8:	b29a      	uxth	r2, r3
 801b7ea:	8afb      	ldrh	r3, [r7, #22]
 801b7ec:	4313      	orrs	r3, r2
 801b7ee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 801b7f0:	68fb      	ldr	r3, [r7, #12]
 801b7f2:	681b      	ldr	r3, [r3, #0]
 801b7f4:	8afa      	ldrh	r2, [r7, #22]
 801b7f6:	60da      	str	r2, [r3, #12]
 801b7f8:	e052      	b.n	801b8a0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 801b7fa:	2301      	movs	r3, #1
 801b7fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801b800:	e04e      	b.n	801b8a0 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 801b802:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801b806:	2b08      	cmp	r3, #8
 801b808:	d827      	bhi.n	801b85a <UART_SetConfig+0x44e>
 801b80a:	a201      	add	r2, pc, #4	@ (adr r2, 801b810 <UART_SetConfig+0x404>)
 801b80c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b810:	0801b835 	.word	0x0801b835
 801b814:	0801b83d 	.word	0x0801b83d
 801b818:	0801b845 	.word	0x0801b845
 801b81c:	0801b85b 	.word	0x0801b85b
 801b820:	0801b84b 	.word	0x0801b84b
 801b824:	0801b85b 	.word	0x0801b85b
 801b828:	0801b85b 	.word	0x0801b85b
 801b82c:	0801b85b 	.word	0x0801b85b
 801b830:	0801b853 	.word	0x0801b853
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801b834:	f7fc ff44 	bl	80186c0 <HAL_RCC_GetPCLK1Freq>
 801b838:	61f8      	str	r0, [r7, #28]
        break;
 801b83a:	e014      	b.n	801b866 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801b83c:	f7fc ff56 	bl	80186ec <HAL_RCC_GetPCLK2Freq>
 801b840:	61f8      	str	r0, [r7, #28]
        break;
 801b842:	e010      	b.n	801b866 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801b844:	4b1d      	ldr	r3, [pc, #116]	@ (801b8bc <UART_SetConfig+0x4b0>)
 801b846:	61fb      	str	r3, [r7, #28]
        break;
 801b848:	e00d      	b.n	801b866 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801b84a:	f7fc fea1 	bl	8018590 <HAL_RCC_GetSysClockFreq>
 801b84e:	61f8      	str	r0, [r7, #28]
        break;
 801b850:	e009      	b.n	801b866 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801b852:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801b856:	61fb      	str	r3, [r7, #28]
        break;
 801b858:	e005      	b.n	801b866 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 801b85a:	2300      	movs	r3, #0
 801b85c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 801b85e:	2301      	movs	r3, #1
 801b860:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 801b864:	bf00      	nop
    }

    if (pclk != 0U)
 801b866:	69fb      	ldr	r3, [r7, #28]
 801b868:	2b00      	cmp	r3, #0
 801b86a:	d019      	beq.n	801b8a0 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801b86c:	68fb      	ldr	r3, [r7, #12]
 801b86e:	685b      	ldr	r3, [r3, #4]
 801b870:	085a      	lsrs	r2, r3, #1
 801b872:	69fb      	ldr	r3, [r7, #28]
 801b874:	441a      	add	r2, r3
 801b876:	68fb      	ldr	r3, [r7, #12]
 801b878:	685b      	ldr	r3, [r3, #4]
 801b87a:	fbb2 f3f3 	udiv	r3, r2, r3
 801b87e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801b880:	69bb      	ldr	r3, [r7, #24]
 801b882:	2b0f      	cmp	r3, #15
 801b884:	d909      	bls.n	801b89a <UART_SetConfig+0x48e>
 801b886:	69bb      	ldr	r3, [r7, #24]
 801b888:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b88c:	d205      	bcs.n	801b89a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801b88e:	69bb      	ldr	r3, [r7, #24]
 801b890:	b29a      	uxth	r2, r3
 801b892:	68fb      	ldr	r3, [r7, #12]
 801b894:	681b      	ldr	r3, [r3, #0]
 801b896:	60da      	str	r2, [r3, #12]
 801b898:	e002      	b.n	801b8a0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 801b89a:	2301      	movs	r3, #1
 801b89c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801b8a0:	68fb      	ldr	r3, [r7, #12]
 801b8a2:	2200      	movs	r2, #0
 801b8a4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 801b8a6:	68fb      	ldr	r3, [r7, #12]
 801b8a8:	2200      	movs	r2, #0
 801b8aa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801b8ac:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 801b8b0:	4618      	mov	r0, r3
 801b8b2:	3728      	adds	r7, #40	@ 0x28
 801b8b4:	46bd      	mov	sp, r7
 801b8b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801b8ba:	bf00      	nop
 801b8bc:	00f42400 	.word	0x00f42400

0801b8c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801b8c0:	b480      	push	{r7}
 801b8c2:	b083      	sub	sp, #12
 801b8c4:	af00      	add	r7, sp, #0
 801b8c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801b8c8:	687b      	ldr	r3, [r7, #4]
 801b8ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b8cc:	f003 0308 	and.w	r3, r3, #8
 801b8d0:	2b00      	cmp	r3, #0
 801b8d2:	d00a      	beq.n	801b8ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801b8d4:	687b      	ldr	r3, [r7, #4]
 801b8d6:	681b      	ldr	r3, [r3, #0]
 801b8d8:	685b      	ldr	r3, [r3, #4]
 801b8da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801b8de:	687b      	ldr	r3, [r7, #4]
 801b8e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b8e2:	687b      	ldr	r3, [r7, #4]
 801b8e4:	681b      	ldr	r3, [r3, #0]
 801b8e6:	430a      	orrs	r2, r1
 801b8e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801b8ea:	687b      	ldr	r3, [r7, #4]
 801b8ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b8ee:	f003 0301 	and.w	r3, r3, #1
 801b8f2:	2b00      	cmp	r3, #0
 801b8f4:	d00a      	beq.n	801b90c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801b8f6:	687b      	ldr	r3, [r7, #4]
 801b8f8:	681b      	ldr	r3, [r3, #0]
 801b8fa:	685b      	ldr	r3, [r3, #4]
 801b8fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 801b900:	687b      	ldr	r3, [r7, #4]
 801b902:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b904:	687b      	ldr	r3, [r7, #4]
 801b906:	681b      	ldr	r3, [r3, #0]
 801b908:	430a      	orrs	r2, r1
 801b90a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801b90c:	687b      	ldr	r3, [r7, #4]
 801b90e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b910:	f003 0302 	and.w	r3, r3, #2
 801b914:	2b00      	cmp	r3, #0
 801b916:	d00a      	beq.n	801b92e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801b918:	687b      	ldr	r3, [r7, #4]
 801b91a:	681b      	ldr	r3, [r3, #0]
 801b91c:	685b      	ldr	r3, [r3, #4]
 801b91e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801b922:	687b      	ldr	r3, [r7, #4]
 801b924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b926:	687b      	ldr	r3, [r7, #4]
 801b928:	681b      	ldr	r3, [r3, #0]
 801b92a:	430a      	orrs	r2, r1
 801b92c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801b92e:	687b      	ldr	r3, [r7, #4]
 801b930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b932:	f003 0304 	and.w	r3, r3, #4
 801b936:	2b00      	cmp	r3, #0
 801b938:	d00a      	beq.n	801b950 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801b93a:	687b      	ldr	r3, [r7, #4]
 801b93c:	681b      	ldr	r3, [r3, #0]
 801b93e:	685b      	ldr	r3, [r3, #4]
 801b940:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801b944:	687b      	ldr	r3, [r7, #4]
 801b946:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801b948:	687b      	ldr	r3, [r7, #4]
 801b94a:	681b      	ldr	r3, [r3, #0]
 801b94c:	430a      	orrs	r2, r1
 801b94e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801b950:	687b      	ldr	r3, [r7, #4]
 801b952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b954:	f003 0310 	and.w	r3, r3, #16
 801b958:	2b00      	cmp	r3, #0
 801b95a:	d00a      	beq.n	801b972 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801b95c:	687b      	ldr	r3, [r7, #4]
 801b95e:	681b      	ldr	r3, [r3, #0]
 801b960:	689b      	ldr	r3, [r3, #8]
 801b962:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801b966:	687b      	ldr	r3, [r7, #4]
 801b968:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b96a:	687b      	ldr	r3, [r7, #4]
 801b96c:	681b      	ldr	r3, [r3, #0]
 801b96e:	430a      	orrs	r2, r1
 801b970:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801b972:	687b      	ldr	r3, [r7, #4]
 801b974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b976:	f003 0320 	and.w	r3, r3, #32
 801b97a:	2b00      	cmp	r3, #0
 801b97c:	d00a      	beq.n	801b994 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801b97e:	687b      	ldr	r3, [r7, #4]
 801b980:	681b      	ldr	r3, [r3, #0]
 801b982:	689b      	ldr	r3, [r3, #8]
 801b984:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801b988:	687b      	ldr	r3, [r7, #4]
 801b98a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801b98c:	687b      	ldr	r3, [r7, #4]
 801b98e:	681b      	ldr	r3, [r3, #0]
 801b990:	430a      	orrs	r2, r1
 801b992:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801b994:	687b      	ldr	r3, [r7, #4]
 801b996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b99c:	2b00      	cmp	r3, #0
 801b99e:	d01a      	beq.n	801b9d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801b9a0:	687b      	ldr	r3, [r7, #4]
 801b9a2:	681b      	ldr	r3, [r3, #0]
 801b9a4:	685b      	ldr	r3, [r3, #4]
 801b9a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801b9aa:	687b      	ldr	r3, [r7, #4]
 801b9ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801b9ae:	687b      	ldr	r3, [r7, #4]
 801b9b0:	681b      	ldr	r3, [r3, #0]
 801b9b2:	430a      	orrs	r2, r1
 801b9b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801b9b6:	687b      	ldr	r3, [r7, #4]
 801b9b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b9ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801b9be:	d10a      	bne.n	801b9d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801b9c0:	687b      	ldr	r3, [r7, #4]
 801b9c2:	681b      	ldr	r3, [r3, #0]
 801b9c4:	685b      	ldr	r3, [r3, #4]
 801b9c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801b9ca:	687b      	ldr	r3, [r7, #4]
 801b9cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801b9ce:	687b      	ldr	r3, [r7, #4]
 801b9d0:	681b      	ldr	r3, [r3, #0]
 801b9d2:	430a      	orrs	r2, r1
 801b9d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801b9d6:	687b      	ldr	r3, [r7, #4]
 801b9d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b9da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801b9de:	2b00      	cmp	r3, #0
 801b9e0:	d00a      	beq.n	801b9f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801b9e2:	687b      	ldr	r3, [r7, #4]
 801b9e4:	681b      	ldr	r3, [r3, #0]
 801b9e6:	685b      	ldr	r3, [r3, #4]
 801b9e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 801b9ec:	687b      	ldr	r3, [r7, #4]
 801b9ee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801b9f0:	687b      	ldr	r3, [r7, #4]
 801b9f2:	681b      	ldr	r3, [r3, #0]
 801b9f4:	430a      	orrs	r2, r1
 801b9f6:	605a      	str	r2, [r3, #4]
  }
}
 801b9f8:	bf00      	nop
 801b9fa:	370c      	adds	r7, #12
 801b9fc:	46bd      	mov	sp, r7
 801b9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba02:	4770      	bx	lr

0801ba04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801ba04:	b580      	push	{r7, lr}
 801ba06:	b098      	sub	sp, #96	@ 0x60
 801ba08:	af02      	add	r7, sp, #8
 801ba0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801ba0c:	687b      	ldr	r3, [r7, #4]
 801ba0e:	2200      	movs	r2, #0
 801ba10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801ba14:	f7fb fcda 	bl	80173cc <HAL_GetTick>
 801ba18:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801ba1a:	687b      	ldr	r3, [r7, #4]
 801ba1c:	681b      	ldr	r3, [r3, #0]
 801ba1e:	681b      	ldr	r3, [r3, #0]
 801ba20:	f003 0308 	and.w	r3, r3, #8
 801ba24:	2b08      	cmp	r3, #8
 801ba26:	d12e      	bne.n	801ba86 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801ba28:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801ba2c:	9300      	str	r3, [sp, #0]
 801ba2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ba30:	2200      	movs	r2, #0
 801ba32:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801ba36:	6878      	ldr	r0, [r7, #4]
 801ba38:	f000 f88c 	bl	801bb54 <UART_WaitOnFlagUntilTimeout>
 801ba3c:	4603      	mov	r3, r0
 801ba3e:	2b00      	cmp	r3, #0
 801ba40:	d021      	beq.n	801ba86 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801ba42:	687b      	ldr	r3, [r7, #4]
 801ba44:	681b      	ldr	r3, [r3, #0]
 801ba46:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ba48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ba4a:	e853 3f00 	ldrex	r3, [r3]
 801ba4e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801ba50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ba52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801ba56:	653b      	str	r3, [r7, #80]	@ 0x50
 801ba58:	687b      	ldr	r3, [r7, #4]
 801ba5a:	681b      	ldr	r3, [r3, #0]
 801ba5c:	461a      	mov	r2, r3
 801ba5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ba60:	647b      	str	r3, [r7, #68]	@ 0x44
 801ba62:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ba64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801ba66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801ba68:	e841 2300 	strex	r3, r2, [r1]
 801ba6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801ba6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ba70:	2b00      	cmp	r3, #0
 801ba72:	d1e6      	bne.n	801ba42 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 801ba74:	687b      	ldr	r3, [r7, #4]
 801ba76:	2220      	movs	r2, #32
 801ba78:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 801ba7a:	687b      	ldr	r3, [r7, #4]
 801ba7c:	2200      	movs	r2, #0
 801ba7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801ba82:	2303      	movs	r3, #3
 801ba84:	e062      	b.n	801bb4c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801ba86:	687b      	ldr	r3, [r7, #4]
 801ba88:	681b      	ldr	r3, [r3, #0]
 801ba8a:	681b      	ldr	r3, [r3, #0]
 801ba8c:	f003 0304 	and.w	r3, r3, #4
 801ba90:	2b04      	cmp	r3, #4
 801ba92:	d149      	bne.n	801bb28 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801ba94:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801ba98:	9300      	str	r3, [sp, #0]
 801ba9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ba9c:	2200      	movs	r2, #0
 801ba9e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801baa2:	6878      	ldr	r0, [r7, #4]
 801baa4:	f000 f856 	bl	801bb54 <UART_WaitOnFlagUntilTimeout>
 801baa8:	4603      	mov	r3, r0
 801baaa:	2b00      	cmp	r3, #0
 801baac:	d03c      	beq.n	801bb28 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801baae:	687b      	ldr	r3, [r7, #4]
 801bab0:	681b      	ldr	r3, [r3, #0]
 801bab2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bab6:	e853 3f00 	ldrex	r3, [r3]
 801baba:	623b      	str	r3, [r7, #32]
   return(result);
 801babc:	6a3b      	ldr	r3, [r7, #32]
 801babe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801bac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801bac4:	687b      	ldr	r3, [r7, #4]
 801bac6:	681b      	ldr	r3, [r3, #0]
 801bac8:	461a      	mov	r2, r3
 801baca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801bacc:	633b      	str	r3, [r7, #48]	@ 0x30
 801bace:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bad0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801bad2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801bad4:	e841 2300 	strex	r3, r2, [r1]
 801bad8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801bada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801badc:	2b00      	cmp	r3, #0
 801bade:	d1e6      	bne.n	801baae <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801bae0:	687b      	ldr	r3, [r7, #4]
 801bae2:	681b      	ldr	r3, [r3, #0]
 801bae4:	3308      	adds	r3, #8
 801bae6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bae8:	693b      	ldr	r3, [r7, #16]
 801baea:	e853 3f00 	ldrex	r3, [r3]
 801baee:	60fb      	str	r3, [r7, #12]
   return(result);
 801baf0:	68fb      	ldr	r3, [r7, #12]
 801baf2:	f023 0301 	bic.w	r3, r3, #1
 801baf6:	64bb      	str	r3, [r7, #72]	@ 0x48
 801baf8:	687b      	ldr	r3, [r7, #4]
 801bafa:	681b      	ldr	r3, [r3, #0]
 801bafc:	3308      	adds	r3, #8
 801bafe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801bb00:	61fa      	str	r2, [r7, #28]
 801bb02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bb04:	69b9      	ldr	r1, [r7, #24]
 801bb06:	69fa      	ldr	r2, [r7, #28]
 801bb08:	e841 2300 	strex	r3, r2, [r1]
 801bb0c:	617b      	str	r3, [r7, #20]
   return(result);
 801bb0e:	697b      	ldr	r3, [r7, #20]
 801bb10:	2b00      	cmp	r3, #0
 801bb12:	d1e5      	bne.n	801bae0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 801bb14:	687b      	ldr	r3, [r7, #4]
 801bb16:	2220      	movs	r2, #32
 801bb18:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 801bb1c:	687b      	ldr	r3, [r7, #4]
 801bb1e:	2200      	movs	r2, #0
 801bb20:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801bb24:	2303      	movs	r3, #3
 801bb26:	e011      	b.n	801bb4c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801bb28:	687b      	ldr	r3, [r7, #4]
 801bb2a:	2220      	movs	r2, #32
 801bb2c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801bb2e:	687b      	ldr	r3, [r7, #4]
 801bb30:	2220      	movs	r2, #32
 801bb32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801bb36:	687b      	ldr	r3, [r7, #4]
 801bb38:	2200      	movs	r2, #0
 801bb3a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801bb3c:	687b      	ldr	r3, [r7, #4]
 801bb3e:	2200      	movs	r2, #0
 801bb40:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801bb42:	687b      	ldr	r3, [r7, #4]
 801bb44:	2200      	movs	r2, #0
 801bb46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 801bb4a:	2300      	movs	r3, #0
}
 801bb4c:	4618      	mov	r0, r3
 801bb4e:	3758      	adds	r7, #88	@ 0x58
 801bb50:	46bd      	mov	sp, r7
 801bb52:	bd80      	pop	{r7, pc}

0801bb54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801bb54:	b580      	push	{r7, lr}
 801bb56:	b084      	sub	sp, #16
 801bb58:	af00      	add	r7, sp, #0
 801bb5a:	60f8      	str	r0, [r7, #12]
 801bb5c:	60b9      	str	r1, [r7, #8]
 801bb5e:	603b      	str	r3, [r7, #0]
 801bb60:	4613      	mov	r3, r2
 801bb62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801bb64:	e04f      	b.n	801bc06 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801bb66:	69bb      	ldr	r3, [r7, #24]
 801bb68:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bb6c:	d04b      	beq.n	801bc06 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801bb6e:	f7fb fc2d 	bl	80173cc <HAL_GetTick>
 801bb72:	4602      	mov	r2, r0
 801bb74:	683b      	ldr	r3, [r7, #0]
 801bb76:	1ad3      	subs	r3, r2, r3
 801bb78:	69ba      	ldr	r2, [r7, #24]
 801bb7a:	429a      	cmp	r2, r3
 801bb7c:	d302      	bcc.n	801bb84 <UART_WaitOnFlagUntilTimeout+0x30>
 801bb7e:	69bb      	ldr	r3, [r7, #24]
 801bb80:	2b00      	cmp	r3, #0
 801bb82:	d101      	bne.n	801bb88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801bb84:	2303      	movs	r3, #3
 801bb86:	e04e      	b.n	801bc26 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801bb88:	68fb      	ldr	r3, [r7, #12]
 801bb8a:	681b      	ldr	r3, [r3, #0]
 801bb8c:	681b      	ldr	r3, [r3, #0]
 801bb8e:	f003 0304 	and.w	r3, r3, #4
 801bb92:	2b00      	cmp	r3, #0
 801bb94:	d037      	beq.n	801bc06 <UART_WaitOnFlagUntilTimeout+0xb2>
 801bb96:	68bb      	ldr	r3, [r7, #8]
 801bb98:	2b80      	cmp	r3, #128	@ 0x80
 801bb9a:	d034      	beq.n	801bc06 <UART_WaitOnFlagUntilTimeout+0xb2>
 801bb9c:	68bb      	ldr	r3, [r7, #8]
 801bb9e:	2b40      	cmp	r3, #64	@ 0x40
 801bba0:	d031      	beq.n	801bc06 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801bba2:	68fb      	ldr	r3, [r7, #12]
 801bba4:	681b      	ldr	r3, [r3, #0]
 801bba6:	69db      	ldr	r3, [r3, #28]
 801bba8:	f003 0308 	and.w	r3, r3, #8
 801bbac:	2b08      	cmp	r3, #8
 801bbae:	d110      	bne.n	801bbd2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801bbb0:	68fb      	ldr	r3, [r7, #12]
 801bbb2:	681b      	ldr	r3, [r3, #0]
 801bbb4:	2208      	movs	r2, #8
 801bbb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801bbb8:	68f8      	ldr	r0, [r7, #12]
 801bbba:	f000 f8ff 	bl	801bdbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801bbbe:	68fb      	ldr	r3, [r7, #12]
 801bbc0:	2208      	movs	r2, #8
 801bbc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801bbc6:	68fb      	ldr	r3, [r7, #12]
 801bbc8:	2200      	movs	r2, #0
 801bbca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 801bbce:	2301      	movs	r3, #1
 801bbd0:	e029      	b.n	801bc26 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801bbd2:	68fb      	ldr	r3, [r7, #12]
 801bbd4:	681b      	ldr	r3, [r3, #0]
 801bbd6:	69db      	ldr	r3, [r3, #28]
 801bbd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801bbdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801bbe0:	d111      	bne.n	801bc06 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801bbe2:	68fb      	ldr	r3, [r7, #12]
 801bbe4:	681b      	ldr	r3, [r3, #0]
 801bbe6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801bbea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801bbec:	68f8      	ldr	r0, [r7, #12]
 801bbee:	f000 f8e5 	bl	801bdbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801bbf2:	68fb      	ldr	r3, [r7, #12]
 801bbf4:	2220      	movs	r2, #32
 801bbf6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801bbfa:	68fb      	ldr	r3, [r7, #12]
 801bbfc:	2200      	movs	r2, #0
 801bbfe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 801bc02:	2303      	movs	r3, #3
 801bc04:	e00f      	b.n	801bc26 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801bc06:	68fb      	ldr	r3, [r7, #12]
 801bc08:	681b      	ldr	r3, [r3, #0]
 801bc0a:	69da      	ldr	r2, [r3, #28]
 801bc0c:	68bb      	ldr	r3, [r7, #8]
 801bc0e:	4013      	ands	r3, r2
 801bc10:	68ba      	ldr	r2, [r7, #8]
 801bc12:	429a      	cmp	r2, r3
 801bc14:	bf0c      	ite	eq
 801bc16:	2301      	moveq	r3, #1
 801bc18:	2300      	movne	r3, #0
 801bc1a:	b2db      	uxtb	r3, r3
 801bc1c:	461a      	mov	r2, r3
 801bc1e:	79fb      	ldrb	r3, [r7, #7]
 801bc20:	429a      	cmp	r2, r3
 801bc22:	d0a0      	beq.n	801bb66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801bc24:	2300      	movs	r3, #0
}
 801bc26:	4618      	mov	r0, r3
 801bc28:	3710      	adds	r7, #16
 801bc2a:	46bd      	mov	sp, r7
 801bc2c:	bd80      	pop	{r7, pc}
	...

0801bc30 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801bc30:	b480      	push	{r7}
 801bc32:	b097      	sub	sp, #92	@ 0x5c
 801bc34:	af00      	add	r7, sp, #0
 801bc36:	60f8      	str	r0, [r7, #12]
 801bc38:	60b9      	str	r1, [r7, #8]
 801bc3a:	4613      	mov	r3, r2
 801bc3c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801bc3e:	68fb      	ldr	r3, [r7, #12]
 801bc40:	68ba      	ldr	r2, [r7, #8]
 801bc42:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 801bc44:	68fb      	ldr	r3, [r7, #12]
 801bc46:	88fa      	ldrh	r2, [r7, #6]
 801bc48:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 801bc4c:	68fb      	ldr	r3, [r7, #12]
 801bc4e:	88fa      	ldrh	r2, [r7, #6]
 801bc50:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 801bc54:	68fb      	ldr	r3, [r7, #12]
 801bc56:	2200      	movs	r2, #0
 801bc58:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801bc5a:	68fb      	ldr	r3, [r7, #12]
 801bc5c:	689b      	ldr	r3, [r3, #8]
 801bc5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801bc62:	d10e      	bne.n	801bc82 <UART_Start_Receive_IT+0x52>
 801bc64:	68fb      	ldr	r3, [r7, #12]
 801bc66:	691b      	ldr	r3, [r3, #16]
 801bc68:	2b00      	cmp	r3, #0
 801bc6a:	d105      	bne.n	801bc78 <UART_Start_Receive_IT+0x48>
 801bc6c:	68fb      	ldr	r3, [r7, #12]
 801bc6e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 801bc72:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801bc76:	e02d      	b.n	801bcd4 <UART_Start_Receive_IT+0xa4>
 801bc78:	68fb      	ldr	r3, [r7, #12]
 801bc7a:	22ff      	movs	r2, #255	@ 0xff
 801bc7c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801bc80:	e028      	b.n	801bcd4 <UART_Start_Receive_IT+0xa4>
 801bc82:	68fb      	ldr	r3, [r7, #12]
 801bc84:	689b      	ldr	r3, [r3, #8]
 801bc86:	2b00      	cmp	r3, #0
 801bc88:	d10d      	bne.n	801bca6 <UART_Start_Receive_IT+0x76>
 801bc8a:	68fb      	ldr	r3, [r7, #12]
 801bc8c:	691b      	ldr	r3, [r3, #16]
 801bc8e:	2b00      	cmp	r3, #0
 801bc90:	d104      	bne.n	801bc9c <UART_Start_Receive_IT+0x6c>
 801bc92:	68fb      	ldr	r3, [r7, #12]
 801bc94:	22ff      	movs	r2, #255	@ 0xff
 801bc96:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801bc9a:	e01b      	b.n	801bcd4 <UART_Start_Receive_IT+0xa4>
 801bc9c:	68fb      	ldr	r3, [r7, #12]
 801bc9e:	227f      	movs	r2, #127	@ 0x7f
 801bca0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801bca4:	e016      	b.n	801bcd4 <UART_Start_Receive_IT+0xa4>
 801bca6:	68fb      	ldr	r3, [r7, #12]
 801bca8:	689b      	ldr	r3, [r3, #8]
 801bcaa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801bcae:	d10d      	bne.n	801bccc <UART_Start_Receive_IT+0x9c>
 801bcb0:	68fb      	ldr	r3, [r7, #12]
 801bcb2:	691b      	ldr	r3, [r3, #16]
 801bcb4:	2b00      	cmp	r3, #0
 801bcb6:	d104      	bne.n	801bcc2 <UART_Start_Receive_IT+0x92>
 801bcb8:	68fb      	ldr	r3, [r7, #12]
 801bcba:	227f      	movs	r2, #127	@ 0x7f
 801bcbc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801bcc0:	e008      	b.n	801bcd4 <UART_Start_Receive_IT+0xa4>
 801bcc2:	68fb      	ldr	r3, [r7, #12]
 801bcc4:	223f      	movs	r2, #63	@ 0x3f
 801bcc6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801bcca:	e003      	b.n	801bcd4 <UART_Start_Receive_IT+0xa4>
 801bccc:	68fb      	ldr	r3, [r7, #12]
 801bcce:	2200      	movs	r2, #0
 801bcd0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801bcd4:	68fb      	ldr	r3, [r7, #12]
 801bcd6:	2200      	movs	r2, #0
 801bcd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801bcdc:	68fb      	ldr	r3, [r7, #12]
 801bcde:	2222      	movs	r2, #34	@ 0x22
 801bce0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801bce4:	68fb      	ldr	r3, [r7, #12]
 801bce6:	681b      	ldr	r3, [r3, #0]
 801bce8:	3308      	adds	r3, #8
 801bcea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bcec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bcee:	e853 3f00 	ldrex	r3, [r3]
 801bcf2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801bcf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bcf6:	f043 0301 	orr.w	r3, r3, #1
 801bcfa:	657b      	str	r3, [r7, #84]	@ 0x54
 801bcfc:	68fb      	ldr	r3, [r7, #12]
 801bcfe:	681b      	ldr	r3, [r3, #0]
 801bd00:	3308      	adds	r3, #8
 801bd02:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801bd04:	64ba      	str	r2, [r7, #72]	@ 0x48
 801bd06:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bd08:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801bd0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801bd0c:	e841 2300 	strex	r3, r2, [r1]
 801bd10:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 801bd12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801bd14:	2b00      	cmp	r3, #0
 801bd16:	d1e5      	bne.n	801bce4 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801bd18:	68fb      	ldr	r3, [r7, #12]
 801bd1a:	689b      	ldr	r3, [r3, #8]
 801bd1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801bd20:	d107      	bne.n	801bd32 <UART_Start_Receive_IT+0x102>
 801bd22:	68fb      	ldr	r3, [r7, #12]
 801bd24:	691b      	ldr	r3, [r3, #16]
 801bd26:	2b00      	cmp	r3, #0
 801bd28:	d103      	bne.n	801bd32 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801bd2a:	68fb      	ldr	r3, [r7, #12]
 801bd2c:	4a21      	ldr	r2, [pc, #132]	@ (801bdb4 <UART_Start_Receive_IT+0x184>)
 801bd2e:	669a      	str	r2, [r3, #104]	@ 0x68
 801bd30:	e002      	b.n	801bd38 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801bd32:	68fb      	ldr	r3, [r7, #12]
 801bd34:	4a20      	ldr	r2, [pc, #128]	@ (801bdb8 <UART_Start_Receive_IT+0x188>)
 801bd36:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801bd38:	68fb      	ldr	r3, [r7, #12]
 801bd3a:	691b      	ldr	r3, [r3, #16]
 801bd3c:	2b00      	cmp	r3, #0
 801bd3e:	d019      	beq.n	801bd74 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801bd40:	68fb      	ldr	r3, [r7, #12]
 801bd42:	681b      	ldr	r3, [r3, #0]
 801bd44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bd46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bd48:	e853 3f00 	ldrex	r3, [r3]
 801bd4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801bd4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd50:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 801bd54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801bd56:	68fb      	ldr	r3, [r7, #12]
 801bd58:	681b      	ldr	r3, [r3, #0]
 801bd5a:	461a      	mov	r2, r3
 801bd5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801bd5e:	637b      	str	r3, [r7, #52]	@ 0x34
 801bd60:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bd62:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801bd64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801bd66:	e841 2300 	strex	r3, r2, [r1]
 801bd6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801bd6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd6e:	2b00      	cmp	r3, #0
 801bd70:	d1e6      	bne.n	801bd40 <UART_Start_Receive_IT+0x110>
 801bd72:	e018      	b.n	801bda6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801bd74:	68fb      	ldr	r3, [r7, #12]
 801bd76:	681b      	ldr	r3, [r3, #0]
 801bd78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bd7a:	697b      	ldr	r3, [r7, #20]
 801bd7c:	e853 3f00 	ldrex	r3, [r3]
 801bd80:	613b      	str	r3, [r7, #16]
   return(result);
 801bd82:	693b      	ldr	r3, [r7, #16]
 801bd84:	f043 0320 	orr.w	r3, r3, #32
 801bd88:	653b      	str	r3, [r7, #80]	@ 0x50
 801bd8a:	68fb      	ldr	r3, [r7, #12]
 801bd8c:	681b      	ldr	r3, [r3, #0]
 801bd8e:	461a      	mov	r2, r3
 801bd90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801bd92:	623b      	str	r3, [r7, #32]
 801bd94:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bd96:	69f9      	ldr	r1, [r7, #28]
 801bd98:	6a3a      	ldr	r2, [r7, #32]
 801bd9a:	e841 2300 	strex	r3, r2, [r1]
 801bd9e:	61bb      	str	r3, [r7, #24]
   return(result);
 801bda0:	69bb      	ldr	r3, [r7, #24]
 801bda2:	2b00      	cmp	r3, #0
 801bda4:	d1e6      	bne.n	801bd74 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 801bda6:	2300      	movs	r3, #0
}
 801bda8:	4618      	mov	r0, r3
 801bdaa:	375c      	adds	r7, #92	@ 0x5c
 801bdac:	46bd      	mov	sp, r7
 801bdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdb2:	4770      	bx	lr
 801bdb4:	0801c0c1 	.word	0x0801c0c1
 801bdb8:	0801bf05 	.word	0x0801bf05

0801bdbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801bdbc:	b480      	push	{r7}
 801bdbe:	b095      	sub	sp, #84	@ 0x54
 801bdc0:	af00      	add	r7, sp, #0
 801bdc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801bdc4:	687b      	ldr	r3, [r7, #4]
 801bdc6:	681b      	ldr	r3, [r3, #0]
 801bdc8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bdca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bdcc:	e853 3f00 	ldrex	r3, [r3]
 801bdd0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801bdd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bdd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801bdd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801bdda:	687b      	ldr	r3, [r7, #4]
 801bddc:	681b      	ldr	r3, [r3, #0]
 801bdde:	461a      	mov	r2, r3
 801bde0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801bde2:	643b      	str	r3, [r7, #64]	@ 0x40
 801bde4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bde6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801bde8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801bdea:	e841 2300 	strex	r3, r2, [r1]
 801bdee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801bdf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bdf2:	2b00      	cmp	r3, #0
 801bdf4:	d1e6      	bne.n	801bdc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801bdf6:	687b      	ldr	r3, [r7, #4]
 801bdf8:	681b      	ldr	r3, [r3, #0]
 801bdfa:	3308      	adds	r3, #8
 801bdfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bdfe:	6a3b      	ldr	r3, [r7, #32]
 801be00:	e853 3f00 	ldrex	r3, [r3]
 801be04:	61fb      	str	r3, [r7, #28]
   return(result);
 801be06:	69fb      	ldr	r3, [r7, #28]
 801be08:	f023 0301 	bic.w	r3, r3, #1
 801be0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801be0e:	687b      	ldr	r3, [r7, #4]
 801be10:	681b      	ldr	r3, [r3, #0]
 801be12:	3308      	adds	r3, #8
 801be14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801be16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801be18:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801be1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801be1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801be1e:	e841 2300 	strex	r3, r2, [r1]
 801be22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801be24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be26:	2b00      	cmp	r3, #0
 801be28:	d1e5      	bne.n	801bdf6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801be2a:	687b      	ldr	r3, [r7, #4]
 801be2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801be2e:	2b01      	cmp	r3, #1
 801be30:	d118      	bne.n	801be64 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801be32:	687b      	ldr	r3, [r7, #4]
 801be34:	681b      	ldr	r3, [r3, #0]
 801be36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801be38:	68fb      	ldr	r3, [r7, #12]
 801be3a:	e853 3f00 	ldrex	r3, [r3]
 801be3e:	60bb      	str	r3, [r7, #8]
   return(result);
 801be40:	68bb      	ldr	r3, [r7, #8]
 801be42:	f023 0310 	bic.w	r3, r3, #16
 801be46:	647b      	str	r3, [r7, #68]	@ 0x44
 801be48:	687b      	ldr	r3, [r7, #4]
 801be4a:	681b      	ldr	r3, [r3, #0]
 801be4c:	461a      	mov	r2, r3
 801be4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801be50:	61bb      	str	r3, [r7, #24]
 801be52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801be54:	6979      	ldr	r1, [r7, #20]
 801be56:	69ba      	ldr	r2, [r7, #24]
 801be58:	e841 2300 	strex	r3, r2, [r1]
 801be5c:	613b      	str	r3, [r7, #16]
   return(result);
 801be5e:	693b      	ldr	r3, [r7, #16]
 801be60:	2b00      	cmp	r3, #0
 801be62:	d1e6      	bne.n	801be32 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801be64:	687b      	ldr	r3, [r7, #4]
 801be66:	2220      	movs	r2, #32
 801be68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801be6c:	687b      	ldr	r3, [r7, #4]
 801be6e:	2200      	movs	r2, #0
 801be70:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801be72:	687b      	ldr	r3, [r7, #4]
 801be74:	2200      	movs	r2, #0
 801be76:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801be78:	bf00      	nop
 801be7a:	3754      	adds	r7, #84	@ 0x54
 801be7c:	46bd      	mov	sp, r7
 801be7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be82:	4770      	bx	lr

0801be84 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801be84:	b580      	push	{r7, lr}
 801be86:	b084      	sub	sp, #16
 801be88:	af00      	add	r7, sp, #0
 801be8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801be8c:	687b      	ldr	r3, [r7, #4]
 801be8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801be90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801be92:	68fb      	ldr	r3, [r7, #12]
 801be94:	2200      	movs	r2, #0
 801be96:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 801be9a:	68fb      	ldr	r3, [r7, #12]
 801be9c:	2200      	movs	r2, #0
 801be9e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801bea2:	68f8      	ldr	r0, [r7, #12]
 801bea4:	f7ff fa9c 	bl	801b3e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801bea8:	bf00      	nop
 801beaa:	3710      	adds	r7, #16
 801beac:	46bd      	mov	sp, r7
 801beae:	bd80      	pop	{r7, pc}

0801beb0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801beb0:	b580      	push	{r7, lr}
 801beb2:	b088      	sub	sp, #32
 801beb4:	af00      	add	r7, sp, #0
 801beb6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801beb8:	687b      	ldr	r3, [r7, #4]
 801beba:	681b      	ldr	r3, [r3, #0]
 801bebc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bebe:	68fb      	ldr	r3, [r7, #12]
 801bec0:	e853 3f00 	ldrex	r3, [r3]
 801bec4:	60bb      	str	r3, [r7, #8]
   return(result);
 801bec6:	68bb      	ldr	r3, [r7, #8]
 801bec8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801becc:	61fb      	str	r3, [r7, #28]
 801bece:	687b      	ldr	r3, [r7, #4]
 801bed0:	681b      	ldr	r3, [r3, #0]
 801bed2:	461a      	mov	r2, r3
 801bed4:	69fb      	ldr	r3, [r7, #28]
 801bed6:	61bb      	str	r3, [r7, #24]
 801bed8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801beda:	6979      	ldr	r1, [r7, #20]
 801bedc:	69ba      	ldr	r2, [r7, #24]
 801bede:	e841 2300 	strex	r3, r2, [r1]
 801bee2:	613b      	str	r3, [r7, #16]
   return(result);
 801bee4:	693b      	ldr	r3, [r7, #16]
 801bee6:	2b00      	cmp	r3, #0
 801bee8:	d1e6      	bne.n	801beb8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801beea:	687b      	ldr	r3, [r7, #4]
 801beec:	2220      	movs	r2, #32
 801beee:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801bef0:	687b      	ldr	r3, [r7, #4]
 801bef2:	2200      	movs	r2, #0
 801bef4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801bef6:	6878      	ldr	r0, [r7, #4]
 801bef8:	f7ff fa68 	bl	801b3cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801befc:	bf00      	nop
 801befe:	3720      	adds	r7, #32
 801bf00:	46bd      	mov	sp, r7
 801bf02:	bd80      	pop	{r7, pc}

0801bf04 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801bf04:	b580      	push	{r7, lr}
 801bf06:	b09c      	sub	sp, #112	@ 0x70
 801bf08:	af00      	add	r7, sp, #0
 801bf0a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801bf0c:	687b      	ldr	r3, [r7, #4]
 801bf0e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801bf12:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801bf16:	687b      	ldr	r3, [r7, #4]
 801bf18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801bf1c:	2b22      	cmp	r3, #34	@ 0x22
 801bf1e:	f040 80be 	bne.w	801c09e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801bf22:	687b      	ldr	r3, [r7, #4]
 801bf24:	681b      	ldr	r3, [r3, #0]
 801bf26:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801bf28:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801bf2c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 801bf30:	b2d9      	uxtb	r1, r3
 801bf32:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801bf36:	b2da      	uxtb	r2, r3
 801bf38:	687b      	ldr	r3, [r7, #4]
 801bf3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801bf3c:	400a      	ands	r2, r1
 801bf3e:	b2d2      	uxtb	r2, r2
 801bf40:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801bf42:	687b      	ldr	r3, [r7, #4]
 801bf44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801bf46:	1c5a      	adds	r2, r3, #1
 801bf48:	687b      	ldr	r3, [r7, #4]
 801bf4a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801bf4c:	687b      	ldr	r3, [r7, #4]
 801bf4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801bf52:	b29b      	uxth	r3, r3
 801bf54:	3b01      	subs	r3, #1
 801bf56:	b29a      	uxth	r2, r3
 801bf58:	687b      	ldr	r3, [r7, #4]
 801bf5a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 801bf5e:	687b      	ldr	r3, [r7, #4]
 801bf60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801bf64:	b29b      	uxth	r3, r3
 801bf66:	2b00      	cmp	r3, #0
 801bf68:	f040 80a3 	bne.w	801c0b2 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801bf6c:	687b      	ldr	r3, [r7, #4]
 801bf6e:	681b      	ldr	r3, [r3, #0]
 801bf70:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bf72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801bf74:	e853 3f00 	ldrex	r3, [r3]
 801bf78:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801bf7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801bf7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801bf80:	66bb      	str	r3, [r7, #104]	@ 0x68
 801bf82:	687b      	ldr	r3, [r7, #4]
 801bf84:	681b      	ldr	r3, [r3, #0]
 801bf86:	461a      	mov	r2, r3
 801bf88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801bf8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801bf8c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bf8e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801bf90:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801bf92:	e841 2300 	strex	r3, r2, [r1]
 801bf96:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801bf98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801bf9a:	2b00      	cmp	r3, #0
 801bf9c:	d1e6      	bne.n	801bf6c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801bf9e:	687b      	ldr	r3, [r7, #4]
 801bfa0:	681b      	ldr	r3, [r3, #0]
 801bfa2:	3308      	adds	r3, #8
 801bfa4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bfa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bfa8:	e853 3f00 	ldrex	r3, [r3]
 801bfac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801bfae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bfb0:	f023 0301 	bic.w	r3, r3, #1
 801bfb4:	667b      	str	r3, [r7, #100]	@ 0x64
 801bfb6:	687b      	ldr	r3, [r7, #4]
 801bfb8:	681b      	ldr	r3, [r3, #0]
 801bfba:	3308      	adds	r3, #8
 801bfbc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801bfbe:	647a      	str	r2, [r7, #68]	@ 0x44
 801bfc0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bfc2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801bfc4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801bfc6:	e841 2300 	strex	r3, r2, [r1]
 801bfca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801bfcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bfce:	2b00      	cmp	r3, #0
 801bfd0:	d1e5      	bne.n	801bf9e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801bfd2:	687b      	ldr	r3, [r7, #4]
 801bfd4:	2220      	movs	r2, #32
 801bfd6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801bfda:	687b      	ldr	r3, [r7, #4]
 801bfdc:	2200      	movs	r2, #0
 801bfde:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801bfe0:	687b      	ldr	r3, [r7, #4]
 801bfe2:	2200      	movs	r2, #0
 801bfe4:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801bfe6:	687b      	ldr	r3, [r7, #4]
 801bfe8:	681b      	ldr	r3, [r3, #0]
 801bfea:	4a34      	ldr	r2, [pc, #208]	@ (801c0bc <UART_RxISR_8BIT+0x1b8>)
 801bfec:	4293      	cmp	r3, r2
 801bfee:	d01f      	beq.n	801c030 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801bff0:	687b      	ldr	r3, [r7, #4]
 801bff2:	681b      	ldr	r3, [r3, #0]
 801bff4:	685b      	ldr	r3, [r3, #4]
 801bff6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801bffa:	2b00      	cmp	r3, #0
 801bffc:	d018      	beq.n	801c030 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801bffe:	687b      	ldr	r3, [r7, #4]
 801c000:	681b      	ldr	r3, [r3, #0]
 801c002:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c006:	e853 3f00 	ldrex	r3, [r3]
 801c00a:	623b      	str	r3, [r7, #32]
   return(result);
 801c00c:	6a3b      	ldr	r3, [r7, #32]
 801c00e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801c012:	663b      	str	r3, [r7, #96]	@ 0x60
 801c014:	687b      	ldr	r3, [r7, #4]
 801c016:	681b      	ldr	r3, [r3, #0]
 801c018:	461a      	mov	r2, r3
 801c01a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801c01c:	633b      	str	r3, [r7, #48]	@ 0x30
 801c01e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c020:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801c022:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c024:	e841 2300 	strex	r3, r2, [r1]
 801c028:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801c02a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c02c:	2b00      	cmp	r3, #0
 801c02e:	d1e6      	bne.n	801bffe <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c030:	687b      	ldr	r3, [r7, #4]
 801c032:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801c034:	2b01      	cmp	r3, #1
 801c036:	d12e      	bne.n	801c096 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c038:	687b      	ldr	r3, [r7, #4]
 801c03a:	2200      	movs	r2, #0
 801c03c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c03e:	687b      	ldr	r3, [r7, #4]
 801c040:	681b      	ldr	r3, [r3, #0]
 801c042:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c044:	693b      	ldr	r3, [r7, #16]
 801c046:	e853 3f00 	ldrex	r3, [r3]
 801c04a:	60fb      	str	r3, [r7, #12]
   return(result);
 801c04c:	68fb      	ldr	r3, [r7, #12]
 801c04e:	f023 0310 	bic.w	r3, r3, #16
 801c052:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801c054:	687b      	ldr	r3, [r7, #4]
 801c056:	681b      	ldr	r3, [r3, #0]
 801c058:	461a      	mov	r2, r3
 801c05a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801c05c:	61fb      	str	r3, [r7, #28]
 801c05e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c060:	69b9      	ldr	r1, [r7, #24]
 801c062:	69fa      	ldr	r2, [r7, #28]
 801c064:	e841 2300 	strex	r3, r2, [r1]
 801c068:	617b      	str	r3, [r7, #20]
   return(result);
 801c06a:	697b      	ldr	r3, [r7, #20]
 801c06c:	2b00      	cmp	r3, #0
 801c06e:	d1e6      	bne.n	801c03e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801c070:	687b      	ldr	r3, [r7, #4]
 801c072:	681b      	ldr	r3, [r3, #0]
 801c074:	69db      	ldr	r3, [r3, #28]
 801c076:	f003 0310 	and.w	r3, r3, #16
 801c07a:	2b10      	cmp	r3, #16
 801c07c:	d103      	bne.n	801c086 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801c07e:	687b      	ldr	r3, [r7, #4]
 801c080:	681b      	ldr	r3, [r3, #0]
 801c082:	2210      	movs	r2, #16
 801c084:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801c086:	687b      	ldr	r3, [r7, #4]
 801c088:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801c08c:	4619      	mov	r1, r3
 801c08e:	6878      	ldr	r0, [r7, #4]
 801c090:	f7ff f9b0 	bl	801b3f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801c094:	e00d      	b.n	801c0b2 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 801c096:	6878      	ldr	r0, [r7, #4]
 801c098:	f7e6 f9f2 	bl	8002480 <HAL_UART_RxCpltCallback>
}
 801c09c:	e009      	b.n	801c0b2 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801c09e:	687b      	ldr	r3, [r7, #4]
 801c0a0:	681b      	ldr	r3, [r3, #0]
 801c0a2:	8b1b      	ldrh	r3, [r3, #24]
 801c0a4:	b29a      	uxth	r2, r3
 801c0a6:	687b      	ldr	r3, [r7, #4]
 801c0a8:	681b      	ldr	r3, [r3, #0]
 801c0aa:	f042 0208 	orr.w	r2, r2, #8
 801c0ae:	b292      	uxth	r2, r2
 801c0b0:	831a      	strh	r2, [r3, #24]
}
 801c0b2:	bf00      	nop
 801c0b4:	3770      	adds	r7, #112	@ 0x70
 801c0b6:	46bd      	mov	sp, r7
 801c0b8:	bd80      	pop	{r7, pc}
 801c0ba:	bf00      	nop
 801c0bc:	40008000 	.word	0x40008000

0801c0c0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801c0c0:	b580      	push	{r7, lr}
 801c0c2:	b09c      	sub	sp, #112	@ 0x70
 801c0c4:	af00      	add	r7, sp, #0
 801c0c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801c0c8:	687b      	ldr	r3, [r7, #4]
 801c0ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801c0ce:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801c0d2:	687b      	ldr	r3, [r7, #4]
 801c0d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801c0d8:	2b22      	cmp	r3, #34	@ 0x22
 801c0da:	f040 80be 	bne.w	801c25a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801c0de:	687b      	ldr	r3, [r7, #4]
 801c0e0:	681b      	ldr	r3, [r3, #0]
 801c0e2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801c0e4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801c0e8:	687b      	ldr	r3, [r7, #4]
 801c0ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c0ec:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801c0ee:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 801c0f2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801c0f6:	4013      	ands	r3, r2
 801c0f8:	b29a      	uxth	r2, r3
 801c0fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801c0fc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801c0fe:	687b      	ldr	r3, [r7, #4]
 801c100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c102:	1c9a      	adds	r2, r3, #2
 801c104:	687b      	ldr	r3, [r7, #4]
 801c106:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801c108:	687b      	ldr	r3, [r7, #4]
 801c10a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801c10e:	b29b      	uxth	r3, r3
 801c110:	3b01      	subs	r3, #1
 801c112:	b29a      	uxth	r2, r3
 801c114:	687b      	ldr	r3, [r7, #4]
 801c116:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 801c11a:	687b      	ldr	r3, [r7, #4]
 801c11c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801c120:	b29b      	uxth	r3, r3
 801c122:	2b00      	cmp	r3, #0
 801c124:	f040 80a3 	bne.w	801c26e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c128:	687b      	ldr	r3, [r7, #4]
 801c12a:	681b      	ldr	r3, [r3, #0]
 801c12c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c12e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c130:	e853 3f00 	ldrex	r3, [r3]
 801c134:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801c136:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c138:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801c13c:	667b      	str	r3, [r7, #100]	@ 0x64
 801c13e:	687b      	ldr	r3, [r7, #4]
 801c140:	681b      	ldr	r3, [r3, #0]
 801c142:	461a      	mov	r2, r3
 801c144:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801c146:	657b      	str	r3, [r7, #84]	@ 0x54
 801c148:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c14a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801c14c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801c14e:	e841 2300 	strex	r3, r2, [r1]
 801c152:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801c154:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c156:	2b00      	cmp	r3, #0
 801c158:	d1e6      	bne.n	801c128 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c15a:	687b      	ldr	r3, [r7, #4]
 801c15c:	681b      	ldr	r3, [r3, #0]
 801c15e:	3308      	adds	r3, #8
 801c160:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c162:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c164:	e853 3f00 	ldrex	r3, [r3]
 801c168:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801c16a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c16c:	f023 0301 	bic.w	r3, r3, #1
 801c170:	663b      	str	r3, [r7, #96]	@ 0x60
 801c172:	687b      	ldr	r3, [r7, #4]
 801c174:	681b      	ldr	r3, [r3, #0]
 801c176:	3308      	adds	r3, #8
 801c178:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801c17a:	643a      	str	r2, [r7, #64]	@ 0x40
 801c17c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c17e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801c180:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801c182:	e841 2300 	strex	r3, r2, [r1]
 801c186:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801c188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c18a:	2b00      	cmp	r3, #0
 801c18c:	d1e5      	bne.n	801c15a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801c18e:	687b      	ldr	r3, [r7, #4]
 801c190:	2220      	movs	r2, #32
 801c192:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801c196:	687b      	ldr	r3, [r7, #4]
 801c198:	2200      	movs	r2, #0
 801c19a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801c19c:	687b      	ldr	r3, [r7, #4]
 801c19e:	2200      	movs	r2, #0
 801c1a0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801c1a2:	687b      	ldr	r3, [r7, #4]
 801c1a4:	681b      	ldr	r3, [r3, #0]
 801c1a6:	4a34      	ldr	r2, [pc, #208]	@ (801c278 <UART_RxISR_16BIT+0x1b8>)
 801c1a8:	4293      	cmp	r3, r2
 801c1aa:	d01f      	beq.n	801c1ec <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801c1ac:	687b      	ldr	r3, [r7, #4]
 801c1ae:	681b      	ldr	r3, [r3, #0]
 801c1b0:	685b      	ldr	r3, [r3, #4]
 801c1b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801c1b6:	2b00      	cmp	r3, #0
 801c1b8:	d018      	beq.n	801c1ec <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801c1ba:	687b      	ldr	r3, [r7, #4]
 801c1bc:	681b      	ldr	r3, [r3, #0]
 801c1be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c1c0:	6a3b      	ldr	r3, [r7, #32]
 801c1c2:	e853 3f00 	ldrex	r3, [r3]
 801c1c6:	61fb      	str	r3, [r7, #28]
   return(result);
 801c1c8:	69fb      	ldr	r3, [r7, #28]
 801c1ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801c1ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801c1d0:	687b      	ldr	r3, [r7, #4]
 801c1d2:	681b      	ldr	r3, [r3, #0]
 801c1d4:	461a      	mov	r2, r3
 801c1d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801c1d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c1da:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c1dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801c1de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c1e0:	e841 2300 	strex	r3, r2, [r1]
 801c1e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801c1e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1e8:	2b00      	cmp	r3, #0
 801c1ea:	d1e6      	bne.n	801c1ba <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c1ec:	687b      	ldr	r3, [r7, #4]
 801c1ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801c1f0:	2b01      	cmp	r3, #1
 801c1f2:	d12e      	bne.n	801c252 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c1f4:	687b      	ldr	r3, [r7, #4]
 801c1f6:	2200      	movs	r2, #0
 801c1f8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c1fa:	687b      	ldr	r3, [r7, #4]
 801c1fc:	681b      	ldr	r3, [r3, #0]
 801c1fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c200:	68fb      	ldr	r3, [r7, #12]
 801c202:	e853 3f00 	ldrex	r3, [r3]
 801c206:	60bb      	str	r3, [r7, #8]
   return(result);
 801c208:	68bb      	ldr	r3, [r7, #8]
 801c20a:	f023 0310 	bic.w	r3, r3, #16
 801c20e:	65bb      	str	r3, [r7, #88]	@ 0x58
 801c210:	687b      	ldr	r3, [r7, #4]
 801c212:	681b      	ldr	r3, [r3, #0]
 801c214:	461a      	mov	r2, r3
 801c216:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801c218:	61bb      	str	r3, [r7, #24]
 801c21a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c21c:	6979      	ldr	r1, [r7, #20]
 801c21e:	69ba      	ldr	r2, [r7, #24]
 801c220:	e841 2300 	strex	r3, r2, [r1]
 801c224:	613b      	str	r3, [r7, #16]
   return(result);
 801c226:	693b      	ldr	r3, [r7, #16]
 801c228:	2b00      	cmp	r3, #0
 801c22a:	d1e6      	bne.n	801c1fa <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801c22c:	687b      	ldr	r3, [r7, #4]
 801c22e:	681b      	ldr	r3, [r3, #0]
 801c230:	69db      	ldr	r3, [r3, #28]
 801c232:	f003 0310 	and.w	r3, r3, #16
 801c236:	2b10      	cmp	r3, #16
 801c238:	d103      	bne.n	801c242 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801c23a:	687b      	ldr	r3, [r7, #4]
 801c23c:	681b      	ldr	r3, [r3, #0]
 801c23e:	2210      	movs	r2, #16
 801c240:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801c242:	687b      	ldr	r3, [r7, #4]
 801c244:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801c248:	4619      	mov	r1, r3
 801c24a:	6878      	ldr	r0, [r7, #4]
 801c24c:	f7ff f8d2 	bl	801b3f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801c250:	e00d      	b.n	801c26e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 801c252:	6878      	ldr	r0, [r7, #4]
 801c254:	f7e6 f914 	bl	8002480 <HAL_UART_RxCpltCallback>
}
 801c258:	e009      	b.n	801c26e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801c25a:	687b      	ldr	r3, [r7, #4]
 801c25c:	681b      	ldr	r3, [r3, #0]
 801c25e:	8b1b      	ldrh	r3, [r3, #24]
 801c260:	b29a      	uxth	r2, r3
 801c262:	687b      	ldr	r3, [r7, #4]
 801c264:	681b      	ldr	r3, [r3, #0]
 801c266:	f042 0208 	orr.w	r2, r2, #8
 801c26a:	b292      	uxth	r2, r2
 801c26c:	831a      	strh	r2, [r3, #24]
}
 801c26e:	bf00      	nop
 801c270:	3770      	adds	r7, #112	@ 0x70
 801c272:	46bd      	mov	sp, r7
 801c274:	bd80      	pop	{r7, pc}
 801c276:	bf00      	nop
 801c278:	40008000 	.word	0x40008000

0801c27c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801c27c:	b480      	push	{r7}
 801c27e:	b083      	sub	sp, #12
 801c280:	af00      	add	r7, sp, #0
 801c282:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801c284:	bf00      	nop
 801c286:	370c      	adds	r7, #12
 801c288:	46bd      	mov	sp, r7
 801c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c28e:	4770      	bx	lr

0801c290 <__cvt>:
 801c290:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c294:	ec57 6b10 	vmov	r6, r7, d0
 801c298:	2f00      	cmp	r7, #0
 801c29a:	460c      	mov	r4, r1
 801c29c:	4619      	mov	r1, r3
 801c29e:	463b      	mov	r3, r7
 801c2a0:	bfbb      	ittet	lt
 801c2a2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801c2a6:	461f      	movlt	r7, r3
 801c2a8:	2300      	movge	r3, #0
 801c2aa:	232d      	movlt	r3, #45	@ 0x2d
 801c2ac:	700b      	strb	r3, [r1, #0]
 801c2ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c2b0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801c2b4:	4691      	mov	r9, r2
 801c2b6:	f023 0820 	bic.w	r8, r3, #32
 801c2ba:	bfbc      	itt	lt
 801c2bc:	4632      	movlt	r2, r6
 801c2be:	4616      	movlt	r6, r2
 801c2c0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801c2c4:	d005      	beq.n	801c2d2 <__cvt+0x42>
 801c2c6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801c2ca:	d100      	bne.n	801c2ce <__cvt+0x3e>
 801c2cc:	3401      	adds	r4, #1
 801c2ce:	2102      	movs	r1, #2
 801c2d0:	e000      	b.n	801c2d4 <__cvt+0x44>
 801c2d2:	2103      	movs	r1, #3
 801c2d4:	ab03      	add	r3, sp, #12
 801c2d6:	9301      	str	r3, [sp, #4]
 801c2d8:	ab02      	add	r3, sp, #8
 801c2da:	9300      	str	r3, [sp, #0]
 801c2dc:	ec47 6b10 	vmov	d0, r6, r7
 801c2e0:	4653      	mov	r3, sl
 801c2e2:	4622      	mov	r2, r4
 801c2e4:	f001 f824 	bl	801d330 <_dtoa_r>
 801c2e8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801c2ec:	4605      	mov	r5, r0
 801c2ee:	d119      	bne.n	801c324 <__cvt+0x94>
 801c2f0:	f019 0f01 	tst.w	r9, #1
 801c2f4:	d00e      	beq.n	801c314 <__cvt+0x84>
 801c2f6:	eb00 0904 	add.w	r9, r0, r4
 801c2fa:	2200      	movs	r2, #0
 801c2fc:	2300      	movs	r3, #0
 801c2fe:	4630      	mov	r0, r6
 801c300:	4639      	mov	r1, r7
 801c302:	f7e4 fbe1 	bl	8000ac8 <__aeabi_dcmpeq>
 801c306:	b108      	cbz	r0, 801c30c <__cvt+0x7c>
 801c308:	f8cd 900c 	str.w	r9, [sp, #12]
 801c30c:	2230      	movs	r2, #48	@ 0x30
 801c30e:	9b03      	ldr	r3, [sp, #12]
 801c310:	454b      	cmp	r3, r9
 801c312:	d31e      	bcc.n	801c352 <__cvt+0xc2>
 801c314:	9b03      	ldr	r3, [sp, #12]
 801c316:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c318:	1b5b      	subs	r3, r3, r5
 801c31a:	4628      	mov	r0, r5
 801c31c:	6013      	str	r3, [r2, #0]
 801c31e:	b004      	add	sp, #16
 801c320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c324:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801c328:	eb00 0904 	add.w	r9, r0, r4
 801c32c:	d1e5      	bne.n	801c2fa <__cvt+0x6a>
 801c32e:	7803      	ldrb	r3, [r0, #0]
 801c330:	2b30      	cmp	r3, #48	@ 0x30
 801c332:	d10a      	bne.n	801c34a <__cvt+0xba>
 801c334:	2200      	movs	r2, #0
 801c336:	2300      	movs	r3, #0
 801c338:	4630      	mov	r0, r6
 801c33a:	4639      	mov	r1, r7
 801c33c:	f7e4 fbc4 	bl	8000ac8 <__aeabi_dcmpeq>
 801c340:	b918      	cbnz	r0, 801c34a <__cvt+0xba>
 801c342:	f1c4 0401 	rsb	r4, r4, #1
 801c346:	f8ca 4000 	str.w	r4, [sl]
 801c34a:	f8da 3000 	ldr.w	r3, [sl]
 801c34e:	4499      	add	r9, r3
 801c350:	e7d3      	b.n	801c2fa <__cvt+0x6a>
 801c352:	1c59      	adds	r1, r3, #1
 801c354:	9103      	str	r1, [sp, #12]
 801c356:	701a      	strb	r2, [r3, #0]
 801c358:	e7d9      	b.n	801c30e <__cvt+0x7e>

0801c35a <__exponent>:
 801c35a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c35c:	2900      	cmp	r1, #0
 801c35e:	bfba      	itte	lt
 801c360:	4249      	neglt	r1, r1
 801c362:	232d      	movlt	r3, #45	@ 0x2d
 801c364:	232b      	movge	r3, #43	@ 0x2b
 801c366:	2909      	cmp	r1, #9
 801c368:	7002      	strb	r2, [r0, #0]
 801c36a:	7043      	strb	r3, [r0, #1]
 801c36c:	dd29      	ble.n	801c3c2 <__exponent+0x68>
 801c36e:	f10d 0307 	add.w	r3, sp, #7
 801c372:	461d      	mov	r5, r3
 801c374:	270a      	movs	r7, #10
 801c376:	461a      	mov	r2, r3
 801c378:	fbb1 f6f7 	udiv	r6, r1, r7
 801c37c:	fb07 1416 	mls	r4, r7, r6, r1
 801c380:	3430      	adds	r4, #48	@ 0x30
 801c382:	f802 4c01 	strb.w	r4, [r2, #-1]
 801c386:	460c      	mov	r4, r1
 801c388:	2c63      	cmp	r4, #99	@ 0x63
 801c38a:	f103 33ff 	add.w	r3, r3, #4294967295
 801c38e:	4631      	mov	r1, r6
 801c390:	dcf1      	bgt.n	801c376 <__exponent+0x1c>
 801c392:	3130      	adds	r1, #48	@ 0x30
 801c394:	1e94      	subs	r4, r2, #2
 801c396:	f803 1c01 	strb.w	r1, [r3, #-1]
 801c39a:	1c41      	adds	r1, r0, #1
 801c39c:	4623      	mov	r3, r4
 801c39e:	42ab      	cmp	r3, r5
 801c3a0:	d30a      	bcc.n	801c3b8 <__exponent+0x5e>
 801c3a2:	f10d 0309 	add.w	r3, sp, #9
 801c3a6:	1a9b      	subs	r3, r3, r2
 801c3a8:	42ac      	cmp	r4, r5
 801c3aa:	bf88      	it	hi
 801c3ac:	2300      	movhi	r3, #0
 801c3ae:	3302      	adds	r3, #2
 801c3b0:	4403      	add	r3, r0
 801c3b2:	1a18      	subs	r0, r3, r0
 801c3b4:	b003      	add	sp, #12
 801c3b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c3b8:	f813 6b01 	ldrb.w	r6, [r3], #1
 801c3bc:	f801 6f01 	strb.w	r6, [r1, #1]!
 801c3c0:	e7ed      	b.n	801c39e <__exponent+0x44>
 801c3c2:	2330      	movs	r3, #48	@ 0x30
 801c3c4:	3130      	adds	r1, #48	@ 0x30
 801c3c6:	7083      	strb	r3, [r0, #2]
 801c3c8:	70c1      	strb	r1, [r0, #3]
 801c3ca:	1d03      	adds	r3, r0, #4
 801c3cc:	e7f1      	b.n	801c3b2 <__exponent+0x58>
	...

0801c3d0 <_printf_float>:
 801c3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3d4:	b08d      	sub	sp, #52	@ 0x34
 801c3d6:	460c      	mov	r4, r1
 801c3d8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801c3dc:	4616      	mov	r6, r2
 801c3de:	461f      	mov	r7, r3
 801c3e0:	4605      	mov	r5, r0
 801c3e2:	f000 fe95 	bl	801d110 <_localeconv_r>
 801c3e6:	6803      	ldr	r3, [r0, #0]
 801c3e8:	9304      	str	r3, [sp, #16]
 801c3ea:	4618      	mov	r0, r3
 801c3ec:	f7e3 ff40 	bl	8000270 <strlen>
 801c3f0:	2300      	movs	r3, #0
 801c3f2:	930a      	str	r3, [sp, #40]	@ 0x28
 801c3f4:	f8d8 3000 	ldr.w	r3, [r8]
 801c3f8:	9005      	str	r0, [sp, #20]
 801c3fa:	3307      	adds	r3, #7
 801c3fc:	f023 0307 	bic.w	r3, r3, #7
 801c400:	f103 0208 	add.w	r2, r3, #8
 801c404:	f894 a018 	ldrb.w	sl, [r4, #24]
 801c408:	f8d4 b000 	ldr.w	fp, [r4]
 801c40c:	f8c8 2000 	str.w	r2, [r8]
 801c410:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c414:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801c418:	9307      	str	r3, [sp, #28]
 801c41a:	f8cd 8018 	str.w	r8, [sp, #24]
 801c41e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801c422:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c426:	4b9c      	ldr	r3, [pc, #624]	@ (801c698 <_printf_float+0x2c8>)
 801c428:	f04f 32ff 	mov.w	r2, #4294967295
 801c42c:	f7e4 fb7e 	bl	8000b2c <__aeabi_dcmpun>
 801c430:	bb70      	cbnz	r0, 801c490 <_printf_float+0xc0>
 801c432:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c436:	4b98      	ldr	r3, [pc, #608]	@ (801c698 <_printf_float+0x2c8>)
 801c438:	f04f 32ff 	mov.w	r2, #4294967295
 801c43c:	f7e4 fb58 	bl	8000af0 <__aeabi_dcmple>
 801c440:	bb30      	cbnz	r0, 801c490 <_printf_float+0xc0>
 801c442:	2200      	movs	r2, #0
 801c444:	2300      	movs	r3, #0
 801c446:	4640      	mov	r0, r8
 801c448:	4649      	mov	r1, r9
 801c44a:	f7e4 fb47 	bl	8000adc <__aeabi_dcmplt>
 801c44e:	b110      	cbz	r0, 801c456 <_printf_float+0x86>
 801c450:	232d      	movs	r3, #45	@ 0x2d
 801c452:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c456:	4a91      	ldr	r2, [pc, #580]	@ (801c69c <_printf_float+0x2cc>)
 801c458:	4b91      	ldr	r3, [pc, #580]	@ (801c6a0 <_printf_float+0x2d0>)
 801c45a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801c45e:	bf8c      	ite	hi
 801c460:	4690      	movhi	r8, r2
 801c462:	4698      	movls	r8, r3
 801c464:	2303      	movs	r3, #3
 801c466:	6123      	str	r3, [r4, #16]
 801c468:	f02b 0304 	bic.w	r3, fp, #4
 801c46c:	6023      	str	r3, [r4, #0]
 801c46e:	f04f 0900 	mov.w	r9, #0
 801c472:	9700      	str	r7, [sp, #0]
 801c474:	4633      	mov	r3, r6
 801c476:	aa0b      	add	r2, sp, #44	@ 0x2c
 801c478:	4621      	mov	r1, r4
 801c47a:	4628      	mov	r0, r5
 801c47c:	f000 f9d2 	bl	801c824 <_printf_common>
 801c480:	3001      	adds	r0, #1
 801c482:	f040 808d 	bne.w	801c5a0 <_printf_float+0x1d0>
 801c486:	f04f 30ff 	mov.w	r0, #4294967295
 801c48a:	b00d      	add	sp, #52	@ 0x34
 801c48c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c490:	4642      	mov	r2, r8
 801c492:	464b      	mov	r3, r9
 801c494:	4640      	mov	r0, r8
 801c496:	4649      	mov	r1, r9
 801c498:	f7e4 fb48 	bl	8000b2c <__aeabi_dcmpun>
 801c49c:	b140      	cbz	r0, 801c4b0 <_printf_float+0xe0>
 801c49e:	464b      	mov	r3, r9
 801c4a0:	2b00      	cmp	r3, #0
 801c4a2:	bfbc      	itt	lt
 801c4a4:	232d      	movlt	r3, #45	@ 0x2d
 801c4a6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801c4aa:	4a7e      	ldr	r2, [pc, #504]	@ (801c6a4 <_printf_float+0x2d4>)
 801c4ac:	4b7e      	ldr	r3, [pc, #504]	@ (801c6a8 <_printf_float+0x2d8>)
 801c4ae:	e7d4      	b.n	801c45a <_printf_float+0x8a>
 801c4b0:	6863      	ldr	r3, [r4, #4]
 801c4b2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801c4b6:	9206      	str	r2, [sp, #24]
 801c4b8:	1c5a      	adds	r2, r3, #1
 801c4ba:	d13b      	bne.n	801c534 <_printf_float+0x164>
 801c4bc:	2306      	movs	r3, #6
 801c4be:	6063      	str	r3, [r4, #4]
 801c4c0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801c4c4:	2300      	movs	r3, #0
 801c4c6:	6022      	str	r2, [r4, #0]
 801c4c8:	9303      	str	r3, [sp, #12]
 801c4ca:	ab0a      	add	r3, sp, #40	@ 0x28
 801c4cc:	e9cd a301 	strd	sl, r3, [sp, #4]
 801c4d0:	ab09      	add	r3, sp, #36	@ 0x24
 801c4d2:	9300      	str	r3, [sp, #0]
 801c4d4:	6861      	ldr	r1, [r4, #4]
 801c4d6:	ec49 8b10 	vmov	d0, r8, r9
 801c4da:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801c4de:	4628      	mov	r0, r5
 801c4e0:	f7ff fed6 	bl	801c290 <__cvt>
 801c4e4:	9b06      	ldr	r3, [sp, #24]
 801c4e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c4e8:	2b47      	cmp	r3, #71	@ 0x47
 801c4ea:	4680      	mov	r8, r0
 801c4ec:	d129      	bne.n	801c542 <_printf_float+0x172>
 801c4ee:	1cc8      	adds	r0, r1, #3
 801c4f0:	db02      	blt.n	801c4f8 <_printf_float+0x128>
 801c4f2:	6863      	ldr	r3, [r4, #4]
 801c4f4:	4299      	cmp	r1, r3
 801c4f6:	dd41      	ble.n	801c57c <_printf_float+0x1ac>
 801c4f8:	f1aa 0a02 	sub.w	sl, sl, #2
 801c4fc:	fa5f fa8a 	uxtb.w	sl, sl
 801c500:	3901      	subs	r1, #1
 801c502:	4652      	mov	r2, sl
 801c504:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801c508:	9109      	str	r1, [sp, #36]	@ 0x24
 801c50a:	f7ff ff26 	bl	801c35a <__exponent>
 801c50e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c510:	1813      	adds	r3, r2, r0
 801c512:	2a01      	cmp	r2, #1
 801c514:	4681      	mov	r9, r0
 801c516:	6123      	str	r3, [r4, #16]
 801c518:	dc02      	bgt.n	801c520 <_printf_float+0x150>
 801c51a:	6822      	ldr	r2, [r4, #0]
 801c51c:	07d2      	lsls	r2, r2, #31
 801c51e:	d501      	bpl.n	801c524 <_printf_float+0x154>
 801c520:	3301      	adds	r3, #1
 801c522:	6123      	str	r3, [r4, #16]
 801c524:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801c528:	2b00      	cmp	r3, #0
 801c52a:	d0a2      	beq.n	801c472 <_printf_float+0xa2>
 801c52c:	232d      	movs	r3, #45	@ 0x2d
 801c52e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c532:	e79e      	b.n	801c472 <_printf_float+0xa2>
 801c534:	9a06      	ldr	r2, [sp, #24]
 801c536:	2a47      	cmp	r2, #71	@ 0x47
 801c538:	d1c2      	bne.n	801c4c0 <_printf_float+0xf0>
 801c53a:	2b00      	cmp	r3, #0
 801c53c:	d1c0      	bne.n	801c4c0 <_printf_float+0xf0>
 801c53e:	2301      	movs	r3, #1
 801c540:	e7bd      	b.n	801c4be <_printf_float+0xee>
 801c542:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801c546:	d9db      	bls.n	801c500 <_printf_float+0x130>
 801c548:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801c54c:	d118      	bne.n	801c580 <_printf_float+0x1b0>
 801c54e:	2900      	cmp	r1, #0
 801c550:	6863      	ldr	r3, [r4, #4]
 801c552:	dd0b      	ble.n	801c56c <_printf_float+0x19c>
 801c554:	6121      	str	r1, [r4, #16]
 801c556:	b913      	cbnz	r3, 801c55e <_printf_float+0x18e>
 801c558:	6822      	ldr	r2, [r4, #0]
 801c55a:	07d0      	lsls	r0, r2, #31
 801c55c:	d502      	bpl.n	801c564 <_printf_float+0x194>
 801c55e:	3301      	adds	r3, #1
 801c560:	440b      	add	r3, r1
 801c562:	6123      	str	r3, [r4, #16]
 801c564:	65a1      	str	r1, [r4, #88]	@ 0x58
 801c566:	f04f 0900 	mov.w	r9, #0
 801c56a:	e7db      	b.n	801c524 <_printf_float+0x154>
 801c56c:	b913      	cbnz	r3, 801c574 <_printf_float+0x1a4>
 801c56e:	6822      	ldr	r2, [r4, #0]
 801c570:	07d2      	lsls	r2, r2, #31
 801c572:	d501      	bpl.n	801c578 <_printf_float+0x1a8>
 801c574:	3302      	adds	r3, #2
 801c576:	e7f4      	b.n	801c562 <_printf_float+0x192>
 801c578:	2301      	movs	r3, #1
 801c57a:	e7f2      	b.n	801c562 <_printf_float+0x192>
 801c57c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801c580:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c582:	4299      	cmp	r1, r3
 801c584:	db05      	blt.n	801c592 <_printf_float+0x1c2>
 801c586:	6823      	ldr	r3, [r4, #0]
 801c588:	6121      	str	r1, [r4, #16]
 801c58a:	07d8      	lsls	r0, r3, #31
 801c58c:	d5ea      	bpl.n	801c564 <_printf_float+0x194>
 801c58e:	1c4b      	adds	r3, r1, #1
 801c590:	e7e7      	b.n	801c562 <_printf_float+0x192>
 801c592:	2900      	cmp	r1, #0
 801c594:	bfd4      	ite	le
 801c596:	f1c1 0202 	rsble	r2, r1, #2
 801c59a:	2201      	movgt	r2, #1
 801c59c:	4413      	add	r3, r2
 801c59e:	e7e0      	b.n	801c562 <_printf_float+0x192>
 801c5a0:	6823      	ldr	r3, [r4, #0]
 801c5a2:	055a      	lsls	r2, r3, #21
 801c5a4:	d407      	bmi.n	801c5b6 <_printf_float+0x1e6>
 801c5a6:	6923      	ldr	r3, [r4, #16]
 801c5a8:	4642      	mov	r2, r8
 801c5aa:	4631      	mov	r1, r6
 801c5ac:	4628      	mov	r0, r5
 801c5ae:	47b8      	blx	r7
 801c5b0:	3001      	adds	r0, #1
 801c5b2:	d12b      	bne.n	801c60c <_printf_float+0x23c>
 801c5b4:	e767      	b.n	801c486 <_printf_float+0xb6>
 801c5b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801c5ba:	f240 80dd 	bls.w	801c778 <_printf_float+0x3a8>
 801c5be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801c5c2:	2200      	movs	r2, #0
 801c5c4:	2300      	movs	r3, #0
 801c5c6:	f7e4 fa7f 	bl	8000ac8 <__aeabi_dcmpeq>
 801c5ca:	2800      	cmp	r0, #0
 801c5cc:	d033      	beq.n	801c636 <_printf_float+0x266>
 801c5ce:	4a37      	ldr	r2, [pc, #220]	@ (801c6ac <_printf_float+0x2dc>)
 801c5d0:	2301      	movs	r3, #1
 801c5d2:	4631      	mov	r1, r6
 801c5d4:	4628      	mov	r0, r5
 801c5d6:	47b8      	blx	r7
 801c5d8:	3001      	adds	r0, #1
 801c5da:	f43f af54 	beq.w	801c486 <_printf_float+0xb6>
 801c5de:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801c5e2:	4543      	cmp	r3, r8
 801c5e4:	db02      	blt.n	801c5ec <_printf_float+0x21c>
 801c5e6:	6823      	ldr	r3, [r4, #0]
 801c5e8:	07d8      	lsls	r0, r3, #31
 801c5ea:	d50f      	bpl.n	801c60c <_printf_float+0x23c>
 801c5ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c5f0:	4631      	mov	r1, r6
 801c5f2:	4628      	mov	r0, r5
 801c5f4:	47b8      	blx	r7
 801c5f6:	3001      	adds	r0, #1
 801c5f8:	f43f af45 	beq.w	801c486 <_printf_float+0xb6>
 801c5fc:	f04f 0900 	mov.w	r9, #0
 801c600:	f108 38ff 	add.w	r8, r8, #4294967295
 801c604:	f104 0a1a 	add.w	sl, r4, #26
 801c608:	45c8      	cmp	r8, r9
 801c60a:	dc09      	bgt.n	801c620 <_printf_float+0x250>
 801c60c:	6823      	ldr	r3, [r4, #0]
 801c60e:	079b      	lsls	r3, r3, #30
 801c610:	f100 8103 	bmi.w	801c81a <_printf_float+0x44a>
 801c614:	68e0      	ldr	r0, [r4, #12]
 801c616:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c618:	4298      	cmp	r0, r3
 801c61a:	bfb8      	it	lt
 801c61c:	4618      	movlt	r0, r3
 801c61e:	e734      	b.n	801c48a <_printf_float+0xba>
 801c620:	2301      	movs	r3, #1
 801c622:	4652      	mov	r2, sl
 801c624:	4631      	mov	r1, r6
 801c626:	4628      	mov	r0, r5
 801c628:	47b8      	blx	r7
 801c62a:	3001      	adds	r0, #1
 801c62c:	f43f af2b 	beq.w	801c486 <_printf_float+0xb6>
 801c630:	f109 0901 	add.w	r9, r9, #1
 801c634:	e7e8      	b.n	801c608 <_printf_float+0x238>
 801c636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c638:	2b00      	cmp	r3, #0
 801c63a:	dc39      	bgt.n	801c6b0 <_printf_float+0x2e0>
 801c63c:	4a1b      	ldr	r2, [pc, #108]	@ (801c6ac <_printf_float+0x2dc>)
 801c63e:	2301      	movs	r3, #1
 801c640:	4631      	mov	r1, r6
 801c642:	4628      	mov	r0, r5
 801c644:	47b8      	blx	r7
 801c646:	3001      	adds	r0, #1
 801c648:	f43f af1d 	beq.w	801c486 <_printf_float+0xb6>
 801c64c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801c650:	ea59 0303 	orrs.w	r3, r9, r3
 801c654:	d102      	bne.n	801c65c <_printf_float+0x28c>
 801c656:	6823      	ldr	r3, [r4, #0]
 801c658:	07d9      	lsls	r1, r3, #31
 801c65a:	d5d7      	bpl.n	801c60c <_printf_float+0x23c>
 801c65c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c660:	4631      	mov	r1, r6
 801c662:	4628      	mov	r0, r5
 801c664:	47b8      	blx	r7
 801c666:	3001      	adds	r0, #1
 801c668:	f43f af0d 	beq.w	801c486 <_printf_float+0xb6>
 801c66c:	f04f 0a00 	mov.w	sl, #0
 801c670:	f104 0b1a 	add.w	fp, r4, #26
 801c674:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c676:	425b      	negs	r3, r3
 801c678:	4553      	cmp	r3, sl
 801c67a:	dc01      	bgt.n	801c680 <_printf_float+0x2b0>
 801c67c:	464b      	mov	r3, r9
 801c67e:	e793      	b.n	801c5a8 <_printf_float+0x1d8>
 801c680:	2301      	movs	r3, #1
 801c682:	465a      	mov	r2, fp
 801c684:	4631      	mov	r1, r6
 801c686:	4628      	mov	r0, r5
 801c688:	47b8      	blx	r7
 801c68a:	3001      	adds	r0, #1
 801c68c:	f43f aefb 	beq.w	801c486 <_printf_float+0xb6>
 801c690:	f10a 0a01 	add.w	sl, sl, #1
 801c694:	e7ee      	b.n	801c674 <_printf_float+0x2a4>
 801c696:	bf00      	nop
 801c698:	7fefffff 	.word	0x7fefffff
 801c69c:	08020368 	.word	0x08020368
 801c6a0:	08020364 	.word	0x08020364
 801c6a4:	08020370 	.word	0x08020370
 801c6a8:	0802036c 	.word	0x0802036c
 801c6ac:	08020374 	.word	0x08020374
 801c6b0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801c6b2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801c6b6:	4553      	cmp	r3, sl
 801c6b8:	bfa8      	it	ge
 801c6ba:	4653      	movge	r3, sl
 801c6bc:	2b00      	cmp	r3, #0
 801c6be:	4699      	mov	r9, r3
 801c6c0:	dc36      	bgt.n	801c730 <_printf_float+0x360>
 801c6c2:	f04f 0b00 	mov.w	fp, #0
 801c6c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c6ca:	f104 021a 	add.w	r2, r4, #26
 801c6ce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801c6d0:	9306      	str	r3, [sp, #24]
 801c6d2:	eba3 0309 	sub.w	r3, r3, r9
 801c6d6:	455b      	cmp	r3, fp
 801c6d8:	dc31      	bgt.n	801c73e <_printf_float+0x36e>
 801c6da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c6dc:	459a      	cmp	sl, r3
 801c6de:	dc3a      	bgt.n	801c756 <_printf_float+0x386>
 801c6e0:	6823      	ldr	r3, [r4, #0]
 801c6e2:	07da      	lsls	r2, r3, #31
 801c6e4:	d437      	bmi.n	801c756 <_printf_float+0x386>
 801c6e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c6e8:	ebaa 0903 	sub.w	r9, sl, r3
 801c6ec:	9b06      	ldr	r3, [sp, #24]
 801c6ee:	ebaa 0303 	sub.w	r3, sl, r3
 801c6f2:	4599      	cmp	r9, r3
 801c6f4:	bfa8      	it	ge
 801c6f6:	4699      	movge	r9, r3
 801c6f8:	f1b9 0f00 	cmp.w	r9, #0
 801c6fc:	dc33      	bgt.n	801c766 <_printf_float+0x396>
 801c6fe:	f04f 0800 	mov.w	r8, #0
 801c702:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c706:	f104 0b1a 	add.w	fp, r4, #26
 801c70a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c70c:	ebaa 0303 	sub.w	r3, sl, r3
 801c710:	eba3 0309 	sub.w	r3, r3, r9
 801c714:	4543      	cmp	r3, r8
 801c716:	f77f af79 	ble.w	801c60c <_printf_float+0x23c>
 801c71a:	2301      	movs	r3, #1
 801c71c:	465a      	mov	r2, fp
 801c71e:	4631      	mov	r1, r6
 801c720:	4628      	mov	r0, r5
 801c722:	47b8      	blx	r7
 801c724:	3001      	adds	r0, #1
 801c726:	f43f aeae 	beq.w	801c486 <_printf_float+0xb6>
 801c72a:	f108 0801 	add.w	r8, r8, #1
 801c72e:	e7ec      	b.n	801c70a <_printf_float+0x33a>
 801c730:	4642      	mov	r2, r8
 801c732:	4631      	mov	r1, r6
 801c734:	4628      	mov	r0, r5
 801c736:	47b8      	blx	r7
 801c738:	3001      	adds	r0, #1
 801c73a:	d1c2      	bne.n	801c6c2 <_printf_float+0x2f2>
 801c73c:	e6a3      	b.n	801c486 <_printf_float+0xb6>
 801c73e:	2301      	movs	r3, #1
 801c740:	4631      	mov	r1, r6
 801c742:	4628      	mov	r0, r5
 801c744:	9206      	str	r2, [sp, #24]
 801c746:	47b8      	blx	r7
 801c748:	3001      	adds	r0, #1
 801c74a:	f43f ae9c 	beq.w	801c486 <_printf_float+0xb6>
 801c74e:	9a06      	ldr	r2, [sp, #24]
 801c750:	f10b 0b01 	add.w	fp, fp, #1
 801c754:	e7bb      	b.n	801c6ce <_printf_float+0x2fe>
 801c756:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c75a:	4631      	mov	r1, r6
 801c75c:	4628      	mov	r0, r5
 801c75e:	47b8      	blx	r7
 801c760:	3001      	adds	r0, #1
 801c762:	d1c0      	bne.n	801c6e6 <_printf_float+0x316>
 801c764:	e68f      	b.n	801c486 <_printf_float+0xb6>
 801c766:	9a06      	ldr	r2, [sp, #24]
 801c768:	464b      	mov	r3, r9
 801c76a:	4442      	add	r2, r8
 801c76c:	4631      	mov	r1, r6
 801c76e:	4628      	mov	r0, r5
 801c770:	47b8      	blx	r7
 801c772:	3001      	adds	r0, #1
 801c774:	d1c3      	bne.n	801c6fe <_printf_float+0x32e>
 801c776:	e686      	b.n	801c486 <_printf_float+0xb6>
 801c778:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801c77c:	f1ba 0f01 	cmp.w	sl, #1
 801c780:	dc01      	bgt.n	801c786 <_printf_float+0x3b6>
 801c782:	07db      	lsls	r3, r3, #31
 801c784:	d536      	bpl.n	801c7f4 <_printf_float+0x424>
 801c786:	2301      	movs	r3, #1
 801c788:	4642      	mov	r2, r8
 801c78a:	4631      	mov	r1, r6
 801c78c:	4628      	mov	r0, r5
 801c78e:	47b8      	blx	r7
 801c790:	3001      	adds	r0, #1
 801c792:	f43f ae78 	beq.w	801c486 <_printf_float+0xb6>
 801c796:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c79a:	4631      	mov	r1, r6
 801c79c:	4628      	mov	r0, r5
 801c79e:	47b8      	blx	r7
 801c7a0:	3001      	adds	r0, #1
 801c7a2:	f43f ae70 	beq.w	801c486 <_printf_float+0xb6>
 801c7a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801c7aa:	2200      	movs	r2, #0
 801c7ac:	2300      	movs	r3, #0
 801c7ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c7b2:	f7e4 f989 	bl	8000ac8 <__aeabi_dcmpeq>
 801c7b6:	b9c0      	cbnz	r0, 801c7ea <_printf_float+0x41a>
 801c7b8:	4653      	mov	r3, sl
 801c7ba:	f108 0201 	add.w	r2, r8, #1
 801c7be:	4631      	mov	r1, r6
 801c7c0:	4628      	mov	r0, r5
 801c7c2:	47b8      	blx	r7
 801c7c4:	3001      	adds	r0, #1
 801c7c6:	d10c      	bne.n	801c7e2 <_printf_float+0x412>
 801c7c8:	e65d      	b.n	801c486 <_printf_float+0xb6>
 801c7ca:	2301      	movs	r3, #1
 801c7cc:	465a      	mov	r2, fp
 801c7ce:	4631      	mov	r1, r6
 801c7d0:	4628      	mov	r0, r5
 801c7d2:	47b8      	blx	r7
 801c7d4:	3001      	adds	r0, #1
 801c7d6:	f43f ae56 	beq.w	801c486 <_printf_float+0xb6>
 801c7da:	f108 0801 	add.w	r8, r8, #1
 801c7de:	45d0      	cmp	r8, sl
 801c7e0:	dbf3      	blt.n	801c7ca <_printf_float+0x3fa>
 801c7e2:	464b      	mov	r3, r9
 801c7e4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801c7e8:	e6df      	b.n	801c5aa <_printf_float+0x1da>
 801c7ea:	f04f 0800 	mov.w	r8, #0
 801c7ee:	f104 0b1a 	add.w	fp, r4, #26
 801c7f2:	e7f4      	b.n	801c7de <_printf_float+0x40e>
 801c7f4:	2301      	movs	r3, #1
 801c7f6:	4642      	mov	r2, r8
 801c7f8:	e7e1      	b.n	801c7be <_printf_float+0x3ee>
 801c7fa:	2301      	movs	r3, #1
 801c7fc:	464a      	mov	r2, r9
 801c7fe:	4631      	mov	r1, r6
 801c800:	4628      	mov	r0, r5
 801c802:	47b8      	blx	r7
 801c804:	3001      	adds	r0, #1
 801c806:	f43f ae3e 	beq.w	801c486 <_printf_float+0xb6>
 801c80a:	f108 0801 	add.w	r8, r8, #1
 801c80e:	68e3      	ldr	r3, [r4, #12]
 801c810:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801c812:	1a5b      	subs	r3, r3, r1
 801c814:	4543      	cmp	r3, r8
 801c816:	dcf0      	bgt.n	801c7fa <_printf_float+0x42a>
 801c818:	e6fc      	b.n	801c614 <_printf_float+0x244>
 801c81a:	f04f 0800 	mov.w	r8, #0
 801c81e:	f104 0919 	add.w	r9, r4, #25
 801c822:	e7f4      	b.n	801c80e <_printf_float+0x43e>

0801c824 <_printf_common>:
 801c824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c828:	4616      	mov	r6, r2
 801c82a:	4698      	mov	r8, r3
 801c82c:	688a      	ldr	r2, [r1, #8]
 801c82e:	690b      	ldr	r3, [r1, #16]
 801c830:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801c834:	4293      	cmp	r3, r2
 801c836:	bfb8      	it	lt
 801c838:	4613      	movlt	r3, r2
 801c83a:	6033      	str	r3, [r6, #0]
 801c83c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801c840:	4607      	mov	r7, r0
 801c842:	460c      	mov	r4, r1
 801c844:	b10a      	cbz	r2, 801c84a <_printf_common+0x26>
 801c846:	3301      	adds	r3, #1
 801c848:	6033      	str	r3, [r6, #0]
 801c84a:	6823      	ldr	r3, [r4, #0]
 801c84c:	0699      	lsls	r1, r3, #26
 801c84e:	bf42      	ittt	mi
 801c850:	6833      	ldrmi	r3, [r6, #0]
 801c852:	3302      	addmi	r3, #2
 801c854:	6033      	strmi	r3, [r6, #0]
 801c856:	6825      	ldr	r5, [r4, #0]
 801c858:	f015 0506 	ands.w	r5, r5, #6
 801c85c:	d106      	bne.n	801c86c <_printf_common+0x48>
 801c85e:	f104 0a19 	add.w	sl, r4, #25
 801c862:	68e3      	ldr	r3, [r4, #12]
 801c864:	6832      	ldr	r2, [r6, #0]
 801c866:	1a9b      	subs	r3, r3, r2
 801c868:	42ab      	cmp	r3, r5
 801c86a:	dc26      	bgt.n	801c8ba <_printf_common+0x96>
 801c86c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801c870:	6822      	ldr	r2, [r4, #0]
 801c872:	3b00      	subs	r3, #0
 801c874:	bf18      	it	ne
 801c876:	2301      	movne	r3, #1
 801c878:	0692      	lsls	r2, r2, #26
 801c87a:	d42b      	bmi.n	801c8d4 <_printf_common+0xb0>
 801c87c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801c880:	4641      	mov	r1, r8
 801c882:	4638      	mov	r0, r7
 801c884:	47c8      	blx	r9
 801c886:	3001      	adds	r0, #1
 801c888:	d01e      	beq.n	801c8c8 <_printf_common+0xa4>
 801c88a:	6823      	ldr	r3, [r4, #0]
 801c88c:	6922      	ldr	r2, [r4, #16]
 801c88e:	f003 0306 	and.w	r3, r3, #6
 801c892:	2b04      	cmp	r3, #4
 801c894:	bf02      	ittt	eq
 801c896:	68e5      	ldreq	r5, [r4, #12]
 801c898:	6833      	ldreq	r3, [r6, #0]
 801c89a:	1aed      	subeq	r5, r5, r3
 801c89c:	68a3      	ldr	r3, [r4, #8]
 801c89e:	bf0c      	ite	eq
 801c8a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c8a4:	2500      	movne	r5, #0
 801c8a6:	4293      	cmp	r3, r2
 801c8a8:	bfc4      	itt	gt
 801c8aa:	1a9b      	subgt	r3, r3, r2
 801c8ac:	18ed      	addgt	r5, r5, r3
 801c8ae:	2600      	movs	r6, #0
 801c8b0:	341a      	adds	r4, #26
 801c8b2:	42b5      	cmp	r5, r6
 801c8b4:	d11a      	bne.n	801c8ec <_printf_common+0xc8>
 801c8b6:	2000      	movs	r0, #0
 801c8b8:	e008      	b.n	801c8cc <_printf_common+0xa8>
 801c8ba:	2301      	movs	r3, #1
 801c8bc:	4652      	mov	r2, sl
 801c8be:	4641      	mov	r1, r8
 801c8c0:	4638      	mov	r0, r7
 801c8c2:	47c8      	blx	r9
 801c8c4:	3001      	adds	r0, #1
 801c8c6:	d103      	bne.n	801c8d0 <_printf_common+0xac>
 801c8c8:	f04f 30ff 	mov.w	r0, #4294967295
 801c8cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c8d0:	3501      	adds	r5, #1
 801c8d2:	e7c6      	b.n	801c862 <_printf_common+0x3e>
 801c8d4:	18e1      	adds	r1, r4, r3
 801c8d6:	1c5a      	adds	r2, r3, #1
 801c8d8:	2030      	movs	r0, #48	@ 0x30
 801c8da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801c8de:	4422      	add	r2, r4
 801c8e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801c8e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801c8e8:	3302      	adds	r3, #2
 801c8ea:	e7c7      	b.n	801c87c <_printf_common+0x58>
 801c8ec:	2301      	movs	r3, #1
 801c8ee:	4622      	mov	r2, r4
 801c8f0:	4641      	mov	r1, r8
 801c8f2:	4638      	mov	r0, r7
 801c8f4:	47c8      	blx	r9
 801c8f6:	3001      	adds	r0, #1
 801c8f8:	d0e6      	beq.n	801c8c8 <_printf_common+0xa4>
 801c8fa:	3601      	adds	r6, #1
 801c8fc:	e7d9      	b.n	801c8b2 <_printf_common+0x8e>
	...

0801c900 <_printf_i>:
 801c900:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c904:	7e0f      	ldrb	r7, [r1, #24]
 801c906:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801c908:	2f78      	cmp	r7, #120	@ 0x78
 801c90a:	4691      	mov	r9, r2
 801c90c:	4680      	mov	r8, r0
 801c90e:	460c      	mov	r4, r1
 801c910:	469a      	mov	sl, r3
 801c912:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801c916:	d807      	bhi.n	801c928 <_printf_i+0x28>
 801c918:	2f62      	cmp	r7, #98	@ 0x62
 801c91a:	d80a      	bhi.n	801c932 <_printf_i+0x32>
 801c91c:	2f00      	cmp	r7, #0
 801c91e:	f000 80d1 	beq.w	801cac4 <_printf_i+0x1c4>
 801c922:	2f58      	cmp	r7, #88	@ 0x58
 801c924:	f000 80b8 	beq.w	801ca98 <_printf_i+0x198>
 801c928:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c92c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801c930:	e03a      	b.n	801c9a8 <_printf_i+0xa8>
 801c932:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801c936:	2b15      	cmp	r3, #21
 801c938:	d8f6      	bhi.n	801c928 <_printf_i+0x28>
 801c93a:	a101      	add	r1, pc, #4	@ (adr r1, 801c940 <_printf_i+0x40>)
 801c93c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c940:	0801c999 	.word	0x0801c999
 801c944:	0801c9ad 	.word	0x0801c9ad
 801c948:	0801c929 	.word	0x0801c929
 801c94c:	0801c929 	.word	0x0801c929
 801c950:	0801c929 	.word	0x0801c929
 801c954:	0801c929 	.word	0x0801c929
 801c958:	0801c9ad 	.word	0x0801c9ad
 801c95c:	0801c929 	.word	0x0801c929
 801c960:	0801c929 	.word	0x0801c929
 801c964:	0801c929 	.word	0x0801c929
 801c968:	0801c929 	.word	0x0801c929
 801c96c:	0801caab 	.word	0x0801caab
 801c970:	0801c9d7 	.word	0x0801c9d7
 801c974:	0801ca65 	.word	0x0801ca65
 801c978:	0801c929 	.word	0x0801c929
 801c97c:	0801c929 	.word	0x0801c929
 801c980:	0801cacd 	.word	0x0801cacd
 801c984:	0801c929 	.word	0x0801c929
 801c988:	0801c9d7 	.word	0x0801c9d7
 801c98c:	0801c929 	.word	0x0801c929
 801c990:	0801c929 	.word	0x0801c929
 801c994:	0801ca6d 	.word	0x0801ca6d
 801c998:	6833      	ldr	r3, [r6, #0]
 801c99a:	1d1a      	adds	r2, r3, #4
 801c99c:	681b      	ldr	r3, [r3, #0]
 801c99e:	6032      	str	r2, [r6, #0]
 801c9a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c9a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801c9a8:	2301      	movs	r3, #1
 801c9aa:	e09c      	b.n	801cae6 <_printf_i+0x1e6>
 801c9ac:	6833      	ldr	r3, [r6, #0]
 801c9ae:	6820      	ldr	r0, [r4, #0]
 801c9b0:	1d19      	adds	r1, r3, #4
 801c9b2:	6031      	str	r1, [r6, #0]
 801c9b4:	0606      	lsls	r6, r0, #24
 801c9b6:	d501      	bpl.n	801c9bc <_printf_i+0xbc>
 801c9b8:	681d      	ldr	r5, [r3, #0]
 801c9ba:	e003      	b.n	801c9c4 <_printf_i+0xc4>
 801c9bc:	0645      	lsls	r5, r0, #25
 801c9be:	d5fb      	bpl.n	801c9b8 <_printf_i+0xb8>
 801c9c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 801c9c4:	2d00      	cmp	r5, #0
 801c9c6:	da03      	bge.n	801c9d0 <_printf_i+0xd0>
 801c9c8:	232d      	movs	r3, #45	@ 0x2d
 801c9ca:	426d      	negs	r5, r5
 801c9cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c9d0:	4858      	ldr	r0, [pc, #352]	@ (801cb34 <_printf_i+0x234>)
 801c9d2:	230a      	movs	r3, #10
 801c9d4:	e011      	b.n	801c9fa <_printf_i+0xfa>
 801c9d6:	6821      	ldr	r1, [r4, #0]
 801c9d8:	6833      	ldr	r3, [r6, #0]
 801c9da:	0608      	lsls	r0, r1, #24
 801c9dc:	f853 5b04 	ldr.w	r5, [r3], #4
 801c9e0:	d402      	bmi.n	801c9e8 <_printf_i+0xe8>
 801c9e2:	0649      	lsls	r1, r1, #25
 801c9e4:	bf48      	it	mi
 801c9e6:	b2ad      	uxthmi	r5, r5
 801c9e8:	2f6f      	cmp	r7, #111	@ 0x6f
 801c9ea:	4852      	ldr	r0, [pc, #328]	@ (801cb34 <_printf_i+0x234>)
 801c9ec:	6033      	str	r3, [r6, #0]
 801c9ee:	bf14      	ite	ne
 801c9f0:	230a      	movne	r3, #10
 801c9f2:	2308      	moveq	r3, #8
 801c9f4:	2100      	movs	r1, #0
 801c9f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801c9fa:	6866      	ldr	r6, [r4, #4]
 801c9fc:	60a6      	str	r6, [r4, #8]
 801c9fe:	2e00      	cmp	r6, #0
 801ca00:	db05      	blt.n	801ca0e <_printf_i+0x10e>
 801ca02:	6821      	ldr	r1, [r4, #0]
 801ca04:	432e      	orrs	r6, r5
 801ca06:	f021 0104 	bic.w	r1, r1, #4
 801ca0a:	6021      	str	r1, [r4, #0]
 801ca0c:	d04b      	beq.n	801caa6 <_printf_i+0x1a6>
 801ca0e:	4616      	mov	r6, r2
 801ca10:	fbb5 f1f3 	udiv	r1, r5, r3
 801ca14:	fb03 5711 	mls	r7, r3, r1, r5
 801ca18:	5dc7      	ldrb	r7, [r0, r7]
 801ca1a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ca1e:	462f      	mov	r7, r5
 801ca20:	42bb      	cmp	r3, r7
 801ca22:	460d      	mov	r5, r1
 801ca24:	d9f4      	bls.n	801ca10 <_printf_i+0x110>
 801ca26:	2b08      	cmp	r3, #8
 801ca28:	d10b      	bne.n	801ca42 <_printf_i+0x142>
 801ca2a:	6823      	ldr	r3, [r4, #0]
 801ca2c:	07df      	lsls	r7, r3, #31
 801ca2e:	d508      	bpl.n	801ca42 <_printf_i+0x142>
 801ca30:	6923      	ldr	r3, [r4, #16]
 801ca32:	6861      	ldr	r1, [r4, #4]
 801ca34:	4299      	cmp	r1, r3
 801ca36:	bfde      	ittt	le
 801ca38:	2330      	movle	r3, #48	@ 0x30
 801ca3a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ca3e:	f106 36ff 	addle.w	r6, r6, #4294967295
 801ca42:	1b92      	subs	r2, r2, r6
 801ca44:	6122      	str	r2, [r4, #16]
 801ca46:	f8cd a000 	str.w	sl, [sp]
 801ca4a:	464b      	mov	r3, r9
 801ca4c:	aa03      	add	r2, sp, #12
 801ca4e:	4621      	mov	r1, r4
 801ca50:	4640      	mov	r0, r8
 801ca52:	f7ff fee7 	bl	801c824 <_printf_common>
 801ca56:	3001      	adds	r0, #1
 801ca58:	d14a      	bne.n	801caf0 <_printf_i+0x1f0>
 801ca5a:	f04f 30ff 	mov.w	r0, #4294967295
 801ca5e:	b004      	add	sp, #16
 801ca60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ca64:	6823      	ldr	r3, [r4, #0]
 801ca66:	f043 0320 	orr.w	r3, r3, #32
 801ca6a:	6023      	str	r3, [r4, #0]
 801ca6c:	4832      	ldr	r0, [pc, #200]	@ (801cb38 <_printf_i+0x238>)
 801ca6e:	2778      	movs	r7, #120	@ 0x78
 801ca70:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801ca74:	6823      	ldr	r3, [r4, #0]
 801ca76:	6831      	ldr	r1, [r6, #0]
 801ca78:	061f      	lsls	r7, r3, #24
 801ca7a:	f851 5b04 	ldr.w	r5, [r1], #4
 801ca7e:	d402      	bmi.n	801ca86 <_printf_i+0x186>
 801ca80:	065f      	lsls	r7, r3, #25
 801ca82:	bf48      	it	mi
 801ca84:	b2ad      	uxthmi	r5, r5
 801ca86:	6031      	str	r1, [r6, #0]
 801ca88:	07d9      	lsls	r1, r3, #31
 801ca8a:	bf44      	itt	mi
 801ca8c:	f043 0320 	orrmi.w	r3, r3, #32
 801ca90:	6023      	strmi	r3, [r4, #0]
 801ca92:	b11d      	cbz	r5, 801ca9c <_printf_i+0x19c>
 801ca94:	2310      	movs	r3, #16
 801ca96:	e7ad      	b.n	801c9f4 <_printf_i+0xf4>
 801ca98:	4826      	ldr	r0, [pc, #152]	@ (801cb34 <_printf_i+0x234>)
 801ca9a:	e7e9      	b.n	801ca70 <_printf_i+0x170>
 801ca9c:	6823      	ldr	r3, [r4, #0]
 801ca9e:	f023 0320 	bic.w	r3, r3, #32
 801caa2:	6023      	str	r3, [r4, #0]
 801caa4:	e7f6      	b.n	801ca94 <_printf_i+0x194>
 801caa6:	4616      	mov	r6, r2
 801caa8:	e7bd      	b.n	801ca26 <_printf_i+0x126>
 801caaa:	6833      	ldr	r3, [r6, #0]
 801caac:	6825      	ldr	r5, [r4, #0]
 801caae:	6961      	ldr	r1, [r4, #20]
 801cab0:	1d18      	adds	r0, r3, #4
 801cab2:	6030      	str	r0, [r6, #0]
 801cab4:	062e      	lsls	r6, r5, #24
 801cab6:	681b      	ldr	r3, [r3, #0]
 801cab8:	d501      	bpl.n	801cabe <_printf_i+0x1be>
 801caba:	6019      	str	r1, [r3, #0]
 801cabc:	e002      	b.n	801cac4 <_printf_i+0x1c4>
 801cabe:	0668      	lsls	r0, r5, #25
 801cac0:	d5fb      	bpl.n	801caba <_printf_i+0x1ba>
 801cac2:	8019      	strh	r1, [r3, #0]
 801cac4:	2300      	movs	r3, #0
 801cac6:	6123      	str	r3, [r4, #16]
 801cac8:	4616      	mov	r6, r2
 801caca:	e7bc      	b.n	801ca46 <_printf_i+0x146>
 801cacc:	6833      	ldr	r3, [r6, #0]
 801cace:	1d1a      	adds	r2, r3, #4
 801cad0:	6032      	str	r2, [r6, #0]
 801cad2:	681e      	ldr	r6, [r3, #0]
 801cad4:	6862      	ldr	r2, [r4, #4]
 801cad6:	2100      	movs	r1, #0
 801cad8:	4630      	mov	r0, r6
 801cada:	f7e3 fb79 	bl	80001d0 <memchr>
 801cade:	b108      	cbz	r0, 801cae4 <_printf_i+0x1e4>
 801cae0:	1b80      	subs	r0, r0, r6
 801cae2:	6060      	str	r0, [r4, #4]
 801cae4:	6863      	ldr	r3, [r4, #4]
 801cae6:	6123      	str	r3, [r4, #16]
 801cae8:	2300      	movs	r3, #0
 801caea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801caee:	e7aa      	b.n	801ca46 <_printf_i+0x146>
 801caf0:	6923      	ldr	r3, [r4, #16]
 801caf2:	4632      	mov	r2, r6
 801caf4:	4649      	mov	r1, r9
 801caf6:	4640      	mov	r0, r8
 801caf8:	47d0      	blx	sl
 801cafa:	3001      	adds	r0, #1
 801cafc:	d0ad      	beq.n	801ca5a <_printf_i+0x15a>
 801cafe:	6823      	ldr	r3, [r4, #0]
 801cb00:	079b      	lsls	r3, r3, #30
 801cb02:	d413      	bmi.n	801cb2c <_printf_i+0x22c>
 801cb04:	68e0      	ldr	r0, [r4, #12]
 801cb06:	9b03      	ldr	r3, [sp, #12]
 801cb08:	4298      	cmp	r0, r3
 801cb0a:	bfb8      	it	lt
 801cb0c:	4618      	movlt	r0, r3
 801cb0e:	e7a6      	b.n	801ca5e <_printf_i+0x15e>
 801cb10:	2301      	movs	r3, #1
 801cb12:	4632      	mov	r2, r6
 801cb14:	4649      	mov	r1, r9
 801cb16:	4640      	mov	r0, r8
 801cb18:	47d0      	blx	sl
 801cb1a:	3001      	adds	r0, #1
 801cb1c:	d09d      	beq.n	801ca5a <_printf_i+0x15a>
 801cb1e:	3501      	adds	r5, #1
 801cb20:	68e3      	ldr	r3, [r4, #12]
 801cb22:	9903      	ldr	r1, [sp, #12]
 801cb24:	1a5b      	subs	r3, r3, r1
 801cb26:	42ab      	cmp	r3, r5
 801cb28:	dcf2      	bgt.n	801cb10 <_printf_i+0x210>
 801cb2a:	e7eb      	b.n	801cb04 <_printf_i+0x204>
 801cb2c:	2500      	movs	r5, #0
 801cb2e:	f104 0619 	add.w	r6, r4, #25
 801cb32:	e7f5      	b.n	801cb20 <_printf_i+0x220>
 801cb34:	08020376 	.word	0x08020376
 801cb38:	08020387 	.word	0x08020387

0801cb3c <__sflush_r>:
 801cb3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801cb40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cb44:	0716      	lsls	r6, r2, #28
 801cb46:	4605      	mov	r5, r0
 801cb48:	460c      	mov	r4, r1
 801cb4a:	d454      	bmi.n	801cbf6 <__sflush_r+0xba>
 801cb4c:	684b      	ldr	r3, [r1, #4]
 801cb4e:	2b00      	cmp	r3, #0
 801cb50:	dc02      	bgt.n	801cb58 <__sflush_r+0x1c>
 801cb52:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801cb54:	2b00      	cmp	r3, #0
 801cb56:	dd48      	ble.n	801cbea <__sflush_r+0xae>
 801cb58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801cb5a:	2e00      	cmp	r6, #0
 801cb5c:	d045      	beq.n	801cbea <__sflush_r+0xae>
 801cb5e:	2300      	movs	r3, #0
 801cb60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801cb64:	682f      	ldr	r7, [r5, #0]
 801cb66:	6a21      	ldr	r1, [r4, #32]
 801cb68:	602b      	str	r3, [r5, #0]
 801cb6a:	d030      	beq.n	801cbce <__sflush_r+0x92>
 801cb6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801cb6e:	89a3      	ldrh	r3, [r4, #12]
 801cb70:	0759      	lsls	r1, r3, #29
 801cb72:	d505      	bpl.n	801cb80 <__sflush_r+0x44>
 801cb74:	6863      	ldr	r3, [r4, #4]
 801cb76:	1ad2      	subs	r2, r2, r3
 801cb78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801cb7a:	b10b      	cbz	r3, 801cb80 <__sflush_r+0x44>
 801cb7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801cb7e:	1ad2      	subs	r2, r2, r3
 801cb80:	2300      	movs	r3, #0
 801cb82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801cb84:	6a21      	ldr	r1, [r4, #32]
 801cb86:	4628      	mov	r0, r5
 801cb88:	47b0      	blx	r6
 801cb8a:	1c43      	adds	r3, r0, #1
 801cb8c:	89a3      	ldrh	r3, [r4, #12]
 801cb8e:	d106      	bne.n	801cb9e <__sflush_r+0x62>
 801cb90:	6829      	ldr	r1, [r5, #0]
 801cb92:	291d      	cmp	r1, #29
 801cb94:	d82b      	bhi.n	801cbee <__sflush_r+0xb2>
 801cb96:	4a2a      	ldr	r2, [pc, #168]	@ (801cc40 <__sflush_r+0x104>)
 801cb98:	40ca      	lsrs	r2, r1
 801cb9a:	07d6      	lsls	r6, r2, #31
 801cb9c:	d527      	bpl.n	801cbee <__sflush_r+0xb2>
 801cb9e:	2200      	movs	r2, #0
 801cba0:	6062      	str	r2, [r4, #4]
 801cba2:	04d9      	lsls	r1, r3, #19
 801cba4:	6922      	ldr	r2, [r4, #16]
 801cba6:	6022      	str	r2, [r4, #0]
 801cba8:	d504      	bpl.n	801cbb4 <__sflush_r+0x78>
 801cbaa:	1c42      	adds	r2, r0, #1
 801cbac:	d101      	bne.n	801cbb2 <__sflush_r+0x76>
 801cbae:	682b      	ldr	r3, [r5, #0]
 801cbb0:	b903      	cbnz	r3, 801cbb4 <__sflush_r+0x78>
 801cbb2:	6560      	str	r0, [r4, #84]	@ 0x54
 801cbb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801cbb6:	602f      	str	r7, [r5, #0]
 801cbb8:	b1b9      	cbz	r1, 801cbea <__sflush_r+0xae>
 801cbba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801cbbe:	4299      	cmp	r1, r3
 801cbc0:	d002      	beq.n	801cbc8 <__sflush_r+0x8c>
 801cbc2:	4628      	mov	r0, r5
 801cbc4:	f001 f984 	bl	801ded0 <_free_r>
 801cbc8:	2300      	movs	r3, #0
 801cbca:	6363      	str	r3, [r4, #52]	@ 0x34
 801cbcc:	e00d      	b.n	801cbea <__sflush_r+0xae>
 801cbce:	2301      	movs	r3, #1
 801cbd0:	4628      	mov	r0, r5
 801cbd2:	47b0      	blx	r6
 801cbd4:	4602      	mov	r2, r0
 801cbd6:	1c50      	adds	r0, r2, #1
 801cbd8:	d1c9      	bne.n	801cb6e <__sflush_r+0x32>
 801cbda:	682b      	ldr	r3, [r5, #0]
 801cbdc:	2b00      	cmp	r3, #0
 801cbde:	d0c6      	beq.n	801cb6e <__sflush_r+0x32>
 801cbe0:	2b1d      	cmp	r3, #29
 801cbe2:	d001      	beq.n	801cbe8 <__sflush_r+0xac>
 801cbe4:	2b16      	cmp	r3, #22
 801cbe6:	d11e      	bne.n	801cc26 <__sflush_r+0xea>
 801cbe8:	602f      	str	r7, [r5, #0]
 801cbea:	2000      	movs	r0, #0
 801cbec:	e022      	b.n	801cc34 <__sflush_r+0xf8>
 801cbee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801cbf2:	b21b      	sxth	r3, r3
 801cbf4:	e01b      	b.n	801cc2e <__sflush_r+0xf2>
 801cbf6:	690f      	ldr	r7, [r1, #16]
 801cbf8:	2f00      	cmp	r7, #0
 801cbfa:	d0f6      	beq.n	801cbea <__sflush_r+0xae>
 801cbfc:	0793      	lsls	r3, r2, #30
 801cbfe:	680e      	ldr	r6, [r1, #0]
 801cc00:	bf08      	it	eq
 801cc02:	694b      	ldreq	r3, [r1, #20]
 801cc04:	600f      	str	r7, [r1, #0]
 801cc06:	bf18      	it	ne
 801cc08:	2300      	movne	r3, #0
 801cc0a:	eba6 0807 	sub.w	r8, r6, r7
 801cc0e:	608b      	str	r3, [r1, #8]
 801cc10:	f1b8 0f00 	cmp.w	r8, #0
 801cc14:	dde9      	ble.n	801cbea <__sflush_r+0xae>
 801cc16:	6a21      	ldr	r1, [r4, #32]
 801cc18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801cc1a:	4643      	mov	r3, r8
 801cc1c:	463a      	mov	r2, r7
 801cc1e:	4628      	mov	r0, r5
 801cc20:	47b0      	blx	r6
 801cc22:	2800      	cmp	r0, #0
 801cc24:	dc08      	bgt.n	801cc38 <__sflush_r+0xfc>
 801cc26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cc2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801cc2e:	81a3      	strh	r3, [r4, #12]
 801cc30:	f04f 30ff 	mov.w	r0, #4294967295
 801cc34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cc38:	4407      	add	r7, r0
 801cc3a:	eba8 0800 	sub.w	r8, r8, r0
 801cc3e:	e7e7      	b.n	801cc10 <__sflush_r+0xd4>
 801cc40:	20400001 	.word	0x20400001

0801cc44 <_fflush_r>:
 801cc44:	b538      	push	{r3, r4, r5, lr}
 801cc46:	690b      	ldr	r3, [r1, #16]
 801cc48:	4605      	mov	r5, r0
 801cc4a:	460c      	mov	r4, r1
 801cc4c:	b913      	cbnz	r3, 801cc54 <_fflush_r+0x10>
 801cc4e:	2500      	movs	r5, #0
 801cc50:	4628      	mov	r0, r5
 801cc52:	bd38      	pop	{r3, r4, r5, pc}
 801cc54:	b118      	cbz	r0, 801cc5e <_fflush_r+0x1a>
 801cc56:	6a03      	ldr	r3, [r0, #32]
 801cc58:	b90b      	cbnz	r3, 801cc5e <_fflush_r+0x1a>
 801cc5a:	f000 f8bb 	bl	801cdd4 <__sinit>
 801cc5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cc62:	2b00      	cmp	r3, #0
 801cc64:	d0f3      	beq.n	801cc4e <_fflush_r+0xa>
 801cc66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801cc68:	07d0      	lsls	r0, r2, #31
 801cc6a:	d404      	bmi.n	801cc76 <_fflush_r+0x32>
 801cc6c:	0599      	lsls	r1, r3, #22
 801cc6e:	d402      	bmi.n	801cc76 <_fflush_r+0x32>
 801cc70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801cc72:	f000 fac2 	bl	801d1fa <__retarget_lock_acquire_recursive>
 801cc76:	4628      	mov	r0, r5
 801cc78:	4621      	mov	r1, r4
 801cc7a:	f7ff ff5f 	bl	801cb3c <__sflush_r>
 801cc7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801cc80:	07da      	lsls	r2, r3, #31
 801cc82:	4605      	mov	r5, r0
 801cc84:	d4e4      	bmi.n	801cc50 <_fflush_r+0xc>
 801cc86:	89a3      	ldrh	r3, [r4, #12]
 801cc88:	059b      	lsls	r3, r3, #22
 801cc8a:	d4e1      	bmi.n	801cc50 <_fflush_r+0xc>
 801cc8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801cc8e:	f000 fab5 	bl	801d1fc <__retarget_lock_release_recursive>
 801cc92:	e7dd      	b.n	801cc50 <_fflush_r+0xc>

0801cc94 <fflush>:
 801cc94:	4601      	mov	r1, r0
 801cc96:	b920      	cbnz	r0, 801cca2 <fflush+0xe>
 801cc98:	4a04      	ldr	r2, [pc, #16]	@ (801ccac <fflush+0x18>)
 801cc9a:	4905      	ldr	r1, [pc, #20]	@ (801ccb0 <fflush+0x1c>)
 801cc9c:	4805      	ldr	r0, [pc, #20]	@ (801ccb4 <fflush+0x20>)
 801cc9e:	f000 b8b1 	b.w	801ce04 <_fwalk_sglue>
 801cca2:	4b05      	ldr	r3, [pc, #20]	@ (801ccb8 <fflush+0x24>)
 801cca4:	6818      	ldr	r0, [r3, #0]
 801cca6:	f7ff bfcd 	b.w	801cc44 <_fflush_r>
 801ccaa:	bf00      	nop
 801ccac:	20000020 	.word	0x20000020
 801ccb0:	0801cc45 	.word	0x0801cc45
 801ccb4:	20000030 	.word	0x20000030
 801ccb8:	2000002c 	.word	0x2000002c

0801ccbc <std>:
 801ccbc:	2300      	movs	r3, #0
 801ccbe:	b510      	push	{r4, lr}
 801ccc0:	4604      	mov	r4, r0
 801ccc2:	e9c0 3300 	strd	r3, r3, [r0]
 801ccc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ccca:	6083      	str	r3, [r0, #8]
 801cccc:	8181      	strh	r1, [r0, #12]
 801ccce:	6643      	str	r3, [r0, #100]	@ 0x64
 801ccd0:	81c2      	strh	r2, [r0, #14]
 801ccd2:	6183      	str	r3, [r0, #24]
 801ccd4:	4619      	mov	r1, r3
 801ccd6:	2208      	movs	r2, #8
 801ccd8:	305c      	adds	r0, #92	@ 0x5c
 801ccda:	f000 fa11 	bl	801d100 <memset>
 801ccde:	4b0d      	ldr	r3, [pc, #52]	@ (801cd14 <std+0x58>)
 801cce0:	6263      	str	r3, [r4, #36]	@ 0x24
 801cce2:	4b0d      	ldr	r3, [pc, #52]	@ (801cd18 <std+0x5c>)
 801cce4:	62a3      	str	r3, [r4, #40]	@ 0x28
 801cce6:	4b0d      	ldr	r3, [pc, #52]	@ (801cd1c <std+0x60>)
 801cce8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801ccea:	4b0d      	ldr	r3, [pc, #52]	@ (801cd20 <std+0x64>)
 801ccec:	6323      	str	r3, [r4, #48]	@ 0x30
 801ccee:	4b0d      	ldr	r3, [pc, #52]	@ (801cd24 <std+0x68>)
 801ccf0:	6224      	str	r4, [r4, #32]
 801ccf2:	429c      	cmp	r4, r3
 801ccf4:	d006      	beq.n	801cd04 <std+0x48>
 801ccf6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801ccfa:	4294      	cmp	r4, r2
 801ccfc:	d002      	beq.n	801cd04 <std+0x48>
 801ccfe:	33d0      	adds	r3, #208	@ 0xd0
 801cd00:	429c      	cmp	r4, r3
 801cd02:	d105      	bne.n	801cd10 <std+0x54>
 801cd04:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801cd08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cd0c:	f000 ba74 	b.w	801d1f8 <__retarget_lock_init_recursive>
 801cd10:	bd10      	pop	{r4, pc}
 801cd12:	bf00      	nop
 801cd14:	0801cf31 	.word	0x0801cf31
 801cd18:	0801cf53 	.word	0x0801cf53
 801cd1c:	0801cf8b 	.word	0x0801cf8b
 801cd20:	0801cfaf 	.word	0x0801cfaf
 801cd24:	200017c0 	.word	0x200017c0

0801cd28 <stdio_exit_handler>:
 801cd28:	4a02      	ldr	r2, [pc, #8]	@ (801cd34 <stdio_exit_handler+0xc>)
 801cd2a:	4903      	ldr	r1, [pc, #12]	@ (801cd38 <stdio_exit_handler+0x10>)
 801cd2c:	4803      	ldr	r0, [pc, #12]	@ (801cd3c <stdio_exit_handler+0x14>)
 801cd2e:	f000 b869 	b.w	801ce04 <_fwalk_sglue>
 801cd32:	bf00      	nop
 801cd34:	20000020 	.word	0x20000020
 801cd38:	0801cc45 	.word	0x0801cc45
 801cd3c:	20000030 	.word	0x20000030

0801cd40 <cleanup_stdio>:
 801cd40:	6841      	ldr	r1, [r0, #4]
 801cd42:	4b0c      	ldr	r3, [pc, #48]	@ (801cd74 <cleanup_stdio+0x34>)
 801cd44:	4299      	cmp	r1, r3
 801cd46:	b510      	push	{r4, lr}
 801cd48:	4604      	mov	r4, r0
 801cd4a:	d001      	beq.n	801cd50 <cleanup_stdio+0x10>
 801cd4c:	f7ff ff7a 	bl	801cc44 <_fflush_r>
 801cd50:	68a1      	ldr	r1, [r4, #8]
 801cd52:	4b09      	ldr	r3, [pc, #36]	@ (801cd78 <cleanup_stdio+0x38>)
 801cd54:	4299      	cmp	r1, r3
 801cd56:	d002      	beq.n	801cd5e <cleanup_stdio+0x1e>
 801cd58:	4620      	mov	r0, r4
 801cd5a:	f7ff ff73 	bl	801cc44 <_fflush_r>
 801cd5e:	68e1      	ldr	r1, [r4, #12]
 801cd60:	4b06      	ldr	r3, [pc, #24]	@ (801cd7c <cleanup_stdio+0x3c>)
 801cd62:	4299      	cmp	r1, r3
 801cd64:	d004      	beq.n	801cd70 <cleanup_stdio+0x30>
 801cd66:	4620      	mov	r0, r4
 801cd68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cd6c:	f7ff bf6a 	b.w	801cc44 <_fflush_r>
 801cd70:	bd10      	pop	{r4, pc}
 801cd72:	bf00      	nop
 801cd74:	200017c0 	.word	0x200017c0
 801cd78:	20001828 	.word	0x20001828
 801cd7c:	20001890 	.word	0x20001890

0801cd80 <global_stdio_init.part.0>:
 801cd80:	b510      	push	{r4, lr}
 801cd82:	4b0b      	ldr	r3, [pc, #44]	@ (801cdb0 <global_stdio_init.part.0+0x30>)
 801cd84:	4c0b      	ldr	r4, [pc, #44]	@ (801cdb4 <global_stdio_init.part.0+0x34>)
 801cd86:	4a0c      	ldr	r2, [pc, #48]	@ (801cdb8 <global_stdio_init.part.0+0x38>)
 801cd88:	601a      	str	r2, [r3, #0]
 801cd8a:	4620      	mov	r0, r4
 801cd8c:	2200      	movs	r2, #0
 801cd8e:	2104      	movs	r1, #4
 801cd90:	f7ff ff94 	bl	801ccbc <std>
 801cd94:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801cd98:	2201      	movs	r2, #1
 801cd9a:	2109      	movs	r1, #9
 801cd9c:	f7ff ff8e 	bl	801ccbc <std>
 801cda0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801cda4:	2202      	movs	r2, #2
 801cda6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cdaa:	2112      	movs	r1, #18
 801cdac:	f7ff bf86 	b.w	801ccbc <std>
 801cdb0:	200018f8 	.word	0x200018f8
 801cdb4:	200017c0 	.word	0x200017c0
 801cdb8:	0801cd29 	.word	0x0801cd29

0801cdbc <__sfp_lock_acquire>:
 801cdbc:	4801      	ldr	r0, [pc, #4]	@ (801cdc4 <__sfp_lock_acquire+0x8>)
 801cdbe:	f000 ba1c 	b.w	801d1fa <__retarget_lock_acquire_recursive>
 801cdc2:	bf00      	nop
 801cdc4:	20001901 	.word	0x20001901

0801cdc8 <__sfp_lock_release>:
 801cdc8:	4801      	ldr	r0, [pc, #4]	@ (801cdd0 <__sfp_lock_release+0x8>)
 801cdca:	f000 ba17 	b.w	801d1fc <__retarget_lock_release_recursive>
 801cdce:	bf00      	nop
 801cdd0:	20001901 	.word	0x20001901

0801cdd4 <__sinit>:
 801cdd4:	b510      	push	{r4, lr}
 801cdd6:	4604      	mov	r4, r0
 801cdd8:	f7ff fff0 	bl	801cdbc <__sfp_lock_acquire>
 801cddc:	6a23      	ldr	r3, [r4, #32]
 801cdde:	b11b      	cbz	r3, 801cde8 <__sinit+0x14>
 801cde0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cde4:	f7ff bff0 	b.w	801cdc8 <__sfp_lock_release>
 801cde8:	4b04      	ldr	r3, [pc, #16]	@ (801cdfc <__sinit+0x28>)
 801cdea:	6223      	str	r3, [r4, #32]
 801cdec:	4b04      	ldr	r3, [pc, #16]	@ (801ce00 <__sinit+0x2c>)
 801cdee:	681b      	ldr	r3, [r3, #0]
 801cdf0:	2b00      	cmp	r3, #0
 801cdf2:	d1f5      	bne.n	801cde0 <__sinit+0xc>
 801cdf4:	f7ff ffc4 	bl	801cd80 <global_stdio_init.part.0>
 801cdf8:	e7f2      	b.n	801cde0 <__sinit+0xc>
 801cdfa:	bf00      	nop
 801cdfc:	0801cd41 	.word	0x0801cd41
 801ce00:	200018f8 	.word	0x200018f8

0801ce04 <_fwalk_sglue>:
 801ce04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ce08:	4607      	mov	r7, r0
 801ce0a:	4688      	mov	r8, r1
 801ce0c:	4614      	mov	r4, r2
 801ce0e:	2600      	movs	r6, #0
 801ce10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ce14:	f1b9 0901 	subs.w	r9, r9, #1
 801ce18:	d505      	bpl.n	801ce26 <_fwalk_sglue+0x22>
 801ce1a:	6824      	ldr	r4, [r4, #0]
 801ce1c:	2c00      	cmp	r4, #0
 801ce1e:	d1f7      	bne.n	801ce10 <_fwalk_sglue+0xc>
 801ce20:	4630      	mov	r0, r6
 801ce22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ce26:	89ab      	ldrh	r3, [r5, #12]
 801ce28:	2b01      	cmp	r3, #1
 801ce2a:	d907      	bls.n	801ce3c <_fwalk_sglue+0x38>
 801ce2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ce30:	3301      	adds	r3, #1
 801ce32:	d003      	beq.n	801ce3c <_fwalk_sglue+0x38>
 801ce34:	4629      	mov	r1, r5
 801ce36:	4638      	mov	r0, r7
 801ce38:	47c0      	blx	r8
 801ce3a:	4306      	orrs	r6, r0
 801ce3c:	3568      	adds	r5, #104	@ 0x68
 801ce3e:	e7e9      	b.n	801ce14 <_fwalk_sglue+0x10>

0801ce40 <iprintf>:
 801ce40:	b40f      	push	{r0, r1, r2, r3}
 801ce42:	b507      	push	{r0, r1, r2, lr}
 801ce44:	4906      	ldr	r1, [pc, #24]	@ (801ce60 <iprintf+0x20>)
 801ce46:	ab04      	add	r3, sp, #16
 801ce48:	6808      	ldr	r0, [r1, #0]
 801ce4a:	f853 2b04 	ldr.w	r2, [r3], #4
 801ce4e:	6881      	ldr	r1, [r0, #8]
 801ce50:	9301      	str	r3, [sp, #4]
 801ce52:	f001 fce1 	bl	801e818 <_vfiprintf_r>
 801ce56:	b003      	add	sp, #12
 801ce58:	f85d eb04 	ldr.w	lr, [sp], #4
 801ce5c:	b004      	add	sp, #16
 801ce5e:	4770      	bx	lr
 801ce60:	2000002c 	.word	0x2000002c

0801ce64 <putchar>:
 801ce64:	4b02      	ldr	r3, [pc, #8]	@ (801ce70 <putchar+0xc>)
 801ce66:	4601      	mov	r1, r0
 801ce68:	6818      	ldr	r0, [r3, #0]
 801ce6a:	6882      	ldr	r2, [r0, #8]
 801ce6c:	f001 be4e 	b.w	801eb0c <_putc_r>
 801ce70:	2000002c 	.word	0x2000002c

0801ce74 <_puts_r>:
 801ce74:	6a03      	ldr	r3, [r0, #32]
 801ce76:	b570      	push	{r4, r5, r6, lr}
 801ce78:	6884      	ldr	r4, [r0, #8]
 801ce7a:	4605      	mov	r5, r0
 801ce7c:	460e      	mov	r6, r1
 801ce7e:	b90b      	cbnz	r3, 801ce84 <_puts_r+0x10>
 801ce80:	f7ff ffa8 	bl	801cdd4 <__sinit>
 801ce84:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ce86:	07db      	lsls	r3, r3, #31
 801ce88:	d405      	bmi.n	801ce96 <_puts_r+0x22>
 801ce8a:	89a3      	ldrh	r3, [r4, #12]
 801ce8c:	0598      	lsls	r0, r3, #22
 801ce8e:	d402      	bmi.n	801ce96 <_puts_r+0x22>
 801ce90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ce92:	f000 f9b2 	bl	801d1fa <__retarget_lock_acquire_recursive>
 801ce96:	89a3      	ldrh	r3, [r4, #12]
 801ce98:	0719      	lsls	r1, r3, #28
 801ce9a:	d502      	bpl.n	801cea2 <_puts_r+0x2e>
 801ce9c:	6923      	ldr	r3, [r4, #16]
 801ce9e:	2b00      	cmp	r3, #0
 801cea0:	d135      	bne.n	801cf0e <_puts_r+0x9a>
 801cea2:	4621      	mov	r1, r4
 801cea4:	4628      	mov	r0, r5
 801cea6:	f000 f8c5 	bl	801d034 <__swsetup_r>
 801ceaa:	b380      	cbz	r0, 801cf0e <_puts_r+0x9a>
 801ceac:	f04f 35ff 	mov.w	r5, #4294967295
 801ceb0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ceb2:	07da      	lsls	r2, r3, #31
 801ceb4:	d405      	bmi.n	801cec2 <_puts_r+0x4e>
 801ceb6:	89a3      	ldrh	r3, [r4, #12]
 801ceb8:	059b      	lsls	r3, r3, #22
 801ceba:	d402      	bmi.n	801cec2 <_puts_r+0x4e>
 801cebc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801cebe:	f000 f99d 	bl	801d1fc <__retarget_lock_release_recursive>
 801cec2:	4628      	mov	r0, r5
 801cec4:	bd70      	pop	{r4, r5, r6, pc}
 801cec6:	2b00      	cmp	r3, #0
 801cec8:	da04      	bge.n	801ced4 <_puts_r+0x60>
 801ceca:	69a2      	ldr	r2, [r4, #24]
 801cecc:	429a      	cmp	r2, r3
 801cece:	dc17      	bgt.n	801cf00 <_puts_r+0x8c>
 801ced0:	290a      	cmp	r1, #10
 801ced2:	d015      	beq.n	801cf00 <_puts_r+0x8c>
 801ced4:	6823      	ldr	r3, [r4, #0]
 801ced6:	1c5a      	adds	r2, r3, #1
 801ced8:	6022      	str	r2, [r4, #0]
 801ceda:	7019      	strb	r1, [r3, #0]
 801cedc:	68a3      	ldr	r3, [r4, #8]
 801cede:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801cee2:	3b01      	subs	r3, #1
 801cee4:	60a3      	str	r3, [r4, #8]
 801cee6:	2900      	cmp	r1, #0
 801cee8:	d1ed      	bne.n	801cec6 <_puts_r+0x52>
 801ceea:	2b00      	cmp	r3, #0
 801ceec:	da11      	bge.n	801cf12 <_puts_r+0x9e>
 801ceee:	4622      	mov	r2, r4
 801cef0:	210a      	movs	r1, #10
 801cef2:	4628      	mov	r0, r5
 801cef4:	f000 f85f 	bl	801cfb6 <__swbuf_r>
 801cef8:	3001      	adds	r0, #1
 801cefa:	d0d7      	beq.n	801ceac <_puts_r+0x38>
 801cefc:	250a      	movs	r5, #10
 801cefe:	e7d7      	b.n	801ceb0 <_puts_r+0x3c>
 801cf00:	4622      	mov	r2, r4
 801cf02:	4628      	mov	r0, r5
 801cf04:	f000 f857 	bl	801cfb6 <__swbuf_r>
 801cf08:	3001      	adds	r0, #1
 801cf0a:	d1e7      	bne.n	801cedc <_puts_r+0x68>
 801cf0c:	e7ce      	b.n	801ceac <_puts_r+0x38>
 801cf0e:	3e01      	subs	r6, #1
 801cf10:	e7e4      	b.n	801cedc <_puts_r+0x68>
 801cf12:	6823      	ldr	r3, [r4, #0]
 801cf14:	1c5a      	adds	r2, r3, #1
 801cf16:	6022      	str	r2, [r4, #0]
 801cf18:	220a      	movs	r2, #10
 801cf1a:	701a      	strb	r2, [r3, #0]
 801cf1c:	e7ee      	b.n	801cefc <_puts_r+0x88>
	...

0801cf20 <puts>:
 801cf20:	4b02      	ldr	r3, [pc, #8]	@ (801cf2c <puts+0xc>)
 801cf22:	4601      	mov	r1, r0
 801cf24:	6818      	ldr	r0, [r3, #0]
 801cf26:	f7ff bfa5 	b.w	801ce74 <_puts_r>
 801cf2a:	bf00      	nop
 801cf2c:	2000002c 	.word	0x2000002c

0801cf30 <__sread>:
 801cf30:	b510      	push	{r4, lr}
 801cf32:	460c      	mov	r4, r1
 801cf34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cf38:	f000 f910 	bl	801d15c <_read_r>
 801cf3c:	2800      	cmp	r0, #0
 801cf3e:	bfab      	itete	ge
 801cf40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801cf42:	89a3      	ldrhlt	r3, [r4, #12]
 801cf44:	181b      	addge	r3, r3, r0
 801cf46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801cf4a:	bfac      	ite	ge
 801cf4c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801cf4e:	81a3      	strhlt	r3, [r4, #12]
 801cf50:	bd10      	pop	{r4, pc}

0801cf52 <__swrite>:
 801cf52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cf56:	461f      	mov	r7, r3
 801cf58:	898b      	ldrh	r3, [r1, #12]
 801cf5a:	05db      	lsls	r3, r3, #23
 801cf5c:	4605      	mov	r5, r0
 801cf5e:	460c      	mov	r4, r1
 801cf60:	4616      	mov	r6, r2
 801cf62:	d505      	bpl.n	801cf70 <__swrite+0x1e>
 801cf64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cf68:	2302      	movs	r3, #2
 801cf6a:	2200      	movs	r2, #0
 801cf6c:	f000 f8e4 	bl	801d138 <_lseek_r>
 801cf70:	89a3      	ldrh	r3, [r4, #12]
 801cf72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cf76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801cf7a:	81a3      	strh	r3, [r4, #12]
 801cf7c:	4632      	mov	r2, r6
 801cf7e:	463b      	mov	r3, r7
 801cf80:	4628      	mov	r0, r5
 801cf82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cf86:	f000 b8fb 	b.w	801d180 <_write_r>

0801cf8a <__sseek>:
 801cf8a:	b510      	push	{r4, lr}
 801cf8c:	460c      	mov	r4, r1
 801cf8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cf92:	f000 f8d1 	bl	801d138 <_lseek_r>
 801cf96:	1c43      	adds	r3, r0, #1
 801cf98:	89a3      	ldrh	r3, [r4, #12]
 801cf9a:	bf15      	itete	ne
 801cf9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801cf9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801cfa2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801cfa6:	81a3      	strheq	r3, [r4, #12]
 801cfa8:	bf18      	it	ne
 801cfaa:	81a3      	strhne	r3, [r4, #12]
 801cfac:	bd10      	pop	{r4, pc}

0801cfae <__sclose>:
 801cfae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cfb2:	f000 b8b1 	b.w	801d118 <_close_r>

0801cfb6 <__swbuf_r>:
 801cfb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cfb8:	460e      	mov	r6, r1
 801cfba:	4614      	mov	r4, r2
 801cfbc:	4605      	mov	r5, r0
 801cfbe:	b118      	cbz	r0, 801cfc8 <__swbuf_r+0x12>
 801cfc0:	6a03      	ldr	r3, [r0, #32]
 801cfc2:	b90b      	cbnz	r3, 801cfc8 <__swbuf_r+0x12>
 801cfc4:	f7ff ff06 	bl	801cdd4 <__sinit>
 801cfc8:	69a3      	ldr	r3, [r4, #24]
 801cfca:	60a3      	str	r3, [r4, #8]
 801cfcc:	89a3      	ldrh	r3, [r4, #12]
 801cfce:	071a      	lsls	r2, r3, #28
 801cfd0:	d501      	bpl.n	801cfd6 <__swbuf_r+0x20>
 801cfd2:	6923      	ldr	r3, [r4, #16]
 801cfd4:	b943      	cbnz	r3, 801cfe8 <__swbuf_r+0x32>
 801cfd6:	4621      	mov	r1, r4
 801cfd8:	4628      	mov	r0, r5
 801cfda:	f000 f82b 	bl	801d034 <__swsetup_r>
 801cfde:	b118      	cbz	r0, 801cfe8 <__swbuf_r+0x32>
 801cfe0:	f04f 37ff 	mov.w	r7, #4294967295
 801cfe4:	4638      	mov	r0, r7
 801cfe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cfe8:	6823      	ldr	r3, [r4, #0]
 801cfea:	6922      	ldr	r2, [r4, #16]
 801cfec:	1a98      	subs	r0, r3, r2
 801cfee:	6963      	ldr	r3, [r4, #20]
 801cff0:	b2f6      	uxtb	r6, r6
 801cff2:	4283      	cmp	r3, r0
 801cff4:	4637      	mov	r7, r6
 801cff6:	dc05      	bgt.n	801d004 <__swbuf_r+0x4e>
 801cff8:	4621      	mov	r1, r4
 801cffa:	4628      	mov	r0, r5
 801cffc:	f7ff fe22 	bl	801cc44 <_fflush_r>
 801d000:	2800      	cmp	r0, #0
 801d002:	d1ed      	bne.n	801cfe0 <__swbuf_r+0x2a>
 801d004:	68a3      	ldr	r3, [r4, #8]
 801d006:	3b01      	subs	r3, #1
 801d008:	60a3      	str	r3, [r4, #8]
 801d00a:	6823      	ldr	r3, [r4, #0]
 801d00c:	1c5a      	adds	r2, r3, #1
 801d00e:	6022      	str	r2, [r4, #0]
 801d010:	701e      	strb	r6, [r3, #0]
 801d012:	6962      	ldr	r2, [r4, #20]
 801d014:	1c43      	adds	r3, r0, #1
 801d016:	429a      	cmp	r2, r3
 801d018:	d004      	beq.n	801d024 <__swbuf_r+0x6e>
 801d01a:	89a3      	ldrh	r3, [r4, #12]
 801d01c:	07db      	lsls	r3, r3, #31
 801d01e:	d5e1      	bpl.n	801cfe4 <__swbuf_r+0x2e>
 801d020:	2e0a      	cmp	r6, #10
 801d022:	d1df      	bne.n	801cfe4 <__swbuf_r+0x2e>
 801d024:	4621      	mov	r1, r4
 801d026:	4628      	mov	r0, r5
 801d028:	f7ff fe0c 	bl	801cc44 <_fflush_r>
 801d02c:	2800      	cmp	r0, #0
 801d02e:	d0d9      	beq.n	801cfe4 <__swbuf_r+0x2e>
 801d030:	e7d6      	b.n	801cfe0 <__swbuf_r+0x2a>
	...

0801d034 <__swsetup_r>:
 801d034:	b538      	push	{r3, r4, r5, lr}
 801d036:	4b29      	ldr	r3, [pc, #164]	@ (801d0dc <__swsetup_r+0xa8>)
 801d038:	4605      	mov	r5, r0
 801d03a:	6818      	ldr	r0, [r3, #0]
 801d03c:	460c      	mov	r4, r1
 801d03e:	b118      	cbz	r0, 801d048 <__swsetup_r+0x14>
 801d040:	6a03      	ldr	r3, [r0, #32]
 801d042:	b90b      	cbnz	r3, 801d048 <__swsetup_r+0x14>
 801d044:	f7ff fec6 	bl	801cdd4 <__sinit>
 801d048:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d04c:	0719      	lsls	r1, r3, #28
 801d04e:	d422      	bmi.n	801d096 <__swsetup_r+0x62>
 801d050:	06da      	lsls	r2, r3, #27
 801d052:	d407      	bmi.n	801d064 <__swsetup_r+0x30>
 801d054:	2209      	movs	r2, #9
 801d056:	602a      	str	r2, [r5, #0]
 801d058:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d05c:	81a3      	strh	r3, [r4, #12]
 801d05e:	f04f 30ff 	mov.w	r0, #4294967295
 801d062:	e033      	b.n	801d0cc <__swsetup_r+0x98>
 801d064:	0758      	lsls	r0, r3, #29
 801d066:	d512      	bpl.n	801d08e <__swsetup_r+0x5a>
 801d068:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d06a:	b141      	cbz	r1, 801d07e <__swsetup_r+0x4a>
 801d06c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d070:	4299      	cmp	r1, r3
 801d072:	d002      	beq.n	801d07a <__swsetup_r+0x46>
 801d074:	4628      	mov	r0, r5
 801d076:	f000 ff2b 	bl	801ded0 <_free_r>
 801d07a:	2300      	movs	r3, #0
 801d07c:	6363      	str	r3, [r4, #52]	@ 0x34
 801d07e:	89a3      	ldrh	r3, [r4, #12]
 801d080:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801d084:	81a3      	strh	r3, [r4, #12]
 801d086:	2300      	movs	r3, #0
 801d088:	6063      	str	r3, [r4, #4]
 801d08a:	6923      	ldr	r3, [r4, #16]
 801d08c:	6023      	str	r3, [r4, #0]
 801d08e:	89a3      	ldrh	r3, [r4, #12]
 801d090:	f043 0308 	orr.w	r3, r3, #8
 801d094:	81a3      	strh	r3, [r4, #12]
 801d096:	6923      	ldr	r3, [r4, #16]
 801d098:	b94b      	cbnz	r3, 801d0ae <__swsetup_r+0x7a>
 801d09a:	89a3      	ldrh	r3, [r4, #12]
 801d09c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801d0a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d0a4:	d003      	beq.n	801d0ae <__swsetup_r+0x7a>
 801d0a6:	4621      	mov	r1, r4
 801d0a8:	4628      	mov	r0, r5
 801d0aa:	f001 fcf3 	bl	801ea94 <__smakebuf_r>
 801d0ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d0b2:	f013 0201 	ands.w	r2, r3, #1
 801d0b6:	d00a      	beq.n	801d0ce <__swsetup_r+0x9a>
 801d0b8:	2200      	movs	r2, #0
 801d0ba:	60a2      	str	r2, [r4, #8]
 801d0bc:	6962      	ldr	r2, [r4, #20]
 801d0be:	4252      	negs	r2, r2
 801d0c0:	61a2      	str	r2, [r4, #24]
 801d0c2:	6922      	ldr	r2, [r4, #16]
 801d0c4:	b942      	cbnz	r2, 801d0d8 <__swsetup_r+0xa4>
 801d0c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801d0ca:	d1c5      	bne.n	801d058 <__swsetup_r+0x24>
 801d0cc:	bd38      	pop	{r3, r4, r5, pc}
 801d0ce:	0799      	lsls	r1, r3, #30
 801d0d0:	bf58      	it	pl
 801d0d2:	6962      	ldrpl	r2, [r4, #20]
 801d0d4:	60a2      	str	r2, [r4, #8]
 801d0d6:	e7f4      	b.n	801d0c2 <__swsetup_r+0x8e>
 801d0d8:	2000      	movs	r0, #0
 801d0da:	e7f7      	b.n	801d0cc <__swsetup_r+0x98>
 801d0dc:	2000002c 	.word	0x2000002c

0801d0e0 <memcmp>:
 801d0e0:	b510      	push	{r4, lr}
 801d0e2:	3901      	subs	r1, #1
 801d0e4:	4402      	add	r2, r0
 801d0e6:	4290      	cmp	r0, r2
 801d0e8:	d101      	bne.n	801d0ee <memcmp+0xe>
 801d0ea:	2000      	movs	r0, #0
 801d0ec:	e005      	b.n	801d0fa <memcmp+0x1a>
 801d0ee:	7803      	ldrb	r3, [r0, #0]
 801d0f0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d0f4:	42a3      	cmp	r3, r4
 801d0f6:	d001      	beq.n	801d0fc <memcmp+0x1c>
 801d0f8:	1b18      	subs	r0, r3, r4
 801d0fa:	bd10      	pop	{r4, pc}
 801d0fc:	3001      	adds	r0, #1
 801d0fe:	e7f2      	b.n	801d0e6 <memcmp+0x6>

0801d100 <memset>:
 801d100:	4402      	add	r2, r0
 801d102:	4603      	mov	r3, r0
 801d104:	4293      	cmp	r3, r2
 801d106:	d100      	bne.n	801d10a <memset+0xa>
 801d108:	4770      	bx	lr
 801d10a:	f803 1b01 	strb.w	r1, [r3], #1
 801d10e:	e7f9      	b.n	801d104 <memset+0x4>

0801d110 <_localeconv_r>:
 801d110:	4800      	ldr	r0, [pc, #0]	@ (801d114 <_localeconv_r+0x4>)
 801d112:	4770      	bx	lr
 801d114:	2000016c 	.word	0x2000016c

0801d118 <_close_r>:
 801d118:	b538      	push	{r3, r4, r5, lr}
 801d11a:	4d06      	ldr	r5, [pc, #24]	@ (801d134 <_close_r+0x1c>)
 801d11c:	2300      	movs	r3, #0
 801d11e:	4604      	mov	r4, r0
 801d120:	4608      	mov	r0, r1
 801d122:	602b      	str	r3, [r5, #0]
 801d124:	f7e4 fe8e 	bl	8001e44 <_close>
 801d128:	1c43      	adds	r3, r0, #1
 801d12a:	d102      	bne.n	801d132 <_close_r+0x1a>
 801d12c:	682b      	ldr	r3, [r5, #0]
 801d12e:	b103      	cbz	r3, 801d132 <_close_r+0x1a>
 801d130:	6023      	str	r3, [r4, #0]
 801d132:	bd38      	pop	{r3, r4, r5, pc}
 801d134:	200018fc 	.word	0x200018fc

0801d138 <_lseek_r>:
 801d138:	b538      	push	{r3, r4, r5, lr}
 801d13a:	4d07      	ldr	r5, [pc, #28]	@ (801d158 <_lseek_r+0x20>)
 801d13c:	4604      	mov	r4, r0
 801d13e:	4608      	mov	r0, r1
 801d140:	4611      	mov	r1, r2
 801d142:	2200      	movs	r2, #0
 801d144:	602a      	str	r2, [r5, #0]
 801d146:	461a      	mov	r2, r3
 801d148:	f7e4 fea3 	bl	8001e92 <_lseek>
 801d14c:	1c43      	adds	r3, r0, #1
 801d14e:	d102      	bne.n	801d156 <_lseek_r+0x1e>
 801d150:	682b      	ldr	r3, [r5, #0]
 801d152:	b103      	cbz	r3, 801d156 <_lseek_r+0x1e>
 801d154:	6023      	str	r3, [r4, #0]
 801d156:	bd38      	pop	{r3, r4, r5, pc}
 801d158:	200018fc 	.word	0x200018fc

0801d15c <_read_r>:
 801d15c:	b538      	push	{r3, r4, r5, lr}
 801d15e:	4d07      	ldr	r5, [pc, #28]	@ (801d17c <_read_r+0x20>)
 801d160:	4604      	mov	r4, r0
 801d162:	4608      	mov	r0, r1
 801d164:	4611      	mov	r1, r2
 801d166:	2200      	movs	r2, #0
 801d168:	602a      	str	r2, [r5, #0]
 801d16a:	461a      	mov	r2, r3
 801d16c:	f7e4 fe31 	bl	8001dd2 <_read>
 801d170:	1c43      	adds	r3, r0, #1
 801d172:	d102      	bne.n	801d17a <_read_r+0x1e>
 801d174:	682b      	ldr	r3, [r5, #0]
 801d176:	b103      	cbz	r3, 801d17a <_read_r+0x1e>
 801d178:	6023      	str	r3, [r4, #0]
 801d17a:	bd38      	pop	{r3, r4, r5, pc}
 801d17c:	200018fc 	.word	0x200018fc

0801d180 <_write_r>:
 801d180:	b538      	push	{r3, r4, r5, lr}
 801d182:	4d07      	ldr	r5, [pc, #28]	@ (801d1a0 <_write_r+0x20>)
 801d184:	4604      	mov	r4, r0
 801d186:	4608      	mov	r0, r1
 801d188:	4611      	mov	r1, r2
 801d18a:	2200      	movs	r2, #0
 801d18c:	602a      	str	r2, [r5, #0]
 801d18e:	461a      	mov	r2, r3
 801d190:	f7e4 fe3c 	bl	8001e0c <_write>
 801d194:	1c43      	adds	r3, r0, #1
 801d196:	d102      	bne.n	801d19e <_write_r+0x1e>
 801d198:	682b      	ldr	r3, [r5, #0]
 801d19a:	b103      	cbz	r3, 801d19e <_write_r+0x1e>
 801d19c:	6023      	str	r3, [r4, #0]
 801d19e:	bd38      	pop	{r3, r4, r5, pc}
 801d1a0:	200018fc 	.word	0x200018fc

0801d1a4 <__errno>:
 801d1a4:	4b01      	ldr	r3, [pc, #4]	@ (801d1ac <__errno+0x8>)
 801d1a6:	6818      	ldr	r0, [r3, #0]
 801d1a8:	4770      	bx	lr
 801d1aa:	bf00      	nop
 801d1ac:	2000002c 	.word	0x2000002c

0801d1b0 <__libc_init_array>:
 801d1b0:	b570      	push	{r4, r5, r6, lr}
 801d1b2:	4d0d      	ldr	r5, [pc, #52]	@ (801d1e8 <__libc_init_array+0x38>)
 801d1b4:	4c0d      	ldr	r4, [pc, #52]	@ (801d1ec <__libc_init_array+0x3c>)
 801d1b6:	1b64      	subs	r4, r4, r5
 801d1b8:	10a4      	asrs	r4, r4, #2
 801d1ba:	2600      	movs	r6, #0
 801d1bc:	42a6      	cmp	r6, r4
 801d1be:	d109      	bne.n	801d1d4 <__libc_init_array+0x24>
 801d1c0:	4d0b      	ldr	r5, [pc, #44]	@ (801d1f0 <__libc_init_array+0x40>)
 801d1c2:	4c0c      	ldr	r4, [pc, #48]	@ (801d1f4 <__libc_init_array+0x44>)
 801d1c4:	f001 fdb8 	bl	801ed38 <_init>
 801d1c8:	1b64      	subs	r4, r4, r5
 801d1ca:	10a4      	asrs	r4, r4, #2
 801d1cc:	2600      	movs	r6, #0
 801d1ce:	42a6      	cmp	r6, r4
 801d1d0:	d105      	bne.n	801d1de <__libc_init_array+0x2e>
 801d1d2:	bd70      	pop	{r4, r5, r6, pc}
 801d1d4:	f855 3b04 	ldr.w	r3, [r5], #4
 801d1d8:	4798      	blx	r3
 801d1da:	3601      	adds	r6, #1
 801d1dc:	e7ee      	b.n	801d1bc <__libc_init_array+0xc>
 801d1de:	f855 3b04 	ldr.w	r3, [r5], #4
 801d1e2:	4798      	blx	r3
 801d1e4:	3601      	adds	r6, #1
 801d1e6:	e7f2      	b.n	801d1ce <__libc_init_array+0x1e>
 801d1e8:	080206e4 	.word	0x080206e4
 801d1ec:	080206e4 	.word	0x080206e4
 801d1f0:	080206e4 	.word	0x080206e4
 801d1f4:	080206e8 	.word	0x080206e8

0801d1f8 <__retarget_lock_init_recursive>:
 801d1f8:	4770      	bx	lr

0801d1fa <__retarget_lock_acquire_recursive>:
 801d1fa:	4770      	bx	lr

0801d1fc <__retarget_lock_release_recursive>:
 801d1fc:	4770      	bx	lr

0801d1fe <memcpy>:
 801d1fe:	440a      	add	r2, r1
 801d200:	4291      	cmp	r1, r2
 801d202:	f100 33ff 	add.w	r3, r0, #4294967295
 801d206:	d100      	bne.n	801d20a <memcpy+0xc>
 801d208:	4770      	bx	lr
 801d20a:	b510      	push	{r4, lr}
 801d20c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d210:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d214:	4291      	cmp	r1, r2
 801d216:	d1f9      	bne.n	801d20c <memcpy+0xe>
 801d218:	bd10      	pop	{r4, pc}

0801d21a <quorem>:
 801d21a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d21e:	6903      	ldr	r3, [r0, #16]
 801d220:	690c      	ldr	r4, [r1, #16]
 801d222:	42a3      	cmp	r3, r4
 801d224:	4607      	mov	r7, r0
 801d226:	db7e      	blt.n	801d326 <quorem+0x10c>
 801d228:	3c01      	subs	r4, #1
 801d22a:	f101 0814 	add.w	r8, r1, #20
 801d22e:	00a3      	lsls	r3, r4, #2
 801d230:	f100 0514 	add.w	r5, r0, #20
 801d234:	9300      	str	r3, [sp, #0]
 801d236:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d23a:	9301      	str	r3, [sp, #4]
 801d23c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801d240:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d244:	3301      	adds	r3, #1
 801d246:	429a      	cmp	r2, r3
 801d248:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801d24c:	fbb2 f6f3 	udiv	r6, r2, r3
 801d250:	d32e      	bcc.n	801d2b0 <quorem+0x96>
 801d252:	f04f 0a00 	mov.w	sl, #0
 801d256:	46c4      	mov	ip, r8
 801d258:	46ae      	mov	lr, r5
 801d25a:	46d3      	mov	fp, sl
 801d25c:	f85c 3b04 	ldr.w	r3, [ip], #4
 801d260:	b298      	uxth	r0, r3
 801d262:	fb06 a000 	mla	r0, r6, r0, sl
 801d266:	0c02      	lsrs	r2, r0, #16
 801d268:	0c1b      	lsrs	r3, r3, #16
 801d26a:	fb06 2303 	mla	r3, r6, r3, r2
 801d26e:	f8de 2000 	ldr.w	r2, [lr]
 801d272:	b280      	uxth	r0, r0
 801d274:	b292      	uxth	r2, r2
 801d276:	1a12      	subs	r2, r2, r0
 801d278:	445a      	add	r2, fp
 801d27a:	f8de 0000 	ldr.w	r0, [lr]
 801d27e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801d282:	b29b      	uxth	r3, r3
 801d284:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801d288:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801d28c:	b292      	uxth	r2, r2
 801d28e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801d292:	45e1      	cmp	r9, ip
 801d294:	f84e 2b04 	str.w	r2, [lr], #4
 801d298:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801d29c:	d2de      	bcs.n	801d25c <quorem+0x42>
 801d29e:	9b00      	ldr	r3, [sp, #0]
 801d2a0:	58eb      	ldr	r3, [r5, r3]
 801d2a2:	b92b      	cbnz	r3, 801d2b0 <quorem+0x96>
 801d2a4:	9b01      	ldr	r3, [sp, #4]
 801d2a6:	3b04      	subs	r3, #4
 801d2a8:	429d      	cmp	r5, r3
 801d2aa:	461a      	mov	r2, r3
 801d2ac:	d32f      	bcc.n	801d30e <quorem+0xf4>
 801d2ae:	613c      	str	r4, [r7, #16]
 801d2b0:	4638      	mov	r0, r7
 801d2b2:	f001 f97f 	bl	801e5b4 <__mcmp>
 801d2b6:	2800      	cmp	r0, #0
 801d2b8:	db25      	blt.n	801d306 <quorem+0xec>
 801d2ba:	4629      	mov	r1, r5
 801d2bc:	2000      	movs	r0, #0
 801d2be:	f858 2b04 	ldr.w	r2, [r8], #4
 801d2c2:	f8d1 c000 	ldr.w	ip, [r1]
 801d2c6:	fa1f fe82 	uxth.w	lr, r2
 801d2ca:	fa1f f38c 	uxth.w	r3, ip
 801d2ce:	eba3 030e 	sub.w	r3, r3, lr
 801d2d2:	4403      	add	r3, r0
 801d2d4:	0c12      	lsrs	r2, r2, #16
 801d2d6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801d2da:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801d2de:	b29b      	uxth	r3, r3
 801d2e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d2e4:	45c1      	cmp	r9, r8
 801d2e6:	f841 3b04 	str.w	r3, [r1], #4
 801d2ea:	ea4f 4022 	mov.w	r0, r2, asr #16
 801d2ee:	d2e6      	bcs.n	801d2be <quorem+0xa4>
 801d2f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d2f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d2f8:	b922      	cbnz	r2, 801d304 <quorem+0xea>
 801d2fa:	3b04      	subs	r3, #4
 801d2fc:	429d      	cmp	r5, r3
 801d2fe:	461a      	mov	r2, r3
 801d300:	d30b      	bcc.n	801d31a <quorem+0x100>
 801d302:	613c      	str	r4, [r7, #16]
 801d304:	3601      	adds	r6, #1
 801d306:	4630      	mov	r0, r6
 801d308:	b003      	add	sp, #12
 801d30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d30e:	6812      	ldr	r2, [r2, #0]
 801d310:	3b04      	subs	r3, #4
 801d312:	2a00      	cmp	r2, #0
 801d314:	d1cb      	bne.n	801d2ae <quorem+0x94>
 801d316:	3c01      	subs	r4, #1
 801d318:	e7c6      	b.n	801d2a8 <quorem+0x8e>
 801d31a:	6812      	ldr	r2, [r2, #0]
 801d31c:	3b04      	subs	r3, #4
 801d31e:	2a00      	cmp	r2, #0
 801d320:	d1ef      	bne.n	801d302 <quorem+0xe8>
 801d322:	3c01      	subs	r4, #1
 801d324:	e7ea      	b.n	801d2fc <quorem+0xe2>
 801d326:	2000      	movs	r0, #0
 801d328:	e7ee      	b.n	801d308 <quorem+0xee>
 801d32a:	0000      	movs	r0, r0
 801d32c:	0000      	movs	r0, r0
	...

0801d330 <_dtoa_r>:
 801d330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d334:	69c7      	ldr	r7, [r0, #28]
 801d336:	b097      	sub	sp, #92	@ 0x5c
 801d338:	ed8d 0b04 	vstr	d0, [sp, #16]
 801d33c:	ec55 4b10 	vmov	r4, r5, d0
 801d340:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801d342:	9107      	str	r1, [sp, #28]
 801d344:	4681      	mov	r9, r0
 801d346:	920c      	str	r2, [sp, #48]	@ 0x30
 801d348:	9311      	str	r3, [sp, #68]	@ 0x44
 801d34a:	b97f      	cbnz	r7, 801d36c <_dtoa_r+0x3c>
 801d34c:	2010      	movs	r0, #16
 801d34e:	f000 fe09 	bl	801df64 <malloc>
 801d352:	4602      	mov	r2, r0
 801d354:	f8c9 001c 	str.w	r0, [r9, #28]
 801d358:	b920      	cbnz	r0, 801d364 <_dtoa_r+0x34>
 801d35a:	4ba9      	ldr	r3, [pc, #676]	@ (801d600 <_dtoa_r+0x2d0>)
 801d35c:	21ef      	movs	r1, #239	@ 0xef
 801d35e:	48a9      	ldr	r0, [pc, #676]	@ (801d604 <_dtoa_r+0x2d4>)
 801d360:	f001 fc3a 	bl	801ebd8 <__assert_func>
 801d364:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801d368:	6007      	str	r7, [r0, #0]
 801d36a:	60c7      	str	r7, [r0, #12]
 801d36c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801d370:	6819      	ldr	r1, [r3, #0]
 801d372:	b159      	cbz	r1, 801d38c <_dtoa_r+0x5c>
 801d374:	685a      	ldr	r2, [r3, #4]
 801d376:	604a      	str	r2, [r1, #4]
 801d378:	2301      	movs	r3, #1
 801d37a:	4093      	lsls	r3, r2
 801d37c:	608b      	str	r3, [r1, #8]
 801d37e:	4648      	mov	r0, r9
 801d380:	f000 fee6 	bl	801e150 <_Bfree>
 801d384:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801d388:	2200      	movs	r2, #0
 801d38a:	601a      	str	r2, [r3, #0]
 801d38c:	1e2b      	subs	r3, r5, #0
 801d38e:	bfb9      	ittee	lt
 801d390:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801d394:	9305      	strlt	r3, [sp, #20]
 801d396:	2300      	movge	r3, #0
 801d398:	6033      	strge	r3, [r6, #0]
 801d39a:	9f05      	ldr	r7, [sp, #20]
 801d39c:	4b9a      	ldr	r3, [pc, #616]	@ (801d608 <_dtoa_r+0x2d8>)
 801d39e:	bfbc      	itt	lt
 801d3a0:	2201      	movlt	r2, #1
 801d3a2:	6032      	strlt	r2, [r6, #0]
 801d3a4:	43bb      	bics	r3, r7
 801d3a6:	d112      	bne.n	801d3ce <_dtoa_r+0x9e>
 801d3a8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801d3aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 801d3ae:	6013      	str	r3, [r2, #0]
 801d3b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801d3b4:	4323      	orrs	r3, r4
 801d3b6:	f000 855a 	beq.w	801de6e <_dtoa_r+0xb3e>
 801d3ba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801d3bc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801d61c <_dtoa_r+0x2ec>
 801d3c0:	2b00      	cmp	r3, #0
 801d3c2:	f000 855c 	beq.w	801de7e <_dtoa_r+0xb4e>
 801d3c6:	f10a 0303 	add.w	r3, sl, #3
 801d3ca:	f000 bd56 	b.w	801de7a <_dtoa_r+0xb4a>
 801d3ce:	ed9d 7b04 	vldr	d7, [sp, #16]
 801d3d2:	2200      	movs	r2, #0
 801d3d4:	ec51 0b17 	vmov	r0, r1, d7
 801d3d8:	2300      	movs	r3, #0
 801d3da:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801d3de:	f7e3 fb73 	bl	8000ac8 <__aeabi_dcmpeq>
 801d3e2:	4680      	mov	r8, r0
 801d3e4:	b158      	cbz	r0, 801d3fe <_dtoa_r+0xce>
 801d3e6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801d3e8:	2301      	movs	r3, #1
 801d3ea:	6013      	str	r3, [r2, #0]
 801d3ec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801d3ee:	b113      	cbz	r3, 801d3f6 <_dtoa_r+0xc6>
 801d3f0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801d3f2:	4b86      	ldr	r3, [pc, #536]	@ (801d60c <_dtoa_r+0x2dc>)
 801d3f4:	6013      	str	r3, [r2, #0]
 801d3f6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 801d620 <_dtoa_r+0x2f0>
 801d3fa:	f000 bd40 	b.w	801de7e <_dtoa_r+0xb4e>
 801d3fe:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801d402:	aa14      	add	r2, sp, #80	@ 0x50
 801d404:	a915      	add	r1, sp, #84	@ 0x54
 801d406:	4648      	mov	r0, r9
 801d408:	f001 f984 	bl	801e714 <__d2b>
 801d40c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801d410:	9002      	str	r0, [sp, #8]
 801d412:	2e00      	cmp	r6, #0
 801d414:	d078      	beq.n	801d508 <_dtoa_r+0x1d8>
 801d416:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d418:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 801d41c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d420:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801d424:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801d428:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801d42c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801d430:	4619      	mov	r1, r3
 801d432:	2200      	movs	r2, #0
 801d434:	4b76      	ldr	r3, [pc, #472]	@ (801d610 <_dtoa_r+0x2e0>)
 801d436:	f7e2 ff27 	bl	8000288 <__aeabi_dsub>
 801d43a:	a36b      	add	r3, pc, #428	@ (adr r3, 801d5e8 <_dtoa_r+0x2b8>)
 801d43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d440:	f7e3 f8da 	bl	80005f8 <__aeabi_dmul>
 801d444:	a36a      	add	r3, pc, #424	@ (adr r3, 801d5f0 <_dtoa_r+0x2c0>)
 801d446:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d44a:	f7e2 ff1f 	bl	800028c <__adddf3>
 801d44e:	4604      	mov	r4, r0
 801d450:	4630      	mov	r0, r6
 801d452:	460d      	mov	r5, r1
 801d454:	f7e3 f866 	bl	8000524 <__aeabi_i2d>
 801d458:	a367      	add	r3, pc, #412	@ (adr r3, 801d5f8 <_dtoa_r+0x2c8>)
 801d45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d45e:	f7e3 f8cb 	bl	80005f8 <__aeabi_dmul>
 801d462:	4602      	mov	r2, r0
 801d464:	460b      	mov	r3, r1
 801d466:	4620      	mov	r0, r4
 801d468:	4629      	mov	r1, r5
 801d46a:	f7e2 ff0f 	bl	800028c <__adddf3>
 801d46e:	4604      	mov	r4, r0
 801d470:	460d      	mov	r5, r1
 801d472:	f7e3 fb71 	bl	8000b58 <__aeabi_d2iz>
 801d476:	2200      	movs	r2, #0
 801d478:	4607      	mov	r7, r0
 801d47a:	2300      	movs	r3, #0
 801d47c:	4620      	mov	r0, r4
 801d47e:	4629      	mov	r1, r5
 801d480:	f7e3 fb2c 	bl	8000adc <__aeabi_dcmplt>
 801d484:	b140      	cbz	r0, 801d498 <_dtoa_r+0x168>
 801d486:	4638      	mov	r0, r7
 801d488:	f7e3 f84c 	bl	8000524 <__aeabi_i2d>
 801d48c:	4622      	mov	r2, r4
 801d48e:	462b      	mov	r3, r5
 801d490:	f7e3 fb1a 	bl	8000ac8 <__aeabi_dcmpeq>
 801d494:	b900      	cbnz	r0, 801d498 <_dtoa_r+0x168>
 801d496:	3f01      	subs	r7, #1
 801d498:	2f16      	cmp	r7, #22
 801d49a:	d852      	bhi.n	801d542 <_dtoa_r+0x212>
 801d49c:	4b5d      	ldr	r3, [pc, #372]	@ (801d614 <_dtoa_r+0x2e4>)
 801d49e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801d4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801d4aa:	f7e3 fb17 	bl	8000adc <__aeabi_dcmplt>
 801d4ae:	2800      	cmp	r0, #0
 801d4b0:	d049      	beq.n	801d546 <_dtoa_r+0x216>
 801d4b2:	3f01      	subs	r7, #1
 801d4b4:	2300      	movs	r3, #0
 801d4b6:	9310      	str	r3, [sp, #64]	@ 0x40
 801d4b8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d4ba:	1b9b      	subs	r3, r3, r6
 801d4bc:	1e5a      	subs	r2, r3, #1
 801d4be:	bf45      	ittet	mi
 801d4c0:	f1c3 0301 	rsbmi	r3, r3, #1
 801d4c4:	9300      	strmi	r3, [sp, #0]
 801d4c6:	2300      	movpl	r3, #0
 801d4c8:	2300      	movmi	r3, #0
 801d4ca:	9206      	str	r2, [sp, #24]
 801d4cc:	bf54      	ite	pl
 801d4ce:	9300      	strpl	r3, [sp, #0]
 801d4d0:	9306      	strmi	r3, [sp, #24]
 801d4d2:	2f00      	cmp	r7, #0
 801d4d4:	db39      	blt.n	801d54a <_dtoa_r+0x21a>
 801d4d6:	9b06      	ldr	r3, [sp, #24]
 801d4d8:	970d      	str	r7, [sp, #52]	@ 0x34
 801d4da:	443b      	add	r3, r7
 801d4dc:	9306      	str	r3, [sp, #24]
 801d4de:	2300      	movs	r3, #0
 801d4e0:	9308      	str	r3, [sp, #32]
 801d4e2:	9b07      	ldr	r3, [sp, #28]
 801d4e4:	2b09      	cmp	r3, #9
 801d4e6:	d863      	bhi.n	801d5b0 <_dtoa_r+0x280>
 801d4e8:	2b05      	cmp	r3, #5
 801d4ea:	bfc4      	itt	gt
 801d4ec:	3b04      	subgt	r3, #4
 801d4ee:	9307      	strgt	r3, [sp, #28]
 801d4f0:	9b07      	ldr	r3, [sp, #28]
 801d4f2:	f1a3 0302 	sub.w	r3, r3, #2
 801d4f6:	bfcc      	ite	gt
 801d4f8:	2400      	movgt	r4, #0
 801d4fa:	2401      	movle	r4, #1
 801d4fc:	2b03      	cmp	r3, #3
 801d4fe:	d863      	bhi.n	801d5c8 <_dtoa_r+0x298>
 801d500:	e8df f003 	tbb	[pc, r3]
 801d504:	2b375452 	.word	0x2b375452
 801d508:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801d50c:	441e      	add	r6, r3
 801d50e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801d512:	2b20      	cmp	r3, #32
 801d514:	bfc1      	itttt	gt
 801d516:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801d51a:	409f      	lslgt	r7, r3
 801d51c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801d520:	fa24 f303 	lsrgt.w	r3, r4, r3
 801d524:	bfd6      	itet	le
 801d526:	f1c3 0320 	rsble	r3, r3, #32
 801d52a:	ea47 0003 	orrgt.w	r0, r7, r3
 801d52e:	fa04 f003 	lslle.w	r0, r4, r3
 801d532:	f7e2 ffe7 	bl	8000504 <__aeabi_ui2d>
 801d536:	2201      	movs	r2, #1
 801d538:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801d53c:	3e01      	subs	r6, #1
 801d53e:	9212      	str	r2, [sp, #72]	@ 0x48
 801d540:	e776      	b.n	801d430 <_dtoa_r+0x100>
 801d542:	2301      	movs	r3, #1
 801d544:	e7b7      	b.n	801d4b6 <_dtoa_r+0x186>
 801d546:	9010      	str	r0, [sp, #64]	@ 0x40
 801d548:	e7b6      	b.n	801d4b8 <_dtoa_r+0x188>
 801d54a:	9b00      	ldr	r3, [sp, #0]
 801d54c:	1bdb      	subs	r3, r3, r7
 801d54e:	9300      	str	r3, [sp, #0]
 801d550:	427b      	negs	r3, r7
 801d552:	9308      	str	r3, [sp, #32]
 801d554:	2300      	movs	r3, #0
 801d556:	930d      	str	r3, [sp, #52]	@ 0x34
 801d558:	e7c3      	b.n	801d4e2 <_dtoa_r+0x1b2>
 801d55a:	2301      	movs	r3, #1
 801d55c:	9309      	str	r3, [sp, #36]	@ 0x24
 801d55e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d560:	eb07 0b03 	add.w	fp, r7, r3
 801d564:	f10b 0301 	add.w	r3, fp, #1
 801d568:	2b01      	cmp	r3, #1
 801d56a:	9303      	str	r3, [sp, #12]
 801d56c:	bfb8      	it	lt
 801d56e:	2301      	movlt	r3, #1
 801d570:	e006      	b.n	801d580 <_dtoa_r+0x250>
 801d572:	2301      	movs	r3, #1
 801d574:	9309      	str	r3, [sp, #36]	@ 0x24
 801d576:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d578:	2b00      	cmp	r3, #0
 801d57a:	dd28      	ble.n	801d5ce <_dtoa_r+0x29e>
 801d57c:	469b      	mov	fp, r3
 801d57e:	9303      	str	r3, [sp, #12]
 801d580:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801d584:	2100      	movs	r1, #0
 801d586:	2204      	movs	r2, #4
 801d588:	f102 0514 	add.w	r5, r2, #20
 801d58c:	429d      	cmp	r5, r3
 801d58e:	d926      	bls.n	801d5de <_dtoa_r+0x2ae>
 801d590:	6041      	str	r1, [r0, #4]
 801d592:	4648      	mov	r0, r9
 801d594:	f000 fd9c 	bl	801e0d0 <_Balloc>
 801d598:	4682      	mov	sl, r0
 801d59a:	2800      	cmp	r0, #0
 801d59c:	d142      	bne.n	801d624 <_dtoa_r+0x2f4>
 801d59e:	4b1e      	ldr	r3, [pc, #120]	@ (801d618 <_dtoa_r+0x2e8>)
 801d5a0:	4602      	mov	r2, r0
 801d5a2:	f240 11af 	movw	r1, #431	@ 0x1af
 801d5a6:	e6da      	b.n	801d35e <_dtoa_r+0x2e>
 801d5a8:	2300      	movs	r3, #0
 801d5aa:	e7e3      	b.n	801d574 <_dtoa_r+0x244>
 801d5ac:	2300      	movs	r3, #0
 801d5ae:	e7d5      	b.n	801d55c <_dtoa_r+0x22c>
 801d5b0:	2401      	movs	r4, #1
 801d5b2:	2300      	movs	r3, #0
 801d5b4:	9307      	str	r3, [sp, #28]
 801d5b6:	9409      	str	r4, [sp, #36]	@ 0x24
 801d5b8:	f04f 3bff 	mov.w	fp, #4294967295
 801d5bc:	2200      	movs	r2, #0
 801d5be:	f8cd b00c 	str.w	fp, [sp, #12]
 801d5c2:	2312      	movs	r3, #18
 801d5c4:	920c      	str	r2, [sp, #48]	@ 0x30
 801d5c6:	e7db      	b.n	801d580 <_dtoa_r+0x250>
 801d5c8:	2301      	movs	r3, #1
 801d5ca:	9309      	str	r3, [sp, #36]	@ 0x24
 801d5cc:	e7f4      	b.n	801d5b8 <_dtoa_r+0x288>
 801d5ce:	f04f 0b01 	mov.w	fp, #1
 801d5d2:	f8cd b00c 	str.w	fp, [sp, #12]
 801d5d6:	465b      	mov	r3, fp
 801d5d8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 801d5dc:	e7d0      	b.n	801d580 <_dtoa_r+0x250>
 801d5de:	3101      	adds	r1, #1
 801d5e0:	0052      	lsls	r2, r2, #1
 801d5e2:	e7d1      	b.n	801d588 <_dtoa_r+0x258>
 801d5e4:	f3af 8000 	nop.w
 801d5e8:	636f4361 	.word	0x636f4361
 801d5ec:	3fd287a7 	.word	0x3fd287a7
 801d5f0:	8b60c8b3 	.word	0x8b60c8b3
 801d5f4:	3fc68a28 	.word	0x3fc68a28
 801d5f8:	509f79fb 	.word	0x509f79fb
 801d5fc:	3fd34413 	.word	0x3fd34413
 801d600:	080203a5 	.word	0x080203a5
 801d604:	080203bc 	.word	0x080203bc
 801d608:	7ff00000 	.word	0x7ff00000
 801d60c:	08020375 	.word	0x08020375
 801d610:	3ff80000 	.word	0x3ff80000
 801d614:	08020510 	.word	0x08020510
 801d618:	08020414 	.word	0x08020414
 801d61c:	080203a1 	.word	0x080203a1
 801d620:	08020374 	.word	0x08020374
 801d624:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801d628:	6018      	str	r0, [r3, #0]
 801d62a:	9b03      	ldr	r3, [sp, #12]
 801d62c:	2b0e      	cmp	r3, #14
 801d62e:	f200 80a1 	bhi.w	801d774 <_dtoa_r+0x444>
 801d632:	2c00      	cmp	r4, #0
 801d634:	f000 809e 	beq.w	801d774 <_dtoa_r+0x444>
 801d638:	2f00      	cmp	r7, #0
 801d63a:	dd33      	ble.n	801d6a4 <_dtoa_r+0x374>
 801d63c:	4b9c      	ldr	r3, [pc, #624]	@ (801d8b0 <_dtoa_r+0x580>)
 801d63e:	f007 020f 	and.w	r2, r7, #15
 801d642:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d646:	ed93 7b00 	vldr	d7, [r3]
 801d64a:	05f8      	lsls	r0, r7, #23
 801d64c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 801d650:	ea4f 1427 	mov.w	r4, r7, asr #4
 801d654:	d516      	bpl.n	801d684 <_dtoa_r+0x354>
 801d656:	4b97      	ldr	r3, [pc, #604]	@ (801d8b4 <_dtoa_r+0x584>)
 801d658:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801d65c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801d660:	f7e3 f8f4 	bl	800084c <__aeabi_ddiv>
 801d664:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801d668:	f004 040f 	and.w	r4, r4, #15
 801d66c:	2603      	movs	r6, #3
 801d66e:	4d91      	ldr	r5, [pc, #580]	@ (801d8b4 <_dtoa_r+0x584>)
 801d670:	b954      	cbnz	r4, 801d688 <_dtoa_r+0x358>
 801d672:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801d676:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d67a:	f7e3 f8e7 	bl	800084c <__aeabi_ddiv>
 801d67e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801d682:	e028      	b.n	801d6d6 <_dtoa_r+0x3a6>
 801d684:	2602      	movs	r6, #2
 801d686:	e7f2      	b.n	801d66e <_dtoa_r+0x33e>
 801d688:	07e1      	lsls	r1, r4, #31
 801d68a:	d508      	bpl.n	801d69e <_dtoa_r+0x36e>
 801d68c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801d690:	e9d5 2300 	ldrd	r2, r3, [r5]
 801d694:	f7e2 ffb0 	bl	80005f8 <__aeabi_dmul>
 801d698:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801d69c:	3601      	adds	r6, #1
 801d69e:	1064      	asrs	r4, r4, #1
 801d6a0:	3508      	adds	r5, #8
 801d6a2:	e7e5      	b.n	801d670 <_dtoa_r+0x340>
 801d6a4:	f000 80af 	beq.w	801d806 <_dtoa_r+0x4d6>
 801d6a8:	427c      	negs	r4, r7
 801d6aa:	4b81      	ldr	r3, [pc, #516]	@ (801d8b0 <_dtoa_r+0x580>)
 801d6ac:	4d81      	ldr	r5, [pc, #516]	@ (801d8b4 <_dtoa_r+0x584>)
 801d6ae:	f004 020f 	and.w	r2, r4, #15
 801d6b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801d6be:	f7e2 ff9b 	bl	80005f8 <__aeabi_dmul>
 801d6c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801d6c6:	1124      	asrs	r4, r4, #4
 801d6c8:	2300      	movs	r3, #0
 801d6ca:	2602      	movs	r6, #2
 801d6cc:	2c00      	cmp	r4, #0
 801d6ce:	f040 808f 	bne.w	801d7f0 <_dtoa_r+0x4c0>
 801d6d2:	2b00      	cmp	r3, #0
 801d6d4:	d1d3      	bne.n	801d67e <_dtoa_r+0x34e>
 801d6d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d6d8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801d6dc:	2b00      	cmp	r3, #0
 801d6de:	f000 8094 	beq.w	801d80a <_dtoa_r+0x4da>
 801d6e2:	4b75      	ldr	r3, [pc, #468]	@ (801d8b8 <_dtoa_r+0x588>)
 801d6e4:	2200      	movs	r2, #0
 801d6e6:	4620      	mov	r0, r4
 801d6e8:	4629      	mov	r1, r5
 801d6ea:	f7e3 f9f7 	bl	8000adc <__aeabi_dcmplt>
 801d6ee:	2800      	cmp	r0, #0
 801d6f0:	f000 808b 	beq.w	801d80a <_dtoa_r+0x4da>
 801d6f4:	9b03      	ldr	r3, [sp, #12]
 801d6f6:	2b00      	cmp	r3, #0
 801d6f8:	f000 8087 	beq.w	801d80a <_dtoa_r+0x4da>
 801d6fc:	f1bb 0f00 	cmp.w	fp, #0
 801d700:	dd34      	ble.n	801d76c <_dtoa_r+0x43c>
 801d702:	4620      	mov	r0, r4
 801d704:	4b6d      	ldr	r3, [pc, #436]	@ (801d8bc <_dtoa_r+0x58c>)
 801d706:	2200      	movs	r2, #0
 801d708:	4629      	mov	r1, r5
 801d70a:	f7e2 ff75 	bl	80005f8 <__aeabi_dmul>
 801d70e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801d712:	f107 38ff 	add.w	r8, r7, #4294967295
 801d716:	3601      	adds	r6, #1
 801d718:	465c      	mov	r4, fp
 801d71a:	4630      	mov	r0, r6
 801d71c:	f7e2 ff02 	bl	8000524 <__aeabi_i2d>
 801d720:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d724:	f7e2 ff68 	bl	80005f8 <__aeabi_dmul>
 801d728:	4b65      	ldr	r3, [pc, #404]	@ (801d8c0 <_dtoa_r+0x590>)
 801d72a:	2200      	movs	r2, #0
 801d72c:	f7e2 fdae 	bl	800028c <__adddf3>
 801d730:	4605      	mov	r5, r0
 801d732:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801d736:	2c00      	cmp	r4, #0
 801d738:	d16a      	bne.n	801d810 <_dtoa_r+0x4e0>
 801d73a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d73e:	4b61      	ldr	r3, [pc, #388]	@ (801d8c4 <_dtoa_r+0x594>)
 801d740:	2200      	movs	r2, #0
 801d742:	f7e2 fda1 	bl	8000288 <__aeabi_dsub>
 801d746:	4602      	mov	r2, r0
 801d748:	460b      	mov	r3, r1
 801d74a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801d74e:	462a      	mov	r2, r5
 801d750:	4633      	mov	r3, r6
 801d752:	f7e3 f9e1 	bl	8000b18 <__aeabi_dcmpgt>
 801d756:	2800      	cmp	r0, #0
 801d758:	f040 8298 	bne.w	801dc8c <_dtoa_r+0x95c>
 801d75c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d760:	462a      	mov	r2, r5
 801d762:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801d766:	f7e3 f9b9 	bl	8000adc <__aeabi_dcmplt>
 801d76a:	bb38      	cbnz	r0, 801d7bc <_dtoa_r+0x48c>
 801d76c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 801d770:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801d774:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801d776:	2b00      	cmp	r3, #0
 801d778:	f2c0 8157 	blt.w	801da2a <_dtoa_r+0x6fa>
 801d77c:	2f0e      	cmp	r7, #14
 801d77e:	f300 8154 	bgt.w	801da2a <_dtoa_r+0x6fa>
 801d782:	4b4b      	ldr	r3, [pc, #300]	@ (801d8b0 <_dtoa_r+0x580>)
 801d784:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801d788:	ed93 7b00 	vldr	d7, [r3]
 801d78c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d78e:	2b00      	cmp	r3, #0
 801d790:	ed8d 7b00 	vstr	d7, [sp]
 801d794:	f280 80e5 	bge.w	801d962 <_dtoa_r+0x632>
 801d798:	9b03      	ldr	r3, [sp, #12]
 801d79a:	2b00      	cmp	r3, #0
 801d79c:	f300 80e1 	bgt.w	801d962 <_dtoa_r+0x632>
 801d7a0:	d10c      	bne.n	801d7bc <_dtoa_r+0x48c>
 801d7a2:	4b48      	ldr	r3, [pc, #288]	@ (801d8c4 <_dtoa_r+0x594>)
 801d7a4:	2200      	movs	r2, #0
 801d7a6:	ec51 0b17 	vmov	r0, r1, d7
 801d7aa:	f7e2 ff25 	bl	80005f8 <__aeabi_dmul>
 801d7ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d7b2:	f7e3 f9a7 	bl	8000b04 <__aeabi_dcmpge>
 801d7b6:	2800      	cmp	r0, #0
 801d7b8:	f000 8266 	beq.w	801dc88 <_dtoa_r+0x958>
 801d7bc:	2400      	movs	r4, #0
 801d7be:	4625      	mov	r5, r4
 801d7c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d7c2:	4656      	mov	r6, sl
 801d7c4:	ea6f 0803 	mvn.w	r8, r3
 801d7c8:	2700      	movs	r7, #0
 801d7ca:	4621      	mov	r1, r4
 801d7cc:	4648      	mov	r0, r9
 801d7ce:	f000 fcbf 	bl	801e150 <_Bfree>
 801d7d2:	2d00      	cmp	r5, #0
 801d7d4:	f000 80bd 	beq.w	801d952 <_dtoa_r+0x622>
 801d7d8:	b12f      	cbz	r7, 801d7e6 <_dtoa_r+0x4b6>
 801d7da:	42af      	cmp	r7, r5
 801d7dc:	d003      	beq.n	801d7e6 <_dtoa_r+0x4b6>
 801d7de:	4639      	mov	r1, r7
 801d7e0:	4648      	mov	r0, r9
 801d7e2:	f000 fcb5 	bl	801e150 <_Bfree>
 801d7e6:	4629      	mov	r1, r5
 801d7e8:	4648      	mov	r0, r9
 801d7ea:	f000 fcb1 	bl	801e150 <_Bfree>
 801d7ee:	e0b0      	b.n	801d952 <_dtoa_r+0x622>
 801d7f0:	07e2      	lsls	r2, r4, #31
 801d7f2:	d505      	bpl.n	801d800 <_dtoa_r+0x4d0>
 801d7f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 801d7f8:	f7e2 fefe 	bl	80005f8 <__aeabi_dmul>
 801d7fc:	3601      	adds	r6, #1
 801d7fe:	2301      	movs	r3, #1
 801d800:	1064      	asrs	r4, r4, #1
 801d802:	3508      	adds	r5, #8
 801d804:	e762      	b.n	801d6cc <_dtoa_r+0x39c>
 801d806:	2602      	movs	r6, #2
 801d808:	e765      	b.n	801d6d6 <_dtoa_r+0x3a6>
 801d80a:	9c03      	ldr	r4, [sp, #12]
 801d80c:	46b8      	mov	r8, r7
 801d80e:	e784      	b.n	801d71a <_dtoa_r+0x3ea>
 801d810:	4b27      	ldr	r3, [pc, #156]	@ (801d8b0 <_dtoa_r+0x580>)
 801d812:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801d814:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801d818:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801d81c:	4454      	add	r4, sl
 801d81e:	2900      	cmp	r1, #0
 801d820:	d054      	beq.n	801d8cc <_dtoa_r+0x59c>
 801d822:	4929      	ldr	r1, [pc, #164]	@ (801d8c8 <_dtoa_r+0x598>)
 801d824:	2000      	movs	r0, #0
 801d826:	f7e3 f811 	bl	800084c <__aeabi_ddiv>
 801d82a:	4633      	mov	r3, r6
 801d82c:	462a      	mov	r2, r5
 801d82e:	f7e2 fd2b 	bl	8000288 <__aeabi_dsub>
 801d832:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801d836:	4656      	mov	r6, sl
 801d838:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d83c:	f7e3 f98c 	bl	8000b58 <__aeabi_d2iz>
 801d840:	4605      	mov	r5, r0
 801d842:	f7e2 fe6f 	bl	8000524 <__aeabi_i2d>
 801d846:	4602      	mov	r2, r0
 801d848:	460b      	mov	r3, r1
 801d84a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d84e:	f7e2 fd1b 	bl	8000288 <__aeabi_dsub>
 801d852:	3530      	adds	r5, #48	@ 0x30
 801d854:	4602      	mov	r2, r0
 801d856:	460b      	mov	r3, r1
 801d858:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801d85c:	f806 5b01 	strb.w	r5, [r6], #1
 801d860:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801d864:	f7e3 f93a 	bl	8000adc <__aeabi_dcmplt>
 801d868:	2800      	cmp	r0, #0
 801d86a:	d172      	bne.n	801d952 <_dtoa_r+0x622>
 801d86c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d870:	4911      	ldr	r1, [pc, #68]	@ (801d8b8 <_dtoa_r+0x588>)
 801d872:	2000      	movs	r0, #0
 801d874:	f7e2 fd08 	bl	8000288 <__aeabi_dsub>
 801d878:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801d87c:	f7e3 f92e 	bl	8000adc <__aeabi_dcmplt>
 801d880:	2800      	cmp	r0, #0
 801d882:	f040 80b4 	bne.w	801d9ee <_dtoa_r+0x6be>
 801d886:	42a6      	cmp	r6, r4
 801d888:	f43f af70 	beq.w	801d76c <_dtoa_r+0x43c>
 801d88c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801d890:	4b0a      	ldr	r3, [pc, #40]	@ (801d8bc <_dtoa_r+0x58c>)
 801d892:	2200      	movs	r2, #0
 801d894:	f7e2 feb0 	bl	80005f8 <__aeabi_dmul>
 801d898:	4b08      	ldr	r3, [pc, #32]	@ (801d8bc <_dtoa_r+0x58c>)
 801d89a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801d89e:	2200      	movs	r2, #0
 801d8a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d8a4:	f7e2 fea8 	bl	80005f8 <__aeabi_dmul>
 801d8a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801d8ac:	e7c4      	b.n	801d838 <_dtoa_r+0x508>
 801d8ae:	bf00      	nop
 801d8b0:	08020510 	.word	0x08020510
 801d8b4:	080204e8 	.word	0x080204e8
 801d8b8:	3ff00000 	.word	0x3ff00000
 801d8bc:	40240000 	.word	0x40240000
 801d8c0:	401c0000 	.word	0x401c0000
 801d8c4:	40140000 	.word	0x40140000
 801d8c8:	3fe00000 	.word	0x3fe00000
 801d8cc:	4631      	mov	r1, r6
 801d8ce:	4628      	mov	r0, r5
 801d8d0:	f7e2 fe92 	bl	80005f8 <__aeabi_dmul>
 801d8d4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801d8d8:	9413      	str	r4, [sp, #76]	@ 0x4c
 801d8da:	4656      	mov	r6, sl
 801d8dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d8e0:	f7e3 f93a 	bl	8000b58 <__aeabi_d2iz>
 801d8e4:	4605      	mov	r5, r0
 801d8e6:	f7e2 fe1d 	bl	8000524 <__aeabi_i2d>
 801d8ea:	4602      	mov	r2, r0
 801d8ec:	460b      	mov	r3, r1
 801d8ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d8f2:	f7e2 fcc9 	bl	8000288 <__aeabi_dsub>
 801d8f6:	3530      	adds	r5, #48	@ 0x30
 801d8f8:	f806 5b01 	strb.w	r5, [r6], #1
 801d8fc:	4602      	mov	r2, r0
 801d8fe:	460b      	mov	r3, r1
 801d900:	42a6      	cmp	r6, r4
 801d902:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801d906:	f04f 0200 	mov.w	r2, #0
 801d90a:	d124      	bne.n	801d956 <_dtoa_r+0x626>
 801d90c:	4baf      	ldr	r3, [pc, #700]	@ (801dbcc <_dtoa_r+0x89c>)
 801d90e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801d912:	f7e2 fcbb 	bl	800028c <__adddf3>
 801d916:	4602      	mov	r2, r0
 801d918:	460b      	mov	r3, r1
 801d91a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d91e:	f7e3 f8fb 	bl	8000b18 <__aeabi_dcmpgt>
 801d922:	2800      	cmp	r0, #0
 801d924:	d163      	bne.n	801d9ee <_dtoa_r+0x6be>
 801d926:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801d92a:	49a8      	ldr	r1, [pc, #672]	@ (801dbcc <_dtoa_r+0x89c>)
 801d92c:	2000      	movs	r0, #0
 801d92e:	f7e2 fcab 	bl	8000288 <__aeabi_dsub>
 801d932:	4602      	mov	r2, r0
 801d934:	460b      	mov	r3, r1
 801d936:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d93a:	f7e3 f8cf 	bl	8000adc <__aeabi_dcmplt>
 801d93e:	2800      	cmp	r0, #0
 801d940:	f43f af14 	beq.w	801d76c <_dtoa_r+0x43c>
 801d944:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801d946:	1e73      	subs	r3, r6, #1
 801d948:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d94a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801d94e:	2b30      	cmp	r3, #48	@ 0x30
 801d950:	d0f8      	beq.n	801d944 <_dtoa_r+0x614>
 801d952:	4647      	mov	r7, r8
 801d954:	e03b      	b.n	801d9ce <_dtoa_r+0x69e>
 801d956:	4b9e      	ldr	r3, [pc, #632]	@ (801dbd0 <_dtoa_r+0x8a0>)
 801d958:	f7e2 fe4e 	bl	80005f8 <__aeabi_dmul>
 801d95c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801d960:	e7bc      	b.n	801d8dc <_dtoa_r+0x5ac>
 801d962:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801d966:	4656      	mov	r6, sl
 801d968:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d96c:	4620      	mov	r0, r4
 801d96e:	4629      	mov	r1, r5
 801d970:	f7e2 ff6c 	bl	800084c <__aeabi_ddiv>
 801d974:	f7e3 f8f0 	bl	8000b58 <__aeabi_d2iz>
 801d978:	4680      	mov	r8, r0
 801d97a:	f7e2 fdd3 	bl	8000524 <__aeabi_i2d>
 801d97e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d982:	f7e2 fe39 	bl	80005f8 <__aeabi_dmul>
 801d986:	4602      	mov	r2, r0
 801d988:	460b      	mov	r3, r1
 801d98a:	4620      	mov	r0, r4
 801d98c:	4629      	mov	r1, r5
 801d98e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801d992:	f7e2 fc79 	bl	8000288 <__aeabi_dsub>
 801d996:	f806 4b01 	strb.w	r4, [r6], #1
 801d99a:	9d03      	ldr	r5, [sp, #12]
 801d99c:	eba6 040a 	sub.w	r4, r6, sl
 801d9a0:	42a5      	cmp	r5, r4
 801d9a2:	4602      	mov	r2, r0
 801d9a4:	460b      	mov	r3, r1
 801d9a6:	d133      	bne.n	801da10 <_dtoa_r+0x6e0>
 801d9a8:	f7e2 fc70 	bl	800028c <__adddf3>
 801d9ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d9b0:	4604      	mov	r4, r0
 801d9b2:	460d      	mov	r5, r1
 801d9b4:	f7e3 f8b0 	bl	8000b18 <__aeabi_dcmpgt>
 801d9b8:	b9c0      	cbnz	r0, 801d9ec <_dtoa_r+0x6bc>
 801d9ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d9be:	4620      	mov	r0, r4
 801d9c0:	4629      	mov	r1, r5
 801d9c2:	f7e3 f881 	bl	8000ac8 <__aeabi_dcmpeq>
 801d9c6:	b110      	cbz	r0, 801d9ce <_dtoa_r+0x69e>
 801d9c8:	f018 0f01 	tst.w	r8, #1
 801d9cc:	d10e      	bne.n	801d9ec <_dtoa_r+0x6bc>
 801d9ce:	9902      	ldr	r1, [sp, #8]
 801d9d0:	4648      	mov	r0, r9
 801d9d2:	f000 fbbd 	bl	801e150 <_Bfree>
 801d9d6:	2300      	movs	r3, #0
 801d9d8:	7033      	strb	r3, [r6, #0]
 801d9da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d9dc:	3701      	adds	r7, #1
 801d9de:	601f      	str	r7, [r3, #0]
 801d9e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801d9e2:	2b00      	cmp	r3, #0
 801d9e4:	f000 824b 	beq.w	801de7e <_dtoa_r+0xb4e>
 801d9e8:	601e      	str	r6, [r3, #0]
 801d9ea:	e248      	b.n	801de7e <_dtoa_r+0xb4e>
 801d9ec:	46b8      	mov	r8, r7
 801d9ee:	4633      	mov	r3, r6
 801d9f0:	461e      	mov	r6, r3
 801d9f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d9f6:	2a39      	cmp	r2, #57	@ 0x39
 801d9f8:	d106      	bne.n	801da08 <_dtoa_r+0x6d8>
 801d9fa:	459a      	cmp	sl, r3
 801d9fc:	d1f8      	bne.n	801d9f0 <_dtoa_r+0x6c0>
 801d9fe:	2230      	movs	r2, #48	@ 0x30
 801da00:	f108 0801 	add.w	r8, r8, #1
 801da04:	f88a 2000 	strb.w	r2, [sl]
 801da08:	781a      	ldrb	r2, [r3, #0]
 801da0a:	3201      	adds	r2, #1
 801da0c:	701a      	strb	r2, [r3, #0]
 801da0e:	e7a0      	b.n	801d952 <_dtoa_r+0x622>
 801da10:	4b6f      	ldr	r3, [pc, #444]	@ (801dbd0 <_dtoa_r+0x8a0>)
 801da12:	2200      	movs	r2, #0
 801da14:	f7e2 fdf0 	bl	80005f8 <__aeabi_dmul>
 801da18:	2200      	movs	r2, #0
 801da1a:	2300      	movs	r3, #0
 801da1c:	4604      	mov	r4, r0
 801da1e:	460d      	mov	r5, r1
 801da20:	f7e3 f852 	bl	8000ac8 <__aeabi_dcmpeq>
 801da24:	2800      	cmp	r0, #0
 801da26:	d09f      	beq.n	801d968 <_dtoa_r+0x638>
 801da28:	e7d1      	b.n	801d9ce <_dtoa_r+0x69e>
 801da2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801da2c:	2a00      	cmp	r2, #0
 801da2e:	f000 80ea 	beq.w	801dc06 <_dtoa_r+0x8d6>
 801da32:	9a07      	ldr	r2, [sp, #28]
 801da34:	2a01      	cmp	r2, #1
 801da36:	f300 80cd 	bgt.w	801dbd4 <_dtoa_r+0x8a4>
 801da3a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801da3c:	2a00      	cmp	r2, #0
 801da3e:	f000 80c1 	beq.w	801dbc4 <_dtoa_r+0x894>
 801da42:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801da46:	9c08      	ldr	r4, [sp, #32]
 801da48:	9e00      	ldr	r6, [sp, #0]
 801da4a:	9a00      	ldr	r2, [sp, #0]
 801da4c:	441a      	add	r2, r3
 801da4e:	9200      	str	r2, [sp, #0]
 801da50:	9a06      	ldr	r2, [sp, #24]
 801da52:	2101      	movs	r1, #1
 801da54:	441a      	add	r2, r3
 801da56:	4648      	mov	r0, r9
 801da58:	9206      	str	r2, [sp, #24]
 801da5a:	f000 fc2d 	bl	801e2b8 <__i2b>
 801da5e:	4605      	mov	r5, r0
 801da60:	b166      	cbz	r6, 801da7c <_dtoa_r+0x74c>
 801da62:	9b06      	ldr	r3, [sp, #24]
 801da64:	2b00      	cmp	r3, #0
 801da66:	dd09      	ble.n	801da7c <_dtoa_r+0x74c>
 801da68:	42b3      	cmp	r3, r6
 801da6a:	9a00      	ldr	r2, [sp, #0]
 801da6c:	bfa8      	it	ge
 801da6e:	4633      	movge	r3, r6
 801da70:	1ad2      	subs	r2, r2, r3
 801da72:	9200      	str	r2, [sp, #0]
 801da74:	9a06      	ldr	r2, [sp, #24]
 801da76:	1af6      	subs	r6, r6, r3
 801da78:	1ad3      	subs	r3, r2, r3
 801da7a:	9306      	str	r3, [sp, #24]
 801da7c:	9b08      	ldr	r3, [sp, #32]
 801da7e:	b30b      	cbz	r3, 801dac4 <_dtoa_r+0x794>
 801da80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801da82:	2b00      	cmp	r3, #0
 801da84:	f000 80c6 	beq.w	801dc14 <_dtoa_r+0x8e4>
 801da88:	2c00      	cmp	r4, #0
 801da8a:	f000 80c0 	beq.w	801dc0e <_dtoa_r+0x8de>
 801da8e:	4629      	mov	r1, r5
 801da90:	4622      	mov	r2, r4
 801da92:	4648      	mov	r0, r9
 801da94:	f000 fcc8 	bl	801e428 <__pow5mult>
 801da98:	9a02      	ldr	r2, [sp, #8]
 801da9a:	4601      	mov	r1, r0
 801da9c:	4605      	mov	r5, r0
 801da9e:	4648      	mov	r0, r9
 801daa0:	f000 fc20 	bl	801e2e4 <__multiply>
 801daa4:	9902      	ldr	r1, [sp, #8]
 801daa6:	4680      	mov	r8, r0
 801daa8:	4648      	mov	r0, r9
 801daaa:	f000 fb51 	bl	801e150 <_Bfree>
 801daae:	9b08      	ldr	r3, [sp, #32]
 801dab0:	1b1b      	subs	r3, r3, r4
 801dab2:	9308      	str	r3, [sp, #32]
 801dab4:	f000 80b1 	beq.w	801dc1a <_dtoa_r+0x8ea>
 801dab8:	9a08      	ldr	r2, [sp, #32]
 801daba:	4641      	mov	r1, r8
 801dabc:	4648      	mov	r0, r9
 801dabe:	f000 fcb3 	bl	801e428 <__pow5mult>
 801dac2:	9002      	str	r0, [sp, #8]
 801dac4:	2101      	movs	r1, #1
 801dac6:	4648      	mov	r0, r9
 801dac8:	f000 fbf6 	bl	801e2b8 <__i2b>
 801dacc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801dace:	4604      	mov	r4, r0
 801dad0:	2b00      	cmp	r3, #0
 801dad2:	f000 81d8 	beq.w	801de86 <_dtoa_r+0xb56>
 801dad6:	461a      	mov	r2, r3
 801dad8:	4601      	mov	r1, r0
 801dada:	4648      	mov	r0, r9
 801dadc:	f000 fca4 	bl	801e428 <__pow5mult>
 801dae0:	9b07      	ldr	r3, [sp, #28]
 801dae2:	2b01      	cmp	r3, #1
 801dae4:	4604      	mov	r4, r0
 801dae6:	f300 809f 	bgt.w	801dc28 <_dtoa_r+0x8f8>
 801daea:	9b04      	ldr	r3, [sp, #16]
 801daec:	2b00      	cmp	r3, #0
 801daee:	f040 8097 	bne.w	801dc20 <_dtoa_r+0x8f0>
 801daf2:	9b05      	ldr	r3, [sp, #20]
 801daf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801daf8:	2b00      	cmp	r3, #0
 801dafa:	f040 8093 	bne.w	801dc24 <_dtoa_r+0x8f4>
 801dafe:	9b05      	ldr	r3, [sp, #20]
 801db00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801db04:	0d1b      	lsrs	r3, r3, #20
 801db06:	051b      	lsls	r3, r3, #20
 801db08:	b133      	cbz	r3, 801db18 <_dtoa_r+0x7e8>
 801db0a:	9b00      	ldr	r3, [sp, #0]
 801db0c:	3301      	adds	r3, #1
 801db0e:	9300      	str	r3, [sp, #0]
 801db10:	9b06      	ldr	r3, [sp, #24]
 801db12:	3301      	adds	r3, #1
 801db14:	9306      	str	r3, [sp, #24]
 801db16:	2301      	movs	r3, #1
 801db18:	9308      	str	r3, [sp, #32]
 801db1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801db1c:	2b00      	cmp	r3, #0
 801db1e:	f000 81b8 	beq.w	801de92 <_dtoa_r+0xb62>
 801db22:	6923      	ldr	r3, [r4, #16]
 801db24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801db28:	6918      	ldr	r0, [r3, #16]
 801db2a:	f000 fb79 	bl	801e220 <__hi0bits>
 801db2e:	f1c0 0020 	rsb	r0, r0, #32
 801db32:	9b06      	ldr	r3, [sp, #24]
 801db34:	4418      	add	r0, r3
 801db36:	f010 001f 	ands.w	r0, r0, #31
 801db3a:	f000 8082 	beq.w	801dc42 <_dtoa_r+0x912>
 801db3e:	f1c0 0320 	rsb	r3, r0, #32
 801db42:	2b04      	cmp	r3, #4
 801db44:	dd73      	ble.n	801dc2e <_dtoa_r+0x8fe>
 801db46:	9b00      	ldr	r3, [sp, #0]
 801db48:	f1c0 001c 	rsb	r0, r0, #28
 801db4c:	4403      	add	r3, r0
 801db4e:	9300      	str	r3, [sp, #0]
 801db50:	9b06      	ldr	r3, [sp, #24]
 801db52:	4403      	add	r3, r0
 801db54:	4406      	add	r6, r0
 801db56:	9306      	str	r3, [sp, #24]
 801db58:	9b00      	ldr	r3, [sp, #0]
 801db5a:	2b00      	cmp	r3, #0
 801db5c:	dd05      	ble.n	801db6a <_dtoa_r+0x83a>
 801db5e:	9902      	ldr	r1, [sp, #8]
 801db60:	461a      	mov	r2, r3
 801db62:	4648      	mov	r0, r9
 801db64:	f000 fcba 	bl	801e4dc <__lshift>
 801db68:	9002      	str	r0, [sp, #8]
 801db6a:	9b06      	ldr	r3, [sp, #24]
 801db6c:	2b00      	cmp	r3, #0
 801db6e:	dd05      	ble.n	801db7c <_dtoa_r+0x84c>
 801db70:	4621      	mov	r1, r4
 801db72:	461a      	mov	r2, r3
 801db74:	4648      	mov	r0, r9
 801db76:	f000 fcb1 	bl	801e4dc <__lshift>
 801db7a:	4604      	mov	r4, r0
 801db7c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801db7e:	2b00      	cmp	r3, #0
 801db80:	d061      	beq.n	801dc46 <_dtoa_r+0x916>
 801db82:	9802      	ldr	r0, [sp, #8]
 801db84:	4621      	mov	r1, r4
 801db86:	f000 fd15 	bl	801e5b4 <__mcmp>
 801db8a:	2800      	cmp	r0, #0
 801db8c:	da5b      	bge.n	801dc46 <_dtoa_r+0x916>
 801db8e:	2300      	movs	r3, #0
 801db90:	9902      	ldr	r1, [sp, #8]
 801db92:	220a      	movs	r2, #10
 801db94:	4648      	mov	r0, r9
 801db96:	f000 fafd 	bl	801e194 <__multadd>
 801db9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801db9c:	9002      	str	r0, [sp, #8]
 801db9e:	f107 38ff 	add.w	r8, r7, #4294967295
 801dba2:	2b00      	cmp	r3, #0
 801dba4:	f000 8177 	beq.w	801de96 <_dtoa_r+0xb66>
 801dba8:	4629      	mov	r1, r5
 801dbaa:	2300      	movs	r3, #0
 801dbac:	220a      	movs	r2, #10
 801dbae:	4648      	mov	r0, r9
 801dbb0:	f000 faf0 	bl	801e194 <__multadd>
 801dbb4:	f1bb 0f00 	cmp.w	fp, #0
 801dbb8:	4605      	mov	r5, r0
 801dbba:	dc6f      	bgt.n	801dc9c <_dtoa_r+0x96c>
 801dbbc:	9b07      	ldr	r3, [sp, #28]
 801dbbe:	2b02      	cmp	r3, #2
 801dbc0:	dc49      	bgt.n	801dc56 <_dtoa_r+0x926>
 801dbc2:	e06b      	b.n	801dc9c <_dtoa_r+0x96c>
 801dbc4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801dbc6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801dbca:	e73c      	b.n	801da46 <_dtoa_r+0x716>
 801dbcc:	3fe00000 	.word	0x3fe00000
 801dbd0:	40240000 	.word	0x40240000
 801dbd4:	9b03      	ldr	r3, [sp, #12]
 801dbd6:	1e5c      	subs	r4, r3, #1
 801dbd8:	9b08      	ldr	r3, [sp, #32]
 801dbda:	42a3      	cmp	r3, r4
 801dbdc:	db09      	blt.n	801dbf2 <_dtoa_r+0x8c2>
 801dbde:	1b1c      	subs	r4, r3, r4
 801dbe0:	9b03      	ldr	r3, [sp, #12]
 801dbe2:	2b00      	cmp	r3, #0
 801dbe4:	f6bf af30 	bge.w	801da48 <_dtoa_r+0x718>
 801dbe8:	9b00      	ldr	r3, [sp, #0]
 801dbea:	9a03      	ldr	r2, [sp, #12]
 801dbec:	1a9e      	subs	r6, r3, r2
 801dbee:	2300      	movs	r3, #0
 801dbf0:	e72b      	b.n	801da4a <_dtoa_r+0x71a>
 801dbf2:	9b08      	ldr	r3, [sp, #32]
 801dbf4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801dbf6:	9408      	str	r4, [sp, #32]
 801dbf8:	1ae3      	subs	r3, r4, r3
 801dbfa:	441a      	add	r2, r3
 801dbfc:	9e00      	ldr	r6, [sp, #0]
 801dbfe:	9b03      	ldr	r3, [sp, #12]
 801dc00:	920d      	str	r2, [sp, #52]	@ 0x34
 801dc02:	2400      	movs	r4, #0
 801dc04:	e721      	b.n	801da4a <_dtoa_r+0x71a>
 801dc06:	9c08      	ldr	r4, [sp, #32]
 801dc08:	9e00      	ldr	r6, [sp, #0]
 801dc0a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801dc0c:	e728      	b.n	801da60 <_dtoa_r+0x730>
 801dc0e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801dc12:	e751      	b.n	801dab8 <_dtoa_r+0x788>
 801dc14:	9a08      	ldr	r2, [sp, #32]
 801dc16:	9902      	ldr	r1, [sp, #8]
 801dc18:	e750      	b.n	801dabc <_dtoa_r+0x78c>
 801dc1a:	f8cd 8008 	str.w	r8, [sp, #8]
 801dc1e:	e751      	b.n	801dac4 <_dtoa_r+0x794>
 801dc20:	2300      	movs	r3, #0
 801dc22:	e779      	b.n	801db18 <_dtoa_r+0x7e8>
 801dc24:	9b04      	ldr	r3, [sp, #16]
 801dc26:	e777      	b.n	801db18 <_dtoa_r+0x7e8>
 801dc28:	2300      	movs	r3, #0
 801dc2a:	9308      	str	r3, [sp, #32]
 801dc2c:	e779      	b.n	801db22 <_dtoa_r+0x7f2>
 801dc2e:	d093      	beq.n	801db58 <_dtoa_r+0x828>
 801dc30:	9a00      	ldr	r2, [sp, #0]
 801dc32:	331c      	adds	r3, #28
 801dc34:	441a      	add	r2, r3
 801dc36:	9200      	str	r2, [sp, #0]
 801dc38:	9a06      	ldr	r2, [sp, #24]
 801dc3a:	441a      	add	r2, r3
 801dc3c:	441e      	add	r6, r3
 801dc3e:	9206      	str	r2, [sp, #24]
 801dc40:	e78a      	b.n	801db58 <_dtoa_r+0x828>
 801dc42:	4603      	mov	r3, r0
 801dc44:	e7f4      	b.n	801dc30 <_dtoa_r+0x900>
 801dc46:	9b03      	ldr	r3, [sp, #12]
 801dc48:	2b00      	cmp	r3, #0
 801dc4a:	46b8      	mov	r8, r7
 801dc4c:	dc20      	bgt.n	801dc90 <_dtoa_r+0x960>
 801dc4e:	469b      	mov	fp, r3
 801dc50:	9b07      	ldr	r3, [sp, #28]
 801dc52:	2b02      	cmp	r3, #2
 801dc54:	dd1e      	ble.n	801dc94 <_dtoa_r+0x964>
 801dc56:	f1bb 0f00 	cmp.w	fp, #0
 801dc5a:	f47f adb1 	bne.w	801d7c0 <_dtoa_r+0x490>
 801dc5e:	4621      	mov	r1, r4
 801dc60:	465b      	mov	r3, fp
 801dc62:	2205      	movs	r2, #5
 801dc64:	4648      	mov	r0, r9
 801dc66:	f000 fa95 	bl	801e194 <__multadd>
 801dc6a:	4601      	mov	r1, r0
 801dc6c:	4604      	mov	r4, r0
 801dc6e:	9802      	ldr	r0, [sp, #8]
 801dc70:	f000 fca0 	bl	801e5b4 <__mcmp>
 801dc74:	2800      	cmp	r0, #0
 801dc76:	f77f ada3 	ble.w	801d7c0 <_dtoa_r+0x490>
 801dc7a:	4656      	mov	r6, sl
 801dc7c:	2331      	movs	r3, #49	@ 0x31
 801dc7e:	f806 3b01 	strb.w	r3, [r6], #1
 801dc82:	f108 0801 	add.w	r8, r8, #1
 801dc86:	e59f      	b.n	801d7c8 <_dtoa_r+0x498>
 801dc88:	9c03      	ldr	r4, [sp, #12]
 801dc8a:	46b8      	mov	r8, r7
 801dc8c:	4625      	mov	r5, r4
 801dc8e:	e7f4      	b.n	801dc7a <_dtoa_r+0x94a>
 801dc90:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801dc94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dc96:	2b00      	cmp	r3, #0
 801dc98:	f000 8101 	beq.w	801de9e <_dtoa_r+0xb6e>
 801dc9c:	2e00      	cmp	r6, #0
 801dc9e:	dd05      	ble.n	801dcac <_dtoa_r+0x97c>
 801dca0:	4629      	mov	r1, r5
 801dca2:	4632      	mov	r2, r6
 801dca4:	4648      	mov	r0, r9
 801dca6:	f000 fc19 	bl	801e4dc <__lshift>
 801dcaa:	4605      	mov	r5, r0
 801dcac:	9b08      	ldr	r3, [sp, #32]
 801dcae:	2b00      	cmp	r3, #0
 801dcb0:	d05c      	beq.n	801dd6c <_dtoa_r+0xa3c>
 801dcb2:	6869      	ldr	r1, [r5, #4]
 801dcb4:	4648      	mov	r0, r9
 801dcb6:	f000 fa0b 	bl	801e0d0 <_Balloc>
 801dcba:	4606      	mov	r6, r0
 801dcbc:	b928      	cbnz	r0, 801dcca <_dtoa_r+0x99a>
 801dcbe:	4b82      	ldr	r3, [pc, #520]	@ (801dec8 <_dtoa_r+0xb98>)
 801dcc0:	4602      	mov	r2, r0
 801dcc2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801dcc6:	f7ff bb4a 	b.w	801d35e <_dtoa_r+0x2e>
 801dcca:	692a      	ldr	r2, [r5, #16]
 801dccc:	3202      	adds	r2, #2
 801dcce:	0092      	lsls	r2, r2, #2
 801dcd0:	f105 010c 	add.w	r1, r5, #12
 801dcd4:	300c      	adds	r0, #12
 801dcd6:	f7ff fa92 	bl	801d1fe <memcpy>
 801dcda:	2201      	movs	r2, #1
 801dcdc:	4631      	mov	r1, r6
 801dcde:	4648      	mov	r0, r9
 801dce0:	f000 fbfc 	bl	801e4dc <__lshift>
 801dce4:	f10a 0301 	add.w	r3, sl, #1
 801dce8:	9300      	str	r3, [sp, #0]
 801dcea:	eb0a 030b 	add.w	r3, sl, fp
 801dcee:	9308      	str	r3, [sp, #32]
 801dcf0:	9b04      	ldr	r3, [sp, #16]
 801dcf2:	f003 0301 	and.w	r3, r3, #1
 801dcf6:	462f      	mov	r7, r5
 801dcf8:	9306      	str	r3, [sp, #24]
 801dcfa:	4605      	mov	r5, r0
 801dcfc:	9b00      	ldr	r3, [sp, #0]
 801dcfe:	9802      	ldr	r0, [sp, #8]
 801dd00:	4621      	mov	r1, r4
 801dd02:	f103 3bff 	add.w	fp, r3, #4294967295
 801dd06:	f7ff fa88 	bl	801d21a <quorem>
 801dd0a:	4603      	mov	r3, r0
 801dd0c:	3330      	adds	r3, #48	@ 0x30
 801dd0e:	9003      	str	r0, [sp, #12]
 801dd10:	4639      	mov	r1, r7
 801dd12:	9802      	ldr	r0, [sp, #8]
 801dd14:	9309      	str	r3, [sp, #36]	@ 0x24
 801dd16:	f000 fc4d 	bl	801e5b4 <__mcmp>
 801dd1a:	462a      	mov	r2, r5
 801dd1c:	9004      	str	r0, [sp, #16]
 801dd1e:	4621      	mov	r1, r4
 801dd20:	4648      	mov	r0, r9
 801dd22:	f000 fc63 	bl	801e5ec <__mdiff>
 801dd26:	68c2      	ldr	r2, [r0, #12]
 801dd28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dd2a:	4606      	mov	r6, r0
 801dd2c:	bb02      	cbnz	r2, 801dd70 <_dtoa_r+0xa40>
 801dd2e:	4601      	mov	r1, r0
 801dd30:	9802      	ldr	r0, [sp, #8]
 801dd32:	f000 fc3f 	bl	801e5b4 <__mcmp>
 801dd36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dd38:	4602      	mov	r2, r0
 801dd3a:	4631      	mov	r1, r6
 801dd3c:	4648      	mov	r0, r9
 801dd3e:	920c      	str	r2, [sp, #48]	@ 0x30
 801dd40:	9309      	str	r3, [sp, #36]	@ 0x24
 801dd42:	f000 fa05 	bl	801e150 <_Bfree>
 801dd46:	9b07      	ldr	r3, [sp, #28]
 801dd48:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801dd4a:	9e00      	ldr	r6, [sp, #0]
 801dd4c:	ea42 0103 	orr.w	r1, r2, r3
 801dd50:	9b06      	ldr	r3, [sp, #24]
 801dd52:	4319      	orrs	r1, r3
 801dd54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dd56:	d10d      	bne.n	801dd74 <_dtoa_r+0xa44>
 801dd58:	2b39      	cmp	r3, #57	@ 0x39
 801dd5a:	d027      	beq.n	801ddac <_dtoa_r+0xa7c>
 801dd5c:	9a04      	ldr	r2, [sp, #16]
 801dd5e:	2a00      	cmp	r2, #0
 801dd60:	dd01      	ble.n	801dd66 <_dtoa_r+0xa36>
 801dd62:	9b03      	ldr	r3, [sp, #12]
 801dd64:	3331      	adds	r3, #49	@ 0x31
 801dd66:	f88b 3000 	strb.w	r3, [fp]
 801dd6a:	e52e      	b.n	801d7ca <_dtoa_r+0x49a>
 801dd6c:	4628      	mov	r0, r5
 801dd6e:	e7b9      	b.n	801dce4 <_dtoa_r+0x9b4>
 801dd70:	2201      	movs	r2, #1
 801dd72:	e7e2      	b.n	801dd3a <_dtoa_r+0xa0a>
 801dd74:	9904      	ldr	r1, [sp, #16]
 801dd76:	2900      	cmp	r1, #0
 801dd78:	db04      	blt.n	801dd84 <_dtoa_r+0xa54>
 801dd7a:	9807      	ldr	r0, [sp, #28]
 801dd7c:	4301      	orrs	r1, r0
 801dd7e:	9806      	ldr	r0, [sp, #24]
 801dd80:	4301      	orrs	r1, r0
 801dd82:	d120      	bne.n	801ddc6 <_dtoa_r+0xa96>
 801dd84:	2a00      	cmp	r2, #0
 801dd86:	ddee      	ble.n	801dd66 <_dtoa_r+0xa36>
 801dd88:	9902      	ldr	r1, [sp, #8]
 801dd8a:	9300      	str	r3, [sp, #0]
 801dd8c:	2201      	movs	r2, #1
 801dd8e:	4648      	mov	r0, r9
 801dd90:	f000 fba4 	bl	801e4dc <__lshift>
 801dd94:	4621      	mov	r1, r4
 801dd96:	9002      	str	r0, [sp, #8]
 801dd98:	f000 fc0c 	bl	801e5b4 <__mcmp>
 801dd9c:	2800      	cmp	r0, #0
 801dd9e:	9b00      	ldr	r3, [sp, #0]
 801dda0:	dc02      	bgt.n	801dda8 <_dtoa_r+0xa78>
 801dda2:	d1e0      	bne.n	801dd66 <_dtoa_r+0xa36>
 801dda4:	07da      	lsls	r2, r3, #31
 801dda6:	d5de      	bpl.n	801dd66 <_dtoa_r+0xa36>
 801dda8:	2b39      	cmp	r3, #57	@ 0x39
 801ddaa:	d1da      	bne.n	801dd62 <_dtoa_r+0xa32>
 801ddac:	2339      	movs	r3, #57	@ 0x39
 801ddae:	f88b 3000 	strb.w	r3, [fp]
 801ddb2:	4633      	mov	r3, r6
 801ddb4:	461e      	mov	r6, r3
 801ddb6:	3b01      	subs	r3, #1
 801ddb8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801ddbc:	2a39      	cmp	r2, #57	@ 0x39
 801ddbe:	d04e      	beq.n	801de5e <_dtoa_r+0xb2e>
 801ddc0:	3201      	adds	r2, #1
 801ddc2:	701a      	strb	r2, [r3, #0]
 801ddc4:	e501      	b.n	801d7ca <_dtoa_r+0x49a>
 801ddc6:	2a00      	cmp	r2, #0
 801ddc8:	dd03      	ble.n	801ddd2 <_dtoa_r+0xaa2>
 801ddca:	2b39      	cmp	r3, #57	@ 0x39
 801ddcc:	d0ee      	beq.n	801ddac <_dtoa_r+0xa7c>
 801ddce:	3301      	adds	r3, #1
 801ddd0:	e7c9      	b.n	801dd66 <_dtoa_r+0xa36>
 801ddd2:	9a00      	ldr	r2, [sp, #0]
 801ddd4:	9908      	ldr	r1, [sp, #32]
 801ddd6:	f802 3c01 	strb.w	r3, [r2, #-1]
 801ddda:	428a      	cmp	r2, r1
 801dddc:	d028      	beq.n	801de30 <_dtoa_r+0xb00>
 801ddde:	9902      	ldr	r1, [sp, #8]
 801dde0:	2300      	movs	r3, #0
 801dde2:	220a      	movs	r2, #10
 801dde4:	4648      	mov	r0, r9
 801dde6:	f000 f9d5 	bl	801e194 <__multadd>
 801ddea:	42af      	cmp	r7, r5
 801ddec:	9002      	str	r0, [sp, #8]
 801ddee:	f04f 0300 	mov.w	r3, #0
 801ddf2:	f04f 020a 	mov.w	r2, #10
 801ddf6:	4639      	mov	r1, r7
 801ddf8:	4648      	mov	r0, r9
 801ddfa:	d107      	bne.n	801de0c <_dtoa_r+0xadc>
 801ddfc:	f000 f9ca 	bl	801e194 <__multadd>
 801de00:	4607      	mov	r7, r0
 801de02:	4605      	mov	r5, r0
 801de04:	9b00      	ldr	r3, [sp, #0]
 801de06:	3301      	adds	r3, #1
 801de08:	9300      	str	r3, [sp, #0]
 801de0a:	e777      	b.n	801dcfc <_dtoa_r+0x9cc>
 801de0c:	f000 f9c2 	bl	801e194 <__multadd>
 801de10:	4629      	mov	r1, r5
 801de12:	4607      	mov	r7, r0
 801de14:	2300      	movs	r3, #0
 801de16:	220a      	movs	r2, #10
 801de18:	4648      	mov	r0, r9
 801de1a:	f000 f9bb 	bl	801e194 <__multadd>
 801de1e:	4605      	mov	r5, r0
 801de20:	e7f0      	b.n	801de04 <_dtoa_r+0xad4>
 801de22:	f1bb 0f00 	cmp.w	fp, #0
 801de26:	bfcc      	ite	gt
 801de28:	465e      	movgt	r6, fp
 801de2a:	2601      	movle	r6, #1
 801de2c:	4456      	add	r6, sl
 801de2e:	2700      	movs	r7, #0
 801de30:	9902      	ldr	r1, [sp, #8]
 801de32:	9300      	str	r3, [sp, #0]
 801de34:	2201      	movs	r2, #1
 801de36:	4648      	mov	r0, r9
 801de38:	f000 fb50 	bl	801e4dc <__lshift>
 801de3c:	4621      	mov	r1, r4
 801de3e:	9002      	str	r0, [sp, #8]
 801de40:	f000 fbb8 	bl	801e5b4 <__mcmp>
 801de44:	2800      	cmp	r0, #0
 801de46:	dcb4      	bgt.n	801ddb2 <_dtoa_r+0xa82>
 801de48:	d102      	bne.n	801de50 <_dtoa_r+0xb20>
 801de4a:	9b00      	ldr	r3, [sp, #0]
 801de4c:	07db      	lsls	r3, r3, #31
 801de4e:	d4b0      	bmi.n	801ddb2 <_dtoa_r+0xa82>
 801de50:	4633      	mov	r3, r6
 801de52:	461e      	mov	r6, r3
 801de54:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801de58:	2a30      	cmp	r2, #48	@ 0x30
 801de5a:	d0fa      	beq.n	801de52 <_dtoa_r+0xb22>
 801de5c:	e4b5      	b.n	801d7ca <_dtoa_r+0x49a>
 801de5e:	459a      	cmp	sl, r3
 801de60:	d1a8      	bne.n	801ddb4 <_dtoa_r+0xa84>
 801de62:	2331      	movs	r3, #49	@ 0x31
 801de64:	f108 0801 	add.w	r8, r8, #1
 801de68:	f88a 3000 	strb.w	r3, [sl]
 801de6c:	e4ad      	b.n	801d7ca <_dtoa_r+0x49a>
 801de6e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801de70:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801decc <_dtoa_r+0xb9c>
 801de74:	b11b      	cbz	r3, 801de7e <_dtoa_r+0xb4e>
 801de76:	f10a 0308 	add.w	r3, sl, #8
 801de7a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801de7c:	6013      	str	r3, [r2, #0]
 801de7e:	4650      	mov	r0, sl
 801de80:	b017      	add	sp, #92	@ 0x5c
 801de82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de86:	9b07      	ldr	r3, [sp, #28]
 801de88:	2b01      	cmp	r3, #1
 801de8a:	f77f ae2e 	ble.w	801daea <_dtoa_r+0x7ba>
 801de8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801de90:	9308      	str	r3, [sp, #32]
 801de92:	2001      	movs	r0, #1
 801de94:	e64d      	b.n	801db32 <_dtoa_r+0x802>
 801de96:	f1bb 0f00 	cmp.w	fp, #0
 801de9a:	f77f aed9 	ble.w	801dc50 <_dtoa_r+0x920>
 801de9e:	4656      	mov	r6, sl
 801dea0:	9802      	ldr	r0, [sp, #8]
 801dea2:	4621      	mov	r1, r4
 801dea4:	f7ff f9b9 	bl	801d21a <quorem>
 801dea8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801deac:	f806 3b01 	strb.w	r3, [r6], #1
 801deb0:	eba6 020a 	sub.w	r2, r6, sl
 801deb4:	4593      	cmp	fp, r2
 801deb6:	ddb4      	ble.n	801de22 <_dtoa_r+0xaf2>
 801deb8:	9902      	ldr	r1, [sp, #8]
 801deba:	2300      	movs	r3, #0
 801debc:	220a      	movs	r2, #10
 801debe:	4648      	mov	r0, r9
 801dec0:	f000 f968 	bl	801e194 <__multadd>
 801dec4:	9002      	str	r0, [sp, #8]
 801dec6:	e7eb      	b.n	801dea0 <_dtoa_r+0xb70>
 801dec8:	08020414 	.word	0x08020414
 801decc:	08020398 	.word	0x08020398

0801ded0 <_free_r>:
 801ded0:	b538      	push	{r3, r4, r5, lr}
 801ded2:	4605      	mov	r5, r0
 801ded4:	2900      	cmp	r1, #0
 801ded6:	d041      	beq.n	801df5c <_free_r+0x8c>
 801ded8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801dedc:	1f0c      	subs	r4, r1, #4
 801dede:	2b00      	cmp	r3, #0
 801dee0:	bfb8      	it	lt
 801dee2:	18e4      	addlt	r4, r4, r3
 801dee4:	f000 f8e8 	bl	801e0b8 <__malloc_lock>
 801dee8:	4a1d      	ldr	r2, [pc, #116]	@ (801df60 <_free_r+0x90>)
 801deea:	6813      	ldr	r3, [r2, #0]
 801deec:	b933      	cbnz	r3, 801defc <_free_r+0x2c>
 801deee:	6063      	str	r3, [r4, #4]
 801def0:	6014      	str	r4, [r2, #0]
 801def2:	4628      	mov	r0, r5
 801def4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801def8:	f000 b8e4 	b.w	801e0c4 <__malloc_unlock>
 801defc:	42a3      	cmp	r3, r4
 801defe:	d908      	bls.n	801df12 <_free_r+0x42>
 801df00:	6820      	ldr	r0, [r4, #0]
 801df02:	1821      	adds	r1, r4, r0
 801df04:	428b      	cmp	r3, r1
 801df06:	bf01      	itttt	eq
 801df08:	6819      	ldreq	r1, [r3, #0]
 801df0a:	685b      	ldreq	r3, [r3, #4]
 801df0c:	1809      	addeq	r1, r1, r0
 801df0e:	6021      	streq	r1, [r4, #0]
 801df10:	e7ed      	b.n	801deee <_free_r+0x1e>
 801df12:	461a      	mov	r2, r3
 801df14:	685b      	ldr	r3, [r3, #4]
 801df16:	b10b      	cbz	r3, 801df1c <_free_r+0x4c>
 801df18:	42a3      	cmp	r3, r4
 801df1a:	d9fa      	bls.n	801df12 <_free_r+0x42>
 801df1c:	6811      	ldr	r1, [r2, #0]
 801df1e:	1850      	adds	r0, r2, r1
 801df20:	42a0      	cmp	r0, r4
 801df22:	d10b      	bne.n	801df3c <_free_r+0x6c>
 801df24:	6820      	ldr	r0, [r4, #0]
 801df26:	4401      	add	r1, r0
 801df28:	1850      	adds	r0, r2, r1
 801df2a:	4283      	cmp	r3, r0
 801df2c:	6011      	str	r1, [r2, #0]
 801df2e:	d1e0      	bne.n	801def2 <_free_r+0x22>
 801df30:	6818      	ldr	r0, [r3, #0]
 801df32:	685b      	ldr	r3, [r3, #4]
 801df34:	6053      	str	r3, [r2, #4]
 801df36:	4408      	add	r0, r1
 801df38:	6010      	str	r0, [r2, #0]
 801df3a:	e7da      	b.n	801def2 <_free_r+0x22>
 801df3c:	d902      	bls.n	801df44 <_free_r+0x74>
 801df3e:	230c      	movs	r3, #12
 801df40:	602b      	str	r3, [r5, #0]
 801df42:	e7d6      	b.n	801def2 <_free_r+0x22>
 801df44:	6820      	ldr	r0, [r4, #0]
 801df46:	1821      	adds	r1, r4, r0
 801df48:	428b      	cmp	r3, r1
 801df4a:	bf04      	itt	eq
 801df4c:	6819      	ldreq	r1, [r3, #0]
 801df4e:	685b      	ldreq	r3, [r3, #4]
 801df50:	6063      	str	r3, [r4, #4]
 801df52:	bf04      	itt	eq
 801df54:	1809      	addeq	r1, r1, r0
 801df56:	6021      	streq	r1, [r4, #0]
 801df58:	6054      	str	r4, [r2, #4]
 801df5a:	e7ca      	b.n	801def2 <_free_r+0x22>
 801df5c:	bd38      	pop	{r3, r4, r5, pc}
 801df5e:	bf00      	nop
 801df60:	20001908 	.word	0x20001908

0801df64 <malloc>:
 801df64:	4b02      	ldr	r3, [pc, #8]	@ (801df70 <malloc+0xc>)
 801df66:	4601      	mov	r1, r0
 801df68:	6818      	ldr	r0, [r3, #0]
 801df6a:	f000 b825 	b.w	801dfb8 <_malloc_r>
 801df6e:	bf00      	nop
 801df70:	2000002c 	.word	0x2000002c

0801df74 <sbrk_aligned>:
 801df74:	b570      	push	{r4, r5, r6, lr}
 801df76:	4e0f      	ldr	r6, [pc, #60]	@ (801dfb4 <sbrk_aligned+0x40>)
 801df78:	460c      	mov	r4, r1
 801df7a:	6831      	ldr	r1, [r6, #0]
 801df7c:	4605      	mov	r5, r0
 801df7e:	b911      	cbnz	r1, 801df86 <sbrk_aligned+0x12>
 801df80:	f000 fe1a 	bl	801ebb8 <_sbrk_r>
 801df84:	6030      	str	r0, [r6, #0]
 801df86:	4621      	mov	r1, r4
 801df88:	4628      	mov	r0, r5
 801df8a:	f000 fe15 	bl	801ebb8 <_sbrk_r>
 801df8e:	1c43      	adds	r3, r0, #1
 801df90:	d103      	bne.n	801df9a <sbrk_aligned+0x26>
 801df92:	f04f 34ff 	mov.w	r4, #4294967295
 801df96:	4620      	mov	r0, r4
 801df98:	bd70      	pop	{r4, r5, r6, pc}
 801df9a:	1cc4      	adds	r4, r0, #3
 801df9c:	f024 0403 	bic.w	r4, r4, #3
 801dfa0:	42a0      	cmp	r0, r4
 801dfa2:	d0f8      	beq.n	801df96 <sbrk_aligned+0x22>
 801dfa4:	1a21      	subs	r1, r4, r0
 801dfa6:	4628      	mov	r0, r5
 801dfa8:	f000 fe06 	bl	801ebb8 <_sbrk_r>
 801dfac:	3001      	adds	r0, #1
 801dfae:	d1f2      	bne.n	801df96 <sbrk_aligned+0x22>
 801dfb0:	e7ef      	b.n	801df92 <sbrk_aligned+0x1e>
 801dfb2:	bf00      	nop
 801dfb4:	20001904 	.word	0x20001904

0801dfb8 <_malloc_r>:
 801dfb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dfbc:	1ccd      	adds	r5, r1, #3
 801dfbe:	f025 0503 	bic.w	r5, r5, #3
 801dfc2:	3508      	adds	r5, #8
 801dfc4:	2d0c      	cmp	r5, #12
 801dfc6:	bf38      	it	cc
 801dfc8:	250c      	movcc	r5, #12
 801dfca:	2d00      	cmp	r5, #0
 801dfcc:	4606      	mov	r6, r0
 801dfce:	db01      	blt.n	801dfd4 <_malloc_r+0x1c>
 801dfd0:	42a9      	cmp	r1, r5
 801dfd2:	d904      	bls.n	801dfde <_malloc_r+0x26>
 801dfd4:	230c      	movs	r3, #12
 801dfd6:	6033      	str	r3, [r6, #0]
 801dfd8:	2000      	movs	r0, #0
 801dfda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dfde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801e0b4 <_malloc_r+0xfc>
 801dfe2:	f000 f869 	bl	801e0b8 <__malloc_lock>
 801dfe6:	f8d8 3000 	ldr.w	r3, [r8]
 801dfea:	461c      	mov	r4, r3
 801dfec:	bb44      	cbnz	r4, 801e040 <_malloc_r+0x88>
 801dfee:	4629      	mov	r1, r5
 801dff0:	4630      	mov	r0, r6
 801dff2:	f7ff ffbf 	bl	801df74 <sbrk_aligned>
 801dff6:	1c43      	adds	r3, r0, #1
 801dff8:	4604      	mov	r4, r0
 801dffa:	d158      	bne.n	801e0ae <_malloc_r+0xf6>
 801dffc:	f8d8 4000 	ldr.w	r4, [r8]
 801e000:	4627      	mov	r7, r4
 801e002:	2f00      	cmp	r7, #0
 801e004:	d143      	bne.n	801e08e <_malloc_r+0xd6>
 801e006:	2c00      	cmp	r4, #0
 801e008:	d04b      	beq.n	801e0a2 <_malloc_r+0xea>
 801e00a:	6823      	ldr	r3, [r4, #0]
 801e00c:	4639      	mov	r1, r7
 801e00e:	4630      	mov	r0, r6
 801e010:	eb04 0903 	add.w	r9, r4, r3
 801e014:	f000 fdd0 	bl	801ebb8 <_sbrk_r>
 801e018:	4581      	cmp	r9, r0
 801e01a:	d142      	bne.n	801e0a2 <_malloc_r+0xea>
 801e01c:	6821      	ldr	r1, [r4, #0]
 801e01e:	1a6d      	subs	r5, r5, r1
 801e020:	4629      	mov	r1, r5
 801e022:	4630      	mov	r0, r6
 801e024:	f7ff ffa6 	bl	801df74 <sbrk_aligned>
 801e028:	3001      	adds	r0, #1
 801e02a:	d03a      	beq.n	801e0a2 <_malloc_r+0xea>
 801e02c:	6823      	ldr	r3, [r4, #0]
 801e02e:	442b      	add	r3, r5
 801e030:	6023      	str	r3, [r4, #0]
 801e032:	f8d8 3000 	ldr.w	r3, [r8]
 801e036:	685a      	ldr	r2, [r3, #4]
 801e038:	bb62      	cbnz	r2, 801e094 <_malloc_r+0xdc>
 801e03a:	f8c8 7000 	str.w	r7, [r8]
 801e03e:	e00f      	b.n	801e060 <_malloc_r+0xa8>
 801e040:	6822      	ldr	r2, [r4, #0]
 801e042:	1b52      	subs	r2, r2, r5
 801e044:	d420      	bmi.n	801e088 <_malloc_r+0xd0>
 801e046:	2a0b      	cmp	r2, #11
 801e048:	d917      	bls.n	801e07a <_malloc_r+0xc2>
 801e04a:	1961      	adds	r1, r4, r5
 801e04c:	42a3      	cmp	r3, r4
 801e04e:	6025      	str	r5, [r4, #0]
 801e050:	bf18      	it	ne
 801e052:	6059      	strne	r1, [r3, #4]
 801e054:	6863      	ldr	r3, [r4, #4]
 801e056:	bf08      	it	eq
 801e058:	f8c8 1000 	streq.w	r1, [r8]
 801e05c:	5162      	str	r2, [r4, r5]
 801e05e:	604b      	str	r3, [r1, #4]
 801e060:	4630      	mov	r0, r6
 801e062:	f000 f82f 	bl	801e0c4 <__malloc_unlock>
 801e066:	f104 000b 	add.w	r0, r4, #11
 801e06a:	1d23      	adds	r3, r4, #4
 801e06c:	f020 0007 	bic.w	r0, r0, #7
 801e070:	1ac2      	subs	r2, r0, r3
 801e072:	bf1c      	itt	ne
 801e074:	1a1b      	subne	r3, r3, r0
 801e076:	50a3      	strne	r3, [r4, r2]
 801e078:	e7af      	b.n	801dfda <_malloc_r+0x22>
 801e07a:	6862      	ldr	r2, [r4, #4]
 801e07c:	42a3      	cmp	r3, r4
 801e07e:	bf0c      	ite	eq
 801e080:	f8c8 2000 	streq.w	r2, [r8]
 801e084:	605a      	strne	r2, [r3, #4]
 801e086:	e7eb      	b.n	801e060 <_malloc_r+0xa8>
 801e088:	4623      	mov	r3, r4
 801e08a:	6864      	ldr	r4, [r4, #4]
 801e08c:	e7ae      	b.n	801dfec <_malloc_r+0x34>
 801e08e:	463c      	mov	r4, r7
 801e090:	687f      	ldr	r7, [r7, #4]
 801e092:	e7b6      	b.n	801e002 <_malloc_r+0x4a>
 801e094:	461a      	mov	r2, r3
 801e096:	685b      	ldr	r3, [r3, #4]
 801e098:	42a3      	cmp	r3, r4
 801e09a:	d1fb      	bne.n	801e094 <_malloc_r+0xdc>
 801e09c:	2300      	movs	r3, #0
 801e09e:	6053      	str	r3, [r2, #4]
 801e0a0:	e7de      	b.n	801e060 <_malloc_r+0xa8>
 801e0a2:	230c      	movs	r3, #12
 801e0a4:	6033      	str	r3, [r6, #0]
 801e0a6:	4630      	mov	r0, r6
 801e0a8:	f000 f80c 	bl	801e0c4 <__malloc_unlock>
 801e0ac:	e794      	b.n	801dfd8 <_malloc_r+0x20>
 801e0ae:	6005      	str	r5, [r0, #0]
 801e0b0:	e7d6      	b.n	801e060 <_malloc_r+0xa8>
 801e0b2:	bf00      	nop
 801e0b4:	20001908 	.word	0x20001908

0801e0b8 <__malloc_lock>:
 801e0b8:	4801      	ldr	r0, [pc, #4]	@ (801e0c0 <__malloc_lock+0x8>)
 801e0ba:	f7ff b89e 	b.w	801d1fa <__retarget_lock_acquire_recursive>
 801e0be:	bf00      	nop
 801e0c0:	20001900 	.word	0x20001900

0801e0c4 <__malloc_unlock>:
 801e0c4:	4801      	ldr	r0, [pc, #4]	@ (801e0cc <__malloc_unlock+0x8>)
 801e0c6:	f7ff b899 	b.w	801d1fc <__retarget_lock_release_recursive>
 801e0ca:	bf00      	nop
 801e0cc:	20001900 	.word	0x20001900

0801e0d0 <_Balloc>:
 801e0d0:	b570      	push	{r4, r5, r6, lr}
 801e0d2:	69c6      	ldr	r6, [r0, #28]
 801e0d4:	4604      	mov	r4, r0
 801e0d6:	460d      	mov	r5, r1
 801e0d8:	b976      	cbnz	r6, 801e0f8 <_Balloc+0x28>
 801e0da:	2010      	movs	r0, #16
 801e0dc:	f7ff ff42 	bl	801df64 <malloc>
 801e0e0:	4602      	mov	r2, r0
 801e0e2:	61e0      	str	r0, [r4, #28]
 801e0e4:	b920      	cbnz	r0, 801e0f0 <_Balloc+0x20>
 801e0e6:	4b18      	ldr	r3, [pc, #96]	@ (801e148 <_Balloc+0x78>)
 801e0e8:	4818      	ldr	r0, [pc, #96]	@ (801e14c <_Balloc+0x7c>)
 801e0ea:	216b      	movs	r1, #107	@ 0x6b
 801e0ec:	f000 fd74 	bl	801ebd8 <__assert_func>
 801e0f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e0f4:	6006      	str	r6, [r0, #0]
 801e0f6:	60c6      	str	r6, [r0, #12]
 801e0f8:	69e6      	ldr	r6, [r4, #28]
 801e0fa:	68f3      	ldr	r3, [r6, #12]
 801e0fc:	b183      	cbz	r3, 801e120 <_Balloc+0x50>
 801e0fe:	69e3      	ldr	r3, [r4, #28]
 801e100:	68db      	ldr	r3, [r3, #12]
 801e102:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801e106:	b9b8      	cbnz	r0, 801e138 <_Balloc+0x68>
 801e108:	2101      	movs	r1, #1
 801e10a:	fa01 f605 	lsl.w	r6, r1, r5
 801e10e:	1d72      	adds	r2, r6, #5
 801e110:	0092      	lsls	r2, r2, #2
 801e112:	4620      	mov	r0, r4
 801e114:	f000 fd7e 	bl	801ec14 <_calloc_r>
 801e118:	b160      	cbz	r0, 801e134 <_Balloc+0x64>
 801e11a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801e11e:	e00e      	b.n	801e13e <_Balloc+0x6e>
 801e120:	2221      	movs	r2, #33	@ 0x21
 801e122:	2104      	movs	r1, #4
 801e124:	4620      	mov	r0, r4
 801e126:	f000 fd75 	bl	801ec14 <_calloc_r>
 801e12a:	69e3      	ldr	r3, [r4, #28]
 801e12c:	60f0      	str	r0, [r6, #12]
 801e12e:	68db      	ldr	r3, [r3, #12]
 801e130:	2b00      	cmp	r3, #0
 801e132:	d1e4      	bne.n	801e0fe <_Balloc+0x2e>
 801e134:	2000      	movs	r0, #0
 801e136:	bd70      	pop	{r4, r5, r6, pc}
 801e138:	6802      	ldr	r2, [r0, #0]
 801e13a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801e13e:	2300      	movs	r3, #0
 801e140:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801e144:	e7f7      	b.n	801e136 <_Balloc+0x66>
 801e146:	bf00      	nop
 801e148:	080203a5 	.word	0x080203a5
 801e14c:	08020425 	.word	0x08020425

0801e150 <_Bfree>:
 801e150:	b570      	push	{r4, r5, r6, lr}
 801e152:	69c6      	ldr	r6, [r0, #28]
 801e154:	4605      	mov	r5, r0
 801e156:	460c      	mov	r4, r1
 801e158:	b976      	cbnz	r6, 801e178 <_Bfree+0x28>
 801e15a:	2010      	movs	r0, #16
 801e15c:	f7ff ff02 	bl	801df64 <malloc>
 801e160:	4602      	mov	r2, r0
 801e162:	61e8      	str	r0, [r5, #28]
 801e164:	b920      	cbnz	r0, 801e170 <_Bfree+0x20>
 801e166:	4b09      	ldr	r3, [pc, #36]	@ (801e18c <_Bfree+0x3c>)
 801e168:	4809      	ldr	r0, [pc, #36]	@ (801e190 <_Bfree+0x40>)
 801e16a:	218f      	movs	r1, #143	@ 0x8f
 801e16c:	f000 fd34 	bl	801ebd8 <__assert_func>
 801e170:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e174:	6006      	str	r6, [r0, #0]
 801e176:	60c6      	str	r6, [r0, #12]
 801e178:	b13c      	cbz	r4, 801e18a <_Bfree+0x3a>
 801e17a:	69eb      	ldr	r3, [r5, #28]
 801e17c:	6862      	ldr	r2, [r4, #4]
 801e17e:	68db      	ldr	r3, [r3, #12]
 801e180:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e184:	6021      	str	r1, [r4, #0]
 801e186:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801e18a:	bd70      	pop	{r4, r5, r6, pc}
 801e18c:	080203a5 	.word	0x080203a5
 801e190:	08020425 	.word	0x08020425

0801e194 <__multadd>:
 801e194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e198:	690d      	ldr	r5, [r1, #16]
 801e19a:	4607      	mov	r7, r0
 801e19c:	460c      	mov	r4, r1
 801e19e:	461e      	mov	r6, r3
 801e1a0:	f101 0c14 	add.w	ip, r1, #20
 801e1a4:	2000      	movs	r0, #0
 801e1a6:	f8dc 3000 	ldr.w	r3, [ip]
 801e1aa:	b299      	uxth	r1, r3
 801e1ac:	fb02 6101 	mla	r1, r2, r1, r6
 801e1b0:	0c1e      	lsrs	r6, r3, #16
 801e1b2:	0c0b      	lsrs	r3, r1, #16
 801e1b4:	fb02 3306 	mla	r3, r2, r6, r3
 801e1b8:	b289      	uxth	r1, r1
 801e1ba:	3001      	adds	r0, #1
 801e1bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801e1c0:	4285      	cmp	r5, r0
 801e1c2:	f84c 1b04 	str.w	r1, [ip], #4
 801e1c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801e1ca:	dcec      	bgt.n	801e1a6 <__multadd+0x12>
 801e1cc:	b30e      	cbz	r6, 801e212 <__multadd+0x7e>
 801e1ce:	68a3      	ldr	r3, [r4, #8]
 801e1d0:	42ab      	cmp	r3, r5
 801e1d2:	dc19      	bgt.n	801e208 <__multadd+0x74>
 801e1d4:	6861      	ldr	r1, [r4, #4]
 801e1d6:	4638      	mov	r0, r7
 801e1d8:	3101      	adds	r1, #1
 801e1da:	f7ff ff79 	bl	801e0d0 <_Balloc>
 801e1de:	4680      	mov	r8, r0
 801e1e0:	b928      	cbnz	r0, 801e1ee <__multadd+0x5a>
 801e1e2:	4602      	mov	r2, r0
 801e1e4:	4b0c      	ldr	r3, [pc, #48]	@ (801e218 <__multadd+0x84>)
 801e1e6:	480d      	ldr	r0, [pc, #52]	@ (801e21c <__multadd+0x88>)
 801e1e8:	21ba      	movs	r1, #186	@ 0xba
 801e1ea:	f000 fcf5 	bl	801ebd8 <__assert_func>
 801e1ee:	6922      	ldr	r2, [r4, #16]
 801e1f0:	3202      	adds	r2, #2
 801e1f2:	f104 010c 	add.w	r1, r4, #12
 801e1f6:	0092      	lsls	r2, r2, #2
 801e1f8:	300c      	adds	r0, #12
 801e1fa:	f7ff f800 	bl	801d1fe <memcpy>
 801e1fe:	4621      	mov	r1, r4
 801e200:	4638      	mov	r0, r7
 801e202:	f7ff ffa5 	bl	801e150 <_Bfree>
 801e206:	4644      	mov	r4, r8
 801e208:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801e20c:	3501      	adds	r5, #1
 801e20e:	615e      	str	r6, [r3, #20]
 801e210:	6125      	str	r5, [r4, #16]
 801e212:	4620      	mov	r0, r4
 801e214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e218:	08020414 	.word	0x08020414
 801e21c:	08020425 	.word	0x08020425

0801e220 <__hi0bits>:
 801e220:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801e224:	4603      	mov	r3, r0
 801e226:	bf36      	itet	cc
 801e228:	0403      	lslcc	r3, r0, #16
 801e22a:	2000      	movcs	r0, #0
 801e22c:	2010      	movcc	r0, #16
 801e22e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801e232:	bf3c      	itt	cc
 801e234:	021b      	lslcc	r3, r3, #8
 801e236:	3008      	addcc	r0, #8
 801e238:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e23c:	bf3c      	itt	cc
 801e23e:	011b      	lslcc	r3, r3, #4
 801e240:	3004      	addcc	r0, #4
 801e242:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e246:	bf3c      	itt	cc
 801e248:	009b      	lslcc	r3, r3, #2
 801e24a:	3002      	addcc	r0, #2
 801e24c:	2b00      	cmp	r3, #0
 801e24e:	db05      	blt.n	801e25c <__hi0bits+0x3c>
 801e250:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801e254:	f100 0001 	add.w	r0, r0, #1
 801e258:	bf08      	it	eq
 801e25a:	2020      	moveq	r0, #32
 801e25c:	4770      	bx	lr

0801e25e <__lo0bits>:
 801e25e:	6803      	ldr	r3, [r0, #0]
 801e260:	4602      	mov	r2, r0
 801e262:	f013 0007 	ands.w	r0, r3, #7
 801e266:	d00b      	beq.n	801e280 <__lo0bits+0x22>
 801e268:	07d9      	lsls	r1, r3, #31
 801e26a:	d421      	bmi.n	801e2b0 <__lo0bits+0x52>
 801e26c:	0798      	lsls	r0, r3, #30
 801e26e:	bf49      	itett	mi
 801e270:	085b      	lsrmi	r3, r3, #1
 801e272:	089b      	lsrpl	r3, r3, #2
 801e274:	2001      	movmi	r0, #1
 801e276:	6013      	strmi	r3, [r2, #0]
 801e278:	bf5c      	itt	pl
 801e27a:	6013      	strpl	r3, [r2, #0]
 801e27c:	2002      	movpl	r0, #2
 801e27e:	4770      	bx	lr
 801e280:	b299      	uxth	r1, r3
 801e282:	b909      	cbnz	r1, 801e288 <__lo0bits+0x2a>
 801e284:	0c1b      	lsrs	r3, r3, #16
 801e286:	2010      	movs	r0, #16
 801e288:	b2d9      	uxtb	r1, r3
 801e28a:	b909      	cbnz	r1, 801e290 <__lo0bits+0x32>
 801e28c:	3008      	adds	r0, #8
 801e28e:	0a1b      	lsrs	r3, r3, #8
 801e290:	0719      	lsls	r1, r3, #28
 801e292:	bf04      	itt	eq
 801e294:	091b      	lsreq	r3, r3, #4
 801e296:	3004      	addeq	r0, #4
 801e298:	0799      	lsls	r1, r3, #30
 801e29a:	bf04      	itt	eq
 801e29c:	089b      	lsreq	r3, r3, #2
 801e29e:	3002      	addeq	r0, #2
 801e2a0:	07d9      	lsls	r1, r3, #31
 801e2a2:	d403      	bmi.n	801e2ac <__lo0bits+0x4e>
 801e2a4:	085b      	lsrs	r3, r3, #1
 801e2a6:	f100 0001 	add.w	r0, r0, #1
 801e2aa:	d003      	beq.n	801e2b4 <__lo0bits+0x56>
 801e2ac:	6013      	str	r3, [r2, #0]
 801e2ae:	4770      	bx	lr
 801e2b0:	2000      	movs	r0, #0
 801e2b2:	4770      	bx	lr
 801e2b4:	2020      	movs	r0, #32
 801e2b6:	4770      	bx	lr

0801e2b8 <__i2b>:
 801e2b8:	b510      	push	{r4, lr}
 801e2ba:	460c      	mov	r4, r1
 801e2bc:	2101      	movs	r1, #1
 801e2be:	f7ff ff07 	bl	801e0d0 <_Balloc>
 801e2c2:	4602      	mov	r2, r0
 801e2c4:	b928      	cbnz	r0, 801e2d2 <__i2b+0x1a>
 801e2c6:	4b05      	ldr	r3, [pc, #20]	@ (801e2dc <__i2b+0x24>)
 801e2c8:	4805      	ldr	r0, [pc, #20]	@ (801e2e0 <__i2b+0x28>)
 801e2ca:	f240 1145 	movw	r1, #325	@ 0x145
 801e2ce:	f000 fc83 	bl	801ebd8 <__assert_func>
 801e2d2:	2301      	movs	r3, #1
 801e2d4:	6144      	str	r4, [r0, #20]
 801e2d6:	6103      	str	r3, [r0, #16]
 801e2d8:	bd10      	pop	{r4, pc}
 801e2da:	bf00      	nop
 801e2dc:	08020414 	.word	0x08020414
 801e2e0:	08020425 	.word	0x08020425

0801e2e4 <__multiply>:
 801e2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2e8:	4617      	mov	r7, r2
 801e2ea:	690a      	ldr	r2, [r1, #16]
 801e2ec:	693b      	ldr	r3, [r7, #16]
 801e2ee:	429a      	cmp	r2, r3
 801e2f0:	bfa8      	it	ge
 801e2f2:	463b      	movge	r3, r7
 801e2f4:	4689      	mov	r9, r1
 801e2f6:	bfa4      	itt	ge
 801e2f8:	460f      	movge	r7, r1
 801e2fa:	4699      	movge	r9, r3
 801e2fc:	693d      	ldr	r5, [r7, #16]
 801e2fe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801e302:	68bb      	ldr	r3, [r7, #8]
 801e304:	6879      	ldr	r1, [r7, #4]
 801e306:	eb05 060a 	add.w	r6, r5, sl
 801e30a:	42b3      	cmp	r3, r6
 801e30c:	b085      	sub	sp, #20
 801e30e:	bfb8      	it	lt
 801e310:	3101      	addlt	r1, #1
 801e312:	f7ff fedd 	bl	801e0d0 <_Balloc>
 801e316:	b930      	cbnz	r0, 801e326 <__multiply+0x42>
 801e318:	4602      	mov	r2, r0
 801e31a:	4b41      	ldr	r3, [pc, #260]	@ (801e420 <__multiply+0x13c>)
 801e31c:	4841      	ldr	r0, [pc, #260]	@ (801e424 <__multiply+0x140>)
 801e31e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801e322:	f000 fc59 	bl	801ebd8 <__assert_func>
 801e326:	f100 0414 	add.w	r4, r0, #20
 801e32a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801e32e:	4623      	mov	r3, r4
 801e330:	2200      	movs	r2, #0
 801e332:	4573      	cmp	r3, lr
 801e334:	d320      	bcc.n	801e378 <__multiply+0x94>
 801e336:	f107 0814 	add.w	r8, r7, #20
 801e33a:	f109 0114 	add.w	r1, r9, #20
 801e33e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801e342:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801e346:	9302      	str	r3, [sp, #8]
 801e348:	1beb      	subs	r3, r5, r7
 801e34a:	3b15      	subs	r3, #21
 801e34c:	f023 0303 	bic.w	r3, r3, #3
 801e350:	3304      	adds	r3, #4
 801e352:	3715      	adds	r7, #21
 801e354:	42bd      	cmp	r5, r7
 801e356:	bf38      	it	cc
 801e358:	2304      	movcc	r3, #4
 801e35a:	9301      	str	r3, [sp, #4]
 801e35c:	9b02      	ldr	r3, [sp, #8]
 801e35e:	9103      	str	r1, [sp, #12]
 801e360:	428b      	cmp	r3, r1
 801e362:	d80c      	bhi.n	801e37e <__multiply+0x9a>
 801e364:	2e00      	cmp	r6, #0
 801e366:	dd03      	ble.n	801e370 <__multiply+0x8c>
 801e368:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801e36c:	2b00      	cmp	r3, #0
 801e36e:	d055      	beq.n	801e41c <__multiply+0x138>
 801e370:	6106      	str	r6, [r0, #16]
 801e372:	b005      	add	sp, #20
 801e374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e378:	f843 2b04 	str.w	r2, [r3], #4
 801e37c:	e7d9      	b.n	801e332 <__multiply+0x4e>
 801e37e:	f8b1 a000 	ldrh.w	sl, [r1]
 801e382:	f1ba 0f00 	cmp.w	sl, #0
 801e386:	d01f      	beq.n	801e3c8 <__multiply+0xe4>
 801e388:	46c4      	mov	ip, r8
 801e38a:	46a1      	mov	r9, r4
 801e38c:	2700      	movs	r7, #0
 801e38e:	f85c 2b04 	ldr.w	r2, [ip], #4
 801e392:	f8d9 3000 	ldr.w	r3, [r9]
 801e396:	fa1f fb82 	uxth.w	fp, r2
 801e39a:	b29b      	uxth	r3, r3
 801e39c:	fb0a 330b 	mla	r3, sl, fp, r3
 801e3a0:	443b      	add	r3, r7
 801e3a2:	f8d9 7000 	ldr.w	r7, [r9]
 801e3a6:	0c12      	lsrs	r2, r2, #16
 801e3a8:	0c3f      	lsrs	r7, r7, #16
 801e3aa:	fb0a 7202 	mla	r2, sl, r2, r7
 801e3ae:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801e3b2:	b29b      	uxth	r3, r3
 801e3b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e3b8:	4565      	cmp	r5, ip
 801e3ba:	f849 3b04 	str.w	r3, [r9], #4
 801e3be:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801e3c2:	d8e4      	bhi.n	801e38e <__multiply+0xaa>
 801e3c4:	9b01      	ldr	r3, [sp, #4]
 801e3c6:	50e7      	str	r7, [r4, r3]
 801e3c8:	9b03      	ldr	r3, [sp, #12]
 801e3ca:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801e3ce:	3104      	adds	r1, #4
 801e3d0:	f1b9 0f00 	cmp.w	r9, #0
 801e3d4:	d020      	beq.n	801e418 <__multiply+0x134>
 801e3d6:	6823      	ldr	r3, [r4, #0]
 801e3d8:	4647      	mov	r7, r8
 801e3da:	46a4      	mov	ip, r4
 801e3dc:	f04f 0a00 	mov.w	sl, #0
 801e3e0:	f8b7 b000 	ldrh.w	fp, [r7]
 801e3e4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801e3e8:	fb09 220b 	mla	r2, r9, fp, r2
 801e3ec:	4452      	add	r2, sl
 801e3ee:	b29b      	uxth	r3, r3
 801e3f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e3f4:	f84c 3b04 	str.w	r3, [ip], #4
 801e3f8:	f857 3b04 	ldr.w	r3, [r7], #4
 801e3fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801e400:	f8bc 3000 	ldrh.w	r3, [ip]
 801e404:	fb09 330a 	mla	r3, r9, sl, r3
 801e408:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801e40c:	42bd      	cmp	r5, r7
 801e40e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801e412:	d8e5      	bhi.n	801e3e0 <__multiply+0xfc>
 801e414:	9a01      	ldr	r2, [sp, #4]
 801e416:	50a3      	str	r3, [r4, r2]
 801e418:	3404      	adds	r4, #4
 801e41a:	e79f      	b.n	801e35c <__multiply+0x78>
 801e41c:	3e01      	subs	r6, #1
 801e41e:	e7a1      	b.n	801e364 <__multiply+0x80>
 801e420:	08020414 	.word	0x08020414
 801e424:	08020425 	.word	0x08020425

0801e428 <__pow5mult>:
 801e428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e42c:	4615      	mov	r5, r2
 801e42e:	f012 0203 	ands.w	r2, r2, #3
 801e432:	4607      	mov	r7, r0
 801e434:	460e      	mov	r6, r1
 801e436:	d007      	beq.n	801e448 <__pow5mult+0x20>
 801e438:	4c25      	ldr	r4, [pc, #148]	@ (801e4d0 <__pow5mult+0xa8>)
 801e43a:	3a01      	subs	r2, #1
 801e43c:	2300      	movs	r3, #0
 801e43e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801e442:	f7ff fea7 	bl	801e194 <__multadd>
 801e446:	4606      	mov	r6, r0
 801e448:	10ad      	asrs	r5, r5, #2
 801e44a:	d03d      	beq.n	801e4c8 <__pow5mult+0xa0>
 801e44c:	69fc      	ldr	r4, [r7, #28]
 801e44e:	b97c      	cbnz	r4, 801e470 <__pow5mult+0x48>
 801e450:	2010      	movs	r0, #16
 801e452:	f7ff fd87 	bl	801df64 <malloc>
 801e456:	4602      	mov	r2, r0
 801e458:	61f8      	str	r0, [r7, #28]
 801e45a:	b928      	cbnz	r0, 801e468 <__pow5mult+0x40>
 801e45c:	4b1d      	ldr	r3, [pc, #116]	@ (801e4d4 <__pow5mult+0xac>)
 801e45e:	481e      	ldr	r0, [pc, #120]	@ (801e4d8 <__pow5mult+0xb0>)
 801e460:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801e464:	f000 fbb8 	bl	801ebd8 <__assert_func>
 801e468:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801e46c:	6004      	str	r4, [r0, #0]
 801e46e:	60c4      	str	r4, [r0, #12]
 801e470:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801e474:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801e478:	b94c      	cbnz	r4, 801e48e <__pow5mult+0x66>
 801e47a:	f240 2171 	movw	r1, #625	@ 0x271
 801e47e:	4638      	mov	r0, r7
 801e480:	f7ff ff1a 	bl	801e2b8 <__i2b>
 801e484:	2300      	movs	r3, #0
 801e486:	f8c8 0008 	str.w	r0, [r8, #8]
 801e48a:	4604      	mov	r4, r0
 801e48c:	6003      	str	r3, [r0, #0]
 801e48e:	f04f 0900 	mov.w	r9, #0
 801e492:	07eb      	lsls	r3, r5, #31
 801e494:	d50a      	bpl.n	801e4ac <__pow5mult+0x84>
 801e496:	4631      	mov	r1, r6
 801e498:	4622      	mov	r2, r4
 801e49a:	4638      	mov	r0, r7
 801e49c:	f7ff ff22 	bl	801e2e4 <__multiply>
 801e4a0:	4631      	mov	r1, r6
 801e4a2:	4680      	mov	r8, r0
 801e4a4:	4638      	mov	r0, r7
 801e4a6:	f7ff fe53 	bl	801e150 <_Bfree>
 801e4aa:	4646      	mov	r6, r8
 801e4ac:	106d      	asrs	r5, r5, #1
 801e4ae:	d00b      	beq.n	801e4c8 <__pow5mult+0xa0>
 801e4b0:	6820      	ldr	r0, [r4, #0]
 801e4b2:	b938      	cbnz	r0, 801e4c4 <__pow5mult+0x9c>
 801e4b4:	4622      	mov	r2, r4
 801e4b6:	4621      	mov	r1, r4
 801e4b8:	4638      	mov	r0, r7
 801e4ba:	f7ff ff13 	bl	801e2e4 <__multiply>
 801e4be:	6020      	str	r0, [r4, #0]
 801e4c0:	f8c0 9000 	str.w	r9, [r0]
 801e4c4:	4604      	mov	r4, r0
 801e4c6:	e7e4      	b.n	801e492 <__pow5mult+0x6a>
 801e4c8:	4630      	mov	r0, r6
 801e4ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e4ce:	bf00      	nop
 801e4d0:	080204d8 	.word	0x080204d8
 801e4d4:	080203a5 	.word	0x080203a5
 801e4d8:	08020425 	.word	0x08020425

0801e4dc <__lshift>:
 801e4dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e4e0:	460c      	mov	r4, r1
 801e4e2:	6849      	ldr	r1, [r1, #4]
 801e4e4:	6923      	ldr	r3, [r4, #16]
 801e4e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801e4ea:	68a3      	ldr	r3, [r4, #8]
 801e4ec:	4607      	mov	r7, r0
 801e4ee:	4691      	mov	r9, r2
 801e4f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801e4f4:	f108 0601 	add.w	r6, r8, #1
 801e4f8:	42b3      	cmp	r3, r6
 801e4fa:	db0b      	blt.n	801e514 <__lshift+0x38>
 801e4fc:	4638      	mov	r0, r7
 801e4fe:	f7ff fde7 	bl	801e0d0 <_Balloc>
 801e502:	4605      	mov	r5, r0
 801e504:	b948      	cbnz	r0, 801e51a <__lshift+0x3e>
 801e506:	4602      	mov	r2, r0
 801e508:	4b28      	ldr	r3, [pc, #160]	@ (801e5ac <__lshift+0xd0>)
 801e50a:	4829      	ldr	r0, [pc, #164]	@ (801e5b0 <__lshift+0xd4>)
 801e50c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801e510:	f000 fb62 	bl	801ebd8 <__assert_func>
 801e514:	3101      	adds	r1, #1
 801e516:	005b      	lsls	r3, r3, #1
 801e518:	e7ee      	b.n	801e4f8 <__lshift+0x1c>
 801e51a:	2300      	movs	r3, #0
 801e51c:	f100 0114 	add.w	r1, r0, #20
 801e520:	f100 0210 	add.w	r2, r0, #16
 801e524:	4618      	mov	r0, r3
 801e526:	4553      	cmp	r3, sl
 801e528:	db33      	blt.n	801e592 <__lshift+0xb6>
 801e52a:	6920      	ldr	r0, [r4, #16]
 801e52c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801e530:	f104 0314 	add.w	r3, r4, #20
 801e534:	f019 091f 	ands.w	r9, r9, #31
 801e538:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801e53c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801e540:	d02b      	beq.n	801e59a <__lshift+0xbe>
 801e542:	f1c9 0e20 	rsb	lr, r9, #32
 801e546:	468a      	mov	sl, r1
 801e548:	2200      	movs	r2, #0
 801e54a:	6818      	ldr	r0, [r3, #0]
 801e54c:	fa00 f009 	lsl.w	r0, r0, r9
 801e550:	4310      	orrs	r0, r2
 801e552:	f84a 0b04 	str.w	r0, [sl], #4
 801e556:	f853 2b04 	ldr.w	r2, [r3], #4
 801e55a:	459c      	cmp	ip, r3
 801e55c:	fa22 f20e 	lsr.w	r2, r2, lr
 801e560:	d8f3      	bhi.n	801e54a <__lshift+0x6e>
 801e562:	ebac 0304 	sub.w	r3, ip, r4
 801e566:	3b15      	subs	r3, #21
 801e568:	f023 0303 	bic.w	r3, r3, #3
 801e56c:	3304      	adds	r3, #4
 801e56e:	f104 0015 	add.w	r0, r4, #21
 801e572:	4560      	cmp	r0, ip
 801e574:	bf88      	it	hi
 801e576:	2304      	movhi	r3, #4
 801e578:	50ca      	str	r2, [r1, r3]
 801e57a:	b10a      	cbz	r2, 801e580 <__lshift+0xa4>
 801e57c:	f108 0602 	add.w	r6, r8, #2
 801e580:	3e01      	subs	r6, #1
 801e582:	4638      	mov	r0, r7
 801e584:	612e      	str	r6, [r5, #16]
 801e586:	4621      	mov	r1, r4
 801e588:	f7ff fde2 	bl	801e150 <_Bfree>
 801e58c:	4628      	mov	r0, r5
 801e58e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e592:	f842 0f04 	str.w	r0, [r2, #4]!
 801e596:	3301      	adds	r3, #1
 801e598:	e7c5      	b.n	801e526 <__lshift+0x4a>
 801e59a:	3904      	subs	r1, #4
 801e59c:	f853 2b04 	ldr.w	r2, [r3], #4
 801e5a0:	f841 2f04 	str.w	r2, [r1, #4]!
 801e5a4:	459c      	cmp	ip, r3
 801e5a6:	d8f9      	bhi.n	801e59c <__lshift+0xc0>
 801e5a8:	e7ea      	b.n	801e580 <__lshift+0xa4>
 801e5aa:	bf00      	nop
 801e5ac:	08020414 	.word	0x08020414
 801e5b0:	08020425 	.word	0x08020425

0801e5b4 <__mcmp>:
 801e5b4:	690a      	ldr	r2, [r1, #16]
 801e5b6:	4603      	mov	r3, r0
 801e5b8:	6900      	ldr	r0, [r0, #16]
 801e5ba:	1a80      	subs	r0, r0, r2
 801e5bc:	b530      	push	{r4, r5, lr}
 801e5be:	d10e      	bne.n	801e5de <__mcmp+0x2a>
 801e5c0:	3314      	adds	r3, #20
 801e5c2:	3114      	adds	r1, #20
 801e5c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801e5c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801e5cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801e5d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801e5d4:	4295      	cmp	r5, r2
 801e5d6:	d003      	beq.n	801e5e0 <__mcmp+0x2c>
 801e5d8:	d205      	bcs.n	801e5e6 <__mcmp+0x32>
 801e5da:	f04f 30ff 	mov.w	r0, #4294967295
 801e5de:	bd30      	pop	{r4, r5, pc}
 801e5e0:	42a3      	cmp	r3, r4
 801e5e2:	d3f3      	bcc.n	801e5cc <__mcmp+0x18>
 801e5e4:	e7fb      	b.n	801e5de <__mcmp+0x2a>
 801e5e6:	2001      	movs	r0, #1
 801e5e8:	e7f9      	b.n	801e5de <__mcmp+0x2a>
	...

0801e5ec <__mdiff>:
 801e5ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5f0:	4689      	mov	r9, r1
 801e5f2:	4606      	mov	r6, r0
 801e5f4:	4611      	mov	r1, r2
 801e5f6:	4648      	mov	r0, r9
 801e5f8:	4614      	mov	r4, r2
 801e5fa:	f7ff ffdb 	bl	801e5b4 <__mcmp>
 801e5fe:	1e05      	subs	r5, r0, #0
 801e600:	d112      	bne.n	801e628 <__mdiff+0x3c>
 801e602:	4629      	mov	r1, r5
 801e604:	4630      	mov	r0, r6
 801e606:	f7ff fd63 	bl	801e0d0 <_Balloc>
 801e60a:	4602      	mov	r2, r0
 801e60c:	b928      	cbnz	r0, 801e61a <__mdiff+0x2e>
 801e60e:	4b3f      	ldr	r3, [pc, #252]	@ (801e70c <__mdiff+0x120>)
 801e610:	f240 2137 	movw	r1, #567	@ 0x237
 801e614:	483e      	ldr	r0, [pc, #248]	@ (801e710 <__mdiff+0x124>)
 801e616:	f000 fadf 	bl	801ebd8 <__assert_func>
 801e61a:	2301      	movs	r3, #1
 801e61c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801e620:	4610      	mov	r0, r2
 801e622:	b003      	add	sp, #12
 801e624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e628:	bfbc      	itt	lt
 801e62a:	464b      	movlt	r3, r9
 801e62c:	46a1      	movlt	r9, r4
 801e62e:	4630      	mov	r0, r6
 801e630:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801e634:	bfba      	itte	lt
 801e636:	461c      	movlt	r4, r3
 801e638:	2501      	movlt	r5, #1
 801e63a:	2500      	movge	r5, #0
 801e63c:	f7ff fd48 	bl	801e0d0 <_Balloc>
 801e640:	4602      	mov	r2, r0
 801e642:	b918      	cbnz	r0, 801e64c <__mdiff+0x60>
 801e644:	4b31      	ldr	r3, [pc, #196]	@ (801e70c <__mdiff+0x120>)
 801e646:	f240 2145 	movw	r1, #581	@ 0x245
 801e64a:	e7e3      	b.n	801e614 <__mdiff+0x28>
 801e64c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801e650:	6926      	ldr	r6, [r4, #16]
 801e652:	60c5      	str	r5, [r0, #12]
 801e654:	f109 0310 	add.w	r3, r9, #16
 801e658:	f109 0514 	add.w	r5, r9, #20
 801e65c:	f104 0e14 	add.w	lr, r4, #20
 801e660:	f100 0b14 	add.w	fp, r0, #20
 801e664:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801e668:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801e66c:	9301      	str	r3, [sp, #4]
 801e66e:	46d9      	mov	r9, fp
 801e670:	f04f 0c00 	mov.w	ip, #0
 801e674:	9b01      	ldr	r3, [sp, #4]
 801e676:	f85e 0b04 	ldr.w	r0, [lr], #4
 801e67a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801e67e:	9301      	str	r3, [sp, #4]
 801e680:	fa1f f38a 	uxth.w	r3, sl
 801e684:	4619      	mov	r1, r3
 801e686:	b283      	uxth	r3, r0
 801e688:	1acb      	subs	r3, r1, r3
 801e68a:	0c00      	lsrs	r0, r0, #16
 801e68c:	4463      	add	r3, ip
 801e68e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801e692:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801e696:	b29b      	uxth	r3, r3
 801e698:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801e69c:	4576      	cmp	r6, lr
 801e69e:	f849 3b04 	str.w	r3, [r9], #4
 801e6a2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801e6a6:	d8e5      	bhi.n	801e674 <__mdiff+0x88>
 801e6a8:	1b33      	subs	r3, r6, r4
 801e6aa:	3b15      	subs	r3, #21
 801e6ac:	f023 0303 	bic.w	r3, r3, #3
 801e6b0:	3415      	adds	r4, #21
 801e6b2:	3304      	adds	r3, #4
 801e6b4:	42a6      	cmp	r6, r4
 801e6b6:	bf38      	it	cc
 801e6b8:	2304      	movcc	r3, #4
 801e6ba:	441d      	add	r5, r3
 801e6bc:	445b      	add	r3, fp
 801e6be:	461e      	mov	r6, r3
 801e6c0:	462c      	mov	r4, r5
 801e6c2:	4544      	cmp	r4, r8
 801e6c4:	d30e      	bcc.n	801e6e4 <__mdiff+0xf8>
 801e6c6:	f108 0103 	add.w	r1, r8, #3
 801e6ca:	1b49      	subs	r1, r1, r5
 801e6cc:	f021 0103 	bic.w	r1, r1, #3
 801e6d0:	3d03      	subs	r5, #3
 801e6d2:	45a8      	cmp	r8, r5
 801e6d4:	bf38      	it	cc
 801e6d6:	2100      	movcc	r1, #0
 801e6d8:	440b      	add	r3, r1
 801e6da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801e6de:	b191      	cbz	r1, 801e706 <__mdiff+0x11a>
 801e6e0:	6117      	str	r7, [r2, #16]
 801e6e2:	e79d      	b.n	801e620 <__mdiff+0x34>
 801e6e4:	f854 1b04 	ldr.w	r1, [r4], #4
 801e6e8:	46e6      	mov	lr, ip
 801e6ea:	0c08      	lsrs	r0, r1, #16
 801e6ec:	fa1c fc81 	uxtah	ip, ip, r1
 801e6f0:	4471      	add	r1, lr
 801e6f2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801e6f6:	b289      	uxth	r1, r1
 801e6f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801e6fc:	f846 1b04 	str.w	r1, [r6], #4
 801e700:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801e704:	e7dd      	b.n	801e6c2 <__mdiff+0xd6>
 801e706:	3f01      	subs	r7, #1
 801e708:	e7e7      	b.n	801e6da <__mdiff+0xee>
 801e70a:	bf00      	nop
 801e70c:	08020414 	.word	0x08020414
 801e710:	08020425 	.word	0x08020425

0801e714 <__d2b>:
 801e714:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801e718:	460f      	mov	r7, r1
 801e71a:	2101      	movs	r1, #1
 801e71c:	ec59 8b10 	vmov	r8, r9, d0
 801e720:	4616      	mov	r6, r2
 801e722:	f7ff fcd5 	bl	801e0d0 <_Balloc>
 801e726:	4604      	mov	r4, r0
 801e728:	b930      	cbnz	r0, 801e738 <__d2b+0x24>
 801e72a:	4602      	mov	r2, r0
 801e72c:	4b23      	ldr	r3, [pc, #140]	@ (801e7bc <__d2b+0xa8>)
 801e72e:	4824      	ldr	r0, [pc, #144]	@ (801e7c0 <__d2b+0xac>)
 801e730:	f240 310f 	movw	r1, #783	@ 0x30f
 801e734:	f000 fa50 	bl	801ebd8 <__assert_func>
 801e738:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801e73c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e740:	b10d      	cbz	r5, 801e746 <__d2b+0x32>
 801e742:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801e746:	9301      	str	r3, [sp, #4]
 801e748:	f1b8 0300 	subs.w	r3, r8, #0
 801e74c:	d023      	beq.n	801e796 <__d2b+0x82>
 801e74e:	4668      	mov	r0, sp
 801e750:	9300      	str	r3, [sp, #0]
 801e752:	f7ff fd84 	bl	801e25e <__lo0bits>
 801e756:	e9dd 1200 	ldrd	r1, r2, [sp]
 801e75a:	b1d0      	cbz	r0, 801e792 <__d2b+0x7e>
 801e75c:	f1c0 0320 	rsb	r3, r0, #32
 801e760:	fa02 f303 	lsl.w	r3, r2, r3
 801e764:	430b      	orrs	r3, r1
 801e766:	40c2      	lsrs	r2, r0
 801e768:	6163      	str	r3, [r4, #20]
 801e76a:	9201      	str	r2, [sp, #4]
 801e76c:	9b01      	ldr	r3, [sp, #4]
 801e76e:	61a3      	str	r3, [r4, #24]
 801e770:	2b00      	cmp	r3, #0
 801e772:	bf0c      	ite	eq
 801e774:	2201      	moveq	r2, #1
 801e776:	2202      	movne	r2, #2
 801e778:	6122      	str	r2, [r4, #16]
 801e77a:	b1a5      	cbz	r5, 801e7a6 <__d2b+0x92>
 801e77c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801e780:	4405      	add	r5, r0
 801e782:	603d      	str	r5, [r7, #0]
 801e784:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801e788:	6030      	str	r0, [r6, #0]
 801e78a:	4620      	mov	r0, r4
 801e78c:	b003      	add	sp, #12
 801e78e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e792:	6161      	str	r1, [r4, #20]
 801e794:	e7ea      	b.n	801e76c <__d2b+0x58>
 801e796:	a801      	add	r0, sp, #4
 801e798:	f7ff fd61 	bl	801e25e <__lo0bits>
 801e79c:	9b01      	ldr	r3, [sp, #4]
 801e79e:	6163      	str	r3, [r4, #20]
 801e7a0:	3020      	adds	r0, #32
 801e7a2:	2201      	movs	r2, #1
 801e7a4:	e7e8      	b.n	801e778 <__d2b+0x64>
 801e7a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801e7aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801e7ae:	6038      	str	r0, [r7, #0]
 801e7b0:	6918      	ldr	r0, [r3, #16]
 801e7b2:	f7ff fd35 	bl	801e220 <__hi0bits>
 801e7b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801e7ba:	e7e5      	b.n	801e788 <__d2b+0x74>
 801e7bc:	08020414 	.word	0x08020414
 801e7c0:	08020425 	.word	0x08020425

0801e7c4 <__sfputc_r>:
 801e7c4:	6893      	ldr	r3, [r2, #8]
 801e7c6:	3b01      	subs	r3, #1
 801e7c8:	2b00      	cmp	r3, #0
 801e7ca:	b410      	push	{r4}
 801e7cc:	6093      	str	r3, [r2, #8]
 801e7ce:	da08      	bge.n	801e7e2 <__sfputc_r+0x1e>
 801e7d0:	6994      	ldr	r4, [r2, #24]
 801e7d2:	42a3      	cmp	r3, r4
 801e7d4:	db01      	blt.n	801e7da <__sfputc_r+0x16>
 801e7d6:	290a      	cmp	r1, #10
 801e7d8:	d103      	bne.n	801e7e2 <__sfputc_r+0x1e>
 801e7da:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e7de:	f7fe bbea 	b.w	801cfb6 <__swbuf_r>
 801e7e2:	6813      	ldr	r3, [r2, #0]
 801e7e4:	1c58      	adds	r0, r3, #1
 801e7e6:	6010      	str	r0, [r2, #0]
 801e7e8:	7019      	strb	r1, [r3, #0]
 801e7ea:	4608      	mov	r0, r1
 801e7ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e7f0:	4770      	bx	lr

0801e7f2 <__sfputs_r>:
 801e7f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e7f4:	4606      	mov	r6, r0
 801e7f6:	460f      	mov	r7, r1
 801e7f8:	4614      	mov	r4, r2
 801e7fa:	18d5      	adds	r5, r2, r3
 801e7fc:	42ac      	cmp	r4, r5
 801e7fe:	d101      	bne.n	801e804 <__sfputs_r+0x12>
 801e800:	2000      	movs	r0, #0
 801e802:	e007      	b.n	801e814 <__sfputs_r+0x22>
 801e804:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e808:	463a      	mov	r2, r7
 801e80a:	4630      	mov	r0, r6
 801e80c:	f7ff ffda 	bl	801e7c4 <__sfputc_r>
 801e810:	1c43      	adds	r3, r0, #1
 801e812:	d1f3      	bne.n	801e7fc <__sfputs_r+0xa>
 801e814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e818 <_vfiprintf_r>:
 801e818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e81c:	460d      	mov	r5, r1
 801e81e:	b09d      	sub	sp, #116	@ 0x74
 801e820:	4614      	mov	r4, r2
 801e822:	4698      	mov	r8, r3
 801e824:	4606      	mov	r6, r0
 801e826:	b118      	cbz	r0, 801e830 <_vfiprintf_r+0x18>
 801e828:	6a03      	ldr	r3, [r0, #32]
 801e82a:	b90b      	cbnz	r3, 801e830 <_vfiprintf_r+0x18>
 801e82c:	f7fe fad2 	bl	801cdd4 <__sinit>
 801e830:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e832:	07d9      	lsls	r1, r3, #31
 801e834:	d405      	bmi.n	801e842 <_vfiprintf_r+0x2a>
 801e836:	89ab      	ldrh	r3, [r5, #12]
 801e838:	059a      	lsls	r2, r3, #22
 801e83a:	d402      	bmi.n	801e842 <_vfiprintf_r+0x2a>
 801e83c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e83e:	f7fe fcdc 	bl	801d1fa <__retarget_lock_acquire_recursive>
 801e842:	89ab      	ldrh	r3, [r5, #12]
 801e844:	071b      	lsls	r3, r3, #28
 801e846:	d501      	bpl.n	801e84c <_vfiprintf_r+0x34>
 801e848:	692b      	ldr	r3, [r5, #16]
 801e84a:	b99b      	cbnz	r3, 801e874 <_vfiprintf_r+0x5c>
 801e84c:	4629      	mov	r1, r5
 801e84e:	4630      	mov	r0, r6
 801e850:	f7fe fbf0 	bl	801d034 <__swsetup_r>
 801e854:	b170      	cbz	r0, 801e874 <_vfiprintf_r+0x5c>
 801e856:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e858:	07dc      	lsls	r4, r3, #31
 801e85a:	d504      	bpl.n	801e866 <_vfiprintf_r+0x4e>
 801e85c:	f04f 30ff 	mov.w	r0, #4294967295
 801e860:	b01d      	add	sp, #116	@ 0x74
 801e862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e866:	89ab      	ldrh	r3, [r5, #12]
 801e868:	0598      	lsls	r0, r3, #22
 801e86a:	d4f7      	bmi.n	801e85c <_vfiprintf_r+0x44>
 801e86c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e86e:	f7fe fcc5 	bl	801d1fc <__retarget_lock_release_recursive>
 801e872:	e7f3      	b.n	801e85c <_vfiprintf_r+0x44>
 801e874:	2300      	movs	r3, #0
 801e876:	9309      	str	r3, [sp, #36]	@ 0x24
 801e878:	2320      	movs	r3, #32
 801e87a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e87e:	f8cd 800c 	str.w	r8, [sp, #12]
 801e882:	2330      	movs	r3, #48	@ 0x30
 801e884:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801ea34 <_vfiprintf_r+0x21c>
 801e888:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e88c:	f04f 0901 	mov.w	r9, #1
 801e890:	4623      	mov	r3, r4
 801e892:	469a      	mov	sl, r3
 801e894:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e898:	b10a      	cbz	r2, 801e89e <_vfiprintf_r+0x86>
 801e89a:	2a25      	cmp	r2, #37	@ 0x25
 801e89c:	d1f9      	bne.n	801e892 <_vfiprintf_r+0x7a>
 801e89e:	ebba 0b04 	subs.w	fp, sl, r4
 801e8a2:	d00b      	beq.n	801e8bc <_vfiprintf_r+0xa4>
 801e8a4:	465b      	mov	r3, fp
 801e8a6:	4622      	mov	r2, r4
 801e8a8:	4629      	mov	r1, r5
 801e8aa:	4630      	mov	r0, r6
 801e8ac:	f7ff ffa1 	bl	801e7f2 <__sfputs_r>
 801e8b0:	3001      	adds	r0, #1
 801e8b2:	f000 80a7 	beq.w	801ea04 <_vfiprintf_r+0x1ec>
 801e8b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e8b8:	445a      	add	r2, fp
 801e8ba:	9209      	str	r2, [sp, #36]	@ 0x24
 801e8bc:	f89a 3000 	ldrb.w	r3, [sl]
 801e8c0:	2b00      	cmp	r3, #0
 801e8c2:	f000 809f 	beq.w	801ea04 <_vfiprintf_r+0x1ec>
 801e8c6:	2300      	movs	r3, #0
 801e8c8:	f04f 32ff 	mov.w	r2, #4294967295
 801e8cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e8d0:	f10a 0a01 	add.w	sl, sl, #1
 801e8d4:	9304      	str	r3, [sp, #16]
 801e8d6:	9307      	str	r3, [sp, #28]
 801e8d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801e8dc:	931a      	str	r3, [sp, #104]	@ 0x68
 801e8de:	4654      	mov	r4, sl
 801e8e0:	2205      	movs	r2, #5
 801e8e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e8e6:	4853      	ldr	r0, [pc, #332]	@ (801ea34 <_vfiprintf_r+0x21c>)
 801e8e8:	f7e1 fc72 	bl	80001d0 <memchr>
 801e8ec:	9a04      	ldr	r2, [sp, #16]
 801e8ee:	b9d8      	cbnz	r0, 801e928 <_vfiprintf_r+0x110>
 801e8f0:	06d1      	lsls	r1, r2, #27
 801e8f2:	bf44      	itt	mi
 801e8f4:	2320      	movmi	r3, #32
 801e8f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e8fa:	0713      	lsls	r3, r2, #28
 801e8fc:	bf44      	itt	mi
 801e8fe:	232b      	movmi	r3, #43	@ 0x2b
 801e900:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e904:	f89a 3000 	ldrb.w	r3, [sl]
 801e908:	2b2a      	cmp	r3, #42	@ 0x2a
 801e90a:	d015      	beq.n	801e938 <_vfiprintf_r+0x120>
 801e90c:	9a07      	ldr	r2, [sp, #28]
 801e90e:	4654      	mov	r4, sl
 801e910:	2000      	movs	r0, #0
 801e912:	f04f 0c0a 	mov.w	ip, #10
 801e916:	4621      	mov	r1, r4
 801e918:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e91c:	3b30      	subs	r3, #48	@ 0x30
 801e91e:	2b09      	cmp	r3, #9
 801e920:	d94b      	bls.n	801e9ba <_vfiprintf_r+0x1a2>
 801e922:	b1b0      	cbz	r0, 801e952 <_vfiprintf_r+0x13a>
 801e924:	9207      	str	r2, [sp, #28]
 801e926:	e014      	b.n	801e952 <_vfiprintf_r+0x13a>
 801e928:	eba0 0308 	sub.w	r3, r0, r8
 801e92c:	fa09 f303 	lsl.w	r3, r9, r3
 801e930:	4313      	orrs	r3, r2
 801e932:	9304      	str	r3, [sp, #16]
 801e934:	46a2      	mov	sl, r4
 801e936:	e7d2      	b.n	801e8de <_vfiprintf_r+0xc6>
 801e938:	9b03      	ldr	r3, [sp, #12]
 801e93a:	1d19      	adds	r1, r3, #4
 801e93c:	681b      	ldr	r3, [r3, #0]
 801e93e:	9103      	str	r1, [sp, #12]
 801e940:	2b00      	cmp	r3, #0
 801e942:	bfbb      	ittet	lt
 801e944:	425b      	neglt	r3, r3
 801e946:	f042 0202 	orrlt.w	r2, r2, #2
 801e94a:	9307      	strge	r3, [sp, #28]
 801e94c:	9307      	strlt	r3, [sp, #28]
 801e94e:	bfb8      	it	lt
 801e950:	9204      	strlt	r2, [sp, #16]
 801e952:	7823      	ldrb	r3, [r4, #0]
 801e954:	2b2e      	cmp	r3, #46	@ 0x2e
 801e956:	d10a      	bne.n	801e96e <_vfiprintf_r+0x156>
 801e958:	7863      	ldrb	r3, [r4, #1]
 801e95a:	2b2a      	cmp	r3, #42	@ 0x2a
 801e95c:	d132      	bne.n	801e9c4 <_vfiprintf_r+0x1ac>
 801e95e:	9b03      	ldr	r3, [sp, #12]
 801e960:	1d1a      	adds	r2, r3, #4
 801e962:	681b      	ldr	r3, [r3, #0]
 801e964:	9203      	str	r2, [sp, #12]
 801e966:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e96a:	3402      	adds	r4, #2
 801e96c:	9305      	str	r3, [sp, #20]
 801e96e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801ea44 <_vfiprintf_r+0x22c>
 801e972:	7821      	ldrb	r1, [r4, #0]
 801e974:	2203      	movs	r2, #3
 801e976:	4650      	mov	r0, sl
 801e978:	f7e1 fc2a 	bl	80001d0 <memchr>
 801e97c:	b138      	cbz	r0, 801e98e <_vfiprintf_r+0x176>
 801e97e:	9b04      	ldr	r3, [sp, #16]
 801e980:	eba0 000a 	sub.w	r0, r0, sl
 801e984:	2240      	movs	r2, #64	@ 0x40
 801e986:	4082      	lsls	r2, r0
 801e988:	4313      	orrs	r3, r2
 801e98a:	3401      	adds	r4, #1
 801e98c:	9304      	str	r3, [sp, #16]
 801e98e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e992:	4829      	ldr	r0, [pc, #164]	@ (801ea38 <_vfiprintf_r+0x220>)
 801e994:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e998:	2206      	movs	r2, #6
 801e99a:	f7e1 fc19 	bl	80001d0 <memchr>
 801e99e:	2800      	cmp	r0, #0
 801e9a0:	d03f      	beq.n	801ea22 <_vfiprintf_r+0x20a>
 801e9a2:	4b26      	ldr	r3, [pc, #152]	@ (801ea3c <_vfiprintf_r+0x224>)
 801e9a4:	bb1b      	cbnz	r3, 801e9ee <_vfiprintf_r+0x1d6>
 801e9a6:	9b03      	ldr	r3, [sp, #12]
 801e9a8:	3307      	adds	r3, #7
 801e9aa:	f023 0307 	bic.w	r3, r3, #7
 801e9ae:	3308      	adds	r3, #8
 801e9b0:	9303      	str	r3, [sp, #12]
 801e9b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e9b4:	443b      	add	r3, r7
 801e9b6:	9309      	str	r3, [sp, #36]	@ 0x24
 801e9b8:	e76a      	b.n	801e890 <_vfiprintf_r+0x78>
 801e9ba:	fb0c 3202 	mla	r2, ip, r2, r3
 801e9be:	460c      	mov	r4, r1
 801e9c0:	2001      	movs	r0, #1
 801e9c2:	e7a8      	b.n	801e916 <_vfiprintf_r+0xfe>
 801e9c4:	2300      	movs	r3, #0
 801e9c6:	3401      	adds	r4, #1
 801e9c8:	9305      	str	r3, [sp, #20]
 801e9ca:	4619      	mov	r1, r3
 801e9cc:	f04f 0c0a 	mov.w	ip, #10
 801e9d0:	4620      	mov	r0, r4
 801e9d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e9d6:	3a30      	subs	r2, #48	@ 0x30
 801e9d8:	2a09      	cmp	r2, #9
 801e9da:	d903      	bls.n	801e9e4 <_vfiprintf_r+0x1cc>
 801e9dc:	2b00      	cmp	r3, #0
 801e9de:	d0c6      	beq.n	801e96e <_vfiprintf_r+0x156>
 801e9e0:	9105      	str	r1, [sp, #20]
 801e9e2:	e7c4      	b.n	801e96e <_vfiprintf_r+0x156>
 801e9e4:	fb0c 2101 	mla	r1, ip, r1, r2
 801e9e8:	4604      	mov	r4, r0
 801e9ea:	2301      	movs	r3, #1
 801e9ec:	e7f0      	b.n	801e9d0 <_vfiprintf_r+0x1b8>
 801e9ee:	ab03      	add	r3, sp, #12
 801e9f0:	9300      	str	r3, [sp, #0]
 801e9f2:	462a      	mov	r2, r5
 801e9f4:	4b12      	ldr	r3, [pc, #72]	@ (801ea40 <_vfiprintf_r+0x228>)
 801e9f6:	a904      	add	r1, sp, #16
 801e9f8:	4630      	mov	r0, r6
 801e9fa:	f7fd fce9 	bl	801c3d0 <_printf_float>
 801e9fe:	4607      	mov	r7, r0
 801ea00:	1c78      	adds	r0, r7, #1
 801ea02:	d1d6      	bne.n	801e9b2 <_vfiprintf_r+0x19a>
 801ea04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ea06:	07d9      	lsls	r1, r3, #31
 801ea08:	d405      	bmi.n	801ea16 <_vfiprintf_r+0x1fe>
 801ea0a:	89ab      	ldrh	r3, [r5, #12]
 801ea0c:	059a      	lsls	r2, r3, #22
 801ea0e:	d402      	bmi.n	801ea16 <_vfiprintf_r+0x1fe>
 801ea10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ea12:	f7fe fbf3 	bl	801d1fc <__retarget_lock_release_recursive>
 801ea16:	89ab      	ldrh	r3, [r5, #12]
 801ea18:	065b      	lsls	r3, r3, #25
 801ea1a:	f53f af1f 	bmi.w	801e85c <_vfiprintf_r+0x44>
 801ea1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ea20:	e71e      	b.n	801e860 <_vfiprintf_r+0x48>
 801ea22:	ab03      	add	r3, sp, #12
 801ea24:	9300      	str	r3, [sp, #0]
 801ea26:	462a      	mov	r2, r5
 801ea28:	4b05      	ldr	r3, [pc, #20]	@ (801ea40 <_vfiprintf_r+0x228>)
 801ea2a:	a904      	add	r1, sp, #16
 801ea2c:	4630      	mov	r0, r6
 801ea2e:	f7fd ff67 	bl	801c900 <_printf_i>
 801ea32:	e7e4      	b.n	801e9fe <_vfiprintf_r+0x1e6>
 801ea34:	0802047e 	.word	0x0802047e
 801ea38:	08020488 	.word	0x08020488
 801ea3c:	0801c3d1 	.word	0x0801c3d1
 801ea40:	0801e7f3 	.word	0x0801e7f3
 801ea44:	08020484 	.word	0x08020484

0801ea48 <__swhatbuf_r>:
 801ea48:	b570      	push	{r4, r5, r6, lr}
 801ea4a:	460c      	mov	r4, r1
 801ea4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ea50:	2900      	cmp	r1, #0
 801ea52:	b096      	sub	sp, #88	@ 0x58
 801ea54:	4615      	mov	r5, r2
 801ea56:	461e      	mov	r6, r3
 801ea58:	da0d      	bge.n	801ea76 <__swhatbuf_r+0x2e>
 801ea5a:	89a3      	ldrh	r3, [r4, #12]
 801ea5c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801ea60:	f04f 0100 	mov.w	r1, #0
 801ea64:	bf14      	ite	ne
 801ea66:	2340      	movne	r3, #64	@ 0x40
 801ea68:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801ea6c:	2000      	movs	r0, #0
 801ea6e:	6031      	str	r1, [r6, #0]
 801ea70:	602b      	str	r3, [r5, #0]
 801ea72:	b016      	add	sp, #88	@ 0x58
 801ea74:	bd70      	pop	{r4, r5, r6, pc}
 801ea76:	466a      	mov	r2, sp
 801ea78:	f000 f87c 	bl	801eb74 <_fstat_r>
 801ea7c:	2800      	cmp	r0, #0
 801ea7e:	dbec      	blt.n	801ea5a <__swhatbuf_r+0x12>
 801ea80:	9901      	ldr	r1, [sp, #4]
 801ea82:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801ea86:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801ea8a:	4259      	negs	r1, r3
 801ea8c:	4159      	adcs	r1, r3
 801ea8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801ea92:	e7eb      	b.n	801ea6c <__swhatbuf_r+0x24>

0801ea94 <__smakebuf_r>:
 801ea94:	898b      	ldrh	r3, [r1, #12]
 801ea96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ea98:	079d      	lsls	r5, r3, #30
 801ea9a:	4606      	mov	r6, r0
 801ea9c:	460c      	mov	r4, r1
 801ea9e:	d507      	bpl.n	801eab0 <__smakebuf_r+0x1c>
 801eaa0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801eaa4:	6023      	str	r3, [r4, #0]
 801eaa6:	6123      	str	r3, [r4, #16]
 801eaa8:	2301      	movs	r3, #1
 801eaaa:	6163      	str	r3, [r4, #20]
 801eaac:	b003      	add	sp, #12
 801eaae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eab0:	ab01      	add	r3, sp, #4
 801eab2:	466a      	mov	r2, sp
 801eab4:	f7ff ffc8 	bl	801ea48 <__swhatbuf_r>
 801eab8:	9f00      	ldr	r7, [sp, #0]
 801eaba:	4605      	mov	r5, r0
 801eabc:	4639      	mov	r1, r7
 801eabe:	4630      	mov	r0, r6
 801eac0:	f7ff fa7a 	bl	801dfb8 <_malloc_r>
 801eac4:	b948      	cbnz	r0, 801eada <__smakebuf_r+0x46>
 801eac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801eaca:	059a      	lsls	r2, r3, #22
 801eacc:	d4ee      	bmi.n	801eaac <__smakebuf_r+0x18>
 801eace:	f023 0303 	bic.w	r3, r3, #3
 801ead2:	f043 0302 	orr.w	r3, r3, #2
 801ead6:	81a3      	strh	r3, [r4, #12]
 801ead8:	e7e2      	b.n	801eaa0 <__smakebuf_r+0xc>
 801eada:	89a3      	ldrh	r3, [r4, #12]
 801eadc:	6020      	str	r0, [r4, #0]
 801eade:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801eae2:	81a3      	strh	r3, [r4, #12]
 801eae4:	9b01      	ldr	r3, [sp, #4]
 801eae6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801eaea:	b15b      	cbz	r3, 801eb04 <__smakebuf_r+0x70>
 801eaec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801eaf0:	4630      	mov	r0, r6
 801eaf2:	f000 f851 	bl	801eb98 <_isatty_r>
 801eaf6:	b128      	cbz	r0, 801eb04 <__smakebuf_r+0x70>
 801eaf8:	89a3      	ldrh	r3, [r4, #12]
 801eafa:	f023 0303 	bic.w	r3, r3, #3
 801eafe:	f043 0301 	orr.w	r3, r3, #1
 801eb02:	81a3      	strh	r3, [r4, #12]
 801eb04:	89a3      	ldrh	r3, [r4, #12]
 801eb06:	431d      	orrs	r5, r3
 801eb08:	81a5      	strh	r5, [r4, #12]
 801eb0a:	e7cf      	b.n	801eaac <__smakebuf_r+0x18>

0801eb0c <_putc_r>:
 801eb0c:	b570      	push	{r4, r5, r6, lr}
 801eb0e:	460d      	mov	r5, r1
 801eb10:	4614      	mov	r4, r2
 801eb12:	4606      	mov	r6, r0
 801eb14:	b118      	cbz	r0, 801eb1e <_putc_r+0x12>
 801eb16:	6a03      	ldr	r3, [r0, #32]
 801eb18:	b90b      	cbnz	r3, 801eb1e <_putc_r+0x12>
 801eb1a:	f7fe f95b 	bl	801cdd4 <__sinit>
 801eb1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801eb20:	07d8      	lsls	r0, r3, #31
 801eb22:	d405      	bmi.n	801eb30 <_putc_r+0x24>
 801eb24:	89a3      	ldrh	r3, [r4, #12]
 801eb26:	0599      	lsls	r1, r3, #22
 801eb28:	d402      	bmi.n	801eb30 <_putc_r+0x24>
 801eb2a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801eb2c:	f7fe fb65 	bl	801d1fa <__retarget_lock_acquire_recursive>
 801eb30:	68a3      	ldr	r3, [r4, #8]
 801eb32:	3b01      	subs	r3, #1
 801eb34:	2b00      	cmp	r3, #0
 801eb36:	60a3      	str	r3, [r4, #8]
 801eb38:	da05      	bge.n	801eb46 <_putc_r+0x3a>
 801eb3a:	69a2      	ldr	r2, [r4, #24]
 801eb3c:	4293      	cmp	r3, r2
 801eb3e:	db12      	blt.n	801eb66 <_putc_r+0x5a>
 801eb40:	b2eb      	uxtb	r3, r5
 801eb42:	2b0a      	cmp	r3, #10
 801eb44:	d00f      	beq.n	801eb66 <_putc_r+0x5a>
 801eb46:	6823      	ldr	r3, [r4, #0]
 801eb48:	1c5a      	adds	r2, r3, #1
 801eb4a:	6022      	str	r2, [r4, #0]
 801eb4c:	701d      	strb	r5, [r3, #0]
 801eb4e:	b2ed      	uxtb	r5, r5
 801eb50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801eb52:	07da      	lsls	r2, r3, #31
 801eb54:	d405      	bmi.n	801eb62 <_putc_r+0x56>
 801eb56:	89a3      	ldrh	r3, [r4, #12]
 801eb58:	059b      	lsls	r3, r3, #22
 801eb5a:	d402      	bmi.n	801eb62 <_putc_r+0x56>
 801eb5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801eb5e:	f7fe fb4d 	bl	801d1fc <__retarget_lock_release_recursive>
 801eb62:	4628      	mov	r0, r5
 801eb64:	bd70      	pop	{r4, r5, r6, pc}
 801eb66:	4629      	mov	r1, r5
 801eb68:	4622      	mov	r2, r4
 801eb6a:	4630      	mov	r0, r6
 801eb6c:	f7fe fa23 	bl	801cfb6 <__swbuf_r>
 801eb70:	4605      	mov	r5, r0
 801eb72:	e7ed      	b.n	801eb50 <_putc_r+0x44>

0801eb74 <_fstat_r>:
 801eb74:	b538      	push	{r3, r4, r5, lr}
 801eb76:	4d07      	ldr	r5, [pc, #28]	@ (801eb94 <_fstat_r+0x20>)
 801eb78:	2300      	movs	r3, #0
 801eb7a:	4604      	mov	r4, r0
 801eb7c:	4608      	mov	r0, r1
 801eb7e:	4611      	mov	r1, r2
 801eb80:	602b      	str	r3, [r5, #0]
 801eb82:	f7e3 f96b 	bl	8001e5c <_fstat>
 801eb86:	1c43      	adds	r3, r0, #1
 801eb88:	d102      	bne.n	801eb90 <_fstat_r+0x1c>
 801eb8a:	682b      	ldr	r3, [r5, #0]
 801eb8c:	b103      	cbz	r3, 801eb90 <_fstat_r+0x1c>
 801eb8e:	6023      	str	r3, [r4, #0]
 801eb90:	bd38      	pop	{r3, r4, r5, pc}
 801eb92:	bf00      	nop
 801eb94:	200018fc 	.word	0x200018fc

0801eb98 <_isatty_r>:
 801eb98:	b538      	push	{r3, r4, r5, lr}
 801eb9a:	4d06      	ldr	r5, [pc, #24]	@ (801ebb4 <_isatty_r+0x1c>)
 801eb9c:	2300      	movs	r3, #0
 801eb9e:	4604      	mov	r4, r0
 801eba0:	4608      	mov	r0, r1
 801eba2:	602b      	str	r3, [r5, #0]
 801eba4:	f7e3 f96a 	bl	8001e7c <_isatty>
 801eba8:	1c43      	adds	r3, r0, #1
 801ebaa:	d102      	bne.n	801ebb2 <_isatty_r+0x1a>
 801ebac:	682b      	ldr	r3, [r5, #0]
 801ebae:	b103      	cbz	r3, 801ebb2 <_isatty_r+0x1a>
 801ebb0:	6023      	str	r3, [r4, #0]
 801ebb2:	bd38      	pop	{r3, r4, r5, pc}
 801ebb4:	200018fc 	.word	0x200018fc

0801ebb8 <_sbrk_r>:
 801ebb8:	b538      	push	{r3, r4, r5, lr}
 801ebba:	4d06      	ldr	r5, [pc, #24]	@ (801ebd4 <_sbrk_r+0x1c>)
 801ebbc:	2300      	movs	r3, #0
 801ebbe:	4604      	mov	r4, r0
 801ebc0:	4608      	mov	r0, r1
 801ebc2:	602b      	str	r3, [r5, #0]
 801ebc4:	f7e3 f972 	bl	8001eac <_sbrk>
 801ebc8:	1c43      	adds	r3, r0, #1
 801ebca:	d102      	bne.n	801ebd2 <_sbrk_r+0x1a>
 801ebcc:	682b      	ldr	r3, [r5, #0]
 801ebce:	b103      	cbz	r3, 801ebd2 <_sbrk_r+0x1a>
 801ebd0:	6023      	str	r3, [r4, #0]
 801ebd2:	bd38      	pop	{r3, r4, r5, pc}
 801ebd4:	200018fc 	.word	0x200018fc

0801ebd8 <__assert_func>:
 801ebd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ebda:	4614      	mov	r4, r2
 801ebdc:	461a      	mov	r2, r3
 801ebde:	4b09      	ldr	r3, [pc, #36]	@ (801ec04 <__assert_func+0x2c>)
 801ebe0:	681b      	ldr	r3, [r3, #0]
 801ebe2:	4605      	mov	r5, r0
 801ebe4:	68d8      	ldr	r0, [r3, #12]
 801ebe6:	b14c      	cbz	r4, 801ebfc <__assert_func+0x24>
 801ebe8:	4b07      	ldr	r3, [pc, #28]	@ (801ec08 <__assert_func+0x30>)
 801ebea:	9100      	str	r1, [sp, #0]
 801ebec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ebf0:	4906      	ldr	r1, [pc, #24]	@ (801ec0c <__assert_func+0x34>)
 801ebf2:	462b      	mov	r3, r5
 801ebf4:	f000 f842 	bl	801ec7c <fiprintf>
 801ebf8:	f000 f852 	bl	801eca0 <abort>
 801ebfc:	4b04      	ldr	r3, [pc, #16]	@ (801ec10 <__assert_func+0x38>)
 801ebfe:	461c      	mov	r4, r3
 801ec00:	e7f3      	b.n	801ebea <__assert_func+0x12>
 801ec02:	bf00      	nop
 801ec04:	2000002c 	.word	0x2000002c
 801ec08:	08020499 	.word	0x08020499
 801ec0c:	080204a6 	.word	0x080204a6
 801ec10:	080204d4 	.word	0x080204d4

0801ec14 <_calloc_r>:
 801ec14:	b570      	push	{r4, r5, r6, lr}
 801ec16:	fba1 5402 	umull	r5, r4, r1, r2
 801ec1a:	b934      	cbnz	r4, 801ec2a <_calloc_r+0x16>
 801ec1c:	4629      	mov	r1, r5
 801ec1e:	f7ff f9cb 	bl	801dfb8 <_malloc_r>
 801ec22:	4606      	mov	r6, r0
 801ec24:	b928      	cbnz	r0, 801ec32 <_calloc_r+0x1e>
 801ec26:	4630      	mov	r0, r6
 801ec28:	bd70      	pop	{r4, r5, r6, pc}
 801ec2a:	220c      	movs	r2, #12
 801ec2c:	6002      	str	r2, [r0, #0]
 801ec2e:	2600      	movs	r6, #0
 801ec30:	e7f9      	b.n	801ec26 <_calloc_r+0x12>
 801ec32:	462a      	mov	r2, r5
 801ec34:	4621      	mov	r1, r4
 801ec36:	f7fe fa63 	bl	801d100 <memset>
 801ec3a:	e7f4      	b.n	801ec26 <_calloc_r+0x12>

0801ec3c <__ascii_mbtowc>:
 801ec3c:	b082      	sub	sp, #8
 801ec3e:	b901      	cbnz	r1, 801ec42 <__ascii_mbtowc+0x6>
 801ec40:	a901      	add	r1, sp, #4
 801ec42:	b142      	cbz	r2, 801ec56 <__ascii_mbtowc+0x1a>
 801ec44:	b14b      	cbz	r3, 801ec5a <__ascii_mbtowc+0x1e>
 801ec46:	7813      	ldrb	r3, [r2, #0]
 801ec48:	600b      	str	r3, [r1, #0]
 801ec4a:	7812      	ldrb	r2, [r2, #0]
 801ec4c:	1e10      	subs	r0, r2, #0
 801ec4e:	bf18      	it	ne
 801ec50:	2001      	movne	r0, #1
 801ec52:	b002      	add	sp, #8
 801ec54:	4770      	bx	lr
 801ec56:	4610      	mov	r0, r2
 801ec58:	e7fb      	b.n	801ec52 <__ascii_mbtowc+0x16>
 801ec5a:	f06f 0001 	mvn.w	r0, #1
 801ec5e:	e7f8      	b.n	801ec52 <__ascii_mbtowc+0x16>

0801ec60 <__ascii_wctomb>:
 801ec60:	4603      	mov	r3, r0
 801ec62:	4608      	mov	r0, r1
 801ec64:	b141      	cbz	r1, 801ec78 <__ascii_wctomb+0x18>
 801ec66:	2aff      	cmp	r2, #255	@ 0xff
 801ec68:	d904      	bls.n	801ec74 <__ascii_wctomb+0x14>
 801ec6a:	228a      	movs	r2, #138	@ 0x8a
 801ec6c:	601a      	str	r2, [r3, #0]
 801ec6e:	f04f 30ff 	mov.w	r0, #4294967295
 801ec72:	4770      	bx	lr
 801ec74:	700a      	strb	r2, [r1, #0]
 801ec76:	2001      	movs	r0, #1
 801ec78:	4770      	bx	lr
	...

0801ec7c <fiprintf>:
 801ec7c:	b40e      	push	{r1, r2, r3}
 801ec7e:	b503      	push	{r0, r1, lr}
 801ec80:	4601      	mov	r1, r0
 801ec82:	ab03      	add	r3, sp, #12
 801ec84:	4805      	ldr	r0, [pc, #20]	@ (801ec9c <fiprintf+0x20>)
 801ec86:	f853 2b04 	ldr.w	r2, [r3], #4
 801ec8a:	6800      	ldr	r0, [r0, #0]
 801ec8c:	9301      	str	r3, [sp, #4]
 801ec8e:	f7ff fdc3 	bl	801e818 <_vfiprintf_r>
 801ec92:	b002      	add	sp, #8
 801ec94:	f85d eb04 	ldr.w	lr, [sp], #4
 801ec98:	b003      	add	sp, #12
 801ec9a:	4770      	bx	lr
 801ec9c:	2000002c 	.word	0x2000002c

0801eca0 <abort>:
 801eca0:	b508      	push	{r3, lr}
 801eca2:	2006      	movs	r0, #6
 801eca4:	f000 f82c 	bl	801ed00 <raise>
 801eca8:	2001      	movs	r0, #1
 801ecaa:	f7e3 f887 	bl	8001dbc <_exit>

0801ecae <_raise_r>:
 801ecae:	291f      	cmp	r1, #31
 801ecb0:	b538      	push	{r3, r4, r5, lr}
 801ecb2:	4605      	mov	r5, r0
 801ecb4:	460c      	mov	r4, r1
 801ecb6:	d904      	bls.n	801ecc2 <_raise_r+0x14>
 801ecb8:	2316      	movs	r3, #22
 801ecba:	6003      	str	r3, [r0, #0]
 801ecbc:	f04f 30ff 	mov.w	r0, #4294967295
 801ecc0:	bd38      	pop	{r3, r4, r5, pc}
 801ecc2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801ecc4:	b112      	cbz	r2, 801eccc <_raise_r+0x1e>
 801ecc6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ecca:	b94b      	cbnz	r3, 801ece0 <_raise_r+0x32>
 801eccc:	4628      	mov	r0, r5
 801ecce:	f000 f831 	bl	801ed34 <_getpid_r>
 801ecd2:	4622      	mov	r2, r4
 801ecd4:	4601      	mov	r1, r0
 801ecd6:	4628      	mov	r0, r5
 801ecd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ecdc:	f000 b818 	b.w	801ed10 <_kill_r>
 801ece0:	2b01      	cmp	r3, #1
 801ece2:	d00a      	beq.n	801ecfa <_raise_r+0x4c>
 801ece4:	1c59      	adds	r1, r3, #1
 801ece6:	d103      	bne.n	801ecf0 <_raise_r+0x42>
 801ece8:	2316      	movs	r3, #22
 801ecea:	6003      	str	r3, [r0, #0]
 801ecec:	2001      	movs	r0, #1
 801ecee:	e7e7      	b.n	801ecc0 <_raise_r+0x12>
 801ecf0:	2100      	movs	r1, #0
 801ecf2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801ecf6:	4620      	mov	r0, r4
 801ecf8:	4798      	blx	r3
 801ecfa:	2000      	movs	r0, #0
 801ecfc:	e7e0      	b.n	801ecc0 <_raise_r+0x12>
	...

0801ed00 <raise>:
 801ed00:	4b02      	ldr	r3, [pc, #8]	@ (801ed0c <raise+0xc>)
 801ed02:	4601      	mov	r1, r0
 801ed04:	6818      	ldr	r0, [r3, #0]
 801ed06:	f7ff bfd2 	b.w	801ecae <_raise_r>
 801ed0a:	bf00      	nop
 801ed0c:	2000002c 	.word	0x2000002c

0801ed10 <_kill_r>:
 801ed10:	b538      	push	{r3, r4, r5, lr}
 801ed12:	4d07      	ldr	r5, [pc, #28]	@ (801ed30 <_kill_r+0x20>)
 801ed14:	2300      	movs	r3, #0
 801ed16:	4604      	mov	r4, r0
 801ed18:	4608      	mov	r0, r1
 801ed1a:	4611      	mov	r1, r2
 801ed1c:	602b      	str	r3, [r5, #0]
 801ed1e:	f7e3 f83d 	bl	8001d9c <_kill>
 801ed22:	1c43      	adds	r3, r0, #1
 801ed24:	d102      	bne.n	801ed2c <_kill_r+0x1c>
 801ed26:	682b      	ldr	r3, [r5, #0]
 801ed28:	b103      	cbz	r3, 801ed2c <_kill_r+0x1c>
 801ed2a:	6023      	str	r3, [r4, #0]
 801ed2c:	bd38      	pop	{r3, r4, r5, pc}
 801ed2e:	bf00      	nop
 801ed30:	200018fc 	.word	0x200018fc

0801ed34 <_getpid_r>:
 801ed34:	f7e3 b82a 	b.w	8001d8c <_getpid>

0801ed38 <_init>:
 801ed38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ed3a:	bf00      	nop
 801ed3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ed3e:	bc08      	pop	{r3}
 801ed40:	469e      	mov	lr, r3
 801ed42:	4770      	bx	lr

0801ed44 <_fini>:
 801ed44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ed46:	bf00      	nop
 801ed48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ed4a:	bc08      	pop	{r3}
 801ed4c:	469e      	mov	lr, r3
 801ed4e:	4770      	bx	lr
