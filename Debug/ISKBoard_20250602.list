
ISKBoard_20250602.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022350  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019ec  080224e0  080224e0  000234e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023ecc  08023ecc  00025240  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08023ecc  08023ecc  00024ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023ed4  08023ed4  00025240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023ed4  08023ed4  00024ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08023ed8  08023ed8  00024ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000240  20000000  08023edc  00025000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b14  20000240  0802411c  00025240  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d54  0802411c  00025d54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00025240  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004cf89  00000000  00000000  00025270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009d37  00000000  00000000  000721f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002fe8  00000000  00000000  0007bf30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000024e3  00000000  00000000  0007ef18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00036479  00000000  00000000  000813fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0005d419  00000000  00000000  000b7874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011cb1d  00000000  00000000  00114c8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002317aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d4b0  00000000  00000000  002317f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0023eca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000240 	.word	0x20000240
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080224c8 	.word	0x080224c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000244 	.word	0x20000244
 80001cc:	080224c8 	.word	0x080224c8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	@ 0x28
 8000f78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7a:	f107 0314 	add.w	r3, r7, #20
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	60da      	str	r2, [r3, #12]
 8000f88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f8a:	4b40      	ldr	r3, [pc, #256]	@ (800108c <MX_GPIO_Init+0x118>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8e:	4a3f      	ldr	r2, [pc, #252]	@ (800108c <MX_GPIO_Init+0x118>)
 8000f90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f96:	4b3d      	ldr	r3, [pc, #244]	@ (800108c <MX_GPIO_Init+0x118>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa2:	4b3a      	ldr	r3, [pc, #232]	@ (800108c <MX_GPIO_Init+0x118>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa6:	4a39      	ldr	r2, [pc, #228]	@ (800108c <MX_GPIO_Init+0x118>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fae:	4b37      	ldr	r3, [pc, #220]	@ (800108c <MX_GPIO_Init+0x118>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fba:	4b34      	ldr	r3, [pc, #208]	@ (800108c <MX_GPIO_Init+0x118>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fbe:	4a33      	ldr	r2, [pc, #204]	@ (800108c <MX_GPIO_Init+0x118>)
 8000fc0:	f043 0304 	orr.w	r3, r3, #4
 8000fc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fc6:	4b31      	ldr	r3, [pc, #196]	@ (800108c <MX_GPIO_Init+0x118>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fca:	f003 0304 	and.w	r3, r3, #4
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd2:	4b2e      	ldr	r3, [pc, #184]	@ (800108c <MX_GPIO_Init+0x118>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd6:	4a2d      	ldr	r2, [pc, #180]	@ (800108c <MX_GPIO_Init+0x118>)
 8000fd8:	f043 0302 	orr.w	r3, r3, #2
 8000fdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fde:	4b2b      	ldr	r3, [pc, #172]	@ (800108c <MX_GPIO_Init+0x118>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PN5180_NSS_GPIO_Port, PN5180_NSS_Pin, GPIO_PIN_SET);
 8000fea:	2201      	movs	r2, #1
 8000fec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ff0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ff4:	f01a f8e2 	bl	801b1bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PN5180_RST_GPIO_Port, PN5180_RST_Pin, GPIO_PIN_SET);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	2120      	movs	r1, #32
 8000ffc:	4824      	ldr	r0, [pc, #144]	@ (8001090 <MX_GPIO_Init+0x11c>)
 8000ffe:	f01a f8dd 	bl	801b1bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PN5180_BUSY_Pin */
  GPIO_InitStruct.Pin = PN5180_BUSY_Pin;
 8001002:	2302      	movs	r3, #2
 8001004:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001006:	2300      	movs	r3, #0
 8001008:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800100a:	2301      	movs	r3, #1
 800100c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PN5180_BUSY_GPIO_Port, &GPIO_InitStruct);
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4619      	mov	r1, r3
 8001014:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001018:	f019 fe64 	bl	801ace4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PN5180_NSS_Pin */
  GPIO_InitStruct.Pin = PN5180_NSS_Pin;
 800101c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001020:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001022:	2301      	movs	r3, #1
 8001024:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800102a:	2302      	movs	r3, #2
 800102c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PN5180_NSS_GPIO_Port, &GPIO_InitStruct);
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4619      	mov	r1, r3
 8001034:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001038:	f019 fe54 	bl	801ace4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PN5180_IRQ_Pin */
  GPIO_InitStruct.Pin = PN5180_IRQ_Pin;
 800103c:	2310      	movs	r3, #16
 800103e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001040:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001044:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001046:	2301      	movs	r3, #1
 8001048:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PN5180_IRQ_GPIO_Port, &GPIO_InitStruct);
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	4619      	mov	r1, r3
 8001050:	480f      	ldr	r0, [pc, #60]	@ (8001090 <MX_GPIO_Init+0x11c>)
 8001052:	f019 fe47 	bl	801ace4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PN5180_RST_Pin */
  GPIO_InitStruct.Pin = PN5180_RST_Pin;
 8001056:	2320      	movs	r3, #32
 8001058:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105a:	2301      	movs	r3, #1
 800105c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PN5180_RST_GPIO_Port, &GPIO_InitStruct);
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	4619      	mov	r1, r3
 800106c:	4808      	ldr	r0, [pc, #32]	@ (8001090 <MX_GPIO_Init+0x11c>)
 800106e:	f019 fe39 	bl	801ace4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2105      	movs	r1, #5
 8001076:	200a      	movs	r0, #10
 8001078:	f019 fd7f 	bl	801ab7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800107c:	200a      	movs	r0, #10
 800107e:	f019 fd98 	bl	801abb2 <HAL_NVIC_EnableIRQ>

}
 8001082:	bf00      	nop
 8001084:	3728      	adds	r7, #40	@ 0x28
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40021000 	.word	0x40021000
 8001090:	48000400 	.word	0x48000400

08001094 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001098:	f019 fbfc 	bl	801a894 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800109c:	f000 f81a 	bl	80010d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a0:	f7ff ff68 	bl	8000f74 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80010a4:	f000 fc2e 	bl	8001904 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 80010a8:	f000 fb0e 	bl	80016c8 <MX_TIM6_Init>
  MX_TIM1_Init();
 80010ac:	f000 fa30 	bl	8001510 <MX_TIM1_Init>
  MX_SPI3_Init();
 80010b0:	f000 f866 	bl	8001180 <MX_SPI3_Init>
  MX_TIM2_Init();
 80010b4:	f000 faba 	bl	800162c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  printf("Start Iskboard NFC Program v1.0\r\n");
 80010b8:	4805      	ldr	r0, [pc, #20]	@ (80010d0 <main+0x3c>)
 80010ba:	f01f fafb 	bl	80206b4 <puts>

  beep_start(1, 300); 	/* 蜂鸣器响1声 */
 80010be:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80010c2:	2001      	movs	r0, #1
 80010c4:	f000 fbee 	bl	80018a4 <beep_start>

  /* 调用NFC Disvery功能*/
  nfc_discovery_main();
 80010c8:	f000 fd1c 	bl	8001b04 <nfc_discovery_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010cc:	bf00      	nop
 80010ce:	e7fd      	b.n	80010cc <main+0x38>
 80010d0:	080224e0 	.word	0x080224e0

080010d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b096      	sub	sp, #88	@ 0x58
 80010d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	2244      	movs	r2, #68	@ 0x44
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f01f fbd6 	bl	8020894 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e8:	463b      	mov	r3, r7
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]
 80010f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010f6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80010fa:	f01a f8a9 	bl	801b250 <HAL_PWREx_ControlVoltageScaling>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001104:	f000 f835 	bl	8001172 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001108:	2301      	movs	r3, #1
 800110a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800110c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001110:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001112:	2302      	movs	r3, #2
 8001114:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001116:	2303      	movs	r3, #3
 8001118:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800111a:	2301      	movs	r3, #1
 800111c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 800111e:	2314      	movs	r3, #20
 8001120:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001122:	2307      	movs	r3, #7
 8001124:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001126:	2302      	movs	r3, #2
 8001128:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800112a:	2302      	movs	r3, #2
 800112c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4618      	mov	r0, r3
 8001134:	f01a f8e2 	bl	801b2fc <HAL_RCC_OscConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800113e:	f000 f818 	bl	8001172 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001142:	230f      	movs	r3, #15
 8001144:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001146:	2303      	movs	r3, #3
 8001148:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001156:	463b      	mov	r3, r7
 8001158:	2104      	movs	r1, #4
 800115a:	4618      	mov	r0, r3
 800115c:	f01a fce2 	bl	801bb24 <HAL_RCC_ClockConfig>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001166:	f000 f804 	bl	8001172 <Error_Handler>
  }
}
 800116a:	bf00      	nop
 800116c:	3758      	adds	r7, #88	@ 0x58
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001172:	b480      	push	{r7}
 8001174:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001176:	b672      	cpsid	i
}
 8001178:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800117a:	bf00      	nop
 800117c:	e7fd      	b.n	800117a <Error_Handler+0x8>
	...

08001180 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001184:	4b1b      	ldr	r3, [pc, #108]	@ (80011f4 <MX_SPI3_Init+0x74>)
 8001186:	4a1c      	ldr	r2, [pc, #112]	@ (80011f8 <MX_SPI3_Init+0x78>)
 8001188:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800118a:	4b1a      	ldr	r3, [pc, #104]	@ (80011f4 <MX_SPI3_Init+0x74>)
 800118c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001190:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001192:	4b18      	ldr	r3, [pc, #96]	@ (80011f4 <MX_SPI3_Init+0x74>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001198:	4b16      	ldr	r3, [pc, #88]	@ (80011f4 <MX_SPI3_Init+0x74>)
 800119a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800119e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011a0:	4b14      	ldr	r3, [pc, #80]	@ (80011f4 <MX_SPI3_Init+0x74>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011a6:	4b13      	ldr	r3, [pc, #76]	@ (80011f4 <MX_SPI3_Init+0x74>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80011ac:	4b11      	ldr	r3, [pc, #68]	@ (80011f4 <MX_SPI3_Init+0x74>)
 80011ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011b2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80011b4:	4b0f      	ldr	r3, [pc, #60]	@ (80011f4 <MX_SPI3_Init+0x74>)
 80011b6:	2218      	movs	r2, #24
 80011b8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	@ (80011f4 <MX_SPI3_Init+0x74>)
 80011bc:	2200      	movs	r2, #0
 80011be:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	@ (80011f4 <MX_SPI3_Init+0x74>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011c6:	4b0b      	ldr	r3, [pc, #44]	@ (80011f4 <MX_SPI3_Init+0x74>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80011cc:	4b09      	ldr	r3, [pc, #36]	@ (80011f4 <MX_SPI3_Init+0x74>)
 80011ce:	2207      	movs	r2, #7
 80011d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011d2:	4b08      	ldr	r3, [pc, #32]	@ (80011f4 <MX_SPI3_Init+0x74>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80011d8:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <MX_SPI3_Init+0x74>)
 80011da:	2200      	movs	r2, #0
 80011dc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80011de:	4805      	ldr	r0, [pc, #20]	@ (80011f4 <MX_SPI3_Init+0x74>)
 80011e0:	f01b f9ce 	bl	801c580 <HAL_SPI_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80011ea:	f7ff ffc2 	bl	8001172 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	2000025c 	.word	0x2000025c
 80011f8:	40003c00 	.word	0x40003c00

080011fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08a      	sub	sp, #40	@ 0x28
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a17      	ldr	r2, [pc, #92]	@ (8001278 <HAL_SPI_MspInit+0x7c>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d128      	bne.n	8001270 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800121e:	4b17      	ldr	r3, [pc, #92]	@ (800127c <HAL_SPI_MspInit+0x80>)
 8001220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001222:	4a16      	ldr	r2, [pc, #88]	@ (800127c <HAL_SPI_MspInit+0x80>)
 8001224:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001228:	6593      	str	r3, [r2, #88]	@ 0x58
 800122a:	4b14      	ldr	r3, [pc, #80]	@ (800127c <HAL_SPI_MspInit+0x80>)
 800122c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800122e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001236:	4b11      	ldr	r3, [pc, #68]	@ (800127c <HAL_SPI_MspInit+0x80>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123a:	4a10      	ldr	r2, [pc, #64]	@ (800127c <HAL_SPI_MspInit+0x80>)
 800123c:	f043 0304 	orr.w	r3, r3, #4
 8001240:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001242:	4b0e      	ldr	r3, [pc, #56]	@ (800127c <HAL_SPI_MspInit+0x80>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001246:	f003 0304 	and.w	r3, r3, #4
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = PN5180_SCK_Pin|PN5180_MISO_Pin|PN5180_MOSI_Pin;
 800124e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001252:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125c:	2303      	movs	r3, #3
 800125e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001260:	2306      	movs	r3, #6
 8001262:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	4619      	mov	r1, r3
 800126a:	4805      	ldr	r0, [pc, #20]	@ (8001280 <HAL_SPI_MspInit+0x84>)
 800126c:	f019 fd3a 	bl	801ace4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001270:	bf00      	nop
 8001272:	3728      	adds	r7, #40	@ 0x28
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40003c00 	.word	0x40003c00
 800127c:	40021000 	.word	0x40021000
 8001280:	48000800 	.word	0x48000800

08001284 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128a:	4b0f      	ldr	r3, [pc, #60]	@ (80012c8 <HAL_MspInit+0x44>)
 800128c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800128e:	4a0e      	ldr	r2, [pc, #56]	@ (80012c8 <HAL_MspInit+0x44>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6613      	str	r3, [r2, #96]	@ 0x60
 8001296:	4b0c      	ldr	r3, [pc, #48]	@ (80012c8 <HAL_MspInit+0x44>)
 8001298:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a2:	4b09      	ldr	r3, [pc, #36]	@ (80012c8 <HAL_MspInit+0x44>)
 80012a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012a6:	4a08      	ldr	r2, [pc, #32]	@ (80012c8 <HAL_MspInit+0x44>)
 80012a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80012ae:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <HAL_MspInit+0x44>)
 80012b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	40021000 	.word	0x40021000

080012cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012d0:	bf00      	nop
 80012d2:	e7fd      	b.n	80012d0 <NMI_Handler+0x4>

080012d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d8:	bf00      	nop
 80012da:	e7fd      	b.n	80012d8 <HardFault_Handler+0x4>

080012dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e0:	bf00      	nop
 80012e2:	e7fd      	b.n	80012e0 <MemManage_Handler+0x4>

080012e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012e8:	bf00      	nop
 80012ea:	e7fd      	b.n	80012e8 <BusFault_Handler+0x4>

080012ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <UsageFault_Handler+0x4>

080012f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001322:	f019 fb0b 	bl	801a93c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}

0800132a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PN5180_IRQ_Pin);
 800132e:	2010      	movs	r0, #16
 8001330:	f019 ff5c 	bl	801b1ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}

08001338 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800133c:	4802      	ldr	r0, [pc, #8]	@ (8001348 <TIM2_IRQHandler+0x10>)
 800133e:	f01c f823 	bl	801d388 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000310 	.word	0x20000310

0800134c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001350:	4802      	ldr	r0, [pc, #8]	@ (800135c <USART1_IRQHandler+0x10>)
 8001352:	f01d f8ff 	bl	801e554 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200004b0 	.word	0x200004b0

08001360 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  return 1;
 8001364:	2301      	movs	r3, #1
}
 8001366:	4618      	mov	r0, r3
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <_kill>:

int _kill(int pid, int sig)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800137a:	f01f fadd 	bl	8020938 <__errno>
 800137e:	4603      	mov	r3, r0
 8001380:	2216      	movs	r2, #22
 8001382:	601a      	str	r2, [r3, #0]
  return -1;
 8001384:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001388:	4618      	mov	r0, r3
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <_exit>:

void _exit (int status)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001398:	f04f 31ff 	mov.w	r1, #4294967295
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7ff ffe7 	bl	8001370 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013a2:	bf00      	nop
 80013a4:	e7fd      	b.n	80013a2 <_exit+0x12>

080013a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b086      	sub	sp, #24
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	60f8      	str	r0, [r7, #12]
 80013ae:	60b9      	str	r1, [r7, #8]
 80013b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	e00a      	b.n	80013ce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013b8:	f3af 8000 	nop.w
 80013bc:	4601      	mov	r1, r0
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	1c5a      	adds	r2, r3, #1
 80013c2:	60ba      	str	r2, [r7, #8]
 80013c4:	b2ca      	uxtb	r2, r1
 80013c6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	3301      	adds	r3, #1
 80013cc:	617b      	str	r3, [r7, #20]
 80013ce:	697a      	ldr	r2, [r7, #20]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	dbf0      	blt.n	80013b8 <_read+0x12>
  }

  return len;
 80013d6:	687b      	ldr	r3, [r7, #4]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	e009      	b.n	8001406 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	1c5a      	adds	r2, r3, #1
 80013f6:	60ba      	str	r2, [r7, #8]
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f000 fb18 	bl	8001a30 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	3301      	adds	r3, #1
 8001404:	617b      	str	r3, [r7, #20]
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	429a      	cmp	r2, r3
 800140c:	dbf1      	blt.n	80013f2 <_write+0x12>
  }
  return len;
 800140e:	687b      	ldr	r3, [r7, #4]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <_close>:

int _close(int file)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001420:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001424:	4618      	mov	r0, r3
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001440:	605a      	str	r2, [r3, #4]
  return 0;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <_isatty>:

int _isatty(int file)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001458:	2301      	movs	r3, #1
}
 800145a:	4618      	mov	r0, r3
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001466:	b480      	push	{r7}
 8001468:	b085      	sub	sp, #20
 800146a:	af00      	add	r7, sp, #0
 800146c:	60f8      	str	r0, [r7, #12]
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001488:	4a14      	ldr	r2, [pc, #80]	@ (80014dc <_sbrk+0x5c>)
 800148a:	4b15      	ldr	r3, [pc, #84]	@ (80014e0 <_sbrk+0x60>)
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001494:	4b13      	ldr	r3, [pc, #76]	@ (80014e4 <_sbrk+0x64>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d102      	bne.n	80014a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800149c:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <_sbrk+0x64>)
 800149e:	4a12      	ldr	r2, [pc, #72]	@ (80014e8 <_sbrk+0x68>)
 80014a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014a2:	4b10      	ldr	r3, [pc, #64]	@ (80014e4 <_sbrk+0x64>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4413      	add	r3, r2
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d207      	bcs.n	80014c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014b0:	f01f fa42 	bl	8020938 <__errno>
 80014b4:	4603      	mov	r3, r0
 80014b6:	220c      	movs	r2, #12
 80014b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ba:	f04f 33ff 	mov.w	r3, #4294967295
 80014be:	e009      	b.n	80014d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014c0:	4b08      	ldr	r3, [pc, #32]	@ (80014e4 <_sbrk+0x64>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014c6:	4b07      	ldr	r3, [pc, #28]	@ (80014e4 <_sbrk+0x64>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4413      	add	r3, r2
 80014ce:	4a05      	ldr	r2, [pc, #20]	@ (80014e4 <_sbrk+0x64>)
 80014d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014d2:	68fb      	ldr	r3, [r7, #12]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	2000c000 	.word	0x2000c000
 80014e0:	00000400 	.word	0x00000400
 80014e4:	200002c0 	.word	0x200002c0
 80014e8:	20001d58 	.word	0x20001d58

080014ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014f0:	4b06      	ldr	r3, [pc, #24]	@ (800150c <SystemInit+0x20>)
 80014f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014f6:	4a05      	ldr	r2, [pc, #20]	@ (800150c <SystemInit+0x20>)
 80014f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b096      	sub	sp, #88	@ 0x58
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001516:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001522:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
 8001530:	611a      	str	r2, [r3, #16]
 8001532:	615a      	str	r2, [r3, #20]
 8001534:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	222c      	movs	r2, #44	@ 0x2c
 800153a:	2100      	movs	r1, #0
 800153c:	4618      	mov	r0, r3
 800153e:	f01f f9a9 	bl	8020894 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001542:	4b38      	ldr	r3, [pc, #224]	@ (8001624 <MX_TIM1_Init+0x114>)
 8001544:	4a38      	ldr	r2, [pc, #224]	@ (8001628 <MX_TIM1_Init+0x118>)
 8001546:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8001548:	4b36      	ldr	r3, [pc, #216]	@ (8001624 <MX_TIM1_Init+0x114>)
 800154a:	224f      	movs	r2, #79	@ 0x4f
 800154c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154e:	4b35      	ldr	r3, [pc, #212]	@ (8001624 <MX_TIM1_Init+0x114>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 370-1;
 8001554:	4b33      	ldr	r3, [pc, #204]	@ (8001624 <MX_TIM1_Init+0x114>)
 8001556:	f240 1271 	movw	r2, #369	@ 0x171
 800155a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800155c:	4b31      	ldr	r3, [pc, #196]	@ (8001624 <MX_TIM1_Init+0x114>)
 800155e:	2200      	movs	r2, #0
 8001560:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001562:	4b30      	ldr	r3, [pc, #192]	@ (8001624 <MX_TIM1_Init+0x114>)
 8001564:	2200      	movs	r2, #0
 8001566:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001568:	4b2e      	ldr	r3, [pc, #184]	@ (8001624 <MX_TIM1_Init+0x114>)
 800156a:	2200      	movs	r2, #0
 800156c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800156e:	482d      	ldr	r0, [pc, #180]	@ (8001624 <MX_TIM1_Init+0x114>)
 8001570:	f01b fd4c 	bl	801d00c <HAL_TIM_PWM_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800157a:	f7ff fdfa 	bl	8001172 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800157e:	2300      	movs	r3, #0
 8001580:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001582:	2300      	movs	r3, #0
 8001584:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001586:	2300      	movs	r3, #0
 8001588:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800158a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800158e:	4619      	mov	r1, r3
 8001590:	4824      	ldr	r0, [pc, #144]	@ (8001624 <MX_TIM1_Init+0x114>)
 8001592:	f01c fdbf 	bl	801e114 <HAL_TIMEx_MasterConfigSynchronization>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800159c:	f7ff fde9 	bl	8001172 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015a0:	2360      	movs	r3, #96	@ 0x60
 80015a2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 185;
 80015a4:	23b9      	movs	r3, #185	@ 0xb9
 80015a6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015a8:	2300      	movs	r3, #0
 80015aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ac:	2300      	movs	r3, #0
 80015ae:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015b0:	2300      	movs	r3, #0
 80015b2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015b4:	2300      	movs	r3, #0
 80015b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015b8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80015bc:	220c      	movs	r2, #12
 80015be:	4619      	mov	r1, r3
 80015c0:	4818      	ldr	r0, [pc, #96]	@ (8001624 <MX_TIM1_Init+0x114>)
 80015c2:	f01b ffe9 	bl	801d598 <HAL_TIM_PWM_ConfigChannel>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80015cc:	f7ff fdd1 	bl	8001172 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015d0:	2300      	movs	r3, #0
 80015d2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015e8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80015f6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001600:	1d3b      	adds	r3, r7, #4
 8001602:	4619      	mov	r1, r3
 8001604:	4807      	ldr	r0, [pc, #28]	@ (8001624 <MX_TIM1_Init+0x114>)
 8001606:	f01c fdeb 	bl	801e1e0 <HAL_TIMEx_ConfigBreakDeadTime>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8001610:	f7ff fdaf 	bl	8001172 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001614:	4803      	ldr	r0, [pc, #12]	@ (8001624 <MX_TIM1_Init+0x114>)
 8001616:	f000 f8e5 	bl	80017e4 <HAL_TIM_MspPostInit>

}
 800161a:	bf00      	nop
 800161c:	3758      	adds	r7, #88	@ 0x58
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	200002c4 	.word	0x200002c4
 8001628:	40012c00 	.word	0x40012c00

0800162c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b088      	sub	sp, #32
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001632:	f107 0310 	add.w	r3, r7, #16
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800164a:	4b1e      	ldr	r3, [pc, #120]	@ (80016c4 <MX_TIM2_Init+0x98>)
 800164c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001650:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8001652:	4b1c      	ldr	r3, [pc, #112]	@ (80016c4 <MX_TIM2_Init+0x98>)
 8001654:	224f      	movs	r2, #79	@ 0x4f
 8001656:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001658:	4b1a      	ldr	r3, [pc, #104]	@ (80016c4 <MX_TIM2_Init+0x98>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800165e:	4b19      	ldr	r3, [pc, #100]	@ (80016c4 <MX_TIM2_Init+0x98>)
 8001660:	f04f 32ff 	mov.w	r2, #4294967295
 8001664:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001666:	4b17      	ldr	r3, [pc, #92]	@ (80016c4 <MX_TIM2_Init+0x98>)
 8001668:	2200      	movs	r2, #0
 800166a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800166c:	4b15      	ldr	r3, [pc, #84]	@ (80016c4 <MX_TIM2_Init+0x98>)
 800166e:	2280      	movs	r2, #128	@ 0x80
 8001670:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001672:	4814      	ldr	r0, [pc, #80]	@ (80016c4 <MX_TIM2_Init+0x98>)
 8001674:	f01b fbaa 	bl	801cdcc <HAL_TIM_Base_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800167e:	f7ff fd78 	bl	8001172 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001682:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001686:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001688:	f107 0310 	add.w	r3, r7, #16
 800168c:	4619      	mov	r1, r3
 800168e:	480d      	ldr	r0, [pc, #52]	@ (80016c4 <MX_TIM2_Init+0x98>)
 8001690:	f01c f896 	bl	801d7c0 <HAL_TIM_ConfigClockSource>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800169a:	f7ff fd6a 	bl	8001172 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800169e:	2300      	movs	r3, #0
 80016a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	4619      	mov	r1, r3
 80016aa:	4806      	ldr	r0, [pc, #24]	@ (80016c4 <MX_TIM2_Init+0x98>)
 80016ac:	f01c fd32 	bl	801e114 <HAL_TIMEx_MasterConfigSynchronization>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80016b6:	f7ff fd5c 	bl	8001172 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016ba:	bf00      	nop
 80016bc:	3720      	adds	r7, #32
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000310 	.word	0x20000310

080016c8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ce:	1d3b      	adds	r3, r7, #4
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80016d8:	4b14      	ldr	r3, [pc, #80]	@ (800172c <MX_TIM6_Init+0x64>)
 80016da:	4a15      	ldr	r2, [pc, #84]	@ (8001730 <MX_TIM6_Init+0x68>)
 80016dc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 80016de:	4b13      	ldr	r3, [pc, #76]	@ (800172c <MX_TIM6_Init+0x64>)
 80016e0:	224f      	movs	r2, #79	@ 0x4f
 80016e2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e4:	4b11      	ldr	r3, [pc, #68]	@ (800172c <MX_TIM6_Init+0x64>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1;
 80016ea:	4b10      	ldr	r3, [pc, #64]	@ (800172c <MX_TIM6_Init+0x64>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f0:	4b0e      	ldr	r3, [pc, #56]	@ (800172c <MX_TIM6_Init+0x64>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80016f6:	480d      	ldr	r0, [pc, #52]	@ (800172c <MX_TIM6_Init+0x64>)
 80016f8:	f01b fb68 	bl	801cdcc <HAL_TIM_Base_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001702:	f7ff fd36 	bl	8001172 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001706:	2300      	movs	r3, #0
 8001708:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	4619      	mov	r1, r3
 8001712:	4806      	ldr	r0, [pc, #24]	@ (800172c <MX_TIM6_Init+0x64>)
 8001714:	f01c fcfe 	bl	801e114 <HAL_TIMEx_MasterConfigSynchronization>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800171e:	f7ff fd28 	bl	8001172 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001722:	bf00      	nop
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	2000035c 	.word	0x2000035c
 8001730:	40001000 	.word	0x40001000

08001734 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a0a      	ldr	r2, [pc, #40]	@ (800176c <HAL_TIM_PWM_MspInit+0x38>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d10b      	bne.n	800175e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001746:	4b0a      	ldr	r3, [pc, #40]	@ (8001770 <HAL_TIM_PWM_MspInit+0x3c>)
 8001748:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800174a:	4a09      	ldr	r2, [pc, #36]	@ (8001770 <HAL_TIM_PWM_MspInit+0x3c>)
 800174c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001750:	6613      	str	r3, [r2, #96]	@ 0x60
 8001752:	4b07      	ldr	r3, [pc, #28]	@ (8001770 <HAL_TIM_PWM_MspInit+0x3c>)
 8001754:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001756:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800175e:	bf00      	nop
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	40012c00 	.word	0x40012c00
 8001770:	40021000 	.word	0x40021000

08001774 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001784:	d114      	bne.n	80017b0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001786:	4b15      	ldr	r3, [pc, #84]	@ (80017dc <HAL_TIM_Base_MspInit+0x68>)
 8001788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800178a:	4a14      	ldr	r2, [pc, #80]	@ (80017dc <HAL_TIM_Base_MspInit+0x68>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	6593      	str	r3, [r2, #88]	@ 0x58
 8001792:	4b12      	ldr	r3, [pc, #72]	@ (80017dc <HAL_TIM_Base_MspInit+0x68>)
 8001794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	2105      	movs	r1, #5
 80017a2:	201c      	movs	r0, #28
 80017a4:	f019 f9e9 	bl	801ab7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017a8:	201c      	movs	r0, #28
 80017aa:	f019 fa02 	bl	801abb2 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80017ae:	e010      	b.n	80017d2 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM6)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a0a      	ldr	r2, [pc, #40]	@ (80017e0 <HAL_TIM_Base_MspInit+0x6c>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d10b      	bne.n	80017d2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80017ba:	4b08      	ldr	r3, [pc, #32]	@ (80017dc <HAL_TIM_Base_MspInit+0x68>)
 80017bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017be:	4a07      	ldr	r2, [pc, #28]	@ (80017dc <HAL_TIM_Base_MspInit+0x68>)
 80017c0:	f043 0310 	orr.w	r3, r3, #16
 80017c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80017c6:	4b05      	ldr	r3, [pc, #20]	@ (80017dc <HAL_TIM_Base_MspInit+0x68>)
 80017c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ca:	f003 0310 	and.w	r3, r3, #16
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	68bb      	ldr	r3, [r7, #8]
}
 80017d2:	bf00      	nop
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40021000 	.word	0x40021000
 80017e0:	40001000 	.word	0x40001000

080017e4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b088      	sub	sp, #32
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 030c 	add.w	r3, r7, #12
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a12      	ldr	r2, [pc, #72]	@ (800184c <HAL_TIM_MspPostInit+0x68>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d11d      	bne.n	8001842 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001806:	4b12      	ldr	r3, [pc, #72]	@ (8001850 <HAL_TIM_MspPostInit+0x6c>)
 8001808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800180a:	4a11      	ldr	r2, [pc, #68]	@ (8001850 <HAL_TIM_MspPostInit+0x6c>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001812:	4b0f      	ldr	r3, [pc, #60]	@ (8001850 <HAL_TIM_MspPostInit+0x6c>)
 8001814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Beep_Pin;
 800181e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001822:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001824:	2302      	movs	r3, #2
 8001826:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001828:	2302      	movs	r3, #2
 800182a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182c:	2300      	movs	r3, #0
 800182e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001830:	2301      	movs	r3, #1
 8001832:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Beep_GPIO_Port, &GPIO_InitStruct);
 8001834:	f107 030c 	add.w	r3, r7, #12
 8001838:	4619      	mov	r1, r3
 800183a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800183e:	f019 fa51 	bl	801ace4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001842:	bf00      	nop
 8001844:	3720      	adds	r7, #32
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40012c00 	.word	0x40012c00
 8001850:	40021000 	.word	0x40021000

08001854 <delay_us>:
}

/* USER CODE BEGIN 1 */
/* TIM6 是16位的计数器（65535），这里我们us级延时最大到60000 */
void delay_us(uint16_t us)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	80fb      	strh	r3, [r7, #6]
	uint16_t differ = 60000-us;
 800185e:	88fb      	ldrh	r3, [r7, #6]
 8001860:	f1c3 437f 	rsb	r3, r3, #4278190080	@ 0xff000000
 8001864:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 8001868:	f503 436a 	add.w	r3, r3, #59904	@ 0xea00
 800186c:	3360      	adds	r3, #96	@ 0x60
 800186e:	81fb      	strh	r3, [r7, #14]

	// 打开定时器
	HAL_TIM_Base_Start(&htim6);
 8001870:	480b      	ldr	r0, [pc, #44]	@ (80018a0 <delay_us+0x4c>)
 8001872:	f01b fb03 	bl	801ce7c <HAL_TIM_Base_Start>

	// 设置CNT每次重置后的初始值，然后再向上计数
	__HAL_TIM_SET_COUNTER(&htim6, differ);
 8001876:	4b0a      	ldr	r3, [pc, #40]	@ (80018a0 <delay_us+0x4c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	89fa      	ldrh	r2, [r7, #14]
 800187c:	625a      	str	r2, [r3, #36]	@ 0x24

	while( differ < 60000 )
 800187e:	e003      	b.n	8001888 <delay_us+0x34>
	{
		// 一直读CNT的值，检查是否过了us时间
		differ = __HAL_TIM_GET_COUNTER(&htim6);
 8001880:	4b07      	ldr	r3, [pc, #28]	@ (80018a0 <delay_us+0x4c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001886:	81fb      	strh	r3, [r7, #14]
	while( differ < 60000 )
 8001888:	89fb      	ldrh	r3, [r7, #14]
 800188a:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 800188e:	4293      	cmp	r3, r2
 8001890:	d9f6      	bls.n	8001880 <delay_us+0x2c>
	}

	// 关闭定时器
	HAL_TIM_Base_Stop(&htim6);
 8001892:	4803      	ldr	r0, [pc, #12]	@ (80018a0 <delay_us+0x4c>)
 8001894:	f01b fb3e 	bl	801cf14 <HAL_TIM_Base_Stop>
}
 8001898:	bf00      	nop
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	2000035c 	.word	0x2000035c

080018a4 <beep_start>:

/* 让蜂鸣器响 times 次，每次 interval 秒*/
void beep_start(uint8_t times, uint16_t interval)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	460a      	mov	r2, r1
 80018ae:	71fb      	strb	r3, [r7, #7]
 80018b0:	4613      	mov	r3, r2
 80018b2:	80bb      	strh	r3, [r7, #4]
	while( times -- )
 80018b4:	e019      	b.n	80018ea <beep_start+0x46>
	{
		/* Start buzzer:通过 定时器 TIM1 的通道 4（TIM_CHANNEL_4） 产生 PWM 信号，从而让蜂鸣器响起来 */
		if( HAL_TIM_PWM_Start( &htim1, TIM_CHANNEL_4) != HAL_OK )
 80018b6:	210c      	movs	r1, #12
 80018b8:	4811      	ldr	r0, [pc, #68]	@ (8001900 <beep_start+0x5c>)
 80018ba:	f01b fbff 	bl	801d0bc <HAL_TIM_PWM_Start>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <beep_start+0x24>
		{
			/* Start Error */
			Error_Handler();
 80018c4:	f7ff fc55 	bl	8001172 <Error_Handler>
		}
		/* 让蜂鸣器 响 interval 毫秒 */
		HAL_Delay( interval);
 80018c8:	88bb      	ldrh	r3, [r7, #4]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f019 f856 	bl	801a97c <HAL_Delay>

		/* Stop buzzer：静音蜂鸣器 */
		if( HAL_TIM_PWM_Stop( &htim1, TIM_CHANNEL_4 ) != HAL_OK )
 80018d0:	210c      	movs	r1, #12
 80018d2:	480b      	ldr	r0, [pc, #44]	@ (8001900 <beep_start+0x5c>)
 80018d4:	f01b fcd0 	bl	801d278 <HAL_TIM_PWM_Stop>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <beep_start+0x3e>
		{
			/* Start Error */
			Error_Handler();
 80018de:	f7ff fc48 	bl	8001172 <Error_Handler>
		}
		HAL_Delay(interval);
 80018e2:	88bb      	ldrh	r3, [r7, #4]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f019 f849 	bl	801a97c <HAL_Delay>
	while( times -- )
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	1e5a      	subs	r2, r3, #1
 80018ee:	71fa      	strb	r2, [r7, #7]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1e0      	bne.n	80018b6 <beep_start+0x12>
	}
}
 80018f4:	bf00      	nop
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	200002c4 	.word	0x200002c4

08001904 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001908:	4b16      	ldr	r3, [pc, #88]	@ (8001964 <MX_USART1_UART_Init+0x60>)
 800190a:	4a17      	ldr	r2, [pc, #92]	@ (8001968 <MX_USART1_UART_Init+0x64>)
 800190c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800190e:	4b15      	ldr	r3, [pc, #84]	@ (8001964 <MX_USART1_UART_Init+0x60>)
 8001910:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001914:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001916:	4b13      	ldr	r3, [pc, #76]	@ (8001964 <MX_USART1_UART_Init+0x60>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800191c:	4b11      	ldr	r3, [pc, #68]	@ (8001964 <MX_USART1_UART_Init+0x60>)
 800191e:	2200      	movs	r2, #0
 8001920:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001922:	4b10      	ldr	r3, [pc, #64]	@ (8001964 <MX_USART1_UART_Init+0x60>)
 8001924:	2200      	movs	r2, #0
 8001926:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001928:	4b0e      	ldr	r3, [pc, #56]	@ (8001964 <MX_USART1_UART_Init+0x60>)
 800192a:	220c      	movs	r2, #12
 800192c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800192e:	4b0d      	ldr	r3, [pc, #52]	@ (8001964 <MX_USART1_UART_Init+0x60>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001934:	4b0b      	ldr	r3, [pc, #44]	@ (8001964 <MX_USART1_UART_Init+0x60>)
 8001936:	2200      	movs	r2, #0
 8001938:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800193a:	4b0a      	ldr	r3, [pc, #40]	@ (8001964 <MX_USART1_UART_Init+0x60>)
 800193c:	2200      	movs	r2, #0
 800193e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001940:	4b08      	ldr	r3, [pc, #32]	@ (8001964 <MX_USART1_UART_Init+0x60>)
 8001942:	2200      	movs	r2, #0
 8001944:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001946:	4807      	ldr	r0, [pc, #28]	@ (8001964 <MX_USART1_UART_Init+0x60>)
 8001948:	f01c fce0 	bl	801e30c <HAL_UART_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001952:	f7ff fc0e 	bl	8001172 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_UART_Receive_IT(&huart1, &s_uart1_rxch, 1);
 8001956:	2201      	movs	r2, #1
 8001958:	4904      	ldr	r1, [pc, #16]	@ (800196c <MX_USART1_UART_Init+0x68>)
 800195a:	4802      	ldr	r0, [pc, #8]	@ (8001964 <MX_USART1_UART_Init+0x60>)
 800195c:	f01c fdae 	bl	801e4bc <HAL_UART_Receive_IT>
  /* USER CODE END USART1_Init 2 */

}
 8001960:	bf00      	nop
 8001962:	bd80      	pop	{r7, pc}
 8001964:	200004b0 	.word	0x200004b0
 8001968:	40013800 	.word	0x40013800
 800196c:	200003a8 	.word	0x200003a8

08001970 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b0a0      	sub	sp, #128	@ 0x80
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001978:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001988:	f107 0310 	add.w	r3, r7, #16
 800198c:	225c      	movs	r2, #92	@ 0x5c
 800198e:	2100      	movs	r1, #0
 8001990:	4618      	mov	r0, r3
 8001992:	f01e ff7f 	bl	8020894 <memset>
  if(uartHandle->Instance==USART1)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a23      	ldr	r2, [pc, #140]	@ (8001a28 <HAL_UART_MspInit+0xb8>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d13f      	bne.n	8001a20 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80019a0:	2301      	movs	r3, #1
 80019a2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80019a4:	2300      	movs	r3, #0
 80019a6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019a8:	f107 0310 	add.w	r3, r7, #16
 80019ac:	4618      	mov	r0, r3
 80019ae:	f01a fadd 	bl	801bf6c <HAL_RCCEx_PeriphCLKConfig>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019b8:	f7ff fbdb 	bl	8001172 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019bc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a2c <HAL_UART_MspInit+0xbc>)
 80019be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019c0:	4a1a      	ldr	r2, [pc, #104]	@ (8001a2c <HAL_UART_MspInit+0xbc>)
 80019c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019c6:	6613      	str	r3, [r2, #96]	@ 0x60
 80019c8:	4b18      	ldr	r3, [pc, #96]	@ (8001a2c <HAL_UART_MspInit+0xbc>)
 80019ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d4:	4b15      	ldr	r3, [pc, #84]	@ (8001a2c <HAL_UART_MspInit+0xbc>)
 80019d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d8:	4a14      	ldr	r2, [pc, #80]	@ (8001a2c <HAL_UART_MspInit+0xbc>)
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019e0:	4b12      	ldr	r3, [pc, #72]	@ (8001a2c <HAL_UART_MspInit+0xbc>)
 80019e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019ec:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80019f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f2:	2302      	movs	r3, #2
 80019f4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fa:	2303      	movs	r3, #3
 80019fc:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019fe:	2307      	movs	r3, #7
 8001a00:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a02:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001a06:	4619      	mov	r1, r3
 8001a08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a0c:	f019 f96a 	bl	801ace4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a10:	2200      	movs	r2, #0
 8001a12:	2100      	movs	r1, #0
 8001a14:	2025      	movs	r0, #37	@ 0x25
 8001a16:	f019 f8b0 	bl	801ab7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a1a:	2025      	movs	r0, #37	@ 0x25
 8001a1c:	f019 f8c9 	bl	801abb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001a20:	bf00      	nop
 8001a22:	3780      	adds	r7, #128	@ 0x80
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40013800 	.word	0x40013800
 8001a2c:	40021000 	.word	0x40021000

08001a30 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define	PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001a38:	1d39      	adds	r1, r7, #4
 8001a3a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a3e:	2201      	movs	r2, #1
 8001a40:	4803      	ldr	r0, [pc, #12]	@ (8001a50 <__io_putchar+0x20>)
 8001a42:	f01c fcb1 	bl	801e3a8 <HAL_UART_Transmit>
	return ch;
 8001a46:	687b      	ldr	r3, [r7, #4]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	200004b0 	.word	0x200004b0

08001a54 <HAL_UART_RxCpltCallback>:

/* 串口->cpu，串口中断回调函数，要是 g_uart1_rxbuf 还没有满，就将中断收到的1字节数据 s_uart1_rxch 存储到 g_uart1_rxbuf 中，并计数+1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
	if( huart->Instance == USART1 )
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a0d      	ldr	r2, [pc, #52]	@ (8001a98 <HAL_UART_RxCpltCallback+0x44>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d113      	bne.n	8001a8e <HAL_UART_RxCpltCallback+0x3a>
	{
		 printf("UART1 received: %s\r\n", g_uart1_rxbuf); // 调试打印
 8001a66:	490d      	ldr	r1, [pc, #52]	@ (8001a9c <HAL_UART_RxCpltCallback+0x48>)
 8001a68:	480d      	ldr	r0, [pc, #52]	@ (8001aa0 <HAL_UART_RxCpltCallback+0x4c>)
 8001a6a:	f01e fdb3 	bl	80205d4 <iprintf>
		/* buf 还有空间 */
		if( g_uart1_bytes < sizeof(g_uart1_rxbuf) )
		{
			g_uart1_rxbuf[g_uart1_bytes++] = s_uart1_rxch;
 8001a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa4 <HAL_UART_RxCpltCallback+0x50>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	1c5a      	adds	r2, r3, #1
 8001a74:	b2d1      	uxtb	r1, r2
 8001a76:	4a0b      	ldr	r2, [pc, #44]	@ (8001aa4 <HAL_UART_RxCpltCallback+0x50>)
 8001a78:	7011      	strb	r1, [r2, #0]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa8 <HAL_UART_RxCpltCallback+0x54>)
 8001a7e:	7819      	ldrb	r1, [r3, #0]
 8001a80:	4b06      	ldr	r3, [pc, #24]	@ (8001a9c <HAL_UART_RxCpltCallback+0x48>)
 8001a82:	5499      	strb	r1, [r3, r2]
		}
		/* 使能下一次中断接收 */
		HAL_UART_Receive_IT(&huart1, &s_uart1_rxch, 1);
 8001a84:	2201      	movs	r2, #1
 8001a86:	4908      	ldr	r1, [pc, #32]	@ (8001aa8 <HAL_UART_RxCpltCallback+0x54>)
 8001a88:	4808      	ldr	r0, [pc, #32]	@ (8001aac <HAL_UART_RxCpltCallback+0x58>)
 8001a8a:	f01c fd17 	bl	801e4bc <HAL_UART_Receive_IT>
	}
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40013800 	.word	0x40013800
 8001a9c:	200003ac 	.word	0x200003ac
 8001aa0:	08022504 	.word	0x08022504
 8001aa4:	200004ac 	.word	0x200004ac
 8001aa8:	200003a8 	.word	0x200003a8
 8001aac:	200004b0 	.word	0x200004b0

08001ab0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ab0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ae8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ab4:	f7ff fd1a 	bl	80014ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ab8:	480c      	ldr	r0, [pc, #48]	@ (8001aec <LoopForever+0x6>)
  ldr r1, =_edata
 8001aba:	490d      	ldr	r1, [pc, #52]	@ (8001af0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001abc:	4a0d      	ldr	r2, [pc, #52]	@ (8001af4 <LoopForever+0xe>)
  movs r3, #0
 8001abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac0:	e002      	b.n	8001ac8 <LoopCopyDataInit>

08001ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ac6:	3304      	adds	r3, #4

08001ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001acc:	d3f9      	bcc.n	8001ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ace:	4a0a      	ldr	r2, [pc, #40]	@ (8001af8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ad0:	4c0a      	ldr	r4, [pc, #40]	@ (8001afc <LoopForever+0x16>)
  movs r3, #0
 8001ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad4:	e001      	b.n	8001ada <LoopFillZerobss>

08001ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad8:	3204      	adds	r2, #4

08001ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001adc:	d3fb      	bcc.n	8001ad6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ade:	f01e ff31 	bl	8020944 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ae2:	f7ff fad7 	bl	8001094 <main>

08001ae6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ae6:	e7fe      	b.n	8001ae6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ae8:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001aec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af0:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 8001af4:	08023edc 	.word	0x08023edc
  ldr r2, =_sbss
 8001af8:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8001afc:	20001d54 	.word	0x20001d54

08001b00 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b00:	e7fe      	b.n	8001b00 <ADC1_IRQHandler>
	...

08001b04 <nfc_discovery_main>:
/*******************************************************************************
**   Code
*******************************************************************************/

int nfc_discovery_main(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
    do
    {
        phStatus_t status = PH_ERR_INTERNAL_ERROR;
 8001b0a:	237f      	movs	r3, #127	@ 0x7f
 8001b0c:	82fb      	strh	r3, [r7, #22]
        phNfcLib_Status_t     dwStatus;
#ifdef PH_PLATFORM_HAS_ICFRONTEND
        phNfcLib_AppContext_t AppContext = {0};
 8001b0e:	1d3b      	adds	r3, r7, #4
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
#ifndef PH_OSAL_NULLOS
        phOsal_ThreadObj_t DiscLoop;
#endif /* PH_OSAL_NULLOS */

        /* 1.CPU初始化：Perform Controller specific initialization. */
        phApp_CPU_Init();
 8001b18:	f001 fe46 	bl	80037a8 <phApp_CPU_Init>

        /* Perform OSAL Initialization. */
//        (void)phOsal_Init(); // STM32的HAL_Ini()中已经配置了Systick，通过HAL_InitTick()，不需要OSAL的定时器

        DEBUG_PRINTF("\n DiscoveryLoop Example: \n");
 8001b1c:	484c      	ldr	r0, [pc, #304]	@ (8001c50 <nfc_discovery_main+0x14c>)
 8001b1e:	f01e fdc9 	bl	80206b4 <puts>
 8001b22:	4b4c      	ldr	r3, [pc, #304]	@ (8001c54 <nfc_discovery_main+0x150>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f01e fc7d 	bl	8020428 <fflush>

        /* 3.IC前端初始化 */
#ifdef PH_PLATFORM_HAS_ICFRONTEND
        status = phbalReg_Init(&sBalParams, sizeof(phbalReg_Type_t));
 8001b2e:	2104      	movs	r1, #4
 8001b30:	4849      	ldr	r0, [pc, #292]	@ (8001c58 <nfc_discovery_main+0x154>)
 8001b32:	f018 fc67 	bl	801a404 <phbalReg_Init>
 8001b36:	4603      	mov	r3, r0
 8001b38:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8001b3a:	8afb      	ldrh	r3, [r7, #22]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00b      	beq.n	8001b58 <nfc_discovery_main+0x54>
 8001b40:	8afb      	ldrh	r3, [r7, #22]
 8001b42:	461a      	mov	r2, r3
 8001b44:	218e      	movs	r1, #142	@ 0x8e
 8001b46:	4845      	ldr	r0, [pc, #276]	@ (8001c5c <nfc_discovery_main+0x158>)
 8001b48:	f01e fd44 	bl	80205d4 <iprintf>
 8001b4c:	4b41      	ldr	r3, [pc, #260]	@ (8001c54 <nfc_discovery_main+0x150>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f01e fc68 	bl	8020428 <fflush>

        AppContext.pBalDataparams = &sBalParams;
 8001b58:	4b3f      	ldr	r3, [pc, #252]	@ (8001c58 <nfc_discovery_main+0x154>)
 8001b5a:	607b      	str	r3, [r7, #4]
        dwStatus = phNfcLib_SetContext(&AppContext);
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f005 f9e6 	bl	8006f30 <phNfcLib_SetContext>
 8001b64:	6138      	str	r0, [r7, #16]
        CHECK_NFCLIB_STATUS(dwStatus);
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d00a      	beq.n	8001b82 <nfc_discovery_main+0x7e>
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	2192      	movs	r1, #146	@ 0x92
 8001b70:	483b      	ldr	r0, [pc, #236]	@ (8001c60 <nfc_discovery_main+0x15c>)
 8001b72:	f01e fd2f 	bl	80205d4 <iprintf>
 8001b76:	4b37      	ldr	r3, [pc, #220]	@ (8001c54 <nfc_discovery_main+0x150>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f01e fc53 	bl	8020428 <fflush>
#endif

        /* 4.初始化NFC库：Initialize library */
        dwStatus = phNfcLib_Init();
 8001b82:	f005 fc5f 	bl	8007444 <phNfcLib_Init>
 8001b86:	6138      	str	r0, [r7, #16]
        CHECK_NFCLIB_STATUS(dwStatus);
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d00a      	beq.n	8001ba4 <nfc_discovery_main+0xa0>
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	2197      	movs	r1, #151	@ 0x97
 8001b92:	4833      	ldr	r0, [pc, #204]	@ (8001c60 <nfc_discovery_main+0x15c>)
 8001b94:	f01e fd1e 	bl	80205d4 <iprintf>
 8001b98:	4b2e      	ldr	r3, [pc, #184]	@ (8001c54 <nfc_discovery_main+0x150>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f01e fc42 	bl	8020428 <fflush>
        if(dwStatus != PH_NFCLIB_STATUS_SUCCESS) break;
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d142      	bne.n	8001c30 <nfc_discovery_main+0x12c>

        /* 5. 获取关键组件指针：Set the generic pointer */
        pHal = phNfcLib_GetDataParams(PH_COMP_HAL);			// 硬件抽象层
 8001baa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001bae:	f005 fd0d 	bl	80075cc <phNfcLib_GetDataParams>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	4a2b      	ldr	r2, [pc, #172]	@ (8001c64 <nfc_discovery_main+0x160>)
 8001bb6:	6013      	str	r3, [r2, #0]
        pDiscLoop = phNfcLib_GetDataParams(PH_COMP_AC_DISCLOOP);	// Discovery Loop 组件
 8001bb8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001bbc:	f005 fd06 	bl	80075cc <phNfcLib_GetDataParams>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	4a29      	ldr	r2, [pc, #164]	@ (8001c68 <nfc_discovery_main+0x164>)
 8001bc4:	6013      	str	r3, [r2, #0]

        /* 6.初始化其他组件：Initialize other components that are not initialized by NFCLIB and configure Discovery Loop. */
        status = phApp_Comp_Init(pDiscLoop);
 8001bc6:	4b28      	ldr	r3, [pc, #160]	@ (8001c68 <nfc_discovery_main+0x164>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f001 fdfe 	bl	80037cc <phApp_Comp_Init>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8001bd4:	8afb      	ldrh	r3, [r7, #22]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d00b      	beq.n	8001bf2 <nfc_discovery_main+0xee>
 8001bda:	8afb      	ldrh	r3, [r7, #22]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	21a0      	movs	r1, #160	@ 0xa0
 8001be0:	481e      	ldr	r0, [pc, #120]	@ (8001c5c <nfc_discovery_main+0x158>)
 8001be2:	f01e fcf7 	bl	80205d4 <iprintf>
 8001be6:	4b1b      	ldr	r3, [pc, #108]	@ (8001c54 <nfc_discovery_main+0x150>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f01e fc1b 	bl	8020428 <fflush>
        if(status != PH_ERR_SUCCESS) break;
 8001bf2:	8afb      	ldrh	r3, [r7, #22]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d11d      	bne.n	8001c34 <nfc_discovery_main+0x130>

        /* 7.配置中断：Perform Platform Init */
        status = phApp_Configure_IRQ();
 8001bf8:	f001 fe1a 	bl	8003830 <phApp_Configure_IRQ>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8001c00:	8afb      	ldrh	r3, [r7, #22]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00b      	beq.n	8001c1e <nfc_discovery_main+0x11a>
 8001c06:	8afb      	ldrh	r3, [r7, #22]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	21a5      	movs	r1, #165	@ 0xa5
 8001c0c:	4813      	ldr	r0, [pc, #76]	@ (8001c5c <nfc_discovery_main+0x158>)
 8001c0e:	f01e fce1 	bl	80205d4 <iprintf>
 8001c12:	4b10      	ldr	r3, [pc, #64]	@ (8001c54 <nfc_discovery_main+0x150>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f01e fc05 	bl	8020428 <fflush>
        if(status != PH_ERR_SUCCESS) break;
 8001c1e:	8afb      	ldrh	r3, [r7, #22]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d109      	bne.n	8001c38 <nfc_discovery_main+0x134>
        phOsal_StartScheduler();

        DEBUG_PRINTF("RTOS Error : Scheduler exited. \n");
#else
        /* 8.启动DiscoveryLoop主任务 */
        (void)DiscoveryLoop_Demo(pDiscLoop);
 8001c24:	4b10      	ldr	r3, [pc, #64]	@ (8001c68 <nfc_discovery_main+0x164>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f000 f821 	bl	8001c70 <DiscoveryLoop_Demo>
 8001c2e:	e004      	b.n	8001c3a <nfc_discovery_main+0x136>
        if(dwStatus != PH_NFCLIB_STATUS_SUCCESS) break;
 8001c30:	bf00      	nop
 8001c32:	e002      	b.n	8001c3a <nfc_discovery_main+0x136>
        if(status != PH_ERR_SUCCESS) break;
 8001c34:	bf00      	nop
 8001c36:	e000      	b.n	8001c3a <nfc_discovery_main+0x136>
        if(status != PH_ERR_SUCCESS) break;
 8001c38:	bf00      	nop
#endif
    } while(0);

    while(bInfLoop); /* Comes here if initialization failure or scheduler exit due to error */
 8001c3a:	bf00      	nop
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c6c <nfc_discovery_main+0x168>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1fa      	bne.n	8001c3c <nfc_discovery_main+0x138>

    return 0;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3718      	adds	r7, #24
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	0802251c 	.word	0x0802251c
 8001c54:	20000084 	.word	0x20000084
 8001c58:	200008dc 	.word	0x200008dc
 8001c5c:	08022538 	.word	0x08022538
 8001c60:	080225a0 	.word	0x080225a0
 8001c64:	200008e0 	.word	0x200008e0
 8001c68:	20000538 	.word	0x20000538
 8001c6c:	20000022 	.word	0x20000022

08001c70 <DiscoveryLoop_Demo>:
* 用于持续检测是否有NFC标签进入天线区域，并报告检测到的NFC技术类型
* \param   pDataParams      The discovery loop data parameters
* \note    This function will never return
*/
void DiscoveryLoop_Demo(void  *pDataParams)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
    phStatus_t    status, statustmp;
    uint16_t      wEntryPoint;
    phacDiscLoop_Profile_t bProfile = PHAC_DISCLOOP_PROFILE_UNKNOWN;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	737b      	strb	r3, [r7, #13]
    /* This call shall allocate secure context before calling any secure function,
     * when FreeRtos trust zone is enabled.
     * */
//    phOsal_ThreadSecureStack( 512 ); // 这是FreeRTOS Trust Zone相关的，裸机不需要

    DEBUG_PRINTF("Entering Discovery Loop Demo...\r\n");
 8001c7c:	4876      	ldr	r0, [pc, #472]	@ (8001e58 <DiscoveryLoop_Demo+0x1e8>)
 8001c7e:	f01e fd19 	bl	80206b4 <puts>
 8001c82:	4b76      	ldr	r3, [pc, #472]	@ (8001e5c <DiscoveryLoop_Demo+0x1ec>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f01e fbcd 	bl	8020428 <fflush>
#ifdef ENABLE_DISC_CONFIG

#ifndef ENABLE_EMVCO_PROF
    bProfile = PHAC_DISCLOOP_PROFILE_NFC;
#else
    bProfile = PHAC_DISCLOOP_PROFILE_EMVCO;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	737b      	strb	r3, [r7, #13]
#endif
    /* Load selected profile for Discovery loop */
    LoadProfile(bProfile);
 8001c92:	7b7b      	ldrb	r3, [r7, #13]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f000 fc03 	bl	80024a0 <LoadProfile>
#endif /* ENABLE_DISC_CONFIG */

/* 确保初始化PN5180芯片用于监听模式的参数设置正确 */
#ifdef NXPBUILD__PHHAL_HW_TARGET	// 启用了底层HAL硬件目标平台的支持(PN5180)
    /* Initialize the setting for Listen Mode */
    status = phApp_HALConfigAutoColl();
 8001c9a:	f001 fddf 	bl	800385c <phApp_HALConfigAutoColl>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	817b      	strh	r3, [r7, #10]
    CHECK_STATUS(status);
 8001ca2:	897b      	ldrh	r3, [r7, #10]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d00b      	beq.n	8001cc0 <DiscoveryLoop_Demo+0x50>
 8001ca8:	897b      	ldrh	r3, [r7, #10]
 8001caa:	461a      	mov	r2, r3
 8001cac:	21e3      	movs	r1, #227	@ 0xe3
 8001cae:	486c      	ldr	r0, [pc, #432]	@ (8001e60 <DiscoveryLoop_Demo+0x1f0>)
 8001cb0:	f01e fc90 	bl	80205d4 <iprintf>
 8001cb4:	4b69      	ldr	r3, [pc, #420]	@ (8001e5c <DiscoveryLoop_Demo+0x1ec>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f01e fbb4 	bl	8020428 <fflush>
#endif /* NXPBUILD__PHHAL_HW_TARGET */

    /* 2.获取当前的轮询技术支持（例如启用了14443A、15693等）Get Poll Configuration */
    status = phacDiscLoop_GetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_PAS_POLL_TECH_CFG, &bSavePollTechCfg);
 8001cc0:	4a68      	ldr	r2, [pc, #416]	@ (8001e64 <DiscoveryLoop_Demo+0x1f4>)
 8001cc2:	218c      	movs	r1, #140	@ 0x8c
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f006 ff05 	bl	8008ad4 <phacDiscLoop_Sw_GetConfig>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	817b      	strh	r3, [r7, #10]
    CHECK_STATUS(status);
 8001cce:	897b      	ldrh	r3, [r7, #10]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00b      	beq.n	8001cec <DiscoveryLoop_Demo+0x7c>
 8001cd4:	897b      	ldrh	r3, [r7, #10]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	21e8      	movs	r1, #232	@ 0xe8
 8001cda:	4861      	ldr	r0, [pc, #388]	@ (8001e60 <DiscoveryLoop_Demo+0x1f0>)
 8001cdc:	f01e fc7a 	bl	80205d4 <iprintf>
 8001ce0:	4b5e      	ldr	r3, [pc, #376]	@ (8001e5c <DiscoveryLoop_Demo+0x1ec>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f01e fb9e 	bl	8020428 <fflush>

    /* 3.设置为轮询而不是监听 Start in poll mode */
    wEntryPoint = PHAC_DISCLOOP_ENTRY_POINT_POLL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	81fb      	strh	r3, [r7, #14]
    status = PHAC_DISCLOOP_LPCD_NO_TECH_DETECTED;
 8001cf0:	2386      	movs	r3, #134	@ 0x86
 8001cf2:	817b      	strh	r3, [r7, #10]

    /* 4. 关闭射频场，准备进行新一轮发现（防止错误识别）Switch off RF field */
    statustmp = phhalHw_FieldOff(pHal);
 8001cf4:	4b5c      	ldr	r3, [pc, #368]	@ (8001e68 <DiscoveryLoop_Demo+0x1f8>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f00c fc6f 	bl	800e5dc <phhalHw_Pn5180_FieldOff>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	813b      	strh	r3, [r7, #8]
    CHECK_STATUS(statustmp);
 8001d02:	893b      	ldrh	r3, [r7, #8]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d00b      	beq.n	8001d20 <DiscoveryLoop_Demo+0xb0>
 8001d08:	893b      	ldrh	r3, [r7, #8]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	21f0      	movs	r1, #240	@ 0xf0
 8001d0e:	4854      	ldr	r0, [pc, #336]	@ (8001e60 <DiscoveryLoop_Demo+0x1f0>)
 8001d10:	f01e fc60 	bl	80205d4 <iprintf>
 8001d14:	4b51      	ldr	r3, [pc, #324]	@ (8001e5c <DiscoveryLoop_Demo+0x1ec>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f01e fb84 	bl	8020428 <fflush>

//1    TestRFField();

    while(1)
    {
    	DEBUG_PRINTF("Poll cycle start...\r\n");
 8001d20:	4852      	ldr	r0, [pc, #328]	@ (8001e6c <DiscoveryLoop_Demo+0x1fc>)
 8001d22:	f01e fcc7 	bl	80206b4 <puts>
 8001d26:	4b4d      	ldr	r3, [pc, #308]	@ (8001e5c <DiscoveryLoop_Demo+0x1ec>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f01e fb7b 	bl	8020428 <fflush>

        /* 每一次轮询开始前将轮询状态设为“检测中”，有些场景中如果上一次卡片未移除，需设置成“removal”状态
         * Before polling set Discovery Poll State to Detection , as later in the code it can be changed to e.g. PHAC_DISCLOOP_POLL_STATE_REMOVAL*/
        statustmp = phacDiscLoop_SetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_NEXT_POLL_STATE, PHAC_DISCLOOP_POLL_STATE_DETECTION);
 8001d32:	2201      	movs	r2, #1
 8001d34:	2184      	movs	r1, #132	@ 0x84
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f006 fa4e 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	813b      	strh	r3, [r7, #8]
        CHECK_STATUS(statustmp);
 8001d40:	893b      	ldrh	r3, [r7, #8]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d00b      	beq.n	8001d5e <DiscoveryLoop_Demo+0xee>
 8001d46:	893b      	ldrh	r3, [r7, #8]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	21fc      	movs	r1, #252	@ 0xfc
 8001d4c:	4844      	ldr	r0, [pc, #272]	@ (8001e60 <DiscoveryLoop_Demo+0x1f0>)
 8001d4e:	f01e fc41 	bl	80205d4 <iprintf>
 8001d52:	4b42      	ldr	r3, [pc, #264]	@ (8001e5c <DiscoveryLoop_Demo+0x1ec>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f01e fb65 	bl	8020428 <fflush>
#endif /* PH_EXAMPLE1_LPCD_ENABLE*/

        /* 启动轮询核心函数
         * Start discovery loop */
        /* PROGRAM BLOCK HERE at first, problem is solved */
        status = phacDiscLoop_Run(pDataParams, wEntryPoint);
 8001d5e:	89fb      	ldrh	r3, [r7, #14]
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	4619      	mov	r1, r3
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f006 f965 	bl	8008034 <phacDiscLoop_Sw_Run>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	817b      	strh	r3, [r7, #10]
        /* 输出：0x4080  或者  0x4083, 是否表示错误? 检测到卡返回0x408B */
        DEBUG_PRINTF("Discovery result: 0x%04X\r\n", status);
 8001d6e:	897b      	ldrh	r3, [r7, #10]
 8001d70:	4619      	mov	r1, r3
 8001d72:	483f      	ldr	r0, [pc, #252]	@ (8001e70 <DiscoveryLoop_Demo+0x200>)
 8001d74:	f01e fc2e 	bl	80205d4 <iprintf>
 8001d78:	4b38      	ldr	r3, [pc, #224]	@ (8001e5c <DiscoveryLoop_Demo+0x1ec>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f01e fb52 	bl	8020428 <fflush>

        if(bProfile == PHAC_DISCLOOP_PROFILE_EMVCO)
 8001d84:	7b7b      	ldrb	r3, [r7, #13]
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d105      	bne.n	8001d96 <DiscoveryLoop_Demo+0x126>
        {
#if defined(ENABLE_EMVCO_PROF)

            EmvcoProfileProcess(pDataParams, status);
 8001d8a:	897b      	ldrh	r3, [r7, #10]
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f001 f84a 	bl	8002e28 <EmvcoProfileProcess>
 8001d94:	e7c4      	b.n	8001d20 <DiscoveryLoop_Demo+0xb0>

#endif /* ENABLE_EMVCO_PROF */
        }
        else
        {
            wEntryPoint = NFCForumProcess(wEntryPoint, status);
 8001d96:	897a      	ldrh	r2, [r7, #10]
 8001d98:	89fb      	ldrh	r3, [r7, #14]
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f000 f86b 	bl	8001e78 <NFCForumProcess>
 8001da2:	4603      	mov	r3, r0
 8001da4:	81fb      	strh	r3, [r7, #14]

            /* 恢复轮询设置 Set Poll Configuration */
            statustmp = phacDiscLoop_SetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_PAS_POLL_TECH_CFG, bSavePollTechCfg);
 8001da6:	4b2f      	ldr	r3, [pc, #188]	@ (8001e64 <DiscoveryLoop_Demo+0x1f4>)
 8001da8:	881b      	ldrh	r3, [r3, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	218c      	movs	r1, #140	@ 0x8c
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f006 fa12 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 8001db4:	4603      	mov	r3, r0
 8001db6:	813b      	strh	r3, [r7, #8]
            CHECK_STATUS(statustmp);
 8001db8:	893b      	ldrh	r3, [r7, #8]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00c      	beq.n	8001dd8 <DiscoveryLoop_Demo+0x168>
 8001dbe:	893b      	ldrh	r3, [r7, #8]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	f44f 7193 	mov.w	r1, #294	@ 0x126
 8001dc6:	4826      	ldr	r0, [pc, #152]	@ (8001e60 <DiscoveryLoop_Demo+0x1f0>)
 8001dc8:	f01e fc04 	bl	80205d4 <iprintf>
 8001dcc:	4b23      	ldr	r3, [pc, #140]	@ (8001e5c <DiscoveryLoop_Demo+0x1ec>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f01e fb28 	bl	8020428 <fflush>

            /* 关闭RF场 Switch off RF field */
            statustmp = phhalHw_FieldOff(pHal);
 8001dd8:	4b23      	ldr	r3, [pc, #140]	@ (8001e68 <DiscoveryLoop_Demo+0x1f8>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f00c fbfd 	bl	800e5dc <phhalHw_Pn5180_FieldOff>
 8001de2:	4603      	mov	r3, r0
 8001de4:	813b      	strh	r3, [r7, #8]
            CHECK_STATUS(statustmp);
 8001de6:	893b      	ldrh	r3, [r7, #8]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d00c      	beq.n	8001e06 <DiscoveryLoop_Demo+0x196>
 8001dec:	893b      	ldrh	r3, [r7, #8]
 8001dee:	461a      	mov	r2, r3
 8001df0:	f44f 7195 	mov.w	r1, #298	@ 0x12a
 8001df4:	481a      	ldr	r0, [pc, #104]	@ (8001e60 <DiscoveryLoop_Demo+0x1f0>)
 8001df6:	f01e fbed 	bl	80205d4 <iprintf>
 8001dfa:	4b18      	ldr	r3, [pc, #96]	@ (8001e5c <DiscoveryLoop_Demo+0x1ec>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f01e fb11 	bl	8020428 <fflush>

            /* 等待场关闭完成 Wait for field-off time-out */
            statustmp = phhalHw_Wait(pHal, PHHAL_HW_TIME_MICROSECONDS, 5100);
 8001e06:	4b18      	ldr	r3, [pc, #96]	@ (8001e68 <DiscoveryLoop_Demo+0x1f8>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 8001e0e:	2100      	movs	r1, #0
 8001e10:	4618      	mov	r0, r3
 8001e12:	f00c fc07 	bl	800e624 <phhalHw_Pn5180_Wait>
 8001e16:	4603      	mov	r3, r0
 8001e18:	813b      	strh	r3, [r7, #8]
            CHECK_STATUS(statustmp);	// error
 8001e1a:	893b      	ldrh	r3, [r7, #8]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d00c      	beq.n	8001e3a <DiscoveryLoop_Demo+0x1ca>
 8001e20:	893b      	ldrh	r3, [r7, #8]
 8001e22:	461a      	mov	r2, r3
 8001e24:	f44f 7197 	mov.w	r1, #302	@ 0x12e
 8001e28:	480d      	ldr	r0, [pc, #52]	@ (8001e60 <DiscoveryLoop_Demo+0x1f0>)
 8001e2a:	f01e fbd3 	bl	80205d4 <iprintf>
 8001e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e5c <DiscoveryLoop_Demo+0x1ec>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f01e faf7 	bl	8020428 <fflush>

            DEBUG_PRINTF("Poll cycle complete, waiting...\r\n");  // 添加这行
 8001e3a:	480e      	ldr	r0, [pc, #56]	@ (8001e74 <DiscoveryLoop_Demo+0x204>)
 8001e3c:	f01e fc3a 	bl	80206b4 <puts>
 8001e40:	4b06      	ldr	r3, [pc, #24]	@ (8001e5c <DiscoveryLoop_Demo+0x1ec>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f01e faee 	bl	8020428 <fflush>
            HAL_Delay(1000);  // 添加1秒延时，方便观察
 8001e4c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e50:	f018 fd94 	bl	801a97c <HAL_Delay>
    	DEBUG_PRINTF("Poll cycle start...\r\n");
 8001e54:	e764      	b.n	8001d20 <DiscoveryLoop_Demo+0xb0>
 8001e56:	bf00      	nop
 8001e58:	080225d8 	.word	0x080225d8
 8001e5c:	20000084 	.word	0x20000084
 8001e60:	08022538 	.word	0x08022538
 8001e64:	2000053c 	.word	0x2000053c
 8001e68:	200008e0 	.word	0x200008e0
 8001e6c:	080225fc 	.word	0x080225fc
 8001e70:	08022614 	.word	0x08022614
 8001e74:	08022630 	.word	0x08022630

08001e78 <NFCForumProcess>:
 * 1.输出识别到的卡信息
 * 2.执行冲突解决和卡激活
 * 3.决定下一个入口点（轮询Poll 或 监听Listen）
 */
uint16_t NFCForumProcess(uint16_t wEntryPoint, phStatus_t DiscLoopStatus)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	460a      	mov	r2, r1
 8001e82:	80fb      	strh	r3, [r7, #6]
 8001e84:	4613      	mov	r3, r2
 8001e86:	80bb      	strh	r3, [r7, #4]
    phStatus_t    status;
    uint16_t      wTechDetected = 0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	823b      	strh	r3, [r7, #16]
    uint16_t      wNumberOfTags = 0;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	81fb      	strh	r3, [r7, #14]
    uint16_t      wValue;
    uint8_t       bIndex;
    uint16_t      wReturnEntryPoint;

    // 轮询POLL
    if(wEntryPoint == PHAC_DISCLOOP_ENTRY_POINT_POLL)
 8001e90:	88fb      	ldrh	r3, [r7, #6]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f040 826e 	bne.w	8002374 <NFCForumProcess+0x4fc>
    {
    	/* 1.检测到多个技术，选择其中一个，配置冲突解决状态，重新执行POLL */
        if((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_MULTI_TECH_DETECTED)
 8001e98:	88bb      	ldrh	r3, [r7, #4]
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b88      	cmp	r3, #136	@ 0x88
 8001e9e:	f040 80c6 	bne.w	800202e <NFCForumProcess+0x1b6>
        {
            DEBUG_PRINTF (" \n Multiple technology detected: \n");
 8001ea2:	489a      	ldr	r0, [pc, #616]	@ (800210c <NFCForumProcess+0x294>)
 8001ea4:	f01e fc06 	bl	80206b4 <puts>
 8001ea8:	4b99      	ldr	r3, [pc, #612]	@ (8002110 <NFCForumProcess+0x298>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f01e faba 	bl	8020428 <fflush>

            status = phacDiscLoop_GetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TECH_DETECTED, &wTechDetected);
 8001eb4:	4b97      	ldr	r3, [pc, #604]	@ (8002114 <NFCForumProcess+0x29c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f107 0210 	add.w	r2, r7, #16
 8001ebc:	2187      	movs	r1, #135	@ 0x87
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f006 fe08 	bl	8008ad4 <phacDiscLoop_Sw_GetConfig>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	82fb      	strh	r3, [r7, #22]
            CHECK_STATUS(status);
 8001ec8:	8afb      	ldrh	r3, [r7, #22]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00c      	beq.n	8001ee8 <NFCForumProcess+0x70>
 8001ece:	8afb      	ldrh	r3, [r7, #22]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	f240 114d 	movw	r1, #333	@ 0x14d
 8001ed6:	4890      	ldr	r0, [pc, #576]	@ (8002118 <NFCForumProcess+0x2a0>)
 8001ed8:	f01e fb7c 	bl	80205d4 <iprintf>
 8001edc:	4b8c      	ldr	r3, [pc, #560]	@ (8002110 <NFCForumProcess+0x298>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f01e faa0 	bl	8020428 <fflush>

            if(PHAC_DISCLOOP_CHECK_ANDMASK(wTechDetected, PHAC_DISCLOOP_POS_BIT_MASK_A))
 8001ee8:	8a3b      	ldrh	r3, [r7, #16]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d008      	beq.n	8001f04 <NFCForumProcess+0x8c>
            {
                DEBUG_PRINTF (" \tType A detected... \n");
 8001ef2:	488a      	ldr	r0, [pc, #552]	@ (800211c <NFCForumProcess+0x2a4>)
 8001ef4:	f01e fbde 	bl	80206b4 <puts>
 8001ef8:	4b85      	ldr	r3, [pc, #532]	@ (8002110 <NFCForumProcess+0x298>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f01e fa92 	bl	8020428 <fflush>
            }
            if(PHAC_DISCLOOP_CHECK_ANDMASK(wTechDetected, PHAC_DISCLOOP_POS_BIT_MASK_B))
 8001f04:	8a3b      	ldrh	r3, [r7, #16]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d008      	beq.n	8001f20 <NFCForumProcess+0xa8>
            {
                DEBUG_PRINTF (" \tType B detected... \n");
 8001f0e:	4884      	ldr	r0, [pc, #528]	@ (8002120 <NFCForumProcess+0x2a8>)
 8001f10:	f01e fbd0 	bl	80206b4 <puts>
 8001f14:	4b7e      	ldr	r3, [pc, #504]	@ (8002110 <NFCForumProcess+0x298>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f01e fa84 	bl	8020428 <fflush>
            }
            if(PHAC_DISCLOOP_CHECK_ANDMASK(wTechDetected, PHAC_DISCLOOP_POS_BIT_MASK_F212))
 8001f20:	8a3b      	ldrh	r3, [r7, #16]
 8001f22:	f003 0304 	and.w	r3, r3, #4
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d008      	beq.n	8001f3c <NFCForumProcess+0xc4>
            {
                DEBUG_PRINTF (" \tType F detected with baud rate 212... \n");
 8001f2a:	487e      	ldr	r0, [pc, #504]	@ (8002124 <NFCForumProcess+0x2ac>)
 8001f2c:	f01e fbc2 	bl	80206b4 <puts>
 8001f30:	4b77      	ldr	r3, [pc, #476]	@ (8002110 <NFCForumProcess+0x298>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f01e fa76 	bl	8020428 <fflush>
            }
            if(PHAC_DISCLOOP_CHECK_ANDMASK(wTechDetected, PHAC_DISCLOOP_POS_BIT_MASK_F424))
 8001f3c:	8a3b      	ldrh	r3, [r7, #16]
 8001f3e:	f003 0308 	and.w	r3, r3, #8
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d008      	beq.n	8001f58 <NFCForumProcess+0xe0>
            {
                DEBUG_PRINTF (" \tType F detected with baud rate 424... \n");
 8001f46:	4878      	ldr	r0, [pc, #480]	@ (8002128 <NFCForumProcess+0x2b0>)
 8001f48:	f01e fbb4 	bl	80206b4 <puts>
 8001f4c:	4b70      	ldr	r3, [pc, #448]	@ (8002110 <NFCForumProcess+0x298>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f01e fa68 	bl	8020428 <fflush>
            }
            if(PHAC_DISCLOOP_CHECK_ANDMASK(wTechDetected, PHAC_DISCLOOP_POS_BIT_MASK_V))
 8001f58:	8a3b      	ldrh	r3, [r7, #16]
 8001f5a:	f003 0310 	and.w	r3, r3, #16
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d008      	beq.n	8001f74 <NFCForumProcess+0xfc>
            {
                DEBUG_PRINTF(" \tType V / ISO 15693 / T5T detected... \n");
 8001f62:	4872      	ldr	r0, [pc, #456]	@ (800212c <NFCForumProcess+0x2b4>)
 8001f64:	f01e fba6 	bl	80206b4 <puts>
 8001f68:	4b69      	ldr	r3, [pc, #420]	@ (8002110 <NFCForumProcess+0x298>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f01e fa5a 	bl	8020428 <fflush>
            }

            /* Select 1st Detected Technology to Resolve*/
            for(bIndex = 0; bIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bIndex++)
 8001f74:	2300      	movs	r3, #0
 8001f76:	757b      	strb	r3, [r7, #21]
 8001f78:	e029      	b.n	8001fce <NFCForumProcess+0x156>
            {
                if(PHAC_DISCLOOP_CHECK_ANDMASK(wTechDetected, (1 << bIndex)))
 8001f7a:	8a3b      	ldrh	r3, [r7, #16]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	7d7b      	ldrb	r3, [r7, #21]
 8001f80:	fa42 f303 	asr.w	r3, r2, r3
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d01d      	beq.n	8001fc8 <NFCForumProcess+0x150>
                {
                    /* Configure for one of the detected technology */
                    status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_PAS_POLL_TECH_CFG, (1 << bIndex));
 8001f8c:	4b61      	ldr	r3, [pc, #388]	@ (8002114 <NFCForumProcess+0x29c>)
 8001f8e:	6818      	ldr	r0, [r3, #0]
 8001f90:	7d7b      	ldrb	r3, [r7, #21]
 8001f92:	2201      	movs	r2, #1
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	218c      	movs	r1, #140	@ 0x8c
 8001f9e:	f006 f91b 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	82fb      	strh	r3, [r7, #22]
                    CHECK_STATUS(status);
 8001fa6:	8afb      	ldrh	r3, [r7, #22]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d014      	beq.n	8001fd6 <NFCForumProcess+0x15e>
 8001fac:	8afb      	ldrh	r3, [r7, #22]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	f240 116b 	movw	r1, #363	@ 0x16b
 8001fb4:	4858      	ldr	r0, [pc, #352]	@ (8002118 <NFCForumProcess+0x2a0>)
 8001fb6:	f01e fb0d 	bl	80205d4 <iprintf>
 8001fba:	4b55      	ldr	r3, [pc, #340]	@ (8002110 <NFCForumProcess+0x298>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f01e fa31 	bl	8020428 <fflush>
                    break;
 8001fc6:	e006      	b.n	8001fd6 <NFCForumProcess+0x15e>
            for(bIndex = 0; bIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bIndex++)
 8001fc8:	7d7b      	ldrb	r3, [r7, #21]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	757b      	strb	r3, [r7, #21]
 8001fce:	7d7b      	ldrb	r3, [r7, #21]
 8001fd0:	2b05      	cmp	r3, #5
 8001fd2:	d9d2      	bls.n	8001f7a <NFCForumProcess+0x102>
 8001fd4:	e000      	b.n	8001fd8 <NFCForumProcess+0x160>
                    break;
 8001fd6:	bf00      	nop
                }
            }

            /* Print the technology resolved */
            phApp_PrintTech((1 << bIndex));
 8001fd8:	7d7b      	ldrb	r3, [r7, #21]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f001 f8ca 	bl	800317c <phApp_PrintTech>

            /* Set Discovery Poll State to collision resolution */
            status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_NEXT_POLL_STATE, PHAC_DISCLOOP_POLL_STATE_COLLISION_RESOLUTION);
 8001fe8:	4b4a      	ldr	r3, [pc, #296]	@ (8002114 <NFCForumProcess+0x29c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2202      	movs	r2, #2
 8001fee:	2184      	movs	r1, #132	@ 0x84
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f006 f8f1 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	82fb      	strh	r3, [r7, #22]
            CHECK_STATUS(status);
 8001ffa:	8afb      	ldrh	r3, [r7, #22]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d00c      	beq.n	800201a <NFCForumProcess+0x1a2>
 8002000:	8afb      	ldrh	r3, [r7, #22]
 8002002:	461a      	mov	r2, r3
 8002004:	f240 1175 	movw	r1, #373	@ 0x175
 8002008:	4843      	ldr	r0, [pc, #268]	@ (8002118 <NFCForumProcess+0x2a0>)
 800200a:	f01e fae3 	bl	80205d4 <iprintf>
 800200e:	4b40      	ldr	r3, [pc, #256]	@ (8002110 <NFCForumProcess+0x298>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	4618      	mov	r0, r3
 8002016:	f01e fa07 	bl	8020428 <fflush>

            /* Restart discovery loop in poll mode from collision resolution phase */
            DiscLoopStatus = phacDiscLoop_Run(pDiscLoop, wEntryPoint);
 800201a:	4b3e      	ldr	r3, [pc, #248]	@ (8002114 <NFCForumProcess+0x29c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	88fa      	ldrh	r2, [r7, #6]
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	4611      	mov	r1, r2
 8002024:	4618      	mov	r0, r3
 8002026:	f006 f805 	bl	8008034 <phacDiscLoop_Sw_Run>
 800202a:	4603      	mov	r3, r0
 800202c:	80bb      	strh	r3, [r7, #4]
        }

        /* 2. 解决了多个设备，获取tag数量、技术类型，激活其中一个卡 */
        if((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_MULTI_DEVICES_RESOLVED)
 800202e:	88bb      	ldrh	r3, [r7, #4]
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b8a      	cmp	r3, #138	@ 0x8a
 8002034:	f040 80b5 	bne.w	80021a2 <NFCForumProcess+0x32a>
        {
            /* Get Detected Technology Type */
            status = phacDiscLoop_GetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TECH_DETECTED, &wTechDetected);
 8002038:	4b36      	ldr	r3, [pc, #216]	@ (8002114 <NFCForumProcess+0x29c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f107 0210 	add.w	r2, r7, #16
 8002040:	2187      	movs	r1, #135	@ 0x87
 8002042:	4618      	mov	r0, r3
 8002044:	f006 fd46 	bl	8008ad4 <phacDiscLoop_Sw_GetConfig>
 8002048:	4603      	mov	r3, r0
 800204a:	82fb      	strh	r3, [r7, #22]
            CHECK_STATUS(status);
 800204c:	8afb      	ldrh	r3, [r7, #22]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00c      	beq.n	800206c <NFCForumProcess+0x1f4>
 8002052:	8afb      	ldrh	r3, [r7, #22]
 8002054:	461a      	mov	r2, r3
 8002056:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 800205a:	482f      	ldr	r0, [pc, #188]	@ (8002118 <NFCForumProcess+0x2a0>)
 800205c:	f01e faba 	bl	80205d4 <iprintf>
 8002060:	4b2b      	ldr	r3, [pc, #172]	@ (8002110 <NFCForumProcess+0x298>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	4618      	mov	r0, r3
 8002068:	f01e f9de 	bl	8020428 <fflush>

            /* Get number of tags detected */
            status = phacDiscLoop_GetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_NR_TAGS_FOUND, &wNumberOfTags);
 800206c:	4b29      	ldr	r3, [pc, #164]	@ (8002114 <NFCForumProcess+0x29c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f107 020e 	add.w	r2, r7, #14
 8002074:	2181      	movs	r1, #129	@ 0x81
 8002076:	4618      	mov	r0, r3
 8002078:	f006 fd2c 	bl	8008ad4 <phacDiscLoop_Sw_GetConfig>
 800207c:	4603      	mov	r3, r0
 800207e:	82fb      	strh	r3, [r7, #22]
            CHECK_STATUS(status);
 8002080:	8afb      	ldrh	r3, [r7, #22]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00c      	beq.n	80020a0 <NFCForumProcess+0x228>
 8002086:	8afb      	ldrh	r3, [r7, #22]
 8002088:	461a      	mov	r2, r3
 800208a:	f44f 71c2 	mov.w	r1, #388	@ 0x184
 800208e:	4822      	ldr	r0, [pc, #136]	@ (8002118 <NFCForumProcess+0x2a0>)
 8002090:	f01e faa0 	bl	80205d4 <iprintf>
 8002094:	4b1e      	ldr	r3, [pc, #120]	@ (8002110 <NFCForumProcess+0x298>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	4618      	mov	r0, r3
 800209c:	f01e f9c4 	bl	8020428 <fflush>

            DEBUG_PRINTF (" \n Multiple cards resolved: %d cards \n",wNumberOfTags);
 80020a0:	89fb      	ldrh	r3, [r7, #14]
 80020a2:	4619      	mov	r1, r3
 80020a4:	4822      	ldr	r0, [pc, #136]	@ (8002130 <NFCForumProcess+0x2b8>)
 80020a6:	f01e fa95 	bl	80205d4 <iprintf>
 80020aa:	4b19      	ldr	r3, [pc, #100]	@ (8002110 <NFCForumProcess+0x298>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f01e f9b9 	bl	8020428 <fflush>
            phApp_PrintTagInfo(pDiscLoop, wNumberOfTags, wTechDetected);
 80020b6:	4b17      	ldr	r3, [pc, #92]	@ (8002114 <NFCForumProcess+0x29c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	89f9      	ldrh	r1, [r7, #14]
 80020bc:	8a3a      	ldrh	r2, [r7, #16]
 80020be:	4618      	mov	r0, r3
 80020c0:	f001 f8f4 	bl	80032ac <phApp_PrintTagInfo>

            if(wNumberOfTags > 1)
 80020c4:	89fb      	ldrh	r3, [r7, #14]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	f240 8151 	bls.w	800236e <NFCForumProcess+0x4f6>
            {
                /* Get 1st Detected Technology and Activate device at index 0 */
                for(bIndex = 0; bIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bIndex++)
 80020cc:	2300      	movs	r3, #0
 80020ce:	757b      	strb	r3, [r7, #21]
 80020d0:	e035      	b.n	800213e <NFCForumProcess+0x2c6>
                {
                    if(PHAC_DISCLOOP_CHECK_ANDMASK(wTechDetected, (1 << bIndex)))
 80020d2:	8a3b      	ldrh	r3, [r7, #16]
 80020d4:	461a      	mov	r2, r3
 80020d6:	7d7b      	ldrb	r3, [r7, #21]
 80020d8:	fa42 f303 	asr.w	r3, r2, r3
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d029      	beq.n	8002138 <NFCForumProcess+0x2c0>
                    {
                        DEBUG_PRINTF("\t Activating one card...\n");
 80020e4:	4813      	ldr	r0, [pc, #76]	@ (8002134 <NFCForumProcess+0x2bc>)
 80020e6:	f01e fae5 	bl	80206b4 <puts>
 80020ea:	4b09      	ldr	r3, [pc, #36]	@ (8002110 <NFCForumProcess+0x298>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f01e f999 	bl	8020428 <fflush>
                        status = phacDiscLoop_ActivateCard(pDiscLoop, bIndex, 0);
 80020f6:	4b07      	ldr	r3, [pc, #28]	@ (8002114 <NFCForumProcess+0x29c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	7d79      	ldrb	r1, [r7, #21]
 80020fc:	2200      	movs	r2, #0
 80020fe:	4618      	mov	r0, r3
 8002100:	f006 ffa4 	bl	800904c <phacDiscLoop_Sw_ActivateCard>
 8002104:	4603      	mov	r3, r0
 8002106:	82fb      	strh	r3, [r7, #22]
                        break;
 8002108:	e01c      	b.n	8002144 <NFCForumProcess+0x2cc>
 800210a:	bf00      	nop
 800210c:	08022654 	.word	0x08022654
 8002110:	20000084 	.word	0x20000084
 8002114:	20000538 	.word	0x20000538
 8002118:	08022538 	.word	0x08022538
 800211c:	08022678 	.word	0x08022678
 8002120:	08022690 	.word	0x08022690
 8002124:	080226a8 	.word	0x080226a8
 8002128:	080226d4 	.word	0x080226d4
 800212c:	08022700 	.word	0x08022700
 8002130:	08022728 	.word	0x08022728
 8002134:	08022750 	.word	0x08022750
                for(bIndex = 0; bIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bIndex++)
 8002138:	7d7b      	ldrb	r3, [r7, #21]
 800213a:	3301      	adds	r3, #1
 800213c:	757b      	strb	r3, [r7, #21]
 800213e:	7d7b      	ldrb	r3, [r7, #21]
 8002140:	2b05      	cmp	r3, #5
 8002142:	d9c6      	bls.n	80020d2 <NFCForumProcess+0x25a>
                    }
                }

                if(((status & PH_ERR_MASK) == PHAC_DISCLOOP_DEVICE_ACTIVATED) ||
 8002144:	8afb      	ldrh	r3, [r7, #22]
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b8b      	cmp	r3, #139	@ 0x8b
 800214a:	d008      	beq.n	800215e <NFCForumProcess+0x2e6>
                        ((status & PH_ERR_MASK) == PHAC_DISCLOOP_PASSIVE_TARGET_ACTIVATED) ||
 800214c:	8afb      	ldrh	r3, [r7, #22]
 800214e:	b2db      	uxtb	r3, r3
                if(((status & PH_ERR_MASK) == PHAC_DISCLOOP_DEVICE_ACTIVATED) ||
 8002150:	2b8d      	cmp	r3, #141	@ 0x8d
 8002152:	d004      	beq.n	800215e <NFCForumProcess+0x2e6>
                        ((status & PH_ERR_MASK) == PHAC_DISCLOOP_MERGED_SEL_RES_FOUND))
 8002154:	8afb      	ldrh	r3, [r7, #22]
 8002156:	b2db      	uxtb	r3, r3
                        ((status & PH_ERR_MASK) == PHAC_DISCLOOP_PASSIVE_TARGET_ACTIVATED) ||
 8002158:	2b8e      	cmp	r3, #142	@ 0x8e
 800215a:	f040 8108 	bne.w	800236e <NFCForumProcess+0x4f6>
                {
                    /* Get Detected Technology Type */
                    status = phacDiscLoop_GetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TECH_DETECTED, &wTechDetected);
 800215e:	4ba7      	ldr	r3, [pc, #668]	@ (80023fc <NFCForumProcess+0x584>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f107 0210 	add.w	r2, r7, #16
 8002166:	2187      	movs	r1, #135	@ 0x87
 8002168:	4618      	mov	r0, r3
 800216a:	f006 fcb3 	bl	8008ad4 <phacDiscLoop_Sw_GetConfig>
 800216e:	4603      	mov	r3, r0
 8002170:	82fb      	strh	r3, [r7, #22]
                    CHECK_STATUS(status);
 8002172:	8afb      	ldrh	r3, [r7, #22]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00c      	beq.n	8002192 <NFCForumProcess+0x31a>
 8002178:	8afb      	ldrh	r3, [r7, #22]
 800217a:	461a      	mov	r2, r3
 800217c:	f44f 71ce 	mov.w	r1, #412	@ 0x19c
 8002180:	489f      	ldr	r0, [pc, #636]	@ (8002400 <NFCForumProcess+0x588>)
 8002182:	f01e fa27 	bl	80205d4 <iprintf>
 8002186:	4b9f      	ldr	r3, [pc, #636]	@ (8002404 <NFCForumProcess+0x58c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	4618      	mov	r0, r3
 800218e:	f01e f94b 	bl	8020428 <fflush>

                    phApp_PrintTagInfo(pDiscLoop, 0x01, wTechDetected);
 8002192:	4b9a      	ldr	r3, [pc, #616]	@ (80023fc <NFCForumProcess+0x584>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	8a3a      	ldrh	r2, [r7, #16]
 8002198:	2101      	movs	r1, #1
 800219a:	4618      	mov	r0, r3
 800219c:	f001 f886 	bl	80032ac <phApp_PrintTagInfo>
 80021a0:	e0e5      	b.n	800236e <NFCForumProcess+0x4f6>
                    PRINT_INFO("\t\tCard activation failed...\n");
                }
            }
            /* Switch to LISTEN mode after POLL mode */
        }
        else if (((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_NO_TECH_DETECTED) ||
 80021a2:	88bb      	ldrh	r3, [r7, #4]
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b84      	cmp	r3, #132	@ 0x84
 80021a8:	f000 80e1 	beq.w	800236e <NFCForumProcess+0x4f6>
                ((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_NO_DEVICE_RESOLVED))
 80021ac:	88bb      	ldrh	r3, [r7, #4]
 80021ae:	b2db      	uxtb	r3, r3
        else if (((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_NO_TECH_DETECTED) ||
 80021b0:	2b85      	cmp	r3, #133	@ 0x85
 80021b2:	f000 80dc 	beq.w	800236e <NFCForumProcess+0x4f6>
        {
            /* Switch to LISTEN mode after POLL mode */
        }
        else if((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_EXTERNAL_RFON)
 80021b6:	88bb      	ldrh	r3, [r7, #4]
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b82      	cmp	r3, #130	@ 0x82
 80021bc:	f000 80d7 	beq.w	800236e <NFCForumProcess+0x4f6>
            /*
             * If external RF is detected during POLL, return back so that the application
             * can restart the loop in LISTEN mode
             */
        }
        else if((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_MERGED_SEL_RES_FOUND)
 80021c0:	88bb      	ldrh	r3, [r7, #4]
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b8e      	cmp	r3, #142	@ 0x8e
 80021c6:	d12a      	bne.n	800221e <NFCForumProcess+0x3a6>
        {
            DEBUG_PRINTF (" \n Device having T4T and NFC-DEP support detected... \n");
 80021c8:	488f      	ldr	r0, [pc, #572]	@ (8002408 <NFCForumProcess+0x590>)
 80021ca:	f01e fa73 	bl	80206b4 <puts>
 80021ce:	4b8d      	ldr	r3, [pc, #564]	@ (8002404 <NFCForumProcess+0x58c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f01e f927 	bl	8020428 <fflush>

            /* Get Detected Technology Type */
            status = phacDiscLoop_GetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TECH_DETECTED, &wTechDetected);
 80021da:	4b88      	ldr	r3, [pc, #544]	@ (80023fc <NFCForumProcess+0x584>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f107 0210 	add.w	r2, r7, #16
 80021e2:	2187      	movs	r1, #135	@ 0x87
 80021e4:	4618      	mov	r0, r3
 80021e6:	f006 fc75 	bl	8008ad4 <phacDiscLoop_Sw_GetConfig>
 80021ea:	4603      	mov	r3, r0
 80021ec:	82fb      	strh	r3, [r7, #22]
            CHECK_STATUS(status);
 80021ee:	8afb      	ldrh	r3, [r7, #22]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00c      	beq.n	800220e <NFCForumProcess+0x396>
 80021f4:	8afb      	ldrh	r3, [r7, #22]
 80021f6:	461a      	mov	r2, r3
 80021f8:	f240 11b9 	movw	r1, #441	@ 0x1b9
 80021fc:	4880      	ldr	r0, [pc, #512]	@ (8002400 <NFCForumProcess+0x588>)
 80021fe:	f01e f9e9 	bl	80205d4 <iprintf>
 8002202:	4b80      	ldr	r3, [pc, #512]	@ (8002404 <NFCForumProcess+0x58c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	4618      	mov	r0, r3
 800220a:	f01e f90d 	bl	8020428 <fflush>

            phApp_PrintTagInfo(pDiscLoop, 1, wTechDetected);
 800220e:	4b7b      	ldr	r3, [pc, #492]	@ (80023fc <NFCForumProcess+0x584>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	8a3a      	ldrh	r2, [r7, #16]
 8002214:	2101      	movs	r1, #1
 8002216:	4618      	mov	r0, r3
 8002218:	f001 f848 	bl	80032ac <phApp_PrintTagInfo>
 800221c:	e0a7      	b.n	800236e <NFCForumProcess+0x4f6>

        /* Switch to LISTEN mode after POLL mode */
        }
        else if((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_DEVICE_ACTIVATED)
 800221e:	88bb      	ldrh	r3, [r7, #4]
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b8b      	cmp	r3, #139	@ 0x8b
 8002224:	d144      	bne.n	80022b0 <NFCForumProcess+0x438>
        {
            DEBUG_PRINTF (" \n Card detected and activated successfully... \n");
 8002226:	4879      	ldr	r0, [pc, #484]	@ (800240c <NFCForumProcess+0x594>)
 8002228:	f01e fa44 	bl	80206b4 <puts>
 800222c:	4b75      	ldr	r3, [pc, #468]	@ (8002404 <NFCForumProcess+0x58c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	4618      	mov	r0, r3
 8002234:	f01e f8f8 	bl	8020428 <fflush>
            status = phacDiscLoop_GetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_NR_TAGS_FOUND, &wNumberOfTags);
 8002238:	4b70      	ldr	r3, [pc, #448]	@ (80023fc <NFCForumProcess+0x584>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f107 020e 	add.w	r2, r7, #14
 8002240:	2181      	movs	r1, #129	@ 0x81
 8002242:	4618      	mov	r0, r3
 8002244:	f006 fc46 	bl	8008ad4 <phacDiscLoop_Sw_GetConfig>
 8002248:	4603      	mov	r3, r0
 800224a:	82fb      	strh	r3, [r7, #22]
            CHECK_STATUS(status);
 800224c:	8afb      	ldrh	r3, [r7, #22]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00c      	beq.n	800226c <NFCForumProcess+0x3f4>
 8002252:	8afb      	ldrh	r3, [r7, #22]
 8002254:	461a      	mov	r2, r3
 8002256:	f240 11c3 	movw	r1, #451	@ 0x1c3
 800225a:	4869      	ldr	r0, [pc, #420]	@ (8002400 <NFCForumProcess+0x588>)
 800225c:	f01e f9ba 	bl	80205d4 <iprintf>
 8002260:	4b68      	ldr	r3, [pc, #416]	@ (8002404 <NFCForumProcess+0x58c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	4618      	mov	r0, r3
 8002268:	f01e f8de 	bl	8020428 <fflush>

            /* Get Detected Technology Type */
            status = phacDiscLoop_GetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TECH_DETECTED, &wTechDetected);
 800226c:	4b63      	ldr	r3, [pc, #396]	@ (80023fc <NFCForumProcess+0x584>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f107 0210 	add.w	r2, r7, #16
 8002274:	2187      	movs	r1, #135	@ 0x87
 8002276:	4618      	mov	r0, r3
 8002278:	f006 fc2c 	bl	8008ad4 <phacDiscLoop_Sw_GetConfig>
 800227c:	4603      	mov	r3, r0
 800227e:	82fb      	strh	r3, [r7, #22]
            CHECK_STATUS(status);
 8002280:	8afb      	ldrh	r3, [r7, #22]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00c      	beq.n	80022a0 <NFCForumProcess+0x428>
 8002286:	8afb      	ldrh	r3, [r7, #22]
 8002288:	461a      	mov	r2, r3
 800228a:	f240 11c7 	movw	r1, #455	@ 0x1c7
 800228e:	485c      	ldr	r0, [pc, #368]	@ (8002400 <NFCForumProcess+0x588>)
 8002290:	f01e f9a0 	bl	80205d4 <iprintf>
 8002294:	4b5b      	ldr	r3, [pc, #364]	@ (8002404 <NFCForumProcess+0x58c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	4618      	mov	r0, r3
 800229c:	f01e f8c4 	bl	8020428 <fflush>

            phApp_PrintTagInfo(pDiscLoop, wNumberOfTags, wTechDetected);
 80022a0:	4b56      	ldr	r3, [pc, #344]	@ (80023fc <NFCForumProcess+0x584>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	89f9      	ldrh	r1, [r7, #14]
 80022a6:	8a3a      	ldrh	r2, [r7, #16]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f000 ffff 	bl	80032ac <phApp_PrintTagInfo>
 80022ae:	e05e      	b.n	800236e <NFCForumProcess+0x4f6>

            /* Switch to LISTEN mode after POLL mode */
        }
        else if((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_ACTIVE_TARGET_ACTIVATED)
 80022b0:	88bb      	ldrh	r3, [r7, #4]
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b8c      	cmp	r3, #140	@ 0x8c
 80022b6:	d109      	bne.n	80022cc <NFCForumProcess+0x454>
        {
            DEBUG_PRINTF (" \n Active target detected... \n");
 80022b8:	4855      	ldr	r0, [pc, #340]	@ (8002410 <NFCForumProcess+0x598>)
 80022ba:	f01e f9fb 	bl	80206b4 <puts>
 80022be:	4b51      	ldr	r3, [pc, #324]	@ (8002404 <NFCForumProcess+0x58c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f01e f8af 	bl	8020428 <fflush>
 80022ca:	e050      	b.n	800236e <NFCForumProcess+0x4f6>

            /* Switch to LISTEN mode after POLL mode */
        }
        else if((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_PASSIVE_TARGET_ACTIVATED)
 80022cc:	88bb      	ldrh	r3, [r7, #4]
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b8d      	cmp	r3, #141	@ 0x8d
 80022d2:	d12a      	bne.n	800232a <NFCForumProcess+0x4b2>
        {
            DEBUG_PRINTF (" \n Passive target detected... \n");
 80022d4:	484f      	ldr	r0, [pc, #316]	@ (8002414 <NFCForumProcess+0x59c>)
 80022d6:	f01e f9ed 	bl	80206b4 <puts>
 80022da:	4b4a      	ldr	r3, [pc, #296]	@ (8002404 <NFCForumProcess+0x58c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f01e f8a1 	bl	8020428 <fflush>

            /* Get Detected Technology Type */
            status = phacDiscLoop_GetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TECH_DETECTED, &wTechDetected);
 80022e6:	4b45      	ldr	r3, [pc, #276]	@ (80023fc <NFCForumProcess+0x584>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f107 0210 	add.w	r2, r7, #16
 80022ee:	2187      	movs	r1, #135	@ 0x87
 80022f0:	4618      	mov	r0, r3
 80022f2:	f006 fbef 	bl	8008ad4 <phacDiscLoop_Sw_GetConfig>
 80022f6:	4603      	mov	r3, r0
 80022f8:	82fb      	strh	r3, [r7, #22]
            CHECK_STATUS(status);
 80022fa:	8afb      	ldrh	r3, [r7, #22]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00c      	beq.n	800231a <NFCForumProcess+0x4a2>
 8002300:	8afb      	ldrh	r3, [r7, #22]
 8002302:	461a      	mov	r2, r3
 8002304:	f240 11d9 	movw	r1, #473	@ 0x1d9
 8002308:	483d      	ldr	r0, [pc, #244]	@ (8002400 <NFCForumProcess+0x588>)
 800230a:	f01e f963 	bl	80205d4 <iprintf>
 800230e:	4b3d      	ldr	r3, [pc, #244]	@ (8002404 <NFCForumProcess+0x58c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	4618      	mov	r0, r3
 8002316:	f01e f887 	bl	8020428 <fflush>

            phApp_PrintTagInfo(pDiscLoop, 1, wTechDetected);
 800231a:	4b38      	ldr	r3, [pc, #224]	@ (80023fc <NFCForumProcess+0x584>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	8a3a      	ldrh	r2, [r7, #16]
 8002320:	2101      	movs	r1, #1
 8002322:	4618      	mov	r0, r3
 8002324:	f000 ffc2 	bl	80032ac <phApp_PrintTagInfo>
 8002328:	e021      	b.n	800236e <NFCForumProcess+0x4f6>

            /* Switch to LISTEN mode after POLL mode */
        }
        else if ((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_LPCD_NO_TECH_DETECTED)
 800232a:	88bb      	ldrh	r3, [r7, #4]
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b86      	cmp	r3, #134	@ 0x86
 8002330:	d01d      	beq.n	800236e <NFCForumProcess+0x4f6>
        {
            /* LPCD is succeed but no tag is detected. */
        }
        else
        {
            if((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_FAILURE)
 8002332:	88bb      	ldrh	r3, [r7, #4]
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b80      	cmp	r3, #128	@ 0x80
 8002338:	d119      	bne.n	800236e <NFCForumProcess+0x4f6>
            {
                status = phacDiscLoop_GetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_ADDITIONAL_INFO, &wValue);
 800233a:	4b30      	ldr	r3, [pc, #192]	@ (80023fc <NFCForumProcess+0x584>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f107 020c 	add.w	r2, r7, #12
 8002342:	2185      	movs	r1, #133	@ 0x85
 8002344:	4618      	mov	r0, r3
 8002346:	f006 fbc5 	bl	8008ad4 <phacDiscLoop_Sw_GetConfig>
 800234a:	4603      	mov	r3, r0
 800234c:	82fb      	strh	r3, [r7, #22]
                CHECK_STATUS(status);
 800234e:	8afb      	ldrh	r3, [r7, #22]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00c      	beq.n	800236e <NFCForumProcess+0x4f6>
 8002354:	8afb      	ldrh	r3, [r7, #22]
 8002356:	461a      	mov	r2, r3
 8002358:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 800235c:	4828      	ldr	r0, [pc, #160]	@ (8002400 <NFCForumProcess+0x588>)
 800235e:	f01e f939 	bl	80205d4 <iprintf>
 8002362:	4b28      	ldr	r3, [pc, #160]	@ (8002404 <NFCForumProcess+0x58c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	4618      	mov	r0, r3
 800236a:	f01e f85d 	bl	8020428 <fflush>
                DEBUG_ERROR_PRINT(PrintErrorInfo(status));
            }
        }

        /* Update the Entry point to LISTEN mode. */
        wReturnEntryPoint = PHAC_DISCLOOP_ENTRY_POINT_LISTEN;
 800236e:	2301      	movs	r3, #1
 8002370:	827b      	strh	r3, [r7, #18]
 8002372:	e088      	b.n	8002486 <NFCForumProcess+0x60e>

    }
    else
    {
        if((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_EXTERNAL_RFOFF)
 8002374:	88bb      	ldrh	r3, [r7, #4]
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b83      	cmp	r3, #131	@ 0x83
 800237a:	d152      	bne.n	8002422 <NFCForumProcess+0x5aa>
            /*
             * Enters here if in the target/card mode and external RF is not available
             * Wait for LISTEN timeout till an external RF is detected.
             * Application may choose to go into standby at this point.
             */
            status = phhalHw_EventConsume(pHal);
 800237c:	4b26      	ldr	r3, [pc, #152]	@ (8002418 <NFCForumProcess+0x5a0>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f00e fff1 	bl	8011368 <phhalHw_Pn5180_EventConsume>
 8002386:	4603      	mov	r3, r0
 8002388:	82fb      	strh	r3, [r7, #22]
            CHECK_STATUS(status);
 800238a:	8afb      	ldrh	r3, [r7, #22]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00c      	beq.n	80023aa <NFCForumProcess+0x532>
 8002390:	8afb      	ldrh	r3, [r7, #22]
 8002392:	461a      	mov	r2, r3
 8002394:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8002398:	4819      	ldr	r0, [pc, #100]	@ (8002400 <NFCForumProcess+0x588>)
 800239a:	f01e f91b 	bl	80205d4 <iprintf>
 800239e:	4b19      	ldr	r3, [pc, #100]	@ (8002404 <NFCForumProcess+0x58c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f01e f83f 	bl	8020428 <fflush>

            status = phhalHw_SetConfig(pHal, PHHAL_HW_CONFIG_RFON_INTERRUPT, PH_ON);
 80023aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002418 <NFCForumProcess+0x5a0>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2201      	movs	r2, #1
 80023b0:	2157      	movs	r1, #87	@ 0x57
 80023b2:	4618      	mov	r0, r3
 80023b4:	f00c f9f0 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 80023b8:	4603      	mov	r3, r0
 80023ba:	82fb      	strh	r3, [r7, #22]
            CHECK_STATUS(status);
 80023bc:	8afb      	ldrh	r3, [r7, #22]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00c      	beq.n	80023dc <NFCForumProcess+0x564>
 80023c2:	8afb      	ldrh	r3, [r7, #22]
 80023c4:	461a      	mov	r2, r3
 80023c6:	f240 2102 	movw	r1, #514	@ 0x202
 80023ca:	480d      	ldr	r0, [pc, #52]	@ (8002400 <NFCForumProcess+0x588>)
 80023cc:	f01e f902 	bl	80205d4 <iprintf>
 80023d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002404 <NFCForumProcess+0x58c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f01e f826 	bl	8020428 <fflush>

            status = phhalHw_EventWait(pHal, LISTEN_PHASE_TIME_MS);
 80023dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002418 <NFCForumProcess+0x5a0>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80023e4:	4618      	mov	r0, r3
 80023e6:	f00e ffa5 	bl	8011334 <phhalHw_Pn5180_EventWait>
 80023ea:	4603      	mov	r3, r0
 80023ec:	82fb      	strh	r3, [r7, #22]
            if((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT)
 80023ee:	8afb      	ldrh	r3, [r7, #22]
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d112      	bne.n	800241c <NFCForumProcess+0x5a4>
            {
                wReturnEntryPoint = PHAC_DISCLOOP_ENTRY_POINT_POLL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	827b      	strh	r3, [r7, #18]
 80023fa:	e044      	b.n	8002486 <NFCForumProcess+0x60e>
 80023fc:	20000538 	.word	0x20000538
 8002400:	08022538 	.word	0x08022538
 8002404:	20000084 	.word	0x20000084
 8002408:	0802276c 	.word	0x0802276c
 800240c:	080227a4 	.word	0x080227a4
 8002410:	080227d4 	.word	0x080227d4
 8002414:	080227f4 	.word	0x080227f4
 8002418:	200008e0 	.word	0x200008e0
            }
            else
            {
                wReturnEntryPoint = PHAC_DISCLOOP_ENTRY_POINT_LISTEN;
 800241c:	2301      	movs	r3, #1
 800241e:	827b      	strh	r3, [r7, #18]
 8002420:	e031      	b.n	8002486 <NFCForumProcess+0x60e>
            }
        }
        else
        {
            if((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_ACTIVATED_BY_PEER)
 8002422:	88bb      	ldrh	r3, [r7, #4]
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b8f      	cmp	r3, #143	@ 0x8f
 8002428:	d109      	bne.n	800243e <NFCForumProcess+0x5c6>
            {
                DEBUG_PRINTF (" \n Device activated in listen mode... \n");
 800242a:	4819      	ldr	r0, [pc, #100]	@ (8002490 <NFCForumProcess+0x618>)
 800242c:	f01e f942 	bl	80206b4 <puts>
 8002430:	4b18      	ldr	r3, [pc, #96]	@ (8002494 <NFCForumProcess+0x61c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	4618      	mov	r0, r3
 8002438:	f01d fff6 	bl	8020428 <fflush>
 800243c:	e021      	b.n	8002482 <NFCForumProcess+0x60a>
            }
            else if ((DiscLoopStatus & PH_ERR_MASK) == PH_ERR_INVALID_PARAMETER)
 800243e:	88bb      	ldrh	r3, [r7, #4]
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b21      	cmp	r3, #33	@ 0x21
 8002444:	d01d      	beq.n	8002482 <NFCForumProcess+0x60a>
                /* In case of Front end used is RC663, then listen mode is not supported.
                 * Switch from listen mode to poll mode. */
            }
            else
            {
                if((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_FAILURE)
 8002446:	88bb      	ldrh	r3, [r7, #4]
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b80      	cmp	r3, #128	@ 0x80
 800244c:	d119      	bne.n	8002482 <NFCForumProcess+0x60a>
                {
                    status = phacDiscLoop_GetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_ADDITIONAL_INFO, &wValue);
 800244e:	4b12      	ldr	r3, [pc, #72]	@ (8002498 <NFCForumProcess+0x620>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f107 020c 	add.w	r2, r7, #12
 8002456:	2185      	movs	r1, #133	@ 0x85
 8002458:	4618      	mov	r0, r3
 800245a:	f006 fb3b 	bl	8008ad4 <phacDiscLoop_Sw_GetConfig>
 800245e:	4603      	mov	r3, r0
 8002460:	82fb      	strh	r3, [r7, #22]
                    CHECK_STATUS(status);
 8002462:	8afb      	ldrh	r3, [r7, #22]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00c      	beq.n	8002482 <NFCForumProcess+0x60a>
 8002468:	8afb      	ldrh	r3, [r7, #22]
 800246a:	461a      	mov	r2, r3
 800246c:	f240 211e 	movw	r1, #542	@ 0x21e
 8002470:	480a      	ldr	r0, [pc, #40]	@ (800249c <NFCForumProcess+0x624>)
 8002472:	f01e f8af 	bl	80205d4 <iprintf>
 8002476:	4b07      	ldr	r3, [pc, #28]	@ (8002494 <NFCForumProcess+0x61c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	4618      	mov	r0, r3
 800247e:	f01d ffd3 	bl	8020428 <fflush>
                    DEBUG_ERROR_PRINT(PrintErrorInfo(status));
                }
            }

            /* On successful activated by Peer, switch to LISTEN mode */
            wReturnEntryPoint = PHAC_DISCLOOP_ENTRY_POINT_POLL;
 8002482:	2300      	movs	r3, #0
 8002484:	827b      	strh	r3, [r7, #18]
        }
    }
    return wReturnEntryPoint;
 8002486:	8a7b      	ldrh	r3, [r7, #18]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3718      	adds	r7, #24
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	08022814 	.word	0x08022814
 8002494:	20000084 	.word	0x20000084
 8002498:	20000538 	.word	0x20000538
 800249c:	08022538 	.word	0x08022538

080024a0 <LoadProfile>:
* 根据给定的NFC 配置 profile（如 NFC Forum 或 EMVCo）为 Discovery Loop 加载默认的轮询参数、通信协议支持位图、超时设置等
* \param   bProfile      Reader Library Profile
* \note    Values used below are default and is for demonstration purpose.
*/
static phStatus_t LoadProfile(phacDiscLoop_Profile_t bProfile)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	71fb      	strb	r3, [r7, #7]
    phStatus_t status = PH_ERR_SUCCESS;
 80024aa:	2300      	movs	r3, #0
 80024ac:	82fb      	strh	r3, [r7, #22]
    uint16_t   wPasPollConfig = 0;	// 被动轮询技术掩码（如TypeA/B/F/V）
 80024ae:	2300      	movs	r3, #0
 80024b0:	82bb      	strh	r3, [r7, #20]
    uint16_t   wActPollConfig = 0;	// 主动轮询技术掩码（如P2P 106/212/424kbps）
 80024b2:	2300      	movs	r3, #0
 80024b4:	827b      	strh	r3, [r7, #18]
    uint16_t   wPasLisConfig = 0;	// 被动监听模式支持（当设备作为被动Tag）
 80024b6:	2300      	movs	r3, #0
 80024b8:	823b      	strh	r3, [r7, #16]
    uint16_t   wActLisConfig = 0;	// 主动监听模式支持（设备作为主动P2P目标）
 80024ba:	2300      	movs	r3, #0
 80024bc:	81fb      	strh	r3, [r7, #14]

/* 1.通过一系列#ifdef宏, 构建这几个变量的位图. 即哪些协议被支持, 就把对应的bit位置为1 */
/* 1.1 被动轮询技术掩码 */
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS
    wPasPollConfig |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 80024be:	8abb      	ldrh	r3, [r7, #20]
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	82bb      	strh	r3, [r7, #20]
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    wPasPollConfig |= PHAC_DISCLOOP_POS_BIT_MASK_B;
 80024c6:	8abb      	ldrh	r3, [r7, #20]
 80024c8:	f043 0302 	orr.w	r3, r3, #2
 80024cc:	82bb      	strh	r3, [r7, #20]
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    wPasPollConfig |= (PHAC_DISCLOOP_POS_BIT_MASK_F212 | PHAC_DISCLOOP_POS_BIT_MASK_F424);
 80024ce:	8abb      	ldrh	r3, [r7, #20]
 80024d0:	f043 030c 	orr.w	r3, r3, #12
 80024d4:	82bb      	strh	r3, [r7, #20]
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    wPasPollConfig |= PHAC_DISCLOOP_POS_BIT_MASK_V;
 80024d6:	8abb      	ldrh	r3, [r7, #20]
 80024d8:	f043 0310 	orr.w	r3, r3, #16
 80024dc:	82bb      	strh	r3, [r7, #20]
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    wPasPollConfig |= PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3;
 80024de:	8abb      	ldrh	r3, [r7, #20]
 80024e0:	f043 0320 	orr.w	r3, r3, #32
 80024e4:	82bb      	strh	r3, [r7, #20]
#endif

/* 1.2 主动轮询技术掩码 */
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE
    wActPollConfig |= PHAC_DISCLOOP_ACT_POS_BIT_MASK_106;
 80024e6:	8a7b      	ldrh	r3, [r7, #18]
 80024e8:	f043 0301 	orr.w	r3, r3, #1
 80024ec:	827b      	strh	r3, [r7, #18]
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF212_P2P_ACTIVE
    wActPollConfig |= PHAC_DISCLOOP_ACT_POS_BIT_MASK_212;
 80024ee:	8a7b      	ldrh	r3, [r7, #18]
 80024f0:	f043 0302 	orr.w	r3, r3, #2
 80024f4:	827b      	strh	r3, [r7, #18]
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE
    wActPollConfig |= PHAC_DISCLOOP_ACT_POS_BIT_MASK_424;
 80024f6:	8a7b      	ldrh	r3, [r7, #18]
 80024f8:	f043 0304 	orr.w	r3, r3, #4
 80024fc:	827b      	strh	r3, [r7, #18]
#endif

/* 1.3 被动监听模式支持 */
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TARGET_PASSIVE
    wPasLisConfig |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 80024fe:	8a3b      	ldrh	r3, [r7, #16]
 8002500:	f043 0301 	orr.w	r3, r3, #1
 8002504:	823b      	strh	r3, [r7, #16]
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF212_TARGET_PASSIVE
    wPasLisConfig |= PHAC_DISCLOOP_POS_BIT_MASK_F212;
 8002506:	8a3b      	ldrh	r3, [r7, #16]
 8002508:	f043 0304 	orr.w	r3, r3, #4
 800250c:	823b      	strh	r3, [r7, #16]
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF424_TARGET_PASSIVE
    wPasLisConfig |= PHAC_DISCLOOP_POS_BIT_MASK_F424;
 800250e:	8a3b      	ldrh	r3, [r7, #16]
 8002510:	f043 0308 	orr.w	r3, r3, #8
 8002514:	823b      	strh	r3, [r7, #16]
#endif

/* 1.4 主动监听模式支持 */
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TARGET_ACTIVE
    wActLisConfig |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 8002516:	89fb      	ldrh	r3, [r7, #14]
 8002518:	f043 0301 	orr.w	r3, r3, #1
 800251c:	81fb      	strh	r3, [r7, #14]
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF212_TARGET_ACTIVE
    wActLisConfig |= PHAC_DISCLOOP_POS_BIT_MASK_F212;
 800251e:	89fb      	ldrh	r3, [r7, #14]
 8002520:	f043 0304 	orr.w	r3, r3, #4
 8002524:	81fb      	strh	r3, [r7, #14]
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF424_TARGET_ACTIVE
    wActLisConfig |= PHAC_DISCLOOP_POS_BIT_MASK_F424;
 8002526:	89fb      	ldrh	r3, [r7, #14]
 8002528:	f043 0308 	orr.w	r3, r3, #8
 800252c:	81fb      	strh	r3, [r7, #14]
#endif

/* 2. 根据配置 Profile 加载对应参数 */
    if(bProfile == PHAC_DISCLOOP_PROFILE_NFC)
 800252e:	79fb      	ldrb	r3, [r7, #7]
 8002530:	2b01      	cmp	r3, #1
 8002532:	f040 8209 	bne.w	8002948 <LoadProfile+0x4a8>
    {
        /* passive Bailout bitmap config. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_BAIL_OUT, 0x00);
 8002536:	4baf      	ldr	r3, [pc, #700]	@ (80027f4 <LoadProfile+0x354>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2200      	movs	r2, #0
 800253c:	2186      	movs	r1, #134	@ 0x86
 800253e:	4618      	mov	r0, r3
 8002540:	f005 fe4a 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 8002544:	4603      	mov	r3, r0
 8002546:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002548:	8afb      	ldrh	r3, [r7, #22]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00c      	beq.n	8002568 <LoadProfile+0xc8>
 800254e:	8afb      	ldrh	r3, [r7, #22]
 8002550:	461a      	mov	r2, r3
 8002552:	f240 2176 	movw	r1, #630	@ 0x276
 8002556:	48a8      	ldr	r0, [pc, #672]	@ (80027f8 <LoadProfile+0x358>)
 8002558:	f01e f83c 	bl	80205d4 <iprintf>
 800255c:	4ba7      	ldr	r3, [pc, #668]	@ (80027fc <LoadProfile+0x35c>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	4618      	mov	r0, r3
 8002564:	f01d ff60 	bl	8020428 <fflush>

        /* Set Passive poll bitmap config. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_PAS_POLL_TECH_CFG, wPasPollConfig);
 8002568:	4ba2      	ldr	r3, [pc, #648]	@ (80027f4 <LoadProfile+0x354>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	8aba      	ldrh	r2, [r7, #20]
 800256e:	218c      	movs	r1, #140	@ 0x8c
 8002570:	4618      	mov	r0, r3
 8002572:	f005 fe31 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 8002576:	4603      	mov	r3, r0
 8002578:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 800257a:	8afb      	ldrh	r3, [r7, #22]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00c      	beq.n	800259a <LoadProfile+0xfa>
 8002580:	8afb      	ldrh	r3, [r7, #22]
 8002582:	461a      	mov	r2, r3
 8002584:	f240 217a 	movw	r1, #634	@ 0x27a
 8002588:	489b      	ldr	r0, [pc, #620]	@ (80027f8 <LoadProfile+0x358>)
 800258a:	f01e f823 	bl	80205d4 <iprintf>
 800258e:	4b9b      	ldr	r3, [pc, #620]	@ (80027fc <LoadProfile+0x35c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	4618      	mov	r0, r3
 8002596:	f01d ff47 	bl	8020428 <fflush>

        /* Set Active poll bitmap config. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_ACT_POLL_TECH_CFG, wActPollConfig);
 800259a:	4b96      	ldr	r3, [pc, #600]	@ (80027f4 <LoadProfile+0x354>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	8a7a      	ldrh	r2, [r7, #18]
 80025a0:	218a      	movs	r1, #138	@ 0x8a
 80025a2:	4618      	mov	r0, r3
 80025a4:	f005 fe18 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 80025a8:	4603      	mov	r3, r0
 80025aa:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 80025ac:	8afb      	ldrh	r3, [r7, #22]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00c      	beq.n	80025cc <LoadProfile+0x12c>
 80025b2:	8afb      	ldrh	r3, [r7, #22]
 80025b4:	461a      	mov	r2, r3
 80025b6:	f240 217e 	movw	r1, #638	@ 0x27e
 80025ba:	488f      	ldr	r0, [pc, #572]	@ (80027f8 <LoadProfile+0x358>)
 80025bc:	f01e f80a 	bl	80205d4 <iprintf>
 80025c0:	4b8e      	ldr	r3, [pc, #568]	@ (80027fc <LoadProfile+0x35c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f01d ff2e 	bl	8020428 <fflush>

        /* Set Passive listen bitmap config. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_PAS_LIS_TECH_CFG, wPasLisConfig);
 80025cc:	4b89      	ldr	r3, [pc, #548]	@ (80027f4 <LoadProfile+0x354>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	8a3a      	ldrh	r2, [r7, #16]
 80025d2:	218b      	movs	r1, #139	@ 0x8b
 80025d4:	4618      	mov	r0, r3
 80025d6:	f005 fdff 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 80025da:	4603      	mov	r3, r0
 80025dc:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 80025de:	8afb      	ldrh	r3, [r7, #22]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00c      	beq.n	80025fe <LoadProfile+0x15e>
 80025e4:	8afb      	ldrh	r3, [r7, #22]
 80025e6:	461a      	mov	r2, r3
 80025e8:	f240 2182 	movw	r1, #642	@ 0x282
 80025ec:	4882      	ldr	r0, [pc, #520]	@ (80027f8 <LoadProfile+0x358>)
 80025ee:	f01d fff1 	bl	80205d4 <iprintf>
 80025f2:	4b82      	ldr	r3, [pc, #520]	@ (80027fc <LoadProfile+0x35c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f01d ff15 	bl	8020428 <fflush>

        /* Set Active listen bitmap config. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_ACT_LIS_TECH_CFG, wActLisConfig);
 80025fe:	4b7d      	ldr	r3, [pc, #500]	@ (80027f4 <LoadProfile+0x354>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	89fa      	ldrh	r2, [r7, #14]
 8002604:	2189      	movs	r1, #137	@ 0x89
 8002606:	4618      	mov	r0, r3
 8002608:	f005 fde6 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 800260c:	4603      	mov	r3, r0
 800260e:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002610:	8afb      	ldrh	r3, [r7, #22]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00c      	beq.n	8002630 <LoadProfile+0x190>
 8002616:	8afb      	ldrh	r3, [r7, #22]
 8002618:	461a      	mov	r2, r3
 800261a:	f240 2186 	movw	r1, #646	@ 0x286
 800261e:	4876      	ldr	r0, [pc, #472]	@ (80027f8 <LoadProfile+0x358>)
 8002620:	f01d ffd8 	bl	80205d4 <iprintf>
 8002624:	4b75      	ldr	r3, [pc, #468]	@ (80027fc <LoadProfile+0x35c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	4618      	mov	r0, r3
 800262c:	f01d fefc 	bl	8020428 <fflush>

        /* reset collision Pending */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_COLLISION_PENDING, PH_OFF);
 8002630:	4b70      	ldr	r3, [pc, #448]	@ (80027f4 <LoadProfile+0x354>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2200      	movs	r2, #0
 8002636:	2183      	movs	r1, #131	@ 0x83
 8002638:	4618      	mov	r0, r3
 800263a:	f005 fdcd 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 800263e:	4603      	mov	r3, r0
 8002640:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002642:	8afb      	ldrh	r3, [r7, #22]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00c      	beq.n	8002662 <LoadProfile+0x1c2>
 8002648:	8afb      	ldrh	r3, [r7, #22]
 800264a:	461a      	mov	r2, r3
 800264c:	f240 218a 	movw	r1, #650	@ 0x28a
 8002650:	4869      	ldr	r0, [pc, #420]	@ (80027f8 <LoadProfile+0x358>)
 8002652:	f01d ffbf 	bl	80205d4 <iprintf>
 8002656:	4b69      	ldr	r3, [pc, #420]	@ (80027fc <LoadProfile+0x35c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	4618      	mov	r0, r3
 800265e:	f01d fee3 	bl	8020428 <fflush>

        /* whether anti-collision is supported or not. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_ANTI_COLL, PH_ON);
 8002662:	4b64      	ldr	r3, [pc, #400]	@ (80027f4 <LoadProfile+0x354>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2201      	movs	r2, #1
 8002668:	2188      	movs	r1, #136	@ 0x88
 800266a:	4618      	mov	r0, r3
 800266c:	f005 fdb4 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 8002670:	4603      	mov	r3, r0
 8002672:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002674:	8afb      	ldrh	r3, [r7, #22]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00c      	beq.n	8002694 <LoadProfile+0x1f4>
 800267a:	8afb      	ldrh	r3, [r7, #22]
 800267c:	461a      	mov	r2, r3
 800267e:	f240 218e 	movw	r1, #654	@ 0x28e
 8002682:	485d      	ldr	r0, [pc, #372]	@ (80027f8 <LoadProfile+0x358>)
 8002684:	f01d ffa6 	bl	80205d4 <iprintf>
 8002688:	4b5c      	ldr	r3, [pc, #368]	@ (80027fc <LoadProfile+0x35c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	4618      	mov	r0, r3
 8002690:	f01d feca 	bl	8020428 <fflush>

        /* Poll Mode default state*/
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_NEXT_POLL_STATE, PHAC_DISCLOOP_POLL_STATE_DETECTION);
 8002694:	4b57      	ldr	r3, [pc, #348]	@ (80027f4 <LoadProfile+0x354>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2201      	movs	r2, #1
 800269a:	2184      	movs	r1, #132	@ 0x84
 800269c:	4618      	mov	r0, r3
 800269e:	f005 fd9b 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 80026a2:	4603      	mov	r3, r0
 80026a4:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 80026a6:	8afb      	ldrh	r3, [r7, #22]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00c      	beq.n	80026c6 <LoadProfile+0x226>
 80026ac:	8afb      	ldrh	r3, [r7, #22]
 80026ae:	461a      	mov	r2, r3
 80026b0:	f240 2192 	movw	r1, #658	@ 0x292
 80026b4:	4850      	ldr	r0, [pc, #320]	@ (80027f8 <LoadProfile+0x358>)
 80026b6:	f01d ff8d 	bl	80205d4 <iprintf>
 80026ba:	4b50      	ldr	r3, [pc, #320]	@ (80027fc <LoadProfile+0x35c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f01d feb1 	bl	8020428 <fflush>

#ifdef  NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS
        /* Device limit for Type A */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEA_DEVICE_LIMIT, 1);
 80026c6:	4b4b      	ldr	r3, [pc, #300]	@ (80027f4 <LoadProfile+0x354>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2201      	movs	r2, #1
 80026cc:	2110      	movs	r1, #16
 80026ce:	4618      	mov	r0, r3
 80026d0:	f005 fd82 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 80026d4:	4603      	mov	r3, r0
 80026d6:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 80026d8:	8afb      	ldrh	r3, [r7, #22]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00c      	beq.n	80026f8 <LoadProfile+0x258>
 80026de:	8afb      	ldrh	r3, [r7, #22]
 80026e0:	461a      	mov	r2, r3
 80026e2:	f240 2197 	movw	r1, #663	@ 0x297
 80026e6:	4844      	ldr	r0, [pc, #272]	@ (80027f8 <LoadProfile+0x358>)
 80026e8:	f01d ff74 	bl	80205d4 <iprintf>
 80026ec:	4b43      	ldr	r3, [pc, #268]	@ (80027fc <LoadProfile+0x35c>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f01d fe98 	bl	8020428 <fflush>

        /* Passive polling Tx Guard times in micro seconds. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_GTA_VALUE_US, 5100);
 80026f8:	4b3e      	ldr	r3, [pc, #248]	@ (80027f4 <LoadProfile+0x354>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 8002700:	2100      	movs	r1, #0
 8002702:	4618      	mov	r0, r3
 8002704:	f005 fd68 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 8002708:	4603      	mov	r3, r0
 800270a:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 800270c:	8afb      	ldrh	r3, [r7, #22]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00c      	beq.n	800272c <LoadProfile+0x28c>
 8002712:	8afb      	ldrh	r3, [r7, #22]
 8002714:	461a      	mov	r2, r3
 8002716:	f240 219b 	movw	r1, #667	@ 0x29b
 800271a:	4837      	ldr	r0, [pc, #220]	@ (80027f8 <LoadProfile+0x358>)
 800271c:	f01d ff5a 	bl	80205d4 <iprintf>
 8002720:	4b36      	ldr	r3, [pc, #216]	@ (80027fc <LoadProfile+0x35c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	4618      	mov	r0, r3
 8002728:	f01d fe7e 	bl	8020428 <fflush>
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
        /* Device limit for Type B */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEB_DEVICE_LIMIT, 1);
 800272c:	4b31      	ldr	r3, [pc, #196]	@ (80027f4 <LoadProfile+0x354>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2201      	movs	r2, #1
 8002732:	2111      	movs	r1, #17
 8002734:	4618      	mov	r0, r3
 8002736:	f005 fd4f 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 800273a:	4603      	mov	r3, r0
 800273c:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 800273e:	8afb      	ldrh	r3, [r7, #22]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00c      	beq.n	800275e <LoadProfile+0x2be>
 8002744:	8afb      	ldrh	r3, [r7, #22]
 8002746:	461a      	mov	r2, r3
 8002748:	f240 21a1 	movw	r1, #673	@ 0x2a1
 800274c:	482a      	ldr	r0, [pc, #168]	@ (80027f8 <LoadProfile+0x358>)
 800274e:	f01d ff41 	bl	80205d4 <iprintf>
 8002752:	4b2a      	ldr	r3, [pc, #168]	@ (80027fc <LoadProfile+0x35c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	4618      	mov	r0, r3
 800275a:	f01d fe65 	bl	8020428 <fflush>

        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_GTB_VALUE_US, 5100);
 800275e:	4b25      	ldr	r3, [pc, #148]	@ (80027f4 <LoadProfile+0x354>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 8002766:	2101      	movs	r1, #1
 8002768:	4618      	mov	r0, r3
 800276a:	f005 fd35 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 800276e:	4603      	mov	r3, r0
 8002770:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002772:	8afb      	ldrh	r3, [r7, #22]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00c      	beq.n	8002792 <LoadProfile+0x2f2>
 8002778:	8afb      	ldrh	r3, [r7, #22]
 800277a:	461a      	mov	r2, r3
 800277c:	f44f 7129 	mov.w	r1, #676	@ 0x2a4
 8002780:	481d      	ldr	r0, [pc, #116]	@ (80027f8 <LoadProfile+0x358>)
 8002782:	f01d ff27 	bl	80205d4 <iprintf>
 8002786:	4b1d      	ldr	r3, [pc, #116]	@ (80027fc <LoadProfile+0x35c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	4618      	mov	r0, r3
 800278e:	f01d fe4b 	bl	8020428 <fflush>
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
        /* Device limit for Type F */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEF_DEVICE_LIMIT, 1);
 8002792:	4b18      	ldr	r3, [pc, #96]	@ (80027f4 <LoadProfile+0x354>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2201      	movs	r2, #1
 8002798:	2112      	movs	r1, #18
 800279a:	4618      	mov	r0, r3
 800279c:	f005 fd1c 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 80027a0:	4603      	mov	r3, r0
 80027a2:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 80027a4:	8afb      	ldrh	r3, [r7, #22]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00c      	beq.n	80027c4 <LoadProfile+0x324>
 80027aa:	8afb      	ldrh	r3, [r7, #22]
 80027ac:	461a      	mov	r2, r3
 80027ae:	f240 21aa 	movw	r1, #682	@ 0x2aa
 80027b2:	4811      	ldr	r0, [pc, #68]	@ (80027f8 <LoadProfile+0x358>)
 80027b4:	f01d ff0e 	bl	80205d4 <iprintf>
 80027b8:	4b10      	ldr	r3, [pc, #64]	@ (80027fc <LoadProfile+0x35c>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	4618      	mov	r0, r3
 80027c0:	f01d fe32 	bl	8020428 <fflush>

        /* Guard time for Type F. This guard time is applied when Type F poll before Type B */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_GTFB_VALUE_US, 20400);
 80027c4:	4b0b      	ldr	r3, [pc, #44]	@ (80027f4 <LoadProfile+0x354>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f644 72b0 	movw	r2, #20400	@ 0x4fb0
 80027cc:	2102      	movs	r1, #2
 80027ce:	4618      	mov	r0, r3
 80027d0:	f005 fd02 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 80027d4:	4603      	mov	r3, r0
 80027d6:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 80027d8:	8afb      	ldrh	r3, [r7, #22]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d013      	beq.n	8002806 <LoadProfile+0x366>
 80027de:	8afb      	ldrh	r3, [r7, #22]
 80027e0:	461a      	mov	r2, r3
 80027e2:	f240 21ae 	movw	r1, #686	@ 0x2ae
 80027e6:	4804      	ldr	r0, [pc, #16]	@ (80027f8 <LoadProfile+0x358>)
 80027e8:	f01d fef4 	bl	80205d4 <iprintf>
 80027ec:	4b03      	ldr	r3, [pc, #12]	@ (80027fc <LoadProfile+0x35c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	e005      	b.n	8002800 <LoadProfile+0x360>
 80027f4:	20000538 	.word	0x20000538
 80027f8:	08022538 	.word	0x08022538
 80027fc:	20000084 	.word	0x20000084
 8002800:	4618      	mov	r0, r3
 8002802:	f01d fe11 	bl	8020428 <fflush>

        /* Guard time for Type F. This guard time is applied when Type B poll before Type F */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_GTBF_VALUE_US, 15300);
 8002806:	4b4d      	ldr	r3, [pc, #308]	@ (800293c <LoadProfile+0x49c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f643 32c4 	movw	r2, #15300	@ 0x3bc4
 800280e:	2103      	movs	r1, #3
 8002810:	4618      	mov	r0, r3
 8002812:	f005 fce1 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 8002816:	4603      	mov	r3, r0
 8002818:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 800281a:	8afb      	ldrh	r3, [r7, #22]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00c      	beq.n	800283a <LoadProfile+0x39a>
 8002820:	8afb      	ldrh	r3, [r7, #22]
 8002822:	461a      	mov	r2, r3
 8002824:	f240 21b2 	movw	r1, #690	@ 0x2b2
 8002828:	4845      	ldr	r0, [pc, #276]	@ (8002940 <LoadProfile+0x4a0>)
 800282a:	f01d fed3 	bl	80205d4 <iprintf>
 800282e:	4b45      	ldr	r3, [pc, #276]	@ (8002944 <LoadProfile+0x4a4>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	4618      	mov	r0, r3
 8002836:	f01d fdf7 	bl	8020428 <fflush>
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
        /* Device limit for Type V (ISO 15693) */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEV_DEVICE_LIMIT, 1);
 800283a:	4b40      	ldr	r3, [pc, #256]	@ (800293c <LoadProfile+0x49c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2201      	movs	r2, #1
 8002840:	2113      	movs	r1, #19
 8002842:	4618      	mov	r0, r3
 8002844:	f005 fcc8 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 8002848:	4603      	mov	r3, r0
 800284a:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 800284c:	8afb      	ldrh	r3, [r7, #22]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00c      	beq.n	800286c <LoadProfile+0x3cc>
 8002852:	8afb      	ldrh	r3, [r7, #22]
 8002854:	461a      	mov	r2, r3
 8002856:	f44f 712e 	mov.w	r1, #696	@ 0x2b8
 800285a:	4839      	ldr	r0, [pc, #228]	@ (8002940 <LoadProfile+0x4a0>)
 800285c:	f01d feba 	bl	80205d4 <iprintf>
 8002860:	4b38      	ldr	r3, [pc, #224]	@ (8002944 <LoadProfile+0x4a4>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	4618      	mov	r0, r3
 8002868:	f01d fdde 	bl	8020428 <fflush>

        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_GTV_VALUE_US, 5200);
 800286c:	4b33      	ldr	r3, [pc, #204]	@ (800293c <LoadProfile+0x49c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f241 4250 	movw	r2, #5200	@ 0x1450
 8002874:	2104      	movs	r1, #4
 8002876:	4618      	mov	r0, r3
 8002878:	f005 fcae 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 800287c:	4603      	mov	r3, r0
 800287e:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002880:	8afb      	ldrh	r3, [r7, #22]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00c      	beq.n	80028a0 <LoadProfile+0x400>
 8002886:	8afb      	ldrh	r3, [r7, #22]
 8002888:	461a      	mov	r2, r3
 800288a:	f240 21bb 	movw	r1, #699	@ 0x2bb
 800288e:	482c      	ldr	r0, [pc, #176]	@ (8002940 <LoadProfile+0x4a0>)
 8002890:	f01d fea0 	bl	80205d4 <iprintf>
 8002894:	4b2b      	ldr	r3, [pc, #172]	@ (8002944 <LoadProfile+0x4a4>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	4618      	mov	r0, r3
 800289c:	f01d fdc4 	bl	8020428 <fflush>
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
        /* Device limit for 18000P3M3 */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_18000P3M3_DEVICE_LIMIT, 1);
 80028a0:	4b26      	ldr	r3, [pc, #152]	@ (800293c <LoadProfile+0x49c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2201      	movs	r2, #1
 80028a6:	2114      	movs	r1, #20
 80028a8:	4618      	mov	r0, r3
 80028aa:	f005 fc95 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 80028ae:	4603      	mov	r3, r0
 80028b0:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 80028b2:	8afb      	ldrh	r3, [r7, #22]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00c      	beq.n	80028d2 <LoadProfile+0x432>
 80028b8:	8afb      	ldrh	r3, [r7, #22]
 80028ba:	461a      	mov	r2, r3
 80028bc:	f240 21c1 	movw	r1, #705	@ 0x2c1
 80028c0:	481f      	ldr	r0, [pc, #124]	@ (8002940 <LoadProfile+0x4a0>)
 80028c2:	f01d fe87 	bl	80205d4 <iprintf>
 80028c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002944 <LoadProfile+0x4a4>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f01d fdab 	bl	8020428 <fflush>

        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_GT18000P3M3_VALUE_US, 10000);
 80028d2:	4b1a      	ldr	r3, [pc, #104]	@ (800293c <LoadProfile+0x49c>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80028da:	2105      	movs	r1, #5
 80028dc:	4618      	mov	r0, r3
 80028de:	f005 fc7b 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 80028e2:	4603      	mov	r3, r0
 80028e4:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 80028e6:	8afb      	ldrh	r3, [r7, #22]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00c      	beq.n	8002906 <LoadProfile+0x466>
 80028ec:	8afb      	ldrh	r3, [r7, #22]
 80028ee:	461a      	mov	r2, r3
 80028f0:	f44f 7131 	mov.w	r1, #708	@ 0x2c4
 80028f4:	4812      	ldr	r0, [pc, #72]	@ (8002940 <LoadProfile+0x4a0>)
 80028f6:	f01d fe6d 	bl	80205d4 <iprintf>
 80028fa:	4b12      	ldr	r3, [pc, #72]	@ (8002944 <LoadProfile+0x4a4>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	4618      	mov	r0, r3
 8002902:	f01d fd91 	bl	8020428 <fflush>
#endif

        /* Discovery loop Operation mode */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_OPE_MODE, RD_LIB_MODE_NFC);
 8002906:	4b0d      	ldr	r3, [pc, #52]	@ (800293c <LoadProfile+0x49c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2202      	movs	r2, #2
 800290c:	2182      	movs	r1, #130	@ 0x82
 800290e:	4618      	mov	r0, r3
 8002910:	f005 fc62 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 8002914:	4603      	mov	r3, r0
 8002916:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002918:	8afb      	ldrh	r3, [r7, #22]
 800291a:	2b00      	cmp	r3, #0
 800291c:	f000 8279 	beq.w	8002e12 <LoadProfile+0x972>
 8002920:	8afb      	ldrh	r3, [r7, #22]
 8002922:	461a      	mov	r2, r3
 8002924:	f240 21c9 	movw	r1, #713	@ 0x2c9
 8002928:	4805      	ldr	r0, [pc, #20]	@ (8002940 <LoadProfile+0x4a0>)
 800292a:	f01d fe53 	bl	80205d4 <iprintf>
 800292e:	4b05      	ldr	r3, [pc, #20]	@ (8002944 <LoadProfile+0x4a4>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	4618      	mov	r0, r3
 8002936:	f01d fd77 	bl	8020428 <fflush>
 800293a:	e26a      	b.n	8002e12 <LoadProfile+0x972>
 800293c:	20000538 	.word	0x20000538
 8002940:	08022538 	.word	0x08022538
 8002944:	20000084 	.word	0x20000084
    }
    /* 对于EMVCo模式, 专用于支付终端POS, 配置更加严格, 通常只允许Type A/B协议, 不使用P2P、不启动主动监听 */
    else if(bProfile == PHAC_DISCLOOP_PROFILE_EMVCO)
 8002948:	79fb      	ldrb	r3, [r7, #7]
 800294a:	2b02      	cmp	r3, #2
 800294c:	f040 8261 	bne.w	8002e12 <LoadProfile+0x972>
    {
        /* EMVCO */
        /* passive Bailout bitmap config. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_BAIL_OUT, 0x00);
 8002950:	4baf      	ldr	r3, [pc, #700]	@ (8002c10 <LoadProfile+0x770>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2200      	movs	r2, #0
 8002956:	2186      	movs	r1, #134	@ 0x86
 8002958:	4618      	mov	r0, r3
 800295a:	f005 fc3d 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 800295e:	4603      	mov	r3, r0
 8002960:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002962:	8afb      	ldrh	r3, [r7, #22]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00c      	beq.n	8002982 <LoadProfile+0x4e2>
 8002968:	8afb      	ldrh	r3, [r7, #22]
 800296a:	461a      	mov	r2, r3
 800296c:	f240 21d1 	movw	r1, #721	@ 0x2d1
 8002970:	48a8      	ldr	r0, [pc, #672]	@ (8002c14 <LoadProfile+0x774>)
 8002972:	f01d fe2f 	bl	80205d4 <iprintf>
 8002976:	4ba8      	ldr	r3, [pc, #672]	@ (8002c18 <LoadProfile+0x778>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	4618      	mov	r0, r3
 800297e:	f01d fd53 	bl	8020428 <fflush>

        /* passive poll bitmap config.只启用TypeA/B */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_PAS_POLL_TECH_CFG, (PHAC_DISCLOOP_POS_BIT_MASK_A | PHAC_DISCLOOP_POS_BIT_MASK_B));
 8002982:	4ba3      	ldr	r3, [pc, #652]	@ (8002c10 <LoadProfile+0x770>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2203      	movs	r2, #3
 8002988:	218c      	movs	r1, #140	@ 0x8c
 800298a:	4618      	mov	r0, r3
 800298c:	f005 fc24 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 8002990:	4603      	mov	r3, r0
 8002992:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002994:	8afb      	ldrh	r3, [r7, #22]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00c      	beq.n	80029b4 <LoadProfile+0x514>
 800299a:	8afb      	ldrh	r3, [r7, #22]
 800299c:	461a      	mov	r2, r3
 800299e:	f240 21d5 	movw	r1, #725	@ 0x2d5
 80029a2:	489c      	ldr	r0, [pc, #624]	@ (8002c14 <LoadProfile+0x774>)
 80029a4:	f01d fe16 	bl	80205d4 <iprintf>
 80029a8:	4b9b      	ldr	r3, [pc, #620]	@ (8002c18 <LoadProfile+0x778>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f01d fd3a 	bl	8020428 <fflush>

        /* Active Listen bitmap config. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_PAS_LIS_TECH_CFG, 0x00);
 80029b4:	4b96      	ldr	r3, [pc, #600]	@ (8002c10 <LoadProfile+0x770>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2200      	movs	r2, #0
 80029ba:	218b      	movs	r1, #139	@ 0x8b
 80029bc:	4618      	mov	r0, r3
 80029be:	f005 fc0b 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 80029c2:	4603      	mov	r3, r0
 80029c4:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 80029c6:	8afb      	ldrh	r3, [r7, #22]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00c      	beq.n	80029e6 <LoadProfile+0x546>
 80029cc:	8afb      	ldrh	r3, [r7, #22]
 80029ce:	461a      	mov	r2, r3
 80029d0:	f240 21d9 	movw	r1, #729	@ 0x2d9
 80029d4:	488f      	ldr	r0, [pc, #572]	@ (8002c14 <LoadProfile+0x774>)
 80029d6:	f01d fdfd 	bl	80205d4 <iprintf>
 80029da:	4b8f      	ldr	r3, [pc, #572]	@ (8002c18 <LoadProfile+0x778>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f01d fd21 	bl	8020428 <fflush>

        /* Active Listen bitmap config. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_ACT_LIS_TECH_CFG, 0x00);
 80029e6:	4b8a      	ldr	r3, [pc, #552]	@ (8002c10 <LoadProfile+0x770>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2200      	movs	r2, #0
 80029ec:	2189      	movs	r1, #137	@ 0x89
 80029ee:	4618      	mov	r0, r3
 80029f0:	f005 fbf2 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 80029f4:	4603      	mov	r3, r0
 80029f6:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 80029f8:	8afb      	ldrh	r3, [r7, #22]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00c      	beq.n	8002a18 <LoadProfile+0x578>
 80029fe:	8afb      	ldrh	r3, [r7, #22]
 8002a00:	461a      	mov	r2, r3
 8002a02:	f240 21dd 	movw	r1, #733	@ 0x2dd
 8002a06:	4883      	ldr	r0, [pc, #524]	@ (8002c14 <LoadProfile+0x774>)
 8002a08:	f01d fde4 	bl	80205d4 <iprintf>
 8002a0c:	4b82      	ldr	r3, [pc, #520]	@ (8002c18 <LoadProfile+0x778>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f01d fd08 	bl	8020428 <fflush>

        /* Active Poll bitmap config. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_ACT_POLL_TECH_CFG, 0x00);
 8002a18:	4b7d      	ldr	r3, [pc, #500]	@ (8002c10 <LoadProfile+0x770>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	218a      	movs	r1, #138	@ 0x8a
 8002a20:	4618      	mov	r0, r3
 8002a22:	f005 fbd9 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 8002a26:	4603      	mov	r3, r0
 8002a28:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002a2a:	8afb      	ldrh	r3, [r7, #22]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00c      	beq.n	8002a4a <LoadProfile+0x5aa>
 8002a30:	8afb      	ldrh	r3, [r7, #22]
 8002a32:	461a      	mov	r2, r3
 8002a34:	f240 21e1 	movw	r1, #737	@ 0x2e1
 8002a38:	4876      	ldr	r0, [pc, #472]	@ (8002c14 <LoadProfile+0x774>)
 8002a3a:	f01d fdcb 	bl	80205d4 <iprintf>
 8002a3e:	4b76      	ldr	r3, [pc, #472]	@ (8002c18 <LoadProfile+0x778>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f01d fcef 	bl	8020428 <fflush>

        /* Bool to enable LPCD feature. 禁用低功耗卡检测 */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_ENABLE_LPCD, PH_OFF);
 8002a4a:	4b71      	ldr	r3, [pc, #452]	@ (8002c10 <LoadProfile+0x770>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	2180      	movs	r1, #128	@ 0x80
 8002a52:	4618      	mov	r0, r3
 8002a54:	f005 fbc0 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002a5c:	8afb      	ldrh	r3, [r7, #22]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00c      	beq.n	8002a7c <LoadProfile+0x5dc>
 8002a62:	8afb      	ldrh	r3, [r7, #22]
 8002a64:	461a      	mov	r2, r3
 8002a66:	f240 21e5 	movw	r1, #741	@ 0x2e5
 8002a6a:	486a      	ldr	r0, [pc, #424]	@ (8002c14 <LoadProfile+0x774>)
 8002a6c:	f01d fdb2 	bl	80205d4 <iprintf>
 8002a70:	4b69      	ldr	r3, [pc, #420]	@ (8002c18 <LoadProfile+0x778>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f01d fcd6 	bl	8020428 <fflush>

        /* reset collision Pending */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_COLLISION_PENDING, PH_OFF);
 8002a7c:	4b64      	ldr	r3, [pc, #400]	@ (8002c10 <LoadProfile+0x770>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2200      	movs	r2, #0
 8002a82:	2183      	movs	r1, #131	@ 0x83
 8002a84:	4618      	mov	r0, r3
 8002a86:	f005 fba7 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002a8e:	8afb      	ldrh	r3, [r7, #22]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00c      	beq.n	8002aae <LoadProfile+0x60e>
 8002a94:	8afb      	ldrh	r3, [r7, #22]
 8002a96:	461a      	mov	r2, r3
 8002a98:	f240 21e9 	movw	r1, #745	@ 0x2e9
 8002a9c:	485d      	ldr	r0, [pc, #372]	@ (8002c14 <LoadProfile+0x774>)
 8002a9e:	f01d fd99 	bl	80205d4 <iprintf>
 8002aa2:	4b5d      	ldr	r3, [pc, #372]	@ (8002c18 <LoadProfile+0x778>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f01d fcbd 	bl	8020428 <fflush>

        /* whether anti-collision is supported or not.启用防冲突 */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_ANTI_COLL, PH_ON);
 8002aae:	4b58      	ldr	r3, [pc, #352]	@ (8002c10 <LoadProfile+0x770>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	2188      	movs	r1, #136	@ 0x88
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f005 fb8e 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 8002abc:	4603      	mov	r3, r0
 8002abe:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002ac0:	8afb      	ldrh	r3, [r7, #22]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00c      	beq.n	8002ae0 <LoadProfile+0x640>
 8002ac6:	8afb      	ldrh	r3, [r7, #22]
 8002ac8:	461a      	mov	r2, r3
 8002aca:	f240 21ed 	movw	r1, #749	@ 0x2ed
 8002ace:	4851      	ldr	r0, [pc, #324]	@ (8002c14 <LoadProfile+0x774>)
 8002ad0:	f01d fd80 	bl	80205d4 <iprintf>
 8002ad4:	4b50      	ldr	r3, [pc, #320]	@ (8002c18 <LoadProfile+0x778>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f01d fca4 	bl	8020428 <fflush>

        /* Poll Mode default state*/
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_NEXT_POLL_STATE, PHAC_DISCLOOP_POLL_STATE_DETECTION);
 8002ae0:	4b4b      	ldr	r3, [pc, #300]	@ (8002c10 <LoadProfile+0x770>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	2184      	movs	r1, #132	@ 0x84
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f005 fb75 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 8002aee:	4603      	mov	r3, r0
 8002af0:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002af2:	8afb      	ldrh	r3, [r7, #22]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00c      	beq.n	8002b12 <LoadProfile+0x672>
 8002af8:	8afb      	ldrh	r3, [r7, #22]
 8002afa:	461a      	mov	r2, r3
 8002afc:	f240 21f1 	movw	r1, #753	@ 0x2f1
 8002b00:	4844      	ldr	r0, [pc, #272]	@ (8002c14 <LoadProfile+0x774>)
 8002b02:	f01d fd67 	bl	80205d4 <iprintf>
 8002b06:	4b44      	ldr	r3, [pc, #272]	@ (8002c18 <LoadProfile+0x778>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f01d fc8b 	bl	8020428 <fflush>

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS
        /* Device limit for Type A */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEA_DEVICE_LIMIT, 1);
 8002b12:	4b3f      	ldr	r3, [pc, #252]	@ (8002c10 <LoadProfile+0x770>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2201      	movs	r2, #1
 8002b18:	2110      	movs	r1, #16
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f005 fb5c 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 8002b20:	4603      	mov	r3, r0
 8002b22:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002b24:	8afb      	ldrh	r3, [r7, #22]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00c      	beq.n	8002b44 <LoadProfile+0x6a4>
 8002b2a:	8afb      	ldrh	r3, [r7, #22]
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	f240 21f6 	movw	r1, #758	@ 0x2f6
 8002b32:	4838      	ldr	r0, [pc, #224]	@ (8002c14 <LoadProfile+0x774>)
 8002b34:	f01d fd4e 	bl	80205d4 <iprintf>
 8002b38:	4b37      	ldr	r3, [pc, #220]	@ (8002c18 <LoadProfile+0x778>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f01d fc72 	bl	8020428 <fflush>

        /* Passive polling Tx Guard times in micro seconds. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_GTA_VALUE_US, 5100);
 8002b44:	4b32      	ldr	r3, [pc, #200]	@ (8002c10 <LoadProfile+0x770>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f005 fb42 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 8002b54:	4603      	mov	r3, r0
 8002b56:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002b58:	8afb      	ldrh	r3, [r7, #22]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00c      	beq.n	8002b78 <LoadProfile+0x6d8>
 8002b5e:	8afb      	ldrh	r3, [r7, #22]
 8002b60:	461a      	mov	r2, r3
 8002b62:	f240 21fa 	movw	r1, #762	@ 0x2fa
 8002b66:	482b      	ldr	r0, [pc, #172]	@ (8002c14 <LoadProfile+0x774>)
 8002b68:	f01d fd34 	bl	80205d4 <iprintf>
 8002b6c:	4b2a      	ldr	r3, [pc, #168]	@ (8002c18 <LoadProfile+0x778>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f01d fc58 	bl	8020428 <fflush>

        /* Configure FSDI for the 14443P4A tags */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_FSDI, 0x08);
 8002b78:	4b25      	ldr	r3, [pc, #148]	@ (8002c10 <LoadProfile+0x770>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2208      	movs	r2, #8
 8002b7e:	2140      	movs	r1, #64	@ 0x40
 8002b80:	4618      	mov	r0, r3
 8002b82:	f005 fb29 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 8002b86:	4603      	mov	r3, r0
 8002b88:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002b8a:	8afb      	ldrh	r3, [r7, #22]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00c      	beq.n	8002baa <LoadProfile+0x70a>
 8002b90:	8afb      	ldrh	r3, [r7, #22]
 8002b92:	461a      	mov	r2, r3
 8002b94:	f240 21fe 	movw	r1, #766	@ 0x2fe
 8002b98:	481e      	ldr	r0, [pc, #120]	@ (8002c14 <LoadProfile+0x774>)
 8002b9a:	f01d fd1b 	bl	80205d4 <iprintf>
 8002b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8002c18 <LoadProfile+0x778>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f01d fc3f 	bl	8020428 <fflush>

        /* Configure CID for the 14443P4A tags */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_CID, 0x00);
 8002baa:	4b19      	ldr	r3, [pc, #100]	@ (8002c10 <LoadProfile+0x770>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	2141      	movs	r1, #65	@ 0x41
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f005 fb10 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002bbc:	8afb      	ldrh	r3, [r7, #22]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00c      	beq.n	8002bdc <LoadProfile+0x73c>
 8002bc2:	8afb      	ldrh	r3, [r7, #22]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	f240 3102 	movw	r1, #770	@ 0x302
 8002bca:	4812      	ldr	r0, [pc, #72]	@ (8002c14 <LoadProfile+0x774>)
 8002bcc:	f01d fd02 	bl	80205d4 <iprintf>
 8002bd0:	4b11      	ldr	r3, [pc, #68]	@ (8002c18 <LoadProfile+0x778>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f01d fc26 	bl	8020428 <fflush>

        /* Configure DRI for the 14443P4A tags */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_DRI, 0x00);
 8002bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8002c10 <LoadProfile+0x770>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2200      	movs	r2, #0
 8002be2:	2143      	movs	r1, #67	@ 0x43
 8002be4:	4618      	mov	r0, r3
 8002be6:	f005 faf7 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 8002bea:	4603      	mov	r3, r0
 8002bec:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002bee:	8afb      	ldrh	r3, [r7, #22]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d013      	beq.n	8002c1c <LoadProfile+0x77c>
 8002bf4:	8afb      	ldrh	r3, [r7, #22]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	f240 3106 	movw	r1, #774	@ 0x306
 8002bfc:	4805      	ldr	r0, [pc, #20]	@ (8002c14 <LoadProfile+0x774>)
 8002bfe:	f01d fce9 	bl	80205d4 <iprintf>
 8002c02:	4b05      	ldr	r3, [pc, #20]	@ (8002c18 <LoadProfile+0x778>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f01d fc0d 	bl	8020428 <fflush>
 8002c0e:	e005      	b.n	8002c1c <LoadProfile+0x77c>
 8002c10:	20000538 	.word	0x20000538
 8002c14:	08022538 	.word	0x08022538
 8002c18:	20000084 	.word	0x20000084

        /* Configure DSI for the 14443P4A tags */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_DSI, 0x00);
 8002c1c:	4b7f      	ldr	r3, [pc, #508]	@ (8002e1c <LoadProfile+0x97c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2200      	movs	r2, #0
 8002c22:	2144      	movs	r1, #68	@ 0x44
 8002c24:	4618      	mov	r0, r3
 8002c26:	f005 fad7 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002c2e:	8afb      	ldrh	r3, [r7, #22]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00c      	beq.n	8002c4e <LoadProfile+0x7ae>
 8002c34:	8afb      	ldrh	r3, [r7, #22]
 8002c36:	461a      	mov	r2, r3
 8002c38:	f240 310a 	movw	r1, #778	@ 0x30a
 8002c3c:	4878      	ldr	r0, [pc, #480]	@ (8002e20 <LoadProfile+0x980>)
 8002c3e:	f01d fcc9 	bl	80205d4 <iprintf>
 8002c42:	4b78      	ldr	r3, [pc, #480]	@ (8002e24 <LoadProfile+0x984>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f01d fbed 	bl	8020428 <fflush>
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
        /* Device limit for Type B */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEB_DEVICE_LIMIT, 1);
 8002c4e:	4b73      	ldr	r3, [pc, #460]	@ (8002e1c <LoadProfile+0x97c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2201      	movs	r2, #1
 8002c54:	2111      	movs	r1, #17
 8002c56:	4618      	mov	r0, r3
 8002c58:	f005 fabe 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002c60:	8afb      	ldrh	r3, [r7, #22]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00c      	beq.n	8002c80 <LoadProfile+0x7e0>
 8002c66:	8afb      	ldrh	r3, [r7, #22]
 8002c68:	461a      	mov	r2, r3
 8002c6a:	f44f 7144 	mov.w	r1, #784	@ 0x310
 8002c6e:	486c      	ldr	r0, [pc, #432]	@ (8002e20 <LoadProfile+0x980>)
 8002c70:	f01d fcb0 	bl	80205d4 <iprintf>
 8002c74:	4b6b      	ldr	r3, [pc, #428]	@ (8002e24 <LoadProfile+0x984>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f01d fbd4 	bl	8020428 <fflush>

        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_GTB_VALUE_US, 5100);
 8002c80:	4b66      	ldr	r3, [pc, #408]	@ (8002e1c <LoadProfile+0x97c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 8002c88:	2101      	movs	r1, #1
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f005 faa4 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 8002c90:	4603      	mov	r3, r0
 8002c92:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002c94:	8afb      	ldrh	r3, [r7, #22]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00c      	beq.n	8002cb4 <LoadProfile+0x814>
 8002c9a:	8afb      	ldrh	r3, [r7, #22]
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	f240 3113 	movw	r1, #787	@ 0x313
 8002ca2:	485f      	ldr	r0, [pc, #380]	@ (8002e20 <LoadProfile+0x980>)
 8002ca4:	f01d fc96 	bl	80205d4 <iprintf>
 8002ca8:	4b5e      	ldr	r3, [pc, #376]	@ (8002e24 <LoadProfile+0x984>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f01d fbba 	bl	8020428 <fflush>

        /* Configure AFI for the type B tags */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEB_AFI_REQ, 0x00);
 8002cb4:	4b59      	ldr	r3, [pc, #356]	@ (8002e1c <LoadProfile+0x97c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	2130      	movs	r1, #48	@ 0x30
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f005 fa8b 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002cc6:	8afb      	ldrh	r3, [r7, #22]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00c      	beq.n	8002ce6 <LoadProfile+0x846>
 8002ccc:	8afb      	ldrh	r3, [r7, #22]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	f240 3117 	movw	r1, #791	@ 0x317
 8002cd4:	4852      	ldr	r0, [pc, #328]	@ (8002e20 <LoadProfile+0x980>)
 8002cd6:	f01d fc7d 	bl	80205d4 <iprintf>
 8002cda:	4b52      	ldr	r3, [pc, #328]	@ (8002e24 <LoadProfile+0x984>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f01d fba1 	bl	8020428 <fflush>

        /* Configure FSDI for the type B tags */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEB_FSDI, 0x08);
 8002ce6:	4b4d      	ldr	r3, [pc, #308]	@ (8002e1c <LoadProfile+0x97c>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2208      	movs	r2, #8
 8002cec:	2132      	movs	r1, #50	@ 0x32
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f005 fa72 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002cf8:	8afb      	ldrh	r3, [r7, #22]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00c      	beq.n	8002d18 <LoadProfile+0x878>
 8002cfe:	8afb      	ldrh	r3, [r7, #22]
 8002d00:	461a      	mov	r2, r3
 8002d02:	f240 311b 	movw	r1, #795	@ 0x31b
 8002d06:	4846      	ldr	r0, [pc, #280]	@ (8002e20 <LoadProfile+0x980>)
 8002d08:	f01d fc64 	bl	80205d4 <iprintf>
 8002d0c:	4b45      	ldr	r3, [pc, #276]	@ (8002e24 <LoadProfile+0x984>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f01d fb88 	bl	8020428 <fflush>

        /* Configure CID for the type B tags */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEB_CID, 0x00);
 8002d18:	4b40      	ldr	r3, [pc, #256]	@ (8002e1c <LoadProfile+0x97c>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	2133      	movs	r1, #51	@ 0x33
 8002d20:	4618      	mov	r0, r3
 8002d22:	f005 fa59 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 8002d26:	4603      	mov	r3, r0
 8002d28:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002d2a:	8afb      	ldrh	r3, [r7, #22]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00c      	beq.n	8002d4a <LoadProfile+0x8aa>
 8002d30:	8afb      	ldrh	r3, [r7, #22]
 8002d32:	461a      	mov	r2, r3
 8002d34:	f240 311f 	movw	r1, #799	@ 0x31f
 8002d38:	4839      	ldr	r0, [pc, #228]	@ (8002e20 <LoadProfile+0x980>)
 8002d3a:	f01d fc4b 	bl	80205d4 <iprintf>
 8002d3e:	4b39      	ldr	r3, [pc, #228]	@ (8002e24 <LoadProfile+0x984>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f01d fb6f 	bl	8020428 <fflush>

        /* Configure DRI for the type B tags */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEB_DRI, 0x00);
 8002d4a:	4b34      	ldr	r3, [pc, #208]	@ (8002e1c <LoadProfile+0x97c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	2135      	movs	r1, #53	@ 0x35
 8002d52:	4618      	mov	r0, r3
 8002d54:	f005 fa40 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002d5c:	8afb      	ldrh	r3, [r7, #22]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00c      	beq.n	8002d7c <LoadProfile+0x8dc>
 8002d62:	8afb      	ldrh	r3, [r7, #22]
 8002d64:	461a      	mov	r2, r3
 8002d66:	f240 3123 	movw	r1, #803	@ 0x323
 8002d6a:	482d      	ldr	r0, [pc, #180]	@ (8002e20 <LoadProfile+0x980>)
 8002d6c:	f01d fc32 	bl	80205d4 <iprintf>
 8002d70:	4b2c      	ldr	r3, [pc, #176]	@ (8002e24 <LoadProfile+0x984>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f01d fb56 	bl	8020428 <fflush>

        /* Configure DSI for the type B tags */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEB_DSI, 0x00);
 8002d7c:	4b27      	ldr	r3, [pc, #156]	@ (8002e1c <LoadProfile+0x97c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2200      	movs	r2, #0
 8002d82:	2136      	movs	r1, #54	@ 0x36
 8002d84:	4618      	mov	r0, r3
 8002d86:	f005 fa27 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002d8e:	8afb      	ldrh	r3, [r7, #22]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00c      	beq.n	8002dae <LoadProfile+0x90e>
 8002d94:	8afb      	ldrh	r3, [r7, #22]
 8002d96:	461a      	mov	r2, r3
 8002d98:	f240 3127 	movw	r1, #807	@ 0x327
 8002d9c:	4820      	ldr	r0, [pc, #128]	@ (8002e20 <LoadProfile+0x980>)
 8002d9e:	f01d fc19 	bl	80205d4 <iprintf>
 8002da2:	4b20      	ldr	r3, [pc, #128]	@ (8002e24 <LoadProfile+0x984>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f01d fb3d 	bl	8020428 <fflush>

        /* Configure Extended ATQB support for the type B tags */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEB_EXTATQB, 0x00);
 8002dae:	4b1b      	ldr	r3, [pc, #108]	@ (8002e1c <LoadProfile+0x97c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2200      	movs	r2, #0
 8002db4:	2131      	movs	r1, #49	@ 0x31
 8002db6:	4618      	mov	r0, r3
 8002db8:	f005 fa0e 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002dc0:	8afb      	ldrh	r3, [r7, #22]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00c      	beq.n	8002de0 <LoadProfile+0x940>
 8002dc6:	8afb      	ldrh	r3, [r7, #22]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	f240 312b 	movw	r1, #811	@ 0x32b
 8002dce:	4814      	ldr	r0, [pc, #80]	@ (8002e20 <LoadProfile+0x980>)
 8002dd0:	f01d fc00 	bl	80205d4 <iprintf>
 8002dd4:	4b13      	ldr	r3, [pc, #76]	@ (8002e24 <LoadProfile+0x984>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f01d fb24 	bl	8020428 <fflush>
#endif
        /* Configure reader library mode */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_OPE_MODE, RD_LIB_MODE_EMVCO);
 8002de0:	4b0e      	ldr	r3, [pc, #56]	@ (8002e1c <LoadProfile+0x97c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2201      	movs	r2, #1
 8002de6:	2182      	movs	r1, #130	@ 0x82
 8002de8:	4618      	mov	r0, r3
 8002dea:	f005 f9f5 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 8002dee:	4603      	mov	r3, r0
 8002df0:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002df2:	8afb      	ldrh	r3, [r7, #22]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00c      	beq.n	8002e12 <LoadProfile+0x972>
 8002df8:	8afb      	ldrh	r3, [r7, #22]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	f240 312f 	movw	r1, #815	@ 0x32f
 8002e00:	4807      	ldr	r0, [pc, #28]	@ (8002e20 <LoadProfile+0x980>)
 8002e02:	f01d fbe7 	bl	80205d4 <iprintf>
 8002e06:	4b07      	ldr	r3, [pc, #28]	@ (8002e24 <LoadProfile+0x984>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f01d fb0b 	bl	8020428 <fflush>
    }
    else
    {
        /* Do Nothing */
    }
    return status;
 8002e12:	8afb      	ldrh	r3, [r7, #22]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3718      	adds	r7, #24
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	20000538 	.word	0x20000538
 8002e20:	08022538 	.word	0x08022538
 8002e24:	20000084 	.word	0x20000084

08002e28 <EmvcoProfileProcess>:
static phStatus_t EmvcoDataExchange(uint8_t * com_buffer, uint8_t cmdsize, uint8_t ** resp_buffer, uint32_t * wRxLength);
static void EmvcoRfReset(phacDiscLoop_Sw_DataParams_t * pDataParams);
static phStatus_t EmvcoDataLoopBack(phacDiscLoop_Sw_DataParams_t * pDataParams);

void EmvcoProfileProcess (phacDiscLoop_Sw_DataParams_t * pDataParams,phStatus_t eDiscStatus)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	460b      	mov	r3, r1
 8002e32:	807b      	strh	r3, [r7, #2]
	phStatus_t status = eDiscStatus;
 8002e34:	887b      	ldrh	r3, [r7, #2]
 8002e36:	81fb      	strh	r3, [r7, #14]

	if((status & PH_ERR_MASK) == PHAC_DISCLOOP_DEVICE_ACTIVATED)
 8002e38:	89fb      	ldrh	r3, [r7, #14]
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b8b      	cmp	r3, #139	@ 0x8b
 8002e3e:	d104      	bne.n	8002e4a <EmvcoProfileProcess+0x22>
	{
		status = EmvcoDataLoopBack(pDataParams);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 f861 	bl	8002f08 <EmvcoDataLoopBack>
 8002e46:	4603      	mov	r3, r0
 8002e48:	81fb      	strh	r3, [r7, #14]
	}

	if((status & PH_ERR_MASK) != PHAC_DISCLOOP_NO_TECH_DETECTED)
 8002e4a:	89fb      	ldrh	r3, [r7, #14]
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b84      	cmp	r3, #132	@ 0x84
 8002e50:	d002      	beq.n	8002e58 <EmvcoProfileProcess+0x30>
	{
		/* Perform RF Reset */
		EmvcoRfReset(pDataParams);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f804 	bl	8002e60 <EmvcoRfReset>
	}
}
 8002e58:	bf00      	nop
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <EmvcoRfReset>:
* \return Status code
* \retval #PH_ERR_SUCCESS Operation successful.
* \retval Other Depending on implementation and underlying component.
*/
static void EmvcoRfReset(phacDiscLoop_Sw_DataParams_t * pDataParams)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
    phStatus_t status = PH_ERR_SUCCESS;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	81fb      	strh	r3, [r7, #14]

    /*RF Field OFF*/
    status = phhalHw_FieldOff(pDataParams->pHalDataParams);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e70:	4618      	mov	r0, r3
 8002e72:	f00b fbb3 	bl	800e5dc <phhalHw_Pn5180_FieldOff>
 8002e76:	4603      	mov	r3, r0
 8002e78:	81fb      	strh	r3, [r7, #14]
    CHECK_STATUS(status);
 8002e7a:	89fb      	ldrh	r3, [r7, #14]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00b      	beq.n	8002e98 <EmvcoRfReset+0x38>
 8002e80:	89fb      	ldrh	r3, [r7, #14]
 8002e82:	461a      	mov	r2, r3
 8002e84:	2180      	movs	r1, #128	@ 0x80
 8002e86:	481e      	ldr	r0, [pc, #120]	@ (8002f00 <EmvcoRfReset+0xa0>)
 8002e88:	f01d fba4 	bl	80205d4 <iprintf>
 8002e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8002f04 <EmvcoRfReset+0xa4>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f01d fac8 	bl	8020428 <fflush>

    status = phhalHw_Wait(pDataParams->pHalDataParams,PHHAL_HW_TIME_MICROSECONDS, 5100);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e9c:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f00b fbbe 	bl	800e624 <phhalHw_Pn5180_Wait>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	81fb      	strh	r3, [r7, #14]
    CHECK_STATUS(status);
 8002eac:	89fb      	ldrh	r3, [r7, #14]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00b      	beq.n	8002eca <EmvcoRfReset+0x6a>
 8002eb2:	89fb      	ldrh	r3, [r7, #14]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	2183      	movs	r1, #131	@ 0x83
 8002eb8:	4811      	ldr	r0, [pc, #68]	@ (8002f00 <EmvcoRfReset+0xa0>)
 8002eba:	f01d fb8b 	bl	80205d4 <iprintf>
 8002ebe:	4b11      	ldr	r3, [pc, #68]	@ (8002f04 <EmvcoRfReset+0xa4>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f01d faaf 	bl	8020428 <fflush>

    /*RF Field ON*/
    status = phhalHw_FieldOn(pDataParams->pHalDataParams);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f00b fb2e 	bl	800e530 <phhalHw_Pn5180_FieldOn>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	81fb      	strh	r3, [r7, #14]
    CHECK_STATUS(status);
 8002ed8:	89fb      	ldrh	r3, [r7, #14]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00b      	beq.n	8002ef6 <EmvcoRfReset+0x96>
 8002ede:	89fb      	ldrh	r3, [r7, #14]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	2187      	movs	r1, #135	@ 0x87
 8002ee4:	4806      	ldr	r0, [pc, #24]	@ (8002f00 <EmvcoRfReset+0xa0>)
 8002ee6:	f01d fb75 	bl	80205d4 <iprintf>
 8002eea:	4b06      	ldr	r3, [pc, #24]	@ (8002f04 <EmvcoRfReset+0xa4>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f01d fa99 	bl	8020428 <fflush>

}
 8002ef6:	bf00      	nop
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	08022908 	.word	0x08022908
 8002f04:	20000084 	.word	0x20000084

08002f08 <EmvcoDataLoopBack>:
* \return Status code
* \retval #PH_ERR_SUCCESS Operation successful.
* \retval Other Depending on implementation and underlying component.
*/
static phStatus_t EmvcoDataLoopBack(phacDiscLoop_Sw_DataParams_t * pDataParams)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
    uint32_t cmdsize, respsize;
    phStatus_t status;
    uint8_t bEndOfLoopBack = 0;
 8002f10:	2300      	movs	r3, #0
 8002f12:	747b      	strb	r3, [r7, #17]
    uint8_t bRemovalProcedure = PH_OFF;
 8002f14:	2300      	movs	r3, #0
 8002f16:	743b      	strb	r3, [r7, #16]
    cmdsize = sizeof(PPSE_SELECT_APDU);
 8002f18:	2314      	movs	r3, #20
 8002f1a:	617b      	str	r3, [r7, #20]

    status = EmvcoDataExchange(PPSE_SELECT_APDU, cmdsize, &response_buffer, &respsize);
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	b2d9      	uxtb	r1, r3
 8002f20:	f107 030c 	add.w	r3, r7, #12
 8002f24:	4a5d      	ldr	r2, [pc, #372]	@ (800309c <EmvcoDataLoopBack+0x194>)
 8002f26:	485e      	ldr	r0, [pc, #376]	@ (80030a0 <EmvcoDataLoopBack+0x198>)
 8002f28:	f000 f8d0 	bl	80030cc <EmvcoDataExchange>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	827b      	strh	r3, [r7, #18]

#ifndef RUN_TEST_SUIT

    /*Check if P1 is 0x04 which means that the data field consists of DF name */
    if(PPSE_SELECT_APDU[2] == 0x04)
 8002f30:	4b5b      	ldr	r3, [pc, #364]	@ (80030a0 <EmvcoDataLoopBack+0x198>)
 8002f32:	789b      	ldrb	r3, [r3, #2]
 8002f34:	2b04      	cmp	r3, #4
 8002f36:	d10e      	bne.n	8002f56 <EmvcoDataLoopBack+0x4e>
    {
        DEBUG_PRINTF("\n DF Name: \n");
 8002f38:	485a      	ldr	r0, [pc, #360]	@ (80030a4 <EmvcoDataLoopBack+0x19c>)
 8002f3a:	f01d fbbb 	bl	80206b4 <puts>
 8002f3e:	4b5a      	ldr	r3, [pc, #360]	@ (80030a8 <EmvcoDataLoopBack+0x1a0>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f01d fa6f 	bl	8020428 <fflush>
        /* DF Size = Total Command size - size of(PDU Header + Expected Len(Le))*/
        phApp_Print_Buff(&PPSE_SELECT_APDU[5], PPSE_SELECT_APDU[4]);
 8002f4a:	4b55      	ldr	r3, [pc, #340]	@ (80030a0 <EmvcoDataLoopBack+0x198>)
 8002f4c:	791b      	ldrb	r3, [r3, #4]
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4856      	ldr	r0, [pc, #344]	@ (80030ac <EmvcoDataLoopBack+0x1a4>)
 8002f52:	f000 f983 	bl	800325c <phApp_Print_Buff>
    }
    if (respsize > 0)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d021      	beq.n	8002fa0 <EmvcoDataLoopBack+0x98>
    {
        memcpy(&PPSE_response_buffer[0],response_buffer,respsize);
 8002f5c:	4b4f      	ldr	r3, [pc, #316]	@ (800309c <EmvcoDataLoopBack+0x194>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	4619      	mov	r1, r3
 8002f64:	4852      	ldr	r0, [pc, #328]	@ (80030b0 <EmvcoDataLoopBack+0x1a8>)
 8002f66:	f01d fd14 	bl	8020992 <memcpy>
        DEBUG_PRINTF("\n SELECT_PPSE Res:\n");
 8002f6a:	4852      	ldr	r0, [pc, #328]	@ (80030b4 <EmvcoDataLoopBack+0x1ac>)
 8002f6c:	f01d fba2 	bl	80206b4 <puts>
 8002f70:	4b4d      	ldr	r3, [pc, #308]	@ (80030a8 <EmvcoDataLoopBack+0x1a0>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f01d fa56 	bl	8020428 <fflush>
        /* Status word removed */
        phApp_Print_Buff(PPSE_response_buffer, (respsize - 2));
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	3b02      	subs	r3, #2
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	4619      	mov	r1, r3
 8002f86:	484a      	ldr	r0, [pc, #296]	@ (80030b0 <EmvcoDataLoopBack+0x1a8>)
 8002f88:	f000 f968 	bl	800325c <phApp_Print_Buff>
        DEBUG_PRINTF("\nTransaction Done Remove card\n");
 8002f8c:	484a      	ldr	r0, [pc, #296]	@ (80030b8 <EmvcoDataLoopBack+0x1b0>)
 8002f8e:	f01d fb91 	bl	80206b4 <puts>
 8002f92:	4b45      	ldr	r3, [pc, #276]	@ (80030a8 <EmvcoDataLoopBack+0x1a0>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f01d fa45 	bl	8020428 <fflush>
 8002f9e:	e055      	b.n	800304c <EmvcoDataLoopBack+0x144>
    }
    else
    {
        DEBUG_PRINTF("\nFCI not recieved\n");
 8002fa0:	4846      	ldr	r0, [pc, #280]	@ (80030bc <EmvcoDataLoopBack+0x1b4>)
 8002fa2:	f01d fb87 	bl	80206b4 <puts>
 8002fa6:	4b40      	ldr	r3, [pc, #256]	@ (80030a8 <EmvcoDataLoopBack+0x1a0>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f01d fa3b 	bl	8020428 <fflush>
#ifdef PPSE_NO_LE
        DEBUG_PRINTF("Transaction Done Remove card\n");
#else
        DEBUG_PRINTF("Transaction Failed Replace the card\n");
 8002fb2:	4843      	ldr	r0, [pc, #268]	@ (80030c0 <EmvcoDataLoopBack+0x1b8>)
 8002fb4:	f01d fb7e 	bl	80206b4 <puts>
 8002fb8:	4b3b      	ldr	r3, [pc, #236]	@ (80030a8 <EmvcoDataLoopBack+0x1a0>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f01d fa32 	bl	8020428 <fflush>
#endif
    }

#endif

    while (!bEndOfLoopBack)
 8002fc4:	e042      	b.n	800304c <EmvcoDataLoopBack+0x144>
    {
        if (respsize > 0)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d03d      	beq.n	8003048 <EmvcoDataLoopBack+0x140>
        {
            if (respsize >= MiN_VALID_DATA_SIZE)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2b05      	cmp	r3, #5
 8002fd0:	d92a      	bls.n	8003028 <EmvcoDataLoopBack+0x120>
            {
                /* EOT (End Of Test) Command. Exit the loop */
                if (eEmdRes_EOT == response_buffer[1])
 8002fd2:	4b32      	ldr	r3, [pc, #200]	@ (800309c <EmvcoDataLoopBack+0x194>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	2b70      	cmp	r3, #112	@ 0x70
 8002fdc:	d104      	bne.n	8002fe8 <EmvcoDataLoopBack+0xe0>
                {
                    /* Second byte = 0x70, stop the loopback */
                    bEndOfLoopBack = 1;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	747b      	strb	r3, [r7, #17]
                    bRemovalProcedure = PH_ON;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	743b      	strb	r3, [r7, #16]
 8002fe6:	e031      	b.n	800304c <EmvcoDataLoopBack+0x144>
                }
                else if (eEmdRes_SW_0 == response_buffer[respsize - 2])
 8002fe8:	4b2c      	ldr	r3, [pc, #176]	@ (800309c <EmvcoDataLoopBack+0x194>)
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	3b02      	subs	r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	2b90      	cmp	r3, #144	@ 0x90
 8002ff6:	d114      	bne.n	8003022 <EmvcoDataLoopBack+0x11a>
                {
                    /* Format the card response into a new command without the status word 0x90 0x00 */
                    cmdsize = respsize - 2;  /* To Remove two bytes of status word */
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	3b02      	subs	r3, #2
 8002ffc:	617b      	str	r3, [r7, #20]
                    memcpy(command_buffer, response_buffer, cmdsize);
 8002ffe:	4b27      	ldr	r3, [pc, #156]	@ (800309c <EmvcoDataLoopBack+0x194>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	4619      	mov	r1, r3
 8003006:	482f      	ldr	r0, [pc, #188]	@ (80030c4 <EmvcoDataLoopBack+0x1bc>)
 8003008:	f01d fcc3 	bl	8020992 <memcpy>

                    /* Send back(Command) : Received Response - Status_Word */
                    status = EmvcoDataExchange(command_buffer, cmdsize, &response_buffer, &respsize);
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	b2d9      	uxtb	r1, r3
 8003010:	f107 030c 	add.w	r3, r7, #12
 8003014:	4a21      	ldr	r2, [pc, #132]	@ (800309c <EmvcoDataLoopBack+0x194>)
 8003016:	482b      	ldr	r0, [pc, #172]	@ (80030c4 <EmvcoDataLoopBack+0x1bc>)
 8003018:	f000 f858 	bl	80030cc <EmvcoDataExchange>
 800301c:	4603      	mov	r3, r0
 800301e:	827b      	strh	r3, [r7, #18]
 8003020:	e014      	b.n	800304c <EmvcoDataLoopBack+0x144>
                }
                else
                {
                    /* error Abort Loopback */
                    bEndOfLoopBack = 1;
 8003022:	2301      	movs	r3, #1
 8003024:	747b      	strb	r3, [r7, #17]
 8003026:	e011      	b.n	800304c <EmvcoDataLoopBack+0x144>
                }
            }
            else/*if (respsize <6)*/
            {
                /* re-send the select appli APDU */
                status = EmvcoDataExchange(PPSE_SELECT_APDU, cmdsize, &response_buffer, &respsize);
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	b2d9      	uxtb	r1, r3
 800302c:	f107 030c 	add.w	r3, r7, #12
 8003030:	4a1a      	ldr	r2, [pc, #104]	@ (800309c <EmvcoDataLoopBack+0x194>)
 8003032:	481b      	ldr	r0, [pc, #108]	@ (80030a0 <EmvcoDataLoopBack+0x198>)
 8003034:	f000 f84a 	bl	80030cc <EmvcoDataExchange>
 8003038:	4603      	mov	r3, r0
 800303a:	827b      	strh	r3, [r7, #18]
                if (respsize == 0)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d104      	bne.n	800304c <EmvcoDataLoopBack+0x144>
                {
                    bEndOfLoopBack = 1;
 8003042:	2301      	movs	r3, #1
 8003044:	747b      	strb	r3, [r7, #17]
 8003046:	e001      	b.n	800304c <EmvcoDataLoopBack+0x144>
                }
            }
        }/*if(respsize > 0)*/
        else
        {
            bEndOfLoopBack = 1;
 8003048:	2301      	movs	r3, #1
 800304a:	747b      	strb	r3, [r7, #17]
    while (!bEndOfLoopBack)
 800304c:	7c7b      	ldrb	r3, [r7, #17]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0b9      	beq.n	8002fc6 <EmvcoDataLoopBack+0xbe>
        }
    }/*while (!bEndOfLoopBack)*/

    if(bRemovalProcedure == PH_ON)
 8003052:	7c3b      	ldrb	r3, [r7, #16]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d11b      	bne.n	8003090 <EmvcoDataLoopBack+0x188>
    {
        /* Set Poll state to perform Tag removal procedure*/
        status = phacDiscLoop_SetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_NEXT_POLL_STATE, PHAC_DISCLOOP_POLL_STATE_REMOVAL);
 8003058:	2203      	movs	r2, #3
 800305a:	2184      	movs	r1, #132	@ 0x84
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f005 f8bb 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 8003062:	4603      	mov	r3, r0
 8003064:	827b      	strh	r3, [r7, #18]
        CHECK_STATUS(status);
 8003066:	8a7b      	ldrh	r3, [r7, #18]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00b      	beq.n	8003084 <EmvcoDataLoopBack+0x17c>
 800306c:	8a7b      	ldrh	r3, [r7, #18]
 800306e:	461a      	mov	r2, r3
 8003070:	21ec      	movs	r1, #236	@ 0xec
 8003072:	4815      	ldr	r0, [pc, #84]	@ (80030c8 <EmvcoDataLoopBack+0x1c0>)
 8003074:	f01d faae 	bl	80205d4 <iprintf>
 8003078:	4b0b      	ldr	r3, [pc, #44]	@ (80030a8 <EmvcoDataLoopBack+0x1a0>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	4618      	mov	r0, r3
 8003080:	f01d f9d2 	bl	8020428 <fflush>

        status = phacDiscLoop_Run(pDataParams, PHAC_DISCLOOP_ENTRY_POINT_POLL);
 8003084:	2100      	movs	r1, #0
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f004 ffd4 	bl	8008034 <phacDiscLoop_Sw_Run>
 800308c:	4603      	mov	r3, r0
 800308e:	827b      	strh	r3, [r7, #18]
    }
    return status;
 8003090:	8a7b      	ldrh	r3, [r7, #18]
}
 8003092:	4618      	mov	r0, r3
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	20000898 	.word	0x20000898
 80030a0:	20000024 	.word	0x20000024
 80030a4:	08022970 	.word	0x08022970
 80030a8:	20000084 	.word	0x20000084
 80030ac:	20000029 	.word	0x20000029
 80030b0:	20000540 	.word	0x20000540
 80030b4:	0802297c 	.word	0x0802297c
 80030b8:	08022990 	.word	0x08022990
 80030bc:	080229b0 	.word	0x080229b0
 80030c0:	080229c4 	.word	0x080229c4
 80030c4:	20000640 	.word	0x20000640
 80030c8:	08022908 	.word	0x08022908

080030cc <EmvcoDataExchange>:
* \return Status code
* \retval #PH_ERR_SUCCESS Operation successful.
* \retval Other Depending on implementation and underlying component.
*/
static phStatus_t EmvcoDataExchange(uint8_t * com_buffer, uint8_t cmdsize, uint8_t ** resp_buffer, uint32_t * wRxLength)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b08a      	sub	sp, #40	@ 0x28
 80030d0:	af02      	add	r7, sp, #8
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	607a      	str	r2, [r7, #4]
 80030d6:	603b      	str	r3, [r7, #0]
 80030d8:	460b      	mov	r3, r1
 80030da:	72fb      	strb	r3, [r7, #11]
    phStatus_t status;
    uint8_t *ppRxBuffer;
    uint16_t wRxLen = 0;
 80030dc:	2300      	movs	r3, #0
 80030de:	82fb      	strh	r3, [r7, #22]

    // 打印发送的C-APDU
    DEBUG_PRINTF("\n=== C-APDU SEND (%d bytes) ===\n", cmdsize);
 80030e0:	7afb      	ldrb	r3, [r7, #11]
 80030e2:	4619      	mov	r1, r3
 80030e4:	4822      	ldr	r0, [pc, #136]	@ (8003170 <EmvcoDataExchange+0xa4>)
 80030e6:	f01d fa75 	bl	80205d4 <iprintf>
 80030ea:	4b22      	ldr	r3, [pc, #136]	@ (8003174 <EmvcoDataExchange+0xa8>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f01d f999 	bl	8020428 <fflush>
    phApp_Print_Buff(com_buffer, cmdsize);
 80030f6:	7afb      	ldrb	r3, [r7, #11]
 80030f8:	4619      	mov	r1, r3
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f000 f8ae 	bl	800325c <phApp_Print_Buff>

    status = phpalI14443p4_Exchange(phNfcLib_GetDataParams(PH_COMP_PAL_ISO14443P4), PH_EXCHANGE_DEFAULT,
 8003100:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 8003104:	f004 fa62 	bl	80075cc <phNfcLib_GetDataParams>
 8003108:	7afb      	ldrb	r3, [r7, #11]
 800310a:	b29a      	uxth	r2, r3
 800310c:	f107 0316 	add.w	r3, r7, #22
 8003110:	9301      	str	r3, [sp, #4]
 8003112:	f107 0318 	add.w	r3, r7, #24
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	4613      	mov	r3, r2
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	2100      	movs	r1, #0
 800311e:	f012 feab 	bl	8015e78 <phpalI14443p4_Sw_Exchange>
 8003122:	4603      	mov	r3, r0
 8003124:	83fb      	strh	r3, [r7, #30]
    		com_buffer, cmdsize, &ppRxBuffer, &wRxLen);
    if (PH_ERR_SUCCESS == status)
 8003126:	8bfb      	ldrh	r3, [r7, #30]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d115      	bne.n	8003158 <EmvcoDataExchange+0x8c>
    {
        /* set the pointer to the start of the R-APDU */
        *resp_buffer = &ppRxBuffer[0];
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	601a      	str	r2, [r3, #0]

        // 打印接收的R-APDU
        DEBUG_PRINTF("\n=== R-APDU RECV (%d bytes) ===\n", wRxLen);
 8003132:	8afb      	ldrh	r3, [r7, #22]
 8003134:	4619      	mov	r1, r3
 8003136:	4810      	ldr	r0, [pc, #64]	@ (8003178 <EmvcoDataExchange+0xac>)
 8003138:	f01d fa4c 	bl	80205d4 <iprintf>
 800313c:	4b0d      	ldr	r3, [pc, #52]	@ (8003174 <EmvcoDataExchange+0xa8>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	4618      	mov	r0, r3
 8003144:	f01d f970 	bl	8020428 <fflush>
        phApp_Print_Buff(ppRxBuffer, wRxLen);
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	8afa      	ldrh	r2, [r7, #22]
 800314c:	b2d2      	uxtb	r2, r2
 800314e:	4611      	mov	r1, r2
 8003150:	4618      	mov	r0, r3
 8003152:	f000 f883 	bl	800325c <phApp_Print_Buff>
 8003156:	e001      	b.n	800315c <EmvcoDataExchange+0x90>
    }
    else
    {
        /* Exchange not successful, reset the number of rxd bytes */
        wRxLen = 0x00;
 8003158:	2300      	movs	r3, #0
 800315a:	82fb      	strh	r3, [r7, #22]
    }

    *wRxLength = wRxLen;
 800315c:	8afb      	ldrh	r3, [r7, #22]
 800315e:	461a      	mov	r2, r3
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	601a      	str	r2, [r3, #0]

    return status;
 8003164:	8bfb      	ldrh	r3, [r7, #30]
}
 8003166:	4618      	mov	r0, r3
 8003168:	3720      	adds	r7, #32
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	080229e8 	.word	0x080229e8
 8003174:	20000084 	.word	0x20000084
 8003178:	08022a0c 	.word	0x08022a0c

0800317c <phApp_PrintTech>:
/*******************************************************************************
**   Function Definitions
*******************************************************************************/
/* Print technology being resolved */
void phApp_PrintTech(uint8_t TechType)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	4603      	mov	r3, r0
 8003184:	71fb      	strb	r3, [r7, #7]
    switch(TechType)
 8003186:	79fb      	ldrb	r3, [r7, #7]
 8003188:	3b01      	subs	r3, #1
 800318a:	2b0f      	cmp	r3, #15
 800318c:	d854      	bhi.n	8003238 <phApp_PrintTech+0xbc>
 800318e:	a201      	add	r2, pc, #4	@ (adr r2, 8003194 <phApp_PrintTech+0x18>)
 8003190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003194:	080031d5 	.word	0x080031d5
 8003198:	080031e9 	.word	0x080031e9
 800319c:	08003239 	.word	0x08003239
 80031a0:	080031fd 	.word	0x080031fd
 80031a4:	08003239 	.word	0x08003239
 80031a8:	08003239 	.word	0x08003239
 80031ac:	08003239 	.word	0x08003239
 80031b0:	08003211 	.word	0x08003211
 80031b4:	08003239 	.word	0x08003239
 80031b8:	08003239 	.word	0x08003239
 80031bc:	08003239 	.word	0x08003239
 80031c0:	08003239 	.word	0x08003239
 80031c4:	08003239 	.word	0x08003239
 80031c8:	08003239 	.word	0x08003239
 80031cc:	08003239 	.word	0x08003239
 80031d0:	08003225 	.word	0x08003225
    {
    case PHAC_DISCLOOP_POS_BIT_MASK_A:
        DEBUG_PRINTF ("\tResolving Type A... \n");
 80031d4:	481b      	ldr	r0, [pc, #108]	@ (8003244 <phApp_PrintTech+0xc8>)
 80031d6:	f01d fa6d 	bl	80206b4 <puts>
 80031da:	4b1b      	ldr	r3, [pc, #108]	@ (8003248 <phApp_PrintTech+0xcc>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f01d f921 	bl	8020428 <fflush>
        break;
 80031e6:	e028      	b.n	800323a <phApp_PrintTech+0xbe>

    case PHAC_DISCLOOP_POS_BIT_MASK_B:
        DEBUG_PRINTF ("\tResolving Type B... \n");
 80031e8:	4818      	ldr	r0, [pc, #96]	@ (800324c <phApp_PrintTech+0xd0>)
 80031ea:	f01d fa63 	bl	80206b4 <puts>
 80031ee:	4b16      	ldr	r3, [pc, #88]	@ (8003248 <phApp_PrintTech+0xcc>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f01d f917 	bl	8020428 <fflush>
        break;
 80031fa:	e01e      	b.n	800323a <phApp_PrintTech+0xbe>

    case PHAC_DISCLOOP_POS_BIT_MASK_F212:
        DEBUG_PRINTF ("\tResolving Type F with baud rate 212... \n");
 80031fc:	4814      	ldr	r0, [pc, #80]	@ (8003250 <phApp_PrintTech+0xd4>)
 80031fe:	f01d fa59 	bl	80206b4 <puts>
 8003202:	4b11      	ldr	r3, [pc, #68]	@ (8003248 <phApp_PrintTech+0xcc>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	4618      	mov	r0, r3
 800320a:	f01d f90d 	bl	8020428 <fflush>
        break;
 800320e:	e014      	b.n	800323a <phApp_PrintTech+0xbe>

    case PHAC_DISCLOOP_POS_BIT_MASK_F424:
        DEBUG_PRINTF ("\tResolving Type F with baud rate 424... \n");
 8003210:	4810      	ldr	r0, [pc, #64]	@ (8003254 <phApp_PrintTech+0xd8>)
 8003212:	f01d fa4f 	bl	80206b4 <puts>
 8003216:	4b0c      	ldr	r3, [pc, #48]	@ (8003248 <phApp_PrintTech+0xcc>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	4618      	mov	r0, r3
 800321e:	f01d f903 	bl	8020428 <fflush>
        break;
 8003222:	e00a      	b.n	800323a <phApp_PrintTech+0xbe>

    case PHAC_DISCLOOP_POS_BIT_MASK_V:
        DEBUG_PRINTF ("\tResolving Type V... \n");
 8003224:	480c      	ldr	r0, [pc, #48]	@ (8003258 <phApp_PrintTech+0xdc>)
 8003226:	f01d fa45 	bl	80206b4 <puts>
 800322a:	4b07      	ldr	r3, [pc, #28]	@ (8003248 <phApp_PrintTech+0xcc>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	4618      	mov	r0, r3
 8003232:	f01d f8f9 	bl	8020428 <fflush>
        break;
 8003236:	e000      	b.n	800323a <phApp_PrintTech+0xbe>

    default:
        break;
 8003238:	bf00      	nop
    }
}
 800323a:	bf00      	nop
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	08022a30 	.word	0x08022a30
 8003248:	20000084 	.word	0x20000084
 800324c:	08022a48 	.word	0x08022a48
 8003250:	08022a60 	.word	0x08022a60
 8003254:	08022a8c 	.word	0x08022a8c
 8003258:	08022ab8 	.word	0x08022ab8

0800325c <phApp_Print_Buff>:
* This function will print buffer content
* \param   *pBuff   Buffer Reference
* \param   num      data size to be print
*/
void phApp_Print_Buff(uint8_t *pBuff, uint8_t num)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	460b      	mov	r3, r1
 8003266:	70fb      	strb	r3, [r7, #3]
    uint32_t    i;

    for(i = 0; i < num; i++)
 8003268:	2300      	movs	r3, #0
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	e010      	b.n	8003290 <phApp_Print_Buff+0x34>
    {
        DEBUG_PRINTF(" %02X",pBuff[i]);
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4413      	add	r3, r2
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	4619      	mov	r1, r3
 8003278:	480a      	ldr	r0, [pc, #40]	@ (80032a4 <phApp_Print_Buff+0x48>)
 800327a:	f01d f9ab 	bl	80205d4 <iprintf>
 800327e:	4b0a      	ldr	r3, [pc, #40]	@ (80032a8 <phApp_Print_Buff+0x4c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	4618      	mov	r0, r3
 8003286:	f01d f8cf 	bl	8020428 <fflush>
    for(i = 0; i < num; i++)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	3301      	adds	r3, #1
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	78fb      	ldrb	r3, [r7, #3]
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	429a      	cmp	r2, r3
 8003296:	d3ea      	bcc.n	800326e <phApp_Print_Buff+0x12>
    }
}
 8003298:	bf00      	nop
 800329a:	bf00      	nop
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	08022ad0 	.word	0x08022ad0
 80032a8:	20000084 	.word	0x20000084

080032ac <phApp_PrintTagInfo>:
* \param   pDataParams      The discovery loop data parameters
* \param   wNumberOfTags    Total number of tags detected
* \param   wTagsDetected    Technology Detected
*/
void phApp_PrintTagInfo(phacDiscLoop_Sw_DataParams_t *pDataParams, uint16_t wNumberOfTags, uint16_t wTagsDetected)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	460b      	mov	r3, r1
 80032b6:	807b      	strh	r3, [r7, #2]
 80032b8:	4613      	mov	r3, r2
 80032ba:	803b      	strh	r3, [r7, #0]
#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE)
    uint8_t bTagType;
#endif

#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE)
    if (PHAC_DISCLOOP_CHECK_ANDMASK(wTagsDetected, PHAC_DISCLOOP_POS_BIT_MASK_A))
 80032bc:	883b      	ldrh	r3, [r7, #0]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 80da 	beq.w	800347c <phApp_PrintTagInfo+0x1d0>
    {
        if(pDataParams->sTypeATargetInfo.bT1TFlag)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d032      	beq.n	8003338 <phApp_PrintTagInfo+0x8c>
        {
            DEBUG_PRINTF("\tTechnology  : Type A");
 80032d2:	4898      	ldr	r0, [pc, #608]	@ (8003534 <phApp_PrintTagInfo+0x288>)
 80032d4:	f01d f97e 	bl	80205d4 <iprintf>
 80032d8:	4b97      	ldr	r3, [pc, #604]	@ (8003538 <phApp_PrintTagInfo+0x28c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	4618      	mov	r0, r3
 80032e0:	f01d f8a2 	bl	8020428 <fflush>
            DEBUG_PRINTF ("\n\t\tUID :");
 80032e4:	4895      	ldr	r0, [pc, #596]	@ (800353c <phApp_PrintTagInfo+0x290>)
 80032e6:	f01d f975 	bl	80205d4 <iprintf>
 80032ea:	4b93      	ldr	r3, [pc, #588]	@ (8003538 <phApp_PrintTagInfo+0x28c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f01d f899 	bl	8020428 <fflush>
            phApp_Print_Buff( pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aUid,
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8003302:	4619      	mov	r1, r3
 8003304:	4610      	mov	r0, r2
 8003306:	f7ff ffa9 	bl	800325c <phApp_Print_Buff>
                        pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].bUidSize);
            DEBUG_PRINTF ("\n\t\tSAK : 0x%02x",pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aSak);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
 8003310:	4619      	mov	r1, r3
 8003312:	488b      	ldr	r0, [pc, #556]	@ (8003540 <phApp_PrintTagInfo+0x294>)
 8003314:	f01d f95e 	bl	80205d4 <iprintf>
 8003318:	4b87      	ldr	r3, [pc, #540]	@ (8003538 <phApp_PrintTagInfo+0x28c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	4618      	mov	r0, r3
 8003320:	f01d f882 	bl	8020428 <fflush>
            DEBUG_PRINTF ("\n\t\tType: Type 1 Tag\n");
 8003324:	4887      	ldr	r0, [pc, #540]	@ (8003544 <phApp_PrintTagInfo+0x298>)
 8003326:	f01d f9c5 	bl	80206b4 <puts>
 800332a:	4b83      	ldr	r3, [pc, #524]	@ (8003538 <phApp_PrintTagInfo+0x28c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	4618      	mov	r0, r3
 8003332:	f01d f879 	bl	8020428 <fflush>
 8003336:	e0a1      	b.n	800347c <phApp_PrintTagInfo+0x1d0>
        }
        else
        {
            DEBUG_PRINTF("\tTechnology  : Type A");
 8003338:	487e      	ldr	r0, [pc, #504]	@ (8003534 <phApp_PrintTagInfo+0x288>)
 800333a:	f01d f94b 	bl	80205d4 <iprintf>
 800333e:	4b7e      	ldr	r3, [pc, #504]	@ (8003538 <phApp_PrintTagInfo+0x28c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	4618      	mov	r0, r3
 8003346:	f01d f86f 	bl	8020428 <fflush>
            for(bIndex = 0; bIndex < wNumberOfTags; bIndex++)
 800334a:	2300      	movs	r3, #0
 800334c:	73fb      	strb	r3, [r7, #15]
 800334e:	e08f      	b.n	8003470 <phApp_PrintTagInfo+0x1c4>
            {
                DEBUG_PRINTF ("\n\t\tCard: %d",bIndex + 1);
 8003350:	7bfb      	ldrb	r3, [r7, #15]
 8003352:	3301      	adds	r3, #1
 8003354:	4619      	mov	r1, r3
 8003356:	487c      	ldr	r0, [pc, #496]	@ (8003548 <phApp_PrintTagInfo+0x29c>)
 8003358:	f01d f93c 	bl	80205d4 <iprintf>
 800335c:	4b76      	ldr	r3, [pc, #472]	@ (8003538 <phApp_PrintTagInfo+0x28c>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	4618      	mov	r0, r3
 8003364:	f01d f860 	bl	8020428 <fflush>
                DEBUG_PRINTF ("\n\t\tUID :");
 8003368:	4874      	ldr	r0, [pc, #464]	@ (800353c <phApp_PrintTagInfo+0x290>)
 800336a:	f01d f933 	bl	80205d4 <iprintf>
 800336e:	4b72      	ldr	r3, [pc, #456]	@ (8003538 <phApp_PrintTagInfo+0x28c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	4618      	mov	r0, r3
 8003376:	f01d f857 	bl	8020428 <fflush>
                phApp_Print_Buff( pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].aUid,
 800337a:	7bfa      	ldrb	r2, [r7, #15]
 800337c:	4613      	mov	r3, r2
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	1a9b      	subs	r3, r3, r2
 8003382:	3358      	adds	r3, #88	@ 0x58
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	4413      	add	r3, r2
 8003388:	f103 0008 	add.w	r0, r3, #8
 800338c:	7bfa      	ldrb	r2, [r7, #15]
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	4613      	mov	r3, r2
 8003392:	011b      	lsls	r3, r3, #4
 8003394:	1a9b      	subs	r3, r3, r2
 8003396:	440b      	add	r3, r1
 8003398:	336a      	adds	r3, #106	@ 0x6a
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	4619      	mov	r1, r3
 800339e:	f7ff ff5d 	bl	800325c <phApp_Print_Buff>
                            pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].bUidSize);
                DEBUG_PRINTF ("\n\t\tSAK : 0x%02x",pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].aSak);
 80033a2:	7bfa      	ldrb	r2, [r7, #15]
 80033a4:	6879      	ldr	r1, [r7, #4]
 80033a6:	4613      	mov	r3, r2
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	1a9b      	subs	r3, r3, r2
 80033ac:	440b      	add	r3, r1
 80033ae:	336b      	adds	r3, #107	@ 0x6b
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	4619      	mov	r1, r3
 80033b4:	4862      	ldr	r0, [pc, #392]	@ (8003540 <phApp_PrintTagInfo+0x294>)
 80033b6:	f01d f90d 	bl	80205d4 <iprintf>
 80033ba:	4b5f      	ldr	r3, [pc, #380]	@ (8003538 <phApp_PrintTagInfo+0x28c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f01d f831 	bl	8020428 <fflush>

                if ((pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].aSak & (uint8_t) ~0xFB) == 0)
 80033c6:	7bfa      	ldrb	r2, [r7, #15]
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	4613      	mov	r3, r2
 80033cc:	011b      	lsls	r3, r3, #4
 80033ce:	1a9b      	subs	r3, r3, r2
 80033d0:	440b      	add	r3, r1
 80033d2:	336b      	adds	r3, #107	@ 0x6b
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	f003 0304 	and.w	r3, r3, #4
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d145      	bne.n	800346a <phApp_PrintTagInfo+0x1be>
                {
                    /* Bit b3 is set to zero, [Digital] 4.8.2 */
                    /* Mask out all other bits except for b7 and b6 */
                    bTagType = (pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].aSak & 0x60);
 80033de:	7bfa      	ldrb	r2, [r7, #15]
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	4613      	mov	r3, r2
 80033e4:	011b      	lsls	r3, r3, #4
 80033e6:	1a9b      	subs	r3, r3, r2
 80033e8:	440b      	add	r3, r1
 80033ea:	336b      	adds	r3, #107	@ 0x6b
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80033f2:	73bb      	strb	r3, [r7, #14]
                    bTagType = bTagType >> 5;
 80033f4:	7bbb      	ldrb	r3, [r7, #14]
 80033f6:	095b      	lsrs	r3, r3, #5
 80033f8:	73bb      	strb	r3, [r7, #14]

                    switch(bTagType)
 80033fa:	7bbb      	ldrb	r3, [r7, #14]
 80033fc:	2b03      	cmp	r3, #3
 80033fe:	d833      	bhi.n	8003468 <phApp_PrintTagInfo+0x1bc>
 8003400:	a201      	add	r2, pc, #4	@ (adr r2, 8003408 <phApp_PrintTagInfo+0x15c>)
 8003402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003406:	bf00      	nop
 8003408:	08003419 	.word	0x08003419
 800340c:	0800342d 	.word	0x0800342d
 8003410:	08003441 	.word	0x08003441
 8003414:	08003455 	.word	0x08003455
                    {
                    case PHAC_DISCLOOP_TYPEA_TYPE2_TAG_CONFIG_MASK:
                        DEBUG_PRINTF ("\n\t\tType: Type 2 Tag\n");
 8003418:	484c      	ldr	r0, [pc, #304]	@ (800354c <phApp_PrintTagInfo+0x2a0>)
 800341a:	f01d f94b 	bl	80206b4 <puts>
 800341e:	4b46      	ldr	r3, [pc, #280]	@ (8003538 <phApp_PrintTagInfo+0x28c>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	4618      	mov	r0, r3
 8003426:	f01c ffff 	bl	8020428 <fflush>
                        break;
 800342a:	e01e      	b.n	800346a <phApp_PrintTagInfo+0x1be>
                    case PHAC_DISCLOOP_TYPEA_TYPE4A_TAG_CONFIG_MASK:
                        DEBUG_PRINTF ("\n\t\tType: Type 4A Tag\n");
 800342c:	4848      	ldr	r0, [pc, #288]	@ (8003550 <phApp_PrintTagInfo+0x2a4>)
 800342e:	f01d f941 	bl	80206b4 <puts>
 8003432:	4b41      	ldr	r3, [pc, #260]	@ (8003538 <phApp_PrintTagInfo+0x28c>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	4618      	mov	r0, r3
 800343a:	f01c fff5 	bl	8020428 <fflush>
                        break;
 800343e:	e014      	b.n	800346a <phApp_PrintTagInfo+0x1be>
                    case PHAC_DISCLOOP_TYPEA_TYPE_NFC_DEP_TAG_CONFIG_MASK:
                        DEBUG_PRINTF ("\n\t\tType: P2P\n");
 8003440:	4844      	ldr	r0, [pc, #272]	@ (8003554 <phApp_PrintTagInfo+0x2a8>)
 8003442:	f01d f937 	bl	80206b4 <puts>
 8003446:	4b3c      	ldr	r3, [pc, #240]	@ (8003538 <phApp_PrintTagInfo+0x28c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	4618      	mov	r0, r3
 800344e:	f01c ffeb 	bl	8020428 <fflush>
                        break;
 8003452:	e00a      	b.n	800346a <phApp_PrintTagInfo+0x1be>
                    case PHAC_DISCLOOP_TYPEA_TYPE_NFC_DEP_TYPE4A_TAG_CONFIG_MASK:
                        DEBUG_PRINTF ("\n\t\tType: Type NFC_DEP and  4A Tag\n");
 8003454:	4840      	ldr	r0, [pc, #256]	@ (8003558 <phApp_PrintTagInfo+0x2ac>)
 8003456:	f01d f92d 	bl	80206b4 <puts>
 800345a:	4b37      	ldr	r3, [pc, #220]	@ (8003538 <phApp_PrintTagInfo+0x28c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	4618      	mov	r0, r3
 8003462:	f01c ffe1 	bl	8020428 <fflush>
                        break;
 8003466:	e000      	b.n	800346a <phApp_PrintTagInfo+0x1be>
                    default:
                        break;
 8003468:	bf00      	nop
            for(bIndex = 0; bIndex < wNumberOfTags; bIndex++)
 800346a:	7bfb      	ldrb	r3, [r7, #15]
 800346c:	3301      	adds	r3, #1
 800346e:	73fb      	strb	r3, [r7, #15]
 8003470:	7bfb      	ldrb	r3, [r7, #15]
 8003472:	b29b      	uxth	r3, r3
 8003474:	887a      	ldrh	r2, [r7, #2]
 8003476:	429a      	cmp	r2, r3
 8003478:	f63f af6a 	bhi.w	8003350 <phApp_PrintTagInfo+0xa4>
        }
    }
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    if (PHAC_DISCLOOP_CHECK_ANDMASK(wTagsDetected, PHAC_DISCLOOP_POS_BIT_MASK_B))
 800347c:	883b      	ldrh	r3, [r7, #0]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d03e      	beq.n	8003504 <phApp_PrintTagInfo+0x258>
    {
        DEBUG_PRINTF("\tTechnology  : Type B");
 8003486:	4835      	ldr	r0, [pc, #212]	@ (800355c <phApp_PrintTagInfo+0x2b0>)
 8003488:	f01d f8a4 	bl	80205d4 <iprintf>
 800348c:	4b2a      	ldr	r3, [pc, #168]	@ (8003538 <phApp_PrintTagInfo+0x28c>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	4618      	mov	r0, r3
 8003494:	f01c ffc8 	bl	8020428 <fflush>
        /* Loop through all the Type B tags detected and print the Pupi */
        for (bIndex = 0; bIndex < wNumberOfTags; bIndex++)
 8003498:	2300      	movs	r3, #0
 800349a:	73fb      	strb	r3, [r7, #15]
 800349c:	e024      	b.n	80034e8 <phApp_PrintTagInfo+0x23c>
        {
            DEBUG_PRINTF ("\n\t\tCard: %d",bIndex + 1);
 800349e:	7bfb      	ldrb	r3, [r7, #15]
 80034a0:	3301      	adds	r3, #1
 80034a2:	4619      	mov	r1, r3
 80034a4:	4828      	ldr	r0, [pc, #160]	@ (8003548 <phApp_PrintTagInfo+0x29c>)
 80034a6:	f01d f895 	bl	80205d4 <iprintf>
 80034aa:	4b23      	ldr	r3, [pc, #140]	@ (8003538 <phApp_PrintTagInfo+0x28c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f01c ffb9 	bl	8020428 <fflush>
            DEBUG_PRINTF ("\n\t\tUID :");
 80034b6:	4821      	ldr	r0, [pc, #132]	@ (800353c <phApp_PrintTagInfo+0x290>)
 80034b8:	f01d f88c 	bl	80205d4 <iprintf>
 80034bc:	4b1e      	ldr	r3, [pc, #120]	@ (8003538 <phApp_PrintTagInfo+0x28c>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f01c ffb0 	bl	8020428 <fflush>
            /* PUPI Length is always 4 bytes */
            phApp_Print_Buff( pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bIndex].aPupi, 0x04);
 80034c8:	7bfa      	ldrb	r2, [r7, #15]
 80034ca:	4613      	mov	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	4413      	add	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	33c8      	adds	r3, #200	@ 0xc8
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	4413      	add	r3, r2
 80034d8:	3301      	adds	r3, #1
 80034da:	2104      	movs	r1, #4
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff febd 	bl	800325c <phApp_Print_Buff>
        for (bIndex = 0; bIndex < wNumberOfTags; bIndex++)
 80034e2:	7bfb      	ldrb	r3, [r7, #15]
 80034e4:	3301      	adds	r3, #1
 80034e6:	73fb      	strb	r3, [r7, #15]
 80034e8:	7bfb      	ldrb	r3, [r7, #15]
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	887a      	ldrh	r2, [r7, #2]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d8d5      	bhi.n	800349e <phApp_PrintTagInfo+0x1f2>
        }
        DEBUG_PRINTF("\n");
 80034f2:	200a      	movs	r0, #10
 80034f4:	f01d f880 	bl	80205f8 <putchar>
 80034f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003538 <phApp_PrintTagInfo+0x28c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	4618      	mov	r0, r3
 8003500:	f01c ff92 	bl	8020428 <fflush>
    }
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    if( PHAC_DISCLOOP_CHECK_ANDMASK(wTagsDetected, PHAC_DISCLOOP_POS_BIT_MASK_F212) ||
 8003504:	883b      	ldrh	r3, [r7, #0]
 8003506:	f003 0304 	and.w	r3, r3, #4
 800350a:	2b00      	cmp	r3, #0
 800350c:	d105      	bne.n	800351a <phApp_PrintTagInfo+0x26e>
        PHAC_DISCLOOP_CHECK_ANDMASK(wTagsDetected, PHAC_DISCLOOP_POS_BIT_MASK_F424))
 800350e:	883b      	ldrh	r3, [r7, #0]
 8003510:	f003 0308 	and.w	r3, r3, #8
    if( PHAC_DISCLOOP_CHECK_ANDMASK(wTagsDetected, PHAC_DISCLOOP_POS_BIT_MASK_F212) ||
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 809b 	beq.w	8003650 <phApp_PrintTagInfo+0x3a4>
    {
        DEBUG_PRINTF("\tTechnology  : Type F");
 800351a:	4811      	ldr	r0, [pc, #68]	@ (8003560 <phApp_PrintTagInfo+0x2b4>)
 800351c:	f01d f85a 	bl	80205d4 <iprintf>
 8003520:	4b05      	ldr	r3, [pc, #20]	@ (8003538 <phApp_PrintTagInfo+0x28c>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	4618      	mov	r0, r3
 8003528:	f01c ff7e 	bl	8020428 <fflush>

        /* Loop through all the type F tags and print the IDm */
        for (bIndex = 0; bIndex < wNumberOfTags; bIndex++)
 800352c:	2300      	movs	r3, #0
 800352e:	73fb      	strb	r3, [r7, #15]
 8003530:	e089      	b.n	8003646 <phApp_PrintTagInfo+0x39a>
 8003532:	bf00      	nop
 8003534:	08022ad8 	.word	0x08022ad8
 8003538:	20000084 	.word	0x20000084
 800353c:	08022af0 	.word	0x08022af0
 8003540:	08022afc 	.word	0x08022afc
 8003544:	08022b0c 	.word	0x08022b0c
 8003548:	08022b20 	.word	0x08022b20
 800354c:	08022b2c 	.word	0x08022b2c
 8003550:	08022b40 	.word	0x08022b40
 8003554:	08022b58 	.word	0x08022b58
 8003558:	08022b68 	.word	0x08022b68
 800355c:	08022b8c 	.word	0x08022b8c
 8003560:	08022ba4 	.word	0x08022ba4
        {
            DEBUG_PRINTF ("\n\t\tCard: %d",bIndex + 1);
 8003564:	7bfb      	ldrb	r3, [r7, #15]
 8003566:	3301      	adds	r3, #1
 8003568:	4619      	mov	r1, r3
 800356a:	4885      	ldr	r0, [pc, #532]	@ (8003780 <phApp_PrintTagInfo+0x4d4>)
 800356c:	f01d f832 	bl	80205d4 <iprintf>
 8003570:	4b84      	ldr	r3, [pc, #528]	@ (8003784 <phApp_PrintTagInfo+0x4d8>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	4618      	mov	r0, r3
 8003578:	f01c ff56 	bl	8020428 <fflush>
            DEBUG_PRINTF ("\n\t\tUID :");
 800357c:	4882      	ldr	r0, [pc, #520]	@ (8003788 <phApp_PrintTagInfo+0x4dc>)
 800357e:	f01d f829 	bl	80205d4 <iprintf>
 8003582:	4b80      	ldr	r3, [pc, #512]	@ (8003784 <phApp_PrintTagInfo+0x4d8>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	4618      	mov	r0, r3
 800358a:	f01c ff4d 	bl	8020428 <fflush>
            phApp_Print_Buff( pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].aIDmPMm,
 800358e:	7bfa      	ldrb	r2, [r7, #15]
 8003590:	4613      	mov	r3, r2
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	4413      	add	r3, r2
 8003596:	00da      	lsls	r2, r3, #3
 8003598:	1ad2      	subs	r2, r2, r3
 800359a:	f102 0390 	add.w	r3, r2, #144	@ 0x90
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	4413      	add	r3, r2
 80035a2:	3304      	adds	r3, #4
 80035a4:	2108      	movs	r1, #8
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff fe58 	bl	800325c <phApp_Print_Buff>
                        PHAC_DISCLOOP_FELICA_IDM_LENGTH );
            if ((pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].aIDmPMm[0] == 0x01) &&
 80035ac:	7bfa      	ldrb	r2, [r7, #15]
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	4613      	mov	r3, r2
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	4413      	add	r3, r2
 80035b6:	00da      	lsls	r2, r3, #3
 80035b8:	1ad2      	subs	r2, r2, r3
 80035ba:	188b      	adds	r3, r1, r2
 80035bc:	3394      	adds	r3, #148	@ 0x94
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d115      	bne.n	80035f0 <phApp_PrintTagInfo+0x344>
                (pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].aIDmPMm[1] == 0xFE))
 80035c4:	7bfa      	ldrb	r2, [r7, #15]
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	4613      	mov	r3, r2
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	4413      	add	r3, r2
 80035ce:	00da      	lsls	r2, r3, #3
 80035d0:	1ad2      	subs	r2, r2, r3
 80035d2:	188b      	adds	r3, r1, r2
 80035d4:	3395      	adds	r3, #149	@ 0x95
 80035d6:	781b      	ldrb	r3, [r3, #0]
            if ((pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].aIDmPMm[0] == 0x01) &&
 80035d8:	2bfe      	cmp	r3, #254	@ 0xfe
 80035da:	d109      	bne.n	80035f0 <phApp_PrintTagInfo+0x344>
            {
                /* This is Type F tag with P2P capabilities */
                DEBUG_PRINTF ("\n\t\tType: P2P");
 80035dc:	486b      	ldr	r0, [pc, #428]	@ (800378c <phApp_PrintTagInfo+0x4e0>)
 80035de:	f01c fff9 	bl	80205d4 <iprintf>
 80035e2:	4b68      	ldr	r3, [pc, #416]	@ (8003784 <phApp_PrintTagInfo+0x4d8>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f01c ff1d 	bl	8020428 <fflush>
 80035ee:	e008      	b.n	8003602 <phApp_PrintTagInfo+0x356>
            }
            else
            {
                /* This is Type F T3T tag */
                DEBUG_PRINTF ("\n\t\tType: Type 3 Tag");
 80035f0:	4867      	ldr	r0, [pc, #412]	@ (8003790 <phApp_PrintTagInfo+0x4e4>)
 80035f2:	f01c ffef 	bl	80205d4 <iprintf>
 80035f6:	4b63      	ldr	r3, [pc, #396]	@ (8003784 <phApp_PrintTagInfo+0x4d8>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f01c ff13 	bl	8020428 <fflush>
            }

            if(pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].bBaud != PHAC_DISCLOOP_CON_BITR_212)
 8003602:	7bfa      	ldrb	r2, [r7, #15]
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	4613      	mov	r3, r2
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	4413      	add	r3, r2
 800360c:	00da      	lsls	r2, r3, #3
 800360e:	1ad2      	subs	r2, r2, r3
 8003610:	188b      	adds	r3, r1, r2
 8003612:	33a6      	adds	r3, #166	@ 0xa6
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	2b04      	cmp	r3, #4
 8003618:	d009      	beq.n	800362e <phApp_PrintTagInfo+0x382>
            {
                DEBUG_PRINTF ("\n\t\tBit Rate: 424\n");
 800361a:	485e      	ldr	r0, [pc, #376]	@ (8003794 <phApp_PrintTagInfo+0x4e8>)
 800361c:	f01d f84a 	bl	80206b4 <puts>
 8003620:	4b58      	ldr	r3, [pc, #352]	@ (8003784 <phApp_PrintTagInfo+0x4d8>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	4618      	mov	r0, r3
 8003628:	f01c fefe 	bl	8020428 <fflush>
 800362c:	e008      	b.n	8003640 <phApp_PrintTagInfo+0x394>
            }
            else
            {
                DEBUG_PRINTF ("\n\t\tBit Rate: 212\n");
 800362e:	485a      	ldr	r0, [pc, #360]	@ (8003798 <phApp_PrintTagInfo+0x4ec>)
 8003630:	f01d f840 	bl	80206b4 <puts>
 8003634:	4b53      	ldr	r3, [pc, #332]	@ (8003784 <phApp_PrintTagInfo+0x4d8>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	4618      	mov	r0, r3
 800363c:	f01c fef4 	bl	8020428 <fflush>
        for (bIndex = 0; bIndex < wNumberOfTags; bIndex++)
 8003640:	7bfb      	ldrb	r3, [r7, #15]
 8003642:	3301      	adds	r3, #1
 8003644:	73fb      	strb	r3, [r7, #15]
 8003646:	7bfb      	ldrb	r3, [r7, #15]
 8003648:	b29b      	uxth	r3, r3
 800364a:	887a      	ldrh	r2, [r7, #2]
 800364c:	429a      	cmp	r2, r3
 800364e:	d889      	bhi.n	8003564 <phApp_PrintTagInfo+0x2b8>
        }
    }
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    if (PHAC_DISCLOOP_CHECK_ANDMASK(wTagsDetected, PHAC_DISCLOOP_POS_BIT_MASK_V))
 8003650:	883b      	ldrh	r3, [r7, #0]
 8003652:	f003 0310 	and.w	r3, r3, #16
 8003656:	2b00      	cmp	r3, #0
 8003658:	d03d      	beq.n	80036d6 <phApp_PrintTagInfo+0x42a>
    {
        DEBUG_PRINTF("\tTechnology  : Type V / ISO 15693 / T5T");
 800365a:	4850      	ldr	r0, [pc, #320]	@ (800379c <phApp_PrintTagInfo+0x4f0>)
 800365c:	f01c ffba 	bl	80205d4 <iprintf>
 8003660:	4b48      	ldr	r3, [pc, #288]	@ (8003784 <phApp_PrintTagInfo+0x4d8>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	4618      	mov	r0, r3
 8003668:	f01c fede 	bl	8020428 <fflush>
        /* Loop through all the Type V tags detected and print the UIDs */
        for (bIndex = 0; bIndex < wNumberOfTags; bIndex++)
 800366c:	2300      	movs	r3, #0
 800366e:	73fb      	strb	r3, [r7, #15]
 8003670:	e023      	b.n	80036ba <phApp_PrintTagInfo+0x40e>
        {
            DEBUG_PRINTF ("\n\t\tCard: %d",bIndex + 1);
 8003672:	7bfb      	ldrb	r3, [r7, #15]
 8003674:	3301      	adds	r3, #1
 8003676:	4619      	mov	r1, r3
 8003678:	4841      	ldr	r0, [pc, #260]	@ (8003780 <phApp_PrintTagInfo+0x4d4>)
 800367a:	f01c ffab 	bl	80205d4 <iprintf>
 800367e:	4b41      	ldr	r3, [pc, #260]	@ (8003784 <phApp_PrintTagInfo+0x4d8>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	4618      	mov	r0, r3
 8003686:	f01c fecf 	bl	8020428 <fflush>
            DEBUG_PRINTF ("\n\t\tUID :");
 800368a:	483f      	ldr	r0, [pc, #252]	@ (8003788 <phApp_PrintTagInfo+0x4dc>)
 800368c:	f01c ffa2 	bl	80205d4 <iprintf>
 8003690:	4b3c      	ldr	r3, [pc, #240]	@ (8003784 <phApp_PrintTagInfo+0x4d8>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	4618      	mov	r0, r3
 8003698:	f01c fec6 	bl	8020428 <fflush>
            phApp_Print_Buff( pDataParams->sTypeVTargetInfo.aTypeV[bIndex].aUid, 0x08);
 800369c:	7bfa      	ldrb	r2, [r7, #15]
 800369e:	4613      	mov	r3, r2
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	4413      	add	r3, r2
 80036a4:	33d8      	adds	r3, #216	@ 0xd8
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	4413      	add	r3, r2
 80036aa:	330b      	adds	r3, #11
 80036ac:	2108      	movs	r1, #8
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7ff fdd4 	bl	800325c <phApp_Print_Buff>
        for (bIndex = 0; bIndex < wNumberOfTags; bIndex++)
 80036b4:	7bfb      	ldrb	r3, [r7, #15]
 80036b6:	3301      	adds	r3, #1
 80036b8:	73fb      	strb	r3, [r7, #15]
 80036ba:	7bfb      	ldrb	r3, [r7, #15]
 80036bc:	b29b      	uxth	r3, r3
 80036be:	887a      	ldrh	r2, [r7, #2]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d8d6      	bhi.n	8003672 <phApp_PrintTagInfo+0x3c6>
        }
        DEBUG_PRINTF("\n");
 80036c4:	200a      	movs	r0, #10
 80036c6:	f01c ff97 	bl	80205f8 <putchar>
 80036ca:	4b2e      	ldr	r3, [pc, #184]	@ (8003784 <phApp_PrintTagInfo+0x4d8>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f01c fea9 	bl	8020428 <fflush>
    }
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    if (PHAC_DISCLOOP_CHECK_ANDMASK(wTagsDetected, PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3))
 80036d6:	883b      	ldrh	r3, [r7, #0]
 80036d8:	f003 0320 	and.w	r3, r3, #32
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d04b      	beq.n	8003778 <phApp_PrintTagInfo+0x4cc>
    {
        DEBUG_PRINTF("\tTechnology  : ISO 18000p3m3 / EPC Gen2");
 80036e0:	482f      	ldr	r0, [pc, #188]	@ (80037a0 <phApp_PrintTagInfo+0x4f4>)
 80036e2:	f01c ff77 	bl	80205d4 <iprintf>
 80036e6:	4b27      	ldr	r3, [pc, #156]	@ (8003784 <phApp_PrintTagInfo+0x4d8>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f01c fe9b 	bl	8020428 <fflush>
        /* Loop through all the 18000p3m3 tags detected and print the UII */
        for (bIndex = 0; bIndex < wNumberOfTags; bIndex++)
 80036f2:	2300      	movs	r3, #0
 80036f4:	73fb      	strb	r3, [r7, #15]
 80036f6:	e031      	b.n	800375c <phApp_PrintTagInfo+0x4b0>
        {
            DEBUG_PRINTF("\n\t\tCard: %d",bIndex + 1);
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
 80036fa:	3301      	adds	r3, #1
 80036fc:	4619      	mov	r1, r3
 80036fe:	4820      	ldr	r0, [pc, #128]	@ (8003780 <phApp_PrintTagInfo+0x4d4>)
 8003700:	f01c ff68 	bl	80205d4 <iprintf>
 8003704:	4b1f      	ldr	r3, [pc, #124]	@ (8003784 <phApp_PrintTagInfo+0x4d8>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	4618      	mov	r0, r3
 800370c:	f01c fe8c 	bl	8020428 <fflush>
            DEBUG_PRINTF("\n\t\tUII :");
 8003710:	4824      	ldr	r0, [pc, #144]	@ (80037a4 <phApp_PrintTagInfo+0x4f8>)
 8003712:	f01c ff5f 	bl	80205d4 <iprintf>
 8003716:	4b1b      	ldr	r3, [pc, #108]	@ (8003784 <phApp_PrintTagInfo+0x4d8>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	4618      	mov	r0, r3
 800371e:	f01c fe83 	bl	8020428 <fflush>
            phApp_Print_Buff(
                pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[bIndex].aUii,
 8003722:	7bfa      	ldrb	r2, [r7, #15]
 8003724:	4613      	mov	r3, r2
 8003726:	011b      	lsls	r3, r3, #4
 8003728:	1a9b      	subs	r3, r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	33e8      	adds	r3, #232	@ 0xe8
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	4413      	add	r3, r2
 8003732:	f103 0008 	add.w	r0, r3, #8
                (pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[bIndex].wUiiLength / 8));
 8003736:	7bfa      	ldrb	r2, [r7, #15]
 8003738:	6879      	ldr	r1, [r7, #4]
 800373a:	4613      	mov	r3, r2
 800373c:	011b      	lsls	r3, r3, #4
 800373e:	1a9b      	subs	r3, r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	440b      	add	r3, r1
 8003744:	f503 7395 	add.w	r3, r3, #298	@ 0x12a
 8003748:	881b      	ldrh	r3, [r3, #0]
            phApp_Print_Buff(
 800374a:	08db      	lsrs	r3, r3, #3
 800374c:	b29b      	uxth	r3, r3
 800374e:	b2db      	uxtb	r3, r3
 8003750:	4619      	mov	r1, r3
 8003752:	f7ff fd83 	bl	800325c <phApp_Print_Buff>
        for (bIndex = 0; bIndex < wNumberOfTags; bIndex++)
 8003756:	7bfb      	ldrb	r3, [r7, #15]
 8003758:	3301      	adds	r3, #1
 800375a:	73fb      	strb	r3, [r7, #15]
 800375c:	7bfb      	ldrb	r3, [r7, #15]
 800375e:	b29b      	uxth	r3, r3
 8003760:	887a      	ldrh	r2, [r7, #2]
 8003762:	429a      	cmp	r2, r3
 8003764:	d8c8      	bhi.n	80036f8 <phApp_PrintTagInfo+0x44c>
        }
        DEBUG_PRINTF("\n");
 8003766:	200a      	movs	r0, #10
 8003768:	f01c ff46 	bl	80205f8 <putchar>
 800376c:	4b05      	ldr	r3, [pc, #20]	@ (8003784 <phApp_PrintTagInfo+0x4d8>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	4618      	mov	r0, r3
 8003774:	f01c fe58 	bl	8020428 <fflush>
    }
#endif /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */
}
 8003778:	bf00      	nop
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	08022b20 	.word	0x08022b20
 8003784:	20000084 	.word	0x20000084
 8003788:	08022af0 	.word	0x08022af0
 800378c:	08022b58 	.word	0x08022b58
 8003790:	08022bbc 	.word	0x08022bbc
 8003794:	08022bd0 	.word	0x08022bd0
 8003798:	08022be4 	.word	0x08022be4
 800379c:	08022bf8 	.word	0x08022bf8
 80037a0:	08022c20 	.word	0x08022c20
 80037a4:	08022c48 	.word	0x08022c48

080037a8 <phApp_CPU_Init>:
* This function will initialize Host Controller interfaced with NXP Reader IC's.
* Any initialization which is not generic across Platforms, should be done here.
* Note: For NXP NFC Controllers HOST initialization is not required.
*/
void phApp_CPU_Init(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
	DEBUG_PRINTF("STM32 CPU already initialized\r\n");
 80037ac:	4805      	ldr	r0, [pc, #20]	@ (80037c4 <phApp_CPU_Init+0x1c>)
 80037ae:	f01c ff81 	bl	80206b4 <puts>
 80037b2:	4b05      	ldr	r3, [pc, #20]	@ (80037c8 <phApp_CPU_Init+0x20>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f01c fe35 	bl	8020428 <fflush>
    }
#else
    /* In case of LPC series, startup file takes care of initializing clock and ports.
     * No initialization is required in Linux environment. */
#endif
}
 80037be:	bf00      	nop
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	08022fe4 	.word	0x08022fe4
 80037c8:	20000084 	.word	0x20000084

080037cc <phApp_Comp_Init>:

/**
* This function will initialize Reader LIbrary Component
*/
phStatus_t phApp_Comp_Init(void * pDiscLoopParams)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
    phStatus_t wStatus = PH_ERR_SUCCESS;
 80037d4:	2300      	movs	r3, #0
 80037d6:	81fb      	strh	r3, [r7, #14]
#if defined(NXPBUILD__PHPAL_I18092MPI_SW) || defined(NXPBUILD__PHPAL_I18092MT_SW) || \
    defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE) || \
    defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS) || \
    defined(NXPBUILD__PHAC_DISCLOOP_TYPEF212_P2P_ACTIVE) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE)

    phacDiscLoop_Sw_DataParams_t * pDiscLoop = (phacDiscLoop_Sw_DataParams_t *)pDiscLoopParams;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	60bb      	str	r3, [r7, #8]
#endif /* NXPBUILD__PHLN_LLCP_SW */

#ifdef NXPBUILD__PHAC_DISCLOOP_SW
#if defined(NXPBUILD__PHPAL_I18092MPI_SW) || defined(NXPBUILD__PHPAL_I18092MT_SW)
    /* Assign the GI for Type A */
    pDiscLoop->sTypeATargetInfo.sTypeA_P2P.pGi       = (uint8_t *)aLLCPGeneralBytes;
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	4a11      	ldr	r2, [pc, #68]	@ (8003824 <phApp_Comp_Init+0x58>)
 80037e0:	675a      	str	r2, [r3, #116]	@ 0x74
    pDiscLoop->sTypeATargetInfo.sTypeA_P2P.bGiLength = bLLCPGBLength;
 80037e2:	4b11      	ldr	r3, [pc, #68]	@ (8003828 <phApp_Comp_Init+0x5c>)
 80037e4:	781a      	ldrb	r2, [r3, #0]
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
    /* Assign the GI for Type F */
    pDiscLoop->sTypeFTargetInfo.sTypeF_P2P.pGi       = (uint8_t *)aLLCPGeneralBytes;
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	4a0d      	ldr	r2, [pc, #52]	@ (8003824 <phApp_Comp_Init+0x58>)
 80037f0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    pDiscLoop->sTypeFTargetInfo.sTypeF_P2P.bGiLength = bLLCPGBLength;
 80037f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003828 <phApp_Comp_Init+0x5c>)
 80037f6:	781a      	ldrb	r2, [r3, #0]
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
#endif

#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE)
    /* Assign ATR response for Type A */
    pDiscLoop->sTypeATargetInfo.sTypeA_P2P.pAtrRes   = aResponseHolder;
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	4a0a      	ldr	r2, [pc, #40]	@ (800382c <phApp_Comp_Init+0x60>)
 8003802:	67da      	str	r2, [r3, #124]	@ 0x7c
#endif
#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS) ||  defined(NXPBUILD__PHAC_DISCLOOP_TYPEF212_P2P_ACTIVE) || \
    defined(NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE)
    /* Assign ATR response for Type F */
    pDiscLoop->sTypeFTargetInfo.sTypeF_P2P.pAtrRes   = aResponseHolder;
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	4a09      	ldr	r2, [pc, #36]	@ (800382c <phApp_Comp_Init+0x60>)
 8003808:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS
    /* Assign ATS buffer for Type A */
    pDiscLoop->sTypeATargetInfo.sTypeA_I3P4.pAts     = aResponseHolder;
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	4a07      	ldr	r2, [pc, #28]	@ (800382c <phApp_Comp_Init+0x60>)
 8003810:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */
#endif /* NXPBUILD__PHAC_DISCLOOP_SW */
    return wStatus;
 8003814:	89fb      	ldrh	r3, [r7, #14]
}
 8003816:	4618      	mov	r0, r3
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	20000038 	.word	0x20000038
 8003828:	2000005c 	.word	0x2000005c
 800382c:	2000089c 	.word	0x2000089c

08003830 <phApp_Configure_IRQ>:

phStatus_t phApp_Configure_IRQ()
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
#ifdef PH_PLATFORM_HAS_ICFRONTEND
    // 如果不是Linux平台并且芯片不是PN5190，配置IRQ引脚
#if !(defined(PH_OSAL_LINUX) && defined(NXPBUILD__PHHAL_HW_PN5190))
    phDriver_Pin_Config_t pinCfg;

    pinCfg.bOutputLogic = PH_DRIVER_SET_LOW;		// 输出低电平
 8003836:	2300      	movs	r3, #0
 8003838:	717b      	strb	r3, [r7, #5]
    pinCfg.bPullSelect = PHDRIVER_PIN_IRQ_PULL_CFG;	// 上拉
 800383a:	2301      	movs	r3, #1
 800383c:	713b      	strb	r3, [r7, #4]
    pinCfg.eInterruptConfig = PIN_IRQ_TRIGGER_TYPE;	// 下降沿触发
 800383e:	2304      	movs	r3, #4
 8003840:	71bb      	strb	r3, [r7, #6]

    phDriver_PinConfig(PHDRIVER_PIN_IRQ, PH_DRIVER_PINFUNC_INTERRUPT, &pinCfg);
 8003842:	1d3b      	adds	r3, r7, #4
 8003844:	2204      	movs	r2, #4
 8003846:	2110      	movs	r1, #16
 8003848:	4803      	ldr	r0, [pc, #12]	@ (8003858 <phApp_Configure_IRQ+0x28>)
 800384a:	f016 fd17 	bl	801a27c <phDriver_PinConfig>
#endif /* PHDRIVER_KINETIS_K82 */

#endif /* #ifdef PH_PLATFORM_HAS_ICFRONTEND */

    // 可能不配置IRQ，直接返回
    return PH_ERR_SUCCESS;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	48000400 	.word	0x48000400

0800385c <phApp_HALConfigAutoColl>:
*******************************************************************************/
/**
* This function will initialize Hal Target Config
*/
phStatus_t phApp_HALConfigAutoColl(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b08a      	sub	sp, #40	@ 0x28
 8003860:	af02      	add	r7, sp, #8
#ifdef NXPBUILD__PHHAL_HW_TARGET
    phStatus_t wStatus;
    uint8_t baDynamicUidConfig[1U] = { 1U };
 8003862:	2301      	movs	r3, #1
 8003864:	773b      	strb	r3, [r7, #28]
    uint8_t baReadEepromConfig[24U] = { 0U };
 8003866:	1d3b      	adds	r3, r7, #4
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	605a      	str	r2, [r3, #4]
 800386e:	609a      	str	r2, [r3, #8]
 8003870:	60da      	str	r2, [r3, #12]
 8003872:	611a      	str	r2, [r3, #16]
 8003874:	615a      	str	r2, [r3, #20]

    /* Read Set Listen Parameters data from EEPROM */
    wStatus = phhalHw_Pn5180_Instr_ReadE2Prom(
 8003876:	4b54      	ldr	r3, [pc, #336]	@ (80039c8 <phApp_HALConfigAutoColl+0x16c>)
 8003878:	6818      	ldr	r0, [r3, #0]
 800387a:	1d3a      	adds	r2, r7, #4
 800387c:	2318      	movs	r3, #24
 800387e:	2140      	movs	r1, #64	@ 0x40
 8003880:	f00e f98c 	bl	8011b9c <phhalHw_Pn5180_Instr_ReadE2Prom>
 8003884:	4603      	mov	r3, r0
 8003886:	83fb      	strh	r3, [r7, #30]
        (phhalHw_Pn5180_DataParams_t *) pHal,
        PHHAL_HW_PN5180_SET_LISTEN_E2PROM_ADDR,
        baReadEepromConfig,
        24U
        );
    CHECK_SUCCESS(wStatus);
 8003888:	8bfb      	ldrh	r3, [r7, #30]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00d      	beq.n	80038aa <phApp_HALConfigAutoColl+0x4e>
 800388e:	8bfb      	ldrh	r3, [r7, #30]
 8003890:	461a      	mov	r2, r3
 8003892:	2152      	movs	r1, #82	@ 0x52
 8003894:	484d      	ldr	r0, [pc, #308]	@ (80039cc <phApp_HALConfigAutoColl+0x170>)
 8003896:	f01c fe9d 	bl	80205d4 <iprintf>
 800389a:	4b4d      	ldr	r3, [pc, #308]	@ (80039d0 <phApp_HALConfigAutoColl+0x174>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f01c fdc1 	bl	8020428 <fflush>
 80038a6:	8bfb      	ldrh	r3, [r7, #30]
 80038a8:	e08a      	b.n	80039c0 <phApp_HALConfigAutoColl+0x164>

    /* Verify EEPROM data and configure Set Listen Parameters if EEPROM data is not correct. */
    if ((memcmp(&baReadEepromConfig[0U], sens_res, 2U) != 0x00)  ||
 80038aa:	1d3b      	adds	r3, r7, #4
 80038ac:	2202      	movs	r2, #2
 80038ae:	4949      	ldr	r1, [pc, #292]	@ (80039d4 <phApp_HALConfigAutoColl+0x178>)
 80038b0:	4618      	mov	r0, r3
 80038b2:	f01c ffdf 	bl	8020874 <memcmp>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d11a      	bne.n	80038f2 <phApp_HALConfigAutoColl+0x96>
        (memcmp(&baReadEepromConfig[2U], nfc_id1, 3U) != 0x00)   ||
 80038bc:	1d3b      	adds	r3, r7, #4
 80038be:	3302      	adds	r3, #2
 80038c0:	2203      	movs	r2, #3
 80038c2:	4945      	ldr	r1, [pc, #276]	@ (80039d8 <phApp_HALConfigAutoColl+0x17c>)
 80038c4:	4618      	mov	r0, r3
 80038c6:	f01c ffd5 	bl	8020874 <memcmp>
 80038ca:	4603      	mov	r3, r0
    if ((memcmp(&baReadEepromConfig[0U], sens_res, 2U) != 0x00)  ||
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d110      	bne.n	80038f2 <phApp_HALConfigAutoColl+0x96>
        (memcmp(&baReadEepromConfig[5U], &sel_res, 1U) != 0x00)  ||
 80038d0:	1d3b      	adds	r3, r7, #4
 80038d2:	3305      	adds	r3, #5
 80038d4:	781a      	ldrb	r2, [r3, #0]
 80038d6:	4b41      	ldr	r3, [pc, #260]	@ (80039dc <phApp_HALConfigAutoColl+0x180>)
 80038d8:	781b      	ldrb	r3, [r3, #0]
        (memcmp(&baReadEepromConfig[2U], nfc_id1, 3U) != 0x00)   ||
 80038da:	429a      	cmp	r2, r3
 80038dc:	d109      	bne.n	80038f2 <phApp_HALConfigAutoColl+0x96>
        (memcmp(&baReadEepromConfig[6U], poll_res, 18U) != 0x00))
 80038de:	1d3b      	adds	r3, r7, #4
 80038e0:	3306      	adds	r3, #6
 80038e2:	2212      	movs	r2, #18
 80038e4:	493e      	ldr	r1, [pc, #248]	@ (80039e0 <phApp_HALConfigAutoColl+0x184>)
 80038e6:	4618      	mov	r0, r3
 80038e8:	f01c ffc4 	bl	8020874 <memcmp>
 80038ec:	4603      	mov	r3, r0
        (memcmp(&baReadEepromConfig[5U], &sel_res, 1U) != 0x00)  ||
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d020      	beq.n	8003934 <phApp_HALConfigAutoColl+0xd8>
    {
        /* Configure Set Listen Parameters. */
        wStatus = phhalHw_Pn5180_SetListenParameters(
 80038f2:	4b35      	ldr	r3, [pc, #212]	@ (80039c8 <phApp_HALConfigAutoColl+0x16c>)
 80038f4:	6818      	ldr	r0, [r3, #0]
 80038f6:	4b39      	ldr	r3, [pc, #228]	@ (80039dc <phApp_HALConfigAutoColl+0x180>)
 80038f8:	781a      	ldrb	r2, [r3, #0]
 80038fa:	4b3a      	ldr	r3, [pc, #232]	@ (80039e4 <phApp_HALConfigAutoColl+0x188>)
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	9301      	str	r3, [sp, #4]
 8003900:	4b37      	ldr	r3, [pc, #220]	@ (80039e0 <phApp_HALConfigAutoColl+0x184>)
 8003902:	9300      	str	r3, [sp, #0]
 8003904:	4613      	mov	r3, r2
 8003906:	4a34      	ldr	r2, [pc, #208]	@ (80039d8 <phApp_HALConfigAutoColl+0x17c>)
 8003908:	4932      	ldr	r1, [pc, #200]	@ (80039d4 <phApp_HALConfigAutoColl+0x178>)
 800390a:	f00d fab1 	bl	8010e70 <phhalHw_Pn5180_SetListenParameters>
 800390e:	4603      	mov	r3, r0
 8003910:	83fb      	strh	r3, [r7, #30]
            &nfc_id1[0],
            sel_res,
            &poll_res[0],
            nfc_id3
            );
        CHECK_SUCCESS(wStatus);
 8003912:	8bfb      	ldrh	r3, [r7, #30]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00d      	beq.n	8003934 <phApp_HALConfigAutoColl+0xd8>
 8003918:	8bfb      	ldrh	r3, [r7, #30]
 800391a:	461a      	mov	r2, r3
 800391c:	2163      	movs	r1, #99	@ 0x63
 800391e:	482b      	ldr	r0, [pc, #172]	@ (80039cc <phApp_HALConfigAutoColl+0x170>)
 8003920:	f01c fe58 	bl	80205d4 <iprintf>
 8003924:	4b2a      	ldr	r3, [pc, #168]	@ (80039d0 <phApp_HALConfigAutoColl+0x174>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	4618      	mov	r0, r3
 800392c:	f01c fd7c 	bl	8020428 <fflush>
 8003930:	8bfb      	ldrh	r3, [r7, #30]
 8003932:	e045      	b.n	80039c0 <phApp_HALConfigAutoColl+0x164>
    }

    if (pHal->wFirmwareVer < 0x308U)
 8003934:	4b24      	ldr	r3, [pc, #144]	@ (80039c8 <phApp_HALConfigAutoColl+0x16c>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 800393c:	f5b3 7f42 	cmp.w	r3, #776	@ 0x308
 8003940:	d201      	bcs.n	8003946 <phApp_HALConfigAutoColl+0xea>
    {
        /* With Pn5180 FW version < 3.8, only static UID is supported. */
        baDynamicUidConfig[0] = 0x00;
 8003942:	2300      	movs	r3, #0
 8003944:	773b      	strb	r3, [r7, #28]
    }

    /* Read Dynamic UID configuration from EEPROM */
    wStatus = phhalHw_Pn5180_Instr_ReadE2Prom(
 8003946:	4b20      	ldr	r3, [pc, #128]	@ (80039c8 <phApp_HALConfigAutoColl+0x16c>)
 8003948:	6818      	ldr	r0, [r3, #0]
 800394a:	1d3a      	adds	r2, r7, #4
 800394c:	2301      	movs	r3, #1
 800394e:	2158      	movs	r1, #88	@ 0x58
 8003950:	f00e f924 	bl	8011b9c <phhalHw_Pn5180_Instr_ReadE2Prom>
 8003954:	4603      	mov	r3, r0
 8003956:	83fb      	strh	r3, [r7, #30]
        (phhalHw_Pn5180_DataParams_t *) pHal,
        PHHAL_HW_PN5180_DYN_UID_CFG_E2PROM_ADDR,
        baReadEepromConfig,
        1U
        );
    CHECK_SUCCESS(wStatus);
 8003958:	8bfb      	ldrh	r3, [r7, #30]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00d      	beq.n	800397a <phApp_HALConfigAutoColl+0x11e>
 800395e:	8bfb      	ldrh	r3, [r7, #30]
 8003960:	461a      	mov	r2, r3
 8003962:	2173      	movs	r1, #115	@ 0x73
 8003964:	4819      	ldr	r0, [pc, #100]	@ (80039cc <phApp_HALConfigAutoColl+0x170>)
 8003966:	f01c fe35 	bl	80205d4 <iprintf>
 800396a:	4b19      	ldr	r3, [pc, #100]	@ (80039d0 <phApp_HALConfigAutoColl+0x174>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	4618      	mov	r0, r3
 8003972:	f01c fd59 	bl	8020428 <fflush>
 8003976:	8bfb      	ldrh	r3, [r7, #30]
 8003978:	e022      	b.n	80039c0 <phApp_HALConfigAutoColl+0x164>

    /* Verify EEPROM data and perform Dynamic UID configuration if EEPROM data is not correct. */
    if (memcmp(baReadEepromConfig, baDynamicUidConfig, 1U) != 0x00)
 800397a:	1d3b      	adds	r3, r7, #4
 800397c:	781a      	ldrb	r2, [r3, #0]
 800397e:	f107 031c 	add.w	r3, r7, #28
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	429a      	cmp	r2, r3
 8003986:	d01a      	beq.n	80039be <phApp_HALConfigAutoColl+0x162>
    {
        /* Configure Dynamic UID */
        wStatus = phhalHw_Pn5180_Instr_WriteE2Prom(
 8003988:	4b0f      	ldr	r3, [pc, #60]	@ (80039c8 <phApp_HALConfigAutoColl+0x16c>)
 800398a:	6818      	ldr	r0, [r3, #0]
 800398c:	f107 021c 	add.w	r2, r7, #28
 8003990:	2301      	movs	r3, #1
 8003992:	2158      	movs	r1, #88	@ 0x58
 8003994:	f00e f88a 	bl	8011aac <phhalHw_Pn5180_Instr_WriteE2Prom>
 8003998:	4603      	mov	r3, r0
 800399a:	83fb      	strh	r3, [r7, #30]
            (phhalHw_Pn5180_DataParams_t *) pHal,
            PHHAL_HW_PN5180_DYN_UID_CFG_E2PROM_ADDR,
            baDynamicUidConfig,
            1U
            );
        CHECK_SUCCESS(wStatus);
 800399c:	8bfb      	ldrh	r3, [r7, #30]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00d      	beq.n	80039be <phApp_HALConfigAutoColl+0x162>
 80039a2:	8bfb      	ldrh	r3, [r7, #30]
 80039a4:	461a      	mov	r2, r3
 80039a6:	217f      	movs	r1, #127	@ 0x7f
 80039a8:	4808      	ldr	r0, [pc, #32]	@ (80039cc <phApp_HALConfigAutoColl+0x170>)
 80039aa:	f01c fe13 	bl	80205d4 <iprintf>
 80039ae:	4b08      	ldr	r3, [pc, #32]	@ (80039d0 <phApp_HALConfigAutoColl+0x174>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f01c fd37 	bl	8020428 <fflush>
 80039ba:	8bfb      	ldrh	r3, [r7, #30]
 80039bc:	e000      	b.n	80039c0 <phApp_HALConfigAutoColl+0x164>
    }
#endif /* NXPBUILD__PHHAL_HW_TARGET */
    return PH_ERR_SUCCESS;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3720      	adds	r7, #32
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	200008e0 	.word	0x200008e0
 80039cc:	08023004 	.word	0x08023004
 80039d0:	20000084 	.word	0x20000084
 80039d4:	20000004 	.word	0x20000004
 80039d8:	20000008 	.word	0x20000008
 80039dc:	2000000b 	.word	0x2000000b
 80039e0:	20000010 	.word	0x20000010
 80039e4:	2000000c 	.word	0x2000000c

080039e8 <phCryptoRng_Sw_Init>:

static const uint8_t PH_CRYPTOSYM_SW_CONST_ROM phCryptoRng_Sw_BlockCipherDf_DefaultKey[PHCRYPTORNG_SW_KEYLEN] =
{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F};

phStatus_t phCryptoRng_Sw_Init(phCryptoRng_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pCryptoDataParams)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	460b      	mov	r3, r1
 80039f2:	607a      	str	r2, [r7, #4]
 80039f4:	817b      	strh	r3, [r7, #10]
    if(sizeof(phCryptoRng_Sw_DataParams_t) != wSizeOfDataParams)
 80039f6:	897b      	ldrh	r3, [r7, #10]
 80039f8:	2b20      	cmp	r3, #32
 80039fa:	d002      	beq.n	8003a02 <phCryptoRng_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTORNG);
 80039fc:	f24e 4320 	movw	r3, #58400	@ 0xe420
 8003a00:	e01b      	b.n	8003a3a <phCryptoRng_Sw_Init+0x52>
    }
    PH_ASSERT_NULL (pDataParams);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <phCryptoRng_Sw_Init+0x24>
 8003a08:	2321      	movs	r3, #33	@ 0x21
 8003a0a:	e016      	b.n	8003a3a <phCryptoRng_Sw_Init+0x52>
    PH_ASSERT_NULL (pCryptoDataParams);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <phCryptoRng_Sw_Init+0x2e>
 8003a12:	2321      	movs	r3, #33	@ 0x21
 8003a14:	e011      	b.n	8003a3a <phCryptoRng_Sw_Init+0x52>

    /* Init. private data */
    pDataParams->wId = PH_COMP_CRYPTORNG | PH_CRYPTORNG_SW_ID;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f24e 4201 	movw	r2, #58369	@ 0xe401
 8003a1c:	801a      	strh	r2, [r3, #0]
    pDataParams->pCryptoDataParams = pCryptoDataParams;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	605a      	str	r2, [r3, #4]
    (void) memset(pDataParams->V, 0, (size_t) sizeof(pDataParams->V));
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	3308      	adds	r3, #8
 8003a28:	2210      	movs	r2, #16
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f01c ff31 	bl	8020894 <memset>
    pDataParams->bState = PHCRYPTORNG_SW_STATE_INIT;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	771a      	strb	r2, [r3, #28]

    return PH_ERR_SUCCESS;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
	...

08003a44 <phCryptoRng_Sw_Seed>:

phStatus_t phCryptoRng_Sw_Seed(phCryptoRng_Sw_DataParams_t * pDataParams, uint8_t * pSeed, uint8_t bSeedLength)
{
 8003a44:	b5b0      	push	{r4, r5, r7, lr}
 8003a46:	b092      	sub	sp, #72	@ 0x48
 8003a48:	af04      	add	r7, sp, #16
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	71fb      	strb	r3, [r7, #7]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aSeed[PHCRYPTORNG_SW_SEEDLEN];

    /* we do not set the seed to 0 as we like randomness in here... */

    if (bSeedLength > PHCRYPTORNG_SW_SEEDLEN)
 8003a52:	79fb      	ldrb	r3, [r7, #7]
 8003a54:	2b20      	cmp	r3, #32
 8003a56:	d90e      	bls.n	8003a76 <phCryptoRng_Sw_Seed+0x32>
    {
        (void) memcpy(aSeed, pSeed, PHCRYPTORNG_SW_SEEDLEN);
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	f107 0414 	add.w	r4, r7, #20
 8003a5e:	461d      	mov	r5, r3
 8003a60:	6828      	ldr	r0, [r5, #0]
 8003a62:	6869      	ldr	r1, [r5, #4]
 8003a64:	68aa      	ldr	r2, [r5, #8]
 8003a66:	68eb      	ldr	r3, [r5, #12]
 8003a68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a6a:	6928      	ldr	r0, [r5, #16]
 8003a6c:	6969      	ldr	r1, [r5, #20]
 8003a6e:	69aa      	ldr	r2, [r5, #24]
 8003a70:	69eb      	ldr	r3, [r5, #28]
 8003a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a74:	e006      	b.n	8003a84 <phCryptoRng_Sw_Seed+0x40>
    }
    else
    {
        (void) memcpy(aSeed, pSeed, bSeedLength);
 8003a76:	79fa      	ldrb	r2, [r7, #7]
 8003a78:	f107 0314 	add.w	r3, r7, #20
 8003a7c:	68b9      	ldr	r1, [r7, #8]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f01c ff87 	bl	8020992 <memcpy>
    }

    if (pDataParams->bState == PHCRYPTORNG_SW_STATE_INIT)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	7f1b      	ldrb	r3, [r3, #28]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10f      	bne.n	8003aac <phCryptoRng_Sw_Seed+0x68>
    {
        statusTmp = phCryptoRng_Sw_Instantiate(
 8003a8c:	f107 0114 	add.w	r1, r7, #20
 8003a90:	2300      	movs	r3, #0
 8003a92:	9302      	str	r3, [sp, #8]
 8003a94:	2300      	movs	r3, #0
 8003a96:	9301      	str	r3, [sp, #4]
 8003a98:	2300      	movs	r3, #0
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f000 f8a9 	bl	8003bf8 <phCryptoRng_Sw_Instantiate>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8003aaa:	e00a      	b.n	8003ac2 <phCryptoRng_Sw_Seed+0x7e>
            NULL,
            0);
    }
    else
    {
        statusTmp = phCryptoRng_Sw_Reseed(
 8003aac:	f107 0114 	add.w	r1, r7, #20
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	9300      	str	r3, [sp, #0]
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f000 f914 	bl	8003ce6 <phCryptoRng_Sw_Reseed>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	86fb      	strh	r3, [r7, #54]	@ 0x36
            (uint16_t)sizeof(aSeed),
            NULL,
            0);
    }

    return PH_ADD_COMPCODE(statusTmp, PH_COMP_CRYPTORNG);
 8003ac2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00b      	beq.n	8003ae0 <phCryptoRng_Sw_Seed+0x9c>
 8003ac8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003aca:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d106      	bne.n	8003ae0 <phCryptoRng_Sw_Seed+0x9c>
 8003ad2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	4b04      	ldr	r3, [pc, #16]	@ (8003aec <phCryptoRng_Sw_Seed+0xa8>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	e000      	b.n	8003ae2 <phCryptoRng_Sw_Seed+0x9e>
 8003ae0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3738      	adds	r7, #56	@ 0x38
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bdb0      	pop	{r4, r5, r7, pc}
 8003aea:	bf00      	nop
 8003aec:	ffffe400 	.word	0xffffe400

08003af0 <phCryptoRng_Sw_Update>:
        wNoOfRndBytes,
        pRnd);
}

phStatus_t phCryptoRng_Sw_Update(phCryptoRng_Sw_DataParams_t * pDataParams, uint8_t * pProvidedData)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b08a      	sub	sp, #40	@ 0x28
 8003af4:	af02      	add	r7, sp, #8
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
    /* NOTE: as seedlen == 2*PH_CRYPTOSYN_AES_BLOCK_SIZE, the loop is unrolled in this implementation. */
    /* NOTE: First iteration: Generate new key, second iteration: Generate new V. */
    /* For further details refer to sec. 10.2.1.1. of NIST SP 800-90 */

    /* 2.1 V = (V + 1U) mod 2 exp outlen.*/
    phCryptoRng_Sw_IncrementV(pDataParams);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f9fa 	bl	8003ef4 <phCryptoRng_Sw_IncrementV>

    /* 2.2 output_block = Block_Encrypt (Key, V). */
    /* 2.3 temp = temp || ouput_block. */
    /* Note: Encrypt V to get Key using ECB mode */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Encrypt(pDataParams->pCryptoDataParams,
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6858      	ldr	r0, [r3, #4]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f103 0208 	add.w	r2, r3, #8
 8003b0a:	f107 030c 	add.w	r3, r7, #12
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	2310      	movs	r3, #16
 8003b12:	2100      	movs	r1, #0
 8003b14:	f002 ff4e 	bl	80069b4 <phCryptoSym_Encrypt>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	83bb      	strh	r3, [r7, #28]
 8003b1c:	8bbb      	ldrh	r3, [r7, #28]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <phCryptoRng_Sw_Update+0x36>
 8003b22:	8bbb      	ldrh	r3, [r7, #28]
 8003b24:	e064      	b.n	8003bf0 <phCryptoRng_Sw_Update+0x100>
    /*  3. temp = Leftmost seedlen bits of temp. */
    /*  4 temp = temp xor provided_data. */
    /*  5. Key = Leftmost keylen bits of temp. */
    /* Note: Xor Key with provided data to get the key to be later used in the crypto unit. */
    /* Note: We must not load the key immediately, as the updated value of V shall be encrypted using the old key */
    if(pProvidedData != NULL)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d018      	beq.n	8003b5e <phCryptoRng_Sw_Update+0x6e>
    {
        for(bIndex = 0; bIndex < PHCRYPTORNG_SW_KEYLEN; ++bIndex)
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	77fb      	strb	r3, [r7, #31]
 8003b30:	e012      	b.n	8003b58 <phCryptoRng_Sw_Update+0x68>
        {
            aKey[bIndex] ^= pProvidedData[bIndex];
 8003b32:	7ffb      	ldrb	r3, [r7, #31]
 8003b34:	3320      	adds	r3, #32
 8003b36:	443b      	add	r3, r7
 8003b38:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 8003b3c:	7ffb      	ldrb	r3, [r7, #31]
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	4413      	add	r3, r2
 8003b42:	781a      	ldrb	r2, [r3, #0]
 8003b44:	7ffb      	ldrb	r3, [r7, #31]
 8003b46:	404a      	eors	r2, r1
 8003b48:	b2d2      	uxtb	r2, r2
 8003b4a:	3320      	adds	r3, #32
 8003b4c:	443b      	add	r3, r7
 8003b4e:	f803 2c14 	strb.w	r2, [r3, #-20]
        for(bIndex = 0; bIndex < PHCRYPTORNG_SW_KEYLEN; ++bIndex)
 8003b52:	7ffb      	ldrb	r3, [r7, #31]
 8003b54:	3301      	adds	r3, #1
 8003b56:	77fb      	strb	r3, [r7, #31]
 8003b58:	7ffb      	ldrb	r3, [r7, #31]
 8003b5a:	2b0f      	cmp	r3, #15
 8003b5c:	d9e9      	bls.n	8003b32 <phCryptoRng_Sw_Update+0x42>
        }
    }

    /* NOTE: Second iteration of the loop */
    /* 2.1 V = (V + 1U) mod 2 exp outlen.*/
    phCryptoRng_Sw_IncrementV(pDataParams);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 f9c8 	bl	8003ef4 <phCryptoRng_Sw_IncrementV>

    /* 2.2 output_block = Block_Encrypt (Key, V). */
    /* 2.3 temp = temp || ouput_block. */
    /* NOTE: Encrypt V to get V' using ECB mode */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Encrypt(pDataParams->pCryptoDataParams,
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6858      	ldr	r0, [r3, #4]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f103 0208 	add.w	r2, r3, #8
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	3308      	adds	r3, #8
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	2310      	movs	r3, #16
 8003b76:	2100      	movs	r1, #0
 8003b78:	f002 ff1c 	bl	80069b4 <phCryptoSym_Encrypt>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	83bb      	strh	r3, [r7, #28]
 8003b80:	8bbb      	ldrh	r3, [r7, #28]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <phCryptoRng_Sw_Update+0x9a>
 8003b86:	8bbb      	ldrh	r3, [r7, #28]
 8003b88:	e032      	b.n	8003bf0 <phCryptoRng_Sw_Update+0x100>

    /* 3. temp = Leftmost seedlen bits of temp. */
    /* 4 temp = temp xor provided_data. */
    /* 6. V = Rightmost outlen bits of temp. */
    /* NOTE: Xor V' with provided data */
    if(pProvidedData != NULL)
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d018      	beq.n	8003bc2 <phCryptoRng_Sw_Update+0xd2>
    {
        for(bIndex = 0; bIndex < PHCRYPTORNG_SW_OUTLEN; ++bIndex)
 8003b90:	2300      	movs	r3, #0
 8003b92:	77fb      	strb	r3, [r7, #31]
 8003b94:	e012      	b.n	8003bbc <phCryptoRng_Sw_Update+0xcc>
        {
            pDataParams->V[bIndex] ^= pProvidedData[bIndex + PHCRYPTORNG_SW_KEYLEN];
 8003b96:	7ffb      	ldrb	r3, [r7, #31]
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	7a19      	ldrb	r1, [r3, #8]
 8003b9e:	7ffb      	ldrb	r3, [r7, #31]
 8003ba0:	3310      	adds	r3, #16
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	781a      	ldrb	r2, [r3, #0]
 8003ba8:	7ffb      	ldrb	r3, [r7, #31]
 8003baa:	404a      	eors	r2, r1
 8003bac:	b2d1      	uxtb	r1, r2
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	460a      	mov	r2, r1
 8003bb4:	721a      	strb	r2, [r3, #8]
        for(bIndex = 0; bIndex < PHCRYPTORNG_SW_OUTLEN; ++bIndex)
 8003bb6:	7ffb      	ldrb	r3, [r7, #31]
 8003bb8:	3301      	adds	r3, #1
 8003bba:	77fb      	strb	r3, [r7, #31]
 8003bbc:	7ffb      	ldrb	r3, [r7, #31]
 8003bbe:	2b0f      	cmp	r3, #15
 8003bc0:	d9e9      	bls.n	8003b96 <phCryptoRng_Sw_Update+0xa6>

#ifndef PH_CRYPTOSYM_SW_AES
    #error "No valid cipher available"
#else
    /* Load the new key into the Crypto Data Params structure */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_LoadKeyDirect(
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f107 010c 	add.w	r1, r7, #12
 8003bca:	2200      	movs	r2, #0
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f002 ffb6 	bl	8006b3e <phCryptoSym_LoadKeyDirect>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	83bb      	strh	r3, [r7, #28]
 8003bd6:	8bbb      	ldrh	r3, [r7, #28]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d001      	beq.n	8003be0 <phCryptoRng_Sw_Update+0xf0>
 8003bdc:	8bbb      	ldrh	r3, [r7, #28]
 8003bde:	e007      	b.n	8003bf0 <phCryptoRng_Sw_Update+0x100>
        aKey,
        PH_CRYPTOSYM_KEY_TYPE_AES128));
#endif /* PH_CRYPTOSYM_SW_AES */

    /* Clear aKey for security reasons */
    (void) memset(aKey, 0x00, (size_t) sizeof(aKey));
 8003be0:	f107 030c 	add.w	r3, r7, #12
 8003be4:	2210      	movs	r2, #16
 8003be6:	2100      	movs	r1, #0
 8003be8:	4618      	mov	r0, r3
 8003bea:	f01c fe53 	bl	8020894 <memset>
    return PH_ERR_SUCCESS;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3720      	adds	r7, #32
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <phCryptoRng_Sw_Instantiate>:

phStatus_t phCryptoRng_Sw_Instantiate(phCryptoRng_Sw_DataParams_t * pDataParams, uint8_t * pEntropyInput, uint16_t wEntropyInputLength,
    uint8_t * pNonce, uint8_t bNonceLength, uint8_t * pPersonalizationString, uint8_t bPersonalizationString)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b08e      	sub	sp, #56	@ 0x38
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	603b      	str	r3, [r7, #0]
 8003c04:	4613      	mov	r3, r2
 8003c06:	80fb      	strh	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aSeedMaterial[PHCRYPTORNG_SW_SEEDLEN];

    /* Reset state to be init again. */
    pDataParams->bState = PHCRYPTORNG_SW_STATE_INIT;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	771a      	strb	r2, [r3, #28]

    /* do we have a wrong input data length? */
    /* Comment: Ensure that the length of the seed_material is exactly seedlen bits. */
    if(PHCRYPTORNG_SW_SEEDLEN != (wEntropyInputLength + bNonceLength + bPersonalizationString))
 8003c0e:	88fa      	ldrh	r2, [r7, #6]
 8003c10:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8003c14:	441a      	add	r2, r3
 8003c16:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8003c1a:	4413      	add	r3, r2
 8003c1c:	2b20      	cmp	r3, #32
 8003c1e:	d002      	beq.n	8003c26 <phCryptoRng_Sw_Instantiate+0x2e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTORNG);
 8003c20:	f24e 4321 	movw	r3, #58401	@ 0xe421
 8003c24:	e05b      	b.n	8003cde <phCryptoRng_Sw_Instantiate+0xe6>
    }

    /* NOTE: Prepare seed Material */
    /* 1. seed_material = entropy_input || nonce || personalization_string. */
    (void) memcpy(aSeedMaterial, pEntropyInput, wEntropyInputLength);
 8003c26:	88fa      	ldrh	r2, [r7, #6]
 8003c28:	f107 0314 	add.w	r3, r7, #20
 8003c2c:	68b9      	ldr	r1, [r7, #8]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f01c feaf 	bl	8020992 <memcpy>
    (void) memcpy(&aSeedMaterial[wEntropyInputLength], pNonce, bNonceLength);
 8003c34:	88fb      	ldrh	r3, [r7, #6]
 8003c36:	f107 0214 	add.w	r2, r7, #20
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8003c40:	6839      	ldr	r1, [r7, #0]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f01c fea5 	bl	8020992 <memcpy>
    (void) memcpy(&aSeedMaterial[wEntropyInputLength + bNonceLength], pPersonalizationString, bPersonalizationString);
 8003c48:	88fa      	ldrh	r2, [r7, #6]
 8003c4a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8003c4e:	4413      	add	r3, r2
 8003c50:	f107 0214 	add.w	r2, r7, #20
 8003c54:	4413      	add	r3, r2
 8003c56:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 8003c5a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f01c fe98 	bl	8020992 <memcpy>

    /* Note: Encrypt the seed value */
    /* 2. seed_material = Block_Cipher_df (seed_material, seedlen). */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoRng_Sw_BlockCipherDf(
 8003c62:	f107 0314 	add.w	r3, r7, #20
 8003c66:	4619      	mov	r1, r3
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f000 f88f 	bl	8003d8c <phCryptoRng_Sw_BlockCipherDf>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8003c72:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <phCryptoRng_Sw_Instantiate+0x84>
 8003c78:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003c7a:	e030      	b.n	8003cde <phCryptoRng_Sw_Instantiate+0xe6>
        pDataParams,
        aSeedMaterial));

    /* Note: Reset the Key and the V-Value. */
    /* 4. V = 0 expoutlen. Comment: outlen bits of zeros. */
    (void) memset(pDataParams->V, 0, PHCRYPTORNG_SW_OUTLEN);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	3308      	adds	r3, #8
 8003c80:	2210      	movs	r2, #16
 8003c82:	2100      	movs	r1, #0
 8003c84:	4618      	mov	r0, r3
 8003c86:	f01c fe05 	bl	8020894 <memset>
#ifndef PH_CRYPTOSYM_SW_AES
    #error "No valid cipher available"
#else
    /* 3. Key = 0 exp keylen. Comment: keylen bits of zeros. */
    /* Also reset the key, this can be done by loading V into the key register, as we set it to 0 before. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_LoadKeyDirect(
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6858      	ldr	r0, [r3, #4]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	3308      	adds	r3, #8
 8003c92:	2200      	movs	r2, #0
 8003c94:	4619      	mov	r1, r3
 8003c96:	f002 ff52 	bl	8006b3e <phCryptoSym_LoadKeyDirect>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8003c9e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <phCryptoRng_Sw_Instantiate+0xb0>
 8003ca4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003ca6:	e01a      	b.n	8003cde <phCryptoRng_Sw_Instantiate+0xe6>
        PH_CRYPTOSYM_KEY_TYPE_AES128));
#endif /* PH_CRYPTOSYM_SW_AES */

    /* Update using aSeedMaterial as the personalization string. */
    /* 5. (Key, V) = Update (seed_material, Key, V). */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoRng_Sw_Update(pDataParams, aSeedMaterial));
 8003ca8:	f107 0314 	add.w	r3, r7, #20
 8003cac:	4619      	mov	r1, r3
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f7ff ff1e 	bl	8003af0 <phCryptoRng_Sw_Update>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8003cb8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <phCryptoRng_Sw_Instantiate+0xca>
 8003cbe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003cc0:	e00d      	b.n	8003cde <phCryptoRng_Sw_Instantiate+0xe6>

    /* Set the counter again to 1. */
    /* 6. reseed_counter = 1. */
    pDataParams->dwRequestCounter = 1;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	619a      	str	r2, [r3, #24]

    /* Set the correct state */
    /* 7. Return V, Key, and reseed_counter as the initial_working_state. */
    pDataParams->bState = PHCRYPTORNG_SW_STATE_WORKING;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	771a      	strb	r2, [r3, #28]

    /* Clear seed material for security reasons */
    (void) memset(aSeedMaterial, 0x00, (size_t) sizeof(aSeedMaterial));
 8003cce:	f107 0314 	add.w	r3, r7, #20
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f01c fddc 	bl	8020894 <memset>

    return PH_ERR_SUCCESS;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3738      	adds	r7, #56	@ 0x38
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <phCryptoRng_Sw_Reseed>:

phStatus_t phCryptoRng_Sw_Reseed(phCryptoRng_Sw_DataParams_t * pDataParams, uint8_t * pEntropyInput, uint16_t wEntropyInputLength,
    uint8_t * pAdditionalInput, uint8_t bAdditionalInputLength)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b08e      	sub	sp, #56	@ 0x38
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	60f8      	str	r0, [r7, #12]
 8003cee:	60b9      	str	r1, [r7, #8]
 8003cf0:	603b      	str	r3, [r7, #0]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	80fb      	strh	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aSeedMaterial[PHCRYPTORNG_SW_SEEDLEN];

    /* Check for operational state */
    if(pDataParams->bState != PHCRYPTORNG_SW_STATE_WORKING)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	7f1b      	ldrb	r3, [r3, #28]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d002      	beq.n	8003d04 <phCryptoRng_Sw_Reseed+0x1e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_CRYPTORNG);
 8003cfe:	f24e 4325 	movw	r3, #58405	@ 0xe425
 8003d02:	e03e      	b.n	8003d82 <phCryptoRng_Sw_Reseed+0x9c>
    }

    /* Comment: Ensure that the length of the seed_material is exactly seedlen bits. */
    if(PHCRYPTORNG_SW_SEEDLEN != (wEntropyInputLength + bAdditionalInputLength))
 8003d04:	88fa      	ldrh	r2, [r7, #6]
 8003d06:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8003d0a:	4413      	add	r3, r2
 8003d0c:	2b20      	cmp	r3, #32
 8003d0e:	d002      	beq.n	8003d16 <phCryptoRng_Sw_Reseed+0x30>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTORNG);
 8003d10:	f24e 4321 	movw	r3, #58401	@ 0xe421
 8003d14:	e035      	b.n	8003d82 <phCryptoRng_Sw_Reseed+0x9c>
    }

    /* Prepare seed Material */
    /* 1. seed_material = entropy_input || additional_input. */
    (void) memcpy(aSeedMaterial, pEntropyInput, wEntropyInputLength);
 8003d16:	88fa      	ldrh	r2, [r7, #6]
 8003d18:	f107 0314 	add.w	r3, r7, #20
 8003d1c:	68b9      	ldr	r1, [r7, #8]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f01c fe37 	bl	8020992 <memcpy>
    (void) memcpy(&aSeedMaterial[wEntropyInputLength], pAdditionalInput, bAdditionalInputLength);
 8003d24:	88fb      	ldrh	r3, [r7, #6]
 8003d26:	f107 0214 	add.w	r2, r7, #20
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8003d30:	6839      	ldr	r1, [r7, #0]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f01c fe2d 	bl	8020992 <memcpy>

    /* Encrypt the seed value */
    /* 2. seed_material = Block_Cipher_df (seed_material, seedlen). */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoRng_Sw_BlockCipherDf(
 8003d38:	f107 0314 	add.w	r3, r7, #20
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 f824 	bl	8003d8c <phCryptoRng_Sw_BlockCipherDf>
 8003d44:	4603      	mov	r3, r0
 8003d46:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8003d48:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <phCryptoRng_Sw_Reseed+0x6c>
 8003d4e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003d50:	e017      	b.n	8003d82 <phCryptoRng_Sw_Reseed+0x9c>
        pDataParams,
        aSeedMaterial));

    /* Update using aSeedMaterial as the personalization string. */
    /* 3. (Key, V) = Update (seed_material, Key, V). */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoRng_Sw_Update(pDataParams, aSeedMaterial));
 8003d52:	f107 0314 	add.w	r3, r7, #20
 8003d56:	4619      	mov	r1, r3
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f7ff fec9 	bl	8003af0 <phCryptoRng_Sw_Update>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8003d62:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <phCryptoRng_Sw_Reseed+0x86>
 8003d68:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003d6a:	e00a      	b.n	8003d82 <phCryptoRng_Sw_Reseed+0x9c>

    /* Set the counter again to 1. */
    /* 4. reseed_counter = 1. */
    pDataParams->dwRequestCounter = 1;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	619a      	str	r2, [r3, #24]

    /* 5. Return V, Key, and reseed_counter as the new_working_state. */

    /* Clear seed material for security reasons */
    (void) memset(aSeedMaterial, 0x00, (size_t) sizeof(aSeedMaterial));
 8003d72:	f107 0314 	add.w	r3, r7, #20
 8003d76:	2220      	movs	r2, #32
 8003d78:	2100      	movs	r1, #0
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f01c fd8a 	bl	8020894 <memset>

    return PH_ERR_SUCCESS;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3738      	adds	r7, #56	@ 0x38
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
	...

08003d8c <phCryptoRng_Sw_BlockCipherDf>:
    /* 8. Return SUCCESS and returned_bits; also return Key, V, and reseed_counter as the new_working_state. */
    return PH_ERR_SUCCESS;
}

phStatus_t phCryptoRng_Sw_BlockCipherDf(phCryptoRng_Sw_DataParams_t * pDataParams, uint8_t * pIoString)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b096      	sub	sp, #88	@ 0x58
 8003d90:	af02      	add	r7, sp, #8
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
#ifndef PH_CRYPTOSYM_SW_AES
    #error "No valid cipher available"
#else
    /* Then we load the default key */
    /* 8. K = Leftmost keylen bits of 0x00010203...1D1E1F. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_LoadKeyDirect(
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	4954      	ldr	r1, [pc, #336]	@ (8003ef0 <phCryptoRng_Sw_BlockCipherDf+0x164>)
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f002 fecd 	bl	8006b3e <phCryptoSym_LoadKeyDirect>
 8003da4:	4603      	mov	r3, r0
 8003da6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003daa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d002      	beq.n	8003db8 <phCryptoRng_Sw_BlockCipherDf+0x2c>
 8003db2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003db6:	e097      	b.n	8003ee8 <phCryptoRng_Sw_BlockCipherDf+0x15c>
        phCryptoRng_Sw_BlockCipherDf_DefaultKey,
        PH_CRYPTOSYM_KEY_TYPE_AES128));
#endif /* PH_CRYPTOSYM_SW_AES */

    /* First clear the cipher buffer*/
    (void) memset(aCipher, 0x00, (size_t) sizeof(aCipher));
 8003db8:	f107 030c 	add.w	r3, r7, #12
 8003dbc:	2240      	movs	r2, #64	@ 0x40
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f01c fd67 	bl	8020894 <memset>

    /* Prepare the cipher */
    /* We use the integers in LSB FIRST format - length is always 32 bits*/
    /* S = L || N || input_string || 0x80. */
    /* 2. L = len (input_string)/8. */
    aCipher[PHCRYPTORNG_SW_OUTLEN] = 0x20;
 8003dc6:	2320      	movs	r3, #32
 8003dc8:	773b      	strb	r3, [r7, #28]

    /* 3. N = number_of_bits_to_return/8. */
    aCipher[PHCRYPTORNG_SW_OUTLEN + 4U] = 0x20;
 8003dca:	2320      	movs	r3, #32
 8003dcc:	f887 3020 	strb.w	r3, [r7, #32]

    /* 4. S = L || N || input_string || 0x80. */
    (void) memcpy(&aCipher[PHCRYPTORNG_SW_OUTLEN + 8U], pIoString, PHCRYPTORNG_SW_SEEDLEN);
 8003dd0:	f107 030c 	add.w	r3, r7, #12
 8003dd4:	3318      	adds	r3, #24
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	6839      	ldr	r1, [r7, #0]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f01c fdd9 	bl	8020992 <memcpy>

    /* Add Padding */
    aCipher[PHCRYPTORNG_SW_OUTLEN + 8U + PHCRYPTORNG_SW_SEEDLEN] = 0x80;
 8003de0:	2380      	movs	r3, #128	@ 0x80
 8003de2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    /* NOTE: For simplicity, the loop is unrolled. */
    /* 9. While len (temp) < keylen + outlen, do */

    /* Set IV to zero according to specification of BCC (note: at this moment, first part of aCipher is 0 (16 bytes) */
    /* 1. chaining_value = 0 exp outlen. Comment: Set the first chaining value to outlen zeros. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_LoadIv(pDataParams->pCryptoDataParams, aCipher, 16));
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f107 010c 	add.w	r1, r7, #12
 8003dee:	2210      	movs	r2, #16
 8003df0:	4618      	mov	r0, r3
 8003df2:	f002 fe6e 	bl	8006ad2 <phCryptoSym_LoadIv>
 8003df6:	4603      	mov	r3, r0
 8003df8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003dfc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d002      	beq.n	8003e0a <phCryptoRng_Sw_BlockCipherDf+0x7e>
 8003e04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003e08:	e06e      	b.n	8003ee8 <phCryptoRng_Sw_BlockCipherDf+0x15c>
    /* 4.1 input_block = chaining_value xor block_i.  */
    /* 4.2 chaining_value = Block_Encrypt (Key, input_block).  */
    /* 5. output_block = chaining_value.  */
    /* Set the MAC mode to CBC mac which is equal to BCC*/

    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_CalculateMac(
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6858      	ldr	r0, [r3, #4]
 8003e0e:	f107 020c 	add.w	r2, r7, #12
 8003e12:	f107 030b 	add.w	r3, r7, #11
 8003e16:	9301      	str	r3, [sp, #4]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	2340      	movs	r3, #64	@ 0x40
 8003e1e:	2101      	movs	r1, #1
 8003e20:	f002 fe0a 	bl	8006a38 <phCryptoSym_CalculateMac>
 8003e24:	4603      	mov	r3, r0
 8003e26:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003e2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d002      	beq.n	8003e38 <phCryptoRng_Sw_BlockCipherDf+0xac>
 8003e32:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003e36:	e057      	b.n	8003ee8 <phCryptoRng_Sw_BlockCipherDf+0x15c>
    /* 4. For i = 1 to n do  */
    /* 4.1 input_block = chaining_value xor block_i.  */
    /* 4.2 chaining_value = Block_Encrypt (Key, input_block).  */
    /* 5. output_block = chaining_value.  */
    /* Set the MAC mode to CBC mac which is equal to BCC*/
    aCipher[0] = 0x01;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	733b      	strb	r3, [r7, #12]
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_CalculateMac(pDataParams->pCryptoDataParams,
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6858      	ldr	r0, [r3, #4]
 8003e40:	7afb      	ldrb	r3, [r7, #11]
 8003e42:	461a      	mov	r2, r3
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	4413      	add	r3, r2
 8003e48:	f107 010c 	add.w	r1, r7, #12
 8003e4c:	f107 020b 	add.w	r2, r7, #11
 8003e50:	9201      	str	r2, [sp, #4]
 8003e52:	9300      	str	r3, [sp, #0]
 8003e54:	2340      	movs	r3, #64	@ 0x40
 8003e56:	460a      	mov	r2, r1
 8003e58:	2101      	movs	r1, #1
 8003e5a:	f002 fded 	bl	8006a38 <phCryptoSym_CalculateMac>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003e64:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d002      	beq.n	8003e72 <phCryptoRng_Sw_BlockCipherDf+0xe6>
 8003e6c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003e70:	e03a      	b.n	8003ee8 <phCryptoRng_Sw_BlockCipherDf+0x15c>
    /* 10. K = Leftmost keylen bits of temp. */
#ifndef PH_CRYPTOSYM_SW_AES
    #error "No valid cipher available"
#else
    /* We can load the newly created key */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_LoadKeyDirect(
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	6839      	ldr	r1, [r7, #0]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f002 fe5f 	bl	8006b3e <phCryptoSym_LoadKeyDirect>
 8003e80:	4603      	mov	r3, r0
 8003e82:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003e86:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d002      	beq.n	8003e94 <phCryptoRng_Sw_BlockCipherDf+0x108>
 8003e8e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003e92:	e029      	b.n	8003ee8 <phCryptoRng_Sw_BlockCipherDf+0x15c>

    /* 11. X = Next outlen bits of temp. */
    /* 13.1 X = Block_Encrypt (K, X). */
    /* 13.2 temp = temp || X. */
    /* Encrypt X (which is upper part of pIoString) into lower part of pIoString. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Encrypt(pDataParams->pCryptoDataParams,
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6858      	ldr	r0, [r3, #4]
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	f103 0210 	add.w	r2, r3, #16
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	2310      	movs	r3, #16
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	f002 fd85 	bl	80069b4 <phCryptoSym_Encrypt>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003eb0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d002      	beq.n	8003ebe <phCryptoRng_Sw_BlockCipherDf+0x132>
 8003eb8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003ebc:	e014      	b.n	8003ee8 <phCryptoRng_Sw_BlockCipherDf+0x15c>

    /* 11. X = Next outlen bits of temp. */
    /* 13.1 X = Block_Encrypt (K, X). */
    /* 13.2 temp = temp || X. */
    /* Encrypt X (which is now lower part of pIoString) into upper part of pIoString. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Encrypt(pDataParams->pCryptoDataParams,
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6858      	ldr	r0, [r3, #4]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	3310      	adds	r3, #16
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	2310      	movs	r3, #16
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	2100      	movs	r1, #0
 8003ece:	f002 fd71 	bl	80069b4 <phCryptoSym_Encrypt>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003ed8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d002      	beq.n	8003ee6 <phCryptoRng_Sw_BlockCipherDf+0x15a>
 8003ee0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003ee4:	e000      	b.n	8003ee8 <phCryptoRng_Sw_BlockCipherDf+0x15c>
        PH_CRYPTOSYM_CIPHER_MODE_ECB,
        pIoString,
        PHCRYPTORNG_SW_OUTLEN,
        &pIoString[PHCRYPTORNG_SW_KEYLEN]));

    return PH_ERR_SUCCESS;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3750      	adds	r7, #80	@ 0x50
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	080231ac 	.word	0x080231ac

08003ef4 <phCryptoRng_Sw_IncrementV>:

static void phCryptoRng_Sw_IncrementV(phCryptoRng_Sw_DataParams_t * pDataParams)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
    uint8_t PH_MEMLOC_REM bIndex;

    /* Increment the V value of the pDataParams structure by 1 mod 2^128. Note: LSB is stored in position 0. */
    for(bIndex = 0; bIndex < PHCRYPTORNG_SW_OUTLEN; ++bIndex)
 8003efc:	2300      	movs	r3, #0
 8003efe:	73fb      	strb	r3, [r7, #15]
 8003f00:	e018      	b.n	8003f34 <phCryptoRng_Sw_IncrementV+0x40>
    {
        if(pDataParams->V[bIndex] < 0xFFU)
 8003f02:	7bfb      	ldrb	r3, [r7, #15]
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	4413      	add	r3, r2
 8003f08:	7a1b      	ldrb	r3, [r3, #8]
 8003f0a:	2bff      	cmp	r3, #255	@ 0xff
 8003f0c:	d00a      	beq.n	8003f24 <phCryptoRng_Sw_IncrementV+0x30>
        {
            ++pDataParams->V[bIndex];
 8003f0e:	7bfb      	ldrb	r3, [r7, #15]
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	441a      	add	r2, r3
 8003f14:	7a12      	ldrb	r2, [r2, #8]
 8003f16:	3201      	adds	r2, #1
 8003f18:	b2d1      	uxtb	r1, r2
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	460a      	mov	r2, r1
 8003f20:	721a      	strb	r2, [r3, #8]
            break;
 8003f22:	e00b      	b.n	8003f3c <phCryptoRng_Sw_IncrementV+0x48>
        }
        else
        {
            pDataParams->V[bIndex] = 0x00;
 8003f24:	7bfb      	ldrb	r3, [r7, #15]
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	4413      	add	r3, r2
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	721a      	strb	r2, [r3, #8]
    for(bIndex = 0; bIndex < PHCRYPTORNG_SW_OUTLEN; ++bIndex)
 8003f2e:	7bfb      	ldrb	r3, [r7, #15]
 8003f30:	3301      	adds	r3, #1
 8003f32:	73fb      	strb	r3, [r7, #15]
 8003f34:	7bfb      	ldrb	r3, [r7, #15]
 8003f36:	2b0f      	cmp	r3, #15
 8003f38:	d9e3      	bls.n	8003f02 <phCryptoRng_Sw_IncrementV+0xe>
        }
    }
}
 8003f3a:	bf00      	nop
 8003f3c:	bf00      	nop
 8003f3e:	3714      	adds	r7, #20
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <phCryptoRng_Seed>:
#include "mBedTLS/phCryptoRng_mBedTLS.h"
#endif /*NXPBUILD__PH_CRYPTORNG_MBEDTLS */

#ifdef NXPBUILD__PH_CRYPTORNG
phStatus_t phCryptoRng_Seed(void * pDataParams, uint8_t * pSeed, uint8_t bSeedLength)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	4613      	mov	r3, r2
 8003f54:	71fb      	strb	r3, [r7, #7]
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(pSeed);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(bSeedLength);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(status);

    /* Validate the parameters. */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_CRYPTORNG);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d102      	bne.n	8003f62 <phCryptoRng_Seed+0x1a>
 8003f5c:	f24e 4320 	movw	r3, #58400	@ 0xe420
 8003f60:	e027      	b.n	8003fb2 <phCryptoRng_Seed+0x6a>
    if(0U != bSeedLength) PH_ASSERT_NULL_PARAM(pSeed, PH_COMP_CRYPTORNG);
 8003f62:	79fb      	ldrb	r3, [r7, #7]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d005      	beq.n	8003f74 <phCryptoRng_Seed+0x2c>
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d102      	bne.n	8003f74 <phCryptoRng_Seed+0x2c>
 8003f6e:	f24e 4321 	movw	r3, #58401	@ 0xe421
 8003f72:	e01e      	b.n	8003fb2 <phCryptoRng_Seed+0x6a>
    PH_LOG_HELPER_ADDPARAM_BUFFER(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(pSeed), pSeed, bSeedLength);
    PH_LOG_HELPER_ADDPARAM_UINT8(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(bSeedLength), &bSeedLength);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Component Code Validation */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_CRYPTORNG)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003f7c:	f5b3 4f64 	cmp.w	r3, #58368	@ 0xe400
 8003f80:	d004      	beq.n	8003f8c <phCryptoRng_Seed+0x44>
    {
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTORNG);
 8003f82:	f24e 4320 	movw	r3, #58400	@ 0xe420
 8003f86:	82fb      	strh	r3, [r7, #22]

        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

        return status;
 8003f88:	8afb      	ldrh	r3, [r7, #22]
 8003f8a:	e012      	b.n	8003fb2 <phCryptoRng_Seed+0x6a>
    }

    /* Perform operation on active layer. */
    switch(PH_GET_COMPID(pDataParams))
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	881b      	ldrh	r3, [r3, #0]
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d108      	bne.n	8003fa8 <phCryptoRng_Seed+0x60>
    {
#ifdef NXPBUILD__PH_CRYPTORNG_SW
        case PH_CRYPTORNG_SW_ID:
            status = phCryptoRng_Sw_Seed((phCryptoRng_Sw_DataParams_t *) pDataParams, pSeed, bSeedLength);
 8003f96:	79fb      	ldrb	r3, [r7, #7]
 8003f98:	461a      	mov	r2, r3
 8003f9a:	68b9      	ldr	r1, [r7, #8]
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f7ff fd51 	bl	8003a44 <phCryptoRng_Sw_Seed>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	82fb      	strh	r3, [r7, #22]
            break;
 8003fa6:	e003      	b.n	8003fb0 <phCryptoRng_Seed+0x68>
            status = phCryptoRng_mBedTLS_Seed((phCryptoRng_mBedTLS_DataParams_t *) pDataParams, pSeed, bSeedLength);
            break;
#endif /* NXPBUILD__PH_CRYPTORNG_MBEDTLS */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTORNG);
 8003fa8:	f24e 4320 	movw	r3, #58400	@ 0xe420
 8003fac:	82fb      	strh	r3, [r7, #22]
            break;
 8003fae:	bf00      	nop

    PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

    return status;
 8003fb0:	8afb      	ldrh	r3, [r7, #22]
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3718      	adds	r7, #24
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <phCryptoSym_Sw_Init>:
#endif /* PH_CRYPTOSYM_SW_DES */

#include "phCryptoSym_Sw_Int.h"

phStatus_t phCryptoSym_Sw_Init(phCryptoSym_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pKeyStoreDataParams)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b086      	sub	sp, #24
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	60f8      	str	r0, [r7, #12]
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	607a      	str	r2, [r7, #4]
 8003fc6:	817b      	strh	r3, [r7, #10]
    phStatus_t wStatus = 0;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	82fb      	strh	r3, [r7, #22]
    if(sizeof(phCryptoSym_Sw_DataParams_t) != wSizeOfDataParams)
 8003fcc:	897b      	ldrh	r3, [r7, #10]
 8003fce:	2b40      	cmp	r3, #64	@ 0x40
 8003fd0:	d002      	beq.n	8003fd8 <phCryptoSym_Sw_Init+0x1e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 8003fd2:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8003fd6:	e016      	b.n	8004006 <phCryptoSym_Sw_Init+0x4c>
    }
    PH_ASSERT_NULL (pDataParams);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <phCryptoSym_Sw_Init+0x28>
 8003fde:	2321      	movs	r3, #33	@ 0x21
 8003fe0:	e011      	b.n	8004006 <phCryptoSym_Sw_Init+0x4c>

    /* Init. private data */
    pDataParams->wId = PH_COMP_CRYPTOSYM | PH_CRYPTOSYM_SW_ID;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f24e 1201 	movw	r2, #57601	@ 0xe101
 8003fe8:	801a      	strh	r2, [r3, #0]
    pDataParams->pKeyStoreDataParams = pKeyStoreDataParams;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	605a      	str	r2, [r3, #4]

    /* Invalidate keys */
    PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_InvalidateKey(pDataParams));
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f000 f80c 	bl	800400e <phCryptoSym_Sw_InvalidateKey>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	82fb      	strh	r3, [r7, #22]
 8003ffa:	8afb      	ldrh	r3, [r7, #22]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <phCryptoSym_Sw_Init+0x4a>
 8004000:	8afb      	ldrh	r3, [r7, #22]
 8004002:	e000      	b.n	8004006 <phCryptoSym_Sw_Init+0x4c>

    return PH_ERR_SUCCESS;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3718      	adds	r7, #24
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <phCryptoSym_Sw_InvalidateKey>:

phStatus_t phCryptoSym_Sw_InvalidateKey(phCryptoSym_Sw_DataParams_t * pDataParams)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b082      	sub	sp, #8
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
    /* Reset all the key storage */
    (void) memset(pDataParams->pKey, 0x00, (size_t) sizeof(pDataParams->pKey));
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	3308      	adds	r3, #8
 800401a:	2220      	movs	r2, #32
 800401c:	2100      	movs	r1, #0
 800401e:	4618      	mov	r0, r3
 8004020:	f01c fc38 	bl	8020894 <memset>
    (void) memset(pDataParams->pIV, 0x00, (size_t) sizeof(pDataParams->pIV));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	3328      	adds	r3, #40	@ 0x28
 8004028:	2210      	movs	r2, #16
 800402a:	2100      	movs	r1, #0
 800402c:	4618      	mov	r0, r3
 800402e:	f01c fc31 	bl	8020894 <memset>

    pDataParams->wKeyType = PH_CRYPTOSYM_KEY_TYPE_INVALID;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004038:	871a      	strh	r2, [r3, #56]	@ 0x38
    pDataParams->wKeepIV = PH_CRYPTOSYM_VALUE_KEEP_IV_OFF;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	875a      	strh	r2, [r3, #58]	@ 0x3a
    pDataParams->wAddInfo = 0x00;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	879a      	strh	r2, [r3, #60]	@ 0x3c
    pDataParams->bCMACSubKeysInitialized = PH_OFF;
    (void) memset(pDataParams->pCMACSubKey1, 0x00, (size_t) sizeof(pDataParams->pCMACSubKey1));
    (void) memset(pDataParams->pCMACSubKey2, 0x00, (size_t) sizeof(pDataParams->pCMACSubKey2));
#endif /* PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION */

    return PH_ERR_SUCCESS;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3708      	adds	r7, #8
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <phCryptoSym_Sw_Encrypt>:

phStatus_t phCryptoSym_Sw_Encrypt(phCryptoSym_Sw_DataParams_t * pDataParams, uint16_t wOption, const uint8_t * pPlainBuff, uint16_t wBuffLen,
    uint8_t * pEncBuff)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b088      	sub	sp, #32
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	607a      	str	r2, [r7, #4]
 800405a:	461a      	mov	r2, r3
 800405c:	460b      	mov	r3, r1
 800405e:	817b      	strh	r3, [r7, #10]
 8004060:	4613      	mov	r3, r2
 8004062:	813b      	strh	r3, [r7, #8]
    phStatus_t wStatus = 0;
 8004064:	2300      	movs	r3, #0
 8004066:	82fb      	strh	r3, [r7, #22]
    uint16_t wBlockSize = 0;
 8004068:	2300      	movs	r3, #0
 800406a:	82bb      	strh	r3, [r7, #20]
    uint16_t wIndex_Buff = 0;
 800406c:	2300      	movs	r3, #0
 800406e:	83fb      	strh	r3, [r7, #30]
    uint8_t bIndex_BlockSize = 0;
 8004070:	2300      	movs	r3, #0
 8004072:	777b      	strb	r3, [r7, #29]
    uint8_t * pIv = NULL;
 8004074:	2300      	movs	r3, #0
 8004076:	61bb      	str	r3, [r7, #24]
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
    uint8_t PH_CRYTOSYM_SW_FAST_RAM pHelperBuffer[PH_CRYPTOSYM_SW_MAX_BLOCK_SIZE];
#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */

    /* Get the block size of the currently loaded key */
    PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_GetConfig(pDataParams, PH_CRYPTOSYM_CONFIG_BLOCK_SIZE, &wBlockSize));
 8004078:	f107 0314 	add.w	r3, r7, #20
 800407c:	461a      	mov	r2, r3
 800407e:	2102      	movs	r1, #2
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f000 fb13 	bl	80046ac <phCryptoSym_Sw_GetConfig>
 8004086:	4603      	mov	r3, r0
 8004088:	82fb      	strh	r3, [r7, #22]
 800408a:	8afb      	ldrh	r3, [r7, #22]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <phCryptoSym_Sw_Encrypt+0x44>
 8004090:	8afb      	ldrh	r3, [r7, #22]
 8004092:	e097      	b.n	80041c4 <phCryptoSym_Sw_Encrypt+0x174>

    /* Check that the input buffer length is a multiple of the block size; */
    if (0U != (wBuffLen % wBlockSize))
 8004094:	8aba      	ldrh	r2, [r7, #20]
 8004096:	893b      	ldrh	r3, [r7, #8]
 8004098:	fbb3 f1f2 	udiv	r1, r3, r2
 800409c:	fb01 f202 	mul.w	r2, r1, r2
 80040a0:	1a9b      	subs	r3, r3, r2
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d002      	beq.n	80040ae <phCryptoSym_Sw_Encrypt+0x5e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 80040a8:	f24e 1321 	movw	r3, #57633	@ 0xe121
 80040ac:	e08a      	b.n	80041c4 <phCryptoSym_Sw_Encrypt+0x174>
    }

    /* Set the IV to the iv specified in the private data params */
    pIv = pDataParams->pIV;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	3328      	adds	r3, #40	@ 0x28
 80040b2:	61bb      	str	r3, [r7, #24]

    /*Iterate over all blocks and perform the encryption*/
    wIndex_Buff = 0;
 80040b4:	2300      	movs	r3, #0
 80040b6:	83fb      	strh	r3, [r7, #30]
    while(wIndex_Buff < wBuffLen)
 80040b8:	e070      	b.n	800419c <phCryptoSym_Sw_Encrypt+0x14c>
    {
        /* Is the output array the same as the input array? Else we need to recopy the plaintext upfronjt */
        if(pPlainBuff != pEncBuff)
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040be:	429a      	cmp	r2, r3
 80040c0:	d009      	beq.n	80040d6 <phCryptoSym_Sw_Encrypt+0x86>
        {
            (void) memcpy(&pEncBuff[wIndex_Buff], &pPlainBuff[wIndex_Buff], wBlockSize);
 80040c2:	8bfb      	ldrh	r3, [r7, #30]
 80040c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80040c6:	18d0      	adds	r0, r2, r3
 80040c8:	8bfb      	ldrh	r3, [r7, #30]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	4413      	add	r3, r2
 80040ce:	8aba      	ldrh	r2, [r7, #20]
 80040d0:	4619      	mov	r1, r3
 80040d2:	f01c fc5e 	bl	8020992 <memcpy>
        }

        /* In case of CBC mode, we need to perform the XOR with the previous cipher block */
        switch((uint8_t) (wOption))
 80040d6:	897b      	ldrh	r3, [r7, #10]
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d027      	beq.n	800412e <phCryptoSym_Sw_Encrypt+0xde>
 80040de:	2b00      	cmp	r3, #0
 80040e0:	db22      	blt.n	8004128 <phCryptoSym_Sw_Encrypt+0xd8>
 80040e2:	3b01      	subs	r3, #1
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d81f      	bhi.n	8004128 <phCryptoSym_Sw_Encrypt+0xd8>
        {
            case PH_CRYPTOSYM_CIPHER_MODE_CBC:
            case PH_CRYPTOSYM_CIPHER_MODE_CBC_DF4:
                for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 80040e8:	2300      	movs	r3, #0
 80040ea:	777b      	strb	r3, [r7, #29]
 80040ec:	e016      	b.n	800411c <phCryptoSym_Sw_Encrypt+0xcc>
                {
                    pEncBuff[bIndex_BlockSize + wIndex_Buff] ^= pIv[bIndex_BlockSize];
 80040ee:	7f7a      	ldrb	r2, [r7, #29]
 80040f0:	8bfb      	ldrh	r3, [r7, #30]
 80040f2:	4413      	add	r3, r2
 80040f4:	461a      	mov	r2, r3
 80040f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040f8:	4413      	add	r3, r2
 80040fa:	7819      	ldrb	r1, [r3, #0]
 80040fc:	7f7b      	ldrb	r3, [r7, #29]
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	4413      	add	r3, r2
 8004102:	781a      	ldrb	r2, [r3, #0]
 8004104:	7f78      	ldrb	r0, [r7, #29]
 8004106:	8bfb      	ldrh	r3, [r7, #30]
 8004108:	4403      	add	r3, r0
 800410a:	4618      	mov	r0, r3
 800410c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800410e:	4403      	add	r3, r0
 8004110:	404a      	eors	r2, r1
 8004112:	b2d2      	uxtb	r2, r2
 8004114:	701a      	strb	r2, [r3, #0]
                for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8004116:	7f7b      	ldrb	r3, [r7, #29]
 8004118:	3301      	adds	r3, #1
 800411a:	777b      	strb	r3, [r7, #29]
 800411c:	7f7b      	ldrb	r3, [r7, #29]
 800411e:	b29a      	uxth	r2, r3
 8004120:	8abb      	ldrh	r3, [r7, #20]
 8004122:	429a      	cmp	r2, r3
 8004124:	d3e3      	bcc.n	80040ee <phCryptoSym_Sw_Encrypt+0x9e>
                }
                break;
 8004126:	e003      	b.n	8004130 <phCryptoSym_Sw_Encrypt+0xe0>
                /* Nothing to do here */
                break;

            default:
                /* Add additional Modes of operation in here! */
                return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_CRYPTOSYM);
 8004128:	f24e 1323 	movw	r3, #57635	@ 0xe123
 800412c:	e04a      	b.n	80041c4 <phCryptoSym_Sw_Encrypt+0x174>
                break;
 800412e:	bf00      	nop
            PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_EncryptBlock(pDataParams, pHelperBuffer));
        }

        (void) memcpy(&pEncBuff[wIndex_Buff], pHelperBuffer, wBlockSize);
#else
        if((uint8_t) wOption == PH_CRYPTOSYM_CIPHER_MODE_CBC_DF4)
 8004130:	897b      	ldrh	r3, [r7, #10]
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d10d      	bne.n	8004154 <phCryptoSym_Sw_Encrypt+0x104>
        {
            PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_DecryptBlock(pDataParams, &pEncBuff[wIndex_Buff]));
 8004138:	8bfb      	ldrh	r3, [r7, #30]
 800413a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800413c:	4413      	add	r3, r2
 800413e:	4619      	mov	r1, r3
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	f002 fb91 	bl	8006868 <phCryptoSym_Sw_DecryptBlock>
 8004146:	4603      	mov	r3, r0
 8004148:	82fb      	strh	r3, [r7, #22]
 800414a:	8afb      	ldrh	r3, [r7, #22]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00f      	beq.n	8004170 <phCryptoSym_Sw_Encrypt+0x120>
 8004150:	8afb      	ldrh	r3, [r7, #22]
 8004152:	e037      	b.n	80041c4 <phCryptoSym_Sw_Encrypt+0x174>
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_EncryptBlock(pDataParams, &pEncBuff[wIndex_Buff]));
 8004154:	8bfb      	ldrh	r3, [r7, #30]
 8004156:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004158:	4413      	add	r3, r2
 800415a:	4619      	mov	r1, r3
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f002 fadd 	bl	800671c <phCryptoSym_Sw_EncryptBlock>
 8004162:	4603      	mov	r3, r0
 8004164:	82fb      	strh	r3, [r7, #22]
 8004166:	8afb      	ldrh	r3, [r7, #22]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <phCryptoSym_Sw_Encrypt+0x120>
 800416c:	8afb      	ldrh	r3, [r7, #22]
 800416e:	e029      	b.n	80041c4 <phCryptoSym_Sw_Encrypt+0x174>
        }

#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */

        /* do the loop dependent post processing of the data according to the used mode of operation */
        switch((uint8_t) (wOption))
 8004170:	897b      	ldrh	r3, [r7, #10]
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00c      	beq.n	8004192 <phCryptoSym_Sw_Encrypt+0x142>
 8004178:	2b00      	cmp	r3, #0
 800417a:	db07      	blt.n	800418c <phCryptoSym_Sw_Encrypt+0x13c>
 800417c:	3b01      	subs	r3, #1
 800417e:	2b01      	cmp	r3, #1
 8004180:	d804      	bhi.n	800418c <phCryptoSym_Sw_Encrypt+0x13c>
        {
            case PH_CRYPTOSYM_CIPHER_MODE_CBC:
            case PH_CRYPTOSYM_CIPHER_MODE_CBC_DF4:
                /* we should set the IV now to the old ciphertext... */
                pIv = &pEncBuff[wIndex_Buff];
 8004182:	8bfb      	ldrh	r3, [r7, #30]
 8004184:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004186:	4413      	add	r3, r2
 8004188:	61bb      	str	r3, [r7, #24]
                break;
 800418a:	e003      	b.n	8004194 <phCryptoSym_Sw_Encrypt+0x144>
                /* Nothing to do here */
                break;

            default:
                /* Add additional Modes of operation in here! */
                return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_CRYPTOSYM);
 800418c:	f24e 1323 	movw	r3, #57635	@ 0xe123
 8004190:	e018      	b.n	80041c4 <phCryptoSym_Sw_Encrypt+0x174>
                break;
 8004192:	bf00      	nop
        }

        /* update the loop counter */
        wIndex_Buff = wBlockSize + wIndex_Buff;
 8004194:	8aba      	ldrh	r2, [r7, #20]
 8004196:	8bfb      	ldrh	r3, [r7, #30]
 8004198:	4413      	add	r3, r2
 800419a:	83fb      	strh	r3, [r7, #30]
    while(wIndex_Buff < wBuffLen)
 800419c:	8bfa      	ldrh	r2, [r7, #30]
 800419e:	893b      	ldrh	r3, [r7, #8]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d38a      	bcc.n	80040ba <phCryptoSym_Sw_Encrypt+0x6a>
    } /* end of loop over all data blocks */

    /* do the final update of the IV according to the keep IV setting. */
    if((pDataParams->wKeepIV == PH_CRYPTOSYM_VALUE_KEEP_IV_ON) || (0U != (wOption & PH_EXCHANGE_BUFFERED_BIT)))
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d003      	beq.n	80041b4 <phCryptoSym_Sw_Encrypt+0x164>
 80041ac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	da06      	bge.n	80041c2 <phCryptoSym_Sw_Encrypt+0x172>
    {
        (void) memcpy(pDataParams->pIV, pIv, wBlockSize);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	3328      	adds	r3, #40	@ 0x28
 80041b8:	8aba      	ldrh	r2, [r7, #20]
 80041ba:	69b9      	ldr	r1, [r7, #24]
 80041bc:	4618      	mov	r0, r3
 80041be:	f01c fbe8 	bl	8020992 <memcpy>
    }

    return PH_ERR_SUCCESS;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3720      	adds	r7, #32
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <phCryptoSym_Sw_CalculateMac>:
    return PH_ERR_SUCCESS;
}

phStatus_t phCryptoSym_Sw_CalculateMac(phCryptoSym_Sw_DataParams_t * pDataParams, uint16_t wOption, const uint8_t * pData, uint16_t wDataLen,
    uint8_t * pMac, uint8_t * pMacLen)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b094      	sub	sp, #80	@ 0x50
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	607a      	str	r2, [r7, #4]
 80041d6:	461a      	mov	r2, r3
 80041d8:	460b      	mov	r3, r1
 80041da:	817b      	strh	r3, [r7, #10]
 80041dc:	4613      	mov	r3, r2
 80041de:	813b      	strh	r3, [r7, #8]
    phStatus_t wStatus = 0;
 80041e0:	2300      	movs	r3, #0
 80041e2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    uint16_t wBlockSize = 0;
 80041e6:	2300      	movs	r3, #0
 80041e8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    uint16_t wIndex_Buff = 0;
 80041ec:	2300      	movs	r3, #0
 80041ee:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    uint8_t bIndex_BlockSize = 0;
 80041f2:	2300      	movs	r3, #0
 80041f4:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
    uint8_t bPaddingLen = 0;
 80041f8:	2300      	movs	r3, #0
 80041fa:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    uint8_t bLastBlock[16];
    uint8_t * pIv = NULL;
 80041fe:	2300      	movs	r3, #0
 8004200:	64bb      	str	r3, [r7, #72]	@ 0x48
    uint8_t * pSubKey2 = pDataParams->pCMACSubKey2;
#else
    uint8_t pSubKey1[PH_CRYPTOSYM_SW_MAX_BLOCK_SIZE];
    uint8_t pSubKey2[PH_CRYPTOSYM_SW_MAX_BLOCK_SIZE];

    (void) memset(pSubKey1, 0x00, (size_t) sizeof(pSubKey1));
 8004202:	f107 0320 	add.w	r3, r7, #32
 8004206:	2210      	movs	r2, #16
 8004208:	2100      	movs	r1, #0
 800420a:	4618      	mov	r0, r3
 800420c:	f01c fb42 	bl	8020894 <memset>
    (void) memset(pSubKey2, 0x00, (size_t) sizeof(pSubKey2));
 8004210:	f107 0310 	add.w	r3, r7, #16
 8004214:	2210      	movs	r2, #16
 8004216:	2100      	movs	r1, #0
 8004218:	4618      	mov	r0, r3
 800421a:	f01c fb3b 	bl	8020894 <memset>
#endif /* PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION */

    /* Clear MAC length */
    *pMacLen = 0;
 800421e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004220:	2200      	movs	r2, #0
 8004222:	701a      	strb	r2, [r3, #0]

    /* Clear the last block array */
    (void) memset(bLastBlock, 0, (size_t) sizeof(bLastBlock));
 8004224:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004228:	2210      	movs	r2, #16
 800422a:	2100      	movs	r1, #0
 800422c:	4618      	mov	r0, r3
 800422e:	f01c fb31 	bl	8020894 <memset>

    /* Get the block size of the currently loaded key */
    PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_GetConfig(pDataParams, PH_CRYPTOSYM_CONFIG_BLOCK_SIZE, &wBlockSize));
 8004232:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 8004236:	461a      	mov	r2, r3
 8004238:	2102      	movs	r1, #2
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f000 fa36 	bl	80046ac <phCryptoSym_Sw_GetConfig>
 8004240:	4603      	mov	r3, r0
 8004242:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004246:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800424a:	2b00      	cmp	r3, #0
 800424c:	d002      	beq.n	8004254 <phCryptoSym_Sw_CalculateMac+0x88>
 800424e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004252:	e175      	b.n	8004540 <phCryptoSym_Sw_CalculateMac+0x374>

    /* In case of a first block and in case of KEEP_IV is not set, the IV has to be cleared. */
    if((0U != (wOption & PH_EXCHANGE_LEAVE_BUFFER_BIT)) ||
 8004254:	897b      	ldrh	r3, [r7, #10]
 8004256:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10b      	bne.n	8004276 <phCryptoSym_Sw_CalculateMac+0xaa>
        (pDataParams->wKeepIV == PH_CRYPTOSYM_VALUE_KEEP_IV_ON))
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
    if((0U != (wOption & PH_EXCHANGE_LEAVE_BUFFER_BIT)) ||
 8004262:	2b01      	cmp	r3, #1
 8004264:	d007      	beq.n	8004276 <phCryptoSym_Sw_CalculateMac+0xaa>
    {
        /* better leave the IV */
    }
    else
    {
        (void) memset(pDataParams->pIV, 0x00, wBlockSize);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	3328      	adds	r3, #40	@ 0x28
 800426a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800426e:	2100      	movs	r1, #0
 8004270:	4618      	mov	r0, r3
 8004272:	f01c fb0f 	bl	8020894 <memset>
    }

    /* Now we may start with  MAC calculation */

    /*Let's find out whether we should complete the MAC or if this is just an intermediate MAC calculation */
    if (0U != (wOption & PH_EXCHANGE_BUFFERED_BIT))
 8004276:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800427a:	2b00      	cmp	r3, #0
 800427c:	da0e      	bge.n	800429c <phCryptoSym_Sw_CalculateMac+0xd0>
    {
        /* This is just an intermediate MAC */

        /* In this case we do not allow incomplete blocks. */
        if (0U != (wDataLen % wBlockSize))
 800427e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8004282:	893b      	ldrh	r3, [r7, #8]
 8004284:	fbb3 f1f2 	udiv	r1, r3, r2
 8004288:	fb01 f202 	mul.w	r2, r1, r2
 800428c:	1a9b      	subs	r3, r3, r2
 800428e:	b29b      	uxth	r3, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 80ac 	beq.w	80043ee <phCryptoSym_Sw_CalculateMac+0x222>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 8004296:	f24e 1321 	movw	r3, #57633	@ 0xe121
 800429a:	e151      	b.n	8004540 <phCryptoSym_Sw_CalculateMac+0x374>
        }
    }
    else
    {
        switch((uint8_t) (wOption))
 800429c:	897b      	ldrh	r3, [r7, #10]
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d002      	beq.n	80042aa <phCryptoSym_Sw_CalculateMac+0xde>
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d015      	beq.n	80042d4 <phCryptoSym_Sw_CalculateMac+0x108>
 80042a8:	e011      	b.n	80042ce <phCryptoSym_Sw_CalculateMac+0x102>
                    PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_CMAC_GenerateK1K2(pDataParams, pSubKey1, pSubKey2));

                }
#else
                /* Always perform with sub key generation */
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_CMAC_GenerateK1K2(pDataParams, pSubKey1, pSubKey2));
 80042aa:	f107 0210 	add.w	r2, r7, #16
 80042ae:	f107 0320 	add.w	r3, r7, #32
 80042b2:	4619      	mov	r1, r3
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f002 f987 	bl	80065c8 <phCryptoSym_Sw_CMAC_GenerateK1K2>
 80042ba:	4603      	mov	r3, r0
 80042bc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80042c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d007      	beq.n	80042d8 <phCryptoSym_Sw_CalculateMac+0x10c>
 80042c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80042cc:	e138      	b.n	8004540 <phCryptoSym_Sw_CalculateMac+0x374>
                /* Nothing to do! */
                break;

            default:
                /* Add additional Modes of operation in here! */
                return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_CRYPTOSYM);
 80042ce:	f24e 1323 	movw	r3, #57635	@ 0xe123
 80042d2:	e135      	b.n	8004540 <phCryptoSym_Sw_CalculateMac+0x374>
                break;
 80042d4:	bf00      	nop
 80042d6:	e000      	b.n	80042da <phCryptoSym_Sw_CalculateMac+0x10e>
                break;
 80042d8:	bf00      	nop
        }

        /* Get number of bytes in last block */
        bPaddingLen = (uint8_t) (wDataLen % wBlockSize);
 80042da:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80042de:	893b      	ldrh	r3, [r7, #8]
 80042e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80042e4:	fb01 f202 	mul.w	r2, r1, r2
 80042e8:	1a9b      	subs	r3, r3, r2
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

        /* do we have incomplete blocks? */
        if((0U != bPaddingLen) || (wDataLen == 0x0000U))
 80042f0:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d102      	bne.n	80042fe <phCryptoSym_Sw_CalculateMac+0x132>
 80042f8:	893b      	ldrh	r3, [r7, #8]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d13f      	bne.n	800437e <phCryptoSym_Sw_CalculateMac+0x1b2>
        {
            /* Update wDataLen, last block is in other array */
            wDataLen = (uint16_t) (wDataLen - bPaddingLen);
 80042fe:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8004302:	b29b      	uxth	r3, r3
 8004304:	893a      	ldrh	r2, [r7, #8]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	813b      	strh	r3, [r7, #8]

            (void) memcpy(bLastBlock, &pData[wDataLen], bPaddingLen);
 800430a:	893b      	ldrh	r3, [r7, #8]
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	18d1      	adds	r1, r2, r3
 8004310:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004314:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004318:	4618      	mov	r0, r3
 800431a:	f01c fb3a 	bl	8020992 <memcpy>

            /* Apply padding byte*/
            bLastBlock[bPaddingLen] = 0x80;
 800431e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8004322:	3350      	adds	r3, #80	@ 0x50
 8004324:	443b      	add	r3, r7
 8004326:	2280      	movs	r2, #128	@ 0x80
 8004328:	f803 2c20 	strb.w	r2, [r3, #-32]
            /* pad with zeros not necessary, memset done upfront*/

            if((uint8_t) wOption == PH_CRYPTOSYM_MAC_MODE_CMAC)
 800432c:	897b      	ldrh	r3, [r7, #10]
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b00      	cmp	r3, #0
 8004332:	d15c      	bne.n	80043ee <phCryptoSym_Sw_CalculateMac+0x222>
            {
                /* XOR with K2, as we have an icomplete block */
                for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8004334:	2300      	movs	r3, #0
 8004336:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 800433a:	e018      	b.n	800436e <phCryptoSym_Sw_CalculateMac+0x1a2>
                {
                    bLastBlock[bIndex_BlockSize] ^= pSubKey2[bIndex_BlockSize];
 800433c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004340:	3350      	adds	r3, #80	@ 0x50
 8004342:	443b      	add	r3, r7
 8004344:	f813 1c20 	ldrb.w	r1, [r3, #-32]
 8004348:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800434c:	3350      	adds	r3, #80	@ 0x50
 800434e:	443b      	add	r3, r7
 8004350:	f813 2c40 	ldrb.w	r2, [r3, #-64]
 8004354:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004358:	404a      	eors	r2, r1
 800435a:	b2d2      	uxtb	r2, r2
 800435c:	3350      	adds	r3, #80	@ 0x50
 800435e:	443b      	add	r3, r7
 8004360:	f803 2c20 	strb.w	r2, [r3, #-32]
                for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8004364:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004368:	3301      	adds	r3, #1
 800436a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 800436e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004372:	b29a      	uxth	r2, r3
 8004374:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004378:	429a      	cmp	r2, r3
 800437a:	d3df      	bcc.n	800433c <phCryptoSym_Sw_CalculateMac+0x170>
            if((uint8_t) wOption == PH_CRYPTOSYM_MAC_MODE_CMAC)
 800437c:	e037      	b.n	80043ee <phCryptoSym_Sw_CalculateMac+0x222>
            }
        }
        else
        {
            /* Update wDataLen, last block is in other array */
            wDataLen = wDataLen - wBlockSize;
 800437e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004382:	893a      	ldrh	r2, [r7, #8]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	813b      	strh	r3, [r7, #8]

            /* Copy whole block into bLastBlock */
            (void) memcpy(bLastBlock, &pData[wDataLen], wBlockSize);
 8004388:	893b      	ldrh	r3, [r7, #8]
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	18d1      	adds	r1, r2, r3
 800438e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004392:	461a      	mov	r2, r3
 8004394:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004398:	4618      	mov	r0, r3
 800439a:	f01c fafa 	bl	8020992 <memcpy>

            if((uint8_t) wOption == PH_CRYPTOSYM_MAC_MODE_CMAC)
 800439e:	897b      	ldrh	r3, [r7, #10]
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d123      	bne.n	80043ee <phCryptoSym_Sw_CalculateMac+0x222>
            {
                /* XOR with K1, as we have a complete block */
                for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 80043a6:	2300      	movs	r3, #0
 80043a8:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 80043ac:	e018      	b.n	80043e0 <phCryptoSym_Sw_CalculateMac+0x214>
                {
                    bLastBlock[bIndex_BlockSize] ^= pSubKey1[bIndex_BlockSize];
 80043ae:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80043b2:	3350      	adds	r3, #80	@ 0x50
 80043b4:	443b      	add	r3, r7
 80043b6:	f813 1c20 	ldrb.w	r1, [r3, #-32]
 80043ba:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80043be:	3350      	adds	r3, #80	@ 0x50
 80043c0:	443b      	add	r3, r7
 80043c2:	f813 2c30 	ldrb.w	r2, [r3, #-48]
 80043c6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80043ca:	404a      	eors	r2, r1
 80043cc:	b2d2      	uxtb	r2, r2
 80043ce:	3350      	adds	r3, #80	@ 0x50
 80043d0:	443b      	add	r3, r7
 80043d2:	f803 2c20 	strb.w	r2, [r3, #-32]
                for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 80043d6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80043da:	3301      	adds	r3, #1
 80043dc:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 80043e0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d3df      	bcc.n	80043ae <phCryptoSym_Sw_CalculateMac+0x1e2>
            }
        }
    }

    /* Set the IV to the iv specified in the private data params */
    pIv = pDataParams->pIV;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	3328      	adds	r3, #40	@ 0x28
 80043f2:	64bb      	str	r3, [r7, #72]	@ 0x48

    /*Iterate over all blocks and perform the CBC encryption*/
    wIndex_Buff = 0;
 80043f4:	2300      	movs	r3, #0
 80043f6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    while(wIndex_Buff < wDataLen)
 80043fa:	e03b      	b.n	8004474 <phCryptoSym_Sw_CalculateMac+0x2a8>
    {
        /* perform the XOR with the previous cipher block */
        for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 80043fc:	2300      	movs	r3, #0
 80043fe:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8004402:	e019      	b.n	8004438 <phCryptoSym_Sw_CalculateMac+0x26c>
        {
            /* Note: after one round pIv == pMac */
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
            pHelperBuffer[bIndex_BlockSize] = pIv[bIndex_BlockSize] ^ pData[wIndex_Buff + bIndex_BlockSize];
#else
            pMac[bIndex_BlockSize] = pIv[bIndex_BlockSize] ^ pData[wIndex_Buff + bIndex_BlockSize];
 8004404:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004408:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800440a:	4413      	add	r3, r2
 800440c:	7819      	ldrb	r1, [r3, #0]
 800440e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8004412:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004416:	4413      	add	r3, r2
 8004418:	461a      	mov	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4413      	add	r3, r2
 800441e:	781a      	ldrb	r2, [r3, #0]
 8004420:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004424:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004426:	4403      	add	r3, r0
 8004428:	404a      	eors	r2, r1
 800442a:	b2d2      	uxtb	r2, r2
 800442c:	701a      	strb	r2, [r3, #0]
        for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 800442e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004432:	3301      	adds	r3, #1
 8004434:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8004438:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800443c:	b29a      	uxth	r2, r3
 800443e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004442:	429a      	cmp	r2, r3
 8004444:	d3de      	bcc.n	8004404 <phCryptoSym_Sw_CalculateMac+0x238>

#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
        PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_EncryptBlock(pDataParams, pHelperBuffer));
        (void) memcpy(pMac, pHelperBuffer, wBlockSize);
#else
        PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_EncryptBlock(pDataParams, pMac));
 8004446:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f002 f967 	bl	800671c <phCryptoSym_Sw_EncryptBlock>
 800444e:	4603      	mov	r3, r0
 8004450:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004454:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004458:	2b00      	cmp	r3, #0
 800445a:	d002      	beq.n	8004462 <phCryptoSym_Sw_CalculateMac+0x296>
 800445c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004460:	e06e      	b.n	8004540 <phCryptoSym_Sw_CalculateMac+0x374>
#endif

        /* set pIv to last cipher block*/
        pIv = pMac;
 8004462:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004464:	64bb      	str	r3, [r7, #72]	@ 0x48

        /* update the loop counter */
        wIndex_Buff = wBlockSize + wIndex_Buff;
 8004466:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800446a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800446e:	4413      	add	r3, r2
 8004470:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    while(wIndex_Buff < wDataLen)
 8004474:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8004478:	893b      	ldrh	r3, [r7, #8]
 800447a:	429a      	cmp	r2, r3
 800447c:	d3be      	bcc.n	80043fc <phCryptoSym_Sw_CalculateMac+0x230>
    } /* end of loop over all data blocks */

    /* If we have a complete MAC, lets encrypt the last block */
    if(0U == (wOption & PH_EXCHANGE_BUFFERED_BIT))
 800447e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004482:	2b00      	cmp	r3, #0
 8004484:	db2f      	blt.n	80044e6 <phCryptoSym_Sw_CalculateMac+0x31a>
    {
        /* Encrypt last block. */
        /* perform the XOR with the previous cipher block */
        for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8004486:	2300      	movs	r3, #0
 8004488:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 800448c:	e016      	b.n	80044bc <phCryptoSym_Sw_CalculateMac+0x2f0>
        {
            /* Note: after one round pIv == pMac */
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
            pHelperBuffer[bIndex_BlockSize] = pIv[bIndex_BlockSize] ^ bLastBlock[bIndex_BlockSize];
#else
            pMac[bIndex_BlockSize] = pIv[bIndex_BlockSize] ^ bLastBlock[bIndex_BlockSize];
 800448e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004492:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004494:	4413      	add	r3, r2
 8004496:	7819      	ldrb	r1, [r3, #0]
 8004498:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800449c:	3350      	adds	r3, #80	@ 0x50
 800449e:	443b      	add	r3, r7
 80044a0:	f813 2c20 	ldrb.w	r2, [r3, #-32]
 80044a4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80044a8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80044aa:	4403      	add	r3, r0
 80044ac:	404a      	eors	r2, r1
 80044ae:	b2d2      	uxtb	r2, r2
 80044b0:	701a      	strb	r2, [r3, #0]
        for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 80044b2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80044b6:	3301      	adds	r3, #1
 80044b8:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 80044bc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d3e1      	bcc.n	800448e <phCryptoSym_Sw_CalculateMac+0x2c2>
        }
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
        PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_EncryptBlock(pDataParams, pHelperBuffer));
        (void) memcpy(pMac, pHelperBuffer, wBlockSize);
#else
        PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_EncryptBlock(pDataParams, pMac));
 80044ca:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f002 f925 	bl	800671c <phCryptoSym_Sw_EncryptBlock>
 80044d2:	4603      	mov	r3, r0
 80044d4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80044d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d002      	beq.n	80044e6 <phCryptoSym_Sw_CalculateMac+0x31a>
 80044e0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80044e4:	e02c      	b.n	8004540 <phCryptoSym_Sw_CalculateMac+0x374>
#endif

    }

    /* do the final update of the IV according to the settings */
    if((pDataParams->wKeepIV == PH_CRYPTOSYM_VALUE_KEEP_IV_ON) || (0U != (wOption & PH_EXCHANGE_BUFFERED_BIT)))
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d003      	beq.n	80044f6 <phCryptoSym_Sw_CalculateMac+0x32a>
 80044ee:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	da08      	bge.n	8004508 <phCryptoSym_Sw_CalculateMac+0x33c>
    {
        (void) memcpy(pDataParams->pIV, pMac, wBlockSize);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	3328      	adds	r3, #40	@ 0x28
 80044fa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80044fe:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004500:	4618      	mov	r0, r3
 8004502:	f01c fa46 	bl	8020992 <memcpy>
 8004506:	e007      	b.n	8004518 <phCryptoSym_Sw_CalculateMac+0x34c>
    }
    else
    {
        /* Clear the IV for security reasons */
        (void) memset(pDataParams->pIV, 0, wBlockSize);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	3328      	adds	r3, #40	@ 0x28
 800450c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8004510:	2100      	movs	r1, #0
 8004512:	4618      	mov	r0, r3
 8004514:	f01c f9be 	bl	8020894 <memset>
    }

#ifdef PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION
    /* Clear key arrays */
    (void) memset(pSubKey1, 0x00, (size_t) sizeof(pSubKey1));
 8004518:	f107 0320 	add.w	r3, r7, #32
 800451c:	2210      	movs	r2, #16
 800451e:	2100      	movs	r1, #0
 8004520:	4618      	mov	r0, r3
 8004522:	f01c f9b7 	bl	8020894 <memset>
    (void) memset(pSubKey2, 0x00, (size_t) sizeof(pSubKey2));
 8004526:	f107 0310 	add.w	r3, r7, #16
 800452a:	2210      	movs	r2, #16
 800452c:	2100      	movs	r1, #0
 800452e:	4618      	mov	r0, r3
 8004530:	f01c f9b0 	bl	8020894 <memset>
#endif

    *pMacLen = (uint8_t) wBlockSize;
 8004534:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004538:	b2da      	uxtb	r2, r3
 800453a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800453c:	701a      	strb	r2, [r3, #0]
    return PH_ERR_SUCCESS;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3750      	adds	r7, #80	@ 0x50
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <phCryptoSym_Sw_LoadIv>:

phStatus_t phCryptoSym_Sw_LoadIv(phCryptoSym_Sw_DataParams_t * pDataParams, const uint8_t * pIV, uint8_t bIVLen)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	4613      	mov	r3, r2
 8004554:	71fb      	strb	r3, [r7, #7]
    phStatus_t  PH_MEMLOC_REM wStatus = 0;
 8004556:	2300      	movs	r3, #0
 8004558:	82fb      	strh	r3, [r7, #22]
    uint16_t    PH_MEMLOC_REM wBlockSize = 0;
 800455a:	2300      	movs	r3, #0
 800455c:	82bb      	strh	r3, [r7, #20]

    /* Get the block size of the currently loaded key */
    PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_GetConfig(pDataParams, PH_CRYPTOSYM_CONFIG_BLOCK_SIZE, &wBlockSize));
 800455e:	f107 0314 	add.w	r3, r7, #20
 8004562:	461a      	mov	r2, r3
 8004564:	2102      	movs	r1, #2
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f000 f8a0 	bl	80046ac <phCryptoSym_Sw_GetConfig>
 800456c:	4603      	mov	r3, r0
 800456e:	82fb      	strh	r3, [r7, #22]
 8004570:	8afb      	ldrh	r3, [r7, #22]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <phCryptoSym_Sw_LoadIv+0x32>
 8004576:	8afb      	ldrh	r3, [r7, #22]
 8004578:	e00f      	b.n	800459a <phCryptoSym_Sw_LoadIv+0x52>

    /* Check block-size */
    if(bIVLen != wBlockSize)
 800457a:	79fb      	ldrb	r3, [r7, #7]
 800457c:	b29a      	uxth	r2, r3
 800457e:	8abb      	ldrh	r3, [r7, #20]
 8004580:	429a      	cmp	r2, r3
 8004582:	d002      	beq.n	800458a <phCryptoSym_Sw_LoadIv+0x42>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 8004584:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8004588:	e007      	b.n	800459a <phCryptoSym_Sw_LoadIv+0x52>
    }

    /* Update IV */
    (void) memcpy(pDataParams->pIV, pIV, wBlockSize);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	3328      	adds	r3, #40	@ 0x28
 800458e:	8aba      	ldrh	r2, [r7, #20]
 8004590:	68b9      	ldr	r1, [r7, #8]
 8004592:	4618      	mov	r0, r3
 8004594:	f01c f9fd 	bl	8020992 <memcpy>

    return PH_ERR_SUCCESS;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3718      	adds	r7, #24
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
	...

080045a4 <phCryptoSym_Sw_LoadKeyDirect>:
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_CRYPTOSYM);
#endif /* NXPBUILD__PH_KEYSTORE */
}

phStatus_t phCryptoSym_Sw_LoadKeyDirect(phCryptoSym_Sw_DataParams_t * pDataParams, const uint8_t * pKey, uint16_t wKeyType)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	4613      	mov	r3, r2
 80045b0:	80fb      	strh	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM wStatus = 0;
 80045b2:	2300      	movs	r3, #0
 80045b4:	82fb      	strh	r3, [r7, #22]

    /* Clear existing key */
    (void) memset(pDataParams->pKey, 0x00, (size_t) sizeof(pDataParams->pKey));
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	3308      	adds	r3, #8
 80045ba:	2220      	movs	r2, #32
 80045bc:	2100      	movs	r1, #0
 80045be:	4618      	mov	r0, r3
 80045c0:	f01c f968 	bl	8020894 <memset>
#ifndef PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION
        /* Disable the CMAC calculated Flag */
        pDataParams->bCMACSubKeysInitialized = PH_OFF;
#endif /* PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION */

        switch(wKeyType)
 80045c4:	88fb      	ldrh	r3, [r7, #6]
 80045c6:	2b05      	cmp	r3, #5
 80045c8:	d859      	bhi.n	800467e <phCryptoSym_Sw_LoadKeyDirect+0xda>
 80045ca:	a201      	add	r2, pc, #4	@ (adr r2, 80045d0 <phCryptoSym_Sw_LoadKeyDirect+0x2c>)
 80045cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d0:	080045e9 	.word	0x080045e9
 80045d4:	08004603 	.word	0x08004603
 80045d8:	0800461d 	.word	0x0800461d
 80045dc:	08004637 	.word	0x08004637
 80045e0:	0800464f 	.word	0x0800464f
 80045e4:	08004667 	.word	0x08004667
        {
#ifdef PH_CRYPTOSYM_SW_AES
            case PH_CRYPTOSYM_KEY_TYPE_AES128:
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_Aes_KeyExpansion(
 80045e8:	232c      	movs	r3, #44	@ 0x2c
 80045ea:	2204      	movs	r2, #4
 80045ec:	68b9      	ldr	r1, [r7, #8]
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f000 f8d8 	bl	80047a4 <phCryptoSym_Sw_Aes_KeyExpansion>
 80045f4:	4603      	mov	r3, r0
 80045f6:	82fb      	strh	r3, [r7, #22]
 80045f8:	8afb      	ldrh	r3, [r7, #22]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d042      	beq.n	8004684 <phCryptoSym_Sw_LoadKeyDirect+0xe0>
 80045fe:	8afb      	ldrh	r3, [r7, #22]
 8004600:	e04f      	b.n	80046a2 <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                    PH_CRYPTOSYM_AES128_KEY_SIZE >> 2U,
                    (PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_128 + 1U) << 2U));
                break;

            case PH_CRYPTOSYM_KEY_TYPE_AES192:
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_Aes_KeyExpansion(
 8004602:	2334      	movs	r3, #52	@ 0x34
 8004604:	2206      	movs	r2, #6
 8004606:	68b9      	ldr	r1, [r7, #8]
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f000 f8cb 	bl	80047a4 <phCryptoSym_Sw_Aes_KeyExpansion>
 800460e:	4603      	mov	r3, r0
 8004610:	82fb      	strh	r3, [r7, #22]
 8004612:	8afb      	ldrh	r3, [r7, #22]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d037      	beq.n	8004688 <phCryptoSym_Sw_LoadKeyDirect+0xe4>
 8004618:	8afb      	ldrh	r3, [r7, #22]
 800461a:	e042      	b.n	80046a2 <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                    PH_CRYPTOSYM_AES192_KEY_SIZE >> 2U,
                    (PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_192 + 1U) << 2U));
                break;

            case PH_CRYPTOSYM_KEY_TYPE_AES256:
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_Aes_KeyExpansion(
 800461c:	233c      	movs	r3, #60	@ 0x3c
 800461e:	2208      	movs	r2, #8
 8004620:	68b9      	ldr	r1, [r7, #8]
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 f8be 	bl	80047a4 <phCryptoSym_Sw_Aes_KeyExpansion>
 8004628:	4603      	mov	r3, r0
 800462a:	82fb      	strh	r3, [r7, #22]
 800462c:	8afb      	ldrh	r3, [r7, #22]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d02c      	beq.n	800468c <phCryptoSym_Sw_LoadKeyDirect+0xe8>
 8004632:	8afb      	ldrh	r3, [r7, #22]
 8004634:	e035      	b.n	80046a2 <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                break;
#endif /* PH_CRYPTOSYM_SW_AES */

#ifdef PH_CRYPTOSYM_SW_DES
            case PH_CRYPTOSYM_KEY_TYPE_DES:
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_Des_KeyInit(pDataParams, pKey, 1));
 8004636:	2201      	movs	r2, #1
 8004638:	68b9      	ldr	r1, [r7, #8]
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f000 fe62 	bl	8005304 <phCryptoSym_Sw_Des_KeyInit>
 8004640:	4603      	mov	r3, r0
 8004642:	82fb      	strh	r3, [r7, #22]
 8004644:	8afb      	ldrh	r3, [r7, #22]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d022      	beq.n	8004690 <phCryptoSym_Sw_LoadKeyDirect+0xec>
 800464a:	8afb      	ldrh	r3, [r7, #22]
 800464c:	e029      	b.n	80046a2 <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                break;

            case PH_CRYPTOSYM_KEY_TYPE_2K3DES:
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_Des_KeyInit(pDataParams, pKey, 2));
 800464e:	2202      	movs	r2, #2
 8004650:	68b9      	ldr	r1, [r7, #8]
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f000 fe56 	bl	8005304 <phCryptoSym_Sw_Des_KeyInit>
 8004658:	4603      	mov	r3, r0
 800465a:	82fb      	strh	r3, [r7, #22]
 800465c:	8afb      	ldrh	r3, [r7, #22]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d018      	beq.n	8004694 <phCryptoSym_Sw_LoadKeyDirect+0xf0>
 8004662:	8afb      	ldrh	r3, [r7, #22]
 8004664:	e01d      	b.n	80046a2 <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                break;

            case PH_CRYPTOSYM_KEY_TYPE_3K3DES:
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_Des_KeyInit(pDataParams, pKey, 3));
 8004666:	2203      	movs	r2, #3
 8004668:	68b9      	ldr	r1, [r7, #8]
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f000 fe4a 	bl	8005304 <phCryptoSym_Sw_Des_KeyInit>
 8004670:	4603      	mov	r3, r0
 8004672:	82fb      	strh	r3, [r7, #22]
 8004674:	8afb      	ldrh	r3, [r7, #22]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00e      	beq.n	8004698 <phCryptoSym_Sw_LoadKeyDirect+0xf4>
 800467a:	8afb      	ldrh	r3, [r7, #22]
 800467c:	e011      	b.n	80046a2 <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                break;
#endif /* PH_CRYPTOSYM_SW_DES */

        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_CRYPTOSYM);
 800467e:	f24e 1323 	movw	r3, #57635	@ 0xe123
 8004682:	e00e      	b.n	80046a2 <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                break;
 8004684:	bf00      	nop
 8004686:	e008      	b.n	800469a <phCryptoSym_Sw_LoadKeyDirect+0xf6>
                break;
 8004688:	bf00      	nop
 800468a:	e006      	b.n	800469a <phCryptoSym_Sw_LoadKeyDirect+0xf6>
                break;
 800468c:	bf00      	nop
 800468e:	e004      	b.n	800469a <phCryptoSym_Sw_LoadKeyDirect+0xf6>
                break;
 8004690:	bf00      	nop
 8004692:	e002      	b.n	800469a <phCryptoSym_Sw_LoadKeyDirect+0xf6>
                break;
 8004694:	bf00      	nop
 8004696:	e000      	b.n	800469a <phCryptoSym_Sw_LoadKeyDirect+0xf6>
                break;
 8004698:	bf00      	nop
        }
    }
    /* Update global KeyType */
    pDataParams->wKeyType = wKeyType;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	88fa      	ldrh	r2, [r7, #6]
 800469e:	871a      	strh	r2, [r3, #56]	@ 0x38

    return PH_ERR_SUCCESS;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3718      	adds	r7, #24
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop

080046ac <phCryptoSym_Sw_GetConfig>:

    return PH_ERR_SUCCESS;
}

phStatus_t phCryptoSym_Sw_GetConfig(phCryptoSym_Sw_DataParams_t * pDataParams, uint16_t wConfig, uint16_t * pValue)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	460b      	mov	r3, r1
 80046b6:	607a      	str	r2, [r7, #4]
 80046b8:	817b      	strh	r3, [r7, #10]
    switch(wConfig)
 80046ba:	897b      	ldrh	r3, [r7, #10]
 80046bc:	2b06      	cmp	r3, #6
 80046be:	d867      	bhi.n	8004790 <phCryptoSym_Sw_GetConfig+0xe4>
 80046c0:	a201      	add	r2, pc, #4	@ (adr r2, 80046c8 <phCryptoSym_Sw_GetConfig+0x1c>)
 80046c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c6:	bf00      	nop
 80046c8:	08004773 	.word	0x08004773
 80046cc:	080046e5 	.word	0x080046e5
 80046d0:	08004745 	.word	0x08004745
 80046d4:	0800477d 	.word	0x0800477d
 80046d8:	08004791 	.word	0x08004791
 80046dc:	08004791 	.word	0x08004791
 80046e0:	08004787 	.word	0x08004787
    {
        case PH_CRYPTOSYM_CONFIG_KEY_SIZE:
            switch(pDataParams->wKeyType)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80046e8:	2b05      	cmp	r3, #5
 80046ea:	d827      	bhi.n	800473c <phCryptoSym_Sw_GetConfig+0x90>
 80046ec:	a201      	add	r2, pc, #4	@ (adr r2, 80046f4 <phCryptoSym_Sw_GetConfig+0x48>)
 80046ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f2:	bf00      	nop
 80046f4:	0800470d 	.word	0x0800470d
 80046f8:	08004715 	.word	0x08004715
 80046fc:	0800471d 	.word	0x0800471d
 8004700:	08004725 	.word	0x08004725
 8004704:	0800472d 	.word	0x0800472d
 8004708:	08004735 	.word	0x08004735
            {
#ifdef PH_CRYPTOSYM_SW_AES
                case PH_CRYPTOSYM_KEY_TYPE_AES128:
                    *pValue = PH_CRYPTOSYM_AES128_KEY_SIZE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2210      	movs	r2, #16
 8004710:	801a      	strh	r2, [r3, #0]
                    break;
 8004712:	e016      	b.n	8004742 <phCryptoSym_Sw_GetConfig+0x96>

                case PH_CRYPTOSYM_KEY_TYPE_AES192:
                    *pValue = PH_CRYPTOSYM_AES192_KEY_SIZE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2218      	movs	r2, #24
 8004718:	801a      	strh	r2, [r3, #0]
                    break;
 800471a:	e012      	b.n	8004742 <phCryptoSym_Sw_GetConfig+0x96>

                case PH_CRYPTOSYM_KEY_TYPE_AES256:
                    *pValue = PH_CRYPTOSYM_AES256_KEY_SIZE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2220      	movs	r2, #32
 8004720:	801a      	strh	r2, [r3, #0]
                    break;
 8004722:	e00e      	b.n	8004742 <phCryptoSym_Sw_GetConfig+0x96>
#endif /* PH_CRYPTOSYM_SW_AES */

#ifdef PH_CRYPTOSYM_SW_DES
                case PH_CRYPTOSYM_KEY_TYPE_DES:
                    *pValue = PH_CRYPTOSYM_DES_KEY_SIZE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2208      	movs	r2, #8
 8004728:	801a      	strh	r2, [r3, #0]
                    break;
 800472a:	e00a      	b.n	8004742 <phCryptoSym_Sw_GetConfig+0x96>

                case PH_CRYPTOSYM_KEY_TYPE_2K3DES:
                    *pValue = PH_CRYPTOSYM_2K3DES_KEY_SIZE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2210      	movs	r2, #16
 8004730:	801a      	strh	r2, [r3, #0]
                    break;
 8004732:	e006      	b.n	8004742 <phCryptoSym_Sw_GetConfig+0x96>

                case PH_CRYPTOSYM_KEY_TYPE_3K3DES:
                    *pValue = PH_CRYPTOSYM_3K3DES_KEY_SIZE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2218      	movs	r2, #24
 8004738:	801a      	strh	r2, [r3, #0]
                    break;
 800473a:	e002      	b.n	8004742 <phCryptoSym_Sw_GetConfig+0x96>
#endif /* PH_CRYPTOSYM_SW_DES */

                default:
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 800473c:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8004740:	e02a      	b.n	8004798 <phCryptoSym_Sw_GetConfig+0xec>
            }
            break;
 8004742:	e028      	b.n	8004796 <phCryptoSym_Sw_GetConfig+0xea>

        case PH_CRYPTOSYM_CONFIG_BLOCK_SIZE:
            switch(pDataParams->wKeyType)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8004748:	2b02      	cmp	r3, #2
 800474a:	dc02      	bgt.n	8004752 <phCryptoSym_Sw_GetConfig+0xa6>
 800474c:	2b00      	cmp	r3, #0
 800474e:	da04      	bge.n	800475a <phCryptoSym_Sw_GetConfig+0xae>
 8004750:	e00b      	b.n	800476a <phCryptoSym_Sw_GetConfig+0xbe>
 8004752:	3b03      	subs	r3, #3
 8004754:	2b02      	cmp	r3, #2
 8004756:	d808      	bhi.n	800476a <phCryptoSym_Sw_GetConfig+0xbe>
 8004758:	e003      	b.n	8004762 <phCryptoSym_Sw_GetConfig+0xb6>
            {
#ifdef PH_CRYPTOSYM_SW_AES
                case PH_CRYPTOSYM_KEY_TYPE_AES128:
                case PH_CRYPTOSYM_KEY_TYPE_AES192:
                case PH_CRYPTOSYM_KEY_TYPE_AES256:
                    *pValue = PH_CRYPTOSYM_AES_BLOCK_SIZE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2210      	movs	r2, #16
 800475e:	801a      	strh	r2, [r3, #0]
                    break;
 8004760:	e006      	b.n	8004770 <phCryptoSym_Sw_GetConfig+0xc4>

#ifdef PH_CRYPTOSYM_SW_DES
                case PH_CRYPTOSYM_KEY_TYPE_DES:
                case PH_CRYPTOSYM_KEY_TYPE_2K3DES:
                case PH_CRYPTOSYM_KEY_TYPE_3K3DES:
                    *pValue = PH_CRYPTOSYM_DES_BLOCK_SIZE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2208      	movs	r2, #8
 8004766:	801a      	strh	r2, [r3, #0]
                    break;
 8004768:	e002      	b.n	8004770 <phCryptoSym_Sw_GetConfig+0xc4>
#endif /* PH_CRYPTOSYM_SW_DES */

                default:
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 800476a:	f24e 1321 	movw	r3, #57633	@ 0xe121
 800476e:	e013      	b.n	8004798 <phCryptoSym_Sw_GetConfig+0xec>
            }
            break;
 8004770:	e011      	b.n	8004796 <phCryptoSym_Sw_GetConfig+0xea>

        case PH_CRYPTOSYM_CONFIG_KEY_TYPE:
            *pValue = pDataParams->wKeyType;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	801a      	strh	r2, [r3, #0]
            break;
 800477a:	e00c      	b.n	8004796 <phCryptoSym_Sw_GetConfig+0xea>

        case PH_CRYPTOSYM_CONFIG_KEEP_IV:
            *pValue = pDataParams->wKeepIV;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	801a      	strh	r2, [r3, #0]
            break;
 8004784:	e007      	b.n	8004796 <phCryptoSym_Sw_GetConfig+0xea>

        case PH_CRYPTOSYM_CONFIG_ADDITIONAL_INFO:
            *pValue = pDataParams->wAddInfo;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	801a      	strh	r2, [r3, #0]
            break;
 800478e:	e002      	b.n	8004796 <phCryptoSym_Sw_GetConfig+0xea>

        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_CRYPTOSYM);
 8004790:	f24e 1323 	movw	r3, #57635	@ 0xe123
 8004794:	e000      	b.n	8004798 <phCryptoSym_Sw_GetConfig+0xec>
    }

    return PH_ERR_SUCCESS;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3714      	adds	r7, #20
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <phCryptoSym_Sw_Aes_KeyExpansion>:
    phCryptoSym_Sw_DataParams_t * pDataParams,
    const uint8_t * pKey,
    uint8_t bNkCurrent,
    uint8_t bNkMax
    )
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	4611      	mov	r1, r2
 80047b0:	461a      	mov	r2, r3
 80047b2:	460b      	mov	r3, r1
 80047b4:	71fb      	strb	r3, [r7, #7]
 80047b6:	4613      	mov	r3, r2
 80047b8:	71bb      	strb	r3, [r7, #6]
    {
        /* Noting to do */;
    }

    /* We only need to copy the key provided... */
    (void)memcpy(pDataParams->pKey, pKey, (size_t)(((uint32_t)bNkCurrent) << 2U));
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f103 0008 	add.w	r0, r3, #8
 80047c0:	79fb      	ldrb	r3, [r7, #7]
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	461a      	mov	r2, r3
 80047c6:	68b9      	ldr	r1, [r7, #8]
 80047c8:	f01c f8e3 	bl	8020992 <memcpy>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
    return PH_ERR_SUCCESS;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <phCryptoSym_Sw_Aes_EncryptBlock>:
phStatus_t phCryptoSym_Sw_Aes_EncryptBlock(
    phCryptoSym_Sw_DataParams_t * pDataParams,
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pBlock,
    uint8_t bNumRounds
    )
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b090      	sub	sp, #64	@ 0x40
 80047da:	af02      	add	r7, sp, #8
 80047dc:	60f8      	str	r0, [r7, #12]
 80047de:	60b9      	str	r1, [r7, #8]
 80047e0:	4613      	mov	r3, r2
 80047e2:	71fb      	strb	r3, [r7, #7]
    /* AddRoundKey(state, w[0, Nb-1])  See Sec. 5.1.4*/
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, pDataParams->pKey, 0);
#else
    uint8_t i;
    uint8_t bNk;
    uint8_t bCurrentNk = 0;
 80047e4:	2300      	movs	r3, #0
 80047e6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    uint8_t PH_CRYTOSYM_SW_FAST_RAM bTmpKey[PH_CRYPTOSYM_AES256_KEY_SIZE];

    /* In case of online key scheduling, the key needs to be copied into a temporary array and the bNk as well as the
    bCurrentNk have to be provided to the add round key function */
    switch(pDataParams->wKeyType)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d00e      	beq.n	8004810 <phCryptoSym_Sw_Aes_EncryptBlock+0x3a>
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	dc10      	bgt.n	8004818 <phCryptoSym_Sw_Aes_EncryptBlock+0x42>
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d002      	beq.n	8004800 <phCryptoSym_Sw_Aes_EncryptBlock+0x2a>
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d004      	beq.n	8004808 <phCryptoSym_Sw_Aes_EncryptBlock+0x32>
 80047fe:	e00b      	b.n	8004818 <phCryptoSym_Sw_Aes_EncryptBlock+0x42>
    {
    case PH_CRYPTOSYM_KEY_TYPE_AES128:
        bNk = 4;
 8004800:	2304      	movs	r3, #4
 8004802:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        break;
 8004806:	e00a      	b.n	800481e <phCryptoSym_Sw_Aes_EncryptBlock+0x48>
    case PH_CRYPTOSYM_KEY_TYPE_AES192:
        bNk = 6;
 8004808:	2306      	movs	r3, #6
 800480a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        break;
 800480e:	e006      	b.n	800481e <phCryptoSym_Sw_Aes_EncryptBlock+0x48>
    case PH_CRYPTOSYM_KEY_TYPE_AES256:
        bNk = 8;
 8004810:	2308      	movs	r3, #8
 8004812:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        break;
 8004816:	e002      	b.n	800481e <phCryptoSym_Sw_Aes_EncryptBlock+0x48>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_CRYPTOSYM);
 8004818:	f24e 137f 	movw	r3, #57727	@ 0xe17f
 800481c:	e04a      	b.n	80048b4 <phCryptoSym_Sw_Aes_EncryptBlock+0xde>
    }
    /* Recopy the key */
    (void)memcpy(bTmpKey, pDataParams->pKey, (size_t)(((uint32_t)bNk) << 2U));
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f103 0108 	add.w	r1, r3, #8
 8004824:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004828:	009a      	lsls	r2, r3, #2
 800482a:	f107 0314 	add.w	r3, r7, #20
 800482e:	4618      	mov	r0, r3
 8004830:	f01c f8af 	bl	8020992 <memcpy>

    /* AddRoundKey(state, w[0, Nb-1])  See Sec. 5.1.4*/
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bCurrentNk, bNk, PH_CRYPTOSYM_KEYSCHEDULE_ENCRYPTION);
 8004834:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004838:	f107 0235 	add.w	r2, r7, #53	@ 0x35
 800483c:	f107 0114 	add.w	r1, r7, #20
 8004840:	200f      	movs	r0, #15
 8004842:	9000      	str	r0, [sp, #0]
 8004844:	68b8      	ldr	r0, [r7, #8]
 8004846:	f000 fba9 	bl	8004f9c <phCryptoSym_Sw_Aes_AddRoundKey>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */

    /* for round = 1 step 1 to Nr-1 */
    for (i=1; i< bNumRounds; i++)
 800484a:	2301      	movs	r3, #1
 800484c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8004850:	e015      	b.n	800487e <phCryptoSym_Sw_Aes_EncryptBlock+0xa8>
    {
        /* SubBytes(state)  See Sec. 5.1.1 */
        /* ShiftRows(state)  See Sec. 5.1.2*/
        phCryptoSym_Sw_Aes_SubBytesShiftRows(pBlock);
 8004852:	68b8      	ldr	r0, [r7, #8]
 8004854:	f000 f8c8 	bl	80049e8 <phCryptoSym_Sw_Aes_SubBytesShiftRows>
        /* MixColumns(state)  See Sec. 5.1.3 */
        phCryptoSym_Sw_Aes_MixColumns(pBlock);
 8004858:	68b8      	ldr	r0, [r7, #8]
 800485a:	f000 fa09 	bl	8004c70 <phCryptoSym_Sw_Aes_MixColumns>
#ifndef PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
        /* AddRoundKey(state, w[round*Nb, (round+1U)*Nb-1]) */
        phCryptoSym_Sw_Aes_AddRoundKey(pBlock, pDataParams->pKey, i);
#else
        /* AddRoundKey(state, w[round*Nb, (round+1U)*Nb-1]) */
        phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bCurrentNk, bNk, PH_CRYPTOSYM_KEYSCHEDULE_ENCRYPTION);
 800485e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004862:	f107 0235 	add.w	r2, r7, #53	@ 0x35
 8004866:	f107 0114 	add.w	r1, r7, #20
 800486a:	200f      	movs	r0, #15
 800486c:	9000      	str	r0, [sp, #0]
 800486e:	68b8      	ldr	r0, [r7, #8]
 8004870:	f000 fb94 	bl	8004f9c <phCryptoSym_Sw_Aes_AddRoundKey>
    for (i=1; i< bNumRounds; i++)
 8004874:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004878:	3301      	adds	r3, #1
 800487a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800487e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8004882:	79fb      	ldrb	r3, [r7, #7]
 8004884:	429a      	cmp	r2, r3
 8004886:	d3e4      	bcc.n	8004852 <phCryptoSym_Sw_Aes_EncryptBlock+0x7c>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
    } /* end for */

    /* SubBytes(state) */
    /* ShiftRows(state) */
    phCryptoSym_Sw_Aes_SubBytesShiftRows(pBlock);
 8004888:	68b8      	ldr	r0, [r7, #8]
 800488a:	f000 f8ad 	bl	80049e8 <phCryptoSym_Sw_Aes_SubBytesShiftRows>
#ifndef PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
    /* AddRoundKey(state, w[Nr*Nb, (Nr+1U)*Nb-1]) */
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, pDataParams->pKey, i);
#else
    /* AddRoundKey(state, w[Nr*Nb, (Nr+1U)*Nb-1]) */
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bCurrentNk, bNk, PH_CRYPTOSYM_KEYSCHEDULE_ENCRYPTION);
 800488e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004892:	f107 0235 	add.w	r2, r7, #53	@ 0x35
 8004896:	f107 0114 	add.w	r1, r7, #20
 800489a:	200f      	movs	r0, #15
 800489c:	9000      	str	r0, [sp, #0]
 800489e:	68b8      	ldr	r0, [r7, #8]
 80048a0:	f000 fb7c 	bl	8004f9c <phCryptoSym_Sw_Aes_AddRoundKey>

    /* Clear TmpKey */
    (void)memset(bTmpKey, 0x00, (size_t)sizeof(bTmpKey));
 80048a4:	f107 0314 	add.w	r3, r7, #20
 80048a8:	2220      	movs	r2, #32
 80048aa:	2100      	movs	r1, #0
 80048ac:	4618      	mov	r0, r3
 80048ae:	f01b fff1 	bl	8020894 <memset>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */

    return PH_ERR_SUCCESS;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3738      	adds	r7, #56	@ 0x38
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <phCryptoSym_Sw_Aes_DecryptBlock>:
phStatus_t phCryptoSym_Sw_Aes_DecryptBlock(
    phCryptoSym_Sw_DataParams_t * pDataParams,
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pBlock,
    uint8_t bNumRounds
    )
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b090      	sub	sp, #64	@ 0x40
 80048c0:	af02      	add	r7, sp, #8
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	4613      	mov	r3, r2
 80048c8:	71fb      	strb	r3, [r7, #7]

    /* In case of online key scheduling, the key needs to be copied into a temporary array and the bNk as well as the
    bCurrentNk have to be provided to the add round key function. In addition, the complete key expansion has to be
    performed upfront because the first round key needed is the one corresponding to round 10/12/14. */

    switch(pDataParams->wKeyType)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d014      	beq.n	80048fc <phCryptoSym_Sw_Aes_DecryptBlock+0x40>
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	dc19      	bgt.n	800490a <phCryptoSym_Sw_Aes_DecryptBlock+0x4e>
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d002      	beq.n	80048e0 <phCryptoSym_Sw_Aes_DecryptBlock+0x24>
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d007      	beq.n	80048ee <phCryptoSym_Sw_Aes_DecryptBlock+0x32>
 80048de:	e014      	b.n	800490a <phCryptoSym_Sw_Aes_DecryptBlock+0x4e>
    {
    case PH_CRYPTOSYM_KEY_TYPE_AES128:
        bNk = 4;
 80048e0:	2304      	movs	r3, #4
 80048e2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        bCurrentNk = 43;
 80048e6:	232b      	movs	r3, #43	@ 0x2b
 80048e8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        break;
 80048ec:	e010      	b.n	8004910 <phCryptoSym_Sw_Aes_DecryptBlock+0x54>
    case PH_CRYPTOSYM_KEY_TYPE_AES192:
        bNk = 6;
 80048ee:	2306      	movs	r3, #6
 80048f0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        bCurrentNk = 51;
 80048f4:	2333      	movs	r3, #51	@ 0x33
 80048f6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        break;
 80048fa:	e009      	b.n	8004910 <phCryptoSym_Sw_Aes_DecryptBlock+0x54>
    case PH_CRYPTOSYM_KEY_TYPE_AES256:
        bNk = 8;
 80048fc:	2308      	movs	r3, #8
 80048fe:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        bCurrentNk = 59;
 8004902:	233b      	movs	r3, #59	@ 0x3b
 8004904:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        break;
 8004908:	e002      	b.n	8004910 <phCryptoSym_Sw_Aes_DecryptBlock+0x54>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_CRYPTOSYM);
 800490a:	f24e 137f 	movw	r3, #57727	@ 0xe17f
 800490e:	e066      	b.n	80049de <phCryptoSym_Sw_Aes_DecryptBlock+0x122>
    }

    /* Recopy the key */
    (void)memcpy(bTmpKey, pDataParams->pKey, (size_t)(((uint32_t)bNk) << 2U));
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f103 0108 	add.w	r1, r3, #8
 8004916:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800491a:	009a      	lsls	r2, r3, #2
 800491c:	f107 0314 	add.w	r3, r7, #20
 8004920:	4618      	mov	r0, r3
 8004922:	f01c f836 	bl	8020992 <memcpy>

    /* Perform complete key expansion upfront. */
    bTmp = 0;
 8004926:	2300      	movs	r3, #0
 8004928:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    for (i=0;i<=bNumRounds;i++)
 800492c:	2300      	movs	r3, #0
 800492e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8004932:	e00f      	b.n	8004954 <phCryptoSym_Sw_Aes_DecryptBlock+0x98>
    {
        phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bTmp, bNk, PH_CRYPTOSYM_KEYSCHEDULE_DECRYPTION_PREPARE);
 8004934:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004938:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800493c:	f107 0114 	add.w	r1, r7, #20
 8004940:	2030      	movs	r0, #48	@ 0x30
 8004942:	9000      	str	r0, [sp, #0]
 8004944:	68b8      	ldr	r0, [r7, #8]
 8004946:	f000 fb29 	bl	8004f9c <phCryptoSym_Sw_Aes_AddRoundKey>
    for (i=0;i<=bNumRounds;i++)
 800494a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800494e:	3301      	adds	r3, #1
 8004950:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8004954:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8004958:	79fb      	ldrb	r3, [r7, #7]
 800495a:	429a      	cmp	r2, r3
 800495c:	d9ea      	bls.n	8004934 <phCryptoSym_Sw_Aes_DecryptBlock+0x78>
    }
    /* Now, bTmpKey contains the last round key. */

    /* AddRoundKey(state, w[Nr*Nb, (Nr+1U)*Nb-1])  See Sec. 5.1.4 */
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bCurrentNk, bNk, PH_CRYPTOSYM_KEYSCHEDULE_DECRYPTION);
 800495e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004962:	f107 0235 	add.w	r2, r7, #53	@ 0x35
 8004966:	f107 0114 	add.w	r1, r7, #20
 800496a:	20c0      	movs	r0, #192	@ 0xc0
 800496c:	9000      	str	r0, [sp, #0]
 800496e:	68b8      	ldr	r0, [r7, #8]
 8004970:	f000 fb14 	bl	8004f9c <phCryptoSym_Sw_Aes_AddRoundKey>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */

    /* for round = Nr-1 step -1 downto 1 */
    for (i=bNumRounds - 1U; i > 0U; i--)
 8004974:	79fb      	ldrb	r3, [r7, #7]
 8004976:	3b01      	subs	r3, #1
 8004978:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800497c:	e015      	b.n	80049aa <phCryptoSym_Sw_Aes_DecryptBlock+0xee>
    {
        /* InvShiftRows(state)  See Sec. 5.3.1 */
        /* InvSubBytes(state)  See Sec. 5.3.2  */
        phCryptoSym_Sw_Aes_InvSubBytesShiftRows(pBlock);
 800497e:	68b8      	ldr	r0, [r7, #8]
 8004980:	f000 f8d4 	bl	8004b2c <phCryptoSym_Sw_Aes_InvSubBytesShiftRows>
#ifndef PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
        /* AddRoundKey(state, w[round*Nb, (round+1U)*Nb-1]) */
        phCryptoSym_Sw_Aes_AddRoundKey(pBlock, pDataParams->pKey, i);
#else
        /* AddRoundKey(state, w[round*Nb, (round+1U)*Nb-1]) */
        phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bCurrentNk, bNk, PH_CRYPTOSYM_KEYSCHEDULE_DECRYPTION);
 8004984:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004988:	f107 0235 	add.w	r2, r7, #53	@ 0x35
 800498c:	f107 0114 	add.w	r1, r7, #20
 8004990:	20c0      	movs	r0, #192	@ 0xc0
 8004992:	9000      	str	r0, [sp, #0]
 8004994:	68b8      	ldr	r0, [r7, #8]
 8004996:	f000 fb01 	bl	8004f9c <phCryptoSym_Sw_Aes_AddRoundKey>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
        /* InvMixColumns(state)  See Sec. 5.3.3 */
        phCryptoSym_Sw_Aes_InvMixColumns(pBlock);
 800499a:	68b8      	ldr	r0, [r7, #8]
 800499c:	f000 fa06 	bl	8004dac <phCryptoSym_Sw_Aes_InvMixColumns>
    for (i=bNumRounds - 1U; i > 0U; i--)
 80049a0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80049a4:	3b01      	subs	r3, #1
 80049a6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80049aa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1e5      	bne.n	800497e <phCryptoSym_Sw_Aes_DecryptBlock+0xc2>
    } /* end for */

    /* InvShiftRows(state) */
    /* InvSubBytes(state)  */
    phCryptoSym_Sw_Aes_InvSubBytesShiftRows(pBlock);
 80049b2:	68b8      	ldr	r0, [r7, #8]
 80049b4:	f000 f8ba 	bl	8004b2c <phCryptoSym_Sw_Aes_InvSubBytesShiftRows>
#ifndef PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
    /* AddRoundKey(state, w[0, Nb-1]) */
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, pDataParams->pKey, i);
#else
    /* AddRoundKey(state, w[0, Nb-1]) */
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bCurrentNk, bNk, PH_CRYPTOSYM_KEYSCHEDULE_DECRYPTION);
 80049b8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80049bc:	f107 0235 	add.w	r2, r7, #53	@ 0x35
 80049c0:	f107 0114 	add.w	r1, r7, #20
 80049c4:	20c0      	movs	r0, #192	@ 0xc0
 80049c6:	9000      	str	r0, [sp, #0]
 80049c8:	68b8      	ldr	r0, [r7, #8]
 80049ca:	f000 fae7 	bl	8004f9c <phCryptoSym_Sw_Aes_AddRoundKey>
    /* Clear TmpKey */
    (void)memset(bTmpKey, 0x00, (size_t)sizeof(bTmpKey));
 80049ce:	f107 0314 	add.w	r3, r7, #20
 80049d2:	2220      	movs	r2, #32
 80049d4:	2100      	movs	r1, #0
 80049d6:	4618      	mov	r0, r3
 80049d8:	f01b ff5c 	bl	8020894 <memset>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
    return PH_ERR_SUCCESS;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3738      	adds	r7, #56	@ 0x38
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
	...

080049e8 <phCryptoSym_Sw_Aes_SubBytesShiftRows>:

void phCryptoSym_Sw_Aes_SubBytesShiftRows(uint8_t PH_CRYTOSYM_SW_FAST_RAM * pState)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM tmp;
    /* For details, see section Sec. 5.1.1 and See Sec. 5.1.2 in FIPS-197 */

    pState[0] = phCryptoSym_Sw_Aes_sboxTable[pState[0]];    /* Row 1: No shift */
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	461a      	mov	r2, r3
 80049f6:	4b4c      	ldr	r3, [pc, #304]	@ (8004b28 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 80049f8:	5c9a      	ldrb	r2, [r3, r2]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	701a      	strb	r2, [r3, #0]
    pState[4] = phCryptoSym_Sw_Aes_sboxTable[pState[4]];    /* Row 1: No shift */
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	3304      	adds	r3, #4
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	4619      	mov	r1, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	3304      	adds	r3, #4
 8004a0a:	4a47      	ldr	r2, [pc, #284]	@ (8004b28 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8004a0c:	5c52      	ldrb	r2, [r2, r1]
 8004a0e:	701a      	strb	r2, [r3, #0]
    pState[8] = phCryptoSym_Sw_Aes_sboxTable[pState[8]];    /* Row 1: No shift */
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	3308      	adds	r3, #8
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	4619      	mov	r1, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	3308      	adds	r3, #8
 8004a1c:	4a42      	ldr	r2, [pc, #264]	@ (8004b28 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8004a1e:	5c52      	ldrb	r2, [r2, r1]
 8004a20:	701a      	strb	r2, [r3, #0]
    pState[12] = phCryptoSym_Sw_Aes_sboxTable[pState[12]];  /* Row 1: No shift */
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	330c      	adds	r3, #12
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	4619      	mov	r1, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	330c      	adds	r3, #12
 8004a2e:	4a3e      	ldr	r2, [pc, #248]	@ (8004b28 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8004a30:	5c52      	ldrb	r2, [r2, r1]
 8004a32:	701a      	strb	r2, [r3, #0]

    tmp = phCryptoSym_Sw_Aes_sboxTable[pState[1]];          /* Row 2: Shift 1 Position to the left */
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	3301      	adds	r3, #1
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	4b3a      	ldr	r3, [pc, #232]	@ (8004b28 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8004a3e:	5c9b      	ldrb	r3, [r3, r2]
 8004a40:	73fb      	strb	r3, [r7, #15]
    pState[1] = phCryptoSym_Sw_Aes_sboxTable[pState[5]];    /* Row 2: Shift 1 Position to the left */
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	3305      	adds	r3, #5
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	4619      	mov	r1, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	4a36      	ldr	r2, [pc, #216]	@ (8004b28 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8004a50:	5c52      	ldrb	r2, [r2, r1]
 8004a52:	701a      	strb	r2, [r3, #0]
    pState[5] = phCryptoSym_Sw_Aes_sboxTable[pState[9]];    /* Row 2: Shift 1 Position to the left */
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	3309      	adds	r3, #9
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	3305      	adds	r3, #5
 8004a60:	4a31      	ldr	r2, [pc, #196]	@ (8004b28 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8004a62:	5c52      	ldrb	r2, [r2, r1]
 8004a64:	701a      	strb	r2, [r3, #0]
    pState[9] = phCryptoSym_Sw_Aes_sboxTable[pState[13]];   /* Row 2: Shift 1 Position to the left */
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	330d      	adds	r3, #13
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	3309      	adds	r3, #9
 8004a72:	4a2d      	ldr	r2, [pc, #180]	@ (8004b28 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8004a74:	5c52      	ldrb	r2, [r2, r1]
 8004a76:	701a      	strb	r2, [r3, #0]
    pState[13] = tmp;                                       /* Row 2: Shift 1 Position to the left */
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	330d      	adds	r3, #13
 8004a7c:	7bfa      	ldrb	r2, [r7, #15]
 8004a7e:	701a      	strb	r2, [r3, #0]

    tmp = phCryptoSym_Sw_Aes_sboxTable[pState[2]];          /* Row 3: Shift 2 Position to the left */
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	3302      	adds	r3, #2
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	461a      	mov	r2, r3
 8004a88:	4b27      	ldr	r3, [pc, #156]	@ (8004b28 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8004a8a:	5c9b      	ldrb	r3, [r3, r2]
 8004a8c:	73fb      	strb	r3, [r7, #15]
    pState[2] = phCryptoSym_Sw_Aes_sboxTable[pState[10]];   /* Row 3: Shift 2 Position to the left */
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	330a      	adds	r3, #10
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	4619      	mov	r1, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	3302      	adds	r3, #2
 8004a9a:	4a23      	ldr	r2, [pc, #140]	@ (8004b28 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8004a9c:	5c52      	ldrb	r2, [r2, r1]
 8004a9e:	701a      	strb	r2, [r3, #0]
    pState[10] = tmp;                                       /* Row 3: Shift 2 Position to the left */
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	330a      	adds	r3, #10
 8004aa4:	7bfa      	ldrb	r2, [r7, #15]
 8004aa6:	701a      	strb	r2, [r3, #0]
    tmp = phCryptoSym_Sw_Aes_sboxTable[pState[6]];          /* Row 3: Shift 2 Position to the left */
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	3306      	adds	r3, #6
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	461a      	mov	r2, r3
 8004ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8004b28 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8004ab2:	5c9b      	ldrb	r3, [r3, r2]
 8004ab4:	73fb      	strb	r3, [r7, #15]
    pState[6] = phCryptoSym_Sw_Aes_sboxTable[pState[14]];   /* Row 3: Shift 2 Position to the left */
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	330e      	adds	r3, #14
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	4619      	mov	r1, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	3306      	adds	r3, #6
 8004ac2:	4a19      	ldr	r2, [pc, #100]	@ (8004b28 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8004ac4:	5c52      	ldrb	r2, [r2, r1]
 8004ac6:	701a      	strb	r2, [r3, #0]
    pState[14] = tmp;                                       /* Row 3: Shift 2 Position to the left */
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	330e      	adds	r3, #14
 8004acc:	7bfa      	ldrb	r2, [r7, #15]
 8004ace:	701a      	strb	r2, [r3, #0]

    tmp = phCryptoSym_Sw_Aes_sboxTable[pState[15]];         /* Row 4: Shift 3 Position to the left */
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	330f      	adds	r3, #15
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	4b13      	ldr	r3, [pc, #76]	@ (8004b28 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8004ada:	5c9b      	ldrb	r3, [r3, r2]
 8004adc:	73fb      	strb	r3, [r7, #15]
    pState[15] = phCryptoSym_Sw_Aes_sboxTable[pState[11]];  /* Row 4: Shift 3 Position to the left */
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	330b      	adds	r3, #11
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	330f      	adds	r3, #15
 8004aea:	4a0f      	ldr	r2, [pc, #60]	@ (8004b28 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8004aec:	5c52      	ldrb	r2, [r2, r1]
 8004aee:	701a      	strb	r2, [r3, #0]
    pState[11] = phCryptoSym_Sw_Aes_sboxTable[pState[7]];   /* Row 4: Shift 3 Position to the left */
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	3307      	adds	r3, #7
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	4619      	mov	r1, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	330b      	adds	r3, #11
 8004afc:	4a0a      	ldr	r2, [pc, #40]	@ (8004b28 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8004afe:	5c52      	ldrb	r2, [r2, r1]
 8004b00:	701a      	strb	r2, [r3, #0]
    pState[7] = phCryptoSym_Sw_Aes_sboxTable[pState[3]];    /* Row 4: Shift 3 Position to the left */
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	3303      	adds	r3, #3
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	4619      	mov	r1, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	3307      	adds	r3, #7
 8004b0e:	4a06      	ldr	r2, [pc, #24]	@ (8004b28 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8004b10:	5c52      	ldrb	r2, [r2, r1]
 8004b12:	701a      	strb	r2, [r3, #0]
    pState[3] = tmp;                                        /* Row 4: Shift 3 Position to the left */
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	3303      	adds	r3, #3
 8004b18:	7bfa      	ldrb	r2, [r7, #15]
 8004b1a:	701a      	strb	r2, [r3, #0]
}
 8004b1c:	bf00      	nop
 8004b1e:	3714      	adds	r7, #20
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr
 8004b28:	080231bc 	.word	0x080231bc

08004b2c <phCryptoSym_Sw_Aes_InvSubBytesShiftRows>:

void phCryptoSym_Sw_Aes_InvSubBytesShiftRows(uint8_t PH_CRYTOSYM_SW_FAST_RAM * pState)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM tmp;

    /* For details, see section Sec. 5.3.1 and See Sec. 5.3.2 in FIPS-197 */
    pState[0] = phCryptoSym_Sw_Aes_invSboxTable[pState[0]];        /* Row 1: No shift */
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	461a      	mov	r2, r3
 8004b3a:	4b4c      	ldr	r3, [pc, #304]	@ (8004c6c <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8004b3c:	5c9a      	ldrb	r2, [r3, r2]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	701a      	strb	r2, [r3, #0]
    pState[4] = phCryptoSym_Sw_Aes_invSboxTable[pState[4]];     /* Row 1: No shift */
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	3304      	adds	r3, #4
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	4619      	mov	r1, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	4a47      	ldr	r2, [pc, #284]	@ (8004c6c <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8004b50:	5c52      	ldrb	r2, [r2, r1]
 8004b52:	701a      	strb	r2, [r3, #0]
    pState[8] = phCryptoSym_Sw_Aes_invSboxTable[pState[8]];     /* Row 1: No shift */
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	3308      	adds	r3, #8
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	3308      	adds	r3, #8
 8004b60:	4a42      	ldr	r2, [pc, #264]	@ (8004c6c <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8004b62:	5c52      	ldrb	r2, [r2, r1]
 8004b64:	701a      	strb	r2, [r3, #0]
    pState[12] = phCryptoSym_Sw_Aes_invSboxTable[pState[12]];   /* Row 1: No shift */
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	330c      	adds	r3, #12
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	330c      	adds	r3, #12
 8004b72:	4a3e      	ldr	r2, [pc, #248]	@ (8004c6c <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8004b74:	5c52      	ldrb	r2, [r2, r1]
 8004b76:	701a      	strb	r2, [r3, #0]

    tmp = phCryptoSym_Sw_Aes_invSboxTable[pState[13]];          /* Row 2: Shift 1 Position to the right */
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	330d      	adds	r3, #13
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	461a      	mov	r2, r3
 8004b80:	4b3a      	ldr	r3, [pc, #232]	@ (8004c6c <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8004b82:	5c9b      	ldrb	r3, [r3, r2]
 8004b84:	73fb      	strb	r3, [r7, #15]
    pState[13] = phCryptoSym_Sw_Aes_invSboxTable[pState[9]];    /* Row 2: Shift 1 Position to the right */
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	3309      	adds	r3, #9
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	330d      	adds	r3, #13
 8004b92:	4a36      	ldr	r2, [pc, #216]	@ (8004c6c <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8004b94:	5c52      	ldrb	r2, [r2, r1]
 8004b96:	701a      	strb	r2, [r3, #0]
    pState[9] = phCryptoSym_Sw_Aes_invSboxTable[pState[5]];     /* Row 2: Shift 1 Position to the right */
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	3305      	adds	r3, #5
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	3309      	adds	r3, #9
 8004ba4:	4a31      	ldr	r2, [pc, #196]	@ (8004c6c <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8004ba6:	5c52      	ldrb	r2, [r2, r1]
 8004ba8:	701a      	strb	r2, [r3, #0]
    pState[5] = phCryptoSym_Sw_Aes_invSboxTable[pState[1]];     /* Row 2: Shift 1 Position to the right */
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	3301      	adds	r3, #1
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	3305      	adds	r3, #5
 8004bb6:	4a2d      	ldr	r2, [pc, #180]	@ (8004c6c <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8004bb8:	5c52      	ldrb	r2, [r2, r1]
 8004bba:	701a      	strb	r2, [r3, #0]
    pState[1] = tmp;                                            /* Row 2: Shift 1 Position to the right */
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	7bfa      	ldrb	r2, [r7, #15]
 8004bc2:	701a      	strb	r2, [r3, #0]

    tmp = phCryptoSym_Sw_Aes_invSboxTable[pState[2]];           /* Row 3: Shift 2 Position to the right */
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	3302      	adds	r3, #2
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	461a      	mov	r2, r3
 8004bcc:	4b27      	ldr	r3, [pc, #156]	@ (8004c6c <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8004bce:	5c9b      	ldrb	r3, [r3, r2]
 8004bd0:	73fb      	strb	r3, [r7, #15]
    pState[2] = phCryptoSym_Sw_Aes_invSboxTable[pState[10]];    /* Row 3: Shift 2 Position to the right */
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	330a      	adds	r3, #10
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	4619      	mov	r1, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	3302      	adds	r3, #2
 8004bde:	4a23      	ldr	r2, [pc, #140]	@ (8004c6c <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8004be0:	5c52      	ldrb	r2, [r2, r1]
 8004be2:	701a      	strb	r2, [r3, #0]
    pState[10] = tmp;                                           /* Row 3: Shift 2 Position to the right */
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	330a      	adds	r3, #10
 8004be8:	7bfa      	ldrb	r2, [r7, #15]
 8004bea:	701a      	strb	r2, [r3, #0]
    tmp = phCryptoSym_Sw_Aes_invSboxTable[pState[6]];           /* Row 3: Shift 2 Position to the right */
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	3306      	adds	r3, #6
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	4b1d      	ldr	r3, [pc, #116]	@ (8004c6c <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8004bf6:	5c9b      	ldrb	r3, [r3, r2]
 8004bf8:	73fb      	strb	r3, [r7, #15]
    pState[6] = phCryptoSym_Sw_Aes_invSboxTable[pState[14]];    /* Row 3: Shift 2 Position to the right */
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	330e      	adds	r3, #14
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	4619      	mov	r1, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	3306      	adds	r3, #6
 8004c06:	4a19      	ldr	r2, [pc, #100]	@ (8004c6c <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8004c08:	5c52      	ldrb	r2, [r2, r1]
 8004c0a:	701a      	strb	r2, [r3, #0]
    pState[14] = tmp;                                           /* Row 3: Shift 2 Position to the right */
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	330e      	adds	r3, #14
 8004c10:	7bfa      	ldrb	r2, [r7, #15]
 8004c12:	701a      	strb	r2, [r3, #0]

    tmp = phCryptoSym_Sw_Aes_invSboxTable[pState[3]];           /* Row 4: Shift 3 Position to the right */
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	3303      	adds	r3, #3
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	4b13      	ldr	r3, [pc, #76]	@ (8004c6c <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8004c1e:	5c9b      	ldrb	r3, [r3, r2]
 8004c20:	73fb      	strb	r3, [r7, #15]
    pState[3] = phCryptoSym_Sw_Aes_invSboxTable[pState[7]];     /* Row 4: Shift 3 Position to the right */
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	3307      	adds	r3, #7
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	4619      	mov	r1, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	3303      	adds	r3, #3
 8004c2e:	4a0f      	ldr	r2, [pc, #60]	@ (8004c6c <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8004c30:	5c52      	ldrb	r2, [r2, r1]
 8004c32:	701a      	strb	r2, [r3, #0]
    pState[7] = phCryptoSym_Sw_Aes_invSboxTable[pState[11]];    /* Row 4: Shift 3 Position to the right */
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	330b      	adds	r3, #11
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	3307      	adds	r3, #7
 8004c40:	4a0a      	ldr	r2, [pc, #40]	@ (8004c6c <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8004c42:	5c52      	ldrb	r2, [r2, r1]
 8004c44:	701a      	strb	r2, [r3, #0]
    pState[11] = phCryptoSym_Sw_Aes_invSboxTable[pState[15]];   /* Row 4: Shift 3 Position to the right */
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	330f      	adds	r3, #15
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	330b      	adds	r3, #11
 8004c52:	4a06      	ldr	r2, [pc, #24]	@ (8004c6c <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8004c54:	5c52      	ldrb	r2, [r2, r1]
 8004c56:	701a      	strb	r2, [r3, #0]
    pState[15] = tmp;                                           /* Row 4: Shift 3 Position to the right */
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	330f      	adds	r3, #15
 8004c5c:	7bfa      	ldrb	r2, [r7, #15]
 8004c5e:	701a      	strb	r2, [r3, #0]
}
 8004c60:	bf00      	nop
 8004c62:	3714      	adds	r7, #20
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	080232bc 	.word	0x080232bc

08004c70 <phCryptoSym_Sw_Aes_MixColumns>:

void phCryptoSym_Sw_Aes_MixColumns(uint8_t PH_CRYTOSYM_SW_FAST_RAM * pState)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
    /* For details, see section Sec. 5.1.3 in FIPS-197 */

    /* Generally, the calculation speed is increased by operating with lookup tables. */
    /* in case of ROM_OPTIMIZATION enabled, the following equation is calculated online: */
    /* times3 = times2 xor times1 */
    for (i=0;i<4U;i++)
 8004c78:	2300      	movs	r3, #0
 8004c7a:	73fb      	strb	r3, [r7, #15]
 8004c7c:	e089      	b.n	8004d92 <phCryptoSym_Sw_Aes_MixColumns+0x122>
        tmp[0] = phCryptoSym_Sw_Aes_times2[pState[0]] ^ phCryptoSym_Sw_Aes_times3[pState[1]] ^ pState[2] ^ pState[3];
        tmp[1] = pState[0] ^ phCryptoSym_Sw_Aes_times2[pState[1]] ^ phCryptoSym_Sw_Aes_times3[pState[2]] ^ pState[3];
        tmp[2] = pState[0] ^ pState[1] ^ phCryptoSym_Sw_Aes_times2[pState[2]] ^ phCryptoSym_Sw_Aes_times3[pState[3]];
        tmp[3] = phCryptoSym_Sw_Aes_times3[pState[0]] ^ pState[1] ^ pState[2] ^ phCryptoSym_Sw_Aes_times2[pState[3]];
#else
        tmp[0] = phCryptoSym_Sw_Aes_times2[pState[0]] ^ (phCryptoSym_Sw_Aes_times2[pState[1]] ^ pState[1]) ^ pState[2] ^ pState[3];
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	461a      	mov	r2, r3
 8004c84:	4b48      	ldr	r3, [pc, #288]	@ (8004da8 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 8004c86:	5c9a      	ldrb	r2, [r3, r2]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	4619      	mov	r1, r3
 8004c90:	4b45      	ldr	r3, [pc, #276]	@ (8004da8 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 8004c92:	5c59      	ldrb	r1, [r3, r1]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	3301      	adds	r3, #1
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	404b      	eors	r3, r1
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	4053      	eors	r3, r2
 8004ca0:	b2da      	uxtb	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	3302      	adds	r3, #2
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	4053      	eors	r3, r2
 8004caa:	b2da      	uxtb	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	3303      	adds	r3, #3
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	4053      	eors	r3, r2
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	723b      	strb	r3, [r7, #8]
        tmp[1] = pState[0] ^ phCryptoSym_Sw_Aes_times2[pState[1]] ^ (phCryptoSym_Sw_Aes_times2[pState[2]] ^ pState[2]) ^ pState[3];
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	781a      	ldrb	r2, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	4b38      	ldr	r3, [pc, #224]	@ (8004da8 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 8004cc6:	5c5b      	ldrb	r3, [r3, r1]
 8004cc8:	4053      	eors	r3, r2
 8004cca:	b2da      	uxtb	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3302      	adds	r3, #2
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	4b34      	ldr	r3, [pc, #208]	@ (8004da8 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 8004cd6:	5c59      	ldrb	r1, [r3, r1]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	3302      	adds	r3, #2
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	404b      	eors	r3, r1
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	4053      	eors	r3, r2
 8004ce4:	b2da      	uxtb	r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	3303      	adds	r3, #3
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	4053      	eors	r3, r2
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	727b      	strb	r3, [r7, #9]
        tmp[2] = pState[0] ^ pState[1] ^ phCryptoSym_Sw_Aes_times2[pState[2]] ^ (phCryptoSym_Sw_Aes_times2[pState[3]] ^ pState[3]);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	781a      	ldrb	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	4053      	eors	r3, r2
 8004cfe:	b2da      	uxtb	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	3302      	adds	r3, #2
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	4619      	mov	r1, r3
 8004d08:	4b27      	ldr	r3, [pc, #156]	@ (8004da8 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 8004d0a:	5c5b      	ldrb	r3, [r3, r1]
 8004d0c:	4053      	eors	r3, r2
 8004d0e:	b2da      	uxtb	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	3303      	adds	r3, #3
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	4619      	mov	r1, r3
 8004d18:	4b23      	ldr	r3, [pc, #140]	@ (8004da8 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 8004d1a:	5c59      	ldrb	r1, [r3, r1]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	3303      	adds	r3, #3
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	404b      	eors	r3, r1
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	4053      	eors	r3, r2
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	72bb      	strb	r3, [r7, #10]
        tmp[3] = (phCryptoSym_Sw_Aes_times2[pState[0]] ^ pState[0]) ^ pState[1] ^ pState[2] ^ phCryptoSym_Sw_Aes_times2[pState[3]];
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	461a      	mov	r2, r3
 8004d32:	4b1d      	ldr	r3, [pc, #116]	@ (8004da8 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 8004d34:	5c9a      	ldrb	r2, [r3, r2]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	4053      	eors	r3, r2
 8004d3c:	b2da      	uxtb	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	3301      	adds	r3, #1
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	4053      	eors	r3, r2
 8004d46:	b2da      	uxtb	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	3302      	adds	r3, #2
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	4053      	eors	r3, r2
 8004d50:	b2da      	uxtb	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	3303      	adds	r3, #3
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	4619      	mov	r1, r3
 8004d5a:	4b13      	ldr	r3, [pc, #76]	@ (8004da8 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 8004d5c:	5c5b      	ldrb	r3, [r3, r1]
 8004d5e:	4053      	eors	r3, r2
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	72fb      	strb	r3, [r7, #11]
#endif /* PH_CRYPTOSYM_SW_ROM_OPTIMIZATION */
        *pState++ = tmp[0];
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	1c5a      	adds	r2, r3, #1
 8004d68:	607a      	str	r2, [r7, #4]
 8004d6a:	7a3a      	ldrb	r2, [r7, #8]
 8004d6c:	701a      	strb	r2, [r3, #0]
        *pState++ = tmp[1];
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	1c5a      	adds	r2, r3, #1
 8004d72:	607a      	str	r2, [r7, #4]
 8004d74:	7a7a      	ldrb	r2, [r7, #9]
 8004d76:	701a      	strb	r2, [r3, #0]
        *pState++ = tmp[2];
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	1c5a      	adds	r2, r3, #1
 8004d7c:	607a      	str	r2, [r7, #4]
 8004d7e:	7aba      	ldrb	r2, [r7, #10]
 8004d80:	701a      	strb	r2, [r3, #0]
        *pState++ = tmp[3];
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	1c5a      	adds	r2, r3, #1
 8004d86:	607a      	str	r2, [r7, #4]
 8004d88:	7afa      	ldrb	r2, [r7, #11]
 8004d8a:	701a      	strb	r2, [r3, #0]
    for (i=0;i<4U;i++)
 8004d8c:	7bfb      	ldrb	r3, [r7, #15]
 8004d8e:	3301      	adds	r3, #1
 8004d90:	73fb      	strb	r3, [r7, #15]
 8004d92:	7bfb      	ldrb	r3, [r7, #15]
 8004d94:	2b03      	cmp	r3, #3
 8004d96:	f67f af72 	bls.w	8004c7e <phCryptoSym_Sw_Aes_MixColumns+0xe>
    }
}
 8004d9a:	bf00      	nop
 8004d9c:	bf00      	nop
 8004d9e:	3714      	adds	r7, #20
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr
 8004da8:	080233bc 	.word	0x080233bc

08004dac <phCryptoSym_Sw_Aes_InvMixColumns>:

void phCryptoSym_Sw_Aes_InvMixColumns(uint8_t PH_CRYTOSYM_SW_FAST_RAM * pState)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
    /* Generally, the calculation speed is increased by operating with lookup tables. */
    /* in case of ROM_OPTIMIZATION enabled, the following equation is calculated online: */
    /* timesB = times9 xor times2 */
    /* timesD = timesC xor times1 */
    /* timesE = timesC xor times2 */
    for (i=0;i<4U;i++)
 8004db4:	2300      	movs	r3, #0
 8004db6:	73fb      	strb	r3, [r7, #15]
 8004db8:	e0df      	b.n	8004f7a <phCryptoSym_Sw_Aes_InvMixColumns+0x1ce>
        tmp[0] = phCryptoSym_Sw_Aes_timesE[pState[0]] ^ phCryptoSym_Sw_Aes_timesB[pState[1]] ^ phCryptoSym_Sw_Aes_timesD[pState[2]] ^ phCryptoSym_Sw_Aes_times9[pState[3]];
        tmp[1] = phCryptoSym_Sw_Aes_times9[pState[0]] ^ phCryptoSym_Sw_Aes_timesE[pState[1]] ^ phCryptoSym_Sw_Aes_timesB[pState[2]] ^ phCryptoSym_Sw_Aes_timesD[pState[3]];
        tmp[2] = phCryptoSym_Sw_Aes_timesD[pState[0]] ^ phCryptoSym_Sw_Aes_times9[pState[1]] ^ phCryptoSym_Sw_Aes_timesE[pState[2]] ^ phCryptoSym_Sw_Aes_timesB[pState[3]];
        tmp[3] = phCryptoSym_Sw_Aes_timesB[pState[0]] ^ phCryptoSym_Sw_Aes_timesD[pState[1]] ^ phCryptoSym_Sw_Aes_times9[pState[2]] ^ phCryptoSym_Sw_Aes_timesE[pState[3]];
#else
        tmp[0] = (phCryptoSym_Sw_Aes_timesC[pState[0]] ^ phCryptoSym_Sw_Aes_times2[pState[0]]) ^ (phCryptoSym_Sw_Aes_times9[pState[1]] ^ phCryptoSym_Sw_Aes_times2[pState[1]]) ^ (phCryptoSym_Sw_Aes_timesC[pState[2]] ^ pState[2]) ^ phCryptoSym_Sw_Aes_times9[pState[3]];
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	4b73      	ldr	r3, [pc, #460]	@ (8004f90 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 8004dc2:	5c9a      	ldrb	r2, [r3, r2]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	4619      	mov	r1, r3
 8004dca:	4b72      	ldr	r3, [pc, #456]	@ (8004f94 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8004dcc:	5c5b      	ldrb	r3, [r3, r1]
 8004dce:	4053      	eors	r3, r2
 8004dd0:	b2da      	uxtb	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	4619      	mov	r1, r3
 8004dda:	4b6f      	ldr	r3, [pc, #444]	@ (8004f98 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 8004ddc:	5c59      	ldrb	r1, [r3, r1]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	3301      	adds	r3, #1
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	4618      	mov	r0, r3
 8004de6:	4b6b      	ldr	r3, [pc, #428]	@ (8004f94 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8004de8:	5c1b      	ldrb	r3, [r3, r0]
 8004dea:	404b      	eors	r3, r1
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	4053      	eors	r3, r2
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	3302      	adds	r3, #2
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	4619      	mov	r1, r3
 8004dfa:	4b65      	ldr	r3, [pc, #404]	@ (8004f90 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 8004dfc:	5c59      	ldrb	r1, [r3, r1]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	3302      	adds	r3, #2
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	404b      	eors	r3, r1
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	4053      	eors	r3, r2
 8004e0a:	b2da      	uxtb	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	3303      	adds	r3, #3
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	4619      	mov	r1, r3
 8004e14:	4b60      	ldr	r3, [pc, #384]	@ (8004f98 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 8004e16:	5c5b      	ldrb	r3, [r3, r1]
 8004e18:	4053      	eors	r3, r2
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	723b      	strb	r3, [r7, #8]
        tmp[1] = phCryptoSym_Sw_Aes_times9[pState[0]] ^ (phCryptoSym_Sw_Aes_timesC[pState[1]] ^ phCryptoSym_Sw_Aes_times2[pState[1]]) ^ (phCryptoSym_Sw_Aes_times9[pState[2]] ^ phCryptoSym_Sw_Aes_times2[pState[2]]) ^ (phCryptoSym_Sw_Aes_timesC[pState[3]] ^ pState[3]);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	461a      	mov	r2, r3
 8004e24:	4b5c      	ldr	r3, [pc, #368]	@ (8004f98 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 8004e26:	5c9a      	ldrb	r2, [r3, r2]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	4619      	mov	r1, r3
 8004e30:	4b57      	ldr	r3, [pc, #348]	@ (8004f90 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 8004e32:	5c59      	ldrb	r1, [r3, r1]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	3301      	adds	r3, #1
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	4b55      	ldr	r3, [pc, #340]	@ (8004f94 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8004e3e:	5c1b      	ldrb	r3, [r3, r0]
 8004e40:	404b      	eors	r3, r1
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	4053      	eors	r3, r2
 8004e46:	b2da      	uxtb	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	3302      	adds	r3, #2
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	4619      	mov	r1, r3
 8004e50:	4b51      	ldr	r3, [pc, #324]	@ (8004f98 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 8004e52:	5c59      	ldrb	r1, [r3, r1]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	3302      	adds	r3, #2
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	4b4d      	ldr	r3, [pc, #308]	@ (8004f94 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8004e5e:	5c1b      	ldrb	r3, [r3, r0]
 8004e60:	404b      	eors	r3, r1
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	4053      	eors	r3, r2
 8004e66:	b2da      	uxtb	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	3303      	adds	r3, #3
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	4619      	mov	r1, r3
 8004e70:	4b47      	ldr	r3, [pc, #284]	@ (8004f90 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 8004e72:	5c59      	ldrb	r1, [r3, r1]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	3303      	adds	r3, #3
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	404b      	eors	r3, r1
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	4053      	eors	r3, r2
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	727b      	strb	r3, [r7, #9]
        tmp[2] = (phCryptoSym_Sw_Aes_timesC[pState[0]] ^ pState[0])^ phCryptoSym_Sw_Aes_times9[pState[1]] ^ (phCryptoSym_Sw_Aes_timesC[pState[2]] ^ phCryptoSym_Sw_Aes_times2[pState[2]]) ^ (phCryptoSym_Sw_Aes_times9[pState[3]] ^ phCryptoSym_Sw_Aes_times2[pState[3]]);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	461a      	mov	r2, r3
 8004e8a:	4b41      	ldr	r3, [pc, #260]	@ (8004f90 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 8004e8c:	5c9a      	ldrb	r2, [r3, r2]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	4053      	eors	r3, r2
 8004e94:	b2da      	uxtb	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	4b3e      	ldr	r3, [pc, #248]	@ (8004f98 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 8004ea0:	5c5b      	ldrb	r3, [r3, r1]
 8004ea2:	4053      	eors	r3, r2
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	3302      	adds	r3, #2
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	4619      	mov	r1, r3
 8004eae:	4b38      	ldr	r3, [pc, #224]	@ (8004f90 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 8004eb0:	5c59      	ldrb	r1, [r3, r1]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	3302      	adds	r3, #2
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	4618      	mov	r0, r3
 8004eba:	4b36      	ldr	r3, [pc, #216]	@ (8004f94 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8004ebc:	5c1b      	ldrb	r3, [r3, r0]
 8004ebe:	404b      	eors	r3, r1
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	4053      	eors	r3, r2
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	3303      	adds	r3, #3
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	4619      	mov	r1, r3
 8004ece:	4b32      	ldr	r3, [pc, #200]	@ (8004f98 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 8004ed0:	5c59      	ldrb	r1, [r3, r1]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	3303      	adds	r3, #3
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	4b2e      	ldr	r3, [pc, #184]	@ (8004f94 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8004edc:	5c1b      	ldrb	r3, [r3, r0]
 8004ede:	404b      	eors	r3, r1
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	4053      	eors	r3, r2
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	72bb      	strb	r3, [r7, #10]
        tmp[3] = (phCryptoSym_Sw_Aes_times9[pState[0]] ^ phCryptoSym_Sw_Aes_times2[pState[0]]) ^ (phCryptoSym_Sw_Aes_timesC[pState[1]] ^ pState[1]) ^ phCryptoSym_Sw_Aes_times9[pState[2]] ^ (phCryptoSym_Sw_Aes_timesC[pState[3]] ^ phCryptoSym_Sw_Aes_times2[pState[3]]);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	461a      	mov	r2, r3
 8004eee:	4b2a      	ldr	r3, [pc, #168]	@ (8004f98 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 8004ef0:	5c9a      	ldrb	r2, [r3, r2]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	4b26      	ldr	r3, [pc, #152]	@ (8004f94 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8004efa:	5c5b      	ldrb	r3, [r3, r1]
 8004efc:	4053      	eors	r3, r2
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	3301      	adds	r3, #1
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	4619      	mov	r1, r3
 8004f08:	4b21      	ldr	r3, [pc, #132]	@ (8004f90 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 8004f0a:	5c59      	ldrb	r1, [r3, r1]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	404b      	eors	r3, r1
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	4053      	eors	r3, r2
 8004f18:	b2da      	uxtb	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	3302      	adds	r3, #2
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	4619      	mov	r1, r3
 8004f22:	4b1d      	ldr	r3, [pc, #116]	@ (8004f98 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 8004f24:	5c5b      	ldrb	r3, [r3, r1]
 8004f26:	4053      	eors	r3, r2
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	3303      	adds	r3, #3
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	4619      	mov	r1, r3
 8004f32:	4b17      	ldr	r3, [pc, #92]	@ (8004f90 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 8004f34:	5c59      	ldrb	r1, [r3, r1]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	3303      	adds	r3, #3
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	4b15      	ldr	r3, [pc, #84]	@ (8004f94 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8004f40:	5c1b      	ldrb	r3, [r3, r0]
 8004f42:	404b      	eors	r3, r1
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	4053      	eors	r3, r2
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	72fb      	strb	r3, [r7, #11]
#endif /* PH_CRYPTOSYM_SW_ROM_OPTIMIZATION */
        *pState++ = tmp[0];
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	1c5a      	adds	r2, r3, #1
 8004f50:	607a      	str	r2, [r7, #4]
 8004f52:	7a3a      	ldrb	r2, [r7, #8]
 8004f54:	701a      	strb	r2, [r3, #0]
        *pState++ = tmp[1];
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	1c5a      	adds	r2, r3, #1
 8004f5a:	607a      	str	r2, [r7, #4]
 8004f5c:	7a7a      	ldrb	r2, [r7, #9]
 8004f5e:	701a      	strb	r2, [r3, #0]
        *pState++ = tmp[2];
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	1c5a      	adds	r2, r3, #1
 8004f64:	607a      	str	r2, [r7, #4]
 8004f66:	7aba      	ldrb	r2, [r7, #10]
 8004f68:	701a      	strb	r2, [r3, #0]
        *pState++ = tmp[3];
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	1c5a      	adds	r2, r3, #1
 8004f6e:	607a      	str	r2, [r7, #4]
 8004f70:	7afa      	ldrb	r2, [r7, #11]
 8004f72:	701a      	strb	r2, [r3, #0]
    for (i=0;i<4U;i++)
 8004f74:	7bfb      	ldrb	r3, [r7, #15]
 8004f76:	3301      	adds	r3, #1
 8004f78:	73fb      	strb	r3, [r7, #15]
 8004f7a:	7bfb      	ldrb	r3, [r7, #15]
 8004f7c:	2b03      	cmp	r3, #3
 8004f7e:	f67f af1c 	bls.w	8004dba <phCryptoSym_Sw_Aes_InvMixColumns+0xe>
    }
}
 8004f82:	bf00      	nop
 8004f84:	bf00      	nop
 8004f86:	3714      	adds	r7, #20
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr
 8004f90:	080235bc 	.word	0x080235bc
 8004f94:	080233bc 	.word	0x080233bc
 8004f98:	080234bc 	.word	0x080234bc

08004f9c <phCryptoSym_Sw_Aes_AddRoundKey>:
#ifdef PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
void phCryptoSym_Sw_Aes_AddRoundKey(uint8_t PH_CRYTOSYM_SW_FAST_RAM * pState, uint8_t PH_CRYTOSYM_SW_FAST_RAM * pKey, uint8_t * pNkCurrent, uint8_t bNk, uint8_t bMode)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b089      	sub	sp, #36	@ 0x24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
 8004fa8:	70fb      	strb	r3, [r7, #3]
    uint8_t i = 0;
 8004faa:	2300      	movs	r3, #0
 8004fac:	77fb      	strb	r3, [r7, #31]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM bOffset;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM bModulus;

    /* NOTE: As pKey is an array of size bNk, the byte of the last round w[i-nk]is always in the same position as the byte currently operated on. */
    /* For each call of the function, 16 bytes of round key need to be calculated */
    for (i=0;i<4U;i++)
 8004fae:	2300      	movs	r3, #0
 8004fb0:	77fb      	strb	r3, [r7, #31]
 8004fb2:	e197      	b.n	80052e4 <phCryptoSym_Sw_Aes_AddRoundKey+0x348>
    {
        /* Find out, if we are in a "first" column, a "special" column or a "standard" column. */
        bModulus = *pNkCurrent % bNk;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	78fa      	ldrb	r2, [r7, #3]
 8004fba:	fbb3 f1f2 	udiv	r1, r3, r2
 8004fbe:	fb01 f202 	mul.w	r2, r1, r2
 8004fc2:	1a9b      	subs	r3, r3, r2
 8004fc4:	75fb      	strb	r3, [r7, #23]

        /* Generally the pCurKeyPtr can be calculated directly out of the bModulus */
        pCurKeyPtr = &pKey[bModulus << 2U];
 8004fc6:	7dfb      	ldrb	r3, [r7, #23]
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	4413      	add	r3, r2
 8004fce:	61bb      	str	r3, [r7, #24]

        /* In case of decryption, xoring has to be done upfront. */
        if (bMode == PH_CRYPTOSYM_KEYSCHEDULE_DECRYPTION)
 8004fd0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004fd4:	2bc0      	cmp	r3, #192	@ 0xc0
 8004fd6:	d150      	bne.n	800507a <phCryptoSym_Sw_Aes_AddRoundKey+0xde>
        {
            pState[((3U-i)*4U)] ^= *(pCurKeyPtr + 0U);
 8004fd8:	7ffb      	ldrb	r3, [r7, #31]
 8004fda:	f1c3 0303 	rsb	r3, r3, #3
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	7819      	ldrb	r1, [r3, #0]
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	781a      	ldrb	r2, [r3, #0]
 8004fea:	7ffb      	ldrb	r3, [r7, #31]
 8004fec:	f1c3 0303 	rsb	r3, r3, #3
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	4403      	add	r3, r0
 8004ff6:	404a      	eors	r2, r1
 8004ff8:	b2d2      	uxtb	r2, r2
 8004ffa:	701a      	strb	r2, [r3, #0]
            pState[((3U-i)*4U)+1U] ^= *(pCurKeyPtr + 1U);
 8004ffc:	7ffb      	ldrb	r3, [r7, #31]
 8004ffe:	f1c3 0303 	rsb	r3, r3, #3
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	3301      	adds	r3, #1
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	4413      	add	r3, r2
 800500a:	7819      	ldrb	r1, [r3, #0]
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	3301      	adds	r3, #1
 8005010:	781a      	ldrb	r2, [r3, #0]
 8005012:	7ffb      	ldrb	r3, [r7, #31]
 8005014:	f1c3 0303 	rsb	r3, r3, #3
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	3301      	adds	r3, #1
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	4403      	add	r3, r0
 8005020:	404a      	eors	r2, r1
 8005022:	b2d2      	uxtb	r2, r2
 8005024:	701a      	strb	r2, [r3, #0]
            pState[((3U-i)*4U)+2U] ^= *(pCurKeyPtr + 2U);
 8005026:	7ffb      	ldrb	r3, [r7, #31]
 8005028:	f1c3 0303 	rsb	r3, r3, #3
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	3302      	adds	r3, #2
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	4413      	add	r3, r2
 8005034:	7819      	ldrb	r1, [r3, #0]
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	3302      	adds	r3, #2
 800503a:	781a      	ldrb	r2, [r3, #0]
 800503c:	7ffb      	ldrb	r3, [r7, #31]
 800503e:	f1c3 0303 	rsb	r3, r3, #3
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	3302      	adds	r3, #2
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	4403      	add	r3, r0
 800504a:	404a      	eors	r2, r1
 800504c:	b2d2      	uxtb	r2, r2
 800504e:	701a      	strb	r2, [r3, #0]
            pState[((3U-i)*4U)+3U] ^= *(pCurKeyPtr + 3U);
 8005050:	7ffb      	ldrb	r3, [r7, #31]
 8005052:	f1c3 0303 	rsb	r3, r3, #3
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	3303      	adds	r3, #3
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	4413      	add	r3, r2
 800505e:	7819      	ldrb	r1, [r3, #0]
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	3303      	adds	r3, #3
 8005064:	781a      	ldrb	r2, [r3, #0]
 8005066:	7ffb      	ldrb	r3, [r7, #31]
 8005068:	f1c3 0303 	rsb	r3, r3, #3
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	3303      	adds	r3, #3
 8005070:	68f8      	ldr	r0, [r7, #12]
 8005072:	4403      	add	r3, r0
 8005074:	404a      	eors	r2, r1
 8005076:	b2d2      	uxtb	r2, r2
 8005078:	701a      	strb	r2, [r3, #0]
        }

        if (*pNkCurrent < bNk)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	78fa      	ldrb	r2, [r7, #3]
 8005080:	429a      	cmp	r2, r3
 8005082:	d903      	bls.n	800508c <phCryptoSym_Sw_Aes_AddRoundKey+0xf0>
        {
            /* w[i] = word(key[4U*i], key[4U*i+1U], key[4U*i+2U], key[4U*i+3U]) */
            /* Just increment the current key pointer, as the key is already stored internally...*/
            pCurKeyPtr += 4U;
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	3304      	adds	r3, #4
 8005088:	61bb      	str	r3, [r7, #24]
 800508a:	e0d1      	b.n	8005230 <phCryptoSym_Sw_Aes_AddRoundKey+0x294>
        }else
        {
            if ( bModulus == 0U)
 800508c:	7dfb      	ldrb	r3, [r7, #23]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d153      	bne.n	800513a <phCryptoSym_Sw_Aes_AddRoundKey+0x19e>
            {
                /* First find the offset to w[i-1] */
                bOffset = (uint8_t)(((uint8_t)((uint8_t)bNk-1U)<<2U) + 1U);
 8005092:	78fb      	ldrb	r3, [r7, #3]
 8005094:	3b01      	subs	r3, #1
 8005096:	b2db      	uxtb	r3, r3
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	b2db      	uxtb	r3, r3
 800509c:	3301      	adds	r3, #1
 800509e:	75bb      	strb	r3, [r7, #22]
                /* now calculate the following calculation: */
                /* w[i] = w[i-Nk] xor SubWord(RotWord(w[i-1])) xor Rcon[i/Nk] */
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr+bOffset)] ^ phCryptoSym_Sw_Aes_Rcon[(*pNkCurrent)/bNk - 1U];
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	781a      	ldrb	r2, [r3, #0]
 80050a4:	7dbb      	ldrb	r3, [r7, #22]
 80050a6:	69b9      	ldr	r1, [r7, #24]
 80050a8:	440b      	add	r3, r1
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	4619      	mov	r1, r3
 80050ae:	4b93      	ldr	r3, [pc, #588]	@ (80052fc <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 80050b0:	5c59      	ldrb	r1, [r3, r1]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	7818      	ldrb	r0, [r3, #0]
 80050b6:	78fb      	ldrb	r3, [r7, #3]
 80050b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	3b01      	subs	r3, #1
 80050c0:	488f      	ldr	r0, [pc, #572]	@ (8005300 <phCryptoSym_Sw_Aes_AddRoundKey+0x364>)
 80050c2:	5cc3      	ldrb	r3, [r0, r3]
 80050c4:	404b      	eors	r3, r1
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	4053      	eors	r3, r2
 80050ca:	b2da      	uxtb	r2, r3
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	3301      	adds	r3, #1
 80050d4:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr+bOffset)];
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	781a      	ldrb	r2, [r3, #0]
 80050da:	7dbb      	ldrb	r3, [r7, #22]
 80050dc:	69b9      	ldr	r1, [r7, #24]
 80050de:	440b      	add	r3, r1
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	4619      	mov	r1, r3
 80050e4:	4b85      	ldr	r3, [pc, #532]	@ (80052fc <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 80050e6:	5c5b      	ldrb	r3, [r3, r1]
 80050e8:	4053      	eors	r3, r2
 80050ea:	b2da      	uxtb	r2, r3
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	3301      	adds	r3, #1
 80050f4:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr+bOffset)];
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	781a      	ldrb	r2, [r3, #0]
 80050fa:	7dbb      	ldrb	r3, [r7, #22]
 80050fc:	69b9      	ldr	r1, [r7, #24]
 80050fe:	440b      	add	r3, r1
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	4619      	mov	r1, r3
 8005104:	4b7d      	ldr	r3, [pc, #500]	@ (80052fc <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8005106:	5c5b      	ldrb	r3, [r3, r1]
 8005108:	4053      	eors	r3, r2
 800510a:	b2da      	uxtb	r2, r3
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	3301      	adds	r3, #1
 8005114:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr+bOffset - 4U)];
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	781a      	ldrb	r2, [r3, #0]
 800511a:	7dbb      	ldrb	r3, [r7, #22]
 800511c:	3b04      	subs	r3, #4
 800511e:	69b9      	ldr	r1, [r7, #24]
 8005120:	440b      	add	r3, r1
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	4619      	mov	r1, r3
 8005126:	4b75      	ldr	r3, [pc, #468]	@ (80052fc <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8005128:	5c5b      	ldrb	r3, [r3, r1]
 800512a:	4053      	eors	r3, r2
 800512c:	b2da      	uxtb	r2, r3
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	3301      	adds	r3, #1
 8005136:	61bb      	str	r3, [r7, #24]
 8005138:	e07a      	b.n	8005230 <phCryptoSym_Sw_Aes_AddRoundKey+0x294>
            }else if ((bNk == 8U) && ((*pNkCurrent % bNk) == 4U))
 800513a:	78fb      	ldrb	r3, [r7, #3]
 800513c:	2b08      	cmp	r3, #8
 800513e:	d147      	bne.n	80051d0 <phCryptoSym_Sw_Aes_AddRoundKey+0x234>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	78fa      	ldrb	r2, [r7, #3]
 8005146:	fbb3 f1f2 	udiv	r1, r3, r2
 800514a:	fb01 f202 	mul.w	r2, r1, r2
 800514e:	1a9b      	subs	r3, r3, r2
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b04      	cmp	r3, #4
 8005154:	d13c      	bne.n	80051d0 <phCryptoSym_Sw_Aes_AddRoundKey+0x234>
            {
                /* w[i] = w[i-Nk] xor SubWord(w[i-1]) */
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr-4U)];
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	781a      	ldrb	r2, [r3, #0]
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	3b04      	subs	r3, #4
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	4619      	mov	r1, r3
 8005162:	4b66      	ldr	r3, [pc, #408]	@ (80052fc <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8005164:	5c5b      	ldrb	r3, [r3, r1]
 8005166:	4053      	eors	r3, r2
 8005168:	b2da      	uxtb	r2, r3
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	3301      	adds	r3, #1
 8005172:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr-4U)];
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	781a      	ldrb	r2, [r3, #0]
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	3b04      	subs	r3, #4
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	4619      	mov	r1, r3
 8005180:	4b5e      	ldr	r3, [pc, #376]	@ (80052fc <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8005182:	5c5b      	ldrb	r3, [r3, r1]
 8005184:	4053      	eors	r3, r2
 8005186:	b2da      	uxtb	r2, r3
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	3301      	adds	r3, #1
 8005190:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr-4U)];
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	781a      	ldrb	r2, [r3, #0]
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	3b04      	subs	r3, #4
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	4619      	mov	r1, r3
 800519e:	4b57      	ldr	r3, [pc, #348]	@ (80052fc <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 80051a0:	5c5b      	ldrb	r3, [r3, r1]
 80051a2:	4053      	eors	r3, r2
 80051a4:	b2da      	uxtb	r2, r3
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	3301      	adds	r3, #1
 80051ae:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr-4U)];
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	781a      	ldrb	r2, [r3, #0]
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	3b04      	subs	r3, #4
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	4619      	mov	r1, r3
 80051bc:	4b4f      	ldr	r3, [pc, #316]	@ (80052fc <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 80051be:	5c5b      	ldrb	r3, [r3, r1]
 80051c0:	4053      	eors	r3, r2
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	3301      	adds	r3, #1
 80051cc:	61bb      	str	r3, [r7, #24]
 80051ce:	e02f      	b.n	8005230 <phCryptoSym_Sw_Aes_AddRoundKey+0x294>
            }else
            {
                /* w[i] = w[i-Nk] xor w[i-1] */
                *pCurKeyPtr ^= *(pCurKeyPtr-4U);
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	781a      	ldrb	r2, [r3, #0]
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	3b04      	subs	r3, #4
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	4053      	eors	r3, r2
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	3301      	adds	r3, #1
 80051e6:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= *(pCurKeyPtr-4U);
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	781a      	ldrb	r2, [r3, #0]
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	3b04      	subs	r3, #4
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	4053      	eors	r3, r2
 80051f4:	b2da      	uxtb	r2, r3
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	3301      	adds	r3, #1
 80051fe:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= *(pCurKeyPtr-4U);
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	781a      	ldrb	r2, [r3, #0]
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	3b04      	subs	r3, #4
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	4053      	eors	r3, r2
 800520c:	b2da      	uxtb	r2, r3
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	3301      	adds	r3, #1
 8005216:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= *(pCurKeyPtr-4U);
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	781a      	ldrb	r2, [r3, #0]
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	3b04      	subs	r3, #4
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	4053      	eors	r3, r2
 8005224:	b2da      	uxtb	r2, r3
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	3301      	adds	r3, #1
 800522e:	61bb      	str	r3, [r7, #24]
            }
        }

        /* In case of encryption and key initialization for decryption, we have to increment, else we have to decrement NkCurrent */
        if (bMode != PH_CRYPTOSYM_KEYSCHEDULE_DECRYPTION)
 8005230:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005234:	2bc0      	cmp	r3, #192	@ 0xc0
 8005236:	d006      	beq.n	8005246 <phCryptoSym_Sw_Aes_AddRoundKey+0x2aa>
        {
            (*pNkCurrent)++;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	3301      	adds	r3, #1
 800523e:	b2da      	uxtb	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	701a      	strb	r2, [r3, #0]
 8005244:	e005      	b.n	8005252 <phCryptoSym_Sw_Aes_AddRoundKey+0x2b6>
        }else
        {
            (*pNkCurrent)--;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	3b01      	subs	r3, #1
 800524c:	b2da      	uxtb	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	701a      	strb	r2, [r3, #0]
        }

        /* In case of encryption, xoring has to be done at the end. */
        if (bMode == PH_CRYPTOSYM_KEYSCHEDULE_ENCRYPTION)
 8005252:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005256:	2b0f      	cmp	r3, #15
 8005258:	d141      	bne.n	80052de <phCryptoSym_Sw_Aes_AddRoundKey+0x342>
        {
            pState[(i*4U)] ^= *(pCurKeyPtr - 4U);
 800525a:	7ffb      	ldrb	r3, [r7, #31]
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	4413      	add	r3, r2
 8005262:	7819      	ldrb	r1, [r3, #0]
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	3b04      	subs	r3, #4
 8005268:	781a      	ldrb	r2, [r3, #0]
 800526a:	7ffb      	ldrb	r3, [r7, #31]
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	4403      	add	r3, r0
 8005272:	404a      	eors	r2, r1
 8005274:	b2d2      	uxtb	r2, r2
 8005276:	701a      	strb	r2, [r3, #0]
            pState[(i*4U)+1U] ^= *(pCurKeyPtr - 3U);
 8005278:	7ffb      	ldrb	r3, [r7, #31]
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	3301      	adds	r3, #1
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	4413      	add	r3, r2
 8005282:	7819      	ldrb	r1, [r3, #0]
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	3b03      	subs	r3, #3
 8005288:	781a      	ldrb	r2, [r3, #0]
 800528a:	7ffb      	ldrb	r3, [r7, #31]
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	3301      	adds	r3, #1
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	4403      	add	r3, r0
 8005294:	404a      	eors	r2, r1
 8005296:	b2d2      	uxtb	r2, r2
 8005298:	701a      	strb	r2, [r3, #0]
            pState[(i*4U)+2U] ^= *(pCurKeyPtr - 2U);
 800529a:	7ffb      	ldrb	r3, [r7, #31]
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	3302      	adds	r3, #2
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	4413      	add	r3, r2
 80052a4:	7819      	ldrb	r1, [r3, #0]
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	3b02      	subs	r3, #2
 80052aa:	781a      	ldrb	r2, [r3, #0]
 80052ac:	7ffb      	ldrb	r3, [r7, #31]
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	3302      	adds	r3, #2
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	4403      	add	r3, r0
 80052b6:	404a      	eors	r2, r1
 80052b8:	b2d2      	uxtb	r2, r2
 80052ba:	701a      	strb	r2, [r3, #0]
            pState[(i*4U)+3U] ^= *(pCurKeyPtr - 1U);
 80052bc:	7ffb      	ldrb	r3, [r7, #31]
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	3303      	adds	r3, #3
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	4413      	add	r3, r2
 80052c6:	7819      	ldrb	r1, [r3, #0]
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	3b01      	subs	r3, #1
 80052cc:	781a      	ldrb	r2, [r3, #0]
 80052ce:	7ffb      	ldrb	r3, [r7, #31]
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	3303      	adds	r3, #3
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	4403      	add	r3, r0
 80052d8:	404a      	eors	r2, r1
 80052da:	b2d2      	uxtb	r2, r2
 80052dc:	701a      	strb	r2, [r3, #0]
    for (i=0;i<4U;i++)
 80052de:	7ffb      	ldrb	r3, [r7, #31]
 80052e0:	3301      	adds	r3, #1
 80052e2:	77fb      	strb	r3, [r7, #31]
 80052e4:	7ffb      	ldrb	r3, [r7, #31]
 80052e6:	2b03      	cmp	r3, #3
 80052e8:	f67f ae64 	bls.w	8004fb4 <phCryptoSym_Sw_Aes_AddRoundKey+0x18>
        }
    }
}
 80052ec:	bf00      	nop
 80052ee:	bf00      	nop
 80052f0:	3724      	adds	r7, #36	@ 0x24
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	080231bc 	.word	0x080231bc
 8005300:	080236bc 	.word	0x080236bc

08005304 <phCryptoSym_Sw_Des_KeyInit>:
phStatus_t  phCryptoSym_Sw_Des_KeyInit(
                                       phCryptoSym_Sw_DataParams_t * pDataParams,
                                       const uint8_t * pKey,
                                       uint8_t bNumKeys
                                       )
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	4613      	mov	r3, r2
 8005310:	71fb      	strb	r3, [r7, #7]
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
    uint8_t PH_CRYTOSYM_SW_FAST_RAM bTmpKey[PH_CRYPTOSYM_DES_KEY_SIZE];
#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */

    /* In case of online key expansion we only calculate P1 in this step*/
    while(0u != bNumKeys--)
 8005312:	e00b      	b.n	800532c <phCryptoSym_Sw_Des_KeyInit+0x28>
        /* take the key, starting with the last one and write the result to the internal keybuffer. */
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
        phCryptoSym_Sw_Des_PC1_Permutation(&pKey[bNumKeys << 3U], bTmpKey);
        (void)memcpy(&pDataParams->pKey[bNumKeys << 3U], bTmpKey, PH_CRYPTOSYM_DES_KEY_SIZE);
#else
        phCryptoSym_Sw_Des_PC1_Permutation(&pKey[bNumKeys << 3U], &pDataParams->pKey[bNumKeys << 3U]);
 8005314:	79fb      	ldrb	r3, [r7, #7]
 8005316:	00db      	lsls	r3, r3, #3
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	18d0      	adds	r0, r2, r3
 800531c:	79fb      	ldrb	r3, [r7, #7]
 800531e:	00db      	lsls	r3, r3, #3
 8005320:	3308      	adds	r3, #8
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	4413      	add	r3, r2
 8005326:	4619      	mov	r1, r3
 8005328:	f000 f9f0 	bl	800570c <phCryptoSym_Sw_Des_PC1_Permutation>
    while(0u != bNumKeys--)
 800532c:	79fb      	ldrb	r3, [r7, #7]
 800532e:	1e5a      	subs	r2, r3, #1
 8005330:	71fa      	strb	r2, [r7, #7]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1ee      	bne.n	8005314 <phCryptoSym_Sw_Des_KeyInit+0x10>
    /* Clear TmpKey */
    (void)memset(bTmpKey, 0x00, (size_t)sizeof(bTmpKey));
#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */

    return PH_ERR_SUCCESS;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <phCryptoSym_Sw_Des_EncryptBlock>:
phStatus_t  phCryptoSym_Sw_Des_EncryptBlock(
    phCryptoSym_Sw_DataParams_t * pDataParams,
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pBlock,
    uint8_t bKeyNumber
    )
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b088      	sub	sp, #32
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	4613      	mov	r3, r2
 800534c:	71fb      	strb	r3, [r7, #7]
#else
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
    (void)memcpy(pTmpKey, &pDataParams->pKey[(bKeyNumber << 3U)], PH_CRYPTOSYM_DES_KEY_SIZE);
    pKey = pTmpKey;
#else
    pKey = &pDataParams->pKey[(bKeyNumber << 3U)];
 800534e:	79fb      	ldrb	r3, [r7, #7]
 8005350:	00db      	lsls	r3, r3, #3
 8005352:	3308      	adds	r3, #8
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	4413      	add	r3, r2
 8005358:	61bb      	str	r3, [r7, #24]
#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */

    phCryptoSym_Sw_Des_Permutate_IP(pBlock, pTmp);
 800535a:	f107 0310 	add.w	r3, r7, #16
 800535e:	4619      	mov	r1, r3
 8005360:	68b8      	ldr	r0, [r7, #8]
 8005362:	f000 f887 	bl	8005474 <phCryptoSym_Sw_Des_Permutate_IP>

    for (i = 0; i < 16U; i++)
 8005366:	2300      	movs	r3, #0
 8005368:	77fb      	strb	r3, [r7, #31]
 800536a:	e021      	b.n	80053b0 <phCryptoSym_Sw_Des_EncryptBlock+0x70>
    {
#ifdef  PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
        phCryptoSym_Sw_Des_RotateLeft28(pKey, key_rotation[i]);
 800536c:	7ffb      	ldrb	r3, [r7, #31]
 800536e:	4a1a      	ldr	r2, [pc, #104]	@ (80053d8 <phCryptoSym_Sw_Des_EncryptBlock+0x98>)
 8005370:	5cd3      	ldrb	r3, [r2, r3]
 8005372:	4619      	mov	r1, r3
 8005374:	69b8      	ldr	r0, [r7, #24]
 8005376:	f000 fd8f 	bl	8005e98 <phCryptoSym_Sw_Des_RotateLeft28>
        phCryptoSym_Sw_Des_RotateLeft28(&pKey[4], key_rotation[i]);
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	1d1a      	adds	r2, r3, #4
 800537e:	7ffb      	ldrb	r3, [r7, #31]
 8005380:	4915      	ldr	r1, [pc, #84]	@ (80053d8 <phCryptoSym_Sw_Des_EncryptBlock+0x98>)
 8005382:	5ccb      	ldrb	r3, [r1, r3]
 8005384:	4619      	mov	r1, r3
 8005386:	4610      	mov	r0, r2
 8005388:	f000 fd86 	bl	8005e98 <phCryptoSym_Sw_Des_RotateLeft28>
        phCryptoSym_Sw_Des_PC2_Permutation(pKey , &pDataParams->pKey[PH_CRYPTOSYM_3K3DES_KEY_SIZE]);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	3320      	adds	r3, #32
 8005390:	4619      	mov	r1, r3
 8005392:	69b8      	ldr	r0, [r7, #24]
 8005394:	f000 fa3f 	bl	8005816 <phCryptoSym_Sw_Des_PC2_Permutation>
        phCryptoSym_Sw_Des_ComputeRound(pTmp, &pDataParams->pKey[PH_CRYPTOSYM_3K3DES_KEY_SIZE]);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f103 0220 	add.w	r2, r3, #32
 800539e:	f107 0310 	add.w	r3, r7, #16
 80053a2:	4611      	mov	r1, r2
 80053a4:	4618      	mov	r0, r3
 80053a6:	f000 fdc2 	bl	8005f2e <phCryptoSym_Sw_Des_ComputeRound>
    for (i = 0; i < 16U; i++)
 80053aa:	7ffb      	ldrb	r3, [r7, #31]
 80053ac:	3301      	adds	r3, #1
 80053ae:	77fb      	strb	r3, [r7, #31]
 80053b0:	7ffb      	ldrb	r3, [r7, #31]
 80053b2:	2b0f      	cmp	r3, #15
 80053b4:	d9da      	bls.n	800536c <phCryptoSym_Sw_Des_EncryptBlock+0x2c>
#else
        phCryptoSym_Sw_Des_ComputeRound(pTmp, &pKey[i << 3U]);
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
    }

    phCryptoSym_Sw_Des_Swap(pTmp);
 80053b6:	f107 0310 	add.w	r3, r7, #16
 80053ba:	4618      	mov	r0, r3
 80053bc:	f000 fdf3 	bl	8005fa6 <phCryptoSym_Sw_Des_Swap>

    phCryptoSym_Sw_Des_Permutate_IP_Inv(pTmp, pBlock);
 80053c0:	f107 0310 	add.w	r3, r7, #16
 80053c4:	68b9      	ldr	r1, [r7, #8]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f000 f8f3 	bl	80055b2 <phCryptoSym_Sw_Des_Permutate_IP_Inv>
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
    /* Clear TmpKey */
    (void)memset(pTmpKey, 0x00, (size_t)sizeof(pTmpKey));
#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
    return PH_ERR_SUCCESS;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3720      	adds	r7, #32
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	080236c8 	.word	0x080236c8

080053dc <phCryptoSym_Sw_Des_DecryptBlock>:
phStatus_t  phCryptoSym_Sw_Des_DecryptBlock(
    phCryptoSym_Sw_DataParams_t * pDataParams,
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pBlock,
    uint8_t bKeyNumber
    )
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b088      	sub	sp, #32
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	4613      	mov	r3, r2
 80053e8:	71fb      	strb	r3, [r7, #7]
#else
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
    (void)memcpy(pTmpKey, &pDataParams->pKey[(bKeyNumber << 3U)], PH_CRYPTOSYM_DES_KEY_SIZE);
    pKey = pTmpKey;
#else
    pKey = &pDataParams->pKey[(bKeyNumber << 3U)];
 80053ea:	79fb      	ldrb	r3, [r7, #7]
 80053ec:	00db      	lsls	r3, r3, #3
 80053ee:	3308      	adds	r3, #8
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	4413      	add	r3, r2
 80053f4:	61bb      	str	r3, [r7, #24]
#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */

    phCryptoSym_Sw_Des_Permutate_IP(pBlock, pTmpBlock);
 80053f6:	f107 0310 	add.w	r3, r7, #16
 80053fa:	4619      	mov	r1, r3
 80053fc:	68b8      	ldr	r0, [r7, #8]
 80053fe:	f000 f839 	bl	8005474 <phCryptoSym_Sw_Des_Permutate_IP>

    i = 15;
 8005402:	230f      	movs	r3, #15
 8005404:	77fb      	strb	r3, [r7, #31]
    do
    {
#ifdef  PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
        phCryptoSym_Sw_Des_PC2_Permutation(pKey , &pDataParams->pKey[PH_CRYPTOSYM_3K3DES_KEY_SIZE]);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	3320      	adds	r3, #32
 800540a:	4619      	mov	r1, r3
 800540c:	69b8      	ldr	r0, [r7, #24]
 800540e:	f000 fa02 	bl	8005816 <phCryptoSym_Sw_Des_PC2_Permutation>
        phCryptoSym_Sw_Des_RotateRight28(pKey, key_rotation[i]);
 8005412:	7ffb      	ldrb	r3, [r7, #31]
 8005414:	4a16      	ldr	r2, [pc, #88]	@ (8005470 <phCryptoSym_Sw_Des_DecryptBlock+0x94>)
 8005416:	5cd3      	ldrb	r3, [r2, r3]
 8005418:	4619      	mov	r1, r3
 800541a:	69b8      	ldr	r0, [r7, #24]
 800541c:	f000 fce5 	bl	8005dea <phCryptoSym_Sw_Des_RotateRight28>
        phCryptoSym_Sw_Des_RotateRight28(&pKey[4], key_rotation[i]);
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	1d1a      	adds	r2, r3, #4
 8005424:	7ffb      	ldrb	r3, [r7, #31]
 8005426:	4912      	ldr	r1, [pc, #72]	@ (8005470 <phCryptoSym_Sw_Des_DecryptBlock+0x94>)
 8005428:	5ccb      	ldrb	r3, [r1, r3]
 800542a:	4619      	mov	r1, r3
 800542c:	4610      	mov	r0, r2
 800542e:	f000 fcdc 	bl	8005dea <phCryptoSym_Sw_Des_RotateRight28>
        phCryptoSym_Sw_Des_ComputeRound(pTmpBlock, &pDataParams->pKey[PH_CRYPTOSYM_3K3DES_KEY_SIZE]);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f103 0220 	add.w	r2, r3, #32
 8005438:	f107 0310 	add.w	r3, r7, #16
 800543c:	4611      	mov	r1, r2
 800543e:	4618      	mov	r0, r3
 8005440:	f000 fd75 	bl	8005f2e <phCryptoSym_Sw_Des_ComputeRound>
#else
        phCryptoSym_Sw_Des_ComputeRound(pTmpBlock, &pKey[i << 3U]);
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
    }while(i-- > 0U);
 8005444:	7ffb      	ldrb	r3, [r7, #31]
 8005446:	1e5a      	subs	r2, r3, #1
 8005448:	77fa      	strb	r2, [r7, #31]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1db      	bne.n	8005406 <phCryptoSym_Sw_Des_DecryptBlock+0x2a>

    phCryptoSym_Sw_Des_Swap(pTmpBlock);
 800544e:	f107 0310 	add.w	r3, r7, #16
 8005452:	4618      	mov	r0, r3
 8005454:	f000 fda7 	bl	8005fa6 <phCryptoSym_Sw_Des_Swap>

    phCryptoSym_Sw_Des_Permutate_IP_Inv(pTmpBlock, pBlock);
 8005458:	f107 0310 	add.w	r3, r7, #16
 800545c:	68b9      	ldr	r1, [r7, #8]
 800545e:	4618      	mov	r0, r3
 8005460:	f000 f8a7 	bl	80055b2 <phCryptoSym_Sw_Des_Permutate_IP_Inv>

    return PH_ERR_SUCCESS;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3720      	adds	r7, #32
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	080236c8 	.word	0x080236c8

08005474 <phCryptoSym_Sw_Des_Permutate_IP>:

void  phCryptoSym_Sw_Des_Permutate_IP(
                                      uint8_t PH_CRYTOSYM_SW_FAST_RAM * pStateIn,
                                      uint8_t PH_CRYTOSYM_SW_FAST_RAM * pStateOut
                                      )
{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
    /* round 3: pStateOut[7]: 63 55 47 39 31 23 15 7 */
    /* round 3: pStateOut[3]: 64 56 48 40 32 24 16 8 */

    uint8_t PH_CRYTOSYM_SW_FAST_RAM i;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM j;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM* outTmp = pStateOut;
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	60bb      	str	r3, [r7, #8]

    /* Outer loop to iterate over output byte pairs 4,0, 5,1, 6,2, 7,2 */
    for (i=0;i<4U;i++)
 8005482:	2300      	movs	r3, #0
 8005484:	73fb      	strb	r3, [r7, #15]
 8005486:	e089      	b.n	800559c <phCryptoSym_Sw_Des_Permutate_IP+0x128>
    {
        /* Set output bytes to 0x00 to be able to OR in the loop */
        outTmp[0]=0x00;
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	2200      	movs	r2, #0
 800548c:	701a      	strb	r2, [r3, #0]
        outTmp[4]=0x00;
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	3304      	adds	r3, #4
 8005492:	2200      	movs	r2, #0
 8005494:	701a      	strb	r2, [r3, #0]

        /* Inner loop to iterate over input bytes */
        for (j=0;j<7U;j++)
 8005496:	2300      	movs	r3, #0
 8005498:	73bb      	strb	r3, [r7, #14]
 800549a:	e046      	b.n	800552a <phCryptoSym_Sw_Des_Permutate_IP+0xb6>
        {
            /* Take MSBit of input, shift output to right to make space for next input bit
            and input to left to get next bit at the bit position 7.*/
            outTmp[4] |= (uint8_t)(pStateIn[j] & 0x80U);
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	3304      	adds	r3, #4
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	b25a      	sxtb	r2, r3
 80054a4:	7bbb      	ldrb	r3, [r7, #14]
 80054a6:	6879      	ldr	r1, [r7, #4]
 80054a8:	440b      	add	r3, r1
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	b25b      	sxtb	r3, r3
 80054ae:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80054b2:	b25b      	sxtb	r3, r3
 80054b4:	4313      	orrs	r3, r2
 80054b6:	b25a      	sxtb	r2, r3
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	3304      	adds	r3, #4
 80054bc:	b2d2      	uxtb	r2, r2
 80054be:	701a      	strb	r2, [r3, #0]
            outTmp[4] >>= 1U;
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	3304      	adds	r3, #4
 80054c4:	781a      	ldrb	r2, [r3, #0]
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	3304      	adds	r3, #4
 80054ca:	0852      	lsrs	r2, r2, #1
 80054cc:	b2d2      	uxtb	r2, r2
 80054ce:	701a      	strb	r2, [r3, #0]
            pStateIn[j] <<= 1U;
 80054d0:	7bbb      	ldrb	r3, [r7, #14]
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	4413      	add	r3, r2
 80054d6:	781a      	ldrb	r2, [r3, #0]
 80054d8:	7bbb      	ldrb	r3, [r7, #14]
 80054da:	6879      	ldr	r1, [r7, #4]
 80054dc:	440b      	add	r3, r1
 80054de:	0052      	lsls	r2, r2, #1
 80054e0:	b2d2      	uxtb	r2, r2
 80054e2:	701a      	strb	r2, [r3, #0]
            /* Take MSBit of input, shift output to right to make space for next input bit
            and input to left to get next bit at the bit position 7.*/
            outTmp[0] |= (uint8_t)(pStateIn[j] & 0x80U);
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	b25a      	sxtb	r2, r3
 80054ea:	7bbb      	ldrb	r3, [r7, #14]
 80054ec:	6879      	ldr	r1, [r7, #4]
 80054ee:	440b      	add	r3, r1
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	b25b      	sxtb	r3, r3
 80054f4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80054f8:	b25b      	sxtb	r3, r3
 80054fa:	4313      	orrs	r3, r2
 80054fc:	b25b      	sxtb	r3, r3
 80054fe:	b2da      	uxtb	r2, r3
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	701a      	strb	r2, [r3, #0]
            outTmp[0] >>= 1U;
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	085b      	lsrs	r3, r3, #1
 800550a:	b2da      	uxtb	r2, r3
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	701a      	strb	r2, [r3, #0]
            pStateIn[j] <<= 1U;
 8005510:	7bbb      	ldrb	r3, [r7, #14]
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	4413      	add	r3, r2
 8005516:	781a      	ldrb	r2, [r3, #0]
 8005518:	7bbb      	ldrb	r3, [r7, #14]
 800551a:	6879      	ldr	r1, [r7, #4]
 800551c:	440b      	add	r3, r1
 800551e:	0052      	lsls	r2, r2, #1
 8005520:	b2d2      	uxtb	r2, r2
 8005522:	701a      	strb	r2, [r3, #0]
        for (j=0;j<7U;j++)
 8005524:	7bbb      	ldrb	r3, [r7, #14]
 8005526:	3301      	adds	r3, #1
 8005528:	73bb      	strb	r3, [r7, #14]
 800552a:	7bbb      	ldrb	r3, [r7, #14]
 800552c:	2b06      	cmp	r3, #6
 800552e:	d9b5      	bls.n	800549c <phCryptoSym_Sw_Des_Permutate_IP+0x28>
        }
        /* Take MSBit of input, do not shift output, as the byte is already full.
        and input to left to get next bit at the bit position 7.*/
        outTmp[4] |= (uint8_t)(pStateIn[7] & 0x80U);
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	3304      	adds	r3, #4
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	b25a      	sxtb	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	3307      	adds	r3, #7
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	b25b      	sxtb	r3, r3
 8005540:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005544:	b25b      	sxtb	r3, r3
 8005546:	4313      	orrs	r3, r2
 8005548:	b25a      	sxtb	r2, r3
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	3304      	adds	r3, #4
 800554e:	b2d2      	uxtb	r2, r2
 8005550:	701a      	strb	r2, [r3, #0]
        pStateIn[7] <<= 1U;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	3307      	adds	r3, #7
 8005556:	781a      	ldrb	r2, [r3, #0]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	3307      	adds	r3, #7
 800555c:	0052      	lsls	r2, r2, #1
 800555e:	b2d2      	uxtb	r2, r2
 8005560:	701a      	strb	r2, [r3, #0]
        outTmp[0] |= (uint8_t)(pStateIn[7] & 0x80U);
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	b25a      	sxtb	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	3307      	adds	r3, #7
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	b25b      	sxtb	r3, r3
 8005570:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005574:	b25b      	sxtb	r3, r3
 8005576:	4313      	orrs	r3, r2
 8005578:	b25b      	sxtb	r3, r3
 800557a:	b2da      	uxtb	r2, r3
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	701a      	strb	r2, [r3, #0]
        pStateIn[7] <<= 1U;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	3307      	adds	r3, #7
 8005584:	781a      	ldrb	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	3307      	adds	r3, #7
 800558a:	0052      	lsls	r2, r2, #1
 800558c:	b2d2      	uxtb	r2, r2
 800558e:	701a      	strb	r2, [r3, #0]
        /* Increment base pointer to get next output byte pair. */
        outTmp++;
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	3301      	adds	r3, #1
 8005594:	60bb      	str	r3, [r7, #8]
    for (i=0;i<4U;i++)
 8005596:	7bfb      	ldrb	r3, [r7, #15]
 8005598:	3301      	adds	r3, #1
 800559a:	73fb      	strb	r3, [r7, #15]
 800559c:	7bfb      	ldrb	r3, [r7, #15]
 800559e:	2b03      	cmp	r3, #3
 80055a0:	f67f af72 	bls.w	8005488 <phCryptoSym_Sw_Des_Permutate_IP+0x14>
    }
}
 80055a4:	bf00      	nop
 80055a6:	bf00      	nop
 80055a8:	3714      	adds	r7, #20
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr

080055b2 <phCryptoSym_Sw_Des_Permutate_IP_Inv>:

void  phCryptoSym_Sw_Des_Permutate_IP_Inv(
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pStateIn,
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pStateOut
    )
{
 80055b2:	b480      	push	{r7}
 80055b4:	b085      	sub	sp, #20
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
 80055ba:	6039      	str	r1, [r7, #0]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * inTmp;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM i;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM j;

    /* Outer loop to iterate over all output bytes */
    for (i=0;i<8U;i++)
 80055bc:	2300      	movs	r3, #0
 80055be:	72fb      	strb	r3, [r7, #11]
 80055c0:	e099      	b.n	80056f6 <phCryptoSym_Sw_Des_Permutate_IP_Inv+0x144>
    {
        pStateOut[i]=0x00;
 80055c2:	7afb      	ldrb	r3, [r7, #11]
 80055c4:	683a      	ldr	r2, [r7, #0]
 80055c6:	4413      	add	r3, r2
 80055c8:	2200      	movs	r2, #0
 80055ca:	701a      	strb	r2, [r3, #0]
        inTmp = pStateIn;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	60fb      	str	r3, [r7, #12]
        /* Inner loop to iterate over input byte pairs 4,0, 5,1, 6,2, */
        for (j=0;j<3U;j++)
 80055d0:	2300      	movs	r3, #0
 80055d2:	72bb      	strb	r3, [r7, #10]
 80055d4:	e04c      	b.n	8005670 <phCryptoSym_Sw_Des_Permutate_IP_Inv+0xbe>
        {
            /* Take LSBit of input bytes base[4] and base[0], shift output to left
            to make space for next input bit and input to rigth to get next bit at
            the bit position 1.*/
            pStateOut[i] |= (uint8_t)(inTmp[4] & 0x01U);
 80055d6:	7afb      	ldrb	r3, [r7, #11]
 80055d8:	683a      	ldr	r2, [r7, #0]
 80055da:	4413      	add	r3, r2
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	b25a      	sxtb	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	3304      	adds	r3, #4
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	b25b      	sxtb	r3, r3
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	b25b      	sxtb	r3, r3
 80055ee:	4313      	orrs	r3, r2
 80055f0:	b259      	sxtb	r1, r3
 80055f2:	7afb      	ldrb	r3, [r7, #11]
 80055f4:	683a      	ldr	r2, [r7, #0]
 80055f6:	4413      	add	r3, r2
 80055f8:	b2ca      	uxtb	r2, r1
 80055fa:	701a      	strb	r2, [r3, #0]
            pStateOut[i] <<= 1U;
 80055fc:	7afb      	ldrb	r3, [r7, #11]
 80055fe:	683a      	ldr	r2, [r7, #0]
 8005600:	4413      	add	r3, r2
 8005602:	781a      	ldrb	r2, [r3, #0]
 8005604:	7afb      	ldrb	r3, [r7, #11]
 8005606:	6839      	ldr	r1, [r7, #0]
 8005608:	440b      	add	r3, r1
 800560a:	0052      	lsls	r2, r2, #1
 800560c:	b2d2      	uxtb	r2, r2
 800560e:	701a      	strb	r2, [r3, #0]
            pStateOut[i] |= (uint8_t)(inTmp[0] & 0x01U);
 8005610:	7afb      	ldrb	r3, [r7, #11]
 8005612:	683a      	ldr	r2, [r7, #0]
 8005614:	4413      	add	r3, r2
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	b25a      	sxtb	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	b25b      	sxtb	r3, r3
 8005620:	f003 0301 	and.w	r3, r3, #1
 8005624:	b25b      	sxtb	r3, r3
 8005626:	4313      	orrs	r3, r2
 8005628:	b259      	sxtb	r1, r3
 800562a:	7afb      	ldrb	r3, [r7, #11]
 800562c:	683a      	ldr	r2, [r7, #0]
 800562e:	4413      	add	r3, r2
 8005630:	b2ca      	uxtb	r2, r1
 8005632:	701a      	strb	r2, [r3, #0]
            pStateOut[i] <<= 1U;
 8005634:	7afb      	ldrb	r3, [r7, #11]
 8005636:	683a      	ldr	r2, [r7, #0]
 8005638:	4413      	add	r3, r2
 800563a:	781a      	ldrb	r2, [r3, #0]
 800563c:	7afb      	ldrb	r3, [r7, #11]
 800563e:	6839      	ldr	r1, [r7, #0]
 8005640:	440b      	add	r3, r1
 8005642:	0052      	lsls	r2, r2, #1
 8005644:	b2d2      	uxtb	r2, r2
 8005646:	701a      	strb	r2, [r3, #0]
            inTmp[0] >>= 1U;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	085b      	lsrs	r3, r3, #1
 800564e:	b2da      	uxtb	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	701a      	strb	r2, [r3, #0]
            inTmp[4] >>= 1U;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	3304      	adds	r3, #4
 8005658:	781a      	ldrb	r2, [r3, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	3304      	adds	r3, #4
 800565e:	0852      	lsrs	r2, r2, #1
 8005660:	b2d2      	uxtb	r2, r2
 8005662:	701a      	strb	r2, [r3, #0]
            inTmp++;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	3301      	adds	r3, #1
 8005668:	60fb      	str	r3, [r7, #12]
        for (j=0;j<3U;j++)
 800566a:	7abb      	ldrb	r3, [r7, #10]
 800566c:	3301      	adds	r3, #1
 800566e:	72bb      	strb	r3, [r7, #10]
 8005670:	7abb      	ldrb	r3, [r7, #10]
 8005672:	2b02      	cmp	r3, #2
 8005674:	d9af      	bls.n	80055d6 <phCryptoSym_Sw_Des_Permutate_IP_Inv+0x24>
        }
        /* Use input byte pair 7,2 without shifting the output byte in the final iteration
        as it is already complete */
        pStateOut[i] |= (uint8_t)(inTmp[4] & 0x01U);
 8005676:	7afb      	ldrb	r3, [r7, #11]
 8005678:	683a      	ldr	r2, [r7, #0]
 800567a:	4413      	add	r3, r2
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	b25a      	sxtb	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	3304      	adds	r3, #4
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	b25b      	sxtb	r3, r3
 8005688:	f003 0301 	and.w	r3, r3, #1
 800568c:	b25b      	sxtb	r3, r3
 800568e:	4313      	orrs	r3, r2
 8005690:	b259      	sxtb	r1, r3
 8005692:	7afb      	ldrb	r3, [r7, #11]
 8005694:	683a      	ldr	r2, [r7, #0]
 8005696:	4413      	add	r3, r2
 8005698:	b2ca      	uxtb	r2, r1
 800569a:	701a      	strb	r2, [r3, #0]
        pStateOut[i] <<= 1U;
 800569c:	7afb      	ldrb	r3, [r7, #11]
 800569e:	683a      	ldr	r2, [r7, #0]
 80056a0:	4413      	add	r3, r2
 80056a2:	781a      	ldrb	r2, [r3, #0]
 80056a4:	7afb      	ldrb	r3, [r7, #11]
 80056a6:	6839      	ldr	r1, [r7, #0]
 80056a8:	440b      	add	r3, r1
 80056aa:	0052      	lsls	r2, r2, #1
 80056ac:	b2d2      	uxtb	r2, r2
 80056ae:	701a      	strb	r2, [r3, #0]
        pStateOut[i] |= (uint8_t)(inTmp[0] & 0x01U);
 80056b0:	7afb      	ldrb	r3, [r7, #11]
 80056b2:	683a      	ldr	r2, [r7, #0]
 80056b4:	4413      	add	r3, r2
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	b25a      	sxtb	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	b25b      	sxtb	r3, r3
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	b25b      	sxtb	r3, r3
 80056c6:	4313      	orrs	r3, r2
 80056c8:	b259      	sxtb	r1, r3
 80056ca:	7afb      	ldrb	r3, [r7, #11]
 80056cc:	683a      	ldr	r2, [r7, #0]
 80056ce:	4413      	add	r3, r2
 80056d0:	b2ca      	uxtb	r2, r1
 80056d2:	701a      	strb	r2, [r3, #0]
        inTmp[0] >>= 1U;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	085b      	lsrs	r3, r3, #1
 80056da:	b2da      	uxtb	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	701a      	strb	r2, [r3, #0]
        inTmp[4] >>= 1U;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	3304      	adds	r3, #4
 80056e4:	781a      	ldrb	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	3304      	adds	r3, #4
 80056ea:	0852      	lsrs	r2, r2, #1
 80056ec:	b2d2      	uxtb	r2, r2
 80056ee:	701a      	strb	r2, [r3, #0]
    for (i=0;i<8U;i++)
 80056f0:	7afb      	ldrb	r3, [r7, #11]
 80056f2:	3301      	adds	r3, #1
 80056f4:	72fb      	strb	r3, [r7, #11]
 80056f6:	7afb      	ldrb	r3, [r7, #11]
 80056f8:	2b07      	cmp	r3, #7
 80056fa:	f67f af62 	bls.w	80055c2 <phCryptoSym_Sw_Des_Permutate_IP_Inv+0x10>
    }
}
 80056fe:	bf00      	nop
 8005700:	bf00      	nop
 8005702:	3714      	adds	r7, #20
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <phCryptoSym_Sw_Des_PC1_Permutation>:

void  phCryptoSym_Sw_Des_PC1_Permutation(
    const uint8_t * pKeyIn,
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pKeyOut
    )
{
 800570c:	b480      	push	{r7}
 800570e:	b087      	sub	sp, #28
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM i;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM j;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM pKeyInTmp[PH_CRYPTOSYM_DES_KEY_SIZE];

    /* Recopy the key */
    (void)memcpy(pKeyInTmp, pKeyIn, PH_CRYPTOSYM_DES_KEY_SIZE);
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	f107 030c 	add.w	r3, r7, #12
 800571c:	6810      	ldr	r0, [r2, #0]
 800571e:	6851      	ldr	r1, [r2, #4]
 8005720:	c303      	stmia	r3!, {r0, r1}
    /* round 2: 3, 11, 19, 27, 35, 43, 51, 59 */
    /* round 3: 4, 12, 20, 28, 36, 44, 52, 60 */
    /* round 4: 5, 13, 21, 29, 37, 45, 53, 61 */
    /* round 5: 6, 14, 22, 30, 38, 46, 54, 62 */
    /* round 6: 7, 15, 23, 31, 39, 47, 55, 63 */
    for (i=0;i<7U;i++)
 8005722:	2300      	movs	r3, #0
 8005724:	75fb      	strb	r3, [r7, #23]
 8005726:	e050      	b.n	80057ca <phCryptoSym_Sw_Des_PC1_Permutation+0xbe>
    {
        pKeyOut[i] = 0x00;
 8005728:	7dfb      	ldrb	r3, [r7, #23]
 800572a:	683a      	ldr	r2, [r7, #0]
 800572c:	4413      	add	r3, r2
 800572e:	2200      	movs	r2, #0
 8005730:	701a      	strb	r2, [r3, #0]
        for (j = 0; j<7U; j++)
 8005732:	2300      	movs	r3, #0
 8005734:	75bb      	strb	r3, [r7, #22]
 8005736:	e02d      	b.n	8005794 <phCryptoSym_Sw_Des_PC1_Permutation+0x88>
        {
            pKeyOut[i] |= (uint8_t)(pKeyInTmp[j] & 0x80U);
 8005738:	7dfb      	ldrb	r3, [r7, #23]
 800573a:	683a      	ldr	r2, [r7, #0]
 800573c:	4413      	add	r3, r2
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	b25a      	sxtb	r2, r3
 8005742:	7dbb      	ldrb	r3, [r7, #22]
 8005744:	3318      	adds	r3, #24
 8005746:	443b      	add	r3, r7
 8005748:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800574c:	b25b      	sxtb	r3, r3
 800574e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005752:	b25b      	sxtb	r3, r3
 8005754:	4313      	orrs	r3, r2
 8005756:	b259      	sxtb	r1, r3
 8005758:	7dfb      	ldrb	r3, [r7, #23]
 800575a:	683a      	ldr	r2, [r7, #0]
 800575c:	4413      	add	r3, r2
 800575e:	b2ca      	uxtb	r2, r1
 8005760:	701a      	strb	r2, [r3, #0]
            pKeyOut[i] >>= 1U;
 8005762:	7dfb      	ldrb	r3, [r7, #23]
 8005764:	683a      	ldr	r2, [r7, #0]
 8005766:	4413      	add	r3, r2
 8005768:	781a      	ldrb	r2, [r3, #0]
 800576a:	7dfb      	ldrb	r3, [r7, #23]
 800576c:	6839      	ldr	r1, [r7, #0]
 800576e:	440b      	add	r3, r1
 8005770:	0852      	lsrs	r2, r2, #1
 8005772:	b2d2      	uxtb	r2, r2
 8005774:	701a      	strb	r2, [r3, #0]
            pKeyInTmp[j] <<= 1U;
 8005776:	7dbb      	ldrb	r3, [r7, #22]
 8005778:	3318      	adds	r3, #24
 800577a:	443b      	add	r3, r7
 800577c:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8005780:	7dbb      	ldrb	r3, [r7, #22]
 8005782:	0052      	lsls	r2, r2, #1
 8005784:	b2d2      	uxtb	r2, r2
 8005786:	3318      	adds	r3, #24
 8005788:	443b      	add	r3, r7
 800578a:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for (j = 0; j<7U; j++)
 800578e:	7dbb      	ldrb	r3, [r7, #22]
 8005790:	3301      	adds	r3, #1
 8005792:	75bb      	strb	r3, [r7, #22]
 8005794:	7dbb      	ldrb	r3, [r7, #22]
 8005796:	2b06      	cmp	r3, #6
 8005798:	d9ce      	bls.n	8005738 <phCryptoSym_Sw_Des_PC1_Permutation+0x2c>
        }
        pKeyOut[i] |= (uint8_t)(pKeyInTmp[7] & 0x80U);
 800579a:	7dfb      	ldrb	r3, [r7, #23]
 800579c:	683a      	ldr	r2, [r7, #0]
 800579e:	4413      	add	r3, r2
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	b25a      	sxtb	r2, r3
 80057a4:	7cfb      	ldrb	r3, [r7, #19]
 80057a6:	b25b      	sxtb	r3, r3
 80057a8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80057ac:	b25b      	sxtb	r3, r3
 80057ae:	4313      	orrs	r3, r2
 80057b0:	b259      	sxtb	r1, r3
 80057b2:	7dfb      	ldrb	r3, [r7, #23]
 80057b4:	683a      	ldr	r2, [r7, #0]
 80057b6:	4413      	add	r3, r2
 80057b8:	b2ca      	uxtb	r2, r1
 80057ba:	701a      	strb	r2, [r3, #0]
        pKeyInTmp[7] <<= 1U;
 80057bc:	7cfb      	ldrb	r3, [r7, #19]
 80057be:	005b      	lsls	r3, r3, #1
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	74fb      	strb	r3, [r7, #19]
    for (i=0;i<7U;i++)
 80057c4:	7dfb      	ldrb	r3, [r7, #23]
 80057c6:	3301      	adds	r3, #1
 80057c8:	75fb      	strb	r3, [r7, #23]
 80057ca:	7dfb      	ldrb	r3, [r7, #23]
 80057cc:	2b06      	cmp	r3, #6
 80057ce:	d9ab      	bls.n	8005728 <phCryptoSym_Sw_Des_PC1_Permutation+0x1c>
    }

    /* Now the output bytes 3 and 7 are calculated by taking the correct subsets of the pKeyOut[3] byte */
    pKeyOut[7] = pKeyOut[3] <<4U;
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	3303      	adds	r3, #3
 80057d4:	781a      	ldrb	r2, [r3, #0]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	3307      	adds	r3, #7
 80057da:	0112      	lsls	r2, r2, #4
 80057dc:	b2d2      	uxtb	r2, r2
 80057de:	701a      	strb	r2, [r3, #0]
    pKeyOut[3] &= 0xF0U;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	3303      	adds	r3, #3
 80057e4:	781a      	ldrb	r2, [r3, #0]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	3303      	adds	r3, #3
 80057ea:	f022 020f 	bic.w	r2, r2, #15
 80057ee:	b2d2      	uxtb	r2, r2
 80057f0:	701a      	strb	r2, [r3, #0]

    /* Also byte 4 and 6 need to change the position. */
    i = pKeyOut[6];
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	799b      	ldrb	r3, [r3, #6]
 80057f6:	75fb      	strb	r3, [r7, #23]
    pKeyOut[6] = pKeyOut[4];
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	3306      	adds	r3, #6
 80057fc:	683a      	ldr	r2, [r7, #0]
 80057fe:	7912      	ldrb	r2, [r2, #4]
 8005800:	701a      	strb	r2, [r3, #0]
    pKeyOut[4] = i;
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	3304      	adds	r3, #4
 8005806:	7dfa      	ldrb	r2, [r7, #23]
 8005808:	701a      	strb	r2, [r3, #0]

}
 800580a:	bf00      	nop
 800580c:	371c      	adds	r7, #28
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <phCryptoSym_Sw_Des_PC2_Permutation>:

void phCryptoSym_Sw_Des_PC2_Permutation(
                                        uint8_t PH_CRYTOSYM_SW_FAST_RAM * pKeyIn,
                                        uint8_t * pKeyOut
                                        )
{
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
 800581e:	6039      	str	r1, [r7, #0]
    /* As the input bit sequence can not be mapped easily to the output bits,
    the implementation simply extracts the required bit out of the input and shifts it
    into the correct position of the output. */

    pKeyOut[0] = (uint8_t)((pKeyIn[1] & 0x04U) << 3U); /* Input bit 14 */
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	3301      	adds	r3, #1
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	00db      	lsls	r3, r3, #3
 8005828:	b2db      	uxtb	r3, r3
 800582a:	f003 0320 	and.w	r3, r3, #32
 800582e:	b2da      	uxtb	r2, r3
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	701a      	strb	r2, [r3, #0]
    pKeyOut[0] |= (uint8_t)((pKeyIn[2] & 0x80U) >> 3U); /* Input bit 17 */
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	781a      	ldrb	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	3302      	adds	r3, #2
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	08db      	lsrs	r3, r3, #3
 8005840:	b2db      	uxtb	r3, r3
 8005842:	f003 0310 	and.w	r3, r3, #16
 8005846:	b2db      	uxtb	r3, r3
 8005848:	4313      	orrs	r3, r2
 800584a:	b2da      	uxtb	r2, r3
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	701a      	strb	r2, [r3, #0]
    pKeyOut[0] |= (uint8_t)((pKeyIn[1] & 0x20U) >> 2U); /* Input bit 11 */
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	781a      	ldrb	r2, [r3, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	3301      	adds	r3, #1
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	089b      	lsrs	r3, r3, #2
 800585c:	b2db      	uxtb	r3, r3
 800585e:	f003 0308 	and.w	r3, r3, #8
 8005862:	b2db      	uxtb	r3, r3
 8005864:	4313      	orrs	r3, r2
 8005866:	b2da      	uxtb	r2, r3
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	701a      	strb	r2, [r3, #0]
    pKeyOut[0] |= (uint8_t)((pKeyIn[2] & 0x01U) << 2U); /* Input bit 24 */
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	b25a      	sxtb	r2, r3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	3302      	adds	r3, #2
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	b25b      	sxtb	r3, r3
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	b25b      	sxtb	r3, r3
 800587e:	f003 0304 	and.w	r3, r3, #4
 8005882:	b25b      	sxtb	r3, r3
 8005884:	4313      	orrs	r3, r2
 8005886:	b25b      	sxtb	r3, r3
 8005888:	b2da      	uxtb	r2, r3
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	701a      	strb	r2, [r3, #0]
    pKeyOut[0] |= (uint8_t)((pKeyIn[0] & 0x80U) >> 6U); /* Input bit 1 */
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	781a      	ldrb	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	099b      	lsrs	r3, r3, #6
 8005898:	b2db      	uxtb	r3, r3
 800589a:	f003 0302 	and.w	r3, r3, #2
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	4313      	orrs	r3, r2
 80058a2:	b2da      	uxtb	r2, r3
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	701a      	strb	r2, [r3, #0]
    pKeyOut[0] |= (uint8_t)((pKeyIn[0] & 0x08U) >> 3U); /* Input bit 5 */
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	781a      	ldrb	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	08db      	lsrs	r3, r3, #3
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	f003 0301 	and.w	r3, r3, #1
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	4313      	orrs	r3, r2
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	701a      	strb	r2, [r3, #0]

    pKeyOut[1] = (uint8_t)((pKeyIn[0] & 0x20U)); /* Input bit 3 */
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	781a      	ldrb	r2, [r3, #0]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	3301      	adds	r3, #1
 80058ca:	f002 0220 	and.w	r2, r2, #32
 80058ce:	b2d2      	uxtb	r2, r2
 80058d0:	701a      	strb	r2, [r3, #0]
    pKeyOut[1] |= (uint8_t)((pKeyIn[3] & 0x10U)); /* Input bit 28 */
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	3301      	adds	r3, #1
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	b25a      	sxtb	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	3303      	adds	r3, #3
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	b25b      	sxtb	r3, r3
 80058e2:	f003 0310 	and.w	r3, r3, #16
 80058e6:	b25b      	sxtb	r3, r3
 80058e8:	4313      	orrs	r3, r2
 80058ea:	b25a      	sxtb	r2, r3
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	3301      	adds	r3, #1
 80058f0:	b2d2      	uxtb	r2, r2
 80058f2:	701a      	strb	r2, [r3, #0]
    pKeyOut[1] |= (uint8_t)((pKeyIn[1] & 0x02U) << 2U); /* Input bit 15 */
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	3301      	adds	r3, #1
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	b25a      	sxtb	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	3301      	adds	r3, #1
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	b25b      	sxtb	r3, r3
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	b25b      	sxtb	r3, r3
 8005908:	f003 0308 	and.w	r3, r3, #8
 800590c:	b25b      	sxtb	r3, r3
 800590e:	4313      	orrs	r3, r2
 8005910:	b25a      	sxtb	r2, r3
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	3301      	adds	r3, #1
 8005916:	b2d2      	uxtb	r2, r2
 8005918:	701a      	strb	r2, [r3, #0]
    pKeyOut[1] |= (uint8_t)((pKeyIn[0] & 0x04U)); /* Input bit 6 */
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	3301      	adds	r3, #1
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	b25a      	sxtb	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	b25b      	sxtb	r3, r3
 8005928:	f003 0304 	and.w	r3, r3, #4
 800592c:	b25b      	sxtb	r3, r3
 800592e:	4313      	orrs	r3, r2
 8005930:	b25a      	sxtb	r2, r3
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	3301      	adds	r3, #1
 8005936:	b2d2      	uxtb	r2, r2
 8005938:	701a      	strb	r2, [r3, #0]
    pKeyOut[1] |= (uint8_t)((pKeyIn[2] & 0x08U) >> 2U); /* Input bit 21 */
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	3301      	adds	r3, #1
 800593e:	7819      	ldrb	r1, [r3, #0]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	3302      	adds	r3, #2
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	089b      	lsrs	r3, r3, #2
 8005948:	b2db      	uxtb	r3, r3
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	b2da      	uxtb	r2, r3
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	3301      	adds	r3, #1
 8005954:	430a      	orrs	r2, r1
 8005956:	b2d2      	uxtb	r2, r2
 8005958:	701a      	strb	r2, [r3, #0]
    pKeyOut[1] |= (uint8_t)((pKeyIn[1] & 0x40U) >> 6U); /* Input bit 10 */
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	3301      	adds	r3, #1
 800595e:	7819      	ldrb	r1, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	3301      	adds	r3, #1
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	099b      	lsrs	r3, r3, #6
 8005968:	b2db      	uxtb	r3, r3
 800596a:	f003 0301 	and.w	r3, r3, #1
 800596e:	b2da      	uxtb	r2, r3
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	3301      	adds	r3, #1
 8005974:	430a      	orrs	r2, r1
 8005976:	b2d2      	uxtb	r2, r2
 8005978:	701a      	strb	r2, [r3, #0]

    pKeyOut[2] = (uint8_t)((pKeyIn[2] & 0x02U) << 4U); /* Input bit 23 */
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	3302      	adds	r3, #2
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	011b      	lsls	r3, r3, #4
 8005982:	b2da      	uxtb	r2, r3
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	3302      	adds	r3, #2
 8005988:	f002 0220 	and.w	r2, r2, #32
 800598c:	b2d2      	uxtb	r2, r2
 800598e:	701a      	strb	r2, [r3, #0]
    pKeyOut[2] |= (uint8_t)((pKeyIn[2] & 0x20U) >> 1U); /* Input bit 19 */
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	3302      	adds	r3, #2
 8005994:	7819      	ldrb	r1, [r3, #0]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	3302      	adds	r3, #2
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	085b      	lsrs	r3, r3, #1
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	f003 0310 	and.w	r3, r3, #16
 80059a4:	b2da      	uxtb	r2, r3
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	3302      	adds	r3, #2
 80059aa:	430a      	orrs	r2, r1
 80059ac:	b2d2      	uxtb	r2, r2
 80059ae:	701a      	strb	r2, [r3, #0]
    pKeyOut[2] |= (uint8_t)((pKeyIn[1] & 0x10U) >> 1U); /* Input bit 12 */
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	3302      	adds	r3, #2
 80059b4:	7819      	ldrb	r1, [r3, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	3301      	adds	r3, #1
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	085b      	lsrs	r3, r3, #1
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	f003 0308 	and.w	r3, r3, #8
 80059c4:	b2da      	uxtb	r2, r3
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	3302      	adds	r3, #2
 80059ca:	430a      	orrs	r2, r1
 80059cc:	b2d2      	uxtb	r2, r2
 80059ce:	701a      	strb	r2, [r3, #0]
    pKeyOut[2] |= (uint8_t)((pKeyIn[0] & 0x10U) >> 2U); /* Input bit 4 */
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	3302      	adds	r3, #2
 80059d4:	7819      	ldrb	r1, [r3, #0]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	089b      	lsrs	r3, r3, #2
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	f003 0304 	and.w	r3, r3, #4
 80059e2:	b2da      	uxtb	r2, r3
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	3302      	adds	r3, #2
 80059e8:	430a      	orrs	r2, r1
 80059ea:	b2d2      	uxtb	r2, r2
 80059ec:	701a      	strb	r2, [r3, #0]
    pKeyOut[2] |= (uint8_t)((pKeyIn[3] & 0x40U) >> 5U); /* Input bit 26 */
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	3302      	adds	r3, #2
 80059f2:	7819      	ldrb	r1, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	3303      	adds	r3, #3
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	095b      	lsrs	r3, r3, #5
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	3302      	adds	r3, #2
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	b2d2      	uxtb	r2, r2
 8005a0c:	701a      	strb	r2, [r3, #0]
    pKeyOut[2] |= (uint8_t)((pKeyIn[0] & 0x01U)); /* Input bit 8 */
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	3302      	adds	r3, #2
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	b25a      	sxtb	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	b25b      	sxtb	r3, r3
 8005a1c:	f003 0301 	and.w	r3, r3, #1
 8005a20:	b25b      	sxtb	r3, r3
 8005a22:	4313      	orrs	r3, r2
 8005a24:	b25a      	sxtb	r2, r3
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	3302      	adds	r3, #2
 8005a2a:	b2d2      	uxtb	r2, r2
 8005a2c:	701a      	strb	r2, [r3, #0]

    pKeyOut[3] = (uint8_t)((pKeyIn[1] & 0x01U) << 5U); /* Input bit 16 */
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	3301      	adds	r3, #1
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	015b      	lsls	r3, r3, #5
 8005a36:	b2da      	uxtb	r2, r3
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	3303      	adds	r3, #3
 8005a3c:	f002 0220 	and.w	r2, r2, #32
 8005a40:	b2d2      	uxtb	r2, r2
 8005a42:	701a      	strb	r2, [r3, #0]
    pKeyOut[3] |= (uint8_t)((pKeyIn[0] & 0x02U) << 3U); /* Input bit 7 */
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	3303      	adds	r3, #3
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	b25a      	sxtb	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	b25b      	sxtb	r3, r3
 8005a52:	00db      	lsls	r3, r3, #3
 8005a54:	b25b      	sxtb	r3, r3
 8005a56:	f003 0310 	and.w	r3, r3, #16
 8005a5a:	b25b      	sxtb	r3, r3
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	b25a      	sxtb	r2, r3
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	3303      	adds	r3, #3
 8005a64:	b2d2      	uxtb	r2, r2
 8005a66:	701a      	strb	r2, [r3, #0]
    pKeyOut[3] |= (uint8_t)((pKeyIn[3] & 0x20U) >> 2U); /* Input bit 27 */
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	3303      	adds	r3, #3
 8005a6c:	7819      	ldrb	r1, [r3, #0]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	3303      	adds	r3, #3
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	089b      	lsrs	r3, r3, #2
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	f003 0308 	and.w	r3, r3, #8
 8005a7c:	b2da      	uxtb	r2, r3
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	3303      	adds	r3, #3
 8005a82:	430a      	orrs	r2, r1
 8005a84:	b2d2      	uxtb	r2, r2
 8005a86:	701a      	strb	r2, [r3, #0]
    pKeyOut[3] |= (uint8_t)((pKeyIn[2] & 0x10U) >> 2U); /* Input bit 20 */
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	3303      	adds	r3, #3
 8005a8c:	7819      	ldrb	r1, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	3302      	adds	r3, #2
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	089b      	lsrs	r3, r3, #2
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	f003 0304 	and.w	r3, r3, #4
 8005a9c:	b2da      	uxtb	r2, r3
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	3303      	adds	r3, #3
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	b2d2      	uxtb	r2, r2
 8005aa6:	701a      	strb	r2, [r3, #0]
    pKeyOut[3] |= (uint8_t)((pKeyIn[1] & 0x08U) >> 2U); /* Input bit 13 */
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	3303      	adds	r3, #3
 8005aac:	7819      	ldrb	r1, [r3, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	089b      	lsrs	r3, r3, #2
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	f003 0302 	and.w	r3, r3, #2
 8005abc:	b2da      	uxtb	r2, r3
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	3303      	adds	r3, #3
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	b2d2      	uxtb	r2, r2
 8005ac6:	701a      	strb	r2, [r3, #0]
    pKeyOut[3] |= (uint8_t)((pKeyIn[0] & 0x40U) >> 6U); /* Input bit 2 */
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	3303      	adds	r3, #3
 8005acc:	7819      	ldrb	r1, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	099b      	lsrs	r3, r3, #6
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	b2da      	uxtb	r2, r3
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	3303      	adds	r3, #3
 8005ae0:	430a      	orrs	r2, r1
 8005ae2:	b2d2      	uxtb	r2, r2
 8005ae4:	701a      	strb	r2, [r3, #0]

    pKeyOut[4] = (uint8_t)((pKeyIn[5] & 0x08U) << 2U); /* Input bit 41 */
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	3305      	adds	r3, #5
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	b2da      	uxtb	r2, r3
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	3304      	adds	r3, #4
 8005af4:	f002 0220 	and.w	r2, r2, #32
 8005af8:	b2d2      	uxtb	r2, r2
 8005afa:	701a      	strb	r2, [r3, #0]
    pKeyOut[4] |= (uint8_t)((pKeyIn[6] & 0x01U) << 4U); /* Input bit 52 */
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	3304      	adds	r3, #4
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	b25a      	sxtb	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	3306      	adds	r3, #6
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	b25b      	sxtb	r3, r3
 8005b0c:	011b      	lsls	r3, r3, #4
 8005b0e:	b25b      	sxtb	r3, r3
 8005b10:	f003 0310 	and.w	r3, r3, #16
 8005b14:	b25b      	sxtb	r3, r3
 8005b16:	4313      	orrs	r3, r2
 8005b18:	b25a      	sxtb	r2, r3
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	3304      	adds	r3, #4
 8005b1e:	b2d2      	uxtb	r2, r2
 8005b20:	701a      	strb	r2, [r3, #0]
    pKeyOut[4] |= (uint8_t)((pKeyIn[4] & 0x20U) >> 2U); /* Input bit 31 */
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	3304      	adds	r3, #4
 8005b26:	7819      	ldrb	r1, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	3304      	adds	r3, #4
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	089b      	lsrs	r3, r3, #2
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	f003 0308 	and.w	r3, r3, #8
 8005b36:	b2da      	uxtb	r2, r3
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	3304      	adds	r3, #4
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	b2d2      	uxtb	r2, r2
 8005b40:	701a      	strb	r2, [r3, #0]
    pKeyOut[4] |= (uint8_t)((pKeyIn[5] & 0x80U) >> 5U); /* Input bit 37 */
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	3304      	adds	r3, #4
 8005b46:	7819      	ldrb	r1, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	3305      	adds	r3, #5
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	095b      	lsrs	r3, r3, #5
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	f003 0304 	and.w	r3, r3, #4
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	3304      	adds	r3, #4
 8005b5c:	430a      	orrs	r2, r1
 8005b5e:	b2d2      	uxtb	r2, r2
 8005b60:	701a      	strb	r2, [r3, #0]
    pKeyOut[4] |= (uint8_t)((pKeyIn[6] & 0x20U) >> 4U); /* Input bit 47 */
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	3304      	adds	r3, #4
 8005b66:	7819      	ldrb	r1, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	3306      	adds	r3, #6
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	091b      	lsrs	r3, r3, #4
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	f003 0302 	and.w	r3, r3, #2
 8005b76:	b2da      	uxtb	r2, r3
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	3304      	adds	r3, #4
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	b2d2      	uxtb	r2, r2
 8005b80:	701a      	strb	r2, [r3, #0]
    pKeyOut[4] |= (uint8_t)((pKeyIn[7] & 0x20U) >> 5U); /* Input bit 55 */
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	3304      	adds	r3, #4
 8005b86:	7819      	ldrb	r1, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	3307      	adds	r3, #7
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	095b      	lsrs	r3, r3, #5
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	b2da      	uxtb	r2, r3
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	3304      	adds	r3, #4
 8005b9c:	430a      	orrs	r2, r1
 8005b9e:	b2d2      	uxtb	r2, r2
 8005ba0:	701a      	strb	r2, [r3, #0]

    pKeyOut[5] = (uint8_t)((pKeyIn[4] & 0x40U) >> 1U); /* Input bit 30 */
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	3304      	adds	r3, #4
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	085b      	lsrs	r3, r3, #1
 8005baa:	b2da      	uxtb	r2, r3
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	3305      	adds	r3, #5
 8005bb0:	f002 0220 	and.w	r2, r2, #32
 8005bb4:	b2d2      	uxtb	r2, r2
 8005bb6:	701a      	strb	r2, [r3, #0]
    pKeyOut[5] |= (uint8_t)((pKeyIn[5] & 0x10U)); /* Input bit 40 */
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	3305      	adds	r3, #5
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	b25a      	sxtb	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	3305      	adds	r3, #5
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	b25b      	sxtb	r3, r3
 8005bc8:	f003 0310 	and.w	r3, r3, #16
 8005bcc:	b25b      	sxtb	r3, r3
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	b25a      	sxtb	r2, r3
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	3305      	adds	r3, #5
 8005bd6:	b2d2      	uxtb	r2, r2
 8005bd8:	701a      	strb	r2, [r3, #0]
    pKeyOut[5] |= (uint8_t)((pKeyIn[6] & 0x02U) << 2U); /* Input bit 51 */
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	3305      	adds	r3, #5
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	b25a      	sxtb	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	3306      	adds	r3, #6
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	b25b      	sxtb	r3, r3
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	b25b      	sxtb	r3, r3
 8005bee:	f003 0308 	and.w	r3, r3, #8
 8005bf2:	b25b      	sxtb	r3, r3
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	b25a      	sxtb	r2, r3
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	3305      	adds	r3, #5
 8005bfc:	b2d2      	uxtb	r2, r2
 8005bfe:	701a      	strb	r2, [r3, #0]
    pKeyOut[5] |= (uint8_t)((pKeyIn[6] & 0x80U) >> 5U); /* Input bit 45 */
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	3305      	adds	r3, #5
 8005c04:	7819      	ldrb	r1, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	3306      	adds	r3, #6
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	095b      	lsrs	r3, r3, #5
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	f003 0304 	and.w	r3, r3, #4
 8005c14:	b2da      	uxtb	r2, r3
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	3305      	adds	r3, #5
 8005c1a:	430a      	orrs	r2, r1
 8005c1c:	b2d2      	uxtb	r2, r2
 8005c1e:	701a      	strb	r2, [r3, #0]
    pKeyOut[5] |= (uint8_t)((pKeyIn[4] & 0x08U) >> 2U); /* Input bit 33 */
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	3305      	adds	r3, #5
 8005c24:	7819      	ldrb	r1, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	3304      	adds	r3, #4
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	089b      	lsrs	r3, r3, #2
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	f003 0302 	and.w	r3, r3, #2
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	3305      	adds	r3, #5
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	b2d2      	uxtb	r2, r2
 8005c3e:	701a      	strb	r2, [r3, #0]
    pKeyOut[5] |= (uint8_t)((pKeyIn[6] & 0x10U) >> 4U); /* Input bit 48 */
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	3305      	adds	r3, #5
 8005c44:	7819      	ldrb	r1, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	3306      	adds	r3, #6
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	091b      	lsrs	r3, r3, #4
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	b2da      	uxtb	r2, r3
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	3305      	adds	r3, #5
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	b2d2      	uxtb	r2, r2
 8005c5e:	701a      	strb	r2, [r3, #0]

    pKeyOut[6] = (uint8_t)((pKeyIn[5] & 0x01U) << 5U); /* Input bit 44 */
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	3305      	adds	r3, #5
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	015b      	lsls	r3, r3, #5
 8005c68:	b2da      	uxtb	r2, r3
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	3306      	adds	r3, #6
 8005c6e:	f002 0220 	and.w	r2, r2, #32
 8005c72:	b2d2      	uxtb	r2, r2
 8005c74:	701a      	strb	r2, [r3, #0]
    pKeyOut[6] |= (uint8_t)((pKeyIn[6] & 0x08U) << 1U); /* Input bit 49 */
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	3306      	adds	r3, #6
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	b25a      	sxtb	r2, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	3306      	adds	r3, #6
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	b25b      	sxtb	r3, r3
 8005c86:	005b      	lsls	r3, r3, #1
 8005c88:	b25b      	sxtb	r3, r3
 8005c8a:	f003 0310 	and.w	r3, r3, #16
 8005c8e:	b25b      	sxtb	r3, r3
 8005c90:	4313      	orrs	r3, r2
 8005c92:	b25a      	sxtb	r2, r3
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	3306      	adds	r3, #6
 8005c98:	b2d2      	uxtb	r2, r2
 8005c9a:	701a      	strb	r2, [r3, #0]
    pKeyOut[6] |= (uint8_t)((pKeyIn[5] & 0x20U) >> 2U); /* Input bit 39 */
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	3306      	adds	r3, #6
 8005ca0:	7819      	ldrb	r1, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	3305      	adds	r3, #5
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	089b      	lsrs	r3, r3, #2
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	f003 0308 	and.w	r3, r3, #8
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	3306      	adds	r3, #6
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	b2d2      	uxtb	r2, r2
 8005cba:	701a      	strb	r2, [r3, #0]
    pKeyOut[6] |= (uint8_t)((pKeyIn[7] & 0x10U) >> 2U); /* Input bit 56 */
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	3306      	adds	r3, #6
 8005cc0:	7819      	ldrb	r1, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	3307      	adds	r3, #7
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	089b      	lsrs	r3, r3, #2
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	f003 0304 	and.w	r3, r3, #4
 8005cd0:	b2da      	uxtb	r2, r3
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	3306      	adds	r3, #6
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	b2d2      	uxtb	r2, r2
 8005cda:	701a      	strb	r2, [r3, #0]
    pKeyOut[6] |= (uint8_t)((pKeyIn[4] & 0x04U) >> 1U); /* Input bit 34 */
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	3306      	adds	r3, #6
 8005ce0:	7819      	ldrb	r1, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	3304      	adds	r3, #4
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	085b      	lsrs	r3, r3, #1
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	f003 0302 	and.w	r3, r3, #2
 8005cf0:	b2da      	uxtb	r2, r3
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	3306      	adds	r3, #6
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	b2d2      	uxtb	r2, r2
 8005cfa:	701a      	strb	r2, [r3, #0]
    pKeyOut[6] |= (uint8_t)((pKeyIn[7] & 0x80U) >> 7U); /* Input bit 53 */
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	3306      	adds	r3, #6
 8005d00:	7819      	ldrb	r1, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	3307      	adds	r3, #7
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	09db      	lsrs	r3, r3, #7
 8005d0a:	b2da      	uxtb	r2, r3
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	3306      	adds	r3, #6
 8005d10:	430a      	orrs	r2, r1
 8005d12:	b2d2      	uxtb	r2, r2
 8005d14:	701a      	strb	r2, [r3, #0]

    pKeyOut[7] = (uint8_t)((pKeyIn[6] & 0x40U) >> 1U); /* Input bit 46 */
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	3306      	adds	r3, #6
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	085b      	lsrs	r3, r3, #1
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	3307      	adds	r3, #7
 8005d24:	f002 0220 	and.w	r2, r2, #32
 8005d28:	b2d2      	uxtb	r2, r2
 8005d2a:	701a      	strb	r2, [r3, #0]
    pKeyOut[7] |= (uint8_t)((pKeyIn[5] & 0x04U) << 2U); /* Input bit 42 */
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	3307      	adds	r3, #7
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	b25a      	sxtb	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	3305      	adds	r3, #5
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	b25b      	sxtb	r3, r3
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	b25b      	sxtb	r3, r3
 8005d40:	f003 0310 	and.w	r3, r3, #16
 8005d44:	b25b      	sxtb	r3, r3
 8005d46:	4313      	orrs	r3, r2
 8005d48:	b25a      	sxtb	r2, r3
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	3307      	adds	r3, #7
 8005d4e:	b2d2      	uxtb	r2, r2
 8005d50:	701a      	strb	r2, [r3, #0]
    pKeyOut[7] |= (uint8_t)((pKeyIn[6] & 0x04U) << 1U); /* Input bit 50 */
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	3307      	adds	r3, #7
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	b25a      	sxtb	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	3306      	adds	r3, #6
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	b25b      	sxtb	r3, r3
 8005d62:	005b      	lsls	r3, r3, #1
 8005d64:	b25b      	sxtb	r3, r3
 8005d66:	f003 0308 	and.w	r3, r3, #8
 8005d6a:	b25b      	sxtb	r3, r3
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	b25a      	sxtb	r2, r3
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	3307      	adds	r3, #7
 8005d74:	b2d2      	uxtb	r2, r2
 8005d76:	701a      	strb	r2, [r3, #0]
    pKeyOut[7] |= (uint8_t)((pKeyIn[4] & 0x01U) << 2U); /* Input bit 36 */
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	3307      	adds	r3, #7
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	b25a      	sxtb	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	3304      	adds	r3, #4
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	b25b      	sxtb	r3, r3
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	b25b      	sxtb	r3, r3
 8005d8c:	f003 0304 	and.w	r3, r3, #4
 8005d90:	b25b      	sxtb	r3, r3
 8005d92:	4313      	orrs	r3, r2
 8005d94:	b25a      	sxtb	r2, r3
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	3307      	adds	r3, #7
 8005d9a:	b2d2      	uxtb	r2, r2
 8005d9c:	701a      	strb	r2, [r3, #0]
    pKeyOut[7] |= (uint8_t)((pKeyIn[4] & 0x80U)>> 6U); /* Input bit 29 */
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	3307      	adds	r3, #7
 8005da2:	7819      	ldrb	r1, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	3304      	adds	r3, #4
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	099b      	lsrs	r3, r3, #6
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	f003 0302 	and.w	r3, r3, #2
 8005db2:	b2da      	uxtb	r2, r3
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	3307      	adds	r3, #7
 8005db8:	430a      	orrs	r2, r1
 8005dba:	b2d2      	uxtb	r2, r2
 8005dbc:	701a      	strb	r2, [r3, #0]
    pKeyOut[7] |= (uint8_t)((pKeyIn[4] & 0x10U) >> 4U); /* Input bit 32 */
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	3307      	adds	r3, #7
 8005dc2:	7819      	ldrb	r1, [r3, #0]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	3304      	adds	r3, #4
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	091b      	lsrs	r3, r3, #4
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	b2da      	uxtb	r2, r3
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	3307      	adds	r3, #7
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	b2d2      	uxtb	r2, r2
 8005ddc:	701a      	strb	r2, [r3, #0]
}
 8005dde:	bf00      	nop
 8005de0:	370c      	adds	r7, #12
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr

08005dea <phCryptoSym_Sw_Des_RotateRight28>:
#ifdef  PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
void  phCryptoSym_Sw_Des_RotateRight28(
                                       uint8_t PH_CRYTOSYM_SW_FAST_RAM * pArray,
                                       uint8_t bNumPos
                                       )
{
 8005dea:	b480      	push	{r7}
 8005dec:	b085      	sub	sp, #20
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
 8005df2:	460b      	mov	r3, r1
 8005df4:	70fb      	strb	r3, [r7, #3]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM i;
    uint8_t bOverflow = 0;
 8005df6:	2300      	movs	r3, #0
 8005df8:	73bb      	strb	r3, [r7, #14]
    uint8_t bOverflowNew = 0;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	737b      	strb	r3, [r7, #13]

    /* Iterate over all positions in outer loop */
    while(0U != bNumPos)
 8005dfe:	e041      	b.n	8005e84 <phCryptoSym_Sw_Des_RotateRight28+0x9a>
    {
        /* Start at lowest index because we need to rotate to right */
        for (i=0;i<4U;i++)
 8005e00:	2300      	movs	r3, #0
 8005e02:	73fb      	strb	r3, [r7, #15]
 8005e04:	e01f      	b.n	8005e46 <phCryptoSym_Sw_Des_RotateRight28+0x5c>
        {
            /* Calculate, if there is an overflow generated by the currently shifted byte */
            bOverflowNew = (uint8_t) (((pArray[i] & 0x01U) != 0U) ? 0x80U : 0x00U);
 8005e06:	7bfb      	ldrb	r3, [r7, #15]
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	01db      	lsls	r3, r3, #7
 8005e10:	737b      	strb	r3, [r7, #13]
            /* Shift the byte */
            pArray[i] = pArray[i] >> 1U;
 8005e12:	7bfb      	ldrb	r3, [r7, #15]
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	4413      	add	r3, r2
 8005e18:	781a      	ldrb	r2, [r3, #0]
 8005e1a:	7bfb      	ldrb	r3, [r7, #15]
 8005e1c:	6879      	ldr	r1, [r7, #4]
 8005e1e:	440b      	add	r3, r1
 8005e20:	0852      	lsrs	r2, r2, #1
 8005e22:	b2d2      	uxtb	r2, r2
 8005e24:	701a      	strb	r2, [r3, #0]
            /* Mask the overflow of the previous byte into the current byte */
            pArray[i] |= bOverflow;
 8005e26:	7bfb      	ldrb	r3, [r7, #15]
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	7819      	ldrb	r1, [r3, #0]
 8005e2e:	7bfb      	ldrb	r3, [r7, #15]
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	4413      	add	r3, r2
 8005e34:	7bba      	ldrb	r2, [r7, #14]
 8005e36:	430a      	orrs	r2, r1
 8005e38:	b2d2      	uxtb	r2, r2
 8005e3a:	701a      	strb	r2, [r3, #0]
            /* Remember current overflow */
            bOverflow = bOverflowNew;
 8005e3c:	7b7b      	ldrb	r3, [r7, #13]
 8005e3e:	73bb      	strb	r3, [r7, #14]
        for (i=0;i<4U;i++)
 8005e40:	7bfb      	ldrb	r3, [r7, #15]
 8005e42:	3301      	adds	r3, #1
 8005e44:	73fb      	strb	r3, [r7, #15]
 8005e46:	7bfb      	ldrb	r3, [r7, #15]
 8005e48:	2b03      	cmp	r3, #3
 8005e4a:	d9dc      	bls.n	8005e06 <phCryptoSym_Sw_Des_RotateRight28+0x1c>
        }

        /* In case of overflow of the highest byte, the bit needs to be fed in back at position 0 of the array */
        if (0U != (pArray[3] & 0x08U))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	3303      	adds	r3, #3
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	f003 0308 	and.w	r3, r3, #8
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00f      	beq.n	8005e7a <phCryptoSym_Sw_Des_RotateRight28+0x90>
        {
            pArray[0] |= 0x80U;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005e62:	b2da      	uxtb	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	701a      	strb	r2, [r3, #0]
            pArray[3] &= 0xF0U;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	3303      	adds	r3, #3
 8005e6c:	781a      	ldrb	r2, [r3, #0]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	3303      	adds	r3, #3
 8005e72:	f022 020f 	bic.w	r2, r2, #15
 8005e76:	b2d2      	uxtb	r2, r2
 8005e78:	701a      	strb	r2, [r3, #0]
        }
        bOverflow = 0;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	73bb      	strb	r3, [r7, #14]
        bNumPos--;
 8005e7e:	78fb      	ldrb	r3, [r7, #3]
 8005e80:	3b01      	subs	r3, #1
 8005e82:	70fb      	strb	r3, [r7, #3]
    while(0U != bNumPos)
 8005e84:	78fb      	ldrb	r3, [r7, #3]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d1ba      	bne.n	8005e00 <phCryptoSym_Sw_Des_RotateRight28+0x16>
    }
}
 8005e8a:	bf00      	nop
 8005e8c:	bf00      	nop
 8005e8e:	3714      	adds	r7, #20
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <phCryptoSym_Sw_Des_RotateLeft28>:

void  phCryptoSym_Sw_Des_RotateLeft28(
                                      uint8_t PH_CRYTOSYM_SW_FAST_RAM * pArray,
                                      uint8_t bNumPos
                                      )
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	70fb      	strb	r3, [r7, #3]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM i;
    uint8_t bOverflow = 0;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	73bb      	strb	r3, [r7, #14]
    uint8_t bOverflowNew = 0;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	737b      	strb	r3, [r7, #13]

    /* Iterate over all positions in outer loop */
    while(0U != (bNumPos))
 8005eac:	e035      	b.n	8005f1a <phCryptoSym_Sw_Des_RotateLeft28+0x82>
    {
        /* Start at highest index because we need to rotate to left */
        i = 4;
 8005eae:	2304      	movs	r3, #4
 8005eb0:	73fb      	strb	r3, [r7, #15]
        do
        {
            i--;
 8005eb2:	7bfb      	ldrb	r3, [r7, #15]
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	73fb      	strb	r3, [r7, #15]
            /* Calculate, if there is an overflow generated by the currently shifted byte */
            bOverflowNew = (uint8_t) (((pArray[i] & 0x80U) != 0U) ? 0x01U : 0x00U);
 8005eb8:	7bfb      	ldrb	r3, [r7, #15]
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	09db      	lsrs	r3, r3, #7
 8005ec2:	737b      	strb	r3, [r7, #13]
            /* Shift the byte */
            pArray[i] = pArray[i] << 1U;
 8005ec4:	7bfb      	ldrb	r3, [r7, #15]
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	4413      	add	r3, r2
 8005eca:	781a      	ldrb	r2, [r3, #0]
 8005ecc:	7bfb      	ldrb	r3, [r7, #15]
 8005ece:	6879      	ldr	r1, [r7, #4]
 8005ed0:	440b      	add	r3, r1
 8005ed2:	0052      	lsls	r2, r2, #1
 8005ed4:	b2d2      	uxtb	r2, r2
 8005ed6:	701a      	strb	r2, [r3, #0]
            /* Mask the overflow of the previous byte into the current byte */
            pArray[i] |= bOverflow;
 8005ed8:	7bfb      	ldrb	r3, [r7, #15]
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	4413      	add	r3, r2
 8005ede:	7819      	ldrb	r1, [r3, #0]
 8005ee0:	7bfb      	ldrb	r3, [r7, #15]
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	7bba      	ldrb	r2, [r7, #14]
 8005ee8:	430a      	orrs	r2, r1
 8005eea:	b2d2      	uxtb	r2, r2
 8005eec:	701a      	strb	r2, [r3, #0]
            /* Remember current overflow */
            bOverflow = bOverflowNew;
 8005eee:	7b7b      	ldrb	r3, [r7, #13]
 8005ef0:	73bb      	strb	r3, [r7, #14]
        }while(0U != i);
 8005ef2:	7bfb      	ldrb	r3, [r7, #15]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1dc      	bne.n	8005eb2 <phCryptoSym_Sw_Des_RotateLeft28+0x1a>

        /* In case of overflow of the first byte, the bit needs to be fed in back at position 28 of the array */
        if (0U != (bOverflow))
 8005ef8:	7bbb      	ldrb	r3, [r7, #14]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d008      	beq.n	8005f10 <phCryptoSym_Sw_Des_RotateLeft28+0x78>
        {
            pArray[3] |= 0x10U;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	3303      	adds	r3, #3
 8005f02:	781a      	ldrb	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	3303      	adds	r3, #3
 8005f08:	f042 0210 	orr.w	r2, r2, #16
 8005f0c:	b2d2      	uxtb	r2, r2
 8005f0e:	701a      	strb	r2, [r3, #0]
        }
        bOverflow = 0;
 8005f10:	2300      	movs	r3, #0
 8005f12:	73bb      	strb	r3, [r7, #14]
        bNumPos--;
 8005f14:	78fb      	ldrb	r3, [r7, #3]
 8005f16:	3b01      	subs	r3, #1
 8005f18:	70fb      	strb	r3, [r7, #3]
    while(0U != (bNumPos))
 8005f1a:	78fb      	ldrb	r3, [r7, #3]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d1c6      	bne.n	8005eae <phCryptoSym_Sw_Des_RotateLeft28+0x16>
    }
}
 8005f20:	bf00      	nop
 8005f22:	bf00      	nop
 8005f24:	3714      	adds	r7, #20
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <phCryptoSym_Sw_Des_ComputeRound>:

void phCryptoSym_Sw_Des_ComputeRound(
                                     uint8_t PH_CRYTOSYM_SW_FAST_RAM * pState,
                                     uint8_t * pRoundKey
                                     )
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b084      	sub	sp, #16
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
 8005f36:	6039      	str	r1, [r7, #0]
    uint8_t temp[4];
    (void)memcpy(temp, pState, 4);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	60fb      	str	r3, [r7, #12]
    (void)memcpy(pState, &pState[4], 4);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	3304      	adds	r3, #4
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	461a      	mov	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	601a      	str	r2, [r3, #0]
    phCryptoSym_Sw_Des_F(&pState[4], pRoundKey);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	3304      	adds	r3, #4
 8005f4e:	6839      	ldr	r1, [r7, #0]
 8005f50:	4618      	mov	r0, r3
 8005f52:	f000 f83f 	bl	8005fd4 <phCryptoSym_Sw_Des_F>
    pState[4] ^= temp[0] ;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	3304      	adds	r3, #4
 8005f5a:	7819      	ldrb	r1, [r3, #0]
 8005f5c:	7b3a      	ldrb	r2, [r7, #12]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	3304      	adds	r3, #4
 8005f62:	404a      	eors	r2, r1
 8005f64:	b2d2      	uxtb	r2, r2
 8005f66:	701a      	strb	r2, [r3, #0]
    pState[5] ^= temp[1];
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	3305      	adds	r3, #5
 8005f6c:	7819      	ldrb	r1, [r3, #0]
 8005f6e:	7b7a      	ldrb	r2, [r7, #13]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	3305      	adds	r3, #5
 8005f74:	404a      	eors	r2, r1
 8005f76:	b2d2      	uxtb	r2, r2
 8005f78:	701a      	strb	r2, [r3, #0]
    pState[6] ^= temp[2];
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	3306      	adds	r3, #6
 8005f7e:	7819      	ldrb	r1, [r3, #0]
 8005f80:	7bba      	ldrb	r2, [r7, #14]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	3306      	adds	r3, #6
 8005f86:	404a      	eors	r2, r1
 8005f88:	b2d2      	uxtb	r2, r2
 8005f8a:	701a      	strb	r2, [r3, #0]
    pState[7] ^= temp[3];
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	3307      	adds	r3, #7
 8005f90:	7819      	ldrb	r1, [r3, #0]
 8005f92:	7bfa      	ldrb	r2, [r7, #15]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	3307      	adds	r3, #7
 8005f98:	404a      	eors	r2, r1
 8005f9a:	b2d2      	uxtb	r2, r2
 8005f9c:	701a      	strb	r2, [r3, #0]
}
 8005f9e:	bf00      	nop
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <phCryptoSym_Sw_Des_Swap>:

void phCryptoSym_Sw_Des_Swap(uint8_t PH_CRYTOSYM_SW_FAST_RAM * bState)
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b085      	sub	sp, #20
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM tmp[4];

    (void)memcpy(tmp, bState, 4);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	60fb      	str	r3, [r7, #12]
    (void)memcpy(bState, &bState[4], 4);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	3304      	adds	r3, #4
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	461a      	mov	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	601a      	str	r2, [r3, #0]
    (void)memcpy(&bState[4], tmp, 4);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	3304      	adds	r3, #4
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	601a      	str	r2, [r3, #0]
}
 8005fc8:	bf00      	nop
 8005fca:	3714      	adds	r7, #20
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <phCryptoSym_Sw_Des_F>:

void phCryptoSym_Sw_Des_F(
                          uint8_t PH_CRYTOSYM_SW_FAST_RAM * pR,
                          uint8_t * pRoundKey
                          )
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b086      	sub	sp, #24
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
    uint8_t   j;
    uint8_t  rc;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM bArray[PH_CRYPTOSYM_DES_BLOCK_SIZE];

    /* First expand the input array pR such that an 8 byte output array containing 6 bits in each byte is generated */
    phCryptoSym_Sw_Des_Expand(pR, bArray);
 8005fde:	f107 030c 	add.w	r3, r7, #12
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 fa4d 	bl	8006484 <phCryptoSym_Sw_Des_Expand>

    /* Iterate over all 8 bytes */
    for (j = 0; j < 4U; j++)
 8005fea:	2300      	movs	r3, #0
 8005fec:	75fb      	strb	r3, [r7, #23]
 8005fee:	e06d      	b.n	80060cc <phCryptoSym_Sw_Des_F+0xf8>
    {
        /* Calculate the XORing of the key and the input to find the correct SBOX lookup index. */
        rc = bArray[(2U*j)] ^ pRoundKey[(2U*j)];
 8005ff0:	7dfb      	ldrb	r3, [r7, #23]
 8005ff2:	005b      	lsls	r3, r3, #1
 8005ff4:	3318      	adds	r3, #24
 8005ff6:	443b      	add	r3, r7
 8005ff8:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8005ffc:	7dfb      	ldrb	r3, [r7, #23]
 8005ffe:	005b      	lsls	r3, r3, #1
 8006000:	6839      	ldr	r1, [r7, #0]
 8006002:	440b      	add	r3, r1
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	4053      	eors	r3, r2
 8006008:	75bb      	strb	r3, [r7, #22]
        rc = (uint8_t)((rc & 0x20U) | ((rc << 4U) & 0x10U) | ((rc >> 1U) & 0x0FU));
 800600a:	7dbb      	ldrb	r3, [r7, #22]
 800600c:	f003 0320 	and.w	r3, r3, #32
 8006010:	b2da      	uxtb	r2, r3
 8006012:	7dbb      	ldrb	r3, [r7, #22]
 8006014:	011b      	lsls	r3, r3, #4
 8006016:	b2db      	uxtb	r3, r3
 8006018:	f003 0310 	and.w	r3, r3, #16
 800601c:	b2db      	uxtb	r3, r3
 800601e:	4313      	orrs	r3, r2
 8006020:	b2da      	uxtb	r2, r3
 8006022:	7dbb      	ldrb	r3, [r7, #22]
 8006024:	085b      	lsrs	r3, r3, #1
 8006026:	b2db      	uxtb	r3, r3
 8006028:	f003 030f 	and.w	r3, r3, #15
 800602c:	b2db      	uxtb	r3, r3
 800602e:	4313      	orrs	r3, r2
 8006030:	75bb      	strb	r3, [r7, #22]
        /* Lookup the result in the SBOX and write back. */
        bArray[j] = (uint8_t)(SBOX[2U*j][rc] << 4U);
 8006032:	7dfb      	ldrb	r3, [r7, #23]
 8006034:	005a      	lsls	r2, r3, #1
 8006036:	7dbb      	ldrb	r3, [r7, #22]
 8006038:	4923      	ldr	r1, [pc, #140]	@ (80060c8 <phCryptoSym_Sw_Des_F+0xf4>)
 800603a:	0192      	lsls	r2, r2, #6
 800603c:	440a      	add	r2, r1
 800603e:	4413      	add	r3, r2
 8006040:	781a      	ldrb	r2, [r3, #0]
 8006042:	7dfb      	ldrb	r3, [r7, #23]
 8006044:	0112      	lsls	r2, r2, #4
 8006046:	b2d2      	uxtb	r2, r2
 8006048:	3318      	adds	r3, #24
 800604a:	443b      	add	r3, r7
 800604c:	f803 2c0c 	strb.w	r2, [r3, #-12]
        /* Calculate the XORing of the key and the input to find the correct SBOX lookup index for the next byte. */
        rc = bArray[(2U*j) + 1U] ^ pRoundKey[(2U*j) + 1U];
 8006050:	7dfb      	ldrb	r3, [r7, #23]
 8006052:	005b      	lsls	r3, r3, #1
 8006054:	3301      	adds	r3, #1
 8006056:	3318      	adds	r3, #24
 8006058:	443b      	add	r3, r7
 800605a:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800605e:	7dfb      	ldrb	r3, [r7, #23]
 8006060:	005b      	lsls	r3, r3, #1
 8006062:	3301      	adds	r3, #1
 8006064:	6839      	ldr	r1, [r7, #0]
 8006066:	440b      	add	r3, r1
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	4053      	eors	r3, r2
 800606c:	75bb      	strb	r3, [r7, #22]
        rc = (uint8_t)((rc & 0x20U) | ((rc << 4U) & 0x10U) | ((rc >> 1U) & 0x0FU));
 800606e:	7dbb      	ldrb	r3, [r7, #22]
 8006070:	f003 0320 	and.w	r3, r3, #32
 8006074:	b2da      	uxtb	r2, r3
 8006076:	7dbb      	ldrb	r3, [r7, #22]
 8006078:	011b      	lsls	r3, r3, #4
 800607a:	b2db      	uxtb	r3, r3
 800607c:	f003 0310 	and.w	r3, r3, #16
 8006080:	b2db      	uxtb	r3, r3
 8006082:	4313      	orrs	r3, r2
 8006084:	b2da      	uxtb	r2, r3
 8006086:	7dbb      	ldrb	r3, [r7, #22]
 8006088:	085b      	lsrs	r3, r3, #1
 800608a:	b2db      	uxtb	r3, r3
 800608c:	f003 030f 	and.w	r3, r3, #15
 8006090:	b2db      	uxtb	r3, r3
 8006092:	4313      	orrs	r3, r2
 8006094:	75bb      	strb	r3, [r7, #22]
        /* Lookup the result in the SBOX and OR it to the result of the previous byte. */
        bArray[j] |= (uint8_t)(SBOX[(2U*j)+1U][rc]);
 8006096:	7dfb      	ldrb	r3, [r7, #23]
 8006098:	3318      	adds	r3, #24
 800609a:	443b      	add	r3, r7
 800609c:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 80060a0:	7dfb      	ldrb	r3, [r7, #23]
 80060a2:	005b      	lsls	r3, r3, #1
 80060a4:	1c5a      	adds	r2, r3, #1
 80060a6:	7dbb      	ldrb	r3, [r7, #22]
 80060a8:	4807      	ldr	r0, [pc, #28]	@ (80060c8 <phCryptoSym_Sw_Des_F+0xf4>)
 80060aa:	0192      	lsls	r2, r2, #6
 80060ac:	4402      	add	r2, r0
 80060ae:	4413      	add	r3, r2
 80060b0:	781a      	ldrb	r2, [r3, #0]
 80060b2:	7dfb      	ldrb	r3, [r7, #23]
 80060b4:	430a      	orrs	r2, r1
 80060b6:	b2d2      	uxtb	r2, r2
 80060b8:	3318      	adds	r3, #24
 80060ba:	443b      	add	r3, r7
 80060bc:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (j = 0; j < 4U; j++)
 80060c0:	7dfb      	ldrb	r3, [r7, #23]
 80060c2:	3301      	adds	r3, #1
 80060c4:	75fb      	strb	r3, [r7, #23]
 80060c6:	e001      	b.n	80060cc <phCryptoSym_Sw_Des_F+0xf8>
 80060c8:	080236d8 	.word	0x080236d8
 80060cc:	7dfb      	ldrb	r3, [r7, #23]
 80060ce:	2b03      	cmp	r3, #3
 80060d0:	d98e      	bls.n	8005ff0 <phCryptoSym_Sw_Des_F+0x1c>
    }

    /* Finally perform the permutation P.
    As there is no regular mapping from input to output the relevant input bits are looked up in bArray and written back to pR.
    When designing this function, the goal was to minimize the shift operations. */
    pR[1] = (uint8_t)((bArray[0] & 0x88U));        /* Input bits 1, 5 */
 80060d2:	7b3a      	ldrb	r2, [r7, #12]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	3301      	adds	r3, #1
 80060d8:	f022 0277 	bic.w	r2, r2, #119	@ 0x77
 80060dc:	b2d2      	uxtb	r2, r2
 80060de:	701a      	strb	r2, [r3, #0]
    bArray[0] <<=1U;
 80060e0:	7b3b      	ldrb	r3, [r7, #12]
 80060e2:	005b      	lsls	r3, r3, #1
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	733b      	strb	r3, [r7, #12]
    pR[2] = (uint8_t)(bArray[0] & 0x80U);          /* Input bit 2 */
 80060e8:	7b3a      	ldrb	r2, [r7, #12]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	3302      	adds	r3, #2
 80060ee:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 80060f2:	b2d2      	uxtb	r2, r2
 80060f4:	701a      	strb	r2, [r3, #0]
    pR[2] |= (uint8_t)((bArray[0]& 0x02U ) << 5U);  /* Input bit 8 */
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	3302      	adds	r3, #2
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	b25a      	sxtb	r2, r3
 80060fe:	7b3b      	ldrb	r3, [r7, #12]
 8006100:	b25b      	sxtb	r3, r3
 8006102:	015b      	lsls	r3, r3, #5
 8006104:	b25b      	sxtb	r3, r3
 8006106:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800610a:	b25b      	sxtb	r3, r3
 800610c:	4313      	orrs	r3, r2
 800610e:	b25a      	sxtb	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	3302      	adds	r3, #2
 8006114:	b2d2      	uxtb	r2, r2
 8006116:	701a      	strb	r2, [r3, #0]
    pR[0] = (uint8_t)((bArray[0]& 0x04U ) << 4U);   /* Input bit 7 */
 8006118:	7b3b      	ldrb	r3, [r7, #12]
 800611a:	011b      	lsls	r3, r3, #4
 800611c:	b2db      	uxtb	r3, r3
 800611e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006122:	b2da      	uxtb	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	701a      	strb	r2, [r3, #0]
    pR[3] = (uint8_t)((bArray[0] & 0x08U) << 1U);   /* Input bit 6 */
 8006128:	7b3b      	ldrb	r3, [r7, #12]
 800612a:	005b      	lsls	r3, r3, #1
 800612c:	b2da      	uxtb	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	3303      	adds	r3, #3
 8006132:	f002 0210 	and.w	r2, r2, #16
 8006136:	b2d2      	uxtb	r2, r2
 8006138:	701a      	strb	r2, [r3, #0]
    bArray[0] >>= 4U;
 800613a:	7b3b      	ldrb	r3, [r7, #12]
 800613c:	091b      	lsrs	r3, r3, #4
 800613e:	b2db      	uxtb	r3, r3
 8006140:	733b      	strb	r3, [r7, #12]
    pR[3] |= (uint8_t)(bArray[0] & 0x02U);         /* Input bit 4 */
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	3303      	adds	r3, #3
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	b25a      	sxtb	r2, r3
 800614a:	7b3b      	ldrb	r3, [r7, #12]
 800614c:	b25b      	sxtb	r3, r3
 800614e:	f003 0302 	and.w	r3, r3, #2
 8006152:	b25b      	sxtb	r3, r3
 8006154:	4313      	orrs	r3, r2
 8006156:	b25a      	sxtb	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	3303      	adds	r3, #3
 800615c:	b2d2      	uxtb	r2, r2
 800615e:	701a      	strb	r2, [r3, #0]
    bArray[0] >>= 1U;
 8006160:	7b3b      	ldrb	r3, [r7, #12]
 8006162:	085b      	lsrs	r3, r3, #1
 8006164:	b2db      	uxtb	r3, r3
 8006166:	733b      	strb	r3, [r7, #12]
    pR[2] |= (uint8_t)(bArray[0] & 0x02U);         /* Input bit 3 */
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	3302      	adds	r3, #2
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	b25a      	sxtb	r2, r3
 8006170:	7b3b      	ldrb	r3, [r7, #12]
 8006172:	b25b      	sxtb	r3, r3
 8006174:	f003 0302 	and.w	r3, r3, #2
 8006178:	b25b      	sxtb	r3, r3
 800617a:	4313      	orrs	r3, r2
 800617c:	b25a      	sxtb	r2, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	3302      	adds	r3, #2
 8006182:	b2d2      	uxtb	r2, r2
 8006184:	701a      	strb	r2, [r3, #0]
    pR[0]|= (uint8_t)((bArray[1] & 0x01U) << 7U);   /* Input bit 16 */
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	781a      	ldrb	r2, [r3, #0]
 800618a:	7b7b      	ldrb	r3, [r7, #13]
 800618c:	01db      	lsls	r3, r3, #7
 800618e:	b2db      	uxtb	r3, r3
 8006190:	4313      	orrs	r3, r2
 8006192:	b2da      	uxtb	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	701a      	strb	r2, [r3, #0]
    pR[1]|= (uint8_t)((bArray[1] & 0x02U) << 5U);   /* Input bit 15 */
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	3301      	adds	r3, #1
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	b25a      	sxtb	r2, r3
 80061a0:	7b7b      	ldrb	r3, [r7, #13]
 80061a2:	b25b      	sxtb	r3, r3
 80061a4:	015b      	lsls	r3, r3, #5
 80061a6:	b25b      	sxtb	r3, r3
 80061a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ac:	b25b      	sxtb	r3, r3
 80061ae:	4313      	orrs	r3, r2
 80061b0:	b25a      	sxtb	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	3301      	adds	r3, #1
 80061b6:	b2d2      	uxtb	r2, r2
 80061b8:	701a      	strb	r2, [r3, #0]
    pR[2]|= (uint8_t)((bArray[1] & 0x04U) << 2U);   /* Input bit 14 */
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	3302      	adds	r3, #2
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	b25a      	sxtb	r2, r3
 80061c2:	7b7b      	ldrb	r3, [r7, #13]
 80061c4:	b25b      	sxtb	r3, r3
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	b25b      	sxtb	r3, r3
 80061ca:	f003 0310 	and.w	r3, r3, #16
 80061ce:	b25b      	sxtb	r3, r3
 80061d0:	4313      	orrs	r3, r2
 80061d2:	b25a      	sxtb	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	3302      	adds	r3, #2
 80061d8:	b2d2      	uxtb	r2, r2
 80061da:	701a      	strb	r2, [r3, #0]
    pR[3]|= (uint8_t)((bArray[1] & 0x08U) << 3U);   /* Input bit 13 */
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	3303      	adds	r3, #3
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	b25a      	sxtb	r2, r3
 80061e4:	7b7b      	ldrb	r3, [r7, #13]
 80061e6:	b25b      	sxtb	r3, r3
 80061e8:	00db      	lsls	r3, r3, #3
 80061ea:	b25b      	sxtb	r3, r3
 80061ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061f0:	b25b      	sxtb	r3, r3
 80061f2:	4313      	orrs	r3, r2
 80061f4:	b25a      	sxtb	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	3303      	adds	r3, #3
 80061fa:	b2d2      	uxtb	r2, r2
 80061fc:	701a      	strb	r2, [r3, #0]
    bArray[1] >>= 2U;
 80061fe:	7b7b      	ldrb	r3, [r7, #13]
 8006200:	089b      	lsrs	r3, r3, #2
 8006202:	b2db      	uxtb	r3, r3
 8006204:	737b      	strb	r3, [r7, #13]
    pR[0] |= (uint8_t)(bArray[1]& 0x04U);          /* Input bit 12 */
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	b25a      	sxtb	r2, r3
 800620c:	7b7b      	ldrb	r3, [r7, #13]
 800620e:	b25b      	sxtb	r3, r3
 8006210:	f003 0304 	and.w	r3, r3, #4
 8006214:	b25b      	sxtb	r3, r3
 8006216:	4313      	orrs	r3, r2
 8006218:	b25b      	sxtb	r3, r3
 800621a:	b2da      	uxtb	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	701a      	strb	r2, [r3, #0]
    bArray[1] >>= 1U;
 8006220:	7b7b      	ldrb	r3, [r7, #13]
 8006222:	085b      	lsrs	r3, r3, #1
 8006224:	b2db      	uxtb	r3, r3
 8006226:	737b      	strb	r3, [r7, #13]
    pR[3] |= (uint8_t)(bArray[1]& 0x04U);          /* Input bit 11 */
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	3303      	adds	r3, #3
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	b25a      	sxtb	r2, r3
 8006230:	7b7b      	ldrb	r3, [r7, #13]
 8006232:	b25b      	sxtb	r3, r3
 8006234:	f003 0304 	and.w	r3, r3, #4
 8006238:	b25b      	sxtb	r3, r3
 800623a:	4313      	orrs	r3, r2
 800623c:	b25a      	sxtb	r2, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	3303      	adds	r3, #3
 8006242:	b2d2      	uxtb	r2, r2
 8006244:	701a      	strb	r2, [r3, #0]
    bArray[1] >>= 3U;
 8006246:	7b7b      	ldrb	r3, [r7, #13]
 8006248:	08db      	lsrs	r3, r3, #3
 800624a:	b2db      	uxtb	r3, r3
 800624c:	737b      	strb	r3, [r7, #13]
    pR[1] |= (uint8_t)(bArray[1]& 0x01U);          /* Input bit 10 */
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	3301      	adds	r3, #1
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	b25a      	sxtb	r2, r3
 8006256:	7b7b      	ldrb	r3, [r7, #13]
 8006258:	b25b      	sxtb	r3, r3
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	b25b      	sxtb	r3, r3
 8006260:	4313      	orrs	r3, r2
 8006262:	b25a      	sxtb	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	3301      	adds	r3, #1
 8006268:	b2d2      	uxtb	r2, r2
 800626a:	701a      	strb	r2, [r3, #0]
    bArray[1] >>= 1U;
 800626c:	7b7b      	ldrb	r3, [r7, #13]
 800626e:	085b      	lsrs	r3, r3, #1
 8006270:	b2db      	uxtb	r3, r3
 8006272:	737b      	strb	r3, [r7, #13]
    pR[2] |= (uint8_t)(bArray[1]& 0x01U);          /* Input bit 9 */
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	3302      	adds	r3, #2
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	b25a      	sxtb	r2, r3
 800627c:	7b7b      	ldrb	r3, [r7, #13]
 800627e:	b25b      	sxtb	r3, r3
 8006280:	f003 0301 	and.w	r3, r3, #1
 8006284:	b25b      	sxtb	r3, r3
 8006286:	4313      	orrs	r3, r2
 8006288:	b25a      	sxtb	r2, r3
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	3302      	adds	r3, #2
 800628e:	b2d2      	uxtb	r2, r2
 8006290:	701a      	strb	r2, [r3, #0]

    pR[0] |= (uint8_t)((bArray[2] & 0x80U) >> 7U);  /* Input bit 17  */
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	781a      	ldrb	r2, [r3, #0]
 8006296:	7bbb      	ldrb	r3, [r7, #14]
 8006298:	09db      	lsrs	r3, r3, #7
 800629a:	b2db      	uxtb	r3, r3
 800629c:	4313      	orrs	r3, r2
 800629e:	b2da      	uxtb	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	701a      	strb	r2, [r3, #0]
    pR[1] |= (uint8_t)((bArray[2] & 0x40U) >> 4U);  /* Input bit 18 */
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	3301      	adds	r3, #1
 80062a8:	7819      	ldrb	r1, [r3, #0]
 80062aa:	7bbb      	ldrb	r3, [r7, #14]
 80062ac:	091b      	lsrs	r3, r3, #4
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	f003 0304 	and.w	r3, r3, #4
 80062b4:	b2da      	uxtb	r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	3301      	adds	r3, #1
 80062ba:	430a      	orrs	r2, r1
 80062bc:	b2d2      	uxtb	r2, r2
 80062be:	701a      	strb	r2, [r3, #0]
    pR[3] |= (uint8_t)((bArray[2] & 0x20U) << 2U);  /* Input bit 19 */
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	3303      	adds	r3, #3
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	b25a      	sxtb	r2, r3
 80062c8:	7bbb      	ldrb	r3, [r7, #14]
 80062ca:	b25b      	sxtb	r3, r3
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	b25b      	sxtb	r3, r3
 80062d0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80062d4:	b25b      	sxtb	r3, r3
 80062d6:	4313      	orrs	r3, r2
 80062d8:	b25a      	sxtb	r2, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	3303      	adds	r3, #3
 80062de:	b2d2      	uxtb	r2, r2
 80062e0:	701a      	strb	r2, [r3, #0]
    bArray[2]<<=1U;
 80062e2:	7bbb      	ldrb	r3, [r7, #14]
 80062e4:	005b      	lsls	r3, r3, #1
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	73bb      	strb	r3, [r7, #14]
    pR[0] |= (uint8_t)(bArray[2] & 0x20U);         /* Input bit 20 */
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	b25a      	sxtb	r2, r3
 80062f0:	7bbb      	ldrb	r3, [r7, #14]
 80062f2:	b25b      	sxtb	r3, r3
 80062f4:	f003 0320 	and.w	r3, r3, #32
 80062f8:	b25b      	sxtb	r3, r3
 80062fa:	4313      	orrs	r3, r2
 80062fc:	b25b      	sxtb	r3, r3
 80062fe:	b2da      	uxtb	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	701a      	strb	r2, [r3, #0]
    pR[0] |= (uint8_t)(bArray[2] & 0x10U);         /* Input bit 21 */
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	b25a      	sxtb	r2, r3
 800630a:	7bbb      	ldrb	r3, [r7, #14]
 800630c:	b25b      	sxtb	r3, r3
 800630e:	f003 0310 	and.w	r3, r3, #16
 8006312:	b25b      	sxtb	r3, r3
 8006314:	4313      	orrs	r3, r2
 8006316:	b25b      	sxtb	r3, r3
 8006318:	b2da      	uxtb	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	701a      	strb	r2, [r3, #0]
    pR[3] |= (uint8_t)(bArray[2] & 0x08U);         /* Input bit 22 */
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	3303      	adds	r3, #3
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	b25a      	sxtb	r2, r3
 8006326:	7bbb      	ldrb	r3, [r7, #14]
 8006328:	b25b      	sxtb	r3, r3
 800632a:	f003 0308 	and.w	r3, r3, #8
 800632e:	b25b      	sxtb	r3, r3
 8006330:	4313      	orrs	r3, r2
 8006332:	b25a      	sxtb	r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	3303      	adds	r3, #3
 8006338:	b2d2      	uxtb	r2, r2
 800633a:	701a      	strb	r2, [r3, #0]
    bArray[2]<<=3U;
 800633c:	7bbb      	ldrb	r3, [r7, #14]
 800633e:	00db      	lsls	r3, r3, #3
 8006340:	b2db      	uxtb	r3, r3
 8006342:	73bb      	strb	r3, [r7, #14]
    pR[1]|= (uint8_t)(bArray[2] & 0x20U);          /* Input bit 23 */
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	3301      	adds	r3, #1
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	b25a      	sxtb	r2, r3
 800634c:	7bbb      	ldrb	r3, [r7, #14]
 800634e:	b25b      	sxtb	r3, r3
 8006350:	f003 0320 	and.w	r3, r3, #32
 8006354:	b25b      	sxtb	r3, r3
 8006356:	4313      	orrs	r3, r2
 8006358:	b25a      	sxtb	r2, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	3301      	adds	r3, #1
 800635e:	b2d2      	uxtb	r2, r2
 8006360:	701a      	strb	r2, [r3, #0]
    pR[2]|= (uint8_t)((bArray[2] & 0x10U) << 1U);   /* Input bit 24 */
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	3302      	adds	r3, #2
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	b25a      	sxtb	r2, r3
 800636a:	7bbb      	ldrb	r3, [r7, #14]
 800636c:	b25b      	sxtb	r3, r3
 800636e:	005b      	lsls	r3, r3, #1
 8006370:	b25b      	sxtb	r3, r3
 8006372:	f003 0320 	and.w	r3, r3, #32
 8006376:	b25b      	sxtb	r3, r3
 8006378:	4313      	orrs	r3, r2
 800637a:	b25a      	sxtb	r2, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	3302      	adds	r3, #2
 8006380:	b2d2      	uxtb	r2, r2
 8006382:	701a      	strb	r2, [r3, #0]

    pR[0] |= (uint8_t)(bArray[3] & 0x08U);         /* Input bit 29 */
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	b25a      	sxtb	r2, r3
 800638a:	7bfb      	ldrb	r3, [r7, #15]
 800638c:	b25b      	sxtb	r3, r3
 800638e:	f003 0308 	and.w	r3, r3, #8
 8006392:	b25b      	sxtb	r3, r3
 8006394:	4313      	orrs	r3, r2
 8006396:	b25b      	sxtb	r3, r3
 8006398:	b2da      	uxtb	r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	701a      	strb	r2, [r3, #0]
    pR[1] |= (uint8_t)(bArray[3] & 0x02U);         /* Input bit 31 */
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	3301      	adds	r3, #1
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	b25a      	sxtb	r2, r3
 80063a6:	7bfb      	ldrb	r3, [r7, #15]
 80063a8:	b25b      	sxtb	r3, r3
 80063aa:	f003 0302 	and.w	r3, r3, #2
 80063ae:	b25b      	sxtb	r3, r3
 80063b0:	4313      	orrs	r3, r2
 80063b2:	b25a      	sxtb	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	3301      	adds	r3, #1
 80063b8:	b2d2      	uxtb	r2, r2
 80063ba:	701a      	strb	r2, [r3, #0]
    pR[3] |= (uint8_t)((bArray[3] & 0x80U) >> 7U);  /* Input bit 25 */
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	3303      	adds	r3, #3
 80063c0:	7819      	ldrb	r1, [r3, #0]
 80063c2:	7bfb      	ldrb	r3, [r7, #15]
 80063c4:	09db      	lsrs	r3, r3, #7
 80063c6:	b2da      	uxtb	r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	3303      	adds	r3, #3
 80063cc:	430a      	orrs	r2, r1
 80063ce:	b2d2      	uxtb	r2, r2
 80063d0:	701a      	strb	r2, [r3, #0]
    pR[2] |= (uint8_t)((bArray[3] & 0x01U) << 3U);  /* Input bit 32 */
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	3302      	adds	r3, #2
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	b25a      	sxtb	r2, r3
 80063da:	7bfb      	ldrb	r3, [r7, #15]
 80063dc:	b25b      	sxtb	r3, r3
 80063de:	00db      	lsls	r3, r3, #3
 80063e0:	b25b      	sxtb	r3, r3
 80063e2:	f003 0308 	and.w	r3, r3, #8
 80063e6:	b25b      	sxtb	r3, r3
 80063e8:	4313      	orrs	r3, r2
 80063ea:	b25a      	sxtb	r2, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	3302      	adds	r3, #2
 80063f0:	b2d2      	uxtb	r2, r2
 80063f2:	701a      	strb	r2, [r3, #0]
    pR[3] |= (uint8_t)((bArray[3] & 0x04U) << 3U);  /* Input bit 30 */
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	3303      	adds	r3, #3
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	b25a      	sxtb	r2, r3
 80063fc:	7bfb      	ldrb	r3, [r7, #15]
 80063fe:	b25b      	sxtb	r3, r3
 8006400:	00db      	lsls	r3, r3, #3
 8006402:	b25b      	sxtb	r3, r3
 8006404:	f003 0320 	and.w	r3, r3, #32
 8006408:	b25b      	sxtb	r3, r3
 800640a:	4313      	orrs	r3, r2
 800640c:	b25a      	sxtb	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	3303      	adds	r3, #3
 8006412:	b2d2      	uxtb	r2, r2
 8006414:	701a      	strb	r2, [r3, #0]
    bArray[3]>>=2U;
 8006416:	7bfb      	ldrb	r3, [r7, #15]
 8006418:	089b      	lsrs	r3, r3, #2
 800641a:	b2db      	uxtb	r3, r3
 800641c:	73fb      	strb	r3, [r7, #15]
    pR[1] |= (uint8_t)((bArray[3] & 0x10U));       /* Input bit 26 */
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	3301      	adds	r3, #1
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	b25a      	sxtb	r2, r3
 8006426:	7bfb      	ldrb	r3, [r7, #15]
 8006428:	b25b      	sxtb	r3, r3
 800642a:	f003 0310 	and.w	r3, r3, #16
 800642e:	b25b      	sxtb	r3, r3
 8006430:	4313      	orrs	r3, r2
 8006432:	b25a      	sxtb	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	3301      	adds	r3, #1
 8006438:	b2d2      	uxtb	r2, r2
 800643a:	701a      	strb	r2, [r3, #0]
    bArray[3]>>=1U;
 800643c:	7bfb      	ldrb	r3, [r7, #15]
 800643e:	085b      	lsrs	r3, r3, #1
 8006440:	b2db      	uxtb	r3, r3
 8006442:	73fb      	strb	r3, [r7, #15]
    pR[2] |= (uint8_t)((bArray[3] & 0x04U));       /* Input bit 27 */
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	3302      	adds	r3, #2
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	b25a      	sxtb	r2, r3
 800644c:	7bfb      	ldrb	r3, [r7, #15]
 800644e:	b25b      	sxtb	r3, r3
 8006450:	f003 0304 	and.w	r3, r3, #4
 8006454:	b25b      	sxtb	r3, r3
 8006456:	4313      	orrs	r3, r2
 8006458:	b25a      	sxtb	r2, r3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	3302      	adds	r3, #2
 800645e:	b2d2      	uxtb	r2, r2
 8006460:	701a      	strb	r2, [r3, #0]
    pR[0] |= (uint8_t)((bArray[3] & 0x02U));       /* Input bit 28 */
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	b25a      	sxtb	r2, r3
 8006468:	7bfb      	ldrb	r3, [r7, #15]
 800646a:	b25b      	sxtb	r3, r3
 800646c:	f003 0302 	and.w	r3, r3, #2
 8006470:	b25b      	sxtb	r3, r3
 8006472:	4313      	orrs	r3, r2
 8006474:	b25b      	sxtb	r3, r3
 8006476:	b2da      	uxtb	r2, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	701a      	strb	r2, [r3, #0]

}
 800647c:	bf00      	nop
 800647e:	3718      	adds	r7, #24
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <phCryptoSym_Sw_Des_Expand>:

void phCryptoSym_Sw_Des_Expand(
                               uint8_t PH_CRYTOSYM_SW_FAST_RAM * pR,
                               uint8_t PH_CRYTOSYM_SW_FAST_RAM * pRexp
                               )
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
    pRexp[0] = (uint8_t)((uint8_t)(((pR[3] & 0x01U) << 5U) | (pR[0] >> 3U)) & MASK6); /* Input bits 32 1 2 3 4 5 */
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	3303      	adds	r3, #3
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	015b      	lsls	r3, r3, #5
 8006496:	b2db      	uxtb	r3, r3
 8006498:	f003 0320 	and.w	r3, r3, #32
 800649c:	b2da      	uxtb	r2, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	08db      	lsrs	r3, r3, #3
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	4313      	orrs	r3, r2
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80064ae:	b2da      	uxtb	r2, r3
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	701a      	strb	r2, [r3, #0]
    pRexp[1] = (uint8_t)((uint8_t)((pR[0] << 1U) | ((pR[1] & 0x80U) >> 7U)) & MASK6); /* Input bits 4 5 6 7 8 9 */
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	005b      	lsls	r3, r3, #1
 80064ba:	b2da      	uxtb	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	3301      	adds	r3, #1
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	09db      	lsrs	r3, r3, #7
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	4313      	orrs	r3, r2
 80064c8:	b2da      	uxtb	r2, r3
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	3301      	adds	r3, #1
 80064ce:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80064d2:	b2d2      	uxtb	r2, r2
 80064d4:	701a      	strb	r2, [r3, #0]
    pRexp[2] = (uint8_t)((uint8_t)(((pR[0] & 0x01U) << 5U) | (pR[1] >> 3U)) & MASK6); /* Input bits 8 9 10 11 12 13 */
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	015b      	lsls	r3, r3, #5
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	f003 0320 	and.w	r3, r3, #32
 80064e2:	b2da      	uxtb	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	3301      	adds	r3, #1
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	08db      	lsrs	r3, r3, #3
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	4313      	orrs	r3, r2
 80064f0:	b2da      	uxtb	r2, r3
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	3302      	adds	r3, #2
 80064f6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80064fa:	b2d2      	uxtb	r2, r2
 80064fc:	701a      	strb	r2, [r3, #0]
    pRexp[3] = (uint8_t)((uint8_t)((pR[1] << 1U) | ((pR[2] & 0x80U) >> 7U)) & MASK6); /* Input bits 12 13 14 15 16 17 */
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	3301      	adds	r3, #1
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	005b      	lsls	r3, r3, #1
 8006506:	b2da      	uxtb	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	3302      	adds	r3, #2
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	09db      	lsrs	r3, r3, #7
 8006510:	b2db      	uxtb	r3, r3
 8006512:	4313      	orrs	r3, r2
 8006514:	b2da      	uxtb	r2, r3
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	3303      	adds	r3, #3
 800651a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800651e:	b2d2      	uxtb	r2, r2
 8006520:	701a      	strb	r2, [r3, #0]
    pRexp[4] = (uint8_t)((uint8_t)(((pR[1] & 0x01U) << 5U) | (pR[2] >> 3U)) & MASK6); /* Input bits 16 17 18 19 20 21 */
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	3301      	adds	r3, #1
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	015b      	lsls	r3, r3, #5
 800652a:	b2db      	uxtb	r3, r3
 800652c:	f003 0320 	and.w	r3, r3, #32
 8006530:	b2da      	uxtb	r2, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	3302      	adds	r3, #2
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	08db      	lsrs	r3, r3, #3
 800653a:	b2db      	uxtb	r3, r3
 800653c:	4313      	orrs	r3, r2
 800653e:	b2da      	uxtb	r2, r3
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	3304      	adds	r3, #4
 8006544:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8006548:	b2d2      	uxtb	r2, r2
 800654a:	701a      	strb	r2, [r3, #0]
    pRexp[5] = (uint8_t)((uint8_t)((pR[2] << 1U) | ((pR[3] & 0x80U) >> 7U)) & MASK6); /* Input bits 20 21 22 23 24 25*/
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	3302      	adds	r3, #2
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	005b      	lsls	r3, r3, #1
 8006554:	b2da      	uxtb	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	3303      	adds	r3, #3
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	09db      	lsrs	r3, r3, #7
 800655e:	b2db      	uxtb	r3, r3
 8006560:	4313      	orrs	r3, r2
 8006562:	b2da      	uxtb	r2, r3
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	3305      	adds	r3, #5
 8006568:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800656c:	b2d2      	uxtb	r2, r2
 800656e:	701a      	strb	r2, [r3, #0]
    pRexp[6] = (uint8_t)((uint8_t)(((pR[2] & 0x01U) << 5U) | (pR[3] >> 3U)) & MASK6); /* Input bits 24 25 26 27 28 29*/
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	3302      	adds	r3, #2
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	015b      	lsls	r3, r3, #5
 8006578:	b2db      	uxtb	r3, r3
 800657a:	f003 0320 	and.w	r3, r3, #32
 800657e:	b2da      	uxtb	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	3303      	adds	r3, #3
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	08db      	lsrs	r3, r3, #3
 8006588:	b2db      	uxtb	r3, r3
 800658a:	4313      	orrs	r3, r2
 800658c:	b2da      	uxtb	r2, r3
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	3306      	adds	r3, #6
 8006592:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8006596:	b2d2      	uxtb	r2, r2
 8006598:	701a      	strb	r2, [r3, #0]
    pRexp[7] = (uint8_t)((uint8_t)((pR[3] << 1U) | ((pR[0] & 0x80U) >> 7U)) & MASK6); /* Input bits 28 29 30 31 32 1 */
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	3303      	adds	r3, #3
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	005b      	lsls	r3, r3, #1
 80065a2:	b2da      	uxtb	r2, r3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	09db      	lsrs	r3, r3, #7
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	4313      	orrs	r3, r2
 80065ae:	b2da      	uxtb	r2, r3
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	3307      	adds	r3, #7
 80065b4:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80065b8:	b2d2      	uxtb	r2, r2
 80065ba:	701a      	strb	r2, [r3, #0]
}
 80065bc:	bf00      	nop
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <phCryptoSym_Sw_CMAC_GenerateK1K2>:
phStatus_t phCryptoSym_Sw_CMAC_GenerateK1K2(
    phCryptoSym_Sw_DataParams_t * pDataParams,
    uint8_t * pSubKey1,
    uint8_t * pSubKey2
    )
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b08a      	sub	sp, #40	@ 0x28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_CRYTOSYM_SW_FAST_RAM aBuffer[PH_CRYPTOSYM_SW_MAX_BLOCK_SIZE];
    uint16_t    PH_MEMLOC_REM wBlockSize;
    uint8_t     PH_MEMLOC_REM bR_b;

    (void)memset(aBuffer, 0x00, (size_t)sizeof(aBuffer));
 80065d4:	f107 0314 	add.w	r3, r7, #20
 80065d8:	2210      	movs	r2, #16
 80065da:	2100      	movs	r1, #0
 80065dc:	4618      	mov	r0, r3
 80065de:	f01a f959 	bl	8020894 <memset>

    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_GetConfig(pDataParams, PH_CRYPTOSYM_CONFIG_BLOCK_SIZE, &wBlockSize));
 80065e2:	f107 0312 	add.w	r3, r7, #18
 80065e6:	461a      	mov	r2, r3
 80065e8:	2102      	movs	r1, #2
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	f7fe f85e 	bl	80046ac <phCryptoSym_Sw_GetConfig>
 80065f0:	4603      	mov	r3, r0
 80065f2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80065f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d001      	beq.n	80065fe <phCryptoSym_Sw_CMAC_GenerateK1K2+0x36>
 80065fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80065fc:	e058      	b.n	80066b0 <phCryptoSym_Sw_CMAC_GenerateK1K2+0xe8>

    /* Calculate xor value according to Seq. 5.3 of SP_800-38B */
    /* R128 = 0exp(120) || 10000111, and R64 = 0exp(59) || 11011. */
    switch (wBlockSize)
 80065fe:	8a7b      	ldrh	r3, [r7, #18]
 8006600:	2b08      	cmp	r3, #8
 8006602:	d005      	beq.n	8006610 <phCryptoSym_Sw_CMAC_GenerateK1K2+0x48>
 8006604:	2b10      	cmp	r3, #16
 8006606:	d107      	bne.n	8006618 <phCryptoSym_Sw_CMAC_GenerateK1K2+0x50>
    {
    case PH_CRYPTOSYM_AES_BLOCK_SIZE:
        bR_b = 0x87U;
 8006608:	2387      	movs	r3, #135	@ 0x87
 800660a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        break;
 800660e:	e006      	b.n	800661e <phCryptoSym_Sw_CMAC_GenerateK1K2+0x56>
    case PH_CRYPTOSYM_DES_BLOCK_SIZE:
        bR_b = 0x1BU;
 8006610:	231b      	movs	r3, #27
 8006612:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        break;
 8006616:	e002      	b.n	800661e <phCryptoSym_Sw_CMAC_GenerateK1K2+0x56>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_CRYPTOSYM);
 8006618:	f24e 137f 	movw	r3, #57727	@ 0xe17f
 800661c:	e048      	b.n	80066b0 <phCryptoSym_Sw_CMAC_GenerateK1K2+0xe8>
    }

    /* Encrypt zero block*/
    /* 1. Let L = CIPHK(0 exp b). */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_EncryptBlock(pDataParams, aBuffer));
 800661e:	f107 0314 	add.w	r3, r7, #20
 8006622:	4619      	mov	r1, r3
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f000 f879 	bl	800671c <phCryptoSym_Sw_EncryptBlock>
 800662a:	4603      	mov	r3, r0
 800662c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800662e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006630:	2b00      	cmp	r3, #0
 8006632:	d001      	beq.n	8006638 <phCryptoSym_Sw_CMAC_GenerateK1K2+0x70>
 8006634:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006636:	e03b      	b.n	80066b0 <phCryptoSym_Sw_CMAC_GenerateK1K2+0xe8>

    /* Shift the pSubKey array according to NIST SP_800-38B */
    /* 2. If MSB1(L) = 0, then K1 = L << 1U; */
    /* Else K1 = (L << 1U) xor Rb; see Sec. 5.3 for the definition of Rb. */
    phCryptoSym_Sw_CMAC_LeftShift(aBuffer, (uint8_t)wBlockSize, pSubKey1);
 8006638:	8a7b      	ldrh	r3, [r7, #18]
 800663a:	b2d9      	uxtb	r1, r3
 800663c:	f107 0314 	add.w	r3, r7, #20
 8006640:	68ba      	ldr	r2, [r7, #8]
 8006642:	4618      	mov	r0, r3
 8006644:	f000 f838 	bl	80066b8 <phCryptoSym_Sw_CMAC_LeftShift>
    if (0U != (aBuffer[0] & 0x80U))
 8006648:	7d3b      	ldrb	r3, [r7, #20]
 800664a:	b25b      	sxtb	r3, r3
 800664c:	2b00      	cmp	r3, #0
 800664e:	da0d      	bge.n	800666c <phCryptoSym_Sw_CMAC_GenerateK1K2+0xa4>
    {
        /* We need to perform the XOR operation with the R_b array */
        pSubKey1[wBlockSize - 1U ]  ^= bR_b;
 8006650:	8a7b      	ldrh	r3, [r7, #18]
 8006652:	3b01      	subs	r3, #1
 8006654:	68ba      	ldr	r2, [r7, #8]
 8006656:	4413      	add	r3, r2
 8006658:	7819      	ldrb	r1, [r3, #0]
 800665a:	8a7b      	ldrh	r3, [r7, #18]
 800665c:	3b01      	subs	r3, #1
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	4413      	add	r3, r2
 8006662:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8006666:	404a      	eors	r2, r1
 8006668:	b2d2      	uxtb	r2, r2
 800666a:	701a      	strb	r2, [r3, #0]

    /* Now let's continue with Key 2 */
    /* Shift the pSubKey array according to NIST SP_800-38B*/
    /* 3. If MSB1(K1) = 0, then K2 = K1 << 1U; */
    /* Else K2 = (K1 << 1U) xor Rb. */
    phCryptoSym_Sw_CMAC_LeftShift(pSubKey1, (uint8_t)wBlockSize, pSubKey2);
 800666c:	8a7b      	ldrh	r3, [r7, #18]
 800666e:	b2db      	uxtb	r3, r3
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	4619      	mov	r1, r3
 8006674:	68b8      	ldr	r0, [r7, #8]
 8006676:	f000 f81f 	bl	80066b8 <phCryptoSym_Sw_CMAC_LeftShift>

    if (0U != (pSubKey1[0] & 0x80U))
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	b25b      	sxtb	r3, r3
 8006680:	2b00      	cmp	r3, #0
 8006682:	da0d      	bge.n	80066a0 <phCryptoSym_Sw_CMAC_GenerateK1K2+0xd8>
    {
        /* We need to perform the XOR operation with the R_b array */
        pSubKey2[wBlockSize - 1U ]  ^= bR_b;
 8006684:	8a7b      	ldrh	r3, [r7, #18]
 8006686:	3b01      	subs	r3, #1
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	4413      	add	r3, r2
 800668c:	7819      	ldrb	r1, [r3, #0]
 800668e:	8a7b      	ldrh	r3, [r7, #18]
 8006690:	3b01      	subs	r3, #1
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	4413      	add	r3, r2
 8006696:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800669a:	404a      	eors	r2, r1
 800669c:	b2d2      	uxtb	r2, r2
 800669e:	701a      	strb	r2, [r3, #0]
#ifndef PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION
    pDataParams->bCMACSubKeysInitialized    = PH_ON;
#endif /* PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION */

    /* Clear buffer for security reasons */
    (void)memset(aBuffer, 0x00, (size_t)sizeof(aBuffer));
 80066a0:	f107 0314 	add.w	r3, r7, #20
 80066a4:	2210      	movs	r2, #16
 80066a6:	2100      	movs	r1, #0
 80066a8:	4618      	mov	r0, r3
 80066aa:	f01a f8f3 	bl	8020894 <memset>

    return PH_ERR_SUCCESS;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3728      	adds	r7, #40	@ 0x28
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <phCryptoSym_Sw_CMAC_LeftShift>:
void phCryptoSym_Sw_CMAC_LeftShift(
                                   const uint8_t * pInBuffer,
                                   uint8_t bInputLen,
                                   uint8_t * pOutBuffer
                                   )
{
 80066b8:	b480      	push	{r7}
 80066ba:	b087      	sub	sp, #28
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	460b      	mov	r3, r1
 80066c2:	607a      	str	r2, [r7, #4]
 80066c4:	72fb      	strb	r3, [r7, #11]
    uint8_t PH_MEMLOC_REM bOverflow = 0;
 80066c6:	2300      	movs	r3, #0
 80066c8:	75fb      	strb	r3, [r7, #23]

    do
    {
        bInputLen--;
 80066ca:	7afb      	ldrb	r3, [r7, #11]
 80066cc:	3b01      	subs	r3, #1
 80066ce:	72fb      	strb	r3, [r7, #11]
        pOutBuffer[bInputLen] = pInBuffer[bInputLen] << 1U;
 80066d0:	7afb      	ldrb	r3, [r7, #11]
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	4413      	add	r3, r2
 80066d6:	781a      	ldrb	r2, [r3, #0]
 80066d8:	7afb      	ldrb	r3, [r7, #11]
 80066da:	6879      	ldr	r1, [r7, #4]
 80066dc:	440b      	add	r3, r1
 80066de:	0052      	lsls	r2, r2, #1
 80066e0:	b2d2      	uxtb	r2, r2
 80066e2:	701a      	strb	r2, [r3, #0]
        pOutBuffer[bInputLen] |= bOverflow;
 80066e4:	7afb      	ldrb	r3, [r7, #11]
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	4413      	add	r3, r2
 80066ea:	7819      	ldrb	r1, [r3, #0]
 80066ec:	7afb      	ldrb	r3, [r7, #11]
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	4413      	add	r3, r2
 80066f2:	7dfa      	ldrb	r2, [r7, #23]
 80066f4:	430a      	orrs	r2, r1
 80066f6:	b2d2      	uxtb	r2, r2
 80066f8:	701a      	strb	r2, [r3, #0]
        bOverflow = (uint8_t) (((pInBuffer[bInputLen] & 0x80U) != 0U) ? 0x01U : 0x00U);
 80066fa:	7afb      	ldrb	r3, [r7, #11]
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	4413      	add	r3, r2
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	09db      	lsrs	r3, r3, #7
 8006704:	75fb      	strb	r3, [r7, #23]
    }
    while(0U != bInputLen);
 8006706:	7afb      	ldrb	r3, [r7, #11]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d1de      	bne.n	80066ca <phCryptoSym_Sw_CMAC_LeftShift+0x12>
}
 800670c:	bf00      	nop
 800670e:	bf00      	nop
 8006710:	371c      	adds	r7, #28
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr
	...

0800671c <phCryptoSym_Sw_EncryptBlock>:

phStatus_t phCryptoSym_Sw_EncryptBlock(
                                       phCryptoSym_Sw_DataParams_t * pDataParams,
                                       uint8_t PH_CRYTOSYM_SW_FAST_RAM * pBlock
                                       )
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
    phStatus_t PH_MEMLOC_REM statusTmp;

    switch (pDataParams->wKeyType)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800672a:	2b05      	cmp	r3, #5
 800672c:	f200 8088 	bhi.w	8006840 <phCryptoSym_Sw_EncryptBlock+0x124>
 8006730:	a201      	add	r2, pc, #4	@ (adr r2, 8006738 <phCryptoSym_Sw_EncryptBlock+0x1c>)
 8006732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006736:	bf00      	nop
 8006738:	08006751 	.word	0x08006751
 800673c:	08006769 	.word	0x08006769
 8006740:	08006781 	.word	0x08006781
 8006744:	08006799 	.word	0x08006799
 8006748:	080067b1 	.word	0x080067b1
 800674c:	080067f9 	.word	0x080067f9
    {
#ifdef PH_CRYPTOSYM_SW_AES
    case PH_CRYPTOSYM_KEY_TYPE_AES128:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Aes_EncryptBlock(
 8006750:	220a      	movs	r2, #10
 8006752:	6839      	ldr	r1, [r7, #0]
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f7fe f83e 	bl	80047d6 <phCryptoSym_Sw_Aes_EncryptBlock>
 800675a:	4603      	mov	r3, r0
 800675c:	81fb      	strh	r3, [r7, #14]
 800675e:	89fb      	ldrh	r3, [r7, #14]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d070      	beq.n	8006846 <phCryptoSym_Sw_EncryptBlock+0x12a>
 8006764:	89fb      	ldrh	r3, [r7, #14]
 8006766:	e07a      	b.n	800685e <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_128));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_AES192:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Aes_EncryptBlock(
 8006768:	220c      	movs	r2, #12
 800676a:	6839      	ldr	r1, [r7, #0]
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f7fe f832 	bl	80047d6 <phCryptoSym_Sw_Aes_EncryptBlock>
 8006772:	4603      	mov	r3, r0
 8006774:	81fb      	strh	r3, [r7, #14]
 8006776:	89fb      	ldrh	r3, [r7, #14]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d066      	beq.n	800684a <phCryptoSym_Sw_EncryptBlock+0x12e>
 800677c:	89fb      	ldrh	r3, [r7, #14]
 800677e:	e06e      	b.n	800685e <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_192));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_AES256:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Aes_EncryptBlock(
 8006780:	220e      	movs	r2, #14
 8006782:	6839      	ldr	r1, [r7, #0]
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f7fe f826 	bl	80047d6 <phCryptoSym_Sw_Aes_EncryptBlock>
 800678a:	4603      	mov	r3, r0
 800678c:	81fb      	strh	r3, [r7, #14]
 800678e:	89fb      	ldrh	r3, [r7, #14]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d05c      	beq.n	800684e <phCryptoSym_Sw_EncryptBlock+0x132>
 8006794:	89fb      	ldrh	r3, [r7, #14]
 8006796:	e062      	b.n	800685e <phCryptoSym_Sw_EncryptBlock+0x142>
            PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_256));
        break;
#endif /* PH_CRYPTOSYM_SW_AES */
#ifdef PH_CRYPTOSYM_SW_DES
    case PH_CRYPTOSYM_KEY_TYPE_DES:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 8006798:	2200      	movs	r2, #0
 800679a:	6839      	ldr	r1, [r7, #0]
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f7fe fdcf 	bl	8005340 <phCryptoSym_Sw_Des_EncryptBlock>
 80067a2:	4603      	mov	r3, r0
 80067a4:	81fb      	strh	r3, [r7, #14]
 80067a6:	89fb      	ldrh	r3, [r7, #14]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d052      	beq.n	8006852 <phCryptoSym_Sw_EncryptBlock+0x136>
 80067ac:	89fb      	ldrh	r3, [r7, #14]
 80067ae:	e056      	b.n	800685e <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_2K3DES:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 80067b0:	2200      	movs	r2, #0
 80067b2:	6839      	ldr	r1, [r7, #0]
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f7fe fdc3 	bl	8005340 <phCryptoSym_Sw_Des_EncryptBlock>
 80067ba:	4603      	mov	r3, r0
 80067bc:	81fb      	strh	r3, [r7, #14]
 80067be:	89fb      	ldrh	r3, [r7, #14]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d001      	beq.n	80067c8 <phCryptoSym_Sw_EncryptBlock+0xac>
 80067c4:	89fb      	ldrh	r3, [r7, #14]
 80067c6:	e04a      	b.n	800685e <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 80067c8:	2201      	movs	r2, #1
 80067ca:	6839      	ldr	r1, [r7, #0]
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f7fe fe05 	bl	80053dc <phCryptoSym_Sw_Des_DecryptBlock>
 80067d2:	4603      	mov	r3, r0
 80067d4:	81fb      	strh	r3, [r7, #14]
 80067d6:	89fb      	ldrh	r3, [r7, #14]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d001      	beq.n	80067e0 <phCryptoSym_Sw_EncryptBlock+0xc4>
 80067dc:	89fb      	ldrh	r3, [r7, #14]
 80067de:	e03e      	b.n	800685e <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            1));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 80067e0:	2200      	movs	r2, #0
 80067e2:	6839      	ldr	r1, [r7, #0]
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f7fe fdab 	bl	8005340 <phCryptoSym_Sw_Des_EncryptBlock>
 80067ea:	4603      	mov	r3, r0
 80067ec:	81fb      	strh	r3, [r7, #14]
 80067ee:	89fb      	ldrh	r3, [r7, #14]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d030      	beq.n	8006856 <phCryptoSym_Sw_EncryptBlock+0x13a>
 80067f4:	89fb      	ldrh	r3, [r7, #14]
 80067f6:	e032      	b.n	800685e <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_3K3DES:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 80067f8:	2200      	movs	r2, #0
 80067fa:	6839      	ldr	r1, [r7, #0]
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f7fe fd9f 	bl	8005340 <phCryptoSym_Sw_Des_EncryptBlock>
 8006802:	4603      	mov	r3, r0
 8006804:	81fb      	strh	r3, [r7, #14]
 8006806:	89fb      	ldrh	r3, [r7, #14]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d001      	beq.n	8006810 <phCryptoSym_Sw_EncryptBlock+0xf4>
 800680c:	89fb      	ldrh	r3, [r7, #14]
 800680e:	e026      	b.n	800685e <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 8006810:	2201      	movs	r2, #1
 8006812:	6839      	ldr	r1, [r7, #0]
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f7fe fde1 	bl	80053dc <phCryptoSym_Sw_Des_DecryptBlock>
 800681a:	4603      	mov	r3, r0
 800681c:	81fb      	strh	r3, [r7, #14]
 800681e:	89fb      	ldrh	r3, [r7, #14]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d001      	beq.n	8006828 <phCryptoSym_Sw_EncryptBlock+0x10c>
 8006824:	89fb      	ldrh	r3, [r7, #14]
 8006826:	e01a      	b.n	800685e <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            1));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 8006828:	2202      	movs	r2, #2
 800682a:	6839      	ldr	r1, [r7, #0]
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f7fe fd87 	bl	8005340 <phCryptoSym_Sw_Des_EncryptBlock>
 8006832:	4603      	mov	r3, r0
 8006834:	81fb      	strh	r3, [r7, #14]
 8006836:	89fb      	ldrh	r3, [r7, #14]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d00e      	beq.n	800685a <phCryptoSym_Sw_EncryptBlock+0x13e>
 800683c:	89fb      	ldrh	r3, [r7, #14]
 800683e:	e00e      	b.n	800685e <phCryptoSym_Sw_EncryptBlock+0x142>
            pBlock,
            2));
        break;
#endif /* PH_CRYPTOSYM_SW_DES */
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 8006840:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8006844:	e00b      	b.n	800685e <phCryptoSym_Sw_EncryptBlock+0x142>
        break;
 8006846:	bf00      	nop
 8006848:	e008      	b.n	800685c <phCryptoSym_Sw_EncryptBlock+0x140>
        break;
 800684a:	bf00      	nop
 800684c:	e006      	b.n	800685c <phCryptoSym_Sw_EncryptBlock+0x140>
        break;
 800684e:	bf00      	nop
 8006850:	e004      	b.n	800685c <phCryptoSym_Sw_EncryptBlock+0x140>
        break;
 8006852:	bf00      	nop
 8006854:	e002      	b.n	800685c <phCryptoSym_Sw_EncryptBlock+0x140>
        break;
 8006856:	bf00      	nop
 8006858:	e000      	b.n	800685c <phCryptoSym_Sw_EncryptBlock+0x140>
        break;
 800685a:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3710      	adds	r7, #16
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop

08006868 <phCryptoSym_Sw_DecryptBlock>:

phStatus_t phCryptoSym_Sw_DecryptBlock(
                                       phCryptoSym_Sw_DataParams_t * pDataParams,
                                       uint8_t PH_CRYTOSYM_SW_FAST_RAM * pBlock
                                       )
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
    phStatus_t PH_MEMLOC_REM statusTmp;

    switch (pDataParams->wKeyType)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8006876:	2b05      	cmp	r3, #5
 8006878:	f200 8088 	bhi.w	800698c <phCryptoSym_Sw_DecryptBlock+0x124>
 800687c:	a201      	add	r2, pc, #4	@ (adr r2, 8006884 <phCryptoSym_Sw_DecryptBlock+0x1c>)
 800687e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006882:	bf00      	nop
 8006884:	0800689d 	.word	0x0800689d
 8006888:	080068b5 	.word	0x080068b5
 800688c:	080068cd 	.word	0x080068cd
 8006890:	080068e5 	.word	0x080068e5
 8006894:	080068fd 	.word	0x080068fd
 8006898:	08006945 	.word	0x08006945
    {
#ifdef PH_CRYPTOSYM_SW_AES
    case PH_CRYPTOSYM_KEY_TYPE_AES128:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Aes_DecryptBlock(
 800689c:	220a      	movs	r2, #10
 800689e:	6839      	ldr	r1, [r7, #0]
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f7fe f80b 	bl	80048bc <phCryptoSym_Sw_Aes_DecryptBlock>
 80068a6:	4603      	mov	r3, r0
 80068a8:	81fb      	strh	r3, [r7, #14]
 80068aa:	89fb      	ldrh	r3, [r7, #14]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d070      	beq.n	8006992 <phCryptoSym_Sw_DecryptBlock+0x12a>
 80068b0:	89fb      	ldrh	r3, [r7, #14]
 80068b2:	e07a      	b.n	80069aa <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_128));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_AES192:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Aes_DecryptBlock(
 80068b4:	220c      	movs	r2, #12
 80068b6:	6839      	ldr	r1, [r7, #0]
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f7fd ffff 	bl	80048bc <phCryptoSym_Sw_Aes_DecryptBlock>
 80068be:	4603      	mov	r3, r0
 80068c0:	81fb      	strh	r3, [r7, #14]
 80068c2:	89fb      	ldrh	r3, [r7, #14]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d066      	beq.n	8006996 <phCryptoSym_Sw_DecryptBlock+0x12e>
 80068c8:	89fb      	ldrh	r3, [r7, #14]
 80068ca:	e06e      	b.n	80069aa <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_192));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_AES256:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Aes_DecryptBlock(
 80068cc:	220e      	movs	r2, #14
 80068ce:	6839      	ldr	r1, [r7, #0]
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f7fd fff3 	bl	80048bc <phCryptoSym_Sw_Aes_DecryptBlock>
 80068d6:	4603      	mov	r3, r0
 80068d8:	81fb      	strh	r3, [r7, #14]
 80068da:	89fb      	ldrh	r3, [r7, #14]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d05c      	beq.n	800699a <phCryptoSym_Sw_DecryptBlock+0x132>
 80068e0:	89fb      	ldrh	r3, [r7, #14]
 80068e2:	e062      	b.n	80069aa <phCryptoSym_Sw_DecryptBlock+0x142>
            PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_256));
        break;
#endif /* PH_CRYPTOSYM_SW_AES */
#ifdef PH_CRYPTOSYM_SW_DES
    case PH_CRYPTOSYM_KEY_TYPE_DES:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 80068e4:	2200      	movs	r2, #0
 80068e6:	6839      	ldr	r1, [r7, #0]
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f7fe fd77 	bl	80053dc <phCryptoSym_Sw_Des_DecryptBlock>
 80068ee:	4603      	mov	r3, r0
 80068f0:	81fb      	strh	r3, [r7, #14]
 80068f2:	89fb      	ldrh	r3, [r7, #14]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d052      	beq.n	800699e <phCryptoSym_Sw_DecryptBlock+0x136>
 80068f8:	89fb      	ldrh	r3, [r7, #14]
 80068fa:	e056      	b.n	80069aa <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_2K3DES:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 80068fc:	2200      	movs	r2, #0
 80068fe:	6839      	ldr	r1, [r7, #0]
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f7fe fd6b 	bl	80053dc <phCryptoSym_Sw_Des_DecryptBlock>
 8006906:	4603      	mov	r3, r0
 8006908:	81fb      	strh	r3, [r7, #14]
 800690a:	89fb      	ldrh	r3, [r7, #14]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d001      	beq.n	8006914 <phCryptoSym_Sw_DecryptBlock+0xac>
 8006910:	89fb      	ldrh	r3, [r7, #14]
 8006912:	e04a      	b.n	80069aa <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 8006914:	2201      	movs	r2, #1
 8006916:	6839      	ldr	r1, [r7, #0]
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f7fe fd11 	bl	8005340 <phCryptoSym_Sw_Des_EncryptBlock>
 800691e:	4603      	mov	r3, r0
 8006920:	81fb      	strh	r3, [r7, #14]
 8006922:	89fb      	ldrh	r3, [r7, #14]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d001      	beq.n	800692c <phCryptoSym_Sw_DecryptBlock+0xc4>
 8006928:	89fb      	ldrh	r3, [r7, #14]
 800692a:	e03e      	b.n	80069aa <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            1));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 800692c:	2200      	movs	r2, #0
 800692e:	6839      	ldr	r1, [r7, #0]
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f7fe fd53 	bl	80053dc <phCryptoSym_Sw_Des_DecryptBlock>
 8006936:	4603      	mov	r3, r0
 8006938:	81fb      	strh	r3, [r7, #14]
 800693a:	89fb      	ldrh	r3, [r7, #14]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d030      	beq.n	80069a2 <phCryptoSym_Sw_DecryptBlock+0x13a>
 8006940:	89fb      	ldrh	r3, [r7, #14]
 8006942:	e032      	b.n	80069aa <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_3K3DES:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 8006944:	2202      	movs	r2, #2
 8006946:	6839      	ldr	r1, [r7, #0]
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f7fe fd47 	bl	80053dc <phCryptoSym_Sw_Des_DecryptBlock>
 800694e:	4603      	mov	r3, r0
 8006950:	81fb      	strh	r3, [r7, #14]
 8006952:	89fb      	ldrh	r3, [r7, #14]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d001      	beq.n	800695c <phCryptoSym_Sw_DecryptBlock+0xf4>
 8006958:	89fb      	ldrh	r3, [r7, #14]
 800695a:	e026      	b.n	80069aa <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            2));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 800695c:	2201      	movs	r2, #1
 800695e:	6839      	ldr	r1, [r7, #0]
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f7fe fced 	bl	8005340 <phCryptoSym_Sw_Des_EncryptBlock>
 8006966:	4603      	mov	r3, r0
 8006968:	81fb      	strh	r3, [r7, #14]
 800696a:	89fb      	ldrh	r3, [r7, #14]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d001      	beq.n	8006974 <phCryptoSym_Sw_DecryptBlock+0x10c>
 8006970:	89fb      	ldrh	r3, [r7, #14]
 8006972:	e01a      	b.n	80069aa <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            1));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 8006974:	2200      	movs	r2, #0
 8006976:	6839      	ldr	r1, [r7, #0]
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f7fe fd2f 	bl	80053dc <phCryptoSym_Sw_Des_DecryptBlock>
 800697e:	4603      	mov	r3, r0
 8006980:	81fb      	strh	r3, [r7, #14]
 8006982:	89fb      	ldrh	r3, [r7, #14]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00e      	beq.n	80069a6 <phCryptoSym_Sw_DecryptBlock+0x13e>
 8006988:	89fb      	ldrh	r3, [r7, #14]
 800698a:	e00e      	b.n	80069aa <phCryptoSym_Sw_DecryptBlock+0x142>
            pBlock,
            0));
        break;
#endif /* PH_CRYPTOSYM_SW_DES */
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 800698c:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8006990:	e00b      	b.n	80069aa <phCryptoSym_Sw_DecryptBlock+0x142>
        break;
 8006992:	bf00      	nop
 8006994:	e008      	b.n	80069a8 <phCryptoSym_Sw_DecryptBlock+0x140>
        break;
 8006996:	bf00      	nop
 8006998:	e006      	b.n	80069a8 <phCryptoSym_Sw_DecryptBlock+0x140>
        break;
 800699a:	bf00      	nop
 800699c:	e004      	b.n	80069a8 <phCryptoSym_Sw_DecryptBlock+0x140>
        break;
 800699e:	bf00      	nop
 80069a0:	e002      	b.n	80069a8 <phCryptoSym_Sw_DecryptBlock+0x140>
        break;
 80069a2:	bf00      	nop
 80069a4:	e000      	b.n	80069a8 <phCryptoSym_Sw_DecryptBlock+0x140>
        break;
 80069a6:	bf00      	nop
    }
    return PH_ERR_SUCCESS;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop

080069b4 <phCryptoSym_Encrypt>:
    return status;
}

phStatus_t phCryptoSym_Encrypt(void * pDataParams, uint16_t wOption, const uint8_t * pPlainBuffer, uint16_t wBufferLength,
    uint8_t * pEncryptedBuffer)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b088      	sub	sp, #32
 80069b8:	af02      	add	r7, sp, #8
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	607a      	str	r2, [r7, #4]
 80069be:	461a      	mov	r2, r3
 80069c0:	460b      	mov	r3, r1
 80069c2:	817b      	strh	r3, [r7, #10]
 80069c4:	4613      	mov	r3, r2
 80069c6:	813b      	strh	r3, [r7, #8]
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(wBufferLength);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(pEncryptedBuffer);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(status);

    /* Validate the parameters. */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_CRYPTOSYM);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d102      	bne.n	80069d4 <phCryptoSym_Encrypt+0x20>
 80069ce:	f24e 1320 	movw	r3, #57632	@ 0xe120
 80069d2:	e02d      	b.n	8006a30 <phCryptoSym_Encrypt+0x7c>
    PH_ASSERT_NULL_PARAM(pPlainBuffer, PH_COMP_CRYPTOSYM);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d102      	bne.n	80069e0 <phCryptoSym_Encrypt+0x2c>
 80069da:	f24e 1321 	movw	r3, #57633	@ 0xe121
 80069de:	e027      	b.n	8006a30 <phCryptoSym_Encrypt+0x7c>
    PH_ASSERT_NULL_PARAM(pEncryptedBuffer, PH_COMP_CRYPTOSYM);
 80069e0:	6a3b      	ldr	r3, [r7, #32]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d102      	bne.n	80069ec <phCryptoSym_Encrypt+0x38>
 80069e6:	f24e 1321 	movw	r3, #57633	@ 0xe121
 80069ea:	e021      	b.n	8006a30 <phCryptoSym_Encrypt+0x7c>
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(wBufferLength), &wBufferLength);
    PH_LOG_HELPER_ADDPARAM_BUFFER(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(pPlainBuffer), pPlainBuffer, wBufferLength);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Component Code Validation */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_CRYPTOSYM)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	881b      	ldrh	r3, [r3, #0]
 80069f0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80069f4:	f5b3 4f61 	cmp.w	r3, #57600	@ 0xe100
 80069f8:	d004      	beq.n	8006a04 <phCryptoSym_Encrypt+0x50>
    {
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 80069fa:	f24e 1320 	movw	r3, #57632	@ 0xe120
 80069fe:	82fb      	strh	r3, [r7, #22]

        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

        return status;
 8006a00:	8afb      	ldrh	r3, [r7, #22]
 8006a02:	e015      	b.n	8006a30 <phCryptoSym_Encrypt+0x7c>
    }

    /* Perform operation on active layer. */
    switch(PH_GET_COMPID(pDataParams))
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	881b      	ldrh	r3, [r3, #0]
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d10b      	bne.n	8006a26 <phCryptoSym_Encrypt+0x72>
    {
#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        case PH_CRYPTOSYM_SW_ID:
            status = phCryptoSym_Sw_Encrypt((phCryptoSym_Sw_DataParams_t *) pDataParams, wOption, pPlainBuffer, wBufferLength,
 8006a0e:	893a      	ldrh	r2, [r7, #8]
 8006a10:	8979      	ldrh	r1, [r7, #10]
 8006a12:	6a3b      	ldr	r3, [r7, #32]
 8006a14:	9300      	str	r3, [sp, #0]
 8006a16:	4613      	mov	r3, r2
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f7fd fb18 	bl	8004050 <phCryptoSym_Sw_Encrypt>
 8006a20:	4603      	mov	r3, r0
 8006a22:	82fb      	strh	r3, [r7, #22]
                pEncryptedBuffer);
            break;
 8006a24:	e003      	b.n	8006a2e <phCryptoSym_Encrypt+0x7a>
                pEncryptedBuffer);
            break;
#endif /* NXPBUILD__PH_CRYPTOSYM_MBEDTLS */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 8006a26:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8006a2a:	82fb      	strh	r3, [r7, #22]
            break;
 8006a2c:	bf00      	nop
    }
#endif /* NXPBUILD__PH_LOG */
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

    return status;
 8006a2e:	8afb      	ldrh	r3, [r7, #22]
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3718      	adds	r7, #24
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <phCryptoSym_CalculateMac>:
    return status;
}

phStatus_t phCryptoSym_CalculateMac(void * pDataParams, uint16_t wOption, const uint8_t* pData, uint16_t wDataLength,
    uint8_t * pMac, uint8_t * pMacLength)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b088      	sub	sp, #32
 8006a3c:	af02      	add	r7, sp, #8
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	607a      	str	r2, [r7, #4]
 8006a42:	461a      	mov	r2, r3
 8006a44:	460b      	mov	r3, r1
 8006a46:	817b      	strh	r3, [r7, #10]
 8006a48:	4613      	mov	r3, r2
 8006a4a:	813b      	strh	r3, [r7, #8]
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(pMac);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(pMacLength);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(status);

    /* Validate the parameters. */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_CRYPTOSYM);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d102      	bne.n	8006a58 <phCryptoSym_CalculateMac+0x20>
 8006a52:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8006a56:	e038      	b.n	8006aca <phCryptoSym_CalculateMac+0x92>
    if(wDataLength != 0)
 8006a58:	893b      	ldrh	r3, [r7, #8]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d005      	beq.n	8006a6a <phCryptoSym_CalculateMac+0x32>
    {
        PH_ASSERT_NULL_PARAM(pData, PH_COMP_CRYPTOSYM);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d102      	bne.n	8006a6a <phCryptoSym_CalculateMac+0x32>
 8006a64:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8006a68:	e02f      	b.n	8006aca <phCryptoSym_CalculateMac+0x92>
    }
    PH_ASSERT_NULL_PARAM(pMac, PH_COMP_CRYPTOSYM);
 8006a6a:	6a3b      	ldr	r3, [r7, #32]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d102      	bne.n	8006a76 <phCryptoSym_CalculateMac+0x3e>
 8006a70:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8006a74:	e029      	b.n	8006aca <phCryptoSym_CalculateMac+0x92>
    PH_ASSERT_NULL_PARAM(pMacLength, PH_COMP_CRYPTOSYM);
 8006a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d102      	bne.n	8006a82 <phCryptoSym_CalculateMac+0x4a>
 8006a7c:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8006a80:	e023      	b.n	8006aca <phCryptoSym_CalculateMac+0x92>
    PH_LOG_HELPER_ADDPARAM_BUFFER(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(pData), pData, wDataLength);
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(wDataLength), &wDataLength);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Component Code Validation */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_CRYPTOSYM)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	881b      	ldrh	r3, [r3, #0]
 8006a86:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006a8a:	f5b3 4f61 	cmp.w	r3, #57600	@ 0xe100
 8006a8e:	d004      	beq.n	8006a9a <phCryptoSym_CalculateMac+0x62>
    {
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 8006a90:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8006a94:	82fb      	strh	r3, [r7, #22]

        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

        return status;
 8006a96:	8afb      	ldrh	r3, [r7, #22]
 8006a98:	e017      	b.n	8006aca <phCryptoSym_CalculateMac+0x92>
    }

    /* Perform operation on active layer. */
    switch(PH_GET_COMPID(pDataParams))
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	881b      	ldrh	r3, [r3, #0]
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d10d      	bne.n	8006ac0 <phCryptoSym_CalculateMac+0x88>
    {
#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        case PH_CRYPTOSYM_SW_ID:
            status = phCryptoSym_Sw_CalculateMac((phCryptoSym_Sw_DataParams_t *) pDataParams, wOption, pData, wDataLength,
 8006aa4:	893a      	ldrh	r2, [r7, #8]
 8006aa6:	8979      	ldrh	r1, [r7, #10]
 8006aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aaa:	9301      	str	r3, [sp, #4]
 8006aac:	6a3b      	ldr	r3, [r7, #32]
 8006aae:	9300      	str	r3, [sp, #0]
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f7fd fb89 	bl	80041cc <phCryptoSym_Sw_CalculateMac>
 8006aba:	4603      	mov	r3, r0
 8006abc:	82fb      	strh	r3, [r7, #22]
                pMac, pMacLength);
            break;
 8006abe:	e003      	b.n	8006ac8 <phCryptoSym_CalculateMac+0x90>
                pMac, pMacLength);
            break;
#endif /* NXPBUILD__PH_CRYPTOSYM_MBEDTLS */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 8006ac0:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8006ac4:	82fb      	strh	r3, [r7, #22]
            break;
 8006ac6:	bf00      	nop
    }
#endif /* NXPBUILD__PH_LOG */
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

    return status;
 8006ac8:	8afb      	ldrh	r3, [r7, #22]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3718      	adds	r7, #24
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}

08006ad2 <phCryptoSym_LoadIv>:

phStatus_t phCryptoSym_LoadIv(void * pDataParams, const uint8_t * pIV, uint8_t bIVLength)
{
 8006ad2:	b580      	push	{r7, lr}
 8006ad4:	b086      	sub	sp, #24
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	60f8      	str	r0, [r7, #12]
 8006ada:	60b9      	str	r1, [r7, #8]
 8006adc:	4613      	mov	r3, r2
 8006ade:	71fb      	strb	r3, [r7, #7]
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(pIV);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(bIVLength);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(status);

    /* Validate the parameters. */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_CRYPTOSYM);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d102      	bne.n	8006aec <phCryptoSym_LoadIv+0x1a>
 8006ae6:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8006aea:	e024      	b.n	8006b36 <phCryptoSym_LoadIv+0x64>
    PH_ASSERT_NULL_PARAM(pIV, PH_COMP_CRYPTOSYM);
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d102      	bne.n	8006af8 <phCryptoSym_LoadIv+0x26>
 8006af2:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8006af6:	e01e      	b.n	8006b36 <phCryptoSym_LoadIv+0x64>
    PH_LOG_HELPER_ADDPARAM_BUFFER(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(pIV), pIV, bIVLength);
    PH_LOG_HELPER_ADDPARAM_UINT8(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(bIVLength), &bIVLength);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Component Code Validation */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_CRYPTOSYM)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	881b      	ldrh	r3, [r3, #0]
 8006afc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006b00:	f5b3 4f61 	cmp.w	r3, #57600	@ 0xe100
 8006b04:	d004      	beq.n	8006b10 <phCryptoSym_LoadIv+0x3e>
    {
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 8006b06:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8006b0a:	82fb      	strh	r3, [r7, #22]

        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

        return status;
 8006b0c:	8afb      	ldrh	r3, [r7, #22]
 8006b0e:	e012      	b.n	8006b36 <phCryptoSym_LoadIv+0x64>
    }

    /* Perform operation on active layer. */
    switch(PH_GET_COMPID(pDataParams))
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	881b      	ldrh	r3, [r3, #0]
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d108      	bne.n	8006b2c <phCryptoSym_LoadIv+0x5a>
    {
#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        case PH_CRYPTOSYM_SW_ID:
            status = phCryptoSym_Sw_LoadIv((phCryptoSym_Sw_DataParams_t *) pDataParams, pIV, bIVLength);
 8006b1a:	79fb      	ldrb	r3, [r7, #7]
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	68b9      	ldr	r1, [r7, #8]
 8006b20:	68f8      	ldr	r0, [r7, #12]
 8006b22:	f7fd fd11 	bl	8004548 <phCryptoSym_Sw_LoadIv>
 8006b26:	4603      	mov	r3, r0
 8006b28:	82fb      	strh	r3, [r7, #22]
            break;
 8006b2a:	e003      	b.n	8006b34 <phCryptoSym_LoadIv+0x62>
            status = phCryptoSym_mBedTLS_LoadIv((phCryptoSym_mBedTLS_DataParams_t *) pDataParams, pIV, bIVLength);
            break;
#endif /* NXPBUILD__PH_CRYPTOSYM_MBEDTLS */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 8006b2c:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8006b30:	82fb      	strh	r3, [r7, #22]
            break;
 8006b32:	bf00      	nop

    PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

    return status;
 8006b34:	8afb      	ldrh	r3, [r7, #22]
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3718      	adds	r7, #24
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <phCryptoSym_LoadKeyDirect>:

    return status;
}

phStatus_t phCryptoSym_LoadKeyDirect(void * pDataParams, const uint8_t * pKey, uint16_t wKeyType)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b086      	sub	sp, #24
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	60f8      	str	r0, [r7, #12]
 8006b46:	60b9      	str	r1, [r7, #8]
 8006b48:	4613      	mov	r3, r2
 8006b4a:	80fb      	strh	r3, [r7, #6]
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(pKey);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(wKeyType);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(status);

    /* Validate the parameters. */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_CRYPTOSYM);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d102      	bne.n	8006b58 <phCryptoSym_LoadKeyDirect+0x1a>
 8006b52:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8006b56:	e024      	b.n	8006ba2 <phCryptoSym_LoadKeyDirect+0x64>
    PH_ASSERT_NULL_PARAM(pKey, PH_COMP_CRYPTOSYM);
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d102      	bne.n	8006b64 <phCryptoSym_LoadKeyDirect+0x26>
 8006b5e:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8006b62:	e01e      	b.n	8006ba2 <phCryptoSym_LoadKeyDirect+0x64>
    PH_LOG_HELPER_ADDPARAM_BUFFER(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(pKey), pKey, phCryptoSym_GetKeySize(wKeyType));
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(wKeyType), &wKeyType);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Component Code Validation */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_CRYPTOSYM)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	881b      	ldrh	r3, [r3, #0]
 8006b68:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006b6c:	f5b3 4f61 	cmp.w	r3, #57600	@ 0xe100
 8006b70:	d004      	beq.n	8006b7c <phCryptoSym_LoadKeyDirect+0x3e>
    {
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 8006b72:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8006b76:	82fb      	strh	r3, [r7, #22]

        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

        return status;
 8006b78:	8afb      	ldrh	r3, [r7, #22]
 8006b7a:	e012      	b.n	8006ba2 <phCryptoSym_LoadKeyDirect+0x64>
    }

    /* Perform operation on active layer. */
    switch(PH_GET_COMPID(pDataParams))
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	881b      	ldrh	r3, [r3, #0]
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d108      	bne.n	8006b98 <phCryptoSym_LoadKeyDirect+0x5a>
    {
#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        case PH_CRYPTOSYM_SW_ID:
            status = phCryptoSym_Sw_LoadKeyDirect((phCryptoSym_Sw_DataParams_t *) pDataParams, pKey, wKeyType);
 8006b86:	88fb      	ldrh	r3, [r7, #6]
 8006b88:	461a      	mov	r2, r3
 8006b8a:	68b9      	ldr	r1, [r7, #8]
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f7fd fd09 	bl	80045a4 <phCryptoSym_Sw_LoadKeyDirect>
 8006b92:	4603      	mov	r3, r0
 8006b94:	82fb      	strh	r3, [r7, #22]
            break;
 8006b96:	e003      	b.n	8006ba0 <phCryptoSym_LoadKeyDirect+0x62>
            status = phCryptoSym_mBedTLS_LoadKeyDirect((phCryptoSym_mBedTLS_DataParams_t *) pDataParams, pKey, wKeyType);
            break;
#endif /* NXPBUILD__PH_CRYPTOSYM_MBEDTLS */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 8006b98:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8006b9c:	82fb      	strh	r3, [r7, #22]
            break;
 8006b9e:	bf00      	nop

    PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

    return status;
 8006ba0:	8afb      	ldrh	r3, [r7, #22]
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3718      	adds	r7, #24
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <phKeyStore_Sw_Init>:
#include "phKeyStore_Sw_Int.h"

phStatus_t phKeyStore_Sw_Init(phKeyStore_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, phKeyStore_Sw_KeyEntry_t * pKeyEntries,
    uint16_t wNoOfKeyEntries, phKeyStore_Sw_KeyVersionPair_t * pKeyVersionPairs, uint16_t wNoOfVersionPairs, phKeyStore_Sw_KUCEntry_t * pKUCEntries,
    uint16_t wNoOfKUCEntries)
{
 8006baa:	b580      	push	{r7, lr}
 8006bac:	b088      	sub	sp, #32
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	60f8      	str	r0, [r7, #12]
 8006bb2:	607a      	str	r2, [r7, #4]
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	817b      	strh	r3, [r7, #10]
 8006bba:	4613      	mov	r3, r2
 8006bbc:	813b      	strh	r3, [r7, #8]
    uint16_t wEntryIndex;
    uint16_t wPos;
    phStatus_t wStatus;
    phKeyStore_Sw_KeyVersionPair_t * pKeyVersion;

    if(sizeof(phKeyStore_Sw_DataParams_t) != wSizeOfDataParams)
 8006bbe:	897b      	ldrh	r3, [r7, #10]
 8006bc0:	2b18      	cmp	r3, #24
 8006bc2:	d002      	beq.n	8006bca <phKeyStore_Sw_Init+0x20>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_KEYSTORE);
 8006bc4:	f24e 2320 	movw	r3, #57888	@ 0xe220
 8006bc8:	e07b      	b.n	8006cc2 <phKeyStore_Sw_Init+0x118>
    }
    PH_ASSERT_NULL(pDataParams);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d101      	bne.n	8006bd4 <phKeyStore_Sw_Init+0x2a>
 8006bd0:	2321      	movs	r3, #33	@ 0x21
 8006bd2:	e076      	b.n	8006cc2 <phKeyStore_Sw_Init+0x118>
    PH_ASSERT_NULL(pKeyEntries);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d101      	bne.n	8006bde <phKeyStore_Sw_Init+0x34>
 8006bda:	2321      	movs	r3, #33	@ 0x21
 8006bdc:	e071      	b.n	8006cc2 <phKeyStore_Sw_Init+0x118>
    PH_ASSERT_NULL(pKeyVersionPairs);
 8006bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d101      	bne.n	8006be8 <phKeyStore_Sw_Init+0x3e>
 8006be4:	2321      	movs	r3, #33	@ 0x21
 8006be6:	e06c      	b.n	8006cc2 <phKeyStore_Sw_Init+0x118>
    PH_ASSERT_NULL(pKUCEntries);
 8006be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d101      	bne.n	8006bf2 <phKeyStore_Sw_Init+0x48>
 8006bee:	2321      	movs	r3, #33	@ 0x21
 8006bf0:	e067      	b.n	8006cc2 <phKeyStore_Sw_Init+0x118>

    /* Init private data */
    pDataParams->wId = PH_COMP_KEYSTORE | PH_KEYSTORE_SW_ID;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f24e 2201 	movw	r2, #57857	@ 0xe201
 8006bf8:	801a      	strh	r2, [r3, #0]
    pDataParams->pKeyEntries = pKeyEntries;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyVersionPairs = pKeyVersionPairs;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c04:	609a      	str	r2, [r3, #8]
    pDataParams->wNoOfKeyEntries = wNoOfKeyEntries;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	893a      	ldrh	r2, [r7, #8]
 8006c0a:	819a      	strh	r2, [r3, #12]
    pDataParams->wNoOfVersions = wNoOfVersionPairs;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8006c10:	81da      	strh	r2, [r3, #14]
    pDataParams->pKUCEntries = pKUCEntries;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c16:	611a      	str	r2, [r3, #16]
    pDataParams->wNoOfKUCEntries = wNoOfKUCEntries;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006c1c:	829a      	strh	r2, [r3, #20]

    for(wEntryIndex = 0; wEntryIndex < pDataParams->wNoOfKeyEntries; wEntryIndex++)
 8006c1e:	2300      	movs	r3, #0
 8006c20:	83fb      	strh	r3, [r7, #30]
 8006c22:	e02e      	b.n	8006c82 <phKeyStore_Sw_Init+0xd8>
    {
        pDataParams->pKeyEntries[wEntryIndex].wKeyType = PH_KEYSTORE_INVALID_ID;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	685a      	ldr	r2, [r3, #4]
 8006c28:	8bfb      	ldrh	r3, [r7, #30]
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	4413      	add	r3, r2
 8006c2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006c32:	801a      	strh	r2, [r3, #0]
        pDataParams->pKeyEntries[wEntryIndex].wRefNoKUC = PH_KEYSTORE_INVALID_ID;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	685a      	ldr	r2, [r3, #4]
 8006c38:	8bfb      	ldrh	r3, [r7, #30]
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4413      	add	r3, r2
 8006c3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006c42:	805a      	strh	r2, [r3, #2]

        for(wPos = 0; wPos < pDataParams->wNoOfVersions; wPos++)
 8006c44:	2300      	movs	r3, #0
 8006c46:	83bb      	strh	r3, [r7, #28]
 8006c48:	e013      	b.n	8006c72 <phKeyStore_Sw_Init+0xc8>
        {
            PH_CHECK_SUCCESS_FCT(wStatus, phKeyStore_Sw_GetKeyValuePtrPos(pDataParams, wEntryIndex, wPos, &pKeyVersion));
 8006c4a:	f107 0314 	add.w	r3, r7, #20
 8006c4e:	8bba      	ldrh	r2, [r7, #28]
 8006c50:	8bf9      	ldrh	r1, [r7, #30]
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f000 f90a 	bl	8006e6c <phKeyStore_Sw_GetKeyValuePtrPos>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	837b      	strh	r3, [r7, #26]
 8006c5c:	8b7b      	ldrh	r3, [r7, #26]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d001      	beq.n	8006c66 <phKeyStore_Sw_Init+0xbc>
 8006c62:	8b7b      	ldrh	r3, [r7, #26]
 8006c64:	e02d      	b.n	8006cc2 <phKeyStore_Sw_Init+0x118>
            pKeyVersion->wVersion = PH_KEYSTORE_DEFAULT_ID;
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	841a      	strh	r2, [r3, #32]
        for(wPos = 0; wPos < pDataParams->wNoOfVersions; wPos++)
 8006c6c:	8bbb      	ldrh	r3, [r7, #28]
 8006c6e:	3301      	adds	r3, #1
 8006c70:	83bb      	strh	r3, [r7, #28]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	89db      	ldrh	r3, [r3, #14]
 8006c76:	8bba      	ldrh	r2, [r7, #28]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d3e6      	bcc.n	8006c4a <phKeyStore_Sw_Init+0xa0>
    for(wEntryIndex = 0; wEntryIndex < pDataParams->wNoOfKeyEntries; wEntryIndex++)
 8006c7c:	8bfb      	ldrh	r3, [r7, #30]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	83fb      	strh	r3, [r7, #30]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	899b      	ldrh	r3, [r3, #12]
 8006c86:	8bfa      	ldrh	r2, [r7, #30]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d3cb      	bcc.n	8006c24 <phKeyStore_Sw_Init+0x7a>
#endif /* NXPBUILD__PH_KEYSTORE_ASYM */

        }
    }

    for(wEntryIndex = 0; wEntryIndex < pDataParams->wNoOfKUCEntries; wEntryIndex++)
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	83fb      	strh	r3, [r7, #30]
 8006c90:	e011      	b.n	8006cb6 <phKeyStore_Sw_Init+0x10c>
    {
        pDataParams->pKUCEntries[wEntryIndex].dwLimit = 0xFFFFFFFFU;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	691a      	ldr	r2, [r3, #16]
 8006c96:	8bfb      	ldrh	r3, [r7, #30]
 8006c98:	00db      	lsls	r3, r3, #3
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8006ca0:	601a      	str	r2, [r3, #0]
        pDataParams->pKUCEntries[wEntryIndex].dwCurVal = 0;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	691a      	ldr	r2, [r3, #16]
 8006ca6:	8bfb      	ldrh	r3, [r7, #30]
 8006ca8:	00db      	lsls	r3, r3, #3
 8006caa:	4413      	add	r3, r2
 8006cac:	2200      	movs	r2, #0
 8006cae:	605a      	str	r2, [r3, #4]
    for(wEntryIndex = 0; wEntryIndex < pDataParams->wNoOfKUCEntries; wEntryIndex++)
 8006cb0:	8bfb      	ldrh	r3, [r7, #30]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	83fb      	strh	r3, [r7, #30]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	8a9b      	ldrh	r3, [r3, #20]
 8006cba:	8bfa      	ldrh	r2, [r7, #30]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d3e8      	bcc.n	8006c92 <phKeyStore_Sw_Init+0xe8>
    }

    return PH_ERR_SUCCESS;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3720      	adds	r7, #32
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}

08006cca <phKeyStore_Sw_FormatKeyEntry>:

/* Common Interfaces ------------------------------------------------------------------------------------------------------------------- */
phStatus_t phKeyStore_Sw_FormatKeyEntry(phKeyStore_Sw_DataParams_t * pDataParams, uint16_t wKeyNo, uint16_t wNewKeyType)
{
 8006cca:	b580      	push	{r7, lr}
 8006ccc:	b084      	sub	sp, #16
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	807b      	strh	r3, [r7, #2]
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	803b      	strh	r3, [r7, #0]
    phStatus_t wStatus;
    uint16_t   wPos;
    phKeyStore_Sw_KeyVersionPair_t * pKeyPair;
    /* Overflow checks */
    if(wKeyNo >= pDataParams->wNoOfKeyEntries)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	899b      	ldrh	r3, [r3, #12]
 8006cde:	887a      	ldrh	r2, [r7, #2]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d302      	bcc.n	8006cea <phKeyStore_Sw_FormatKeyEntry+0x20>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 8006ce4:	f24e 2321 	movw	r3, #57889	@ 0xe221
 8006ce8:	e038      	b.n	8006d5c <phKeyStore_Sw_FormatKeyEntry+0x92>
    }

    switch(wNewKeyType)
 8006cea:	883b      	ldrh	r3, [r7, #0]
 8006cec:	2b06      	cmp	r3, #6
 8006cee:	d902      	bls.n	8006cf6 <phKeyStore_Sw_FormatKeyEntry+0x2c>
        case PH_KEYSTORE_KEY_TYPE_ECC:
            break;
#endif /* NXPBUILD__PH_KEYSTORE_ASYM */

        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 8006cf0:	f24e 2321 	movw	r3, #57889	@ 0xe221
 8006cf4:	e032      	b.n	8006d5c <phKeyStore_Sw_FormatKeyEntry+0x92>
            break;
 8006cf6:	bf00      	nop
    }

    pDataParams->pKeyEntries[wKeyNo].wKeyType = wNewKeyType;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	685a      	ldr	r2, [r3, #4]
 8006cfc:	887b      	ldrh	r3, [r7, #2]
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	4413      	add	r3, r2
 8006d02:	883a      	ldrh	r2, [r7, #0]
 8006d04:	801a      	strh	r2, [r3, #0]

    /* Reset CEK to master Key */
    pDataParams->pKeyEntries[wKeyNo].wRefNoKUC = PH_KEYSTORE_INVALID_ID;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	685a      	ldr	r2, [r3, #4]
 8006d0a:	887b      	ldrh	r3, [r7, #2]
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	4413      	add	r3, r2
 8006d10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006d14:	805a      	strh	r2, [r3, #2]

    /* Reset all keys to 0x00*/
    for(wPos = 0; wPos < pDataParams->wNoOfVersions; ++wPos)
 8006d16:	2300      	movs	r3, #0
 8006d18:	81fb      	strh	r3, [r7, #14]
 8006d1a:	e019      	b.n	8006d50 <phKeyStore_Sw_FormatKeyEntry+0x86>
    {
        PH_CHECK_SUCCESS_FCT(wStatus, phKeyStore_Sw_GetKeyValuePtrPos(pDataParams, wKeyNo, wPos, &pKeyPair));
 8006d1c:	f107 0308 	add.w	r3, r7, #8
 8006d20:	89fa      	ldrh	r2, [r7, #14]
 8006d22:	8879      	ldrh	r1, [r7, #2]
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 f8a1 	bl	8006e6c <phKeyStore_Sw_GetKeyValuePtrPos>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	81bb      	strh	r3, [r7, #12]
 8006d2e:	89bb      	ldrh	r3, [r7, #12]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d001      	beq.n	8006d38 <phKeyStore_Sw_FormatKeyEntry+0x6e>
 8006d34:	89bb      	ldrh	r3, [r7, #12]
 8006d36:	e011      	b.n	8006d5c <phKeyStore_Sw_FormatKeyEntry+0x92>
        pKeyPair->wVersion = 0;
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	841a      	strh	r2, [r3, #32]

        (void) memset(pKeyPair->pKey, 0x00, PH_KEYSTORE_MAX_KEY_SIZE);
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	2220      	movs	r2, #32
 8006d42:	2100      	movs	r1, #0
 8006d44:	4618      	mov	r0, r3
 8006d46:	f019 fda5 	bl	8020894 <memset>
    for(wPos = 0; wPos < pDataParams->wNoOfVersions; ++wPos)
 8006d4a:	89fb      	ldrh	r3, [r7, #14]
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	81fb      	strh	r3, [r7, #14]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	89db      	ldrh	r3, [r3, #14]
 8006d54:	89fa      	ldrh	r2, [r7, #14]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d3e0      	bcc.n	8006d1c <phKeyStore_Sw_FormatKeyEntry+0x52>
        pKeyPair->wKeyPairType = PH_KEYSTORE_KEY_PAIR_INVALID;
        (void) memset(pKeyPair->pPubKey, 0x00, sizeof(pKeyPair->pPubKey));
#endif /* NXPBUILD__PH_KEYSTORE_ASYM */
    }

    return PH_ERR_SUCCESS;
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3710      	adds	r7, #16
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <phKeyStore_Sw_SetKey>:
}

/* Interfaces for Symmetric Keys ------------------------------------------------------------------------------------------------------- */
phStatus_t phKeyStore_Sw_SetKey(phKeyStore_Sw_DataParams_t * pDataParams, uint16_t wKeyNo, uint16_t wKeyVer,
    uint16_t wKeyType, uint8_t * pNewKey, uint16_t wNewKeyVer)
{
 8006d64:	b590      	push	{r4, r7, lr}
 8006d66:	b087      	sub	sp, #28
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	4608      	mov	r0, r1
 8006d6e:	4611      	mov	r1, r2
 8006d70:	461a      	mov	r2, r3
 8006d72:	4603      	mov	r3, r0
 8006d74:	817b      	strh	r3, [r7, #10]
 8006d76:	460b      	mov	r3, r1
 8006d78:	813b      	strh	r3, [r7, #8]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	80fb      	strh	r3, [r7, #6]
    phStatus_t wStatus;
    phKeyStore_Sw_KeyVersionPair_t * pKeyVer;
    PH_CHECK_SUCCESS_FCT(wStatus, phKeyStore_Sw_GetKeyValuePtrVersion(pDataParams, wKeyNo, wKeyVer, &pKeyVer));
 8006d7e:	f107 0310 	add.w	r3, r7, #16
 8006d82:	893a      	ldrh	r2, [r7, #8]
 8006d84:	8979      	ldrh	r1, [r7, #10]
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f000 f827 	bl	8006dda <phKeyStore_Sw_GetKeyValuePtrVersion>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	82fb      	strh	r3, [r7, #22]
 8006d90:	8afb      	ldrh	r3, [r7, #22]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d001      	beq.n	8006d9a <phKeyStore_Sw_SetKey+0x36>
 8006d96:	8afb      	ldrh	r3, [r7, #22]
 8006d98:	e01b      	b.n	8006dd2 <phKeyStore_Sw_SetKey+0x6e>

    /* Check that Key type matches with current Key Type format */
    if(pDataParams->pKeyEntries[wKeyNo].wKeyType != wKeyType)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	685a      	ldr	r2, [r3, #4]
 8006d9e:	897b      	ldrh	r3, [r7, #10]
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4413      	add	r3, r2
 8006da4:	881b      	ldrh	r3, [r3, #0]
 8006da6:	88fa      	ldrh	r2, [r7, #6]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d002      	beq.n	8006db2 <phKeyStore_Sw_SetKey+0x4e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 8006dac:	f24e 2321 	movw	r3, #57889	@ 0xe221
 8006db0:	e00f      	b.n	8006dd2 <phKeyStore_Sw_SetKey+0x6e>
    }

    /* copy the key and version */
    (void) memcpy(pKeyVer->pKey, pNewKey, phKeyStore_GetKeySize(wKeyType));
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	461c      	mov	r4, r3
 8006db6:	88fb      	ldrh	r3, [r7, #6]
 8006db8:	4618      	mov	r0, r3
 8006dba:	f000 f88d 	bl	8006ed8 <phKeyStore_GetKeySize>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	f019 fde4 	bl	8020992 <memcpy>
    pKeyVer->wVersion = wNewKeyVer;
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8006dce:	841a      	strh	r2, [r3, #32]

    return PH_ERR_SUCCESS;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	371c      	adds	r7, #28
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd90      	pop	{r4, r7, pc}

08006dda <phKeyStore_Sw_GetKeyValuePtrVersion>:
    return PH_ERR_SUCCESS;
}

phStatus_t phKeyStore_Sw_GetKeyValuePtrVersion(phKeyStore_Sw_DataParams_t * pDataParams, uint16_t wKeyNo, uint16_t wKeyVer,
    phKeyStore_Sw_KeyVersionPair_t ** pKeyVer)
{
 8006dda:	b480      	push	{r7}
 8006ddc:	b087      	sub	sp, #28
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	60f8      	str	r0, [r7, #12]
 8006de2:	607b      	str	r3, [r7, #4]
 8006de4:	460b      	mov	r3, r1
 8006de6:	817b      	strh	r3, [r7, #10]
 8006de8:	4613      	mov	r3, r2
 8006dea:	813b      	strh	r3, [r7, #8]
    uint16_t bPos;
    *pKeyVer = NULL;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	601a      	str	r2, [r3, #0]
    /* Overflow checks */
    if(wKeyNo >= pDataParams->wNoOfKeyEntries)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	899b      	ldrh	r3, [r3, #12]
 8006df6:	897a      	ldrh	r2, [r7, #10]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d302      	bcc.n	8006e02 <phKeyStore_Sw_GetKeyValuePtrVersion+0x28>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 8006dfc:	f24e 2321 	movw	r3, #57889	@ 0xe221
 8006e00:	e02e      	b.n	8006e60 <phKeyStore_Sw_GetKeyValuePtrVersion+0x86>
    }

    for(bPos = 0; bPos < pDataParams->wNoOfVersions; bPos++)
 8006e02:	2300      	movs	r3, #0
 8006e04:	82fb      	strh	r3, [r7, #22]
 8006e06:	e01b      	b.n	8006e40 <phKeyStore_Sw_GetKeyValuePtrVersion+0x66>
    {
        *pKeyVer = &pDataParams->pKeyVersionPairs[(((uint16_t)(((uint32_t)wKeyNo * pDataParams->wNoOfVersions)) & 0xFFFF) + bPos)];
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	689a      	ldr	r2, [r3, #8]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	89db      	ldrh	r3, [r3, #14]
 8006e10:	8979      	ldrh	r1, [r7, #10]
 8006e12:	fb11 f303 	smulbb	r3, r1, r3
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	4619      	mov	r1, r3
 8006e1a:	8afb      	ldrh	r3, [r7, #22]
 8006e1c:	440b      	add	r3, r1
 8006e1e:	4619      	mov	r1, r3
 8006e20:	460b      	mov	r3, r1
 8006e22:	011b      	lsls	r3, r3, #4
 8006e24:	440b      	add	r3, r1
 8006e26:	005b      	lsls	r3, r3, #1
 8006e28:	441a      	add	r2, r3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	601a      	str	r2, [r3, #0]
        if((*pKeyVer)->wVersion == wKeyVer)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	8c1b      	ldrh	r3, [r3, #32]
 8006e34:	893a      	ldrh	r2, [r7, #8]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d008      	beq.n	8006e4c <phKeyStore_Sw_GetKeyValuePtrVersion+0x72>
    for(bPos = 0; bPos < pDataParams->wNoOfVersions; bPos++)
 8006e3a:	8afb      	ldrh	r3, [r7, #22]
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	82fb      	strh	r3, [r7, #22]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	89db      	ldrh	r3, [r3, #14]
 8006e44:	8afa      	ldrh	r2, [r7, #22]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d3de      	bcc.n	8006e08 <phKeyStore_Sw_GetKeyValuePtrVersion+0x2e>
 8006e4a:	e000      	b.n	8006e4e <phKeyStore_Sw_GetKeyValuePtrVersion+0x74>
        {
            break;
 8006e4c:	bf00      	nop
        }
    }
    /* No entry found */
    if(bPos == pDataParams->wNoOfVersions)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	89db      	ldrh	r3, [r3, #14]
 8006e52:	8afa      	ldrh	r2, [r7, #22]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d102      	bne.n	8006e5e <phKeyStore_Sw_GetKeyValuePtrVersion+0x84>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 8006e58:	f24e 2321 	movw	r3, #57889	@ 0xe221
 8006e5c:	e000      	b.n	8006e60 <phKeyStore_Sw_GetKeyValuePtrVersion+0x86>
    }
    return PH_ERR_SUCCESS;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	371c      	adds	r7, #28
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <phKeyStore_Sw_GetKeyValuePtrPos>:
}
#endif /* NXPBUILD__PH_KEYSTORE_ASYM */

phStatus_t phKeyStore_Sw_GetKeyValuePtrPos(phKeyStore_Sw_DataParams_t * pDataParams, uint16_t wKeyNo, uint16_t wPos,
    phKeyStore_Sw_KeyVersionPair_t ** pKeyVersion)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	607b      	str	r3, [r7, #4]
 8006e76:	460b      	mov	r3, r1
 8006e78:	817b      	strh	r3, [r7, #10]
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	813b      	strh	r3, [r7, #8]
    *pKeyVersion = NULL;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	601a      	str	r2, [r3, #0]
    /* Overflow checks */
    if(wKeyNo >= pDataParams->wNoOfKeyEntries)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	899b      	ldrh	r3, [r3, #12]
 8006e88:	897a      	ldrh	r2, [r7, #10]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d302      	bcc.n	8006e94 <phKeyStore_Sw_GetKeyValuePtrPos+0x28>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 8006e8e:	f24e 2321 	movw	r3, #57889	@ 0xe221
 8006e92:	e01b      	b.n	8006ecc <phKeyStore_Sw_GetKeyValuePtrPos+0x60>
    }

    /* Overflow checks */
    if(wPos >= pDataParams->wNoOfVersions)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	89db      	ldrh	r3, [r3, #14]
 8006e98:	893a      	ldrh	r2, [r7, #8]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d302      	bcc.n	8006ea4 <phKeyStore_Sw_GetKeyValuePtrPos+0x38>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 8006e9e:	f24e 2321 	movw	r3, #57889	@ 0xe221
 8006ea2:	e013      	b.n	8006ecc <phKeyStore_Sw_GetKeyValuePtrPos+0x60>
    }

    *pKeyVersion = &pDataParams->pKeyVersionPairs[(((uint16_t)(((uint32_t)wKeyNo * pDataParams->wNoOfVersions)) & 0xFFFF) + wPos)];
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	689a      	ldr	r2, [r3, #8]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	89db      	ldrh	r3, [r3, #14]
 8006eac:	8979      	ldrh	r1, [r7, #10]
 8006eae:	fb11 f303 	smulbb	r3, r1, r3
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	893b      	ldrh	r3, [r7, #8]
 8006eb8:	440b      	add	r3, r1
 8006eba:	4619      	mov	r1, r3
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	011b      	lsls	r3, r3, #4
 8006ec0:	440b      	add	r3, r1
 8006ec2:	005b      	lsls	r3, r3, #1
 8006ec4:	441a      	add	r2, r3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	601a      	str	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8006eca:	2300      	movs	r3, #0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3714      	adds	r7, #20
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <phKeyStore_GetKeySize>:
#endif /* NXPBUILD__PH_KEYSTORE_ASYM */
#endif /* NXPRDLIB_REM_GEN_INTFS  */

/* Utility Interfaces ------------------------------------------------------------------------------------------------------------------ */
uint8_t phKeyStore_GetKeySize(uint16_t wKeyType)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	4603      	mov	r3, r0
 8006ee0:	80fb      	strh	r3, [r7, #6]
    switch(wKeyType)
 8006ee2:	88fb      	ldrh	r3, [r7, #6]
 8006ee4:	2b06      	cmp	r3, #6
 8006ee6:	d81b      	bhi.n	8006f20 <phKeyStore_GetKeySize+0x48>
 8006ee8:	a201      	add	r2, pc, #4	@ (adr r2, 8006ef0 <phKeyStore_GetKeySize+0x18>)
 8006eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eee:	bf00      	nop
 8006ef0:	08006f15 	.word	0x08006f15
 8006ef4:	08006f19 	.word	0x08006f19
 8006ef8:	08006f1d 	.word	0x08006f1d
 8006efc:	08006f11 	.word	0x08006f11
 8006f00:	08006f15 	.word	0x08006f15
 8006f04:	08006f19 	.word	0x08006f19
 8006f08:	08006f0d 	.word	0x08006f0d
    {
        case PH_KEYSTORE_KEY_TYPE_MIFARE:
            /* 6 bytes for key A + 6 bytes for key B */
            return 12;
 8006f0c:	230c      	movs	r3, #12
 8006f0e:	e008      	b.n	8006f22 <phKeyStore_GetKeySize+0x4a>

        case PH_KEYSTORE_KEY_TYPE_DES:
            return 8;
 8006f10:	2308      	movs	r3, #8
 8006f12:	e006      	b.n	8006f22 <phKeyStore_GetKeySize+0x4a>

        case PH_KEYSTORE_KEY_TYPE_2K3DES:
        case PH_KEYSTORE_KEY_TYPE_AES128:
            return 16;
 8006f14:	2310      	movs	r3, #16
 8006f16:	e004      	b.n	8006f22 <phKeyStore_GetKeySize+0x4a>

        case PH_KEYSTORE_KEY_TYPE_3K3DES:
        case PH_KEYSTORE_KEY_TYPE_AES192:
            return 24;
 8006f18:	2318      	movs	r3, #24
 8006f1a:	e002      	b.n	8006f22 <phKeyStore_GetKeySize+0x4a>

        case PH_KEYSTORE_KEY_TYPE_AES256:
            return 32;
 8006f1c:	2320      	movs	r3, #32
 8006f1e:	e000      	b.n	8006f22 <phKeyStore_GetKeySize+0x4a>

        default:
            return 0;
 8006f20:	2300      	movs	r3, #0
    }
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	370c      	adds	r7, #12
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr
 8006f2e:	bf00      	nop

08006f30 <phNfcLib_SetContext>:

/*******************************************************************************
**   Function Definitions
*******************************************************************************/
phNfcLib_Status_t phNfcLib_SetContext(phNfcLib_AppContext_t * pAppContext)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
    if (pAppContext == NULL)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d101      	bne.n	8006f42 <phNfcLib_SetContext+0x12>
    {
        return PH_NFCLIB_STATUS_INVALID_PARAMETER;
 8006f3e:	2302      	movs	r3, #2
 8006f40:	e010      	b.n	8006f64 <phNfcLib_SetContext+0x34>
    }

    gphNfcLib_Params.pBal = pAppContext->pBalDataparams;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a0a      	ldr	r2, [pc, #40]	@ (8006f70 <phNfcLib_SetContext+0x40>)
 8006f48:	6053      	str	r3, [r2, #4]
#ifdef NXPBUILD__PHPAL_I14443P4MC_SW
    gphNfcLib_Params.pWtxCallback = (pWtxTimerCallback)pAppContext->pWtxCallback;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	461a      	mov	r2, r3
 8006f50:	4b07      	ldr	r3, [pc, #28]	@ (8006f70 <phNfcLib_SetContext+0x40>)
 8006f52:	f8c3 2314 	str.w	r2, [r3, #788]	@ 0x314
#endif /* NXPBUILD__PHPAL_I14443P4MC_SW */

#ifdef NXPBUILD__PHPAL_I18092MT_SW
    gphNfcLib_Params.pRtoxCallback = (pRtoxTimerCallback)pAppContext->pRtoxCallback;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	4b04      	ldr	r3, [pc, #16]	@ (8006f70 <phNfcLib_SetContext+0x40>)
 8006f5e:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc
#endif /* NXPBUILD__PHPAL_I18092MT_SW */

    return PH_NFCLIB_STATUS_SUCCESS;
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr
 8006f70:	200008e4 	.word	0x200008e4

08006f74 <phNfcLib_CommonLayer_Init>:

/**
* This function will initialize Reader Library Common Layer Components
*/
static phStatus_t phNfcLib_CommonLayer_Init(void)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b086      	sub	sp, #24
 8006f78:	af04      	add	r7, sp, #16
    phStatus_t wStatus = PH_ERR_SUCCESS;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	80fb      	strh	r3, [r7, #6]
    do
    {
#ifdef NXPBUILD__PH_KEYSTORE_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phKeyStore_Sw_Init(
 8006f7e:	2301      	movs	r3, #1
 8006f80:	9303      	str	r3, [sp, #12]
 8006f82:	4b3c      	ldr	r3, [pc, #240]	@ (8007074 <phNfcLib_CommonLayer_Init+0x100>)
 8006f84:	9302      	str	r3, [sp, #8]
 8006f86:	2302      	movs	r3, #2
 8006f88:	9301      	str	r3, [sp, #4]
 8006f8a:	4b3b      	ldr	r3, [pc, #236]	@ (8007078 <phNfcLib_CommonLayer_Init+0x104>)
 8006f8c:	9300      	str	r3, [sp, #0]
 8006f8e:	2308      	movs	r3, #8
 8006f90:	4a3a      	ldr	r2, [pc, #232]	@ (800707c <phNfcLib_CommonLayer_Init+0x108>)
 8006f92:	2118      	movs	r1, #24
 8006f94:	483a      	ldr	r0, [pc, #232]	@ (8007080 <phNfcLib_CommonLayer_Init+0x10c>)
 8006f96:	f7ff fe08 	bl	8006baa <phKeyStore_Sw_Init>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	80fb      	strh	r3, [r7, #6]
 8006f9e:	88fb      	ldrh	r3, [r7, #6]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d162      	bne.n	800706a <phNfcLib_CommonLayer_Init+0xf6>
            NUMBER_OF_KUCENTRIES));

        /* load a Key to the Store */
        /* Note: If You use Key number 0x00, be aware that in SAM
                this Key is the 'Host authentication key' !!! */
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phKeyStore_FormatKeyEntry(PTR_sKeyStore, 1, 0x6));
 8006fa4:	2206      	movs	r2, #6
 8006fa6:	2101      	movs	r1, #1
 8006fa8:	4835      	ldr	r0, [pc, #212]	@ (8007080 <phNfcLib_CommonLayer_Init+0x10c>)
 8006faa:	f7ff fe8e 	bl	8006cca <phKeyStore_Sw_FormatKeyEntry>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	80fb      	strh	r3, [r7, #6]
 8006fb2:	88fb      	ldrh	r3, [r7, #6]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d158      	bne.n	800706a <phNfcLib_CommonLayer_Init+0xf6>

        /* Set Key Store */
        PH_CHECK_NFCLIB_INIT_FCT(wStatus,  phKeyStore_SetKey(PTR_sKeyStore, 1, 0, 0x6, &gphNfcLib_Key[0], 0));
 8006fb8:	2300      	movs	r3, #0
 8006fba:	9301      	str	r3, [sp, #4]
 8006fbc:	4b31      	ldr	r3, [pc, #196]	@ (8007084 <phNfcLib_CommonLayer_Init+0x110>)
 8006fbe:	9300      	str	r3, [sp, #0]
 8006fc0:	2306      	movs	r3, #6
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	2101      	movs	r1, #1
 8006fc6:	482e      	ldr	r0, [pc, #184]	@ (8007080 <phNfcLib_CommonLayer_Init+0x10c>)
 8006fc8:	f7ff fecc 	bl	8006d64 <phKeyStore_Sw_SetKey>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	80fb      	strh	r3, [r7, #6]
 8006fd0:	88fb      	ldrh	r3, [r7, #6]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d149      	bne.n	800706a <phNfcLib_CommonLayer_Init+0xf6>
#if defined(NXPBUILD__PHAL_MFDFEVX_SW) || defined(NXPBUILD__PHAL_MFPEVX_SW) ||         \
    defined(NXPBUILD__PHAL_MFNTAG42XDNA_SW) || defined(NXPBUILD__PHAL_MFDFLIGHT_SW) || \
    defined(NXPBUILD__PHAL_MFDUOX_SW) || defined(NXPBUILD__PHAL_NTAGXDNA_SW)
#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        /* init. crypto */
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phCryptoSym_Sw_Init(
 8006fd6:	4a2a      	ldr	r2, [pc, #168]	@ (8007080 <phNfcLib_CommonLayer_Init+0x10c>)
 8006fd8:	2140      	movs	r1, #64	@ 0x40
 8006fda:	482b      	ldr	r0, [pc, #172]	@ (8007088 <phNfcLib_CommonLayer_Init+0x114>)
 8006fdc:	f7fc ffed 	bl	8003fba <phCryptoSym_Sw_Init>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	80fb      	strh	r3, [r7, #6]
 8006fe4:	88fb      	ldrh	r3, [r7, #6]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d13f      	bne.n	800706a <phNfcLib_CommonLayer_Init+0xf6>
            PTR_aAddData_Buffer,
            PRS_INT_BUFFER_SIZE));
#endif /* NXPBUILD__PH_CRYPTOSYM_MBEDTLS */

#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phCryptoSym_Sw_Init(
 8006fea:	4a25      	ldr	r2, [pc, #148]	@ (8007080 <phNfcLib_CommonLayer_Init+0x10c>)
 8006fec:	2140      	movs	r1, #64	@ 0x40
 8006fee:	4827      	ldr	r0, [pc, #156]	@ (800708c <phNfcLib_CommonLayer_Init+0x118>)
 8006ff0:	f7fc ffe3 	bl	8003fba <phCryptoSym_Sw_Init>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	80fb      	strh	r3, [r7, #6]
 8006ff8:	88fb      	ldrh	r3, [r7, #6]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d135      	bne.n	800706a <phNfcLib_CommonLayer_Init+0xf6>
#endif /* NXPBUILD__PH_CRYPTOASYM_MBEDTLS */

#ifdef NXPBUILD__PHAL_MFPEVX_SW
#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        /* Initialize CryptoSym for key diversification. */
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phCryptoSym_Sw_Init(
 8006ffe:	4a20      	ldr	r2, [pc, #128]	@ (8007080 <phNfcLib_CommonLayer_Init+0x10c>)
 8007000:	2140      	movs	r1, #64	@ 0x40
 8007002:	4823      	ldr	r0, [pc, #140]	@ (8007090 <phNfcLib_CommonLayer_Init+0x11c>)
 8007004:	f7fc ffd9 	bl	8003fba <phCryptoSym_Sw_Init>
 8007008:	4603      	mov	r3, r0
 800700a:	80fb      	strh	r3, [r7, #6]
 800700c:	88fb      	ldrh	r3, [r7, #6]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d12b      	bne.n	800706a <phNfcLib_CommonLayer_Init+0xf6>
#endif /* NXPBUILD__PHAL_MFPEVX_SW */

#if defined(NXPBUILD__PHAL_MFDFEVX_SW) || defined(NXPBUILD__PHAL_MFPEVX_SW) || \
    defined(NXPBUILD__PHAL_MFDFLIGHT_SW) || defined(NXPBUILD__PHAL_MFDUOX_SW)
        /* Initialize TMI utility. */
        memset ( &aTmi_Buffer[0], 0x00, sizeof(aTmi_Buffer));
 8007012:	22ff      	movs	r2, #255	@ 0xff
 8007014:	2100      	movs	r1, #0
 8007016:	481f      	ldr	r0, [pc, #124]	@ (8007094 <phNfcLib_CommonLayer_Init+0x120>)
 8007018:	f019 fc3c 	bl	8020894 <memset>
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phTMIUtils_Init(
 800701c:	22ff      	movs	r2, #255	@ 0xff
 800701e:	491d      	ldr	r1, [pc, #116]	@ (8007094 <phNfcLib_CommonLayer_Init+0x120>)
 8007020:	481d      	ldr	r0, [pc, #116]	@ (8007098 <phNfcLib_CommonLayer_Init+0x124>)
 8007022:	f000 fc49 	bl	80078b8 <phTMIUtils_Init>
 8007026:	4603      	mov	r3, r0
 8007028:	80fb      	strh	r3, [r7, #6]
 800702a:	88fb      	ldrh	r3, [r7, #6]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d11c      	bne.n	800706a <phNfcLib_CommonLayer_Init+0xf6>
#endif /* defined(NXPBUILD__PHAL_MFDFEVX_SW) || defined(NXPBUILD__PHAL_MFPEVX_SW) ||
          defined(NXPBUILD__PHAL_MFNTAG42XDNA_SW) || defined(NXPBUILD__PHAL_MFDFLIGHT_SW) ||
          defined(NXPBUILD__PHAL_MFDUOX_SW) || defined(NXPBUILD__PHAL_NTAGXDNA_SW) */

#ifdef NXPBUILD__PH_CRYPTORNG_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phCryptoSym_Sw_Init(
 8007030:	4a13      	ldr	r2, [pc, #76]	@ (8007080 <phNfcLib_CommonLayer_Init+0x10c>)
 8007032:	2140      	movs	r1, #64	@ 0x40
 8007034:	4819      	ldr	r0, [pc, #100]	@ (800709c <phNfcLib_CommonLayer_Init+0x128>)
 8007036:	f7fc ffc0 	bl	8003fba <phCryptoSym_Sw_Init>
 800703a:	4603      	mov	r3, r0
 800703c:	80fb      	strh	r3, [r7, #6]
 800703e:	88fb      	ldrh	r3, [r7, #6]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d112      	bne.n	800706a <phNfcLib_CommonLayer_Init+0xf6>
            &sCryptoSymRng,
            sizeof(phCryptoSym_Sw_DataParams_t),
            PTR_sKeyStore));

        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phCryptoRng_Sw_Init(
 8007044:	4a15      	ldr	r2, [pc, #84]	@ (800709c <phNfcLib_CommonLayer_Init+0x128>)
 8007046:	2120      	movs	r1, #32
 8007048:	4815      	ldr	r0, [pc, #84]	@ (80070a0 <phNfcLib_CommonLayer_Init+0x12c>)
 800704a:	f7fc fccd 	bl	80039e8 <phCryptoRng_Sw_Init>
 800704e:	4603      	mov	r3, r0
 8007050:	80fb      	strh	r3, [r7, #6]
 8007052:	88fb      	ldrh	r3, [r7, #6]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d108      	bne.n	800706a <phNfcLib_CommonLayer_Init+0xf6>
            PTR_sCryptoRng,
            sizeof(phCryptoRng_mBedTLS_DataParams_t)));
#endif /* NXPBUILD__PH_CRYPTORNG_MBEDTLS */

#ifdef NXPBUILD__PH_CRYPTORNG
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phCryptoRng_Seed(
 8007058:	2208      	movs	r2, #8
 800705a:	4912      	ldr	r1, [pc, #72]	@ (80070a4 <phNfcLib_CommonLayer_Init+0x130>)
 800705c:	4810      	ldr	r0, [pc, #64]	@ (80070a0 <phNfcLib_CommonLayer_Init+0x12c>)
 800705e:	f7fc ff73 	bl	8003f48 <phCryptoRng_Seed>
 8007062:	4603      	mov	r3, r0
 8007064:	80fb      	strh	r3, [r7, #6]
 8007066:	88fb      	ldrh	r3, [r7, #6]
 8007068:	2b00      	cmp	r3, #0
            &aTmi_Buffer[0],
            TMI_BUFFER_SIZE));
#endif /* defined (NXPBUILD__PHAL_MFDFEVX_SAM_NONX) || defined (NXPBUILD__PHAL_MFPEVX_SAM_NONX) */
    }while(FALSE);

    return wStatus;
 800706a:	88fb      	ldrh	r3, [r7, #6]
}
 800706c:	4618      	mov	r0, r3
 800706e:	3708      	adds	r7, #8
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	20001bd8 	.word	0x20001bd8
 8007078:	200019b8 	.word	0x200019b8
 800707c:	20001998 	.word	0x20001998
 8007080:	20000a80 	.word	0x20000a80
 8007084:	20000064 	.word	0x20000064
 8007088:	20001124 	.word	0x20001124
 800708c:	20001164 	.word	0x20001164
 8007090:	200011a4 	.word	0x200011a4
 8007094:	200015b4 	.word	0x200015b4
 8007098:	20001944 	.word	0x20001944
 800709c:	20001958 	.word	0x20001958
 80070a0:	200011e4 	.word	0x200011e4
 80070a4:	200015ac 	.word	0x200015ac

080070a8 <phNfcLib_PAL_Init>:

/**
* This function will initialize Reader LIbrary PAL Components
*/
static phStatus_t phNfcLib_PAL_Init(void)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
    phStatus_t wStatus = PH_ERR_SUCCESS;
 80070ae:	2300      	movs	r3, #0
 80070b0:	80fb      	strh	r3, [r7, #6]

    do
    {
        /* Initialize the I14443-3A PAL layer */
#ifdef NXPBUILD__PHPAL_I14443P3A_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalI14443p3a_Sw_Init(
 80070b2:	4a3c      	ldr	r2, [pc, #240]	@ (80071a4 <phNfcLib_PAL_Init+0xfc>)
 80070b4:	2118      	movs	r1, #24
 80070b6:	483c      	ldr	r0, [pc, #240]	@ (80071a8 <phNfcLib_PAL_Init+0x100>)
 80070b8:	f00d f92a 	bl	8014310 <phpalI14443p3a_Sw_Init>
 80070bc:	4603      	mov	r3, r0
 80070be:	80fb      	strh	r3, [r7, #6]
 80070c0:	88fb      	ldrh	r3, [r7, #6]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d169      	bne.n	800719a <phNfcLib_PAL_Init+0xf2>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_I14443P3A_SW */

        /* Initialize the I14443-3B PAL  component */
#ifdef NXPBUILD__PHPAL_I14443P3B_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalI14443p3b_Sw_Init(
 80070c6:	4a37      	ldr	r2, [pc, #220]	@ (80071a4 <phNfcLib_PAL_Init+0xfc>)
 80070c8:	212c      	movs	r1, #44	@ 0x2c
 80070ca:	4838      	ldr	r0, [pc, #224]	@ (80071ac <phNfcLib_PAL_Init+0x104>)
 80070cc:	f00d ff20 	bl	8014f10 <phpalI14443p3b_Sw_Init>
 80070d0:	4603      	mov	r3, r0
 80070d2:	80fb      	strh	r3, [r7, #6]
 80070d4:	88fb      	ldrh	r3, [r7, #6]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d15f      	bne.n	800719a <phNfcLib_PAL_Init+0xf2>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_I14443P3B_SW */

        /* Initialize the I14443-4A PAL component */
#ifdef NXPBUILD__PHPAL_I14443P4A_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalI14443p4a_Sw_Init(
 80070da:	4a32      	ldr	r2, [pc, #200]	@ (80071a4 <phNfcLib_PAL_Init+0xfc>)
 80070dc:	2114      	movs	r1, #20
 80070de:	4834      	ldr	r0, [pc, #208]	@ (80071b0 <phNfcLib_PAL_Init+0x108>)
 80070e0:	f010 f836 	bl	8017150 <phpalI14443p4a_Sw_Init>
 80070e4:	4603      	mov	r3, r0
 80070e6:	80fb      	strh	r3, [r7, #6]
 80070e8:	88fb      	ldrh	r3, [r7, #6]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d155      	bne.n	800719a <phNfcLib_PAL_Init+0xf2>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_I14443P4A_SW */

        /* Initialize the I14443-4 PAL component */
#ifdef NXPBUILD__PHPAL_I14443P4_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalI14443p4_Sw_Init(
 80070ee:	4a2d      	ldr	r2, [pc, #180]	@ (80071a4 <phNfcLib_PAL_Init+0xfc>)
 80070f0:	2114      	movs	r1, #20
 80070f2:	4830      	ldr	r0, [pc, #192]	@ (80071b4 <phNfcLib_PAL_Init+0x10c>)
 80070f4:	f00e fd80 	bl	8015bf8 <phpalI14443p4_Sw_Init>
 80070f8:	4603      	mov	r3, r0
 80070fa:	80fb      	strh	r3, [r7, #6]
 80070fc:	88fb      	ldrh	r3, [r7, #6]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d14b      	bne.n	800719a <phNfcLib_PAL_Init+0xf2>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_I14443P4_SW */

        /* Initialize the MIFARE product PAL component */
#ifdef NXPBUILD__PHPAL_MIFARE_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalMifare_Sw_Init(
 8007102:	4b2c      	ldr	r3, [pc, #176]	@ (80071b4 <phNfcLib_PAL_Init+0x10c>)
 8007104:	4a27      	ldr	r2, [pc, #156]	@ (80071a4 <phNfcLib_PAL_Init+0xfc>)
 8007106:	210c      	movs	r1, #12
 8007108:	482b      	ldr	r0, [pc, #172]	@ (80071b8 <phNfcLib_PAL_Init+0x110>)
 800710a:	f011 fe1a 	bl	8018d42 <phpalMifare_Sw_Init>
 800710e:	4603      	mov	r3, r0
 8007110:	80fb      	strh	r3, [r7, #6]
 8007112:	88fb      	ldrh	r3, [r7, #6]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d140      	bne.n	800719a <phNfcLib_PAL_Init+0xf2>
        ));
#endif /* NXPBUILD__PHPAL_MIFARE_SW */

        /* Initialize PAL FeliCa PAL component */
#ifdef NXPBUILD__PHPAL_FELICA_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalFelica_Sw_Init(
 8007118:	4a22      	ldr	r2, [pc, #136]	@ (80071a4 <phNfcLib_PAL_Init+0xfc>)
 800711a:	2120      	movs	r1, #32
 800711c:	4827      	ldr	r0, [pc, #156]	@ (80071bc <phNfcLib_PAL_Init+0x114>)
 800711e:	f00c fe9d 	bl	8013e5c <phpalFelica_Sw_Init>
 8007122:	4603      	mov	r3, r0
 8007124:	80fb      	strh	r3, [r7, #6]
 8007126:	88fb      	ldrh	r3, [r7, #6]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d136      	bne.n	800719a <phNfcLib_PAL_Init+0xf2>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_FELICA_SW */

        /* Initialize the 15693 PAL component */
#ifdef NXPBUILD__PHPAL_SLI15693_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalSli15693_Sw_Init(
 800712c:	4a1d      	ldr	r2, [pc, #116]	@ (80071a4 <phNfcLib_PAL_Init+0xfc>)
 800712e:	211c      	movs	r1, #28
 8007130:	4823      	ldr	r0, [pc, #140]	@ (80071c0 <phNfcLib_PAL_Init+0x118>)
 8007132:	f011 fe2f 	bl	8018d94 <phpalSli15693_Sw_Init>
 8007136:	4603      	mov	r3, r0
 8007138:	80fb      	strh	r3, [r7, #6]
 800713a:	88fb      	ldrh	r3, [r7, #6]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d12c      	bne.n	800719a <phNfcLib_PAL_Init+0xf2>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_SLI15693_SW */

        /* Initialize the 1800p3m3 PAL component */
#ifdef NXPBUILD__PHPAL_I18000P3M3_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalI18000p3m3_Sw_Init(
 8007140:	4a18      	ldr	r2, [pc, #96]	@ (80071a4 <phNfcLib_PAL_Init+0xfc>)
 8007142:	210c      	movs	r1, #12
 8007144:	481f      	ldr	r0, [pc, #124]	@ (80071c4 <phNfcLib_PAL_Init+0x11c>)
 8007146:	f010 fddc 	bl	8017d02 <phpalI18000p3m3_Sw_Init>
 800714a:	4603      	mov	r3, r0
 800714c:	80fb      	strh	r3, [r7, #6]
 800714e:	88fb      	ldrh	r3, [r7, #6]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d122      	bne.n	800719a <phNfcLib_PAL_Init+0xf2>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_EPCUID_SW */

        /* Initialize 18092 Initiator PAL component */
#ifdef NXPBUILD__PHPAL_I18092MPI_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus,phpalI18092mPI_Sw_Init(
 8007154:	4a13      	ldr	r2, [pc, #76]	@ (80071a4 <phNfcLib_PAL_Init+0xfc>)
 8007156:	2124      	movs	r1, #36	@ 0x24
 8007158:	481b      	ldr	r0, [pc, #108]	@ (80071c8 <phNfcLib_PAL_Init+0x120>)
 800715a:	f010 ffb9 	bl	80180d0 <phpalI18092mPI_Sw_Init>
 800715e:	4603      	mov	r3, r0
 8007160:	80fb      	strh	r3, [r7, #6]
 8007162:	88fb      	ldrh	r3, [r7, #6]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d118      	bne.n	800719a <phNfcLib_PAL_Init+0xf2>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_I18092MPI_SW */

        /* Initialize 14443-4mC Target PAL component */
#ifdef NXPBUILD__PHPAL_I14443P4MC_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus,phpalI14443p4mC_Sw_Init(
 8007168:	4b18      	ldr	r3, [pc, #96]	@ (80071cc <phNfcLib_PAL_Init+0x124>)
 800716a:	f8d3 3314 	ldr.w	r3, [r3, #788]	@ 0x314
 800716e:	4a0d      	ldr	r2, [pc, #52]	@ (80071a4 <phNfcLib_PAL_Init+0xfc>)
 8007170:	2134      	movs	r1, #52	@ 0x34
 8007172:	4817      	ldr	r0, [pc, #92]	@ (80071d0 <phNfcLib_PAL_Init+0x128>)
 8007174:	f010 fd1e 	bl	8017bb4 <phpalI14443p4mC_Sw_Init>
 8007178:	4603      	mov	r3, r0
 800717a:	80fb      	strh	r3, [r7, #6]
 800717c:	88fb      	ldrh	r3, [r7, #6]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d10b      	bne.n	800719a <phNfcLib_PAL_Init+0xf2>
            ));
#endif /* NXPBUILD__PHPAL_I14443P4MC_SW */

        /* Initialize 18092 Target PAL component */
#ifdef NXPBUILD__PHPAL_I18092MT_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus,phpalI18092mT_Sw_Init(
 8007182:	4b12      	ldr	r3, [pc, #72]	@ (80071cc <phNfcLib_PAL_Init+0x124>)
 8007184:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 8007188:	4a06      	ldr	r2, [pc, #24]	@ (80071a4 <phNfcLib_PAL_Init+0xfc>)
 800718a:	214c      	movs	r1, #76	@ 0x4c
 800718c:	4811      	ldr	r0, [pc, #68]	@ (80071d4 <phNfcLib_PAL_Init+0x12c>)
 800718e:	f011 fd27 	bl	8018be0 <phpalI18092mT_Sw_Init>
 8007192:	4603      	mov	r3, r0
 8007194:	80fb      	strh	r3, [r7, #6]
 8007196:	88fb      	ldrh	r3, [r7, #6]
 8007198:	2b00      	cmp	r3, #0
            ));
#endif /* NXPBUILD__PHPAL_I18092MT_SW */

    }while(FALSE);

    return wStatus;
 800719a:	88fb      	ldrh	r3, [r7, #6]
}
 800719c:	4618      	mov	r0, r3
 800719e:	3708      	adds	r7, #8
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	200008ec 	.word	0x200008ec
 80071a8:	20000a9c 	.word	0x20000a9c
 80071ac:	20000ab4 	.word	0x20000ab4
 80071b0:	20000ae0 	.word	0x20000ae0
 80071b4:	20000af4 	.word	0x20000af4
 80071b8:	20000bfc 	.word	0x20000bfc
 80071bc:	20000b30 	.word	0x20000b30
 80071c0:	20000b08 	.word	0x20000b08
 80071c4:	20000b24 	.word	0x20000b24
 80071c8:	20000b50 	.word	0x20000b50
 80071cc:	200008e4 	.word	0x200008e4
 80071d0:	20000bc4 	.word	0x20000bc4
 80071d4:	20000b74 	.word	0x20000b74

080071d8 <phNfcLib_AL_Init>:

/**
* This function will initialize the Reader Library AL Components
*/
static phStatus_t phNfcLib_AL_Init(void)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b088      	sub	sp, #32
 80071dc:	af06      	add	r7, sp, #24
    phStatus_t wStatus = PH_ERR_SUCCESS;
 80071de:	2300      	movs	r3, #0
 80071e0:	80fb      	strh	r3, [r7, #6]

    do
    {
        /* Initialize AL FeliCa component */
#ifdef NXPBUILD__PHAL_FELICA_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalFelica_Sw_Init(
 80071e2:	4a7b      	ldr	r2, [pc, #492]	@ (80073d0 <phNfcLib_AL_Init+0x1f8>)
 80071e4:	210c      	movs	r1, #12
 80071e6:	487b      	ldr	r0, [pc, #492]	@ (80073d4 <phNfcLib_AL_Init+0x1fc>)
 80071e8:	f005 fc14 	bl	800ca14 <phalFelica_Sw_Init>
 80071ec:	4603      	mov	r3, r0
 80071ee:	80fb      	strh	r3, [r7, #6]
 80071f0:	88fb      	ldrh	r3, [r7, #6]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f040 80e6 	bne.w	80073c4 <phNfcLib_AL_Init+0x1ec>
            &gphNfcLib_Params.spalFelica));
#endif /* NXPBUILD__PHAL_FELICA_SW */

        /* Initialize AL MIFARE Classic contactless IC component */
#ifdef NXPBUILD__PHAL_MFC_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMfc_Sw_Init(
 80071f8:	4b77      	ldr	r3, [pc, #476]	@ (80073d8 <phNfcLib_AL_Init+0x200>)
 80071fa:	4a78      	ldr	r2, [pc, #480]	@ (80073dc <phNfcLib_AL_Init+0x204>)
 80071fc:	210c      	movs	r1, #12
 80071fe:	4878      	ldr	r0, [pc, #480]	@ (80073e0 <phNfcLib_AL_Init+0x208>)
 8007200:	f005 fd60 	bl	800ccc4 <phalMfc_Sw_Init>
 8007204:	4603      	mov	r3, r0
 8007206:	80fb      	strh	r3, [r7, #6]
 8007208:	88fb      	ldrh	r3, [r7, #6]
 800720a:	2b00      	cmp	r3, #0
 800720c:	f040 80da 	bne.w	80073c4 <phNfcLib_AL_Init+0x1ec>
            PTR_sKeyStore));
#endif /* NXPBUILD__PHAL_MFC_SW */

        /* Initialize AL MIFARE Ultralight contactless IC component */
#ifdef NXPBUILD__PHAL_MFUL_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMful_Sw_Init(
 8007210:	4b74      	ldr	r3, [pc, #464]	@ (80073e4 <phNfcLib_AL_Init+0x20c>)
 8007212:	9301      	str	r3, [sp, #4]
 8007214:	2300      	movs	r3, #0
 8007216:	9300      	str	r3, [sp, #0]
 8007218:	4b6f      	ldr	r3, [pc, #444]	@ (80073d8 <phNfcLib_AL_Init+0x200>)
 800721a:	4a70      	ldr	r2, [pc, #448]	@ (80073dc <phNfcLib_AL_Init+0x204>)
 800721c:	211c      	movs	r1, #28
 800721e:	4872      	ldr	r0, [pc, #456]	@ (80073e8 <phNfcLib_AL_Init+0x210>)
 8007220:	f006 f850 	bl	800d2c4 <phalMful_Sw_Init>
 8007224:	4603      	mov	r3, r0
 8007226:	80fb      	strh	r3, [r7, #6]
 8007228:	88fb      	ldrh	r3, [r7, #6]
 800722a:	2b00      	cmp	r3, #0
 800722c:	f040 80ca 	bne.w	80073c4 <phNfcLib_AL_Init+0x1ec>
            PTR_sCryptoRng));
#endif /* NXPBUILD__PHAL_MFUL_SW */

        /* Initialize AL MIFARE DESFire contactless IC component */
#ifdef NXPBUILD__PHAL_MFDF_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMfdf_Sw_Init(
 8007230:	4b6e      	ldr	r3, [pc, #440]	@ (80073ec <phNfcLib_AL_Init+0x214>)
 8007232:	9302      	str	r3, [sp, #8]
 8007234:	4b6b      	ldr	r3, [pc, #428]	@ (80073e4 <phNfcLib_AL_Init+0x20c>)
 8007236:	9301      	str	r3, [sp, #4]
 8007238:	2300      	movs	r3, #0
 800723a:	9300      	str	r3, [sp, #0]
 800723c:	4b66      	ldr	r3, [pc, #408]	@ (80073d8 <phNfcLib_AL_Init+0x200>)
 800723e:	4a67      	ldr	r2, [pc, #412]	@ (80073dc <phNfcLib_AL_Init+0x204>)
 8007240:	2168      	movs	r1, #104	@ 0x68
 8007242:	486b      	ldr	r0, [pc, #428]	@ (80073f0 <phNfcLib_AL_Init+0x218>)
 8007244:	f005 fd67 	bl	800cd16 <phalMfdf_Sw_Init>
 8007248:	4603      	mov	r3, r0
 800724a:	80fb      	strh	r3, [r7, #6]
 800724c:	88fb      	ldrh	r3, [r7, #6]
 800724e:	2b00      	cmp	r3, #0
 8007250:	f040 80b8 	bne.w	80073c4 <phNfcLib_AL_Init+0x1ec>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHAL_MFDF_SW */

#ifdef NXPBUILD__PHAL_VCA_SW
        /* Initialize the VCA component */
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalVca_Sw_Init(
 8007254:	4b67      	ldr	r3, [pc, #412]	@ (80073f4 <phNfcLib_AL_Init+0x21c>)
 8007256:	881b      	ldrh	r3, [r3, #0]
 8007258:	4a67      	ldr	r2, [pc, #412]	@ (80073f8 <phNfcLib_AL_Init+0x220>)
 800725a:	8812      	ldrh	r2, [r2, #0]
 800725c:	9205      	str	r2, [sp, #20]
 800725e:	4a67      	ldr	r2, [pc, #412]	@ (80073fc <phNfcLib_AL_Init+0x224>)
 8007260:	9204      	str	r2, [sp, #16]
 8007262:	9303      	str	r3, [sp, #12]
 8007264:	4b66      	ldr	r3, [pc, #408]	@ (8007400 <phNfcLib_AL_Init+0x228>)
 8007266:	9302      	str	r3, [sp, #8]
 8007268:	4b5e      	ldr	r3, [pc, #376]	@ (80073e4 <phNfcLib_AL_Init+0x20c>)
 800726a:	9301      	str	r3, [sp, #4]
 800726c:	4b65      	ldr	r3, [pc, #404]	@ (8007404 <phNfcLib_AL_Init+0x22c>)
 800726e:	9300      	str	r3, [sp, #0]
 8007270:	4b59      	ldr	r3, [pc, #356]	@ (80073d8 <phNfcLib_AL_Init+0x200>)
 8007272:	4a5a      	ldr	r2, [pc, #360]	@ (80073dc <phNfcLib_AL_Init+0x204>)
 8007274:	2154      	movs	r1, #84	@ 0x54
 8007276:	4864      	ldr	r0, [pc, #400]	@ (8007408 <phNfcLib_AL_Init+0x230>)
 8007278:	f006 f959 	bl	800d52e <phalVca_Sw_Init>
 800727c:	4603      	mov	r3, r0
 800727e:	80fb      	strh	r3, [r7, #6]
 8007280:	88fb      	ldrh	r3, [r7, #6]
 8007282:	2b00      	cmp	r3, #0
 8007284:	f040 809e 	bne.w	80073c4 <phNfcLib_AL_Init+0x1ec>
            wNumCardTableStorageEntries));
#endif /* NXPBUILD__PHAL_VCA_SW */

        /* Initialize AL MIFARE DESFire EVx contactless IC component */
#ifdef NXPBUILD__PHAL_MFDFEVX_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMfdfEVx_Sw_Init(
 8007288:	4b58      	ldr	r3, [pc, #352]	@ (80073ec <phNfcLib_AL_Init+0x214>)
 800728a:	9305      	str	r3, [sp, #20]
 800728c:	4b5e      	ldr	r3, [pc, #376]	@ (8007408 <phNfcLib_AL_Init+0x230>)
 800728e:	9304      	str	r3, [sp, #16]
 8007290:	4b5e      	ldr	r3, [pc, #376]	@ (800740c <phNfcLib_AL_Init+0x234>)
 8007292:	9303      	str	r3, [sp, #12]
 8007294:	4b53      	ldr	r3, [pc, #332]	@ (80073e4 <phNfcLib_AL_Init+0x20c>)
 8007296:	9302      	str	r3, [sp, #8]
 8007298:	4b5d      	ldr	r3, [pc, #372]	@ (8007410 <phNfcLib_AL_Init+0x238>)
 800729a:	9301      	str	r3, [sp, #4]
 800729c:	4b59      	ldr	r3, [pc, #356]	@ (8007404 <phNfcLib_AL_Init+0x22c>)
 800729e:	9300      	str	r3, [sp, #0]
 80072a0:	4b4d      	ldr	r3, [pc, #308]	@ (80073d8 <phNfcLib_AL_Init+0x200>)
 80072a2:	4a4e      	ldr	r2, [pc, #312]	@ (80073dc <phNfcLib_AL_Init+0x204>)
 80072a4:	21b4      	movs	r1, #180	@ 0xb4
 80072a6:	485b      	ldr	r0, [pc, #364]	@ (8007414 <phNfcLib_AL_Init+0x23c>)
 80072a8:	f005 fd9f 	bl	800cdea <phalMfdfEVx_Sw_Init>
 80072ac:	4603      	mov	r3, r0
 80072ae:	80fb      	strh	r3, [r7, #6]
 80072b0:	88fb      	ldrh	r3, [r7, #6]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f040 8086 	bne.w	80073c4 <phNfcLib_AL_Init+0x1ec>
            &sTMI,
            &sVca,
            &gphNfcLib_Params.sHal));

#ifdef NXPBUILD__PHAL_VCA_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalVca_SetApplicationType(
 80072b8:	4956      	ldr	r1, [pc, #344]	@ (8007414 <phNfcLib_AL_Init+0x23c>)
 80072ba:	4853      	ldr	r0, [pc, #332]	@ (8007408 <phNfcLib_AL_Init+0x230>)
 80072bc:	f006 faad 	bl	800d81a <phalVca_SetApplicationType>
 80072c0:	4603      	mov	r3, r0
 80072c2:	80fb      	strh	r3, [r7, #6]
 80072c4:	88fb      	ldrh	r3, [r7, #6]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d17c      	bne.n	80073c4 <phNfcLib_AL_Init+0x1ec>
#endif /* NXPBUILD__PHAL_VCA_SW */
#endif /* NXPBUILD__PHAL_MFDFEVX_SW */

        /* Initialize AL MIFARE DESFire Light contactless IC component */
#ifdef NXPBUILD__PHAL_MFDFLIGHT_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMfdfLight_Sw_Init(
 80072ca:	4b48      	ldr	r3, [pc, #288]	@ (80073ec <phNfcLib_AL_Init+0x214>)
 80072cc:	9304      	str	r3, [sp, #16]
 80072ce:	4b4f      	ldr	r3, [pc, #316]	@ (800740c <phNfcLib_AL_Init+0x234>)
 80072d0:	9303      	str	r3, [sp, #12]
 80072d2:	4b44      	ldr	r3, [pc, #272]	@ (80073e4 <phNfcLib_AL_Init+0x20c>)
 80072d4:	9302      	str	r3, [sp, #8]
 80072d6:	4b4e      	ldr	r3, [pc, #312]	@ (8007410 <phNfcLib_AL_Init+0x238>)
 80072d8:	9301      	str	r3, [sp, #4]
 80072da:	4b4a      	ldr	r3, [pc, #296]	@ (8007404 <phNfcLib_AL_Init+0x22c>)
 80072dc:	9300      	str	r3, [sp, #0]
 80072de:	4b3e      	ldr	r3, [pc, #248]	@ (80073d8 <phNfcLib_AL_Init+0x200>)
 80072e0:	4a3e      	ldr	r2, [pc, #248]	@ (80073dc <phNfcLib_AL_Init+0x204>)
 80072e2:	21ac      	movs	r1, #172	@ 0xac
 80072e4:	484c      	ldr	r0, [pc, #304]	@ (8007418 <phNfcLib_AL_Init+0x240>)
 80072e6:	f005 fe32 	bl	800cf4e <phalMfdfLight_Sw_Init>
 80072ea:	4603      	mov	r3, r0
 80072ec:	80fb      	strh	r3, [r7, #6]
 80072ee:	88fb      	ldrh	r3, [r7, #6]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d167      	bne.n	80073c4 <phNfcLib_AL_Init+0x1ec>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHAL_MFDFLIGHT_SW */

        /* Initialize AL MIFARE Plus Ev1 contactless IC component */
#ifdef NXPBUILD__PHAL_MFPEVX_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMfpEVx_Sw_Init (
 80072f4:	4b44      	ldr	r3, [pc, #272]	@ (8007408 <phNfcLib_AL_Init+0x230>)
 80072f6:	9305      	str	r3, [sp, #20]
 80072f8:	4b44      	ldr	r3, [pc, #272]	@ (800740c <phNfcLib_AL_Init+0x234>)
 80072fa:	9304      	str	r3, [sp, #16]
 80072fc:	4b47      	ldr	r3, [pc, #284]	@ (800741c <phNfcLib_AL_Init+0x244>)
 80072fe:	9303      	str	r3, [sp, #12]
 8007300:	4b38      	ldr	r3, [pc, #224]	@ (80073e4 <phNfcLib_AL_Init+0x20c>)
 8007302:	9302      	str	r3, [sp, #8]
 8007304:	4b42      	ldr	r3, [pc, #264]	@ (8007410 <phNfcLib_AL_Init+0x238>)
 8007306:	9301      	str	r3, [sp, #4]
 8007308:	4b3e      	ldr	r3, [pc, #248]	@ (8007404 <phNfcLib_AL_Init+0x22c>)
 800730a:	9300      	str	r3, [sp, #0]
 800730c:	4b32      	ldr	r3, [pc, #200]	@ (80073d8 <phNfcLib_AL_Init+0x200>)
 800730e:	4a33      	ldr	r2, [pc, #204]	@ (80073dc <phNfcLib_AL_Init+0x204>)
 8007310:	2184      	movs	r1, #132	@ 0x84
 8007312:	4843      	ldr	r0, [pc, #268]	@ (8007420 <phNfcLib_AL_Init+0x248>)
 8007314:	f005 fed9 	bl	800d0ca <phalMfpEVx_Sw_Init>
 8007318:	4603      	mov	r3, r0
 800731a:	80fb      	strh	r3, [r7, #6]
 800731c:	88fb      	ldrh	r3, [r7, #6]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d150      	bne.n	80073c4 <phNfcLib_AL_Init+0x1ec>
            &sTMI,
            PH_NFCLIB_VCA_DATAPARAMS));

#ifdef NXPBUILD__PHAL_VCA
        /* Initialize the MIFARE Plus EV1 component */
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalVca_SetApplicationType(
 8007322:	493f      	ldr	r1, [pc, #252]	@ (8007420 <phNfcLib_AL_Init+0x248>)
 8007324:	4838      	ldr	r0, [pc, #224]	@ (8007408 <phNfcLib_AL_Init+0x230>)
 8007326:	f006 fa78 	bl	800d81a <phalVca_SetApplicationType>
 800732a:	4603      	mov	r3, r0
 800732c:	80fb      	strh	r3, [r7, #6]
 800732e:	88fb      	ldrh	r3, [r7, #6]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d147      	bne.n	80073c4 <phNfcLib_AL_Init+0x1ec>
#endif /* NXPBUILD__PHAL_VCA */
#endif /* NXPBUILD__PHAL_MFPEVX_SW */

        /* Initialize AL MIFARE NTAG 42x DNA contactless IC component */
#ifdef NXPBUILD__PHAL_MFNTAG42XDNA_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMfNtag42XDna_Sw_Init(
 8007334:	4b2d      	ldr	r3, [pc, #180]	@ (80073ec <phNfcLib_AL_Init+0x214>)
 8007336:	9303      	str	r3, [sp, #12]
 8007338:	4b2a      	ldr	r3, [pc, #168]	@ (80073e4 <phNfcLib_AL_Init+0x20c>)
 800733a:	9302      	str	r3, [sp, #8]
 800733c:	4b34      	ldr	r3, [pc, #208]	@ (8007410 <phNfcLib_AL_Init+0x238>)
 800733e:	9301      	str	r3, [sp, #4]
 8007340:	4b30      	ldr	r3, [pc, #192]	@ (8007404 <phNfcLib_AL_Init+0x22c>)
 8007342:	9300      	str	r3, [sp, #0]
 8007344:	4b24      	ldr	r3, [pc, #144]	@ (80073d8 <phNfcLib_AL_Init+0x200>)
 8007346:	4a25      	ldr	r2, [pc, #148]	@ (80073dc <phNfcLib_AL_Init+0x204>)
 8007348:	21a8      	movs	r1, #168	@ 0xa8
 800734a:	4836      	ldr	r0, [pc, #216]	@ (8007424 <phNfcLib_AL_Init+0x24c>)
 800734c:	f005 fc06 	bl	800cb5c <phalMfNtag42XDna_Sw_Init>
 8007350:	4603      	mov	r3, r0
 8007352:	80fb      	strh	r3, [r7, #6]
 8007354:	88fb      	ldrh	r3, [r7, #6]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d134      	bne.n	80073c4 <phNfcLib_AL_Init+0x1ec>
                PHAL_MFDUOX_PRS_BUFFER_SIZE_MINIMUM));
#endif /* NXPBUILD__PHAL_MFDUOX_SW */

        /* Initialize the T1T AL component */
#ifdef NXPBUILD__PHAL_T1T_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalT1T_Sw_Init(
 800735a:	4a33      	ldr	r2, [pc, #204]	@ (8007428 <phNfcLib_AL_Init+0x250>)
 800735c:	2110      	movs	r1, #16
 800735e:	4833      	ldr	r0, [pc, #204]	@ (800742c <phNfcLib_AL_Init+0x254>)
 8007360:	f005 ffeb 	bl	800d33a <phalT1T_Sw_Init>
 8007364:	4603      	mov	r3, r0
 8007366:	80fb      	strh	r3, [r7, #6]
 8007368:	88fb      	ldrh	r3, [r7, #6]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d12a      	bne.n	80073c4 <phNfcLib_AL_Init+0x1ec>
            &gphNfcLib_Params.spalI14443p3a));
#endif /* NXPBUILD__PHAL_T1T_SW */

        /* Initialize the ISO ICODE AL component */
#ifdef NXPBUILD__PHAL_ICODE_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalICode_Sw_Init(
 800736e:	4b1a      	ldr	r3, [pc, #104]	@ (80073d8 <phNfcLib_AL_Init+0x200>)
 8007370:	9301      	str	r3, [sp, #4]
 8007372:	4b1c      	ldr	r3, [pc, #112]	@ (80073e4 <phNfcLib_AL_Init+0x20c>)
 8007374:	9300      	str	r3, [sp, #0]
 8007376:	2300      	movs	r3, #0
 8007378:	4a2d      	ldr	r2, [pc, #180]	@ (8007430 <phNfcLib_AL_Init+0x258>)
 800737a:	2120      	movs	r1, #32
 800737c:	482d      	ldr	r0, [pc, #180]	@ (8007434 <phNfcLib_AL_Init+0x25c>)
 800737e:	f005 fbb4 	bl	800caea <phalICode_Sw_Init>
 8007382:	4603      	mov	r3, r0
 8007384:	80fb      	strh	r3, [r7, #6]
 8007386:	88fb      	ldrh	r3, [r7, #6]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d11b      	bne.n	80073c4 <phNfcLib_AL_Init+0x1ec>
            PTR_sKeyStore));
#endif /* NXPBUILD__PHAL_ICODE_SW */

        /* Initialize the Tag operations component */
#ifdef NXPBUILD__PHAL_TOP_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalTop_Sw_Init(
 800738c:	4b26      	ldr	r3, [pc, #152]	@ (8007428 <phNfcLib_AL_Init+0x250>)
 800738e:	9303      	str	r3, [sp, #12]
 8007390:	4b28      	ldr	r3, [pc, #160]	@ (8007434 <phNfcLib_AL_Init+0x25c>)
 8007392:	9302      	str	r3, [sp, #8]
 8007394:	4b11      	ldr	r3, [pc, #68]	@ (80073dc <phNfcLib_AL_Init+0x204>)
 8007396:	9301      	str	r3, [sp, #4]
 8007398:	4b0e      	ldr	r3, [pc, #56]	@ (80073d4 <phNfcLib_AL_Init+0x1fc>)
 800739a:	9300      	str	r3, [sp, #0]
 800739c:	4b12      	ldr	r3, [pc, #72]	@ (80073e8 <phNfcLib_AL_Init+0x210>)
 800739e:	4a23      	ldr	r2, [pc, #140]	@ (800742c <phNfcLib_AL_Init+0x254>)
 80073a0:	2180      	movs	r1, #128	@ 0x80
 80073a2:	4825      	ldr	r0, [pc, #148]	@ (8007438 <phNfcLib_AL_Init+0x260>)
 80073a4:	f006 f873 	bl	800d48e <phalTop_Sw_Init>
 80073a8:	4603      	mov	r3, r0
 80073aa:	80fb      	strh	r3, [r7, #6]
 80073ac:	88fb      	ldrh	r3, [r7, #6]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d108      	bne.n	80073c4 <phNfcLib_AL_Init+0x1ec>
              PTR_spalI14443p3a));
#endif /* NXPBUILD__PHAL_TOP_SW */

        /* Initialize the 18000p3m3 AL component */
#ifdef NXPBUILD__PHAL_I18000P3M3_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalI18000p3m3_Sw_Init(
 80073b2:	4a22      	ldr	r2, [pc, #136]	@ (800743c <phNfcLib_AL_Init+0x264>)
 80073b4:	210c      	movs	r1, #12
 80073b6:	4822      	ldr	r0, [pc, #136]	@ (8007440 <phNfcLib_AL_Init+0x268>)
 80073b8:	f005 fb54 	bl	800ca64 <phalI18000p3m3_Sw_Init>
 80073bc:	4603      	mov	r3, r0
 80073be:	80fb      	strh	r3, [r7, #6]
 80073c0:	88fb      	ldrh	r3, [r7, #6]
 80073c2:	2b00      	cmp	r3, #0
            &gphNfcLib_Params.spalI18000p3m3));
#endif /* NXPBUILD__PHAL_I18000P3M3_SW */

    }while(FALSE);

    return wStatus;
 80073c4:	88fb      	ldrh	r3, [r7, #6]
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3708      	adds	r7, #8
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	20000b30 	.word	0x20000b30
 80073d4:	20000c14 	.word	0x20000c14
 80073d8:	20000a80 	.word	0x20000a80
 80073dc:	20000bfc 	.word	0x20000bfc
 80073e0:	20000c40 	.word	0x20000c40
 80073e4:	200011e4 	.word	0x200011e4
 80073e8:	20000e98 	.word	0x20000e98
 80073ec:	200008ec 	.word	0x200008ec
 80073f0:	20000c4c 	.word	0x20000c4c
 80073f4:	2000005e 	.word	0x2000005e
 80073f8:	20000060 	.word	0x20000060
 80073fc:	20001774 	.word	0x20001774
 8007400:	200016b4 	.word	0x200016b4
 8007404:	20001124 	.word	0x20001124
 8007408:	200018f0 	.word	0x200018f0
 800740c:	20001944 	.word	0x20001944
 8007410:	20001164 	.word	0x20001164
 8007414:	20000cb4 	.word	0x20000cb4
 8007418:	20000d68 	.word	0x20000d68
 800741c:	200011a4 	.word	0x200011a4
 8007420:	20000e14 	.word	0x20000e14
 8007424:	20000eb4 	.word	0x20000eb4
 8007428:	20000a9c 	.word	0x20000a9c
 800742c:	20000f5c 	.word	0x20000f5c
 8007430:	20000b08 	.word	0x20000b08
 8007434:	20000c20 	.word	0x20000c20
 8007438:	20000f6c 	.word	0x20000f6c
 800743c:	20000b24 	.word	0x20000b24
 8007440:	20000c08 	.word	0x20000c08

08007444 <phNfcLib_Init>:

phNfcLib_Status_t phNfcLib_Init(void)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b086      	sub	sp, #24
 8007448:	af04      	add	r7, sp, #16
    phStatus_t        wStatus  = PH_ERR_SUCCESS;
 800744a:	2300      	movs	r3, #0
 800744c:	80fb      	strh	r3, [r7, #6]
    phNfcLib_Status_t dwStatus = PH_NFCLIB_STATUS_INVALID_STATE;
 800744e:	2301      	movs	r3, #1
 8007450:	603b      	str	r3, [r7, #0]

    if (((phNfcLib_StateMachine_t)gphNfcLib_State.bNfcLibState) == eNfcLib_ResetState)
 8007452:	4b4d      	ldr	r3, [pc, #308]	@ (8007588 <phNfcLib_Init+0x144>)
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	f040 8091 	bne.w	800757e <phNfcLib_Init+0x13a>
    {
        do
        {
            /* Perform Reader Library Common Layer Initialization */
            PH_CHECK_NFCLIB_INIT_FCT(wStatus, phNfcLib_CommonLayer_Init());
 800745c:	f7ff fd8a 	bl	8006f74 <phNfcLib_CommonLayer_Init>
 8007460:	4603      	mov	r3, r0
 8007462:	80fb      	strh	r3, [r7, #6]
 8007464:	88fb      	ldrh	r3, [r7, #6]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d15d      	bne.n	8007526 <phNfcLib_Init+0xe2>
                PH_NXPNFCRDLIB_CONFIG_HAL_RX_BUFFSIZE));
#endif /* NXPBUILD__PHHAL_HW_RC663 */

#ifdef NXPBUILD__PHHAL_HW_PN5180
            /* Initialize the Pn5180 HAL component */
            PH_CHECK_SUCCESS_FCT(wStatus, phhalHw_Pn5180_Init(
 800746a:	4b48      	ldr	r3, [pc, #288]	@ (800758c <phNfcLib_Init+0x148>)
 800746c:	685a      	ldr	r2, [r3, #4]
 800746e:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8007472:	9303      	str	r3, [sp, #12]
 8007474:	4b46      	ldr	r3, [pc, #280]	@ (8007590 <phNfcLib_Init+0x14c>)
 8007476:	9302      	str	r3, [sp, #8]
 8007478:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800747c:	9301      	str	r3, [sp, #4]
 800747e:	4b45      	ldr	r3, [pc, #276]	@ (8007594 <phNfcLib_Init+0x150>)
 8007480:	9300      	str	r3, [sp, #0]
 8007482:	4b45      	ldr	r3, [pc, #276]	@ (8007598 <phNfcLib_Init+0x154>)
 8007484:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8007488:	4844      	ldr	r0, [pc, #272]	@ (800759c <phNfcLib_Init+0x158>)
 800748a:	f006 fa23 	bl	800d8d4 <phhalHw_Pn5180_Init>
 800748e:	4603      	mov	r3, r0
 8007490:	80fb      	strh	r3, [r7, #6]
 8007492:	88fb      	ldrh	r3, [r7, #6]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d001      	beq.n	800749c <phNfcLib_Init+0x58>
 8007498:	88fb      	ldrh	r3, [r7, #6]
 800749a:	e071      	b.n	8007580 <phNfcLib_Init+0x13c>
                gphNfcLib_State.bHalBufferRx,
                PH_NXPNFCRDLIB_CONFIG_HAL_RX_BUFFSIZE));
#endif /* NXPBUILD__PHHAL_HW_PN7462AU */

            /* Perform Reader Library PAL Initialization */
            PH_CHECK_NFCLIB_INIT_FCT(wStatus, phNfcLib_PAL_Init());
 800749c:	f7ff fe04 	bl	80070a8 <phNfcLib_PAL_Init>
 80074a0:	4603      	mov	r3, r0
 80074a2:	80fb      	strh	r3, [r7, #6]
 80074a4:	88fb      	ldrh	r3, [r7, #6]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d13d      	bne.n	8007526 <phNfcLib_Init+0xe2>

            /* Perform Reader Library AL Initialization */
            PH_CHECK_NFCLIB_INIT_FCT(wStatus, phNfcLib_AL_Init());
 80074aa:	f7ff fe95 	bl	80071d8 <phNfcLib_AL_Init>
 80074ae:	4603      	mov	r3, r0
 80074b0:	80fb      	strh	r3, [r7, #6]
 80074b2:	88fb      	ldrh	r3, [r7, #6]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d136      	bne.n	8007526 <phNfcLib_Init+0xe2>
                PH_NXPNFCRDLIB_CONFIG_HCE_BUFF_LENGTH));
#endif /* NXPBUILD__PHCE_T4T_SW */

            /* Initialize the discover component */
#ifdef NXPBUILD__PHAC_DISCLOOP_SW
            PH_CHECK_NFCLIB_INIT_FCT(wStatus, phacDiscLoop_Sw_Init(
 80074b8:	4a38      	ldr	r2, [pc, #224]	@ (800759c <phNfcLib_Init+0x158>)
 80074ba:	f44f 719c 	mov.w	r1, #312	@ 0x138
 80074be:	4838      	ldr	r0, [pc, #224]	@ (80075a0 <phNfcLib_Init+0x15c>)
 80074c0:	f000 fc18 	bl	8007cf4 <phacDiscLoop_Sw_Init>
 80074c4:	4603      	mov	r3, r0
 80074c6:	80fb      	strh	r3, [r7, #6]
 80074c8:	88fb      	ldrh	r3, [r7, #6]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d12b      	bne.n	8007526 <phNfcLib_Init+0xe2>
                &gphNfcLib_Params.sDiscLoop,
                (uint16_t)(sizeof(phacDiscLoop_Sw_DataParams_t)),
                &gphNfcLib_Params.sHal));

            /* Assign other layer parameters in discovery loop */
            gphNfcLib_Params.sDiscLoop.pHalDataParams = &gphNfcLib_Params.sHal;
 80074ce:	4b2f      	ldr	r3, [pc, #188]	@ (800758c <phNfcLib_Init+0x148>)
 80074d0:	4a32      	ldr	r2, [pc, #200]	@ (800759c <phNfcLib_Init+0x158>)
 80074d2:	f8c3 2730 	str.w	r2, [r3, #1840]	@ 0x730

#ifdef NXPBUILD__PHPAL_I14443P3A_SW
            gphNfcLib_Params.sDiscLoop.pPal1443p3aDataParams = &gphNfcLib_Params.spalI14443p3a;
 80074d6:	4b2d      	ldr	r3, [pc, #180]	@ (800758c <phNfcLib_Init+0x148>)
 80074d8:	4a32      	ldr	r2, [pc, #200]	@ (80075a4 <phNfcLib_Init+0x160>)
 80074da:	f8c3 2734 	str.w	r2, [r3, #1844]	@ 0x734
#endif /* NXPBUILD__PHPAL_I14443P3A_SW */

#ifdef NXPBUILD__PHPAL_I14443P3B_SW
            gphNfcLib_Params.sDiscLoop.pPal1443p3bDataParams = &gphNfcLib_Params.spalI14443p3b;
 80074de:	4b2b      	ldr	r3, [pc, #172]	@ (800758c <phNfcLib_Init+0x148>)
 80074e0:	4a31      	ldr	r2, [pc, #196]	@ (80075a8 <phNfcLib_Init+0x164>)
 80074e2:	f8c3 273c 	str.w	r2, [r3, #1852]	@ 0x73c
#endif /* NXPBUILD__PHPAL_I14443P3B_SW */

#ifdef NXPBUILD__PHPAL_I14443P4A_SW
            gphNfcLib_Params.sDiscLoop.pPal1443p4aDataParams = &gphNfcLib_Params.spalI14443p4a;
 80074e6:	4b29      	ldr	r3, [pc, #164]	@ (800758c <phNfcLib_Init+0x148>)
 80074e8:	4a30      	ldr	r2, [pc, #192]	@ (80075ac <phNfcLib_Init+0x168>)
 80074ea:	f8c3 2744 	str.w	r2, [r3, #1860]	@ 0x744
#endif /* NXPBUILD__PHPAL_I14443P4A_SW */

#ifdef NXPBUILD__PHPAL_I14443P4_SW
            gphNfcLib_Params.sDiscLoop.pPal14443p4DataParams = &gphNfcLib_Params.spalI14443p4;
 80074ee:	4b27      	ldr	r3, [pc, #156]	@ (800758c <phNfcLib_Init+0x148>)
 80074f0:	4a2f      	ldr	r2, [pc, #188]	@ (80075b0 <phNfcLib_Init+0x16c>)
 80074f2:	f8c3 2740 	str.w	r2, [r3, #1856]	@ 0x740
#endif /* NXPBUILD__PHPAL_I14443P4_SW */

#ifdef NXPBUILD__PHPAL_FELICA_SW
            gphNfcLib_Params.sDiscLoop.pPalFelicaDataParams = &gphNfcLib_Params.spalFelica;
 80074f6:	4b25      	ldr	r3, [pc, #148]	@ (800758c <phNfcLib_Init+0x148>)
 80074f8:	4a2e      	ldr	r2, [pc, #184]	@ (80075b4 <phNfcLib_Init+0x170>)
 80074fa:	f8c3 2738 	str.w	r2, [r3, #1848]	@ 0x738
#endif /* NXPBUILD__PHPAL_FELICA_SW */

#ifdef NXPBUILD__PHPAL_SLI15693_SW
            gphNfcLib_Params.sDiscLoop.pPalSli15693DataParams = &gphNfcLib_Params.spalSli15693;
 80074fe:	4b23      	ldr	r3, [pc, #140]	@ (800758c <phNfcLib_Init+0x148>)
 8007500:	4a2d      	ldr	r2, [pc, #180]	@ (80075b8 <phNfcLib_Init+0x174>)
 8007502:	f8c3 2748 	str.w	r2, [r3, #1864]	@ 0x748
#endif /* NXPBUILD__PHPAL_SLI15693_SW */

#ifdef NXPBUILD__PHPAL_I18092MPI_SW
            gphNfcLib_Params.sDiscLoop.pPal18092mPIDataParams = &gphNfcLib_Params.spalI18092mPI;
 8007506:	4b21      	ldr	r3, [pc, #132]	@ (800758c <phNfcLib_Init+0x148>)
 8007508:	4a2c      	ldr	r2, [pc, #176]	@ (80075bc <phNfcLib_Init+0x178>)
 800750a:	f8c3 2754 	str.w	r2, [r3, #1876]	@ 0x754
#endif /* NXPBUILD__PHPAL_I18092MPI_SW */

#ifdef NXPBUILD__PHPAL_I18000P3M3_SW
            gphNfcLib_Params.sDiscLoop.pPal18000p3m3DataParams = &gphNfcLib_Params.spalI18000p3m3;
 800750e:	4b1f      	ldr	r3, [pc, #124]	@ (800758c <phNfcLib_Init+0x148>)
 8007510:	4a2b      	ldr	r2, [pc, #172]	@ (80075c0 <phNfcLib_Init+0x17c>)
 8007512:	f8c3 274c 	str.w	r2, [r3, #1868]	@ 0x74c
#endif /* NXPBUILD__PHPAL_I18000P3M3_SW */

#ifdef NXPBUILD__PHAL_I18000P3M3_SW
            gphNfcLib_Params.sDiscLoop.pAl18000p3m3DataParams = &gphNfcLib_Params.salI18000p3m3;
 8007516:	4b1d      	ldr	r3, [pc, #116]	@ (800758c <phNfcLib_Init+0x148>)
 8007518:	4a2a      	ldr	r2, [pc, #168]	@ (80075c4 <phNfcLib_Init+0x180>)
 800751a:	f8c3 2750 	str.w	r2, [r3, #1872]	@ 0x750
#endif /* NXPBUILD__PHAL_I18000P3M3_SW */

#ifdef NXPBUILD__PHAL_T1T_SW
            gphNfcLib_Params.sDiscLoop.pAlT1TDataParams = &gphNfcLib_Params.salT1T;
 800751e:	4b1b      	ldr	r3, [pc, #108]	@ (800758c <phNfcLib_Init+0x148>)
 8007520:	4a29      	ldr	r2, [pc, #164]	@ (80075c8 <phNfcLib_Init+0x184>)
 8007522:	f8c3 2758 	str.w	r2, [r3, #1880]	@ 0x758
#endif /* NXPBUILD__PHAL_T1T_SW */
#endif /* NXPBUILD__PHAC_DISCLOOP_SW */

        }while(FALSE);

        if(wStatus != PH_ERR_SUCCESS)
 8007526:	88fb      	ldrh	r3, [r7, #6]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d002      	beq.n	8007532 <phNfcLib_Init+0xee>
        {
            dwStatus = PH_NFCLIB_STATUS_INTERNAL_ERROR;
 800752c:	2310      	movs	r3, #16
 800752e:	603b      	str	r3, [r7, #0]
 8007530:	e025      	b.n	800757e <phNfcLib_Init+0x13a>
        }
        else
        {
            gphNfcLib_State.bNfcLibState      = eNfcLib_InitializedState;
 8007532:	4b15      	ldr	r3, [pc, #84]	@ (8007588 <phNfcLib_Init+0x144>)
 8007534:	2201      	movs	r2, #1
 8007536:	701a      	strb	r2, [r3, #0]
            gphNfcLib_State.bProfileSelected  = PH_NFCLIB_ACTIVATION_PROFILE_NFC;
 8007538:	4b13      	ldr	r3, [pc, #76]	@ (8007588 <phNfcLib_Init+0x144>)
 800753a:	2200      	movs	r2, #0
 800753c:	705a      	strb	r2, [r3, #1]
            gphNfcLib_State.wConfiguredRFTech = PH_NFCLIB_TECHNOLOGY_DEFAULT;
 800753e:	4b12      	ldr	r3, [pc, #72]	@ (8007588 <phNfcLib_Init+0x144>)
 8007540:	2200      	movs	r2, #0
 8007542:	811a      	strh	r2, [r3, #8]
            gphNfcLib_State.bActivateBlocking = PH_NFCLIB_ACTIVATION_BLOCKINGMODE_DEFAULT;
 8007544:	4b10      	ldr	r3, [pc, #64]	@ (8007588 <phNfcLib_Init+0x144>)
 8007546:	2201      	movs	r2, #1
 8007548:	709a      	strb	r2, [r3, #2]
            gphNfcLib_State.bDeactBlocking    = PH_NFCLIB_DEACTIVATION_BLOCKINGMODE_DEFAULT;
 800754a:	4b0f      	ldr	r3, [pc, #60]	@ (8007588 <phNfcLib_Init+0x144>)
 800754c:	2201      	movs	r2, #1
 800754e:	70da      	strb	r2, [r3, #3]
            gphNfcLib_State.bLPCDState        = PH_OFF;
 8007550:	4b0d      	ldr	r3, [pc, #52]	@ (8007588 <phNfcLib_Init+0x144>)
 8007552:	2200      	movs	r2, #0
 8007554:	715a      	strb	r2, [r3, #5]
            gphNfcLib_State.bTxState          = PH_NFCLIB_INT_TRANSMIT_OFF;
 8007556:	4b0c      	ldr	r3, [pc, #48]	@ (8007588 <phNfcLib_Init+0x144>)
 8007558:	2200      	movs	r2, #0
 800755a:	719a      	strb	r2, [r3, #6]
            gphNfcLib_State.bMergedSakPrio    = PH_NFCLIB_ACTIVATION_MERGED_SAK_PRIO_14443;
 800755c:	4b0a      	ldr	r3, [pc, #40]	@ (8007588 <phNfcLib_Init+0x144>)
 800755e:	2200      	movs	r2, #0
 8007560:	711a      	strb	r2, [r3, #4]
            gphNfcLib_State.bAuthMode         = PH_NFCLIB_MFDF_NOT_AUTHENTICATED;
 8007562:	4b09      	ldr	r3, [pc, #36]	@ (8007588 <phNfcLib_Init+0x144>)
 8007564:	22ff      	movs	r2, #255	@ 0xff
 8007566:	f883 239d 	strb.w	r2, [r3, #925]	@ 0x39d
            gphNfcLib_Params.pNfcLib_ErrCallbck = NULL;
 800756a:	4b08      	ldr	r3, [pc, #32]	@ (800758c <phNfcLib_Init+0x148>)
 800756c:	2200      	movs	r2, #0
 800756e:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
            gphNfcLib_State.bFsdi             = PH_NXPNFCRDLIB_CONFIG_FSDI_VALUE;
 8007572:	4b05      	ldr	r3, [pc, #20]	@ (8007588 <phNfcLib_Init+0x144>)
 8007574:	2208      	movs	r2, #8
 8007576:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

            dwStatus = PH_NFCLIB_STATUS_SUCCESS;
 800757a:	2300      	movs	r3, #0
 800757c:	603b      	str	r3, [r7, #0]
        }
    }

    return dwStatus;
 800757e:	683b      	ldr	r3, [r7, #0]
}
 8007580:	4618      	mov	r0, r3
 8007582:	3708      	adds	r7, #8
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}
 8007588:	20001204 	.word	0x20001204
 800758c:	200008e4 	.word	0x200008e4
 8007590:	20001348 	.word	0x20001348
 8007594:	2000121c 	.word	0x2000121c
 8007598:	20000a80 	.word	0x20000a80
 800759c:	200008ec 	.word	0x200008ec
 80075a0:	20000fec 	.word	0x20000fec
 80075a4:	20000a9c 	.word	0x20000a9c
 80075a8:	20000ab4 	.word	0x20000ab4
 80075ac:	20000ae0 	.word	0x20000ae0
 80075b0:	20000af4 	.word	0x20000af4
 80075b4:	20000b30 	.word	0x20000b30
 80075b8:	20000b08 	.word	0x20000b08
 80075bc:	20000b50 	.word	0x20000b50
 80075c0:	20000b24 	.word	0x20000b24
 80075c4:	20000c08 	.word	0x20000c08
 80075c8:	20000f5c 	.word	0x20000f5c

080075cc <phNfcLib_GetDataParams>:
}

void* phNfcLib_GetDataParams(
                             uint16_t wComponent
                             )
{
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	4603      	mov	r3, r0
 80075d4:	80fb      	strh	r3, [r7, #6]
    void * pDataparam = NULL;
 80075d6:	2300      	movs	r3, #0
 80075d8:	60fb      	str	r3, [r7, #12]

    if (((phNfcLib_StateMachine_t)gphNfcLib_State.bNfcLibState) != eNfcLib_ResetState)
 80075da:	4b9a      	ldr	r3, [pc, #616]	@ (8007844 <phNfcLib_GetDataParams+0x278>)
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	f000 8129 	beq.w	8007836 <phNfcLib_GetDataParams+0x26a>
    {
        switch(wComponent & PH_COMP_MASK)
 80075e4:	88fb      	ldrh	r3, [r7, #6]
 80075e6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80075ea:	f5b3 4f65 	cmp.w	r3, #58624	@ 0xe500
 80075ee:	f000 811e 	beq.w	800782e <phNfcLib_GetDataParams+0x262>
 80075f2:	f5b3 4f65 	cmp.w	r3, #58624	@ 0xe500
 80075f6:	f300 811d 	bgt.w	8007834 <phNfcLib_GetDataParams+0x268>
 80075fa:	f5b3 4f64 	cmp.w	r3, #58368	@ 0xe400
 80075fe:	f000 8113 	beq.w	8007828 <phNfcLib_GetDataParams+0x25c>
 8007602:	f5b3 4f64 	cmp.w	r3, #58368	@ 0xe400
 8007606:	f300 8115 	bgt.w	8007834 <phNfcLib_GetDataParams+0x268>
 800760a:	f5b3 4f62 	cmp.w	r3, #57856	@ 0xe200
 800760e:	f000 8105 	beq.w	800781c <phNfcLib_GetDataParams+0x250>
 8007612:	f5b3 4f62 	cmp.w	r3, #57856	@ 0xe200
 8007616:	f300 810d 	bgt.w	8007834 <phNfcLib_GetDataParams+0x268>
 800761a:	f5b3 4f61 	cmp.w	r3, #57600	@ 0xe100
 800761e:	f000 8100 	beq.w	8007822 <phNfcLib_GetDataParams+0x256>
 8007622:	f5b3 4f61 	cmp.w	r3, #57600	@ 0xe100
 8007626:	f300 8105 	bgt.w	8007834 <phNfcLib_GetDataParams+0x268>
 800762a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800762e:	f000 80f2 	beq.w	8007816 <phNfcLib_GetDataParams+0x24a>
 8007632:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007636:	f300 80fd 	bgt.w	8007834 <phNfcLib_GetDataParams+0x268>
 800763a:	f5b3 5f18 	cmp.w	r3, #9728	@ 0x2600
 800763e:	f000 80d5 	beq.w	80077ec <phNfcLib_GetDataParams+0x220>
 8007642:	f5b3 5f18 	cmp.w	r3, #9728	@ 0x2600
 8007646:	f300 80f5 	bgt.w	8007834 <phNfcLib_GetDataParams+0x268>
 800764a:	f5b3 5f0c 	cmp.w	r3, #8960	@ 0x2300
 800764e:	f000 80c7 	beq.w	80077e0 <phNfcLib_GetDataParams+0x214>
 8007652:	f5b3 5f0c 	cmp.w	r3, #8960	@ 0x2300
 8007656:	f300 80ed 	bgt.w	8007834 <phNfcLib_GetDataParams+0x268>
 800765a:	f5b3 5f04 	cmp.w	r3, #8448	@ 0x2100
 800765e:	f000 80c2 	beq.w	80077e6 <phNfcLib_GetDataParams+0x21a>
 8007662:	f5b3 5f04 	cmp.w	r3, #8448	@ 0x2100
 8007666:	f300 80e5 	bgt.w	8007834 <phNfcLib_GetDataParams+0x268>
 800766a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800766e:	f000 80b4 	beq.w	80077da <phNfcLib_GetDataParams+0x20e>
 8007672:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007676:	f300 80dd 	bgt.w	8007834 <phNfcLib_GetDataParams+0x268>
 800767a:	f5b3 5fe8 	cmp.w	r3, #7424	@ 0x1d00
 800767e:	f000 80c4 	beq.w	800780a <phNfcLib_GetDataParams+0x23e>
 8007682:	f5b3 5fe8 	cmp.w	r3, #7424	@ 0x1d00
 8007686:	f300 80d5 	bgt.w	8007834 <phNfcLib_GetDataParams+0x268>
 800768a:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 800768e:	f000 80b9 	beq.w	8007804 <phNfcLib_GetDataParams+0x238>
 8007692:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 8007696:	f300 80cd 	bgt.w	8007834 <phNfcLib_GetDataParams+0x268>
 800769a:	f5b3 5fc8 	cmp.w	r3, #6400	@ 0x1900
 800769e:	f000 8099 	beq.w	80077d4 <phNfcLib_GetDataParams+0x208>
 80076a2:	f5b3 5fc8 	cmp.w	r3, #6400	@ 0x1900
 80076a6:	f300 80c5 	bgt.w	8007834 <phNfcLib_GetDataParams+0x268>
 80076aa:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 80076ae:	f000 80af 	beq.w	8007810 <phNfcLib_GetDataParams+0x244>
 80076b2:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 80076b6:	f300 80bd 	bgt.w	8007834 <phNfcLib_GetDataParams+0x268>
 80076ba:	f5b3 5fa8 	cmp.w	r3, #5376	@ 0x1500
 80076be:	f000 809e 	beq.w	80077fe <phNfcLib_GetDataParams+0x232>
 80076c2:	f5b3 5fa8 	cmp.w	r3, #5376	@ 0x1500
 80076c6:	f300 80b5 	bgt.w	8007834 <phNfcLib_GetDataParams+0x268>
 80076ca:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80076ce:	f000 8093 	beq.w	80077f8 <phNfcLib_GetDataParams+0x22c>
 80076d2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80076d6:	f300 80ad 	bgt.w	8007834 <phNfcLib_GetDataParams+0x268>
 80076da:	f5b3 5f88 	cmp.w	r3, #4352	@ 0x1100
 80076de:	f000 8088 	beq.w	80077f2 <phNfcLib_GetDataParams+0x226>
 80076e2:	f5b3 5f88 	cmp.w	r3, #4352	@ 0x1100
 80076e6:	f300 80a5 	bgt.w	8007834 <phNfcLib_GetDataParams+0x268>
 80076ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076ee:	d06e      	beq.n	80077ce <phNfcLib_GetDataParams+0x202>
 80076f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076f4:	f300 809e 	bgt.w	8007834 <phNfcLib_GetDataParams+0x268>
 80076f8:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80076fc:	d064      	beq.n	80077c8 <phNfcLib_GetDataParams+0x1fc>
 80076fe:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007702:	f300 8097 	bgt.w	8007834 <phNfcLib_GetDataParams+0x268>
 8007706:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 800770a:	d05a      	beq.n	80077c2 <phNfcLib_GetDataParams+0x1f6>
 800770c:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 8007710:	f300 8090 	bgt.w	8007834 <phNfcLib_GetDataParams+0x268>
 8007714:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007718:	d04d      	beq.n	80077b6 <phNfcLib_GetDataParams+0x1ea>
 800771a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800771e:	f300 8089 	bgt.w	8007834 <phNfcLib_GetDataParams+0x268>
 8007722:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 8007726:	d043      	beq.n	80077b0 <phNfcLib_GetDataParams+0x1e4>
 8007728:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 800772c:	f300 8082 	bgt.w	8007834 <phNfcLib_GetDataParams+0x268>
 8007730:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007734:	d039      	beq.n	80077aa <phNfcLib_GetDataParams+0x1de>
 8007736:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800773a:	dc7b      	bgt.n	8007834 <phNfcLib_GetDataParams+0x268>
 800773c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007740:	d03c      	beq.n	80077bc <phNfcLib_GetDataParams+0x1f0>
 8007742:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007746:	dc75      	bgt.n	8007834 <phNfcLib_GetDataParams+0x268>
 8007748:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800774c:	d02a      	beq.n	80077a4 <phNfcLib_GetDataParams+0x1d8>
 800774e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007752:	dc6f      	bgt.n	8007834 <phNfcLib_GetDataParams+0x268>
 8007754:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007758:	d021      	beq.n	800779e <phNfcLib_GetDataParams+0x1d2>
 800775a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800775e:	dc69      	bgt.n	8007834 <phNfcLib_GetDataParams+0x268>
 8007760:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007764:	d018      	beq.n	8007798 <phNfcLib_GetDataParams+0x1cc>
 8007766:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800776a:	dc63      	bgt.n	8007834 <phNfcLib_GetDataParams+0x268>
 800776c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007770:	d00f      	beq.n	8007792 <phNfcLib_GetDataParams+0x1c6>
 8007772:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007776:	dc5d      	bgt.n	8007834 <phNfcLib_GetDataParams+0x268>
 8007778:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800777c:	d003      	beq.n	8007786 <phNfcLib_GetDataParams+0x1ba>
 800777e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007782:	d003      	beq.n	800778c <phNfcLib_GetDataParams+0x1c0>
#endif /* defined (NXPBUILD__PHAL_MFPEVX_SW) || defined (NXPBUILD__PHAL_MFDFEVX_SW) || defined(NXPBUILD__PHAL_MFDFLIGHT_SW) ||   \
    defined (NXPBUILD__PHAL_MFDFEVX_SAM_NONX) || defined (NXPBUILD__PHAL_MFPEVX_SAM_NONX) || defined(NXPBUILD__PHAL_MFDUOX_SW)*/

        default:
            /* Do nothing. pDataparam is already null. */
            break;
 8007784:	e056      	b.n	8007834 <phNfcLib_GetDataParams+0x268>
            pDataparam = (void *) &gphNfcLib_Params.sHal;
 8007786:	4b30      	ldr	r3, [pc, #192]	@ (8007848 <phNfcLib_GetDataParams+0x27c>)
 8007788:	60fb      	str	r3, [r7, #12]
            break;
 800778a:	e054      	b.n	8007836 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.spalI14443p3a;
 800778c:	4b2f      	ldr	r3, [pc, #188]	@ (800784c <phNfcLib_GetDataParams+0x280>)
 800778e:	60fb      	str	r3, [r7, #12]
            break;
 8007790:	e051      	b.n	8007836 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.spalI14443p3b;
 8007792:	4b2f      	ldr	r3, [pc, #188]	@ (8007850 <phNfcLib_GetDataParams+0x284>)
 8007794:	60fb      	str	r3, [r7, #12]
            break;
 8007796:	e04e      	b.n	8007836 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.spalI14443p4a;
 8007798:	4b2e      	ldr	r3, [pc, #184]	@ (8007854 <phNfcLib_GetDataParams+0x288>)
 800779a:	60fb      	str	r3, [r7, #12]
            break;
 800779c:	e04b      	b.n	8007836 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.spalI14443p4;
 800779e:	4b2e      	ldr	r3, [pc, #184]	@ (8007858 <phNfcLib_GetDataParams+0x28c>)
 80077a0:	60fb      	str	r3, [r7, #12]
            break;
 80077a2:	e048      	b.n	8007836 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.spalMifare;
 80077a4:	4b2d      	ldr	r3, [pc, #180]	@ (800785c <phNfcLib_GetDataParams+0x290>)
 80077a6:	60fb      	str	r3, [r7, #12]
            break;
 80077a8:	e045      	b.n	8007836 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.spalSli15693;
 80077aa:	4b2d      	ldr	r3, [pc, #180]	@ (8007860 <phNfcLib_GetDataParams+0x294>)
 80077ac:	60fb      	str	r3, [r7, #12]
            break;
 80077ae:	e042      	b.n	8007836 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.spalI18000p3m3;
 80077b0:	4b2c      	ldr	r3, [pc, #176]	@ (8007864 <phNfcLib_GetDataParams+0x298>)
 80077b2:	60fb      	str	r3, [r7, #12]
            break;
 80077b4:	e03f      	b.n	8007836 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.spalI18092mPI;
 80077b6:	4b2c      	ldr	r3, [pc, #176]	@ (8007868 <phNfcLib_GetDataParams+0x29c>)
 80077b8:	60fb      	str	r3, [r7, #12]
            break;
 80077ba:	e03c      	b.n	8007836 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.spalFelica;
 80077bc:	4b2b      	ldr	r3, [pc, #172]	@ (800786c <phNfcLib_GetDataParams+0x2a0>)
 80077be:	60fb      	str	r3, [r7, #12]
            break;
 80077c0:	e039      	b.n	8007836 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.spalI18092mT;
 80077c2:	4b2b      	ldr	r3, [pc, #172]	@ (8007870 <phNfcLib_GetDataParams+0x2a4>)
 80077c4:	60fb      	str	r3, [r7, #12]
            break;
 80077c6:	e036      	b.n	8007836 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.spalI14443p4mC;
 80077c8:	4b2a      	ldr	r3, [pc, #168]	@ (8007874 <phNfcLib_GetDataParams+0x2a8>)
 80077ca:	60fb      	str	r3, [r7, #12]
            break;
 80077cc:	e033      	b.n	8007836 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salMFC;
 80077ce:	4b2a      	ldr	r3, [pc, #168]	@ (8007878 <phNfcLib_GetDataParams+0x2ac>)
 80077d0:	60fb      	str	r3, [r7, #12]
            break;
 80077d2:	e030      	b.n	8007836 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salMFDF;
 80077d4:	4b29      	ldr	r3, [pc, #164]	@ (800787c <phNfcLib_GetDataParams+0x2b0>)
 80077d6:	60fb      	str	r3, [r7, #12]
            break;
 80077d8:	e02d      	b.n	8007836 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salMFDFEVx;
 80077da:	4b29      	ldr	r3, [pc, #164]	@ (8007880 <phNfcLib_GetDataParams+0x2b4>)
 80077dc:	60fb      	str	r3, [r7, #12]
            break;
 80077de:	e02a      	b.n	8007836 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salMFDFLight;
 80077e0:	4b28      	ldr	r3, [pc, #160]	@ (8007884 <phNfcLib_GetDataParams+0x2b8>)
 80077e2:	60fb      	str	r3, [r7, #12]
            break;
 80077e4:	e027      	b.n	8007836 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salMFPEVx;
 80077e6:	4b28      	ldr	r3, [pc, #160]	@ (8007888 <phNfcLib_GetDataParams+0x2bc>)
 80077e8:	60fb      	str	r3, [r7, #12]
            break;
 80077ea:	e024      	b.n	8007836 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salMFNtag42XDNA;
 80077ec:	4b27      	ldr	r3, [pc, #156]	@ (800788c <phNfcLib_GetDataParams+0x2c0>)
 80077ee:	60fb      	str	r3, [r7, #12]
            break;
 80077f0:	e021      	b.n	8007836 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salMFUL;
 80077f2:	4b27      	ldr	r3, [pc, #156]	@ (8007890 <phNfcLib_GetDataParams+0x2c4>)
 80077f4:	60fb      	str	r3, [r7, #12]
            break;
 80077f6:	e01e      	b.n	8007836 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salFelica;
 80077f8:	4b26      	ldr	r3, [pc, #152]	@ (8007894 <phNfcLib_GetDataParams+0x2c8>)
 80077fa:	60fb      	str	r3, [r7, #12]
            break;
 80077fc:	e01b      	b.n	8007836 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salICode;
 80077fe:	4b26      	ldr	r3, [pc, #152]	@ (8007898 <phNfcLib_GetDataParams+0x2cc>)
 8007800:	60fb      	str	r3, [r7, #12]
            break;
 8007802:	e018      	b.n	8007836 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salT1T;
 8007804:	4b25      	ldr	r3, [pc, #148]	@ (800789c <phNfcLib_GetDataParams+0x2d0>)
 8007806:	60fb      	str	r3, [r7, #12]
            break;
 8007808:	e015      	b.n	8007836 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salTop;
 800780a:	4b25      	ldr	r3, [pc, #148]	@ (80078a0 <phNfcLib_GetDataParams+0x2d4>)
 800780c:	60fb      	str	r3, [r7, #12]
            break;
 800780e:	e012      	b.n	8007836 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salI18000p3m3;
 8007810:	4b24      	ldr	r3, [pc, #144]	@ (80078a4 <phNfcLib_GetDataParams+0x2d8>)
 8007812:	60fb      	str	r3, [r7, #12]
            break;
 8007814:	e00f      	b.n	8007836 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.sDiscLoop;
 8007816:	4b24      	ldr	r3, [pc, #144]	@ (80078a8 <phNfcLib_GetDataParams+0x2dc>)
 8007818:	60fb      	str	r3, [r7, #12]
            break;
 800781a:	e00c      	b.n	8007836 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) PTR_sKeyStore;
 800781c:	4b23      	ldr	r3, [pc, #140]	@ (80078ac <phNfcLib_GetDataParams+0x2e0>)
 800781e:	60fb      	str	r3, [r7, #12]
            break;
 8007820:	e009      	b.n	8007836 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) PTR_sCryptoSym;
 8007822:	2300      	movs	r3, #0
 8007824:	60fb      	str	r3, [r7, #12]
            break;
 8007826:	e006      	b.n	8007836 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) PTR_sCryptoRng;
 8007828:	4b21      	ldr	r3, [pc, #132]	@ (80078b0 <phNfcLib_GetDataParams+0x2e4>)
 800782a:	60fb      	str	r3, [r7, #12]
            break;
 800782c:	e003      	b.n	8007836 <phNfcLib_GetDataParams+0x26a>
            pDataparam = &sTMI;
 800782e:	4b21      	ldr	r3, [pc, #132]	@ (80078b4 <phNfcLib_GetDataParams+0x2e8>)
 8007830:	60fb      	str	r3, [r7, #12]
            break;
 8007832:	e000      	b.n	8007836 <phNfcLib_GetDataParams+0x26a>
            break;
 8007834:	bf00      	nop
        }
    }
    return pDataparam;
 8007836:	68fb      	ldr	r3, [r7, #12]
}
 8007838:	4618      	mov	r0, r3
 800783a:	3714      	adds	r7, #20
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr
 8007844:	20001204 	.word	0x20001204
 8007848:	200008ec 	.word	0x200008ec
 800784c:	20000a9c 	.word	0x20000a9c
 8007850:	20000ab4 	.word	0x20000ab4
 8007854:	20000ae0 	.word	0x20000ae0
 8007858:	20000af4 	.word	0x20000af4
 800785c:	20000bfc 	.word	0x20000bfc
 8007860:	20000b08 	.word	0x20000b08
 8007864:	20000b24 	.word	0x20000b24
 8007868:	20000b50 	.word	0x20000b50
 800786c:	20000b30 	.word	0x20000b30
 8007870:	20000b74 	.word	0x20000b74
 8007874:	20000bc4 	.word	0x20000bc4
 8007878:	20000c40 	.word	0x20000c40
 800787c:	20000c4c 	.word	0x20000c4c
 8007880:	20000cb4 	.word	0x20000cb4
 8007884:	20000d68 	.word	0x20000d68
 8007888:	20000e14 	.word	0x20000e14
 800788c:	20000eb4 	.word	0x20000eb4
 8007890:	20000e98 	.word	0x20000e98
 8007894:	20000c14 	.word	0x20000c14
 8007898:	20000c20 	.word	0x20000c20
 800789c:	20000f5c 	.word	0x20000f5c
 80078a0:	20000f6c 	.word	0x20000f6c
 80078a4:	20000c08 	.word	0x20000c08
 80078a8:	20000fec 	.word	0x20000fec
 80078ac:	20000a80 	.word	0x20000a80
 80078b0:	200011e4 	.word	0x200011e4
 80078b4:	20001944 	.word	0x20001944

080078b8 <phTMIUtils_Init>:
phStatus_t phTMIUtils_Init(
                           phTMIUtils_t * pDataParams,
                           uint8_t * pTMIBuffer,
                           uint32_t dwBufLen
                           )
{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	607a      	str	r2, [r7, #4]
    PH_ASSERT_NULL (pDataParams);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d101      	bne.n	80078ce <phTMIUtils_Init+0x16>
 80078ca:	2321      	movs	r3, #33	@ 0x21
 80078cc:	e018      	b.n	8007900 <phTMIUtils_Init+0x48>
    /* Check parameters */
    if ((pTMIBuffer == NULL) || (dwBufLen == 0U))
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d002      	beq.n	80078da <phTMIUtils_Init+0x22>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d102      	bne.n	80078e0 <phTMIUtils_Init+0x28>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_TMIUTILS);
 80078da:	f24e 5321 	movw	r3, #58657	@ 0xe521
 80078de:	e00f      	b.n	8007900 <phTMIUtils_Init+0x48>
    }
    pDataParams->pTMIBuffer = pTMIBuffer;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	68ba      	ldr	r2, [r7, #8]
 80078e4:	601a      	str	r2, [r3, #0]
    pDataParams->dwTMIBufLen = dwBufLen;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	605a      	str	r2, [r3, #4]
    pDataParams->dwTMIbufIndex = 0;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2200      	movs	r2, #0
 80078f0:	609a      	str	r2, [r3, #8]
    pDataParams->bTMIStatus = PH_OFF;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2200      	movs	r2, #0
 80078f6:	731a      	strb	r2, [r3, #12]
    pDataParams->dwOffsetInTMI = 0;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2200      	movs	r2, #0
 80078fc:	611a      	str	r2, [r3, #16]

    return PH_ERR_SUCCESS;
 80078fe:	2300      	movs	r3, #0
}
 8007900:	4618      	mov	r0, r3
 8007902:	3714      	adds	r7, #20
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <phTMIUtils_ActivateTMICollection>:

phStatus_t phTMIUtils_ActivateTMICollection(
    phTMIUtils_t *pDataParams,
    uint8_t bOption
    )
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	460b      	mov	r3, r1
 8007916:	70fb      	strb	r3, [r7, #3]
    if ((pDataParams == NULL) || (pDataParams->dwTMIBufLen == 0U))
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d003      	beq.n	8007926 <phTMIUtils_ActivateTMICollection+0x1a>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d102      	bne.n	800792c <phTMIUtils_ActivateTMICollection+0x20>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_TMIUTILS);
 8007926:	f24e 5321 	movw	r3, #58657	@ 0xe521
 800792a:	e02c      	b.n	8007986 <phTMIUtils_ActivateTMICollection+0x7a>
    }

    switch (bOption)
 800792c:	78fb      	ldrb	r3, [r7, #3]
 800792e:	2b04      	cmp	r3, #4
 8007930:	d825      	bhi.n	800797e <phTMIUtils_ActivateTMICollection+0x72>
 8007932:	a201      	add	r2, pc, #4	@ (adr r2, 8007938 <phTMIUtils_ActivateTMICollection+0x2c>)
 8007934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007938:	0800794d 	.word	0x0800794d
 800793c:	08007961 	.word	0x08007961
 8007940:	08007969 	.word	0x08007969
 8007944:	08007961 	.word	0x08007961
 8007948:	08007971 	.word	0x08007971
    {
    case PH_TMIUTILS_DEACTIVATE_TMI:

        /* Deactivate TMI Collection */
        pDataParams->dwTMIBufLen = 0;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	605a      	str	r2, [r3, #4]
        pDataParams->dwOffsetInTMI = 0;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	611a      	str	r2, [r3, #16]
        pDataParams->bTMIStatus = PH_OFF;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	731a      	strb	r2, [r3, #12]
        break;
 800795e:	e011      	b.n	8007984 <phTMIUtils_ActivateTMICollection+0x78>

    case PH_TMIUTILS_ACTIVATE_TMI:
    case PH_TMIUTILS_RESUME_TMI:

        /* Activate/Resume TMI collection */
        pDataParams->bTMIStatus = PH_ON;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	731a      	strb	r2, [r3, #12]
        break;
 8007966:	e00d      	b.n	8007984 <phTMIUtils_ActivateTMICollection+0x78>

    case PH_TMIUTILS_PAUSE_TMI:

        /* Pause TMI collection */
        pDataParams->bTMIStatus = PH_OFF;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	731a      	strb	r2, [r3, #12]
        break;
 800796e:	e009      	b.n	8007984 <phTMIUtils_ActivateTMICollection+0x78>

    case PH_TMIUTILS_RESET_TMI:

        /* Reset TMI collection buffer index to 0 */
        pDataParams->dwTMIbufIndex = 0;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	609a      	str	r2, [r3, #8]
        pDataParams->dwOffsetInTMI = 0;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	611a      	str	r2, [r3, #16]
        break;
 800797c:	e002      	b.n	8007984 <phTMIUtils_ActivateTMICollection+0x78>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_TMIUTILS);
 800797e:	f24e 5321 	movw	r3, #58657	@ 0xe521
 8007982:	e000      	b.n	8007986 <phTMIUtils_ActivateTMICollection+0x7a>

    }
    return PH_ERR_SUCCESS;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	370c      	adds	r7, #12
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop

08007994 <phTools_DecodeParity>:
                                uint16_t wOutBufferSize,
                                uint8_t * pOutBuffer,
                                uint16_t * pOutBufferLength,
                                uint8_t * pOutBufferBits
                                )
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b086      	sub	sp, #24
 8007998:	af00      	add	r7, sp, #0
 800799a:	6039      	str	r1, [r7, #0]
 800799c:	4611      	mov	r1, r2
 800799e:	461a      	mov	r2, r3
 80079a0:	4603      	mov	r3, r0
 80079a2:	71fb      	strb	r3, [r7, #7]
 80079a4:	460b      	mov	r3, r1
 80079a6:	80bb      	strh	r3, [r7, #4]
 80079a8:	4613      	mov	r3, r2
 80079aa:	71bb      	strb	r3, [r7, #6]
    uint16_t    PH_MEMLOC_REM wDiv;
    uint8_t     PH_MEMLOC_REM bMod;
    uint8_t     PH_MEMLOC_REM bParity;

    /* Parameter check */
    if (((bOption != PH_TOOLS_PARITY_OPTION_EVEN) && (bOption != PH_TOOLS_PARITY_OPTION_ODD)) || (bInBufferBits > 7U))
 80079ac:	79fb      	ldrb	r3, [r7, #7]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d002      	beq.n	80079b8 <phTools_DecodeParity+0x24>
 80079b2:	79fb      	ldrb	r3, [r7, #7]
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d102      	bne.n	80079be <phTools_DecodeParity+0x2a>
 80079b8:	79bb      	ldrb	r3, [r7, #6]
 80079ba:	2b07      	cmp	r3, #7
 80079bc:	d902      	bls.n	80079c4 <phTools_DecodeParity+0x30>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_TOOLS);
 80079be:	f24e 3321 	movw	r3, #58145	@ 0xe321
 80079c2:	e0fa      	b.n	8007bba <phTools_DecodeParity+0x226>
    }

    /* Parameter check */
    if (wInBufferLength == 0U)
 80079c4:	88bb      	ldrh	r3, [r7, #4]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d10d      	bne.n	80079e6 <phTools_DecodeParity+0x52>
    {
        /* Zero input length is simply passed through */
        if (bInBufferBits == 0U)
 80079ca:	79bb      	ldrb	r3, [r7, #6]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d107      	bne.n	80079e0 <phTools_DecodeParity+0x4c>
        {
            (*pOutBufferLength) = 0;
 80079d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079d2:	2200      	movs	r2, #0
 80079d4:	801a      	strh	r2, [r3, #0]
            *pOutBufferBits = 0;
 80079d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079d8:	2200      	movs	r2, #0
 80079da:	701a      	strb	r2, [r3, #0]
            return PH_ERR_SUCCESS;
 80079dc:	2300      	movs	r3, #0
 80079de:	e0ec      	b.n	8007bba <phTools_DecodeParity+0x226>
        }
        /* Invalid parameter */
        else
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_TOOLS);
 80079e0:	f24e 3321 	movw	r3, #58145	@ 0xe321
 80079e4:	e0e9      	b.n	8007bba <phTools_DecodeParity+0x226>
        }
    }

    /* Retrieve DIV and MOD */
    if (bInBufferBits == 0U)
 80079e6:	79bb      	ldrb	r3, [r7, #6]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d111      	bne.n	8007a10 <phTools_DecodeParity+0x7c>
    {
        wDiv = (uint16_t)(wInBufferLength / 9U);
 80079ec:	88bb      	ldrh	r3, [r7, #4]
 80079ee:	4a75      	ldr	r2, [pc, #468]	@ (8007bc4 <phTools_DecodeParity+0x230>)
 80079f0:	fba2 2303 	umull	r2, r3, r2, r3
 80079f4:	085b      	lsrs	r3, r3, #1
 80079f6:	823b      	strh	r3, [r7, #16]
        bMod = (uint8_t)(wInBufferLength % 9U);
 80079f8:	88ba      	ldrh	r2, [r7, #4]
 80079fa:	4b72      	ldr	r3, [pc, #456]	@ (8007bc4 <phTools_DecodeParity+0x230>)
 80079fc:	fba3 1302 	umull	r1, r3, r3, r2
 8007a00:	0859      	lsrs	r1, r3, #1
 8007a02:	460b      	mov	r3, r1
 8007a04:	00db      	lsls	r3, r3, #3
 8007a06:	440b      	add	r3, r1
 8007a08:	1ad3      	subs	r3, r2, r3
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	73fb      	strb	r3, [r7, #15]
 8007a0e:	e012      	b.n	8007a36 <phTools_DecodeParity+0xa2>
    }
    else
    {
        wDiv = (uint16_t)((wInBufferLength - 1U) / 9U);
 8007a10:	88bb      	ldrh	r3, [r7, #4]
 8007a12:	3b01      	subs	r3, #1
 8007a14:	4a6b      	ldr	r2, [pc, #428]	@ (8007bc4 <phTools_DecodeParity+0x230>)
 8007a16:	fba2 2303 	umull	r2, r3, r2, r3
 8007a1a:	085b      	lsrs	r3, r3, #1
 8007a1c:	823b      	strh	r3, [r7, #16]
        bMod = (uint8_t)((wInBufferLength - 1U) % 9U);
 8007a1e:	88bb      	ldrh	r3, [r7, #4]
 8007a20:	1e59      	subs	r1, r3, #1
 8007a22:	4b68      	ldr	r3, [pc, #416]	@ (8007bc4 <phTools_DecodeParity+0x230>)
 8007a24:	fba3 2301 	umull	r2, r3, r3, r1
 8007a28:	085a      	lsrs	r2, r3, #1
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	00db      	lsls	r3, r3, #3
 8007a2e:	4413      	add	r3, r2
 8007a30:	1aca      	subs	r2, r1, r3
 8007a32:	4613      	mov	r3, r2
 8007a34:	73fb      	strb	r3, [r7, #15]
    }

    /* Calculate number of output bytes */
    (*pOutBufferLength) = (uint16_t)((wDiv << 3U) + bMod);
 8007a36:	8a3b      	ldrh	r3, [r7, #16]
 8007a38:	00db      	lsls	r3, r3, #3
 8007a3a:	b29a      	uxth	r2, r3
 8007a3c:	7bfb      	ldrb	r3, [r7, #15]
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	4413      	add	r3, r2
 8007a42:	b29a      	uxth	r2, r3
 8007a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a46:	801a      	strh	r2, [r3, #0]
    if (bMod > bInBufferBits)
 8007a48:	7bfa      	ldrb	r2, [r7, #15]
 8007a4a:	79bb      	ldrb	r3, [r7, #6]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d905      	bls.n	8007a5c <phTools_DecodeParity+0xc8>
    {
        --(*pOutBufferLength);
 8007a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a52:	881b      	ldrh	r3, [r3, #0]
 8007a54:	3b01      	subs	r3, #1
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a5a:	801a      	strh	r2, [r3, #0]
    }

    /* Calculate number of rest-bits of output */
    *pOutBufferBits = (uint8_t)((8U - (((8U + ((*pOutBufferLength) % 8U)) - bInBufferBits) % 8U)) % 8U);
 8007a5c:	79bb      	ldrb	r3, [r7, #6]
 8007a5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a60:	8812      	ldrh	r2, [r2, #0]
 8007a62:	1a9b      	subs	r3, r3, r2
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	f003 0307 	and.w	r3, r3, #7
 8007a6a:	b2da      	uxtb	r2, r3
 8007a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a6e:	701a      	strb	r2, [r3, #0]

    /* Increment output length in case of incomplete byte */
    if (*pOutBufferBits > 0U)
 8007a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d005      	beq.n	8007a84 <phTools_DecodeParity+0xf0>
    {
        ++(*pOutBufferLength);
 8007a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a7a:	881b      	ldrh	r3, [r3, #0]
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	b29a      	uxth	r2, r3
 8007a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a82:	801a      	strh	r2, [r3, #0]
    }

    /* Buffer overflow check*/
    if (wOutBufferSize < (*pOutBufferLength))
 8007a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a86:	881b      	ldrh	r3, [r3, #0]
 8007a88:	8c3a      	ldrh	r2, [r7, #32]
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d205      	bcs.n	8007a9a <phTools_DecodeParity+0x106>
    {
        (*pOutBufferLength) = 0;
 8007a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a90:	2200      	movs	r2, #0
 8007a92:	801a      	strh	r2, [r3, #0]
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_TOOLS);
 8007a94:	f24e 3304 	movw	r3, #58116	@ 0xe304
 8007a98:	e08f      	b.n	8007bba <phTools_DecodeParity+0x226>
    }

    /* Prepare loop vars */
    wByteIndexIn = 0U;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	82fb      	strh	r3, [r7, #22]
    wByteIndexOut = 0U;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	82bb      	strh	r3, [r7, #20]
    bBitPosition = 7U;
 8007aa2:	2307      	movs	r3, #7
 8007aa4:	74fb      	strb	r3, [r7, #19]

    /* Do for each byte */
    for (; wByteIndexOut < (*pOutBufferLength); ++wByteIndexOut, ++wByteIndexIn, --bBitPosition)
 8007aa6:	e068      	b.n	8007b7a <phTools_DecodeParity+0x1e6>
    {
        /* Append source bits to output */
        pOutBuffer[wByteIndexOut] = (uint8_t)(pInBuffer[wByteIndexIn] >> (7U - bBitPosition));
 8007aa8:	8afb      	ldrh	r3, [r7, #22]
 8007aaa:	683a      	ldr	r2, [r7, #0]
 8007aac:	4413      	add	r3, r2
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	7cfb      	ldrb	r3, [r7, #19]
 8007ab4:	f1c3 0307 	rsb	r3, r3, #7
 8007ab8:	fa42 f103 	asr.w	r1, r2, r3
 8007abc:	8abb      	ldrh	r3, [r7, #20]
 8007abe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ac0:	4413      	add	r3, r2
 8007ac2:	b2ca      	uxtb	r2, r1
 8007ac4:	701a      	strb	r2, [r3, #0]

        /* If there is more data bits in the sourcebyte append it to next data byte */
        if ((wByteIndexIn + /* */ 1U) < wInBufferLength)
 8007ac6:	8afb      	ldrh	r3, [r7, #22]
 8007ac8:	1c5a      	adds	r2, r3, #1
 8007aca:	88bb      	ldrh	r3, [r7, #4]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d243      	bcs.n	8007b58 <phTools_DecodeParity+0x1c4>
        {
            /* Append remaining bits to output */
            pOutBuffer[wByteIndexOut] |= (uint8_t)(pInBuffer[wByteIndexIn + 1U] << (1U + bBitPosition));
 8007ad0:	8abb      	ldrh	r3, [r7, #20]
 8007ad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ad4:	4413      	add	r3, r2
 8007ad6:	7819      	ldrb	r1, [r3, #0]
 8007ad8:	8afb      	ldrh	r3, [r7, #22]
 8007ada:	3301      	adds	r3, #1
 8007adc:	683a      	ldr	r2, [r7, #0]
 8007ade:	4413      	add	r3, r2
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	7cfb      	ldrb	r3, [r7, #19]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8007aec:	b2da      	uxtb	r2, r3
 8007aee:	8abb      	ldrh	r3, [r7, #20]
 8007af0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007af2:	4403      	add	r3, r0
 8007af4:	430a      	orrs	r2, r1
 8007af6:	b2d2      	uxtb	r2, r2
 8007af8:	701a      	strb	r2, [r3, #0]

            /* Perform parity checking if this isn't an incomplete byte */
            if ((*pOutBufferBits == 0U)
 8007afa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d005      	beq.n	8007b0e <phTools_DecodeParity+0x17a>
                || ((wByteIndexOut + /* */ 1U) < (*pOutBufferLength)))
 8007b02:	8abb      	ldrh	r3, [r7, #20]
 8007b04:	3301      	adds	r3, #1
 8007b06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b08:	8812      	ldrh	r2, [r2, #0]
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d224      	bcs.n	8007b58 <phTools_DecodeParity+0x1c4>
            {
                bParity = phTools_CalcParity(pOutBuffer[wByteIndexOut], bOption);
 8007b0e:	8abb      	ldrh	r3, [r7, #20]
 8007b10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b12:	4413      	add	r3, r2
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	79fa      	ldrb	r2, [r7, #7]
 8007b18:	4611      	mov	r1, r2
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f000 f854 	bl	8007bc8 <phTools_CalcParity>
 8007b20:	4603      	mov	r3, r0
 8007b22:	73bb      	strb	r3, [r7, #14]
                if ((pInBuffer[wByteIndexIn + 1U] & (uint8_t)(1U << (7U - bBitPosition))) != (bParity << (7U - bBitPosition)))
 8007b24:	8afb      	ldrh	r3, [r7, #22]
 8007b26:	3301      	adds	r3, #1
 8007b28:	683a      	ldr	r2, [r7, #0]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	781a      	ldrb	r2, [r3, #0]
 8007b2e:	7cfb      	ldrb	r3, [r7, #19]
 8007b30:	f1c3 0307 	rsb	r3, r3, #7
 8007b34:	2101      	movs	r1, #1
 8007b36:	fa01 f303 	lsl.w	r3, r1, r3
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	4013      	ands	r3, r2
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	4619      	mov	r1, r3
 8007b42:	7bba      	ldrb	r2, [r7, #14]
 8007b44:	7cfb      	ldrb	r3, [r7, #19]
 8007b46:	f1c3 0307 	rsb	r3, r3, #7
 8007b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b4e:	4299      	cmp	r1, r3
 8007b50:	d002      	beq.n	8007b58 <phTools_DecodeParity+0x1c4>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INTEGRITY_ERROR, PH_COMP_TOOLS);
 8007b52:	f24e 3302 	movw	r3, #58114	@ 0xe302
 8007b56:	e030      	b.n	8007bba <phTools_DecodeParity+0x226>
                }
            }
        }

        /* We have reached the 8th parity bit, the input buffer index is now one ahead */
        if (bBitPosition == 0U)
 8007b58:	7cfb      	ldrb	r3, [r7, #19]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d104      	bne.n	8007b68 <phTools_DecodeParity+0x1d4>
        {
            bBitPosition = 8;
 8007b5e:	2308      	movs	r3, #8
 8007b60:	74fb      	strb	r3, [r7, #19]
            ++wByteIndexIn;
 8007b62:	8afb      	ldrh	r3, [r7, #22]
 8007b64:	3301      	adds	r3, #1
 8007b66:	82fb      	strh	r3, [r7, #22]
    for (; wByteIndexOut < (*pOutBufferLength); ++wByteIndexOut, ++wByteIndexIn, --bBitPosition)
 8007b68:	8abb      	ldrh	r3, [r7, #20]
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	82bb      	strh	r3, [r7, #20]
 8007b6e:	8afb      	ldrh	r3, [r7, #22]
 8007b70:	3301      	adds	r3, #1
 8007b72:	82fb      	strh	r3, [r7, #22]
 8007b74:	7cfb      	ldrb	r3, [r7, #19]
 8007b76:	3b01      	subs	r3, #1
 8007b78:	74fb      	strb	r3, [r7, #19]
 8007b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b7c:	881b      	ldrh	r3, [r3, #0]
 8007b7e:	8aba      	ldrh	r2, [r7, #20]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d391      	bcc.n	8007aa8 <phTools_DecodeParity+0x114>
        }
    }

    /* Mask out invalid bits of last byte */
    if (*pOutBufferBits > 0U)
 8007b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d015      	beq.n	8007bb8 <phTools_DecodeParity+0x224>
    {
        pOutBuffer[(*pOutBufferLength) - 1U] &= (uint8_t)(0xFFU >> (8U - *pOutBufferBits));
 8007b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b8e:	881b      	ldrh	r3, [r3, #0]
 8007b90:	3b01      	subs	r3, #1
 8007b92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b94:	4413      	add	r3, r2
 8007b96:	7819      	ldrb	r1, [r3, #0]
 8007b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	f1c3 0308 	rsb	r3, r3, #8
 8007ba0:	22ff      	movs	r2, #255	@ 0xff
 8007ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ba6:	b2da      	uxtb	r2, r3
 8007ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007baa:	881b      	ldrh	r3, [r3, #0]
 8007bac:	3b01      	subs	r3, #1
 8007bae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007bb0:	4403      	add	r3, r0
 8007bb2:	400a      	ands	r2, r1
 8007bb4:	b2d2      	uxtb	r2, r2
 8007bb6:	701a      	strb	r2, [r3, #0]
    }

    return PH_ERR_SUCCESS;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3718      	adds	r7, #24
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	38e38e39 	.word	0x38e38e39

08007bc8 <phTools_CalcParity>:

static uint8_t phTools_CalcParity(
                                  uint8_t bDataByte,
                                  uint8_t bOption
                                  )
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	4603      	mov	r3, r0
 8007bd0:	460a      	mov	r2, r1
 8007bd2:	71fb      	strb	r3, [r7, #7]
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	71bb      	strb	r3, [r7, #6]
    uint8_t PH_MEMLOC_REM bBit;
    uint8_t PH_MEMLOC_REM bParity;

    if (bOption == PH_TOOLS_PARITY_OPTION_EVEN)
 8007bd8:	79bb      	ldrb	r3, [r7, #6]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d102      	bne.n	8007be4 <phTools_CalcParity+0x1c>
    {
        bParity = 0x00;
 8007bde:	2300      	movs	r3, #0
 8007be0:	73bb      	strb	r3, [r7, #14]
 8007be2:	e001      	b.n	8007be8 <phTools_CalcParity+0x20>
    }
    else
    {
        bParity = 0x01;
 8007be4:	2301      	movs	r3, #1
 8007be6:	73bb      	strb	r3, [r7, #14]
    }

    for (bBit = 0; bBit < 8U; ++bBit)
 8007be8:	2300      	movs	r3, #0
 8007bea:	73fb      	strb	r3, [r7, #15]
 8007bec:	e00f      	b.n	8007c0e <phTools_CalcParity+0x46>
    {
        if (0U != (bDataByte & (uint8_t)(1U << bBit)))
 8007bee:	7bfb      	ldrb	r3, [r7, #15]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf6:	b2da      	uxtb	r2, r3
 8007bf8:	79fb      	ldrb	r3, [r7, #7]
 8007bfa:	4013      	ands	r3, r2
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d002      	beq.n	8007c08 <phTools_CalcParity+0x40>
        {
            ++bParity;
 8007c02:	7bbb      	ldrb	r3, [r7, #14]
 8007c04:	3301      	adds	r3, #1
 8007c06:	73bb      	strb	r3, [r7, #14]
    for (bBit = 0; bBit < 8U; ++bBit)
 8007c08:	7bfb      	ldrb	r3, [r7, #15]
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	73fb      	strb	r3, [r7, #15]
 8007c0e:	7bfb      	ldrb	r3, [r7, #15]
 8007c10:	2b07      	cmp	r3, #7
 8007c12:	d9ec      	bls.n	8007bee <phTools_CalcParity+0x26>
        }
    }
    return bParity & 0x01U;
 8007c14:	7bbb      	ldrb	r3, [r7, #14]
 8007c16:	f003 0301 	and.w	r3, r3, #1
 8007c1a:	b2db      	uxtb	r3, r3
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3714      	adds	r7, #20
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <phTools_UpdateCrc_B>:

static void phTools_UpdateCrc_B(uint8_t bCh, uint16_t *pLpwCrc)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	4603      	mov	r3, r0
 8007c30:	6039      	str	r1, [r7, #0]
 8007c32:	71fb      	strb	r3, [r7, #7]
    bCh = (bCh^(uint8_t)((*pLpwCrc)&0x00FFU));
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	881b      	ldrh	r3, [r3, #0]
 8007c38:	b2da      	uxtb	r2, r3
 8007c3a:	79fb      	ldrb	r3, [r7, #7]
 8007c3c:	4053      	eors	r3, r2
 8007c3e:	71fb      	strb	r3, [r7, #7]
    bCh = (bCh ^ (bCh<<4U));
 8007c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c44:	011b      	lsls	r3, r3, #4
 8007c46:	b25a      	sxtb	r2, r3
 8007c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c4c:	4053      	eors	r3, r2
 8007c4e:	b25b      	sxtb	r3, r3
 8007c50:	71fb      	strb	r3, [r7, #7]
    *pLpwCrc = (*pLpwCrc >> 8U) ^ ((uint16_t)bCh << 8U) ^ ((uint16_t)bCh << 3U) ^ ((uint16_t)bCh>>4U);
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	881b      	ldrh	r3, [r3, #0]
 8007c56:	0a1b      	lsrs	r3, r3, #8
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	b21a      	sxth	r2, r3
 8007c5c:	79fb      	ldrb	r3, [r7, #7]
 8007c5e:	b21b      	sxth	r3, r3
 8007c60:	021b      	lsls	r3, r3, #8
 8007c62:	b21b      	sxth	r3, r3
 8007c64:	4053      	eors	r3, r2
 8007c66:	b21a      	sxth	r2, r3
 8007c68:	79fb      	ldrb	r3, [r7, #7]
 8007c6a:	b21b      	sxth	r3, r3
 8007c6c:	00db      	lsls	r3, r3, #3
 8007c6e:	b21b      	sxth	r3, r3
 8007c70:	4053      	eors	r3, r2
 8007c72:	b21a      	sxth	r2, r3
 8007c74:	79fb      	ldrb	r3, [r7, #7]
 8007c76:	091b      	lsrs	r3, r3, #4
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	b21b      	sxth	r3, r3
 8007c7c:	4053      	eors	r3, r2
 8007c7e:	b21b      	sxth	r3, r3
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	801a      	strh	r2, [r3, #0]
}
 8007c86:	bf00      	nop
 8007c88:	370c      	adds	r7, #12
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr

08007c92 <phTools_ComputeCrc_B>:

phStatus_t phTools_ComputeCrc_B(
                                uint8_t *pData,
                                uint32_t dwLength,
                                uint8_t *pCrc)
{
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b086      	sub	sp, #24
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	60f8      	str	r0, [r7, #12]
 8007c9a:	60b9      	str	r1, [r7, #8]
 8007c9c:	607a      	str	r2, [r7, #4]
    uint8_t PH_MEMLOC_REM bChBlock = 0;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	75fb      	strb	r3, [r7, #23]
    uint16_t PH_MEMLOC_REM wCrc = 0xFFFF;
 8007ca2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007ca6:	82bb      	strh	r3, [r7, #20]

    do
    {
        bChBlock = *pData++;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	1c5a      	adds	r2, r3, #1
 8007cac:	60fa      	str	r2, [r7, #12]
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	75fb      	strb	r3, [r7, #23]
        phTools_UpdateCrc_B(bChBlock, &wCrc);
 8007cb2:	f107 0214 	add.w	r2, r7, #20
 8007cb6:	7dfb      	ldrb	r3, [r7, #23]
 8007cb8:	4611      	mov	r1, r2
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7ff ffb4 	bl	8007c28 <phTools_UpdateCrc_B>
    } while (0u != (--dwLength));
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	3b01      	subs	r3, #1
 8007cc4:	60bb      	str	r3, [r7, #8]
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d1ed      	bne.n	8007ca8 <phTools_ComputeCrc_B+0x16>

    wCrc = ~wCrc;
 8007ccc:	8abb      	ldrh	r3, [r7, #20]
 8007cce:	43db      	mvns	r3, r3
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	82bb      	strh	r3, [r7, #20]

    pCrc[0] = (uint8_t) (wCrc & 0xFFU);
 8007cd4:	8abb      	ldrh	r3, [r7, #20]
 8007cd6:	b2da      	uxtb	r2, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	701a      	strb	r2, [r3, #0]
    pCrc[1] = (uint8_t) ( (wCrc>>8U) & 0xFFU);
 8007cdc:	8abb      	ldrh	r3, [r7, #20]
 8007cde:	0a1b      	lsrs	r3, r3, #8
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	b2d2      	uxtb	r2, r2
 8007ce8:	701a      	strb	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3718      	adds	r7, #24
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <phacDiscLoop_Sw_Init>:
phStatus_t phacDiscLoop_Sw_Init(
                                phacDiscLoop_Sw_DataParams_t * pDataParams,
                                uint16_t wSizeOfDataParams,
                                void * pHalDataParams
                                )
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b087      	sub	sp, #28
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	607a      	str	r2, [r7, #4]
 8007d00:	817b      	strh	r3, [r7, #10]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    uint8_t PH_MEMLOC_COUNT bCardIndex;
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */

    if (sizeof(phacDiscLoop_Sw_DataParams_t) != wSizeOfDataParams)
 8007d02:	897b      	ldrh	r3, [r7, #10]
 8007d04:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8007d08:	d002      	beq.n	8007d10 <phacDiscLoop_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AC_DISCLOOP);
 8007d0a:	f244 0320 	movw	r3, #16416	@ 0x4020
 8007d0e:	e189      	b.n	8008024 <phacDiscLoop_Sw_Init+0x330>
    }

    PH_ASSERT_NULL(pDataParams);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d101      	bne.n	8007d1a <phacDiscLoop_Sw_Init+0x26>
 8007d16:	2321      	movs	r3, #33	@ 0x21
 8007d18:	e184      	b.n	8008024 <phacDiscLoop_Sw_Init+0x330>

    /* Initialize the private data */
    pDataParams->wId                      = PH_COMP_AC_DISCLOOP | PHAC_DISCLOOP_SW_ID;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f244 0201 	movw	r2, #16385	@ 0x4001
 8007d20:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams           = pHalDataParams;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	629a      	str	r2, [r3, #40]	@ 0x28
    pDataParams->pPal1443p3aDataParams    = NULL;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	62da      	str	r2, [r3, #44]	@ 0x2c
    pDataParams->pPal1443p3bDataParams    = NULL;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2200      	movs	r2, #0
 8007d32:	635a      	str	r2, [r3, #52]	@ 0x34
    pDataParams->pPal14443p4DataParams    = NULL;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2200      	movs	r2, #0
 8007d38:	639a      	str	r2, [r3, #56]	@ 0x38
    pDataParams->pPalFelicaDataParams     = NULL;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	631a      	str	r2, [r3, #48]	@ 0x30
    pDataParams->pPal1443p4aDataParams    = NULL;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2200      	movs	r2, #0
 8007d44:	63da      	str	r2, [r3, #60]	@ 0x3c
    pDataParams->pPalSli15693DataParams   = NULL;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	641a      	str	r2, [r3, #64]	@ 0x40
    pDataParams->pPal18000p3m3DataParams  = NULL;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	645a      	str	r2, [r3, #68]	@ 0x44
    pDataParams->pAl18000p3m3DataParams   = NULL;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2200      	movs	r2, #0
 8007d56:	649a      	str	r2, [r3, #72]	@ 0x48
    pDataParams->pPal18092mPIDataParams   = NULL;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	64da      	str	r2, [r3, #76]	@ 0x4c
    pDataParams->pAlT1TDataParams         = NULL;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2200      	movs	r2, #0
 8007d62:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Default Operation Mode is NFC */
    pDataParams->bOpeMode                 = RD_LIB_MODE_NFC;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2202      	movs	r2, #2
 8007d68:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    pDataParams->bNfcActivityVersion      = PHAC_DISCLOOP_NFC_ACTIVITY_VERSION_2_2;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2222      	movs	r2, #34	@ 0x22
 8007d70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Default listen and poll mode technologies */
    pDataParams->bPollState               = PHAC_DISCLOOP_POLL_STATE_DETECTION;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2201      	movs	r2, #1
 8007d78:	811a      	strh	r2, [r3, #8]
    pDataParams->bPasPollTechCfg          = 0x00;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	709a      	strb	r2, [r3, #2]
    pDataParams->bPasLisTechCfg           = 0x00;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2200      	movs	r2, #0
 8007d84:	715a      	strb	r2, [r3, #5]
    pDataParams->bActPollTechCfg          = 0x00;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	70da      	strb	r2, [r3, #3]
    pDataParams->bActLisTechCfg           = 0x00;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	719a      	strb	r2, [r3, #6]

    pDataParams->pPasTechPollSeq          = (uint8_t *)&gPasTechPollSeqMapTable;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	4aa6      	ldr	r2, [pc, #664]	@ (8008030 <phacDiscLoop_Sw_Init+0x33c>)
 8007d96:	655a      	str	r2, [r3, #84]	@ 0x54

    pDataParams->bUseAntiColl             = PH_ON;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 2020 	strb.w	r2, [r3, #32]
    pDataParams->bLpcdEnabled             = PH_OFF;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2200      	movs	r2, #0
 8007da4:	77da      	strb	r2, [r3, #31]

    pDataParams->bNumOfCards              = 0x00;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    pDataParams->bDetectedTechs           = 0x00;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2200      	movs	r2, #0
 8007db2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    pDataParams->bCollPend                = 0x00;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2200      	movs	r2, #0
 8007dba:	779a      	strb	r2, [r3, #30]
    pDataParams->wActPollGTimeUs          = PH_NXPNFCRDLIB_CONFIG_TYPEA_GT;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 8007dc2:	839a      	strh	r2, [r3, #28]

    pDataParams->bPasPollBailOut          = 0x00;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	711a      	strb	r2, [r3, #4]

    pDataParams->bFsciMax                 = PH_NXPNFCRDLIB_CONFIG_DEFAULT_FSCI_VALUE;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2208      	movs	r2, #8
 8007dce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    pDataParams->bEMVCoPropOpRfFieldReset = PH_OFF;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS
    /* Poll device limits */
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A]           = PHAC_DISCLOOP_TYPEA_DEFAULT_DEVICE_LIMIT;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	729a      	strb	r2, [r3, #10]
    /* Guard times */
    pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_A]         = PH_NXPNFCRDLIB_CONFIG_TYPEA_GT;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 8007de6:	821a      	strh	r2, [r3, #16]
    pDataParams->bPasPollTechCfg                                     |= (PHAC_DISCLOOP_POS_BIT_MASK_A);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	789b      	ldrb	r3, [r3, #2]
 8007dec:	f043 0301 	orr.w	r3, r3, #1
 8007df0:	b2da      	uxtb	r2, r3
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	709a      	strb	r2, [r3, #2]
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE
    pDataParams->bActPollTechCfg                                     |= (PHAC_DISCLOOP_ACT_POS_BIT_MASK_106);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	78db      	ldrb	r3, [r3, #3]
 8007dfa:	f043 0301 	orr.w	r3, r3, #1
 8007dfe:	b2da      	uxtb	r2, r3
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	70da      	strb	r2, [r3, #3]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TARGET_PASSIVE
    pDataParams->bPasLisTechCfg                                      |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	795b      	ldrb	r3, [r3, #5]
 8007e08:	f043 0301 	orr.w	r3, r3, #1
 8007e0c:	b2da      	uxtb	r2, r3
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	715a      	strb	r2, [r3, #5]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TARGET_PASSIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TARGET_ACTIVE
    pDataParams->bActLisTechCfg                                      |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	799b      	ldrb	r3, [r3, #6]
 8007e16:	f043 0301 	orr.w	r3, r3, #1
 8007e1a:	b2da      	uxtb	r2, r3
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	719a      	strb	r2, [r3, #6]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TARGET_ACTIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    /* Poll device limits */
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_B]           = PHAC_DISCLOOP_TYPEB_DEFAULT_DEVICE_LIMIT;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2201      	movs	r2, #1
 8007e24:	72da      	strb	r2, [r3, #11]
    /* Guard times */
    pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_B]         = PH_NXPNFCRDLIB_CONFIG_TYPEB_GT;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 8007e2c:	825a      	strh	r2, [r3, #18]
    pDataParams->bPasPollTechCfg                                     |= (PHAC_DISCLOOP_POS_BIT_MASK_B);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	789b      	ldrb	r3, [r3, #2]
 8007e32:	f043 0302 	orr.w	r3, r3, #2
 8007e36:	b2da      	uxtb	r2, r3
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	709a      	strb	r2, [r3, #2]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    /* Poll device limits */
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F212]        = PHAC_DISCLOOP_TYPEF_DEFAULT_DEVICE_LIMIT;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	731a      	strb	r2, [r3, #12]
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F424]        = PHAC_DISCLOOP_TYPEF_DEFAULT_DEVICE_LIMIT;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2201      	movs	r2, #1
 8007e46:	735a      	strb	r2, [r3, #13]
    /* Guard time GTFB */
    pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F212]      = PH_NXPNFCRDLIB_CONFIG_TYPEF_GT;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f644 72b0 	movw	r2, #20400	@ 0x4fb0
 8007e4e:	829a      	strh	r2, [r3, #20]
    /* Guard time GTBF */
    pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F424]      = PH_NXPNFCRDLIB_CONFIG_B_TO_F_GT;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f643 32c4 	movw	r2, #15300	@ 0x3bc4
 8007e56:	82da      	strh	r2, [r3, #22]
    pDataParams->bPasPollTechCfg                                     |= (PHAC_DISCLOOP_POS_BIT_MASK_F212 | PHAC_DISCLOOP_POS_BIT_MASK_F424);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	789b      	ldrb	r3, [r3, #2]
 8007e5c:	f043 030c 	orr.w	r3, r3, #12
 8007e60:	b2da      	uxtb	r2, r3
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	709a      	strb	r2, [r3, #2]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF212_P2P_ACTIVE
    pDataParams->bActPollTechCfg                                     |= PHAC_DISCLOOP_ACT_POS_BIT_MASK_212 ;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	78db      	ldrb	r3, [r3, #3]
 8007e6a:	f043 0302 	orr.w	r3, r3, #2
 8007e6e:	b2da      	uxtb	r2, r3
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	70da      	strb	r2, [r3, #3]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEF212_P2P_ACTIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE
    pDataParams->bActPollTechCfg                                     |= PHAC_DISCLOOP_ACT_POS_BIT_MASK_424 ;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	78db      	ldrb	r3, [r3, #3]
 8007e78:	f043 0304 	orr.w	r3, r3, #4
 8007e7c:	b2da      	uxtb	r2, r3
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	70da      	strb	r2, [r3, #3]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF212_TARGET_PASSIVE
    pDataParams->bPasLisTechCfg                                      |= PHAC_DISCLOOP_POS_BIT_MASK_F212;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	795b      	ldrb	r3, [r3, #5]
 8007e86:	f043 0304 	orr.w	r3, r3, #4
 8007e8a:	b2da      	uxtb	r2, r3
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	715a      	strb	r2, [r3, #5]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEF212_TARGET_PASSIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF424_TARGET_PASSIVE
    pDataParams->bPasLisTechCfg                                      |= PHAC_DISCLOOP_POS_BIT_MASK_F424;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	795b      	ldrb	r3, [r3, #5]
 8007e94:	f043 0308 	orr.w	r3, r3, #8
 8007e98:	b2da      	uxtb	r2, r3
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	715a      	strb	r2, [r3, #5]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEF424_TARGET_PASSIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF212_TARGET_ACTIVE
    pDataParams->bActLisTechCfg                                      |= PHAC_DISCLOOP_POS_BIT_MASK_F212;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	799b      	ldrb	r3, [r3, #6]
 8007ea2:	f043 0304 	orr.w	r3, r3, #4
 8007ea6:	b2da      	uxtb	r2, r3
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	719a      	strb	r2, [r3, #6]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEF212_TARGET_ACTIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF424_TARGET_ACTIVE
    pDataParams->bActLisTechCfg                                      |= PHAC_DISCLOOP_POS_BIT_MASK_F424;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	799b      	ldrb	r3, [r3, #6]
 8007eb0:	f043 0308 	orr.w	r3, r3, #8
 8007eb4:	b2da      	uxtb	r2, r3
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	719a      	strb	r2, [r3, #6]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEF424_TARGET_ACTIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    /* Poll device limits */
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V]      = PHAC_DISCLOOP_TYPEV_DEFAULT_DEVICE_LIMIT;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	739a      	strb	r2, [r3, #14]
    /* Guard times */
    pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_V]    = PH_NXPNFCRDLIB_CONFIG_TYPEV_GT;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 8007ec6:	831a      	strh	r2, [r3, #24]
    pDataParams->bPasPollTechCfg                                |= (PHAC_DISCLOOP_POS_BIT_MASK_V);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	789b      	ldrb	r3, [r3, #2]
 8007ecc:	f043 0310 	orr.w	r3, r3, #16
 8007ed0:	b2da      	uxtb	r2, r3
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	709a      	strb	r2, [r3, #2]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    /* Poll device limits */
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_18000P3M3]   = PHAC_DISCLOOP_I18000P3M3_DEFAULT_DEVICE_LIMIT;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2201      	movs	r2, #1
 8007eda:	73da      	strb	r2, [r3, #15]
    /* Guard times */
    pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_18000P3M3] = PH_NXPNFCRDLIB_CONFIG_I18000P3M3_GT;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007ee2:	835a      	strh	r2, [r3, #26]
    pDataParams->bPasPollTechCfg                                     |= (PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	789b      	ldrb	r3, [r3, #2]
 8007ee8:	f043 0320 	orr.w	r3, r3, #32
 8007eec:	b2da      	uxtb	r2, r3
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	709a      	strb	r2, [r3, #2]
#endif  /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */

#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE)
    pDataParams->sTypeATargetInfo.bTotalTagsFound   = 0;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    #if defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE)
        pDataParams->sTypeATargetInfo.sTypeA_P2P.bDid        = 0;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        pDataParams->sTypeATargetInfo.sTypeA_P2P.bLri        = 0;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
        pDataParams->sTypeATargetInfo.sTypeA_P2P.bNadEnable  = 0;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
        pDataParams->sTypeATargetInfo.sTypeA_P2P.bNad        = 0;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2200      	movs	r2, #0
 8007f16:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
    #endif

    #ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bFsdi  = PHPAL_I14443P4A_NFC_FRAMESIZE_MAX;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2208      	movs	r2, #8
 8007f1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bCid   = 0x00;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2200      	movs	r2, #0
 8007f26:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bNad   = 0x00;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDri   = 0x00;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDsi   = 0x00;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    #endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    pDataParams->sTypeBTargetInfo.bTotalTagsFound   = 0x00;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
    pDataParams->sTypeBTargetInfo.bAfiReq           = 0x00;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1
    pDataParams->sTypeBTargetInfo.bFsdi             = 0x08;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2208      	movs	r2, #8
 8007f56:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4
    pDataParams->sTypeBTargetInfo.bCid              = 0x00;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5
    pDataParams->sTypeBTargetInfo.bNad              = 0x00;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f883 20c6 	strb.w	r2, [r3, #198]	@ 0xc6
    pDataParams->sTypeBTargetInfo.bDri              = 0x00;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f883 20c7 	strb.w	r2, [r3, #199]	@ 0xc7
    pDataParams->sTypeBTargetInfo.bDsi              = 0x00;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
    pDataParams->sTypeBTargetInfo.bExtendedAtqBbit  = 0x00;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2

#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    pDataParams->sTypeFTargetInfo.bTotalTagsFound  = 0x00;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2200      	movs	r2, #0
 8007f86:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
    pDataParams->sTypeFTargetInfo.aSystemCode[0]   = 0xFF;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	22ff      	movs	r2, #255	@ 0xff
 8007f8e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
    pDataParams->sTypeFTargetInfo.aSystemCode[1]   = 0xFF;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	22ff      	movs	r2, #255	@ 0xff
 8007f96:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
    pDataParams->sTypeFTargetInfo.bTimeSlot        = PHPAL_FELICA_NUMSLOTS_4;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2203      	movs	r2, #3
 8007f9e:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93

    for(bCardIndex = 0; bCardIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bCardIndex++)
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	75fb      	strb	r3, [r7, #23]
 8007fa6:	e00d      	b.n	8007fc4 <phacDiscLoop_Sw_Init+0x2d0>
    {
        /* Clear SLEEP_AF State */
        pDataParams->sTypeFTargetInfo.aTypeFTag[bCardIndex].bSleepAFState = 0U;
 8007fa8:	7dfa      	ldrb	r2, [r7, #23]
 8007faa:	68f9      	ldr	r1, [r7, #12]
 8007fac:	4613      	mov	r3, r2
 8007fae:	005b      	lsls	r3, r3, #1
 8007fb0:	4413      	add	r3, r2
 8007fb2:	00da      	lsls	r2, r3, #3
 8007fb4:	1ad2      	subs	r2, r2, r3
 8007fb6:	188b      	adds	r3, r1, r2
 8007fb8:	33a7      	adds	r3, #167	@ 0xa7
 8007fba:	2200      	movs	r2, #0
 8007fbc:	701a      	strb	r2, [r3, #0]
    for(bCardIndex = 0; bCardIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bCardIndex++)
 8007fbe:	7dfb      	ldrb	r3, [r7, #23]
 8007fc0:	3301      	adds	r3, #1
 8007fc2:	75fb      	strb	r3, [r7, #23]
 8007fc4:	7dfb      	ldrb	r3, [r7, #23]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d0ee      	beq.n	8007fa8 <phacDiscLoop_Sw_Init+0x2b4>
    }
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */

#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS)  || defined(NXPBUILD__PHAC_DISCLOOP_TYPEF212_P2P_ACTIVE) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE)
    pDataParams->sTypeFTargetInfo.sTypeF_P2P.bDid          = 0;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
    pDataParams->sTypeFTargetInfo.sTypeF_P2P.bLri          = 0;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
    pDataParams->sTypeFTargetInfo.sTypeF_P2P.bNadEnable    = 0;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
    pDataParams->sTypeFTargetInfo.sTypeF_P2P.bNad          = 0;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f883 20af 	strb.w	r2, [r3, #175]	@ 0xaf
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    pDataParams->sTypeVTargetInfo.bTotalTagsFound  = 0x00;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf
    pDataParams->sTypeVTargetInfo.bFlag            = PHPAL_SLI15693_FLAG_DATA_RATE;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2202      	movs	r2, #2
 8007ff6:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
    pDataParams->sTypeVTargetInfo.bMode            = PHPAL_SLI15693_FLAG_ADDRESSED;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2220      	movs	r2, #32
 8007ffe:	f883 20e1 	strb.w	r2, [r3, #225]	@ 0xe1

#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound  = 0;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2200      	movs	r2, #0
 8008006:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
    pDataParams->sI18000p3m3TargetInfo.bM               = PHPAL_I18000P3M3_M_MANCHESTER_4;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2203      	movs	r2, #3
 800800e:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
    pDataParams->sI18000p3m3TargetInfo.bDr              = PHPAL_I18000P3M3_LF_847KHZ;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2201      	movs	r2, #1
 8008016:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee

#endif /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TARGET
    pDataParams->sTargetParams.bRetryCount = 0;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2200      	movs	r2, #0
 800801e:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
#endif /* NXPBUILD__PHAC_DISCLOOP_TARGET */

    return PH_ERR_SUCCESS;
 8008022:	2300      	movs	r3, #0
}
 8008024:	4618      	mov	r0, r3
 8008026:	371c      	adds	r7, #28
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr
 8008030:	080238d8 	.word	0x080238d8

08008034 <phacDiscLoop_Sw_Run>:
// discoveryLoop的核心调度函数：根据入口点参数执行轮询（Poll）模式或监听（Listen）模式的标签发现流程
phStatus_t phacDiscLoop_Sw_Run(
                               phacDiscLoop_Sw_DataParams_t * pDataParams,
                               uint8_t bEntryPoint
                               )
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	460b      	mov	r3, r1
 800803e:	70fb      	strb	r3, [r7, #3]
    phStatus_t PH_MEMLOC_REM wDiscloopStatus;

    /* 关闭干扰检测 Disable Emd Check */
    PH_CHECK_SUCCESS_FCT(wDiscloopStatus, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_OFF));
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008044:	2200      	movs	r2, #0
 8008046:	215e      	movs	r1, #94	@ 0x5e
 8008048:	4618      	mov	r0, r3
 800804a:	f006 fba5 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 800804e:	4603      	mov	r3, r0
 8008050:	81fb      	strh	r3, [r7, #14]
 8008052:	89fb      	ldrh	r3, [r7, #14]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d001      	beq.n	800805c <phacDiscLoop_Sw_Run+0x28>
 8008058:	89fb      	ldrh	r3, [r7, #14]
 800805a:	e0b9      	b.n	80081d0 <phacDiscLoop_Sw_Run+0x19c>

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_JEWEL_TAGS
    PH_CHECK_SUCCESS_FCT(wDiscloopStatus, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_JEWEL_MODE, PH_OFF));
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008060:	2200      	movs	r2, #0
 8008062:	2120      	movs	r1, #32
 8008064:	4618      	mov	r0, r3
 8008066:	f006 fb97 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 800806a:	4603      	mov	r3, r0
 800806c:	81fb      	strh	r3, [r7, #14]
 800806e:	89fb      	ldrh	r3, [r7, #14]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d001      	beq.n	8008078 <phacDiscLoop_Sw_Run+0x44>
 8008074:	89fb      	ldrh	r3, [r7, #14]
 8008076:	e0ab      	b.n	80081d0 <phacDiscLoop_Sw_Run+0x19c>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_JEWEL_TAGS */

    switch (bEntryPoint)
 8008078:	78fb      	ldrb	r3, [r7, #3]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d002      	beq.n	8008084 <phacDiscLoop_Sw_Run+0x50>
 800807e:	2b01      	cmp	r3, #1
 8008080:	d07a      	beq.n	8008178 <phacDiscLoop_Sw_Run+0x144>
 8008082:	e0a3      	b.n	80081cc <phacDiscLoop_Sw_Run+0x198>
    case ((uint8_t)PHAC_DISCLOOP_ENTRY_POINT_POLL):

		/* 低功耗卡检测LPCD */
#ifdef NXPBUILD__PHAC_DISCLOOP_LPCD
        /* Perform LPCD if Enabled. */
        if ((0U != (pDataParams->bLpcdEnabled))
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	7fdb      	ldrb	r3, [r3, #31]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d017      	beq.n	80080bc <phacDiscLoop_Sw_Run+0x88>
            && (pDataParams->bPollState == PHAC_DISCLOOP_POLL_STATE_DETECTION))
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	891b      	ldrh	r3, [r3, #8]
 8008090:	2b01      	cmp	r3, #1
 8008092:	d113      	bne.n	80080bc <phacDiscLoop_Sw_Run+0x88>
        {
            wDiscloopStatus = phhalHw_Lpcd(pDataParams->pHalDataParams);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008098:	4618      	mov	r0, r3
 800809a:	f008 fdf9 	bl	8010c90 <phhalHw_Pn5180_Lpcd>
 800809e:	4603      	mov	r3, r0
 80080a0:	81fb      	strh	r3, [r7, #14]
            if ((wDiscloopStatus & PH_ERR_MASK) != PH_ERR_SUCCESS)
 80080a2:	89fb      	ldrh	r3, [r7, #14]
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d008      	beq.n	80080bc <phacDiscLoop_Sw_Run+0x88>
            {
                if ((wDiscloopStatus & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT)
 80080aa:	89fb      	ldrh	r3, [r7, #14]
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d102      	bne.n	80080b8 <phacDiscLoop_Sw_Run+0x84>
                {
                    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_TECH_DETECTED, PH_COMP_AC_DISCLOOP); /* No card presence. */
 80080b2:	f244 0384 	movw	r3, #16516	@ 0x4084
 80080b6:	e08b      	b.n	80081d0 <phacDiscLoop_Sw_Run+0x19c>
                }

                return wDiscloopStatus; /* Other error. */
 80080b8:	89fb      	ldrh	r3, [r7, #14]
 80080ba:	e089      	b.n	80081d0 <phacDiscLoop_Sw_Run+0x19c>
        }
#endif /* NXPBUILD__PHAC_DISCLOOP_LPCD */

        /* 1.1 主动轮询模式 Check for active poll configuration */
    	// 如果当前设置了 Active Polling 模式，并且处于“轮询检测”的状态
        if((0U != (pDataParams->bActPollTechCfg))
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	78db      	ldrb	r3, [r3, #3]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d037      	beq.n	8008134 <phacDiscLoop_Sw_Run+0x100>
           && (pDataParams->bPollState == PHAC_DISCLOOP_POLL_STATE_DETECTION))
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	891b      	ldrh	r3, [r3, #8]
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d133      	bne.n	8008134 <phacDiscLoop_Sw_Run+0x100>
        {
        	/* 尝试使用不同速率（106/212/424 kbps）的NFC P2P主动通信模式与周围的目标设备建立连接
            *  先关闭 RF 场地 -> 等待恢复时间 -> 设置协议速率 -> 开场 -> 发送 ATR 请求
			*	-> 根据返回状态判断是否成功建立连接
            */
            wDiscloopStatus = phacDiscLoop_Sw_Int_ActivePollMode(pDataParams);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f001 f931 	bl	8009334 <phacDiscLoop_Sw_Int_ActivePollMode>
 80080d2:	4603      	mov	r3, r0
 80080d4:	81fb      	strh	r3, [r7, #14]
            /* Continue with passive polling, if no peer detected */
            if((wDiscloopStatus & PH_ERR_MASK) != PHAC_DISCLOOP_NO_TECH_DETECTED)
 80080d6:	89fb      	ldrh	r3, [r7, #14]
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	2b84      	cmp	r3, #132	@ 0x84
 80080dc:	d00f      	beq.n	80080fe <phacDiscLoop_Sw_Run+0xca>
            {
            	// 失败
                if(((wDiscloopStatus & PH_ERR_MASK) != PHAC_DISCLOOP_ACTIVE_TARGET_ACTIVATED) &&
 80080de:	89fb      	ldrh	r3, [r7, #14]
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	2b8c      	cmp	r3, #140	@ 0x8c
 80080e4:	d009      	beq.n	80080fa <phacDiscLoop_Sw_Run+0xc6>
                    ((wDiscloopStatus & PH_ERR_MASK) != PHAC_DISCLOOP_EXTERNAL_RFON))
 80080e6:	89fb      	ldrh	r3, [r7, #14]
 80080e8:	b2db      	uxtb	r3, r3
                if(((wDiscloopStatus & PH_ERR_MASK) != PHAC_DISCLOOP_ACTIVE_TARGET_ACTIVATED) &&
 80080ea:	2b82      	cmp	r3, #130	@ 0x82
 80080ec:	d005      	beq.n	80080fa <phacDiscLoop_Sw_Run+0xc6>
                {
                    pDataParams->wErrorCode = wDiscloopStatus;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	89fa      	ldrh	r2, [r7, #14]
 80080f2:	84da      	strh	r2, [r3, #38]	@ 0x26
                    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_FAILURE, PH_COMP_AC_DISCLOOP);
 80080f4:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80080f8:	e06a      	b.n	80081d0 <phacDiscLoop_Sw_Run+0x19c>
                }
                // 成功
                return wDiscloopStatus;
 80080fa:	89fb      	ldrh	r3, [r7, #14]
 80080fc:	e068      	b.n	80081d0 <phacDiscLoop_Sw_Run+0x19c>
            }
            /* Field OFF after Active polling and wait for recovery time. */
            PH_CHECK_SUCCESS_FCT(wDiscloopStatus, phhalHw_FieldOff(pDataParams->pHalDataParams));
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008102:	4618      	mov	r0, r3
 8008104:	f006 fa6a 	bl	800e5dc <phhalHw_Pn5180_FieldOff>
 8008108:	4603      	mov	r3, r0
 800810a:	81fb      	strh	r3, [r7, #14]
 800810c:	89fb      	ldrh	r3, [r7, #14]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d001      	beq.n	8008116 <phacDiscLoop_Sw_Run+0xe2>
 8008112:	89fb      	ldrh	r3, [r7, #14]
 8008114:	e05c      	b.n	80081d0 <phacDiscLoop_Sw_Run+0x19c>
            PH_CHECK_SUCCESS_FCT(wDiscloopStatus, phhalHw_Wait(pDataParams->pHalDataParams, PHHAL_HW_TIME_MICROSECONDS, pDataParams->wActPollGTimeUs));
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	8b9b      	ldrh	r3, [r3, #28]
 800811e:	461a      	mov	r2, r3
 8008120:	2100      	movs	r1, #0
 8008122:	f006 fa7f 	bl	800e624 <phhalHw_Pn5180_Wait>
 8008126:	4603      	mov	r3, r0
 8008128:	81fb      	strh	r3, [r7, #14]
 800812a:	89fb      	ldrh	r3, [r7, #14]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d001      	beq.n	8008134 <phacDiscLoop_Sw_Run+0x100>
 8008130:	89fb      	ldrh	r3, [r7, #14]
 8008132:	e04d      	b.n	80081d0 <phacDiscLoop_Sw_Run+0x19c>
        }

        /* 1.2 被动轮询模式 Check for passive poll configuration */
        if(0U != (pDataParams->bPasPollTechCfg))
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	789b      	ldrb	r3, [r3, #2]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d012      	beq.n	8008162 <phacDiscLoop_Sw_Run+0x12e>
        {
            /* Perform the Poll operation and store the Status code. */
            wDiscloopStatus = phacDiscLoop_Sw_Int_PollMode(pDataParams);
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f001 fa5a 	bl	80095f6 <phacDiscLoop_Sw_Int_PollMode>
 8008142:	4603      	mov	r3, r0
 8008144:	81fb      	strh	r3, [r7, #14]

            /* If error is from below layer, store it and return failure */
            if((wDiscloopStatus & PH_COMP_MASK) != PH_COMP_AC_DISCLOOP)
 8008146:	89fb      	ldrh	r3, [r7, #14]
 8008148:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800814c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008150:	d005      	beq.n	800815e <phacDiscLoop_Sw_Run+0x12a>
            {
                pDataParams->wErrorCode = wDiscloopStatus;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	89fa      	ldrh	r2, [r7, #14]
 8008156:	84da      	strh	r2, [r3, #38]	@ 0x26
                return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_FAILURE, PH_COMP_AC_DISCLOOP);
 8008158:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 800815c:	e038      	b.n	80081d0 <phacDiscLoop_Sw_Run+0x19c>
            }
            return wDiscloopStatus;
 800815e:	89fb      	ldrh	r3, [r7, #14]
 8008160:	e036      	b.n	80081d0 <phacDiscLoop_Sw_Run+0x19c>
        }
        else
        {
            pDataParams->bDetectedTechs = 0x00;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
            pDataParams->bNumOfCards = 0x00;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 8008172:	f244 0384 	movw	r3, #16516	@ 0x4084
 8008176:	e02b      	b.n	80081d0 <phacDiscLoop_Sw_Run+0x19c>
        }

    /* 2. 监听模式 */
    case ((uint8_t)PHAC_DISCLOOP_ENTRY_POINT_LISTEN):
        /* Check for listen configurations */
        if ((0U != (pDataParams->bPasLisTechCfg)) || (0U != (pDataParams->bActLisTechCfg)))
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	795b      	ldrb	r3, [r3, #5]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d103      	bne.n	8008188 <phacDiscLoop_Sw_Run+0x154>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	799b      	ldrb	r3, [r3, #6]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d01e      	beq.n	80081c6 <phacDiscLoop_Sw_Run+0x192>
        {
            /* Turn OFF RF field if already on. */
            PH_CHECK_SUCCESS_FCT(wDiscloopStatus, phhalHw_FieldOff(pDataParams->pHalDataParams));
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800818c:	4618      	mov	r0, r3
 800818e:	f006 fa25 	bl	800e5dc <phhalHw_Pn5180_FieldOff>
 8008192:	4603      	mov	r3, r0
 8008194:	81fb      	strh	r3, [r7, #14]
 8008196:	89fb      	ldrh	r3, [r7, #14]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d001      	beq.n	80081a0 <phacDiscLoop_Sw_Run+0x16c>
 800819c:	89fb      	ldrh	r3, [r7, #14]
 800819e:	e017      	b.n	80081d0 <phacDiscLoop_Sw_Run+0x19c>

            /* Perform listen operation and store the Status code. */
            wDiscloopStatus = phacDiscLoop_Sw_Int_ListenMode(pDataParams);
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f001 f867 	bl	8009274 <phacDiscLoop_Sw_Int_ListenMode>
 80081a6:	4603      	mov	r3, r0
 80081a8:	81fb      	strh	r3, [r7, #14]

            /* If error is from below layer, store it and return failure */
            if((wDiscloopStatus & PH_COMP_MASK) != PH_COMP_AC_DISCLOOP)
 80081aa:	89fb      	ldrh	r3, [r7, #14]
 80081ac:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80081b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80081b4:	d005      	beq.n	80081c2 <phacDiscLoop_Sw_Run+0x18e>
            {
                pDataParams->wErrorCode = wDiscloopStatus;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	89fa      	ldrh	r2, [r7, #14]
 80081ba:	84da      	strh	r2, [r3, #38]	@ 0x26
                return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_FAILURE, PH_COMP_AC_DISCLOOP);
 80081bc:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80081c0:	e006      	b.n	80081d0 <phacDiscLoop_Sw_Run+0x19c>
            }
            return wDiscloopStatus;
 80081c2:	89fb      	ldrh	r3, [r7, #14]
 80081c4:	e004      	b.n	80081d0 <phacDiscLoop_Sw_Run+0x19c>
        }
        else
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80081c6:	f244 0321 	movw	r3, #16417	@ 0x4021
 80081ca:	e001      	b.n	80081d0 <phacDiscLoop_Sw_Run+0x19c>
        }

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80081cc:	f244 0321 	movw	r3, #16417	@ 0x4021
    }
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3710      	adds	r7, #16
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <phacDiscLoop_Sw_SetConfig>:
phStatus_t phacDiscLoop_Sw_SetConfig(
                                     phacDiscLoop_Sw_DataParams_t * pDataParams,
                                     uint16_t wConfig,
                                     uint16_t wValue
                                     )
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	460b      	mov	r3, r1
 80081e2:	807b      	strh	r3, [r7, #2]
 80081e4:	4613      	mov	r3, r2
 80081e6:	803b      	strh	r3, [r7, #0]
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 80081e8:	2300      	movs	r3, #0
 80081ea:	81fb      	strh	r3, [r7, #14]
#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS)
    uint8_t     PH_MEMLOC_REM bIndex;
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    uint16_t    PH_MEMLOC_REM wSliConfigFlags = 0U;
 80081ec:	2300      	movs	r3, #0
 80081ee:	817b      	strh	r3, [r7, #10]
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */

    switch(wConfig)
 80081f0:	887b      	ldrh	r3, [r7, #2]
 80081f2:	2b94      	cmp	r3, #148	@ 0x94
 80081f4:	f200 8463 	bhi.w	8008abe <phacDiscLoop_Sw_SetConfig+0x8e6>
 80081f8:	a201      	add	r2, pc, #4	@ (adr r2, 8008200 <phacDiscLoop_Sw_SetConfig+0x28>)
 80081fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081fe:	bf00      	nop
 8008200:	080084bd 	.word	0x080084bd
 8008204:	080084c5 	.word	0x080084c5
 8008208:	080084cd 	.word	0x080084cd
 800820c:	080084e5 	.word	0x080084e5
 8008210:	080084fd 	.word	0x080084fd
 8008214:	08008505 	.word	0x08008505
 8008218:	08008537 	.word	0x08008537
 800821c:	08008abf 	.word	0x08008abf
 8008220:	08008abf 	.word	0x08008abf
 8008224:	08008abf 	.word	0x08008abf
 8008228:	08008abf 	.word	0x08008abf
 800822c:	08008abf 	.word	0x08008abf
 8008230:	08008abf 	.word	0x08008abf
 8008234:	08008abf 	.word	0x08008abf
 8008238:	08008abf 	.word	0x08008abf
 800823c:	08008abf 	.word	0x08008abf
 8008240:	08008649 	.word	0x08008649
 8008244:	080087ab 	.word	0x080087ab
 8008248:	080088c7 	.word	0x080088c7
 800824c:	0800894d 	.word	0x0800894d
 8008250:	08008a51 	.word	0x08008a51
 8008254:	08008abf 	.word	0x08008abf
 8008258:	08008abf 	.word	0x08008abf
 800825c:	08008abf 	.word	0x08008abf
 8008260:	08008abf 	.word	0x08008abf
 8008264:	08008abf 	.word	0x08008abf
 8008268:	08008abf 	.word	0x08008abf
 800826c:	08008abf 	.word	0x08008abf
 8008270:	08008abf 	.word	0x08008abf
 8008274:	08008abf 	.word	0x08008abf
 8008278:	08008abf 	.word	0x08008abf
 800827c:	08008abf 	.word	0x08008abf
 8008280:	08008abf 	.word	0x08008abf
 8008284:	08008abf 	.word	0x08008abf
 8008288:	08008abf 	.word	0x08008abf
 800828c:	08008abf 	.word	0x08008abf
 8008290:	08008abf 	.word	0x08008abf
 8008294:	08008abf 	.word	0x08008abf
 8008298:	08008abf 	.word	0x08008abf
 800829c:	08008abf 	.word	0x08008abf
 80082a0:	08008abf 	.word	0x08008abf
 80082a4:	08008abf 	.word	0x08008abf
 80082a8:	08008abf 	.word	0x08008abf
 80082ac:	08008abf 	.word	0x08008abf
 80082b0:	08008abf 	.word	0x08008abf
 80082b4:	08008abf 	.word	0x08008abf
 80082b8:	08008abf 	.word	0x08008abf
 80082bc:	08008abf 	.word	0x08008abf
 80082c0:	080087c5 	.word	0x080087c5
 80082c4:	080087d1 	.word	0x080087d1
 80082c8:	080087eb 	.word	0x080087eb
 80082cc:	08008803 	.word	0x08008803
 80082d0:	0800881b 	.word	0x0800881b
 80082d4:	08008827 	.word	0x08008827
 80082d8:	0800884f 	.word	0x0800884f
 80082dc:	08008abf 	.word	0x08008abf
 80082e0:	08008abf 	.word	0x08008abf
 80082e4:	08008abf 	.word	0x08008abf
 80082e8:	08008abf 	.word	0x08008abf
 80082ec:	08008abf 	.word	0x08008abf
 80082f0:	08008abf 	.word	0x08008abf
 80082f4:	08008abf 	.word	0x08008abf
 80082f8:	08008abf 	.word	0x08008abf
 80082fc:	08008abf 	.word	0x08008abf
 8008300:	080086a5 	.word	0x080086a5
 8008304:	080086bd 	.word	0x080086bd
 8008308:	080086d5 	.word	0x080086d5
 800830c:	080086e1 	.word	0x080086e1
 8008310:	08008709 	.word	0x08008709
 8008314:	08008731 	.word	0x08008731
 8008318:	08008749 	.word	0x08008749
 800831c:	08008761 	.word	0x08008761
 8008320:	0800877b 	.word	0x0800877b
 8008324:	08008793 	.word	0x08008793
 8008328:	08008abf 	.word	0x08008abf
 800832c:	08008abf 	.word	0x08008abf
 8008330:	08008abf 	.word	0x08008abf
 8008334:	08008abf 	.word	0x08008abf
 8008338:	08008abf 	.word	0x08008abf
 800833c:	08008abf 	.word	0x08008abf
 8008340:	08008abf 	.word	0x08008abf
 8008344:	080088e1 	.word	0x080088e1
 8008348:	080088f9 	.word	0x080088f9
 800834c:	08008911 	.word	0x08008911
 8008350:	0800891d 	.word	0x0800891d
 8008354:	08008935 	.word	0x08008935
 8008358:	08008abf 	.word	0x08008abf
 800835c:	080088bb 	.word	0x080088bb
 8008360:	08008abf 	.word	0x08008abf
 8008364:	08008abf 	.word	0x08008abf
 8008368:	08008abf 	.word	0x08008abf
 800836c:	08008abf 	.word	0x08008abf
 8008370:	08008abf 	.word	0x08008abf
 8008374:	08008abf 	.word	0x08008abf
 8008378:	08008abf 	.word	0x08008abf
 800837c:	08008abf 	.word	0x08008abf
 8008380:	08008967 	.word	0x08008967
 8008384:	080089a7 	.word	0x080089a7
 8008388:	08008abf 	.word	0x08008abf
 800838c:	08008abf 	.word	0x08008abf
 8008390:	08008abf 	.word	0x08008abf
 8008394:	08008abf 	.word	0x08008abf
 8008398:	08008abf 	.word	0x08008abf
 800839c:	08008abf 	.word	0x08008abf
 80083a0:	08008abf 	.word	0x08008abf
 80083a4:	08008abf 	.word	0x08008abf
 80083a8:	08008abf 	.word	0x08008abf
 80083ac:	08008abf 	.word	0x08008abf
 80083b0:	08008abf 	.word	0x08008abf
 80083b4:	08008abf 	.word	0x08008abf
 80083b8:	08008abf 	.word	0x08008abf
 80083bc:	08008abf 	.word	0x08008abf
 80083c0:	08008a6b 	.word	0x08008a6b
 80083c4:	08008a89 	.word	0x08008a89
 80083c8:	08008abf 	.word	0x08008abf
 80083cc:	08008abf 	.word	0x08008abf
 80083d0:	08008abf 	.word	0x08008abf
 80083d4:	08008abf 	.word	0x08008abf
 80083d8:	08008abf 	.word	0x08008abf
 80083dc:	08008abf 	.word	0x08008abf
 80083e0:	08008abf 	.word	0x08008abf
 80083e4:	08008abf 	.word	0x08008abf
 80083e8:	08008abf 	.word	0x08008abf
 80083ec:	08008abf 	.word	0x08008abf
 80083f0:	08008abf 	.word	0x08008abf
 80083f4:	08008abf 	.word	0x08008abf
 80083f8:	08008abf 	.word	0x08008abf
 80083fc:	08008abf 	.word	0x08008abf
 8008400:	08008621 	.word	0x08008621
 8008404:	08008abf 	.word	0x08008abf
 8008408:	08008555 	.word	0x08008555
 800840c:	08008473 	.word	0x08008473
 8008410:	0800847d 	.word	0x0800847d
 8008414:	08008abf 	.word	0x08008abf
 8008418:	0800853f 	.word	0x0800853f
 800841c:	08008abf 	.word	0x08008abf
 8008420:	080084b1 	.word	0x080084b1
 8008424:	08008455 	.word	0x08008455
 8008428:	0800845f 	.word	0x0800845f
 800842c:	08008469 	.word	0x08008469
 8008430:	080084a7 	.word	0x080084a7
 8008434:	08008abf 	.word	0x08008abf
 8008438:	08008abf 	.word	0x08008abf
 800843c:	08008abf 	.word	0x08008abf
 8008440:	08008aa7 	.word	0x08008aa7
 8008444:	0800862b 	.word	0x0800862b
 8008448:	0800850d 	.word	0x0800850d
 800844c:	08008663 	.word	0x08008663
 8008450:	08008877 	.word	0x08008877
    {
    case PHAC_DISCLOOP_CONFIG_ACT_LIS_TECH_CFG:
        pDataParams->bActLisTechCfg = (uint8_t)wValue;
 8008454:	883b      	ldrh	r3, [r7, #0]
 8008456:	b2da      	uxtb	r2, r3
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	719a      	strb	r2, [r3, #6]
        break;
 800845c:	e334      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_ACT_POLL_TECH_CFG:
        pDataParams->bActPollTechCfg = (uint8_t)wValue;
 800845e:	883b      	ldrh	r3, [r7, #0]
 8008460:	b2da      	uxtb	r2, r3
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	70da      	strb	r2, [r3, #3]
        break;
 8008466:	e32f      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_PAS_LIS_TECH_CFG:
        pDataParams->bPasLisTechCfg = (uint8_t)wValue;
 8008468:	883b      	ldrh	r3, [r7, #0]
 800846a:	b2da      	uxtb	r2, r3
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	715a      	strb	r2, [r3, #5]
        break;
 8008470:	e32a      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_COLLISION_PENDING:
        pDataParams->bCollPend = (uint8_t)wValue;
 8008472:	883b      	ldrh	r3, [r7, #0]
 8008474:	b2da      	uxtb	r2, r3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	779a      	strb	r2, [r3, #30]
        break;
 800847a:	e325      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_NEXT_POLL_STATE:
        if(!(((wValue & 0x00FFU) == PHAC_DISCLOOP_POLL_STATE_DETECTION) ||
 800847c:	883b      	ldrh	r3, [r7, #0]
 800847e:	b2db      	uxtb	r3, r3
 8008480:	2b01      	cmp	r3, #1
 8008482:	d00a      	beq.n	800849a <phacDiscLoop_Sw_SetConfig+0x2c2>
            ((wValue & 0x00FFU) == PHAC_DISCLOOP_POLL_STATE_COLLISION_RESOLUTION) ||
 8008484:	883b      	ldrh	r3, [r7, #0]
 8008486:	b2db      	uxtb	r3, r3
        if(!(((wValue & 0x00FFU) == PHAC_DISCLOOP_POLL_STATE_DETECTION) ||
 8008488:	2b02      	cmp	r3, #2
 800848a:	d006      	beq.n	800849a <phacDiscLoop_Sw_SetConfig+0x2c2>
            ((wValue & 0x00FFU) == PHAC_DISCLOOP_POLL_STATE_REMOVAL)))
 800848c:	883b      	ldrh	r3, [r7, #0]
 800848e:	b2db      	uxtb	r3, r3
        if(!(((wValue & 0x00FFU) == PHAC_DISCLOOP_POLL_STATE_DETECTION) ||
 8008490:	2b03      	cmp	r3, #3
 8008492:	d002      	beq.n	800849a <phacDiscLoop_Sw_SetConfig+0x2c2>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8008494:	f244 0321 	movw	r3, #16417	@ 0x4021
 8008498:	e317      	b.n	8008aca <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->bPollState = (wValue & 0x00FFU);
 800849a:	883b      	ldrh	r3, [r7, #0]
 800849c:	b2db      	uxtb	r3, r3
 800849e:	b29a      	uxth	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	811a      	strh	r2, [r3, #8]
        break;
 80084a4:	e310      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_PAS_POLL_TECH_CFG:
        pDataParams->bPasPollTechCfg = (uint8_t)wValue;
 80084a6:	883b      	ldrh	r3, [r7, #0]
 80084a8:	b2da      	uxtb	r2, r3
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	709a      	strb	r2, [r3, #2]
        break;
 80084ae:	e30b      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_ANTI_COLL:
        pDataParams->bUseAntiColl = (uint8_t)wValue;
 80084b0:	883b      	ldrh	r3, [r7, #0]
 80084b2:	b2da      	uxtb	r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f883 2020 	strb.w	r2, [r3, #32]
        break;
 80084ba:	e305      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_GTA_VALUE_US:
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_A] = wValue;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	883a      	ldrh	r2, [r7, #0]
 80084c0:	821a      	strh	r2, [r3, #16]
        break;
 80084c2:	e301      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_GTB_VALUE_US:
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_B] = wValue;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	883a      	ldrh	r2, [r7, #0]
 80084c8:	825a      	strh	r2, [r3, #18]
        break;
 80084ca:	e2fd      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_GTFB_VALUE_US:
        if(wValue < PH_NXPNFCRDLIB_CONFIG_TYPEF_GT)
 80084cc:	883b      	ldrh	r3, [r7, #0]
 80084ce:	f644 72af 	movw	r2, #20399	@ 0x4faf
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d802      	bhi.n	80084dc <phacDiscLoop_Sw_SetConfig+0x304>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80084d6:	f244 0321 	movw	r3, #16417	@ 0x4021
 80084da:	e2f6      	b.n	8008aca <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F212] = wValue;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	883a      	ldrh	r2, [r7, #0]
 80084e0:	829a      	strh	r2, [r3, #20]
        break;
 80084e2:	e2f1      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_GTBF_VALUE_US:
        if(wValue < PH_NXPNFCRDLIB_CONFIG_B_TO_F_GT)
 80084e4:	883b      	ldrh	r3, [r7, #0]
 80084e6:	f643 32c3 	movw	r2, #15299	@ 0x3bc3
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d802      	bhi.n	80084f4 <phacDiscLoop_Sw_SetConfig+0x31c>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80084ee:	f244 0321 	movw	r3, #16417	@ 0x4021
 80084f2:	e2ea      	b.n	8008aca <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F424] = wValue;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	883a      	ldrh	r2, [r7, #0]
 80084f8:	82da      	strh	r2, [r3, #22]
        break;
 80084fa:	e2e5      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_GTV_VALUE_US:
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_V] = wValue;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	883a      	ldrh	r2, [r7, #0]
 8008500:	831a      	strh	r2, [r3, #24]
        break;
 8008502:	e2e1      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_GT18000P3M3_VALUE_US:
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_18000P3M3] = wValue;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	883a      	ldrh	r2, [r7, #0]
 8008508:	835a      	strh	r2, [r3, #26]
        break;
 800850a:	e2dd      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_EMVCO_PROP_OP_RF_RESET:
        if ((((uint8_t)wValue & PHAC_DISCLOOP_POS_BIT_MASK_A) == PHAC_DISCLOOP_POS_BIT_MASK_A) ||
 800850c:	883b      	ldrh	r3, [r7, #0]
 800850e:	b2db      	uxtb	r3, r3
 8008510:	f003 0301 	and.w	r3, r3, #1
 8008514:	2b00      	cmp	r3, #0
 8008516:	d105      	bne.n	8008524 <phacDiscLoop_Sw_SetConfig+0x34c>
            (((uint8_t)wValue & PHAC_DISCLOOP_POS_BIT_MASK_B) == PHAC_DISCLOOP_POS_BIT_MASK_B)
 8008518:	883b      	ldrh	r3, [r7, #0]
 800851a:	b2db      	uxtb	r3, r3
 800851c:	f003 0302 	and.w	r3, r3, #2
        if ((((uint8_t)wValue & PHAC_DISCLOOP_POS_BIT_MASK_A) == PHAC_DISCLOOP_POS_BIT_MASK_A) ||
 8008520:	2b00      	cmp	r3, #0
 8008522:	d002      	beq.n	800852a <phacDiscLoop_Sw_SetConfig+0x352>
            )
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_AC_DISCLOOP);
 8008524:	f244 0323 	movw	r3, #16419	@ 0x4023
 8008528:	e2cf      	b.n	8008aca <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->bEMVCoPropOpRfFieldReset = (uint8_t)wValue;
 800852a:	883b      	ldrh	r3, [r7, #0]
 800852c:	b2da      	uxtb	r2, r3
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
        break;
 8008534:	e2c8      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_GT_ACTIVE_US:
        pDataParams->wActPollGTimeUs = wValue;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	883a      	ldrh	r2, [r7, #0]
 800853a:	839a      	strh	r2, [r3, #28]
        break;
 800853c:	e2c4      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_BAIL_OUT:
        if (0u != (wValue & ~(PHAC_DISCLOOP_POS_BIT_MASK_A |  PHAC_DISCLOOP_POS_BIT_MASK_B
 800853e:	883b      	ldrh	r3, [r7, #0]
 8008540:	2b3f      	cmp	r3, #63	@ 0x3f
 8008542:	d902      	bls.n	800854a <phacDiscLoop_Sw_SetConfig+0x372>
            | PHAC_DISCLOOP_POS_BIT_MASK_F424 | PHAC_DISCLOOP_POS_BIT_MASK_F212
            | PHAC_DISCLOOP_POS_BIT_MASK_V | PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3)))
        {
            /* Invalid bail out option set */
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8008544:	f244 0321 	movw	r3, #16417	@ 0x4021
 8008548:	e2bf      	b.n	8008aca <phacDiscLoop_Sw_SetConfig+0x8f2>
        }

        pDataParams->bPasPollBailOut = (uint8_t) wValue;
 800854a:	883b      	ldrh	r3, [r7, #0]
 800854c:	b2da      	uxtb	r2, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	711a      	strb	r2, [r3, #4]
        break;
 8008552:	e2b9      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_OPE_MODE:
        if(!((wValue == RD_LIB_MODE_NFC) ||
 8008554:	883b      	ldrh	r3, [r7, #0]
 8008556:	2b02      	cmp	r3, #2
 8008558:	d008      	beq.n	800856c <phacDiscLoop_Sw_SetConfig+0x394>
 800855a:	883b      	ldrh	r3, [r7, #0]
 800855c:	2b01      	cmp	r3, #1
 800855e:	d005      	beq.n	800856c <phacDiscLoop_Sw_SetConfig+0x394>
 8008560:	883b      	ldrh	r3, [r7, #0]
 8008562:	2b03      	cmp	r3, #3
 8008564:	d002      	beq.n	800856c <phacDiscLoop_Sw_SetConfig+0x394>
            (wValue == RD_LIB_MODE_EMVCO) ||
            (wValue == RD_LIB_MODE_ISO)))
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8008566:	f244 0321 	movw	r3, #16417	@ 0x4021
 800856a:	e2ae      	b.n	8008aca <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->bOpeMode = (uint8_t)wValue;
 800856c:	883b      	ldrh	r3, [r7, #0]
 800856e:	b2da      	uxtb	r2, r3
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_OPE_MODE, wValue));
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800857a:	883a      	ldrh	r2, [r7, #0]
 800857c:	215a      	movs	r1, #90	@ 0x5a
 800857e:	4618      	mov	r0, r3
 8008580:	f006 f90a 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8008584:	4603      	mov	r3, r0
 8008586:	81fb      	strh	r3, [r7, #14]
 8008588:	89fb      	ldrh	r3, [r7, #14]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d001      	beq.n	8008592 <phacDiscLoop_Sw_SetConfig+0x3ba>
 800858e:	89fb      	ldrh	r3, [r7, #14]
 8008590:	e29b      	b.n	8008aca <phacDiscLoop_Sw_SetConfig+0x8f2>
#ifdef NXPBUILD__PHPAL_I14443P4_SW
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p4_SetConfig(pDataParams->pPal14443p4DataParams, PHPAL_I14443P4_CONFIG_OPE_MODE, wValue));
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008596:	883a      	ldrh	r2, [r7, #0]
 8008598:	2106      	movs	r1, #6
 800859a:	4618      	mov	r0, r3
 800859c:	f00e fd4c 	bl	8017038 <phpalI14443p4_Sw_SetConfig>
 80085a0:	4603      	mov	r3, r0
 80085a2:	81fb      	strh	r3, [r7, #14]
 80085a4:	89fb      	ldrh	r3, [r7, #14]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d001      	beq.n	80085ae <phacDiscLoop_Sw_SetConfig+0x3d6>
 80085aa:	89fb      	ldrh	r3, [r7, #14]
 80085ac:	e28d      	b.n	8008aca <phacDiscLoop_Sw_SetConfig+0x8f2>
#endif /* NXPBUILD__PHPAL_I14443P4_SW */

#ifdef NXPBUILD__PHPAL_I14443P3B_SW
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p3b_SetConfig(pDataParams->pPal1443p3bDataParams, PHPAL_I14443P3B_CONFIG_OPE_MODE, wValue));
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085b2:	883a      	ldrh	r2, [r7, #0]
 80085b4:	2101      	movs	r1, #1
 80085b6:	4618      	mov	r0, r3
 80085b8:	f00c fd10 	bl	8014fdc <phpalI14443p3b_Sw_SetConfig>
 80085bc:	4603      	mov	r3, r0
 80085be:	81fb      	strh	r3, [r7, #14]
 80085c0:	89fb      	ldrh	r3, [r7, #14]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d001      	beq.n	80085ca <phacDiscLoop_Sw_SetConfig+0x3f2>
 80085c6:	89fb      	ldrh	r3, [r7, #14]
 80085c8:	e27f      	b.n	8008aca <phacDiscLoop_Sw_SetConfig+0x8f2>
#endif /* NXPBUILD__PHPAL_I14443P3B_SW */

#ifdef NXPBUILD__PHPAL_I14443P3A_SW
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p3a_SetConfig(pDataParams->pPal1443p3aDataParams, PHPAL_I14443P3A_CONFIG_OPE_MODE, wValue));
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085ce:	883a      	ldrh	r2, [r7, #0]
 80085d0:	2101      	movs	r1, #1
 80085d2:	4618      	mov	r0, r3
 80085d4:	f00b fecd 	bl	8014372 <phpalI14443p3a_Sw_SetConfig>
 80085d8:	4603      	mov	r3, r0
 80085da:	81fb      	strh	r3, [r7, #14]
 80085dc:	89fb      	ldrh	r3, [r7, #14]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d001      	beq.n	80085e6 <phacDiscLoop_Sw_SetConfig+0x40e>
 80085e2:	89fb      	ldrh	r3, [r7, #14]
 80085e4:	e271      	b.n	8008aca <phacDiscLoop_Sw_SetConfig+0x8f2>
#endif /* NXPBUILD__PHPAL_I14443P3A_SW */

#ifdef NXPBUILD__PHPAL_I14443P4A_SW
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_SetConfig(pDataParams->pPal1443p4aDataParams, PHPAL_I14443P4A_CONFIG_OPE_MODE, wValue));
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085ea:	883a      	ldrh	r2, [r7, #0]
 80085ec:	2101      	movs	r1, #1
 80085ee:	4618      	mov	r0, r3
 80085f0:	f00e fdf4 	bl	80171dc <phpalI14443p4a_Sw_SetConfig>
 80085f4:	4603      	mov	r3, r0
 80085f6:	81fb      	strh	r3, [r7, #14]
 80085f8:	89fb      	ldrh	r3, [r7, #14]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d001      	beq.n	8008602 <phacDiscLoop_Sw_SetConfig+0x42a>
 80085fe:	89fb      	ldrh	r3, [r7, #14]
 8008600:	e263      	b.n	8008aca <phacDiscLoop_Sw_SetConfig+0x8f2>
#endif /* NXPBUILD__PHPAL_I14443P4A_SW */

#ifdef NXPBUILD__PHPAL_SLI15693_SW
        PH_CHECK_SUCCESS_FCT(status, phpalSli15693_SetConfig(pDataParams->pPalSli15693DataParams, PHPAL_SLI15693_CONFIG_OPE_MODE, wValue));
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008606:	883a      	ldrh	r2, [r7, #0]
 8008608:	210a      	movs	r1, #10
 800860a:	4618      	mov	r0, r3
 800860c:	f010 ff88 	bl	8019520 <phpalSli15693_Sw_SetConfig>
 8008610:	4603      	mov	r3, r0
 8008612:	81fb      	strh	r3, [r7, #14]
 8008614:	89fb      	ldrh	r3, [r7, #14]
 8008616:	2b00      	cmp	r3, #0
 8008618:	f000 8255 	beq.w	8008ac6 <phacDiscLoop_Sw_SetConfig+0x8ee>
 800861c:	89fb      	ldrh	r3, [r7, #14]
 800861e:	e254      	b.n	8008aca <phacDiscLoop_Sw_SetConfig+0x8f2>
#endif /* NXPBUILD__PHPAL_SLI15693_SW */
        break;

    case PHAC_DISCLOOP_CONFIG_ENABLE_LPCD:
        pDataParams->bLpcdEnabled = (uint8_t)wValue;
 8008620:	883b      	ldrh	r3, [r7, #0]
 8008622:	b2da      	uxtb	r2, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	77da      	strb	r2, [r3, #31]
        break;
 8008628:	e24e      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_EMVCO_PROF_FSCI_MAX:
        if ((wValue != 0x08) && (wValue != PH_NXPNFCRDLIB_CONFIG_DEFAULT_FSCI_VALUE))
 800862a:	883b      	ldrh	r3, [r7, #0]
 800862c:	2b08      	cmp	r3, #8
 800862e:	d005      	beq.n	800863c <phacDiscLoop_Sw_SetConfig+0x464>
 8008630:	883b      	ldrh	r3, [r7, #0]
 8008632:	2b08      	cmp	r3, #8
 8008634:	d002      	beq.n	800863c <phacDiscLoop_Sw_SetConfig+0x464>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8008636:	f244 0321 	movw	r3, #16417	@ 0x4021
 800863a:	e246      	b.n	8008aca <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->bFsciMax = (uint8_t)wValue;
 800863c:	883b      	ldrh	r3, [r7, #0]
 800863e:	b2da      	uxtb	r2, r3
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        break;
 8008646:	e23f      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS
    case PHAC_DISCLOOP_CONFIG_TYPEA_DEVICE_LIMIT:
        if ((wValue & 0xFFU) > PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED)
 8008648:	883b      	ldrh	r3, [r7, #0]
 800864a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800864e:	2b00      	cmp	r3, #0
 8008650:	d002      	beq.n	8008658 <phacDiscLoop_Sw_SetConfig+0x480>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8008652:	f244 0321 	movw	r3, #16417	@ 0x4021
 8008656:	e238      	b.n	8008aca <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A] = (uint8_t)wValue;
 8008658:	883b      	ldrh	r3, [r7, #0]
 800865a:	b2da      	uxtb	r2, r3
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	729a      	strb	r2, [r3, #10]
        break;
 8008660:	e232      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_SLEEP_STATE:
        if (((wValue & 0xFFU) != PH_ON) && ((wValue & 0xFFU) != PH_OFF))
 8008662:	883b      	ldrh	r3, [r7, #0]
 8008664:	b2db      	uxtb	r3, r3
 8008666:	2b01      	cmp	r3, #1
 8008668:	d006      	beq.n	8008678 <phacDiscLoop_Sw_SetConfig+0x4a0>
 800866a:	883b      	ldrh	r3, [r7, #0]
 800866c:	b2db      	uxtb	r3, r3
 800866e:	2b00      	cmp	r3, #0
 8008670:	d002      	beq.n	8008678 <phacDiscLoop_Sw_SetConfig+0x4a0>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8008672:	f244 0321 	movw	r3, #16417	@ 0x4021
 8008676:	e228      	b.n	8008aca <phacDiscLoop_Sw_SetConfig+0x8f2>
        }

        bIndex = (uint8_t)((wValue & 0xFF00U) >> 8U);
 8008678:	883b      	ldrh	r3, [r7, #0]
 800867a:	0a1b      	lsrs	r3, r3, #8
 800867c:	b29b      	uxth	r3, r3
 800867e:	737b      	strb	r3, [r7, #13]
        if (bIndex >= PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED)
 8008680:	7b7b      	ldrb	r3, [r7, #13]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d002      	beq.n	800868c <phacDiscLoop_Sw_SetConfig+0x4b4>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8008686:	f244 0321 	movw	r3, #16417	@ 0x4021
 800868a:	e21e      	b.n	8008aca <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].bSleep = (uint8_t)(wValue & 0xFFU);
 800868c:	7b7a      	ldrb	r2, [r7, #13]
 800868e:	883b      	ldrh	r3, [r7, #0]
 8008690:	b2d8      	uxtb	r0, r3
 8008692:	6879      	ldr	r1, [r7, #4]
 8008694:	4613      	mov	r3, r2
 8008696:	011b      	lsls	r3, r3, #4
 8008698:	1a9b      	subs	r3, r3, r2
 800869a:	440b      	add	r3, r1
 800869c:	336c      	adds	r3, #108	@ 0x6c
 800869e:	4602      	mov	r2, r0
 80086a0:	701a      	strb	r2, [r3, #0]
        break;
 80086a2:	e211      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS
    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_FSDI:
        if (wValue > PHPAL_I14443P4_FRAMESIZE_MAX)
 80086a4:	883b      	ldrh	r3, [r7, #0]
 80086a6:	2b0c      	cmp	r3, #12
 80086a8:	d902      	bls.n	80086b0 <phacDiscLoop_Sw_SetConfig+0x4d8>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80086aa:	f244 0321 	movw	r3, #16417	@ 0x4021
 80086ae:	e20c      	b.n	8008aca <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bFsdi = (uint8_t)wValue;
 80086b0:	883b      	ldrh	r3, [r7, #0]
 80086b2:	b2da      	uxtb	r2, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
        break;
 80086ba:	e205      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_CID:
        if (wValue > PHAC_DISCLOOP_SW_I3P4_MAX_CID)
 80086bc:	883b      	ldrh	r3, [r7, #0]
 80086be:	2b0e      	cmp	r3, #14
 80086c0:	d902      	bls.n	80086c8 <phacDiscLoop_Sw_SetConfig+0x4f0>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80086c2:	f244 0321 	movw	r3, #16417	@ 0x4021
 80086c6:	e200      	b.n	8008aca <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bCid = (uint8_t)wValue;
 80086c8:	883b      	ldrh	r3, [r7, #0]
 80086ca:	b2da      	uxtb	r2, r3
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
        break;
 80086d2:	e1f9      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_NAD:
        /* Valid NAD complaint with ISO/IEC 7816-3 shall be set by application. */
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bNad = (uint8_t)wValue;
 80086d4:	883b      	ldrh	r3, [r7, #0]
 80086d6:	b2da      	uxtb	r2, r3
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
        break;
 80086de:	e1f3      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_DRI:
        if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DRI) ||
 80086e0:	883b      	ldrh	r3, [r7, #0]
 80086e2:	2b03      	cmp	r3, #3
 80086e4:	d807      	bhi.n	80086f6 <phacDiscLoop_Sw_SetConfig+0x51e>
            ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P4A_DATARATE_106)))
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
        if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DRI) ||
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d105      	bne.n	80086fc <phacDiscLoop_Sw_SetConfig+0x524>
            ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P4A_DATARATE_106)))
 80086f0:	883b      	ldrh	r3, [r7, #0]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d002      	beq.n	80086fc <phacDiscLoop_Sw_SetConfig+0x524>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80086f6:	f244 0321 	movw	r3, #16417	@ 0x4021
 80086fa:	e1e6      	b.n	8008aca <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDri = (uint8_t)wValue;
 80086fc:	883b      	ldrh	r3, [r7, #0]
 80086fe:	b2da      	uxtb	r2, r3
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
        break;
 8008706:	e1df      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_DSI:
        if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DSI) ||
 8008708:	883b      	ldrh	r3, [r7, #0]
 800870a:	2b03      	cmp	r3, #3
 800870c:	d807      	bhi.n	800871e <phacDiscLoop_Sw_SetConfig+0x546>
            ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P4A_DATARATE_106)))
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
        if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DSI) ||
 8008714:	2b01      	cmp	r3, #1
 8008716:	d105      	bne.n	8008724 <phacDiscLoop_Sw_SetConfig+0x54c>
            ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P4A_DATARATE_106)))
 8008718:	883b      	ldrh	r3, [r7, #0]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d002      	beq.n	8008724 <phacDiscLoop_Sw_SetConfig+0x54c>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800871e:	f244 0321 	movw	r3, #16417	@ 0x4021
 8008722:	e1d2      	b.n	8008aca <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDsi = (uint8_t)wValue;
 8008724:	883b      	ldrh	r3, [r7, #0]
 8008726:	b2da      	uxtb	r2, r3
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
        break;
 800872e:	e1cb      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */

#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE)
    case PHAC_DISCLOOP_CONFIG_TYPEA_P2P_DID:
        if (wValue > PHPAL_I18092MPI_DID_MAX)
 8008730:	883b      	ldrh	r3, [r7, #0]
 8008732:	2b0e      	cmp	r3, #14
 8008734:	d902      	bls.n	800873c <phacDiscLoop_Sw_SetConfig+0x564>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8008736:	f244 0321 	movw	r3, #16417	@ 0x4021
 800873a:	e1c6      	b.n	8008aca <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeATargetInfo.sTypeA_P2P.bDid = (uint8_t)wValue;
 800873c:	883b      	ldrh	r3, [r7, #0]
 800873e:	b2da      	uxtb	r2, r3
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        break;
 8008746:	e1bf      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_P2P_LRI:
        if (wValue > PHPAL_I18092MPI_FRAMESIZE_254)
 8008748:	883b      	ldrh	r3, [r7, #0]
 800874a:	2b03      	cmp	r3, #3
 800874c:	d902      	bls.n	8008754 <phacDiscLoop_Sw_SetConfig+0x57c>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800874e:	f244 0321 	movw	r3, #16417	@ 0x4021
 8008752:	e1ba      	b.n	8008aca <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeATargetInfo.sTypeA_P2P.bLri = (uint8_t)wValue;
 8008754:	883b      	ldrh	r3, [r7, #0]
 8008756:	b2da      	uxtb	r2, r3
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
        break;
 800875e:	e1b3      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_P2P_NAD_ENABLE:
        if (wValue == 0U)
 8008760:	883b      	ldrh	r3, [r7, #0]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d104      	bne.n	8008770 <phacDiscLoop_Sw_SetConfig+0x598>
        {
            pDataParams->sTypeATargetInfo.sTypeA_P2P.bNadEnable = PH_OFF;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2200      	movs	r2, #0
 800876a:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
        }
        else
        {
            pDataParams->sTypeATargetInfo.sTypeA_P2P.bNadEnable = PH_ON;
        }
        break;
 800876e:	e1ab      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>
            pDataParams->sTypeATargetInfo.sTypeA_P2P.bNadEnable = PH_ON;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2201      	movs	r2, #1
 8008774:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
        break;
 8008778:	e1a6      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_P2P_NAD:
        if (wValue > 255U)
 800877a:	883b      	ldrh	r3, [r7, #0]
 800877c:	2bff      	cmp	r3, #255	@ 0xff
 800877e:	d902      	bls.n	8008786 <phacDiscLoop_Sw_SetConfig+0x5ae>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8008780:	f244 0321 	movw	r3, #16417	@ 0x4021
 8008784:	e1a1      	b.n	8008aca <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeATargetInfo.sTypeA_P2P.bNad = (uint8_t)wValue;
 8008786:	883b      	ldrh	r3, [r7, #0]
 8008788:	b2da      	uxtb	r2, r3
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
        break;
 8008790:	e19a      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_P2P_GI_LEN:
        if (wValue > PHPAL_I18092MPI_MAX_GI_LENGTH)
 8008792:	883b      	ldrh	r3, [r7, #0]
 8008794:	2b30      	cmp	r3, #48	@ 0x30
 8008796:	d902      	bls.n	800879e <phacDiscLoop_Sw_SetConfig+0x5c6>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8008798:	f244 0321 	movw	r3, #16417	@ 0x4021
 800879c:	e195      	b.n	8008aca <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeATargetInfo.sTypeA_P2P.bGiLength = (uint8_t)wValue;
 800879e:	883b      	ldrh	r3, [r7, #0]
 80087a0:	b2da      	uxtb	r2, r3
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
        break;
 80087a8:	e18e      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    case PHAC_DISCLOOP_CONFIG_TYPEB_DEVICE_LIMIT:
    if ((wValue & 0xFFU) > PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED)
 80087aa:	883b      	ldrh	r3, [r7, #0]
 80087ac:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d002      	beq.n	80087ba <phacDiscLoop_Sw_SetConfig+0x5e2>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80087b4:	f244 0321 	movw	r3, #16417	@ 0x4021
 80087b8:	e187      	b.n	8008aca <phacDiscLoop_Sw_SetConfig+0x8f2>
    }
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_B] = (uint8_t)wValue;
 80087ba:	883b      	ldrh	r3, [r7, #0]
 80087bc:	b2da      	uxtb	r2, r3
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	72da      	strb	r2, [r3, #11]
    break;
 80087c2:	e181      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEB_AFI_REQ:
      pDataParams->sTypeBTargetInfo.bAfiReq = (uint8_t)wValue;
 80087c4:	883b      	ldrh	r3, [r7, #0]
 80087c6:	b2da      	uxtb	r2, r3
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1
      break;
 80087ce:	e17b      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEB_EXTATQB:
      if (wValue == 0U)
 80087d0:	883b      	ldrh	r3, [r7, #0]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d104      	bne.n	80087e0 <phacDiscLoop_Sw_SetConfig+0x608>
      {
          pDataParams->sTypeBTargetInfo.bExtendedAtqBbit = 0;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
      }
      else
      {
          pDataParams->sTypeBTargetInfo.bExtendedAtqBbit = 1;
      }
      break;
 80087de:	e173      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>
          pDataParams->sTypeBTargetInfo.bExtendedAtqBbit = 1;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2201      	movs	r2, #1
 80087e4:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
      break;
 80087e8:	e16e      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEB_FSDI:
      if (wValue > PHPAL_I14443P3B_FRAMESIZE_MAX)
 80087ea:	883b      	ldrh	r3, [r7, #0]
 80087ec:	2b0c      	cmp	r3, #12
 80087ee:	d902      	bls.n	80087f6 <phacDiscLoop_Sw_SetConfig+0x61e>
      {
          return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80087f0:	f244 0321 	movw	r3, #16417	@ 0x4021
 80087f4:	e169      	b.n	8008aca <phacDiscLoop_Sw_SetConfig+0x8f2>
      }
      pDataParams->sTypeBTargetInfo.bFsdi = (uint8_t)wValue;
 80087f6:	883b      	ldrh	r3, [r7, #0]
 80087f8:	b2da      	uxtb	r2, r3
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4
      break;
 8008800:	e162      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEB_CID:
      if (wValue > PHAC_DISCLOOP_SW_I3P4_MAX_CID)
 8008802:	883b      	ldrh	r3, [r7, #0]
 8008804:	2b0e      	cmp	r3, #14
 8008806:	d902      	bls.n	800880e <phacDiscLoop_Sw_SetConfig+0x636>
      {
          return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8008808:	f244 0321 	movw	r3, #16417	@ 0x4021
 800880c:	e15d      	b.n	8008aca <phacDiscLoop_Sw_SetConfig+0x8f2>
      }
      pDataParams->sTypeBTargetInfo.bCid = (uint8_t)wValue;
 800880e:	883b      	ldrh	r3, [r7, #0]
 8008810:	b2da      	uxtb	r2, r3
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5
      break;
 8008818:	e156      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEB_NAD:
        /* Valid NAD complaint with ISO/IEC 7816-3 shall be set by application. */
        pDataParams->sTypeBTargetInfo.bNad = (uint8_t)wValue;
 800881a:	883b      	ldrh	r3, [r7, #0]
 800881c:	b2da      	uxtb	r2, r3
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f883 20c6 	strb.w	r2, [r3, #198]	@ 0xc6
        break;
 8008824:	e150      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEB_DRI:
      if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DRI) ||
 8008826:	883b      	ldrh	r3, [r7, #0]
 8008828:	2b03      	cmp	r3, #3
 800882a:	d807      	bhi.n	800883c <phacDiscLoop_Sw_SetConfig+0x664>
          ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P3B_DATARATE_106)))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
      if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DRI) ||
 8008832:	2b01      	cmp	r3, #1
 8008834:	d105      	bne.n	8008842 <phacDiscLoop_Sw_SetConfig+0x66a>
          ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P3B_DATARATE_106)))
 8008836:	883b      	ldrh	r3, [r7, #0]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d002      	beq.n	8008842 <phacDiscLoop_Sw_SetConfig+0x66a>
      {
          return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800883c:	f244 0321 	movw	r3, #16417	@ 0x4021
 8008840:	e143      	b.n	8008aca <phacDiscLoop_Sw_SetConfig+0x8f2>
      }
      pDataParams->sTypeBTargetInfo.bDri = (uint8_t)wValue;
 8008842:	883b      	ldrh	r3, [r7, #0]
 8008844:	b2da      	uxtb	r2, r3
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f883 20c7 	strb.w	r2, [r3, #199]	@ 0xc7
      break;
 800884c:	e13c      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEB_DSI:
      if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DSI) ||
 800884e:	883b      	ldrh	r3, [r7, #0]
 8008850:	2b03      	cmp	r3, #3
 8008852:	d807      	bhi.n	8008864 <phacDiscLoop_Sw_SetConfig+0x68c>
          ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P3B_DATARATE_106)))
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
      if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DSI) ||
 800885a:	2b01      	cmp	r3, #1
 800885c:	d105      	bne.n	800886a <phacDiscLoop_Sw_SetConfig+0x692>
          ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P3B_DATARATE_106)))
 800885e:	883b      	ldrh	r3, [r7, #0]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d002      	beq.n	800886a <phacDiscLoop_Sw_SetConfig+0x692>
      {
          return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8008864:	f244 0321 	movw	r3, #16417	@ 0x4021
 8008868:	e12f      	b.n	8008aca <phacDiscLoop_Sw_SetConfig+0x8f2>
      }
      pDataParams->sTypeBTargetInfo.bDsi = (uint8_t)wValue;
 800886a:	883b      	ldrh	r3, [r7, #0]
 800886c:	b2da      	uxtb	r2, r3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
      break;
 8008874:	e128      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEB_SLEEP_STATE:
        if (((wValue & 0xFFU) != PH_ON) && ((wValue & 0xFFU) != PH_OFF))
 8008876:	883b      	ldrh	r3, [r7, #0]
 8008878:	b2db      	uxtb	r3, r3
 800887a:	2b01      	cmp	r3, #1
 800887c:	d006      	beq.n	800888c <phacDiscLoop_Sw_SetConfig+0x6b4>
 800887e:	883b      	ldrh	r3, [r7, #0]
 8008880:	b2db      	uxtb	r3, r3
 8008882:	2b00      	cmp	r3, #0
 8008884:	d002      	beq.n	800888c <phacDiscLoop_Sw_SetConfig+0x6b4>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8008886:	f244 0321 	movw	r3, #16417	@ 0x4021
 800888a:	e11e      	b.n	8008aca <phacDiscLoop_Sw_SetConfig+0x8f2>
        }

        bIndex = (uint8_t)((wValue & 0xFF00U) >> 8U);
 800888c:	883b      	ldrh	r3, [r7, #0]
 800888e:	0a1b      	lsrs	r3, r3, #8
 8008890:	b29b      	uxth	r3, r3
 8008892:	737b      	strb	r3, [r7, #13]
        if (bIndex >= PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED)
 8008894:	7b7b      	ldrb	r3, [r7, #13]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d002      	beq.n	80088a0 <phacDiscLoop_Sw_SetConfig+0x6c8>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800889a:	f244 0321 	movw	r3, #16417	@ 0x4021
 800889e:	e114      	b.n	8008aca <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bIndex].bSleep = (uint8_t)(wValue & 0xFFU);
 80088a0:	7b7a      	ldrb	r2, [r7, #13]
 80088a2:	883b      	ldrh	r3, [r7, #0]
 80088a4:	b2d8      	uxtb	r0, r3
 80088a6:	6879      	ldr	r1, [r7, #4]
 80088a8:	4613      	mov	r3, r2
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	4413      	add	r3, r2
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	440b      	add	r3, r1
 80088b2:	33dc      	adds	r3, #220	@ 0xdc
 80088b4:	4602      	mov	r2, r0
 80088b6:	701a      	strb	r2, [r3, #0]
        break;
 80088b8:	e106      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    case PHAC_DISCLOOP_CONFIG_TYPEF_CUR_BAUD:
        pDataParams->bFelicaBaud = (uint8_t)wValue;
 80088ba:	883b      	ldrh	r3, [r7, #0]
 80088bc:	b2da      	uxtb	r2, r3
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        break;
 80088c4:	e100      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEF_DEVICE_LIMIT:
        if ((wValue & 0xFFU) > PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED)
 80088c6:	883b      	ldrh	r3, [r7, #0]
 80088c8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d002      	beq.n	80088d6 <phacDiscLoop_Sw_SetConfig+0x6fe>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80088d0:	f244 0321 	movw	r3, #16417	@ 0x4021
 80088d4:	e0f9      	b.n	8008aca <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F212] = (uint8_t)wValue;
 80088d6:	883b      	ldrh	r3, [r7, #0]
 80088d8:	b2da      	uxtb	r2, r3
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	731a      	strb	r2, [r3, #12]
        break;
 80088de:	e0f3      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */

#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS)  || defined(NXPBUILD__PHAC_DISCLOOP_TYPEF212_P2P_ACTIVE) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE)
    case PHAC_DISCLOOP_CONFIG_TYPEF_P2P_DID:
        if (wValue > PHPAL_I18092MPI_DID_MAX)
 80088e0:	883b      	ldrh	r3, [r7, #0]
 80088e2:	2b0e      	cmp	r3, #14
 80088e4:	d902      	bls.n	80088ec <phacDiscLoop_Sw_SetConfig+0x714>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80088e6:	f244 0321 	movw	r3, #16417	@ 0x4021
 80088ea:	e0ee      	b.n	8008aca <phacDiscLoop_Sw_SetConfig+0x8f2>
        }

        pDataParams->sTypeFTargetInfo.sTypeF_P2P.bDid = (uint8_t)wValue;
 80088ec:	883b      	ldrh	r3, [r7, #0]
 80088ee:	b2da      	uxtb	r2, r3
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
        break;
 80088f6:	e0e7      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEF_P2P_LRI:
        if (wValue > PHPAL_I18092MPI_FRAMESIZE_254)
 80088f8:	883b      	ldrh	r3, [r7, #0]
 80088fa:	2b03      	cmp	r3, #3
 80088fc:	d902      	bls.n	8008904 <phacDiscLoop_Sw_SetConfig+0x72c>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80088fe:	f244 0321 	movw	r3, #16417	@ 0x4021
 8008902:	e0e2      	b.n	8008aca <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeFTargetInfo.sTypeF_P2P.bLri = (uint8_t)wValue;
 8008904:	883b      	ldrh	r3, [r7, #0]
 8008906:	b2da      	uxtb	r2, r3
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
        break;
 800890e:	e0db      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEF_P2P_NAD_ENABLE:
        pDataParams->sTypeFTargetInfo.sTypeF_P2P.bNadEnable = (uint8_t)wValue;
 8008910:	883b      	ldrh	r3, [r7, #0]
 8008912:	b2da      	uxtb	r2, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
        break;
 800891a:	e0d5      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEF_P2P_NAD:
        if (wValue > 255U)
 800891c:	883b      	ldrh	r3, [r7, #0]
 800891e:	2bff      	cmp	r3, #255	@ 0xff
 8008920:	d902      	bls.n	8008928 <phacDiscLoop_Sw_SetConfig+0x750>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8008922:	f244 0321 	movw	r3, #16417	@ 0x4021
 8008926:	e0d0      	b.n	8008aca <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeFTargetInfo.sTypeF_P2P.bNad = (uint8_t)wValue;
 8008928:	883b      	ldrh	r3, [r7, #0]
 800892a:	b2da      	uxtb	r2, r3
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f883 20af 	strb.w	r2, [r3, #175]	@ 0xaf
        break;
 8008932:	e0c9      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEF_P2P_GI_LEN:
        if (wValue > PHPAL_I18092MPI_MAX_GI_LENGTH)
 8008934:	883b      	ldrh	r3, [r7, #0]
 8008936:	2b30      	cmp	r3, #48	@ 0x30
 8008938:	d902      	bls.n	8008940 <phacDiscLoop_Sw_SetConfig+0x768>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800893a:	f244 0321 	movw	r3, #16417	@ 0x4021
 800893e:	e0c4      	b.n	8008aca <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeFTargetInfo.sTypeF_P2P.bGiLength = (uint8_t)wValue;
 8008940:	883b      	ldrh	r3, [r7, #0]
 8008942:	b2da      	uxtb	r2, r3
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
        break;
 800894a:	e0bd      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    case PHAC_DISCLOOP_CONFIG_TYPEV_DEVICE_LIMIT:
        if ((wValue & 0xFFU) > PHAC_DISCLOOP_CFG_MAX_VICINITY_CARDS_SUPPORTED)
 800894c:	883b      	ldrh	r3, [r7, #0]
 800894e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008952:	2b00      	cmp	r3, #0
 8008954:	d002      	beq.n	800895c <phacDiscLoop_Sw_SetConfig+0x784>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8008956:	f244 0321 	movw	r3, #16417	@ 0x4021
 800895a:	e0b6      	b.n	8008aca <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V] = (uint8_t)wValue;
 800895c:	883b      	ldrh	r3, [r7, #0]
 800895e:	b2da      	uxtb	r2, r3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	739a      	strb	r2, [r3, #14]
        break;
 8008964:	e0b0      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEV_RX_DATA_RATE:
        if((wValue != PHHAL_HW_RF_RX_DATARATE_HIGH)
 8008966:	883b      	ldrh	r3, [r7, #0]
 8008968:	2b0d      	cmp	r3, #13
 800896a:	d005      	beq.n	8008978 <phacDiscLoop_Sw_SetConfig+0x7a0>
           && (wValue != PHHAL_HW_RF_RX_DATARATE_LOW))
 800896c:	883b      	ldrh	r3, [r7, #0]
 800896e:	2b0c      	cmp	r3, #12
 8008970:	d002      	beq.n	8008978 <phacDiscLoop_Sw_SetConfig+0x7a0>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8008972:	f244 0321 	movw	r3, #16417	@ 0x4021
 8008976:	e0a8      	b.n	8008aca <phacDiscLoop_Sw_SetConfig+0x8f2>
        }

        /* Set request flag to indicate high data rate */
        if(wValue == PHHAL_HW_RF_RX_DATARATE_HIGH)
 8008978:	883b      	ldrh	r3, [r7, #0]
 800897a:	2b0d      	cmp	r3, #13
 800897c:	d109      	bne.n	8008992 <phacDiscLoop_Sw_SetConfig+0x7ba>
        {
            pDataParams->sTypeVTargetInfo.bFlag |= PHPAL_SLI15693_FLAG_DATA_RATE;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 8008984:	f043 0302 	orr.w	r3, r3, #2
 8008988:	b2da      	uxtb	r2, r3
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
        }
        else
        {
            pDataParams->sTypeVTargetInfo.bFlag &= ~((uint8_t)PHPAL_SLI15693_FLAG_DATA_RATE);
        }
        break;
 8008990:	e09a      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>
            pDataParams->sTypeVTargetInfo.bFlag &= ~((uint8_t)PHPAL_SLI15693_FLAG_DATA_RATE);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 8008998:	f023 0302 	bic.w	r3, r3, #2
 800899c:	b2da      	uxtb	r2, r3
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
        break;
 80089a4:	e090      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEV_MODE:
        if((wValue != PHPAL_SLI15693_FLAG_ADDRESSED)
 80089a6:	883b      	ldrh	r3, [r7, #0]
 80089a8:	2b20      	cmp	r3, #32
 80089aa:	d008      	beq.n	80089be <phacDiscLoop_Sw_SetConfig+0x7e6>
           && (wValue != PHPAL_SLI15693_FLAG_SELECTED) && (wValue != PHPAL_SLI15693_FLAG_NON_ADDRESSED))
 80089ac:	883b      	ldrh	r3, [r7, #0]
 80089ae:	2b10      	cmp	r3, #16
 80089b0:	d005      	beq.n	80089be <phacDiscLoop_Sw_SetConfig+0x7e6>
 80089b2:	883b      	ldrh	r3, [r7, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d002      	beq.n	80089be <phacDiscLoop_Sw_SetConfig+0x7e6>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80089b8:	f244 0321 	movw	r3, #16417	@ 0x4021
 80089bc:	e085      	b.n	8008aca <phacDiscLoop_Sw_SetConfig+0x8f2>
        }

        /* Save previous Flags value */
        PH_CHECK_SUCCESS_FCT(status, phpalSli15693_GetConfig(pDataParams->pPalSli15693DataParams, PHPAL_SLI15693_CONFIG_FLAGS, &wSliConfigFlags));
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089c2:	f107 020a 	add.w	r2, r7, #10
 80089c6:	2100      	movs	r1, #0
 80089c8:	4618      	mov	r0, r3
 80089ca:	f010 ff7f 	bl	80198cc <phpalSli15693_Sw_GetConfig>
 80089ce:	4603      	mov	r3, r0
 80089d0:	81fb      	strh	r3, [r7, #14]
 80089d2:	89fb      	ldrh	r3, [r7, #14]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d001      	beq.n	80089dc <phacDiscLoop_Sw_SetConfig+0x804>
 80089d8:	89fb      	ldrh	r3, [r7, #14]
 80089da:	e076      	b.n	8008aca <phacDiscLoop_Sw_SetConfig+0x8f2>

        if(wValue == PHPAL_SLI15693_FLAG_SELECTED)
 80089dc:	883b      	ldrh	r3, [r7, #0]
 80089de:	2b10      	cmp	r3, #16
 80089e0:	d10a      	bne.n	80089f8 <phacDiscLoop_Sw_SetConfig+0x820>
        {
            /* Set the Select_flag and clear the Adress_flag */
            wSliConfigFlags |= PHPAL_SLI15693_FLAG_SELECTED;
 80089e2:	897b      	ldrh	r3, [r7, #10]
 80089e4:	f043 0310 	orr.w	r3, r3, #16
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	817b      	strh	r3, [r7, #10]
            wSliConfigFlags &= (uint8_t)~(uint8_t)PHPAL_SLI15693_FLAG_ADDRESSED;
 80089ec:	897b      	ldrh	r3, [r7, #10]
 80089ee:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	817b      	strh	r3, [r7, #10]
 80089f6:	e017      	b.n	8008a28 <phacDiscLoop_Sw_SetConfig+0x850>
        }
        else if(wValue == PHPAL_SLI15693_FLAG_ADDRESSED)
 80089f8:	883b      	ldrh	r3, [r7, #0]
 80089fa:	2b20      	cmp	r3, #32
 80089fc:	d10a      	bne.n	8008a14 <phacDiscLoop_Sw_SetConfig+0x83c>
        {
            /* Set the Adress_flag and clear the Select_flag */
            wSliConfigFlags |= PHPAL_SLI15693_FLAG_ADDRESSED;
 80089fe:	897b      	ldrh	r3, [r7, #10]
 8008a00:	f043 0320 	orr.w	r3, r3, #32
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	817b      	strh	r3, [r7, #10]
            wSliConfigFlags &= (uint8_t)~(uint8_t)PHPAL_SLI15693_FLAG_SELECTED;
 8008a08:	897b      	ldrh	r3, [r7, #10]
 8008a0a:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	817b      	strh	r3, [r7, #10]
 8008a12:	e009      	b.n	8008a28 <phacDiscLoop_Sw_SetConfig+0x850>
        }
        else
        {
            /* Clear both Adress_flag and Select_flag */
            wSliConfigFlags &= (uint8_t)~(uint8_t)PHPAL_SLI15693_FLAG_ADDRESSED;
 8008a14:	897b      	ldrh	r3, [r7, #10]
 8008a16:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	817b      	strh	r3, [r7, #10]
            wSliConfigFlags &= (uint8_t)~(uint8_t)PHPAL_SLI15693_FLAG_SELECTED;
 8008a1e:	897b      	ldrh	r3, [r7, #10]
 8008a20:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	817b      	strh	r3, [r7, #10]
        }

        /* Update Flags value */
        PH_CHECK_SUCCESS_FCT(status, phpalSli15693_SetConfig(pDataParams->pPalSli15693DataParams, PHPAL_SLI15693_CONFIG_FLAGS, wSliConfigFlags));
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a2c:	897a      	ldrh	r2, [r7, #10]
 8008a2e:	2100      	movs	r1, #0
 8008a30:	4618      	mov	r0, r3
 8008a32:	f010 fd75 	bl	8019520 <phpalSli15693_Sw_SetConfig>
 8008a36:	4603      	mov	r3, r0
 8008a38:	81fb      	strh	r3, [r7, #14]
 8008a3a:	89fb      	ldrh	r3, [r7, #14]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d001      	beq.n	8008a44 <phacDiscLoop_Sw_SetConfig+0x86c>
 8008a40:	89fb      	ldrh	r3, [r7, #14]
 8008a42:	e042      	b.n	8008aca <phacDiscLoop_Sw_SetConfig+0x8f2>

        pDataParams->sTypeVTargetInfo.bMode = (uint8_t)wValue;
 8008a44:	883b      	ldrh	r3, [r7, #0]
 8008a46:	b2da      	uxtb	r2, r3
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f883 20e1 	strb.w	r2, [r3, #225]	@ 0xe1
        break;
 8008a4e:	e03b      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    case PHAC_DISCLOOP_CONFIG_18000P3M3_DEVICE_LIMIT:
        if ((wValue & 0xFFU) > PHAC_DISCLOOP_CFG_MAX_VICINITY_CARDS_SUPPORTED)
 8008a50:	883b      	ldrh	r3, [r7, #0]
 8008a52:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d002      	beq.n	8008a60 <phacDiscLoop_Sw_SetConfig+0x888>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8008a5a:	f244 0321 	movw	r3, #16417	@ 0x4021
 8008a5e:	e034      	b.n	8008aca <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_18000P3M3] = (uint8_t)wValue;
 8008a60:	883b      	ldrh	r3, [r7, #0]
 8008a62:	b2da      	uxtb	r2, r3
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	73da      	strb	r2, [r3, #15]
        break;
 8008a68:	e02e      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_I18000P3M3_MODULATION:
        if((wValue != PHPAL_I18000P3M3_M_MANCHESTER_2)
 8008a6a:	883b      	ldrh	r3, [r7, #0]
 8008a6c:	2b02      	cmp	r3, #2
 8008a6e:	d005      	beq.n	8008a7c <phacDiscLoop_Sw_SetConfig+0x8a4>
           && (wValue != PHPAL_I18000P3M3_M_MANCHESTER_4))
 8008a70:	883b      	ldrh	r3, [r7, #0]
 8008a72:	2b03      	cmp	r3, #3
 8008a74:	d002      	beq.n	8008a7c <phacDiscLoop_Sw_SetConfig+0x8a4>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8008a76:	f244 0321 	movw	r3, #16417	@ 0x4021
 8008a7a:	e026      	b.n	8008aca <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sI18000p3m3TargetInfo.bM = (uint8_t)wValue;
 8008a7c:	883b      	ldrh	r3, [r7, #0]
 8008a7e:	b2da      	uxtb	r2, r3
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
        break;
 8008a86:	e01f      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_I18000P3M3_FREQUENCY:
        if((wValue != PHPAL_I18000P3M3_LF_423KHZ)
 8008a88:	883b      	ldrh	r3, [r7, #0]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d005      	beq.n	8008a9a <phacDiscLoop_Sw_SetConfig+0x8c2>
           && (wValue != PHPAL_I18000P3M3_LF_847KHZ))
 8008a8e:	883b      	ldrh	r3, [r7, #0]
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d002      	beq.n	8008a9a <phacDiscLoop_Sw_SetConfig+0x8c2>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8008a94:	f244 0321 	movw	r3, #16417	@ 0x4021
 8008a98:	e017      	b.n	8008aca <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sI18000p3m3TargetInfo.bDr = (uint8_t)wValue;
 8008a9a:	883b      	ldrh	r3, [r7, #0]
 8008a9c:	b2da      	uxtb	r2, r3
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
        break;
 8008aa4:	e010      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>

#endif /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TARGET
    case PHAC_DISCLOOP_CONFIG_TARGET_RETRY_COUNT:
        if (wValue > 255U)
 8008aa6:	883b      	ldrh	r3, [r7, #0]
 8008aa8:	2bff      	cmp	r3, #255	@ 0xff
 8008aaa:	d902      	bls.n	8008ab2 <phacDiscLoop_Sw_SetConfig+0x8da>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8008aac:	f244 0321 	movw	r3, #16417	@ 0x4021
 8008ab0:	e00b      	b.n	8008aca <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTargetParams.bRetryCount = (uint8_t)wValue;
 8008ab2:	883b      	ldrh	r3, [r7, #0]
 8008ab4:	b2da      	uxtb	r2, r3
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
        break;
 8008abc:	e004      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>
#endif /* NXPBUILD__PHAC_DISCLOOP_TARGET */

    default:
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8008abe:	f244 0321 	movw	r3, #16417	@ 0x4021
 8008ac2:	81fb      	strh	r3, [r7, #14]
 8008ac4:	e000      	b.n	8008ac8 <phacDiscLoop_Sw_SetConfig+0x8f0>
        break;
 8008ac6:	bf00      	nop
    }

    return status;
 8008ac8:	89fb      	ldrh	r3, [r7, #14]
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3710      	adds	r7, #16
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	bf00      	nop

08008ad4 <phacDiscLoop_Sw_GetConfig>:
phStatus_t phacDiscLoop_Sw_GetConfig(
                                     phacDiscLoop_Sw_DataParams_t * pDataParams,
                                     uint16_t wConfig,
                                     uint16_t * pValue
                                     )
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b087      	sub	sp, #28
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	60f8      	str	r0, [r7, #12]
 8008adc:	460b      	mov	r3, r1
 8008ade:	607a      	str	r2, [r7, #4]
 8008ae0:	817b      	strh	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	82fb      	strh	r3, [r7, #22]

    switch(wConfig)
 8008ae6:	897b      	ldrh	r3, [r7, #10]
 8008ae8:	2b92      	cmp	r3, #146	@ 0x92
 8008aea:	f200 82a4 	bhi.w	8009036 <phacDiscLoop_Sw_GetConfig+0x562>
 8008aee:	a201      	add	r2, pc, #4	@ (adr r2, 8008af4 <phacDiscLoop_Sw_GetConfig+0x20>)
 8008af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af4:	08008dfd 	.word	0x08008dfd
 8008af8:	08008ebb 	.word	0x08008ebb
 8008afc:	08008f09 	.word	0x08008f09
 8008b00:	08008f13 	.word	0x08008f13
 8008b04:	08008f99 	.word	0x08008f99
 8008b08:	08008fe9 	.word	0x08008fe9
 8008b0c:	08008dd7 	.word	0x08008dd7
 8008b10:	08009037 	.word	0x08009037
 8008b14:	08009037 	.word	0x08009037
 8008b18:	08009037 	.word	0x08009037
 8008b1c:	08009037 	.word	0x08009037
 8008b20:	08009037 	.word	0x08009037
 8008b24:	08009037 	.word	0x08009037
 8008b28:	08009037 	.word	0x08009037
 8008b2c:	08009037 	.word	0x08009037
 8008b30:	08009037 	.word	0x08009037
 8008b34:	08008e15 	.word	0x08008e15
 8008b38:	08008ed3 	.word	0x08008ed3
 8008b3c:	08008f2b 	.word	0x08008f2b
 8008b40:	08008fa3 	.word	0x08008fa3
 8008b44:	08008ff3 	.word	0x08008ff3
 8008b48:	08009037 	.word	0x08009037
 8008b4c:	08009037 	.word	0x08009037
 8008b50:	08009037 	.word	0x08009037
 8008b54:	08009037 	.word	0x08009037
 8008b58:	08009037 	.word	0x08009037
 8008b5c:	08009037 	.word	0x08009037
 8008b60:	08009037 	.word	0x08009037
 8008b64:	08009037 	.word	0x08009037
 8008b68:	08009037 	.word	0x08009037
 8008b6c:	08009037 	.word	0x08009037
 8008b70:	08009037 	.word	0x08009037
 8008b74:	08008e07 	.word	0x08008e07
 8008b78:	08008ec5 	.word	0x08008ec5
 8008b7c:	08008f1d 	.word	0x08008f1d
 8008b80:	08008faf 	.word	0x08008faf
 8008b84:	08008fff 	.word	0x08008fff
 8008b88:	08008edf 	.word	0x08008edf
 8008b8c:	08009037 	.word	0x08009037
 8008b90:	08009037 	.word	0x08009037
 8008b94:	08009037 	.word	0x08009037
 8008b98:	08009037 	.word	0x08009037
 8008b9c:	08009037 	.word	0x08009037
 8008ba0:	08009037 	.word	0x08009037
 8008ba4:	08009037 	.word	0x08009037
 8008ba8:	08009037 	.word	0x08009037
 8008bac:	08009037 	.word	0x08009037
 8008bb0:	08009037 	.word	0x08009037
 8008bb4:	08009037 	.word	0x08009037
 8008bb8:	08009037 	.word	0x08009037
 8008bbc:	08009037 	.word	0x08009037
 8008bc0:	08009037 	.word	0x08009037
 8008bc4:	08009037 	.word	0x08009037
 8008bc8:	08008eed 	.word	0x08008eed
 8008bcc:	08008efb 	.word	0x08008efb
 8008bd0:	08009037 	.word	0x08009037
 8008bd4:	08009037 	.word	0x08009037
 8008bd8:	08009037 	.word	0x08009037
 8008bdc:	08009037 	.word	0x08009037
 8008be0:	08009037 	.word	0x08009037
 8008be4:	08009037 	.word	0x08009037
 8008be8:	08009037 	.word	0x08009037
 8008bec:	08009037 	.word	0x08009037
 8008bf0:	08009037 	.word	0x08009037
 8008bf4:	08008e21 	.word	0x08008e21
 8008bf8:	08008e2f 	.word	0x08008e2f
 8008bfc:	08008e3d 	.word	0x08008e3d
 8008c00:	08008e59 	.word	0x08008e59
 8008c04:	08008e4b 	.word	0x08008e4b
 8008c08:	08008e67 	.word	0x08008e67
 8008c0c:	08008e75 	.word	0x08008e75
 8008c10:	08008e83 	.word	0x08008e83
 8008c14:	08008e91 	.word	0x08008e91
 8008c18:	08008e9f 	.word	0x08008e9f
 8008c1c:	08009037 	.word	0x08009037
 8008c20:	08009037 	.word	0x08009037
 8008c24:	08009037 	.word	0x08009037
 8008c28:	08009037 	.word	0x08009037
 8008c2c:	08009037 	.word	0x08009037
 8008c30:	08009037 	.word	0x08009037
 8008c34:	08008ead 	.word	0x08008ead
 8008c38:	08008f45 	.word	0x08008f45
 8008c3c:	08008f53 	.word	0x08008f53
 8008c40:	08008f61 	.word	0x08008f61
 8008c44:	08008f6f 	.word	0x08008f6f
 8008c48:	08008f7d 	.word	0x08008f7d
 8008c4c:	08008f8b 	.word	0x08008f8b
 8008c50:	08008f37 	.word	0x08008f37
 8008c54:	08009037 	.word	0x08009037
 8008c58:	08009037 	.word	0x08009037
 8008c5c:	08009037 	.word	0x08009037
 8008c60:	08009037 	.word	0x08009037
 8008c64:	08009037 	.word	0x08009037
 8008c68:	08009037 	.word	0x08009037
 8008c6c:	08009037 	.word	0x08009037
 8008c70:	08009037 	.word	0x08009037
 8008c74:	08008fbd 	.word	0x08008fbd
 8008c78:	08008fdb 	.word	0x08008fdb
 8008c7c:	08009037 	.word	0x08009037
 8008c80:	08009037 	.word	0x08009037
 8008c84:	08009037 	.word	0x08009037
 8008c88:	08009037 	.word	0x08009037
 8008c8c:	08009037 	.word	0x08009037
 8008c90:	08009037 	.word	0x08009037
 8008c94:	08009037 	.word	0x08009037
 8008c98:	08009037 	.word	0x08009037
 8008c9c:	08009037 	.word	0x08009037
 8008ca0:	08009037 	.word	0x08009037
 8008ca4:	08009037 	.word	0x08009037
 8008ca8:	08009037 	.word	0x08009037
 8008cac:	08009037 	.word	0x08009037
 8008cb0:	08009037 	.word	0x08009037
 8008cb4:	0800900d 	.word	0x0800900d
 8008cb8:	0800901b 	.word	0x0800901b
 8008cbc:	08009037 	.word	0x08009037
 8008cc0:	08009037 	.word	0x08009037
 8008cc4:	08009037 	.word	0x08009037
 8008cc8:	08009037 	.word	0x08009037
 8008ccc:	08009037 	.word	0x08009037
 8008cd0:	08009037 	.word	0x08009037
 8008cd4:	08009037 	.word	0x08009037
 8008cd8:	08009037 	.word	0x08009037
 8008cdc:	08009037 	.word	0x08009037
 8008ce0:	08009037 	.word	0x08009037
 8008ce4:	08009037 	.word	0x08009037
 8008ce8:	08009037 	.word	0x08009037
 8008cec:	08009037 	.word	0x08009037
 8008cf0:	08009037 	.word	0x08009037
 8008cf4:	08008dc1 	.word	0x08008dc1
 8008cf8:	08008d9b 	.word	0x08008d9b
 8008cfc:	08009037 	.word	0x08009037
 8008d00:	08008d65 	.word	0x08008d65
 8008d04:	08008d71 	.word	0x08008d71
 8008d08:	08008dcd 	.word	0x08008dcd
 8008d0c:	08008da9 	.word	0x08008da9
 8008d10:	08008d8d 	.word	0x08008d8d
 8008d14:	08008d7f 	.word	0x08008d7f
 8008d18:	08008d4d 	.word	0x08008d4d
 8008d1c:	08008d59 	.word	0x08008d59
 8008d20:	08008d41 	.word	0x08008d41
 8008d24:	08008db5 	.word	0x08008db5
 8008d28:	08009037 	.word	0x08009037
 8008d2c:	08009037 	.word	0x08009037
 8008d30:	08009037 	.word	0x08009037
 8008d34:	08009029 	.word	0x08009029
 8008d38:	08008de1 	.word	0x08008de1
 8008d3c:	08008def 	.word	0x08008def
    {
    case PHAC_DISCLOOP_CONFIG_PAS_LIS_TECH_CFG:
        *pValue = pDataParams->bPasLisTechCfg;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	795b      	ldrb	r3, [r3, #5]
 8008d44:	461a      	mov	r2, r3
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	801a      	strh	r2, [r3, #0]
        break;
 8008d4a:	e177      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_ACT_LIS_TECH_CFG:
        *pValue = pDataParams->bActLisTechCfg;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	799b      	ldrb	r3, [r3, #6]
 8008d50:	461a      	mov	r2, r3
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	801a      	strh	r2, [r3, #0]
        break;
 8008d56:	e171      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_ACT_POLL_TECH_CFG:
        *pValue = pDataParams->bActPollTechCfg;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	78db      	ldrb	r3, [r3, #3]
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	801a      	strh	r2, [r3, #0]
        break;
 8008d62:	e16b      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_COLLISION_PENDING:
        *pValue = pDataParams->bCollPend;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	7f9b      	ldrb	r3, [r3, #30]
 8008d68:	461a      	mov	r2, r3
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	801a      	strh	r2, [r3, #0]
        break;
 8008d6e:	e165      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_NEXT_POLL_STATE:
        *pValue = (uint8_t)pDataParams->bPollState;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	891b      	ldrh	r3, [r3, #8]
 8008d74:	b2db      	uxtb	r3, r3
 8008d76:	461a      	mov	r2, r3
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	801a      	strh	r2, [r3, #0]
        break;
 8008d7c:	e15e      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_ANTI_COLL:
        *pValue = pDataParams->bUseAntiColl;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d84:	461a      	mov	r2, r3
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	801a      	strh	r2, [r3, #0]
        break;
 8008d8a:	e157      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TECH_DETECTED:
        *pValue = pDataParams->bDetectedTechs;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008d92:	461a      	mov	r2, r3
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	801a      	strh	r2, [r3, #0]
        break;
 8008d98:	e150      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_NR_TAGS_FOUND:
        *pValue = pDataParams->bNumOfCards;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8008da0:	461a      	mov	r2, r3
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	801a      	strh	r2, [r3, #0]
         break;
 8008da6:	e149      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_BAIL_OUT:
        *pValue = pDataParams->bPasPollBailOut;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	791b      	ldrb	r3, [r3, #4]
 8008dac:	461a      	mov	r2, r3
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	801a      	strh	r2, [r3, #0]
        break;
 8008db2:	e143      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_PAS_POLL_TECH_CFG:
        *pValue = pDataParams->bPasPollTechCfg;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	789b      	ldrb	r3, [r3, #2]
 8008db8:	461a      	mov	r2, r3
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	801a      	strh	r2, [r3, #0]
        break;
 8008dbe:	e13d      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_ENABLE_LPCD:
        *pValue = pDataParams->bLpcdEnabled;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	7fdb      	ldrb	r3, [r3, #31]
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	801a      	strh	r2, [r3, #0]
        break;
 8008dca:	e137      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_ADDITIONAL_INFO:
        *pValue = pDataParams->wErrorCode;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	801a      	strh	r2, [r3, #0]
        break;
 8008dd4:	e132      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_GT_ACTIVE_US:
        *pValue = pDataParams->wActPollGTimeUs;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	8b9a      	ldrh	r2, [r3, #28]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	801a      	strh	r2, [r3, #0]
        break;
 8008dde:	e12d      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_EMVCO_PROF_FSCI_MAX:
        *pValue = pDataParams->bFsciMax;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8008de6:	461a      	mov	r2, r3
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	801a      	strh	r2, [r3, #0]
        break;
 8008dec:	e126      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_EMVCO_PROP_OP_RF_RESET:
        *pValue = pDataParams->bEMVCoPropOpRfFieldReset;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008df4:	461a      	mov	r2, r3
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	801a      	strh	r2, [r3, #0]
        break;
 8008dfa:	e11f      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS
    case PHAC_DISCLOOP_CONFIG_GTA_VALUE_US:
        *pValue = pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_A];
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	8a1a      	ldrh	r2, [r3, #16]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	801a      	strh	r2, [r3, #0]
        break;
 8008e04:	e11a      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEA_TAGS_FOUND:
        *pValue = pDataParams->sTypeATargetInfo.bTotalTagsFound;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008e0c:	461a      	mov	r2, r3
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	801a      	strh	r2, [r3, #0]
        break;
 8008e12:	e113      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEA_DEVICE_LIMIT:
        *pValue = pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A];
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	7a9b      	ldrb	r3, [r3, #10]
 8008e18:	461a      	mov	r2, r3
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	801a      	strh	r2, [r3, #0]
        break;
 8008e1e:	e10d      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS
    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_FSDI:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_I3P4.bFsdi;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008e26:	461a      	mov	r2, r3
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	801a      	strh	r2, [r3, #0]
        break;
 8008e2c:	e106      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_CID:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_I3P4.bCid;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8008e34:	461a      	mov	r2, r3
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	801a      	strh	r2, [r3, #0]
        break;
 8008e3a:	e0ff      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_NAD:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_I3P4.bNad;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8008e42:	461a      	mov	r2, r3
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	801a      	strh	r2, [r3, #0]
        break;
 8008e48:	e0f8      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_DSI:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDsi;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8008e50:	461a      	mov	r2, r3
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	801a      	strh	r2, [r3, #0]
        break;
 8008e56:	e0f1      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_DRI:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDri;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8008e5e:	461a      	mov	r2, r3
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	801a      	strh	r2, [r3, #0]
        break;
 8008e64:	e0ea      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */

#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE)
    case PHAC_DISCLOOP_CONFIG_TYPEA_P2P_DID:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_P2P.bDid;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	801a      	strh	r2, [r3, #0]
        break;
 8008e72:	e0e3      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEA_P2P_LRI:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_P2P.bLri;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	801a      	strh	r2, [r3, #0]
        break;
 8008e80:	e0dc      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEA_P2P_NAD_ENABLE:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_P2P.bNadEnable;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8008e88:	461a      	mov	r2, r3
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	801a      	strh	r2, [r3, #0]
        break;
 8008e8e:	e0d5      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEA_P2P_NAD:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_P2P.bNad;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 8008e96:	461a      	mov	r2, r3
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	801a      	strh	r2, [r3, #0]
        break;
 8008e9c:	e0ce      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEA_P2P_GI_LEN:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_P2P.bGiLength;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	801a      	strh	r2, [r3, #0]
        break;
 8008eaa:	e0c7      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEA_P2P_ATR_RES_LEN:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_P2P.bAtrResLength;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	801a      	strh	r2, [r3, #0]
        break;
 8008eb8:	e0c0      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    case PHAC_DISCLOOP_CONFIG_GTB_VALUE_US:
        *pValue = pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_B];
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	8a5a      	ldrh	r2, [r3, #18]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	801a      	strh	r2, [r3, #0]
        break;
 8008ec2:	e0bb      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

     case PHAC_DISCLOOP_CONFIG_TYPEB_TAGS_FOUND:
        *pValue = pDataParams->sTypeBTargetInfo.bTotalTagsFound;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8008eca:	461a      	mov	r2, r3
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	801a      	strh	r2, [r3, #0]
        break;
 8008ed0:	e0b4      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

     case PHAC_DISCLOOP_CONFIG_TYPEB_DEVICE_LIMIT:
        *pValue = pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_B];
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	7adb      	ldrb	r3, [r3, #11]
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	801a      	strh	r2, [r3, #0]
        break;
 8008edc:	e0ae      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEB_SUPPORT_TYPE4B:
        *pValue = pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].bSupportType4B;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	f893 30db 	ldrb.w	r3, [r3, #219]	@ 0xdb
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	801a      	strh	r2, [r3, #0]
        break;
 8008eea:	e0a7      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEB_DRI:
        *pValue = pDataParams->sTypeBTargetInfo.bDri;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f893 30c7 	ldrb.w	r3, [r3, #199]	@ 0xc7
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	801a      	strh	r2, [r3, #0]
        break;
 8008ef8:	e0a0      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEB_DSI:
        *pValue = pDataParams->sTypeBTargetInfo.bDsi;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 8008f00:	461a      	mov	r2, r3
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	801a      	strh	r2, [r3, #0]
        break;
 8008f06:	e099      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    case PHAC_DISCLOOP_CONFIG_GTFB_VALUE_US:
         *pValue = pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F212];
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	8a9a      	ldrh	r2, [r3, #20]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	801a      	strh	r2, [r3, #0]
         break;
 8008f10:	e094      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_GTBF_VALUE_US:
         *pValue = pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F424];
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	8ada      	ldrh	r2, [r3, #22]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	801a      	strh	r2, [r3, #0]
         break;
 8008f1a:	e08f      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEF_TAGS_FOUND:
        *pValue = pDataParams->sTypeFTargetInfo.bTotalTagsFound;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 8008f22:	461a      	mov	r2, r3
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	801a      	strh	r2, [r3, #0]
        break;
 8008f28:	e088      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEF_DEVICE_LIMIT:
        *pValue = pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F212];
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	7b1b      	ldrb	r3, [r3, #12]
 8008f2e:	461a      	mov	r2, r3
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	801a      	strh	r2, [r3, #0]
        break;
 8008f34:	e082      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEF_CUR_BAUD:
         *pValue = pDataParams->bFelicaBaud;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	801a      	strh	r2, [r3, #0]
         break;
 8008f42:	e07b      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */

#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS)  || defined(NXPBUILD__PHAC_DISCLOOP_TYPEF212_P2P_ACTIVE) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE)
    case PHAC_DISCLOOP_CONFIG_TYPEF_P2P_DID:
        *pValue = pDataParams->sTypeFTargetInfo.sTypeF_P2P.bDid;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	801a      	strh	r2, [r3, #0]
        break;
 8008f50:	e074      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEF_P2P_LRI:
        *pValue = pDataParams->sTypeFTargetInfo.sTypeF_P2P.bLri;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8008f58:	461a      	mov	r2, r3
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	801a      	strh	r2, [r3, #0]
        break;
 8008f5e:	e06d      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEF_P2P_NAD_ENABLE:
        *pValue = pDataParams->sTypeFTargetInfo.sTypeF_P2P.bNadEnable;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 8008f66:	461a      	mov	r2, r3
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	801a      	strh	r2, [r3, #0]
        break;
 8008f6c:	e066      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEF_P2P_NAD:
        *pValue = pDataParams->sTypeFTargetInfo.sTypeF_P2P.bNad;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f893 30af 	ldrb.w	r3, [r3, #175]	@ 0xaf
 8008f74:	461a      	mov	r2, r3
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	801a      	strh	r2, [r3, #0]
        break;
 8008f7a:	e05f      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEF_P2P_GI_LEN:
        *pValue = pDataParams->sTypeFTargetInfo.sTypeF_P2P.bGiLength;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8008f82:	461a      	mov	r2, r3
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	801a      	strh	r2, [r3, #0]
        break;
 8008f88:	e058      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEF_P2P_ATR_RES_LEN:
        *pValue = pDataParams->sTypeFTargetInfo.sTypeF_P2P.bAtrResLength;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 8008f90:	461a      	mov	r2, r3
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	801a      	strh	r2, [r3, #0]
        break;
 8008f96:	e051      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    case PHAC_DISCLOOP_CONFIG_GTV_VALUE_US:
        *pValue = pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_V];
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	8b1a      	ldrh	r2, [r3, #24]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	801a      	strh	r2, [r3, #0]
        break;
 8008fa0:	e04c      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEV_DEVICE_LIMIT:
        *pValue = pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V];
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	7b9b      	ldrb	r3, [r3, #14]
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	801a      	strh	r2, [r3, #0]
        break;
 8008fac:	e046      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEV_TAGS_FOUND:
        *pValue = pDataParams->sTypeVTargetInfo.bTotalTagsFound;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	801a      	strh	r2, [r3, #0]
        break;
 8008fba:	e03f      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEV_RX_DATA_RATE:
        if(0U != (pDataParams->sTypeVTargetInfo.bFlag & PHPAL_SLI15693_FLAG_DATA_RATE))
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 8008fc2:	f003 0302 	and.w	r3, r3, #2
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d003      	beq.n	8008fd2 <phacDiscLoop_Sw_GetConfig+0x4fe>
        {
            *pValue = PHHAL_HW_RF_RX_DATARATE_HIGH;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	220d      	movs	r2, #13
 8008fce:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = PHHAL_HW_RF_RX_DATARATE_LOW;
        }
        break;
 8008fd0:	e034      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>
            *pValue = PHHAL_HW_RF_RX_DATARATE_LOW;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	220c      	movs	r2, #12
 8008fd6:	801a      	strh	r2, [r3, #0]
        break;
 8008fd8:	e030      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEV_MODE:
        *pValue = pDataParams->sTypeVTargetInfo.bMode;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f893 30e1 	ldrb.w	r3, [r3, #225]	@ 0xe1
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	801a      	strh	r2, [r3, #0]
        break;
 8008fe6:	e029      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    case PHAC_DISCLOOP_CONFIG_GT18000P3M3_VALUE_US:
        *pValue = pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_18000P3M3];
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	8b5a      	ldrh	r2, [r3, #26]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	801a      	strh	r2, [r3, #0]
        break;
 8008ff0:	e024      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_18000P3M3_DEVICE_LIMIT:
        *pValue = pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_18000P3M3];
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	7bdb      	ldrb	r3, [r3, #15]
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	801a      	strh	r2, [r3, #0]
        break;
 8008ffc:	e01e      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_18000P3M3_TAGS_FOUND:
        *pValue = pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8009004:	461a      	mov	r2, r3
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	801a      	strh	r2, [r3, #0]
        break;
 800900a:	e017      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_I18000P3M3_MODULATION:
        *pValue = pDataParams->sI18000p3m3TargetInfo.bM;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 8009012:	461a      	mov	r2, r3
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	801a      	strh	r2, [r3, #0]
        break;
 8009018:	e010      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_I18000P3M3_FREQUENCY:
        *pValue = pDataParams->sI18000p3m3TargetInfo.bDr;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	f893 30ee 	ldrb.w	r3, [r3, #238]	@ 0xee
 8009020:	461a      	mov	r2, r3
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	801a      	strh	r2, [r3, #0]
        break;
 8009026:	e009      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>

#endif /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TARGET
    case PHAC_DISCLOOP_CONFIG_TARGET_RETRY_COUNT:
        *pValue = pDataParams->sTargetParams.bRetryCount;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 800902e:	461a      	mov	r2, r3
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	801a      	strh	r2, [r3, #0]
        break;
 8009034:	e002      	b.n	800903c <phacDiscLoop_Sw_GetConfig+0x568>
#endif /* NXPBUILD__PHAC_DISCLOOP_TARGET */

    default:
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8009036:	f244 0321 	movw	r3, #16417	@ 0x4021
 800903a:	82fb      	strh	r3, [r7, #22]
    }

    return status;
 800903c:	8afb      	ldrh	r3, [r7, #22]
}
 800903e:	4618      	mov	r0, r3
 8009040:	371c      	adds	r7, #28
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr
 800904a:	bf00      	nop

0800904c <phacDiscLoop_Sw_ActivateCard>:
phStatus_t phacDiscLoop_Sw_ActivateCard(
                                        phacDiscLoop_Sw_DataParams_t * pDataParams,
                                        uint8_t bTechType,
                                        uint8_t bTagIndex
                                        )
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	460b      	mov	r3, r1
 8009056:	70fb      	strb	r3, [r7, #3]
 8009058:	4613      	mov	r3, r2
 800905a:	70bb      	strb	r3, [r7, #2]
    return phacDiscLoop_Sw_Int_ActivateDevice(pDataParams, bTechType, bTagIndex);
 800905c:	78ba      	ldrb	r2, [r7, #2]
 800905e:	78fb      	ldrb	r3, [r7, #3]
 8009060:	4619      	mov	r1, r3
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 ff40 	bl	8009ee8 <phacDiscLoop_Sw_Int_ActivateDevice>
 8009068:	4603      	mov	r3, r0
}
 800906a:	4618      	mov	r0, r3
 800906c:	3708      	adds	r7, #8
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
	...

08009074 <phacDiscLoop_Sw_Int_Apply_PTGT>:
 * ***************************************************************************************************************** */

static phStatus_t phacDiscLoop_Sw_Int_Apply_PTGT(
        phacDiscLoop_Sw_DataParams_t *pDataParams
        )
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM   status = PH_ERR_SUCCESS;
 800907c:	2300      	movs	r3, #0
 800907e:	81fb      	strh	r3, [r7, #14]
    uint8_t    PH_MEMLOC_COUNT bTechLoopIndex;
    uint8_t    PH_MEMLOC_COUNT bPollTech;
    uint8_t    PH_MEMLOC_COUNT bTechIndex;
    uint16_t   PH_MEMLOC_COUNT wPTGT = 0U;
 8009080:	2300      	movs	r3, #0
 8009082:	813b      	strh	r3, [r7, #8]

    /* Check for Proprietary technology and apply Proprietary Technology Guard Time(PTGT) based on preceding technology */
    for (bTechLoopIndex = 1U; bTechLoopIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bTechLoopIndex++)
 8009084:	2301      	movs	r3, #1
 8009086:	737b      	strb	r3, [r7, #13]
 8009088:	e0ba      	b.n	8009200 <phacDiscLoop_Sw_Int_Apply_PTGT+0x18c>
    {
        bPollTech = pDataParams->pPasTechPollSeq[bTechLoopIndex];
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800908e:	7b7b      	ldrb	r3, [r7, #13]
 8009090:	4413      	add	r3, r2
 8009092:	781b      	ldrb	r3, [r3, #0]
 8009094:	733b      	strb	r3, [r7, #12]

        if (bPollTech > PHAC_DISCLOOP_TECH_TYPE_V)
 8009096:	7b3b      	ldrb	r3, [r7, #12]
 8009098:	2b04      	cmp	r3, #4
 800909a:	f240 80ae 	bls.w	80091fa <phacDiscLoop_Sw_Int_Apply_PTGT+0x186>
        {
            if(((bPollTech == PHAC_DISCLOOP_TECH_TYPE_18000P3M3) &&
 800909e:	7b3b      	ldrb	r3, [r7, #12]
 80090a0:	2b05      	cmp	r3, #5
 80090a2:	d106      	bne.n	80090b2 <phacDiscLoop_Sw_Int_Apply_PTGT+0x3e>
                ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3) != PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3))
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	789b      	ldrb	r3, [r3, #2]
 80090a8:	f003 0320 	and.w	r3, r3, #32
            if(((bPollTech == PHAC_DISCLOOP_TECH_TYPE_18000P3M3) &&
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	f000 80a3 	beq.w	80091f8 <phacDiscLoop_Sw_Int_Apply_PTGT+0x184>
                /* continue to check next technology if present technology is not enabled in Polling loop */
                continue;
            }

            /* Only one technology(ISO18000p3m3) enabled */
            if((bPollTech == PHAC_DISCLOOP_TECH_TYPE_18000P3M3) &&
 80090b2:	7b3b      	ldrb	r3, [r7, #12]
 80090b4:	2b05      	cmp	r3, #5
 80090b6:	d115      	bne.n	80090e4 <phacDiscLoop_Sw_Int_Apply_PTGT+0x70>
                (pDataParams->bPasPollTechCfg == PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3))
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	789b      	ldrb	r3, [r3, #2]
            if((bPollTech == PHAC_DISCLOOP_TECH_TYPE_18000P3M3) &&
 80090bc:	2b20      	cmp	r3, #32
 80090be:	d111      	bne.n	80090e4 <phacDiscLoop_Sw_Int_Apply_PTGT+0x70>
            {
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGT;
 80090c0:	f241 33ec 	movw	r3, #5100	@ 0x13ec
 80090c4:	813b      	strh	r3, [r7, #8]
                PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_SetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_GT18000P3M3_VALUE_US, wPTGT));
 80090c6:	893b      	ldrh	r3, [r7, #8]
 80090c8:	461a      	mov	r2, r3
 80090ca:	2105      	movs	r1, #5
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f7ff f883 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 80090d2:	4603      	mov	r3, r0
 80090d4:	81fb      	strh	r3, [r7, #14]
 80090d6:	89fb      	ldrh	r3, [r7, #14]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d001      	beq.n	80090e0 <phacDiscLoop_Sw_Int_Apply_PTGT+0x6c>
 80090dc:	89fb      	ldrh	r3, [r7, #14]
 80090de:	e094      	b.n	800920a <phacDiscLoop_Sw_Int_Apply_PTGT+0x196>
                return status;
 80090e0:	89fb      	ldrh	r3, [r7, #14]
 80090e2:	e092      	b.n	800920a <phacDiscLoop_Sw_Int_Apply_PTGT+0x196>
            }

            /* Identify preceding technology which is enabled in the Polling loop */
            bTechIndex = bTechLoopIndex;
 80090e4:	7b7b      	ldrb	r3, [r7, #13]
 80090e6:	72fb      	strb	r3, [r7, #11]
            do
            {
                bTechIndex--;
 80090e8:	7afb      	ldrb	r3, [r7, #11]
 80090ea:	3b01      	subs	r3, #1
 80090ec:	72fb      	strb	r3, [r7, #11]

                /* Read preceding technology */
                bPollTech = pDataParams->pPasTechPollSeq[bTechIndex];
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80090f2:	7afb      	ldrb	r3, [r7, #11]
 80090f4:	4413      	add	r3, r2
 80090f6:	781b      	ldrb	r3, [r3, #0]
 80090f8:	733b      	strb	r3, [r7, #12]

                if(((bPollTech == PHAC_DISCLOOP_TECH_TYPE_A) &&
 80090fa:	7b3b      	ldrb	r3, [r7, #12]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d105      	bne.n	800910c <phacDiscLoop_Sw_Int_Apply_PTGT+0x98>
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_A) == PHAC_DISCLOOP_POS_BIT_MASK_A)) ||
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	789b      	ldrb	r3, [r3, #2]
 8009104:	f003 0301 	and.w	r3, r3, #1
                if(((bPollTech == PHAC_DISCLOOP_TECH_TYPE_A) &&
 8009108:	2b00      	cmp	r3, #0
 800910a:	d134      	bne.n	8009176 <phacDiscLoop_Sw_Int_Apply_PTGT+0x102>
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_A) == PHAC_DISCLOOP_POS_BIT_MASK_A)) ||
 800910c:	7b3b      	ldrb	r3, [r7, #12]
 800910e:	2b01      	cmp	r3, #1
 8009110:	d105      	bne.n	800911e <phacDiscLoop_Sw_Int_Apply_PTGT+0xaa>
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_B) &&
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_B) == PHAC_DISCLOOP_POS_BIT_MASK_B)) ||
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	789b      	ldrb	r3, [r3, #2]
 8009116:	f003 0302 	and.w	r3, r3, #2
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_B) &&
 800911a:	2b00      	cmp	r3, #0
 800911c:	d12b      	bne.n	8009176 <phacDiscLoop_Sw_Int_Apply_PTGT+0x102>
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_B) == PHAC_DISCLOOP_POS_BIT_MASK_B)) ||
 800911e:	7b3b      	ldrb	r3, [r7, #12]
 8009120:	2b02      	cmp	r3, #2
 8009122:	d105      	bne.n	8009130 <phacDiscLoop_Sw_Int_Apply_PTGT+0xbc>
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_F212) &&
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F212) == PHAC_DISCLOOP_POS_BIT_MASK_F212)) ||
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	789b      	ldrb	r3, [r3, #2]
 8009128:	f003 0304 	and.w	r3, r3, #4
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_F212) &&
 800912c:	2b00      	cmp	r3, #0
 800912e:	d122      	bne.n	8009176 <phacDiscLoop_Sw_Int_Apply_PTGT+0x102>
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F212) == PHAC_DISCLOOP_POS_BIT_MASK_F212)) ||
 8009130:	7b3b      	ldrb	r3, [r7, #12]
 8009132:	2b03      	cmp	r3, #3
 8009134:	d105      	bne.n	8009142 <phacDiscLoop_Sw_Int_Apply_PTGT+0xce>
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_F424) &&
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F424) == PHAC_DISCLOOP_POS_BIT_MASK_F424)) ||
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	789b      	ldrb	r3, [r3, #2]
 800913a:	f003 0308 	and.w	r3, r3, #8
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_F424) &&
 800913e:	2b00      	cmp	r3, #0
 8009140:	d119      	bne.n	8009176 <phacDiscLoop_Sw_Int_Apply_PTGT+0x102>
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F424) == PHAC_DISCLOOP_POS_BIT_MASK_F424)) ||
 8009142:	7b3b      	ldrb	r3, [r7, #12]
 8009144:	2b04      	cmp	r3, #4
 8009146:	d105      	bne.n	8009154 <phacDiscLoop_Sw_Int_Apply_PTGT+0xe0>
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_V) &&
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_V) == PHAC_DISCLOOP_POS_BIT_MASK_V)) ||
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	789b      	ldrb	r3, [r3, #2]
 800914c:	f003 0310 	and.w	r3, r3, #16
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_V) &&
 8009150:	2b00      	cmp	r3, #0
 8009152:	d110      	bne.n	8009176 <phacDiscLoop_Sw_Int_Apply_PTGT+0x102>
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_V) == PHAC_DISCLOOP_POS_BIT_MASK_V)) ||
 8009154:	7b3b      	ldrb	r3, [r7, #12]
 8009156:	2b05      	cmp	r3, #5
 8009158:	d105      	bne.n	8009166 <phacDiscLoop_Sw_Int_Apply_PTGT+0xf2>
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_18000P3M3) &&
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3) == PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3))
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	789b      	ldrb	r3, [r3, #2]
 800915e:	f003 0320 	and.w	r3, r3, #32
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_18000P3M3) &&
 8009162:	2b00      	cmp	r3, #0
 8009164:	d107      	bne.n	8009176 <phacDiscLoop_Sw_Int_Apply_PTGT+0x102>
                    )
                {
                    break;
                }

                if(bTechIndex == 0U)
 8009166:	7afb      	ldrb	r3, [r7, #11]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d101      	bne.n	8009170 <phacDiscLoop_Sw_Int_Apply_PTGT+0xfc>
                {
                    /* No Preceding Polling technology */
                    bPollTech = PHAC_DISCLOOP_TECH_TYPE_UNKNOWN;
 800916c:	2306      	movs	r3, #6
 800916e:	733b      	strb	r3, [r7, #12]
                }
            }while(bTechIndex != 0U);
 8009170:	7afb      	ldrb	r3, [r7, #11]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d1b8      	bne.n	80090e8 <phacDiscLoop_Sw_Int_Apply_PTGT+0x74>

            switch(bPollTech)
 8009176:	7b3b      	ldrb	r3, [r7, #12]
 8009178:	2b06      	cmp	r3, #6
 800917a:	d825      	bhi.n	80091c8 <phacDiscLoop_Sw_Int_Apply_PTGT+0x154>
 800917c:	a201      	add	r2, pc, #4	@ (adr r2, 8009184 <phacDiscLoop_Sw_Int_Apply_PTGT+0x110>)
 800917e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009182:	bf00      	nop
 8009184:	080091a1 	.word	0x080091a1
 8009188:	080091a9 	.word	0x080091a9
 800918c:	080091b1 	.word	0x080091b1
 8009190:	080091b1 	.word	0x080091b1
 8009194:	080091b9 	.word	0x080091b9
 8009198:	080091c9 	.word	0x080091c9
 800919c:	080091c1 	.word	0x080091c1
            {
            case PHAC_DISCLOOP_TECH_TYPE_A:
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGTA;
 80091a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80091a4:	813b      	strh	r3, [r7, #8]
                break;
 80091a6:	e013      	b.n	80091d0 <phacDiscLoop_Sw_Int_Apply_PTGT+0x15c>
            case PHAC_DISCLOOP_TECH_TYPE_B:
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGTB;
 80091a8:	f640 63d8 	movw	r3, #3800	@ 0xed8
 80091ac:	813b      	strh	r3, [r7, #8]
                break;
 80091ae:	e00f      	b.n	80091d0 <phacDiscLoop_Sw_Int_Apply_PTGT+0x15c>
            case PHAC_DISCLOOP_TECH_TYPE_F212:
            case PHAC_DISCLOOP_TECH_TYPE_F424:
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGTF;
 80091b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80091b4:	813b      	strh	r3, [r7, #8]
                break;
 80091b6:	e00b      	b.n	80091d0 <phacDiscLoop_Sw_Int_Apply_PTGT+0x15c>
            case PHAC_DISCLOOP_TECH_TYPE_V:
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGTV;
 80091b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80091bc:	813b      	strh	r3, [r7, #8]
                break;
 80091be:	e007      	b.n	80091d0 <phacDiscLoop_Sw_Int_Apply_PTGT+0x15c>
            case PHAC_DISCLOOP_TECH_TYPE_UNKNOWN:
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGT;
 80091c0:	f241 33ec 	movw	r3, #5100	@ 0x13ec
 80091c4:	813b      	strh	r3, [r7, #8]
                break;
 80091c6:	e003      	b.n	80091d0 <phacDiscLoop_Sw_Int_Apply_PTGT+0x15c>
            default: /* Preceding technology is Proprietary Technology !!! */
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGTV;
 80091c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80091cc:	813b      	strh	r3, [r7, #8]
                break;
 80091ce:	bf00      	nop
            }

            if(pDataParams->pPasTechPollSeq[bTechLoopIndex] == PHAC_DISCLOOP_TECH_TYPE_18000P3M3)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80091d4:	7b7b      	ldrb	r3, [r7, #13]
 80091d6:	4413      	add	r3, r2
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	2b05      	cmp	r3, #5
 80091dc:	d10d      	bne.n	80091fa <phacDiscLoop_Sw_Int_Apply_PTGT+0x186>
            {
                PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_SetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_GT18000P3M3_VALUE_US, wPTGT));
 80091de:	893b      	ldrh	r3, [r7, #8]
 80091e0:	461a      	mov	r2, r3
 80091e2:	2105      	movs	r1, #5
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f7fe fff7 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 80091ea:	4603      	mov	r3, r0
 80091ec:	81fb      	strh	r3, [r7, #14]
 80091ee:	89fb      	ldrh	r3, [r7, #14]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d002      	beq.n	80091fa <phacDiscLoop_Sw_Int_Apply_PTGT+0x186>
 80091f4:	89fb      	ldrh	r3, [r7, #14]
 80091f6:	e008      	b.n	800920a <phacDiscLoop_Sw_Int_Apply_PTGT+0x196>
                continue;
 80091f8:	bf00      	nop
    for (bTechLoopIndex = 1U; bTechLoopIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bTechLoopIndex++)
 80091fa:	7b7b      	ldrb	r3, [r7, #13]
 80091fc:	3301      	adds	r3, #1
 80091fe:	737b      	strb	r3, [r7, #13]
 8009200:	7b7b      	ldrb	r3, [r7, #13]
 8009202:	2b05      	cmp	r3, #5
 8009204:	f67f af41 	bls.w	800908a <phacDiscLoop_Sw_Int_Apply_PTGT+0x16>
            }
        }
    }

    return status;
 8009208:	89fb      	ldrh	r3, [r7, #14]
}
 800920a:	4618      	mov	r0, r3
 800920c:	3710      	adds	r7, #16
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
 8009212:	bf00      	nop

08009214 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset>:

static phStatus_t phacDiscLoop_Sw_Int_EmvcoRfFieldReset(
                                                        phacDiscLoop_Sw_DataParams_t *pDataParams
                                                        )
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM status;

    PH_CHECK_SUCCESS_FCT(status, phhalHw_FieldOff(pDataParams->pHalDataParams));
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009220:	4618      	mov	r0, r3
 8009222:	f005 f9db 	bl	800e5dc <phhalHw_Pn5180_FieldOff>
 8009226:	4603      	mov	r3, r0
 8009228:	81fb      	strh	r3, [r7, #14]
 800922a:	89fb      	ldrh	r3, [r7, #14]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d001      	beq.n	8009234 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset+0x20>
 8009230:	89fb      	ldrh	r3, [r7, #14]
 8009232:	e01b      	b.n	800926c <phacDiscLoop_Sw_Int_EmvcoRfFieldReset+0x58>

    PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009238:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 800923c:	2100      	movs	r1, #0
 800923e:	4618      	mov	r0, r3
 8009240:	f005 f9f0 	bl	800e624 <phhalHw_Pn5180_Wait>
 8009244:	4603      	mov	r3, r0
 8009246:	81fb      	strh	r3, [r7, #14]
 8009248:	89fb      	ldrh	r3, [r7, #14]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d001      	beq.n	8009252 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset+0x3e>
 800924e:	89fb      	ldrh	r3, [r7, #14]
 8009250:	e00c      	b.n	800926c <phacDiscLoop_Sw_Int_EmvcoRfFieldReset+0x58>
        pDataParams->pHalDataParams,
        PHHAL_HW_TIME_MICROSECONDS,
        PH_NXPNFCRDLIB_CONFIG_EMVCO_PROP_TECH_POLL_RF_OFF_DELAY_US)
        );

    PH_CHECK_SUCCESS_FCT(status, phhalHw_FieldOn(pDataParams->pHalDataParams));
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009256:	4618      	mov	r0, r3
 8009258:	f005 f96a 	bl	800e530 <phhalHw_Pn5180_FieldOn>
 800925c:	4603      	mov	r3, r0
 800925e:	81fb      	strh	r3, [r7, #14]
 8009260:	89fb      	ldrh	r3, [r7, #14]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d001      	beq.n	800926a <phacDiscLoop_Sw_Int_EmvcoRfFieldReset+0x56>
 8009266:	89fb      	ldrh	r3, [r7, #14]
 8009268:	e000      	b.n	800926c <phacDiscLoop_Sw_Int_EmvcoRfFieldReset+0x58>

    return PH_ERR_SUCCESS;
 800926a:	2300      	movs	r3, #0
}
 800926c:	4618      	mov	r0, r3
 800926e:	3710      	adds	r7, #16
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <phacDiscLoop_Sw_Int_ListenMode>:

phStatus_t phacDiscLoop_Sw_Int_ListenMode(
                                          phacDiscLoop_Sw_DataParams_t *pDataParams
                                          )
{
 8009274:	b590      	push	{r4, r7, lr}
 8009276:	b087      	sub	sp, #28
 8009278:	af02      	add	r7, sp, #8
 800927a:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TARGET
    phStatus_t PH_MEMLOC_REM status = PH_ERR_INTERNAL_ERROR;
 800927c:	237f      	movs	r3, #127	@ 0x7f
 800927e:	817b      	strh	r3, [r7, #10]
    uint8_t    PH_MEMLOC_REM bRetryCount = pDataParams->sTargetParams.bRetryCount;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8009286:	73fb      	strb	r3, [r7, #15]
    uint16_t   PH_MEMLOC_REM wTempMode = 0x00;
 8009288:	2300      	movs	r3, #0
 800928a:	81bb      	strh	r3, [r7, #12]

    /* get active listen cfg except F424 */
    wTempMode = pDataParams->bActLisTechCfg & 0x07U;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	799b      	ldrb	r3, [r3, #6]
 8009290:	f003 0307 	and.w	r3, r3, #7
 8009294:	81bb      	strh	r3, [r7, #12]

    /* Map Active F424 configuration with Type F bit in Autocoll */
    if(0U != (pDataParams->bActLisTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F424))
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	799b      	ldrb	r3, [r3, #6]
 800929a:	f003 0308 	and.w	r3, r3, #8
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d003      	beq.n	80092aa <phacDiscLoop_Sw_Int_ListenMode+0x36>
    {
        wTempMode = wTempMode | PHAC_DISCLOOP_POS_BIT_MASK_F212;
 80092a2:	89bb      	ldrh	r3, [r7, #12]
 80092a4:	f043 0304 	orr.w	r3, r3, #4
 80092a8:	81bb      	strh	r3, [r7, #12]
    }

    wTempMode = (uint16_t) (wTempMode << 8U);
 80092aa:	89bb      	ldrh	r3, [r7, #12]
 80092ac:	021b      	lsls	r3, r3, #8
 80092ae:	81bb      	strh	r3, [r7, #12]

    /* get passive listen cfg except F424 */
    wTempMode = wTempMode | (pDataParams->bPasLisTechCfg & /* */ 0x07);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	795b      	ldrb	r3, [r3, #5]
 80092b4:	b21b      	sxth	r3, r3
 80092b6:	f003 0307 	and.w	r3, r3, #7
 80092ba:	b21a      	sxth	r2, r3
 80092bc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80092c0:	4313      	orrs	r3, r2
 80092c2:	b21b      	sxth	r3, r3
 80092c4:	81bb      	strh	r3, [r7, #12]

    /* Map Passice F424 configuration with Type F bit in Autocoll */
    if(0U != (pDataParams->bPasLisTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F424))
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	795b      	ldrb	r3, [r3, #5]
 80092ca:	f003 0308 	and.w	r3, r3, #8
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d003      	beq.n	80092da <phacDiscLoop_Sw_Int_ListenMode+0x66>
    {
        wTempMode = wTempMode | PHAC_DISCLOOP_POS_BIT_MASK_F212;
 80092d2:	89bb      	ldrh	r3, [r7, #12]
 80092d4:	f043 0304 	orr.w	r3, r3, #4
 80092d8:	81bb      	strh	r3, [r7, #12]
    }

    /* AUTOCOLL retry loop */
    do
    {
        status = phhalHw_Autocoll(
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f503 7296 	add.w	r2, r3, #300	@ 0x12c
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f503 7498 	add.w	r4, r3, #304	@ 0x130
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 80092f0:	89b9      	ldrh	r1, [r7, #12]
 80092f2:	9300      	str	r3, [sp, #0]
 80092f4:	4623      	mov	r3, r4
 80092f6:	f007 fa3b 	bl	8010770 <phhalHw_Pn5180_Autocoll>
 80092fa:	4603      	mov	r3, r0
 80092fc:	817b      	strh	r3, [r7, #10]
            pDataParams->pHalDataParams,
            wTempMode,
            &pDataParams->sTargetParams.pRxBuffer,
            &pDataParams->sTargetParams.wRxBufferLen,
            &pDataParams->sTargetParams.wProtParams);
    }while(((status & PH_ERR_MASK) != PH_ERR_SUCCESS) && (bRetryCount--));
 80092fe:	897b      	ldrh	r3, [r7, #10]
 8009300:	b2db      	uxtb	r3, r3
 8009302:	2b00      	cmp	r3, #0
 8009304:	d004      	beq.n	8009310 <phacDiscLoop_Sw_Int_ListenMode+0x9c>
 8009306:	7bfb      	ldrb	r3, [r7, #15]
 8009308:	1e5a      	subs	r2, r3, #1
 800930a:	73fa      	strb	r2, [r7, #15]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d1e4      	bne.n	80092da <phacDiscLoop_Sw_Int_ListenMode+0x66>

    /* Return RF OFF error, if external RF is OFF */
    if((status & PH_ERR_MASK) == PH_ERR_EXT_RF_ERROR)
 8009310:	897b      	ldrh	r3, [r7, #10]
 8009312:	b2db      	uxtb	r3, r3
 8009314:	2b10      	cmp	r3, #16
 8009316:	d102      	bne.n	800931e <phacDiscLoop_Sw_Int_ListenMode+0xaa>
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_EXTERNAL_RFOFF, PH_COMP_AC_DISCLOOP);
 8009318:	f244 0383 	movw	r3, #16515	@ 0x4083
 800931c:	e006      	b.n	800932c <phacDiscLoop_Sw_Int_ListenMode+0xb8>
    }
    else
    {
        /* Return, if error */
        PH_CHECK_SUCCESS(status);
 800931e:	897b      	ldrh	r3, [r7, #10]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d001      	beq.n	8009328 <phacDiscLoop_Sw_Int_ListenMode+0xb4>
 8009324:	897b      	ldrh	r3, [r7, #10]
 8009326:	e001      	b.n	800932c <phacDiscLoop_Sw_Int_ListenMode+0xb8>
    }

    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_ACTIVATED_BY_PEER, PH_COMP_AC_DISCLOOP);
 8009328:	f244 038f 	movw	r3, #16527	@ 0x408f
#else /* NXPBUILD__PHAC_DISCLOOP_TARGET */
    PH_UNUSED_VARIABLE(pDataParams);
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TARGET */
}
 800932c:	4618      	mov	r0, r3
 800932e:	3714      	adds	r7, #20
 8009330:	46bd      	mov	sp, r7
 8009332:	bd90      	pop	{r4, r7, pc}

08009334 <phacDiscLoop_Sw_Int_ActivePollMode>:

phStatus_t phacDiscLoop_Sw_Int_ActivePollMode(
                                              phacDiscLoop_Sw_DataParams_t *pDataParams
                                              )
{
 8009334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009338:	b08c      	sub	sp, #48	@ 0x30
 800933a:	af06      	add	r7, sp, #24
 800933c:	6078      	str	r0, [r7, #4]
         defined (NXPBUILD__PHAC_DISCLOOP_TYPEF212_P2P_ACTIVE) || \
         defined (NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE)
    phStatus_t PH_MEMLOC_REM   status;
#endif
#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE)
    uint16_t   PH_MEMLOC_REM   wIntFieldStatus = PH_OFF;
 800933e:	2300      	movs	r3, #0
 8009340:	827b      	strh	r3, [r7, #18]
#if defined (NXPBUILD__PHAC_DISCLOOP_TYPEF212_P2P_ACTIVE) || defined (NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE)
    uint8_t    PH_MEMLOC_BUF   aNfcId3[10];
#endif

    /* Reset detected technologies */
    pDataParams->bDetectedTechs = 0x00;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2200      	movs	r2, #0
 8009346:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Loop through all the supported active technologies */
    for (bIndex = 0; bIndex < PHAC_DISCLOOP_ACT_POLL_MAX_TECHS_SUPPORTED; bIndex++)
 800934a:	2300      	movs	r3, #0
 800934c:	757b      	strb	r3, [r7, #21]
 800934e:	e147      	b.n	80095e0 <phacDiscLoop_Sw_Int_ActivePollMode+0x2ac>
    {
        switch(pDataParams->bActPollTechCfg & (PH_ON << bIndex))
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	78db      	ldrb	r3, [r3, #3]
 8009354:	4619      	mov	r1, r3
 8009356:	7d7b      	ldrb	r3, [r7, #21]
 8009358:	2201      	movs	r2, #1
 800935a:	fa02 f303 	lsl.w	r3, r2, r3
 800935e:	400b      	ands	r3, r1
 8009360:	2b04      	cmp	r3, #4
 8009362:	f000 8097 	beq.w	8009494 <phacDiscLoop_Sw_Int_ActivePollMode+0x160>
 8009366:	2b04      	cmp	r3, #4
 8009368:	f200 8132 	bhi.w	80095d0 <phacDiscLoop_Sw_Int_ActivePollMode+0x29c>
 800936c:	2b01      	cmp	r3, #1
 800936e:	d003      	beq.n	8009378 <phacDiscLoop_Sw_Int_ActivePollMode+0x44>
 8009370:	2b02      	cmp	r3, #2
 8009372:	f000 808f 	beq.w	8009494 <phacDiscLoop_Sw_Int_ActivePollMode+0x160>
                }
#endif
                break;

            default:
                break;
 8009376:	e12b      	b.n	80095d0 <phacDiscLoop_Sw_Int_ActivePollMode+0x29c>
                status = phhalHw_GetConfig(
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800937c:	f107 0212 	add.w	r2, r7, #18
 8009380:	215f      	movs	r1, #95	@ 0x5f
 8009382:	4618      	mov	r0, r3
 8009384:	f006 fe56 	bl	8010034 <phhalHw_Pn5180_GetConfig>
 8009388:	4603      	mov	r3, r0
 800938a:	82fb      	strh	r3, [r7, #22]
                PH_CHECK_SUCCESS(status);
 800938c:	8afb      	ldrh	r3, [r7, #22]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d001      	beq.n	8009396 <phacDiscLoop_Sw_Int_ActivePollMode+0x62>
 8009392:	8afb      	ldrh	r3, [r7, #22]
 8009394:	e12a      	b.n	80095ec <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                if (wIntFieldStatus == PH_ON)
 8009396:	8a7b      	ldrh	r3, [r7, #18]
 8009398:	2b01      	cmp	r3, #1
 800939a:	d10e      	bne.n	80093ba <phacDiscLoop_Sw_Int_ActivePollMode+0x86>
                    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	8b9b      	ldrh	r3, [r3, #28]
 80093a4:	461a      	mov	r2, r3
 80093a6:	2135      	movs	r1, #53	@ 0x35
 80093a8:	f005 f9f6 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 80093ac:	4603      	mov	r3, r0
 80093ae:	82fb      	strh	r3, [r7, #22]
 80093b0:	8afb      	ldrh	r3, [r7, #22]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d001      	beq.n	80093ba <phacDiscLoop_Sw_Int_ActivePollMode+0x86>
 80093b6:	8afb      	ldrh	r3, [r7, #22]
 80093b8:	e118      	b.n	80095ec <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                status = phhalHw_ApplyProtocolSettings(
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093be:	2107      	movs	r1, #7
 80093c0:	4618      	mov	r0, r3
 80093c2:	f004 fc6d 	bl	800dca0 <phhalHw_Pn5180_ApplyProtocolSettings>
 80093c6:	4603      	mov	r3, r0
 80093c8:	82fb      	strh	r3, [r7, #22]
                PH_CHECK_SUCCESS(status);
 80093ca:	8afb      	ldrh	r3, [r7, #22]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d001      	beq.n	80093d4 <phacDiscLoop_Sw_Int_ActivePollMode+0xa0>
 80093d0:	8afb      	ldrh	r3, [r7, #22]
 80093d2:	e10b      	b.n	80095ec <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_FieldOn(pDataParams));
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f000 fdef 	bl	8009fb8 <phacDiscLoop_Sw_Int_FieldOn>
 80093da:	4603      	mov	r3, r0
 80093dc:	82fb      	strh	r3, [r7, #22]
 80093de:	8afb      	ldrh	r3, [r7, #22]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d001      	beq.n	80093e8 <phacDiscLoop_Sw_Int_ActivePollMode+0xb4>
 80093e4:	8afb      	ldrh	r3, [r7, #22]
 80093e6:	e101      	b.n	80095ec <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                if (wIntFieldStatus == PH_OFF)
 80093e8:	8a7b      	ldrh	r3, [r7, #18]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d10e      	bne.n	800940c <phacDiscLoop_Sw_Int_ActivePollMode+0xd8>
                    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	8b9b      	ldrh	r3, [r3, #28]
 80093f6:	461a      	mov	r2, r3
 80093f8:	2135      	movs	r1, #53	@ 0x35
 80093fa:	f005 f9cd 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 80093fe:	4603      	mov	r3, r0
 8009400:	82fb      	strh	r3, [r7, #22]
 8009402:	8afb      	ldrh	r3, [r7, #22]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d001      	beq.n	800940c <phacDiscLoop_Sw_Int_ActivePollMode+0xd8>
 8009408:	8afb      	ldrh	r3, [r7, #22]
 800940a:	e0ef      	b.n	80095ec <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                status = phpalI18092mPI_Atr(
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f103 0c60 	add.w	ip, r3, #96	@ 0x60
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f893 e070 	ldrb.w	lr, [r3, #112]	@ 0x70
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f893 8071 	ldrb.w	r8, [r3, #113]	@ 0x71
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	f892 2073 	ldrb.w	r2, [r2, #115]	@ 0x73
 800942e:	6879      	ldr	r1, [r7, #4]
 8009430:	6f49      	ldr	r1, [r1, #116]	@ 0x74
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f890 0078 	ldrb.w	r0, [r0, #120]	@ 0x78
 8009438:	687c      	ldr	r4, [r7, #4]
 800943a:	6fe4      	ldr	r4, [r4, #124]	@ 0x7c
 800943c:	687d      	ldr	r5, [r7, #4]
 800943e:	3580      	adds	r5, #128	@ 0x80
 8009440:	9505      	str	r5, [sp, #20]
 8009442:	9404      	str	r4, [sp, #16]
 8009444:	9003      	str	r0, [sp, #12]
 8009446:	9102      	str	r1, [sp, #8]
 8009448:	9201      	str	r2, [sp, #4]
 800944a:	9300      	str	r3, [sp, #0]
 800944c:	4643      	mov	r3, r8
 800944e:	4672      	mov	r2, lr
 8009450:	4661      	mov	r1, ip
 8009452:	4630      	mov	r0, r6
 8009454:	f00e fea4 	bl	80181a0 <phpalI18092mPI_Sw_Atr>
 8009458:	4603      	mov	r3, r0
 800945a:	82fb      	strh	r3, [r7, #22]
                if((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800945c:	8afb      	ldrh	r3, [r7, #22]
 800945e:	b2db      	uxtb	r3, r3
 8009460:	2b00      	cmp	r3, #0
 8009462:	d10f      	bne.n	8009484 <phacDiscLoop_Sw_Int_ActivePollMode+0x150>
                    pDataParams->bDetectedTechs |= PH_ON << bIndex;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 800946a:	7d7b      	ldrb	r3, [r7, #21]
 800946c:	2101      	movs	r1, #1
 800946e:	fa01 f303 	lsl.w	r3, r1, r3
 8009472:	b2db      	uxtb	r3, r3
 8009474:	4313      	orrs	r3, r2
 8009476:	b2da      	uxtb	r2, r3
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_ACTIVE_TARGET_ACTIVATED, PH_COMP_AC_DISCLOOP);
 800947e:	f244 038c 	movw	r3, #16524	@ 0x408c
 8009482:	e0b3      	b.n	80095ec <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                if ((status & PH_ERR_MASK) == PH_ERR_INTEGRITY_ERROR)
 8009484:	8afb      	ldrh	r3, [r7, #22]
 8009486:	b2db      	uxtb	r3, r3
 8009488:	2b02      	cmp	r3, #2
 800948a:	f040 80a3 	bne.w	80095d4 <phacDiscLoop_Sw_Int_ActivePollMode+0x2a0>
                    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 800948e:	f244 0384 	movw	r3, #16516	@ 0x4084
 8009492:	e0ab      	b.n	80095ec <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                PH_CHECK_SUCCESS_FCT(status, phhalHw_FieldOff(pDataParams->pHalDataParams));
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009498:	4618      	mov	r0, r3
 800949a:	f005 f89f 	bl	800e5dc <phhalHw_Pn5180_FieldOff>
 800949e:	4603      	mov	r3, r0
 80094a0:	82fb      	strh	r3, [r7, #22]
 80094a2:	8afb      	ldrh	r3, [r7, #22]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d001      	beq.n	80094ac <phacDiscLoop_Sw_Int_ActivePollMode+0x178>
 80094a8:	8afb      	ldrh	r3, [r7, #22]
 80094aa:	e09f      	b.n	80095ec <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(pDataParams->pHalDataParams, PHHAL_HW_TIME_MICROSECONDS, pDataParams->wActPollGTimeUs));
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	8b9b      	ldrh	r3, [r3, #28]
 80094b4:	461a      	mov	r2, r3
 80094b6:	2100      	movs	r1, #0
 80094b8:	f005 f8b4 	bl	800e624 <phhalHw_Pn5180_Wait>
 80094bc:	4603      	mov	r3, r0
 80094be:	82fb      	strh	r3, [r7, #22]
 80094c0:	8afb      	ldrh	r3, [r7, #22]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d001      	beq.n	80094ca <phacDiscLoop_Sw_Int_ActivePollMode+0x196>
 80094c6:	8afb      	ldrh	r3, [r7, #22]
 80094c8:	e090      	b.n	80095ec <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                if((PH_ON << bIndex) == PHAC_DISCLOOP_ACT_POS_BIT_MASK_212)
 80094ca:	7d7b      	ldrb	r3, [r7, #21]
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d108      	bne.n	80094e2 <phacDiscLoop_Sw_Int_ActivePollMode+0x1ae>
                    status = phhalHw_ApplyProtocolSettings(
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094d4:	2108      	movs	r1, #8
 80094d6:	4618      	mov	r0, r3
 80094d8:	f004 fbe2 	bl	800dca0 <phhalHw_Pn5180_ApplyProtocolSettings>
 80094dc:	4603      	mov	r3, r0
 80094de:	82fb      	strh	r3, [r7, #22]
 80094e0:	e007      	b.n	80094f2 <phacDiscLoop_Sw_Int_ActivePollMode+0x1be>
                    status = phhalHw_ApplyProtocolSettings(
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094e6:	2109      	movs	r1, #9
 80094e8:	4618      	mov	r0, r3
 80094ea:	f004 fbd9 	bl	800dca0 <phhalHw_Pn5180_ApplyProtocolSettings>
 80094ee:	4603      	mov	r3, r0
 80094f0:	82fb      	strh	r3, [r7, #22]
                PH_CHECK_SUCCESS(status);
 80094f2:	8afb      	ldrh	r3, [r7, #22]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d001      	beq.n	80094fc <phacDiscLoop_Sw_Int_ActivePollMode+0x1c8>
 80094f8:	8afb      	ldrh	r3, [r7, #22]
 80094fa:	e077      	b.n	80095ec <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_FieldOn(pDataParams));
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 fd5b 	bl	8009fb8 <phacDiscLoop_Sw_Int_FieldOn>
 8009502:	4603      	mov	r3, r0
 8009504:	82fb      	strh	r3, [r7, #22]
 8009506:	8afb      	ldrh	r3, [r7, #22]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d001      	beq.n	8009510 <phacDiscLoop_Sw_Int_ActivePollMode+0x1dc>
 800950c:	8afb      	ldrh	r3, [r7, #22]
 800950e:	e06d      	b.n	80095ec <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	8b9b      	ldrh	r3, [r3, #28]
 8009518:	461a      	mov	r2, r3
 800951a:	2135      	movs	r1, #53	@ 0x35
 800951c:	f005 f93c 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8009520:	4603      	mov	r3, r0
 8009522:	82fb      	strh	r3, [r7, #22]
 8009524:	8afb      	ldrh	r3, [r7, #22]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d001      	beq.n	800952e <phacDiscLoop_Sw_Int_ActivePollMode+0x1fa>
 800952a:	8afb      	ldrh	r3, [r7, #22]
 800952c:	e05e      	b.n	80095ec <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                (void)memcpy(aNfcId3, pDataParams->sTypeFTargetInfo.aTypeFTag[0].aIDmPMm, PHAC_DISCLOOP_FELICA_IDM_LENGTH);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f103 0194 	add.w	r1, r3, #148	@ 0x94
 8009534:	f107 0308 	add.w	r3, r7, #8
 8009538:	2208      	movs	r2, #8
 800953a:	4618      	mov	r0, r3
 800953c:	f017 fa29 	bl	8020992 <memcpy>
                aNfcId3[8] = 0x00;
 8009540:	2300      	movs	r3, #0
 8009542:	743b      	strb	r3, [r7, #16]
                aNfcId3[9] = 0x00;
 8009544:	2300      	movs	r3, #0
 8009546:	747b      	strb	r3, [r7, #17]
                status = phpalI18092mPI_Atr(
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f893 e0ac 	ldrb.w	lr, [r3, #172]	@ 0xac
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f893 80ad 	ldrb.w	r8, [r3, #173]	@ 0xad
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 800955e:	687a      	ldr	r2, [r7, #4]
 8009560:	f892 20af 	ldrb.w	r2, [r2, #175]	@ 0xaf
 8009564:	6879      	ldr	r1, [r7, #4]
 8009566:	f8d1 10b0 	ldr.w	r1, [r1, #176]	@ 0xb0
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f890 00b4 	ldrb.w	r0, [r0, #180]	@ 0xb4
 8009570:	687c      	ldr	r4, [r7, #4]
 8009572:	f8d4 40b8 	ldr.w	r4, [r4, #184]	@ 0xb8
 8009576:	687d      	ldr	r5, [r7, #4]
 8009578:	35bc      	adds	r5, #188	@ 0xbc
 800957a:	f107 0c08 	add.w	ip, r7, #8
 800957e:	9505      	str	r5, [sp, #20]
 8009580:	9404      	str	r4, [sp, #16]
 8009582:	9003      	str	r0, [sp, #12]
 8009584:	9102      	str	r1, [sp, #8]
 8009586:	9201      	str	r2, [sp, #4]
 8009588:	9300      	str	r3, [sp, #0]
 800958a:	4643      	mov	r3, r8
 800958c:	4672      	mov	r2, lr
 800958e:	4661      	mov	r1, ip
 8009590:	4630      	mov	r0, r6
 8009592:	f00e fe05 	bl	80181a0 <phpalI18092mPI_Sw_Atr>
 8009596:	4603      	mov	r3, r0
 8009598:	82fb      	strh	r3, [r7, #22]
                if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800959a:	8afb      	ldrh	r3, [r7, #22]
 800959c:	b2db      	uxtb	r3, r3
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d10f      	bne.n	80095c2 <phacDiscLoop_Sw_Int_ActivePollMode+0x28e>
                    pDataParams->bDetectedTechs |= PH_ON << bIndex;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 80095a8:	7d7b      	ldrb	r3, [r7, #21]
 80095aa:	2101      	movs	r1, #1
 80095ac:	fa01 f303 	lsl.w	r3, r1, r3
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	4313      	orrs	r3, r2
 80095b4:	b2da      	uxtb	r2, r3
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_ACTIVE_TARGET_ACTIVATED, PH_COMP_AC_DISCLOOP);
 80095bc:	f244 038c 	movw	r3, #16524	@ 0x408c
 80095c0:	e014      	b.n	80095ec <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                if ((status & PH_ERR_MASK) == PH_ERR_INTEGRITY_ERROR)
 80095c2:	8afb      	ldrh	r3, [r7, #22]
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	2b02      	cmp	r3, #2
 80095c8:	d106      	bne.n	80095d8 <phacDiscLoop_Sw_Int_ActivePollMode+0x2a4>
                    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 80095ca:	f244 0384 	movw	r3, #16516	@ 0x4084
 80095ce:	e00d      	b.n	80095ec <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                break;
 80095d0:	bf00      	nop
 80095d2:	e002      	b.n	80095da <phacDiscLoop_Sw_Int_ActivePollMode+0x2a6>
                break;
 80095d4:	bf00      	nop
 80095d6:	e000      	b.n	80095da <phacDiscLoop_Sw_Int_ActivePollMode+0x2a6>
                break;
 80095d8:	bf00      	nop
    for (bIndex = 0; bIndex < PHAC_DISCLOOP_ACT_POLL_MAX_TECHS_SUPPORTED; bIndex++)
 80095da:	7d7b      	ldrb	r3, [r7, #21]
 80095dc:	3301      	adds	r3, #1
 80095de:	757b      	strb	r3, [r7, #21]
 80095e0:	7d7b      	ldrb	r3, [r7, #21]
 80095e2:	2b02      	cmp	r3, #2
 80095e4:	f67f aeb4 	bls.w	8009350 <phacDiscLoop_Sw_Int_ActivePollMode+0x1c>
        }
    }

    /* No Target present. */
    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 80095e8:	f244 0384 	movw	r3, #16516	@ 0x4084
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3718      	adds	r7, #24
 80095f0:	46bd      	mov	sp, r7
 80095f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080095f6 <phacDiscLoop_Sw_Int_PollMode>:

phStatus_t phacDiscLoop_Sw_Int_PollMode(
                                        phacDiscLoop_Sw_DataParams_t *pDataParams
                                       )
{
 80095f6:	b580      	push	{r7, lr}
 80095f8:	b084      	sub	sp, #16
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM status;
    uint8_t    PH_MEMLOC_REM bResolveTech;
    uint8_t    PH_MEMLOC_REM bTechType;
    uint8_t    PH_MEMLOC_REM bNumOfTechsFound = 0;
 80095fe:	2300      	movs	r3, #0
 8009600:	72fb      	strb	r3, [r7, #11]

    status = PH_ERR_INVALID_PARAMETER;
 8009602:	2321      	movs	r3, #33	@ 0x21
 8009604:	81fb      	strh	r3, [r7, #14]

    /* 技术检测阶段 */
    if(pDataParams->bPollState == PHAC_DISCLOOP_POLL_STATE_DETECTION)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	891b      	ldrh	r3, [r3, #8]
 800960a:	2b01      	cmp	r3, #1
 800960c:	d145      	bne.n	800969a <phacDiscLoop_Sw_Int_PollMode+0xa4>
    {
        if((pDataParams->bOpeMode == RD_LIB_MODE_NFC) ||
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009614:	2b02      	cmp	r3, #2
 8009616:	d004      	beq.n	8009622 <phacDiscLoop_Sw_Int_PollMode+0x2c>
           (pDataParams->bOpeMode == RD_LIB_MODE_ISO))
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
        if((pDataParams->bOpeMode == RD_LIB_MODE_NFC) ||
 800961e:	2b03      	cmp	r3, #3
 8009620:	d110      	bne.n	8009644 <phacDiscLoop_Sw_Int_PollMode+0x4e>
        {
            /* Perform Technology detection Activity */
            status = phacDiscLoop_Sw_Int_TechDetectActivity(
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	7919      	ldrb	r1, [r3, #4]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	789a      	ldrb	r2, [r3, #2]
 800962a:	f107 030b 	add.w	r3, r7, #11
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f000 f976 	bl	8009920 <phacDiscLoop_Sw_Int_TechDetectActivity>
 8009634:	4603      	mov	r3, r0
 8009636:	81fb      	strh	r3, [r7, #14]
                pDataParams,
                pDataParams->bPasPollBailOut,
                pDataParams->bPasPollTechCfg,
                &bNumOfTechsFound);
            /* Return if status is aborted. */
            PH_CHECK_ABORT(status);
 8009638:	89fb      	ldrh	r3, [r7, #14]
 800963a:	b2db      	uxtb	r3, r3
 800963c:	2b12      	cmp	r3, #18
 800963e:	d116      	bne.n	800966e <phacDiscLoop_Sw_Int_PollMode+0x78>
 8009640:	89fb      	ldrh	r3, [r7, #14]
 8009642:	e092      	b.n	800976a <phacDiscLoop_Sw_Int_PollMode+0x174>
        }
        else if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800964a:	2b01      	cmp	r3, #1
 800964c:	d10f      	bne.n	800966e <phacDiscLoop_Sw_Int_PollMode+0x78>
        {
            /* Perform Technology detection Activity */
            status = phacDiscLoop_Sw_Int_EmvcoTechDetectActivity(
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	789b      	ldrb	r3, [r3, #2]
 8009652:	f107 020b 	add.w	r2, r7, #11
 8009656:	4619      	mov	r1, r3
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f000 fa95 	bl	8009b88 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity>
 800965e:	4603      	mov	r3, r0
 8009660:	81fb      	strh	r3, [r7, #14]
                pDataParams,
                pDataParams->bPasPollTechCfg,
                &bNumOfTechsFound);
            /* Return if status is aborted. */
            PH_CHECK_ABORT(status);
 8009662:	89fb      	ldrh	r3, [r7, #14]
 8009664:	b2db      	uxtb	r3, r3
 8009666:	2b12      	cmp	r3, #18
 8009668:	d101      	bne.n	800966e <phacDiscLoop_Sw_Int_PollMode+0x78>
 800966a:	89fb      	ldrh	r3, [r7, #14]
 800966c:	e07d      	b.n	800976a <phacDiscLoop_Sw_Int_PollMode+0x174>
        else
        {
            ;/* Do Nothing */
        }

        if ((0U != (pDataParams->bLpcdEnabled)) &&
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	7fdb      	ldrb	r3, [r3, #31]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d00a      	beq.n	800968c <phacDiscLoop_Sw_Int_PollMode+0x96>
           (0U != (pDataParams->bPasPollTechCfg)) &&
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	789b      	ldrb	r3, [r3, #2]
        if ((0U != (pDataParams->bLpcdEnabled)) &&
 800967a:	2b00      	cmp	r3, #0
 800967c:	d006      	beq.n	800968c <phacDiscLoop_Sw_Int_PollMode+0x96>
           ((status & PH_ERR_MASK) == PHAC_DISCLOOP_NO_TECH_DETECTED))
 800967e:	89fb      	ldrh	r3, [r7, #14]
 8009680:	b2db      	uxtb	r3, r3
           (0U != (pDataParams->bPasPollTechCfg)) &&
 8009682:	2b84      	cmp	r3, #132	@ 0x84
 8009684:	d102      	bne.n	800968c <phacDiscLoop_Sw_Int_PollMode+0x96>
        {
            /* LPCD is success but card presence does not exist/errors */
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_LPCD_NO_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 8009686:	f244 0386 	movw	r3, #16518	@ 0x4086
 800968a:	e06e      	b.n	800976a <phacDiscLoop_Sw_Int_PollMode+0x174>
        }

        if((status & PH_ERR_MASK) == PHAC_DISCLOOP_TECH_DETECTED)
 800968c:	89fb      	ldrh	r3, [r7, #14]
 800968e:	b2db      	uxtb	r3, r3
 8009690:	2b87      	cmp	r3, #135	@ 0x87
 8009692:	d102      	bne.n	800969a <phacDiscLoop_Sw_Int_PollMode+0xa4>
        {
            pDataParams->bPollState = PHAC_DISCLOOP_POLL_STATE_COLLISION_RESOLUTION;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2202      	movs	r2, #2
 8009698:	811a      	strh	r2, [r3, #8]
        }
    }

    /* 碰撞处理 Go for collision resolution if single tech found */
    if(pDataParams->bPollState == PHAC_DISCLOOP_POLL_STATE_COLLISION_RESOLUTION)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	891b      	ldrh	r3, [r3, #8]
 800969e:	2b02      	cmp	r3, #2
 80096a0:	d145      	bne.n	800972e <phacDiscLoop_Sw_Int_PollMode+0x138>
    {
        /* Get Technology to be resolved */
        bResolveTech = pDataParams->bDetectedTechs & pDataParams->bPasPollTechCfg;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	789b      	ldrb	r3, [r3, #2]
 80096ac:	4013      	ands	r3, r2
 80096ae:	737b      	strb	r3, [r7, #13]
        if(0U != (bResolveTech))
 80096b0:	7b7b      	ldrb	r3, [r7, #13]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d00a      	beq.n	80096cc <phacDiscLoop_Sw_Int_PollMode+0xd6>
        {
            if(0U != (bResolveTech & (uint8_t)(bResolveTech - 1U)))
 80096b6:	7b7b      	ldrb	r3, [r7, #13]
 80096b8:	3b01      	subs	r3, #1
 80096ba:	b2da      	uxtb	r2, r3
 80096bc:	7b7b      	ldrb	r3, [r7, #13]
 80096be:	4013      	ands	r3, r2
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d005      	beq.n	80096d2 <phacDiscLoop_Sw_Int_PollMode+0xdc>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80096c6:	f244 0321 	movw	r3, #16417	@ 0x4021
 80096ca:	e04e      	b.n	800976a <phacDiscLoop_Sw_Int_PollMode+0x174>
            }
        }
        else
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80096cc:	f244 0321 	movw	r3, #16417	@ 0x4021
 80096d0:	e04b      	b.n	800976a <phacDiscLoop_Sw_Int_PollMode+0x174>
        }

        PHAC_DISCLOOP_GET_BIT_POS(bResolveTech, bTechType);
 80096d2:	2300      	movs	r3, #0
 80096d4:	733b      	strb	r3, [r7, #12]
 80096d6:	e005      	b.n	80096e4 <phacDiscLoop_Sw_Int_PollMode+0xee>
 80096d8:	7b7b      	ldrb	r3, [r7, #13]
 80096da:	085b      	lsrs	r3, r3, #1
 80096dc:	737b      	strb	r3, [r7, #13]
 80096de:	7b3b      	ldrb	r3, [r7, #12]
 80096e0:	3301      	adds	r3, #1
 80096e2:	733b      	strb	r3, [r7, #12]
 80096e4:	7b7b      	ldrb	r3, [r7, #13]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d1f6      	bne.n	80096d8 <phacDiscLoop_Sw_Int_PollMode+0xe2>
 80096ea:	7b3b      	ldrb	r3, [r7, #12]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d101      	bne.n	80096f4 <phacDiscLoop_Sw_Int_PollMode+0xfe>
 80096f0:	237f      	movs	r3, #127	@ 0x7f
 80096f2:	e03a      	b.n	800976a <phacDiscLoop_Sw_Int_PollMode+0x174>

        status = phacDiscLoop_Sw_Int_ColsnReslnActivity(pDataParams, (bTechType -  (uint8_t)1U));
 80096f4:	7b3b      	ldrb	r3, [r7, #12]
 80096f6:	3b01      	subs	r3, #1
 80096f8:	b2db      	uxtb	r3, r3
 80096fa:	4619      	mov	r1, r3
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f000 fbb7 	bl	8009e70 <phacDiscLoop_Sw_Int_ColsnReslnActivity>
 8009702:	4603      	mov	r3, r0
 8009704:	81fb      	strh	r3, [r7, #14]
        if((status & PH_ERR_MASK) == PHAC_DISCLOOP_DEVICE_RESOLVED)
 8009706:	89fb      	ldrh	r3, [r7, #14]
 8009708:	b2db      	uxtb	r3, r3
 800970a:	2b89      	cmp	r3, #137	@ 0x89
 800970c:	d109      	bne.n	8009722 <phacDiscLoop_Sw_Int_PollMode+0x12c>
        {
                /* Activation */
                status = phacDiscLoop_Sw_Int_ActivateDevice(pDataParams, (bTechType - (uint8_t)1U), (uint8_t)0x00U);
 800970e:	7b3b      	ldrb	r3, [r7, #12]
 8009710:	3b01      	subs	r3, #1
 8009712:	b2db      	uxtb	r3, r3
 8009714:	2200      	movs	r2, #0
 8009716:	4619      	mov	r1, r3
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 fbe5 	bl	8009ee8 <phacDiscLoop_Sw_Int_ActivateDevice>
 800971e:	4603      	mov	r3, r0
 8009720:	81fb      	strh	r3, [r7, #14]
        }
        /* Return if status is aborted. */
        PH_CHECK_ABORT(status);
 8009722:	89fb      	ldrh	r3, [r7, #14]
 8009724:	b2db      	uxtb	r3, r3
 8009726:	2b12      	cmp	r3, #18
 8009728:	d101      	bne.n	800972e <phacDiscLoop_Sw_Int_PollMode+0x138>
 800972a:	89fb      	ldrh	r3, [r7, #14]
 800972c:	e01d      	b.n	800976a <phacDiscLoop_Sw_Int_PollMode+0x174>
    }

    /* 移除检测 */
    if(pDataParams->bPollState == PHAC_DISCLOOP_POLL_STATE_REMOVAL)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	891b      	ldrh	r3, [r3, #8]
 8009732:	2b03      	cmp	r3, #3
 8009734:	d109      	bne.n	800974a <phacDiscLoop_Sw_Int_PollMode+0x154>
    {
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800973c:	2b01      	cmp	r3, #1
 800973e:	d104      	bne.n	800974a <phacDiscLoop_Sw_Int_PollMode+0x154>
        {
            status = phacDiscLoop_Sw_Int_EmvcoRemovalProcedure(pDataParams);
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f000 f816 	bl	8009772 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure>
 8009746:	4603      	mov	r3, r0
 8009748:	81fb      	strh	r3, [r7, #14]
        }
    }
    return PH_ADD_COMPCODE(status, PH_COMP_AC_DISCLOOP);
 800974a:	89fb      	ldrh	r3, [r7, #14]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d00b      	beq.n	8009768 <phacDiscLoop_Sw_Int_PollMode+0x172>
 8009750:	89fb      	ldrh	r3, [r7, #14]
 8009752:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009756:	2b00      	cmp	r3, #0
 8009758:	d106      	bne.n	8009768 <phacDiscLoop_Sw_Int_PollMode+0x172>
 800975a:	89fb      	ldrh	r3, [r7, #14]
 800975c:	b2db      	uxtb	r3, r3
 800975e:	b29b      	uxth	r3, r3
 8009760:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009764:	b29b      	uxth	r3, r3
 8009766:	e000      	b.n	800976a <phacDiscLoop_Sw_Int_PollMode+0x174>
 8009768:	89fb      	ldrh	r3, [r7, #14]
}
 800976a:	4618      	mov	r0, r3
 800976c:	3710      	adds	r7, #16
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}

08009772 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure>:

phStatus_t phacDiscLoop_Sw_Int_EmvcoRemovalProcedure(
                                                     phacDiscLoop_Sw_DataParams_t * pDataParams
                                                     )
{
 8009772:	b580      	push	{r7, lr}
 8009774:	b086      	sub	sp, #24
 8009776:	af02      	add	r7, sp, #8
 8009778:	6078      	str	r0, [r7, #4]
#if (defined NXPBUILD__PHAC_DISCLOOP_TYPEB_I3P4B_TAGS) && (defined NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS)

    phStatus_t PH_MEMLOC_REM   status;
    uint8_t    PH_MEMLOC_COUNT bPollingCount = 0;
 800977a:	2300      	movs	r3, #0
 800977c:	737b      	strb	r3, [r7, #13]

    PH_CHECK_SUCCESS_FCT(status, phhalHw_FieldOff(pDataParams->pHalDataParams));
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009782:	4618      	mov	r0, r3
 8009784:	f004 ff2a 	bl	800e5dc <phhalHw_Pn5180_FieldOff>
 8009788:	4603      	mov	r3, r0
 800978a:	81fb      	strh	r3, [r7, #14]
 800978c:	89fb      	ldrh	r3, [r7, #14]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d001      	beq.n	8009796 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x24>
 8009792:	89fb      	ldrh	r3, [r7, #14]
 8009794:	e0bf      	b.n	8009916 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>

    PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800979a:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 800979e:	2100      	movs	r1, #0
 80097a0:	4618      	mov	r0, r3
 80097a2:	f004 ff3f 	bl	800e624 <phhalHw_Pn5180_Wait>
 80097a6:	4603      	mov	r3, r0
 80097a8:	81fb      	strh	r3, [r7, #14]
 80097aa:	89fb      	ldrh	r3, [r7, #14]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d001      	beq.n	80097b4 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x42>
 80097b0:	89fb      	ldrh	r3, [r7, #14]
 80097b2:	e0b0      	b.n	8009916 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
        PHHAL_HW_TIME_MICROSECONDS,
        PH_NXPNFCRDLIB_CONFIG_EMVCO_FIELD_OFF_DELAY_US)
        );

    /* Set poll state to Detection */
    pDataParams->bPollState = PHAC_DISCLOOP_POLL_STATE_DETECTION;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2201      	movs	r2, #1
 80097b8:	811a      	strh	r2, [r3, #8]

    if(PHAC_DISCLOOP_CHECK_ANDMASK(pDataParams->bDetectedTechs, PHAC_DISCLOOP_POS_BIT_MASK_A))
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80097c0:	f003 0301 	and.w	r3, r3, #1
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d054      	beq.n	8009872 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x100>
    {
        pDataParams->bDetectedTechs = 0x00;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2200      	movs	r2, #0
 80097cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

        PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097d4:	2101      	movs	r1, #1
 80097d6:	4618      	mov	r0, r3
 80097d8:	f004 fa62 	bl	800dca0 <phhalHw_Pn5180_ApplyProtocolSettings>
 80097dc:	4603      	mov	r3, r0
 80097de:	81fb      	strh	r3, [r7, #14]
 80097e0:	89fb      	ldrh	r3, [r7, #14]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d001      	beq.n	80097ea <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x78>
 80097e6:	89fb      	ldrh	r3, [r7, #14]
 80097e8:	e095      	b.n	8009916 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
            pDataParams->pHalDataParams,
            PHHAL_HW_CARDTYPE_ISO14443A)
            );

        /* Perform Field ON after Apply protocol settings. */
        PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_RfcaOff_FieldOn(pDataParams));
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 fbba 	bl	8009f64 <phacDiscLoop_Sw_Int_RfcaOff_FieldOn>
 80097f0:	4603      	mov	r3, r0
 80097f2:	81fb      	strh	r3, [r7, #14]
 80097f4:	89fb      	ldrh	r3, [r7, #14]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d037      	beq.n	800986a <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0xf8>
 80097fa:	89fb      	ldrh	r3, [r7, #14]
 80097fc:	e08b      	b.n	8009916 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>

        while(bPollingCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_REMOVAL_RETRY_COUNT)
        {
            /* Apply Guard time. */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	8a1b      	ldrh	r3, [r3, #16]
 8009806:	461a      	mov	r2, r3
 8009808:	2135      	movs	r1, #53	@ 0x35
 800980a:	f004 ffc5 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 800980e:	4603      	mov	r3, r0
 8009810:	81fb      	strh	r3, [r7, #14]
 8009812:	89fb      	ldrh	r3, [r7, #14]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d001      	beq.n	800981c <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0xaa>
 8009818:	89fb      	ldrh	r3, [r7, #14]
 800981a:	e07c      	b.n	8009916 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
                pDataParams->pHalDataParams,
                PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
                pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_A]));

            status = phpalI14443p3a_WakeUpA(
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	335e      	adds	r3, #94	@ 0x5e
 8009824:	4619      	mov	r1, r3
 8009826:	4610      	mov	r0, r2
 8009828:	f00a fde5 	bl	80143f6 <phpalI14443p3a_Sw_WakeUpA>
 800982c:	4603      	mov	r3, r0
 800982e:	81fb      	strh	r3, [r7, #14]
                pDataParams->pPal1443p3aDataParams,
                pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aAtqa);
            if ((status & PH_ERR_MASK) != PH_ERR_IO_TIMEOUT)
 8009830:	89fb      	ldrh	r3, [r7, #14]
 8009832:	b2db      	uxtb	r3, r3
 8009834:	2b01      	cmp	r3, #1
 8009836:	d015      	beq.n	8009864 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0xf2>
            {
                /* Return if status is aborted. */
                PH_CHECK_ABORT(status);
 8009838:	89fb      	ldrh	r3, [r7, #14]
 800983a:	b2db      	uxtb	r3, r3
 800983c:	2b12      	cmp	r3, #18
 800983e:	d101      	bne.n	8009844 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0xd2>
 8009840:	89fb      	ldrh	r3, [r7, #14]
 8009842:	e068      	b.n	8009916 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>

                PH_CHECK_ABORT_FCT(status, phpalI14443p3a_HaltA(pDataParams->pPal1443p3aDataParams));
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009848:	4618      	mov	r0, r3
 800984a:	f00a fde3 	bl	8014414 <phpalI14443p3a_Sw_HaltA>
 800984e:	4603      	mov	r3, r0
 8009850:	81fb      	strh	r3, [r7, #14]
 8009852:	89fb      	ldrh	r3, [r7, #14]
 8009854:	b2db      	uxtb	r3, r3
 8009856:	2b12      	cmp	r3, #18
 8009858:	d101      	bne.n	800985e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0xec>
 800985a:	89fb      	ldrh	r3, [r7, #14]
 800985c:	e05b      	b.n	8009916 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
                bPollingCount = 0;
 800985e:	2300      	movs	r3, #0
 8009860:	737b      	strb	r3, [r7, #13]
 8009862:	e002      	b.n	800986a <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0xf8>
            }
            else
            {
                bPollingCount++;
 8009864:	7b7b      	ldrb	r3, [r7, #13]
 8009866:	3301      	adds	r3, #1
 8009868:	737b      	strb	r3, [r7, #13]
        while(bPollingCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_REMOVAL_RETRY_COUNT)
 800986a:	7b7b      	ldrb	r3, [r7, #13]
 800986c:	2b02      	cmp	r3, #2
 800986e:	d9c6      	bls.n	80097fe <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x8c>
 8009870:	e04a      	b.n	8009908 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x196>
            }
        }/* while(bPollingCount < Max_Retry_Count) */
    }
    else
    {
        pDataParams->bDetectedTechs = 0x00;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2200      	movs	r2, #0
 8009876:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

        PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800987e:	2102      	movs	r1, #2
 8009880:	4618      	mov	r0, r3
 8009882:	f004 fa0d 	bl	800dca0 <phhalHw_Pn5180_ApplyProtocolSettings>
 8009886:	4603      	mov	r3, r0
 8009888:	81fb      	strh	r3, [r7, #14]
 800988a:	89fb      	ldrh	r3, [r7, #14]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d001      	beq.n	8009894 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x122>
 8009890:	89fb      	ldrh	r3, [r7, #14]
 8009892:	e040      	b.n	8009916 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
            pDataParams->pHalDataParams,
            PHHAL_HW_CARDTYPE_ISO14443B)
            );

        /* Perform Field ON after Apply protocol settings. */
        PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_RfcaOff_FieldOn(pDataParams));
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f000 fb65 	bl	8009f64 <phacDiscLoop_Sw_Int_RfcaOff_FieldOn>
 800989a:	4603      	mov	r3, r0
 800989c:	81fb      	strh	r3, [r7, #14]
 800989e:	89fb      	ldrh	r3, [r7, #14]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d02e      	beq.n	8009902 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x190>
 80098a4:	89fb      	ldrh	r3, [r7, #14]
 80098a6:	e036      	b.n	8009916 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>

        while(bPollingCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_REMOVAL_RETRY_COUNT)
        {
            /* Apply Guard time. */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	8a5b      	ldrh	r3, [r3, #18]
 80098b0:	461a      	mov	r2, r3
 80098b2:	2135      	movs	r1, #53	@ 0x35
 80098b4:	f004 ff70 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 80098b8:	4603      	mov	r3, r0
 80098ba:	81fb      	strh	r3, [r7, #14]
 80098bc:	89fb      	ldrh	r3, [r7, #14]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d001      	beq.n	80098c6 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x154>
 80098c2:	89fb      	ldrh	r3, [r7, #14]
 80098c4:	e027      	b.n	8009916 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
                pDataParams->pHalDataParams,
                PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
                pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_B]));

            status = phpalI14443p3b_WakeUpB(
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	33cd      	adds	r3, #205	@ 0xcd
 80098ce:	687a      	ldr	r2, [r7, #4]
 80098d0:	32da      	adds	r2, #218	@ 0xda
 80098d2:	9201      	str	r2, [sp, #4]
 80098d4:	9300      	str	r3, [sp, #0]
 80098d6:	2300      	movs	r3, #0
 80098d8:	2200      	movs	r2, #0
 80098da:	2100      	movs	r1, #0
 80098dc:	f00b fc1d 	bl	801511a <phpalI14443p3b_Sw_WakeUpB>
 80098e0:	4603      	mov	r3, r0
 80098e2:	81fb      	strh	r3, [r7, #14]
                0,
                0,
                0,
                pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].aAtqB,
                &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].bAtqBLength);
            if ((status & PH_ERR_MASK) != PH_ERR_IO_TIMEOUT)
 80098e4:	89fb      	ldrh	r3, [r7, #14]
 80098e6:	b2db      	uxtb	r3, r3
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d007      	beq.n	80098fc <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x18a>
            {
                bPollingCount = 0;
 80098ec:	2300      	movs	r3, #0
 80098ee:	737b      	strb	r3, [r7, #13]

                /* Return if status is aborted. */
                PH_CHECK_ABORT(status);
 80098f0:	89fb      	ldrh	r3, [r7, #14]
 80098f2:	b2db      	uxtb	r3, r3
 80098f4:	2b12      	cmp	r3, #18
 80098f6:	d104      	bne.n	8009902 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x190>
 80098f8:	89fb      	ldrh	r3, [r7, #14]
 80098fa:	e00c      	b.n	8009916 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
            }
            else
            {
                bPollingCount++;
 80098fc:	7b7b      	ldrb	r3, [r7, #13]
 80098fe:	3301      	adds	r3, #1
 8009900:	737b      	strb	r3, [r7, #13]
        while(bPollingCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_REMOVAL_RETRY_COUNT)
 8009902:	7b7b      	ldrb	r3, [r7, #13]
 8009904:	2b02      	cmp	r3, #2
 8009906:	d9cf      	bls.n	80098a8 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x136>
            }
        }/* while(bPollingCount < Max_Retry_Count) */
    }/* else */
    if ((status & PH_ERR_MASK) != PH_ERR_IO_TIMEOUT)
 8009908:	89fb      	ldrh	r3, [r7, #14]
 800990a:	b2db      	uxtb	r3, r3
 800990c:	2b01      	cmp	r3, #1
 800990e:	d001      	beq.n	8009914 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a2>
    {
        return status;
 8009910:	89fb      	ldrh	r3, [r7, #14]
 8009912:	e000      	b.n	8009916 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
    }
    return PH_ERR_SUCCESS;
 8009914:	2300      	movs	r3, #0
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif
}
 8009916:	4618      	mov	r0, r3
 8009918:	3710      	adds	r7, #16
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}
	...

08009920 <phacDiscLoop_Sw_Int_TechDetectActivity>:
                                                  phacDiscLoop_Sw_DataParams_t *pDataParams,
                                                  uint8_t bPasPollBailOut,
                                                  uint8_t bDetectConfig,
                                                  uint8_t* pNumOfTechsDetect
                                                  )
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b086      	sub	sp, #24
 8009924:	af00      	add	r7, sp, #0
 8009926:	60f8      	str	r0, [r7, #12]
 8009928:	607b      	str	r3, [r7, #4]
 800992a:	460b      	mov	r3, r1
 800992c:	72fb      	strb	r3, [r7, #11]
 800992e:	4613      	mov	r3, r2
 8009930:	72bb      	strb	r3, [r7, #10]
    phStatus_t PH_MEMLOC_REM   status = PHAC_DISCLOOP_NO_TECH_DETECTED;
 8009932:	2384      	movs	r3, #132	@ 0x84
 8009934:	82fb      	strh	r3, [r7, #22]
    uint8_t    PH_MEMLOC_COUNT bTechLoopIndex;
    uint8_t    PH_MEMLOC_COUNT bTechIndex;
    uint8_t    PH_MEMLOC_REM   bNumOfTechsFound = 0;
 8009936:	2300      	movs	r3, #0
 8009938:	753b      	strb	r3, [r7, #20]
    uint8_t    PH_MEMLOC_REM   bTechTypeF_Detected = PH_OFF;
 800993a:	2300      	movs	r3, #0
 800993c:	74fb      	strb	r3, [r7, #19]
    uint16_t   PH_MEMLOC_REM   wIntFieldStatus;

    pDataParams->bDetectedTechs = 0x00;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2200      	movs	r2, #0
 8009942:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    pDataParams->bNumOfCards = 0x00;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2200      	movs	r2, #0
 800994a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    /* Apply Proprietary Technology Guard Time(PTGT) if Proprietary Technology Poll enabled */
    status = phacDiscLoop_Sw_Int_Apply_PTGT(pDataParams);
 800994e:	68f8      	ldr	r0, [r7, #12]
 8009950:	f7ff fb90 	bl	8009074 <phacDiscLoop_Sw_Int_Apply_PTGT>
 8009954:	4603      	mov	r3, r0
 8009956:	82fb      	strh	r3, [r7, #22]
    PH_CHECK_SUCCESS(status);
 8009958:	8afb      	ldrh	r3, [r7, #22]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d001      	beq.n	8009962 <phacDiscLoop_Sw_Int_TechDetectActivity+0x42>
 800995e:	8afb      	ldrh	r3, [r7, #22]
 8009960:	e109      	b.n	8009b76 <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>

    /* Poll for requested NFC-Tech Type presence. */
    for (bTechLoopIndex = 0; bTechLoopIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bTechLoopIndex++)
 8009962:	2300      	movs	r3, #0
 8009964:	757b      	strb	r3, [r7, #21]
 8009966:	e0e6      	b.n	8009b36 <phacDiscLoop_Sw_Int_TechDetectActivity+0x216>
    {
        /* In NFC mode, poll proprietary technologies only if NFC technologies are not detected */
        if((pDataParams->bOpeMode == RD_LIB_MODE_NFC) && (0U != bNumOfTechsFound)
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800996e:	2b02      	cmp	r3, #2
 8009970:	d106      	bne.n	8009980 <phacDiscLoop_Sw_Int_TechDetectActivity+0x60>
 8009972:	7d3b      	ldrb	r3, [r7, #20]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d003      	beq.n	8009980 <phacDiscLoop_Sw_Int_TechDetectActivity+0x60>
           && (bTechLoopIndex == PHAC_DISCLOOP_POLL_MAX_NFC_TECHS_SUPPORTED))
 8009978:	7d7b      	ldrb	r3, [r7, #21]
 800997a:	2b05      	cmp	r3, #5
 800997c:	f000 80e0 	beq.w	8009b40 <phacDiscLoop_Sw_Int_TechDetectActivity+0x220>
        {
            break;
        }

        bTechIndex = pDataParams->pPasTechPollSeq[bTechLoopIndex];
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009984:	7d7b      	ldrb	r3, [r7, #21]
 8009986:	4413      	add	r3, r2
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	74bb      	strb	r3, [r7, #18]

        if (((bTechIndex == PHAC_DISCLOOP_TECH_TYPE_F212) || (bTechIndex == PHAC_DISCLOOP_TECH_TYPE_F424))
 800998c:	7cbb      	ldrb	r3, [r7, #18]
 800998e:	2b02      	cmp	r3, #2
 8009990:	d002      	beq.n	8009998 <phacDiscLoop_Sw_Int_TechDetectActivity+0x78>
 8009992:	7cbb      	ldrb	r3, [r7, #18]
 8009994:	2b03      	cmp	r3, #3
 8009996:	d103      	bne.n	80099a0 <phacDiscLoop_Sw_Int_TechDetectActivity+0x80>
            && (bTechTypeF_Detected == PH_ON))
 8009998:	7cfb      	ldrb	r3, [r7, #19]
 800999a:	2b01      	cmp	r3, #1
 800999c:	f000 80c7 	beq.w	8009b2e <phacDiscLoop_Sw_Int_TechDetectActivity+0x20e>
        {
            continue;
        }

        if (0U != (bDetectConfig & (PH_ON << bTechIndex)))
 80099a0:	7aba      	ldrb	r2, [r7, #10]
 80099a2:	7cbb      	ldrb	r3, [r7, #18]
 80099a4:	fa22 f303 	lsr.w	r3, r2, r3
 80099a8:	f003 0301 	and.w	r3, r3, #1
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	f000 80bf 	beq.w	8009b30 <phacDiscLoop_Sw_Int_TechDetectActivity+0x210>
        {
            /* Get Config to check the internal Field On. */
            status = phhalHw_GetConfig(
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099b6:	f107 0210 	add.w	r2, r7, #16
 80099ba:	215f      	movs	r1, #95	@ 0x5f
 80099bc:	4618      	mov	r0, r3
 80099be:	f006 fb39 	bl	8010034 <phhalHw_Pn5180_GetConfig>
 80099c2:	4603      	mov	r3, r0
 80099c4:	82fb      	strh	r3, [r7, #22]
                pDataParams->pHalDataParams,
                PHHAL_HW_CONFIG_INT_RF_ON,
                &wIntFieldStatus);
            PH_CHECK_SUCCESS(status);
 80099c6:	8afb      	ldrh	r3, [r7, #22]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d001      	beq.n	80099d0 <phacDiscLoop_Sw_Int_TechDetectActivity+0xb0>
 80099cc:	8afb      	ldrh	r3, [r7, #22]
 80099ce:	e0d2      	b.n	8009b76 <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>

            if (wIntFieldStatus == PH_ON)
 80099d0:	8a3b      	ldrh	r3, [r7, #16]
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d123      	bne.n	8009a1e <phacDiscLoop_Sw_Int_TechDetectActivity+0xfe>
            {
                if (((uint8_t)PHAC_DISCLOOP_TECH_TYPE_F212 == bTechIndex) ||
 80099d6:	7cbb      	ldrb	r3, [r7, #18]
 80099d8:	2b02      	cmp	r3, #2
 80099da:	d002      	beq.n	80099e2 <phacDiscLoop_Sw_Int_TechDetectActivity+0xc2>
 80099dc:	7cbb      	ldrb	r3, [r7, #18]
 80099de:	2b03      	cmp	r3, #3
 80099e0:	d10b      	bne.n	80099fa <phacDiscLoop_Sw_Int_TechDetectActivity+0xda>
                    ((uint8_t)PHAC_DISCLOOP_TECH_TYPE_F424 ==  bTechIndex))
                {
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
                    PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_Config_GTF(pDataParams, bTechIndex));
 80099e2:	7cbb      	ldrb	r3, [r7, #18]
 80099e4:	4619      	mov	r1, r3
 80099e6:	68f8      	ldr	r0, [r7, #12]
 80099e8:	f002 f8f0 	bl	800bbcc <phacDiscLoop_Sw_Int_Config_GTF>
 80099ec:	4603      	mov	r3, r0
 80099ee:	82fb      	strh	r3, [r7, #22]
 80099f0:	8afb      	ldrh	r3, [r7, #22]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d013      	beq.n	8009a1e <phacDiscLoop_Sw_Int_TechDetectActivity+0xfe>
 80099f6:	8afb      	ldrh	r3, [r7, #22]
 80099f8:	e0bd      	b.n	8009b76 <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */
                }
                else
                {
                    /* Apply Guard time. */
                    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80099fe:	7cba      	ldrb	r2, [r7, #18]
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	3208      	adds	r2, #8
 8009a04:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009a08:	461a      	mov	r2, r3
 8009a0a:	2135      	movs	r1, #53	@ 0x35
 8009a0c:	f004 fec4 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8009a10:	4603      	mov	r3, r0
 8009a12:	82fb      	strh	r3, [r7, #22]
 8009a14:	8afb      	ldrh	r3, [r7, #22]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d001      	beq.n	8009a1e <phacDiscLoop_Sw_Int_TechDetectActivity+0xfe>
 8009a1a:	8afb      	ldrh	r3, [r7, #22]
 8009a1c:	e0ab      	b.n	8009b76 <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
                        pDataParams->waPasPollGTimeUs[bTechIndex]));
                }
            }

            /* Apply Protocol Setting for Selected Tech  */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(pDataParams->pHalDataParams,
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009a22:	7cbb      	ldrb	r3, [r7, #18]
 8009a24:	4956      	ldr	r1, [pc, #344]	@ (8009b80 <phacDiscLoop_Sw_Int_TechDetectActivity+0x260>)
 8009a26:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009a2a:	b2db      	uxtb	r3, r3
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	4610      	mov	r0, r2
 8009a30:	f004 f936 	bl	800dca0 <phhalHw_Pn5180_ApplyProtocolSettings>
 8009a34:	4603      	mov	r3, r0
 8009a36:	82fb      	strh	r3, [r7, #22]
 8009a38:	8afb      	ldrh	r3, [r7, #22]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d001      	beq.n	8009a42 <phacDiscLoop_Sw_Int_TechDetectActivity+0x122>
 8009a3e:	8afb      	ldrh	r3, [r7, #22]
 8009a40:	e099      	b.n	8009b76 <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
                (uint8_t)(gPasTechTypeMapTable[bTechIndex] & 0xFFU)));

            /* Perform I-RFCA and Switch on RF Field after Apply protocol settings, if in NFC and ISO mode. */
            PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_FieldOn(pDataParams));
 8009a42:	68f8      	ldr	r0, [r7, #12]
 8009a44:	f000 fab8 	bl	8009fb8 <phacDiscLoop_Sw_Int_FieldOn>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	82fb      	strh	r3, [r7, #22]
 8009a4c:	8afb      	ldrh	r3, [r7, #22]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d001      	beq.n	8009a56 <phacDiscLoop_Sw_Int_TechDetectActivity+0x136>
 8009a52:	8afb      	ldrh	r3, [r7, #22]
 8009a54:	e08f      	b.n	8009b76 <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>

            if (wIntFieldStatus == PH_OFF)
 8009a56:	8a3b      	ldrh	r3, [r7, #16]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d123      	bne.n	8009aa4 <phacDiscLoop_Sw_Int_TechDetectActivity+0x184>
            {
                if (((uint8_t) PHAC_DISCLOOP_TECH_TYPE_F212 ==  bTechIndex) ||
 8009a5c:	7cbb      	ldrb	r3, [r7, #18]
 8009a5e:	2b02      	cmp	r3, #2
 8009a60:	d002      	beq.n	8009a68 <phacDiscLoop_Sw_Int_TechDetectActivity+0x148>
 8009a62:	7cbb      	ldrb	r3, [r7, #18]
 8009a64:	2b03      	cmp	r3, #3
 8009a66:	d10b      	bne.n	8009a80 <phacDiscLoop_Sw_Int_TechDetectActivity+0x160>
                    ((uint8_t) PHAC_DISCLOOP_TECH_TYPE_F424 ==  bTechIndex))
                {
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
                    PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_Config_GTF(pDataParams, bTechIndex));
 8009a68:	7cbb      	ldrb	r3, [r7, #18]
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	68f8      	ldr	r0, [r7, #12]
 8009a6e:	f002 f8ad 	bl	800bbcc <phacDiscLoop_Sw_Int_Config_GTF>
 8009a72:	4603      	mov	r3, r0
 8009a74:	82fb      	strh	r3, [r7, #22]
 8009a76:	8afb      	ldrh	r3, [r7, #22]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d013      	beq.n	8009aa4 <phacDiscLoop_Sw_Int_TechDetectActivity+0x184>
 8009a7c:	8afb      	ldrh	r3, [r7, #22]
 8009a7e:	e07a      	b.n	8009b76 <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */
                }
                else
                {
                    /* Apply Guard time. */
                    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8009a84:	7cba      	ldrb	r2, [r7, #18]
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	3208      	adds	r2, #8
 8009a8a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009a8e:	461a      	mov	r2, r3
 8009a90:	2135      	movs	r1, #53	@ 0x35
 8009a92:	f004 fe81 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8009a96:	4603      	mov	r3, r0
 8009a98:	82fb      	strh	r3, [r7, #22]
 8009a9a:	8afb      	ldrh	r3, [r7, #22]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d001      	beq.n	8009aa4 <phacDiscLoop_Sw_Int_TechDetectActivity+0x184>
 8009aa0:	8afb      	ldrh	r3, [r7, #22]
 8009aa2:	e068      	b.n	8009b76 <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
                        pDataParams->waPasPollGTimeUs[bTechIndex]));
                }
            }

            /* Perform Tech detection. */
            status = pfDetTechs[bTechIndex](pDataParams);
 8009aa4:	7cbb      	ldrb	r3, [r7, #18]
 8009aa6:	4a37      	ldr	r2, [pc, #220]	@ (8009b84 <phacDiscLoop_Sw_Int_TechDetectActivity+0x264>)
 8009aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009aac:	68f8      	ldr	r0, [r7, #12]
 8009aae:	4798      	blx	r3
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	82fb      	strh	r3, [r7, #22]

            if ((status & PH_ERR_MASK) == PHAC_DISCLOOP_TECH_DETECTED)
 8009ab4:	8afb      	ldrh	r3, [r7, #22]
 8009ab6:	b2db      	uxtb	r3, r3
 8009ab8:	2b87      	cmp	r3, #135	@ 0x87
 8009aba:	d123      	bne.n	8009b04 <phacDiscLoop_Sw_Int_TechDetectActivity+0x1e4>
            {
                /*Set the corresponding detected bit. */
                pDataParams->bDetectedTechs |= PH_ON << bTechIndex;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 8009ac2:	7cbb      	ldrb	r3, [r7, #18]
 8009ac4:	2101      	movs	r1, #1
 8009ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	4313      	orrs	r3, r2
 8009ace:	b2da      	uxtb	r2, r3
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                bNumOfTechsFound++;
 8009ad6:	7d3b      	ldrb	r3, [r7, #20]
 8009ad8:	3301      	adds	r3, #1
 8009ada:	753b      	strb	r3, [r7, #20]
                /* Since Device detected at 212 Baud, Skip polling at 424 */
                if((0U != ((pDataParams->bDetectedTechs & PHAC_DISCLOOP_POS_BIT_MASK_F212)))
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8009ae2:	f003 0304 	and.w	r3, r3, #4
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d106      	bne.n	8009af8 <phacDiscLoop_Sw_Int_TechDetectActivity+0x1d8>
                        || (0U != ((pDataParams->bDetectedTechs & PHAC_DISCLOOP_POS_BIT_MASK_F424))))
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8009af0:	f003 0308 	and.w	r3, r3, #8
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d00b      	beq.n	8009b10 <phacDiscLoop_Sw_Int_TechDetectActivity+0x1f0>
                {
                    *pNumOfTechsDetect = bNumOfTechsFound;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	7d3a      	ldrb	r2, [r7, #20]
 8009afc:	701a      	strb	r2, [r3, #0]
                    bTechTypeF_Detected = PH_ON;
 8009afe:	2301      	movs	r3, #1
 8009b00:	74fb      	strb	r3, [r7, #19]
 8009b02:	e005      	b.n	8009b10 <phacDiscLoop_Sw_Int_TechDetectActivity+0x1f0>
                }
            }
            else
            {
                PH_CHECK_ABORT(status);
 8009b04:	8afb      	ldrh	r3, [r7, #22]
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	2b12      	cmp	r3, #18
 8009b0a:	d101      	bne.n	8009b10 <phacDiscLoop_Sw_Int_TechDetectActivity+0x1f0>
 8009b0c:	8afb      	ldrh	r3, [r7, #22]
 8009b0e:	e032      	b.n	8009b76 <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
            }

            if((0U != (bPasPollBailOut & (PH_ON << bTechIndex))) && (0U != bNumOfTechsFound))
 8009b10:	7afa      	ldrb	r2, [r7, #11]
 8009b12:	7cbb      	ldrb	r3, [r7, #18]
 8009b14:	fa22 f303 	lsr.w	r3, r2, r3
 8009b18:	f003 0301 	and.w	r3, r3, #1
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d007      	beq.n	8009b30 <phacDiscLoop_Sw_Int_TechDetectActivity+0x210>
 8009b20:	7d3b      	ldrb	r3, [r7, #20]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d004      	beq.n	8009b30 <phacDiscLoop_Sw_Int_TechDetectActivity+0x210>
            {
                /* Bailout set, Returning to application */
                *pNumOfTechsDetect = bNumOfTechsFound;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	7d3a      	ldrb	r2, [r7, #20]
 8009b2a:	701a      	strb	r2, [r3, #0]
                break;
 8009b2c:	e009      	b.n	8009b42 <phacDiscLoop_Sw_Int_TechDetectActivity+0x222>
            continue;
 8009b2e:	bf00      	nop
    for (bTechLoopIndex = 0; bTechLoopIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bTechLoopIndex++)
 8009b30:	7d7b      	ldrb	r3, [r7, #21]
 8009b32:	3301      	adds	r3, #1
 8009b34:	757b      	strb	r3, [r7, #21]
 8009b36:	7d7b      	ldrb	r3, [r7, #21]
 8009b38:	2b05      	cmp	r3, #5
 8009b3a:	f67f af15 	bls.w	8009968 <phacDiscLoop_Sw_Int_TechDetectActivity+0x48>
 8009b3e:	e000      	b.n	8009b42 <phacDiscLoop_Sw_Int_TechDetectActivity+0x222>
            break;
 8009b40:	bf00      	nop
            }
        }
    }

    if (bNumOfTechsFound == 1U)
 8009b42:	7d3b      	ldrb	r3, [r7, #20]
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d105      	bne.n	8009b54 <phacDiscLoop_Sw_Int_TechDetectActivity+0x234>
    {
        *pNumOfTechsDetect = bNumOfTechsFound;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	7d3a      	ldrb	r2, [r7, #20]
 8009b4c:	701a      	strb	r2, [r3, #0]
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 8009b4e:	f244 0387 	movw	r3, #16519	@ 0x4087
 8009b52:	e010      	b.n	8009b76 <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
    }
    else if(bNumOfTechsFound > 1U)
 8009b54:	7d3b      	ldrb	r3, [r7, #20]
 8009b56:	2b01      	cmp	r3, #1
 8009b58:	d905      	bls.n	8009b66 <phacDiscLoop_Sw_Int_TechDetectActivity+0x246>
    {
        *pNumOfTechsDetect = bNumOfTechsFound;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	7d3a      	ldrb	r2, [r7, #20]
 8009b5e:	701a      	strb	r2, [r3, #0]
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_MULTI_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 8009b60:	f244 0388 	movw	r3, #16520	@ 0x4088
 8009b64:	e007      	b.n	8009b76 <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
    }
    else if(PH_ERR_IO_TIMEOUT == (status & PH_ERR_MASK))
 8009b66:	8afb      	ldrh	r3, [r7, #22]
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	d102      	bne.n	8009b74 <phacDiscLoop_Sw_Int_TechDetectActivity+0x254>
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 8009b6e:	f244 0384 	movw	r3, #16516	@ 0x4084
 8009b72:	e000      	b.n	8009b76 <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
    }
    else
    {
        return status; /* Other Failure */
 8009b74:	8afb      	ldrh	r3, [r7, #22]
    }
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3718      	adds	r7, #24
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
 8009b7e:	bf00      	nop
 8009b80:	080238e0 	.word	0x080238e0
 8009b84:	08023910 	.word	0x08023910

08009b88 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity>:
phStatus_t phacDiscLoop_Sw_Int_EmvcoTechDetectActivity(
                                                       phacDiscLoop_Sw_DataParams_t *pDataParams,
                                                       uint8_t bDetectConfig,
                                                       uint8_t* pNumOfTechsDetect
                                                       )
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b088      	sub	sp, #32
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	60f8      	str	r0, [r7, #12]
 8009b90:	460b      	mov	r3, r1
 8009b92:	607a      	str	r2, [r7, #4]
 8009b94:	72fb      	strb	r3, [r7, #11]
    phStatus_t PH_MEMLOC_REM status = PHAC_DISCLOOP_NO_TECH_DETECTED;
 8009b96:	2384      	movs	r3, #132	@ 0x84
 8009b98:	83fb      	strh	r3, [r7, #30]
    uint8_t    PH_MEMLOC_REM bNumOfTechsFound = 0;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	777b      	strb	r3, [r7, #29]
    uint8_t    PH_MEMLOC_REM bCurrentPollTech = 0;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	757b      	strb	r3, [r7, #21]
    uint8_t    PH_MEMLOC_COUNT bTechLoopIndex = 0;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	773b      	strb	r3, [r7, #28]
    uint8_t    PH_MEMLOC_COUNT bTechIndex = 0;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	753b      	strb	r3, [r7, #20]
    uint8_t    PH_MEMLOC_COUNT bSkipRfReset = PH_OFF;
 8009baa:	2300      	movs	r3, #0
 8009bac:	76fb      	strb	r3, [r7, #27]
    uint8_t    PH_MEMLOC_REM bPropPollTechEn = PH_OFF;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	76bb      	strb	r3, [r7, #26]
    uint8_t    PH_MEMLOC_REM bStopTechDetection = PH_OFF;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	767b      	strb	r3, [r7, #25]
    uint16_t   PH_MEMLOC_REM wIntFieldStatus;
    uint16_t   PH_MEMLOC_REM wPasBGTimeUs;

    /* EMVCo Polling procedure section 9.2, Symbol 1 */
    pDataParams->bDetectedTechs = 0x00;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Verify Type A and Type B polling sequence.
     * Note: As per the EMVCo specification,
     * 1st polling technology should be Type A and 2nd polling technology should be Type B.
     * */
    if ((pDataParams->pPasTechPollSeq[0] != PHAC_DISCLOOP_TECH_TYPE_A) ||
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d105      	bne.n	8009bd4 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x4c>
        (pDataParams->pPasTechPollSeq[1] != PHAC_DISCLOOP_TECH_TYPE_B))
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bcc:	3301      	adds	r3, #1
 8009bce:	781b      	ldrb	r3, [r3, #0]
    if ((pDataParams->pPasTechPollSeq[0] != PHAC_DISCLOOP_TECH_TYPE_A) ||
 8009bd0:	2b01      	cmp	r3, #1
 8009bd2:	d002      	beq.n	8009bda <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x52>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_AC_DISCLOOP);
 8009bd4:	f244 0325 	movw	r3, #16421	@ 0x4025
 8009bd8:	e142      	b.n	8009e60 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
    }

    /* Get Config to check the internal Field On. */
    status = phhalHw_GetConfig(
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bde:	f107 0212 	add.w	r2, r7, #18
 8009be2:	215f      	movs	r1, #95	@ 0x5f
 8009be4:	4618      	mov	r0, r3
 8009be6:	f006 fa25 	bl	8010034 <phhalHw_Pn5180_GetConfig>
 8009bea:	4603      	mov	r3, r0
 8009bec:	83fb      	strh	r3, [r7, #30]
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_INT_RF_ON,
        &wIntFieldStatus);
    PH_CHECK_SUCCESS(status);
 8009bee:	8bfb      	ldrh	r3, [r7, #30]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d001      	beq.n	8009bf8 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x70>
 8009bf4:	8bfb      	ldrh	r3, [r7, #30]
 8009bf6:	e133      	b.n	8009e60 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>

    if (wIntFieldStatus == PH_OFF)
 8009bf8:	8a7b      	ldrh	r3, [r7, #18]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	f040 8104 	bne.w	8009e08 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x280>
    {
        /* Apply Protocol Setting */
        PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c04:	2201      	movs	r2, #1
 8009c06:	b2d2      	uxtb	r2, r2
 8009c08:	4611      	mov	r1, r2
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f004 f848 	bl	800dca0 <phhalHw_Pn5180_ApplyProtocolSettings>
 8009c10:	4603      	mov	r3, r0
 8009c12:	83fb      	strh	r3, [r7, #30]
 8009c14:	8bfb      	ldrh	r3, [r7, #30]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d001      	beq.n	8009c1e <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x96>
 8009c1a:	8bfb      	ldrh	r3, [r7, #30]
 8009c1c:	e120      	b.n	8009e60 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
            pDataParams->pHalDataParams,
            (uint8_t)(gPasTechTypeMapTable[0] & 0xFFU)));

        /* Disable RFCA and switch on RF, if in EMV mode. */
        PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_RfcaOff_FieldOn(pDataParams));
 8009c1e:	68f8      	ldr	r0, [r7, #12]
 8009c20:	f000 f9a0 	bl	8009f64 <phacDiscLoop_Sw_Int_RfcaOff_FieldOn>
 8009c24:	4603      	mov	r3, r0
 8009c26:	83fb      	strh	r3, [r7, #30]
 8009c28:	8bfb      	ldrh	r3, [r7, #30]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d001      	beq.n	8009c32 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0xaa>
 8009c2e:	8bfb      	ldrh	r3, [r7, #30]
 8009c30:	e116      	b.n	8009e60 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>

        /* Get Config to check the internal Field On. */
        status = phhalHw_GetConfig(
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c36:	f107 0212 	add.w	r2, r7, #18
 8009c3a:	215f      	movs	r1, #95	@ 0x5f
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f006 f9f9 	bl	8010034 <phhalHw_Pn5180_GetConfig>
 8009c42:	4603      	mov	r3, r0
 8009c44:	83fb      	strh	r3, [r7, #30]
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_INT_RF_ON,
            &wIntFieldStatus);
        PH_CHECK_SUCCESS(status);
 8009c46:	8bfb      	ldrh	r3, [r7, #30]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d001      	beq.n	8009c50 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0xc8>
 8009c4c:	8bfb      	ldrh	r3, [r7, #30]
 8009c4e:	e107      	b.n	8009e60 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>

        if (wIntFieldStatus != PH_ON)
 8009c50:	8a7b      	ldrh	r3, [r7, #18]
 8009c52:	2b01      	cmp	r3, #1
 8009c54:	f000 80d8 	beq.w	8009e08 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x280>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_RF_ERROR, PH_COMP_AC_DISCLOOP);
 8009c58:	f244 030a 	movw	r3, #16394	@ 0x400a
 8009c5c:	e100      	b.n	8009e60 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
    }
    /* EMVCo: Run until a tag is discovered */
    while(0U == bStopTechDetection )
    {
        /* Poll for all requested technologies  */
        for (bTechLoopIndex = 0; bTechLoopIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bTechLoopIndex++)
 8009c5e:	2300      	movs	r3, #0
 8009c60:	773b      	strb	r3, [r7, #28]
 8009c62:	e0bf      	b.n	8009de4 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x25c>
        {
            bTechIndex = pDataParams->pPasTechPollSeq[bTechLoopIndex];
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009c68:	7f3b      	ldrb	r3, [r7, #28]
 8009c6a:	4413      	add	r3, r2
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	753b      	strb	r3, [r7, #20]
            bCurrentPollTech = (PH_ON << bTechIndex);
 8009c70:	7d3b      	ldrb	r3, [r7, #20]
 8009c72:	2201      	movs	r2, #1
 8009c74:	fa02 f303 	lsl.w	r3, r2, r3
 8009c78:	757b      	strb	r3, [r7, #21]

            /* Symbol 2 (8 and 13) */
            if ((0U != (bDetectConfig & bCurrentPollTech)) && (bStopTechDetection == 0U))
 8009c7a:	7afa      	ldrb	r2, [r7, #11]
 8009c7c:	7d7b      	ldrb	r3, [r7, #21]
 8009c7e:	4013      	ands	r3, r2
 8009c80:	b2db      	uxtb	r3, r3
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	f000 80ab 	beq.w	8009dde <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x256>
 8009c88:	7e7b      	ldrb	r3, [r7, #25]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	f040 80a7 	bne.w	8009dde <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x256>
            {
                if((0U == ((pDataParams->bDetectedTechs & bCurrentPollTech))))
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 8009c96:	7d7b      	ldrb	r3, [r7, #21]
 8009c98:	4013      	ands	r3, r2
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	f040 809c 	bne.w	8009dda <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x252>
                {

                    if (bCurrentPollTech & (uint8_t)(~(PHAC_DISCLOOP_POS_BIT_MASK_A | PHAC_DISCLOOP_POS_BIT_MASK_B)))
 8009ca2:	7d7b      	ldrb	r3, [r7, #21]
 8009ca4:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d001      	beq.n	8009cb0 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x128>

                    {
                        bPropPollTechEn = PH_ON;
 8009cac:	2301      	movs	r3, #1
 8009cae:	76bb      	strb	r3, [r7, #26]
                    }

                    /* Optional Field Reset in case of Proprietary technologies polling */
                    if ((pDataParams->bEMVCoPropOpRfFieldReset & bCurrentPollTech) && (bPropPollTechEn == PH_ON))
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	f893 2059 	ldrb.w	r2, [r3, #89]	@ 0x59
 8009cb6:	7d7b      	ldrb	r3, [r7, #21]
 8009cb8:	4013      	ands	r3, r2
 8009cba:	b2db      	uxtb	r3, r3
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d005      	beq.n	8009ccc <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x144>
 8009cc0:	7ebb      	ldrb	r3, [r7, #26]
 8009cc2:	2b01      	cmp	r3, #1
 8009cc4:	d102      	bne.n	8009ccc <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x144>
                    {
                        /* Symbol 14 */
                        phacDiscLoop_Sw_Int_EmvcoRfFieldReset(pDataParams);
 8009cc6:	68f8      	ldr	r0, [r7, #12]
 8009cc8:	f7ff faa4 	bl	8009214 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset>
                    }

                    if(bCurrentPollTech == PHAC_DISCLOOP_POS_BIT_MASK_B)
 8009ccc:	7d7b      	ldrb	r3, [r7, #21]
 8009cce:	2b02      	cmp	r3, #2
 8009cd0:	d12c      	bne.n	8009d2c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x1a4>
                    {
                        if((0U != ((pDataParams->bDetectedTechs & PHAC_DISCLOOP_POS_BIT_MASK_A))) &&
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8009cd8:	f003 0301 	and.w	r3, r3, #1
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d011      	beq.n	8009d04 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x17c>
                                (pDataParams->waPasPollGTimeUs[bTechIndex] > PHAC_DISCLOOP_HALTA_TIMOUT_US))
 8009ce0:	7d3a      	ldrb	r2, [r7, #20]
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	3208      	adds	r2, #8
 8009ce6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
                        if((0U != ((pDataParams->bDetectedTechs & PHAC_DISCLOOP_POS_BIT_MASK_A))) &&
 8009cea:	f240 424c 	movw	r2, #1100	@ 0x44c
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d908      	bls.n	8009d04 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x17c>
                        {
                            wPasBGTimeUs = pDataParams->waPasPollGTimeUs[bTechIndex] - PHAC_DISCLOOP_HALTA_TIMOUT_US;
 8009cf2:	7d3a      	ldrb	r2, [r7, #20]
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	3208      	adds	r2, #8
 8009cf8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009cfc:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8009d00:	82fb      	strh	r3, [r7, #22]
 8009d02:	e005      	b.n	8009d10 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x188>
                        }
                        else
                        {
                            wPasBGTimeUs = pDataParams->waPasPollGTimeUs[bTechIndex];
 8009d04:	7d3a      	ldrb	r2, [r7, #20]
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	3208      	adds	r2, #8
 8009d0a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009d0e:	82fb      	strh	r3, [r7, #22]
                        }
                        /* Apply Guard time. Symbol 3 (9 and 15) */
                        PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d14:	8afa      	ldrh	r2, [r7, #22]
 8009d16:	2135      	movs	r1, #53	@ 0x35
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f004 fd3d 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	83fb      	strh	r3, [r7, #30]
 8009d22:	8bfb      	ldrh	r3, [r7, #30]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d013      	beq.n	8009d50 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x1c8>
 8009d28:	8bfb      	ldrh	r3, [r7, #30]
 8009d2a:	e099      	b.n	8009e60 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
                            wPasBGTimeUs));
                    }
                    else
                    {
                        /* Apply Guard time. Symbol 3 (9 and 15) */
                        PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8009d30:	7d3a      	ldrb	r2, [r7, #20]
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	3208      	adds	r2, #8
 8009d36:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	2135      	movs	r1, #53	@ 0x35
 8009d3e:	f004 fd2b 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8009d42:	4603      	mov	r3, r0
 8009d44:	83fb      	strh	r3, [r7, #30]
 8009d46:	8bfb      	ldrh	r3, [r7, #30]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d001      	beq.n	8009d50 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x1c8>
 8009d4c:	8bfb      	ldrh	r3, [r7, #30]
 8009d4e:	e087      	b.n	8009e60 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
                            pDataParams->waPasPollGTimeUs[bTechIndex]));
                    }

                    /* Apply Protocol Setting for Selected Technology  */
                    PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009d54:	7d3b      	ldrb	r3, [r7, #20]
 8009d56:	4944      	ldr	r1, [pc, #272]	@ (8009e68 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2e0>)
 8009d58:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009d5c:	b2db      	uxtb	r3, r3
 8009d5e:	4619      	mov	r1, r3
 8009d60:	4610      	mov	r0, r2
 8009d62:	f003 ff9d 	bl	800dca0 <phhalHw_Pn5180_ApplyProtocolSettings>
 8009d66:	4603      	mov	r3, r0
 8009d68:	83fb      	strh	r3, [r7, #30]
 8009d6a:	8bfb      	ldrh	r3, [r7, #30]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d001      	beq.n	8009d74 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x1ec>
 8009d70:	8bfb      	ldrh	r3, [r7, #30]
 8009d72:	e075      	b.n	8009e60 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
                        pDataParams->pHalDataParams,
                        (uint8_t)(gPasTechTypeMapTable[bTechIndex] & 0xFFU)));

                    /* Perform Tech detection. Symbol 4 (10 and 16) */
                    status = pfDetTechs[bTechIndex](pDataParams);
 8009d74:	7d3b      	ldrb	r3, [r7, #20]
 8009d76:	4a3d      	ldr	r2, [pc, #244]	@ (8009e6c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2e4>)
 8009d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d7c:	68f8      	ldr	r0, [r7, #12]
 8009d7e:	4798      	blx	r3
 8009d80:	4603      	mov	r3, r0
 8009d82:	83fb      	strh	r3, [r7, #30]

                    if ((status & PH_ERR_MASK) == PHAC_DISCLOOP_TECH_DETECTED)
 8009d84:	8bfb      	ldrh	r3, [r7, #30]
 8009d86:	b2db      	uxtb	r3, r3
 8009d88:	2b87      	cmp	r3, #135	@ 0x87
 8009d8a:	d10c      	bne.n	8009da6 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x21e>
                    {
                        /* Set the corresponding detected bit. Symbol 6 (12 and 18) */
                        pDataParams->bDetectedTechs |= bCurrentPollTech;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 8009d92:	7d7b      	ldrb	r3, [r7, #21]
 8009d94:	4313      	orrs	r3, r2
 8009d96:	b2da      	uxtb	r2, r3
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                        bNumOfTechsFound++;
 8009d9e:	7f7b      	ldrb	r3, [r7, #29]
 8009da0:	3301      	adds	r3, #1
 8009da2:	777b      	strb	r3, [r7, #29]
 8009da4:	e005      	b.n	8009db2 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x22a>
                    }
                    else
                    {
                        PH_CHECK_ABORT(status);
 8009da6:	8bfb      	ldrh	r3, [r7, #30]
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	2b12      	cmp	r3, #18
 8009dac:	d101      	bne.n	8009db2 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x22a>
 8009dae:	8bfb      	ldrh	r3, [r7, #30]
 8009db0:	e056      	b.n	8009e60 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
                    }

                    /* Optional Field Reset in case of Proprietary technologies polling. */
                    if ((pDataParams->bEMVCoPropOpRfFieldReset & bCurrentPollTech) && (bPropPollTechEn == PH_ON))
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	f893 2059 	ldrb.w	r2, [r3, #89]	@ 0x59
 8009db8:	7d7b      	ldrb	r3, [r7, #21]
 8009dba:	4013      	ands	r3, r2
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d008      	beq.n	8009dd4 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x24c>
 8009dc2:	7ebb      	ldrb	r3, [r7, #26]
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	d105      	bne.n	8009dd4 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x24c>
                    {
                        /* Symbol 19 */
                        phacDiscLoop_Sw_Int_EmvcoRfFieldReset(pDataParams);
 8009dc8:	68f8      	ldr	r0, [r7, #12]
 8009dca:	f7ff fa23 	bl	8009214 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset>
                        bSkipRfReset = PH_ON;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	76fb      	strb	r3, [r7, #27]
 8009dd2:	e004      	b.n	8009dde <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x256>
                    }
                    else
                    {
                        bSkipRfReset = PH_OFF;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	76fb      	strb	r3, [r7, #27]
 8009dd8:	e001      	b.n	8009dde <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x256>
                    }
                }
                else
                {
                    bStopTechDetection = PH_ON;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	767b      	strb	r3, [r7, #25]
        for (bTechLoopIndex = 0; bTechLoopIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bTechLoopIndex++)
 8009dde:	7f3b      	ldrb	r3, [r7, #28]
 8009de0:	3301      	adds	r3, #1
 8009de2:	773b      	strb	r3, [r7, #28]
 8009de4:	7f3b      	ldrb	r3, [r7, #28]
 8009de6:	2b05      	cmp	r3, #5
 8009de8:	f67f af3c 	bls.w	8009c64 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0xdc>
                }
            }
        }

        if(bNumOfTechsFound == 0U)
 8009dec:	7f7b      	ldrb	r3, [r7, #29]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d101      	bne.n	8009df6 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x26e>
        {
            bStopTechDetection = PH_ON;
 8009df2:	2301      	movs	r3, #1
 8009df4:	767b      	strb	r3, [r7, #25]
        }

        if((bPropPollTechEn == PH_ON) && (bSkipRfReset == PH_OFF))
 8009df6:	7ebb      	ldrb	r3, [r7, #26]
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d105      	bne.n	8009e08 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x280>
 8009dfc:	7efb      	ldrb	r3, [r7, #27]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d102      	bne.n	8009e08 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x280>
        {
            /* Symbol 20 */
            phacDiscLoop_Sw_Int_EmvcoRfFieldReset(pDataParams);
 8009e02:	68f8      	ldr	r0, [r7, #12]
 8009e04:	f7ff fa06 	bl	8009214 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset>
    while(0U == bStopTechDetection )
 8009e08:	7e7b      	ldrb	r3, [r7, #25]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	f43f af27 	beq.w	8009c5e <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0xd6>
        }
    } /* End of while(!bStopTechDetection ) */

    if (bNumOfTechsFound == 1U)
 8009e10:	7f7b      	ldrb	r3, [r7, #29]
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	d105      	bne.n	8009e22 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x29a>
    {
        *pNumOfTechsDetect = bNumOfTechsFound;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	7f7a      	ldrb	r2, [r7, #29]
 8009e1a:	701a      	strb	r2, [r3, #0]
        status = PHAC_DISCLOOP_TECH_DETECTED;
 8009e1c:	2387      	movs	r3, #135	@ 0x87
 8009e1e:	83fb      	strh	r3, [r7, #30]
 8009e20:	e00e      	b.n	8009e40 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2b8>
    }
    else if(bNumOfTechsFound > 1U)
 8009e22:	7f7b      	ldrb	r3, [r7, #29]
 8009e24:	2b01      	cmp	r3, #1
 8009e26:	d905      	bls.n	8009e34 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2ac>
    {
        *pNumOfTechsDetect = bNumOfTechsFound;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	7f7a      	ldrb	r2, [r7, #29]
 8009e2c:	701a      	strb	r2, [r3, #0]
        status = PHAC_DISCLOOP_MULTI_TECH_DETECTED;
 8009e2e:	2388      	movs	r3, #136	@ 0x88
 8009e30:	83fb      	strh	r3, [r7, #30]
 8009e32:	e005      	b.n	8009e40 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2b8>
    }
    else if(PH_ERR_IO_TIMEOUT == (status & PH_ERR_MASK))
 8009e34:	8bfb      	ldrh	r3, [r7, #30]
 8009e36:	b2db      	uxtb	r3, r3
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d101      	bne.n	8009e40 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2b8>
    {
        status = PHAC_DISCLOOP_NO_TECH_DETECTED;
 8009e3c:	2384      	movs	r3, #132	@ 0x84
 8009e3e:	83fb      	strh	r3, [r7, #30]
    }
    else
    {
        ; /* Do Nothing */
    }
    return PH_ADD_COMPCODE(status, PH_COMP_AC_DISCLOOP);
 8009e40:	8bfb      	ldrh	r3, [r7, #30]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d00b      	beq.n	8009e5e <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d6>
 8009e46:	8bfb      	ldrh	r3, [r7, #30]
 8009e48:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d106      	bne.n	8009e5e <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d6>
 8009e50:	8bfb      	ldrh	r3, [r7, #30]
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	b29b      	uxth	r3, r3
 8009e56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009e5a:	b29b      	uxth	r3, r3
 8009e5c:	e000      	b.n	8009e60 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
 8009e5e:	8bfb      	ldrh	r3, [r7, #30]
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3720      	adds	r7, #32
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}
 8009e68:	080238e0 	.word	0x080238e0
 8009e6c:	08023910 	.word	0x08023910

08009e70 <phacDiscLoop_Sw_Int_ColsnReslnActivity>:

phStatus_t phacDiscLoop_Sw_Int_ColsnReslnActivity(
                                                  phacDiscLoop_Sw_DataParams_t *pDataParams,
                                                  uint8_t bTechType
                                                  )
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b084      	sub	sp, #16
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	460b      	mov	r3, r1
 8009e7a:	70fb      	strb	r3, [r7, #3]
    phStatus_t PH_MEMLOC_REM wStatus;

    /* Since we are interested in one Technology, Reset DetectedTechs information */
    pDataParams->bDetectedTechs = 0x00;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /*Re-set number of card*/
    pDataParams->bNumOfCards = 0x00;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2200      	movs	r2, #0
 8009e88:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    /* Call the selected collision resolution function */
    wStatus = pfColnRelsns[bTechType](pDataParams);
 8009e8c:	78fb      	ldrb	r3, [r7, #3]
 8009e8e:	4a15      	ldr	r2, [pc, #84]	@ (8009ee4 <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x74>)
 8009e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	4798      	blx	r3
 8009e98:	4603      	mov	r3, r0
 8009e9a:	81fb      	strh	r3, [r7, #14]

    if((wStatus & PH_ERR_MASK) == PH_ERR_SUCCESS)
 8009e9c:	89fb      	ldrh	r3, [r7, #14]
 8009e9e:	b2db      	uxtb	r3, r3
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d112      	bne.n	8009eca <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x5a>
    {
        /* Collision Resolution activity is successful, update Detected Technology */
        pDataParams->bDetectedTechs = (PH_ON << bTechType);
 8009ea4:	78fb      	ldrb	r3, [r7, #3]
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8009eac:	b2da      	uxtb	r2, r3
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

        if(pDataParams->bNumOfCards > 1U)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8009eba:	2b01      	cmp	r3, #1
 8009ebc:	d902      	bls.n	8009ec4 <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x54>
        {
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_MULTI_DEVICES_RESOLVED, PH_COMP_AC_DISCLOOP);
 8009ebe:	f244 038a 	movw	r3, #16522	@ 0x408a
 8009ec2:	e00a      	b.n	8009eda <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x6a>
        }
        else
        {
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 8009ec4:	f244 0389 	movw	r3, #16521	@ 0x4089
 8009ec8:	e007      	b.n	8009eda <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x6a>
        }
    }

    if((wStatus & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT)
 8009eca:	89fb      	ldrh	r3, [r7, #14]
 8009ecc:	b2db      	uxtb	r3, r3
 8009ece:	2b01      	cmp	r3, #1
 8009ed0:	d102      	bne.n	8009ed8 <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x68>
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 8009ed2:	f244 0385 	movw	r3, #16517	@ 0x4085
 8009ed6:	e000      	b.n	8009eda <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x6a>
    }

    return wStatus;
 8009ed8:	89fb      	ldrh	r3, [r7, #14]
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3710      	adds	r7, #16
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	080238f8 	.word	0x080238f8

08009ee8 <phacDiscLoop_Sw_Int_ActivateDevice>:
phStatus_t phacDiscLoop_Sw_Int_ActivateDevice(
                                              phacDiscLoop_Sw_DataParams_t * pDataParams,
                                              uint8_t bTechType,
                                              uint8_t bTagIndex
                                              )
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b084      	sub	sp, #16
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	460b      	mov	r3, r1
 8009ef2:	70fb      	strb	r3, [r7, #3]
 8009ef4:	4613      	mov	r3, r2
 8009ef6:	70bb      	strb	r3, [r7, #2]
    phStatus_t PH_MEMLOC_REM status;

    /* Since we are interested in one Technology, Reset DetectedTechs information */
    pDataParams->bDetectedTechs = 0x00;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Activate selected tag */
    status = pfDeviceActivate[bTechType](pDataParams, bTagIndex);
 8009f00:	78fb      	ldrb	r3, [r7, #3]
 8009f02:	4a17      	ldr	r2, [pc, #92]	@ (8009f60 <phacDiscLoop_Sw_Int_ActivateDevice+0x78>)
 8009f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f08:	78ba      	ldrb	r2, [r7, #2]
 8009f0a:	4611      	mov	r1, r2
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	4798      	blx	r3
 8009f10:	4603      	mov	r3, r0
 8009f12:	81fb      	strh	r3, [r7, #14]
    if((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 8009f14:	89fb      	ldrh	r3, [r7, #14]
 8009f16:	b2db      	uxtb	r3, r3
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d10a      	bne.n	8009f32 <phacDiscLoop_Sw_Int_ActivateDevice+0x4a>
    {
        /* Set Corresponding Tech Bit Position */
        pDataParams->bDetectedTechs = PH_ON << bTechType;
 8009f1c:	78fb      	ldrb	r3, [r7, #3]
 8009f1e:	2201      	movs	r2, #1
 8009f20:	fa02 f303 	lsl.w	r3, r2, r3
 8009f24:	b2da      	uxtb	r2, r3
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_DEVICE_ACTIVATED, PH_COMP_AC_DISCLOOP);
 8009f2c:	f244 038b 	movw	r3, #16523	@ 0x408b
 8009f30:	e012      	b.n	8009f58 <phacDiscLoop_Sw_Int_ActivateDevice+0x70>
    }
    else if(((status & PH_ERR_MASK) == PHAC_DISCLOOP_MERGED_SEL_RES_FOUND)
 8009f32:	89fb      	ldrh	r3, [r7, #14]
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	2b8e      	cmp	r3, #142	@ 0x8e
 8009f38:	d003      	beq.n	8009f42 <phacDiscLoop_Sw_Int_ActivateDevice+0x5a>
       || ((status & PH_ERR_MASK) == PHAC_DISCLOOP_PASSIVE_TARGET_ACTIVATED))
 8009f3a:	89fb      	ldrh	r3, [r7, #14]
 8009f3c:	b2db      	uxtb	r3, r3
 8009f3e:	2b8d      	cmp	r3, #141	@ 0x8d
 8009f40:	d109      	bne.n	8009f56 <phacDiscLoop_Sw_Int_ActivateDevice+0x6e>
    {
        /* Set Corresponding Tech Bit Position */
        pDataParams->bDetectedTechs = PH_ON << bTechType;
 8009f42:	78fb      	ldrb	r3, [r7, #3]
 8009f44:	2201      	movs	r2, #1
 8009f46:	fa02 f303 	lsl.w	r3, r2, r3
 8009f4a:	b2da      	uxtb	r2, r3
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    else
    {
        return status;
    }
    return status;
 8009f52:	89fb      	ldrh	r3, [r7, #14]
 8009f54:	e000      	b.n	8009f58 <phacDiscLoop_Sw_Int_ActivateDevice+0x70>
        return status;
 8009f56:	89fb      	ldrh	r3, [r7, #14]
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3710      	adds	r7, #16
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}
 8009f60:	08023928 	.word	0x08023928

08009f64 <phacDiscLoop_Sw_Int_RfcaOff_FieldOn>:

phStatus_t phacDiscLoop_Sw_Int_RfcaOff_FieldOn(
                                               phacDiscLoop_Sw_DataParams_t * pDataParams
                                               )
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b084      	sub	sp, #16
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	81fb      	strh	r3, [r7, #14]

    /* Disable RFCA (if supported) */
    status = phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RFCA, PH_OFF);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f74:	2200      	movs	r2, #0
 8009f76:	2156      	movs	r1, #86	@ 0x56
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f004 fc0d 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	81fb      	strh	r3, [r7, #14]
    if (((status & PH_ERR_MASK) != PH_ERR_UNSUPPORTED_PARAMETER) && ((status & PH_ERR_MASK) != PH_ERR_SUCCESS))
 8009f82:	89fb      	ldrh	r3, [r7, #14]
 8009f84:	b2db      	uxtb	r3, r3
 8009f86:	2b23      	cmp	r3, #35	@ 0x23
 8009f88:	d005      	beq.n	8009f96 <phacDiscLoop_Sw_Int_RfcaOff_FieldOn+0x32>
 8009f8a:	89fb      	ldrh	r3, [r7, #14]
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d001      	beq.n	8009f96 <phacDiscLoop_Sw_Int_RfcaOff_FieldOn+0x32>
    {
        return status;
 8009f92:	89fb      	ldrh	r3, [r7, #14]
 8009f94:	e00c      	b.n	8009fb0 <phacDiscLoop_Sw_Int_RfcaOff_FieldOn+0x4c>
    }

    /* Switch on RF without performing I-RFCA. */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_FieldOn(pDataParams->pHalDataParams));
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f004 fac8 	bl	800e530 <phhalHw_Pn5180_FieldOn>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	81fb      	strh	r3, [r7, #14]
 8009fa4:	89fb      	ldrh	r3, [r7, #14]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d001      	beq.n	8009fae <phacDiscLoop_Sw_Int_RfcaOff_FieldOn+0x4a>
 8009faa:	89fb      	ldrh	r3, [r7, #14]
 8009fac:	e000      	b.n	8009fb0 <phacDiscLoop_Sw_Int_RfcaOff_FieldOn+0x4c>

    return status;
 8009fae:	89fb      	ldrh	r3, [r7, #14]
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3710      	adds	r7, #16
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <phacDiscLoop_Sw_Int_FieldOn>:

phStatus_t phacDiscLoop_Sw_Int_FieldOn(
                                       phacDiscLoop_Sw_DataParams_t * pDataParams
                                       )
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	81fb      	strh	r3, [r7, #14]

    /* Enable RFCA (if supported) */
    status = phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RFCA, PH_ON);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fc8:	2201      	movs	r2, #1
 8009fca:	2156      	movs	r1, #86	@ 0x56
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f004 fbe3 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	81fb      	strh	r3, [r7, #14]
    if(((status & PH_ERR_MASK) != PH_ERR_UNSUPPORTED_PARAMETER) && ((status & PH_ERR_MASK) != PH_ERR_SUCCESS))
 8009fd6:	89fb      	ldrh	r3, [r7, #14]
 8009fd8:	b2db      	uxtb	r3, r3
 8009fda:	2b23      	cmp	r3, #35	@ 0x23
 8009fdc:	d005      	beq.n	8009fea <phacDiscLoop_Sw_Int_FieldOn+0x32>
 8009fde:	89fb      	ldrh	r3, [r7, #14]
 8009fe0:	b2db      	uxtb	r3, r3
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d001      	beq.n	8009fea <phacDiscLoop_Sw_Int_FieldOn+0x32>
    {
        return status;
 8009fe6:	89fb      	ldrh	r3, [r7, #14]
 8009fe8:	e01d      	b.n	800a026 <phacDiscLoop_Sw_Int_FieldOn+0x6e>
    }

    /* Perform I-RFCA and Switch on RF Field. */
    status = phhalHw_FieldOn(pDataParams->pHalDataParams);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f004 fa9e 	bl	800e530 <phhalHw_Pn5180_FieldOn>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	81fb      	strh	r3, [r7, #14]
    if((status & PH_ERR_MASK) == PH_ERR_RF_ERROR)
 8009ff8:	89fb      	ldrh	r3, [r7, #14]
 8009ffa:	b2db      	uxtb	r3, r3
 8009ffc:	2b0a      	cmp	r3, #10
 8009ffe:	d102      	bne.n	800a006 <phacDiscLoop_Sw_Int_FieldOn+0x4e>
    {
        /* External RF is ON */
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_EXTERNAL_RFON, PH_COMP_AC_DISCLOOP);
 800a000:	f244 0382 	movw	r3, #16514	@ 0x4082
 800a004:	e00f      	b.n	800a026 <phacDiscLoop_Sw_Int_FieldOn+0x6e>
    }
    else
    {
        return PH_ADD_COMPCODE(status, PH_COMP_AC_DISCLOOP);
 800a006:	89fb      	ldrh	r3, [r7, #14]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d00b      	beq.n	800a024 <phacDiscLoop_Sw_Int_FieldOn+0x6c>
 800a00c:	89fb      	ldrh	r3, [r7, #14]
 800a00e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a012:	2b00      	cmp	r3, #0
 800a014:	d106      	bne.n	800a024 <phacDiscLoop_Sw_Int_FieldOn+0x6c>
 800a016:	89fb      	ldrh	r3, [r7, #14]
 800a018:	b2db      	uxtb	r3, r3
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a020:	b29b      	uxth	r3, r3
 800a022:	e000      	b.n	800a026 <phacDiscLoop_Sw_Int_FieldOn+0x6e>
 800a024:	89fb      	ldrh	r3, [r7, #14]
    }
}
 800a026:	4618      	mov	r0, r3
 800a028:	3710      	adds	r7, #16
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}

0800a02e <phacDiscLoop_Sw_Int_IsValidPollStatus>:

uint8_t phacDiscLoop_Sw_Int_IsValidPollStatus(
                                              phStatus_t wStatus
                                              )
{
 800a02e:	b480      	push	{r7}
 800a030:	b083      	sub	sp, #12
 800a032:	af00      	add	r7, sp, #0
 800a034:	4603      	mov	r3, r0
 800a036:	80fb      	strh	r3, [r7, #6]
    if((((wStatus) & PH_ERR_MASK) == PH_ERR_SUCCESS)         ||
 800a038:	88fb      	ldrh	r3, [r7, #6]
 800a03a:	b2db      	uxtb	r3, r3
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d00f      	beq.n	800a060 <phacDiscLoop_Sw_Int_IsValidPollStatus+0x32>
       (((wStatus) & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR) ||
 800a040:	88fb      	ldrh	r3, [r7, #6]
 800a042:	b2db      	uxtb	r3, r3
    if((((wStatus) & PH_ERR_MASK) == PH_ERR_SUCCESS)         ||
 800a044:	2b03      	cmp	r3, #3
 800a046:	d00b      	beq.n	800a060 <phacDiscLoop_Sw_Int_IsValidPollStatus+0x32>
       (((wStatus) & PH_ERR_MASK) == PH_ERR_FRAMING_ERROR)   ||
 800a048:	88fb      	ldrh	r3, [r7, #6]
 800a04a:	b2db      	uxtb	r3, r3
       (((wStatus) & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR) ||
 800a04c:	2b05      	cmp	r3, #5
 800a04e:	d007      	beq.n	800a060 <phacDiscLoop_Sw_Int_IsValidPollStatus+0x32>
       (((wStatus) & PH_ERR_MASK) == PH_ERR_INTEGRITY_ERROR) ||
 800a050:	88fb      	ldrh	r3, [r7, #6]
 800a052:	b2db      	uxtb	r3, r3
       (((wStatus) & PH_ERR_MASK) == PH_ERR_FRAMING_ERROR)   ||
 800a054:	2b02      	cmp	r3, #2
 800a056:	d003      	beq.n	800a060 <phacDiscLoop_Sw_Int_IsValidPollStatus+0x32>
       (((wStatus) & PH_ERR_MASK) == PH_ERR_PROTOCOL_ERROR)
 800a058:	88fb      	ldrh	r3, [r7, #6]
 800a05a:	b2db      	uxtb	r3, r3
       (((wStatus) & PH_ERR_MASK) == PH_ERR_INTEGRITY_ERROR) ||
 800a05c:	2b06      	cmp	r3, #6
 800a05e:	d101      	bne.n	800a064 <phacDiscLoop_Sw_Int_IsValidPollStatus+0x36>
       )
    {
        return PH_ON;
 800a060:	2301      	movs	r3, #1
 800a062:	e000      	b.n	800a066 <phacDiscLoop_Sw_Int_IsValidPollStatus+0x38>
    }
    else
    {
        return PH_OFF;
 800a064:	2300      	movs	r3, #0
    }
}
 800a066:	4618      	mov	r0, r3
 800a068:	370c      	adds	r7, #12
 800a06a:	46bd      	mov	sp, r7
 800a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a070:	4770      	bx	lr

0800a072 <phacDiscLoop_Sw_DetTechTypeA>:
 * Internal Definitions
 * ***************************************************************************************************************** */
phStatus_t phacDiscLoop_Sw_DetTechTypeA(
                                        phacDiscLoop_Sw_DataParams_t *pDataParams
                                        )
{
 800a072:	b580      	push	{r7, lr}
 800a074:	b084      	sub	sp, #16
 800a076:	af00      	add	r7, sp, #0
 800a078:	6078      	str	r0, [r7, #4]
#if defined (NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS)
    uint8_t    PH_MEMLOC_COUNT bIndex;
    phStatus_t PH_MEMLOC_REM   wStatus;

    /* Reset total tags found */
    pDataParams->sTypeATargetInfo.bTotalTagsFound = 0;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2200      	movs	r2, #0
 800a07e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Reset Collision Bit for Type A*/
    pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_A;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	7f9b      	ldrb	r3, [r3, #30]
 800a086:	f023 0301 	bic.w	r3, r3, #1
 800a08a:	b2da      	uxtb	r2, r3
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	779a      	strb	r2, [r3, #30]
    /* Reset the Sleep flag for Type 3 activation status */
    for(bIndex = 0U; bIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bIndex++)
 800a090:	2300      	movs	r3, #0
 800a092:	73fb      	strb	r3, [r7, #15]
 800a094:	e014      	b.n	800a0c0 <phacDiscLoop_Sw_DetTechTypeA+0x4e>
    {
        /* Device is not in HLTA state */
        pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].bSleep = 0U;
 800a096:	7bfa      	ldrb	r2, [r7, #15]
 800a098:	6879      	ldr	r1, [r7, #4]
 800a09a:	4613      	mov	r3, r2
 800a09c:	011b      	lsls	r3, r3, #4
 800a09e:	1a9b      	subs	r3, r3, r2
 800a0a0:	440b      	add	r3, r1
 800a0a2:	336c      	adds	r3, #108	@ 0x6c
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	701a      	strb	r2, [r3, #0]
        pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].bUidSize = 0U;
 800a0a8:	7bfa      	ldrb	r2, [r7, #15]
 800a0aa:	6879      	ldr	r1, [r7, #4]
 800a0ac:	4613      	mov	r3, r2
 800a0ae:	011b      	lsls	r3, r3, #4
 800a0b0:	1a9b      	subs	r3, r3, r2
 800a0b2:	440b      	add	r3, r1
 800a0b4:	336a      	adds	r3, #106	@ 0x6a
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	701a      	strb	r2, [r3, #0]
    for(bIndex = 0U; bIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bIndex++)
 800a0ba:	7bfb      	ldrb	r3, [r7, #15]
 800a0bc:	3301      	adds	r3, #1
 800a0be:	73fb      	strb	r3, [r7, #15]
 800a0c0:	7bfb      	ldrb	r3, [r7, #15]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d0e7      	beq.n	800a096 <phacDiscLoop_Sw_DetTechTypeA+0x24>
    }

    /* sending the WakeUpA */
    wStatus = phpalI14443p3a_WakeUpA(
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	335e      	adds	r3, #94	@ 0x5e
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	4610      	mov	r0, r2
 800a0d2:	f00a f990 	bl	80143f6 <phpalI14443p3a_Sw_WakeUpA>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	81bb      	strh	r3, [r7, #12]
        pDataParams->pPal1443p3aDataParams,
        pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aAtqa);

    if(0u != (phacDiscLoop_Sw_Int_IsValidPollStatus(wStatus)))
 800a0da:	89bb      	ldrh	r3, [r7, #12]
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f7ff ffa6 	bl	800a02e <phacDiscLoop_Sw_Int_IsValidPollStatus>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d02d      	beq.n	800a144 <phacDiscLoop_Sw_DetTechTypeA+0xd2>
    {
        if((wStatus & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800a0e8:	89bb      	ldrh	r3, [r7, #12]
 800a0ea:	b2db      	uxtb	r3, r3
 800a0ec:	2b03      	cmp	r3, #3
 800a0ee:	d106      	bne.n	800a0fe <phacDiscLoop_Sw_DetTechTypeA+0x8c>
        {
            pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	7f9b      	ldrb	r3, [r3, #30]
 800a0f4:	f043 0301 	orr.w	r3, r3, #1
 800a0f8:	b2da      	uxtb	r2, r3
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	779a      	strb	r2, [r3, #30]
        }

        PH_CHECK_SUCCESS_FCT(wStatus, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXWAIT_US, 500));
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a102:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800a106:	2107      	movs	r1, #7
 800a108:	4618      	mov	r0, r3
 800a10a:	f004 fb45 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 800a10e:	4603      	mov	r3, r0
 800a110:	81bb      	strh	r3, [r7, #12]
 800a112:	89bb      	ldrh	r3, [r7, #12]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d001      	beq.n	800a11c <phacDiscLoop_Sw_DetTechTypeA+0xaa>
 800a118:	89bb      	ldrh	r3, [r7, #12]
 800a11a:	e014      	b.n	800a146 <phacDiscLoop_Sw_DetTechTypeA+0xd4>

        /* Halt the detected cards. */
        PH_CHECK_ABORT_FCT(wStatus, phpalI14443p3a_HaltA(pDataParams->pPal1443p3aDataParams));
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a120:	4618      	mov	r0, r3
 800a122:	f00a f977 	bl	8014414 <phpalI14443p3a_Sw_HaltA>
 800a126:	4603      	mov	r3, r0
 800a128:	81bb      	strh	r3, [r7, #12]
 800a12a:	89bb      	ldrh	r3, [r7, #12]
 800a12c:	b2db      	uxtb	r3, r3
 800a12e:	2b12      	cmp	r3, #18
 800a130:	d101      	bne.n	800a136 <phacDiscLoop_Sw_DetTechTypeA+0xc4>
 800a132:	89bb      	ldrh	r3, [r7, #12]
 800a134:	e007      	b.n	800a146 <phacDiscLoop_Sw_DetTechTypeA+0xd4>

        pDataParams->sTypeATargetInfo.bTotalTagsFound = 1;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2201      	movs	r2, #1
 800a13a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    else
    {
        return wStatus;
    }

    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 800a13e:	f244 0387 	movw	r3, #16519	@ 0x4087
 800a142:	e000      	b.n	800a146 <phacDiscLoop_Sw_DetTechTypeA+0xd4>
        return wStatus;
 800a144:	89bb      	ldrh	r3, [r7, #12]
#else /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */
}
 800a146:	4618      	mov	r0, r3
 800a148:	3710      	adds	r7, #16
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
	...

0800a150 <phacDiscLoop_Sw_Int_CollisionResolutionA>:

phStatus_t phacDiscLoop_Sw_Int_CollisionResolutionA(
                                                    phacDiscLoop_Sw_DataParams_t * pDataParams
                                                    )
{
 800a150:	b590      	push	{r4, r7, lr}
 800a152:	b08b      	sub	sp, #44	@ 0x2c
 800a154:	af02      	add	r7, sp, #8
 800a156:	6078      	str	r0, [r7, #4]
#if defined (NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS)
    phStatus_t PH_MEMLOC_REM   status = PH_ERR_SUCCESS;
 800a158:	2300      	movs	r3, #0
 800a15a:	83fb      	strh	r3, [r7, #30]
    uint8_t    PH_MEMLOC_REM   bTypeANvbUid;
    uint8_t    PH_MEMLOC_COUNT bDeviceCount;
    uint8_t    PH_MEMLOC_COUNT bTypeATagIdx;
    uint8_t    PH_MEMLOC_COUNT bCascadeCodeIdx;
    uint8_t    PH_MEMLOC_BUF   aTypeAUid[7] = {0};
 800a15c:	f107 030c 	add.w	r3, r7, #12
 800a160:	2200      	movs	r2, #0
 800a162:	601a      	str	r2, [r3, #0]
 800a164:	f8c3 2003 	str.w	r2, [r3, #3]
    uint8_t    PH_MEMLOC_REM   bCollDetected;
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_JEWEL_TAGS
    uint16_t   *pUIDLen;
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_JEWEL_TAGS */

    bRetryCount = 0;
 800a168:	2300      	movs	r3, #0
 800a16a:	76bb      	strb	r3, [r7, #26]
    bDeviceCount = 0;
 800a16c:	2300      	movs	r3, #0
 800a16e:	777b      	strb	r3, [r7, #29]
    bTypeATagIdx = 0;
 800a170:	2300      	movs	r3, #0
 800a172:	773b      	strb	r3, [r7, #28]
    bCollDetected = PH_OFF;
 800a174:	2300      	movs	r3, #0
 800a176:	767b      	strb	r3, [r7, #25]

    /* Collision_Pending = 1 and Device limit  = 0 */
    if((0U != ((pDataParams->bCollPend & PHAC_DISCLOOP_POS_BIT_MASK_A))) && ((pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A] == 0x00U)))
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	7f9b      	ldrb	r3, [r3, #30]
 800a17c:	f003 0301 	and.w	r3, r3, #1
 800a180:	2b00      	cmp	r3, #0
 800a182:	d00a      	beq.n	800a19a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4a>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	7a9b      	ldrb	r3, [r3, #10]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d106      	bne.n	800a19a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4a>
    {
        pDataParams->sTypeATargetInfo.bTotalTagsFound = 0;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2200      	movs	r2, #0
 800a190:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800a194:	f244 0385 	movw	r3, #16517	@ 0x4085
 800a198:	e2d9      	b.n	800a74e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
    }

    /*Symbol 0*/
    /* Apply Guard time. */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	8a1b      	ldrh	r3, [r3, #16]
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	2135      	movs	r1, #53	@ 0x35
 800a1a6:	f004 faf7 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	83fb      	strh	r3, [r7, #30]
 800a1ae:	8bfb      	ldrh	r3, [r7, #30]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d001      	beq.n	800a1b8 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x68>
 800a1b4:	8bfb      	ldrh	r3, [r7, #30]
 800a1b6:	e2ca      	b.n	800a74e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_A]));

    /* Configure HW for the TypeA technology */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1bc:	2101      	movs	r1, #1
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f003 fd6e 	bl	800dca0 <phhalHw_Pn5180_ApplyProtocolSettings>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	83fb      	strh	r3, [r7, #30]
 800a1c8:	8bfb      	ldrh	r3, [r7, #30]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d001      	beq.n	800a1d2 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x82>
 800a1ce:	8bfb      	ldrh	r3, [r7, #30]
 800a1d0:	e2bd      	b.n	800a74e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
        pDataParams->pHalDataParams,
        PHHAL_HW_CARDTYPE_ISO14443A));

    /* Send WakeUpA */
    status = phpalI14443p3a_WakeUpA(
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	335e      	adds	r3, #94	@ 0x5e
 800a1da:	4619      	mov	r1, r3
 800a1dc:	4610      	mov	r0, r2
 800a1de:	f00a f90a 	bl	80143f6 <phpalI14443p3a_Sw_WakeUpA>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	83fb      	strh	r3, [r7, #30]
        pDataParams->pPal1443p3aDataParams,
        pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aAtqa);
    if ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800a1e6:	8bfb      	ldrh	r3, [r7, #30]
 800a1e8:	b2db      	uxtb	r3, r3
 800a1ea:	2b03      	cmp	r3, #3
 800a1ec:	d109      	bne.n	800a202 <phacDiscLoop_Sw_Int_CollisionResolutionA+0xb2>
    {
        /* In case of EMVCo, return Collision Pending status. */
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d102      	bne.n	800a1fe <phacDiscLoop_Sw_Int_CollisionResolutionA+0xae>
        {
            /* Report Error to Application and Application will perform PICC Reset */
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 800a1f8:	f244 0381 	movw	r3, #16513	@ 0x4081
 800a1fc:	e2a7      	b.n	800a74e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
        }
        bCollDetected = PH_ON;
 800a1fe:	2301      	movs	r3, #1
 800a200:	767b      	strb	r3, [r7, #25]
    }

    /* Reset card detected count */
    pDataParams->sTypeATargetInfo.bT1TFlag = 0;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2200      	movs	r2, #0
 800a206:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    pDataParams->sTypeATargetInfo.bTotalTagsFound = 0;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2200      	movs	r2, #0
 800a20e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    /*Symbol 1*/
    if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800a212:	8bfb      	ldrh	r3, [r7, #30]
 800a214:	b2db      	uxtb	r3, r3
 800a216:	2b00      	cmp	r3, #0
 800a218:	d14a      	bne.n	800a2b0 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x160>
    {
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_JEWEL_TAGS
        /*Symbol 2*/
        /* Check for T1T Tag*/
        if(pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aAtqa[0] == 0x00U)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 800a220:	2b00      	cmp	r3, #0
 800a222:	f040 809e 	bne.w	800a362 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x212>
        {
            /* Enable Jewel Mode */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_JEWEL_MODE, PH_ON));
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a22a:	2201      	movs	r2, #1
 800a22c:	2120      	movs	r1, #32
 800a22e:	4618      	mov	r0, r3
 800a230:	f004 fab2 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 800a234:	4603      	mov	r3, r0
 800a236:	83fb      	strh	r3, [r7, #30]
 800a238:	8bfb      	ldrh	r3, [r7, #30]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d001      	beq.n	800a242 <phacDiscLoop_Sw_Int_CollisionResolutionA+0xf2>
 800a23e:	8bfb      	ldrh	r3, [r7, #30]
 800a240:	e285      	b.n	800a74e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>

            pUIDLen = (uint16_t *)&(pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].bUidSize);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	336a      	adds	r3, #106	@ 0x6a
 800a246:	617b      	str	r3, [r7, #20]
            /*Symbol 23*/
            status = phalT1T_ReadUID(
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	3360      	adds	r3, #96	@ 0x60
 800a250:	697a      	ldr	r2, [r7, #20]
 800a252:	4619      	mov	r1, r3
 800a254:	f003 f896 	bl	800d384 <phalT1T_Sw_ReadUID>
 800a258:	4603      	mov	r3, r0
 800a25a:	83fb      	strh	r3, [r7, #30]
                pDataParams->pAlT1TDataParams,
                pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aUid,
                pUIDLen);

            if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800a25c:	8bfb      	ldrh	r3, [r7, #30]
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	2b00      	cmp	r3, #0
 800a262:	d115      	bne.n	800a290 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x140>
            {
                /*Symbol 27*/
                /* indicates T1T card*/
                pDataParams->sTypeATargetInfo.bT1TFlag = 1;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2201      	movs	r2, #1
 800a268:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
                pDataParams->sTypeATargetInfo.bTotalTagsFound = 1;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2201      	movs	r2, #1
 800a270:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
                pDataParams->bNumOfCards = 1;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2201      	movs	r2, #1
 800a278:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
                /* Symbol 26 */
                pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_A;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	7f9b      	ldrb	r3, [r3, #30]
 800a280:	f023 0301 	bic.w	r3, r3, #1
 800a284:	b2da      	uxtb	r2, r3
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	779a      	strb	r2, [r3, #30]

                return PH_ADD_COMPCODE(PH_COMP_AC_DISCLOOP, PH_ERR_SUCCESS);
 800a28a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a28e:	e25e      	b.n	800a74e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
            }
            else
            {
                /*Symbol 24*/
                if ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800a290:	8bfb      	ldrh	r3, [r7, #30]
 800a292:	b2db      	uxtb	r3, r3
 800a294:	2b03      	cmp	r3, #3
 800a296:	d109      	bne.n	800a2ac <phacDiscLoop_Sw_Int_CollisionResolutionA+0x15c>
                {
                    /* Symbol 25 */
                    pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	7f9b      	ldrb	r3, [r3, #30]
 800a29c:	f043 0301 	orr.w	r3, r3, #1
 800a2a0:	b2da      	uxtb	r2, r3
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	779a      	strb	r2, [r3, #30]
                    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 800a2a6:	f244 0381 	movw	r3, #16513	@ 0x4081
 800a2aa:	e250      	b.n	800a74e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                }
                return status;
 800a2ac:	8bfb      	ldrh	r3, [r7, #30]
 800a2ae:	e24e      	b.n	800a74e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_JEWEL_TAGS */
    }
    else
    {
        /* Device count = 0 and any Error */
        if(((status & PH_ERR_MASK) != PH_ERR_SUCCESS)
 800a2b0:	8bfb      	ldrh	r3, [r7, #30]
 800a2b2:	b2db      	uxtb	r3, r3
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d010      	beq.n	800a2da <phacDiscLoop_Sw_Int_CollisionResolutionA+0x18a>
          && (pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A] == 0x00U))
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	7a9b      	ldrb	r3, [r3, #10]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d10c      	bne.n	800a2da <phacDiscLoop_Sw_Int_CollisionResolutionA+0x18a>
        {
            pDataParams->sTypeATargetInfo.bTotalTagsFound = 0;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
            pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	7f9b      	ldrb	r3, [r3, #30]
 800a2cc:	f043 0301 	orr.w	r3, r3, #1
 800a2d0:	b2da      	uxtb	r2, r3
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	779a      	strb	r2, [r3, #30]
            return status;
 800a2d6:	8bfb      	ldrh	r3, [r7, #30]
 800a2d8:	e239      	b.n	800a74e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
        }

        /* As per EMVCo 3.1, wait for at least Tmin retransmission in case of timeout error. */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	d131      	bne.n	800a348 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x1f8>
        {
            bRetryCount = 0;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	76bb      	strb	r3, [r7, #26]
            while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 800a2e8:	e01b      	b.n	800a322 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x1d2>
            {
                bRetryCount++;
 800a2ea:	7ebb      	ldrb	r3, [r7, #26]
 800a2ec:	3301      	adds	r3, #1
 800a2ee:	76bb      	strb	r3, [r7, #26]
                /* Wait for at least Tmin retransmission delay. */
                PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2f4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800a2f8:	2100      	movs	r1, #0
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f004 f992 	bl	800e624 <phhalHw_Pn5180_Wait>
 800a300:	4603      	mov	r3, r0
 800a302:	83fb      	strh	r3, [r7, #30]
 800a304:	8bfb      	ldrh	r3, [r7, #30]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d001      	beq.n	800a30e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x1be>
 800a30a:	8bfb      	ldrh	r3, [r7, #30]
 800a30c:	e21f      	b.n	800a74e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                    pDataParams->pHalDataParams,
                    PHHAL_HW_TIME_MICROSECONDS,
                    PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

                status = phpalI14443p3a_WakeUpA(
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	335e      	adds	r3, #94	@ 0x5e
 800a316:	4619      	mov	r1, r3
 800a318:	4610      	mov	r0, r2
 800a31a:	f00a f86c 	bl	80143f6 <phpalI14443p3a_Sw_WakeUpA>
 800a31e:	4603      	mov	r3, r0
 800a320:	83fb      	strh	r3, [r7, #30]
            while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 800a322:	8bfb      	ldrh	r3, [r7, #30]
 800a324:	b2db      	uxtb	r3, r3
 800a326:	2b01      	cmp	r3, #1
 800a328:	d102      	bne.n	800a330 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x1e0>
 800a32a:	7ebb      	ldrb	r3, [r7, #26]
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	d9dc      	bls.n	800a2ea <phacDiscLoop_Sw_Int_CollisionResolutionA+0x19a>
                    pDataParams->pPal1443p3aDataParams,
                    pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aAtqa);
            }

            /* Collision error may happen */
            pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_A;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	7f9b      	ldrb	r3, [r3, #30]
 800a334:	f023 0301 	bic.w	r3, r3, #1
 800a338:	b2da      	uxtb	r2, r3
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	779a      	strb	r2, [r3, #30]

            /* Some error that can't be handled */
            PH_CHECK_SUCCESS(status);
 800a33e:	8bfb      	ldrh	r3, [r7, #30]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d00e      	beq.n	800a362 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x212>
 800a344:	8bfb      	ldrh	r3, [r7, #30]
 800a346:	e202      	b.n	800a74e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
        }
        else
        {
            /*Symbol 1*/
            if ((status & PH_ERR_MASK) != PH_ERR_COLLISION_ERROR)
 800a348:	8bfb      	ldrh	r3, [r7, #30]
 800a34a:	b2db      	uxtb	r3, r3
 800a34c:	2b03      	cmp	r3, #3
 800a34e:	d008      	beq.n	800a362 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x212>
            {
                pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_A;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	7f9b      	ldrb	r3, [r3, #30]
 800a354:	f023 0301 	bic.w	r3, r3, #1
 800a358:	b2da      	uxtb	r2, r3
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	779a      	strb	r2, [r3, #30]
                return status;
 800a35e:	8bfb      	ldrh	r3, [r7, #30]
 800a360:	e1f5      	b.n	800a74e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
            }
        }
    }

    /*Symbol 2*/
    if(0U == (pDataParams->bUseAntiColl))
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	f040 81d9 	bne.w	800a720 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5d0>
    {
        /*Symbol 23*/
        pDataParams->bCollPend |= (uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_A;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	7f9b      	ldrb	r3, [r3, #30]
 800a372:	f043 0301 	orr.w	r3, r3, #1
 800a376:	b2da      	uxtb	r2, r3
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	779a      	strb	r2, [r3, #30]
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 800a37c:	f244 0381 	movw	r3, #16513	@ 0x4081
 800a380:	e1e5      	b.n	800a74e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
    }

    while (bDeviceCount <= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A])
    {
        if (bTypeATagIdx <= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A])
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	7a9b      	ldrb	r3, [r3, #10]
 800a386:	7f3a      	ldrb	r2, [r7, #28]
 800a388:	429a      	cmp	r2, r3
 800a38a:	f200 81c6 	bhi.w	800a71a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5ca>
        {
            /*Symbol 4*/
            pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_A;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	7f9b      	ldrb	r3, [r3, #30]
 800a392:	f023 0301 	bic.w	r3, r3, #1
 800a396:	b2da      	uxtb	r2, r3
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	779a      	strb	r2, [r3, #30]

            /*Symbol 4, 16*/
            for (bCascadeCodeIdx=0; bCascadeCodeIdx<3U; bCascadeCodeIdx++)
 800a39c:	2300      	movs	r3, #0
 800a39e:	76fb      	strb	r3, [r7, #27]
 800a3a0:	e13f      	b.n	800a622 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4d2>
            {
                bTypeANvbUid = 0;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	74fb      	strb	r3, [r7, #19]

                /* Anti-collision loop */
                while (bTypeANvbUid != 0x40U)
 800a3a6:	e0a8      	b.n	800a4fa <phacDiscLoop_Sw_Int_CollisionResolutionA+0x3aa>
                {
                    /*Symbol 5,6,7*/
                    status = phpalI14443p3a_Anticollision(
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800a3ac:	7efb      	ldrb	r3, [r7, #27]
 800a3ae:	4a9a      	ldr	r2, [pc, #616]	@ (800a618 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c8>)
 800a3b0:	5cd1      	ldrb	r1, [r2, r3]
 800a3b2:	7cfc      	ldrb	r4, [r7, #19]
 800a3b4:	f107 020c 	add.w	r2, r7, #12
 800a3b8:	f107 0313 	add.w	r3, r7, #19
 800a3bc:	9301      	str	r3, [sp, #4]
 800a3be:	f107 030c 	add.w	r3, r7, #12
 800a3c2:	9300      	str	r3, [sp, #0]
 800a3c4:	4623      	mov	r3, r4
 800a3c6:	f00a f87c 	bl	80144c2 <phpalI14443p3a_Sw_Anticollision>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	83fb      	strh	r3, [r7, #30]
                        bTypeANvbUid,                        /* UID len = 0 */
                        aTypeAUid,                           /* UID out */
                        &bTypeANvbUid);                      /* UID out size */

                    /* As per EMVCo 3.1, wait for at least Tmin retransmission in case of timeout error. */
                    if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	d12e      	bne.n	800a436 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x2e6>
                    {
                        bRetryCount = 0;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	76bb      	strb	r3, [r7, #26]
                        while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 800a3dc:	e024      	b.n	800a428 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x2d8>
                        {
                            bRetryCount++;
 800a3de:	7ebb      	ldrb	r3, [r7, #26]
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	76bb      	strb	r3, [r7, #26]
                            /* Wait for at least Tmin retransmission delay. */
                            PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3e8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800a3ec:	2100      	movs	r1, #0
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f004 f918 	bl	800e624 <phhalHw_Pn5180_Wait>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	83fb      	strh	r3, [r7, #30]
 800a3f8:	8bfb      	ldrh	r3, [r7, #30]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d001      	beq.n	800a402 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x2b2>
 800a3fe:	8bfb      	ldrh	r3, [r7, #30]
 800a400:	e1a5      	b.n	800a74e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                                pDataParams->pHalDataParams,
                                PHHAL_HW_TIME_MICROSECONDS,
                                PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

                            status = phpalI14443p3a_Anticollision(
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800a406:	7efb      	ldrb	r3, [r7, #27]
 800a408:	4a83      	ldr	r2, [pc, #524]	@ (800a618 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c8>)
 800a40a:	5cd1      	ldrb	r1, [r2, r3]
 800a40c:	7cfc      	ldrb	r4, [r7, #19]
 800a40e:	f107 020c 	add.w	r2, r7, #12
 800a412:	f107 0313 	add.w	r3, r7, #19
 800a416:	9301      	str	r3, [sp, #4]
 800a418:	f107 030c 	add.w	r3, r7, #12
 800a41c:	9300      	str	r3, [sp, #0]
 800a41e:	4623      	mov	r3, r4
 800a420:	f00a f84f 	bl	80144c2 <phpalI14443p3a_Sw_Anticollision>
 800a424:	4603      	mov	r3, r0
 800a426:	83fb      	strh	r3, [r7, #30]
                        while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 800a428:	8bfb      	ldrh	r3, [r7, #30]
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	2b01      	cmp	r3, #1
 800a42e:	d102      	bne.n	800a436 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x2e6>
 800a430:	7ebb      	ldrb	r3, [r7, #26]
 800a432:	2b01      	cmp	r3, #1
 800a434:	d9d3      	bls.n	800a3de <phacDiscLoop_Sw_Int_CollisionResolutionA+0x28e>
                                &bTypeANvbUid);                      /* UID out size */
                        }
                    }

                    /*Symbol 8, 13*/
                    if ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800a436:	8bfb      	ldrh	r3, [r7, #30]
 800a438:	b2db      	uxtb	r3, r3
 800a43a:	2b03      	cmp	r3, #3
 800a43c:	d158      	bne.n	800a4f0 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x3a0>
                    {
                        /* Emvco: case_id TA302_00 */
                        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a444:	2b01      	cmp	r3, #1
 800a446:	d102      	bne.n	800a44e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x2fe>
                        {
                            /* Report Error to Application and Application will perform PICC Reset */
                            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 800a448:	f244 0381 	movw	r3, #16513	@ 0x4081
 800a44c:	e17f      	b.n	800a74e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                        }

                        /*Symbol 9*/
                        pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	7f9b      	ldrb	r3, [r3, #30]
 800a452:	f043 0301 	orr.w	r3, r3, #1
 800a456:	b2da      	uxtb	r2, r3
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	779a      	strb	r2, [r3, #30]
                        if(bTypeATagIdx >= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A])
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	7a9b      	ldrb	r3, [r3, #10]
 800a460:	7f3a      	ldrb	r2, [r7, #28]
 800a462:	429a      	cmp	r2, r3
 800a464:	d301      	bcc.n	800a46a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x31a>
                        {
                            /*Symbol 10*/
                            return PH_ERR_SUCCESS;
 800a466:	2300      	movs	r3, #0
 800a468:	e171      	b.n	800a74e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                        }

                        /* Increment the number of valid bits and set the collision bit to one and handle based on Byte and Bit boundaries. */
                        if ((bTypeANvbUid & ((uint8_t)0x07U)) <  (uint8_t)7U)
 800a46a:	7cfb      	ldrb	r3, [r7, #19]
 800a46c:	f003 0307 	and.w	r3, r3, #7
 800a470:	2b06      	cmp	r3, #6
 800a472:	dc1d      	bgt.n	800a4b0 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x360>
                        {
                            bTypeANvbUid++;
 800a474:	7cfb      	ldrb	r3, [r7, #19]
 800a476:	3301      	adds	r3, #1
 800a478:	b2db      	uxtb	r3, r3
 800a47a:	74fb      	strb	r3, [r7, #19]

                            /* Set collision bit to 1 to resolve tag with highest UID */
                            aTypeAUid[(uint8_t)((bTypeANvbUid & 0xF0U) >> 4U)] |= (uint8_t)(0x01 << ((bTypeANvbUid & ((uint8_t)0x07U)) - 1U));
 800a47c:	7cfb      	ldrb	r3, [r7, #19]
 800a47e:	091b      	lsrs	r3, r3, #4
 800a480:	b2db      	uxtb	r3, r3
 800a482:	3320      	adds	r3, #32
 800a484:	443b      	add	r3, r7
 800a486:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800a48a:	7cfb      	ldrb	r3, [r7, #19]
 800a48c:	f003 0307 	and.w	r3, r3, #7
 800a490:	3b01      	subs	r3, #1
 800a492:	2101      	movs	r1, #1
 800a494:	fa01 f303 	lsl.w	r3, r1, r3
 800a498:	b2db      	uxtb	r3, r3
 800a49a:	7cf9      	ldrb	r1, [r7, #19]
 800a49c:	0909      	lsrs	r1, r1, #4
 800a49e:	b2c9      	uxtb	r1, r1
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	b2da      	uxtb	r2, r3
 800a4a4:	f101 0320 	add.w	r3, r1, #32
 800a4a8:	443b      	add	r3, r7
 800a4aa:	f803 2c14 	strb.w	r2, [r3, #-20]
 800a4ae:	e024      	b.n	800a4fa <phacDiscLoop_Sw_Int_CollisionResolutionA+0x3aa>
                        }
                        else
                        {
                            bTypeANvbUid = (uint8_t)((((bTypeANvbUid & 0xF0U) >> 4U) + 1U) << 4U);
 800a4b0:	7cfb      	ldrb	r3, [r7, #19]
 800a4b2:	091b      	lsrs	r3, r3, #4
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	011b      	lsls	r3, r3, #4
 800a4bc:	b2db      	uxtb	r3, r3
 800a4be:	74fb      	strb	r3, [r7, #19]

                            /* Set collision bit to 1 to resolve tag with highest UID */
                            aTypeAUid[(uint8_t)(((bTypeANvbUid & 0xF0U) >> 4U) - 1U)] |= (uint8_t)(0x80U);
 800a4c0:	7cfb      	ldrb	r3, [r7, #19]
 800a4c2:	091b      	lsrs	r3, r3, #4
 800a4c4:	b2db      	uxtb	r3, r3
 800a4c6:	3b01      	subs	r3, #1
 800a4c8:	b2db      	uxtb	r3, r3
 800a4ca:	3320      	adds	r3, #32
 800a4cc:	443b      	add	r3, r7
 800a4ce:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800a4d2:	7cfa      	ldrb	r2, [r7, #19]
 800a4d4:	0912      	lsrs	r2, r2, #4
 800a4d6:	b2d2      	uxtb	r2, r2
 800a4d8:	3a01      	subs	r2, #1
 800a4da:	b2d2      	uxtb	r2, r2
 800a4dc:	4611      	mov	r1, r2
 800a4de:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a4e2:	b2da      	uxtb	r2, r3
 800a4e4:	f101 0320 	add.w	r3, r1, #32
 800a4e8:	443b      	add	r3, r7
 800a4ea:	f803 2c14 	strb.w	r2, [r3, #-20]
 800a4ee:	e004      	b.n	800a4fa <phacDiscLoop_Sw_Int_CollisionResolutionA+0x3aa>
                    }
                    else
                    {
                        /* Check success */
                        /* Some error that can't be handled */
                        PH_CHECK_SUCCESS(status); /* TA302_01*/
 800a4f0:	8bfb      	ldrh	r3, [r7, #30]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d001      	beq.n	800a4fa <phacDiscLoop_Sw_Int_CollisionResolutionA+0x3aa>
 800a4f6:	8bfb      	ldrh	r3, [r7, #30]
 800a4f8:	e129      	b.n	800a74e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                while (bTypeANvbUid != 0x40U)
 800a4fa:	7cfb      	ldrb	r3, [r7, #19]
 800a4fc:	2b40      	cmp	r3, #64	@ 0x40
 800a4fe:	f47f af53 	bne.w	800a3a8 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x258>
                    }
                } /*End of while (bTypeANvbUid != 0x40U)*/

                /* Atqa(which indicates NFCID1 size) is invalid since collision is encountered while receiving Atqa */
                if (bCollDetected == PH_OFF)
 800a502:	7e7b      	ldrb	r3, [r7, #25]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d12d      	bne.n	800a564 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x414>
                    * ISO14443-3 Article 6.5.2.1
                    * EMVCo article 5.4.2
                    * So For Single UID Size The NFC Forum Device MUST set nfcid10 of a single-size NFCID1 and nfcid13
                    * of a double-size NFCID1 to a value different from 88h.
                    */
                    if(((0U == ((pDataParams->bCollPend & PHAC_DISCLOOP_POS_BIT_MASK_A))))
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	7f9b      	ldrb	r3, [r3, #30]
 800a50c:	f003 0301 	and.w	r3, r3, #1
 800a510:	2b00      	cmp	r3, #0
 800a512:	d127      	bne.n	800a564 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x414>
                       && ((((pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aAtqa[0] & 0xC0U) == 0x00U)
 800a514:	7f3a      	ldrb	r2, [r7, #28]
 800a516:	6879      	ldr	r1, [r7, #4]
 800a518:	4613      	mov	r3, r2
 800a51a:	011b      	lsls	r3, r3, #4
 800a51c:	1a9b      	subs	r3, r3, r2
 800a51e:	440b      	add	r3, r1
 800a520:	335e      	adds	r3, #94	@ 0x5e
 800a522:	781b      	ldrb	r3, [r3, #0]
 800a524:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d104      	bne.n	800a536 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x3e6>
                       && (aCascadeCodes[bCascadeCodeIdx] == PHPAL_I14443P3A_CASCADE_LEVEL_1))
 800a52c:	7efb      	ldrb	r3, [r7, #27]
 800a52e:	4a3a      	ldr	r2, [pc, #232]	@ (800a618 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c8>)
 800a530:	5cd3      	ldrb	r3, [r2, r3]
 800a532:	2b93      	cmp	r3, #147	@ 0x93
 800a534:	d010      	beq.n	800a558 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x408>
                       || (((pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aAtqa[0] & 0xC0U) == 0x40U)
 800a536:	7f3a      	ldrb	r2, [r7, #28]
 800a538:	6879      	ldr	r1, [r7, #4]
 800a53a:	4613      	mov	r3, r2
 800a53c:	011b      	lsls	r3, r3, #4
 800a53e:	1a9b      	subs	r3, r3, r2
 800a540:	440b      	add	r3, r1
 800a542:	335e      	adds	r3, #94	@ 0x5e
 800a544:	781b      	ldrb	r3, [r3, #0]
 800a546:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a54a:	2b40      	cmp	r3, #64	@ 0x40
 800a54c:	d10a      	bne.n	800a564 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x414>
                       && (aCascadeCodes[bCascadeCodeIdx] == PHPAL_I14443P3A_CASCADE_LEVEL_2)))
 800a54e:	7efb      	ldrb	r3, [r7, #27]
 800a550:	4a31      	ldr	r2, [pc, #196]	@ (800a618 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c8>)
 800a552:	5cd3      	ldrb	r3, [r2, r3]
 800a554:	2b95      	cmp	r3, #149	@ 0x95
 800a556:	d105      	bne.n	800a564 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x414>
                       && (aTypeAUid[0] == 0x88U))
 800a558:	7b3b      	ldrb	r3, [r7, #12]
 800a55a:	2b88      	cmp	r3, #136	@ 0x88
 800a55c:	d102      	bne.n	800a564 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x414>
                    {
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_AC_DISCLOOP);
 800a55e:	f244 0306 	movw	r3, #16390	@ 0x4006
 800a562:	e0f4      	b.n	800a74e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                    }
                }

                /*symbol 14*/
                status = phpalI14443p3a_Select(
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800a568:	7efb      	ldrb	r3, [r7, #27]
 800a56a:	4a2b      	ldr	r2, [pc, #172]	@ (800a618 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c8>)
 800a56c:	5cd1      	ldrb	r1, [r2, r3]
 800a56e:	7f3a      	ldrb	r2, [r7, #28]
 800a570:	4613      	mov	r3, r2
 800a572:	011b      	lsls	r3, r3, #4
 800a574:	1a9b      	subs	r3, r3, r2
 800a576:	3360      	adds	r3, #96	@ 0x60
 800a578:	687a      	ldr	r2, [r7, #4]
 800a57a:	4413      	add	r3, r2
 800a57c:	330b      	adds	r3, #11
 800a57e:	f107 020c 	add.w	r2, r7, #12
 800a582:	f00a f9d5 	bl	8014930 <phpalI14443p3a_Sw_Select>
 800a586:	4603      	mov	r3, r0
 800a588:	83fb      	strh	r3, [r7, #30]
                    aCascadeCodes[bCascadeCodeIdx],
                    aTypeAUid,
                    &pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aSak);

                /* As per EMVCo 3.1, wait for at least Tmin retransmission in case of timeout error. */
                if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a590:	2b01      	cmp	r3, #1
 800a592:	d12e      	bne.n	800a5f2 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4a2>
                {
                    bRetryCount = 0;
 800a594:	2300      	movs	r3, #0
 800a596:	76bb      	strb	r3, [r7, #26]
                    while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 800a598:	e024      	b.n	800a5e4 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x494>
                    {
                        bRetryCount++;
 800a59a:	7ebb      	ldrb	r3, [r7, #26]
 800a59c:	3301      	adds	r3, #1
 800a59e:	76bb      	strb	r3, [r7, #26]
                        /* Wait for at least Tmin retransmission delay. */
                        PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5a4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800a5a8:	2100      	movs	r1, #0
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f004 f83a 	bl	800e624 <phhalHw_Pn5180_Wait>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	83fb      	strh	r3, [r7, #30]
 800a5b4:	8bfb      	ldrh	r3, [r7, #30]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d001      	beq.n	800a5be <phacDiscLoop_Sw_Int_CollisionResolutionA+0x46e>
 800a5ba:	8bfb      	ldrh	r3, [r7, #30]
 800a5bc:	e0c7      	b.n	800a74e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                            pDataParams->pHalDataParams,
                            PHHAL_HW_TIME_MICROSECONDS,
                            PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

                        status = phpalI14443p3a_Select(
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800a5c2:	7efb      	ldrb	r3, [r7, #27]
 800a5c4:	4a14      	ldr	r2, [pc, #80]	@ (800a618 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c8>)
 800a5c6:	5cd1      	ldrb	r1, [r2, r3]
 800a5c8:	7f3a      	ldrb	r2, [r7, #28]
 800a5ca:	4613      	mov	r3, r2
 800a5cc:	011b      	lsls	r3, r3, #4
 800a5ce:	1a9b      	subs	r3, r3, r2
 800a5d0:	3360      	adds	r3, #96	@ 0x60
 800a5d2:	687a      	ldr	r2, [r7, #4]
 800a5d4:	4413      	add	r3, r2
 800a5d6:	330b      	adds	r3, #11
 800a5d8:	f107 020c 	add.w	r2, r7, #12
 800a5dc:	f00a f9a8 	bl	8014930 <phpalI14443p3a_Sw_Select>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	83fb      	strh	r3, [r7, #30]
                    while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 800a5e4:	8bfb      	ldrh	r3, [r7, #30]
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d102      	bne.n	800a5f2 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4a2>
 800a5ec:	7ebb      	ldrb	r3, [r7, #26]
 800a5ee:	2b01      	cmp	r3, #1
 800a5f0:	d9d3      	bls.n	800a59a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x44a>
                            aTypeAUid,
                            &pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aSak);
                    }
                }

                if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800a5f2:	8bfb      	ldrh	r3, [r7, #30]
 800a5f4:	b2db      	uxtb	r3, r3
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d10c      	bne.n	800a614 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c4>
                {
                    /*Symbol 15*/
                    if ((0U == (pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aSak & 0x04U)))
 800a5fa:	7f3a      	ldrb	r2, [r7, #28]
 800a5fc:	6879      	ldr	r1, [r7, #4]
 800a5fe:	4613      	mov	r3, r2
 800a600:	011b      	lsls	r3, r3, #4
 800a602:	1a9b      	subs	r3, r3, r2
 800a604:	440b      	add	r3, r1
 800a606:	336b      	adds	r3, #107	@ 0x6b
 800a608:	781b      	ldrb	r3, [r3, #0]
 800a60a:	f003 0304 	and.w	r3, r3, #4
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d104      	bne.n	800a61c <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4cc>
                    {
                        /*UID Complete*/
                        break;
 800a612:	e00a      	b.n	800a62a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4da>
                    }
                }
                else
                {
                    return status;
 800a614:	8bfb      	ldrh	r3, [r7, #30]
 800a616:	e09a      	b.n	800a74e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
 800a618:	08023940 	.word	0x08023940
            for (bCascadeCodeIdx=0; bCascadeCodeIdx<3U; bCascadeCodeIdx++)
 800a61c:	7efb      	ldrb	r3, [r7, #27]
 800a61e:	3301      	adds	r3, #1
 800a620:	76fb      	strb	r3, [r7, #27]
 800a622:	7efb      	ldrb	r3, [r7, #27]
 800a624:	2b02      	cmp	r3, #2
 800a626:	f67f aebc 	bls.w	800a3a2 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x252>
                }

            } /*for()*/

            /* If select was successful */
            if (status == PH_ERR_SUCCESS)
 800a62a:	8bfb      	ldrh	r3, [r7, #30]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d174      	bne.n	800a71a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5ca>
            {
                /*Symbol 18*/
                status = phpalI14443p3a_GetSerialNo(
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800a634:	7f3a      	ldrb	r2, [r7, #28]
 800a636:	4613      	mov	r3, r2
 800a638:	011b      	lsls	r3, r3, #4
 800a63a:	1a9b      	subs	r3, r3, r2
 800a63c:	3358      	adds	r3, #88	@ 0x58
 800a63e:	687a      	ldr	r2, [r7, #4]
 800a640:	4413      	add	r3, r2
 800a642:	f103 0108 	add.w	r1, r3, #8
 800a646:	7f3a      	ldrb	r2, [r7, #28]
 800a648:	4613      	mov	r3, r2
 800a64a:	011b      	lsls	r3, r3, #4
 800a64c:	1a9b      	subs	r3, r3, r2
 800a64e:	3360      	adds	r3, #96	@ 0x60
 800a650:	687a      	ldr	r2, [r7, #4]
 800a652:	4413      	add	r3, r2
 800a654:	330a      	adds	r3, #10
 800a656:	461a      	mov	r2, r3
 800a658:	f00a fc3b 	bl	8014ed2 <phpalI14443p3a_Sw_GetSerialNo>
 800a65c:	4603      	mov	r3, r0
 800a65e:	83fb      	strh	r3, [r7, #30]
                    pDataParams->pPal1443p3aDataParams,
                    &pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aUid[0],
                    &pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].bUidSize);

                PH_CHECK_SUCCESS(status);
 800a660:	8bfb      	ldrh	r3, [r7, #30]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d001      	beq.n	800a66a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x51a>
 800a666:	8bfb      	ldrh	r3, [r7, #30]
 800a668:	e071      	b.n	800a74e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>

                /*Symbol 17*/
                bTypeATagIdx++;
 800a66a:	7f3b      	ldrb	r3, [r7, #28]
 800a66c:	3301      	adds	r3, #1
 800a66e:	773b      	strb	r3, [r7, #28]

                /*Symbol 19*/
                if((0U != ((pDataParams->bCollPend & PHAC_DISCLOOP_POS_BIT_MASK_A))) && (bTypeATagIdx < pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A]))
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	7f9b      	ldrb	r3, [r3, #30]
 800a674:	f003 0301 	and.w	r3, r3, #1
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d057      	beq.n	800a72c <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5dc>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	7a9b      	ldrb	r3, [r3, #10]
 800a680:	7f3a      	ldrb	r2, [r7, #28]
 800a682:	429a      	cmp	r2, r3
 800a684:	d252      	bcs.n	800a72c <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5dc>
                {
                    /* Symbol 20 */
                    status = phpalI14443p3a_HaltA(pDataParams->pPal1443p3aDataParams);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a68a:	4618      	mov	r0, r3
 800a68c:	f009 fec2 	bl	8014414 <phpalI14443p3a_Sw_HaltA>
 800a690:	4603      	mov	r3, r0
 800a692:	83fb      	strh	r3, [r7, #30]
                    if (status != PH_ERR_SUCCESS)
 800a694:	8bfb      	ldrh	r3, [r7, #30]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d001      	beq.n	800a69e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x54e>
                    {
                        /* Halt A has failed, can't count this as detected tag */
                        return status;
 800a69a:	8bfb      	ldrh	r3, [r7, #30]
 800a69c:	e057      	b.n	800a74e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                    }

                    /* Update the corresponding Layer 3 dataparam to indicate the Tag is in HALT State. */
                    (pDataParams->sTypeATargetInfo).aTypeA_I3P3[bTypeATagIdx - (uint8_t)1U].bSleep = (uint8_t)1U;
 800a69e:	7f3b      	ldrb	r3, [r7, #28]
 800a6a0:	1e5a      	subs	r2, r3, #1
 800a6a2:	6879      	ldr	r1, [r7, #4]
 800a6a4:	4613      	mov	r3, r2
 800a6a6:	011b      	lsls	r3, r3, #4
 800a6a8:	1a9b      	subs	r3, r3, r2
 800a6aa:	440b      	add	r3, r1
 800a6ac:	336c      	adds	r3, #108	@ 0x6c
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	701a      	strb	r2, [r3, #0]

                    /* Symbol 21 */
                    status = phpalI14443p3a_RequestA(
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800a6b6:	7f3a      	ldrb	r2, [r7, #28]
 800a6b8:	4613      	mov	r3, r2
 800a6ba:	011b      	lsls	r3, r3, #4
 800a6bc:	1a9b      	subs	r3, r3, r2
 800a6be:	3358      	adds	r3, #88	@ 0x58
 800a6c0:	687a      	ldr	r2, [r7, #4]
 800a6c2:	4413      	add	r3, r2
 800a6c4:	3306      	adds	r3, #6
 800a6c6:	4619      	mov	r1, r3
 800a6c8:	f009 fe86 	bl	80143d8 <phpalI14443p3a_Sw_RequestA>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	83fb      	strh	r3, [r7, #30]
                        pDataParams->pPal1443p3aDataParams,
                        pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aAtqa);

                    if((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800a6d0:	8bfb      	ldrh	r3, [r7, #30]
 800a6d2:	b2db      	uxtb	r3, r3
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d112      	bne.n	800a6fe <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5ae>
                    {
                        /*Symbol 3*/
                        if(pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aAtqa[0] == 0x00U)
 800a6d8:	7f3a      	ldrb	r2, [r7, #28]
 800a6da:	6879      	ldr	r1, [r7, #4]
 800a6dc:	4613      	mov	r3, r2
 800a6de:	011b      	lsls	r3, r3, #4
 800a6e0:	1a9b      	subs	r3, r3, r2
 800a6e2:	440b      	add	r3, r1
 800a6e4:	335e      	adds	r3, #94	@ 0x5e
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d116      	bne.n	800a71a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5ca>
                        {
                            /*Symbol 23*/
                            pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	7f9b      	ldrb	r3, [r3, #30]
 800a6f0:	f043 0301 	orr.w	r3, r3, #1
 800a6f4:	b2da      	uxtb	r2, r3
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	779a      	strb	r2, [r3, #30]
                            return PH_ERR_SUCCESS;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	e027      	b.n	800a74e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                        }
                    }
                    else if((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800a6fe:	8bfb      	ldrh	r3, [r7, #30]
 800a700:	b2db      	uxtb	r3, r3
 800a702:	2b03      	cmp	r3, #3
 800a704:	d107      	bne.n	800a716 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5c6>
                    {
                        /* More device to resolve */
                        pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	7f9b      	ldrb	r3, [r3, #30]
 800a70a:	f043 0301 	orr.w	r3, r3, #1
 800a70e:	b2da      	uxtb	r2, r3
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	779a      	strb	r2, [r3, #30]
 800a714:	e001      	b.n	800a71a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5ca>
                    }
                    else
                    {
                        return status;
 800a716:	8bfb      	ldrh	r3, [r7, #30]
 800a718:	e019      	b.n	800a74e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                {
                    break;
                }
            }
        }
        bDeviceCount++;
 800a71a:	7f7b      	ldrb	r3, [r7, #29]
 800a71c:	3301      	adds	r3, #1
 800a71e:	777b      	strb	r3, [r7, #29]
    while (bDeviceCount <= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A])
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	7a9b      	ldrb	r3, [r3, #10]
 800a724:	7f7a      	ldrb	r2, [r7, #29]
 800a726:	429a      	cmp	r2, r3
 800a728:	f67f ae2b 	bls.w	800a382 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x232>
    } /* End of while(bDeviceCount < pDataParams->baPasConDevLim[0]) */

    pDataParams->sTypeATargetInfo.bTotalTagsFound = bTypeATagIdx;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	7f3a      	ldrb	r2, [r7, #28]
 800a730:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    pDataParams->bNumOfCards = bTypeATagIdx;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	7f3a      	ldrb	r2, [r7, #28]
 800a738:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    if(pDataParams->sTypeATargetInfo.bTotalTagsFound == 0U)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a742:	2b00      	cmp	r3, #0
 800a744:	d102      	bne.n	800a74c <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fc>
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800a746:	f244 0385 	movw	r3, #16517	@ 0x4085
 800a74a:	e000      	b.n	800a74e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
    }

    return PH_ERR_SUCCESS;
 800a74c:	2300      	movs	r3, #0
#else /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3724      	adds	r7, #36	@ 0x24
 800a752:	46bd      	mov	sp, r7
 800a754:	bd90      	pop	{r4, r7, pc}
 800a756:	bf00      	nop

0800a758 <phacDiscLoop_Sw_Int_ActivateA>:

phStatus_t phacDiscLoop_Sw_Int_ActivateA(
                                         phacDiscLoop_Sw_DataParams_t * pDataParams,
                                         uint8_t bTypeATagIdx
                                         )
{
 800a758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a75c:	b090      	sub	sp, #64	@ 0x40
 800a75e:	af06      	add	r7, sp, #24
 800a760:	6078      	str	r0, [r7, #4]
 800a762:	460b      	mov	r3, r1
 800a764:	70fb      	strb	r3, [r7, #3]
#if defined (NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS)
    phStatus_t   PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 800a766:	2300      	movs	r3, #0
 800a768:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint8_t      PH_MEMLOC_BUF aUid[10];
    uint8_t      PH_MEMLOC_REM bUidLen;
    uint8_t      PH_MEMLOC_REM bMoreCardsAvailable;
    uint8_t      PH_MEMLOC_REM bTagType;
    uint8_t      PH_MEMLOC_REM bIndex;
    uint8_t      PH_MEMLOC_REM bActiveDevice = 0;
 800a76a:	2300      	movs	r3, #0
 800a76c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    uint8_t      PH_MEMLOC_REM bFsdi;
    uint8_t      PH_MEMLOC_REM bFsci;
    uint16_t     PH_MEMLOC_REM wDataRate;
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */

    if ((bTypeATagIdx >= pDataParams->sTypeATargetInfo.bTotalTagsFound) || ( bTypeATagIdx >= PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED ))
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a776:	78fa      	ldrb	r2, [r7, #3]
 800a778:	429a      	cmp	r2, r3
 800a77a:	d202      	bcs.n	800a782 <phacDiscLoop_Sw_Int_ActivateA+0x2a>
 800a77c:	78fb      	ldrb	r3, [r7, #3]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d002      	beq.n	800a788 <phacDiscLoop_Sw_Int_ActivateA+0x30>
    {
        /* Out of range or no such card found yet */
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800a782:	f244 0321 	movw	r3, #16417	@ 0x4021
 800a786:	e206      	b.n	800ab96 <phacDiscLoop_Sw_Int_ActivateA+0x43e>
    }

    if(pDataParams->sTypeATargetInfo.bTotalTagsFound > PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a78e:	2b01      	cmp	r3, #1
 800a790:	d902      	bls.n	800a798 <phacDiscLoop_Sw_Int_ActivateA+0x40>
    {
        /* To fix coverity issue */
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_AC_DISCLOOP);
 800a792:	f244 037f 	movw	r3, #16511	@ 0x407f
 800a796:	e1fe      	b.n	800ab96 <phacDiscLoop_Sw_Int_ActivateA+0x43e>
    }

    /* If it is Single device or selected device is at last position, In both case device is already active */
    if(pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].bSleep == 1U) /* Step 0 */
 800a798:	78fa      	ldrb	r2, [r7, #3]
 800a79a:	6879      	ldr	r1, [r7, #4]
 800a79c:	4613      	mov	r3, r2
 800a79e:	011b      	lsls	r3, r3, #4
 800a7a0:	1a9b      	subs	r3, r3, r2
 800a7a2:	440b      	add	r3, r1
 800a7a4:	336c      	adds	r3, #108	@ 0x6c
 800a7a6:	781b      	ldrb	r3, [r3, #0]
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d175      	bne.n	800a898 <phacDiscLoop_Sw_Int_ActivateA+0x140>
    {
        for (bIndex = 0; bIndex < pDataParams->sTypeATargetInfo.bTotalTagsFound; bIndex++)
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a7b2:	e021      	b.n	800a7f8 <phacDiscLoop_Sw_Int_ActivateA+0xa0>
        {
            /* Step 1 */
            if ((pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].bSleep == 0U) && (bIndex != bTypeATagIdx))
 800a7b4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a7b8:	6879      	ldr	r1, [r7, #4]
 800a7ba:	4613      	mov	r3, r2
 800a7bc:	011b      	lsls	r3, r3, #4
 800a7be:	1a9b      	subs	r3, r3, r2
 800a7c0:	440b      	add	r3, r1
 800a7c2:	336c      	adds	r3, #108	@ 0x6c
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d111      	bne.n	800a7ee <phacDiscLoop_Sw_Int_ActivateA+0x96>
 800a7ca:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a7ce:	78fb      	ldrb	r3, [r7, #3]
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	d00c      	beq.n	800a7ee <phacDiscLoop_Sw_Int_ActivateA+0x96>
            {
                bActiveDevice = 1;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                /* Update dataparam to indicate that the tag will now be moved to IDLE state. */
                pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].bSleep = 1U;
 800a7da:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a7de:	6879      	ldr	r1, [r7, #4]
 800a7e0:	4613      	mov	r3, r2
 800a7e2:	011b      	lsls	r3, r3, #4
 800a7e4:	1a9b      	subs	r3, r3, r2
 800a7e6:	440b      	add	r3, r1
 800a7e8:	336c      	adds	r3, #108	@ 0x6c
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	701a      	strb	r2, [r3, #0]
        for (bIndex = 0; bIndex < pDataParams->sTypeATargetInfo.bTotalTagsFound; bIndex++)
 800a7ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a7fe:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a802:	429a      	cmp	r2, r3
 800a804:	d3d6      	bcc.n	800a7b4 <phacDiscLoop_Sw_Int_ActivateA+0x5c>
            }
        }
        if (bActiveDevice != 0U)
 800a806:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d00b      	beq.n	800a826 <phacDiscLoop_Sw_Int_ActivateA+0xce>
        {
            /* Step 2 of Activation flow */
            status = phpalI14443p3a_HaltA(pDataParams->pPal1443p3aDataParams);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a812:	4618      	mov	r0, r3
 800a814:	f009 fdfe 	bl	8014414 <phpalI14443p3a_Sw_HaltA>
 800a818:	4603      	mov	r3, r0
 800a81a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            if (status != PH_ERR_SUCCESS)
 800a81c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d001      	beq.n	800a826 <phacDiscLoop_Sw_Int_ActivateA+0xce>
            {
                /* Halt A has failed, can't count this as detected tag */
                return status;
 800a822:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a824:	e1b7      	b.n	800ab96 <phacDiscLoop_Sw_Int_ActivateA+0x43e>
            }
        }

        /* Activate the card in sleep with given UID */
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p3a_ActivateCard(
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800a82a:	78fa      	ldrb	r2, [r7, #3]
 800a82c:	4613      	mov	r3, r2
 800a82e:	011b      	lsls	r3, r3, #4
 800a830:	1a9b      	subs	r3, r3, r2
 800a832:	3358      	adds	r3, #88	@ 0x58
 800a834:	687a      	ldr	r2, [r7, #4]
 800a836:	4413      	add	r3, r2
 800a838:	f103 0408 	add.w	r4, r3, #8
 800a83c:	78fa      	ldrb	r2, [r7, #3]
 800a83e:	6879      	ldr	r1, [r7, #4]
 800a840:	4613      	mov	r3, r2
 800a842:	011b      	lsls	r3, r3, #4
 800a844:	1a9b      	subs	r3, r3, r2
 800a846:	440b      	add	r3, r1
 800a848:	336a      	adds	r3, #106	@ 0x6a
 800a84a:	7819      	ldrb	r1, [r3, #0]
 800a84c:	78fa      	ldrb	r2, [r7, #3]
 800a84e:	4613      	mov	r3, r2
 800a850:	011b      	lsls	r3, r3, #4
 800a852:	1a9b      	subs	r3, r3, r2
 800a854:	3360      	adds	r3, #96	@ 0x60
 800a856:	687a      	ldr	r2, [r7, #4]
 800a858:	4413      	add	r3, r2
 800a85a:	330b      	adds	r3, #11
 800a85c:	f107 0518 	add.w	r5, r7, #24
 800a860:	f107 0216 	add.w	r2, r7, #22
 800a864:	9202      	str	r2, [sp, #8]
 800a866:	9301      	str	r3, [sp, #4]
 800a868:	f107 0317 	add.w	r3, r7, #23
 800a86c:	9300      	str	r3, [sp, #0]
 800a86e:	462b      	mov	r3, r5
 800a870:	460a      	mov	r2, r1
 800a872:	4621      	mov	r1, r4
 800a874:	f00a f874 	bl	8014960 <phpalI14443p3a_Sw_ActivateCard>
 800a878:	4603      	mov	r3, r0
 800a87a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a87c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d001      	beq.n	800a886 <phacDiscLoop_Sw_Int_ActivateA+0x12e>
 800a882:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a884:	e187      	b.n	800ab96 <phacDiscLoop_Sw_Int_ActivateA+0x43e>
            aUid,
            &bUidLen,
            &(((pDataParams->sTypeATargetInfo).aTypeA_I3P3[bTypeATagIdx]).aSak),
            &bMoreCardsAvailable));

        pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].bSleep = 0U;
 800a886:	78fa      	ldrb	r2, [r7, #3]
 800a888:	6879      	ldr	r1, [r7, #4]
 800a88a:	4613      	mov	r3, r2
 800a88c:	011b      	lsls	r3, r3, #4
 800a88e:	1a9b      	subs	r3, r3, r2
 800a890:	440b      	add	r3, r1
 800a892:	336c      	adds	r3, #108	@ 0x6c
 800a894:	2200      	movs	r2, #0
 800a896:	701a      	strb	r2, [r3, #0]

    }

    bTagType = (pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aSak & 0x60U);
 800a898:	78fa      	ldrb	r2, [r7, #3]
 800a89a:	6879      	ldr	r1, [r7, #4]
 800a89c:	4613      	mov	r3, r2
 800a89e:	011b      	lsls	r3, r3, #4
 800a8a0:	1a9b      	subs	r3, r3, r2
 800a8a2:	440b      	add	r3, r1
 800a8a4:	336b      	adds	r3, #107	@ 0x6b
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a8ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    bTagType = bTagType >> 5U;
 800a8b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a8b4:	095b      	lsrs	r3, r3, #5
 800a8b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    /* Type 4A */
    if(bTagType == PHAC_DISCLOOP_TYPEA_TYPE4A_TAG_CONFIG_MASK)
 800a8ba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a8be:	2b01      	cmp	r3, #1
 800a8c0:	f040 80a0 	bne.w	800aa04 <phacDiscLoop_Sw_Int_ActivateA+0x2ac>
    {
#if defined (NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS)
        /* Enable Emd Check */
        PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_ON));
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	215e      	movs	r1, #94	@ 0x5e
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f003 ff63 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a8d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d001      	beq.n	800a8e0 <phacDiscLoop_Sw_Int_ActivateA+0x188>
 800a8dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a8de:	e15a      	b.n	800ab96 <phacDiscLoop_Sw_Int_ActivateA+0x43e>

        PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_ActivateCard(
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f893 1084 	ldrb.w	r1, [r3, #132]	@ 0x84
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f893 4085 	ldrb.w	r4, [r3, #133]	@ 0x85
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f893 5087 	ldrb.w	r5, [r3, #135]	@ 0x87
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800a8fc:	687a      	ldr	r2, [r7, #4]
 800a8fe:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 800a902:	9201      	str	r2, [sp, #4]
 800a904:	9300      	str	r3, [sp, #0]
 800a906:	462b      	mov	r3, r5
 800a908:	4622      	mov	r2, r4
 800a90a:	f00d f875 	bl	80179f8 <phpalI14443p4a_Sw_ActivateCard>
 800a90e:	4603      	mov	r3, r0
 800a910:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a912:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a914:	2b00      	cmp	r3, #0
 800a916:	d001      	beq.n	800a91c <phacDiscLoop_Sw_Int_ActivateA+0x1c4>
 800a918:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a91a:	e13c      	b.n	800ab96 <phacDiscLoop_Sw_Int_ActivateA+0x43e>
            pDataParams->sTypeATargetInfo.sTypeA_I3P4.bCid,
            pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDri,
            pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDsi,
            pDataParams->sTypeATargetInfo.sTypeA_I3P4.pAts));

        if (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a922:	2b01      	cmp	r3, #1
 800a924:	d027      	beq.n	800a976 <phacDiscLoop_Sw_Int_ActivateA+0x21e>
        {
            /* Update Dri and Dsi parameters with currently applied values. */
            PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_GetConfig(
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a92a:	f107 020e 	add.w	r2, r7, #14
 800a92e:	2103      	movs	r1, #3
 800a930:	4618      	mov	r0, r3
 800a932:	f00c fc81 	bl	8017238 <phpalI14443p4a_Sw_GetConfig>
 800a936:	4603      	mov	r3, r0
 800a938:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a93a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d001      	beq.n	800a944 <phacDiscLoop_Sw_Int_ActivateA+0x1ec>
 800a940:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a942:	e128      	b.n	800ab96 <phacDiscLoop_Sw_Int_ActivateA+0x43e>
                pDataParams->pPal1443p4aDataParams,
                PHPAL_I14443P4A_CONFIG_DRI,
                &wDataRate));
            pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDri = (uint8_t)wDataRate;
 800a944:	89fb      	ldrh	r3, [r7, #14]
 800a946:	b2da      	uxtb	r2, r3
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87

            PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_GetConfig(
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a952:	f107 020e 	add.w	r2, r7, #14
 800a956:	2104      	movs	r1, #4
 800a958:	4618      	mov	r0, r3
 800a95a:	f00c fc6d 	bl	8017238 <phpalI14443p4a_Sw_GetConfig>
 800a95e:	4603      	mov	r3, r0
 800a960:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a962:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a964:	2b00      	cmp	r3, #0
 800a966:	d001      	beq.n	800a96c <phacDiscLoop_Sw_Int_ActivateA+0x214>
 800a968:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a96a:	e114      	b.n	800ab96 <phacDiscLoop_Sw_Int_ActivateA+0x43e>
                pDataParams->pPal1443p4aDataParams,
                PHPAL_I14443P4A_CONFIG_DSI,
                &wDataRate));
            pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDsi = (uint8_t)wDataRate;
 800a96c:	89fb      	ldrh	r3, [r7, #14]
 800a96e:	b2da      	uxtb	r2, r3
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
        }

        /* Retrieve 14443-4A protocol parameter */
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_GetProtocolParams(
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800a97a:	f107 0413 	add.w	r4, r7, #19
 800a97e:	f107 0214 	add.w	r2, r7, #20
 800a982:	f107 0115 	add.w	r1, r7, #21
 800a986:	f107 0310 	add.w	r3, r7, #16
 800a98a:	9302      	str	r3, [sp, #8]
 800a98c:	f107 0311 	add.w	r3, r7, #17
 800a990:	9301      	str	r3, [sp, #4]
 800a992:	f107 0312 	add.w	r3, r7, #18
 800a996:	9300      	str	r3, [sp, #0]
 800a998:	4623      	mov	r3, r4
 800a99a:	f00d f8e5 	bl	8017b68 <phpalI14443p4a_Sw_GetProtocolParams>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a9a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d001      	beq.n	800a9ac <phacDiscLoop_Sw_Int_ActivateA+0x254>
 800a9a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a9aa:	e0f4      	b.n	800ab96 <phacDiscLoop_Sw_Int_ActivateA+0x43e>
            &bFwi,
            &bFsdi,
            &bFsci));

        /* EMVCo v3.1: Limit the FSCI value to be used based on the RdLib execution environment. */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a9b2:	2b01      	cmp	r3, #1
 800a9b4:	d109      	bne.n	800a9ca <phacDiscLoop_Sw_Int_ActivateA+0x272>
        {
            if (bFsci > pDataParams->bFsciMax)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800a9bc:	7c3b      	ldrb	r3, [r7, #16]
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	d203      	bcs.n	800a9ca <phacDiscLoop_Sw_Int_ActivateA+0x272>
            {
                bFsci = pDataParams->bFsciMax;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800a9c8:	743b      	strb	r3, [r7, #16]
            }
        }

        /* Set 14443-4 protocol parameter */
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p4_SetProtocol(
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 800a9ce:	7d7d      	ldrb	r5, [r7, #21]
 800a9d0:	7d3e      	ldrb	r6, [r7, #20]
 800a9d2:	f897 c013 	ldrb.w	ip, [r7, #19]
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 800a9dc:	7cba      	ldrb	r2, [r7, #18]
 800a9de:	7c79      	ldrb	r1, [r7, #17]
 800a9e0:	7c38      	ldrb	r0, [r7, #16]
 800a9e2:	9003      	str	r0, [sp, #12]
 800a9e4:	9102      	str	r1, [sp, #8]
 800a9e6:	9201      	str	r2, [sp, #4]
 800a9e8:	9300      	str	r3, [sp, #0]
 800a9ea:	4663      	mov	r3, ip
 800a9ec:	4632      	mov	r2, r6
 800a9ee:	4629      	mov	r1, r5
 800a9f0:	4620      	mov	r0, r4
 800a9f2:	f00b f92a 	bl	8015c4a <phpalI14443p4_Sw_SetProtocol>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a9fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d001      	beq.n	800aa04 <phacDiscLoop_Sw_Int_ActivateA+0x2ac>
 800aa00:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aa02:	e0c8      	b.n	800ab96 <phacDiscLoop_Sw_Int_ActivateA+0x43e>
#else /* NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */
    }

    if (bTagType == PHAC_DISCLOOP_TYPEA_TYPE_NFC_DEP_TAG_CONFIG_MASK)
 800aa04:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800aa08:	2b02      	cmp	r3, #2
 800aa0a:	d13d      	bne.n	800aa88 <phacDiscLoop_Sw_Int_ActivateA+0x330>
    {
        /* In case of EMVCo Profile and P2P tag is detected. */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800aa12:	2b01      	cmp	r3, #1
 800aa14:	d102      	bne.n	800aa1c <phacDiscLoop_Sw_Int_ActivateA+0x2c4>
        {
            /* Return to application with No device resolved; In EMVCo mode only Type-A ISO 14443-4 compliant cards should be activated. */
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800aa16:	f244 0385 	movw	r3, #16517	@ 0x4085
 800aa1a:	e0bc      	b.n	800ab96 <phacDiscLoop_Sw_Int_ActivateA+0x43e>
        }

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_TAGS
        /* Send ATR_REQ and PSL_REQ */
        PH_CHECK_SUCCESS_FCT(status, phpalI18092mPI_Atr(
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 800aa20:	78fa      	ldrb	r2, [r7, #3]
 800aa22:	4613      	mov	r3, r2
 800aa24:	011b      	lsls	r3, r3, #4
 800aa26:	1a9b      	subs	r3, r3, r2
 800aa28:	3358      	adds	r3, #88	@ 0x58
 800aa2a:	687a      	ldr	r2, [r7, #4]
 800aa2c:	4413      	add	r3, r2
 800aa2e:	f103 0c08 	add.w	ip, r3, #8
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f893 e070 	ldrb.w	lr, [r3, #112]	@ 0x70
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f893 8071 	ldrb.w	r8, [r3, #113]	@ 0x71
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800aa44:	687a      	ldr	r2, [r7, #4]
 800aa46:	f892 2073 	ldrb.w	r2, [r2, #115]	@ 0x73
 800aa4a:	6879      	ldr	r1, [r7, #4]
 800aa4c:	6f49      	ldr	r1, [r1, #116]	@ 0x74
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f890 0078 	ldrb.w	r0, [r0, #120]	@ 0x78
 800aa54:	687c      	ldr	r4, [r7, #4]
 800aa56:	6fe4      	ldr	r4, [r4, #124]	@ 0x7c
 800aa58:	687d      	ldr	r5, [r7, #4]
 800aa5a:	3580      	adds	r5, #128	@ 0x80
 800aa5c:	9505      	str	r5, [sp, #20]
 800aa5e:	9404      	str	r4, [sp, #16]
 800aa60:	9003      	str	r0, [sp, #12]
 800aa62:	9102      	str	r1, [sp, #8]
 800aa64:	9201      	str	r2, [sp, #4]
 800aa66:	9300      	str	r3, [sp, #0]
 800aa68:	4643      	mov	r3, r8
 800aa6a:	4672      	mov	r2, lr
 800aa6c:	4661      	mov	r1, ip
 800aa6e:	4630      	mov	r0, r6
 800aa70:	f00d fb96 	bl	80181a0 <phpalI18092mPI_Sw_Atr>
 800aa74:	4603      	mov	r3, r0
 800aa76:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800aa78:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d001      	beq.n	800aa82 <phacDiscLoop_Sw_Int_ActivateA+0x32a>
 800aa7e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aa80:	e089      	b.n	800ab96 <phacDiscLoop_Sw_Int_ActivateA+0x43e>
            pDataParams->sTypeATargetInfo.sTypeA_P2P.pGi,
            pDataParams->sTypeATargetInfo.sTypeA_P2P.bGiLength,
            pDataParams->sTypeATargetInfo.sTypeA_P2P.pAtrRes,
            &(pDataParams->sTypeATargetInfo.sTypeA_P2P.bAtrResLength)));

        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_PASSIVE_TARGET_ACTIVATED, PH_COMP_AC_DISCLOOP);
 800aa82:	f244 038d 	movw	r3, #16525	@ 0x408d
 800aa86:	e086      	b.n	800ab96 <phacDiscLoop_Sw_Int_ActivateA+0x43e>
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_TAGS */
    }

    /* Support for both Type 4A and NFC-DEP (Merged SAK) */
    if (bTagType == PHAC_DISCLOOP_TYPEA_TYPE_NFC_DEP_TYPE4A_TAG_CONFIG_MASK)
 800aa88:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800aa8c:	2b03      	cmp	r3, #3
 800aa8e:	d175      	bne.n	800ab7c <phacDiscLoop_Sw_Int_ActivateA+0x424>
    {
#ifdef  NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800aa96:	2b01      	cmp	r3, #1
 800aa98:	d16d      	bne.n	800ab76 <phacDiscLoop_Sw_Int_ActivateA+0x41e>
        {
            /* Enable Emd Check in Emvco mode */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_ON));
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	215e      	movs	r1, #94	@ 0x5e
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f003 fe78 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800aaac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d001      	beq.n	800aab6 <phacDiscLoop_Sw_Int_ActivateA+0x35e>
 800aab2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aab4:	e06f      	b.n	800ab96 <phacDiscLoop_Sw_Int_ActivateA+0x43e>

            PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_ActivateCard(
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f893 1084 	ldrb.w	r1, [r3, #132]	@ 0x84
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f893 4085 	ldrb.w	r4, [r3, #133]	@ 0x85
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f893 5087 	ldrb.w	r5, [r3, #135]	@ 0x87
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 800aad8:	9201      	str	r2, [sp, #4]
 800aada:	9300      	str	r3, [sp, #0]
 800aadc:	462b      	mov	r3, r5
 800aade:	4622      	mov	r2, r4
 800aae0:	f00c ff8a 	bl	80179f8 <phpalI14443p4a_Sw_ActivateCard>
 800aae4:	4603      	mov	r3, r0
 800aae6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800aae8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d001      	beq.n	800aaf2 <phacDiscLoop_Sw_Int_ActivateA+0x39a>
 800aaee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aaf0:	e051      	b.n	800ab96 <phacDiscLoop_Sw_Int_ActivateA+0x43e>
                pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDri,
                pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDsi,
                pDataParams->sTypeATargetInfo.sTypeA_I3P4.pAts));

            /* Retrieve 14443-4A protocol parameter */
            PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_GetProtocolParams(
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800aaf6:	f107 0413 	add.w	r4, r7, #19
 800aafa:	f107 0214 	add.w	r2, r7, #20
 800aafe:	f107 0115 	add.w	r1, r7, #21
 800ab02:	f107 0310 	add.w	r3, r7, #16
 800ab06:	9302      	str	r3, [sp, #8]
 800ab08:	f107 0311 	add.w	r3, r7, #17
 800ab0c:	9301      	str	r3, [sp, #4]
 800ab0e:	f107 0312 	add.w	r3, r7, #18
 800ab12:	9300      	str	r3, [sp, #0]
 800ab14:	4623      	mov	r3, r4
 800ab16:	f00d f827 	bl	8017b68 <phpalI14443p4a_Sw_GetProtocolParams>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800ab1e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d001      	beq.n	800ab28 <phacDiscLoop_Sw_Int_ActivateA+0x3d0>
 800ab24:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ab26:	e036      	b.n	800ab96 <phacDiscLoop_Sw_Int_ActivateA+0x43e>
                &bFwi,
                &bFsdi,
                &bFsci));

            /* EMVCo v3.1: Limit the FSCI value to be used based on the RdLib execution environment. */
            if (bFsci > pDataParams->bFsciMax)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800ab2e:	7c3b      	ldrb	r3, [r7, #16]
 800ab30:	429a      	cmp	r2, r3
 800ab32:	d203      	bcs.n	800ab3c <phacDiscLoop_Sw_Int_ActivateA+0x3e4>
            {
                bFsci = pDataParams->bFsciMax;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800ab3a:	743b      	strb	r3, [r7, #16]
            }

            /* Set 14443-4 protocol parameter */
            PH_CHECK_SUCCESS_FCT(status, phpalI14443p4_SetProtocol(
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 800ab40:	7d7d      	ldrb	r5, [r7, #21]
 800ab42:	7d3e      	ldrb	r6, [r7, #20]
 800ab44:	f897 c013 	ldrb.w	ip, [r7, #19]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 800ab4e:	7cba      	ldrb	r2, [r7, #18]
 800ab50:	7c79      	ldrb	r1, [r7, #17]
 800ab52:	7c38      	ldrb	r0, [r7, #16]
 800ab54:	9003      	str	r0, [sp, #12]
 800ab56:	9102      	str	r1, [sp, #8]
 800ab58:	9201      	str	r2, [sp, #4]
 800ab5a:	9300      	str	r3, [sp, #0]
 800ab5c:	4663      	mov	r3, ip
 800ab5e:	4632      	mov	r2, r6
 800ab60:	4629      	mov	r1, r5
 800ab62:	4620      	mov	r0, r4
 800ab64:	f00b f871 	bl	8015c4a <phpalI14443p4_Sw_SetProtocol>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800ab6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d004      	beq.n	800ab7c <phacDiscLoop_Sw_Int_ActivateA+0x424>
 800ab72:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ab74:	e00f      	b.n	800ab96 <phacDiscLoop_Sw_Int_ActivateA+0x43e>
        }
        else
#endif /*  NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */
        {
            /* Return to application; application can decide what to send RATS or ATR */
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_MERGED_SEL_RES_FOUND, PH_COMP_AC_DISCLOOP);
 800ab76:	f244 038e 	movw	r3, #16526	@ 0x408e
 800ab7a:	e00c      	b.n	800ab96 <phacDiscLoop_Sw_Int_ActivateA+0x43e>
        }
    }

    /* Case of EMVCo Profile and type 2 tag */
    if ((bTagType == PHAC_DISCLOOP_TYPEA_TYPE2_TAG_CONFIG_MASK) && (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO))
 800ab7c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d107      	bne.n	800ab94 <phacDiscLoop_Sw_Int_ActivateA+0x43c>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800ab8a:	2b01      	cmp	r3, #1
 800ab8c:	d102      	bne.n	800ab94 <phacDiscLoop_Sw_Int_ActivateA+0x43c>
    {
        /* Return to application with No device resolved; In EMVCo mode only Type-A ISO 14443-4 compliant cards should be activated. */
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800ab8e:	f244 0385 	movw	r3, #16517	@ 0x4085
 800ab92:	e000      	b.n	800ab96 <phacDiscLoop_Sw_Int_ActivateA+0x43e>
    }

    return PH_ERR_SUCCESS;
 800ab94:	2300      	movs	r3, #0
#else /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3728      	adds	r7, #40	@ 0x28
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800aba0 <phacDiscLoop_Sw_DetTechTypeB>:
 * Internal Definitions
 * ***************************************************************************************************************** */
phStatus_t phacDiscLoop_Sw_DetTechTypeB(
                                        phacDiscLoop_Sw_DataParams_t *pDataParams
                                        )
{
 800aba0:	b590      	push	{r4, r7, lr}
 800aba2:	b087      	sub	sp, #28
 800aba4:	af02      	add	r7, sp, #8
 800aba6:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    uint8_t    PH_MEMLOC_COUNT bIndex;

    phStatus_t PH_MEMLOC_REM wStatus;

    pDataParams->sTypeBTargetInfo.bAfiReq = 0x00;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2200      	movs	r2, #0
 800abac:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1
    pDataParams->sTypeBTargetInfo.bTotalTagsFound = 0;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2200      	movs	r2, #0
 800abb4:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
    pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_B;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	7f9b      	ldrb	r3, [r3, #30]
 800abbc:	f023 0302 	bic.w	r3, r3, #2
 800abc0:	b2da      	uxtb	r2, r3
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	779a      	strb	r2, [r3, #30]

    for(bIndex = 0U; bIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bIndex++)
 800abc6:	2300      	movs	r3, #0
 800abc8:	73fb      	strb	r3, [r7, #15]
 800abca:	e00c      	b.n	800abe6 <phacDiscLoop_Sw_DetTechTypeB+0x46>
    {
        /* Device is not in HLTB state */
        pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bIndex].bSleep = 0U;
 800abcc:	7bfa      	ldrb	r2, [r7, #15]
 800abce:	6879      	ldr	r1, [r7, #4]
 800abd0:	4613      	mov	r3, r2
 800abd2:	009b      	lsls	r3, r3, #2
 800abd4:	4413      	add	r3, r2
 800abd6:	009b      	lsls	r3, r3, #2
 800abd8:	440b      	add	r3, r1
 800abda:	33dc      	adds	r3, #220	@ 0xdc
 800abdc:	2200      	movs	r2, #0
 800abde:	701a      	strb	r2, [r3, #0]
    for(bIndex = 0U; bIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bIndex++)
 800abe0:	7bfb      	ldrb	r3, [r7, #15]
 800abe2:	3301      	adds	r3, #1
 800abe4:	73fb      	strb	r3, [r7, #15]
 800abe6:	7bfb      	ldrb	r3, [r7, #15]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d0ef      	beq.n	800abcc <phacDiscLoop_Sw_DetTechTypeB+0x2c>
    }

    /* WakeupB with number of slot as 0 */
    wStatus = phpalI14443p3b_WakeUpB(
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f893 10c1 	ldrb.w	r1, [r3, #193]	@ 0xc1
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f893 40c2 	ldrb.w	r4, [r3, #194]	@ 0xc2
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	33cd      	adds	r3, #205	@ 0xcd
 800ac00:	687a      	ldr	r2, [r7, #4]
 800ac02:	32da      	adds	r2, #218	@ 0xda
 800ac04:	9201      	str	r2, [sp, #4]
 800ac06:	9300      	str	r3, [sp, #0]
 800ac08:	4623      	mov	r3, r4
 800ac0a:	460a      	mov	r2, r1
 800ac0c:	2100      	movs	r1, #0
 800ac0e:	f00a fa84 	bl	801511a <phpalI14443p3b_Sw_WakeUpB>
 800ac12:	4603      	mov	r3, r0
 800ac14:	81bb      	strh	r3, [r7, #12]
        pDataParams->sTypeBTargetInfo.bAfiReq,
        pDataParams->sTypeBTargetInfo.bExtendedAtqBbit,
        pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].aAtqB,
        &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].bAtqBLength);

    if(0u != (phacDiscLoop_Sw_Int_IsValidPollStatus(wStatus)))
 800ac16:	89bb      	ldrh	r3, [r7, #12]
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f7ff fa08 	bl	800a02e <phacDiscLoop_Sw_Int_IsValidPollStatus>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d015      	beq.n	800ac50 <phacDiscLoop_Sw_DetTechTypeB+0xb0>
    {
        if((wStatus & PH_ERR_MASK) != PH_ERR_SUCCESS)
 800ac24:	89bb      	ldrh	r3, [r7, #12]
 800ac26:	b2db      	uxtb	r3, r3
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d006      	beq.n	800ac3a <phacDiscLoop_Sw_DetTechTypeB+0x9a>
        {
            pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_B;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	7f9b      	ldrb	r3, [r3, #30]
 800ac30:	f043 0302 	orr.w	r3, r3, #2
 800ac34:	b2da      	uxtb	r2, r3
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	779a      	strb	r2, [r3, #30]
        }
        pDataParams->sTypeBTargetInfo.bTotalTagsFound++;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800ac40:	3301      	adds	r3, #1
 800ac42:	b2da      	uxtb	r2, r3
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
    else
    {
        return wStatus;
    }

    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 800ac4a:	f244 0387 	movw	r3, #16519	@ 0x4087
 800ac4e:	e000      	b.n	800ac52 <phacDiscLoop_Sw_DetTechTypeB+0xb2>
        return wStatus;
 800ac50:	89bb      	ldrh	r3, [r7, #12]
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3714      	adds	r7, #20
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd90      	pop	{r4, r7, pc}

0800ac5a <phacDiscLoop_Sw_Int_CollisionResolutionB>:

phStatus_t phacDiscLoop_Sw_Int_CollisionResolutionB(
                                                    phacDiscLoop_Sw_DataParams_t * pDataParams
                                                    )
{
 800ac5a:	b5b0      	push	{r4, r5, r7, lr}
 800ac5c:	b086      	sub	sp, #24
 800ac5e:	af02      	add	r7, sp, #8
 800ac60:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    phStatus_t PH_MEMLOC_REM   status = PH_ERR_SUCCESS;
 800ac62:	2300      	movs	r3, #0
 800ac64:	81fb      	strh	r3, [r7, #14]
    uint8_t    PH_MEMLOC_REM   bLastSlotReached;
    uint8_t    PH_MEMLOC_COUNT bNumOfSlots;
    uint8_t    PH_MEMLOC_COUNT bRetryCount;

    /* Collision_Pending = 1 and Device limit  = 0 */
    if((0U != ((pDataParams->bCollPend & PHAC_DISCLOOP_POS_BIT_MASK_B))) && ((pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_B] == 0x00U)))
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	7f9b      	ldrb	r3, [r3, #30]
 800ac6a:	f003 0302 	and.w	r3, r3, #2
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d00a      	beq.n	800ac88 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x2e>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	7adb      	ldrb	r3, [r3, #11]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d106      	bne.n	800ac88 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x2e>
    {
        pDataParams->sTypeBTargetInfo.bTotalTagsFound = 0;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800ac82:	f244 0385 	movw	r3, #16517	@ 0x4085
 800ac86:	e1e1      	b.n	800b04c <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
    }

    bRetryCount = 0;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	727b      	strb	r3, [r7, #9]
    /* Symbol 0 */
    bNumOfSlots = 0;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	72bb      	strb	r3, [r7, #10]

    /* Apply Guard time. */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	8a5b      	ldrh	r3, [r3, #18]
 800ac98:	461a      	mov	r2, r3
 800ac9a:	2135      	movs	r1, #53	@ 0x35
 800ac9c:	f003 fd7c 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 800aca0:	4603      	mov	r3, r0
 800aca2:	81fb      	strh	r3, [r7, #14]
 800aca4:	89fb      	ldrh	r3, [r7, #14]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d001      	beq.n	800acae <phacDiscLoop_Sw_Int_CollisionResolutionB+0x54>
 800acaa:	89fb      	ldrh	r3, [r7, #14]
 800acac:	e1ce      	b.n	800b04c <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_B]));

    /* Configure HW for the TypeB technology */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acb2:	2102      	movs	r1, #2
 800acb4:	4618      	mov	r0, r3
 800acb6:	f002 fff3 	bl	800dca0 <phhalHw_Pn5180_ApplyProtocolSettings>
 800acba:	4603      	mov	r3, r0
 800acbc:	81fb      	strh	r3, [r7, #14]
 800acbe:	89fb      	ldrh	r3, [r7, #14]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d001      	beq.n	800acc8 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x6e>
 800acc4:	89fb      	ldrh	r3, [r7, #14]
 800acc6:	e1c1      	b.n	800b04c <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
        pDataParams->pHalDataParams,
        PHHAL_HW_CARDTYPE_ISO14443B));

    /* WakeupB with number of slot as 0 */
    status = phpalI14443p3b_WakeUpB(
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f893 40c1 	ldrb.w	r4, [r3, #193]	@ 0xc1
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f893 50c2 	ldrb.w	r5, [r3, #194]	@ 0xc2
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	33cd      	adds	r3, #205	@ 0xcd
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	32da      	adds	r2, #218	@ 0xda
 800ace0:	7ab9      	ldrb	r1, [r7, #10]
 800ace2:	9201      	str	r2, [sp, #4]
 800ace4:	9300      	str	r3, [sp, #0]
 800ace6:	462b      	mov	r3, r5
 800ace8:	4622      	mov	r2, r4
 800acea:	f00a fa16 	bl	801511a <phpalI14443p3b_Sw_WakeUpB>
 800acee:	4603      	mov	r3, r0
 800acf0:	81fb      	strh	r3, [r7, #14]
        pDataParams->sTypeBTargetInfo.bAfiReq,
        pDataParams->sTypeBTargetInfo.bExtendedAtqBbit,
        pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].aAtqB,
        &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].bAtqBLength);

    if(PH_ERR_SUCCESS != (status & PH_ERR_MASK))
 800acf2:	89fb      	ldrh	r3, [r7, #14]
 800acf4:	b2db      	uxtb	r3, r3
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	f000 8195 	beq.w	800b026 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3cc>
    {
        /* As per EMVCo 3.1, wait for at least Tmin retransmission in case of timeout error. */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800ad02:	2b01      	cmp	r3, #1
 800ad04:	d148      	bne.n	800ad98 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x13e>
        {
            if ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800ad06:	89fb      	ldrh	r3, [r7, #14]
 800ad08:	b2db      	uxtb	r3, r3
 800ad0a:	2b03      	cmp	r3, #3
 800ad0c:	d130      	bne.n	800ad70 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x116>
            {
                pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_B;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	7f9b      	ldrb	r3, [r3, #30]
 800ad12:	f023 0302 	bic.w	r3, r3, #2
 800ad16:	b2da      	uxtb	r2, r3
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	779a      	strb	r2, [r3, #30]

                /* Report Error to Application and Application will perform PICC Reset */
                return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 800ad1c:	f244 0381 	movw	r3, #16513	@ 0x4081
 800ad20:	e194      	b.n	800b04c <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
            }

            while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
            {
                bRetryCount++;
 800ad22:	7a7b      	ldrb	r3, [r7, #9]
 800ad24:	3301      	adds	r3, #1
 800ad26:	727b      	strb	r3, [r7, #9]
                /* Wait for at least Tmin retransmission delay. */
                PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad2c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800ad30:	2100      	movs	r1, #0
 800ad32:	4618      	mov	r0, r3
 800ad34:	f003 fc76 	bl	800e624 <phhalHw_Pn5180_Wait>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	81fb      	strh	r3, [r7, #14]
 800ad3c:	89fb      	ldrh	r3, [r7, #14]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d001      	beq.n	800ad46 <phacDiscLoop_Sw_Int_CollisionResolutionB+0xec>
 800ad42:	89fb      	ldrh	r3, [r7, #14]
 800ad44:	e182      	b.n	800b04c <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
                    pDataParams->pHalDataParams,
                    PHHAL_HW_TIME_MICROSECONDS,
                    PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

                status = phpalI14443p3b_WakeUpB(pDataParams->pPal1443p3bDataParams,
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f893 40c1 	ldrb.w	r4, [r3, #193]	@ 0xc1
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f893 50c2 	ldrb.w	r5, [r3, #194]	@ 0xc2
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	33cd      	adds	r3, #205	@ 0xcd
 800ad5a:	687a      	ldr	r2, [r7, #4]
 800ad5c:	32da      	adds	r2, #218	@ 0xda
 800ad5e:	7ab9      	ldrb	r1, [r7, #10]
 800ad60:	9201      	str	r2, [sp, #4]
 800ad62:	9300      	str	r3, [sp, #0]
 800ad64:	462b      	mov	r3, r5
 800ad66:	4622      	mov	r2, r4
 800ad68:	f00a f9d7 	bl	801511a <phpalI14443p3b_Sw_WakeUpB>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	81fb      	strh	r3, [r7, #14]
            while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 800ad70:	89fb      	ldrh	r3, [r7, #14]
 800ad72:	b2db      	uxtb	r3, r3
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	d102      	bne.n	800ad7e <phacDiscLoop_Sw_Int_CollisionResolutionB+0x124>
 800ad78:	7a7b      	ldrb	r3, [r7, #9]
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	d9d1      	bls.n	800ad22 <phacDiscLoop_Sw_Int_CollisionResolutionB+0xc8>
                    pDataParams->sTypeBTargetInfo.bExtendedAtqBbit,
                    pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].aAtqB,
                    &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].bAtqBLength);
            }

            pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_B;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	7f9b      	ldrb	r3, [r3, #30]
 800ad82:	f023 0302 	bic.w	r3, r3, #2
 800ad86:	b2da      	uxtb	r2, r3
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	779a      	strb	r2, [r3, #30]
            /* Some error that can't be handled */
            PH_CHECK_SUCCESS(status);
 800ad8c:	89fb      	ldrh	r3, [r7, #14]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	f000 8149 	beq.w	800b026 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3cc>
 800ad94:	89fb      	ldrh	r3, [r7, #14]
 800ad96:	e159      	b.n	800b04c <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
        }
        else
        {
            /* Symbol 2 */
            /* No Response */
            if((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT)
 800ad98:	89fb      	ldrh	r3, [r7, #14]
 800ad9a:	b2db      	uxtb	r3, r3
 800ad9c:	2b01      	cmp	r3, #1
 800ad9e:	d101      	bne.n	800ada4 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x14a>
            {
                return status;
 800ada0:	89fb      	ldrh	r3, [r7, #14]
 800ada2:	e153      	b.n	800b04c <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
            }
            else
            { /* Symbol 3 */
                if (pDataParams->baPasConDevLim[1] == 0x00U)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	7adb      	ldrb	r3, [r3, #11]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	f040 813c 	bne.w	800b026 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3cc>
                {
                    pDataParams->sTypeBTargetInfo.bTotalTagsFound = 0;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2200      	movs	r2, #0
 800adb2:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
                    /* Symbol 4 */
                    pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_B;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	7f9b      	ldrb	r3, [r3, #30]
 800adba:	f043 0302 	orr.w	r3, r3, #2
 800adbe:	b2da      	uxtb	r2, r3
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	779a      	strb	r2, [r3, #30]
                    return status;
 800adc4:	89fb      	ldrh	r3, [r7, #14]
 800adc6:	e141      	b.n	800b04c <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
    }

    while(bNumOfSlots <= PHAC_DISCLOOP_TYPEB_MAX_SLOT_NUM)
    {
        /* Symbol 5 */
        bCurrentSlotNum = 0;
 800adc8:	2300      	movs	r3, #0
 800adca:	737b      	strb	r3, [r7, #13]
        bCurrentDeviceCount = 0;
 800adcc:	2300      	movs	r3, #0
 800adce:	733b      	strb	r3, [r7, #12]
        bLastSlotReached = 0;
 800add0:	2300      	movs	r3, #0
 800add2:	72fb      	strb	r3, [r7, #11]
        pDataParams->sTypeBTargetInfo.bTotalTagsFound = 0;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2200      	movs	r2, #0
 800add8:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
        pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_B;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	7f9b      	ldrb	r3, [r3, #30]
 800ade0:	f023 0302 	bic.w	r3, r3, #2
 800ade4:	b2da      	uxtb	r2, r3
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	779a      	strb	r2, [r3, #30]

        while(0U == bLastSlotReached)
 800adea:	e118      	b.n	800b01e <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3c4>
        {
            /* Symbol 6: Slot is Empty */
            if((status & PH_ERR_MASK) != PH_ERR_IO_TIMEOUT)
 800adec:	89fb      	ldrh	r3, [r7, #14]
 800adee:	b2db      	uxtb	r3, r3
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	d060      	beq.n	800aeb6 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x25c>
            {
                /* Symbol 7: Validate SENSB_RES */
                if (status == PH_ERR_SUCCESS)
 800adf4:	89fb      	ldrh	r3, [r7, #14]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d156      	bne.n	800aea8 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x24e>
                {
                    /* Symbol 9 */
                    if(bCurrentDeviceCount > 0U)
 800adfa:	7b3b      	ldrb	r3, [r7, #12]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d01f      	beq.n	800ae40 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x1e6>
                    {
                        /* Symbol 10 */
                        status = phpalI14443p3b_SetSerialNo(
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800ae0a:	1e5a      	subs	r2, r3, #1
 800ae0c:	4613      	mov	r3, r2
 800ae0e:	009b      	lsls	r3, r3, #2
 800ae10:	4413      	add	r3, r2
 800ae12:	009b      	lsls	r3, r3, #2
 800ae14:	33c8      	adds	r3, #200	@ 0xc8
 800ae16:	687a      	ldr	r2, [r7, #4]
 800ae18:	4413      	add	r3, r2
 800ae1a:	3301      	adds	r3, #1
 800ae1c:	4619      	mov	r1, r3
 800ae1e:	f00a fed7 	bl	8015bd0 <phpalI14443p3b_Sw_SetSerialNo>
 800ae22:	4603      	mov	r3, r0
 800ae24:	81fb      	strh	r3, [r7, #14]
                                    pDataParams->pPal1443p3bDataParams,
                                    pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound - (uint8_t)1U].aPupi
                                    );

                        PH_CHECK_ABORT_FCT(status, phpalI14443p3b_HaltB(pDataParams->pPal1443p3bDataParams));
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f00a f9d4 	bl	80151d8 <phpalI14443p3b_Sw_HaltB>
 800ae30:	4603      	mov	r3, r0
 800ae32:	81fb      	strh	r3, [r7, #14]
 800ae34:	89fb      	ldrh	r3, [r7, #14]
 800ae36:	b2db      	uxtb	r3, r3
 800ae38:	2b12      	cmp	r3, #18
 800ae3a:	d101      	bne.n	800ae40 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x1e6>
 800ae3c:	89fb      	ldrh	r3, [r7, #14]
 800ae3e:	e105      	b.n	800b04c <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
                    }

                    /* Symbol 12 */
                    (void)memcpy(pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].aPupi,
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800ae46:	461a      	mov	r2, r3
 800ae48:	4613      	mov	r3, r2
 800ae4a:	009b      	lsls	r3, r3, #2
 800ae4c:	4413      	add	r3, r2
 800ae4e:	009b      	lsls	r3, r3, #2
 800ae50:	33c8      	adds	r3, #200	@ 0xc8
 800ae52:	687a      	ldr	r2, [r7, #4]
 800ae54:	4413      	add	r3, r2
 800ae56:	1c5a      	adds	r2, r3, #1
                        &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].aAtqB[1],
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800ae5e:	4619      	mov	r1, r3
 800ae60:	460b      	mov	r3, r1
 800ae62:	009b      	lsls	r3, r3, #2
 800ae64:	440b      	add	r3, r1
 800ae66:	009b      	lsls	r3, r3, #2
 800ae68:	33c9      	adds	r3, #201	@ 0xc9
 800ae6a:	6879      	ldr	r1, [r7, #4]
 800ae6c:	440b      	add	r3, r1
 800ae6e:	3305      	adds	r3, #5
                    (void)memcpy(pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].aPupi,
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	6013      	str	r3, [r2, #0]
                        PHAC_DISCLOOP_I3P3B_PUPI_LENGTH);

                    /* Symbol 11 */
                    pDataParams->sTypeBTargetInfo.bTotalTagsFound++;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800ae7a:	3301      	adds	r3, #1
 800ae7c:	b2da      	uxtb	r2, r3
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
                    bCurrentDeviceCount++;
 800ae84:	7b3b      	ldrb	r3, [r7, #12]
 800ae86:	3301      	adds	r3, #1
 800ae88:	733b      	strb	r3, [r7, #12]

                    /* Symbol 13 */
                    if (pDataParams->sTypeBTargetInfo.bTotalTagsFound >= pDataParams->baPasConDevLim[1])
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f893 20c0 	ldrb.w	r2, [r3, #192]	@ 0xc0
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	7adb      	ldrb	r3, [r3, #11]
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d30e      	bcc.n	800aeb6 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x25c>
                    {
                        pDataParams->bNumOfCards = pDataParams->sTypeBTargetInfo.bTotalTagsFound;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f893 20c0 	ldrb.w	r2, [r3, #192]	@ 0xc0
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

                        return PH_ERR_SUCCESS;
 800aea4:	2300      	movs	r3, #0
 800aea6:	e0d1      	b.n	800b04c <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
                    }
                }
                else
                {
                    /* Symbol 8 CollisionPend: 1*/
                    pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_B;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	7f9b      	ldrb	r3, [r3, #30]
 800aeac:	f043 0302 	orr.w	r3, r3, #2
 800aeb0:	b2da      	uxtb	r2, r3
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	779a      	strb	r2, [r3, #30]
                }
            }

            /* Symbol 14 */
            bCurrentSlotNum++;
 800aeb6:	7b7b      	ldrb	r3, [r7, #13]
 800aeb8:	3301      	adds	r3, #1
 800aeba:	737b      	strb	r3, [r7, #13]

            /* Symbol 15 */
            if(bCurrentSlotNum < ((uint8_t)1U  << bNumOfSlots))
 800aebc:	7b7a      	ldrb	r2, [r7, #13]
 800aebe:	7abb      	ldrb	r3, [r7, #10]
 800aec0:	2101      	movs	r1, #1
 800aec2:	fa01 f303 	lsl.w	r3, r1, r3
 800aec6:	429a      	cmp	r2, r3
 800aec8:	da28      	bge.n	800af1c <phacDiscLoop_Sw_Int_CollisionResolutionB+0x2c2>
            {
                /* Symbol 25 */
                PH_CHECK_ABORT_FCT(status, phpalI14443p3b_SlotMarker(
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800aece:	7b7b      	ldrb	r3, [r7, #13]
 800aed0:	3301      	adds	r3, #1
 800aed2:	b2d9      	uxtb	r1, r3
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800aeda:	461a      	mov	r2, r3
 800aedc:	4613      	mov	r3, r2
 800aede:	009b      	lsls	r3, r3, #2
 800aee0:	4413      	add	r3, r2
 800aee2:	009b      	lsls	r3, r3, #2
 800aee4:	33c8      	adds	r3, #200	@ 0xc8
 800aee6:	687a      	ldr	r2, [r7, #4]
 800aee8:	4413      	add	r3, r2
 800aeea:	1d5c      	adds	r4, r3, #5
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800aef2:	461a      	mov	r2, r3
 800aef4:	4613      	mov	r3, r2
 800aef6:	009b      	lsls	r3, r3, #2
 800aef8:	4413      	add	r3, r2
 800aefa:	009b      	lsls	r3, r3, #2
 800aefc:	33d8      	adds	r3, #216	@ 0xd8
 800aefe:	687a      	ldr	r2, [r7, #4]
 800af00:	4413      	add	r3, r2
 800af02:	3302      	adds	r3, #2
 800af04:	4622      	mov	r2, r4
 800af06:	f00a f927 	bl	8015158 <phpalI14443p3b_Sw_SlotMarker>
 800af0a:	4603      	mov	r3, r0
 800af0c:	81fb      	strh	r3, [r7, #14]
 800af0e:	89fb      	ldrh	r3, [r7, #14]
 800af10:	b2db      	uxtb	r3, r3
 800af12:	2b12      	cmp	r3, #18
 800af14:	f040 8083 	bne.w	800b01e <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3c4>
 800af18:	89fb      	ldrh	r3, [r7, #14]
 800af1a:	e097      	b.n	800b04c <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
                    pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].aAtqB,
                    &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].bAtqBLength));
            }
            else
            {
                bLastSlotReached = 1;
 800af1c:	2301      	movs	r3, #1
 800af1e:	72fb      	strb	r3, [r7, #11]
                /* Symbol 16 */
                if (0U != (pDataParams->bCollPend & PHAC_DISCLOOP_POS_BIT_MASK_B))
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	7f9b      	ldrb	r3, [r3, #30]
 800af24:	f003 0302 	and.w	r3, r3, #2
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d068      	beq.n	800affe <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3a4>
                {
                    /* Symbol 17 */
                    if (pDataParams->sTypeBTargetInfo.bTotalTagsFound > 0U)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800af32:	2b00      	cmp	r3, #0
 800af34:	d00e      	beq.n	800af54 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x2fa>
                    {
                        /* Symbol 20 */
                        if (pDataParams->sTypeBTargetInfo.bTotalTagsFound >= pDataParams->baPasConDevLim[1])
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f893 20c0 	ldrb.w	r2, [r3, #192]	@ 0xc0
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	7adb      	ldrb	r3, [r3, #11]
 800af40:	429a      	cmp	r2, r3
 800af42:	d31d      	bcc.n	800af80 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x326>
                        {
                            pDataParams->bNumOfCards = pDataParams->sTypeBTargetInfo.bTotalTagsFound;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f893 20c0 	ldrb.w	r2, [r3, #192]	@ 0xc0
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

                            return PH_ERR_SUCCESS;
 800af50:	2300      	movs	r3, #0
 800af52:	e07b      	b.n	800b04c <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
                        }
                    }
                    else
                    {
                        /* Symbol 18 */
                        if (bNumOfSlots == PHAC_DISCLOOP_TYPEB_MAX_SLOT_NUM)
 800af54:	7abb      	ldrb	r3, [r7, #10]
 800af56:	2b04      	cmp	r3, #4
 800af58:	d10f      	bne.n	800af7a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x320>
                        {
                            pDataParams->bNumOfCards = pDataParams->sTypeBTargetInfo.bTotalTagsFound;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	f893 20c0 	ldrb.w	r2, [r3, #192]	@ 0xc0
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

                            if(pDataParams->sTypeBTargetInfo.bTotalTagsFound == 0U)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d102      	bne.n	800af76 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x31c>
                            {
                                return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800af70:	f244 0385 	movw	r3, #16517	@ 0x4085
 800af74:	e06a      	b.n	800b04c <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
                            }

                            return PH_ERR_SUCCESS;
 800af76:	2300      	movs	r3, #0
 800af78:	e068      	b.n	800b04c <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
                        }

                        /* Symbol 19 */
                        bNumOfSlots++;
 800af7a:	7abb      	ldrb	r3, [r7, #10]
 800af7c:	3301      	adds	r3, #1
 800af7e:	72bb      	strb	r3, [r7, #10]
                    }

                    /* Symbol 21 */
                    if(bCurrentDeviceCount > 0U)
 800af80:	7b3b      	ldrb	r3, [r7, #12]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d00c      	beq.n	800afa0 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x346>
                    {
                        /* Symbol 22 */
                        PH_CHECK_ABORT_FCT(status, phpalI14443p3b_HaltB(pDataParams->pPal1443p3bDataParams));
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af8a:	4618      	mov	r0, r3
 800af8c:	f00a f924 	bl	80151d8 <phpalI14443p3b_Sw_HaltB>
 800af90:	4603      	mov	r3, r0
 800af92:	81fb      	strh	r3, [r7, #14]
 800af94:	89fb      	ldrh	r3, [r7, #14]
 800af96:	b2db      	uxtb	r3, r3
 800af98:	2b12      	cmp	r3, #18
 800af9a:	d101      	bne.n	800afa0 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x346>
 800af9c:	89fb      	ldrh	r3, [r7, #14]
 800af9e:	e055      	b.n	800b04c <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
                    }

                    /* Symbol 23 */
                    PH_CHECK_ABORT_FCT(status, phpalI14443p3b_RequestB(
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f893 40c1 	ldrb.w	r4, [r3, #193]	@ 0xc1
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f893 50c2 	ldrb.w	r5, [r3, #194]	@ 0xc2
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800afb6:	461a      	mov	r2, r3
 800afb8:	4613      	mov	r3, r2
 800afba:	009b      	lsls	r3, r3, #2
 800afbc:	4413      	add	r3, r2
 800afbe:	009b      	lsls	r3, r3, #2
 800afc0:	33c8      	adds	r3, #200	@ 0xc8
 800afc2:	687a      	ldr	r2, [r7, #4]
 800afc4:	4413      	add	r3, r2
 800afc6:	1d5a      	adds	r2, r3, #5
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800afce:	4619      	mov	r1, r3
 800afd0:	460b      	mov	r3, r1
 800afd2:	009b      	lsls	r3, r3, #2
 800afd4:	440b      	add	r3, r1
 800afd6:	009b      	lsls	r3, r3, #2
 800afd8:	33d8      	adds	r3, #216	@ 0xd8
 800afda:	6879      	ldr	r1, [r7, #4]
 800afdc:	440b      	add	r3, r1
 800afde:	3302      	adds	r3, #2
 800afe0:	7ab9      	ldrb	r1, [r7, #10]
 800afe2:	9301      	str	r3, [sp, #4]
 800afe4:	9200      	str	r2, [sp, #0]
 800afe6:	462b      	mov	r3, r5
 800afe8:	4622      	mov	r2, r4
 800afea:	f00a f877 	bl	80150dc <phpalI14443p3b_Sw_RequestB>
 800afee:	4603      	mov	r3, r0
 800aff0:	81fb      	strh	r3, [r7, #14]
 800aff2:	89fb      	ldrh	r3, [r7, #14]
 800aff4:	b2db      	uxtb	r3, r3
 800aff6:	2b12      	cmp	r3, #18
 800aff8:	d111      	bne.n	800b01e <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3c4>
 800affa:	89fb      	ldrh	r3, [r7, #14]
 800affc:	e026      	b.n	800b04c <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
                        pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].aAtqB,
                        &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].bAtqBLength));
                }
                else
                {
                    pDataParams->bNumOfCards = pDataParams->sTypeBTargetInfo.bTotalTagsFound;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f893 20c0 	ldrb.w	r2, [r3, #192]	@ 0xc0
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

                    if(pDataParams->sTypeBTargetInfo.bTotalTagsFound == 0U)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800b010:	2b00      	cmp	r3, #0
 800b012:	d102      	bne.n	800b01a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3c0>
                    {
                        return (PHAC_DISCLOOP_NO_DEVICE_RESOLVED | PH_COMP_AC_DISCLOOP);
 800b014:	f244 0385 	movw	r3, #16517	@ 0x4085
 800b018:	e018      	b.n	800b04c <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
                    }
                    return PH_ERR_SUCCESS;
 800b01a:	2300      	movs	r3, #0
 800b01c:	e016      	b.n	800b04c <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
        while(0U == bLastSlotReached)
 800b01e:	7afb      	ldrb	r3, [r7, #11]
 800b020:	2b00      	cmp	r3, #0
 800b022:	f43f aee3 	beq.w	800adec <phacDiscLoop_Sw_Int_CollisionResolutionB+0x192>
    while(bNumOfSlots <= PHAC_DISCLOOP_TYPEB_MAX_SLOT_NUM)
 800b026:	7abb      	ldrb	r3, [r7, #10]
 800b028:	2b04      	cmp	r3, #4
 800b02a:	f67f aecd 	bls.w	800adc8 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x16e>
                }
            }
        } /* while(!bLastSlotReached) */
    }

    pDataParams->bNumOfCards = pDataParams->sTypeBTargetInfo.bTotalTagsFound;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f893 20c0 	ldrb.w	r2, [r3, #192]	@ 0xc0
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    if(pDataParams->sTypeBTargetInfo.bTotalTagsFound == 0U)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800b040:	2b00      	cmp	r3, #0
 800b042:	d102      	bne.n	800b04a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f0>
    {
        return (PHAC_DISCLOOP_NO_DEVICE_RESOLVED | PH_COMP_AC_DISCLOOP);
 800b044:	f244 0385 	movw	r3, #16517	@ 0x4085
 800b048:	e000      	b.n	800b04c <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
    }

    return PH_ERR_SUCCESS;
 800b04a:	2300      	movs	r3, #0
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3710      	adds	r7, #16
 800b050:	46bd      	mov	sp, r7
 800b052:	bdb0      	pop	{r4, r5, r7, pc}

0800b054 <phacDiscLoop_Sw_Int_ActivateB>:

phStatus_t phacDiscLoop_Sw_Int_ActivateB(
                                         phacDiscLoop_Sw_DataParams_t * pDataParams,
                                         uint8_t bTypeBTagIdx
                                         )
{
 800b054:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b056:	b08f      	sub	sp, #60	@ 0x3c
 800b058:	af04      	add	r7, sp, #16
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	460b      	mov	r3, r1
 800b05e:	70fb      	strb	r3, [r7, #3]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    phStatus_t PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 800b060:	2300      	movs	r3, #0
 800b062:	847b      	strh	r3, [r7, #34]	@ 0x22
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_I3P4B_TAGS */

    /* Only deviation form Device Activation Activity is
     * Device sleep state is not been check and always send WakeUpB Command
     */
    if (bTypeBTagIdx >= pDataParams->sTypeBTargetInfo.bTotalTagsFound)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800b06a:	78fa      	ldrb	r2, [r7, #3]
 800b06c:	429a      	cmp	r2, r3
 800b06e:	d302      	bcc.n	800b076 <phacDiscLoop_Sw_Int_ActivateB+0x22>
    {
        /* Out of range or no such card found yet */
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800b070:	f244 0321 	movw	r3, #16417	@ 0x4021
 800b074:	e1ba      	b.n	800b3ec <phacDiscLoop_Sw_Int_ActivateB+0x398>
    }

    /* Send WUPB for tags in sleep state (except the last detected tag all are
     * in sleep state) */
    if ( (bTypeBTagIdx < (pDataParams->sTypeBTargetInfo.bTotalTagsFound - (uint8_t)1U) ) ||
 800b076:	78fa      	ldrb	r2, [r7, #3]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800b07e:	3b01      	subs	r3, #1
 800b080:	429a      	cmp	r2, r3
 800b082:	db0a      	blt.n	800b09a <phacDiscLoop_Sw_Int_ActivateB+0x46>
                (pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].bSleep == 1U)
 800b084:	78fa      	ldrb	r2, [r7, #3]
 800b086:	6879      	ldr	r1, [r7, #4]
 800b088:	4613      	mov	r3, r2
 800b08a:	009b      	lsls	r3, r3, #2
 800b08c:	4413      	add	r3, r2
 800b08e:	009b      	lsls	r3, r3, #2
 800b090:	440b      	add	r3, r1
 800b092:	33dc      	adds	r3, #220	@ 0xdc
 800b094:	781b      	ldrb	r3, [r3, #0]
    if ( (bTypeBTagIdx < (pDataParams->sTypeBTargetInfo.bTotalTagsFound - (uint8_t)1U) ) ||
 800b096:	2b01      	cmp	r3, #1
 800b098:	d119      	bne.n	800b0ce <phacDiscLoop_Sw_Int_ActivateB+0x7a>
                )
    {
        PH_CHECK_ABORT_FCT(status, phpalI14443p3b_WakeUpB(
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f893 20c1 	ldrb.w	r2, [r3, #193]	@ 0xc1
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f893 10c2 	ldrb.w	r1, [r3, #194]	@ 0xc2
 800b0aa:	f107 0320 	add.w	r3, r7, #32
 800b0ae:	9301      	str	r3, [sp, #4]
 800b0b0:	f107 0310 	add.w	r3, r7, #16
 800b0b4:	9300      	str	r3, [sp, #0]
 800b0b6:	460b      	mov	r3, r1
 800b0b8:	2100      	movs	r1, #0
 800b0ba:	f00a f82e 	bl	801511a <phpalI14443p3b_Sw_WakeUpB>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b0c2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b0c4:	b2db      	uxtb	r3, r3
 800b0c6:	2b12      	cmp	r3, #18
 800b0c8:	d101      	bne.n	800b0ce <phacDiscLoop_Sw_Int_ActivateB+0x7a>
 800b0ca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b0cc:	e18e      	b.n	800b3ec <phacDiscLoop_Sw_Int_ActivateB+0x398>

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_I3P4B_TAGS
    /* AttriB: activate PICC */

    /* Enable Emd check */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_ON));
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	215e      	movs	r1, #94	@ 0x5e
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f003 fb5e 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b0e0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d001      	beq.n	800b0ea <phacDiscLoop_Sw_Int_ActivateB+0x96>
 800b0e6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b0e8:	e180      	b.n	800b3ec <phacDiscLoop_Sw_Int_ActivateB+0x398>

    pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].bSupportType4B = PH_OFF;
 800b0ea:	78fa      	ldrb	r2, [r7, #3]
 800b0ec:	6879      	ldr	r1, [r7, #4]
 800b0ee:	4613      	mov	r3, r2
 800b0f0:	009b      	lsls	r3, r3, #2
 800b0f2:	4413      	add	r3, r2
 800b0f4:	009b      	lsls	r3, r3, #2
 800b0f6:	440b      	add	r3, r1
 800b0f8:	33db      	adds	r3, #219	@ 0xdb
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	701a      	strb	r2, [r3, #0]
    if (0u != ((pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].aAtqB[PHAC_DISCLOOP_TYPEB_PROTOCOL_TYPE_OFFSET] & PHAC_DISCLOOP_TYPEB_MASK_PROTOCOL_TYPE)))
 800b0fe:	78fa      	ldrb	r2, [r7, #3]
 800b100:	6879      	ldr	r1, [r7, #4]
 800b102:	4613      	mov	r3, r2
 800b104:	009b      	lsls	r3, r3, #2
 800b106:	4413      	add	r3, r2
 800b108:	009b      	lsls	r3, r3, #2
 800b10a:	440b      	add	r3, r1
 800b10c:	33d7      	adds	r3, #215	@ 0xd7
 800b10e:	781b      	ldrb	r3, [r3, #0]
 800b110:	f003 0301 	and.w	r3, r3, #1
 800b114:	2b00      	cmp	r3, #0
 800b116:	d009      	beq.n	800b12c <phacDiscLoop_Sw_Int_ActivateB+0xd8>
    {
        pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].bSupportType4B = PH_ON;
 800b118:	78fa      	ldrb	r2, [r7, #3]
 800b11a:	6879      	ldr	r1, [r7, #4]
 800b11c:	4613      	mov	r3, r2
 800b11e:	009b      	lsls	r3, r3, #2
 800b120:	4413      	add	r3, r2
 800b122:	009b      	lsls	r3, r3, #2
 800b124:	440b      	add	r3, r1
 800b126:	33db      	adds	r3, #219	@ 0xdb
 800b128:	2201      	movs	r2, #1
 800b12a:	701a      	strb	r2, [r3, #0]
    }

    if (((pDataParams->bOpeMode == RD_LIB_MODE_ISO) || (pDataParams->bOpeMode == RD_LIB_MODE_NFC)) &&
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800b132:	2b03      	cmp	r3, #3
 800b134:	d004      	beq.n	800b140 <phacDiscLoop_Sw_Int_ActivateB+0xec>
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800b13c:	2b02      	cmp	r3, #2
 800b13e:	d10c      	bne.n	800b15a <phacDiscLoop_Sw_Int_ActivateB+0x106>
        (pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].bSupportType4B == PH_OFF))
 800b140:	78fa      	ldrb	r2, [r7, #3]
 800b142:	6879      	ldr	r1, [r7, #4]
 800b144:	4613      	mov	r3, r2
 800b146:	009b      	lsls	r3, r3, #2
 800b148:	4413      	add	r3, r2
 800b14a:	009b      	lsls	r3, r3, #2
 800b14c:	440b      	add	r3, r1
 800b14e:	33db      	adds	r3, #219	@ 0xdb
 800b150:	781b      	ldrb	r3, [r3, #0]
    if (((pDataParams->bOpeMode == RD_LIB_MODE_ISO) || (pDataParams->bOpeMode == RD_LIB_MODE_NFC)) &&
 800b152:	2b00      	cmp	r3, #0
 800b154:	d101      	bne.n	800b15a <phacDiscLoop_Sw_Int_ActivateB+0x106>
    {
        return PH_ERR_SUCCESS;
 800b156:	2300      	movs	r3, #0
 800b158:	e148      	b.n	800b3ec <phacDiscLoop_Sw_Int_ActivateB+0x398>
    }

    bBitRateCapability = pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].aAtqB[9U];
 800b15a:	78fa      	ldrb	r2, [r7, #3]
 800b15c:	6879      	ldr	r1, [r7, #4]
 800b15e:	4613      	mov	r3, r2
 800b160:	009b      	lsls	r3, r3, #2
 800b162:	4413      	add	r3, r2
 800b164:	009b      	lsls	r3, r3, #2
 800b166:	440b      	add	r3, r1
 800b168:	33d6      	adds	r3, #214	@ 0xd6
 800b16a:	781b      	ldrb	r3, [r3, #0]
 800b16c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    bDsi = pDataParams->sTypeBTargetInfo.bDsi;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 800b176:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    bDri = pDataParams->sTypeBTargetInfo.bDri;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f893 30c7 	ldrb.w	r3, [r3, #199]	@ 0xc7
 800b180:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    /* Check user parameter change request versus Card bit rate capabilities and update DR and DS if required. */
    if (((bDsi != PHPAL_I14443P3B_DATARATE_106) || (bDri != PHPAL_I14443P3B_DATARATE_106)) &&
 800b184:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d104      	bne.n	800b196 <phacDiscLoop_Sw_Int_ActivateB+0x142>
 800b18c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b190:	2b00      	cmp	r3, #0
 800b192:	f000 8081 	beq.w	800b298 <phacDiscLoop_Sw_Int_ActivateB+0x244>
        ((bBitRateCapability & 0x08U) == 0x00))
 800b196:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b19a:	f003 0308 	and.w	r3, r3, #8
    if (((bDsi != PHPAL_I14443P3B_DATARATE_106) || (bDri != PHPAL_I14443P3B_DATARATE_106)) &&
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d17a      	bne.n	800b298 <phacDiscLoop_Sw_Int_ActivateB+0x244>
    {
        if (bBitRateCapability & 0x40U)
 800b1a2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b1a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d003      	beq.n	800b1b6 <phacDiscLoop_Sw_Int_ActivateB+0x162>
        {
            bAtqb_Dsi = PHPAL_I14443P3B_DATARATE_848;
 800b1ae:	2303      	movs	r3, #3
 800b1b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b1b4:	e016      	b.n	800b1e4 <phacDiscLoop_Sw_Int_ActivateB+0x190>
        }
        else if (bBitRateCapability & 0x20U)
 800b1b6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b1ba:	f003 0320 	and.w	r3, r3, #32
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d003      	beq.n	800b1ca <phacDiscLoop_Sw_Int_ActivateB+0x176>
        {
            bAtqb_Dsi = PHPAL_I14443P3B_DATARATE_424;
 800b1c2:	2302      	movs	r3, #2
 800b1c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b1c8:	e00c      	b.n	800b1e4 <phacDiscLoop_Sw_Int_ActivateB+0x190>
        }
        else if (bBitRateCapability & 0x10U)
 800b1ca:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b1ce:	f003 0310 	and.w	r3, r3, #16
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d003      	beq.n	800b1de <phacDiscLoop_Sw_Int_ActivateB+0x18a>
        {
            bAtqb_Dsi = PHPAL_I14443P3B_DATARATE_212;
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b1dc:	e002      	b.n	800b1e4 <phacDiscLoop_Sw_Int_ActivateB+0x190>
        }
        else
        {
            bAtqb_Dsi = PHPAL_I14443P3B_DATARATE_106;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }

        if (bBitRateCapability & 0x04U)
 800b1e4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b1e8:	f003 0304 	and.w	r3, r3, #4
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d003      	beq.n	800b1f8 <phacDiscLoop_Sw_Int_ActivateB+0x1a4>
        {
            bAtqb_Dri = PHPAL_I14443P3B_DATARATE_848;
 800b1f0:	2303      	movs	r3, #3
 800b1f2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b1f6:	e016      	b.n	800b226 <phacDiscLoop_Sw_Int_ActivateB+0x1d2>
        }
        else if (bBitRateCapability & 0x02U)
 800b1f8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b1fc:	f003 0302 	and.w	r3, r3, #2
 800b200:	2b00      	cmp	r3, #0
 800b202:	d003      	beq.n	800b20c <phacDiscLoop_Sw_Int_ActivateB+0x1b8>
        {
            bAtqb_Dri = PHPAL_I14443P3B_DATARATE_424;
 800b204:	2302      	movs	r3, #2
 800b206:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b20a:	e00c      	b.n	800b226 <phacDiscLoop_Sw_Int_ActivateB+0x1d2>
        }
        else if (bBitRateCapability & 0x01U)
 800b20c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b210:	f003 0301 	and.w	r3, r3, #1
 800b214:	2b00      	cmp	r3, #0
 800b216:	d003      	beq.n	800b220 <phacDiscLoop_Sw_Int_ActivateB+0x1cc>
        {
            bAtqb_Dri = PHPAL_I14443P3B_DATARATE_212;
 800b218:	2301      	movs	r3, #1
 800b21a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b21e:	e002      	b.n	800b226 <phacDiscLoop_Sw_Int_ActivateB+0x1d2>
        }
        else
        {
            bAtqb_Dri = PHPAL_I14443P3B_DATARATE_106;
 800b220:	2300      	movs	r3, #0
 800b222:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        if ((bDsi != bAtqb_Dsi) && (bDsi > bAtqb_Dsi))
 800b226:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800b22a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b22e:	429a      	cmp	r2, r3
 800b230:	d009      	beq.n	800b246 <phacDiscLoop_Sw_Int_ActivateB+0x1f2>
 800b232:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800b236:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d903      	bls.n	800b246 <phacDiscLoop_Sw_Int_ActivateB+0x1f2>
        {
            bDsi = bAtqb_Dsi;
 800b23e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b242:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        }

        if ((bDri != bAtqb_Dri) && (bDri > bAtqb_Dri))
 800b246:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800b24a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b24e:	429a      	cmp	r2, r3
 800b250:	d009      	beq.n	800b266 <phacDiscLoop_Sw_Int_ActivateB+0x212>
 800b252:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800b256:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b25a:	429a      	cmp	r2, r3
 800b25c:	d903      	bls.n	800b266 <phacDiscLoop_Sw_Int_ActivateB+0x212>
        {
            bDri = bAtqb_Dri;
 800b25e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b262:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        }

        if (bBitRateCapability & 0x80U)
 800b266:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	da14      	bge.n	800b298 <phacDiscLoop_Sw_Int_ActivateB+0x244>
        {
            /* Only same bit rate allowed in both directions. */
            if (bDsi != bDri)
 800b26e:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800b272:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b276:	429a      	cmp	r2, r3
 800b278:	d00e      	beq.n	800b298 <phacDiscLoop_Sw_Int_ActivateB+0x244>
            {
                (bDsi < bDri) ? (bDri = bDsi) : (bDsi = bDri);
 800b27a:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800b27e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b282:	429a      	cmp	r2, r3
 800b284:	d204      	bcs.n	800b290 <phacDiscLoop_Sw_Int_ActivateB+0x23c>
 800b286:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b28a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 800b28e:	e003      	b.n	800b298 <phacDiscLoop_Sw_Int_ActivateB+0x244>
 800b290:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b294:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            }
        }
    }

    PH_CHECK_SUCCESS_FCT(status, phpalI14443p3b_Attrib(
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800b29c:	78fa      	ldrb	r2, [r7, #3]
 800b29e:	4613      	mov	r3, r2
 800b2a0:	009b      	lsls	r3, r3, #2
 800b2a2:	4413      	add	r3, r2
 800b2a4:	009b      	lsls	r3, r3, #2
 800b2a6:	33c8      	adds	r3, #200	@ 0xc8
 800b2a8:	687a      	ldr	r2, [r7, #4]
 800b2aa:	4413      	add	r3, r2
 800b2ac:	1d5c      	adds	r4, r3, #5
 800b2ae:	78fa      	ldrb	r2, [r7, #3]
 800b2b0:	6879      	ldr	r1, [r7, #4]
 800b2b2:	4613      	mov	r3, r2
 800b2b4:	009b      	lsls	r3, r3, #2
 800b2b6:	4413      	add	r3, r2
 800b2b8:	009b      	lsls	r3, r3, #2
 800b2ba:	440b      	add	r3, r1
 800b2bc:	33da      	adds	r3, #218	@ 0xda
 800b2be:	7819      	ldrb	r1, [r3, #0]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f893 50c4 	ldrb.w	r5, [r3, #196]	@ 0xc4
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f893 30c5 	ldrb.w	r3, [r3, #197]	@ 0xc5
 800b2cc:	687a      	ldr	r2, [r7, #4]
 800b2ce:	32dd      	adds	r2, #221	@ 0xdd
 800b2d0:	9203      	str	r2, [sp, #12]
 800b2d2:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800b2d6:	9202      	str	r2, [sp, #8]
 800b2d8:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800b2dc:	9201      	str	r2, [sp, #4]
 800b2de:	9300      	str	r3, [sp, #0]
 800b2e0:	462b      	mov	r3, r5
 800b2e2:	460a      	mov	r2, r1
 800b2e4:	4621      	mov	r1, r4
 800b2e6:	f009 ffbf 	bl	8015268 <phpalI14443p3b_Sw_Attrib>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b2ee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d001      	beq.n	800b2f8 <phacDiscLoop_Sw_Int_ActivateB+0x2a4>
 800b2f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b2f6:	e079      	b.n	800b3ec <phacDiscLoop_Sw_Int_ActivateB+0x398>
        pDataParams->sTypeBTargetInfo.bCid,
        bDri,
        bDsi,
        &pDataParams->sTypeBTargetInfo.sTypeB_I3P4.bMbli));

    if (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800b2fe:	2b01      	cmp	r3, #1
 800b300:	d027      	beq.n	800b352 <phacDiscLoop_Sw_Int_ActivateB+0x2fe>
    {
        /* Update Dri and Dsi parameters with currently applied values. */
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p3b_GetConfig(
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b306:	f107 0208 	add.w	r2, r7, #8
 800b30a:	2104      	movs	r1, #4
 800b30c:	4618      	mov	r0, r3
 800b30e:	f009 fea7 	bl	8015060 <phpalI14443p3b_Sw_GetConfig>
 800b312:	4603      	mov	r3, r0
 800b314:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b316:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d001      	beq.n	800b320 <phacDiscLoop_Sw_Int_ActivateB+0x2cc>
 800b31c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b31e:	e065      	b.n	800b3ec <phacDiscLoop_Sw_Int_ActivateB+0x398>
            pDataParams->pPal1443p3bDataParams,
            PHPAL_I14443P3B_CONFIG_DRI,
            &wDataRate));
        pDataParams->sTypeBTargetInfo.bDri = (uint8_t)wDataRate;
 800b320:	893b      	ldrh	r3, [r7, #8]
 800b322:	b2da      	uxtb	r2, r3
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f883 20c7 	strb.w	r2, [r3, #199]	@ 0xc7

        PH_CHECK_SUCCESS_FCT(status, phpalI14443p3b_GetConfig(
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b32e:	f107 0208 	add.w	r2, r7, #8
 800b332:	2105      	movs	r1, #5
 800b334:	4618      	mov	r0, r3
 800b336:	f009 fe93 	bl	8015060 <phpalI14443p3b_Sw_GetConfig>
 800b33a:	4603      	mov	r3, r0
 800b33c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b33e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b340:	2b00      	cmp	r3, #0
 800b342:	d001      	beq.n	800b348 <phacDiscLoop_Sw_Int_ActivateB+0x2f4>
 800b344:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b346:	e051      	b.n	800b3ec <phacDiscLoop_Sw_Int_ActivateB+0x398>
            pDataParams->pPal1443p3bDataParams,
            PHPAL_I14443P3B_CONFIG_DSI,
            &wDataRate));
        pDataParams->sTypeBTargetInfo.bDsi = (uint8_t)wDataRate;
 800b348:	893b      	ldrh	r3, [r7, #8]
 800b34a:	b2da      	uxtb	r2, r3
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
    }

    /* Retrieve 14443-3b protocol parameter */
    PH_CHECK_SUCCESS_FCT(status, phpalI14443p3b_GetProtocolParams(
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800b356:	f107 040d 	add.w	r4, r7, #13
 800b35a:	f107 020e 	add.w	r2, r7, #14
 800b35e:	f107 010f 	add.w	r1, r7, #15
 800b362:	f107 030a 	add.w	r3, r7, #10
 800b366:	9302      	str	r3, [sp, #8]
 800b368:	f107 030b 	add.w	r3, r7, #11
 800b36c:	9301      	str	r3, [sp, #4]
 800b36e:	f107 030c 	add.w	r3, r7, #12
 800b372:	9300      	str	r3, [sp, #0]
 800b374:	4623      	mov	r3, r4
 800b376:	f00a fa35 	bl	80157e4 <phpalI14443p3b_Sw_GetProtocolParams>
 800b37a:	4603      	mov	r3, r0
 800b37c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b37e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b380:	2b00      	cmp	r3, #0
 800b382:	d001      	beq.n	800b388 <phacDiscLoop_Sw_Int_ActivateB+0x334>
 800b384:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b386:	e031      	b.n	800b3ec <phacDiscLoop_Sw_Int_ActivateB+0x398>
        &bFwi,
        &bFsdi,
        &bFsci));

    /* EMVCo v3.1: Limit the FSCI value to be used based on the RdLib execution environment. */
    if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800b38e:	2b01      	cmp	r3, #1
 800b390:	d109      	bne.n	800b3a6 <phacDiscLoop_Sw_Int_ActivateB+0x352>
    {
        if (bFsci > pDataParams->bFsciMax)
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800b398:	7abb      	ldrb	r3, [r7, #10]
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d203      	bcs.n	800b3a6 <phacDiscLoop_Sw_Int_ActivateB+0x352>
        {
            bFsci = pDataParams->bFsciMax;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800b3a4:	72bb      	strb	r3, [r7, #10]
        }
    }

    /* Set 14443-4 protocol parameter */
    status = phpalI14443p4_SetProtocol(
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 800b3aa:	7bfd      	ldrb	r5, [r7, #15]
 800b3ac:	7bbe      	ldrb	r6, [r7, #14]
 800b3ae:	f897 c00d 	ldrb.w	ip, [r7, #13]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f893 30c6 	ldrb.w	r3, [r3, #198]	@ 0xc6
 800b3b8:	7b3a      	ldrb	r2, [r7, #12]
 800b3ba:	7af9      	ldrb	r1, [r7, #11]
 800b3bc:	7ab8      	ldrb	r0, [r7, #10]
 800b3be:	9003      	str	r0, [sp, #12]
 800b3c0:	9102      	str	r1, [sp, #8]
 800b3c2:	9201      	str	r2, [sp, #4]
 800b3c4:	9300      	str	r3, [sp, #0]
 800b3c6:	4663      	mov	r3, ip
 800b3c8:	4632      	mov	r2, r6
 800b3ca:	4629      	mov	r1, r5
 800b3cc:	4620      	mov	r0, r4
 800b3ce:	f00a fc3c 	bl	8015c4a <phpalI14443p4_Sw_SetProtocol>
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	847b      	strh	r3, [r7, #34]	@ 0x22
        bFsdi,
        bFsci);

#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_I3P4B_TAGS */

    pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].bSleep = 0U;
 800b3d6:	78fa      	ldrb	r2, [r7, #3]
 800b3d8:	6879      	ldr	r1, [r7, #4]
 800b3da:	4613      	mov	r3, r2
 800b3dc:	009b      	lsls	r3, r3, #2
 800b3de:	4413      	add	r3, r2
 800b3e0:	009b      	lsls	r3, r3, #2
 800b3e2:	440b      	add	r3, r1
 800b3e4:	33dc      	adds	r3, #220	@ 0xdc
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	701a      	strb	r2, [r3, #0]
    return status;
 800b3ea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	372c      	adds	r7, #44	@ 0x2c
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b3f4 <phacDiscLoop_Sw_Int_CheckForDuplication>:
static phStatus_t phacDiscLoop_Sw_Int_CheckForDuplication(
                                                          phacDiscLoop_Sw_DataParams_t * pDataParams,
                                                          uint8_t *pID,
                                                          uint8_t *pIsDuplicate
                                                          )
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b086      	sub	sp, #24
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	60f8      	str	r0, [r7, #12]
 800b3fc:	60b9      	str	r1, [r7, #8]
 800b3fe:	607a      	str	r2, [r7, #4]
    uint8_t PH_MEMLOC_COUNT bIndex = 0x00;
 800b400:	2300      	movs	r3, #0
 800b402:	75fb      	strb	r3, [r7, #23]

    *pIsDuplicate = PH_OFF;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2200      	movs	r2, #0
 800b408:	701a      	strb	r2, [r3, #0]

    for(bIndex = 0; bIndex < pDataParams->sTypeFTargetInfo.bTotalTagsFound; bIndex++)
 800b40a:	2300      	movs	r3, #0
 800b40c:	75fb      	strb	r3, [r7, #23]
 800b40e:	e019      	b.n	800b444 <phacDiscLoop_Sw_Int_CheckForDuplication+0x50>
    {   /* Skip Identical Entry */
        if((memcmp(pID, pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].aIDmPMm, PHAC_DISCLOOP_FELICA_IDM_LENGTH + PHAC_DISCLOOP_FELICA_PMM_LENGTH )) == 0)
 800b410:	7dfa      	ldrb	r2, [r7, #23]
 800b412:	4613      	mov	r3, r2
 800b414:	005b      	lsls	r3, r3, #1
 800b416:	4413      	add	r3, r2
 800b418:	00da      	lsls	r2, r3, #3
 800b41a:	1ad2      	subs	r2, r2, r3
 800b41c:	f102 0390 	add.w	r3, r2, #144	@ 0x90
 800b420:	68fa      	ldr	r2, [r7, #12]
 800b422:	4413      	add	r3, r2
 800b424:	3304      	adds	r3, #4
 800b426:	2210      	movs	r2, #16
 800b428:	4619      	mov	r1, r3
 800b42a:	68b8      	ldr	r0, [r7, #8]
 800b42c:	f015 fa22 	bl	8020874 <memcmp>
 800b430:	4603      	mov	r3, r0
 800b432:	2b00      	cmp	r3, #0
 800b434:	d103      	bne.n	800b43e <phacDiscLoop_Sw_Int_CheckForDuplication+0x4a>
        {
            *pIsDuplicate = PH_ON;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2201      	movs	r2, #1
 800b43a:	701a      	strb	r2, [r3, #0]
            /* Update baud rate if device is detected with higher baud rate */
            break;
 800b43c:	e008      	b.n	800b450 <phacDiscLoop_Sw_Int_CheckForDuplication+0x5c>
    for(bIndex = 0; bIndex < pDataParams->sTypeFTargetInfo.bTotalTagsFound; bIndex++)
 800b43e:	7dfb      	ldrb	r3, [r7, #23]
 800b440:	3301      	adds	r3, #1
 800b442:	75fb      	strb	r3, [r7, #23]
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800b44a:	7dfa      	ldrb	r2, [r7, #23]
 800b44c:	429a      	cmp	r2, r3
 800b44e:	d3df      	bcc.n	800b410 <phacDiscLoop_Sw_Int_CheckForDuplication+0x1c>
        }
    }
    return PH_ERR_SUCCESS;
 800b450:	2300      	movs	r3, #0
}
 800b452:	4618      	mov	r0, r3
 800b454:	3718      	adds	r7, #24
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}

0800b45a <phacDiscLoop_Sw_Int_UpdateSensFResp>:
                                                      phacDiscLoop_Sw_DataParams_t * pDataParams,
                                                      uint8_t *pID,
                                                      uint8_t bIdLen,
                                                      uint16_t wCurrentBaudBitPos
                                                      )
{
 800b45a:	b580      	push	{r7, lr}
 800b45c:	b086      	sub	sp, #24
 800b45e:	af00      	add	r7, sp, #0
 800b460:	60f8      	str	r0, [r7, #12]
 800b462:	60b9      	str	r1, [r7, #8]
 800b464:	4611      	mov	r1, r2
 800b466:	461a      	mov	r2, r3
 800b468:	460b      	mov	r3, r1
 800b46a:	71fb      	strb	r3, [r7, #7]
 800b46c:	4613      	mov	r3, r2
 800b46e:	80bb      	strh	r3, [r7, #4]
    phStatus_t PH_MEMLOC_REM   wStatus = PH_ERR_SUCCESS;
 800b470:	2300      	movs	r3, #0
 800b472:	82bb      	strh	r3, [r7, #20]
    uint8_t    PH_MEMLOC_REM   bIsDuplicate;
    uint8_t    PH_MEMLOC_REM   bTotalTagsFound = 0x00;
 800b474:	2300      	movs	r3, #0
 800b476:	75fb      	strb	r3, [r7, #23]
    uint16_t   PH_MEMLOC_REM   wRequestCode;

    PH_CHECK_SUCCESS_FCT(wStatus, phacDiscLoop_Sw_Int_CheckForDuplication(pDataParams, &pID[0x00], &bIsDuplicate));
 800b478:	f107 0313 	add.w	r3, r7, #19
 800b47c:	461a      	mov	r2, r3
 800b47e:	68b9      	ldr	r1, [r7, #8]
 800b480:	68f8      	ldr	r0, [r7, #12]
 800b482:	f7ff ffb7 	bl	800b3f4 <phacDiscLoop_Sw_Int_CheckForDuplication>
 800b486:	4603      	mov	r3, r0
 800b488:	82bb      	strh	r3, [r7, #20]
 800b48a:	8abb      	ldrh	r3, [r7, #20]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d001      	beq.n	800b494 <phacDiscLoop_Sw_Int_UpdateSensFResp+0x3a>
 800b490:	8abb      	ldrh	r3, [r7, #20]
 800b492:	e086      	b.n	800b5a2 <phacDiscLoop_Sw_Int_UpdateSensFResp+0x148>
    if(0U == (bIsDuplicate))
 800b494:	7cfb      	ldrb	r3, [r7, #19]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d179      	bne.n	800b58e <phacDiscLoop_Sw_Int_UpdateSensFResp+0x134>
    {
        /* get Request code is enable */
        PH_CHECK_SUCCESS_FCT(wStatus, phpalFelica_GetConfig(pDataParams->pPalFelicaDataParams, PHPAL_FELICA_CONFIG_RC, &wRequestCode));
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b49e:	f107 0210 	add.w	r2, r7, #16
 800b4a2:	2100      	movs	r1, #0
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f008 fef6 	bl	8014296 <phpalFelica_Sw_GetConfig>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	82bb      	strh	r3, [r7, #20]
 800b4ae:	8abb      	ldrh	r3, [r7, #20]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d001      	beq.n	800b4b8 <phacDiscLoop_Sw_Int_UpdateSensFResp+0x5e>
 800b4b4:	8abb      	ldrh	r3, [r7, #20]
 800b4b6:	e074      	b.n	800b5a2 <phacDiscLoop_Sw_Int_UpdateSensFResp+0x148>

        pDataParams->sTypeFTargetInfo.aTypeFTag[pDataParams->sTypeFTargetInfo.bTotalTagsFound + bTotalTagsFound].bLength = (uint8_t) bIdLen;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800b4be:	461a      	mov	r2, r3
 800b4c0:	7dfb      	ldrb	r3, [r7, #23]
 800b4c2:	441a      	add	r2, r3
 800b4c4:	68f9      	ldr	r1, [r7, #12]
 800b4c6:	4613      	mov	r3, r2
 800b4c8:	005b      	lsls	r3, r3, #1
 800b4ca:	4413      	add	r3, r2
 800b4cc:	00da      	lsls	r2, r3, #3
 800b4ce:	1ad2      	subs	r2, r2, r3
 800b4d0:	188b      	adds	r3, r1, r2
 800b4d2:	33a8      	adds	r3, #168	@ 0xa8
 800b4d4:	79fa      	ldrb	r2, [r7, #7]
 800b4d6:	701a      	strb	r2, [r3, #0]

        /* Copy RD(Request Data) if received */
        if((wRequestCode != PH_OFF) && (bIdLen > (PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH)))
 800b4d8:	8a3b      	ldrh	r3, [r7, #16]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d018      	beq.n	800b510 <phacDiscLoop_Sw_Int_UpdateSensFResp+0xb6>
 800b4de:	79fb      	ldrb	r3, [r7, #7]
 800b4e0:	2b10      	cmp	r3, #16
 800b4e2:	d915      	bls.n	800b510 <phacDiscLoop_Sw_Int_UpdateSensFResp+0xb6>
        {
            (void)memcpy((uint8_t *)&(pDataParams->sTypeFTargetInfo.aTypeFTag[pDataParams->sTypeFTargetInfo.bTotalTagsFound + bTotalTagsFound].aRD), &pID[PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH], PHPAL_FELICA_RD_LENGTH);
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800b4ea:	461a      	mov	r2, r3
 800b4ec:	7dfb      	ldrb	r3, [r7, #23]
 800b4ee:	441a      	add	r2, r3
 800b4f0:	4613      	mov	r3, r2
 800b4f2:	005b      	lsls	r3, r3, #1
 800b4f4:	4413      	add	r3, r2
 800b4f6:	00da      	lsls	r2, r3, #3
 800b4f8:	1ad2      	subs	r2, r2, r3
 800b4fa:	f102 03a0 	add.w	r3, r2, #160	@ 0xa0
 800b4fe:	68fa      	ldr	r2, [r7, #12]
 800b500:	4413      	add	r3, r2
 800b502:	3304      	adds	r3, #4
 800b504:	68ba      	ldr	r2, [r7, #8]
 800b506:	3210      	adds	r2, #16
 800b508:	8812      	ldrh	r2, [r2, #0]
 800b50a:	b292      	uxth	r2, r2
 800b50c:	801a      	strh	r2, [r3, #0]
 800b50e:	e014      	b.n	800b53a <phacDiscLoop_Sw_Int_UpdateSensFResp+0xe0>
        }
        else
        {
            (void)memset((uint8_t *)&(pDataParams->sTypeFTargetInfo.aTypeFTag[pDataParams->sTypeFTargetInfo.bTotalTagsFound + bTotalTagsFound].aRD), 0x00, PHPAL_FELICA_RD_LENGTH);
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800b516:	461a      	mov	r2, r3
 800b518:	7dfb      	ldrb	r3, [r7, #23]
 800b51a:	441a      	add	r2, r3
 800b51c:	4613      	mov	r3, r2
 800b51e:	005b      	lsls	r3, r3, #1
 800b520:	4413      	add	r3, r2
 800b522:	00da      	lsls	r2, r3, #3
 800b524:	1ad2      	subs	r2, r2, r3
 800b526:	f102 03a0 	add.w	r3, r2, #160	@ 0xa0
 800b52a:	68fa      	ldr	r2, [r7, #12]
 800b52c:	4413      	add	r3, r2
 800b52e:	3304      	adds	r3, #4
 800b530:	2202      	movs	r2, #2
 800b532:	2100      	movs	r1, #0
 800b534:	4618      	mov	r0, r3
 800b536:	f015 f9ad 	bl	8020894 <memset>
        }

        /* Copy IDMmPMm */
        (void)memcpy( (uint8_t *)&(pDataParams->sTypeFTargetInfo.aTypeFTag[pDataParams->sTypeFTargetInfo.bTotalTagsFound + bTotalTagsFound].aIDmPMm), pID, (PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH));
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800b540:	461a      	mov	r2, r3
 800b542:	7dfb      	ldrb	r3, [r7, #23]
 800b544:	441a      	add	r2, r3
 800b546:	4613      	mov	r3, r2
 800b548:	005b      	lsls	r3, r3, #1
 800b54a:	4413      	add	r3, r2
 800b54c:	00da      	lsls	r2, r3, #3
 800b54e:	1ad2      	subs	r2, r2, r3
 800b550:	f102 0390 	add.w	r3, r2, #144	@ 0x90
 800b554:	68fa      	ldr	r2, [r7, #12]
 800b556:	4413      	add	r3, r2
 800b558:	3304      	adds	r3, #4
 800b55a:	2210      	movs	r2, #16
 800b55c:	68b9      	ldr	r1, [r7, #8]
 800b55e:	4618      	mov	r0, r3
 800b560:	f015 fa17 	bl	8020992 <memcpy>
        pDataParams->sTypeFTargetInfo.aTypeFTag[pDataParams->sTypeFTargetInfo.bTotalTagsFound + bTotalTagsFound].bBaud = (uint8_t)(wCurrentBaudBitPos & 0xFFU);
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800b56a:	461a      	mov	r2, r3
 800b56c:	7dfb      	ldrb	r3, [r7, #23]
 800b56e:	441a      	add	r2, r3
 800b570:	88bb      	ldrh	r3, [r7, #4]
 800b572:	b2d8      	uxtb	r0, r3
 800b574:	68f9      	ldr	r1, [r7, #12]
 800b576:	4613      	mov	r3, r2
 800b578:	005b      	lsls	r3, r3, #1
 800b57a:	4413      	add	r3, r2
 800b57c:	00da      	lsls	r2, r3, #3
 800b57e:	1ad2      	subs	r2, r2, r3
 800b580:	188b      	adds	r3, r1, r2
 800b582:	33a6      	adds	r3, #166	@ 0xa6
 800b584:	4602      	mov	r2, r0
 800b586:	701a      	strb	r2, [r3, #0]

        /* Increment Tag count */
        bTotalTagsFound++;
 800b588:	7dfb      	ldrb	r3, [r7, #23]
 800b58a:	3301      	adds	r3, #1
 800b58c:	75fb      	strb	r3, [r7, #23]
    }

    pDataParams->sTypeFTargetInfo.bTotalTagsFound += bTotalTagsFound;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 800b594:	7dfb      	ldrb	r3, [r7, #23]
 800b596:	4413      	add	r3, r2
 800b598:	b2da      	uxtb	r2, r3
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return PH_ERR_SUCCESS;
 800b5a0:	2300      	movs	r3, #0
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3718      	adds	r7, #24
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}

0800b5aa <phacDiscLoop_Sw_Int_SendSensFReq>:

                                                      phacDiscLoop_Sw_DataParams_t * pDataParams,
                                                      uint8_t bNumTimeSlots,
                                                      uint16_t wCurrentBaudBitPos
                                                      )
{
 800b5aa:	b590      	push	{r4, r7, lr}
 800b5ac:	b08b      	sub	sp, #44	@ 0x2c
 800b5ae:	af02      	add	r7, sp, #8
 800b5b0:	6078      	str	r0, [r7, #4]
 800b5b2:	460b      	mov	r3, r1
 800b5b4:	70fb      	strb	r3, [r7, #3]
 800b5b6:	4613      	mov	r3, r2
 800b5b8:	803b      	strh	r3, [r7, #0]
    phStatus_t PH_MEMLOC_REM wStatus = PH_ERR_INTERNAL_ERROR;
 800b5ba:	237f      	movs	r3, #127	@ 0x7f
 800b5bc:	83fb      	strh	r3, [r7, #30]
    uint8_t    PH_MEMLOC_BUF baSystemCode[2] = {PHPAL_FELICA_SYSTEM_CODE_BYTE_0,
 800b5be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b5c2:	83bb      	strh	r3, [r7, #28]
                                                PHPAL_FELICA_SYSTEM_CODE_BYTE_1};
    uint16_t   PH_MEMLOC_REM wTemp = 0U;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	837b      	strh	r3, [r7, #26]
    uint8_t *  PH_MEMLOC_REM pId = NULL;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	617b      	str	r3, [r7, #20]
    uint8_t *  PH_MEMLOC_REM pRxBuff = NULL;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	613b      	str	r3, [r7, #16]
    uint8_t    PH_MEMLOC_REM bIdLen;
    phStatus_t PH_MEMLOC_REM wFrameStatus;

    /* send ReqC command */
    wStatus = phpalFelica_ReqC(pDataParams->pPalFelicaDataParams, baSystemCode, bNumTimeSlots, &pRxBuff, &wTemp);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b5d4:	f107 0410 	add.w	r4, r7, #16
 800b5d8:	78fa      	ldrb	r2, [r7, #3]
 800b5da:	f107 011c 	add.w	r1, r7, #28
 800b5de:	f107 031a 	add.w	r3, r7, #26
 800b5e2:	9300      	str	r3, [sp, #0]
 800b5e4:	4623      	mov	r3, r4
 800b5e6:	f008 fc6b 	bl	8013ec0 <phpalFelica_Sw_ReqC>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	83fb      	strh	r3, [r7, #30]

    if((wStatus & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800b5ee:	8bfb      	ldrh	r3, [r7, #30]
 800b5f0:	b2db      	uxtb	r3, r3
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d164      	bne.n	800b6c0 <phacDiscLoop_Sw_Int_SendSensFReq+0x116>
    {
        if(bNumTimeSlots > PHPAL_FELICA_NUMSLOTS_1)
 800b5f6:	78fb      	ldrb	r3, [r7, #3]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d048      	beq.n	800b68e <phacDiscLoop_Sw_Int_SendSensFReq+0xe4>
        {
            /* get total number of response frame */
            PH_CHECK_SUCCESS_FCT(wStatus, phpalFelica_GetConfig(pDataParams->pPalFelicaDataParams, PH_PALFELICA_CONFIG_NUM_RESPONSE_FRAMES, &wTemp));
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b600:	f107 021a 	add.w	r2, r7, #26
 800b604:	2101      	movs	r1, #1
 800b606:	4618      	mov	r0, r3
 800b608:	f008 fe45 	bl	8014296 <phpalFelica_Sw_GetConfig>
 800b60c:	4603      	mov	r3, r0
 800b60e:	83fb      	strh	r3, [r7, #30]
 800b610:	8bfb      	ldrh	r3, [r7, #30]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d037      	beq.n	800b686 <phacDiscLoop_Sw_Int_SendSensFReq+0xdc>
 800b616:	8bfb      	ldrh	r3, [r7, #30]
 800b618:	e053      	b.n	800b6c2 <phacDiscLoop_Sw_Int_SendSensFReq+0x118>

            while(0U != wTemp)
            {
                bIdLen = 0x00;
 800b61a:	2300      	movs	r3, #0
 800b61c:	73fb      	strb	r3, [r7, #15]
                wFrameStatus = 0x00;
 800b61e:	2300      	movs	r3, #0
 800b620:	81bb      	strh	r3, [r7, #12]
                /* retrieve IDmPMm one by one for all frames */
                PH_CHECK_SUCCESS_FCT(wStatus, phpalFelica_GetFrameInfo(
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b626:	8b7b      	ldrh	r3, [r7, #26]
 800b628:	b2d9      	uxtb	r1, r3
 800b62a:	693a      	ldr	r2, [r7, #16]
 800b62c:	f107 040c 	add.w	r4, r7, #12
 800b630:	f107 030f 	add.w	r3, r7, #15
 800b634:	9301      	str	r3, [sp, #4]
 800b636:	f107 0314 	add.w	r3, r7, #20
 800b63a:	9300      	str	r3, [sp, #0]
 800b63c:	4623      	mov	r3, r4
 800b63e:	f008 fd55 	bl	80140ec <phpalFelica_Sw_GetFrameInfo>
 800b642:	4603      	mov	r3, r0
 800b644:	83fb      	strh	r3, [r7, #30]
 800b646:	8bfb      	ldrh	r3, [r7, #30]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d001      	beq.n	800b650 <phacDiscLoop_Sw_Int_SendSensFReq+0xa6>
 800b64c:	8bfb      	ldrh	r3, [r7, #30]
 800b64e:	e038      	b.n	800b6c2 <phacDiscLoop_Sw_Int_SendSensFReq+0x118>
                                                    pRxBuff,
                                                    &wFrameStatus,
                                                    &pId,
                                                    &bIdLen));

                if(wFrameStatus == PH_ERR_SUCCESS)
 800b650:	89bb      	ldrh	r3, [r7, #12]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d10c      	bne.n	800b670 <phacDiscLoop_Sw_Int_SendSensFReq+0xc6>
                {
                    /* store received IDmPMm */
                    PH_CHECK_SUCCESS_FCT(wStatus, phacDiscLoop_Sw_Int_UpdateSensFResp(pDataParams, pId, bIdLen, wCurrentBaudBitPos));
 800b656:	6979      	ldr	r1, [r7, #20]
 800b658:	7bfa      	ldrb	r2, [r7, #15]
 800b65a:	883b      	ldrh	r3, [r7, #0]
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f7ff fefc 	bl	800b45a <phacDiscLoop_Sw_Int_UpdateSensFResp>
 800b662:	4603      	mov	r3, r0
 800b664:	83fb      	strh	r3, [r7, #30]
 800b666:	8bfb      	ldrh	r3, [r7, #30]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d001      	beq.n	800b670 <phacDiscLoop_Sw_Int_SendSensFReq+0xc6>
 800b66c:	8bfb      	ldrh	r3, [r7, #30]
 800b66e:	e028      	b.n	800b6c2 <phacDiscLoop_Sw_Int_SendSensFReq+0x118>
                }
                wTemp--;
 800b670:	8b7b      	ldrh	r3, [r7, #26]
 800b672:	3b01      	subs	r3, #1
 800b674:	b29b      	uxth	r3, r3
 800b676:	837b      	strh	r3, [r7, #26]

                /* Check for device limit */
                if(pDataParams->sTypeFTargetInfo.bTotalTagsFound >= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F212])
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	7b1b      	ldrb	r3, [r3, #12]
 800b682:	429a      	cmp	r2, r3
 800b684:	d211      	bcs.n	800b6aa <phacDiscLoop_Sw_Int_SendSensFReq+0x100>
            while(0U != wTemp)
 800b686:	8b7b      	ldrh	r3, [r7, #26]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d1c6      	bne.n	800b61a <phacDiscLoop_Sw_Int_SendSensFReq+0x70>
 800b68c:	e00e      	b.n	800b6ac <phacDiscLoop_Sw_Int_SendSensFReq+0x102>
            }
        }
        else
        {
            /* store received IDmPMm */
            PH_CHECK_SUCCESS_FCT(wStatus, phacDiscLoop_Sw_Int_UpdateSensFResp(pDataParams, pRxBuff, (uint8_t)wTemp, wCurrentBaudBitPos));
 800b68e:	6939      	ldr	r1, [r7, #16]
 800b690:	8b7b      	ldrh	r3, [r7, #26]
 800b692:	b2da      	uxtb	r2, r3
 800b694:	883b      	ldrh	r3, [r7, #0]
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f7ff fedf 	bl	800b45a <phacDiscLoop_Sw_Int_UpdateSensFResp>
 800b69c:	4603      	mov	r3, r0
 800b69e:	83fb      	strh	r3, [r7, #30]
 800b6a0:	8bfb      	ldrh	r3, [r7, #30]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d002      	beq.n	800b6ac <phacDiscLoop_Sw_Int_SendSensFReq+0x102>
 800b6a6:	8bfb      	ldrh	r3, [r7, #30]
 800b6a8:	e00b      	b.n	800b6c2 <phacDiscLoop_Sw_Int_SendSensFReq+0x118>
                    break;
 800b6aa:	bf00      	nop
        }

        /*Response is success but no device found*/
        if(pDataParams->sTypeFTargetInfo.bTotalTagsFound == 0U)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d102      	bne.n	800b6bc <phacDiscLoop_Sw_Int_SendSensFReq+0x112>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_AC_DISCLOOP);
 800b6b6:	f244 037f 	movw	r3, #16511	@ 0x407f
 800b6ba:	e002      	b.n	800b6c2 <phacDiscLoop_Sw_Int_SendSensFReq+0x118>
        }
        else
        {
            return PH_ERR_SUCCESS;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	e000      	b.n	800b6c2 <phacDiscLoop_Sw_Int_SendSensFReq+0x118>
        }
    }

    return wStatus;
 800b6c0:	8bfb      	ldrh	r3, [r7, #30]
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	3724      	adds	r7, #36	@ 0x24
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd90      	pop	{r4, r7, pc}

0800b6ca <phacDiscLoop_Sw_DetTechTypeF>:
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */

phStatus_t phacDiscLoop_Sw_DetTechTypeF(
                                        phacDiscLoop_Sw_DataParams_t *pDataParams
                                        )
{
 800b6ca:	b580      	push	{r7, lr}
 800b6cc:	b084      	sub	sp, #16
 800b6ce:	af00      	add	r7, sp, #0
 800b6d0:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    phStatus_t PH_MEMLOC_REM wStatus = PH_ERR_INTERNAL_ERROR;
 800b6d2:	237f      	movs	r3, #127	@ 0x7f
 800b6d4:	81fb      	strh	r3, [r7, #14]
    uint16_t   PH_MEMLOC_REM wCurrentBaudBitPos;

    PH_CHECK_SUCCESS_FCT(wStatus,phpalFelica_SetConfig(pDataParams->pPalFelicaDataParams, PHPAL_FELICA_CONFIG_RC, PH_OFF));
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6da:	2200      	movs	r2, #0
 800b6dc:	2100      	movs	r1, #0
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f008 fda1 	bl	8014226 <phpalFelica_Sw_SetConfig>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	81fb      	strh	r3, [r7, #14]
 800b6e8:	89fb      	ldrh	r3, [r7, #14]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d001      	beq.n	800b6f2 <phacDiscLoop_Sw_DetTechTypeF+0x28>
 800b6ee:	89fb      	ldrh	r3, [r7, #14]
 800b6f0:	e042      	b.n	800b778 <phacDiscLoop_Sw_DetTechTypeF+0xae>

    /* get current FeliCa baud rate */
    PH_CHECK_SUCCESS_FCT(wStatus, phacDiscLoop_GetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_TYPEF_CUR_BAUD, &wCurrentBaudBitPos));
 800b6f2:	f107 030c 	add.w	r3, r7, #12
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	2157      	movs	r1, #87	@ 0x57
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f7fd f9ea 	bl	8008ad4 <phacDiscLoop_Sw_GetConfig>
 800b700:	4603      	mov	r3, r0
 800b702:	81fb      	strh	r3, [r7, #14]
 800b704:	89fb      	ldrh	r3, [r7, #14]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d001      	beq.n	800b70e <phacDiscLoop_Sw_DetTechTypeF+0x44>
 800b70a:	89fb      	ldrh	r3, [r7, #14]
 800b70c:	e034      	b.n	800b778 <phacDiscLoop_Sw_DetTechTypeF+0xae>

    /* if any tag has detected, do not reset the tag count */
    if(0U == (pDataParams->bDetectedTechs & (PHAC_DISCLOOP_POS_BIT_MASK_F424 | PHAC_DISCLOOP_POS_BIT_MASK_F212)))
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800b714:	f003 030c 	and.w	r3, r3, #12
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d103      	bne.n	800b724 <phacDiscLoop_Sw_DetTechTypeF+0x5a>
    {
        pDataParams->sTypeFTargetInfo.bTotalTagsFound = 0;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2200      	movs	r2, #0
 800b720:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
    }

    /* re-set Collision Pending bit */
    pDataParams->bCollPend &= (uint8_t)~(uint8_t)(wCurrentBaudBitPos & 0xFFU);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	7f9a      	ldrb	r2, [r3, #30]
 800b728:	89bb      	ldrh	r3, [r7, #12]
 800b72a:	b2db      	uxtb	r3, r3
 800b72c:	43db      	mvns	r3, r3
 800b72e:	b2db      	uxtb	r3, r3
 800b730:	4013      	ands	r3, r2
 800b732:	b2da      	uxtb	r2, r3
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	779a      	strb	r2, [r3, #30]
    wStatus = phacDiscLoop_Sw_Int_SendSensFReq(pDataParams, PHPAL_FELICA_NUMSLOTS_4, wCurrentBaudBitPos);
 800b738:	89bb      	ldrh	r3, [r7, #12]
 800b73a:	461a      	mov	r2, r3
 800b73c:	2103      	movs	r1, #3
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f7ff ff33 	bl	800b5aa <phacDiscLoop_Sw_Int_SendSensFReq>
 800b744:	4603      	mov	r3, r0
 800b746:	81fb      	strh	r3, [r7, #14]

    if(0u != (phacDiscLoop_Sw_Int_IsValidPollStatus(wStatus)))
 800b748:	89fb      	ldrh	r3, [r7, #14]
 800b74a:	4618      	mov	r0, r3
 800b74c:	f7fe fc6f 	bl	800a02e <phacDiscLoop_Sw_Int_IsValidPollStatus>
 800b750:	4603      	mov	r3, r0
 800b752:	2b00      	cmp	r3, #0
 800b754:	d00c      	beq.n	800b770 <phacDiscLoop_Sw_DetTechTypeF+0xa6>
    {
        if((wStatus & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800b756:	89fb      	ldrh	r3, [r7, #14]
 800b758:	b2db      	uxtb	r3, r3
 800b75a:	2b03      	cmp	r3, #3
 800b75c:	d10a      	bne.n	800b774 <phacDiscLoop_Sw_DetTechTypeF+0xaa>
        {
            /* set Collision Pending bit */
            pDataParams->bCollPend |= (uint8_t)(wCurrentBaudBitPos & 0xFFU);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	7f9a      	ldrb	r2, [r3, #30]
 800b762:	89bb      	ldrh	r3, [r7, #12]
 800b764:	b2db      	uxtb	r3, r3
 800b766:	4313      	orrs	r3, r2
 800b768:	b2da      	uxtb	r2, r3
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	779a      	strb	r2, [r3, #30]
 800b76e:	e001      	b.n	800b774 <phacDiscLoop_Sw_DetTechTypeF+0xaa>
        }
    }
    else
    {
        return wStatus;
 800b770:	89fb      	ldrh	r3, [r7, #14]
 800b772:	e001      	b.n	800b778 <phacDiscLoop_Sw_DetTechTypeF+0xae>
    }

    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 800b774:	f244 0387 	movw	r3, #16519	@ 0x4087

#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3710      	adds	r7, #16
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}

0800b780 <phacDiscLoop_Sw_Int_CollisionResolutionF>:

phStatus_t phacDiscLoop_Sw_Int_CollisionResolutionF(
                                                    phacDiscLoop_Sw_DataParams_t * pDataParams
                                                    )
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b084      	sub	sp, #16
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    phStatus_t PH_MEMLOC_REM   status;
    uint16_t   PH_MEMLOC_REM   wCurrentBaudBitPos;
    uint8_t    PH_MEMLOC_COUNT bIndex = 0;
 800b788:	2300      	movs	r3, #0
 800b78a:	73fb      	strb	r3, [r7, #15]
    uint8_t    PH_MEMLOC_COUNT bCardIndex;

    PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_GetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_TYPEF_CUR_BAUD, &wCurrentBaudBitPos));
 800b78c:	f107 030a 	add.w	r3, r7, #10
 800b790:	461a      	mov	r2, r3
 800b792:	2157      	movs	r1, #87	@ 0x57
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f7fd f99d 	bl	8008ad4 <phacDiscLoop_Sw_GetConfig>
 800b79a:	4603      	mov	r3, r0
 800b79c:	81bb      	strh	r3, [r7, #12]
 800b79e:	89bb      	ldrh	r3, [r7, #12]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d001      	beq.n	800b7a8 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x28>
 800b7a4:	89bb      	ldrh	r3, [r7, #12]
 800b7a6:	e0e3      	b.n	800b970 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>

    /* Collision_Pending = 1 and Device limit  = 0 */
    if((0U != ((pDataParams->bCollPend & wCurrentBaudBitPos))) && ((pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F212] == 0x00U)))
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	7f9b      	ldrb	r3, [r3, #30]
 800b7ac:	461a      	mov	r2, r3
 800b7ae:	897b      	ldrh	r3, [r7, #10]
 800b7b0:	4013      	ands	r3, r2
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d00a      	beq.n	800b7cc <phacDiscLoop_Sw_Int_CollisionResolutionF+0x4c>
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	7b1b      	ldrb	r3, [r3, #12]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d106      	bne.n	800b7cc <phacDiscLoop_Sw_Int_CollisionResolutionF+0x4c>
    {
        pDataParams->sTypeFTargetInfo.bTotalTagsFound = 0;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800b7c6:	f244 0385 	movw	r3, #16517	@ 0x4085
 800b7ca:	e0d1      	b.n	800b970 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
    }

    for(bCardIndex = 0; bCardIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bCardIndex++)
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	73bb      	strb	r3, [r7, #14]
 800b7d0:	e00d      	b.n	800b7ee <phacDiscLoop_Sw_Int_CollisionResolutionF+0x6e>
    {
        /* Clear SLEEP_AF State */
        pDataParams->sTypeFTargetInfo.aTypeFTag[bCardIndex].bSleepAFState = 0U;
 800b7d2:	7bba      	ldrb	r2, [r7, #14]
 800b7d4:	6879      	ldr	r1, [r7, #4]
 800b7d6:	4613      	mov	r3, r2
 800b7d8:	005b      	lsls	r3, r3, #1
 800b7da:	4413      	add	r3, r2
 800b7dc:	00da      	lsls	r2, r3, #3
 800b7de:	1ad2      	subs	r2, r2, r3
 800b7e0:	188b      	adds	r3, r1, r2
 800b7e2:	33a7      	adds	r3, #167	@ 0xa7
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	701a      	strb	r2, [r3, #0]
    for(bCardIndex = 0; bCardIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bCardIndex++)
 800b7e8:	7bbb      	ldrb	r3, [r7, #14]
 800b7ea:	3301      	adds	r3, #1
 800b7ec:	73bb      	strb	r3, [r7, #14]
 800b7ee:	7bbb      	ldrb	r3, [r7, #14]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d0ee      	beq.n	800b7d2 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x52>
    }

    /* Symbol 1 */
    /* Symbol 2*/
    /* Device limit for F424 and F212 is same */
    if(pDataParams->sTypeFTargetInfo.bTotalTagsFound >= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F212])
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	7b1b      	ldrb	r3, [r3, #12]
 800b7fe:	429a      	cmp	r2, r3
 800b800:	d324      	bcc.n	800b84c <phacDiscLoop_Sw_Int_CollisionResolutionF+0xcc>
    {
        if (wCurrentBaudBitPos == PHAC_DISCLOOP_CON_BITR_212)
 800b802:	897b      	ldrh	r3, [r7, #10]
 800b804:	2b04      	cmp	r3, #4
 800b806:	d10c      	bne.n	800b822 <phacDiscLoop_Sw_Int_CollisionResolutionF+0xa2>
        {
            /* Configure HW for the TypeF technology */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b80c:	2103      	movs	r1, #3
 800b80e:	4618      	mov	r0, r3
 800b810:	f002 fa46 	bl	800dca0 <phhalHw_Pn5180_ApplyProtocolSettings>
 800b814:	4603      	mov	r3, r0
 800b816:	81bb      	strh	r3, [r7, #12]
 800b818:	89bb      	ldrh	r3, [r7, #12]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d00e      	beq.n	800b83c <phacDiscLoop_Sw_Int_CollisionResolutionF+0xbc>
 800b81e:	89bb      	ldrh	r3, [r7, #12]
 800b820:	e0a6      	b.n	800b970 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
                PHHAL_HW_CARDTYPE_FELICA_212));
        }
        else
        {
            /* Configure HW for the TypeF technology */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b826:	210a      	movs	r1, #10
 800b828:	4618      	mov	r0, r3
 800b82a:	f002 fa39 	bl	800dca0 <phhalHw_Pn5180_ApplyProtocolSettings>
 800b82e:	4603      	mov	r3, r0
 800b830:	81bb      	strh	r3, [r7, #12]
 800b832:	89bb      	ldrh	r3, [r7, #12]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d001      	beq.n	800b83c <phacDiscLoop_Sw_Int_CollisionResolutionF+0xbc>
 800b838:	89bb      	ldrh	r3, [r7, #12]
 800b83a:	e099      	b.n	800b970 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
                pDataParams->pHalDataParams,
                PHHAL_HW_CARDTYPE_FELICA_424));
        }

        /* Symbol 8 */
        pDataParams->bNumOfCards = pDataParams->sTypeFTargetInfo.bTotalTagsFound;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
        return PH_ERR_SUCCESS;
 800b848:	2300      	movs	r3, #0
 800b84a:	e091      	b.n	800b970 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
    }

    /* Re-set Collision Pending bit */
    pDataParams->bCollPend &= (uint8_t)~(uint8_t)(wCurrentBaudBitPos & 0xFFU);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	7f9a      	ldrb	r2, [r3, #30]
 800b850:	897b      	ldrh	r3, [r7, #10]
 800b852:	b2db      	uxtb	r3, r3
 800b854:	43db      	mvns	r3, r3
 800b856:	b2db      	uxtb	r3, r3
 800b858:	4013      	ands	r3, r2
 800b85a:	b2da      	uxtb	r2, r3
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	779a      	strb	r2, [r3, #30]

    /* Symbol 3 */
    /* SENSF_REQ with TSN := 0Fh, RC := 00h, SC := FFFFh */
    status = phpalFelica_SetConfig(pDataParams->pPalFelicaDataParams, PHPAL_FELICA_CONFIG_RC, 0);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b864:	2200      	movs	r2, #0
 800b866:	2100      	movs	r1, #0
 800b868:	4618      	mov	r0, r3
 800b86a:	f008 fcdc 	bl	8014226 <phpalFelica_Sw_SetConfig>
 800b86e:	4603      	mov	r3, r0
 800b870:	81bb      	strh	r3, [r7, #12]
    PH_CHECK_SUCCESS(status);
 800b872:	89bb      	ldrh	r3, [r7, #12]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d001      	beq.n	800b87c <phacDiscLoop_Sw_Int_CollisionResolutionF+0xfc>
 800b878:	89bb      	ldrh	r3, [r7, #12]
 800b87a:	e079      	b.n	800b970 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>

    /* Apply Guard time.(GTFB) */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	8a9b      	ldrh	r3, [r3, #20]
 800b884:	461a      	mov	r2, r3
 800b886:	2135      	movs	r1, #53	@ 0x35
 800b888:	f002 ff86 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 800b88c:	4603      	mov	r3, r0
 800b88e:	81bb      	strh	r3, [r7, #12]
 800b890:	89bb      	ldrh	r3, [r7, #12]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d001      	beq.n	800b89a <phacDiscLoop_Sw_Int_CollisionResolutionF+0x11a>
 800b896:	89bb      	ldrh	r3, [r7, #12]
 800b898:	e06a      	b.n	800b970 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F212]));

    if (wCurrentBaudBitPos == PHAC_DISCLOOP_CON_BITR_212)
 800b89a:	897b      	ldrh	r3, [r7, #10]
 800b89c:	2b04      	cmp	r3, #4
 800b89e:	d10c      	bne.n	800b8ba <phacDiscLoop_Sw_Int_CollisionResolutionF+0x13a>
    {
        /* Configure HW for the TypeF technology */
        PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8a4:	2103      	movs	r1, #3
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f002 f9fa 	bl	800dca0 <phhalHw_Pn5180_ApplyProtocolSettings>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	81bb      	strh	r3, [r7, #12]
 800b8b0:	89bb      	ldrh	r3, [r7, #12]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d00e      	beq.n	800b8d4 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x154>
 800b8b6:	89bb      	ldrh	r3, [r7, #12]
 800b8b8:	e05a      	b.n	800b970 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
            PHHAL_HW_CARDTYPE_FELICA_212));
    }
    else
    {
        /* Configure HW for the TypeF technology */
        PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8be:	210a      	movs	r1, #10
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f002 f9ed 	bl	800dca0 <phhalHw_Pn5180_ApplyProtocolSettings>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	81bb      	strh	r3, [r7, #12]
 800b8ca:	89bb      	ldrh	r3, [r7, #12]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d001      	beq.n	800b8d4 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x154>
 800b8d0:	89bb      	ldrh	r3, [r7, #12]
 800b8d2:	e04d      	b.n	800b970 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
            pDataParams->pHalDataParams,
            PHHAL_HW_CARDTYPE_FELICA_424));
    }

    status = phacDiscLoop_Sw_Int_SendSensFReq(pDataParams, PHPAL_FELICA_NUMSLOTS_16, wCurrentBaudBitPos);
 800b8d4:	897b      	ldrh	r3, [r7, #10]
 800b8d6:	461a      	mov	r2, r3
 800b8d8:	210f      	movs	r1, #15
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f7ff fe65 	bl	800b5aa <phacDiscLoop_Sw_Int_SendSensFReq>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	81bb      	strh	r3, [r7, #12]
    PH_CHECK_SUCCESS(status);
 800b8e4:	89bb      	ldrh	r3, [r7, #12]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d001      	beq.n	800b8ee <phacDiscLoop_Sw_Int_CollisionResolutionF+0x16e>
 800b8ea:	89bb      	ldrh	r3, [r7, #12]
 800b8ec:	e040      	b.n	800b970 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>

    /* Symbol 5 */
    /* Check for NFC-DEP Protocol presence within all received responses */
    bIndex = 0x00;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	73fb      	strb	r3, [r7, #15]
    while(bIndex < pDataParams->sTypeFTargetInfo.bTotalTagsFound)
 800b8f2:	e030      	b.n	800b956 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1d6>
    {
        if ((pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].aIDmPMm[0] == 0x01U) &&
 800b8f4:	7bfa      	ldrb	r2, [r7, #15]
 800b8f6:	6879      	ldr	r1, [r7, #4]
 800b8f8:	4613      	mov	r3, r2
 800b8fa:	005b      	lsls	r3, r3, #1
 800b8fc:	4413      	add	r3, r2
 800b8fe:	00da      	lsls	r2, r3, #3
 800b900:	1ad2      	subs	r2, r2, r3
 800b902:	188b      	adds	r3, r1, r2
 800b904:	3394      	adds	r3, #148	@ 0x94
 800b906:	781b      	ldrb	r3, [r3, #0]
 800b908:	2b01      	cmp	r3, #1
 800b90a:	d121      	bne.n	800b950 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1d0>
            (pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].aIDmPMm[1] == 0xFEU))
 800b90c:	7bfa      	ldrb	r2, [r7, #15]
 800b90e:	6879      	ldr	r1, [r7, #4]
 800b910:	4613      	mov	r3, r2
 800b912:	005b      	lsls	r3, r3, #1
 800b914:	4413      	add	r3, r2
 800b916:	00da      	lsls	r2, r3, #3
 800b918:	1ad2      	subs	r2, r2, r3
 800b91a:	188b      	adds	r3, r1, r2
 800b91c:	3395      	adds	r3, #149	@ 0x95
 800b91e:	781b      	ldrb	r3, [r3, #0]
        if ((pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].aIDmPMm[0] == 0x01U) &&
 800b920:	2bfe      	cmp	r3, #254	@ 0xfe
 800b922:	d115      	bne.n	800b950 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1d0>
        {
            /* Symbol 6 */
            /* SENSF_REQ with TSN := 0Fh, RC := 01h, SC := FFFFh */
            status = phpalFelica_SetConfig(pDataParams->pPalFelicaDataParams, PHPAL_FELICA_CONFIG_RC, 0x01);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b928:	2201      	movs	r2, #1
 800b92a:	2100      	movs	r1, #0
 800b92c:	4618      	mov	r0, r3
 800b92e:	f008 fc7a 	bl	8014226 <phpalFelica_Sw_SetConfig>
 800b932:	4603      	mov	r3, r0
 800b934:	81bb      	strh	r3, [r7, #12]
            PH_CHECK_SUCCESS(status);
 800b936:	89bb      	ldrh	r3, [r7, #12]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d001      	beq.n	800b940 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1c0>
 800b93c:	89bb      	ldrh	r3, [r7, #12]
 800b93e:	e017      	b.n	800b970 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>

            status = phacDiscLoop_Sw_Int_SendSensFReq(pDataParams, PHPAL_FELICA_NUMSLOTS_16, wCurrentBaudBitPos);
 800b940:	897b      	ldrh	r3, [r7, #10]
 800b942:	461a      	mov	r2, r3
 800b944:	210f      	movs	r1, #15
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f7ff fe2f 	bl	800b5aa <phacDiscLoop_Sw_Int_SendSensFReq>
 800b94c:	4603      	mov	r3, r0
 800b94e:	81bb      	strh	r3, [r7, #12]
            /* Symbol 7 */
            /* The NFC Forum Device SHALL check for any Valid SENSF_RES Response(s) received during processing of Symbol 4
             * whether an identical entry already exists in GRE_SENSF_RES[], and if not, store the SENSF_RES in GRE_SENSF_RES[]
             */
         }
        bIndex++;
 800b950:	7bfb      	ldrb	r3, [r7, #15]
 800b952:	3301      	adds	r3, #1
 800b954:	73fb      	strb	r3, [r7, #15]
    while(bIndex < pDataParams->sTypeFTargetInfo.bTotalTagsFound)
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800b95c:	7bfa      	ldrb	r2, [r7, #15]
 800b95e:	429a      	cmp	r2, r3
 800b960:	d3c8      	bcc.n	800b8f4 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x174>
    } /* while(bIndex < pDataParams->sTypeFTargetInfo.bTotalTagsFound) */

    pDataParams->bNumOfCards = pDataParams->sTypeFTargetInfo.bTotalTagsFound;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    return PH_ERR_SUCCESS;
 800b96e:	2300      	movs	r3, #0
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */
}
 800b970:	4618      	mov	r0, r3
 800b972:	3710      	adds	r7, #16
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}

0800b978 <phacDiscLoop_Sw_Int_ActivateF>:

phStatus_t phacDiscLoop_Sw_Int_ActivateF(
                                         phacDiscLoop_Sw_DataParams_t * pDataParams,
                                         uint8_t  bTypeFTagIdx
                                         )
{
 800b978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b97c:	b092      	sub	sp, #72	@ 0x48
 800b97e:	af06      	add	r7, sp, #24
 800b980:	6078      	str	r0, [r7, #4]
 800b982:	460b      	mov	r3, r1
 800b984:	70fb      	strb	r3, [r7, #3]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    phStatus_t PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 800b986:	2300      	movs	r3, #0
 800b988:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    uint8_t    PH_MEMLOC_REM bIsDuplicate = 0x00;
 800b98a:	2300      	movs	r3, #0
 800b98c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint8_t    PH_MEMLOC_BUF baSystemCode[2] = {PHPAL_FELICA_SYSTEM_CODE_BYTE_0,
 800b990:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b994:	853b      	strh	r3, [r7, #40]	@ 0x28
                                                PHPAL_FELICA_SYSTEM_CODE_BYTE_1};
    uint8_t *  PH_MEMLOC_REM pRxBuff = NULL;
 800b996:	2300      	movs	r3, #0
 800b998:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t *  PH_MEMLOC_REM pId = NULL;
 800b99a:	2300      	movs	r3, #0
 800b99c:	623b      	str	r3, [r7, #32]
    uint16_t   PH_MEMLOC_REM wFrameStatus;
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS
    uint8_t    PH_MEMLOC_BUF aNfcId3[10];
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS */

    if ((bTypeFTagIdx >= pDataParams->sTypeFTargetInfo.bTotalTagsFound) || ( bTypeFTagIdx >= PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED ))
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800b9a4:	78fa      	ldrb	r2, [r7, #3]
 800b9a6:	429a      	cmp	r2, r3
 800b9a8:	d202      	bcs.n	800b9b0 <phacDiscLoop_Sw_Int_ActivateF+0x38>
 800b9aa:	78fb      	ldrb	r3, [r7, #3]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d002      	beq.n	800b9b6 <phacDiscLoop_Sw_Int_ActivateF+0x3e>
    {
        /* Out of range or no such card found yet */
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800b9b0:	f244 0321 	movw	r3, #16417	@ 0x4021
 800b9b4:	e105      	b.n	800bbc2 <phacDiscLoop_Sw_Int_ActivateF+0x24a>
    }

    /* set given card ID to FeliCa data param */
    PH_CHECK_SUCCESS_FCT(status, phpalFelica_SetSerialNo(
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b9ba:	78fa      	ldrb	r2, [r7, #3]
 800b9bc:	4613      	mov	r3, r2
 800b9be:	005b      	lsls	r3, r3, #1
 800b9c0:	4413      	add	r3, r2
 800b9c2:	00da      	lsls	r2, r3, #3
 800b9c4:	1ad2      	subs	r2, r2, r3
 800b9c6:	f102 0390 	add.w	r3, r2, #144	@ 0x90
 800b9ca:	687a      	ldr	r2, [r7, #4]
 800b9cc:	4413      	add	r3, r2
 800b9ce:	3304      	adds	r3, #4
 800b9d0:	4619      	mov	r1, r3
 800b9d2:	f008 fc14 	bl	80141fe <phpalFelica_Sw_SetSerialNo>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800b9da:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d001      	beq.n	800b9e4 <phacDiscLoop_Sw_Int_ActivateF+0x6c>
 800b9e0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b9e2:	e0ee      	b.n	800bbc2 <phacDiscLoop_Sw_Int_ActivateF+0x24a>
                                                         pDataParams->pPalFelicaDataParams,
                                                         pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].aIDmPMm)
                                                        );
    /* Symbol 0 */
    if ((pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].aIDmPMm[0] == 0x01U) &&
 800b9e4:	78fa      	ldrb	r2, [r7, #3]
 800b9e6:	6879      	ldr	r1, [r7, #4]
 800b9e8:	4613      	mov	r3, r2
 800b9ea:	005b      	lsls	r3, r3, #1
 800b9ec:	4413      	add	r3, r2
 800b9ee:	00da      	lsls	r2, r3, #3
 800b9f0:	1ad2      	subs	r2, r2, r3
 800b9f2:	188b      	adds	r3, r1, r2
 800b9f4:	3394      	adds	r3, #148	@ 0x94
 800b9f6:	781b      	ldrb	r3, [r3, #0]
 800b9f8:	2b01      	cmp	r3, #1
 800b9fa:	f040 80d6 	bne.w	800bbaa <phacDiscLoop_Sw_Int_ActivateF+0x232>
        (pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].aIDmPMm[1] == 0xFEU))
 800b9fe:	78fa      	ldrb	r2, [r7, #3]
 800ba00:	6879      	ldr	r1, [r7, #4]
 800ba02:	4613      	mov	r3, r2
 800ba04:	005b      	lsls	r3, r3, #1
 800ba06:	4413      	add	r3, r2
 800ba08:	00da      	lsls	r2, r3, #3
 800ba0a:	1ad2      	subs	r2, r2, r3
 800ba0c:	188b      	adds	r3, r1, r2
 800ba0e:	3395      	adds	r3, #149	@ 0x95
 800ba10:	781b      	ldrb	r3, [r3, #0]
    if ((pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].aIDmPMm[0] == 0x01U) &&
 800ba12:	2bfe      	cmp	r3, #254	@ 0xfe
 800ba14:	f040 80c9 	bne.w	800bbaa <phacDiscLoop_Sw_Int_ActivateF+0x232>
    {
        /* Single device is detected. Activation is already done during collision resolution */
        /* Symbol 1 */
        if (pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].bSleepAFState != 0U)
 800ba18:	78fa      	ldrb	r2, [r7, #3]
 800ba1a:	6879      	ldr	r1, [r7, #4]
 800ba1c:	4613      	mov	r3, r2
 800ba1e:	005b      	lsls	r3, r3, #1
 800ba20:	4413      	add	r3, r2
 800ba22:	00da      	lsls	r2, r3, #3
 800ba24:	1ad2      	subs	r2, r2, r3
 800ba26:	188b      	adds	r3, r1, r2
 800ba28:	33a7      	adds	r3, #167	@ 0xa7
 800ba2a:	781b      	ldrb	r3, [r3, #0]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d076      	beq.n	800bb1e <phacDiscLoop_Sw_Int_ActivateF+0x1a6>
        {
            /* Symbol 2 */
            /* SENSF_REQ with TSN := 03h, RC := 00h, SC := FFFFh */
            status = phpalFelica_SetConfig(pDataParams->pPalFelicaDataParams, PHPAL_FELICA_CONFIG_RC, 0);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba34:	2200      	movs	r2, #0
 800ba36:	2100      	movs	r1, #0
 800ba38:	4618      	mov	r0, r3
 800ba3a:	f008 fbf4 	bl	8014226 <phpalFelica_Sw_SetConfig>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            PH_CHECK_SUCCESS(status);
 800ba42:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d001      	beq.n	800ba4c <phacDiscLoop_Sw_Int_ActivateF+0xd4>
 800ba48:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ba4a:	e0ba      	b.n	800bbc2 <phacDiscLoop_Sw_Int_ActivateF+0x24a>

            status = phpalFelica_ReqC(pDataParams->pPalFelicaDataParams, baSystemCode, PHPAL_FELICA_NUMSLOTS_4, &pRxBuff, &wLen);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ba50:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800ba54:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800ba58:	f107 031e 	add.w	r3, r7, #30
 800ba5c:	9300      	str	r3, [sp, #0]
 800ba5e:	4613      	mov	r3, r2
 800ba60:	2203      	movs	r2, #3
 800ba62:	f008 fa2d 	bl	8013ec0 <phpalFelica_Sw_ReqC>
 800ba66:	4603      	mov	r3, r0
 800ba68:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            PH_CHECK_SUCCESS(status);
 800ba6a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d001      	beq.n	800ba74 <phacDiscLoop_Sw_Int_ActivateF+0xfc>
 800ba70:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ba72:	e0a6      	b.n	800bbc2 <phacDiscLoop_Sw_Int_ActivateF+0x24a>

            /* Symbol 3 */
            pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].bSleepAFState = 0U;
 800ba74:	78fa      	ldrb	r2, [r7, #3]
 800ba76:	6879      	ldr	r1, [r7, #4]
 800ba78:	4613      	mov	r3, r2
 800ba7a:	005b      	lsls	r3, r3, #1
 800ba7c:	4413      	add	r3, r2
 800ba7e:	00da      	lsls	r2, r3, #3
 800ba80:	1ad2      	subs	r2, r2, r3
 800ba82:	188b      	adds	r3, r1, r2
 800ba84:	33a7      	adds	r3, #167	@ 0xa7
 800ba86:	2200      	movs	r2, #0
 800ba88:	701a      	strb	r2, [r3, #0]

            PH_CHECK_SUCCESS_FCT(status, phpalFelica_GetConfig(pDataParams->pPalFelicaDataParams, PH_PALFELICA_CONFIG_NUM_RESPONSE_FRAMES, &wFrames));
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba8e:	f107 021c 	add.w	r2, r7, #28
 800ba92:	2101      	movs	r1, #1
 800ba94:	4618      	mov	r0, r3
 800ba96:	f008 fbfe 	bl	8014296 <phpalFelica_Sw_GetConfig>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800ba9e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d02e      	beq.n	800bb02 <phacDiscLoop_Sw_Int_ActivateF+0x18a>
 800baa4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800baa6:	e08c      	b.n	800bbc2 <phacDiscLoop_Sw_Int_ActivateF+0x24a>

                while((0U != wFrames) && (0U == bIsDuplicate))
                {
                    IdLen = 0x00;
 800baa8:	2300      	movs	r3, #0
 800baaa:	76fb      	strb	r3, [r7, #27]
                    wFrameStatus = 0x00;
 800baac:	2300      	movs	r3, #0
 800baae:	833b      	strh	r3, [r7, #24]

                    PH_CHECK_SUCCESS_FCT(status, phpalFelica_GetFrameInfo(
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800bab4:	8bbb      	ldrh	r3, [r7, #28]
 800bab6:	b2d9      	uxtb	r1, r3
 800bab8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800baba:	f107 0418 	add.w	r4, r7, #24
 800babe:	f107 031b 	add.w	r3, r7, #27
 800bac2:	9301      	str	r3, [sp, #4]
 800bac4:	f107 0320 	add.w	r3, r7, #32
 800bac8:	9300      	str	r3, [sp, #0]
 800baca:	4623      	mov	r3, r4
 800bacc:	f008 fb0e 	bl	80140ec <phpalFelica_Sw_GetFrameInfo>
 800bad0:	4603      	mov	r3, r0
 800bad2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800bad4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d001      	beq.n	800bade <phacDiscLoop_Sw_Int_ActivateF+0x166>
 800bada:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800badc:	e071      	b.n	800bbc2 <phacDiscLoop_Sw_Int_ActivateF+0x24a>
                        &pId,
                        &IdLen));

                    /* Check Device ID into greedy collection  */
                    /* Check Same response already present or not */
                    PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_CheckForDuplication(
 800bade:	6a3b      	ldr	r3, [r7, #32]
 800bae0:	f107 022d 	add.w	r2, r7, #45	@ 0x2d
 800bae4:	4619      	mov	r1, r3
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f7ff fc84 	bl	800b3f4 <phacDiscLoop_Sw_Int_CheckForDuplication>
 800baec:	4603      	mov	r3, r0
 800baee:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800baf0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d001      	beq.n	800bafa <phacDiscLoop_Sw_Int_ActivateF+0x182>
 800baf6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800baf8:	e063      	b.n	800bbc2 <phacDiscLoop_Sw_Int_ActivateF+0x24a>
                        pDataParams,
                        pId,
                        &bIsDuplicate));

                    wFrames--;
 800bafa:	8bbb      	ldrh	r3, [r7, #28]
 800bafc:	3b01      	subs	r3, #1
 800bafe:	b29b      	uxth	r3, r3
 800bb00:	83bb      	strh	r3, [r7, #28]
                while((0U != wFrames) && (0U == bIsDuplicate))
 800bb02:	8bbb      	ldrh	r3, [r7, #28]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d003      	beq.n	800bb10 <phacDiscLoop_Sw_Int_ActivateF+0x198>
 800bb08:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d0cb      	beq.n	800baa8 <phacDiscLoop_Sw_Int_ActivateF+0x130>
                }

            /* If same response is not present means Device not present
             * or some other error has occurred
             * Report DiscLoop Failure in this case */
            if(0U == (bIsDuplicate))
 800bb10:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d102      	bne.n	800bb1e <phacDiscLoop_Sw_Int_ActivateF+0x1a6>
            {
                return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_FAILURE, PH_COMP_AC_DISCLOOP);
 800bb18:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 800bb1c:	e051      	b.n	800bbc2 <phacDiscLoop_Sw_Int_ActivateF+0x24a>
            }
        }
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS
        /* Symbol 4 */
        (void)memcpy(aNfcId3, pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].aIDmPMm, PHAC_DISCLOOP_FELICA_IDM_LENGTH);
 800bb1e:	78fa      	ldrb	r2, [r7, #3]
 800bb20:	4613      	mov	r3, r2
 800bb22:	005b      	lsls	r3, r3, #1
 800bb24:	4413      	add	r3, r2
 800bb26:	00da      	lsls	r2, r3, #3
 800bb28:	1ad2      	subs	r2, r2, r3
 800bb2a:	f102 0390 	add.w	r3, r2, #144	@ 0x90
 800bb2e:	687a      	ldr	r2, [r7, #4]
 800bb30:	4413      	add	r3, r2
 800bb32:	1d19      	adds	r1, r3, #4
 800bb34:	f107 030c 	add.w	r3, r7, #12
 800bb38:	2208      	movs	r2, #8
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f014 ff29 	bl	8020992 <memcpy>

        aNfcId3[8] = 0;
 800bb40:	2300      	movs	r3, #0
 800bb42:	753b      	strb	r3, [r7, #20]
        aNfcId3[9] = 0;
 800bb44:	2300      	movs	r3, #0
 800bb46:	757b      	strb	r3, [r7, #21]

        /* Activate the P2P capable FeliCa card */
        PH_CHECK_SUCCESS_FCT(status, phpalI18092mPI_Atr(
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f893 e0ac 	ldrb.w	lr, [r3, #172]	@ 0xac
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f893 80ad 	ldrb.w	r8, [r3, #173]	@ 0xad
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 800bb5e:	687a      	ldr	r2, [r7, #4]
 800bb60:	f892 20af 	ldrb.w	r2, [r2, #175]	@ 0xaf
 800bb64:	6879      	ldr	r1, [r7, #4]
 800bb66:	f8d1 10b0 	ldr.w	r1, [r1, #176]	@ 0xb0
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f890 00b4 	ldrb.w	r0, [r0, #180]	@ 0xb4
 800bb70:	687c      	ldr	r4, [r7, #4]
 800bb72:	f8d4 40b8 	ldr.w	r4, [r4, #184]	@ 0xb8
 800bb76:	687d      	ldr	r5, [r7, #4]
 800bb78:	35bc      	adds	r5, #188	@ 0xbc
 800bb7a:	f107 0c0c 	add.w	ip, r7, #12
 800bb7e:	9505      	str	r5, [sp, #20]
 800bb80:	9404      	str	r4, [sp, #16]
 800bb82:	9003      	str	r0, [sp, #12]
 800bb84:	9102      	str	r1, [sp, #8]
 800bb86:	9201      	str	r2, [sp, #4]
 800bb88:	9300      	str	r3, [sp, #0]
 800bb8a:	4643      	mov	r3, r8
 800bb8c:	4672      	mov	r2, lr
 800bb8e:	4661      	mov	r1, ip
 800bb90:	4630      	mov	r0, r6
 800bb92:	f00c fb05 	bl	80181a0 <phpalI18092mPI_Sw_Atr>
 800bb96:	4603      	mov	r3, r0
 800bb98:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800bb9a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d001      	beq.n	800bba4 <phacDiscLoop_Sw_Int_ActivateF+0x22c>
 800bba0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800bba2:	e00e      	b.n	800bbc2 <phacDiscLoop_Sw_Int_ActivateF+0x24a>
            pDataParams->sTypeFTargetInfo.sTypeF_P2P.pGi,
            pDataParams->sTypeFTargetInfo.sTypeF_P2P.bGiLength,
            pDataParams->sTypeFTargetInfo.sTypeF_P2P.pAtrRes,
            &(pDataParams->sTypeFTargetInfo.sTypeF_P2P.bAtrResLength)));

        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_PASSIVE_TARGET_ACTIVATED, PH_COMP_AC_DISCLOOP);
 800bba4:	f244 038d 	movw	r3, #16525	@ 0x408d
 800bba8:	e00b      	b.n	800bbc2 <phacDiscLoop_Sw_Int_ActivateF+0x24a>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS */
    }
    else
    {
       /* Symbol 7 */
       pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].bSleepAFState = 0U;
 800bbaa:	78fa      	ldrb	r2, [r7, #3]
 800bbac:	6879      	ldr	r1, [r7, #4]
 800bbae:	4613      	mov	r3, r2
 800bbb0:	005b      	lsls	r3, r3, #1
 800bbb2:	4413      	add	r3, r2
 800bbb4:	00da      	lsls	r2, r3, #3
 800bbb6:	1ad2      	subs	r2, r2, r3
 800bbb8:	188b      	adds	r3, r1, r2
 800bbba:	33a7      	adds	r3, #167	@ 0xa7
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	701a      	strb	r2, [r3, #0]
    }
    return PH_ERR_SUCCESS;
 800bbc0:	2300      	movs	r3, #0
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	3730      	adds	r7, #48	@ 0x30
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bbcc <phacDiscLoop_Sw_Int_Config_GTF>:
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
phStatus_t phacDiscLoop_Sw_Int_Config_GTF(
                                          phacDiscLoop_Sw_DataParams_t * pDataParams,
                                          uint8_t bTechIndex
                                          )
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b084      	sub	sp, #16
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
 800bbd4:	460b      	mov	r3, r1
 800bbd6:	70fb      	strb	r3, [r7, #3]
    phStatus_t PH_MEMLOC_REM wStatus = PH_ERR_INTERNAL_ERROR;
 800bbd8:	237f      	movs	r3, #127	@ 0x7f
 800bbda:	81fb      	strh	r3, [r7, #14]
    /*
     * If either one of FeliCa 212 or FeliCa 424 is polled after Type B polling,
     * then GTbf is applied. Default value is 15.3 ms (PH_NXPNFCRDLIB_CONFIG_B_TO_F_GT).
     * In this case Type B poll is followed by FeliCa poll.
     */
    if((0U != ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_B))) &&
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	789b      	ldrb	r3, [r3, #2]
 800bbe0:	f003 0302 	and.w	r3, r3, #2
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d01e      	beq.n	800bc26 <phacDiscLoop_Sw_Int_Config_GTF+0x5a>
        ((pDataParams->bFelicaBaud == PHAC_DISCLOOP_CON_BITR_212) ||
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
    if((0U != ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_B))) &&
 800bbee:	2b04      	cmp	r3, #4
 800bbf0:	d00a      	beq.n	800bc08 <phacDiscLoop_Sw_Int_Config_GTF+0x3c>
        ((pDataParams->bFelicaBaud == PHAC_DISCLOOP_CON_BITR_424) &&
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
        ((pDataParams->bFelicaBaud == PHAC_DISCLOOP_CON_BITR_212) ||
 800bbf8:	2b08      	cmp	r3, #8
 800bbfa:	d114      	bne.n	800bc26 <phacDiscLoop_Sw_Int_Config_GTF+0x5a>
        (0U == ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F212))))))
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	789b      	ldrb	r3, [r3, #2]
 800bc00:	f003 0304 	and.w	r3, r3, #4
        ((pDataParams->bFelicaBaud == PHAC_DISCLOOP_CON_BITR_424) &&
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d10e      	bne.n	800bc26 <phacDiscLoop_Sw_Int_Config_GTF+0x5a>
    {
        /* apply guard time GTBF */
        PH_CHECK_SUCCESS_FCT(wStatus, phhalHw_SetConfig(
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	8adb      	ldrh	r3, [r3, #22]
 800bc10:	461a      	mov	r2, r3
 800bc12:	2135      	movs	r1, #53	@ 0x35
 800bc14:	f002 fdc0 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	81fb      	strh	r3, [r7, #14]
 800bc1c:	89fb      	ldrh	r3, [r7, #14]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d010      	beq.n	800bc44 <phacDiscLoop_Sw_Int_Config_GTF+0x78>
 800bc22:	89fb      	ldrh	r3, [r7, #14]
 800bc24:	e02a      	b.n	800bc7c <phacDiscLoop_Sw_Int_Config_GTF+0xb0>
        /*
         * If Type F polling is not preceded by a Type B poll apply guard time GTFB
         * Default value of GTFB is 20.4ms (PH_NXPNFCRDLIB_CONFIG_TYPEF_GT).
         *
         */
        PH_CHECK_SUCCESS_FCT(wStatus, phhalHw_SetConfig(
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	8a9b      	ldrh	r3, [r3, #20]
 800bc2e:	461a      	mov	r2, r3
 800bc30:	2135      	movs	r1, #53	@ 0x35
 800bc32:	f002 fdb1 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 800bc36:	4603      	mov	r3, r0
 800bc38:	81fb      	strh	r3, [r7, #14]
 800bc3a:	89fb      	ldrh	r3, [r7, #14]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d001      	beq.n	800bc44 <phacDiscLoop_Sw_Int_Config_GTF+0x78>
 800bc40:	89fb      	ldrh	r3, [r7, #14]
 800bc42:	e01b      	b.n	800bc7c <phacDiscLoop_Sw_Int_Config_GTF+0xb0>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
            pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F212]));
    }

    if ((uint8_t)PHAC_DISCLOOP_TECH_TYPE_F424 == bTechIndex)
 800bc44:	78fb      	ldrb	r3, [r7, #3]
 800bc46:	2b03      	cmp	r3, #3
 800bc48:	d10b      	bne.n	800bc62 <phacDiscLoop_Sw_Int_Config_GTF+0x96>
    {
        PH_CHECK_SUCCESS_FCT(wStatus, phacDiscLoop_SetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_TYPEF_CUR_BAUD, PHAC_DISCLOOP_CON_BITR_424));
 800bc4a:	2208      	movs	r2, #8
 800bc4c:	2157      	movs	r1, #87	@ 0x57
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f7fc fac2 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 800bc54:	4603      	mov	r3, r0
 800bc56:	81fb      	strh	r3, [r7, #14]
 800bc58:	89fb      	ldrh	r3, [r7, #14]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d00d      	beq.n	800bc7a <phacDiscLoop_Sw_Int_Config_GTF+0xae>
 800bc5e:	89fb      	ldrh	r3, [r7, #14]
 800bc60:	e00c      	b.n	800bc7c <phacDiscLoop_Sw_Int_Config_GTF+0xb0>
    }
    else
    {
        PH_CHECK_SUCCESS_FCT(wStatus, phacDiscLoop_SetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_TYPEF_CUR_BAUD, PHAC_DISCLOOP_CON_BITR_212));
 800bc62:	2204      	movs	r2, #4
 800bc64:	2157      	movs	r1, #87	@ 0x57
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f7fc fab6 	bl	80081d8 <phacDiscLoop_Sw_SetConfig>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	81fb      	strh	r3, [r7, #14]
 800bc70:	89fb      	ldrh	r3, [r7, #14]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d001      	beq.n	800bc7a <phacDiscLoop_Sw_Int_Config_GTF+0xae>
 800bc76:	89fb      	ldrh	r3, [r7, #14]
 800bc78:	e000      	b.n	800bc7c <phacDiscLoop_Sw_Int_Config_GTF+0xb0>
    }

    return PH_ERR_SUCCESS;
 800bc7a:	2300      	movs	r3, #0
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3710      	adds	r7, #16
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}

0800bc84 <phacDiscLoop_Sw_DetTechTypeI18000p3m3>:
 * Private Functions
 * ****************************************************************************/
phStatus_t phacDiscLoop_Sw_DetTechTypeI18000p3m3(
                                                 phacDiscLoop_Sw_DataParams_t *pDataParams
                                                 )
{
 800bc84:	b590      	push	{r4, r7, lr}
 800bc86:	b09b      	sub	sp, #108	@ 0x6c
 800bc88:	af08      	add	r7, sp, #32
 800bc8a:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    phStatus_t PH_MEMLOC_REM status;
    uint8_t    PH_MEMLOC_BUF aSelectCmd[39] = {0};
 800bc8c:	f107 031c 	add.w	r3, r7, #28
 800bc90:	2227      	movs	r2, #39	@ 0x27
 800bc92:	2100      	movs	r1, #0
 800bc94:	4618      	mov	r0, r3
 800bc96:	f014 fdfd 	bl	8020894 <memset>
    uint8_t    PH_MEMLOC_REM wSelectCmdLen;
    uint8_t    PH_MEMLOC_REM bSelectCmdValidBits;
    uint8_t    PH_MEMLOC_BUF aBeginRoundCmd[3] = {0};
 800bc9a:	f107 0314 	add.w	r3, r7, #20
 800bc9e:	2100      	movs	r1, #0
 800bca0:	460a      	mov	r2, r1
 800bca2:	801a      	strh	r2, [r3, #0]
 800bca4:	460a      	mov	r2, r1
 800bca6:	709a      	strb	r2, [r3, #2]
    uint8_t    PH_MEMLOC_REM bEmptyPointer = 0;
 800bca8:	2300      	movs	r3, #0
 800bcaa:	74fb      	strb	r3, [r7, #19]
    uint8_t    PH_MEMLOC_REM *pRxBuffer = NULL;
 800bcac:	2300      	movs	r3, #0
 800bcae:	60fb      	str	r3, [r7, #12]
    uint16_t   PH_MEMLOC_REM wRxBufferLen = 0;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	817b      	strh	r3, [r7, #10]

    /* Create select command frame */
    PH_CHECK_SUCCESS_FCT(status, phpalI18000p3m3_CreateSelectCmd(
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800bcb8:	f107 031a 	add.w	r3, r7, #26
 800bcbc:	9307      	str	r3, [sp, #28]
 800bcbe:	f107 031b 	add.w	r3, r7, #27
 800bcc2:	9306      	str	r3, [sp, #24]
 800bcc4:	f107 031c 	add.w	r3, r7, #28
 800bcc8:	9305      	str	r3, [sp, #20]
 800bcca:	2300      	movs	r3, #0
 800bccc:	9304      	str	r3, [sp, #16]
 800bcce:	2300      	movs	r3, #0
 800bcd0:	9303      	str	r3, [sp, #12]
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	9302      	str	r3, [sp, #8]
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	9301      	str	r3, [sp, #4]
 800bcda:	f107 0313 	add.w	r3, r7, #19
 800bcde:	9300      	str	r3, [sp, #0]
 800bce0:	2301      	movs	r3, #1
 800bce2:	2200      	movs	r2, #0
 800bce4:	2100      	movs	r1, #0
 800bce6:	f00c f837 	bl	8017d58 <phpalI18000p3m3_Sw_CreateSelectCmd>
 800bcea:	4603      	mov	r3, r0
 800bcec:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800bcf0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d002      	beq.n	800bcfe <phacDiscLoop_Sw_DetTechTypeI18000p3m3+0x7a>
 800bcf8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bcfc:	e043      	b.n	800bd86 <phacDiscLoop_Sw_DetTechTypeI18000p3m3+0x102>
        aSelectCmd,
        &wSelectCmdLen,
        &bSelectCmdValidBits));

    /* Create BeginRound command frame */
    PH_CHECK_SUCCESS_FCT(status, phpalI18000p3m3_CreateBeginRoundCmd(
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f893 10ee 	ldrb.w	r1, [r3, #238]	@ 0xee
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f893 20ed 	ldrb.w	r2, [r3, #237]	@ 0xed
 800bd0e:	f107 0314 	add.w	r3, r7, #20
 800bd12:	9304      	str	r3, [sp, #16]
 800bd14:	2300      	movs	r3, #0
 800bd16:	9303      	str	r3, [sp, #12]
 800bd18:	2300      	movs	r3, #0
 800bd1a:	9302      	str	r3, [sp, #8]
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	9301      	str	r3, [sp, #4]
 800bd20:	2300      	movs	r3, #0
 800bd22:	9300      	str	r3, [sp, #0]
 800bd24:	2300      	movs	r3, #0
 800bd26:	f00c f930 	bl	8017f8a <phpalI18000p3m3_Sw_CreateBeginRoundCmd>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800bd30:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d002      	beq.n	800bd3e <phacDiscLoop_Sw_DetTechTypeI18000p3m3+0xba>
 800bd38:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bd3c:	e023      	b.n	800bd86 <phacDiscLoop_Sw_DetTechTypeI18000p3m3+0x102>
        0,
        0,
        aBeginRoundCmd));

    /* Inventory with 1 slot */
    status = phhalHw_I18000p3m3Inventory(
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800bd42:	7efa      	ldrb	r2, [r7, #27]
 800bd44:	7ebc      	ldrb	r4, [r7, #26]
 800bd46:	f107 011c 	add.w	r1, r7, #28
 800bd4a:	f107 030a 	add.w	r3, r7, #10
 800bd4e:	9303      	str	r3, [sp, #12]
 800bd50:	f107 030c 	add.w	r3, r7, #12
 800bd54:	9302      	str	r3, [sp, #8]
 800bd56:	2301      	movs	r3, #1
 800bd58:	9301      	str	r3, [sp, #4]
 800bd5a:	f107 0314 	add.w	r3, r7, #20
 800bd5e:	9300      	str	r3, [sp, #0]
 800bd60:	4623      	mov	r3, r4
 800bd62:	f005 f8bd 	bl	8010ee0 <phhalHw_Pn5180_I18000p3m3Inventory>
 800bd66:	4603      	mov	r3, r0
 800bd68:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        aBeginRoundCmd,
        PHHAL_HW_I18000P3M3_ONE_TS_ONLY,
        &pRxBuffer,
        &wRxBufferLen);

    if(0u != (phacDiscLoop_Sw_Int_IsValidPollStatus(status)))
 800bd6c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bd70:	4618      	mov	r0, r3
 800bd72:	f7fe f95c 	bl	800a02e <phacDiscLoop_Sw_Int_IsValidPollStatus>
 800bd76:	4603      	mov	r3, r0
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d002      	beq.n	800bd82 <phacDiscLoop_Sw_DetTechTypeI18000p3m3+0xfe>
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 800bd7c:	f244 0387 	movw	r3, #16519	@ 0x4087
 800bd80:	e001      	b.n	800bd86 <phacDiscLoop_Sw_DetTechTypeI18000p3m3+0x102>
    }
    else
    {
        return status;
 800bd82:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
    }
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */
}
 800bd86:	4618      	mov	r0, r3
 800bd88:	374c      	adds	r7, #76	@ 0x4c
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd90      	pop	{r4, r7, pc}

0800bd8e <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3>:

phStatus_t phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3(
                                                             phacDiscLoop_Sw_DataParams_t *pDataParams
                                                             )
{
 800bd8e:	b590      	push	{r4, r7, lr}
 800bd90:	b09b      	sub	sp, #108	@ 0x6c
 800bd92:	af08      	add	r7, sp, #32
 800bd94:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    phStatus_t PH_MEMLOC_REM status;
    uint8_t    PH_MEMLOC_COUNT bQ = 4;
 800bd96:	2304      	movs	r3, #4
 800bd98:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    uint8_t    PH_MEMLOC_BUF aSelectCmd[39] = {0};
 800bd9c:	f107 0318 	add.w	r3, r7, #24
 800bda0:	2227      	movs	r2, #39	@ 0x27
 800bda2:	2100      	movs	r1, #0
 800bda4:	4618      	mov	r0, r3
 800bda6:	f014 fd75 	bl	8020894 <memset>
    uint8_t   PH_MEMLOC_REM wSelectCmdLen;
    uint8_t    PH_MEMLOC_REM bSelectCmdValidBits;
    uint8_t    PH_MEMLOC_BUF aBeginRoundCmd[3] = {0};
 800bdaa:	f107 0310 	add.w	r3, r7, #16
 800bdae:	2100      	movs	r1, #0
 800bdb0:	460a      	mov	r2, r1
 800bdb2:	801a      	strh	r2, [r3, #0]
 800bdb4:	460a      	mov	r2, r1
 800bdb6:	709a      	strb	r2, [r3, #2]
    uint8_t    PH_MEMLOC_REM *pRxBuffer = NULL;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	60fb      	str	r3, [r7, #12]
    uint16_t   PH_MEMLOC_REM wRxBufferLen = 0;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	817b      	strh	r3, [r7, #10]
    uint8_t    PH_MEMLOC_REM bEmptyPointer = 0;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	727b      	strb	r3, [r7, #9]
    uint8_t    PH_MEMLOC_REM bMoreCardsPresent;
    uint16_t   PH_MEMLOC_REM wIndex;
    uint8_t    PH_MEMLOC_REM bPcLength;
    uint8_t    PH_MEMLOC_REM bPacketCrcLen;

    wRxBufferLen = 0;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	817b      	strh	r3, [r7, #10]
    /* Reset collision pending flag */
    pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	7f9b      	ldrb	r3, [r3, #30]
 800bdcc:	f023 0320 	bic.w	r3, r3, #32
 800bdd0:	b2da      	uxtb	r2, r3
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	779a      	strb	r2, [r3, #30]

    /* Reset detected tag count */
    pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound = 0;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
    pDataParams->bNumOfCards = 0;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2200      	movs	r2, #0
 800bde2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    /* Reset more card present flag */
    bMoreCardsPresent = PH_OFF;
 800bde6:	2300      	movs	r3, #0
 800bde8:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

    /* Apply Guard time. */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	8b5b      	ldrh	r3, [r3, #26]
 800bdf4:	461a      	mov	r2, r3
 800bdf6:	2135      	movs	r1, #53	@ 0x35
 800bdf8:	f002 fcce 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800be02:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800be06:	2b00      	cmp	r3, #0
 800be08:	d002      	beq.n	800be10 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x82>
 800be0a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800be0e:	e1c5      	b.n	800c19c <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_18000P3M3]));

    /* Configure HW for the Type 18000p3m3 technology */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be14:	2106      	movs	r1, #6
 800be16:	4618      	mov	r0, r3
 800be18:	f001 ff42 	bl	800dca0 <phhalHw_Pn5180_ApplyProtocolSettings>
 800be1c:	4603      	mov	r3, r0
 800be1e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800be22:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800be26:	2b00      	cmp	r3, #0
 800be28:	d002      	beq.n	800be30 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0xa2>
 800be2a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800be2e:	e1b5      	b.n	800c19c <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>
        pDataParams->pHalDataParams,
        PHHAL_HW_CARDTYPE_I18000P3M3));

    /* Reset detected tag count */
    pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound = 0;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2200      	movs	r2, #0
 800be34:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
    pDataParams->bNumOfCards = 0;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2200      	movs	r2, #0
 800be3c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    /* Create select command frame */
    PH_CHECK_SUCCESS_FCT(status, phpalI18000p3m3_CreateSelectCmd(
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800be44:	f107 0316 	add.w	r3, r7, #22
 800be48:	9307      	str	r3, [sp, #28]
 800be4a:	f107 0317 	add.w	r3, r7, #23
 800be4e:	9306      	str	r3, [sp, #24]
 800be50:	f107 0318 	add.w	r3, r7, #24
 800be54:	9305      	str	r3, [sp, #20]
 800be56:	2300      	movs	r3, #0
 800be58:	9304      	str	r3, [sp, #16]
 800be5a:	2300      	movs	r3, #0
 800be5c:	9303      	str	r3, [sp, #12]
 800be5e:	2300      	movs	r3, #0
 800be60:	9302      	str	r3, [sp, #8]
 800be62:	2300      	movs	r3, #0
 800be64:	9301      	str	r3, [sp, #4]
 800be66:	f107 0309 	add.w	r3, r7, #9
 800be6a:	9300      	str	r3, [sp, #0]
 800be6c:	2301      	movs	r3, #1
 800be6e:	2200      	movs	r2, #0
 800be70:	2100      	movs	r1, #0
 800be72:	f00b ff71 	bl	8017d58 <phpalI18000p3m3_Sw_CreateSelectCmd>
 800be76:	4603      	mov	r3, r0
 800be78:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800be7c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800be80:	2b00      	cmp	r3, #0
 800be82:	d002      	beq.n	800be8a <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0xfc>
 800be84:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800be88:	e188      	b.n	800c19c <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>
        &wSelectCmdLen,
        &bSelectCmdValidBits));

    do
    {
        if((status & PH_ERR_MASK) == PH_ERR_SUCCESS_CHAINING)
 800be8a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800be8e:	b2db      	uxtb	r3, r3
 800be90:	2b71      	cmp	r3, #113	@ 0x71
 800be92:	d113      	bne.n	800bebc <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x12e>
        {
            /* Resume Inventory */
            status = phhalHw_I18000p3m3ResumeInventory(
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be98:	f107 020a 	add.w	r2, r7, #10
 800be9c:	f107 010c 	add.w	r1, r7, #12
 800bea0:	4618      	mov	r0, r3
 800bea2:	f005 f9b5 	bl	8011210 <phhalHw_Pn5180_18000p3m3ResumeInventory>
 800bea6:	4603      	mov	r3, r0
 800bea8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                pDataParams->pHalDataParams,
                &pRxBuffer,
                &wRxBufferLen);
            /* Return if status is aborted. */
            PH_CHECK_ABORT(status);
 800beac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800beb0:	b2db      	uxtb	r3, r3
 800beb2:	2b12      	cmp	r3, #18
 800beb4:	d150      	bne.n	800bf58 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x1ca>
 800beb6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800beba:	e16f      	b.n	800c19c <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>
        }
        else
        {
            /* Create BeginRound command frame with Q value */
            PH_CHECK_SUCCESS_FCT(status, phpalI18000p3m3_CreateBeginRoundCmd(
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f893 10ee 	ldrb.w	r1, [r3, #238]	@ 0xee
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f893 40ed 	ldrb.w	r4, [r3, #237]	@ 0xed
 800becc:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800bed0:	1c5a      	adds	r2, r3, #1
 800bed2:	f887 2045 	strb.w	r2, [r7, #69]	@ 0x45
 800bed6:	f107 0210 	add.w	r2, r7, #16
 800beda:	9204      	str	r2, [sp, #16]
 800bedc:	9303      	str	r3, [sp, #12]
 800bede:	2300      	movs	r3, #0
 800bee0:	9302      	str	r3, [sp, #8]
 800bee2:	2300      	movs	r3, #0
 800bee4:	9301      	str	r3, [sp, #4]
 800bee6:	2300      	movs	r3, #0
 800bee8:	9300      	str	r3, [sp, #0]
 800beea:	2300      	movs	r3, #0
 800beec:	4622      	mov	r2, r4
 800beee:	f00c f84c 	bl	8017f8a <phpalI18000p3m3_Sw_CreateBeginRoundCmd>
 800bef2:	4603      	mov	r3, r0
 800bef4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800bef8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800befc:	2b00      	cmp	r3, #0
 800befe:	d002      	beq.n	800bf06 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x178>
 800bf00:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bf04:	e14a      	b.n	800c19c <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>
                0,
                bQ++,
                aBeginRoundCmd));

            /* Inventory */
            status = phhalHw_I18000p3m3Inventory(
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800bf0a:	7dfa      	ldrb	r2, [r7, #23]
 800bf0c:	7dbc      	ldrb	r4, [r7, #22]
 800bf0e:	f107 0118 	add.w	r1, r7, #24
 800bf12:	f107 030a 	add.w	r3, r7, #10
 800bf16:	9303      	str	r3, [sp, #12]
 800bf18:	f107 030c 	add.w	r3, r7, #12
 800bf1c:	9302      	str	r3, [sp, #8]
 800bf1e:	2300      	movs	r3, #0
 800bf20:	9301      	str	r3, [sp, #4]
 800bf22:	f107 0310 	add.w	r3, r7, #16
 800bf26:	9300      	str	r3, [sp, #0]
 800bf28:	4623      	mov	r3, r4
 800bf2a:	f004 ffd9 	bl	8010ee0 <phhalHw_Pn5180_I18000p3m3Inventory>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                aBeginRoundCmd,
                PHHAL_HW_I18000P3M3_GET_MAX_RESPS,
                &pRxBuffer,
                &wRxBufferLen);
            /* Return if status is aborted. */
            PH_CHECK_ABORT(status);
 800bf34:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bf38:	b2db      	uxtb	r3, r3
 800bf3a:	2b12      	cmp	r3, #18
 800bf3c:	d102      	bne.n	800bf44 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x1b6>
 800bf3e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bf42:	e12b      	b.n	800c19c <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>

            /* Reset more card present flag */
            bMoreCardsPresent = PH_OFF;
 800bf44:	2300      	movs	r3, #0
 800bf46:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

            /* Reset collision pending flag */
            pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	7f9b      	ldrb	r3, [r3, #30]
 800bf4e:	f023 0320 	bic.w	r3, r3, #32
 800bf52:	b2da      	uxtb	r2, r3
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	779a      	strb	r2, [r3, #30]
        }

        /* Reset receive buffer index */
        wIndex = 0;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

        while(wIndex < wRxBufferLen)
 800bf5e:	e0ff      	b.n	800c160 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x3d2>
        {
            if(pRxBuffer[wIndex] == 0U)
 800bf60:	68fa      	ldr	r2, [r7, #12]
 800bf62:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800bf66:	4413      	add	r3, r2
 800bf68:	781b      	ldrb	r3, [r3, #0]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	f040 80cb 	bne.w	800c106 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x378>
            {
                /* Partial bits shall be 0 as truncation is not set */
                if(pRxBuffer[wIndex + 2U] != 0U)
 800bf70:	68fa      	ldr	r2, [r7, #12]
 800bf72:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800bf76:	3302      	adds	r3, #2
 800bf78:	4413      	add	r3, r2
 800bf7a:	781b      	ldrb	r3, [r3, #0]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d002      	beq.n	800bf86 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x1f8>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_AC_DISCLOOP);
 800bf80:	f244 037f 	movw	r3, #16511	@ 0x407f
 800bf84:	e10a      	b.n	800c19c <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>
                }

                /* StoredPC/PacketPC length */
                bPcLength = 2;
 800bf86:	2302      	movs	r3, #2
 800bf88:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41

                /* PacketCRC length */
                bPacketCrcLen = 0;
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                /* Check for XPC Indicator (XI) */
                if(0u != (pRxBuffer[wIndex + 3U] & 0x02U))
 800bf92:	68fa      	ldr	r2, [r7, #12]
 800bf94:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800bf98:	3303      	adds	r3, #3
 800bf9a:	4413      	add	r3, r2
 800bf9c:	781b      	ldrb	r3, [r3, #0]
 800bf9e:	f003 0302 	and.w	r3, r3, #2
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d015      	beq.n	800bfd2 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x244>
                {
                    /* XPC_W1 length */
                    bPcLength = (uint8_t)(bPcLength + 2U);
 800bfa6:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800bfaa:	3302      	adds	r3, #2
 800bfac:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41

                    /* PacketCRC length */
                    bPacketCrcLen = 2;
 800bfb0:	2302      	movs	r3, #2
 800bfb2:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                    /* Check for XPC Extension Bit (XEB) */
                    if(0u != (pRxBuffer[wIndex + 5U] & 0x80U))
 800bfb6:	68fa      	ldr	r2, [r7, #12]
 800bfb8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800bfbc:	3305      	adds	r3, #5
 800bfbe:	4413      	add	r3, r2
 800bfc0:	781b      	ldrb	r3, [r3, #0]
 800bfc2:	b25b      	sxtb	r3, r3
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	da04      	bge.n	800bfd2 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x244>
                    {
                        /* XPC_W2 length */
                        bPcLength = (uint8_t)(bPcLength + 2U);
 800bfc8:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800bfcc:	3302      	adds	r3, #2
 800bfce:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
                    }
                }

                if(pRxBuffer[wIndex + 1U] > (bPcLength + bPacketCrcLen))
 800bfd2:	68fa      	ldr	r2, [r7, #12]
 800bfd4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800bfd8:	3301      	adds	r3, #1
 800bfda:	4413      	add	r3, r2
 800bfdc:	781b      	ldrb	r3, [r3, #0]
 800bfde:	4619      	mov	r1, r3
 800bfe0:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 800bfe4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800bfe8:	4413      	add	r3, r2
 800bfea:	4299      	cmp	r1, r3
 800bfec:	dd55      	ble.n	800c09a <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x30c>
                {
                    /* To avoid case of corruption */
                    if((pRxBuffer[wIndex + 1U] - (bPcLength + bPacketCrcLen)) <= (uint8_t)sizeof(pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[pDataParams->bNumOfCards].aUii))
 800bfee:	68fa      	ldr	r2, [r7, #12]
 800bff0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800bff4:	3301      	adds	r3, #1
 800bff6:	4413      	add	r3, r2
 800bff8:	781b      	ldrb	r3, [r3, #0]
 800bffa:	4619      	mov	r1, r3
 800bffc:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 800c000:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800c004:	4413      	add	r3, r2
 800c006:	1acb      	subs	r3, r1, r3
 800c008:	2b3a      	cmp	r3, #58	@ 0x3a
 800c00a:	dc43      	bgt.n	800c094 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x306>
                    {
                        /* Copy UII */
                        (void)memcpy(
                            pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[pDataParams->bNumOfCards].aUii,
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800c012:	461a      	mov	r2, r3
 800c014:	4613      	mov	r3, r2
 800c016:	011b      	lsls	r3, r3, #4
 800c018:	1a9b      	subs	r3, r3, r2
 800c01a:	009b      	lsls	r3, r3, #2
 800c01c:	33e8      	adds	r3, #232	@ 0xe8
 800c01e:	687a      	ldr	r2, [r7, #4]
 800c020:	4413      	add	r3, r2
 800c022:	f103 0008 	add.w	r0, r3, #8
                        (void)memcpy(
 800c026:	68fa      	ldr	r2, [r7, #12]
                            &pRxBuffer[wIndex + 3U + bPcLength],
 800c028:	f8b7 1042 	ldrh.w	r1, [r7, #66]	@ 0x42
 800c02c:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800c030:	440b      	add	r3, r1
 800c032:	3303      	adds	r3, #3
 800c034:	18d1      	adds	r1, r2, r3
                            ((size_t)pRxBuffer[wIndex + 1U] - (bPcLength + bPacketCrcLen)));
 800c036:	68fa      	ldr	r2, [r7, #12]
 800c038:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c03c:	3301      	adds	r3, #1
 800c03e:	4413      	add	r3, r2
 800c040:	781b      	ldrb	r3, [r3, #0]
 800c042:	461c      	mov	r4, r3
 800c044:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 800c048:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800c04c:	4413      	add	r3, r2
                        (void)memcpy(
 800c04e:	1ae3      	subs	r3, r4, r3
 800c050:	461a      	mov	r2, r3
 800c052:	f014 fc9e 	bl	8020992 <memcpy>

                        /* Calculate UII length in bits */
                        pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[pDataParams->bNumOfCards].wUiiLength =
                        		(uint16_t)(((uint16_t)pRxBuffer[wIndex + 1U] - ((uint16_t)bPcLength + (uint16_t)bPacketCrcLen)) * 8U);
 800c056:	68fa      	ldr	r2, [r7, #12]
 800c058:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c05c:	3301      	adds	r3, #1
 800c05e:	4413      	add	r3, r2
 800c060:	781b      	ldrb	r3, [r3, #0]
 800c062:	4619      	mov	r1, r3
 800c064:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 800c068:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800c06c:	4413      	add	r3, r2
 800c06e:	1acb      	subs	r3, r1, r3
 800c070:	b29b      	uxth	r3, r3
                        pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[pDataParams->bNumOfCards].wUiiLength =
 800c072:	687a      	ldr	r2, [r7, #4]
 800c074:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
 800c078:	4611      	mov	r1, r2
                        		(uint16_t)(((uint16_t)pRxBuffer[wIndex + 1U] - ((uint16_t)bPcLength + (uint16_t)bPacketCrcLen)) * 8U);
 800c07a:	00db      	lsls	r3, r3, #3
 800c07c:	b298      	uxth	r0, r3
                        pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[pDataParams->bNumOfCards].wUiiLength =
 800c07e:	687a      	ldr	r2, [r7, #4]
 800c080:	460b      	mov	r3, r1
 800c082:	011b      	lsls	r3, r3, #4
 800c084:	1a5b      	subs	r3, r3, r1
 800c086:	009b      	lsls	r3, r3, #2
 800c088:	4413      	add	r3, r2
 800c08a:	f503 7395 	add.w	r3, r3, #298	@ 0x12a
 800c08e:	4602      	mov	r2, r0
 800c090:	801a      	strh	r2, [r3, #0]
 800c092:	e010      	b.n	800c0b6 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x328>
                    }
                    else
                    {
                        /* In case of a compliant card this scenario should never come */
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_AC_DISCLOOP);
 800c094:	f244 037f 	movw	r3, #16511	@ 0x407f
 800c098:	e080      	b.n	800c19c <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>
                    }
                }
                else
                {
                    pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[pDataParams->bNumOfCards].wUiiLength = 0;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800c0a0:	4619      	mov	r1, r3
 800c0a2:	687a      	ldr	r2, [r7, #4]
 800c0a4:	460b      	mov	r3, r1
 800c0a6:	011b      	lsls	r3, r3, #4
 800c0a8:	1a5b      	subs	r3, r3, r1
 800c0aa:	009b      	lsls	r3, r3, #2
 800c0ac:	4413      	add	r3, r2
 800c0ae:	f503 7395 	add.w	r3, r3, #298	@ 0x12a
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	801a      	strh	r2, [r3, #0]
                }

                /* Increment device count */
                pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound++;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800c0bc:	3301      	adds	r3, #1
 800c0be:	b2da      	uxtb	r2, r3
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
                pDataParams->bNumOfCards++;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800c0cc:	3301      	adds	r3, #1
 800c0ce:	b2da      	uxtb	r2, r3
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

                if(pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound >=
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f893 20ec 	ldrb.w	r2, [r3, #236]	@ 0xec
                    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_18000P3M3])
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	7bdb      	ldrb	r3, [r3, #15]
                if(pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound >=
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	d301      	bcc.n	800c0e8 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x35a>
                {
                    return PH_ERR_SUCCESS;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	e059      	b.n	800c19c <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>
                }

                wIndex =  (uint16_t)(wIndex + pRxBuffer[wIndex + 1U] + 3U);
 800c0e8:	68fa      	ldr	r2, [r7, #12]
 800c0ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c0ee:	3301      	adds	r3, #1
 800c0f0:	4413      	add	r3, r2
 800c0f2:	781b      	ldrb	r3, [r3, #0]
 800c0f4:	461a      	mov	r2, r3
 800c0f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c0fa:	4413      	add	r3, r2
 800c0fc:	b29b      	uxth	r3, r3
 800c0fe:	3303      	adds	r3, #3
 800c100:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800c104:	e02c      	b.n	800c160 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x3d2>
            }
            else if(pRxBuffer[wIndex] == 1U)
 800c106:	68fa      	ldr	r2, [r7, #12]
 800c108:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c10c:	4413      	add	r3, r2
 800c10e:	781b      	ldrb	r3, [r3, #0]
 800c110:	2b01      	cmp	r3, #1
 800c112:	d102      	bne.n	800c11a <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x38c>
            {
                /* This should not come as ReqRN is not send */
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_AC_DISCLOOP);
 800c114:	f244 037f 	movw	r3, #16511	@ 0x407f
 800c118:	e040      	b.n	800c19c <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>
            }
            else if(pRxBuffer[wIndex] == 2U)
 800c11a:	68fa      	ldr	r2, [r7, #12]
 800c11c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c120:	4413      	add	r3, r2
 800c122:	781b      	ldrb	r3, [r3, #0]
 800c124:	2b02      	cmp	r3, #2
 800c126:	d105      	bne.n	800c134 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x3a6>
            {
                /* Timeout */
                wIndex = (uint16_t)(wIndex + 3U);
 800c128:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c12c:	3303      	adds	r3, #3
 800c12e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800c132:	e015      	b.n	800c160 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x3d2>
            }
            else
            {
                /* Collision */
                wIndex = (uint16_t)(wIndex + 3U);
 800c134:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c138:	3303      	adds	r3, #3
 800c13a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
                bMoreCardsPresent = PH_ON;
 800c13e:	2301      	movs	r3, #1
 800c140:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
                pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	7f9b      	ldrb	r3, [r3, #30]
 800c148:	f043 0320 	orr.w	r3, r3, #32
 800c14c:	b2da      	uxtb	r2, r3
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	779a      	strb	r2, [r3, #30]

                /* Check for device count */
                if(pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_18000P3M3] == 0x00U)
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	7bdb      	ldrb	r3, [r3, #15]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d102      	bne.n	800c160 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x3d2>
                {
                    /* return collision error */
                    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 800c15a:	f244 0381 	movw	r3, #16513	@ 0x4081
 800c15e:	e01d      	b.n	800c19c <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>
        while(wIndex < wRxBufferLen)
 800c160:	897b      	ldrh	r3, [r7, #10]
 800c162:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c166:	429a      	cmp	r2, r3
 800c168:	f4ff aefa 	bcc.w	800bf60 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x1d2>
                }
            }
        }
    }
    while(((bMoreCardsPresent != PH_OFF) && (bQ <= 0x0FU)) || ((status & PH_ERR_MASK) == PH_ERR_SUCCESS_CHAINING));
 800c16c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800c170:	2b00      	cmp	r3, #0
 800c172:	d004      	beq.n	800c17e <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x3f0>
 800c174:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800c178:	2b0f      	cmp	r3, #15
 800c17a:	f67f ae86 	bls.w	800be8a <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0xfc>
 800c17e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800c182:	b2db      	uxtb	r3, r3
 800c184:	2b71      	cmp	r3, #113	@ 0x71
 800c186:	f43f ae80 	beq.w	800be8a <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0xfc>

    if(0U != (pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound))
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800c190:	2b00      	cmp	r3, #0
 800c192:	d001      	beq.n	800c198 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40a>
    {
        return PH_ERR_SUCCESS;
 800c194:	2300      	movs	r3, #0
 800c196:	e001      	b.n	800c19c <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>
    }
    else
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800c198:	f244 0385 	movw	r3, #16517	@ 0x4085
    }
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	374c      	adds	r7, #76	@ 0x4c
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd90      	pop	{r4, r7, pc}

0800c1a4 <phacDiscLoop_Sw_Int_ActivateI18000p3m3>:

phStatus_t phacDiscLoop_Sw_Int_ActivateI18000p3m3(
                                                  phacDiscLoop_Sw_DataParams_t * pDataParams,
                                                  uint8_t bI18000p3m3TagIdx
                                                  )
{
 800c1a4:	b590      	push	{r4, r7, lr}
 800c1a6:	b09b      	sub	sp, #108	@ 0x6c
 800c1a8:	af08      	add	r7, sp, #32
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	460b      	mov	r3, r1
 800c1ae:	70fb      	strb	r3, [r7, #3]
#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    phStatus_t PH_MEMLOC_REM status;
    uint8_t    PH_MEMLOC_BUF aSelectCmd[39] = {0};
 800c1b0:	f107 031c 	add.w	r3, r7, #28
 800c1b4:	2227      	movs	r2, #39	@ 0x27
 800c1b6:	2100      	movs	r1, #0
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f014 fb6b 	bl	8020894 <memset>
    uint8_t   PH_MEMLOC_REM wSelectCmdLen;
    uint8_t    PH_MEMLOC_REM bSelectCmdValidBits;
    uint8_t    PH_MEMLOC_BUF aBeginRoundCmd[3] = {0};
 800c1be:	f107 0314 	add.w	r3, r7, #20
 800c1c2:	2100      	movs	r1, #0
 800c1c4:	460a      	mov	r2, r1
 800c1c6:	801a      	strh	r2, [r3, #0]
 800c1c8:	460a      	mov	r2, r1
 800c1ca:	709a      	strb	r2, [r3, #2]
    uint8_t    PH_MEMLOC_REM *pRxBuffer = NULL;
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	613b      	str	r3, [r7, #16]
    uint16_t   PH_MEMLOC_REM wRxBufferLen = 0;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	81fb      	strh	r3, [r7, #14]
    uint8_t    PH_MEMLOC_REM bUiiStartAddress = 0x20;
 800c1d4:	2320      	movs	r3, #32
 800c1d6:	737b      	strb	r3, [r7, #13]
    uint8_t    PH_MEMLOC_REM bMaskLength;

    /* Out of range check */
    if ((bI18000p3m3TagIdx >= pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound) || ( bI18000p3m3TagIdx >= PHAC_DISCLOOP_CFG_MAX_VICINITY_CARDS_SUPPORTED ))
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800c1de:	78fa      	ldrb	r2, [r7, #3]
 800c1e0:	429a      	cmp	r2, r3
 800c1e2:	d202      	bcs.n	800c1ea <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x46>
 800c1e4:	78fb      	ldrb	r3, [r7, #3]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d002      	beq.n	800c1f0 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x4c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800c1ea:	f244 0321 	movw	r3, #16417	@ 0x4021
 800c1ee:	e09b      	b.n	800c328 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x184>
    }

    /* Maximum mask length possible is 255 */
    if(pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[bI18000p3m3TagIdx].wUiiLength > 255U)
 800c1f0:	78fa      	ldrb	r2, [r7, #3]
 800c1f2:	6879      	ldr	r1, [r7, #4]
 800c1f4:	4613      	mov	r3, r2
 800c1f6:	011b      	lsls	r3, r3, #4
 800c1f8:	1a9b      	subs	r3, r3, r2
 800c1fa:	009b      	lsls	r3, r3, #2
 800c1fc:	440b      	add	r3, r1
 800c1fe:	f503 7395 	add.w	r3, r3, #298	@ 0x12a
 800c202:	881b      	ldrh	r3, [r3, #0]
 800c204:	2bff      	cmp	r3, #255	@ 0xff
 800c206:	d903      	bls.n	800c210 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x6c>
    {
        bMaskLength = 255;
 800c208:	23ff      	movs	r3, #255	@ 0xff
 800c20a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c20e:	e00b      	b.n	800c228 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x84>
    }
    else
    {
        bMaskLength = (uint8_t)pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[bI18000p3m3TagIdx].wUiiLength;
 800c210:	78fa      	ldrb	r2, [r7, #3]
 800c212:	6879      	ldr	r1, [r7, #4]
 800c214:	4613      	mov	r3, r2
 800c216:	011b      	lsls	r3, r3, #4
 800c218:	1a9b      	subs	r3, r3, r2
 800c21a:	009b      	lsls	r3, r3, #2
 800c21c:	440b      	add	r3, r1
 800c21e:	f503 7395 	add.w	r3, r3, #298	@ 0x12a
 800c222:	881b      	ldrh	r3, [r3, #0]
 800c224:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    /* Create select command frame (with selected UII in mask) */
    PH_CHECK_SUCCESS_FCT(status, phpalI18000p3m3_CreateSelectCmd(
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800c22c:	78fa      	ldrb	r2, [r7, #3]
 800c22e:	4613      	mov	r3, r2
 800c230:	011b      	lsls	r3, r3, #4
 800c232:	1a9b      	subs	r3, r3, r2
 800c234:	009b      	lsls	r3, r3, #2
 800c236:	33e8      	adds	r3, #232	@ 0xe8
 800c238:	687a      	ldr	r2, [r7, #4]
 800c23a:	4413      	add	r3, r2
 800c23c:	3308      	adds	r3, #8
 800c23e:	f107 021a 	add.w	r2, r7, #26
 800c242:	9207      	str	r2, [sp, #28]
 800c244:	f107 021b 	add.w	r2, r7, #27
 800c248:	9206      	str	r2, [sp, #24]
 800c24a:	f107 021c 	add.w	r2, r7, #28
 800c24e:	9205      	str	r2, [sp, #20]
 800c250:	2200      	movs	r2, #0
 800c252:	9204      	str	r2, [sp, #16]
 800c254:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800c258:	9203      	str	r2, [sp, #12]
 800c25a:	9302      	str	r3, [sp, #8]
 800c25c:	2300      	movs	r3, #0
 800c25e:	9301      	str	r3, [sp, #4]
 800c260:	f107 030d 	add.w	r3, r7, #13
 800c264:	9300      	str	r3, [sp, #0]
 800c266:	2301      	movs	r3, #1
 800c268:	2200      	movs	r2, #0
 800c26a:	2100      	movs	r1, #0
 800c26c:	f00b fd74 	bl	8017d58 <phpalI18000p3m3_Sw_CreateSelectCmd>
 800c270:	4603      	mov	r3, r0
 800c272:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800c276:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d002      	beq.n	800c284 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0xe0>
 800c27e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c282:	e051      	b.n	800c328 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x184>
        aSelectCmd,
        &wSelectCmdLen,
        &bSelectCmdValidBits));

    /* Create BeginRound command frame */
    PH_CHECK_SUCCESS_FCT(status, phpalI18000p3m3_CreateBeginRoundCmd(
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f893 10ee 	ldrb.w	r1, [r3, #238]	@ 0xee
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f893 20ed 	ldrb.w	r2, [r3, #237]	@ 0xed
 800c294:	f107 0314 	add.w	r3, r7, #20
 800c298:	9304      	str	r3, [sp, #16]
 800c29a:	2300      	movs	r3, #0
 800c29c:	9303      	str	r3, [sp, #12]
 800c29e:	2300      	movs	r3, #0
 800c2a0:	9302      	str	r3, [sp, #8]
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	9301      	str	r3, [sp, #4]
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	9300      	str	r3, [sp, #0]
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	f00b fe6d 	bl	8017f8a <phpalI18000p3m3_Sw_CreateBeginRoundCmd>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800c2b6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d002      	beq.n	800c2c4 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x120>
 800c2be:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c2c2:	e031      	b.n	800c328 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x184>
        0,
        0,
        aBeginRoundCmd));

    /* Activate tag with specified UII */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_I18000p3m3Inventory(
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800c2c8:	7efa      	ldrb	r2, [r7, #27]
 800c2ca:	7ebc      	ldrb	r4, [r7, #26]
 800c2cc:	f107 011c 	add.w	r1, r7, #28
 800c2d0:	f107 030e 	add.w	r3, r7, #14
 800c2d4:	9303      	str	r3, [sp, #12]
 800c2d6:	f107 0310 	add.w	r3, r7, #16
 800c2da:	9302      	str	r3, [sp, #8]
 800c2dc:	2302      	movs	r3, #2
 800c2de:	9301      	str	r3, [sp, #4]
 800c2e0:	f107 0314 	add.w	r3, r7, #20
 800c2e4:	9300      	str	r3, [sp, #0]
 800c2e6:	4623      	mov	r3, r4
 800c2e8:	f004 fdfa 	bl	8010ee0 <phhalHw_Pn5180_I18000p3m3Inventory>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800c2f2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d002      	beq.n	800c300 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x15c>
 800c2fa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c2fe:	e013      	b.n	800c328 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x184>
        PHHAL_HW_I18000P3M3_GET_TAG_HANDLE,
        &pRxBuffer,
        &wRxBufferLen));

    /* Update handle */
    PH_CHECK_SUCCESS_FCT(status, phalI18000p3m3_SetHandle(
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800c304:	693a      	ldr	r2, [r7, #16]
 800c306:	89fb      	ldrh	r3, [r7, #14]
 800c308:	3b02      	subs	r3, #2
 800c30a:	4413      	add	r3, r2
 800c30c:	4619      	mov	r1, r3
 800c30e:	f000 fbd7 	bl	800cac0 <phalI18000p3m3_Sw_SetHandle>
 800c312:	4603      	mov	r3, r0
 800c314:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800c318:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d002      	beq.n	800c326 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x182>
 800c320:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c324:	e000      	b.n	800c328 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x184>
        pDataParams->pAl18000p3m3DataParams,
        &pRxBuffer[wRxBufferLen - 2u]));

    return PH_ERR_SUCCESS;
 800c326:	2300      	movs	r3, #0
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */
}
 800c328:	4618      	mov	r0, r3
 800c32a:	374c      	adds	r7, #76	@ 0x4c
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd90      	pop	{r4, r7, pc}

0800c330 <phacDiscLoop_Sw_DetTechTypeV>:
 * Private Functions
 * ***************************************************************************************************************** */
phStatus_t phacDiscLoop_Sw_DetTechTypeV(
        phacDiscLoop_Sw_DataParams_t *pDataParams
)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b088      	sub	sp, #32
 800c334:	af04      	add	r7, sp, #16
 800c336:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    phStatus_t PH_MEMLOC_REM status = PH_ERR_INTERNAL_ERROR;
 800c338:	237f      	movs	r3, #127	@ 0x7f
 800c33a:	81fb      	strh	r3, [r7, #14]

    /* Inventory request with one slot */
    status = phpalSli15693_Inventory(
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 800c346:	f043 0324 	orr.w	r3, r3, #36	@ 0x24
 800c34a:	b2d9      	uxtb	r1, r3
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	33e2      	adds	r3, #226	@ 0xe2
 800c350:	687a      	ldr	r2, [r7, #4]
 800c352:	32e3      	adds	r2, #227	@ 0xe3
 800c354:	9202      	str	r2, [sp, #8]
 800c356:	9301      	str	r3, [sp, #4]
 800c358:	2300      	movs	r3, #0
 800c35a:	9300      	str	r3, [sp, #0]
 800c35c:	2300      	movs	r3, #0
 800c35e:	2200      	movs	r2, #0
 800c360:	f00c fd58 	bl	8018e14 <phpalSli15693_Sw_Inventory>
 800c364:	4603      	mov	r3, r0
 800c366:	81fb      	strh	r3, [r7, #14]
            0,
            &pDataParams->sTypeVTargetInfo.aTypeV[0].bDsfid,
            pDataParams->sTypeVTargetInfo.aTypeV[0].aUid
    );

    if(0u != (phacDiscLoop_Sw_Int_IsValidPollStatus(status)))
 800c368:	89fb      	ldrh	r3, [r7, #14]
 800c36a:	4618      	mov	r0, r3
 800c36c:	f7fd fe5f 	bl	800a02e <phacDiscLoop_Sw_Int_IsValidPollStatus>
 800c370:	4603      	mov	r3, r0
 800c372:	2b00      	cmp	r3, #0
 800c374:	d002      	beq.n	800c37c <phacDiscLoop_Sw_DetTechTypeV+0x4c>
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 800c376:	f244 0387 	movw	r3, #16519	@ 0x4087
 800c37a:	e000      	b.n	800c37e <phacDiscLoop_Sw_DetTechTypeV+0x4e>
    }
    else
    {
        return status;
 800c37c:	89fb      	ldrh	r3, [r7, #14]
    }
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */
}
 800c37e:	4618      	mov	r0, r3
 800c380:	3710      	adds	r7, #16
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}

0800c386 <phacDiscLoop_Sw_Int_CollisionResolutionV>:

phStatus_t phacDiscLoop_Sw_Int_CollisionResolutionV(
        phacDiscLoop_Sw_DataParams_t *pDataParams
)
{
 800c386:	b590      	push	{r4, r7, lr}
 800c388:	b09b      	sub	sp, #108	@ 0x6c
 800c38a:	af04      	add	r7, sp, #16
 800c38c:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    phStatus_t PH_MEMLOC_REM   status = PH_ERR_INTERNAL_ERROR;
 800c38e:	237f      	movs	r3, #127	@ 0x7f
 800c390:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
    uint8_t    PH_MEMLOC_BUF   aMaskBuffer[PHPAL_SLI15693_UID_LENGTH];
    uint8_t    PH_MEMLOC_REM   bMaskBitLength = 0;
 800c394:	2300      	movs	r3, #0
 800c396:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
    uint8_t    PH_MEMLOC_REM   bUidLengthDummy;
    uint8_t    PH_MEMLOC_REM   bDataDummy[1];
    uint8_t    PH_MEMLOC_REM   bNextSlot = 1;
 800c39a:	2301      	movs	r3, #1
 800c39c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    uint16_t   PH_MEMLOC_REM   wDataLengthDummy;
    uint8_t    PH_MEMLOC_COUNT bSlot;
    uint8_t    PH_MEMLOC_REM   bSlotCount = 0;
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
    uint8_t    PH_MEMLOC_COUNT bLevel = 0;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
    uint8_t    PH_MEMLOC_REM   bEnd = 0;
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
    uint8_t    PH_MEMLOC_REM   bRepeat = 0;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    uint8_t    PH_MEMLOC_REM   bCount[16] = {0};
 800c3b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c3bc:	2200      	movs	r2, #0
 800c3be:	601a      	str	r2, [r3, #0]
 800c3c0:	605a      	str	r2, [r3, #4]
 800c3c2:	609a      	str	r2, [r3, #8]
 800c3c4:	60da      	str	r2, [r3, #12]
    uint16_t   PH_MEMLOC_REM   wCollisionLogReg[16] = {0};
 800c3c6:	f107 030c 	add.w	r3, r7, #12
 800c3ca:	2220      	movs	r2, #32
 800c3cc:	2100      	movs	r1, #0
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f014 fa60 	bl	8020894 <memset>

    /* Symbol 0 */
    pDataParams->sTypeVTargetInfo.bTotalTagsFound = 0;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf
    pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_V);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	7f9b      	ldrb	r3, [r3, #30]
 800c3e0:	f023 0310 	bic.w	r3, r3, #16
 800c3e4:	b2da      	uxtb	r2, r3
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	779a      	strb	r2, [r3, #30]

    /* Apply Guard time. */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	8b1b      	ldrh	r3, [r3, #24]
 800c3f2:	461a      	mov	r2, r3
 800c3f4:	2135      	movs	r1, #53	@ 0x35
 800c3f6:	f002 f9cf 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800c400:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c404:	2b00      	cmp	r3, #0
 800c406:	d002      	beq.n	800c40e <phacDiscLoop_Sw_Int_CollisionResolutionV+0x88>
 800c408:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c40c:	e2bf      	b.n	800c98e <phacDiscLoop_Sw_Int_CollisionResolutionV+0x608>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_V]));

    /* Configure HW for the TypeV technology */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c412:	2104      	movs	r1, #4
 800c414:	4618      	mov	r0, r3
 800c416:	f001 fc43 	bl	800dca0 <phhalHw_Pn5180_ApplyProtocolSettings>
 800c41a:	4603      	mov	r3, r0
 800c41c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800c420:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c424:	2b00      	cmp	r3, #0
 800c426:	d002      	beq.n	800c42e <phacDiscLoop_Sw_Int_CollisionResolutionV+0xa8>
 800c428:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c42c:	e2af      	b.n	800c98e <phacDiscLoop_Sw_Int_CollisionResolutionV+0x608>
        pDataParams->pHalDataParams,
        PHHAL_HW_CARDTYPE_ISO15693));

    /* Symbol 0 */
    status = phpalSli15693_Inventory(
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 800c438:	f043 0324 	orr.w	r3, r3, #36	@ 0x24
 800c43c:	b2d9      	uxtb	r1, r3
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	33e2      	adds	r3, #226	@ 0xe2
 800c442:	687a      	ldr	r2, [r7, #4]
 800c444:	32e3      	adds	r2, #227	@ 0xe3
 800c446:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 800c44a:	9202      	str	r2, [sp, #8]
 800c44c:	9301      	str	r3, [sp, #4]
 800c44e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800c452:	9300      	str	r3, [sp, #0]
 800c454:	4623      	mov	r3, r4
 800c456:	2200      	movs	r2, #0
 800c458:	f00c fcdc 	bl	8018e14 <phpalSli15693_Sw_Inventory>
 800c45c:	4603      	mov	r3, r0
 800c45e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
            bMaskBitLength,
            &pDataParams->sTypeVTargetInfo.aTypeV[0].bDsfid,
            pDataParams->sTypeVTargetInfo.aTypeV[0].aUid);

    /* Symbol 1 */
    if((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT)
 800c462:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c466:	b2db      	uxtb	r3, r3
 800c468:	2b01      	cmp	r3, #1
 800c46a:	d102      	bne.n	800c472 <phacDiscLoop_Sw_Int_CollisionResolutionV+0xec>
    {
        return status;
 800c46c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c470:	e28d      	b.n	800c98e <phacDiscLoop_Sw_Int_CollisionResolutionV+0x608>
    }
    else
    {
        /* Symbol 2 */
        if((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800c472:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c476:	b2db      	uxtb	r3, r3
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d111      	bne.n	800c4a0 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x11a>
        {
            /* Symbol 18 */
            pDataParams->sTypeVTargetInfo.bTotalTagsFound++;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 800c482:	3301      	adds	r3, #1
 800c484:	b2da      	uxtb	r2, r3
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf
            pDataParams->bNumOfCards++;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800c492:	3301      	adds	r3, #1
 800c494:	b2da      	uxtb	r2, r3
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
            return PH_ERR_SUCCESS;
 800c49c:	2300      	movs	r3, #0
 800c49e:	e276      	b.n	800c98e <phacDiscLoop_Sw_Int_CollisionResolutionV+0x608>
        }
        else if(((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800c4a0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c4a4:	b2db      	uxtb	r3, r3
 800c4a6:	2b03      	cmp	r3, #3
 800c4a8:	d005      	beq.n	800c4b6 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x130>
                || ((status & PH_ERR_MASK) == PH_ERR_INTEGRITY_ERROR))
 800c4aa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c4ae:	b2db      	uxtb	r3, r3
 800c4b0:	2b02      	cmp	r3, #2
 800c4b2:	f040 8260 	bne.w	800c976 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5f0>
        {
            /* Symbol 3 */
            pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_V;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	7f9b      	ldrb	r3, [r3, #30]
 800c4ba:	f043 0310 	orr.w	r3, r3, #16
 800c4be:	b2da      	uxtb	r2, r3
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	779a      	strb	r2, [r3, #30]

            /* Symbol 4 */
            if(pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V] == 0x00U)
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	7b9b      	ldrb	r3, [r3, #14]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	f040 8245 	bne.w	800c958 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5d2>
            {
                return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 800c4ce:	f244 0381 	movw	r3, #16513	@ 0x4081
 800c4d2:	e25c      	b.n	800c98e <phacDiscLoop_Sw_Int_CollisionResolutionV+0x608>
            do
            {
                while(pDataParams->sTypeVTargetInfo.bTotalTagsFound < pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V])
                {
                    /* Symbol 6 */
                    bSlot = 0;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

                    /* Symbol 7 */
                    pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_V);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	7f9b      	ldrb	r3, [r3, #30]
 800c4de:	f023 0310 	bic.w	r3, r3, #16
 800c4e2:	b2da      	uxtb	r2, r3
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	779a      	strb	r2, [r3, #30]

                    /* Symbol 8 */
                    status = phpalSli15693_Inventory(
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 800c4f2:	f043 0304 	orr.w	r3, r3, #4
 800c4f6:	b2dc      	uxtb	r4, r3
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 800c4fe:	461a      	mov	r2, r3
 800c500:	4613      	mov	r3, r2
 800c502:	00db      	lsls	r3, r3, #3
 800c504:	4413      	add	r3, r2
 800c506:	33d8      	adds	r3, #216	@ 0xd8
 800c508:	687a      	ldr	r2, [r7, #4]
 800c50a:	4413      	add	r3, r2
 800c50c:	f103 020a 	add.w	r2, r3, #10
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 800c516:	4619      	mov	r1, r3
 800c518:	460b      	mov	r3, r1
 800c51a:	00db      	lsls	r3, r3, #3
 800c51c:	440b      	add	r3, r1
 800c51e:	33d8      	adds	r3, #216	@ 0xd8
 800c520:	6879      	ldr	r1, [r7, #4]
 800c522:	440b      	add	r3, r1
 800c524:	330b      	adds	r3, #11
 800c526:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800c52a:	9302      	str	r3, [sp, #8]
 800c52c:	9201      	str	r2, [sp, #4]
 800c52e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800c532:	9300      	str	r3, [sp, #0]
 800c534:	460b      	mov	r3, r1
 800c536:	2200      	movs	r2, #0
 800c538:	4621      	mov	r1, r4
 800c53a:	f00c fc6b 	bl	8018e14 <phpalSli15693_Sw_Inventory>
 800c53e:	4603      	mov	r3, r0
 800c540:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
                    {
                        /* Symbol 9 */
                        /* Protocol error scenario is not described in Activity Spec v2.2,
                         * but based on DTA Test case treating Protocol error similar to Timeout.
                         * */
                        if(((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT)
 800c544:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c548:	b2db      	uxtb	r3, r3
 800c54a:	2b01      	cmp	r3, #1
 800c54c:	d04f      	beq.n	800c5ee <phacDiscLoop_Sw_Int_CollisionResolutionV+0x268>
                            || ((status & PH_ERR_MASK) == PH_ERR_PROTOCOL_ERROR))
 800c54e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c552:	b2db      	uxtb	r3, r3
 800c554:	2b06      	cmp	r3, #6
 800c556:	d04a      	beq.n	800c5ee <phacDiscLoop_Sw_Int_CollisionResolutionV+0x268>
                        {
                            /* Continue with next slot */
                        }
                        /* Symbol 10 */
                        else if(((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800c558:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c55c:	b2db      	uxtb	r3, r3
 800c55e:	2b03      	cmp	r3, #3
 800c560:	d004      	beq.n	800c56c <phacDiscLoop_Sw_Int_CollisionResolutionV+0x1e6>
                                || ((status & PH_ERR_MASK) == PH_ERR_INTEGRITY_ERROR))
 800c562:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c566:	b2db      	uxtb	r3, r3
 800c568:	2b02      	cmp	r3, #2
 800c56a:	d11f      	bne.n	800c5ac <phacDiscLoop_Sw_Int_CollisionResolutionV+0x226>
                        {
                            /* Symbol 16 */
                            pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_V;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	7f9b      	ldrb	r3, [r3, #30]
 800c570:	f043 0310 	orr.w	r3, r3, #16
 800c574:	b2da      	uxtb	r2, r3
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	779a      	strb	r2, [r3, #30]
                            wCollisionLogReg[bLevel] |= ((uint16_t) 1U )<< bSlot;
 800c57a:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800c57e:	005b      	lsls	r3, r3, #1
 800c580:	3358      	adds	r3, #88	@ 0x58
 800c582:	443b      	add	r3, r7
 800c584:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800c588:	b21a      	sxth	r2, r3
 800c58a:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800c58e:	2101      	movs	r1, #1
 800c590:	fa01 f303 	lsl.w	r3, r1, r3
 800c594:	b21b      	sxth	r3, r3
 800c596:	4313      	orrs	r3, r2
 800c598:	b21a      	sxth	r2, r3
 800c59a:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800c59e:	b292      	uxth	r2, r2
 800c5a0:	005b      	lsls	r3, r3, #1
 800c5a2:	3358      	adds	r3, #88	@ 0x58
 800c5a4:	443b      	add	r3, r7
 800c5a6:	f823 2c4c 	strh.w	r2, [r3, #-76]
 800c5aa:	e020      	b.n	800c5ee <phacDiscLoop_Sw_Int_CollisionResolutionV+0x268>
                        }
                        else if((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800c5ac:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c5b0:	b2db      	uxtb	r3, r3
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d118      	bne.n	800c5e8 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x262>
                        {
                            /* Symbol 11 */
                            pDataParams->sTypeVTargetInfo.bTotalTagsFound++;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 800c5bc:	3301      	adds	r3, #1
 800c5be:	b2da      	uxtb	r2, r3
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf
                            pDataParams->bNumOfCards++;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800c5cc:	3301      	adds	r3, #1
 800c5ce:	b2da      	uxtb	r2, r3
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

                            /* Symbol 12 */
                            if(pDataParams->sTypeVTargetInfo.bTotalTagsFound >= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V])
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f893 20df 	ldrb.w	r2, [r3, #223]	@ 0xdf
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	7b9b      	ldrb	r3, [r3, #14]
 800c5e0:	429a      	cmp	r2, r3
 800c5e2:	d304      	bcc.n	800c5ee <phacDiscLoop_Sw_Int_CollisionResolutionV+0x268>
                            {
                                return PH_ERR_SUCCESS;
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	e1d2      	b.n	800c98e <phacDiscLoop_Sw_Int_CollisionResolutionV+0x608>
                            }
                        }
                        else
                        {
                            /* For all other error types, return error */
                            return status;
 800c5e8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c5ec:	e1cf      	b.n	800c98e <phacDiscLoop_Sw_Int_CollisionResolutionV+0x608>
                        }

                        /* Symbol 13, 14U */
                        if(++bSlot == 16U)
 800c5ee:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800c5f2:	3301      	adds	r3, #1
 800c5f4:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 800c5f8:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800c5fc:	2b10      	cmp	r3, #16
 800c5fe:	d102      	bne.n	800c606 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x280>
                        {
                            bNextSlot = 0;
 800c600:	2300      	movs	r3, #0
 800c602:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
                        }

                        if(0U != (bNextSlot))
 800c606:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d032      	beq.n	800c674 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x2ee>
                        {
                            /* Symbol 15 */
                            status = phpalSli15693_SendEof(
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 800c618:	461a      	mov	r2, r3
 800c61a:	4613      	mov	r3, r2
 800c61c:	00db      	lsls	r3, r3, #3
 800c61e:	4413      	add	r3, r2
 800c620:	33d8      	adds	r3, #216	@ 0xd8
 800c622:	687a      	ldr	r2, [r7, #4]
 800c624:	4413      	add	r3, r2
 800c626:	f103 010a 	add.w	r1, r3, #10
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 800c630:	461a      	mov	r2, r3
 800c632:	4613      	mov	r3, r2
 800c634:	00db      	lsls	r3, r3, #3
 800c636:	4413      	add	r3, r2
 800c638:	33d8      	adds	r3, #216	@ 0xd8
 800c63a:	687a      	ldr	r2, [r7, #4]
 800c63c:	4413      	add	r3, r2
 800c63e:	f103 020b 	add.w	r2, r3, #11
 800c642:	f107 033e 	add.w	r3, r7, #62	@ 0x3e
 800c646:	9302      	str	r3, [sp, #8]
 800c648:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800c64c:	9301      	str	r3, [sp, #4]
 800c64e:	f107 0343 	add.w	r3, r7, #67	@ 0x43
 800c652:	9300      	str	r3, [sp, #0]
 800c654:	4613      	mov	r3, r2
 800c656:	460a      	mov	r2, r1
 800c658:	2100      	movs	r1, #0
 800c65a:	f00c fc05 	bl	8018e68 <phpalSli15693_Sw_SendEof>
 800c65e:	4603      	mov	r3, r0
 800c660:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
                                    pDataParams->sTypeVTargetInfo.aTypeV[pDataParams->sTypeVTargetInfo.bTotalTagsFound].aUid,
                                    &bUidLengthDummy,
                                    bDataDummy,
                                    &wDataLengthDummy);
                            /* Return if status is aborted. */
                            PH_CHECK_ABORT(status);
 800c664:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c668:	b2db      	uxtb	r3, r3
 800c66a:	2b12      	cmp	r3, #18
 800c66c:	d102      	bne.n	800c674 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x2ee>
 800c66e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c672:	e18c      	b.n	800c98e <phacDiscLoop_Sw_Int_CollisionResolutionV+0x608>
                        }
                    }
                    while(0U != bNextSlot);
 800c674:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800c678:	2b00      	cmp	r3, #0
 800c67a:	f47f af63 	bne.w	800c544 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x1be>
                    bNextSlot = 1;
 800c67e:	2301      	movs	r3, #1
 800c680:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

                    do
                    {
                        bRepeat = 0;
 800c684:	2300      	movs	r3, #0
 800c686:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                        if (0U != (wCollisionLogReg[bLevel]))
 800c68a:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800c68e:	005b      	lsls	r3, r3, #1
 800c690:	3358      	adds	r3, #88	@ 0x58
 800c692:	443b      	add	r3, r7
 800c694:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	f000 8120 	beq.w	800c8de <phacDiscLoop_Sw_Int_CollisionResolutionV+0x558>
                        {
                            for (bSlotCount = bCount[bLevel]; bSlotCount < 16U; bSlotCount++)
 800c69e:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800c6a2:	3358      	adds	r3, #88	@ 0x58
 800c6a4:	443b      	add	r3, r7
 800c6a6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800c6aa:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 800c6ae:	e110      	b.n	800c8d2 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x54c>
                            {
                                if (0U != (wCollisionLogReg[bLevel] & ((uint16_t)1U << bSlotCount)))
 800c6b0:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800c6b4:	005b      	lsls	r3, r3, #1
 800c6b6:	3358      	adds	r3, #88	@ 0x58
 800c6b8:	443b      	add	r3, r7
 800c6ba:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800c6be:	461a      	mov	r2, r3
 800c6c0:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800c6c4:	fa42 f303 	asr.w	r3, r2, r3
 800c6c8:	f003 0301 	and.w	r3, r3, #1
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	f000 80c8 	beq.w	800c862 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x4dc>
                                {
                                    /* Get bit-length of last valid byte */
                                    bUidLengthDummy = bMaskBitLength % (uint8_t)8U;
 800c6d2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800c6d6:	f003 0307 	and.w	r3, r3, #7
 800c6da:	b2db      	uxtb	r3, r3
 800c6dc:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

                                    /* Whole byte is valid -> append slot number to next byte */
                                    if (bUidLengthDummy == 0U)
 800c6e0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d10a      	bne.n	800c6fe <phacDiscLoop_Sw_Int_CollisionResolutionV+0x378>
                                    {
                                        aMaskBuffer[bMaskBitLength >> 3U] = bSlotCount;
 800c6e8:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800c6ec:	08db      	lsrs	r3, r3, #3
 800c6ee:	b2db      	uxtb	r3, r3
 800c6f0:	3358      	adds	r3, #88	@ 0x58
 800c6f2:	443b      	add	r3, r7
 800c6f4:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 800c6f8:	f803 2c14 	strb.w	r2, [r3, #-20]
 800c6fc:	e047      	b.n	800c78e <phacDiscLoop_Sw_Int_CollisionResolutionV+0x408>
                                    }
                                    /* Partial byte is valid */
                                    else
                                    {
                                        /* Fill the invalid bits of the incomplete byte with the 4 bits slot number */
                                        aMaskBuffer[bMaskBitLength >> (uint8_t)3U] &= (uint8_t)((uint8_t)0xFF >> ((uint8_t)8U  - bUidLengthDummy));
 800c6fe:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800c702:	08db      	lsrs	r3, r3, #3
 800c704:	b2db      	uxtb	r3, r3
 800c706:	3358      	adds	r3, #88	@ 0x58
 800c708:	443b      	add	r3, r7
 800c70a:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800c70e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c712:	f1c3 0308 	rsb	r3, r3, #8
 800c716:	21ff      	movs	r1, #255	@ 0xff
 800c718:	fa41 f303 	asr.w	r3, r1, r3
 800c71c:	b2db      	uxtb	r3, r3
 800c71e:	f897 1055 	ldrb.w	r1, [r7, #85]	@ 0x55
 800c722:	08c9      	lsrs	r1, r1, #3
 800c724:	b2c9      	uxtb	r1, r1
 800c726:	4013      	ands	r3, r2
 800c728:	b2da      	uxtb	r2, r3
 800c72a:	f101 0358 	add.w	r3, r1, #88	@ 0x58
 800c72e:	443b      	add	r3, r7
 800c730:	f803 2c14 	strb.w	r2, [r3, #-20]
                                        aMaskBuffer[bMaskBitLength >> (uint8_t)3U] |= (uint8_t)(bSlotCount << bUidLengthDummy);
 800c734:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800c738:	08db      	lsrs	r3, r3, #3
 800c73a:	b2db      	uxtb	r3, r3
 800c73c:	3358      	adds	r3, #88	@ 0x58
 800c73e:	443b      	add	r3, r7
 800c740:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800c744:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800c748:	f897 1043 	ldrb.w	r1, [r7, #67]	@ 0x43
 800c74c:	408b      	lsls	r3, r1
 800c74e:	b2db      	uxtb	r3, r3
 800c750:	f897 1055 	ldrb.w	r1, [r7, #85]	@ 0x55
 800c754:	08c9      	lsrs	r1, r1, #3
 800c756:	b2c9      	uxtb	r1, r1
 800c758:	4313      	orrs	r3, r2
 800c75a:	b2da      	uxtb	r2, r3
 800c75c:	f101 0358 	add.w	r3, r1, #88	@ 0x58
 800c760:	443b      	add	r3, r7
 800c762:	f803 2c14 	strb.w	r2, [r3, #-20]

                                        /* If not all 4 bits of the Slot number fit in the incomplete byte, put the rest in the next byte */
                                        if (bUidLengthDummy > 4U)
 800c766:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c76a:	2b04      	cmp	r3, #4
 800c76c:	d90f      	bls.n	800c78e <phacDiscLoop_Sw_Int_CollisionResolutionV+0x408>
                                        {
                                            aMaskBuffer[(bMaskBitLength >> 3U) + 1U] = (uint8_t)(bSlotCount >> bUidLengthDummy);
 800c76e:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800c772:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800c776:	fa43 f202 	asr.w	r2, r3, r2
 800c77a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800c77e:	08db      	lsrs	r3, r3, #3
 800c780:	b2db      	uxtb	r3, r3
 800c782:	3301      	adds	r3, #1
 800c784:	b2d2      	uxtb	r2, r2
 800c786:	3358      	adds	r3, #88	@ 0x58
 800c788:	443b      	add	r3, r7
 800c78a:	f803 2c14 	strb.w	r2, [r3, #-20]
                                        }
                                    }

                                    /* Increment the bit length by the 4 bits slot number */
                                    bMaskBitLength = bMaskBitLength + 4U;
 800c78e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800c792:	3304      	adds	r3, #4
 800c794:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                                    pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_V;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	7f9b      	ldrb	r3, [r3, #30]
 800c79c:	f043 0310 	orr.w	r3, r3, #16
 800c7a0:	b2da      	uxtb	r2, r3
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	779a      	strb	r2, [r3, #30]
                                    wCollisionLogReg[bLevel] =  wCollisionLogReg[bLevel] & ~((uint16_t)1U  << bSlotCount);
 800c7a6:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800c7aa:	005b      	lsls	r3, r3, #1
 800c7ac:	3358      	adds	r3, #88	@ 0x58
 800c7ae:	443b      	add	r3, r7
 800c7b0:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800c7b4:	b21a      	sxth	r2, r3
 800c7b6:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800c7ba:	2101      	movs	r1, #1
 800c7bc:	fa01 f303 	lsl.w	r3, r1, r3
 800c7c0:	b21b      	sxth	r3, r3
 800c7c2:	43db      	mvns	r3, r3
 800c7c4:	b21b      	sxth	r3, r3
 800c7c6:	4013      	ands	r3, r2
 800c7c8:	b21a      	sxth	r2, r3
 800c7ca:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800c7ce:	b292      	uxth	r2, r2
 800c7d0:	005b      	lsls	r3, r3, #1
 800c7d2:	3358      	adds	r3, #88	@ 0x58
 800c7d4:	443b      	add	r3, r7
 800c7d6:	f823 2c4c 	strh.w	r2, [r3, #-76]

                                    if(bSlotCount == 0x0FU)
 800c7da:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800c7de:	2b0f      	cmp	r3, #15
 800c7e0:	d124      	bne.n	800c82c <phacDiscLoop_Sw_Int_CollisionResolutionV+0x4a6>
                                    {
                                        bCount[bLevel] = 0U;
 800c7e2:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800c7e6:	3358      	adds	r3, #88	@ 0x58
 800c7e8:	443b      	add	r3, r7
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	f803 2c2c 	strb.w	r2, [r3, #-44]
                                        wCollisionLogReg[bLevel] = 0U;
 800c7f0:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800c7f4:	005b      	lsls	r3, r3, #1
 800c7f6:	3358      	adds	r3, #88	@ 0x58
 800c7f8:	443b      	add	r3, r7
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	f823 2c4c 	strh.w	r2, [r3, #-76]
                                        if(bLevel == 0U)
 800c800:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800c804:	2b00      	cmp	r3, #0
 800c806:	d103      	bne.n	800c810 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x48a>
                                        {
                                            bEnd = 1;
 800c808:	2301      	movs	r3, #1
 800c80a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
                                    {
                                        bCount[bLevel] = bSlotCount;
                                        bCount[bLevel]++;
                                        bLevel++;
                                    }
                                    break;
 800c80e:	e098      	b.n	800c942 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5bc>
                                            bCount[bLevel] = bSlotCount;
 800c810:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800c814:	3358      	adds	r3, #88	@ 0x58
 800c816:	443b      	add	r3, r7
 800c818:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 800c81c:	f803 2c2c 	strb.w	r2, [r3, #-44]
                                            bLevel++;
 800c820:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800c824:	3301      	adds	r3, #1
 800c826:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
                                    break;
 800c82a:	e08a      	b.n	800c942 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5bc>
                                        bCount[bLevel] = bSlotCount;
 800c82c:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800c830:	3358      	adds	r3, #88	@ 0x58
 800c832:	443b      	add	r3, r7
 800c834:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 800c838:	f803 2c2c 	strb.w	r2, [r3, #-44]
                                        bCount[bLevel]++;
 800c83c:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800c840:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 800c844:	443a      	add	r2, r7
 800c846:	f812 2c2c 	ldrb.w	r2, [r2, #-44]
 800c84a:	3201      	adds	r2, #1
 800c84c:	b2d2      	uxtb	r2, r2
 800c84e:	3358      	adds	r3, #88	@ 0x58
 800c850:	443b      	add	r3, r7
 800c852:	f803 2c2c 	strb.w	r2, [r3, #-44]
                                        bLevel++;
 800c856:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800c85a:	3301      	adds	r3, #1
 800c85c:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
                                    break;
 800c860:	e06f      	b.n	800c942 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5bc>
                                }
                                else
                                {
                                    if(bSlotCount == 0x0FU)
 800c862:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800c866:	2b0f      	cmp	r3, #15
 800c868:	d12e      	bne.n	800c8c8 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x542>
                                    {
                                        if(bLevel == 0U)
 800c86a:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d10a      	bne.n	800c888 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x502>
                                        {
                                            bEnd = 1;
 800c872:	2301      	movs	r3, #1
 800c874:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
                                            pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_V);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	7f9b      	ldrb	r3, [r3, #30]
 800c87c:	f023 0310 	bic.w	r3, r3, #16
 800c880:	b2da      	uxtb	r2, r3
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	779a      	strb	r2, [r3, #30]
 800c886:	e01f      	b.n	800c8c8 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x542>
                                        }
                                        else
                                        {
                                            /* Decrement the bit length by the 4 bits slot number */
                                            pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_V);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	7f9b      	ldrb	r3, [r3, #30]
 800c88c:	f023 0310 	bic.w	r3, r3, #16
 800c890:	b2da      	uxtb	r2, r3
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	779a      	strb	r2, [r3, #30]
                                            bMaskBitLength = bMaskBitLength - 4u;
 800c896:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800c89a:	3b04      	subs	r3, #4
 800c89c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                                            wCollisionLogReg[bLevel] = 0;
 800c8a0:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800c8a4:	005b      	lsls	r3, r3, #1
 800c8a6:	3358      	adds	r3, #88	@ 0x58
 800c8a8:	443b      	add	r3, r7
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	f823 2c4c 	strh.w	r2, [r3, #-76]
                                            bCount[bLevel] = 0;
 800c8b0:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800c8b4:	3358      	adds	r3, #88	@ 0x58
 800c8b6:	443b      	add	r3, r7
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	f803 2c2c 	strb.w	r2, [r3, #-44]
                                            bLevel--;
 800c8be:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800c8c2:	3b01      	subs	r3, #1
 800c8c4:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
                            for (bSlotCount = bCount[bLevel]; bSlotCount < 16U; bSlotCount++)
 800c8c8:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800c8cc:	3301      	adds	r3, #1
 800c8ce:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 800c8d2:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800c8d6:	2b0f      	cmp	r3, #15
 800c8d8:	f67f aeea 	bls.w	800c6b0 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x32a>
 800c8dc:	e031      	b.n	800c942 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5bc>
                                }
                            }
                        }
                        else
                        {
                            if(bLevel == 0U)
 800c8de:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d10a      	bne.n	800c8fc <phacDiscLoop_Sw_Int_CollisionResolutionV+0x576>
                            {
                                pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_V);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	7f9b      	ldrb	r3, [r3, #30]
 800c8ea:	f023 0310 	bic.w	r3, r3, #16
 800c8ee:	b2da      	uxtb	r2, r3
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	779a      	strb	r2, [r3, #30]
                                bEnd = 1;
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
 800c8fa:	e022      	b.n	800c942 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5bc>
                            }
                            else
                            {
                                /* Decrement the bit length by the 4 bits slot number */
                                pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_V);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	7f9b      	ldrb	r3, [r3, #30]
 800c900:	f023 0310 	bic.w	r3, r3, #16
 800c904:	b2da      	uxtb	r2, r3
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	779a      	strb	r2, [r3, #30]
                                bMaskBitLength = bMaskBitLength - 4u;
 800c90a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800c90e:	3b04      	subs	r3, #4
 800c910:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                                wCollisionLogReg[bLevel] = 0;
 800c914:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800c918:	005b      	lsls	r3, r3, #1
 800c91a:	3358      	adds	r3, #88	@ 0x58
 800c91c:	443b      	add	r3, r7
 800c91e:	2200      	movs	r2, #0
 800c920:	f823 2c4c 	strh.w	r2, [r3, #-76]
                                bCount[bLevel] = 0;
 800c924:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800c928:	3358      	adds	r3, #88	@ 0x58
 800c92a:	443b      	add	r3, r7
 800c92c:	2200      	movs	r2, #0
 800c92e:	f803 2c2c 	strb.w	r2, [r3, #-44]
                                bLevel--;
 800c932:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800c936:	3b01      	subs	r3, #1
 800c938:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
                                bRepeat = 1;
 800c93c:	2301      	movs	r3, #1
 800c93e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                            }
                        }
                    }while(0U != bRepeat);
 800c942:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800c946:	2b00      	cmp	r3, #0
 800c948:	f47f ae9c 	bne.w	800c684 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x2fe>

                    /* Symbol 17 */
                    if((0U == ((pDataParams->bCollPend & PHAC_DISCLOOP_POS_BIT_MASK_V))))
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	7f9b      	ldrb	r3, [r3, #30]
 800c950:	f003 0310 	and.w	r3, r3, #16
 800c954:	2b00      	cmp	r3, #0
 800c956:	d008      	beq.n	800c96a <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5e4>
                while(pDataParams->sTypeVTargetInfo.bTotalTagsFound < pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V])
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f893 20df 	ldrb.w	r2, [r3, #223]	@ 0xdf
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	7b9b      	ldrb	r3, [r3, #14]
 800c962:	429a      	cmp	r2, r3
 800c964:	f4ff adb6 	bcc.w	800c4d4 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x14e>
 800c968:	e000      	b.n	800c96c <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5e6>
                    {
                        break;
 800c96a:	bf00      	nop
                    }
                }
            }while(0U == bEnd);
 800c96c:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800c970:	2b00      	cmp	r3, #0
 800c972:	d0f1      	beq.n	800c958 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5d2>
        else if(((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800c974:	e002      	b.n	800c97c <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5f6>
        }
        else
        {
            /* For all other error types, return error */
            return status;
 800c976:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c97a:	e008      	b.n	800c98e <phacDiscLoop_Sw_Int_CollisionResolutionV+0x608>
        }
    }

    if(0U != (pDataParams->sTypeVTargetInfo.bTotalTagsFound))
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 800c982:	2b00      	cmp	r3, #0
 800c984:	d001      	beq.n	800c98a <phacDiscLoop_Sw_Int_CollisionResolutionV+0x604>
    {
        return PH_ERR_SUCCESS;
 800c986:	2300      	movs	r3, #0
 800c988:	e001      	b.n	800c98e <phacDiscLoop_Sw_Int_CollisionResolutionV+0x608>
    }

    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800c98a:	f244 0385 	movw	r3, #16517	@ 0x4085
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */
}
 800c98e:	4618      	mov	r0, r3
 800c990:	375c      	adds	r7, #92	@ 0x5c
 800c992:	46bd      	mov	sp, r7
 800c994:	bd90      	pop	{r4, r7, pc}

0800c996 <phacDiscLoop_Sw_Int_ActivateV>:

phStatus_t phacDiscLoop_Sw_Int_ActivateV(
        phacDiscLoop_Sw_DataParams_t * pDataParams,
        uint8_t bTypeVTagIdx
)
{
 800c996:	b580      	push	{r7, lr}
 800c998:	b084      	sub	sp, #16
 800c99a:	af00      	add	r7, sp, #0
 800c99c:	6078      	str	r0, [r7, #4]
 800c99e:	460b      	mov	r3, r1
 800c9a0:	70fb      	strb	r3, [r7, #3]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    phStatus_t PH_MEMLOC_REM status = PH_ERR_INTERNAL_ERROR;
 800c9a2:	237f      	movs	r3, #127	@ 0x7f
 800c9a4:	81fb      	strh	r3, [r7, #14]

    if ((bTypeVTagIdx >= pDataParams->sTypeVTargetInfo.bTotalTagsFound) || ( bTypeVTagIdx >= PHAC_DISCLOOP_CFG_MAX_VICINITY_CARDS_SUPPORTED ))
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 800c9ac:	78fa      	ldrb	r2, [r7, #3]
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d202      	bcs.n	800c9b8 <phacDiscLoop_Sw_Int_ActivateV+0x22>
 800c9b2:	78fb      	ldrb	r3, [r7, #3]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d002      	beq.n	800c9be <phacDiscLoop_Sw_Int_ActivateV+0x28>
    {
        /* Out of range */
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800c9b8:	f244 0321 	movw	r3, #16417	@ 0x4021
 800c9bc:	e026      	b.n	800ca0c <phacDiscLoop_Sw_Int_ActivateV+0x76>
    }

    /* Set the UID to be selected and the UID length into PAL */
    PH_CHECK_SUCCESS_FCT(status, phpalSli15693_SetSerialNo(
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800c9c2:	78fa      	ldrb	r2, [r7, #3]
 800c9c4:	4613      	mov	r3, r2
 800c9c6:	00db      	lsls	r3, r3, #3
 800c9c8:	4413      	add	r3, r2
 800c9ca:	33d8      	adds	r3, #216	@ 0xd8
 800c9cc:	687a      	ldr	r2, [r7, #4]
 800c9ce:	4413      	add	r3, r2
 800c9d0:	330b      	adds	r3, #11
 800c9d2:	2208      	movs	r2, #8
 800c9d4:	4619      	mov	r1, r3
 800c9d6:	f00c fd87 	bl	80194e8 <phpalSli15693_Sw_SetSerialNo>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	81fb      	strh	r3, [r7, #14]
 800c9de:	89fb      	ldrh	r3, [r7, #14]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d001      	beq.n	800c9e8 <phacDiscLoop_Sw_Int_ActivateV+0x52>
 800c9e4:	89fb      	ldrh	r3, [r7, #14]
 800c9e6:	e011      	b.n	800ca0c <phacDiscLoop_Sw_Int_ActivateV+0x76>
            pDataParams->pPalSli15693DataParams,
            pDataParams->sTypeVTargetInfo.aTypeV[bTypeVTagIdx].aUid,
            PHPAL_SLI15693_UID_LENGTH));

    /* Skip Select command as per Activity specification v2.2, section 9.4.7.1 Symbol 0 */
    if (pDataParams->sTypeVTargetInfo.bMode == PHPAL_SLI15693_FLAG_SELECTED)
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	f893 30e1 	ldrb.w	r3, [r3, #225]	@ 0xe1
 800c9ee:	2b10      	cmp	r3, #16
 800c9f0:	d10b      	bne.n	800ca0a <phacDiscLoop_Sw_Int_ActivateV+0x74>
    {
        /* Move the tag to selected state */
        PH_CHECK_SUCCESS_FCT(status, phpalSli15693_Select(pDataParams->pPalSli15693DataParams));
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f00c fc0e 	bl	8019218 <phpalSli15693_Sw_Select>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	81fb      	strh	r3, [r7, #14]
 800ca00:	89fb      	ldrh	r3, [r7, #14]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d001      	beq.n	800ca0a <phacDiscLoop_Sw_Int_ActivateV+0x74>
 800ca06:	89fb      	ldrh	r3, [r7, #14]
 800ca08:	e000      	b.n	800ca0c <phacDiscLoop_Sw_Int_ActivateV+0x76>
    }

    return PH_ERR_SUCCESS;
 800ca0a:	2300      	movs	r3, #0
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */
}
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	3710      	adds	r7, #16
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bd80      	pop	{r7, pc}

0800ca14 <phalFelica_Sw_Init>:
phStatus_t phalFelica_Sw_Init(
                              phalFelica_Sw_DataParams_t * pDataParams,
                              uint16_t wSizeOfDataParams,
                              void * pPalFelica_DataParams
                              )
{
 800ca14:	b480      	push	{r7}
 800ca16:	b085      	sub	sp, #20
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	60f8      	str	r0, [r7, #12]
 800ca1c:	460b      	mov	r3, r1
 800ca1e:	607a      	str	r2, [r7, #4]
 800ca20:	817b      	strh	r3, [r7, #10]
    /* parameter structure length check */
    if (sizeof(phalFelica_Sw_DataParams_t) != wSizeOfDataParams)
 800ca22:	897b      	ldrh	r3, [r7, #10]
 800ca24:	2b0c      	cmp	r3, #12
 800ca26:	d002      	beq.n	800ca2e <phalFelica_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_FELICA);
 800ca28:	f44f 53a1 	mov.w	r3, #5152	@ 0x1420
 800ca2c:	e014      	b.n	800ca58 <phalFelica_Sw_Init+0x44>
    }
    PH_ASSERT_NULL (pDataParams);
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d101      	bne.n	800ca38 <phalFelica_Sw_Init+0x24>
 800ca34:	2321      	movs	r3, #33	@ 0x21
 800ca36:	e00f      	b.n	800ca58 <phalFelica_Sw_Init+0x44>
    PH_ASSERT_NULL (pPalFelica_DataParams);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d101      	bne.n	800ca42 <phalFelica_Sw_Init+0x2e>
 800ca3e:	2321      	movs	r3, #33	@ 0x21
 800ca40:	e00a      	b.n	800ca58 <phalFelica_Sw_Init+0x44>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_FELICA | PHAL_FELICA_SW_ID;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	f241 4201 	movw	r2, #5121	@ 0x1401
 800ca48:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalFelicaDataParams   = pPalFelica_DataParams;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	687a      	ldr	r2, [r7, #4]
 800ca4e:	605a      	str	r2, [r3, #4]
    pDataParams->wAdditionalInfo        = 0x0000;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	2200      	movs	r2, #0
 800ca54:	811a      	strh	r2, [r3, #8]

    return PH_ERR_SUCCESS;
 800ca56:	2300      	movs	r3, #0
}
 800ca58:	4618      	mov	r0, r3
 800ca5a:	3714      	adds	r7, #20
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca62:	4770      	bx	lr

0800ca64 <phalI18000p3m3_Sw_Init>:
phStatus_t phalI18000p3m3_Sw_Init(
                                  phalI18000p3m3_Sw_DataParams_t * pDataParams,
                                  uint16_t wSizeOfDataParams,
                                  void * pPalI18000p3m3DataParams
                                  )
{
 800ca64:	b480      	push	{r7}
 800ca66:	b085      	sub	sp, #20
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	60f8      	str	r0, [r7, #12]
 800ca6c:	460b      	mov	r3, r1
 800ca6e:	607a      	str	r2, [r7, #4]
 800ca70:	817b      	strh	r3, [r7, #10]
    if (sizeof(phalI18000p3m3_Sw_DataParams_t) != wSizeOfDataParams)
 800ca72:	897b      	ldrh	r3, [r7, #10]
 800ca74:	2b0c      	cmp	r3, #12
 800ca76:	d002      	beq.n	800ca7e <phalI18000p3m3_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_I18000P3M3);
 800ca78:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
 800ca7c:	e01a      	b.n	800cab4 <phalI18000p3m3_Sw_Init+0x50>
    }
    PH_ASSERT_NULL (pDataParams);
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d101      	bne.n	800ca88 <phalI18000p3m3_Sw_Init+0x24>
 800ca84:	2321      	movs	r3, #33	@ 0x21
 800ca86:	e015      	b.n	800cab4 <phalI18000p3m3_Sw_Init+0x50>
    PH_ASSERT_NULL (pPalI18000p3m3DataParams);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d101      	bne.n	800ca92 <phalI18000p3m3_Sw_Init+0x2e>
 800ca8e:	2321      	movs	r3, #33	@ 0x21
 800ca90:	e010      	b.n	800cab4 <phalI18000p3m3_Sw_Init+0x50>

    pDataParams->wId                        = PH_COMP_AL_I18000P3M3 | PHAL_I18000P3M3_SW_ID;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	f641 0201 	movw	r2, #6145	@ 0x1801
 800ca98:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalI18000p3m3DataParams   = pPalI18000p3m3DataParams;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	687a      	ldr	r2, [r7, #4]
 800ca9e:	605a      	str	r2, [r3, #4]
    pDataParams->bHandleValid               = PH_OFF;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	2200      	movs	r2, #0
 800caa4:	729a      	strb	r2, [r3, #10]
    pDataParams->abHandle[0]                = PH_OFF;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	2200      	movs	r2, #0
 800caaa:	721a      	strb	r2, [r3, #8]
    pDataParams->abHandle[1]                = PH_OFF;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	2200      	movs	r2, #0
 800cab0:	725a      	strb	r2, [r3, #9]

    return PH_ERR_SUCCESS;
 800cab2:	2300      	movs	r3, #0
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3714      	adds	r7, #20
 800cab8:	46bd      	mov	sp, r7
 800caba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabe:	4770      	bx	lr

0800cac0 <phalI18000p3m3_Sw_SetHandle>:

phStatus_t phalI18000p3m3_Sw_SetHandle(
                                       phalI18000p3m3_Sw_DataParams_t * pDataParams,
                                       uint8_t* pHandle
                                       )
{
 800cac0:	b480      	push	{r7}
 800cac2:	b083      	sub	sp, #12
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
 800cac8:	6039      	str	r1, [r7, #0]
    (void)memcpy(pDataParams->abHandle, pHandle, 2);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	3308      	adds	r3, #8
 800cace:	683a      	ldr	r2, [r7, #0]
 800cad0:	8812      	ldrh	r2, [r2, #0]
 800cad2:	b292      	uxth	r2, r2
 800cad4:	801a      	strh	r2, [r3, #0]
    pDataParams->bHandleValid = PH_ON;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2201      	movs	r2, #1
 800cada:	729a      	strb	r2, [r3, #10]
    return PH_ERR_SUCCESS;
 800cadc:	2300      	movs	r3, #0
}
 800cade:	4618      	mov	r0, r3
 800cae0:	370c      	adds	r7, #12
 800cae2:	46bd      	mov	sp, r7
 800cae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae8:	4770      	bx	lr

0800caea <phalICode_Sw_Init>:
 *          PH_ERR_SUCCESS for successfull operation.
 *          Other Depending on implementation and underlaying component.
 */
phStatus_t phalICode_Sw_Init(phalICode_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pPalSli15693DataParams, void * pCryptoDataParams,
        void * pCryptoRngDataParams, void * pKeyStoreDataParams)
{
 800caea:	b580      	push	{r7, lr}
 800caec:	b084      	sub	sp, #16
 800caee:	af00      	add	r7, sp, #0
 800caf0:	60f8      	str	r0, [r7, #12]
 800caf2:	607a      	str	r2, [r7, #4]
 800caf4:	603b      	str	r3, [r7, #0]
 800caf6:	460b      	mov	r3, r1
 800caf8:	817b      	strh	r3, [r7, #10]
    /* Validate the parameters. */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_AL_ICODE);
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d102      	bne.n	800cb06 <phalICode_Sw_Init+0x1c>
 800cb00:	f44f 53a9 	mov.w	r3, #5408	@ 0x1520
 800cb04:	e026      	b.n	800cb54 <phalICode_Sw_Init+0x6a>
    PH_ASSERT_NULL_PARAM(pPalSli15693DataParams, PH_COMP_AL_ICODE);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d102      	bne.n	800cb12 <phalICode_Sw_Init+0x28>
 800cb0c:	f241 5321 	movw	r3, #5409	@ 0x1521
 800cb10:	e020      	b.n	800cb54 <phalICode_Sw_Init+0x6a>

    /* Check the size. */
    if (sizeof(phalICode_Sw_DataParams_t) != wSizeOfDataParams)
 800cb12:	897b      	ldrh	r3, [r7, #10]
 800cb14:	2b20      	cmp	r3, #32
 800cb16:	d002      	beq.n	800cb1e <phalICode_Sw_Init+0x34>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_ICODE);
 800cb18:	f44f 53a9 	mov.w	r3, #5408	@ 0x1520
 800cb1c:	e01a      	b.n	800cb54 <phalICode_Sw_Init+0x6a>
    }

    /* Initialize the structure members. */
    pDataParams->wId                    = PH_COMP_AL_ICODE | PHAL_ICODE_SW_ID;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	f241 5201 	movw	r2, #5377	@ 0x1501
 800cb24:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalSli15693DataParams = pPalSli15693DataParams;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	687a      	ldr	r2, [r7, #4]
 800cb2a:	605a      	str	r2, [r3, #4]
    pDataParams->pCryptoDataParams      = pCryptoDataParams;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	683a      	ldr	r2, [r7, #0]
 800cb30:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoRngDataParams   = pCryptoRngDataParams;
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	69ba      	ldr	r2, [r7, #24]
 800cb36:	60da      	str	r2, [r3, #12]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	69fa      	ldr	r2, [r7, #28]
 800cb3c:	611a      	str	r2, [r3, #16]
    pDataParams->bBuffering             = PH_ON;
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	2201      	movs	r2, #1
 800cb42:	779a      	strb	r2, [r3, #30]

    /* Reset the random number buffer. */
    (void)memset(pDataParams->aRnd_Challenge, 0x00, PHAL_ICODE_RANDOM_NUMBER_SIZE);
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	3314      	adds	r3, #20
 800cb48:	220a      	movs	r2, #10
 800cb4a:	2100      	movs	r1, #0
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	f013 fea1 	bl	8020894 <memset>

    return PH_ERR_SUCCESS;
 800cb52:	2300      	movs	r3, #0
}
 800cb54:	4618      	mov	r0, r3
 800cb56:	3710      	adds	r7, #16
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	bd80      	pop	{r7, pc}

0800cb5c <phalMfNtag42XDna_Sw_Init>:
/* VC keys are invalid after 0x23. */
 #define IS_INVALID_VC_KEY(keyNo)	(((keyNo) & 0x7FU) > 0x23U)

phStatus_t phalMfNtag42XDna_Sw_Init(phalMfNtag42XDna_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pPalMifareDataParams,
    void * pKeyStoreDataParams, void * pCryptoDataParamsEnc, void * pCryptoDataParamsMac, void * pCryptoRngDataParams, void * pHalDataParams)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b084      	sub	sp, #16
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	60f8      	str	r0, [r7, #12]
 800cb64:	607a      	str	r2, [r7, #4]
 800cb66:	603b      	str	r3, [r7, #0]
 800cb68:	460b      	mov	r3, r1
 800cb6a:	817b      	strh	r3, [r7, #10]
    /* data param check */
    if (sizeof(phalMfNtag42XDna_Sw_DataParams_t) != wSizeOfDataParams)
 800cb6c:	897b      	ldrh	r3, [r7, #10]
 800cb6e:	2ba8      	cmp	r3, #168	@ 0xa8
 800cb70:	d002      	beq.n	800cb78 <phalMfNtag42XDna_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFNTAG42XDNA);
 800cb72:	f242 6320 	movw	r3, #9760	@ 0x2620
 800cb76:	e0a1      	b.n	800ccbc <phalMfNtag42XDna_Sw_Init+0x160>
    }

    PH_ASSERT_NULL_DATA_PARAM(pDataParams,PH_COMP_AL_MFNTAG42XDNA);
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d102      	bne.n	800cb84 <phalMfNtag42XDna_Sw_Init+0x28>
 800cb7e:	f242 6320 	movw	r3, #9760	@ 0x2620
 800cb82:	e09b      	b.n	800ccbc <phalMfNtag42XDna_Sw_Init+0x160>
    PH_ASSERT_NULL_PARAM (pPalMifareDataParams,PH_COMP_AL_MFNTAG42XDNA);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d102      	bne.n	800cb90 <phalMfNtag42XDna_Sw_Init+0x34>
 800cb8a:	f242 6321 	movw	r3, #9761	@ 0x2621
 800cb8e:	e095      	b.n	800ccbc <phalMfNtag42XDna_Sw_Init+0x160>
#ifdef NXPBUILD__PH_CRYPTOSYM
    PH_ASSERT_NULL_PARAM (pKeyStoreDataParams,PH_COMP_AL_MFNTAG42XDNA);
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d102      	bne.n	800cb9c <phalMfNtag42XDna_Sw_Init+0x40>
 800cb96:	f242 6321 	movw	r3, #9761	@ 0x2621
 800cb9a:	e08f      	b.n	800ccbc <phalMfNtag42XDna_Sw_Init+0x160>
    PH_ASSERT_NULL_PARAM (pCryptoDataParamsEnc,PH_COMP_AL_MFNTAG42XDNA);
 800cb9c:	69bb      	ldr	r3, [r7, #24]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d102      	bne.n	800cba8 <phalMfNtag42XDna_Sw_Init+0x4c>
 800cba2:	f242 6321 	movw	r3, #9761	@ 0x2621
 800cba6:	e089      	b.n	800ccbc <phalMfNtag42XDna_Sw_Init+0x160>
    PH_ASSERT_NULL_PARAM (pCryptoDataParamsMac,PH_COMP_AL_MFNTAG42XDNA);
 800cba8:	69fb      	ldr	r3, [r7, #28]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d102      	bne.n	800cbb4 <phalMfNtag42XDna_Sw_Init+0x58>
 800cbae:	f242 6321 	movw	r3, #9761	@ 0x2621
 800cbb2:	e083      	b.n	800ccbc <phalMfNtag42XDna_Sw_Init+0x160>
    PH_ASSERT_NULL_PARAM (pCryptoRngDataParams,PH_COMP_AL_MFNTAG42XDNA);
 800cbb4:	6a3b      	ldr	r3, [r7, #32]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d102      	bne.n	800cbc0 <phalMfNtag42XDna_Sw_Init+0x64>
 800cbba:	f242 6321 	movw	r3, #9761	@ 0x2621
 800cbbe:	e07d      	b.n	800ccbc <phalMfNtag42XDna_Sw_Init+0x160>
#endif /* NXPBUILD__PH_CRYPTOSYM */
    PH_ASSERT_NULL_PARAM (pHalDataParams,PH_COMP_AL_MFNTAG42XDNA);
 800cbc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d102      	bne.n	800cbcc <phalMfNtag42XDna_Sw_Init+0x70>
 800cbc6:	f242 6321 	movw	r3, #9761	@ 0x2621
 800cbca:	e077      	b.n	800ccbc <phalMfNtag42XDna_Sw_Init+0x160>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_MFNTAG42XDNA | PHAL_MFNTAG42XDNA_SW_ID;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	f242 6201 	movw	r2, #9729	@ 0x2601
 800cbd2:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams   = pPalMifareDataParams;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	687a      	ldr	r2, [r7, #4]
 800cbd8:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	683a      	ldr	r2, [r7, #0]
 800cbde:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParamsEnc   = pCryptoDataParamsEnc;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	69ba      	ldr	r2, [r7, #24]
 800cbe4:	60da      	str	r2, [r3, #12]
    pDataParams->pCryptoDataParamsMac   = pCryptoDataParamsMac;
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	69fa      	ldr	r2, [r7, #28]
 800cbea:	611a      	str	r2, [r3, #16]
    pDataParams->pCryptoRngDataParams   = pCryptoRngDataParams;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	6a3a      	ldr	r2, [r7, #32]
 800cbf0:	615a      	str	r2, [r3, #20]
    pDataParams->pHalDataParams         = pHalDataParams;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cbf6:	619a      	str	r2, [r3, #24]
    /* 2 Byte CRC initial value in Authenticate mode. */
    pDataParams->wCrc = PH_TOOLS_CRC16_PRESET_ISO14443A;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	f246 3263 	movw	r2, #25443	@ 0x6363
 800cbfe:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

    /* 4 Byte CRC initial value in 0x1A, 0xAA mode. */
    pDataParams->dwCrc = PH_TOOLS_CRC32_PRESET_DF8;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	f04f 32ff 	mov.w	r2, #4294967295
 800cc08:	651a      	str	r2, [r3, #80]	@ 0x50

    memset(pDataParams->bSesAuthENCKey, 0x00, 24);  /* PRQA S 3200 */
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	331c      	adds	r3, #28
 800cc0e:	2218      	movs	r2, #24
 800cc10:	2100      	movs	r1, #0
 800cc12:	4618      	mov	r0, r3
 800cc14:	f013 fe3e 	bl	8020894 <memset>
    pDataParams->bKeyNo = 0xFF; /* Set to invalid */
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	22ff      	movs	r2, #255	@ 0xff
 800cc1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    memset(pDataParams->bIv, 0x00, 16); /* PRQA S 3200 */
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	3335      	adds	r3, #53	@ 0x35
 800cc24:	2210      	movs	r2, #16
 800cc26:	2100      	movs	r1, #0
 800cc28:	4618      	mov	r0, r3
 800cc2a:	f013 fe33 	bl	8020894 <memset>
    memset(pDataParams->pAid, 0x00, 3);  /* PRQA S 3200 */
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	3346      	adds	r3, #70	@ 0x46
 800cc32:	2203      	movs	r2, #3
 800cc34:	2100      	movs	r1, #0
 800cc36:	4618      	mov	r0, r3
 800cc38:	f013 fe2c 	bl	8020894 <memset>
    pDataParams->bAuthMode = PHAL_MFNTAG42XDNA_NOT_AUTHENTICATED; /* Set to invalid */
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	22ff      	movs	r2, #255	@ 0xff
 800cc40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    pDataParams->bWrappedMode = 0x01U; /* Set to true */
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	2201      	movs	r2, #1
 800cc48:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
    pDataParams->bCryptoMethod = 0xFFU; /* No crypto just after init */
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	22ff      	movs	r2, #255	@ 0xff
 800cc50:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
    pDataParams->wAdditionalInfo = 0x0000;
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	2200      	movs	r2, #0
 800cc58:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    pDataParams->bShortLenApdu = 0x01U; /* Since Prime variant supports only Short Length APDU, setting this to 0x01 always */
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	2201      	movs	r2, #1
 800cc60:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
    pDataParams->dwPayLoadLen = 0;
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	2200      	movs	r2, #0
 800cc68:	659a      	str	r2, [r3, #88]	@ 0x58
    pDataParams->wCmdCtr = 0;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    memset(pDataParams->bTi, 0x00, PHAL_MFNTAG42XDNA_SIZE_TI);  /* PRQA S 3200 */
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	335e      	adds	r3, #94	@ 0x5e
 800cc76:	2204      	movs	r2, #4
 800cc78:	2100      	movs	r1, #0
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f013 fe0a 	bl	8020894 <memset>
    memset(pDataParams->bSesAuthMACKey, 0x00, 16);  /* PRQA S 3200 */
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	3362      	adds	r3, #98	@ 0x62
 800cc84:	2210      	movs	r2, #16
 800cc86:	2100      	movs	r1, #0
 800cc88:	4618      	mov	r0, r3
 800cc8a:	f013 fe03 	bl	8020894 <memset>
    memset(pDataParams->pUnprocByteBuff, 0x00, PHAL_MFNTAG42XDNA_SIZE_MAC);  /* PRQA S 3200 */
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	3382      	adds	r3, #130	@ 0x82
 800cc92:	2210      	movs	r2, #16
 800cc94:	2100      	movs	r1, #0
 800cc96:	4618      	mov	r0, r3
 800cc98:	f013 fdfc 	bl	8020894 <memset>
    pDataParams->bNoUnprocBytes = 0;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	2200      	movs	r2, #0
 800cca0:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
    memset(pDataParams->bLastBlockBuffer, 0x00, 16);  /* PRQA S 3200 */
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	3393      	adds	r3, #147	@ 0x93
 800cca8:	2210      	movs	r2, #16
 800ccaa:	2100      	movs	r1, #0
 800ccac:	4618      	mov	r0, r3
 800ccae:	f013 fdf1 	bl	8020894 <memset>
    pDataParams->bLastBlockIndex = 0;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3

    return PH_ERR_SUCCESS;
 800ccba:	2300      	movs	r3, #0
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3710      	adds	r7, #16
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}

0800ccc4 <phalMfc_Sw_Init>:
                           phalMfc_Sw_DataParams_t * pDataParams,
                           uint16_t wSizeOfDataParams,
                           void * pPalMifareDataParams,
                           void * pKeyStoreDataParams
                           )
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b085      	sub	sp, #20
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	60f8      	str	r0, [r7, #12]
 800cccc:	607a      	str	r2, [r7, #4]
 800ccce:	603b      	str	r3, [r7, #0]
 800ccd0:	460b      	mov	r3, r1
 800ccd2:	817b      	strh	r3, [r7, #10]
    if (sizeof(phalMfc_Sw_DataParams_t) != wSizeOfDataParams)
 800ccd4:	897b      	ldrh	r3, [r7, #10]
 800ccd6:	2b0c      	cmp	r3, #12
 800ccd8:	d002      	beq.n	800cce0 <phalMfc_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFC);
 800ccda:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 800ccde:	e014      	b.n	800cd0a <phalMfc_Sw_Init+0x46>
    }
    PH_ASSERT_NULL (pDataParams);
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d101      	bne.n	800ccea <phalMfc_Sw_Init+0x26>
 800cce6:	2321      	movs	r3, #33	@ 0x21
 800cce8:	e00f      	b.n	800cd0a <phalMfc_Sw_Init+0x46>
    PH_ASSERT_NULL (pPalMifareDataParams);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d101      	bne.n	800ccf4 <phalMfc_Sw_Init+0x30>
 800ccf0:	2321      	movs	r3, #33	@ 0x21
 800ccf2:	e00a      	b.n	800cd0a <phalMfc_Sw_Init+0x46>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_MFC | PHAL_MFC_SW_ID;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	f241 0201 	movw	r2, #4097	@ 0x1001
 800ccfa:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams   = pPalMifareDataParams;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	687a      	ldr	r2, [r7, #4]
 800cd00:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	683a      	ldr	r2, [r7, #0]
 800cd06:	609a      	str	r2, [r3, #8]

    return PH_ERR_SUCCESS;
 800cd08:	2300      	movs	r3, #0
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3714      	adds	r7, #20
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd14:	4770      	bx	lr

0800cd16 <phalMfdf_Sw_Init>:
                            void * pKeyStoreDataParams,
                            void * pCryptoDataParamsEnc,
                            void * pCryptoRngDataParams,
                            void * pHalDataParams
                            )
{
 800cd16:	b580      	push	{r7, lr}
 800cd18:	b084      	sub	sp, #16
 800cd1a:	af00      	add	r7, sp, #0
 800cd1c:	60f8      	str	r0, [r7, #12]
 800cd1e:	607a      	str	r2, [r7, #4]
 800cd20:	603b      	str	r3, [r7, #0]
 800cd22:	460b      	mov	r3, r1
 800cd24:	817b      	strh	r3, [r7, #10]
    /* data param check */
    if (sizeof(phalMfdf_Sw_DataParams_t) != wSizeOfDataParams)
 800cd26:	897b      	ldrh	r3, [r7, #10]
 800cd28:	2b68      	cmp	r3, #104	@ 0x68
 800cd2a:	d002      	beq.n	800cd32 <phalMfdf_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFDF);
 800cd2c:	f44f 53c9 	mov.w	r3, #6432	@ 0x1920
 800cd30:	e057      	b.n	800cde2 <phalMfdf_Sw_Init+0xcc>
    }
    PH_ASSERT_NULL (pDataParams);
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d101      	bne.n	800cd3c <phalMfdf_Sw_Init+0x26>
 800cd38:	2321      	movs	r3, #33	@ 0x21
 800cd3a:	e052      	b.n	800cde2 <phalMfdf_Sw_Init+0xcc>
    PH_ASSERT_NULL (pPalMifareDataParams);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d101      	bne.n	800cd46 <phalMfdf_Sw_Init+0x30>
 800cd42:	2321      	movs	r3, #33	@ 0x21
 800cd44:	e04d      	b.n	800cde2 <phalMfdf_Sw_Init+0xcc>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_MFDF | PHAL_MFDF_SW_ID;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	f641 1201 	movw	r2, #6401	@ 0x1901
 800cd4c:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams   = pPalMifareDataParams;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	687a      	ldr	r2, [r7, #4]
 800cd52:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	683a      	ldr	r2, [r7, #0]
 800cd58:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParamsEnc   = pCryptoDataParamsEnc;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	69ba      	ldr	r2, [r7, #24]
 800cd5e:	60da      	str	r2, [r3, #12]
    pDataParams->pCryptoRngDataParams   = pCryptoRngDataParams;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	69fa      	ldr	r2, [r7, #28]
 800cd64:	611a      	str	r2, [r3, #16]
    pDataParams->bLastBlockIndex        = 0;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	2200      	movs	r2, #0
 800cd6a:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
    pDataParams->pHalDataParams  = pHalDataParams;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	6a3a      	ldr	r2, [r7, #32]
 800cd72:	615a      	str	r2, [r3, #20]
    /* 2 Byte CRC initial value in Authenticate mode. */
    pDataParams->wCrc = PH_TOOLS_CRC16_PRESET_ISO14443A;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	f246 3263 	movw	r2, #25443	@ 0x6363
 800cd7a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48

    /* 4 Byte CRC initial value in 0x1A, 0xAA mode. */
    pDataParams->dwCrc = PH_TOOLS_CRC32_PRESET_DF8;
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	f04f 32ff 	mov.w	r2, #4294967295
 800cd84:	64da      	str	r2, [r3, #76]	@ 0x4c

    (void)memset(pDataParams->bSessionKey, 0x00, 24);
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	3318      	adds	r3, #24
 800cd8a:	2218      	movs	r2, #24
 800cd8c:	2100      	movs	r1, #0
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f013 fd80 	bl	8020894 <memset>
    pDataParams->bKeyNo = 0xFF; /* Set to invalid */
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	22ff      	movs	r2, #255	@ 0xff
 800cd98:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    (void)memset(pDataParams->bIv, 0x00, 16);
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	3331      	adds	r3, #49	@ 0x31
 800cda0:	2210      	movs	r2, #16
 800cda2:	2100      	movs	r1, #0
 800cda4:	4618      	mov	r0, r3
 800cda6:	f013 fd75 	bl	8020894 <memset>
    (void)memset(pDataParams->pAid, 0x00, 3);
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	3342      	adds	r3, #66	@ 0x42
 800cdae:	2203      	movs	r2, #3
 800cdb0:	2100      	movs	r1, #0
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	f013 fd6e 	bl	8020894 <memset>
    pDataParams->bAuthMode = PHAL_MFDF_NOT_AUTHENTICATED; /* Set to invalid */
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	22ff      	movs	r2, #255	@ 0xff
 800cdbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    pDataParams->bWrappedMode = 0x00; /* Set to FALSE */
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
    pDataParams->bCryptoMethod = 0xFF; /* No crypto just after init */
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	22ff      	movs	r2, #255	@ 0xff
 800cdcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    pDataParams->wAdditionalInfo = 0x0000;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    pDataParams->wPayLoadLen = 0;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	2200      	movs	r2, #0
 800cddc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    return PH_ERR_SUCCESS;
 800cde0:	2300      	movs	r3, #0
}
 800cde2:	4618      	mov	r0, r3
 800cde4:	3710      	adds	r7, #16
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd80      	pop	{r7, pc}

0800cdea <phalMfdfEVx_Sw_Init>:
 #define IS_INVALID_VC_KEY(keyNo)   (((keyNo) & 0x7fU) > 0x23U)

phStatus_t phalMfdfEVx_Sw_Init(phalMfdfEVx_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pPalMifareDataParams,
    void * pKeyStoreDataParams, void * pCryptoDataParamsEnc, void * pCryptoDataParamsMac, void * pCryptoRngDataParams,
    void * pTMIDataParams, void * pVCADataParams, void * pHalDataParams)
{
 800cdea:	b580      	push	{r7, lr}
 800cdec:	b084      	sub	sp, #16
 800cdee:	af00      	add	r7, sp, #0
 800cdf0:	60f8      	str	r0, [r7, #12]
 800cdf2:	607a      	str	r2, [r7, #4]
 800cdf4:	603b      	str	r3, [r7, #0]
 800cdf6:	460b      	mov	r3, r1
 800cdf8:	817b      	strh	r3, [r7, #10]
    /* data param check */
    if (sizeof(phalMfdfEVx_Sw_DataParams_t) != wSizeOfDataParams)
 800cdfa:	897b      	ldrh	r3, [r7, #10]
 800cdfc:	2bb4      	cmp	r3, #180	@ 0xb4
 800cdfe:	d002      	beq.n	800ce06 <phalMfdfEVx_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFDFEVX);
 800ce00:	f242 0320 	movw	r3, #8224	@ 0x2020
 800ce04:	e09f      	b.n	800cf46 <phalMfdfEVx_Sw_Init+0x15c>
    }
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_AL_MFDFEVX);
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d102      	bne.n	800ce12 <phalMfdfEVx_Sw_Init+0x28>
 800ce0c:	f242 0320 	movw	r3, #8224	@ 0x2020
 800ce10:	e099      	b.n	800cf46 <phalMfdfEVx_Sw_Init+0x15c>
    PH_ASSERT_NULL_PARAM(pPalMifareDataParams, PH_COMP_AL_MFDFEVX);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d102      	bne.n	800ce1e <phalMfdfEVx_Sw_Init+0x34>
 800ce18:	f242 0321 	movw	r3, #8225	@ 0x2021
 800ce1c:	e093      	b.n	800cf46 <phalMfdfEVx_Sw_Init+0x15c>
    PH_ASSERT_NULL_PARAM(pTMIDataParams, PH_COMP_AL_MFDFEVX);
 800ce1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d102      	bne.n	800ce2a <phalMfdfEVx_Sw_Init+0x40>
 800ce24:	f242 0321 	movw	r3, #8225	@ 0x2021
 800ce28:	e08d      	b.n	800cf46 <phalMfdfEVx_Sw_Init+0x15c>
    PH_ASSERT_NULL_PARAM(pVCADataParams, PH_COMP_AL_MFDFEVX);
 800ce2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d102      	bne.n	800ce36 <phalMfdfEVx_Sw_Init+0x4c>
 800ce30:	f242 0321 	movw	r3, #8225	@ 0x2021
 800ce34:	e087      	b.n	800cf46 <phalMfdfEVx_Sw_Init+0x15c>

    /* init private data */
    pDataParams->wId = PH_COMP_AL_MFDFEVX | PHAL_MFDFEVX_SW_ID;
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	f242 0201 	movw	r2, #8193	@ 0x2001
 800ce3c:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams = pPalMifareDataParams;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	687a      	ldr	r2, [r7, #4]
 800ce42:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams = pKeyStoreDataParams;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	683a      	ldr	r2, [r7, #0]
 800ce48:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParamsEnc = pCryptoDataParamsEnc;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	69ba      	ldr	r2, [r7, #24]
 800ce4e:	60da      	str	r2, [r3, #12]
    pDataParams->pCryptoDataParamsMac = pCryptoDataParamsMac;
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	69fa      	ldr	r2, [r7, #28]
 800ce54:	611a      	str	r2, [r3, #16]
    pDataParams->pCryptoRngDataParams = pCryptoRngDataParams;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	6a3a      	ldr	r2, [r7, #32]
 800ce5a:	615a      	str	r2, [r3, #20]
    pDataParams->pTMIDataParams = pTMIDataParams;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce60:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    pDataParams->pVCADataParams = pVCADataParams;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce68:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    pDataParams->pHalDataParams = pHalDataParams;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce70:	619a      	str	r2, [r3, #24]
    /* 2 Byte CRC initial value in Authenticate mode. */
    pDataParams->wCrc = PH_TOOLS_CRC16_PRESET_ISO14443A;
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	f246 3263 	movw	r2, #25443	@ 0x6363
 800ce78:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

    /* 4 Byte CRC initial value in 0x1A, 0xAA mode. */
    pDataParams->dwCrc = PH_TOOLS_CRC32_PRESET_DF8;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	f04f 32ff 	mov.w	r2, #4294967295
 800ce82:	651a      	str	r2, [r3, #80]	@ 0x50

    (void)memset(pDataParams->bSesAuthENCKey, 0x00, 24);
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	331c      	adds	r3, #28
 800ce88:	2218      	movs	r2, #24
 800ce8a:	2100      	movs	r1, #0
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f013 fd01 	bl	8020894 <memset>
    pDataParams->bKeyNo = 0xFF; /* Set to invalid */
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	22ff      	movs	r2, #255	@ 0xff
 800ce96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    (void)memset(pDataParams->bIv, 0x00, 16);
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	3335      	adds	r3, #53	@ 0x35
 800ce9e:	2210      	movs	r2, #16
 800cea0:	2100      	movs	r1, #0
 800cea2:	4618      	mov	r0, r3
 800cea4:	f013 fcf6 	bl	8020894 <memset>
    (void)memset(pDataParams->pAid, 0x00, 3);
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	3347      	adds	r3, #71	@ 0x47
 800ceac:	2203      	movs	r2, #3
 800ceae:	2100      	movs	r1, #0
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	f013 fcef 	bl	8020894 <memset>
    pDataParams->bAuthMode = PHAL_MFDFEVX_NOT_AUTHENTICATED; /* Set to invalid */
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	22ff      	movs	r2, #255	@ 0xff
 800ceba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    pDataParams->bWrappedMode = 0x00; /* Set to false */
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	2200      	movs	r2, #0
 800cec2:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
    pDataParams->bCryptoMethod = 0xFF; /* No crypto just after init */
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	22ff      	movs	r2, #255	@ 0xff
 800ceca:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
    pDataParams->wAdditionalInfo = 0x0000;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	2200      	movs	r2, #0
 800ced2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    pDataParams->bShortLenApdu = 0x00; /* By default, extended length APDU format is used for BIG ISO Read */
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	2200      	movs	r2, #0
 800ceda:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
    pDataParams->dwPayLoadLen = 0;
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	2200      	movs	r2, #0
 800cee2:	659a      	str	r2, [r3, #88]	@ 0x58
    pDataParams->wCmdCtr = 0;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	2200      	movs	r2, #0
 800cee8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    (void)memset(pDataParams->bTi, 0x00, PHAL_MFDFEVX_SIZE_TI);
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	335e      	adds	r3, #94	@ 0x5e
 800cef0:	2204      	movs	r2, #4
 800cef2:	2100      	movs	r1, #0
 800cef4:	4618      	mov	r0, r3
 800cef6:	f013 fccd 	bl	8020894 <memset>
    (void)memset(pDataParams->bSesAuthMACKey, 0x00, 16);
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	3362      	adds	r3, #98	@ 0x62
 800cefe:	2210      	movs	r2, #16
 800cf00:	2100      	movs	r1, #0
 800cf02:	4618      	mov	r0, r3
 800cf04:	f013 fcc6 	bl	8020894 <memset>
    (void)memset(pDataParams->pUnprocByteBuff, 0x00, PHAL_MFDFEVX_SIZE_MAC);
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	3372      	adds	r3, #114	@ 0x72
 800cf0c:	2210      	movs	r2, #16
 800cf0e:	2100      	movs	r1, #0
 800cf10:	4618      	mov	r0, r3
 800cf12:	f013 fcbf 	bl	8020894 <memset>
    pDataParams->bNoUnprocBytes = 0;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	2200      	movs	r2, #0
 800cf1a:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    (void)memset(pDataParams->bLastBlockBuffer, 0x00, 16);
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	3383      	adds	r3, #131	@ 0x83
 800cf22:	2210      	movs	r2, #16
 800cf24:	2100      	movs	r1, #0
 800cf26:	4618      	mov	r0, r3
 800cf28:	f013 fcb4 	bl	8020894 <memset>
    pDataParams->bLastBlockIndex = 0;
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	2200      	movs	r2, #0
 800cf30:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    pDataParams->bCmdCode = PHAL_MFDFEVX_CMD_INVALID;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	22ff      	movs	r2, #255	@ 0xff
 800cf38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
    pDataParams->bReturn_FabID = PH_OFF;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1

    return PH_ERR_SUCCESS;
 800cf44:	2300      	movs	r3, #0
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	3710      	adds	r7, #16
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}

0800cf4e <phalMfdfLight_Sw_Init>:
/* VC keys are invalid after 0x23. */
 #define IS_INVALID_VC_KEY(keyNo)   (((keyNo) & 0x7FU) > 0x23U)

phStatus_t phalMfdfLight_Sw_Init(phalMfdfLight_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pPalMifareDataParams, void * pKeyStoreDataParams,
    void * pCryptoDataParamsEnc, void * pCryptoDataParamsMac, void * pCryptoRngDataParams, void * pTMIDataParams, void * pHalDataParams)
{
 800cf4e:	b580      	push	{r7, lr}
 800cf50:	b084      	sub	sp, #16
 800cf52:	af00      	add	r7, sp, #0
 800cf54:	60f8      	str	r0, [r7, #12]
 800cf56:	607a      	str	r2, [r7, #4]
 800cf58:	603b      	str	r3, [r7, #0]
 800cf5a:	460b      	mov	r3, r1
 800cf5c:	817b      	strh	r3, [r7, #10]
    /* data param check */
    if (sizeof(phalMfdfLight_Sw_DataParams_t) != wSizeOfDataParams)
 800cf5e:	897b      	ldrh	r3, [r7, #10]
 800cf60:	2bac      	cmp	r3, #172	@ 0xac
 800cf62:	d002      	beq.n	800cf6a <phalMfdfLight_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFDFLIGHT);
 800cf64:	f242 3320 	movw	r3, #8992	@ 0x2320
 800cf68:	e0ab      	b.n	800d0c2 <phalMfdfLight_Sw_Init+0x174>
    }

    PH_ASSERT_NULL_DATA_PARAM(pDataParams,PH_COMP_AL_MFDFLIGHT);
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d102      	bne.n	800cf76 <phalMfdfLight_Sw_Init+0x28>
 800cf70:	f242 3320 	movw	r3, #8992	@ 0x2320
 800cf74:	e0a5      	b.n	800d0c2 <phalMfdfLight_Sw_Init+0x174>
    PH_ASSERT_NULL_PARAM (pPalMifareDataParams,PH_COMP_AL_MFDFLIGHT);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d102      	bne.n	800cf82 <phalMfdfLight_Sw_Init+0x34>
 800cf7c:	f242 3321 	movw	r3, #8993	@ 0x2321
 800cf80:	e09f      	b.n	800d0c2 <phalMfdfLight_Sw_Init+0x174>
#ifdef NXPBUILD__PH_CRYPTOSYM
    PH_ASSERT_NULL_PARAM (pKeyStoreDataParams,PH_COMP_AL_MFDFLIGHT);
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d102      	bne.n	800cf8e <phalMfdfLight_Sw_Init+0x40>
 800cf88:	f242 3321 	movw	r3, #8993	@ 0x2321
 800cf8c:	e099      	b.n	800d0c2 <phalMfdfLight_Sw_Init+0x174>
    PH_ASSERT_NULL_PARAM (pCryptoDataParamsEnc,PH_COMP_AL_MFDFLIGHT);
 800cf8e:	69bb      	ldr	r3, [r7, #24]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d102      	bne.n	800cf9a <phalMfdfLight_Sw_Init+0x4c>
 800cf94:	f242 3321 	movw	r3, #8993	@ 0x2321
 800cf98:	e093      	b.n	800d0c2 <phalMfdfLight_Sw_Init+0x174>
    PH_ASSERT_NULL_PARAM (pCryptoDataParamsMac,PH_COMP_AL_MFDFLIGHT);
 800cf9a:	69fb      	ldr	r3, [r7, #28]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d102      	bne.n	800cfa6 <phalMfdfLight_Sw_Init+0x58>
 800cfa0:	f242 3321 	movw	r3, #8993	@ 0x2321
 800cfa4:	e08d      	b.n	800d0c2 <phalMfdfLight_Sw_Init+0x174>
    PH_ASSERT_NULL_PARAM (pCryptoRngDataParams,PH_COMP_AL_MFDFLIGHT);
 800cfa6:	6a3b      	ldr	r3, [r7, #32]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d102      	bne.n	800cfb2 <phalMfdfLight_Sw_Init+0x64>
 800cfac:	f242 3321 	movw	r3, #8993	@ 0x2321
 800cfb0:	e087      	b.n	800d0c2 <phalMfdfLight_Sw_Init+0x174>
#endif /* NXPBUILD__PH_CRYPTOSYM */
    PH_ASSERT_NULL_PARAM (pTMIDataParams,PH_COMP_AL_MFDFLIGHT);
 800cfb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d102      	bne.n	800cfbe <phalMfdfLight_Sw_Init+0x70>
 800cfb8:	f242 3321 	movw	r3, #8993	@ 0x2321
 800cfbc:	e081      	b.n	800d0c2 <phalMfdfLight_Sw_Init+0x174>
    PH_ASSERT_NULL_PARAM (pHalDataParams,PH_COMP_AL_MFDFLIGHT);
 800cfbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d102      	bne.n	800cfca <phalMfdfLight_Sw_Init+0x7c>
 800cfc4:	f242 3321 	movw	r3, #8993	@ 0x2321
 800cfc8:	e07b      	b.n	800d0c2 <phalMfdfLight_Sw_Init+0x174>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_MFDFLIGHT | PHAL_MFDFLIGHT_SW_ID;
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	f242 3201 	movw	r2, #8961	@ 0x2301
 800cfd0:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams   = pPalMifareDataParams;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	687a      	ldr	r2, [r7, #4]
 800cfd6:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	683a      	ldr	r2, [r7, #0]
 800cfdc:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParamsEnc   = pCryptoDataParamsEnc;
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	69ba      	ldr	r2, [r7, #24]
 800cfe2:	60da      	str	r2, [r3, #12]
    pDataParams->pCryptoDataParamsMac   = pCryptoDataParamsMac;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	69fa      	ldr	r2, [r7, #28]
 800cfe8:	611a      	str	r2, [r3, #16]
    pDataParams->pCryptoRngDataParams   = pCryptoRngDataParams;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	6a3a      	ldr	r2, [r7, #32]
 800cfee:	615a      	str	r2, [r3, #20]
    pDataParams->pTMIDataParams         = pTMIDataParams;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cff4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    pDataParams->pHalDataParams         = pHalDataParams;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cffc:	619a      	str	r2, [r3, #24]
    /* 2 Byte CRC initial value in Authenticate mode. */
    pDataParams->wCrc = PH_TOOLS_CRC16_PRESET_ISO14443A;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	f246 3263 	movw	r2, #25443	@ 0x6363
 800d004:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

    /* 4 Byte CRC initial value in 0x1A, 0xAA mode. */
    pDataParams->dwCrc = PH_TOOLS_CRC32_PRESET_DF8;
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	f04f 32ff 	mov.w	r2, #4294967295
 800d00e:	651a      	str	r2, [r3, #80]	@ 0x50

    memset(pDataParams->bSesAuthENCKey, 0x00, 24U);  /* PRQA S 3200 */
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	331c      	adds	r3, #28
 800d014:	2218      	movs	r2, #24
 800d016:	2100      	movs	r1, #0
 800d018:	4618      	mov	r0, r3
 800d01a:	f013 fc3b 	bl	8020894 <memset>
    pDataParams->bKeyNo = 0xFFU; /* Set to invalid */
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	22ff      	movs	r2, #255	@ 0xff
 800d022:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    memset(pDataParams->bIv, 0x00, 16U); /* PRQA S 3200 */
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	3335      	adds	r3, #53	@ 0x35
 800d02a:	2210      	movs	r2, #16
 800d02c:	2100      	movs	r1, #0
 800d02e:	4618      	mov	r0, r3
 800d030:	f013 fc30 	bl	8020894 <memset>
    memset(pDataParams->pAid, 0x00, 3U);  /* PRQA S 3200 */
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	3346      	adds	r3, #70	@ 0x46
 800d038:	2203      	movs	r2, #3
 800d03a:	2100      	movs	r1, #0
 800d03c:	4618      	mov	r0, r3
 800d03e:	f013 fc29 	bl	8020894 <memset>
    pDataParams->bAuthMode = PHAL_MFDFLIGHT_NOT_AUTHENTICATED; /* Set to invalid */
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	22ff      	movs	r2, #255	@ 0xff
 800d046:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    pDataParams->bWrappedMode = 0x01U; /* Set to true */
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	2201      	movs	r2, #1
 800d04e:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
    pDataParams->bCryptoMethod = 0xFFU; /* No crypto just after init */
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	22ff      	movs	r2, #255	@ 0xff
 800d056:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
    pDataParams->wAdditionalInfo = 0x0000;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	2200      	movs	r2, #0
 800d05e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    pDataParams->bShortLenApdu = 0x01U; /* Since Prime variant supports only Short Length APDU, setting this to 0x01 always */
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	2201      	movs	r2, #1
 800d066:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
    pDataParams->dwPayLoadLen = 0;
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	2200      	movs	r2, #0
 800d06e:	659a      	str	r2, [r3, #88]	@ 0x58
    pDataParams->wCmdCtr = 0;
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	2200      	movs	r2, #0
 800d074:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    memset(pDataParams->bTi, 0x00, PHAL_MFDFLIGHT_SIZE_TI);  /* PRQA S 3200 */
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	335e      	adds	r3, #94	@ 0x5e
 800d07c:	2204      	movs	r2, #4
 800d07e:	2100      	movs	r1, #0
 800d080:	4618      	mov	r0, r3
 800d082:	f013 fc07 	bl	8020894 <memset>
    memset(pDataParams->bSesAuthMACKey, 0x00, 16U);  /* PRQA S 3200 */
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	3362      	adds	r3, #98	@ 0x62
 800d08a:	2210      	movs	r2, #16
 800d08c:	2100      	movs	r1, #0
 800d08e:	4618      	mov	r0, r3
 800d090:	f013 fc00 	bl	8020894 <memset>
    memset(pDataParams->pUnprocByteBuff, 0x00, PHAL_MFDFLIGHT_SIZE_MAC);  /* PRQA S 3200 */
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	3382      	adds	r3, #130	@ 0x82
 800d098:	2210      	movs	r2, #16
 800d09a:	2100      	movs	r1, #0
 800d09c:	4618      	mov	r0, r3
 800d09e:	f013 fbf9 	bl	8020894 <memset>
    pDataParams->bNoUnprocBytes = 0;
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
    memset(pDataParams->bLastBlockBuffer, 0x00, 16U);  /* PRQA S 3200 */
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	3393      	adds	r3, #147	@ 0x93
 800d0ae:	2210      	movs	r2, #16
 800d0b0:	2100      	movs	r1, #0
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f013 fbee 	bl	8020894 <memset>
    pDataParams->bLastBlockIndex = 0;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3

    return PH_ERR_SUCCESS;
 800d0c0:	2300      	movs	r3, #0
}
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	3710      	adds	r7, #16
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}

0800d0ca <phalMfpEVx_Sw_Init>:
#include "phalMfpEVx_Sw.h"

phStatus_t phalMfpEVx_Sw_Init(phalMfpEVx_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pPalMifareDataParams,
    void * pKeyStoreDataParams, void * pCryptoDataParamsEnc, void * pCryptoDataParamsMac, void * pCryptoRngDataParams,
    void * pCryptoDiversifyDataParams, void * pTMIDataParams, void * pVCADataParams)
{
 800d0ca:	b580      	push	{r7, lr}
 800d0cc:	b086      	sub	sp, #24
 800d0ce:	af00      	add	r7, sp, #0
 800d0d0:	60f8      	str	r0, [r7, #12]
 800d0d2:	607a      	str	r2, [r7, #4]
 800d0d4:	603b      	str	r3, [r7, #0]
 800d0d6:	460b      	mov	r3, r1
 800d0d8:	817b      	strh	r3, [r7, #10]
    phStatus_t PH_MEMLOC_REM wStatus = 0;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	82fb      	strh	r3, [r7, #22]

    /* data param check */
    if(sizeof(phalMfpEVx_Sw_DataParams_t) != wSizeOfDataParams)
 800d0de:	897b      	ldrh	r3, [r7, #10]
 800d0e0:	2b84      	cmp	r3, #132	@ 0x84
 800d0e2:	d002      	beq.n	800d0ea <phalMfpEVx_Sw_Init+0x20>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFPEVX);
 800d0e4:	f242 1320 	movw	r3, #8480	@ 0x2120
 800d0e8:	e063      	b.n	800d1b2 <phalMfpEVx_Sw_Init+0xe8>
    }
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_AL_MFPEVX);
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d102      	bne.n	800d0f6 <phalMfpEVx_Sw_Init+0x2c>
 800d0f0:	f242 1320 	movw	r3, #8480	@ 0x2120
 800d0f4:	e05d      	b.n	800d1b2 <phalMfpEVx_Sw_Init+0xe8>
    PH_ASSERT_NULL_PARAM(pPalMifareDataParams, PH_COMP_AL_MFPEVX);
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d102      	bne.n	800d102 <phalMfpEVx_Sw_Init+0x38>
 800d0fc:	f242 1321 	movw	r3, #8481	@ 0x2121
 800d100:	e057      	b.n	800d1b2 <phalMfpEVx_Sw_Init+0xe8>

    PH_ASSERT_NULL_PARAM(pTMIDataParams, PH_COMP_AL_MFPEVX);
 800d102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d104:	2b00      	cmp	r3, #0
 800d106:	d102      	bne.n	800d10e <phalMfpEVx_Sw_Init+0x44>
 800d108:	f242 1321 	movw	r3, #8481	@ 0x2121
 800d10c:	e051      	b.n	800d1b2 <phalMfpEVx_Sw_Init+0xe8>

#ifdef NXPBUILD__PHAL_VCA
    PH_ASSERT_NULL_PARAM(pVCADataParams, PH_COMP_AL_MFPEVX);
 800d10e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d110:	2b00      	cmp	r3, #0
 800d112:	d102      	bne.n	800d11a <phalMfpEVx_Sw_Init+0x50>
 800d114:	f242 1321 	movw	r3, #8481	@ 0x2121
 800d118:	e04b      	b.n	800d1b2 <phalMfpEVx_Sw_Init+0xe8>
#endif /* NXPBUILD__PHAL_VCA */

    /* init private data */
    pDataParams->wId = PH_COMP_AL_MFPEVX | PHAL_MFPEVX_SW_ID;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	f242 1201 	movw	r2, #8449	@ 0x2101
 800d120:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams = pPalMifareDataParams;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	687a      	ldr	r2, [r7, #4]
 800d126:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams = pKeyStoreDataParams;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	683a      	ldr	r2, [r7, #0]
 800d12c:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParamsEnc = pCryptoDataParamsEnc;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	6a3a      	ldr	r2, [r7, #32]
 800d132:	60da      	str	r2, [r3, #12]
    pDataParams->pCryptoDataParamsMac = pCryptoDataParamsMac;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d138:	611a      	str	r2, [r3, #16]
    pDataParams->pCryptoRngDataParams = pCryptoRngDataParams;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d13e:	615a      	str	r2, [r3, #20]
    pDataParams->pCryptoDiversifyDataParams = pCryptoDiversifyDataParams;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d144:	619a      	str	r2, [r3, #24]
    pDataParams->pTMIDataParams = pTMIDataParams;
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d14a:	61da      	str	r2, [r3, #28]
    pDataParams->bWrappedMode = 0x00;       /* Use native mode by default */
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	2200      	movs	r2, #0
 800d150:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    pDataParams->bExtendedLenApdu = 0x00;       /* Use short length APDU by default */
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	2200      	movs	r2, #0
 800d158:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    pDataParams->pVCADataParams = pVCADataParams;
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d160:	621a      	str	r2, [r3, #32]
    pDataParams->bAuthMode = (uint8_t) PHAL_MFPEVX_NOTAUTHENTICATED;
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	2200      	movs	r2, #0
 800d166:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    pDataParams->bSMMode = (uint8_t) PHAL_MFPEVX_SECURE_MESSAGE_EV0;
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	2200      	movs	r2, #0
 800d16e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    (void) memset(pDataParams->bSesAuthENCKey, 0x00, 16);
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	3360      	adds	r3, #96	@ 0x60
 800d176:	2210      	movs	r2, #16
 800d178:	2100      	movs	r1, #0
 800d17a:	4618      	mov	r0, r3
 800d17c:	f013 fb8a 	bl	8020894 <memset>
    (void) memset(pDataParams->bSesAuthMACKey, 0x00, 16);
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	3370      	adds	r3, #112	@ 0x70
 800d184:	2210      	movs	r2, #16
 800d186:	2100      	movs	r1, #0
 800d188:	4618      	mov	r0, r3
 800d18a:	f013 fb83 	bl	8020894 <memset>
    (void) memset(pDataParams->bIv, 0x00, 16);
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	3350      	adds	r3, #80	@ 0x50
 800d192:	2210      	movs	r2, #16
 800d194:	2100      	movs	r1, #0
 800d196:	4618      	mov	r0, r3
 800d198:	f013 fb7c 	bl	8020894 <memset>

    /* clear the secure messaging state */
    PH_CHECK_SUCCESS_FCT(wStatus, phalMfpEVx_Sw_ResetSecMsgState(pDataParams));
 800d19c:	68f8      	ldr	r0, [r7, #12]
 800d19e:	f000 f80c 	bl	800d1ba <phalMfpEVx_Sw_ResetSecMsgState>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	82fb      	strh	r3, [r7, #22]
 800d1a6:	8afb      	ldrh	r3, [r7, #22]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d001      	beq.n	800d1b0 <phalMfpEVx_Sw_Init+0xe6>
 800d1ac:	8afb      	ldrh	r3, [r7, #22]
 800d1ae:	e000      	b.n	800d1b2 <phalMfpEVx_Sw_Init+0xe8>

    return PH_ERR_SUCCESS;
 800d1b0:	2300      	movs	r3, #0
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	3718      	adds	r7, #24
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}

0800d1ba <phalMfpEVx_Sw_ResetSecMsgState>:

/***************************************************************************************************************************************/
/* Mifare Plus EVx Software command for utility operations.                                                                            */
/***************************************************************************************************************************************/
phStatus_t phalMfpEVx_Sw_ResetSecMsgState(phalMfpEVx_Sw_DataParams_t * pDataParams)
{
 800d1ba:	b580      	push	{r7, lr}
 800d1bc:	b084      	sub	sp, #16
 800d1be:	af00      	add	r7, sp, #0
 800d1c0:	6078      	str	r0, [r7, #4]
    phStatus_t wStatus = 0;
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	81fb      	strh	r3, [r7, #14]

    pDataParams->wRCtr = 0;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	849a      	strh	r2, [r3, #36]	@ 0x24
    pDataParams->wWCtr = 0;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	84da      	strh	r2, [r3, #38]	@ 0x26
    pDataParams->bNumUnprocessedReadMacBytes = 0;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
    pDataParams->bFirstRead = 1;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	2201      	movs	r2, #1
 800d1de:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
    pDataParams->bSMMode = (uint8_t) PHAL_MFPEVX_SECURE_MESSAGE_EV0;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* State machine should be handled in a way where L3 activation or L4 activation shouldnot be lost */
    if((pDataParams->bAuthMode == PHAL_MFPEVX_SL3_MFP_AUTHENTICATED) ||
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800d1f0:	2b03      	cmp	r3, #3
 800d1f2:	d009      	beq.n	800d208 <phalMfpEVx_Sw_ResetSecMsgState+0x4e>
        (pDataParams->bAuthMode == PHAL_MFPEVX_SL1_MFP_AUTHENTICATED) ||
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
    if((pDataParams->bAuthMode == PHAL_MFPEVX_SL3_MFP_AUTHENTICATED) ||
 800d1fa:	2b02      	cmp	r3, #2
 800d1fc:	d004      	beq.n	800d208 <phalMfpEVx_Sw_ResetSecMsgState+0x4e>
        (pDataParams->bAuthMode == PHAL_MFPEVX_NOT_AUTHENTICATED_L4))
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
        (pDataParams->bAuthMode == PHAL_MFPEVX_SL1_MFP_AUTHENTICATED) ||
 800d204:	2b05      	cmp	r3, #5
 800d206:	d104      	bne.n	800d212 <phalMfpEVx_Sw_ResetSecMsgState+0x58>
    {
        pDataParams->bAuthMode = PHAL_MFPEVX_NOT_AUTHENTICATED_L4;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2205      	movs	r2, #5
 800d20c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800d210:	e012      	b.n	800d238 <phalMfpEVx_Sw_ResetSecMsgState+0x7e>
    }
    else if((pDataParams->bAuthMode == PHAL_MFPEVX_NOT_AUTHENTICATED_L3) ||
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800d218:	2b04      	cmp	r3, #4
 800d21a:	d004      	beq.n	800d226 <phalMfpEVx_Sw_ResetSecMsgState+0x6c>
        (pDataParams->bAuthMode == PHAL_MFPEVX_SL1_MIFARE_AUTHENTICATED))
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
    else if((pDataParams->bAuthMode == PHAL_MFPEVX_NOT_AUTHENTICATED_L3) ||
 800d222:	2b01      	cmp	r3, #1
 800d224:	d104      	bne.n	800d230 <phalMfpEVx_Sw_ResetSecMsgState+0x76>
    {
        pDataParams->bAuthMode = PHAL_MFPEVX_NOT_AUTHENTICATED_L3;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	2204      	movs	r2, #4
 800d22a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800d22e:	e003      	b.n	800d238 <phalMfpEVx_Sw_ResetSecMsgState+0x7e>
    }
    else
    {
        pDataParams->bAuthMode = PHAL_MFPEVX_NOTAUTHENTICATED;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2200      	movs	r2, #0
 800d234:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    }

    (void) memset(pDataParams->bIv, 0x00, (size_t) sizeof(pDataParams->bIv));
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	3350      	adds	r3, #80	@ 0x50
 800d23c:	2210      	movs	r2, #16
 800d23e:	2100      	movs	r1, #0
 800d240:	4618      	mov	r0, r3
 800d242:	f013 fb27 	bl	8020894 <memset>
    (void) memset(pDataParams->bSesAuthENCKey, 0x00, (size_t) sizeof(pDataParams->bSesAuthENCKey));
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	3360      	adds	r3, #96	@ 0x60
 800d24a:	2210      	movs	r2, #16
 800d24c:	2100      	movs	r1, #0
 800d24e:	4618      	mov	r0, r3
 800d250:	f013 fb20 	bl	8020894 <memset>
    (void) memset(pDataParams->bSesAuthMACKey, 0x00, (size_t) sizeof(pDataParams->bSesAuthMACKey));
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	3370      	adds	r3, #112	@ 0x70
 800d258:	2210      	movs	r2, #16
 800d25a:	2100      	movs	r1, #0
 800d25c:	4618      	mov	r0, r3
 800d25e:	f013 fb19 	bl	8020894 <memset>

    (void) memset(pDataParams->bTi, 0x00, PHAL_MFPEVX_SIZE_TI);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	332a      	adds	r3, #42	@ 0x2a
 800d266:	2204      	movs	r2, #4
 800d268:	2100      	movs	r1, #0
 800d26a:	4618      	mov	r0, r3
 800d26c:	f013 fb12 	bl	8020894 <memset>

    wStatus = phTMIUtils_ActivateTMICollection((phTMIUtils_t *) pDataParams->pTMIDataParams, PH_TMIUTILS_RESET_TMI);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	69db      	ldr	r3, [r3, #28]
 800d274:	2104      	movs	r1, #4
 800d276:	4618      	mov	r0, r3
 800d278:	f7fa fb48 	bl	800790c <phTMIUtils_ActivateTMICollection>
 800d27c:	4603      	mov	r3, r0
 800d27e:	81fb      	strh	r3, [r7, #14]

#ifdef NXPBUILD__PHAL_VCA
    /* Update the authentication state if VCA PC feature is required by the application. */
    if(pDataParams->pVCADataParams != NULL)
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	6a1b      	ldr	r3, [r3, #32]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d009      	beq.n	800d29c <phalMfpEVx_Sw_ResetSecMsgState+0xe2>
    {
        wStatus = phalVca_SetSessionKeyUtility(pDataParams->pVCADataParams, pDataParams->bSesAuthMACKey,
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	6a18      	ldr	r0, [r3, #32]
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	3370      	adds	r3, #112	@ 0x70
 800d290:	2200      	movs	r2, #0
 800d292:	4619      	mov	r1, r3
 800d294:	f000 fa8b 	bl	800d7ae <phalVca_SetSessionKeyUtility>
 800d298:	4603      	mov	r3, r0
 800d29a:	81fb      	strh	r3, [r7, #14]
            PHAL_MFPEVX_NOTAUTHENTICATED);
    }
#endif /* NXPBUILD__PHAL_VCA */

    return PH_ADD_COMPCODE(wStatus, PH_COMP_AL_MFPEVX);
 800d29c:	89fb      	ldrh	r3, [r7, #14]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d00b      	beq.n	800d2ba <phalMfpEVx_Sw_ResetSecMsgState+0x100>
 800d2a2:	89fb      	ldrh	r3, [r7, #14]
 800d2a4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d106      	bne.n	800d2ba <phalMfpEVx_Sw_ResetSecMsgState+0x100>
 800d2ac:	89fb      	ldrh	r3, [r7, #14]
 800d2ae:	b2db      	uxtb	r3, r3
 800d2b0:	b29b      	uxth	r3, r3
 800d2b2:	f443 5304 	orr.w	r3, r3, #8448	@ 0x2100
 800d2b6:	b29b      	uxth	r3, r3
 800d2b8:	e000      	b.n	800d2bc <phalMfpEVx_Sw_ResetSecMsgState+0x102>
 800d2ba:	89fb      	ldrh	r3, [r7, #14]
}
 800d2bc:	4618      	mov	r0, r3
 800d2be:	3710      	adds	r7, #16
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}

0800d2c4 <phalMful_Sw_Init>:
                            void * pPalMifareDataParams,
                            void * pKeyStoreDataParams,
                            void * pCryptoDataParams,
                            void * pCryptoRngDataParams
                            )
{
 800d2c4:	b480      	push	{r7}
 800d2c6:	b085      	sub	sp, #20
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	60f8      	str	r0, [r7, #12]
 800d2cc:	607a      	str	r2, [r7, #4]
 800d2ce:	603b      	str	r3, [r7, #0]
 800d2d0:	460b      	mov	r3, r1
 800d2d2:	817b      	strh	r3, [r7, #10]
    if (sizeof(phalMful_Sw_DataParams_t) != wSizeOfDataParams)
 800d2d4:	897b      	ldrh	r3, [r7, #10]
 800d2d6:	2b1c      	cmp	r3, #28
 800d2d8:	d002      	beq.n	800d2e0 <phalMful_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFUL);
 800d2da:	f44f 5389 	mov.w	r3, #4384	@ 0x1120
 800d2de:	e026      	b.n	800d32e <phalMful_Sw_Init+0x6a>
    }
    PH_ASSERT_NULL (pDataParams);
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d101      	bne.n	800d2ea <phalMful_Sw_Init+0x26>
 800d2e6:	2321      	movs	r3, #33	@ 0x21
 800d2e8:	e021      	b.n	800d32e <phalMful_Sw_Init+0x6a>
    PH_ASSERT_NULL (pPalMifareDataParams);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d101      	bne.n	800d2f4 <phalMful_Sw_Init+0x30>
 800d2f0:	2321      	movs	r3, #33	@ 0x21
 800d2f2:	e01c      	b.n	800d32e <phalMful_Sw_Init+0x6a>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_MFUL | PHAL_MFUL_SW_ID;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	f241 1201 	movw	r2, #4353	@ 0x1101
 800d2fa:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams   = pPalMifareDataParams;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	687a      	ldr	r2, [r7, #4]
 800d300:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	683a      	ldr	r2, [r7, #0]
 800d306:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParams      = pCryptoDataParams;
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	69ba      	ldr	r2, [r7, #24]
 800d30c:	60da      	str	r2, [r3, #12]
    pDataParams->pCryptoRngDataParams   = pCryptoRngDataParams;
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	69fa      	ldr	r2, [r7, #28]
 800d312:	611a      	str	r2, [r3, #16]
    pDataParams->bAuthMode              = PHAL_MFUL_NOT_AUTHENTICATED;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	22ff      	movs	r2, #255	@ 0xff
 800d318:	761a      	strb	r2, [r3, #24]
    pDataParams->bCMACReq               = PH_OFF;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	2200      	movs	r2, #0
 800d31e:	751a      	strb	r2, [r3, #20]
    pDataParams->wCmdCtr                = 0x00U;
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	2200      	movs	r2, #0
 800d324:	82da      	strh	r2, [r3, #22]
    pDataParams->bAdditionalInfo        = 0x00U;
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	2200      	movs	r2, #0
 800d32a:	765a      	strb	r2, [r3, #25]
    return PH_ERR_SUCCESS;
 800d32c:	2300      	movs	r3, #0
}
 800d32e:	4618      	mov	r0, r3
 800d330:	3714      	adds	r7, #20
 800d332:	46bd      	mov	sp, r7
 800d334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d338:	4770      	bx	lr

0800d33a <phalT1T_Sw_Init>:
phStatus_t phalT1T_Sw_Init(
                           phalT1T_Sw_DataParams_t * pDataParams,
                           uint16_t wSizeOfDataParams,
                           void * pPalI14443p3aDataParams
                           )
{
 800d33a:	b480      	push	{r7}
 800d33c:	b085      	sub	sp, #20
 800d33e:	af00      	add	r7, sp, #0
 800d340:	60f8      	str	r0, [r7, #12]
 800d342:	460b      	mov	r3, r1
 800d344:	607a      	str	r2, [r7, #4]
 800d346:	817b      	strh	r3, [r7, #10]
    if (sizeof(phalT1T_Sw_DataParams_t) != wSizeOfDataParams)
 800d348:	897b      	ldrh	r3, [r7, #10]
 800d34a:	2b10      	cmp	r3, #16
 800d34c:	d002      	beq.n	800d354 <phalT1T_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_T1T);
 800d34e:	f44f 53e1 	mov.w	r3, #7200	@ 0x1c20
 800d352:	e011      	b.n	800d378 <phalT1T_Sw_Init+0x3e>
    }

    PH_ASSERT_NULL (pDataParams);
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d101      	bne.n	800d35e <phalT1T_Sw_Init+0x24>
 800d35a:	2321      	movs	r3, #33	@ 0x21
 800d35c:	e00c      	b.n	800d378 <phalT1T_Sw_Init+0x3e>
    PH_ASSERT_NULL (pPalI14443p3aDataParams);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d101      	bne.n	800d368 <phalT1T_Sw_Init+0x2e>
 800d364:	2321      	movs	r3, #33	@ 0x21
 800d366:	e007      	b.n	800d378 <phalT1T_Sw_Init+0x3e>

    /* Initialize private data */
    pDataParams->wId = PH_COMP_AL_T1T | PHAL_T1T_SW_ID;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	f641 4201 	movw	r2, #7169	@ 0x1c01
 800d36e:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalI14443p3aDataParams = pPalI14443p3aDataParams;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	687a      	ldr	r2, [r7, #4]
 800d374:	605a      	str	r2, [r3, #4]

    return PH_ERR_SUCCESS;
 800d376:	2300      	movs	r3, #0
}
 800d378:	4618      	mov	r0, r3
 800d37a:	3714      	adds	r7, #20
 800d37c:	46bd      	mov	sp, r7
 800d37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d382:	4770      	bx	lr

0800d384 <phalT1T_Sw_ReadUID>:
phStatus_t phalT1T_Sw_ReadUID(
                              phalT1T_Sw_DataParams_t * pDataParams,
                              uint8_t * pUid,
                              uint16_t * pLength
                              )
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b08c      	sub	sp, #48	@ 0x30
 800d388:	af02      	add	r7, sp, #8
 800d38a:	60f8      	str	r0, [r7, #12]
 800d38c:	60b9      	str	r1, [r7, #8]
 800d38e:	607a      	str	r2, [r7, #4]
    phStatus_t PH_MEMLOC_REM statusTmp;
    uint8_t    PH_MEMLOC_REM bCountLoop;
    uint8_t *  PH_MEMLOC_REM pRxBuffer = NULL;
 800d390:	2300      	movs	r3, #0
 800d392:	61fb      	str	r3, [r7, #28]
    uint16_t   PH_MEMLOC_REM wTxLength = 7;
 800d394:	2307      	movs	r3, #7
 800d396:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint16_t   PH_MEMLOC_REM wUIDLength = 4;
 800d398:	2304      	movs	r3, #4
 800d39a:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint8_t    PH_MEMLOC_REM abTxBuffer[] = {PHAL_T1T_CMD_READUID, 0x00,
 800d39c:	2378      	movs	r3, #120	@ 0x78
 800d39e:	617b      	str	r3, [r7, #20]
 800d3a0:	f107 0318 	add.w	r3, r7, #24
 800d3a4:	2100      	movs	r1, #0
 800d3a6:	460a      	mov	r2, r1
 800d3a8:	801a      	strh	r2, [r3, #0]
 800d3aa:	460a      	mov	r2, r1
 800d3ac:	709a      	strb	r2, [r3, #2]
                                             0x00, 0x00, 0x00, 0x00, 0x00};

    /* Set command timeout */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p3a_SetConfig(
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	685b      	ldr	r3, [r3, #4]
 800d3b2:	f240 1223 	movw	r2, #291	@ 0x123
 800d3b6:	2103      	movs	r1, #3
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f006 ffda 	bl	8014372 <phpalI14443p3a_Sw_SetConfig>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	843b      	strh	r3, [r7, #32]
 800d3c2:	8c3b      	ldrh	r3, [r7, #32]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d001      	beq.n	800d3cc <phalT1T_Sw_ReadUID+0x48>
 800d3c8:	8c3b      	ldrh	r3, [r7, #32]
 800d3ca:	e05c      	b.n	800d486 <phalT1T_Sw_ReadUID+0x102>
        pDataParams->pPalI14443p3aDataParams,
        PHPAL_I14443P3A_CONFIG_TIMEOUT_VALUE_US,
        PHAL_T1T_SW_READ_TIME_US + PHAL_T1T_SW_EXT_TIME_US));

    /* Send and receive the data */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p3a_Exchange(
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	6858      	ldr	r0, [r3, #4]
 800d3d0:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 800d3d2:	f107 0214 	add.w	r2, r7, #20
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	9301      	str	r3, [sp, #4]
 800d3da:	f107 031c 	add.w	r3, r7, #28
 800d3de:	9300      	str	r3, [sp, #0]
 800d3e0:	460b      	mov	r3, r1
 800d3e2:	2100      	movs	r1, #0
 800d3e4:	f007 fc70 	bl	8014cc8 <phpalI14443p3a_Sw_Exchange>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	843b      	strh	r3, [r7, #32]
 800d3ec:	8c3b      	ldrh	r3, [r7, #32]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d001      	beq.n	800d3f6 <phalT1T_Sw_ReadUID+0x72>
 800d3f2:	8c3b      	ldrh	r3, [r7, #32]
 800d3f4:	e047      	b.n	800d486 <phalT1T_Sw_ReadUID+0x102>
        &abTxBuffer[0],
        wTxLength,
        &pRxBuffer,
        pLength));

    if(((phpalI14443p3a_Sw_DataParams_t*)(pDataParams->pPalI14443p3aDataParams))->bOpeMode == RD_LIB_MODE_NFC)
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	685b      	ldr	r3, [r3, #4]
 800d3fa:	7d1b      	ldrb	r3, [r3, #20]
 800d3fc:	2b02      	cmp	r3, #2
 800d3fe:	d10c      	bne.n	800d41a <phalT1T_Sw_ReadUID+0x96>
    {
        /* Check received length. NFC Digital Protocol 1.1-10.6.2.1 */
        if ((*pLength != PHAL_T1T_READUID_RESP_LEN) ||
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	881b      	ldrh	r3, [r3, #0]
 800d404:	2b06      	cmp	r3, #6
 800d406:	d105      	bne.n	800d414 <phalT1T_Sw_ReadUID+0x90>
            ((pRxBuffer[0] & PHAL_T1T_HEADER_ROM0) != PHAL_T1T_HEADER_ROM0))
 800d408:	69fb      	ldr	r3, [r7, #28]
 800d40a:	781b      	ldrb	r3, [r3, #0]
 800d40c:	f003 0310 	and.w	r3, r3, #16
        if ((*pLength != PHAL_T1T_READUID_RESP_LEN) ||
 800d410:	2b00      	cmp	r3, #0
 800d412:	d109      	bne.n	800d428 <phalT1T_Sw_ReadUID+0xa4>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_AL_T1T);
 800d414:	f641 4306 	movw	r3, #7174	@ 0x1c06
 800d418:	e035      	b.n	800d486 <phalT1T_Sw_ReadUID+0x102>
        }
    }
    else
    {
        if (*pLength != PHAL_T1T_READUID_RESP_LEN)
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	881b      	ldrh	r3, [r3, #0]
 800d41e:	2b06      	cmp	r3, #6
 800d420:	d002      	beq.n	800d428 <phalT1T_Sw_ReadUID+0xa4>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_AL_T1T);
 800d422:	f641 4306 	movw	r3, #7174	@ 0x1c06
 800d426:	e02e      	b.n	800d486 <phalT1T_Sw_ReadUID+0x102>
        }
    }

    /* Update the Header ROM bytes */
    pDataParams->abHR[0] = pRxBuffer[0];
 800d428:	69fb      	ldr	r3, [r7, #28]
 800d42a:	781a      	ldrb	r2, [r3, #0]
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	721a      	strb	r2, [r3, #8]
    pDataParams->abHR[1] = pRxBuffer[1];
 800d430:	69fb      	ldr	r3, [r7, #28]
 800d432:	785a      	ldrb	r2, [r3, #1]
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	725a      	strb	r2, [r3, #9]

    /* Update the UID */
    for(bCountLoop = 0; bCountLoop < 4U; bCountLoop++)
 800d438:	2300      	movs	r3, #0
 800d43a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d43e:	e01a      	b.n	800d476 <phalT1T_Sw_ReadUID+0xf2>
    {
        pDataParams->abUid[bCountLoop] = pRxBuffer[bCountLoop+2U];
 800d440:	69fa      	ldr	r2, [r7, #28]
 800d442:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d446:	3302      	adds	r3, #2
 800d448:	441a      	add	r2, r3
 800d44a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d44e:	7811      	ldrb	r1, [r2, #0]
 800d450:	68fa      	ldr	r2, [r7, #12]
 800d452:	4413      	add	r3, r2
 800d454:	460a      	mov	r2, r1
 800d456:	729a      	strb	r2, [r3, #10]
        pUid[bCountLoop] = pDataParams->abUid[bCountLoop];
 800d458:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800d45c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d460:	68b9      	ldr	r1, [r7, #8]
 800d462:	440b      	add	r3, r1
 800d464:	68f9      	ldr	r1, [r7, #12]
 800d466:	440a      	add	r2, r1
 800d468:	7a92      	ldrb	r2, [r2, #10]
 800d46a:	701a      	strb	r2, [r3, #0]
    for(bCountLoop = 0; bCountLoop < 4U; bCountLoop++)
 800d46c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d470:	3301      	adds	r3, #1
 800d472:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d476:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d47a:	2b03      	cmp	r3, #3
 800d47c:	d9e0      	bls.n	800d440 <phalT1T_Sw_ReadUID+0xbc>
    }

    (*pLength) = wUIDLength;   /* UID length */
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800d482:	801a      	strh	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 800d484:	2300      	movs	r3, #0
}
 800d486:	4618      	mov	r0, r3
 800d488:	3728      	adds	r7, #40	@ 0x28
 800d48a:	46bd      	mov	sp, r7
 800d48c:	bd80      	pop	{r7, pc}

0800d48e <phalTop_Sw_Init>:
                           void * pAlFelica,
                           void * pPalMifareDataParams,
                           void * pAl15693,
                           void * pPalI14443paDataParams
                           )
{
 800d48e:	b580      	push	{r7, lr}
 800d490:	b084      	sub	sp, #16
 800d492:	af00      	add	r7, sp, #0
 800d494:	60f8      	str	r0, [r7, #12]
 800d496:	607a      	str	r2, [r7, #4]
 800d498:	603b      	str	r3, [r7, #0]
 800d49a:	460b      	mov	r3, r1
 800d49c:	817b      	strh	r3, [r7, #10]
    if (sizeof(phalTop_Sw_DataParams_t) != wSizeOfDataParams)
 800d49e:	897b      	ldrh	r3, [r7, #10]
 800d4a0:	2b80      	cmp	r3, #128	@ 0x80
 800d4a2:	d002      	beq.n	800d4aa <phalTop_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_TOP);
 800d4a4:	f44f 53e9 	mov.w	r3, #7456	@ 0x1d20
 800d4a8:	e01e      	b.n	800d4e8 <phalTop_Sw_Init+0x5a>
    }

    PH_ASSERT_NULL (pDataParams);
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d101      	bne.n	800d4b4 <phalTop_Sw_Init+0x26>
 800d4b0:	2321      	movs	r3, #33	@ 0x21
 800d4b2:	e019      	b.n	800d4e8 <phalTop_Sw_Init+0x5a>

    pDataParams->wId = PH_COMP_AL_TOP | PHAL_TOP_SW_ID;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	f641 5201 	movw	r2, #7425	@ 0x1d01
 800d4ba:	801a      	strh	r2, [r3, #0]
    pDataParams->pTopTagsDataParams[0] = pAlT1T;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	687a      	ldr	r2, [r7, #4]
 800d4c0:	611a      	str	r2, [r3, #16]
    pDataParams->pTopTagsDataParams[1] = pAlMful;
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	683a      	ldr	r2, [r7, #0]
 800d4c6:	615a      	str	r2, [r3, #20]
    pDataParams->pTopTagsDataParams[2] = pAlFelica;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	69ba      	ldr	r2, [r7, #24]
 800d4cc:	619a      	str	r2, [r3, #24]
    pDataParams->pTopTagsDataParams[3] = pPalMifareDataParams;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	69fa      	ldr	r2, [r7, #28]
 800d4d2:	61da      	str	r2, [r3, #28]
    pDataParams->pTopTagsDataParams[4] = pAl15693;
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	6a3a      	ldr	r2, [r7, #32]
 800d4d8:	621a      	str	r2, [r3, #32]
    pDataParams->pTopTagsDataParams[5] = pPalI14443paDataParams;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d4de:	625a      	str	r2, [r3, #36]	@ 0x24

    return phalTop_Sw_Reset(pDataParams);
 800d4e0:	68f8      	ldr	r0, [r7, #12]
 800d4e2:	f000 f805 	bl	800d4f0 <phalTop_Sw_Reset>
 800d4e6:	4603      	mov	r3, r0
}
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	3710      	adds	r7, #16
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}

0800d4f0 <phalTop_Sw_Reset>:
}

phStatus_t phalTop_Sw_Reset(
                            phalTop_Sw_DataParams_t * pDataParams
                            )
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b082      	sub	sp, #8
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]

    /* Reset common variables */
    pDataParams->bTagState = 0;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	711a      	strb	r2, [r3, #4]
    pDataParams->bTagType = 0;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2200      	movs	r2, #0
 800d502:	709a      	strb	r2, [r3, #2]
    pDataParams->bVno = 0;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2200      	movs	r2, #0
 800d508:	70da      	strb	r2, [r3, #3]
    pDataParams->dwNdefLength = 0;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	2200      	movs	r2, #0
 800d50e:	609a      	str	r2, [r3, #8]
    pDataParams->dwMaxNdefLength = 0;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2200      	movs	r2, #0
 800d514:	60da      	str	r2, [r3, #12]

    (void)memset(&pDataParams->ualTop, 0x00, (size_t)(sizeof(pDataParams->ualTop)));
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	3328      	adds	r3, #40	@ 0x28
 800d51a:	2258      	movs	r2, #88	@ 0x58
 800d51c:	2100      	movs	r1, #0
 800d51e:	4618      	mov	r0, r3
 800d520:	f013 f9b8 	bl	8020894 <memset>

    return PH_ERR_SUCCESS;
 800d524:	2300      	movs	r3, #0
}
 800d526:	4618      	mov	r0, r3
 800d528:	3708      	adds	r7, #8
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd80      	pop	{r7, pc}

0800d52e <phalVca_Sw_Init>:
#endif /* NXPBUILD__PH_CRYPTOSYM */

phStatus_t phalVca_Sw_Init(phalVca_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams,  void * pPalMifareDataParams, void * pKeyStoreDataParams,
    void * pCryptoDataParams, void * pCryptoRngDataParams, phalVca_Sw_IidTableEntry_t * pIidTableStorage, uint16_t wNumIidTableStorageEntries,
    phalVca_Sw_CardTableEntry_t * pCardTableStorage, uint16_t wNumCardTableStorageEntries)
{
 800d52e:	b480      	push	{r7}
 800d530:	b085      	sub	sp, #20
 800d532:	af00      	add	r7, sp, #0
 800d534:	60f8      	str	r0, [r7, #12]
 800d536:	607a      	str	r2, [r7, #4]
 800d538:	603b      	str	r3, [r7, #0]
 800d53a:	460b      	mov	r3, r1
 800d53c:	817b      	strh	r3, [r7, #10]
    if (sizeof(phalVca_Sw_DataParams_t) != wSizeOfDataParams)
 800d53e:	897b      	ldrh	r3, [r7, #10]
 800d540:	2b54      	cmp	r3, #84	@ 0x54
 800d542:	d002      	beq.n	800d54a <phalVca_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_VCA);
 800d544:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800d548:	e06d      	b.n	800d626 <phalVca_Sw_Init+0xf8>
    }

    PH_ASSERT_NULL_DATA_PARAM (pDataParams, PH_COMP_AL_VCA);
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d102      	bne.n	800d556 <phalVca_Sw_Init+0x28>
 800d550:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800d554:	e067      	b.n	800d626 <phalVca_Sw_Init+0xf8>
    PH_ASSERT_NULL_PARAM (pPalMifareDataParams, PH_COMP_AL_VCA);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d102      	bne.n	800d562 <phalVca_Sw_Init+0x34>
 800d55c:	f241 3321 	movw	r3, #4897	@ 0x1321
 800d560:	e061      	b.n	800d626 <phalVca_Sw_Init+0xf8>

#ifdef NXPBUILD__PH_CRYPTOSYM
    PH_ASSERT_NULL_PARAM (pKeyStoreDataParams, PH_COMP_AL_VCA);
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d102      	bne.n	800d56e <phalVca_Sw_Init+0x40>
 800d568:	f241 3321 	movw	r3, #4897	@ 0x1321
 800d56c:	e05b      	b.n	800d626 <phalVca_Sw_Init+0xf8>
    PH_ASSERT_NULL_PARAM (pCryptoDataParams, PH_COMP_AL_VCA);
 800d56e:	69bb      	ldr	r3, [r7, #24]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d102      	bne.n	800d57a <phalVca_Sw_Init+0x4c>
 800d574:	f241 3321 	movw	r3, #4897	@ 0x1321
 800d578:	e055      	b.n	800d626 <phalVca_Sw_Init+0xf8>
    PH_ASSERT_NULL_PARAM (pCryptoRngDataParams, PH_COMP_AL_VCA);
 800d57a:	69fb      	ldr	r3, [r7, #28]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d102      	bne.n	800d586 <phalVca_Sw_Init+0x58>
 800d580:	f241 3321 	movw	r3, #4897	@ 0x1321
 800d584:	e04f      	b.n	800d626 <phalVca_Sw_Init+0xf8>
#endif /* NXPBUILD__PH_CRYPTOSYM */

    if (0U != (wNumIidTableStorageEntries)) PH_ASSERT_NULL_PARAM (pIidTableStorage, PH_COMP_AL_VCA);
 800d586:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d005      	beq.n	800d598 <phalVca_Sw_Init+0x6a>
 800d58c:	6a3b      	ldr	r3, [r7, #32]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d102      	bne.n	800d598 <phalVca_Sw_Init+0x6a>
 800d592:	f241 3321 	movw	r3, #4897	@ 0x1321
 800d596:	e046      	b.n	800d626 <phalVca_Sw_Init+0xf8>
    if (0U != (wNumCardTableStorageEntries)) PH_ASSERT_NULL_PARAM (pCardTableStorage, PH_COMP_AL_VCA);
 800d598:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d005      	beq.n	800d5aa <phalVca_Sw_Init+0x7c>
 800d59e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d102      	bne.n	800d5aa <phalVca_Sw_Init+0x7c>
 800d5a4:	f241 3321 	movw	r3, #4897	@ 0x1321
 800d5a8:	e03d      	b.n	800d626 <phalVca_Sw_Init+0xf8>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_VCA | PHAL_VCA_SW_ID;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	f241 3201 	movw	r2, #4865	@ 0x1301
 800d5b0:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams   = pPalMifareDataParams;
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	687a      	ldr	r2, [r7, #4]
 800d5b6:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	683a      	ldr	r2, [r7, #0]
 800d5bc:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParams      = pCryptoDataParams;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	69ba      	ldr	r2, [r7, #24]
 800d5c2:	60da      	str	r2, [r3, #12]
    pDataParams->wCurrentCardTablePos   = 0;
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	839a      	strh	r2, [r3, #28]
    pDataParams->pCardTable             = pCardTableStorage;
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d5ce:	615a      	str	r2, [r3, #20]
    pDataParams->wNumCardTableEntries   = wNumCardTableStorageEntries;
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800d5d4:	83da      	strh	r2, [r3, #30]
    pDataParams->pIidTable              = pIidTableStorage;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	6a3a      	ldr	r2, [r7, #32]
 800d5da:	619a      	str	r2, [r3, #24]
    pDataParams->wCurrentIidTablePos    = 0;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	2200      	movs	r2, #0
 800d5e0:	849a      	strh	r2, [r3, #36]	@ 0x24
    pDataParams->wNumIidTableEntries    = wNumIidTableStorageEntries;
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d5e6:	841a      	strh	r2, [r3, #32]
    pDataParams->pCryptoRngDataParams   = pCryptoRngDataParams;
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	69fa      	ldr	r2, [r7, #28]
 800d5ec:	611a      	str	r2, [r3, #16]
    pDataParams->wAdditionalInfo        = PH_ERR_SUCCESS;
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	84da      	strh	r2, [r3, #38]	@ 0x26
    pDataParams->eVCState               = VC_NOT_SELECTED;
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    pDataParams->ePCState               = PC_NO_PCHK_IN_PROGRESS;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	2200      	movs	r2, #0
 800d600:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
    pDataParams->bWrappedMode           = 0;
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	2200      	movs	r2, #0
 800d608:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    pDataParams->bExtendedLenApdu       = 0;
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	2200      	movs	r2, #0
 800d610:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    pDataParams->bOption                = 1;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	2201      	movs	r2, #1
 800d618:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
    pDataParams->bLowerBoundThreshold   = 0;
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	2200      	movs	r2, #0
 800d620:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53

    return PH_ERR_SUCCESS;
 800d624:	2300      	movs	r3, #0
}
 800d626:	4618      	mov	r0, r3
 800d628:	3714      	adds	r7, #20
 800d62a:	46bd      	mov	sp, r7
 800d62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d630:	4770      	bx	lr
	...

0800d634 <phalVca_Sw_SetSessionKeyUtility>:

    return PH_ERR_SUCCESS;
}

phStatus_t phalVca_Sw_SetSessionKeyUtility(phalVca_Sw_DataParams_t * pDataParams, uint8_t * pSessionKey, uint8_t bAuthMode)
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b084      	sub	sp, #16
 800d638:	af00      	add	r7, sp, #0
 800d63a:	60f8      	str	r0, [r7, #12]
 800d63c:	60b9      	str	r1, [r7, #8]
 800d63e:	4613      	mov	r3, r2
 800d640:	71fb      	strb	r3, [r7, #7]
     * case-1: VCState = Authenticated, Session keys from DesfireEV2 should be used for MAC calculations
     * case-2: VCState = Proximity Check or Not Authenticated, VC Proximity Key should be used for MAC calculations
     * case-3: VCState = No VC Selected, DummyMACKey of type AES 128 should be used for MAC calculations.
     */
    /* Handling Case-1. First need to get the card auth type(AES, DES, ISO, EV2) and set the VC state based on the Auth Mode */
    switch(bAuthMode)
 800d642:	79fb      	ldrb	r3, [r7, #7]
 800d644:	2bff      	cmp	r3, #255	@ 0xff
 800d646:	d07d      	beq.n	800d744 <phalVca_Sw_SetSessionKeyUtility+0x110>
 800d648:	2bff      	cmp	r3, #255	@ 0xff
 800d64a:	f300 808c 	bgt.w	800d766 <phalVca_Sw_SetSessionKeyUtility+0x132>
 800d64e:	2baa      	cmp	r3, #170	@ 0xaa
 800d650:	d04f      	beq.n	800d6f2 <phalVca_Sw_SetSessionKeyUtility+0xbe>
 800d652:	2baa      	cmp	r3, #170	@ 0xaa
 800d654:	f300 8087 	bgt.w	800d766 <phalVca_Sw_SetSessionKeyUtility+0x132>
 800d658:	2b1a      	cmp	r3, #26
 800d65a:	dc3d      	bgt.n	800d6d8 <phalVca_Sw_SetSessionKeyUtility+0xa4>
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	f2c0 8082 	blt.w	800d766 <phalVca_Sw_SetSessionKeyUtility+0x132>
 800d662:	2b1a      	cmp	r3, #26
 800d664:	d87f      	bhi.n	800d766 <phalVca_Sw_SetSessionKeyUtility+0x132>
 800d666:	a201      	add	r2, pc, #4	@ (adr r2, 800d66c <phalVca_Sw_SetSessionKeyUtility+0x38>)
 800d668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d66c:	0800d73b 	.word	0x0800d73b
 800d670:	0800d767 	.word	0x0800d767
 800d674:	0800d70b 	.word	0x0800d70b
 800d678:	0800d723 	.word	0x0800d723
 800d67c:	0800d73b 	.word	0x0800d73b
 800d680:	0800d73b 	.word	0x0800d73b
 800d684:	0800d767 	.word	0x0800d767
 800d688:	0800d767 	.word	0x0800d767
 800d68c:	0800d767 	.word	0x0800d767
 800d690:	0800d767 	.word	0x0800d767
 800d694:	0800d6df 	.word	0x0800d6df
 800d698:	0800d767 	.word	0x0800d767
 800d69c:	0800d767 	.word	0x0800d767
 800d6a0:	0800d767 	.word	0x0800d767
 800d6a4:	0800d767 	.word	0x0800d767
 800d6a8:	0800d767 	.word	0x0800d767
 800d6ac:	0800d767 	.word	0x0800d767
 800d6b0:	0800d767 	.word	0x0800d767
 800d6b4:	0800d767 	.word	0x0800d767
 800d6b8:	0800d767 	.word	0x0800d767
 800d6bc:	0800d767 	.word	0x0800d767
 800d6c0:	0800d767 	.word	0x0800d767
 800d6c4:	0800d767 	.word	0x0800d767
 800d6c8:	0800d767 	.word	0x0800d767
 800d6cc:	0800d767 	.word	0x0800d767
 800d6d0:	0800d767 	.word	0x0800d767
 800d6d4:	0800d6e9 	.word	0x0800d6e9
 800d6d8:	2b71      	cmp	r3, #113	@ 0x71
 800d6da:	d038      	beq.n	800d74e <phalVca_Sw_SetSessionKeyUtility+0x11a>
 800d6dc:	e043      	b.n	800d766 <phalVca_Sw_SetSessionKeyUtility+0x132>
    {
#ifdef NXPBUILD__PHAL_MFDFEVX_SW
    case PHAL_MFDFEVX_AUTHENTICATE:
        pDataParams->eVCState = VC_DF_AUTH_D40;
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	2204      	movs	r2, #4
 800d6e2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        break;
 800d6e6:	e043      	b.n	800d770 <phalVca_Sw_SetSessionKeyUtility+0x13c>

    case PHAL_MFDFEVX_AUTHENTICATEISO:
        pDataParams->eVCState = VC_DF_AUTH_ISO;
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	2205      	movs	r2, #5
 800d6ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        break;
 800d6f0:	e03e      	b.n	800d770 <phalVca_Sw_SetSessionKeyUtility+0x13c>

    case PHAL_MFDFEVX_AUTHENTICATEAES:
        pDataParams->eVCState = VC_DF_AUTH_AES;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	2207      	movs	r2, #7
 800d6f6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

        /* Set the session key (since session key is AES) to the VCA structure parameter */
        (void)memcpy(pDataParams->bSessionAuthMACKey, pSessionKey, sizeof(pDataParams->bSessionAuthMACKey));
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	3328      	adds	r3, #40	@ 0x28
 800d6fe:	2220      	movs	r2, #32
 800d700:	68b9      	ldr	r1, [r7, #8]
 800d702:	4618      	mov	r0, r3
 800d704:	f013 f945 	bl	8020992 <memcpy>
        break;
 800d708:	e032      	b.n	800d770 <phalVca_Sw_SetSessionKeyUtility+0x13c>
#endif /* NXPBUILD__PHAL_MFDFEVX_SW */
#ifdef NXPBUILD__PHAL_MFPEVX_SW
    case PHAL_MFPEVX_SL1_MFP_AUTHENTICATED:
        pDataParams->eVCState = VC_MFP_AUTH_AES_SL1;
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	2208      	movs	r2, #8
 800d70e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

        /* Set the session key (since session key is AES) to the VCA structure parameter */
        (void)memcpy(pDataParams->bSessionAuthMACKey, pSessionKey, sizeof(pDataParams->bSessionAuthMACKey));
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	3328      	adds	r3, #40	@ 0x28
 800d716:	2220      	movs	r2, #32
 800d718:	68b9      	ldr	r1, [r7, #8]
 800d71a:	4618      	mov	r0, r3
 800d71c:	f013 f939 	bl	8020992 <memcpy>
        break;
 800d720:	e026      	b.n	800d770 <phalVca_Sw_SetSessionKeyUtility+0x13c>

    case PHAL_MFPEVX_SL3_MFP_AUTHENTICATED:
        pDataParams->eVCState = VC_MFP_AUTH_AES_SL3;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	2209      	movs	r2, #9
 800d726:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

        /* Set the session key (since session key is AES) to the VCA structure parameter */
        (void)memcpy(pDataParams->bSessionAuthMACKey, pSessionKey, sizeof(pDataParams->bSessionAuthMACKey));
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	3328      	adds	r3, #40	@ 0x28
 800d72e:	2220      	movs	r2, #32
 800d730:	68b9      	ldr	r1, [r7, #8]
 800d732:	4618      	mov	r0, r3
 800d734:	f013 f92d 	bl	8020992 <memcpy>
        break;
 800d738:	e01a      	b.n	800d770 <phalVca_Sw_SetSessionKeyUtility+0x13c>

    case PHAL_MFPEVX_NOTAUTHENTICATED:
    case PHAL_MFPEVX_NOT_AUTHENTICATED_L3:
    case PHAL_MFPEVX_NOT_AUTHENTICATED_L4:
        pDataParams->eVCState = VC_DF_NOT_AUTH;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	2203      	movs	r2, #3
 800d73e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        break;
 800d742:	e015      	b.n	800d770 <phalVca_Sw_SetSessionKeyUtility+0x13c>
#endif /* NXPBUILD__PHAL_MFPEVX_SW */
#if defined(NXPBUILD__PHAL_MFDFEVX_SW) || defined(NXPBUILD__PHAL_MFDUOX_SW)
    case 0xFFU :  /* Not Authenticate state for DESFire and DUOX PICC */
        pDataParams->eVCState = VC_DF_NOT_AUTH;
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	2203      	movs	r2, #3
 800d748:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        break;
 800d74c:	e010      	b.n	800d770 <phalVca_Sw_SetSessionKeyUtility+0x13c>

    case 0x71U:  /* EV2 Authenticate state for DESFire and DUOX PICC */
        pDataParams->eVCState = VC_DF_AUTH_EV2;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	2206      	movs	r2, #6
 800d752:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

        /* Set the session key (since session key is AES) to the VCA structure parameter */
        (void)memcpy(pDataParams->bSessionAuthMACKey, pSessionKey, sizeof(pDataParams->bSessionAuthMACKey));
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	3328      	adds	r3, #40	@ 0x28
 800d75a:	2220      	movs	r2, #32
 800d75c:	68b9      	ldr	r1, [r7, #8]
 800d75e:	4618      	mov	r0, r3
 800d760:	f013 f917 	bl	8020992 <memcpy>
        break;
 800d764:	e004      	b.n	800d770 <phalVca_Sw_SetSessionKeyUtility+0x13c>
        (void)memcpy(pDataParams->bSessionAuthMACKey, pSessionKey, sizeof(pDataParams->bSessionAuthMACKey));
        break;
#endif /* NXPBUILD__PHAL_MFDUOX_SW */

    default:
        pDataParams->eVCState = VC_NOT_SELECTED;
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	2200      	movs	r2, #0
 800d76a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        break;
 800d76e:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 800d770:	2300      	movs	r3, #0
}
 800d772:	4618      	mov	r0, r3
 800d774:	3710      	adds	r7, #16
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}
 800d77a:	bf00      	nop

0800d77c <phalVca_Sw_SetApplicationType>:

phStatus_t phalVca_Sw_SetApplicationType(phalVca_Sw_DataParams_t * pDataParams, void * pAlDataParams)
{
 800d77c:	b480      	push	{r7}
 800d77e:	b083      	sub	sp, #12
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
 800d784:	6039      	str	r1, [r7, #0]
    PH_ASSERT_NULL (pDataParams);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d101      	bne.n	800d790 <phalVca_Sw_SetApplicationType+0x14>
 800d78c:	2321      	movs	r3, #33	@ 0x21
 800d78e:	e008      	b.n	800d7a2 <phalVca_Sw_SetApplicationType+0x26>
    PH_ASSERT_NULL (pAlDataParams);
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d101      	bne.n	800d79a <phalVca_Sw_SetApplicationType+0x1e>
 800d796:	2321      	movs	r3, #33	@ 0x21
 800d798:	e003      	b.n	800d7a2 <phalVca_Sw_SetApplicationType+0x26>

    pDataParams->pAlDataParams = pAlDataParams;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	683a      	ldr	r2, [r7, #0]
 800d79e:	64da      	str	r2, [r3, #76]	@ 0x4c

    return PH_ERR_SUCCESS;
 800d7a0:	2300      	movs	r3, #0
}
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	370c      	adds	r7, #12
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ac:	4770      	bx	lr

0800d7ae <phalVca_SetSessionKeyUtility>:
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);
    return status;
}

phStatus_t phalVca_SetSessionKeyUtility(void * pDataParams, uint8_t * pSessionKey, uint8_t bAuthMode)
{
 800d7ae:	b580      	push	{r7, lr}
 800d7b0:	b086      	sub	sp, #24
 800d7b2:	af00      	add	r7, sp, #0
 800d7b4:	60f8      	str	r0, [r7, #12]
 800d7b6:	60b9      	str	r1, [r7, #8]
 800d7b8:	4613      	mov	r3, r2
 800d7ba:	71fb      	strb	r3, [r7, #7]
    PH_LOG_HELPER_ADDPARAM_UINT8(PH_LOG_LOGTYPE_DEBUG, bAuthMode_log, &bAuthMode);
    PH_LOG_HELPER_ADDPARAM_BUFFER(PH_LOG_LOGTYPE_DEBUG, pSessionKey_log, pSessionKey, 16);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Validate the parameters */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_AL_VCA);
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d102      	bne.n	800d7c8 <phalVca_SetSessionKeyUtility+0x1a>
 800d7c2:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800d7c6:	e024      	b.n	800d812 <phalVca_SetSessionKeyUtility+0x64>
    PH_ASSERT_NULL_PARAM(pSessionKey, PH_COMP_AL_VCA);
 800d7c8:	68bb      	ldr	r3, [r7, #8]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d102      	bne.n	800d7d4 <phalVca_SetSessionKeyUtility+0x26>
 800d7ce:	f241 3321 	movw	r3, #4897	@ 0x1321
 800d7d2:	e01e      	b.n	800d812 <phalVca_SetSessionKeyUtility+0x64>

    /* Check data parameters */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_AL_VCA)
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	881b      	ldrh	r3, [r3, #0]
 800d7d8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d7dc:	f5b3 5f98 	cmp.w	r3, #4864	@ 0x1300
 800d7e0:	d004      	beq.n	800d7ec <phalVca_SetSessionKeyUtility+0x3e>
    {
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_VCA);
 800d7e2:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800d7e6:	82fb      	strh	r3, [r7, #22]
        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, status_log, &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);
        return status;
 800d7e8:	8afb      	ldrh	r3, [r7, #22]
 800d7ea:	e012      	b.n	800d812 <phalVca_SetSessionKeyUtility+0x64>
    }

    /* Perform operation on active layer */
    switch(PH_GET_COMPID(pDataParams))
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	881b      	ldrh	r3, [r3, #0]
 800d7f0:	b2db      	uxtb	r3, r3
 800d7f2:	2b01      	cmp	r3, #1
 800d7f4:	d108      	bne.n	800d808 <phalVca_SetSessionKeyUtility+0x5a>
    {
#ifdef NXPBUILD__PHAL_VCA_SW
        case PHAL_VCA_SW_ID:
            status = phalVca_Sw_SetSessionKeyUtility((phalVca_Sw_DataParams_t *) pDataParams, pSessionKey, bAuthMode);
 800d7f6:	79fb      	ldrb	r3, [r7, #7]
 800d7f8:	461a      	mov	r2, r3
 800d7fa:	68b9      	ldr	r1, [r7, #8]
 800d7fc:	68f8      	ldr	r0, [r7, #12]
 800d7fe:	f7ff ff19 	bl	800d634 <phalVca_Sw_SetSessionKeyUtility>
 800d802:	4603      	mov	r3, r0
 800d804:	82fb      	strh	r3, [r7, #22]
            break;
 800d806:	e003      	b.n	800d810 <phalVca_SetSessionKeyUtility+0x62>
#endif /* NXPBUILD__PHAL_VCA_SW */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_VCA);
 800d808:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800d80c:	82fb      	strh	r3, [r7, #22]
            break;
 800d80e:	bf00      	nop
    }

    PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, status_log, &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);
    return status;
 800d810:	8afb      	ldrh	r3, [r7, #22]
}
 800d812:	4618      	mov	r0, r3
 800d814:	3718      	adds	r7, #24
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}

0800d81a <phalVca_SetApplicationType>:

phStatus_t phalVca_SetApplicationType(void * pDataParams, void * pAlDataParams)
{
 800d81a:	b580      	push	{r7, lr}
 800d81c:	b084      	sub	sp, #16
 800d81e:	af00      	add	r7, sp, #0
 800d820:	6078      	str	r0, [r7, #4]
 800d822:	6039      	str	r1, [r7, #0]

    PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Validate the parameters */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_AL_VCA);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d102      	bne.n	800d830 <phalVca_SetApplicationType+0x16>
 800d82a:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800d82e:	e022      	b.n	800d876 <phalVca_SetApplicationType+0x5c>
    PH_ASSERT_NULL_PARAM(pAlDataParams, PH_COMP_AL_VCA);
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d102      	bne.n	800d83c <phalVca_SetApplicationType+0x22>
 800d836:	f241 3321 	movw	r3, #4897	@ 0x1321
 800d83a:	e01c      	b.n	800d876 <phalVca_SetApplicationType+0x5c>

    /* Check data parameters */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_AL_VCA)
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	881b      	ldrh	r3, [r3, #0]
 800d840:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d844:	f5b3 5f98 	cmp.w	r3, #4864	@ 0x1300
 800d848:	d004      	beq.n	800d854 <phalVca_SetApplicationType+0x3a>
    {
        status = PH_ADD_COMPCODE(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_VCA);
 800d84a:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800d84e:	81fb      	strh	r3, [r7, #14]
        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, status_log, &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);
        return status;
 800d850:	89fb      	ldrh	r3, [r7, #14]
 800d852:	e010      	b.n	800d876 <phalVca_SetApplicationType+0x5c>
    }

    /* Perform operation on active layer */
    switch(PH_GET_COMPID(pDataParams))
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	881b      	ldrh	r3, [r3, #0]
 800d858:	b2db      	uxtb	r3, r3
 800d85a:	2b01      	cmp	r3, #1
 800d85c:	d106      	bne.n	800d86c <phalVca_SetApplicationType+0x52>
    {
#ifdef NXPBUILD__PHAL_VCA_SW
        case PHAL_VCA_SW_ID:
            status = phalVca_Sw_SetApplicationType((phalVca_Sw_DataParams_t *) pDataParams, pAlDataParams);
 800d85e:	6839      	ldr	r1, [r7, #0]
 800d860:	6878      	ldr	r0, [r7, #4]
 800d862:	f7ff ff8b 	bl	800d77c <phalVca_Sw_SetApplicationType>
 800d866:	4603      	mov	r3, r0
 800d868:	81fb      	strh	r3, [r7, #14]
            break;
 800d86a:	e003      	b.n	800d874 <phalVca_SetApplicationType+0x5a>
#endif /* NXPBUILD__PHAL_VCA_SW */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_VCA);
 800d86c:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800d870:	81fb      	strh	r3, [r7, #14]
            break;
 800d872:	bf00      	nop
    }

    PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, status_log, &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);
    return status;
 800d874:	89fb      	ldrh	r3, [r7, #14]
}
 800d876:	4618      	mov	r0, r3
 800d878:	3710      	adds	r7, #16
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}

0800d87e <phhalHw_Pn5180_EventCallback>:
}

#endif

static void phhalHw_Pn5180_EventCallback(void * pDataParams)
{
 800d87e:	b580      	push	{r7, lr}
 800d880:	b084      	sub	sp, #16
 800d882:	af00      	add	r7, sp, #0
 800d884:	6078      	str	r0, [r7, #4]
    phhalHw_Pn5180_DataParams_t * pPn5180DataParams = NULL;
 800d886:	2300      	movs	r3, #0
 800d888:	60fb      	str	r3, [r7, #12]

    pPn5180DataParams = (phhalHw_Pn5180_DataParams_t*) pDataParams;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	60fb      	str	r3, [r7, #12]
    /* Post Abort Event. */
    (void)phOsal_EventPost(&pPn5180DataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_POST_ISR, E_PH_OSAL_EVT_RF, NULL);
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 800d894:	2300      	movs	r3, #0
 800d896:	2201      	movs	r2, #1
 800d898:	2108      	movs	r1, #8
 800d89a:	f00c ff4f 	bl	801a73c <phOsal_EventPost>
}
 800d89e:	bf00      	nop
 800d8a0:	3710      	adds	r7, #16
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bd80      	pop	{r7, pc}
	...

0800d8a8 <phhalHw_Pn5180_GuardTimeCallBck>:

static void phhalHw_Pn5180_GuardTimeCallBck(void)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	af00      	add	r7, sp, #0
	printf("GT Callback\r\n");  // 添加这行
 800d8ac:	4807      	ldr	r0, [pc, #28]	@ (800d8cc <phhalHw_Pn5180_GuardTimeCallBck+0x24>)
 800d8ae:	f012 ff01 	bl	80206b4 <puts>
    if(xEventHandle != NULL)
 800d8b2:	4b07      	ldr	r3, [pc, #28]	@ (800d8d0 <phhalHw_Pn5180_GuardTimeCallBck+0x28>)
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d005      	beq.n	800d8c6 <phhalHw_Pn5180_GuardTimeCallBck+0x1e>
    {
        (void)phOsal_EventPost(&xEventHandle, E_OS_EVENT_OPT_POST_ISR, E_PH_OSAL_EVT_GT_EXP, NULL);
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	2202      	movs	r2, #2
 800d8be:	2108      	movs	r1, #8
 800d8c0:	4803      	ldr	r0, [pc, #12]	@ (800d8d0 <phhalHw_Pn5180_GuardTimeCallBck+0x28>)
 800d8c2:	f00c ff3b 	bl	801a73c <phOsal_EventPost>
    }
}
 800d8c6:	bf00      	nop
 800d8c8:	bd80      	pop	{r7, pc}
 800d8ca:	bf00      	nop
 800d8cc:	08023088 	.word	0x08023088
 800d8d0:	20001be0 	.word	0x20001be0

0800d8d4 <phhalHw_Pn5180_Init>:
    uint8_t * pTxBuffer,
    uint16_t wTxBufSize,
    uint8_t * pRxBuffer,
    uint16_t wRxBufSize
    )
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b088      	sub	sp, #32
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	60f8      	str	r0, [r7, #12]
 800d8dc:	607a      	str	r2, [r7, #4]
 800d8de:	603b      	str	r3, [r7, #0]
 800d8e0:	460b      	mov	r3, r1
 800d8e2:	817b      	strh	r3, [r7, #10]
    phStatus_t PH_MEMLOC_REM statusTmp;
    uint8_t    PH_MEMLOC_REM bFirmwareVer[2];
//    uint8_t    PH_MEMLOC_REM bPowerStatus[16];
    uint8_t PH_MEMLOC_BUF bDigitalDelayCfg;
    uint8_t    InitGearSize = 0x01;  // 1
 800d8e4:	2301      	movs	r3, #1
 800d8e6:	76bb      	strb	r3, [r7, #26]
#ifndef _WIN32
    phDriver_Pin_Config_t pinCfg;
#endif

    if(sizeof(phhalHw_Pn5180_DataParams_t) != wSizeOfDataParams)
 800d8e8:	897b      	ldrh	r3, [r7, #10]
 800d8ea:	f5b3 7fca 	cmp.w	r3, #404	@ 0x194
 800d8ee:	d002      	beq.n	800d8f6 <phhalHw_Pn5180_Init+0x22>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_HAL);
 800d8f0:	f44f 7308 	mov.w	r3, #544	@ 0x220
 800d8f4:	e1a2      	b.n	800dc3c <phhalHw_Pn5180_Init+0x368>
    }
    /* The working buffers cannot be zero */
    if (wTxBufSize == 0U || wRxBufSize == 0U)
 800d8f6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d002      	beq.n	800d902 <phhalHw_Pn5180_Init+0x2e>
 800d8fc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d102      	bne.n	800d908 <phhalHw_Pn5180_Init+0x34>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800d902:	f240 2321 	movw	r3, #545	@ 0x221
 800d906:	e199      	b.n	800dc3c <phhalHw_Pn5180_Init+0x368>
    }

    /* Check whether all the pointers supplied are non NULL */
    PH_ASSERT_NULL(pDataParams);
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d101      	bne.n	800d912 <phhalHw_Pn5180_Init+0x3e>
 800d90e:	2321      	movs	r3, #33	@ 0x21
 800d910:	e194      	b.n	800dc3c <phhalHw_Pn5180_Init+0x368>
    PH_ASSERT_NULL(pBalDataParams);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d101      	bne.n	800d91c <phhalHw_Pn5180_Init+0x48>
 800d918:	2321      	movs	r3, #33	@ 0x21
 800d91a:	e18f      	b.n	800dc3c <phhalHw_Pn5180_Init+0x368>
    PH_ASSERT_NULL(pTxBuffer);
 800d91c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d101      	bne.n	800d926 <phhalHw_Pn5180_Init+0x52>
 800d922:	2321      	movs	r3, #33	@ 0x21
 800d924:	e18a      	b.n	800dc3c <phhalHw_Pn5180_Init+0x368>
    PH_ASSERT_NULL(pRxBuffer);
 800d926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d101      	bne.n	800d930 <phhalHw_Pn5180_Init+0x5c>
 800d92c:	2321      	movs	r3, #33	@ 0x21
 800d92e:	e185      	b.n	800dc3c <phhalHw_Pn5180_Init+0x368>

    /* The first bytes are reserved for the SPI commands */
    pDataParams->pTxBuffer          = &pTxBuffer[1];
 800d930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d932:	1c5a      	adds	r2, r3, #1
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	60da      	str	r2, [r3, #12]
    pDataParams->wTxBufSize         = wTxBufSize - 1U;
 800d938:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d93a:	3b01      	subs	r3, #1
 800d93c:	b29a      	uxth	r2, r3
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	821a      	strh	r2, [r3, #16]
    pDataParams->pRxBuffer          = &pRxBuffer[2];
 800d942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d944:	1c9a      	adds	r2, r3, #2
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	615a      	str	r2, [r3, #20]
    pDataParams->wRxBufSize         = wRxBufSize - 2U;
 800d94a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800d94c:	3b02      	subs	r3, #2
 800d94e:	b29a      	uxth	r2, r3
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	831a      	strh	r2, [r3, #24]

    /* This is the constructor for the Pn5180 HAL, let's initialize the private data */
    pDataParams->wId                    = PH_COMP_HAL | PHHAL_HW_PN5180_ID;
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	f240 220e 	movw	r2, #526	@ 0x20e
 800d95a:	801a      	strh	r2, [r3, #0]
    pDataParams->pBalDataParams         = pBalDataParams;
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	687a      	ldr	r2, [r7, #4]
 800d960:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	683a      	ldr	r2, [r7, #0]
 800d966:	609a      	str	r2, [r3, #8]

    pDataParams->wRxBufLen              = 0U;
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	2200      	movs	r2, #0
 800d96c:	835a      	strh	r2, [r3, #26]
    pDataParams->wRxBufStartPos         = 0U;
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	2200      	movs	r2, #0
 800d972:	83da      	strh	r2, [r3, #30]

    pDataParams->wTxBufLen              = 0U;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	2200      	movs	r2, #0
 800d978:	825a      	strh	r2, [r3, #18]
    pDataParams->wTxBufStartPos         = 0U;
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	2200      	movs	r2, #0
 800d97e:	839a      	strh	r2, [r3, #28]

    pDataParams->bActiveMode            = PH_OFF;
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	2200      	movs	r2, #0
 800d984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    pDataParams->wTimingMode            = PHHAL_HW_TIMING_MODE_OFF;
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	2200      	movs	r2, #0
 800d98c:	851a      	strh	r2, [r3, #40]	@ 0x28
    pDataParams->bCardType              = PHHAL_HW_CARDTYPE_ISO14443A;
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	2201      	movs	r2, #1
 800d992:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    pDataParams->bTimeoutUnit           = PHHAL_HW_TIME_MICROSECONDS;
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	2200      	movs	r2, #0
 800d99a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    pDataParams->dwTimingUs             = 0U;
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	621a      	str	r2, [r3, #32]
    pDataParams->wFieldOffTime          = PHHAL_HW_FIELD_OFF_DEFAULT;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	2205      	movs	r2, #5
 800d9a8:	859a      	strh	r2, [r3, #44]	@ 0x2c
    pDataParams->wFieldRecoveryTime     = PHHAL_HW_FIELD_RECOVERY_DEFAULT;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	2205      	movs	r2, #5
 800d9ae:	85da      	strh	r2, [r3, #46]	@ 0x2e
    pDataParams->bSymbolStart           = PH_OFF;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    pDataParams->bSymbolEnd             = PH_OFF;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    pDataParams->wAdditionalInfo        = 0U;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	861a      	strh	r2, [r3, #48]	@ 0x30

    pDataParams->bRfResetAfterTo        = PH_OFF;
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    pDataParams->bOpeMode               = RD_LIB_MODE_NFC;
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	2202      	movs	r2, #2
 800d9d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    pDataParams->dwFelicaEmdReg         = 0U;
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	2200      	movs	r2, #0
 800d9da:	655a      	str	r2, [r3, #84]	@ 0x54
    pDataParams->bRxMultiple            = PH_OFF;
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	2200      	movs	r2, #0
 800d9e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    pDataParams->bNfcipMode             = PH_OFF;
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    pDataParams->bJewelActivated        = PH_OFF;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    pDataParams->bLpcdMode              = PHHAL_HW_PN5180_LPCD_MODE_DEFAULT;
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    pDataParams->wWakeupCounterInMs     = 3U;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	2203      	movs	r2, #3
 800da00:	869a      	strh	r2, [r3, #52]	@ 0x34
    pDataParams->bRfca                  = PH_ON;
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	2201      	movs	r2, #1
 800da06:	70da      	strb	r2, [r3, #3]
    pDataParams->wTargetMode            = PH_OFF;
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	2200      	movs	r2, #0
 800da0c:	865a      	strh	r2, [r3, #50]	@ 0x32
    pDataParams->dwTxWaitMs             = 0U;
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	2200      	movs	r2, #0
 800da12:	625a      	str	r2, [r3, #36]	@ 0x24
    pDataParams->bSkipSend              = PH_OFF;
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	2200      	movs	r2, #0
 800da18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    pDataParams->bTransmited            = PH_OFF;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	2200      	movs	r2, #0
 800da20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    pDataParams->bMfcCryptoEnabled      = PH_OFF;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	2200      	movs	r2, #0
 800da28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    pDataParams->bCardMode              = PH_OFF;
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	2200      	movs	r2, #0
 800da30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
    pDataParams->bBalConnectionType     = PHHAL_HW_BAL_CONNECTION_SPI;
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	2201      	movs	r2, #1
 800da38:	709a      	strb	r2, [r3, #2]
    pDataParams->pRFISRCallback         = &phhalHw_Pn5180_EventCallback;
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	4a81      	ldr	r2, [pc, #516]	@ (800dc44 <phhalHw_Pn5180_Init+0x370>)
 800da3e:	649a      	str	r2, [r3, #72]	@ 0x48
    pDataParams->pTimerISRCallBack      = &phhalHw_Pn5180_GuardTimeCallBck;
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	4a81      	ldr	r2, [pc, #516]	@ (800dc48 <phhalHw_Pn5180_Init+0x374>)
 800da44:	64da      	str	r2, [r3, #76]	@ 0x4c
    pDataParams->bPollGuardTimeFlag     = PH_OFF;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	2200      	movs	r2, #0
 800da4a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    pDataParams->bIsTestBusEnabled      = PH_OFF;
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	2200      	movs	r2, #0
 800da52:	f883 2180 	strb.w	r2, [r3, #384]	@ 0x180
        pinCfg.bPullSelect = PHDRIVER_PIN_BUSY_PULL_CFG;
        PH_CHECK_SUCCESS_FCT(statusTmp, phDriver_PinConfig(PHDRIVER_PIN_BUSY, PH_DRIVER_PINFUNC_INPUT, &pinCfg));
    }
#endif
    /* Reset Pn5180 Front-end. */
    phhalHw_Pn5180_Reset();
 800da56:	f003 fc99 	bl	801138c <phhalHw_Pn5180_Reset>

    if(((phbalReg_Type_t *)pBalDataParams)->bBalType == PHBAL_REG_TYPE_SPI)
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	789b      	ldrb	r3, [r3, #2]
 800da5e:	2b01      	cmp	r3, #1
 800da60:	d11a      	bne.n	800da98 <phhalHw_Pn5180_Init+0x1c4>
    {

        /* Before performing first SPI operation try checking if TestBus is enabled or not
         * by pulling NSS pin down and wait for some time and check for Busy pin to go high. */
        phhalHw_Pn5180_WriteSSEL(pBalDataParams, PH_DRIVER_SET_LOW);
 800da62:	2100      	movs	r1, #0
 800da64:	6878      	ldr	r0, [r7, #4]
 800da66:	f003 fcb9 	bl	80113dc <phhalHw_Pn5180_WriteSSEL>

        /* delay of ~2 ms */
        phDriver_TimerStart(PH_DRIVER_TIMER_MILLI_SECS, PHHAL_HW_PN5180_DELAY_TO_CHECK_TESTBUS, NULL);
 800da6a:	2200      	movs	r2, #0
 800da6c:	2102      	movs	r1, #2
 800da6e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800da72:	f00c fc75 	bl	801a360 <phDriver_TimerStart>

        if (phDriver_PinRead(PHDRIVER_PIN_BUSY, PH_DRIVER_PINFUNC_INPUT) == PH_ON)
 800da76:	2201      	movs	r2, #1
 800da78:	2102      	movs	r1, #2
 800da7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800da7e:	f00c fc4b 	bl	801a318 <phDriver_PinRead>
 800da82:	4603      	mov	r3, r0
 800da84:	2b01      	cmp	r3, #1
 800da86:	d103      	bne.n	800da90 <phhalHw_Pn5180_Init+0x1bc>
        {

            pDataParams->bIsTestBusEnabled = PH_ON;
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	2201      	movs	r2, #1
 800da8c:	f883 2180 	strb.w	r2, [r3, #384]	@ 0x180
        }

        /* De-assert NSS pin. */
        phhalHw_Pn5180_WriteSSEL(pBalDataParams, PH_DRIVER_SET_HIGH);
 800da90:	2101      	movs	r1, #1
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f003 fca2 	bl	80113dc <phhalHw_Pn5180_WriteSSEL>
    }

#endif
    HAL_Delay(1000);
 800da98:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800da9c:	f00c ff6e 	bl	801a97c <HAL_Delay>
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadE2Prom(pDataParams, PHHAL_HW_PN5180_FIRMWARE_VERSION_ADDR, bFirmwareVer, 2U));
 800daa0:	f107 021c 	add.w	r2, r7, #28
 800daa4:	2302      	movs	r3, #2
 800daa6:	2112      	movs	r1, #18
 800daa8:	68f8      	ldr	r0, [r7, #12]
 800daaa:	f004 f877 	bl	8011b9c <phhalHw_Pn5180_Instr_ReadE2Prom>
 800daae:	4603      	mov	r3, r0
 800dab0:	83fb      	strh	r3, [r7, #30]
 800dab2:	8bfb      	ldrh	r3, [r7, #30]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d001      	beq.n	800dabc <phhalHw_Pn5180_Init+0x1e8>
 800dab8:	8bfb      	ldrh	r3, [r7, #30]
 800daba:	e0bf      	b.n	800dc3c <phhalHw_Pn5180_Init+0x368>
    printf("PN-Firmware = %02X %02X\n", bFirmwareVer[1], bFirmwareVer[0]);	// PN-Firmware = 04 00
 800dabc:	7f7b      	ldrb	r3, [r7, #29]
 800dabe:	4619      	mov	r1, r3
 800dac0:	7f3b      	ldrb	r3, [r7, #28]
 800dac2:	461a      	mov	r2, r3
 800dac4:	4861      	ldr	r0, [pc, #388]	@ (800dc4c <phhalHw_Pn5180_Init+0x378>)
 800dac6:	f012 fd85 	bl	80205d4 <iprintf>
    HAL_Delay(1000);
 800daca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800dace:	f00c ff55 	bl	801a97c <HAL_Delay>
    if ( (0xFFU == bFirmwareVer[0]) && (0xFFU == bFirmwareVer[1]) )
 800dad2:	7f3b      	ldrb	r3, [r7, #28]
 800dad4:	2bff      	cmp	r3, #255	@ 0xff
 800dad6:	d105      	bne.n	800dae4 <phhalHw_Pn5180_Init+0x210>
 800dad8:	7f7b      	ldrb	r3, [r7, #29]
 800dada:	2bff      	cmp	r3, #255	@ 0xff
 800dadc:	d102      	bne.n	800dae4 <phhalHw_Pn5180_Init+0x210>
    {
        /* SPI Read problem... it is returing all FFFFs..
         * Version can never be 0xFF-0xFF */
        return PH_ERR_IO_TIMEOUT | PH_COMP_BAL;
 800dade:	f240 1301 	movw	r3, #257	@ 0x101
 800dae2:	e0ab      	b.n	800dc3c <phhalHw_Pn5180_Init+0x368>
    }

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadE2Prom(pDataParams, PHHAL_HW_PN5180_TESTBUS_ENABLE_ADDR, &pDataParams->bIsTestBusEnabled, 1U));
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	f503 72c0 	add.w	r2, r3, #384	@ 0x180
 800daea:	2301      	movs	r3, #1
 800daec:	2117      	movs	r1, #23
 800daee:	68f8      	ldr	r0, [r7, #12]
 800daf0:	f004 f854 	bl	8011b9c <phhalHw_Pn5180_Instr_ReadE2Prom>
 800daf4:	4603      	mov	r3, r0
 800daf6:	83fb      	strh	r3, [r7, #30]
 800daf8:	8bfb      	ldrh	r3, [r7, #30]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d001      	beq.n	800db02 <phhalHw_Pn5180_Init+0x22e>
 800dafe:	8bfb      	ldrh	r3, [r7, #30]
 800db00:	e09c      	b.n	800dc3c <phhalHw_Pn5180_Init+0x368>
    if (0U != (pDataParams->bIsTestBusEnabled & 0x80U))
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 800db08:	b25b      	sxtb	r3, r3
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	da04      	bge.n	800db18 <phhalHw_Pn5180_Init+0x244>
    {
        pDataParams->bIsTestBusEnabled = PH_ON;
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	2201      	movs	r2, #1
 800db12:	f883 2180 	strb.w	r2, [r3, #384]	@ 0x180
 800db16:	e003      	b.n	800db20 <phhalHw_Pn5180_Init+0x24c>
    }
    else
    {
        pDataParams->bIsTestBusEnabled = PH_OFF;
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	2200      	movs	r2, #0
 800db1c:	f883 2180 	strb.w	r2, [r3, #384]	@ 0x180
    }

    /* add func ：Set Power Gear Size*/
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteE2Prom(pDataParams, 0x81, &InitGearSize, 1U));
 800db20:	f107 021a 	add.w	r2, r7, #26
 800db24:	2301      	movs	r3, #1
 800db26:	2181      	movs	r1, #129	@ 0x81
 800db28:	68f8      	ldr	r0, [r7, #12]
 800db2a:	f003 ffbf 	bl	8011aac <phhalHw_Pn5180_Instr_WriteE2Prom>
 800db2e:	4603      	mov	r3, r0
 800db30:	83fb      	strh	r3, [r7, #30]
 800db32:	8bfb      	ldrh	r3, [r7, #30]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d001      	beq.n	800db3c <phhalHw_Pn5180_Init+0x268>
 800db38:	8bfb      	ldrh	r3, [r7, #30]
 800db3a:	e07f      	b.n	800dc3c <phhalHw_Pn5180_Init+0x368>

    /* Disable Idle IRQ */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, IRQ_ENABLE, (uint32_t)~IRQ_SET_CLEAR_IDLE_IRQ_CLR_MASK));
 800db3c:	f06f 0204 	mvn.w	r2, #4
 800db40:	2101      	movs	r1, #1
 800db42:	68f8      	ldr	r0, [r7, #12]
 800db44:	f003 fd82 	bl	801164c <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800db48:	4603      	mov	r3, r0
 800db4a:	83fb      	strh	r3, [r7, #30]
 800db4c:	8bfb      	ldrh	r3, [r7, #30]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d001      	beq.n	800db56 <phhalHw_Pn5180_Init+0x282>
 800db52:	8bfb      	ldrh	r3, [r7, #30]
 800db54:	e072      	b.n	800dc3c <phhalHw_Pn5180_Init+0x368>

    /* Clear all IRQs  */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, PHHAL_HW_PN5180_IRQ_SET_CLEAR_ALL_MASK));
 800db56:	4a3e      	ldr	r2, [pc, #248]	@ (800dc50 <phhalHw_Pn5180_Init+0x37c>)
 800db58:	2103      	movs	r1, #3
 800db5a:	68f8      	ldr	r0, [r7, #12]
 800db5c:	f003 fc8a 	bl	8011474 <phhalHw_Pn5180_Instr_WriteRegister>
 800db60:	4603      	mov	r3, r0
 800db62:	83fb      	strh	r3, [r7, #30]
 800db64:	8bfb      	ldrh	r3, [r7, #30]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d001      	beq.n	800db6e <phhalHw_Pn5180_Init+0x29a>
 800db6a:	8bfb      	ldrh	r3, [r7, #30]
 800db6c:	e066      	b.n	800dc3c <phhalHw_Pn5180_Init+0x368>

    /* Create the event. */
//    pDataParams->HwEventObj.pEvtName = (uint8_t *)bHalEventName;  // 1
    pDataParams->HwEventObj.intialValue = 0U;
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	2200      	movs	r2, #0
 800db72:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
    PH_CHECK_SUCCESS_FCT(statusTmp, phOsal_EventCreate(&pDataParams->HwEventObj.EventHandle, &pDataParams->HwEventObj));
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	f503 72c2 	add.w	r2, r3, #388	@ 0x184
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800db82:	4619      	mov	r1, r3
 800db84:	4610      	mov	r0, r2
 800db86:	f00c fd43 	bl	801a610 <phOsal_EventCreate>
 800db8a:	4603      	mov	r3, r0
 800db8c:	83fb      	strh	r3, [r7, #30]
 800db8e:	8bfb      	ldrh	r3, [r7, #30]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d001      	beq.n	800db98 <phhalHw_Pn5180_Init+0x2c4>
 800db94:	8bfb      	ldrh	r3, [r7, #30]
 800db96:	e051      	b.n	800dc3c <phhalHw_Pn5180_Init+0x368>

    /*clear previously occurred unwanted events*/
    (void)phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL);
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 800db9e:	2300      	movs	r3, #0
 800dba0:	2201      	movs	r2, #1
 800dba2:	2100      	movs	r1, #0
 800dba4:	f00c fe02 	bl	801a7ac <phOsal_EventClear>
    xEventHandle = pDataParams->HwEventObj.EventHandle;
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 800dbae:	4a29      	ldr	r2, [pc, #164]	@ (800dc54 <phhalHw_Pn5180_Init+0x380>)
 800dbb0:	6013      	str	r3, [r2, #0]

    /* firmware version was already read earlier (to check if SPI is working).  Store it in dataparams.  */
    pDataParams->wFirmwareVer = bFirmwareVer[1];
 800dbb2:	7f7b      	ldrb	r3, [r7, #29]
 800dbb4:	461a      	mov	r2, r3
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
    pDataParams->wFirmwareVer = (pDataParams->wFirmwareVer << 8U) | bFirmwareVer[0];
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 800dbc2:	b21b      	sxth	r3, r3
 800dbc4:	021b      	lsls	r3, r3, #8
 800dbc6:	b21a      	sxth	r2, r3
 800dbc8:	7f3b      	ldrb	r3, [r7, #28]
 800dbca:	b21b      	sxth	r3, r3
 800dbcc:	4313      	orrs	r3, r2
 800dbce:	b21b      	sxth	r3, r3
 800dbd0:	b29a      	uxth	r2, r3
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78

    /* Check if Firmware version is above 3.4, which also verifies Pn5180 is initialized. */
    if (pDataParams->wFirmwareVer < 0x304U)
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 800dbde:	f5b3 7f41 	cmp.w	r3, #772	@ 0x304
 800dbe2:	d202      	bcs.n	800dbea <phhalHw_Pn5180_Init+0x316>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERFACE_ERROR, PH_COMP_HAL);
 800dbe4:	f240 230b 	movw	r3, #523	@ 0x20b
 800dbe8:	e028      	b.n	800dc3c <phhalHw_Pn5180_Init+0x368>
    }
    else
    {
        /* Apply HAL Digital delay when pn5180 FW version is less than 3.8. */
        if (pDataParams->wFirmwareVer >= 0x308U)
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 800dbf0:	f5b3 7f42 	cmp.w	r3, #776	@ 0x308
 800dbf4:	d321      	bcc.n	800dc3a <phhalHw_Pn5180_Init+0x366>
        {
            /* Read MISC_CONFIG value */
            phhalHw_Pn5180_Instr_ReadE2Prom(
 800dbf6:	f107 021b 	add.w	r2, r7, #27
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	21e8      	movs	r1, #232	@ 0xe8
 800dbfe:	68f8      	ldr	r0, [r7, #12]
 800dc00:	f003 ffcc 	bl	8011b9c <phhalHw_Pn5180_Instr_ReadE2Prom>
                &bDigitalDelayCfg,
                PHHAL_HW_PN5180_DIGITAL_DELAY_CONFIG_LEN);

            /* Apply FW Digital delay and enable timer 1 for the use of FDT/FWT for FW version 3.8 onwards. */

            if (((0U == ((bDigitalDelayCfg & PHHAL_HW_PN5180_DIGITAL_DELAY_ENABLE)))) ||
 800dc04:	7efb      	ldrb	r3, [r7, #27]
 800dc06:	f003 0301 	and.w	r3, r3, #1
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d004      	beq.n	800dc18 <phhalHw_Pn5180_Init+0x344>
                (!((bDigitalDelayCfg & PHHAL_HW_PN5180_FDT_TIMER_USED_MASK) == ((PHHAL_HW_PN5180_FDT_TIMER_USED) << 1U))))
 800dc0e:	7efb      	ldrb	r3, [r7, #27]
 800dc10:	f003 0306 	and.w	r3, r3, #6
            if (((0U == ((bDigitalDelayCfg & PHHAL_HW_PN5180_DIGITAL_DELAY_ENABLE)))) ||
 800dc14:	2b02      	cmp	r3, #2
 800dc16:	d010      	beq.n	800dc3a <phhalHw_Pn5180_Init+0x366>
            {
                /* Clear timer bits. */
                bDigitalDelayCfg &= (uint8_t)~(PHHAL_HW_PN5180_FDT_TIMER_USED_MASK);
 800dc18:	7efb      	ldrb	r3, [r7, #27]
 800dc1a:	f023 0306 	bic.w	r3, r3, #6
 800dc1e:	b2db      	uxtb	r3, r3
 800dc20:	76fb      	strb	r3, [r7, #27]

                /* Enable FW digital delay and timer 1 for FDT/FWT. */
                bDigitalDelayCfg |= (uint8_t)(PHHAL_HW_PN5180_DIGITAL_DELAY_ENABLE | ((PHHAL_HW_PN5180_FDT_TIMER_USED) << 1U));
 800dc22:	7efb      	ldrb	r3, [r7, #27]
 800dc24:	f043 0303 	orr.w	r3, r3, #3
 800dc28:	b2db      	uxtb	r3, r3
 800dc2a:	76fb      	strb	r3, [r7, #27]

                /* Write back MISC_CONFIG value */
                phhalHw_Pn5180_Instr_WriteE2Prom(
 800dc2c:	f107 021b 	add.w	r2, r7, #27
 800dc30:	2301      	movs	r3, #1
 800dc32:	21e8      	movs	r1, #232	@ 0xe8
 800dc34:	68f8      	ldr	r0, [r7, #12]
 800dc36:	f003 ff39 	bl	8011aac <phhalHw_Pn5180_Instr_WriteE2Prom>
                    &bDigitalDelayCfg,
                    PHHAL_HW_PN5180_DIGITAL_DELAY_CONFIG_LEN);
            }
        }
    }
    return PH_ERR_SUCCESS;
 800dc3a:	2300      	movs	r3, #0
}
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	3720      	adds	r7, #32
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bd80      	pop	{r7, pc}
 800dc44:	0800d87f 	.word	0x0800d87f
 800dc48:	0800d8a9 	.word	0x0800d8a9
 800dc4c:	08023098 	.word	0x08023098
 800dc50:	000fffff 	.word	0x000fffff
 800dc54:	20001be0 	.word	0x20001be0

0800dc58 <phhalHw_Pn5180_WriteRegister>:
phStatus_t phhalHw_Pn5180_WriteRegister(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t  bAddress,
    uint32_t dwValue
    )
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b084      	sub	sp, #16
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	60f8      	str	r0, [r7, #12]
 800dc60:	460b      	mov	r3, r1
 800dc62:	607a      	str	r2, [r7, #4]
 800dc64:	72fb      	strb	r3, [r7, #11]
    return phhalHw_Pn5180_Instr_WriteRegister(  \
 800dc66:	7afb      	ldrb	r3, [r7, #11]
 800dc68:	687a      	ldr	r2, [r7, #4]
 800dc6a:	4619      	mov	r1, r3
 800dc6c:	68f8      	ldr	r0, [r7, #12]
 800dc6e:	f003 fc01 	bl	8011474 <phhalHw_Pn5180_Instr_WriteRegister>
 800dc72:	4603      	mov	r3, r0
        pDataParams,  \
        bAddress,  \
        dwValue);
}
 800dc74:	4618      	mov	r0, r3
 800dc76:	3710      	adds	r7, #16
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	bd80      	pop	{r7, pc}

0800dc7c <phhalHw_Pn5180_ReadRegister>:

phStatus_t phhalHw_Pn5180_ReadRegister(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bAddress,
    uint32_t * pValue)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b084      	sub	sp, #16
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	60f8      	str	r0, [r7, #12]
 800dc84:	460b      	mov	r3, r1
 800dc86:	607a      	str	r2, [r7, #4]
 800dc88:	72fb      	strb	r3, [r7, #11]
    return phhalHw_Pn5180_Instr_ReadRegister(   \
 800dc8a:	7afb      	ldrb	r3, [r7, #11]
 800dc8c:	687a      	ldr	r2, [r7, #4]
 800dc8e:	4619      	mov	r1, r3
 800dc90:	68f8      	ldr	r0, [r7, #12]
 800dc92:	f003 fe03 	bl	801189c <phhalHw_Pn5180_Instr_ReadRegister>
 800dc96:	4603      	mov	r3, r0
        pDataParams,  \
        bAddress,  \
        pValue);   \

}
 800dc98:	4618      	mov	r0, r3
 800dc9a:	3710      	adds	r7, #16
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}

0800dca0 <phhalHw_Pn5180_ApplyProtocolSettings>:

phStatus_t phhalHw_Pn5180_ApplyProtocolSettings(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bCardType)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b088      	sub	sp, #32
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
 800dca8:	460b      	mov	r3, r1
 800dcaa:	70fb      	strb	r3, [r7, #3]
    uint16_t   PH_MEMLOC_REM wConfig;
    uint16_t   PH_MEMLOC_REM wTxDatarate;
    uint16_t   PH_MEMLOC_REM wRxDatarate;

    /* Disable the EMD. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_OFF));
 800dcac:	2200      	movs	r2, #0
 800dcae:	215e      	movs	r1, #94	@ 0x5e
 800dcb0:	6878      	ldr	r0, [r7, #4]
 800dcb2:	f000 fd71 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	823b      	strh	r3, [r7, #16]
 800dcba:	8a3b      	ldrh	r3, [r7, #16]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d001      	beq.n	800dcc4 <phhalHw_Pn5180_ApplyProtocolSettings+0x24>
 800dcc0:	8a3b      	ldrh	r3, [r7, #16]
 800dcc2:	e1af      	b.n	800e024 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>

    /* Store new card type */
    if (bCardType != PHHAL_HW_CARDTYPE_CURRENT)
 800dcc4:	78fb      	ldrb	r3, [r7, #3]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d00a      	beq.n	800dce0 <phhalHw_Pn5180_ApplyProtocolSettings+0x40>
    {
        pDataParams->bCardType = bCardType;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	78fa      	ldrb	r2, [r7, #3]
 800dcce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        pDataParams->bTimeoutUnit = PHHAL_HW_TIME_MICROSECONDS;
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        bUseDefaultShadow = 1U;
 800dcda:	2301      	movs	r3, #1
 800dcdc:	767b      	strb	r3, [r7, #25]
 800dcde:	e001      	b.n	800dce4 <phhalHw_Pn5180_ApplyProtocolSettings+0x44>
    }
    else
    {
        bUseDefaultShadow = 0U;
 800dce0:	2300      	movs	r3, #0
 800dce2:	767b      	strb	r3, [r7, #25]
    }

    pDataParams->bActiveMode       = PH_OFF;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	2200      	movs	r2, #0
 800dce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    pDataParams->wTargetMode       = PH_OFF;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2200      	movs	r2, #0
 800dcf0:	865a      	strh	r2, [r3, #50]	@ 0x32
    pDataParams->bJewelActivated   = PH_OFF;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    pDataParams->bNfcipMode        = PH_OFF;
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    pDataParams->bSkipSend         = PH_OFF;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	2200      	movs	r2, #0
 800dd06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

    /* configure reader IC for current card */
    switch (pDataParams->bCardType)
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800dd10:	3b01      	subs	r3, #1
 800dd12:	2b09      	cmp	r3, #9
 800dd14:	f200 8104 	bhi.w	800df20 <phhalHw_Pn5180_ApplyProtocolSettings+0x280>
 800dd18:	a201      	add	r2, pc, #4	@ (adr r2, 800dd20 <phhalHw_Pn5180_ApplyProtocolSettings+0x80>)
 800dd1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd1e:	bf00      	nop
 800dd20:	0800dd49 	.word	0x0800dd49
 800dd24:	0800dd73 	.word	0x0800dd73
 800dd28:	0800dd9d 	.word	0x0800dd9d
 800dd2c:	0800deb7 	.word	0x0800deb7
 800dd30:	0800df21 	.word	0x0800df21
 800dd34:	0800dee1 	.word	0x0800dee1
 800dd38:	0800de19 	.word	0x0800de19
 800dd3c:	0800de53 	.word	0x0800de53
 800dd40:	0800de85 	.word	0x0800de85
 800dd44:	0800dddb 	.word	0x0800dddb
    {
        /* configure hardware for ISO 14443A */
    case PHHAL_HW_CARDTYPE_ISO14443A:
        /* Use 14443a default shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_ISO14443A_106_MILLER, PHHAL_HW_PN5180_RF_RX_ISO14443A_106_MANCH_SUBC));  /* Masking RxDataRate with Minimum Configuration Index */
 800dd48:	2280      	movs	r2, #128	@ 0x80
 800dd4a:	2100      	movs	r1, #0
 800dd4c:	6878      	ldr	r0, [r7, #4]
 800dd4e:	f004 fa8b 	bl	8012268 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800dd52:	4603      	mov	r3, r0
 800dd54:	823b      	strh	r3, [r7, #16]
 800dd56:	8a3b      	ldrh	r3, [r7, #16]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d001      	beq.n	800dd60 <phhalHw_Pn5180_ApplyProtocolSettings+0xc0>
 800dd5c:	8a3b      	ldrh	r3, [r7, #16]
 800dd5e:	e161      	b.n	800e024 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        SET_PN5180_SHADOW(wPn5180_DefaultShadow_I14443a);
 800dd60:	4b99      	ldr	r3, [pc, #612]	@ (800dfc8 <phhalHw_Pn5180_ApplyProtocolSettings+0x328>)
 800dd62:	61fb      	str	r3, [r7, #28]
 800dd64:	230a      	movs	r3, #10
 800dd66:	837b      	strh	r3, [r7, #26]
        /* Update Datarate in shadow for parity setting */
        wTxDatarate = PHHAL_HW_RF_DATARATE_106;
 800dd68:	2300      	movs	r3, #0
 800dd6a:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_106;
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	827b      	strh	r3, [r7, #18]
        break;
 800dd70:	e0de      	b.n	800df30 <phhalHw_Pn5180_ApplyProtocolSettings+0x290>

    case PHHAL_HW_CARDTYPE_ISO14443B:
        /* Use 14443b shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_ISO14443B_106_NRZ, PHHAL_HW_PN5180_RF_RX_ISO14443B_106_BPSK));  /* Masking RxDataRate with Minimum Configuration Index */
 800dd72:	2284      	movs	r2, #132	@ 0x84
 800dd74:	2104      	movs	r1, #4
 800dd76:	6878      	ldr	r0, [r7, #4]
 800dd78:	f004 fa76 	bl	8012268 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	823b      	strh	r3, [r7, #16]
 800dd80:	8a3b      	ldrh	r3, [r7, #16]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d001      	beq.n	800dd8a <phhalHw_Pn5180_ApplyProtocolSettings+0xea>
 800dd86:	8a3b      	ldrh	r3, [r7, #16]
 800dd88:	e14c      	b.n	800e024 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        SET_PN5180_SHADOW(wPn5180_DefaultShadow_I14443b);
 800dd8a:	4b90      	ldr	r3, [pc, #576]	@ (800dfcc <phhalHw_Pn5180_ApplyProtocolSettings+0x32c>)
 800dd8c:	61fb      	str	r3, [r7, #28]
 800dd8e:	230b      	movs	r3, #11
 800dd90:	837b      	strh	r3, [r7, #26]
        /* Update Datarate in shadow for parity setting */
        wTxDatarate = PHHAL_HW_RF_DATARATE_106;
 800dd92:	2300      	movs	r3, #0
 800dd94:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_106;
 800dd96:	2300      	movs	r3, #0
 800dd98:	827b      	strh	r3, [r7, #18]
        break;
 800dd9a:	e0c9      	b.n	800df30 <phhalHw_Pn5180_ApplyProtocolSettings+0x290>

    case PHHAL_HW_CARDTYPE_FELICA_212:
        /* Use FeliCa shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_FELICA_212, PHHAL_HW_PN5180_RF_RX_FELICA_212));  /* Masking RxDataRate with Minimum Configuration Index */
 800dd9c:	2288      	movs	r2, #136	@ 0x88
 800dd9e:	2108      	movs	r1, #8
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	f004 fa61 	bl	8012268 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800dda6:	4603      	mov	r3, r0
 800dda8:	823b      	strh	r3, [r7, #16]
 800ddaa:	8a3b      	ldrh	r3, [r7, #16]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d001      	beq.n	800ddb4 <phhalHw_Pn5180_ApplyProtocolSettings+0x114>
 800ddb0:	8a3b      	ldrh	r3, [r7, #16]
 800ddb2:	e137      	b.n	800e024 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        SET_PN5180_SHADOW(wPn5180_DefaultShadow_Felica);
 800ddb4:	4b86      	ldr	r3, [pc, #536]	@ (800dfd0 <phhalHw_Pn5180_ApplyProtocolSettings+0x330>)
 800ddb6:	61fb      	str	r3, [r7, #28]
 800ddb8:	230b      	movs	r3, #11
 800ddba:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_DATARATE_212;
 800ddbc:	2301      	movs	r3, #1
 800ddbe:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_212;
 800ddc0:	2301      	movs	r3, #1
 800ddc2:	827b      	strh	r3, [r7, #18]

        /* Configure FeliCa EMD Control Register */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig_FelicaEmdReg(pDataParams));
 800ddc4:	6878      	ldr	r0, [r7, #4]
 800ddc6:	f004 fef1 	bl	8012bac <phhalHw_Pn5180_SetConfig_FelicaEmdReg>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	823b      	strh	r3, [r7, #16]
 800ddce:	8a3b      	ldrh	r3, [r7, #16]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	f000 80a8 	beq.w	800df26 <phhalHw_Pn5180_ApplyProtocolSettings+0x286>
 800ddd6:	8a3b      	ldrh	r3, [r7, #16]
 800ddd8:	e124      	b.n	800e024 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        break;

    case PHHAL_HW_CARDTYPE_FELICA_424:
        /* Use FeliCa shadow for 424*/
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_FELICA_424, PHHAL_HW_PN5180_RF_RX_FELICA_424));  /* Masking RxDataRate with Minimum Configuration Index */
 800ddda:	2289      	movs	r2, #137	@ 0x89
 800dddc:	2109      	movs	r1, #9
 800ddde:	6878      	ldr	r0, [r7, #4]
 800dde0:	f004 fa42 	bl	8012268 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800dde4:	4603      	mov	r3, r0
 800dde6:	823b      	strh	r3, [r7, #16]
 800dde8:	8a3b      	ldrh	r3, [r7, #16]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d001      	beq.n	800ddf2 <phhalHw_Pn5180_ApplyProtocolSettings+0x152>
 800ddee:	8a3b      	ldrh	r3, [r7, #16]
 800ddf0:	e118      	b.n	800e024 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>

        SET_PN5180_SHADOW(wPn5180_DefaultShadow_Felica_424);
 800ddf2:	4b78      	ldr	r3, [pc, #480]	@ (800dfd4 <phhalHw_Pn5180_ApplyProtocolSettings+0x334>)
 800ddf4:	61fb      	str	r3, [r7, #28]
 800ddf6:	230b      	movs	r3, #11
 800ddf8:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_DATARATE_424;
 800ddfa:	2302      	movs	r3, #2
 800ddfc:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_424;
 800ddfe:	2302      	movs	r3, #2
 800de00:	827b      	strh	r3, [r7, #18]

        /* Configure FeliCa EMD Control Register */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig_FelicaEmdReg(pDataParams));
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	f004 fed2 	bl	8012bac <phhalHw_Pn5180_SetConfig_FelicaEmdReg>
 800de08:	4603      	mov	r3, r0
 800de0a:	823b      	strh	r3, [r7, #16]
 800de0c:	8a3b      	ldrh	r3, [r7, #16]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	f000 808b 	beq.w	800df2a <phhalHw_Pn5180_ApplyProtocolSettings+0x28a>
 800de14:	8a3b      	ldrh	r3, [r7, #16]
 800de16:	e105      	b.n	800e024 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        break;

    case PHHAL_HW_CARDTYPE_I18092M_ACTIVE_106:
        /* Use I18092m_Active shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_NFC_AI_106_106, PHHAL_HW_PN5180_RF_RX_NFC_AI_106));  /* Masking RxDataRate with Minimum Configuration Index */
 800de18:	228a      	movs	r2, #138	@ 0x8a
 800de1a:	210a      	movs	r1, #10
 800de1c:	6878      	ldr	r0, [r7, #4]
 800de1e:	f004 fa23 	bl	8012268 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800de22:	4603      	mov	r3, r0
 800de24:	823b      	strh	r3, [r7, #16]
 800de26:	8a3b      	ldrh	r3, [r7, #16]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d001      	beq.n	800de30 <phhalHw_Pn5180_ApplyProtocolSettings+0x190>
 800de2c:	8a3b      	ldrh	r3, [r7, #16]
 800de2e:	e0f9      	b.n	800e024 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        SET_PN5180_SHADOW(wPn5180_DefShadow_I18092m_Active);
 800de30:	4b69      	ldr	r3, [pc, #420]	@ (800dfd8 <phhalHw_Pn5180_ApplyProtocolSettings+0x338>)
 800de32:	61fb      	str	r3, [r7, #28]
 800de34:	230b      	movs	r3, #11
 800de36:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_DATARATE_106;
 800de38:	2300      	movs	r3, #0
 800de3a:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_106;
 800de3c:	2300      	movs	r3, #0
 800de3e:	827b      	strh	r3, [r7, #18]
        /* Enable active mode */
        pDataParams->bActiveMode = PH_ON;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2201      	movs	r2, #1
 800de44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        pDataParams->bNfcipMode = PH_ON;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2201      	movs	r2, #1
 800de4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
        break;
 800de50:	e06e      	b.n	800df30 <phhalHw_Pn5180_ApplyProtocolSettings+0x290>

    case PHHAL_HW_CARDTYPE_I18092M_ACTIVE_212:
        /* Use I18092m_Active_212 shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_NFC_AI_212_212, PHHAL_HW_PN5180_RF_RX_NFC_AI_212));  /* Masking RxDataRate with Minimum Configuration Index */
 800de52:	228b      	movs	r2, #139	@ 0x8b
 800de54:	210b      	movs	r1, #11
 800de56:	6878      	ldr	r0, [r7, #4]
 800de58:	f004 fa06 	bl	8012268 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800de5c:	4603      	mov	r3, r0
 800de5e:	823b      	strh	r3, [r7, #16]
 800de60:	8a3b      	ldrh	r3, [r7, #16]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d001      	beq.n	800de6a <phhalHw_Pn5180_ApplyProtocolSettings+0x1ca>
 800de66:	8a3b      	ldrh	r3, [r7, #16]
 800de68:	e0dc      	b.n	800e024 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        SET_PN5180_SHADOW(wPn5180_DefShadow_I18092m_212_Active);
 800de6a:	4b5c      	ldr	r3, [pc, #368]	@ (800dfdc <phhalHw_Pn5180_ApplyProtocolSettings+0x33c>)
 800de6c:	61fb      	str	r3, [r7, #28]
 800de6e:	230b      	movs	r3, #11
 800de70:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_DATARATE_212;
 800de72:	2301      	movs	r3, #1
 800de74:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_212;
 800de76:	2301      	movs	r3, #1
 800de78:	827b      	strh	r3, [r7, #18]
        /* Enable active mode */
        pDataParams->bActiveMode = PH_ON;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	2201      	movs	r2, #1
 800de7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        break;
 800de82:	e055      	b.n	800df30 <phhalHw_Pn5180_ApplyProtocolSettings+0x290>

    case PHHAL_HW_CARDTYPE_I18092M_ACTIVE_424:
        /* Use I18092m_Active_424 shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_NFC_AI_424_424, PHHAL_HW_PN5180_RF_RX_NFC_AI_424));  /* Masking RxDataRate with Minimum Configuration Index */
 800de84:	228c      	movs	r2, #140	@ 0x8c
 800de86:	210c      	movs	r1, #12
 800de88:	6878      	ldr	r0, [r7, #4]
 800de8a:	f004 f9ed 	bl	8012268 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800de8e:	4603      	mov	r3, r0
 800de90:	823b      	strh	r3, [r7, #16]
 800de92:	8a3b      	ldrh	r3, [r7, #16]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d001      	beq.n	800de9c <phhalHw_Pn5180_ApplyProtocolSettings+0x1fc>
 800de98:	8a3b      	ldrh	r3, [r7, #16]
 800de9a:	e0c3      	b.n	800e024 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>

        SET_PN5180_SHADOW(wPn5180_DefShadow_I18092m_424_Active);
 800de9c:	4b50      	ldr	r3, [pc, #320]	@ (800dfe0 <phhalHw_Pn5180_ApplyProtocolSettings+0x340>)
 800de9e:	61fb      	str	r3, [r7, #28]
 800dea0:	230b      	movs	r3, #11
 800dea2:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_DATARATE_424;
 800dea4:	2302      	movs	r3, #2
 800dea6:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_424;
 800dea8:	2302      	movs	r3, #2
 800deaa:	827b      	strh	r3, [r7, #18]
        /* Enable active mode */
        pDataParams->bActiveMode = PH_ON;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2201      	movs	r2, #1
 800deb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        break;
 800deb4:	e03c      	b.n	800df30 <phhalHw_Pn5180_ApplyProtocolSettings+0x290>

    case PHHAL_HW_CARDTYPE_ISO15693:
        /* Use 15693 shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_ISO15693_26_1OF4_ASK100, PHHAL_HW_PN5180_RF_RX_ISO15693_26_1OF4_SC));  /* Masking RxDataRate with Minimum Configuration Index */
 800deb6:	228d      	movs	r2, #141	@ 0x8d
 800deb8:	210d      	movs	r1, #13
 800deba:	6878      	ldr	r0, [r7, #4]
 800debc:	f004 f9d4 	bl	8012268 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800dec0:	4603      	mov	r3, r0
 800dec2:	823b      	strh	r3, [r7, #16]
 800dec4:	8a3b      	ldrh	r3, [r7, #16]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d001      	beq.n	800dece <phhalHw_Pn5180_ApplyProtocolSettings+0x22e>
 800deca:	8a3b      	ldrh	r3, [r7, #16]
 800decc:	e0aa      	b.n	800e024 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        SET_PN5180_SHADOW(wPn5180_DefaultShadow_I15693);
 800dece:	4b45      	ldr	r3, [pc, #276]	@ (800dfe4 <phhalHw_Pn5180_ApplyProtocolSettings+0x344>)
 800ded0:	61fb      	str	r3, [r7, #28]
 800ded2:	230c      	movs	r3, #12
 800ded4:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_TX_DATARATE_1_OUT_OF_4;
 800ded6:	230b      	movs	r3, #11
 800ded8:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_RX_DATARATE_HIGH;
 800deda:	230d      	movs	r3, #13
 800dedc:	827b      	strh	r3, [r7, #18]

        break;
 800dede:	e027      	b.n	800df30 <phhalHw_Pn5180_ApplyProtocolSettings+0x290>

    case PHHAL_HW_CARDTYPE_I18000P3M3:
        /* Use 18000p3m3 shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_ISO180003M3_TARI_9_44_ASK, PHHAL_HW_PN5180_RF_RX_ISO180003M3_MANCH424_2_PERIOD));  /* Masking RxDataRate with Minimum Configuration Index */
 800dee0:	2290      	movs	r2, #144	@ 0x90
 800dee2:	2110      	movs	r1, #16
 800dee4:	6878      	ldr	r0, [r7, #4]
 800dee6:	f004 f9bf 	bl	8012268 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800deea:	4603      	mov	r3, r0
 800deec:	823b      	strh	r3, [r7, #16]
 800deee:	8a3b      	ldrh	r3, [r7, #16]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d001      	beq.n	800def8 <phhalHw_Pn5180_ApplyProtocolSettings+0x258>
 800def4:	8a3b      	ldrh	r3, [r7, #16]
 800def6:	e095      	b.n	800e024 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>

        SET_PN5180_SHADOW(wPn5180_DefaultShadow_I18000p3m3);
 800def8:	4b3b      	ldr	r3, [pc, #236]	@ (800dfe8 <phhalHw_Pn5180_ApplyProtocolSettings+0x348>)
 800defa:	61fb      	str	r3, [r7, #28]
 800defc:	230c      	movs	r3, #12
 800defe:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_TX_DATARATE_I18000P3M3;
 800df00:	2311      	movs	r3, #17
 800df02:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RX_I18000P3M3_FL_423_MAN2;
 800df04:	2313      	movs	r3, #19
 800df06:	827b      	strh	r3, [r7, #18]
        /*A Timeout of 5 ms has been added*/
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams, PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS, 5U));
 800df08:	2205      	movs	r2, #5
 800df0a:	210e      	movs	r1, #14
 800df0c:	6878      	ldr	r0, [r7, #4]
 800df0e:	f000 fc43 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 800df12:	4603      	mov	r3, r0
 800df14:	823b      	strh	r3, [r7, #16]
 800df16:	8a3b      	ldrh	r3, [r7, #16]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d008      	beq.n	800df2e <phhalHw_Pn5180_ApplyProtocolSettings+0x28e>
 800df1c:	8a3b      	ldrh	r3, [r7, #16]
 800df1e:	e081      	b.n	800e024 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        break;

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800df20:	f240 2321 	movw	r3, #545	@ 0x221
 800df24:	e07e      	b.n	800e024 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        break;
 800df26:	bf00      	nop
 800df28:	e002      	b.n	800df30 <phhalHw_Pn5180_ApplyProtocolSettings+0x290>
        break;
 800df2a:	bf00      	nop
 800df2c:	e000      	b.n	800df30 <phhalHw_Pn5180_ApplyProtocolSettings+0x290>
        break;
 800df2e:	bf00      	nop
    }

    /* Copy over default shadow contents into current shadow. */
    if (0U != bUseDefaultShadow)
 800df30:	7e7b      	ldrb	r3, [r7, #25]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d069      	beq.n	800e00a <phhalHw_Pn5180_ApplyProtocolSettings+0x36a>
    {
        if(pShadowDefault == NULL)
 800df36:	69fb      	ldr	r3, [r7, #28]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d102      	bne.n	800df42 <phhalHw_Pn5180_ApplyProtocolSettings+0x2a2>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_HAL);
 800df3c:	f44f 7308 	mov.w	r3, #544	@ 0x220
 800df40:	e070      	b.n	800e024 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        }
        /* Initialize config shadow */
        (void)memset(pDataParams->wCfgShadow, 0x00U, PHHAL_HW_PN5180_SHADOW_COUNT * sizeof(pDataParams->wCfgShadow[0]));
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	3358      	adds	r3, #88	@ 0x58
 800df46:	2220      	movs	r2, #32
 800df48:	2100      	movs	r1, #0
 800df4a:	4618      	mov	r0, r3
 800df4c:	f012 fca2 	bl	8020894 <memset>

        for (wIndex = 0U; wIndex < wShadowCount; ++wIndex)
 800df50:	2300      	movs	r3, #0
 800df52:	82fb      	strh	r3, [r7, #22]
 800df54:	e04d      	b.n	800dff2 <phhalHw_Pn5180_ApplyProtocolSettings+0x352>
        {
            wConfig = pShadowDefault[wIndex << 1U];
 800df56:	8afb      	ldrh	r3, [r7, #22]
 800df58:	009b      	lsls	r3, r3, #2
 800df5a:	69fa      	ldr	r2, [r7, #28]
 800df5c:	4413      	add	r3, r2
 800df5e:	881b      	ldrh	r3, [r3, #0]
 800df60:	81fb      	strh	r3, [r7, #14]
            pDataParams->wCfgShadow[wConfig] = pShadowDefault[(wIndex << 1U) + 1U];
 800df62:	8afb      	ldrh	r3, [r7, #22]
 800df64:	009b      	lsls	r3, r3, #2
 800df66:	3302      	adds	r3, #2
 800df68:	69fa      	ldr	r2, [r7, #28]
 800df6a:	4413      	add	r3, r2
 800df6c:	89fa      	ldrh	r2, [r7, #14]
 800df6e:	8819      	ldrh	r1, [r3, #0]
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	322c      	adds	r2, #44	@ 0x2c
 800df74:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            if((wConfig == PHHAL_HW_CONFIG_TXWAIT_US) &&
 800df78:	89fb      	ldrh	r3, [r7, #14]
 800df7a:	2b07      	cmp	r3, #7
 800df7c:	d136      	bne.n	800dfec <phhalHw_Pn5180_ApplyProtocolSettings+0x34c>
                ((pDataParams->bActiveMode) || (pDataParams->bCardType == PHHAL_HW_CARDTYPE_FELICA_212) || (pDataParams->bCardType == PHHAL_HW_CARDTYPE_FELICA_424)) &&
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
            if((wConfig == PHHAL_HW_CONFIG_TXWAIT_US) &&
 800df84:	2b00      	cmp	r3, #0
 800df86:	d109      	bne.n	800df9c <phhalHw_Pn5180_ApplyProtocolSettings+0x2fc>
                ((pDataParams->bActiveMode) || (pDataParams->bCardType == PHHAL_HW_CARDTYPE_FELICA_212) || (pDataParams->bCardType == PHHAL_HW_CARDTYPE_FELICA_424)) &&
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800df8e:	2b03      	cmp	r3, #3
 800df90:	d004      	beq.n	800df9c <phhalHw_Pn5180_ApplyProtocolSettings+0x2fc>
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800df98:	2b0a      	cmp	r3, #10
 800df9a:	d127      	bne.n	800dfec <phhalHw_Pn5180_ApplyProtocolSettings+0x34c>
                (pDataParams->wTargetMode == PH_OFF))
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
                ((pDataParams->bActiveMode) || (pDataParams->bCardType == PHHAL_HW_CARDTYPE_FELICA_212) || (pDataParams->bCardType == PHHAL_HW_CARDTYPE_FELICA_424)) &&
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d123      	bne.n	800dfec <phhalHw_Pn5180_ApplyProtocolSettings+0x34c>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, wConfig, pDataParams->wCfgShadow[wConfig]));
 800dfa4:	89fa      	ldrh	r2, [r7, #14]
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	322c      	adds	r2, #44	@ 0x2c
 800dfaa:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800dfae:	89fb      	ldrh	r3, [r7, #14]
 800dfb0:	4619      	mov	r1, r3
 800dfb2:	6878      	ldr	r0, [r7, #4]
 800dfb4:	f000 fbf0 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 800dfb8:	4603      	mov	r3, r0
 800dfba:	823b      	strh	r3, [r7, #16]
 800dfbc:	8a3b      	ldrh	r3, [r7, #16]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d014      	beq.n	800dfec <phhalHw_Pn5180_ApplyProtocolSettings+0x34c>
 800dfc2:	8a3b      	ldrh	r3, [r7, #16]
 800dfc4:	e02e      	b.n	800e024 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
 800dfc6:	bf00      	nop
 800dfc8:	08023944 	.word	0x08023944
 800dfcc:	0802396c 	.word	0x0802396c
 800dfd0:	08023998 	.word	0x08023998
 800dfd4:	080239c4 	.word	0x080239c4
 800dfd8:	08023a50 	.word	0x08023a50
 800dfdc:	08023a7c 	.word	0x08023a7c
 800dfe0:	08023aa8 	.word	0x08023aa8
 800dfe4:	080239f0 	.word	0x080239f0
 800dfe8:	08023a20 	.word	0x08023a20
        for (wIndex = 0U; wIndex < wShadowCount; ++wIndex)
 800dfec:	8afb      	ldrh	r3, [r7, #22]
 800dfee:	3301      	adds	r3, #1
 800dff0:	82fb      	strh	r3, [r7, #22]
 800dff2:	8afa      	ldrh	r2, [r7, #22]
 800dff4:	8b7b      	ldrh	r3, [r7, #26]
 800dff6:	429a      	cmp	r2, r3
 800dff8:	d3ad      	bcc.n	800df56 <phhalHw_Pn5180_ApplyProtocolSettings+0x2b6>
            }
        }

        pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TXDATARATE_FRAMING] = wTxDatarate;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	8aba      	ldrh	r2, [r7, #20]
 800dffe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        pDataParams->wCfgShadow[PHHAL_HW_CONFIG_RXDATARATE_FRAMING] = wRxDatarate;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	8a7a      	ldrh	r2, [r7, #18]
 800e006:	f8a3 206c 	strh.w	r2, [r3, #108]	@ 0x6c

    }

    /* MIFARE Classic contactless IC Crypto 1 state is disabled by default */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams, PHHAL_HW_CONFIG_DISABLE_MF_CRYPTO1, PH_ON));
 800e00a:	2201      	movs	r2, #1
 800e00c:	212e      	movs	r1, #46	@ 0x2e
 800e00e:	6878      	ldr	r0, [r7, #4]
 800e010:	f000 fbc2 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 800e014:	4603      	mov	r3, r0
 800e016:	823b      	strh	r3, [r7, #16]
 800e018:	8a3b      	ldrh	r3, [r7, #16]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d001      	beq.n	800e022 <phhalHw_Pn5180_ApplyProtocolSettings+0x382>
 800e01e:	8a3b      	ldrh	r3, [r7, #16]
 800e020:	e000      	b.n	800e024 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>

    return PH_ERR_SUCCESS;
 800e022:	2300      	movs	r3, #0
}
 800e024:	4618      	mov	r0, r3
 800e026:	3720      	adds	r7, #32
 800e028:	46bd      	mov	sp, r7
 800e02a:	bd80      	pop	{r7, pc}

0800e02c <phhalHw_Pn5180_Exchange>:
    uint8_t * pTxBuffer,
    uint16_t wTxLength,
    uint8_t ** ppRxBuffer,
    uint16_t * pRxLength
    )
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b090      	sub	sp, #64	@ 0x40
 800e030:	af02      	add	r7, sp, #8
 800e032:	60f8      	str	r0, [r7, #12]
 800e034:	607a      	str	r2, [r7, #4]
 800e036:	461a      	mov	r2, r3
 800e038:	460b      	mov	r3, r1
 800e03a:	817b      	strh	r3, [r7, #10]
 800e03c:	4613      	mov	r3, r2
 800e03e:	813b      	strh	r3, [r7, #8]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 800e040:	2300      	movs	r3, #0
 800e042:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    uint8_t *   PH_MEMLOC_REM pTmpBuffer = NULL;
 800e044:	2300      	movs	r3, #0
 800e046:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0U;
 800e048:	2300      	movs	r3, #0
 800e04a:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t    PH_MEMLOC_REM wTmpBufferSize = 0U;
 800e04c:	2300      	movs	r3, #0
 800e04e:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint32_t    PH_MEMLOC_REM dwIrqWaitFor = 0U;
 800e050:	2300      	movs	r3, #0
 800e052:	633b      	str	r3, [r7, #48]	@ 0x30
    uint32_t    PH_MEMLOC_REM dwValue;
    uint16_t    PH_MEMLOC_REM bNumExpBytes;
    uint8_t     PH_MEMLOC_REM pReceivedData[1];
    uint16_t    PH_MEMLOC_REM wDataLenTmp;
    uint8_t     PH_MEMLOC_REM aCrc[2] = {0,0};
 800e054:	2300      	movs	r3, #0
 800e056:	833b      	strh	r3, [r7, #24]
    phOsal_EventBits_t PH_MEMLOC_REM dwEventFlags;
    uint32_t    PH_MEMLOC_REM dwRegister = 0;
 800e058:	2300      	movs	r3, #0
 800e05a:	613b      	str	r3, [r7, #16]

    /* Check all the pointers */
    if (0U != (wTxLength)) PH_ASSERT_NULL_PARAM(pTxBuffer, PH_COMP_HAL);
 800e05c:	893b      	ldrh	r3, [r7, #8]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d005      	beq.n	800e06e <phhalHw_Pn5180_Exchange+0x42>
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d102      	bne.n	800e06e <phhalHw_Pn5180_Exchange+0x42>
 800e068:	f240 2321 	movw	r3, #545	@ 0x221
 800e06c:	e253      	b.n	800e516 <phhalHw_Pn5180_Exchange+0x4ea>

    /*bTransmited is a flag which is used to identify if a transmit is followed by a receive.
    If any other api follows a transmit, then it should be reset */
    pDataParams->bTransmited = PH_OFF;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	2200      	movs	r2, #0
 800e072:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    do
    {
        if (pDataParams->wTargetMode != PH_OFF)
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d003      	beq.n	800e086 <phhalHw_Pn5180_Exchange+0x5a>
        {
            /* If wTargetMode is changed then Target is activated and Exchange should not be used to perform Tx Operation. */
            statusTmp = (PH_ERR_USE_CONDITION | PH_COMP_HAL);
 800e07e:	f240 2325 	movw	r3, #549	@ 0x225
 800e082:	86fb      	strh	r3, [r7, #54]	@ 0x36
            break;
 800e084:	e1cf      	b.n	800e426 <phhalHw_Pn5180_Exchange+0x3fa>
        }
        /* Check options */
        if (0U != (wOption & (uint16_t)~(uint16_t)(PH_EXCHANGE_BUFFERED_BIT | PH_EXCHANGE_LEAVE_BUFFER_BIT)))
 800e086:	897b      	ldrh	r3, [r7, #10]
 800e088:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d003      	beq.n	800e098 <phhalHw_Pn5180_Exchange+0x6c>
        {
            statusTmp = (PH_ERR_INVALID_PARAMETER | PH_COMP_HAL);
 800e090:	f240 2321 	movw	r3, #545	@ 0x221
 800e094:	86fb      	strh	r3, [r7, #54]	@ 0x36
            break;
 800e096:	e1c6      	b.n	800e426 <phhalHw_Pn5180_Exchange+0x3fa>
        }

        /* Validate input parameters. */
        if (((ppRxBuffer == NULL) || (pRxLength == NULL)) && ((wOption & PH_EXCHANGE_BUFFERED_BIT) == 0U))
 800e098:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d002      	beq.n	800e0a4 <phhalHw_Pn5180_Exchange+0x78>
 800e09e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d107      	bne.n	800e0b4 <phhalHw_Pn5180_Exchange+0x88>
 800e0a4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	db03      	blt.n	800e0b4 <phhalHw_Pn5180_Exchange+0x88>
        {
            statusTmp = (PH_ERR_INVALID_PARAMETER | PH_COMP_HAL);
 800e0ac:	f240 2321 	movw	r3, #545	@ 0x221
 800e0b0:	86fb      	strh	r3, [r7, #54]	@ 0x36
            break;
 800e0b2:	e1b8      	b.n	800e426 <phhalHw_Pn5180_Exchange+0x3fa>
        }

        if (pDataParams->bActiveMode == PH_OFF)
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d115      	bne.n	800e0ea <phhalHw_Pn5180_Exchange+0xbe>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegister(pDataParams, RF_STATUS, &dwRegister));
 800e0be:	f107 0310 	add.w	r3, r7, #16
 800e0c2:	461a      	mov	r2, r3
 800e0c4:	211d      	movs	r1, #29
 800e0c6:	68f8      	ldr	r0, [r7, #12]
 800e0c8:	f003 fbe8 	bl	801189c <phhalHw_Pn5180_Instr_ReadRegister>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800e0d0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d001      	beq.n	800e0da <phhalHw_Pn5180_Exchange+0xae>
 800e0d6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e0d8:	e21d      	b.n	800e516 <phhalHw_Pn5180_Exchange+0x4ea>

            if((dwRegister & RF_STATUS_TX_RF_STATUS_MASK ) == 0U)
 800e0da:	693b      	ldr	r3, [r7, #16]
 800e0dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d102      	bne.n	800e0ea <phhalHw_Pn5180_Exchange+0xbe>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_RF_ERROR, PH_COMP_HAL);
 800e0e4:	f240 230a 	movw	r3, #522	@ 0x20a
 800e0e8:	e215      	b.n	800e516 <phhalHw_Pn5180_Exchange+0x4ea>
            }
        }

        /* retrieve transmit buffer */
        PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_GetTxBuffer(pDataParams, PH_ON, &pTmpBuffer, &wTmpBufferLen, &wTmpBufferSize));
 800e0ea:	f107 0126 	add.w	r1, r7, #38	@ 0x26
 800e0ee:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800e0f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e0f6:	9300      	str	r3, [sp, #0]
 800e0f8:	460b      	mov	r3, r1
 800e0fa:	2101      	movs	r1, #1
 800e0fc:	68f8      	ldr	r0, [r7, #12]
 800e0fe:	f004 f98a 	bl	8012416 <phhalHw_Pn5180_GetTxBuffer>
 800e102:	4603      	mov	r3, r0
 800e104:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800e106:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e108:	2b00      	cmp	r3, #0
 800e10a:	f040 818c 	bne.w	800e426 <phhalHw_Pn5180_Exchange+0x3fa>

        /* clear internal buffer if requested */
        if ((0U == ((wOption & PH_EXCHANGE_LEAVE_BUFFER_BIT))))
 800e10e:	897b      	ldrh	r3, [r7, #10]
 800e110:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e114:	2b00      	cmp	r3, #0
 800e116:	d105      	bne.n	800e124 <phhalHw_Pn5180_Exchange+0xf8>
        {
            pDataParams->wTxBufLen = 0U;
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	2200      	movs	r2, #0
 800e11c:	825a      	strh	r2, [r3, #18]
            pDataParams->wTxBufStartPos = 0U;
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	2200      	movs	r2, #0
 800e122:	839a      	strh	r2, [r3, #28]
        }

        /* Validate received parameter */
        if (pRxLength != NULL)
 800e124:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e126:	2b00      	cmp	r3, #0
 800e128:	d002      	beq.n	800e130 <phhalHw_Pn5180_Exchange+0x104>
        {
            *pRxLength = 0U;
 800e12a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e12c:	2200      	movs	r2, #0
 800e12e:	801a      	strh	r2, [r3, #0]
        }

        if(pDataParams->bJewelActivated == PH_ON)
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e136:	2b01      	cmp	r3, #1
 800e138:	d150      	bne.n	800e1dc <phhalHw_Pn5180_Exchange+0x1b0>
        {
            wOption = PH_EXCHANGE_DEFAULT;
 800e13a:	2300      	movs	r3, #0
 800e13c:	817b      	strh	r3, [r7, #10]

            /*Enable Crc_B for the data to be transmitted */
            /*PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask( pDataParams, CRC_TX_CONFIG, CRC_TX_CONFIG_TX_CRC_BYTE2_ENABLE_MASK));*/

            /*Compute Crc_B for the data to be transmitted */
            PH_CHECK_FAILURE_FCT(statusTmp, phTools_ComputeCrc_B(pTxBuffer, wTxLength, aCrc));
 800e13e:	893b      	ldrh	r3, [r7, #8]
 800e140:	f107 0218 	add.w	r2, r7, #24
 800e144:	4619      	mov	r1, r3
 800e146:	6878      	ldr	r0, [r7, #4]
 800e148:	f7f9 fda3 	bl	8007c92 <phTools_ComputeCrc_B>
 800e14c:	4603      	mov	r3, r0
 800e14e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800e150:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e152:	2b00      	cmp	r3, #0
 800e154:	f040 8167 	bne.w	800e426 <phhalHw_Pn5180_Exchange+0x3fa>
            /* Turn OFF the parity, by default shadow it is ON */
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_PARITY, PH_OFF));
 800e158:	2200      	movs	r2, #0
 800e15a:	2100      	movs	r1, #0
 800e15c:	68f8      	ldr	r0, [r7, #12]
 800e15e:	f000 fb1b 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 800e162:	4603      	mov	r3, r0
 800e164:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800e166:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e168:	2b00      	cmp	r3, #0
 800e16a:	f040 815c 	bne.w	800e426 <phhalHw_Pn5180_Exchange+0x3fa>

            /* Make sure CRC is OFF */
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_TXCRC, PH_OFF));
 800e16e:	2200      	movs	r2, #0
 800e170:	2101      	movs	r1, #1
 800e172:	68f8      	ldr	r0, [r7, #12]
 800e174:	f000 fb10 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 800e178:	4603      	mov	r3, r0
 800e17a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800e17c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e17e:	2b00      	cmp	r3, #0
 800e180:	f040 8151 	bne.w	800e426 <phhalHw_Pn5180_Exchange+0x3fa>
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_RXCRC, PH_OFF));
 800e184:	2200      	movs	r2, #0
 800e186:	2102      	movs	r1, #2
 800e188:	68f8      	ldr	r0, [r7, #12]
 800e18a:	f000 fb05 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 800e18e:	4603      	mov	r3, r0
 800e190:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800e192:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e194:	2b00      	cmp	r3, #0
 800e196:	f040 8146 	bne.w	800e426 <phhalHw_Pn5180_Exchange+0x3fa>
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_TXLASTBITS, 7U));
 800e19a:	2207      	movs	r2, #7
 800e19c:	2103      	movs	r1, #3
 800e19e:	68f8      	ldr	r0, [r7, #12]
 800e1a0:	f000 fafa 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800e1a8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	f040 813b 	bne.w	800e426 <phhalHw_Pn5180_Exchange+0x3fa>

            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask( pDataParams, TRANSCEIVER_CONFIG, TRANSCEIVER_CONFIG_TX_FRAMESTEP_ENABLE_MASK));
 800e1b0:	2204      	movs	r2, #4
 800e1b2:	2104      	movs	r1, #4
 800e1b4:	68f8      	ldr	r0, [r7, #12]
 800e1b6:	f003 f9d3 	bl	8011560 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800e1be:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	f040 8130 	bne.w	800e426 <phhalHw_Pn5180_Exchange+0x3fa>
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_TXWAIT_US,29));
 800e1c6:	221d      	movs	r2, #29
 800e1c8:	2107      	movs	r1, #7
 800e1ca:	68f8      	ldr	r0, [r7, #12]
 800e1cc:	f000 fae4 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800e1d4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	f040 8125 	bne.w	800e426 <phhalHw_Pn5180_Exchange+0x3fa>
        }

        if ((pDataParams->wTxBufStartPos == 0U))
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	8b9b      	ldrh	r3, [r3, #28]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d122      	bne.n	800e22a <phhalHw_Pn5180_Exchange+0x1fe>
        {
            pTmpBuffer[pDataParams->wTxBufStartPos++] = PHHAL_HW_PN5180_SET_INSTR_SEND_DATA; /* Reserved 0th Location of buffer for Command code */
 800e1e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	8b9b      	ldrh	r3, [r3, #28]
 800e1ea:	1c59      	adds	r1, r3, #1
 800e1ec:	b288      	uxth	r0, r1
 800e1ee:	68f9      	ldr	r1, [r7, #12]
 800e1f0:	8388      	strh	r0, [r1, #28]
 800e1f2:	4413      	add	r3, r2
 800e1f4:	2209      	movs	r2, #9
 800e1f6:	701a      	strb	r2, [r3, #0]
            pTmpBuffer[pDataParams->wTxBufStartPos++] = 0U; /* Reserved 1st Location of buffer for Command code */
 800e1f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	8b9b      	ldrh	r3, [r3, #28]
 800e1fe:	1c59      	adds	r1, r3, #1
 800e200:	b288      	uxth	r0, r1
 800e202:	68f9      	ldr	r1, [r7, #12]
 800e204:	8388      	strh	r0, [r1, #28]
 800e206:	4413      	add	r3, r2
 800e208:	2200      	movs	r2, #0
 800e20a:	701a      	strb	r2, [r3, #0]

            /* Prepend Start Byte (0xF0U) in Passive 106kbps during NFCIP exchange. */
#ifndef PN5180_P2P_HW_SYNC_BYTE
            if (pDataParams->bNfcipMode == PH_ON)
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e212:	2b01      	cmp	r3, #1
 800e214:	d109      	bne.n	800e22a <phhalHw_Pn5180_Exchange+0x1fe>
            {
                /* Prepend Start Byte 0xF0U in case of Passive Communication at 106kbps BaudRate */
                pTmpBuffer[pDataParams->wTxBufStartPos++] = 0xF0U;
 800e216:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	8b9b      	ldrh	r3, [r3, #28]
 800e21c:	1c59      	adds	r1, r3, #1
 800e21e:	b288      	uxth	r0, r1
 800e220:	68f9      	ldr	r1, [r7, #12]
 800e222:	8388      	strh	r0, [r1, #28]
 800e224:	4413      	add	r3, r2
 800e226:	22f0      	movs	r2, #240	@ 0xf0
 800e228:	701a      	strb	r2, [r3, #0]
            }
#endif
        }

        if (wTxLength != 0U)
 800e22a:	893b      	ldrh	r3, [r7, #8]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d03d      	beq.n	800e2ac <phhalHw_Pn5180_Exchange+0x280>
        {
            /* check wTmpBufferSize fill all the required data to be transmitted */
            if (wTmpBufferSize < (wTxLength + pDataParams->wTxBufLen + pDataParams->wTxBufStartPos))
 800e230:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e232:	4619      	mov	r1, r3
 800e234:	893b      	ldrh	r3, [r7, #8]
 800e236:	68fa      	ldr	r2, [r7, #12]
 800e238:	8a52      	ldrh	r2, [r2, #18]
 800e23a:	4413      	add	r3, r2
 800e23c:	68fa      	ldr	r2, [r7, #12]
 800e23e:	8b92      	ldrh	r2, [r2, #28]
 800e240:	4413      	add	r3, r2
 800e242:	4299      	cmp	r1, r3
 800e244:	da09      	bge.n	800e25a <phhalHw_Pn5180_Exchange+0x22e>
            {
                /* Can't fit in the HAL buffer what we are trying to send */
                pDataParams->wTxBufLen = 0U;
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	2200      	movs	r2, #0
 800e24a:	825a      	strh	r2, [r3, #18]
                pDataParams->wTxBufStartPos = 0U;
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	2200      	movs	r2, #0
 800e250:	839a      	strh	r2, [r3, #28]
                statusTmp = (PH_ERR_BUFFER_OVERFLOW | PH_COMP_HAL);
 800e252:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800e256:	86fb      	strh	r3, [r7, #54]	@ 0x36
                break;
 800e258:	e0e5      	b.n	800e426 <phhalHw_Pn5180_Exchange+0x3fa>
            }

            /* copy data */
            (void)memcpy(&pTmpBuffer[pDataParams->wTxBufStartPos + pDataParams->wTxBufLen], pTxBuffer, wTxLength);
 800e25a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e25c:	68fa      	ldr	r2, [r7, #12]
 800e25e:	8b92      	ldrh	r2, [r2, #28]
 800e260:	4611      	mov	r1, r2
 800e262:	68fa      	ldr	r2, [r7, #12]
 800e264:	8a52      	ldrh	r2, [r2, #18]
 800e266:	440a      	add	r2, r1
 800e268:	4413      	add	r3, r2
 800e26a:	893a      	ldrh	r2, [r7, #8]
 800e26c:	6879      	ldr	r1, [r7, #4]
 800e26e:	4618      	mov	r0, r3
 800e270:	f012 fb8f 	bl	8020992 <memcpy>
            pDataParams->wTxBufLen += wTxLength;
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	8a5a      	ldrh	r2, [r3, #18]
 800e278:	893b      	ldrh	r3, [r7, #8]
 800e27a:	4413      	add	r3, r2
 800e27c:	b29a      	uxth	r2, r3
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	825a      	strh	r2, [r3, #18]

            if(pDataParams->bJewelActivated == PH_ON)
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e288:	2b01      	cmp	r3, #1
 800e28a:	d10f      	bne.n	800e2ac <phhalHw_Pn5180_Exchange+0x280>
            {
                (void)memcpy(&pTmpBuffer[pDataParams->wTxBufStartPos + pDataParams->wTxBufLen], aCrc, 2U);
 800e28c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e28e:	68fa      	ldr	r2, [r7, #12]
 800e290:	8b92      	ldrh	r2, [r2, #28]
 800e292:	4611      	mov	r1, r2
 800e294:	68fa      	ldr	r2, [r7, #12]
 800e296:	8a52      	ldrh	r2, [r2, #18]
 800e298:	440a      	add	r2, r1
 800e29a:	4413      	add	r3, r2
 800e29c:	8b3a      	ldrh	r2, [r7, #24]
 800e29e:	801a      	strh	r2, [r3, #0]
                pDataParams->wTxBufLen += 2U;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	8a5b      	ldrh	r3, [r3, #18]
 800e2a4:	3302      	adds	r3, #2
 800e2a6:	b29a      	uxth	r2, r3
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	825a      	strh	r2, [r3, #18]
            }
        }

        wTxLength = 0U;
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	813b      	strh	r3, [r7, #8]

        if (0U != (wOption & PH_EXCHANGE_BUFFERED_BIT ))
 800e2b0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	da01      	bge.n	800e2bc <phhalHw_Pn5180_Exchange+0x290>
        {
            return PH_ERR_SUCCESS;
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	e12c      	b.n	800e516 <phhalHw_Pn5180_Exchange+0x4ea>
        }

        pDataParams->wTxBufLen += pDataParams->wTxBufStartPos;
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	8a5a      	ldrh	r2, [r3, #18]
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	8b9b      	ldrh	r3, [r3, #28]
 800e2c4:	4413      	add	r3, r2
 800e2c6:	b29a      	uxth	r2, r3
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	825a      	strh	r2, [r3, #18]

        /* Check for maximum bytes that can be sent to IC */
        if(pDataParams->wTxBufLen > 0x106U)
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	8a5b      	ldrh	r3, [r3, #18]
 800e2d0:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 800e2d4:	d903      	bls.n	800e2de <phhalHw_Pn5180_Exchange+0x2b2>
        {
            /*PN5180 TxBuffer is 262 bytes including 2 byte command header*/
            statusTmp = (PH_ERR_BUFFER_OVERFLOW | PH_COMP_HAL);
 800e2d6:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800e2da:	86fb      	strh	r3, [r7, #54]	@ 0x36
            break;
 800e2dc:	e0a3      	b.n	800e426 <phhalHw_Pn5180_Exchange+0x3fa>
        }

        /*Execute the Tranceive Command*/
        PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Int_LoadCommand(pDataParams, PHHAL_HW_PN5180_SYSTEM_TRANSEIVE_CMD));
 800e2de:	2103      	movs	r1, #3
 800e2e0:	68f8      	ldr	r0, [r7, #12]
 800e2e2:	f005 fccd 	bl	8013c80 <phhalHw_Pn5180_Int_LoadCommand>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800e2ea:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	f040 809a 	bne.w	800e426 <phhalHw_Pn5180_Exchange+0x3fa>

        /*Set wait IRQ */
        if(pDataParams->bRxMultiple == PH_ON)
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e2f8:	2b01      	cmp	r3, #1
 800e2fa:	d103      	bne.n	800e304 <phhalHw_Pn5180_Exchange+0x2d8>
        {
            dwIrqWaitFor =  IRQ_STATUS_TIMER1_IRQ_MASK | IRQ_STATUS_GENERAL_ERROR_IRQ_MASK;
 800e2fc:	f44f 3304 	mov.w	r3, #135168	@ 0x21000
 800e300:	633b      	str	r3, [r7, #48]	@ 0x30
 800e302:	e001      	b.n	800e308 <phhalHw_Pn5180_Exchange+0x2dc>
        }
        else
        {
            dwIrqWaitFor =  IRQ_STATUS_RX_IRQ_MASK | IRQ_STATUS_TIMER1_IRQ_MASK | IRQ_STATUS_GENERAL_ERROR_IRQ_MASK;
 800e304:	4b86      	ldr	r3, [pc, #536]	@ (800e520 <phhalHw_Pn5180_Exchange+0x4f4>)
 800e306:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        if (pDataParams->bActiveMode == PH_ON)
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e30e:	2b01      	cmp	r3, #1
 800e310:	d103      	bne.n	800e31a <phhalHw_Pn5180_Exchange+0x2ee>
        {
            dwIrqWaitFor |= IRQ_STATUS_RF_ACTIVE_ERROR_IRQ_MASK | IRQ_STATUS_RFOFF_DET_IRQ_MASK;
 800e312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e314:	f443 6388 	orr.w	r3, r3, #1088	@ 0x440
 800e318:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        /* Clear Interrupts  */
        PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, PHHAL_HW_PN5180_IRQ_SET_CLEAR_ALL_MASK));
 800e31a:	4a82      	ldr	r2, [pc, #520]	@ (800e524 <phhalHw_Pn5180_Exchange+0x4f8>)
 800e31c:	2103      	movs	r1, #3
 800e31e:	68f8      	ldr	r0, [r7, #12]
 800e320:	f003 f8a8 	bl	8011474 <phhalHw_Pn5180_Instr_WriteRegister>
 800e324:	4603      	mov	r3, r0
 800e326:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800e328:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d17b      	bne.n	800e426 <phhalHw_Pn5180_Exchange+0x3fa>

        (void)phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL);
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 800e334:	2300      	movs	r3, #0
 800e336:	2201      	movs	r2, #1
 800e338:	2100      	movs	r1, #0
 800e33a:	f00c fa37 	bl	801a7ac <phOsal_EventClear>

        /* Enable IRQ sources */
        PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_ENABLE, dwIrqWaitFor));
 800e33e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e340:	2101      	movs	r1, #1
 800e342:	68f8      	ldr	r0, [r7, #12]
 800e344:	f003 f896 	bl	8011474 <phhalHw_Pn5180_Instr_WriteRegister>
 800e348:	4603      	mov	r3, r0
 800e34a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800e34c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d169      	bne.n	800e426 <phhalHw_Pn5180_Exchange+0x3fa>

        /* Configure T1 */
        if(pDataParams->bRxMultiple == PH_ON)
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e358:	2b01      	cmp	r3, #1
 800e35a:	d116      	bne.n	800e38a <phhalHw_Pn5180_Exchange+0x35e>
        {
            dwValue = (TIMER1_CONFIG_T1_START_ON_TX_ENDED_MASK | TIMER1_CONFIG_T1_ENABLE_MASK);
 800e35c:	f640 0301 	movw	r3, #2049	@ 0x801
 800e360:	623b      	str	r3, [r7, #32]
            if(pDataParams->bTimeoutUnit == PHHAL_HW_TIME_MILLISECONDS)
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e368:	2b01      	cmp	r3, #1
 800e36a:	d103      	bne.n	800e374 <phhalHw_Pn5180_Exchange+0x348>
            {
                dwValue |=PHHAL_HW_PN5180_MS_TIMEOUT_PRESCALAR;
 800e36c:	6a3b      	ldr	r3, [r7, #32]
 800e36e:	f043 033c 	orr.w	r3, r3, #60	@ 0x3c
 800e372:	623b      	str	r3, [r7, #32]
            }
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TIMER1_CONFIG, dwValue));
 800e374:	6a3b      	ldr	r3, [r7, #32]
 800e376:	461a      	mov	r2, r3
 800e378:	210f      	movs	r1, #15
 800e37a:	68f8      	ldr	r0, [r7, #12]
 800e37c:	f003 f87a 	bl	8011474 <phhalHw_Pn5180_Instr_WriteRegister>
 800e380:	4603      	mov	r3, r0
 800e382:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800e384:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e386:	2b00      	cmp	r3, #0
 800e388:	d14d      	bne.n	800e426 <phhalHw_Pn5180_Exchange+0x3fa>
        }
        if ((pDataParams->bOpeMode != RD_LIB_MODE_EMVCO) && (pDataParams->bRxMultiple == PH_OFF))
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800e390:	2b01      	cmp	r3, #1
 800e392:	d01a      	beq.n	800e3ca <phhalHw_Pn5180_Exchange+0x39e>
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d115      	bne.n	800e3ca <phhalHw_Pn5180_Exchange+0x39e>
        {
            dwValue = (TIMER1_CONFIG_T1_START_ON_TX_ENDED_MASK | TIMER1_CONFIG_T1_STOP_ON_RX_STARTED_MASK | TIMER1_CONFIG_T1_ENABLE_MASK);
 800e39e:	4b62      	ldr	r3, [pc, #392]	@ (800e528 <phhalHw_Pn5180_Exchange+0x4fc>)
 800e3a0:	623b      	str	r3, [r7, #32]
            if(pDataParams->bTimeoutUnit == PHHAL_HW_TIME_MILLISECONDS)
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e3a8:	2b01      	cmp	r3, #1
 800e3aa:	d103      	bne.n	800e3b4 <phhalHw_Pn5180_Exchange+0x388>
            {
                dwValue |=PHHAL_HW_PN5180_MS_TIMEOUT_PRESCALAR;
 800e3ac:	6a3b      	ldr	r3, [r7, #32]
 800e3ae:	f043 033c 	orr.w	r3, r3, #60	@ 0x3c
 800e3b2:	623b      	str	r3, [r7, #32]
            }
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TIMER1_CONFIG, dwValue ));
 800e3b4:	6a3b      	ldr	r3, [r7, #32]
 800e3b6:	461a      	mov	r2, r3
 800e3b8:	210f      	movs	r1, #15
 800e3ba:	68f8      	ldr	r0, [r7, #12]
 800e3bc:	f003 f85a 	bl	8011474 <phhalHw_Pn5180_Instr_WriteRegister>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800e3c4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d12d      	bne.n	800e426 <phhalHw_Pn5180_Exchange+0x3fa>
        }

        *(pTmpBuffer+1U) = (uint8_t)pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TXLASTBITS];
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	f8b3 205e 	ldrh.w	r2, [r3, #94]	@ 0x5e
 800e3d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3d2:	3301      	adds	r3, #1
 800e3d4:	b2d2      	uxtb	r2, r2
 800e3d6:	701a      	strb	r2, [r3, #0]

        /* No Response expected*/
        bNumExpBytes = 0U;
 800e3d8:	2300      	movs	r3, #0
 800e3da:	85fb      	strh	r3, [r7, #46]	@ 0x2e

        /* During Active Communication mode if internal RF Field is not ON before transmit then Switch ON the RF Field. */
        if (pDataParams->bActiveMode)
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d01f      	beq.n	800e426 <phhalHw_Pn5180_Exchange+0x3fa>
        {
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegister(pDataParams, RF_STATUS, &dwValue));
 800e3e6:	f107 0320 	add.w	r3, r7, #32
 800e3ea:	461a      	mov	r2, r3
 800e3ec:	211d      	movs	r1, #29
 800e3ee:	68f8      	ldr	r0, [r7, #12]
 800e3f0:	f003 fa54 	bl	801189c <phhalHw_Pn5180_Instr_ReadRegister>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800e3f8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d113      	bne.n	800e426 <phhalHw_Pn5180_Exchange+0x3fa>
            if ((0U == ((dwValue & RF_STATUS_TX_RF_STATUS_MASK))))
 800e3fe:	6a3b      	ldr	r3, [r7, #32]
 800e400:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e404:	2b00      	cmp	r3, #0
 800e406:	d10e      	bne.n	800e426 <phhalHw_Pn5180_Exchange+0x3fa>
            {
                /* field is turned ON */
                PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_FieldOff(pDataParams));
 800e408:	68f8      	ldr	r0, [r7, #12]
 800e40a:	f000 f8e7 	bl	800e5dc <phhalHw_Pn5180_FieldOff>
 800e40e:	4603      	mov	r3, r0
 800e410:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800e412:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e414:	2b00      	cmp	r3, #0
 800e416:	d106      	bne.n	800e426 <phhalHw_Pn5180_Exchange+0x3fa>
                PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_FieldOn(pDataParams));
 800e418:	68f8      	ldr	r0, [r7, #12]
 800e41a:	f000 f889 	bl	800e530 <phhalHw_Pn5180_FieldOn>
 800e41e:	4603      	mov	r3, r0
 800e420:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800e422:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e424:	2b00      	cmp	r3, #0
            }
        }
    }while(FALSE);

    if (pDataParams->bPollGuardTimeFlag == PH_ON)
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e42c:	2b01      	cmp	r3, #1
 800e42e:	d120      	bne.n	800e472 <phhalHw_Pn5180_Exchange+0x446>
    {
        pDataParams->bPollGuardTimeFlag = PH_OFF;
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	2200      	movs	r2, #0
 800e434:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        /* When there is no errors in preconditions wait till timer expire. */
        if (statusTmp == PH_ERR_SUCCESS)
 800e438:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d110      	bne.n	800e460 <phhalHw_Pn5180_Exchange+0x434>
        {
            /* Wait infinitely for the Poll Guard Time to Expire. */
            (void)phOsal_EventPend(&xEventHandle, (phOsal_EventOpt_t)(E_OS_EVENT_OPT_PEND_SET_ANY | E_OS_EVENT_OPT_PEND_CLEAR_ON_EXIT),
 800e43e:	f107 0314 	add.w	r3, r7, #20
 800e442:	9300      	str	r3, [sp, #0]
 800e444:	2322      	movs	r3, #34	@ 0x22
 800e446:	f04f 32ff 	mov.w	r2, #4294967295
 800e44a:	2105      	movs	r1, #5
 800e44c:	4837      	ldr	r0, [pc, #220]	@ (800e52c <phhalHw_Pn5180_Exchange+0x500>)
 800e44e:	f00c f92b 	bl	801a6a8 <phOsal_EventPend>
                    PHOSAL_MAX_DELAY, E_PH_OSAL_EVT_GT_EXP | E_PH_OSAL_EVT_ABORT, &dwEventFlags);
            if(0U != (dwEventFlags & E_PH_OSAL_EVT_ABORT))
 800e452:	697b      	ldr	r3, [r7, #20]
 800e454:	f003 0320 	and.w	r3, r3, #32
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d001      	beq.n	800e460 <phhalHw_Pn5180_Exchange+0x434>
            {
                statusTmp = PH_ERR_ABORTED;
 800e45c:	2312      	movs	r3, #18
 800e45e:	86fb      	strh	r3, [r7, #54]	@ 0x36
            }
        }

        /* Disable Timer */
        PH_CHECK_SUCCESS_FCT(status, phDriver_TimerStop());
 800e460:	f00b ffc8 	bl	801a3f4 <phDriver_TimerStop>
 800e464:	4603      	mov	r3, r0
 800e466:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800e468:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d001      	beq.n	800e472 <phhalHw_Pn5180_Exchange+0x446>
 800e46e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800e470:	e051      	b.n	800e516 <phhalHw_Pn5180_Exchange+0x4ea>
    }

    if (statusTmp != PH_ERR_SUCCESS)
 800e472:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e474:	2b00      	cmp	r3, #0
 800e476:	d001      	beq.n	800e47c <phhalHw_Pn5180_Exchange+0x450>
    {
        return statusTmp;
 800e478:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e47a:	e04c      	b.n	800e516 <phhalHw_Pn5180_Exchange+0x4ea>
    }

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 800e47c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	8a5a      	ldrh	r2, [r3, #18]
 800e482:	8df8      	ldrh	r0, [r7, #46]	@ 0x2e
 800e484:	f107 031a 	add.w	r3, r7, #26
 800e488:	9301      	str	r3, [sp, #4]
 800e48a:	f107 031c 	add.w	r3, r7, #28
 800e48e:	9300      	str	r3, [sp, #0]
 800e490:	4603      	mov	r3, r0
 800e492:	68f8      	ldr	r0, [r7, #12]
 800e494:	f002 f8d0 	bl	8010638 <phhalHw_Pn5180_BalExchange>
 800e498:	4603      	mov	r3, r0
 800e49a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800e49c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d001      	beq.n	800e4a6 <phhalHw_Pn5180_Exchange+0x47a>
 800e4a2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e4a4:	e037      	b.n	800e516 <phhalHw_Pn5180_Exchange+0x4ea>
        bNumExpBytes,
        pReceivedData,
        &wDataLenTmp));

    /* Reset for the next transaction */
    pDataParams->wTxBufStartPos = 0U;
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	839a      	strh	r2, [r3, #28]
    pDataParams->wTxBufLen = 0U;
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	825a      	strh	r2, [r3, #18]

    /* Reset TxLastBits */
    if (pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TXLASTBITS] != 0U)
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d00b      	beq.n	800e4d4 <phhalHw_Pn5180_Exchange+0x4a8>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_TXLASTBITS, 0x00U));
 800e4bc:	2200      	movs	r2, #0
 800e4be:	2103      	movs	r1, #3
 800e4c0:	68f8      	ldr	r0, [r7, #12]
 800e4c2:	f000 f969 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800e4ca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d001      	beq.n	800e4d4 <phhalHw_Pn5180_Exchange+0x4a8>
 800e4d0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e4d2:	e020      	b.n	800e516 <phhalHw_Pn5180_Exchange+0x4ea>
    }

    status  = phhalHw_Pn5180_Receive_Int(pDataParams,dwIrqWaitFor,ppRxBuffer,pRxLength,PH_ON);
 800e4d4:	2301      	movs	r3, #1
 800e4d6:	9300      	str	r3, [sp, #0]
 800e4d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e4da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e4dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e4de:	68f8      	ldr	r0, [r7, #12]
 800e4e0:	f005 f94c 	bl	801377c <phhalHw_Pn5180_Receive_Int>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    if( (status & PH_ERR_MASK) != PH_ERR_SUCCESS)
 800e4e8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800e4ea:	b2db      	uxtb	r3, r3
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d004      	beq.n	800e4fa <phhalHw_Pn5180_Exchange+0x4ce>
    {
        /*load idle command*/
        statusTmp = phhalHw_Pn5180_Int_IdleCommand(pDataParams);
 800e4f0:	68f8      	ldr	r0, [r7, #12]
 800e4f2:	f005 fba3 	bl	8013c3c <phhalHw_Pn5180_Int_IdleCommand>
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	86fb      	strh	r3, [r7, #54]	@ 0x36
    }

    if (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO)
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800e500:	2b01      	cmp	r3, #1
 800e502:	d007      	beq.n	800e514 <phhalHw_Pn5180_Exchange+0x4e8>
    {
        statusTmp = phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, TIMER1_CONFIG, (uint32_t)(~TIMER1_CONFIG_T1_ENABLE_MASK));
 800e504:	f06f 0201 	mvn.w	r2, #1
 800e508:	210f      	movs	r1, #15
 800e50a:	68f8      	ldr	r0, [r7, #12]
 800e50c:	f003 f89e 	bl	801164c <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800e510:	4603      	mov	r3, r0
 800e512:	86fb      	strh	r3, [r7, #54]	@ 0x36
    }

    return status;
 800e514:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
}
 800e516:	4618      	mov	r0, r3
 800e518:	3738      	adds	r7, #56	@ 0x38
 800e51a:	46bd      	mov	sp, r7
 800e51c:	bd80      	pop	{r7, pc}
 800e51e:	bf00      	nop
 800e520:	00021001 	.word	0x00021001
 800e524:	000fffff 	.word	0x000fffff
 800e528:	00100801 	.word	0x00100801
 800e52c:	20001be0 	.word	0x20001be0

0800e530 <phhalHw_Pn5180_FieldOn>:

phStatus_t phhalHw_Pn5180_FieldOn(
    phhalHw_Pn5180_DataParams_t * pDataParams
    )
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b084      	sub	sp, #16
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
    uint32_t   PH_MEMLOC_REM dwRegister;		// 临时变量：用于存储寄存器值
    phStatus_t PH_MEMLOC_REM statusTmp;			// 临时变量：用于存储函数调用返回的状态值
    uint8_t    PH_MEMLOC_REM  bRFONconfig = 0U;	// 用于配置 RF_ON 参数，bit0=RFCA，bit1=ActiveMode
 800e538:	2300      	movs	r3, #0
 800e53a:	73fb      	strb	r3, [r7, #15]

    // 检查是否关闭了 RF 碰撞避免（RFCA），如关闭则设置 bit0 = 1
    if(pDataParams->bRfca == PH_OFF)
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	78db      	ldrb	r3, [r3, #3]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d103      	bne.n	800e54c <phhalHw_Pn5180_FieldOn+0x1c>
    {
        bRFONconfig |= 0x01U;
 800e544:	7bfb      	ldrb	r3, [r7, #15]
 800e546:	f043 0301 	orr.w	r3, r3, #1
 800e54a:	73fb      	strb	r3, [r7, #15]
    }
    // 检查是否启用了主动模式，如启用则设置 bit1 = 1
    if(pDataParams->bActiveMode == PH_ON)
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e552:	2b01      	cmp	r3, #1
 800e554:	d103      	bne.n	800e55e <phhalHw_Pn5180_FieldOn+0x2e>
    {
        bRFONconfig |= 0x02U;
 800e556:	7bfb      	ldrb	r3, [r7, #15]
 800e558:	f043 0302 	orr.w	r3, r3, #2
 800e55c:	73fb      	strb	r3, [r7, #15]
    }
    // 构建清除中断标志寄存器的掩码
    dwRegister = (IRQ_SET_CLEAR_RF_ACTIVE_ERROR_IRQ_CLR_MASK    \
 800e55e:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 800e562:	60bb      	str	r3, [r7, #8]
        | IRQ_SET_CLEAR_TX_RFOFF_IRQ_CLR_MASK    \
        | IRQ_SET_CLEAR_RFON_DET_IRQ_CLR_MASK    \
        | IRQ_SET_CLEAR_RFOFF_DET_IRQ_CLR_MASK);

    // 写寄存器以清除上述中断标志
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, IRQ_SET_CLEAR, dwRegister));
 800e564:	68bb      	ldr	r3, [r7, #8]
 800e566:	461a      	mov	r2, r3
 800e568:	2103      	movs	r1, #3
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	f002 fff8 	bl	8011560 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 800e570:	4603      	mov	r3, r0
 800e572:	81bb      	strh	r3, [r7, #12]
 800e574:	89bb      	ldrh	r3, [r7, #12]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d001      	beq.n	800e57e <phhalHw_Pn5180_FieldOn+0x4e>
 800e57a:	89bb      	ldrh	r3, [r7, #12]
 800e57c:	e02a      	b.n	800e5d4 <phhalHw_Pn5180_FieldOn+0xa4>

    // 发出 RF_ON 指令，使用配置字节（可能包含 RFCA 或 ActiveMode）
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_RfOn(pDataParams, bRFONconfig));      /* Field ON using Collision Avoidance option */
 800e57e:	7bfb      	ldrb	r3, [r7, #15]
 800e580:	4619      	mov	r1, r3
 800e582:	6878      	ldr	r0, [r7, #4]
 800e584:	f003 fece 	bl	8012324 <phhalHw_Pn5180_Instr_RfOn>
 800e588:	4603      	mov	r3, r0
 800e58a:	81bb      	strh	r3, [r7, #12]
 800e58c:	89bb      	ldrh	r3, [r7, #12]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d001      	beq.n	800e596 <phhalHw_Pn5180_FieldOn+0x66>
 800e592:	89bb      	ldrh	r3, [r7, #12]
 800e594:	e01e      	b.n	800e5d4 <phhalHw_Pn5180_FieldOn+0xa4>

    // 读取 RF 状态寄存器以验证 RF 是否真正开启
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegister(pDataParams, RF_STATUS, &dwRegister));
 800e596:	f107 0308 	add.w	r3, r7, #8
 800e59a:	461a      	mov	r2, r3
 800e59c:	211d      	movs	r1, #29
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f003 f97c 	bl	801189c <phhalHw_Pn5180_Instr_ReadRegister>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	81bb      	strh	r3, [r7, #12]
 800e5a8:	89bb      	ldrh	r3, [r7, #12]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d001      	beq.n	800e5b2 <phhalHw_Pn5180_FieldOn+0x82>
 800e5ae:	89bb      	ldrh	r3, [r7, #12]
 800e5b0:	e010      	b.n	800e5d4 <phhalHw_Pn5180_FieldOn+0xa4>
    // 检查 TX_RF_STATUS 位（发送器是否开启 RF）
    if((dwRegister & RF_STATUS_TX_RF_STATUS_MASK ) == 0U)
 800e5b2:	68bb      	ldr	r3, [r7, #8]
 800e5b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d10a      	bne.n	800e5d2 <phhalHw_Pn5180_FieldOn+0xa2>
    {
    	// 如果 RF 没打开，检查是否是外部 RF 导致错误
        if(0U != (dwRegister & IRQ_STATUS_RF_ACTIVE_ERROR_IRQ_MASK ))
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d002      	beq.n	800e5cc <phhalHw_Pn5180_FieldOn+0x9c>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_EXT_RF_ERROR, PH_COMP_HAL);
 800e5c6:	f44f 7304 	mov.w	r3, #528	@ 0x210
 800e5ca:	e003      	b.n	800e5d4 <phhalHw_Pn5180_FieldOn+0xa4>
        }
        // 其他 RF 错误
        return PH_ADD_COMPCODE_FIXED(PH_ERR_RF_ERROR, PH_COMP_HAL);
 800e5cc:	f240 230a 	movw	r3, #522	@ 0x20a
 800e5d0:	e000      	b.n	800e5d4 <phhalHw_Pn5180_FieldOn+0xa4>
    }
    // RF 成功开启
    return PH_ERR_SUCCESS;
 800e5d2:	2300      	movs	r3, #0
}
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	3710      	adds	r7, #16
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	bd80      	pop	{r7, pc}

0800e5dc <phhalHw_Pn5180_FieldOff>:

phStatus_t phhalHw_Pn5180_FieldOff(
    phhalHw_Pn5180_DataParams_t * pDataParams
    )
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b084      	sub	sp, #16
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM statusTmp;

    /*bTransmited is a flag which is used to identify if a transmit is followed by a receive.
    If any other api follows a transmit, then it should be reset */
    pDataParams->bTransmited = PH_OFF;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Disable the EMD. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_OFF));
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	215e      	movs	r1, #94	@ 0x5e
 800e5f0:	6878      	ldr	r0, [r7, #4]
 800e5f2:	f000 f8d1 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	81fb      	strh	r3, [r7, #14]
 800e5fa:	89fb      	ldrh	r3, [r7, #14]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d001      	beq.n	800e604 <phhalHw_Pn5180_FieldOff+0x28>
 800e600:	89fb      	ldrh	r3, [r7, #14]
 800e602:	e00a      	b.n	800e61a <phhalHw_Pn5180_FieldOff+0x3e>

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_RfOff(pDataParams));
 800e604:	6878      	ldr	r0, [r7, #4]
 800e606:	f003 fecc 	bl	80123a2 <phhalHw_Pn5180_Instr_RfOff>
 800e60a:	4603      	mov	r3, r0
 800e60c:	81fb      	strh	r3, [r7, #14]
 800e60e:	89fb      	ldrh	r3, [r7, #14]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d001      	beq.n	800e618 <phhalHw_Pn5180_FieldOff+0x3c>
 800e614:	89fb      	ldrh	r3, [r7, #14]
 800e616:	e000      	b.n	800e61a <phhalHw_Pn5180_FieldOff+0x3e>
    return PH_ERR_SUCCESS;
 800e618:	2300      	movs	r3, #0
}
 800e61a:	4618      	mov	r0, r3
 800e61c:	3710      	adds	r7, #16
 800e61e:	46bd      	mov	sp, r7
 800e620:	bd80      	pop	{r7, pc}
	...

0800e624 <phhalHw_Pn5180_Wait>:
phStatus_t phhalHw_Pn5180_Wait(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bUnit,
    uint16_t wTimeout		// 等待超时时间
    )
{
 800e624:	b580      	push	{r7, lr}
 800e626:	b086      	sub	sp, #24
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
 800e62c:	460b      	mov	r3, r1
 800e62e:	70fb      	strb	r3, [r7, #3]
 800e630:	4613      	mov	r3, r2
 800e632:	803b      	strh	r3, [r7, #0]
    uint32_t    PH_MEMLOC_REM dwLoadValue;	// 定时器加载值
    uint32_t    PH_MEMLOC_REM wPrescaler;	// 预分频值
    uint32_t    PH_MEMLOC_REM wFreq;		// 频率值

    /* Parameter check: only ms or us is accepted */
    if ((bUnit != PHHAL_HW_TIME_MICROSECONDS) && (bUnit != PHHAL_HW_TIME_MILLISECONDS))
 800e634:	78fb      	ldrb	r3, [r7, #3]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d005      	beq.n	800e646 <phhalHw_Pn5180_Wait+0x22>
 800e63a:	78fb      	ldrb	r3, [r7, #3]
 800e63c:	2b01      	cmp	r3, #1
 800e63e:	d002      	beq.n	800e646 <phhalHw_Pn5180_Wait+0x22>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800e640:	f240 2321 	movw	r3, #545	@ 0x221
 800e644:	e062      	b.n	800e70c <phhalHw_Pn5180_Wait+0xe8>
    }

    /* When time-out value is zero, there is no wait needed */
    if (wTimeout == 0U)
 800e646:	883b      	ldrh	r3, [r7, #0]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d101      	bne.n	800e650 <phhalHw_Pn5180_Wait+0x2c>
    {
        return PH_ERR_SUCCESS;
 800e64c:	2300      	movs	r3, #0
 800e64e:	e05d      	b.n	800e70c <phhalHw_Pn5180_Wait+0xe8>
    }

    /* Setting the Prescaler frequency according to wTimeout */
    if (bUnit == PHHAL_HW_TIME_MILLISECONDS)
 800e650:	78fb      	ldrb	r3, [r7, #3]
 800e652:	2b01      	cmp	r3, #1
 800e654:	d13a      	bne.n	800e6cc <phhalHw_Pn5180_Wait+0xa8>
    {
        wFreq = PHHAL_HW_PN5180_MIN_FREQ;			// 最小频率：53000U
 800e656:	f64c 7308 	movw	r3, #53000	@ 0xcf08
 800e65a:	617b      	str	r3, [r7, #20]
        wPrescaler = 0x3CU;							// 设置预分频器为60
 800e65c:	233c      	movs	r3, #60	@ 0x3c
 800e65e:	613b      	str	r3, [r7, #16]

        /* 处理长时间等待 - 如果超过最大延时，分段执行 */
        while(wTimeout > PHHAL_HW_PN5180_MAX_TIME_DELAY_MS)  // 19784U
 800e660:	e01a      	b.n	800e698 <phhalHw_Pn5180_Wait+0x74>
        {
            wTimeout -= PHHAL_HW_PN5180_MAX_TIME_DELAY_MS;
 800e662:	883b      	ldrh	r3, [r7, #0]
 800e664:	f5a3 439a 	sub.w	r3, r3, #19712	@ 0x4d00
 800e668:	3b48      	subs	r3, #72	@ 0x48
 800e66a:	803b      	strh	r3, [r7, #0]
            /* Calculating the load value */
            dwLoadValue =(uint32_t) (  PHHAL_HW_PN5180_MAX_TIME_DELAY_MS * ( wFreq  / PHHAL_HW_PN5180_CONVERSION_MS_SEC) );
 800e66c:	697b      	ldr	r3, [r7, #20]
 800e66e:	4a29      	ldr	r2, [pc, #164]	@ (800e714 <phhalHw_Pn5180_Wait+0xf0>)
 800e670:	fba2 2303 	umull	r2, r3, r2, r3
 800e674:	099b      	lsrs	r3, r3, #6
 800e676:	f644 5248 	movw	r2, #19784	@ 0x4d48
 800e67a:	fb02 f303 	mul.w	r3, r2, r3
 800e67e:	60fb      	str	r3, [r7, #12]
            /* 执行内部等待函数 */
            PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Int_Wait( pDataParams, dwLoadValue,  wPrescaler));
 800e680:	693a      	ldr	r2, [r7, #16]
 800e682:	68f9      	ldr	r1, [r7, #12]
 800e684:	6878      	ldr	r0, [r7, #4]
 800e686:	f004 fead 	bl	80133e4 <phhalHw_Pn5180_Int_Wait>
 800e68a:	4603      	mov	r3, r0
 800e68c:	817b      	strh	r3, [r7, #10]
 800e68e:	897b      	ldrh	r3, [r7, #10]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d001      	beq.n	800e698 <phhalHw_Pn5180_Wait+0x74>
 800e694:	897b      	ldrh	r3, [r7, #10]
 800e696:	e039      	b.n	800e70c <phhalHw_Pn5180_Wait+0xe8>
        while(wTimeout > PHHAL_HW_PN5180_MAX_TIME_DELAY_MS)  // 19784U
 800e698:	883b      	ldrh	r3, [r7, #0]
 800e69a:	f644 5248 	movw	r2, #19784	@ 0x4d48
 800e69e:	4293      	cmp	r3, r2
 800e6a0:	d8df      	bhi.n	800e662 <phhalHw_Pn5180_Wait+0x3e>
        }

        dwLoadValue =(uint32_t) (  wTimeout * ( wFreq  / PHHAL_HW_PN5180_CONVERSION_MS_SEC) );
 800e6a2:	883b      	ldrh	r3, [r7, #0]
 800e6a4:	697a      	ldr	r2, [r7, #20]
 800e6a6:	491b      	ldr	r1, [pc, #108]	@ (800e714 <phhalHw_Pn5180_Wait+0xf0>)
 800e6a8:	fba1 1202 	umull	r1, r2, r1, r2
 800e6ac:	0992      	lsrs	r2, r2, #6
 800e6ae:	fb02 f303 	mul.w	r3, r2, r3
 800e6b2:	60fb      	str	r3, [r7, #12]
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Int_Wait( pDataParams, dwLoadValue,  wPrescaler));
 800e6b4:	693a      	ldr	r2, [r7, #16]
 800e6b6:	68f9      	ldr	r1, [r7, #12]
 800e6b8:	6878      	ldr	r0, [r7, #4]
 800e6ba:	f004 fe93 	bl	80133e4 <phhalHw_Pn5180_Int_Wait>
 800e6be:	4603      	mov	r3, r0
 800e6c0:	817b      	strh	r3, [r7, #10]
 800e6c2:	897b      	ldrh	r3, [r7, #10]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d020      	beq.n	800e70a <phhalHw_Pn5180_Wait+0xe6>
 800e6c8:	897b      	ldrh	r3, [r7, #10]
 800e6ca:	e01f      	b.n	800e70c <phhalHw_Pn5180_Wait+0xe8>
    }
    else
    {
        /* here wTimeout will be in uS and not be Zero */
        wFreq = PHHAL_HW_PN5180_MAX_FREQ;
 800e6cc:	4b12      	ldr	r3, [pc, #72]	@ (800e718 <phhalHw_Pn5180_Wait+0xf4>)
 800e6ce:	617b      	str	r3, [r7, #20]
        wPrescaler = 0x00U;
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	613b      	str	r3, [r7, #16]
        /*Reducing the division by 2 digits to retain the 2 digit decimal places which were getting wiped out*/
        dwLoadValue =(uint32_t) ( wFreq / (PHHAL_HW_PN5180_CONVERSION_US_SEC/100));
 800e6d4:	697b      	ldr	r3, [r7, #20]
 800e6d6:	4a11      	ldr	r2, [pc, #68]	@ (800e71c <phhalHw_Pn5180_Wait+0xf8>)
 800e6d8:	fba2 2303 	umull	r2, r3, r2, r3
 800e6dc:	0b5b      	lsrs	r3, r3, #13
 800e6de:	60fb      	str	r3, [r7, #12]
        /*Restoring the division done in the earlier step*/
        dwLoadValue =(uint32_t) ((wTimeout * dwLoadValue)/100);
 800e6e0:	883b      	ldrh	r3, [r7, #0]
 800e6e2:	68fa      	ldr	r2, [r7, #12]
 800e6e4:	fb02 f303 	mul.w	r3, r2, r3
 800e6e8:	4a0d      	ldr	r2, [pc, #52]	@ (800e720 <phhalHw_Pn5180_Wait+0xfc>)
 800e6ea:	fba2 2303 	umull	r2, r3, r2, r3
 800e6ee:	095b      	lsrs	r3, r3, #5
 800e6f0:	60fb      	str	r3, [r7, #12]
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Int_Wait( pDataParams, dwLoadValue,  wPrescaler));
 800e6f2:	693a      	ldr	r2, [r7, #16]
 800e6f4:	68f9      	ldr	r1, [r7, #12]
 800e6f6:	6878      	ldr	r0, [r7, #4]
 800e6f8:	f004 fe74 	bl	80133e4 <phhalHw_Pn5180_Int_Wait>
 800e6fc:	4603      	mov	r3, r0
 800e6fe:	817b      	strh	r3, [r7, #10]
 800e700:	897b      	ldrh	r3, [r7, #10]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d001      	beq.n	800e70a <phhalHw_Pn5180_Wait+0xe6>
 800e706:	897b      	ldrh	r3, [r7, #10]
 800e708:	e000      	b.n	800e70c <phhalHw_Pn5180_Wait+0xe8>
    }

    return PH_ERR_SUCCESS;
 800e70a:	2300      	movs	r3, #0
}
 800e70c:	4618      	mov	r0, r3
 800e70e:	3718      	adds	r7, #24
 800e710:	46bd      	mov	sp, r7
 800e712:	bd80      	pop	{r7, pc}
 800e714:	10624dd3 	.word	0x10624dd3
 800e718:	00cee8c0 	.word	0x00cee8c0
 800e71c:	d1b71759 	.word	0xd1b71759
 800e720:	51eb851f 	.word	0x51eb851f

0800e724 <phhalHw_Pn5180_FieldReset>:

phStatus_t phhalHw_Pn5180_FieldReset(
    phhalHw_Pn5180_DataParams_t * pDataParams
    )
{
 800e724:	b580      	push	{r7, lr}
 800e726:	b084      	sub	sp, #16
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;

    /* Switch off the field */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_FieldOff(pDataParams));
 800e72c:	6878      	ldr	r0, [r7, #4]
 800e72e:	f7ff ff55 	bl	800e5dc <phhalHw_Pn5180_FieldOff>
 800e732:	4603      	mov	r3, r0
 800e734:	81fb      	strh	r3, [r7, #14]
 800e736:	89fb      	ldrh	r3, [r7, #14]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d001      	beq.n	800e740 <phhalHw_Pn5180_FieldReset+0x1c>
 800e73c:	89fb      	ldrh	r3, [r7, #14]
 800e73e:	e026      	b.n	800e78e <phhalHw_Pn5180_FieldReset+0x6a>

    /* wait for field-off time-out */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Wait(
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800e744:	461a      	mov	r2, r3
 800e746:	2101      	movs	r1, #1
 800e748:	6878      	ldr	r0, [r7, #4]
 800e74a:	f7ff ff6b 	bl	800e624 <phhalHw_Pn5180_Wait>
 800e74e:	4603      	mov	r3, r0
 800e750:	81fb      	strh	r3, [r7, #14]
 800e752:	89fb      	ldrh	r3, [r7, #14]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d001      	beq.n	800e75c <phhalHw_Pn5180_FieldReset+0x38>
 800e758:	89fb      	ldrh	r3, [r7, #14]
 800e75a:	e018      	b.n	800e78e <phhalHw_Pn5180_FieldReset+0x6a>
        pDataParams,
        PHHAL_HW_TIME_MILLISECONDS,
        (pDataParams->wFieldOffTime)));

    /* switch on the field again */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_FieldOn(pDataParams));
 800e75c:	6878      	ldr	r0, [r7, #4]
 800e75e:	f7ff fee7 	bl	800e530 <phhalHw_Pn5180_FieldOn>
 800e762:	4603      	mov	r3, r0
 800e764:	81fb      	strh	r3, [r7, #14]
 800e766:	89fb      	ldrh	r3, [r7, #14]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d001      	beq.n	800e770 <phhalHw_Pn5180_FieldReset+0x4c>
 800e76c:	89fb      	ldrh	r3, [r7, #14]
 800e76e:	e00e      	b.n	800e78e <phhalHw_Pn5180_FieldReset+0x6a>

    /* wait for field-recovery time-out */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Wait(
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e774:	461a      	mov	r2, r3
 800e776:	2101      	movs	r1, #1
 800e778:	6878      	ldr	r0, [r7, #4]
 800e77a:	f7ff ff53 	bl	800e624 <phhalHw_Pn5180_Wait>
 800e77e:	4603      	mov	r3, r0
 800e780:	81fb      	strh	r3, [r7, #14]
 800e782:	89fb      	ldrh	r3, [r7, #14]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d001      	beq.n	800e78c <phhalHw_Pn5180_FieldReset+0x68>
 800e788:	89fb      	ldrh	r3, [r7, #14]
 800e78a:	e000      	b.n	800e78e <phhalHw_Pn5180_FieldReset+0x6a>
        pDataParams,
        PHHAL_HW_TIME_MILLISECONDS,
        (pDataParams->wFieldRecoveryTime)));

    return PH_ERR_SUCCESS;
 800e78c:	2300      	movs	r3, #0
}
 800e78e:	4618      	mov	r0, r3
 800e790:	3710      	adds	r7, #16
 800e792:	46bd      	mov	sp, r7
 800e794:	bd80      	pop	{r7, pc}
	...

0800e798 <phhalHw_Pn5180_SetConfig>:
phStatus_t phhalHw_Pn5180_SetConfig(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wConfig,
    uint16_t wValue
    )
{
 800e798:	b5b0      	push	{r4, r5, r7, lr}
 800e79a:	b090      	sub	sp, #64	@ 0x40
 800e79c:	af02      	add	r7, sp, #8
 800e79e:	6078      	str	r0, [r7, #4]
 800e7a0:	460b      	mov	r3, r1
 800e7a2:	807b      	strh	r3, [r7, #2]
 800e7a4:	4613      	mov	r3, r2
 800e7a6:	803b      	strh	r3, [r7, #0]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint32_t    PH_MEMLOC_REM dwRegister;
    uint32_t    PH_MEMLOC_REM dwValue;
    uint8_t *   PH_MEMLOC_REM pBuffer = NULL;
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	61fb      	str	r3, [r7, #28]
    uint16_t    PH_MEMLOC_REM wBufferSize;
    uint16_t    PH_MEMLOC_REM wBufferLen = 0U;
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	833b      	strh	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wFraming;

    uint8_t     PH_MEMLOC_BUF wRegTypeValueSets[12];
    uint16_t    PH_MEMLOC_REM wSizeOfRegTypeValueSets;
    uint32_t    PH_MEMLOC_REM dwTemp;
    float32_t   PH_MEMLOC_REM fTime=0.0;
 800e7b0:	f04f 0300 	mov.w	r3, #0
 800e7b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint16_t    PH_MEMLOC_REM wTmpValue = 0xFFU;
 800e7b6:	23ff      	movs	r3, #255	@ 0xff
 800e7b8:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    switch(wConfig)
 800e7ba:	887b      	ldrh	r3, [r7, #2]
 800e7bc:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800e7c0:	3b25      	subs	r3, #37	@ 0x25
 800e7c2:	2b07      	cmp	r3, #7
 800e7c4:	d809      	bhi.n	800e7da <phhalHw_Pn5180_SetConfig+0x42>
    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_INTEGRITY_ERR_CHECK:
    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_LEN_BYTE_MIN:
    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_LEN_BYTE_MAX:
    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_RC_BYTE_VAL:
        /* Check if Firmware version is below 4.1, and return with PH_ERR_INVALID_PARAMETER. */
        if (pDataParams->wFirmwareVer < 0x401U)
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 800e7cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e7d0:	d805      	bhi.n	800e7de <phhalHw_Pn5180_SetConfig+0x46>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_HAL);
 800e7d2:	f240 2325 	movw	r3, #549	@ 0x225
 800e7d6:	f001 bc22 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    default:
        break;
 800e7da:	bf00      	nop
 800e7dc:	e000      	b.n	800e7e0 <phhalHw_Pn5180_SetConfig+0x48>
        break;
 800e7de:	bf00      	nop
    }

    switch(wConfig)
 800e7e0:	887b      	ldrh	r3, [r7, #2]
 800e7e2:	2b5e      	cmp	r3, #94	@ 0x5e
 800e7e4:	f300 8154 	bgt.w	800ea90 <phhalHw_Pn5180_SetConfig+0x2f8>
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	f280 808d 	bge.w	800e908 <phhalHw_Pn5180_SetConfig+0x170>
 800e7ee:	f001 bbd3 	b.w	800ff98 <phhalHw_Pn5180_SetConfig+0x1800>
 800e7f2:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800e7f6:	3b10      	subs	r3, #16
 800e7f8:	2b40      	cmp	r3, #64	@ 0x40
 800e7fa:	f201 83cd 	bhi.w	800ff98 <phhalHw_Pn5180_SetConfig+0x1800>
 800e7fe:	a201      	add	r2, pc, #4	@ (adr r2, 800e804 <phhalHw_Pn5180_SetConfig+0x6c>)
 800e800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e804:	0800f689 	.word	0x0800f689
 800e808:	0800ff99 	.word	0x0800ff99
 800e80c:	0800ff99 	.word	0x0800ff99
 800e810:	0800ff99 	.word	0x0800ff99
 800e814:	0800ff99 	.word	0x0800ff99
 800e818:	0800ff99 	.word	0x0800ff99
 800e81c:	0800ff99 	.word	0x0800ff99
 800e820:	0800ff99 	.word	0x0800ff99
 800e824:	0800ff99 	.word	0x0800ff99
 800e828:	0800ff99 	.word	0x0800ff99
 800e82c:	0800ff99 	.word	0x0800ff99
 800e830:	0800ff99 	.word	0x0800ff99
 800e834:	0800ff99 	.word	0x0800ff99
 800e838:	0800ff99 	.word	0x0800ff99
 800e83c:	0800ff99 	.word	0x0800ff99
 800e840:	0800ff99 	.word	0x0800ff99
 800e844:	0800ff99 	.word	0x0800ff99
 800e848:	0800ff99 	.word	0x0800ff99
 800e84c:	0800ff99 	.word	0x0800ff99
 800e850:	0800ff99 	.word	0x0800ff99
 800e854:	0800ff99 	.word	0x0800ff99
 800e858:	0800fea9 	.word	0x0800fea9
 800e85c:	0800fedb 	.word	0x0800fedb
 800e860:	0800fef7 	.word	0x0800fef7
 800e864:	0800ff11 	.word	0x0800ff11
 800e868:	0800ff2b 	.word	0x0800ff2b
 800e86c:	0800ff45 	.word	0x0800ff45
 800e870:	0800ff61 	.word	0x0800ff61
 800e874:	0800ff7d 	.word	0x0800ff7d
 800e878:	0800ff99 	.word	0x0800ff99
 800e87c:	0800ff99 	.word	0x0800ff99
 800e880:	0800ff99 	.word	0x0800ff99
 800e884:	0800ff99 	.word	0x0800ff99
 800e888:	0800ff99 	.word	0x0800ff99
 800e88c:	0800ff99 	.word	0x0800ff99
 800e890:	0800ff99 	.word	0x0800ff99
 800e894:	0800ff99 	.word	0x0800ff99
 800e898:	0800ff99 	.word	0x0800ff99
 800e89c:	0800ff99 	.word	0x0800ff99
 800e8a0:	0800ff99 	.word	0x0800ff99
 800e8a4:	0800ff99 	.word	0x0800ff99
 800e8a8:	0800ff99 	.word	0x0800ff99
 800e8ac:	0800ff99 	.word	0x0800ff99
 800e8b0:	0800ff99 	.word	0x0800ff99
 800e8b4:	0800ff99 	.word	0x0800ff99
 800e8b8:	0800ff99 	.word	0x0800ff99
 800e8bc:	0800ff99 	.word	0x0800ff99
 800e8c0:	0800ff99 	.word	0x0800ff99
 800e8c4:	0800ff99 	.word	0x0800ff99
 800e8c8:	0800ff99 	.word	0x0800ff99
 800e8cc:	0800ff99 	.word	0x0800ff99
 800e8d0:	0800ff99 	.word	0x0800ff99
 800e8d4:	0800ff99 	.word	0x0800ff99
 800e8d8:	0800ff99 	.word	0x0800ff99
 800e8dc:	0800ff99 	.word	0x0800ff99
 800e8e0:	0800ff99 	.word	0x0800ff99
 800e8e4:	0800ff99 	.word	0x0800ff99
 800e8e8:	0800ff99 	.word	0x0800ff99
 800e8ec:	0800ff99 	.word	0x0800ff99
 800e8f0:	0800ff99 	.word	0x0800ff99
 800e8f4:	0800ff99 	.word	0x0800ff99
 800e8f8:	0800ff99 	.word	0x0800ff99
 800e8fc:	0800ff99 	.word	0x0800ff99
 800e900:	0800ff99 	.word	0x0800ff99
 800e904:	0800f72b 	.word	0x0800f72b
 800e908:	2b5e      	cmp	r3, #94	@ 0x5e
 800e90a:	f201 8345 	bhi.w	800ff98 <phhalHw_Pn5180_SetConfig+0x1800>
 800e90e:	a201      	add	r2, pc, #4	@ (adr r2, 800e914 <phhalHw_Pn5180_SetConfig+0x17c>)
 800e910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e914:	0800eaa9 	.word	0x0800eaa9
 800e918:	0800eb21 	.word	0x0800eb21
 800e91c:	0800eb21 	.word	0x0800eb21
 800e920:	0800eae7 	.word	0x0800eae7
 800e924:	0800ff99 	.word	0x0800ff99
 800e928:	0800eb69 	.word	0x0800eb69
 800e92c:	0800ede9 	.word	0x0800ede9
 800e930:	0800eec3 	.word	0x0800eec3
 800e934:	0800ecb1 	.word	0x0800ecb1
 800e938:	0800f223 	.word	0x0800f223
 800e93c:	0800f403 	.word	0x0800f403
 800e940:	0800efa3 	.word	0x0800efa3
 800e944:	0800eaa9 	.word	0x0800eaa9
 800e948:	0800f555 	.word	0x0800f555
 800e94c:	0800f5af 	.word	0x0800f5af
 800e950:	0800f609 	.word	0x0800f609
 800e954:	0800ff99 	.word	0x0800ff99
 800e958:	0800ff99 	.word	0x0800ff99
 800e95c:	0800ff99 	.word	0x0800ff99
 800e960:	0800f6d9 	.word	0x0800f6d9
 800e964:	0800f6f1 	.word	0x0800f6f1
 800e968:	0800f91b 	.word	0x0800f91b
 800e96c:	0800fb2d 	.word	0x0800fb2d
 800e970:	0800fc65 	.word	0x0800fc65
 800e974:	0800ed11 	.word	0x0800ed11
 800e978:	0800ff99 	.word	0x0800ff99
 800e97c:	0800ff99 	.word	0x0800ff99
 800e980:	0800ff99 	.word	0x0800ff99
 800e984:	0800ff99 	.word	0x0800ff99
 800e988:	0800ff99 	.word	0x0800ff99
 800e98c:	0800ff99 	.word	0x0800ff99
 800e990:	0800ff99 	.word	0x0800ff99
 800e994:	0800f6fb 	.word	0x0800f6fb
 800e998:	0800ff99 	.word	0x0800ff99
 800e99c:	0800ff99 	.word	0x0800ff99
 800e9a0:	0800ff99 	.word	0x0800ff99
 800e9a4:	0800ff99 	.word	0x0800ff99
 800e9a8:	0800ff99 	.word	0x0800ff99
 800e9ac:	0800ff99 	.word	0x0800ff99
 800e9b0:	0800ff99 	.word	0x0800ff99
 800e9b4:	0800ff99 	.word	0x0800ff99
 800e9b8:	0800ff99 	.word	0x0800ff99
 800e9bc:	0800ff99 	.word	0x0800ff99
 800e9c0:	0800ff99 	.word	0x0800ff99
 800e9c4:	0800ff99 	.word	0x0800ff99
 800e9c8:	0800ff99 	.word	0x0800ff99
 800e9cc:	0800f0eb 	.word	0x0800f0eb
 800e9d0:	0800f127 	.word	0x0800f127
 800e9d4:	0800f14d 	.word	0x0800f14d
 800e9d8:	0800ff99 	.word	0x0800ff99
 800e9dc:	0800ff99 	.word	0x0800ff99
 800e9e0:	0800f191 	.word	0x0800f191
 800e9e4:	0800f1d5 	.word	0x0800f1d5
 800e9e8:	0800fe6f 	.word	0x0800fe6f
 800e9ec:	0800ff99 	.word	0x0800ff99
 800e9f0:	0800ff99 	.word	0x0800ff99
 800e9f4:	0800ff99 	.word	0x0800ff99
 800e9f8:	0800ff99 	.word	0x0800ff99
 800e9fc:	0800ff99 	.word	0x0800ff99
 800ea00:	0800ff99 	.word	0x0800ff99
 800ea04:	0800ff99 	.word	0x0800ff99
 800ea08:	0800ff99 	.word	0x0800ff99
 800ea0c:	0800ff99 	.word	0x0800ff99
 800ea10:	0800ff99 	.word	0x0800ff99
 800ea14:	0800ff99 	.word	0x0800ff99
 800ea18:	0800ff99 	.word	0x0800ff99
 800ea1c:	0800ff99 	.word	0x0800ff99
 800ea20:	0800ff99 	.word	0x0800ff99
 800ea24:	0800ff99 	.word	0x0800ff99
 800ea28:	0800ff99 	.word	0x0800ff99
 800ea2c:	0800ff99 	.word	0x0800ff99
 800ea30:	0800ff99 	.word	0x0800ff99
 800ea34:	0800ff99 	.word	0x0800ff99
 800ea38:	0800ff99 	.word	0x0800ff99
 800ea3c:	0800ff99 	.word	0x0800ff99
 800ea40:	0800ff99 	.word	0x0800ff99
 800ea44:	0800ff99 	.word	0x0800ff99
 800ea48:	0800ff99 	.word	0x0800ff99
 800ea4c:	0800ff99 	.word	0x0800ff99
 800ea50:	0800ff99 	.word	0x0800ff99
 800ea54:	0800ff99 	.word	0x0800ff99
 800ea58:	0800f7cb 	.word	0x0800f7cb
 800ea5c:	0800ff99 	.word	0x0800ff99
 800ea60:	0800f7e7 	.word	0x0800f7e7
 800ea64:	0800ff99 	.word	0x0800ff99
 800ea68:	0800fe0f 	.word	0x0800fe0f
 800ea6c:	0800f835 	.word	0x0800f835
 800ea70:	0800f851 	.word	0x0800f851
 800ea74:	0800ff99 	.word	0x0800ff99
 800ea78:	0800ff99 	.word	0x0800ff99
 800ea7c:	0800f749 	.word	0x0800f749
 800ea80:	0800ff99 	.word	0x0800ff99
 800ea84:	0800f8ad 	.word	0x0800f8ad
 800ea88:	0800f8cb 	.word	0x0800f8cb
 800ea8c:	0800f757 	.word	0x0800f757
 800ea90:	f248 0250 	movw	r2, #32848	@ 0x8050
 800ea94:	4293      	cmp	r3, r2
 800ea96:	f301 827f 	bgt.w	800ff98 <phhalHw_Pn5180_SetConfig+0x1800>
 800ea9a:	f248 0210 	movw	r2, #32784	@ 0x8010
 800ea9e:	4293      	cmp	r3, r2
 800eaa0:	f6bf aea7 	bge.w	800e7f2 <phhalHw_Pn5180_SetConfig+0x5a>
 800eaa4:	f001 ba78 	b.w	800ff98 <phhalHw_Pn5180_SetConfig+0x1800>
    {
    case PHHAL_HW_CONFIG_PARITY:
    case PHHAL_HW_CONFIG_ASK100:

        if( pDataParams->wCfgShadow[wConfig] != wValue)
 800eaa8:	887a      	ldrh	r2, [r7, #2]
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	322c      	adds	r2, #44	@ 0x2c
 800eaae:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800eab2:	883a      	ldrh	r2, [r7, #0]
 800eab4:	429a      	cmp	r2, r3
 800eab6:	f001 8272 	beq.w	800ff9e <phhalHw_Pn5180_SetConfig+0x1806>
        {
            /* Use internal set config */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig_Int(pDataParams, wConfig, wValue));
 800eaba:	883a      	ldrh	r2, [r7, #0]
 800eabc:	887b      	ldrh	r3, [r7, #2]
 800eabe:	4619      	mov	r1, r3
 800eac0:	6878      	ldr	r0, [r7, #4]
 800eac2:	f003 feab 	bl	801281c <phhalHw_Pn5180_SetConfig_Int>
 800eac6:	4603      	mov	r3, r0
 800eac8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800eaca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d002      	beq.n	800ead6 <phhalHw_Pn5180_SetConfig+0x33e>
 800ead0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ead2:	f001 baa4 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>

            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800ead6:	887a      	ldrh	r2, [r7, #2]
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	322c      	adds	r2, #44	@ 0x2c
 800eadc:	8839      	ldrh	r1, [r7, #0]
 800eade:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        break;
 800eae2:	f001 ba5c 	b.w	800ff9e <phhalHw_Pn5180_SetConfig+0x1806>

    case PHHAL_HW_CONFIG_TXLASTBITS:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800eae6:	887a      	ldrh	r2, [r7, #2]
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	322c      	adds	r2, #44	@ 0x2c
 800eaec:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800eaf0:	883a      	ldrh	r2, [r7, #0]
 800eaf2:	429a      	cmp	r2, r3
 800eaf4:	d105      	bne.n	800eb02 <phhalHw_Pn5180_SetConfig+0x36a>
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800eafc:	2b01      	cmp	r3, #1
 800eafe:	f001 8250 	beq.w	800ffa2 <phhalHw_Pn5180_SetConfig+0x180a>
        {
            /* Check parameter */
            if (wValue > MASK_TX_LASTBITS)
 800eb02:	883b      	ldrh	r3, [r7, #0]
 800eb04:	2b07      	cmp	r3, #7
 800eb06:	d903      	bls.n	800eb10 <phhalHw_Pn5180_SetConfig+0x378>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800eb08:	f240 2321 	movw	r3, #545	@ 0x221
 800eb0c:	f001 ba87 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>
            }

            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800eb10:	887a      	ldrh	r2, [r7, #2]
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	322c      	adds	r2, #44	@ 0x2c
 800eb16:	8839      	ldrh	r1, [r7, #0]
 800eb18:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        break;
 800eb1c:	f001 ba41 	b.w	800ffa2 <phhalHw_Pn5180_SetConfig+0x180a>

    case PHHAL_HW_CONFIG_TXCRC:
    case PHHAL_HW_CONFIG_RXCRC:
        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800eb20:	887a      	ldrh	r2, [r7, #2]
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	322c      	adds	r2, #44	@ 0x2c
 800eb26:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800eb2a:	883a      	ldrh	r2, [r7, #0]
 800eb2c:	429a      	cmp	r2, r3
 800eb2e:	d105      	bne.n	800eb3c <phhalHw_Pn5180_SetConfig+0x3a4>
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800eb36:	2b01      	cmp	r3, #1
 800eb38:	f001 8235 	beq.w	800ffa6 <phhalHw_Pn5180_SetConfig+0x180e>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig_Int(pDataParams, wConfig, wValue));
 800eb3c:	883a      	ldrh	r2, [r7, #0]
 800eb3e:	887b      	ldrh	r3, [r7, #2]
 800eb40:	4619      	mov	r1, r3
 800eb42:	6878      	ldr	r0, [r7, #4]
 800eb44:	f003 fe6a 	bl	801281c <phhalHw_Pn5180_SetConfig_Int>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800eb4c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d002      	beq.n	800eb58 <phhalHw_Pn5180_SetConfig+0x3c0>
 800eb52:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eb54:	f001 ba63 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>
            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800eb58:	887a      	ldrh	r2, [r7, #2]
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	322c      	adds	r2, #44	@ 0x2c
 800eb5e:	8839      	ldrh	r1, [r7, #0]
 800eb60:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }

        break;
 800eb64:	f001 ba1f 	b.w	800ffa6 <phhalHw_Pn5180_SetConfig+0x180e>

    case PHHAL_HW_CONFIG_RXALIGN:
        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800eb68:	887a      	ldrh	r2, [r7, #2]
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	322c      	adds	r2, #44	@ 0x2c
 800eb6e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800eb72:	883a      	ldrh	r2, [r7, #0]
 800eb74:	429a      	cmp	r2, r3
 800eb76:	d105      	bne.n	800eb84 <phhalHw_Pn5180_SetConfig+0x3ec>
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800eb7e:	2b01      	cmp	r3, #1
 800eb80:	f001 8213 	beq.w	800ffaa <phhalHw_Pn5180_SetConfig+0x1812>
        {
            /* Check the parameter */
            if (wValue >  MASK_RX_LASTBITS)
 800eb84:	883b      	ldrh	r3, [r7, #0]
 800eb86:	2b07      	cmp	r3, #7
 800eb88:	d903      	bls.n	800eb92 <phhalHw_Pn5180_SetConfig+0x3fa>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800eb8a:	f240 2321 	movw	r3, #545	@ 0x221
 800eb8e:	f001 ba46 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>
            }

            wSizeOfRegTypeValueSets = 0U;
 800eb92:	2300      	movs	r3, #0
 800eb94:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /*Clear the Bits of CRC_RX_CONFIG_RX_BIT_ALIGN_MASK*/
            dwTemp = (uint32_t) ~( CRC_RX_CONFIG_RX_BIT_ALIGN_MASK );
 800eb96:	f46f 73e0 	mvn.w	r3, #448	@ 0x1c0
 800eb9a:	60bb      	str	r3, [r7, #8]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_RX_CONFIG;
 800eb9c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eb9e:	1c5a      	adds	r2, r3, #1
 800eba0:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800eba2:	3338      	adds	r3, #56	@ 0x38
 800eba4:	443b      	add	r3, r7
 800eba6:	2212      	movs	r2, #18
 800eba8:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 800ebac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ebae:	1c5a      	adds	r2, r3, #1
 800ebb0:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800ebb2:	3338      	adds	r3, #56	@ 0x38
 800ebb4:	443b      	add	r3, r7
 800ebb6:	2203      	movs	r2, #3
 800ebb8:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800ebbc:	68ba      	ldr	r2, [r7, #8]
 800ebbe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ebc0:	1c59      	adds	r1, r3, #1
 800ebc2:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800ebc4:	b2d2      	uxtb	r2, r2
 800ebc6:	3338      	adds	r3, #56	@ 0x38
 800ebc8:	443b      	add	r3, r7
 800ebca:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800ebce:	68bb      	ldr	r3, [r7, #8]
 800ebd0:	0a1a      	lsrs	r2, r3, #8
 800ebd2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ebd4:	1c59      	adds	r1, r3, #1
 800ebd6:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800ebd8:	b2d2      	uxtb	r2, r2
 800ebda:	3338      	adds	r3, #56	@ 0x38
 800ebdc:	443b      	add	r3, r7
 800ebde:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800ebe2:	68bb      	ldr	r3, [r7, #8]
 800ebe4:	0c1a      	lsrs	r2, r3, #16
 800ebe6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ebe8:	1c59      	adds	r1, r3, #1
 800ebea:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800ebec:	b2d2      	uxtb	r2, r2
 800ebee:	3338      	adds	r3, #56	@ 0x38
 800ebf0:	443b      	add	r3, r7
 800ebf2:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800ebf6:	68bb      	ldr	r3, [r7, #8]
 800ebf8:	0e1a      	lsrs	r2, r3, #24
 800ebfa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ebfc:	1c59      	adds	r1, r3, #1
 800ebfe:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800ec00:	b2d2      	uxtb	r2, r2
 800ec02:	3338      	adds	r3, #56	@ 0x38
 800ec04:	443b      	add	r3, r7
 800ec06:	f803 2c2c 	strb.w	r2, [r3, #-44]

            /*Set the new value  of RX_BIT_ALIGN*/
            dwTemp = (uint32_t)((wValue << CRC_RX_CONFIG_RX_BIT_ALIGN_POS) & CRC_RX_CONFIG_RX_BIT_ALIGN_MASK);
 800ec0a:	883b      	ldrh	r3, [r7, #0]
 800ec0c:	019b      	lsls	r3, r3, #6
 800ec0e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800ec12:	60bb      	str	r3, [r7, #8]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_RX_CONFIG;
 800ec14:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ec16:	1c5a      	adds	r2, r3, #1
 800ec18:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800ec1a:	3338      	adds	r3, #56	@ 0x38
 800ec1c:	443b      	add	r3, r7
 800ec1e:	2212      	movs	r2, #18
 800ec20:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 800ec24:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ec26:	1c5a      	adds	r2, r3, #1
 800ec28:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800ec2a:	3338      	adds	r3, #56	@ 0x38
 800ec2c:	443b      	add	r3, r7
 800ec2e:	2202      	movs	r2, #2
 800ec30:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800ec34:	68ba      	ldr	r2, [r7, #8]
 800ec36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ec38:	1c59      	adds	r1, r3, #1
 800ec3a:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800ec3c:	b2d2      	uxtb	r2, r2
 800ec3e:	3338      	adds	r3, #56	@ 0x38
 800ec40:	443b      	add	r3, r7
 800ec42:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800ec46:	68bb      	ldr	r3, [r7, #8]
 800ec48:	0a1a      	lsrs	r2, r3, #8
 800ec4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ec4c:	1c59      	adds	r1, r3, #1
 800ec4e:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800ec50:	b2d2      	uxtb	r2, r2
 800ec52:	3338      	adds	r3, #56	@ 0x38
 800ec54:	443b      	add	r3, r7
 800ec56:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800ec5a:	68bb      	ldr	r3, [r7, #8]
 800ec5c:	0c1a      	lsrs	r2, r3, #16
 800ec5e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ec60:	1c59      	adds	r1, r3, #1
 800ec62:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800ec64:	b2d2      	uxtb	r2, r2
 800ec66:	3338      	adds	r3, #56	@ 0x38
 800ec68:	443b      	add	r3, r7
 800ec6a:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800ec6e:	68bb      	ldr	r3, [r7, #8]
 800ec70:	0e1a      	lsrs	r2, r3, #24
 800ec72:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ec74:	1c59      	adds	r1, r3, #1
 800ec76:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800ec78:	b2d2      	uxtb	r2, r2
 800ec7a:	3338      	adds	r3, #56	@ 0x38
 800ec7c:	443b      	add	r3, r7
 800ec7e:	f803 2c2c 	strb.w	r2, [r3, #-44]

            /*Send the array to the IC*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams, wRegTypeValueSets, wSizeOfRegTypeValueSets));
 800ec82:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ec84:	f107 030c 	add.w	r3, r7, #12
 800ec88:	4619      	mov	r1, r3
 800ec8a:	6878      	ldr	r0, [r7, #4]
 800ec8c:	f002 fd54 	bl	8011738 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 800ec90:	4603      	mov	r3, r0
 800ec92:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ec94:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d002      	beq.n	800eca0 <phhalHw_Pn5180_SetConfig+0x508>
 800ec9a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ec9c:	f001 b9bf 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>

            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800eca0:	887a      	ldrh	r2, [r7, #2]
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	322c      	adds	r2, #44	@ 0x2c
 800eca6:	8839      	ldrh	r1, [r7, #0]
 800eca8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        break;
 800ecac:	f001 b97d 	b.w	800ffaa <phhalHw_Pn5180_SetConfig+0x1812>

    case PHHAL_HW_CONFIG_CLEARBITSAFTERCOLL:

        if (pDataParams->wCfgShadow[wConfig] != wValue)
 800ecb0:	887a      	ldrh	r2, [r7, #2]
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	322c      	adds	r2, #44	@ 0x2c
 800ecb6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800ecba:	883a      	ldrh	r2, [r7, #0]
 800ecbc:	429a      	cmp	r2, r3
 800ecbe:	f001 8176 	beq.w	800ffae <phhalHw_Pn5180_SetConfig+0x1816>
        {
            /* Disbale */
            if (wValue == PH_OFF)
 800ecc2:	883b      	ldrh	r3, [r7, #0]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d10d      	bne.n	800ece4 <phhalHw_Pn5180_SetConfig+0x54c>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, CRC_RX_CONFIG, CRC_RX_CONFIG_VALUES_AFTER_COLLISION_MASK));
 800ecc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eccc:	2112      	movs	r1, #18
 800ecce:	6878      	ldr	r0, [r7, #4]
 800ecd0:	f002 fc46 	bl	8011560 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 800ecd4:	4603      	mov	r3, r0
 800ecd6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ecd8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d010      	beq.n	800ed00 <phhalHw_Pn5180_SetConfig+0x568>
 800ecde:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ece0:	f001 b99d 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>
            }
            else
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, CRC_RX_CONFIG, (0xFFFFFFFFU^CRC_RX_CONFIG_VALUES_AFTER_COLLISION_MASK)));
 800ece4:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800ece8:	2112      	movs	r1, #18
 800ecea:	6878      	ldr	r0, [r7, #4]
 800ecec:	f002 fcae 	bl	801164c <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ecf4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d002      	beq.n	800ed00 <phhalHw_Pn5180_SetConfig+0x568>
 800ecfa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ecfc:	f001 b98f 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>
            }
            pDataParams->wCfgShadow[wConfig] = wValue;
 800ed00:	887a      	ldrh	r2, [r7, #2]
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	322c      	adds	r2, #44	@ 0x2c
 800ed06:	8839      	ldrh	r1, [r7, #0]
 800ed08:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        break;
 800ed0c:	f001 b94f 	b.w	800ffae <phhalHw_Pn5180_SetConfig+0x1816>

    case PHHAL_HW_CONFIG_TXWAIT_MS:
        /* Parameter checking */
        if (wValue > 650U) /* To set Max value for wValue in uS i.e, 0xFFFFU )*/
 800ed10:	883b      	ldrh	r3, [r7, #0]
 800ed12:	f240 228a 	movw	r2, #650	@ 0x28a
 800ed16:	4293      	cmp	r3, r2
 800ed18:	d903      	bls.n	800ed22 <phhalHw_Pn5180_SetConfig+0x58a>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800ed1a:	f240 2321 	movw	r3, #545	@ 0x221
 800ed1e:	f001 b97e 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        /* Store the value in terms of uS in shadow table*/
        pDataParams->dwTxWaitMs =  wValue;
 800ed22:	883a      	ldrh	r2, [r7, #0]
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Set TxWait */
        fTime = 0.0;
 800ed28:	f04f 0300 	mov.w	r3, #0
 800ed2c:	62bb      	str	r3, [r7, #40]	@ 0x28
        dwValue = PHHAL_HW_PN5180_TR_RX_PRESCALAR;
 800ed2e:	237f      	movs	r3, #127	@ 0x7f
 800ed30:	633b      	str	r3, [r7, #48]	@ 0x30
        dwTemp = wValue*1000U;
 800ed32:	883b      	ldrh	r3, [r7, #0]
 800ed34:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ed38:	fb02 f303 	mul.w	r3, r2, r3
 800ed3c:	60bb      	str	r3, [r7, #8]
        if(0U != dwTemp)
 800ed3e:	68bb      	ldr	r3, [r7, #8]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d043      	beq.n	800edcc <phhalHw_Pn5180_SetConfig+0x634>
        {
            fTime = (float32_t)(((float32_t)dwTemp * 13.56) / (float32_t)(dwValue));
 800ed44:	68bb      	ldr	r3, [r7, #8]
 800ed46:	ee07 3a90 	vmov	s15, r3
 800ed4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed4e:	ee17 0a90 	vmov	r0, s15
 800ed52:	f7f1 fbf9 	bl	8000548 <__aeabi_f2d>
 800ed56:	f60f 3310 	addw	r3, pc, #2832	@ 0xb10
 800ed5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed5e:	f7f1 fc4b 	bl	80005f8 <__aeabi_dmul>
 800ed62:	4602      	mov	r2, r0
 800ed64:	460b      	mov	r3, r1
 800ed66:	4614      	mov	r4, r2
 800ed68:	461d      	mov	r5, r3
 800ed6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed6c:	ee07 3a90 	vmov	s15, r3
 800ed70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed74:	ee17 0a90 	vmov	r0, s15
 800ed78:	f7f1 fbe6 	bl	8000548 <__aeabi_f2d>
 800ed7c:	4602      	mov	r2, r0
 800ed7e:	460b      	mov	r3, r1
 800ed80:	4620      	mov	r0, r4
 800ed82:	4629      	mov	r1, r5
 800ed84:	f7f1 fd62 	bl	800084c <__aeabi_ddiv>
 800ed88:	4602      	mov	r2, r0
 800ed8a:	460b      	mov	r3, r1
 800ed8c:	4610      	mov	r0, r2
 800ed8e:	4619      	mov	r1, r3
 800ed90:	f7f1 ff0a 	bl	8000ba8 <__aeabi_d2f>
 800ed94:	4603      	mov	r3, r0
 800ed96:	62bb      	str	r3, [r7, #40]	@ 0x28
            dwTemp = (uint32_t)fTime;
 800ed98:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800ed9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eda0:	ee17 3a90 	vmov	r3, s15
 800eda4:	60bb      	str	r3, [r7, #8]
            dwValue |= (uint32_t)((dwTemp ) << TX_WAIT_CONFIG_TX_WAIT_VALUE_POS);
 800eda6:	68bb      	ldr	r3, [r7, #8]
 800eda8:	021b      	lsls	r3, r3, #8
 800edaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800edac:	4313      	orrs	r3, r2
 800edae:	633b      	str	r3, [r7, #48]	@ 0x30
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WriteRegister(pDataParams, TX_WAIT_CONFIG, dwValue));
 800edb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800edb2:	2117      	movs	r1, #23
 800edb4:	6878      	ldr	r0, [r7, #4]
 800edb6:	f7fe ff4f 	bl	800dc58 <phhalHw_Pn5180_WriteRegister>
 800edba:	4603      	mov	r3, r0
 800edbc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800edbe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	f001 80f6 	beq.w	800ffb2 <phhalHw_Pn5180_SetConfig+0x181a>
 800edc6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800edc8:	f001 b929 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WriteRegister(pDataParams, TX_WAIT_CONFIG, dwValue));
 800edcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800edce:	2117      	movs	r1, #23
 800edd0:	6878      	ldr	r0, [r7, #4]
 800edd2:	f7fe ff41 	bl	800dc58 <phhalHw_Pn5180_WriteRegister>
 800edd6:	4603      	mov	r3, r0
 800edd8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800edda:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eddc:	2b00      	cmp	r3, #0
 800edde:	f001 80e8 	beq.w	800ffb2 <phhalHw_Pn5180_SetConfig+0x181a>
 800ede2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ede4:	f001 b91b 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    case PHHAL_HW_CONFIG_RXWAIT_US:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800ede8:	887a      	ldrh	r2, [r7, #2]
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	322c      	adds	r2, #44	@ 0x2c
 800edee:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800edf2:	883a      	ldrh	r2, [r7, #0]
 800edf4:	429a      	cmp	r2, r3
 800edf6:	d105      	bne.n	800ee04 <phhalHw_Pn5180_SetConfig+0x66c>
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800edfe:	2b01      	cmp	r3, #1
 800ee00:	f001 80d9 	beq.w	800ffb6 <phhalHw_Pn5180_SetConfig+0x181e>
        {
            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800ee04:	887a      	ldrh	r2, [r7, #2]
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	322c      	adds	r2, #44	@ 0x2c
 800ee0a:	8839      	ldrh	r1, [r7, #0]
 800ee0c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

            /* Set Rx Wait(deaf) bits */
            dwValue = PHHAL_HW_PN5180_TR_RX_PRESCALAR;
 800ee10:	237f      	movs	r3, #127	@ 0x7f
 800ee12:	633b      	str	r3, [r7, #48]	@ 0x30
            dwTemp = wValue;
 800ee14:	883b      	ldrh	r3, [r7, #0]
 800ee16:	60bb      	str	r3, [r7, #8]
            if(0U != dwTemp)
 800ee18:	68bb      	ldr	r3, [r7, #8]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d043      	beq.n	800eea6 <phhalHw_Pn5180_SetConfig+0x70e>
            {
                fTime = (float32_t)(((float32_t)dwTemp * 13.56) / (float32_t)(dwValue));
 800ee1e:	68bb      	ldr	r3, [r7, #8]
 800ee20:	ee07 3a90 	vmov	s15, r3
 800ee24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ee28:	ee17 0a90 	vmov	r0, s15
 800ee2c:	f7f1 fb8c 	bl	8000548 <__aeabi_f2d>
 800ee30:	f60f 2334 	addw	r3, pc, #2612	@ 0xa34
 800ee34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee38:	f7f1 fbde 	bl	80005f8 <__aeabi_dmul>
 800ee3c:	4602      	mov	r2, r0
 800ee3e:	460b      	mov	r3, r1
 800ee40:	4614      	mov	r4, r2
 800ee42:	461d      	mov	r5, r3
 800ee44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee46:	ee07 3a90 	vmov	s15, r3
 800ee4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ee4e:	ee17 0a90 	vmov	r0, s15
 800ee52:	f7f1 fb79 	bl	8000548 <__aeabi_f2d>
 800ee56:	4602      	mov	r2, r0
 800ee58:	460b      	mov	r3, r1
 800ee5a:	4620      	mov	r0, r4
 800ee5c:	4629      	mov	r1, r5
 800ee5e:	f7f1 fcf5 	bl	800084c <__aeabi_ddiv>
 800ee62:	4602      	mov	r2, r0
 800ee64:	460b      	mov	r3, r1
 800ee66:	4610      	mov	r0, r2
 800ee68:	4619      	mov	r1, r3
 800ee6a:	f7f1 fe9d 	bl	8000ba8 <__aeabi_d2f>
 800ee6e:	4603      	mov	r3, r0
 800ee70:	62bb      	str	r3, [r7, #40]	@ 0x28
                dwTemp = (uint32_t)fTime;
 800ee72:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800ee76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ee7a:	ee17 3a90 	vmov	r3, s15
 800ee7e:	60bb      	str	r3, [r7, #8]
                dwValue |= (uint32_t)dwTemp << RX_WAIT_CONFIG_RX_WAIT_VALUE_POS;
 800ee80:	68bb      	ldr	r3, [r7, #8]
 800ee82:	021b      	lsls	r3, r3, #8
 800ee84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ee86:	4313      	orrs	r3, r2
 800ee88:	633b      	str	r3, [r7, #48]	@ 0x30
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, RX_WAIT_CONFIG, dwValue ));
 800ee8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ee8c:	2111      	movs	r1, #17
 800ee8e:	6878      	ldr	r0, [r7, #4]
 800ee90:	f002 faf0 	bl	8011474 <phhalHw_Pn5180_Instr_WriteRegister>
 800ee94:	4603      	mov	r3, r0
 800ee96:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ee98:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	f001 808b 	beq.w	800ffb6 <phhalHw_Pn5180_SetConfig+0x181e>
 800eea0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eea2:	f001 b8bc 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>
            }
            else
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, RX_WAIT_CONFIG, dwValue ));
 800eea6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eea8:	2111      	movs	r1, #17
 800eeaa:	6878      	ldr	r0, [r7, #4]
 800eeac:	f002 fae2 	bl	8011474 <phhalHw_Pn5180_Instr_WriteRegister>
 800eeb0:	4603      	mov	r3, r0
 800eeb2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800eeb4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	f001 807d 	beq.w	800ffb6 <phhalHw_Pn5180_SetConfig+0x181e>
 800eebc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eebe:	f001 b8ae 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    case PHHAL_HW_CONFIG_TXWAIT_US:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800eec2:	887a      	ldrh	r2, [r7, #2]
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	322c      	adds	r2, #44	@ 0x2c
 800eec8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800eecc:	883a      	ldrh	r2, [r7, #0]
 800eece:	429a      	cmp	r2, r3
 800eed0:	d105      	bne.n	800eede <phhalHw_Pn5180_SetConfig+0x746>
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800eed8:	2b01      	cmp	r3, #1
 800eeda:	f001 806e 	beq.w	800ffba <phhalHw_Pn5180_SetConfig+0x1822>
        {
            /* Write configuration data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800eede:	887a      	ldrh	r2, [r7, #2]
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	322c      	adds	r2, #44	@ 0x2c
 800eee4:	8839      	ldrh	r1, [r7, #0]
 800eee6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

            /* Set TxWait */
            fTime = 0.0;
 800eeea:	f04f 0300 	mov.w	r3, #0
 800eeee:	62bb      	str	r3, [r7, #40]	@ 0x28
            dwValue = PHHAL_HW_PN5180_TR_RX_PRESCALAR;
 800eef0:	237f      	movs	r3, #127	@ 0x7f
 800eef2:	633b      	str	r3, [r7, #48]	@ 0x30
            dwTemp = wValue;
 800eef4:	883b      	ldrh	r3, [r7, #0]
 800eef6:	60bb      	str	r3, [r7, #8]

            if(0U != dwTemp)
 800eef8:	68bb      	ldr	r3, [r7, #8]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d043      	beq.n	800ef86 <phhalHw_Pn5180_SetConfig+0x7ee>
            {
                fTime = (float32_t)(((float32_t)dwTemp * 13.56) / (float32_t)(dwValue));
 800eefe:	68bb      	ldr	r3, [r7, #8]
 800ef00:	ee07 3a90 	vmov	s15, r3
 800ef04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef08:	ee17 0a90 	vmov	r0, s15
 800ef0c:	f7f1 fb1c 	bl	8000548 <__aeabi_f2d>
 800ef10:	f60f 1354 	addw	r3, pc, #2388	@ 0x954
 800ef14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef18:	f7f1 fb6e 	bl	80005f8 <__aeabi_dmul>
 800ef1c:	4602      	mov	r2, r0
 800ef1e:	460b      	mov	r3, r1
 800ef20:	4614      	mov	r4, r2
 800ef22:	461d      	mov	r5, r3
 800ef24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef26:	ee07 3a90 	vmov	s15, r3
 800ef2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef2e:	ee17 0a90 	vmov	r0, s15
 800ef32:	f7f1 fb09 	bl	8000548 <__aeabi_f2d>
 800ef36:	4602      	mov	r2, r0
 800ef38:	460b      	mov	r3, r1
 800ef3a:	4620      	mov	r0, r4
 800ef3c:	4629      	mov	r1, r5
 800ef3e:	f7f1 fc85 	bl	800084c <__aeabi_ddiv>
 800ef42:	4602      	mov	r2, r0
 800ef44:	460b      	mov	r3, r1
 800ef46:	4610      	mov	r0, r2
 800ef48:	4619      	mov	r1, r3
 800ef4a:	f7f1 fe2d 	bl	8000ba8 <__aeabi_d2f>
 800ef4e:	4603      	mov	r3, r0
 800ef50:	62bb      	str	r3, [r7, #40]	@ 0x28
                dwTemp = (uint32_t)fTime;
 800ef52:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800ef56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ef5a:	ee17 3a90 	vmov	r3, s15
 800ef5e:	60bb      	str	r3, [r7, #8]
                dwValue |= (uint32_t)((dwTemp ) << TX_WAIT_CONFIG_TX_WAIT_VALUE_POS);
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	021b      	lsls	r3, r3, #8
 800ef64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ef66:	4313      	orrs	r3, r2
 800ef68:	633b      	str	r3, [r7, #48]	@ 0x30
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WriteRegister(pDataParams, TX_WAIT_CONFIG, dwValue));
 800ef6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ef6c:	2117      	movs	r1, #23
 800ef6e:	6878      	ldr	r0, [r7, #4]
 800ef70:	f7fe fe72 	bl	800dc58 <phhalHw_Pn5180_WriteRegister>
 800ef74:	4603      	mov	r3, r0
 800ef76:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ef78:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	f001 801d 	beq.w	800ffba <phhalHw_Pn5180_SetConfig+0x1822>
 800ef80:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ef82:	f001 b84c 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>
            }
            else
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WriteRegister(pDataParams, TX_WAIT_CONFIG, dwValue));
 800ef86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ef88:	2117      	movs	r1, #23
 800ef8a:	6878      	ldr	r0, [r7, #4]
 800ef8c:	f7fe fe64 	bl	800dc58 <phhalHw_Pn5180_WriteRegister>
 800ef90:	4603      	mov	r3, r0
 800ef92:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ef94:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	f001 800f 	beq.w	800ffba <phhalHw_Pn5180_SetConfig+0x1822>
 800ef9c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ef9e:	f001 b83e 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    case PHHAL_HW_CONFIG_MODINDEX:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800efa2:	887a      	ldrh	r2, [r7, #2]
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	322c      	adds	r2, #44	@ 0x2c
 800efa8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800efac:	883a      	ldrh	r2, [r7, #0]
 800efae:	429a      	cmp	r2, r3
 800efb0:	d105      	bne.n	800efbe <phhalHw_Pn5180_SetConfig+0x826>
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800efb8:	2b01      	cmp	r3, #1
 800efba:	f001 8000 	beq.w	800ffbe <phhalHw_Pn5180_SetConfig+0x1826>
        {
            /* Parameter checking */
            if (wValue > 0x1FU)
 800efbe:	883b      	ldrh	r3, [r7, #0]
 800efc0:	2b1f      	cmp	r3, #31
 800efc2:	d903      	bls.n	800efcc <phhalHw_Pn5180_SetConfig+0x834>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800efc4:	f240 2321 	movw	r3, #545	@ 0x221
 800efc8:	f001 b829 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>
            }

            wSizeOfRegTypeValueSets = 0U;
 800efcc:	2300      	movs	r3, #0
 800efce:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /*Clear the Bits of ANA_RF_CONTROL_TX_TX_RESIDUAL_CARRIER_MASK*/
            dwTemp = (uint32_t) ~( ANA_RF_CONTROL_TX_TX_RESIDUAL_CARRIER_MASK );
 800efd0:	f46f 3378 	mvn.w	r3, #253952	@ 0x3e000
 800efd4:	60bb      	str	r3, [r7, #8]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = ANA_RF_CONTROL_TX;
 800efd6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800efd8:	1c5a      	adds	r2, r3, #1
 800efda:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800efdc:	3338      	adds	r3, #56	@ 0x38
 800efde:	443b      	add	r3, r7
 800efe0:	2220      	movs	r2, #32
 800efe2:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 800efe6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800efe8:	1c5a      	adds	r2, r3, #1
 800efea:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800efec:	3338      	adds	r3, #56	@ 0x38
 800efee:	443b      	add	r3, r7
 800eff0:	2203      	movs	r2, #3
 800eff2:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800eff6:	68ba      	ldr	r2, [r7, #8]
 800eff8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800effa:	1c59      	adds	r1, r3, #1
 800effc:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800effe:	b2d2      	uxtb	r2, r2
 800f000:	3338      	adds	r3, #56	@ 0x38
 800f002:	443b      	add	r3, r7
 800f004:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800f008:	68bb      	ldr	r3, [r7, #8]
 800f00a:	0a1a      	lsrs	r2, r3, #8
 800f00c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f00e:	1c59      	adds	r1, r3, #1
 800f010:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800f012:	b2d2      	uxtb	r2, r2
 800f014:	3338      	adds	r3, #56	@ 0x38
 800f016:	443b      	add	r3, r7
 800f018:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800f01c:	68bb      	ldr	r3, [r7, #8]
 800f01e:	0c1a      	lsrs	r2, r3, #16
 800f020:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f022:	1c59      	adds	r1, r3, #1
 800f024:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800f026:	b2d2      	uxtb	r2, r2
 800f028:	3338      	adds	r3, #56	@ 0x38
 800f02a:	443b      	add	r3, r7
 800f02c:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800f030:	68bb      	ldr	r3, [r7, #8]
 800f032:	0e1a      	lsrs	r2, r3, #24
 800f034:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f036:	1c59      	adds	r1, r3, #1
 800f038:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800f03a:	b2d2      	uxtb	r2, r2
 800f03c:	3338      	adds	r3, #56	@ 0x38
 800f03e:	443b      	add	r3, r7
 800f040:	f803 2c2c 	strb.w	r2, [r3, #-44]

            /*Set the new value  */
            dwTemp = (uint32_t)((wValue << ANA_RF_CONTROL_TX_TX_RESIDUAL_CARRIER_POS) & ANA_RF_CONTROL_TX_TX_RESIDUAL_CARRIER_MASK);
 800f044:	883b      	ldrh	r3, [r7, #0]
 800f046:	035b      	lsls	r3, r3, #13
 800f048:	f403 3378 	and.w	r3, r3, #253952	@ 0x3e000
 800f04c:	60bb      	str	r3, [r7, #8]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = ANA_RF_CONTROL_TX;
 800f04e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f050:	1c5a      	adds	r2, r3, #1
 800f052:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800f054:	3338      	adds	r3, #56	@ 0x38
 800f056:	443b      	add	r3, r7
 800f058:	2220      	movs	r2, #32
 800f05a:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 800f05e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f060:	1c5a      	adds	r2, r3, #1
 800f062:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800f064:	3338      	adds	r3, #56	@ 0x38
 800f066:	443b      	add	r3, r7
 800f068:	2202      	movs	r2, #2
 800f06a:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800f06e:	68ba      	ldr	r2, [r7, #8]
 800f070:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f072:	1c59      	adds	r1, r3, #1
 800f074:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800f076:	b2d2      	uxtb	r2, r2
 800f078:	3338      	adds	r3, #56	@ 0x38
 800f07a:	443b      	add	r3, r7
 800f07c:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800f080:	68bb      	ldr	r3, [r7, #8]
 800f082:	0a1a      	lsrs	r2, r3, #8
 800f084:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f086:	1c59      	adds	r1, r3, #1
 800f088:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800f08a:	b2d2      	uxtb	r2, r2
 800f08c:	3338      	adds	r3, #56	@ 0x38
 800f08e:	443b      	add	r3, r7
 800f090:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800f094:	68bb      	ldr	r3, [r7, #8]
 800f096:	0c1a      	lsrs	r2, r3, #16
 800f098:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f09a:	1c59      	adds	r1, r3, #1
 800f09c:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800f09e:	b2d2      	uxtb	r2, r2
 800f0a0:	3338      	adds	r3, #56	@ 0x38
 800f0a2:	443b      	add	r3, r7
 800f0a4:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800f0a8:	68bb      	ldr	r3, [r7, #8]
 800f0aa:	0e1a      	lsrs	r2, r3, #24
 800f0ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f0ae:	1c59      	adds	r1, r3, #1
 800f0b0:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800f0b2:	b2d2      	uxtb	r2, r2
 800f0b4:	3338      	adds	r3, #56	@ 0x38
 800f0b6:	443b      	add	r3, r7
 800f0b8:	f803 2c2c 	strb.w	r2, [r3, #-44]

            /*Send the array to the IC*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 800f0bc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800f0be:	f107 030c 	add.w	r3, r7, #12
 800f0c2:	4619      	mov	r1, r3
 800f0c4:	6878      	ldr	r0, [r7, #4]
 800f0c6:	f002 fb37 	bl	8011738 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 800f0ca:	4603      	mov	r3, r0
 800f0cc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f0ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d002      	beq.n	800f0da <phhalHw_Pn5180_SetConfig+0x942>
 800f0d4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f0d6:	f000 bfa2 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>

            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800f0da:	887a      	ldrh	r2, [r7, #2]
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	322c      	adds	r2, #44	@ 0x2c
 800f0e0:	8839      	ldrh	r1, [r7, #0]
 800f0e2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        break;
 800f0e6:	f000 bf6a 	b.w	800ffbe <phhalHw_Pn5180_SetConfig+0x1826>

    case PHHAL_HW_CONFIG_DISABLE_MF_CRYPTO1:
        /* Disable crypto, enabling is not supported */
        if ((wValue != PH_OFF) && ( pDataParams->bMfcCryptoEnabled == PH_ON))
 800f0ea:	883b      	ldrh	r3, [r7, #0]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	f000 8768 	beq.w	800ffc2 <phhalHw_Pn5180_SetConfig+0x182a>
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f0f8:	2b01      	cmp	r3, #1
 800f0fa:	f040 8762 	bne.w	800ffc2 <phhalHw_Pn5180_SetConfig+0x182a>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, SYSTEM_CONFIG, (uint32_t)(~(SYSTEM_CONFIG_MFC_CRYPTO_ON_MASK))));
 800f0fe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800f102:	2100      	movs	r1, #0
 800f104:	6878      	ldr	r0, [r7, #4]
 800f106:	f002 faa1 	bl	801164c <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800f10a:	4603      	mov	r3, r0
 800f10c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f10e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f110:	2b00      	cmp	r3, #0
 800f112:	d002      	beq.n	800f11a <phhalHw_Pn5180_SetConfig+0x982>
 800f114:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f116:	f000 bf82 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>
            pDataParams->bMfcCryptoEnabled = PH_OFF;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	2200      	movs	r2, #0
 800f11e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        }
        break;
 800f122:	f000 bf4e 	b.w	800ffc2 <phhalHw_Pn5180_SetConfig+0x182a>

    case PHHAL_HW_CONFIG_TXBUFFER_OFFSET:

        /* Modify additional info parameter */
        pDataParams->wAdditionalInfo = wValue + PHHAL_HW_PN5180_EXCHANGE_HEADER_SIZE;
 800f126:	883b      	ldrh	r3, [r7, #0]
 800f128:	3302      	adds	r3, #2
 800f12a:	b29a      	uxth	r2, r3
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	861a      	strh	r2, [r3, #48]	@ 0x30
#ifndef PN5180_P2P_HW_SYNC_BYTE
        if(pDataParams->bNfcipMode == PH_ON)
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800f136:	2b01      	cmp	r3, #1
 800f138:	f040 8745 	bne.w	800ffc6 <phhalHw_Pn5180_SetConfig+0x182e>
        {
             pDataParams->wAdditionalInfo += 1U;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800f140:	3301      	adds	r3, #1
 800f142:	b29a      	uxth	r2, r3
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	861a      	strh	r2, [r3, #48]	@ 0x30
        }
#endif
        break;
 800f148:	f000 bf3d 	b.w	800ffc6 <phhalHw_Pn5180_SetConfig+0x182e>

    case PHHAL_HW_CONFIG_RXBUFFER_STARTPOS:

        /* Retrieve RxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetRxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 800f14c:	f107 0118 	add.w	r1, r7, #24
 800f150:	f107 021c 	add.w	r2, r7, #28
 800f154:	f107 031a 	add.w	r3, r7, #26
 800f158:	9300      	str	r3, [sp, #0]
 800f15a:	460b      	mov	r3, r1
 800f15c:	2101      	movs	r1, #1
 800f15e:	6878      	ldr	r0, [r7, #4]
 800f160:	f003 f995 	bl	801248e <phhalHw_Pn5180_GetRxBuffer>
 800f164:	4603      	mov	r3, r0
 800f166:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f168:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d002      	beq.n	800f174 <phhalHw_Pn5180_SetConfig+0x9dc>
 800f16e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f170:	f000 bf55 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>

        /* Boundary check */
        if (wValue >= pDataParams->wRxBufSize)
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	8b1b      	ldrh	r3, [r3, #24]
 800f178:	883a      	ldrh	r2, [r7, #0]
 800f17a:	429a      	cmp	r2, r3
 800f17c:	d303      	bcc.n	800f186 <phhalHw_Pn5180_SetConfig+0x9ee>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 800f17e:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800f182:	f000 bf4c 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* Set start position */
        pDataParams->wRxBufStartPos = wValue;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	883a      	ldrh	r2, [r7, #0]
 800f18a:	83da      	strh	r2, [r3, #30]
        break;
 800f18c:	f000 bf46 	b.w	801001c <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_TXBUFFER_LENGTH:

        /* Retrieve TxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetTxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 800f190:	f107 0118 	add.w	r1, r7, #24
 800f194:	f107 021c 	add.w	r2, r7, #28
 800f198:	f107 031a 	add.w	r3, r7, #26
 800f19c:	9300      	str	r3, [sp, #0]
 800f19e:	460b      	mov	r3, r1
 800f1a0:	2101      	movs	r1, #1
 800f1a2:	6878      	ldr	r0, [r7, #4]
 800f1a4:	f003 f937 	bl	8012416 <phhalHw_Pn5180_GetTxBuffer>
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f1ac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d002      	beq.n	800f1b8 <phhalHw_Pn5180_SetConfig+0xa20>
 800f1b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f1b4:	f000 bf33 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>

        /* Check parameter, must not exceed TxBufferSize */
        if (wValue > pDataParams->wTxBufSize)
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	8a1b      	ldrh	r3, [r3, #16]
 800f1bc:	883a      	ldrh	r2, [r7, #0]
 800f1be:	429a      	cmp	r2, r3
 800f1c0:	d903      	bls.n	800f1ca <phhalHw_Pn5180_SetConfig+0xa32>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 800f1c2:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800f1c6:	f000 bf2a 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* set buffer length */
        pDataParams->wTxBufLen = wValue;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	883a      	ldrh	r2, [r7, #0]
 800f1ce:	825a      	strh	r2, [r3, #18]
        break;
 800f1d0:	f000 bf24 	b.w	801001c <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_TXBUFFER:

        /* Retrieve TxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetTxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 800f1d4:	f107 0118 	add.w	r1, r7, #24
 800f1d8:	f107 021c 	add.w	r2, r7, #28
 800f1dc:	f107 031a 	add.w	r3, r7, #26
 800f1e0:	9300      	str	r3, [sp, #0]
 800f1e2:	460b      	mov	r3, r1
 800f1e4:	2101      	movs	r1, #1
 800f1e6:	6878      	ldr	r0, [r7, #4]
 800f1e8:	f003 f915 	bl	8012416 <phhalHw_Pn5180_GetTxBuffer>
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f1f0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d002      	beq.n	800f1fc <phhalHw_Pn5180_SetConfig+0xa64>
 800f1f6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f1f8:	f000 bf11 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>

        /* Check parameter, must not exceed TxBufferSize */
        if (pDataParams->wAdditionalInfo >= pDataParams->wTxBufSize)
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	8a1b      	ldrh	r3, [r3, #16]
 800f204:	429a      	cmp	r2, r3
 800f206:	d303      	bcc.n	800f210 <phhalHw_Pn5180_SetConfig+0xa78>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 800f208:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800f20c:	f000 bf07 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* Modify TxBuffer byte */
        pBuffer[pDataParams->wAdditionalInfo] = (uint8_t)wValue;
 800f210:	69fb      	ldr	r3, [r7, #28]
 800f212:	687a      	ldr	r2, [r7, #4]
 800f214:	8e12      	ldrh	r2, [r2, #48]	@ 0x30
 800f216:	4413      	add	r3, r2
 800f218:	883a      	ldrh	r2, [r7, #0]
 800f21a:	b2d2      	uxtb	r2, r2
 800f21c:	701a      	strb	r2, [r3, #0]
        break;
 800f21e:	f000 befd 	b.w	801001c <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_TXDATARATE_FRAMING:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800f222:	887a      	ldrh	r2, [r7, #2]
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	322c      	adds	r2, #44	@ 0x2c
 800f228:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800f22c:	883a      	ldrh	r2, [r7, #0]
 800f22e:	429a      	cmp	r2, r3
 800f230:	d105      	bne.n	800f23e <phhalHw_Pn5180_SetConfig+0xaa6>
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f238:	2b01      	cmp	r3, #1
 800f23a:	f000 86c6 	beq.w	800ffca <phhalHw_Pn5180_SetConfig+0x1832>
        {
            /* Update the framing, based on the Higher byte */
            wFraming = wValue & PHHAL_HW_RF_FRAMING_OPTION_MASK;
 800f23e:	883b      	ldrh	r3, [r7, #0]
 800f240:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800f244:	847b      	strh	r3, [r7, #34]	@ 0x22
            wFraming = wFraming >> 0x08U;
 800f246:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f248:	0a1b      	lsrs	r3, r3, #8
 800f24a:	847b      	strh	r3, [r7, #34]	@ 0x22

            if((wFraming != PHHAL_HW_CARDTYPE_CURRENT) && (wFraming != pDataParams->bCardType))
 800f24c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d011      	beq.n	800f276 <phhalHw_Pn5180_SetConfig+0xade>
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f258:	461a      	mov	r2, r3
 800f25a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f25c:	4293      	cmp	r3, r2
 800f25e:	d00a      	beq.n	800f276 <phhalHw_Pn5180_SetConfig+0xade>
            {
                if((wValue & PHHAL_HW_RF_FRAMING_OPTION_MASK) != PHHAL_HW_RF_TYPE_ACTIVE_FRAMING)
 800f260:	883b      	ldrh	r3, [r7, #0]
 800f262:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800f266:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f26a:	d004      	beq.n	800f276 <phhalHw_Pn5180_SetConfig+0xade>
                {
                    pDataParams->bCardType = (uint8_t)wFraming;
 800f26c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f26e:	b2da      	uxtb	r2, r3
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                }
            }

            /* Update the Baudrate based on the lower byte */
            wValue = wValue & PHHAL_HW_RF_DATARATE_OPTION_MASK;
 800f276:	883b      	ldrh	r3, [r7, #0]
 800f278:	b2db      	uxtb	r3, r3
 800f27a:	803b      	strh	r3, [r7, #0]

            if(pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693)
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f282:	2b04      	cmp	r3, #4
 800f284:	d104      	bne.n	800f290 <phhalHw_Pn5180_SetConfig+0xaf8>
            {
                wTmpValue = wValue;
 800f286:	883b      	ldrh	r3, [r7, #0]
 800f288:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                wValue = PHHAL_HW_RF_TX_DATARATE_1_OUT_OF_4;
 800f28a:	230b      	movs	r3, #11
 800f28c:	803b      	strh	r3, [r7, #0]
 800f28e:	e00f      	b.n	800f2b0 <phhalHw_Pn5180_SetConfig+0xb18>
            }
            else
            {
                /* Evaluate hardware settings */
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetCardMode(
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800f296:	8839      	ldrh	r1, [r7, #0]
 800f298:	22ff      	movs	r2, #255	@ 0xff
 800f29a:	6878      	ldr	r0, [r7, #4]
 800f29c:	f003 fd40 	bl	8012d20 <phhalHw_Pn5180_SetCardMode>
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f2a4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d002      	beq.n	800f2b0 <phhalHw_Pn5180_SetConfig+0xb18>
 800f2aa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f2ac:	f000 beb7 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>
                    PHHAL_HW_RF_DATARATE_NO_CHANGE,
                    pDataParams->wCfgShadow[PHHAL_HW_CONFIG_SUBCARRIER]));
            }

            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800f2b0:	887a      	ldrh	r2, [r7, #2]
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	322c      	adds	r2, #44	@ 0x2c
 800f2b6:	8839      	ldrh	r1, [r7, #0]
 800f2b8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

            if((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wTmpValue == PHHAL_HW_RF_TX_DATARATE_1_OUT_OF_4))
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f2c2:	2b04      	cmp	r3, #4
 800f2c4:	d11d      	bne.n	800f302 <phhalHw_Pn5180_SetConfig+0xb6a>
 800f2c6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f2c8:	2b0b      	cmp	r3, #11
 800f2ca:	d11a      	bne.n	800f302 <phhalHw_Pn5180_SetConfig+0xb6a>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_SYMBOL23_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX26_SYMBOL23));
 800f2cc:	2204      	movs	r2, #4
 800f2ce:	2142      	movs	r1, #66	@ 0x42
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f002 f8cf 	bl	8011474 <phhalHw_Pn5180_Instr_WriteRegister>
 800f2d6:	4603      	mov	r3, r0
 800f2d8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f2da:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d002      	beq.n	800f2e6 <phhalHw_Pn5180_SetConfig+0xb4e>
 800f2e0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f2e2:	f000 be9c 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_DATA_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX26_DATA_MOD));
 800f2e6:	2243      	movs	r2, #67	@ 0x43
 800f2e8:	213b      	movs	r1, #59	@ 0x3b
 800f2ea:	6878      	ldr	r0, [r7, #4]
 800f2ec:	f002 f8c2 	bl	8011474 <phhalHw_Pn5180_Instr_WriteRegister>
 800f2f0:	4603      	mov	r3, r0
 800f2f2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f2f4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	f000 8081 	beq.w	800f3fe <phhalHw_Pn5180_SetConfig+0xc66>
 800f2fc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f2fe:	f000 be8e 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>
            }
            else if((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wTmpValue == PHHAL_HW_RF_I15693_53KBPS_DATARATE))
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f308:	2b04      	cmp	r3, #4
 800f30a:	d123      	bne.n	800f354 <phhalHw_Pn5180_SetConfig+0xbbc>
 800f30c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f30e:	2b1b      	cmp	r3, #27
 800f310:	d120      	bne.n	800f354 <phhalHw_Pn5180_SetConfig+0xbbc>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_SYMBOL23_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX53_SYMBOL23));
 800f312:	2205      	movs	r2, #5
 800f314:	2142      	movs	r1, #66	@ 0x42
 800f316:	6878      	ldr	r0, [r7, #4]
 800f318:	f002 f8ac 	bl	8011474 <phhalHw_Pn5180_Instr_WriteRegister>
 800f31c:	4603      	mov	r3, r0
 800f31e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f320:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f322:	2b00      	cmp	r3, #0
 800f324:	d002      	beq.n	800f32c <phhalHw_Pn5180_SetConfig+0xb94>
 800f326:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f328:	f000 be79 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_DATA_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX53_DATA_MOD));
 800f32c:	2244      	movs	r2, #68	@ 0x44
 800f32e:	213b      	movs	r1, #59	@ 0x3b
 800f330:	6878      	ldr	r0, [r7, #4]
 800f332:	f002 f89f 	bl	8011474 <phhalHw_Pn5180_Instr_WriteRegister>
 800f336:	4603      	mov	r3, r0
 800f338:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f33a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d002      	beq.n	800f346 <phhalHw_Pn5180_SetConfig+0xbae>
 800f340:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f342:	f000 be6c 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>
                pDataParams->wCfgShadow[wConfig] = wTmpValue;
 800f346:	887a      	ldrh	r2, [r7, #2]
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	322c      	adds	r2, #44	@ 0x2c
 800f34c:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 800f34e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800f352:	e054      	b.n	800f3fe <phhalHw_Pn5180_SetConfig+0xc66>
            }
            else if((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wTmpValue == PHHAL_HW_RF_DATARATE_106))
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f35a:	2b04      	cmp	r3, #4
 800f35c:	d123      	bne.n	800f3a6 <phhalHw_Pn5180_SetConfig+0xc0e>
 800f35e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f360:	2b00      	cmp	r3, #0
 800f362:	d120      	bne.n	800f3a6 <phhalHw_Pn5180_SetConfig+0xc0e>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_SYMBOL23_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX106_SYMBOL23));
 800f364:	2206      	movs	r2, #6
 800f366:	2142      	movs	r1, #66	@ 0x42
 800f368:	6878      	ldr	r0, [r7, #4]
 800f36a:	f002 f883 	bl	8011474 <phhalHw_Pn5180_Instr_WriteRegister>
 800f36e:	4603      	mov	r3, r0
 800f370:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f372:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f374:	2b00      	cmp	r3, #0
 800f376:	d002      	beq.n	800f37e <phhalHw_Pn5180_SetConfig+0xbe6>
 800f378:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f37a:	f000 be50 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_DATA_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX106_DATA_MOD));
 800f37e:	2245      	movs	r2, #69	@ 0x45
 800f380:	213b      	movs	r1, #59	@ 0x3b
 800f382:	6878      	ldr	r0, [r7, #4]
 800f384:	f002 f876 	bl	8011474 <phhalHw_Pn5180_Instr_WriteRegister>
 800f388:	4603      	mov	r3, r0
 800f38a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f38c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d002      	beq.n	800f398 <phhalHw_Pn5180_SetConfig+0xc00>
 800f392:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f394:	f000 be43 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>
                pDataParams->wCfgShadow[wConfig] = wTmpValue;
 800f398:	887a      	ldrh	r2, [r7, #2]
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	322c      	adds	r2, #44	@ 0x2c
 800f39e:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 800f3a0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800f3a4:	e02b      	b.n	800f3fe <phhalHw_Pn5180_SetConfig+0xc66>
            }
            else if((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wTmpValue == PHHAL_HW_RF_DATARATE_212))
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f3ac:	2b04      	cmp	r3, #4
 800f3ae:	f040 860c 	bne.w	800ffca <phhalHw_Pn5180_SetConfig+0x1832>
 800f3b2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f3b4:	2b01      	cmp	r3, #1
 800f3b6:	f040 8608 	bne.w	800ffca <phhalHw_Pn5180_SetConfig+0x1832>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_SYMBOL23_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX212_SYMBOL23));
 800f3ba:	2207      	movs	r2, #7
 800f3bc:	2142      	movs	r1, #66	@ 0x42
 800f3be:	6878      	ldr	r0, [r7, #4]
 800f3c0:	f002 f858 	bl	8011474 <phhalHw_Pn5180_Instr_WriteRegister>
 800f3c4:	4603      	mov	r3, r0
 800f3c6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f3c8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d002      	beq.n	800f3d4 <phhalHw_Pn5180_SetConfig+0xc3c>
 800f3ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f3d0:	f000 be25 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_DATA_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX212_DATA_MOD));
 800f3d4:	2246      	movs	r2, #70	@ 0x46
 800f3d6:	213b      	movs	r1, #59	@ 0x3b
 800f3d8:	6878      	ldr	r0, [r7, #4]
 800f3da:	f002 f84b 	bl	8011474 <phhalHw_Pn5180_Instr_WriteRegister>
 800f3de:	4603      	mov	r3, r0
 800f3e0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f3e2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d002      	beq.n	800f3ee <phhalHw_Pn5180_SetConfig+0xc56>
 800f3e8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f3ea:	f000 be18 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>
                pDataParams->wCfgShadow[wConfig] = wTmpValue;
 800f3ee:	887a      	ldrh	r2, [r7, #2]
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	322c      	adds	r2, #44	@ 0x2c
 800f3f4:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 800f3f6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            else
            {
                /* To avoid the warning */
            }
        }
        break;
 800f3fa:	f000 bde6 	b.w	800ffca <phhalHw_Pn5180_SetConfig+0x1832>
 800f3fe:	f000 bde4 	b.w	800ffca <phhalHw_Pn5180_SetConfig+0x1832>

    case PHHAL_HW_CONFIG_RXDATARATE_FRAMING:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800f402:	887a      	ldrh	r2, [r7, #2]
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	322c      	adds	r2, #44	@ 0x2c
 800f408:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800f40c:	883a      	ldrh	r2, [r7, #0]
 800f40e:	429a      	cmp	r2, r3
 800f410:	d105      	bne.n	800f41e <phhalHw_Pn5180_SetConfig+0xc86>
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f418:	2b01      	cmp	r3, #1
 800f41a:	f000 85d8 	beq.w	800ffce <phhalHw_Pn5180_SetConfig+0x1836>
        {
            /* Update teh framing, based on the Higher byte */
            wFraming = wValue & PHHAL_HW_RF_FRAMING_OPTION_MASK;
 800f41e:	883b      	ldrh	r3, [r7, #0]
 800f420:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800f424:	847b      	strh	r3, [r7, #34]	@ 0x22
            wFraming = wFraming >> 0x08U;
 800f426:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f428:	0a1b      	lsrs	r3, r3, #8
 800f42a:	847b      	strh	r3, [r7, #34]	@ 0x22

            if((wFraming != PHHAL_HW_CARDTYPE_CURRENT) && (wFraming != pDataParams->bCardType))
 800f42c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d011      	beq.n	800f456 <phhalHw_Pn5180_SetConfig+0xcbe>
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f438:	461a      	mov	r2, r3
 800f43a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f43c:	4293      	cmp	r3, r2
 800f43e:	d00a      	beq.n	800f456 <phhalHw_Pn5180_SetConfig+0xcbe>
            {
                if((wValue & PHHAL_HW_RF_FRAMING_OPTION_MASK) != PHHAL_HW_RF_TYPE_ACTIVE_FRAMING)
 800f440:	883b      	ldrh	r3, [r7, #0]
 800f442:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800f446:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f44a:	d004      	beq.n	800f456 <phhalHw_Pn5180_SetConfig+0xcbe>
                {
                    pDataParams->bCardType = (uint8_t)wFraming;
 800f44c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f44e:	b2da      	uxtb	r2, r3
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                }
            }

            /* Update the Baudrate based on the lower byte */
            wValue = wValue & PHHAL_HW_RF_DATARATE_OPTION_MASK;
 800f456:	883b      	ldrh	r3, [r7, #0]
 800f458:	b2db      	uxtb	r3, r3
 800f45a:	803b      	strh	r3, [r7, #0]

            if((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wValue == PHHAL_HW_RF_DATARATE_106))
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f462:	2b04      	cmp	r3, #4
 800f464:	d106      	bne.n	800f474 <phhalHw_Pn5180_SetConfig+0xcdc>
 800f466:	883b      	ldrh	r3, [r7, #0]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d103      	bne.n	800f474 <phhalHw_Pn5180_SetConfig+0xcdc>
            {
                wTmpValue = wValue;
 800f46c:	883b      	ldrh	r3, [r7, #0]
 800f46e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                wValue = PHHAL_HW_RF_RX_DATARATE_FAST_HIGH;
 800f470:	230f      	movs	r3, #15
 800f472:	803b      	strh	r3, [r7, #0]
            }

            /* Evaluate hardware settings */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetCardMode(
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800f47a:	883a      	ldrh	r2, [r7, #0]
 800f47c:	21ff      	movs	r1, #255	@ 0xff
 800f47e:	6878      	ldr	r0, [r7, #4]
 800f480:	f003 fc4e 	bl	8012d20 <phhalHw_Pn5180_SetCardMode>
 800f484:	4603      	mov	r3, r0
 800f486:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f488:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d002      	beq.n	800f494 <phhalHw_Pn5180_SetConfig+0xcfc>
 800f48e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f490:	f000 bdc5 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>
                PHHAL_HW_RF_DATARATE_NO_CHANGE,
                wValue,
                pDataParams->wCfgShadow[PHHAL_HW_CONFIG_SUBCARRIER]));

            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800f494:	887a      	ldrh	r2, [r7, #2]
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	322c      	adds	r2, #44	@ 0x2c
 800f49a:	8839      	ldrh	r1, [r7, #0]
 800f49c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

            if((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wTmpValue == PHHAL_HW_RF_DATARATE_106))
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f4a6:	2b04      	cmp	r3, #4
 800f4a8:	f040 8591 	bne.w	800ffce <phhalHw_Pn5180_SetConfig+0x1836>
 800f4ac:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	f040 858d 	bne.w	800ffce <phhalHw_Pn5180_SetConfig+0x1836>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_ReadRegister(pDataParams, SIGPRO_CONFIG, &dwTemp));
 800f4b4:	f107 0308 	add.w	r3, r7, #8
 800f4b8:	461a      	mov	r2, r3
 800f4ba:	211a      	movs	r1, #26
 800f4bc:	6878      	ldr	r0, [r7, #4]
 800f4be:	f002 f9ed 	bl	801189c <phhalHw_Pn5180_Instr_ReadRegister>
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f4c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d002      	beq.n	800f4d2 <phhalHw_Pn5180_SetConfig+0xd3a>
 800f4cc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f4ce:	f000 bda6 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>
                dwTemp = dwTemp & PHHAL_HW_15693_RX106_BAUDRATE_MASK;
 800f4d2:	68ba      	ldr	r2, [r7, #8]
 800f4d4:	f64f 73f8 	movw	r3, #65528	@ 0xfff8
 800f4d8:	4013      	ands	r3, r2
 800f4da:	60bb      	str	r3, [r7, #8]
                dwTemp = dwTemp | PHHAL_HW_15693_RX106_BAUDRATE_VALUE;
 800f4dc:	68bb      	ldr	r3, [r7, #8]
 800f4de:	f043 0304 	orr.w	r3, r3, #4
 800f4e2:	60bb      	str	r3, [r7, #8]
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, SIGPRO_CONFIG, (uint32_t)dwTemp));
 800f4e4:	68bb      	ldr	r3, [r7, #8]
 800f4e6:	461a      	mov	r2, r3
 800f4e8:	211a      	movs	r1, #26
 800f4ea:	6878      	ldr	r0, [r7, #4]
 800f4ec:	f001 ffc2 	bl	8011474 <phhalHw_Pn5180_Instr_WriteRegister>
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f4f4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d002      	beq.n	800f500 <phhalHw_Pn5180_SetConfig+0xd68>
 800f4fa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f4fc:	f000 bd8f 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>

                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_ReadRegister(pDataParams, SIGPRO_RM_CONFIG, &dwTemp));
 800f500:	f107 0308 	add.w	r3, r7, #8
 800f504:	461a      	mov	r2, r3
 800f506:	211c      	movs	r1, #28
 800f508:	6878      	ldr	r0, [r7, #4]
 800f50a:	f002 f9c7 	bl	801189c <phhalHw_Pn5180_Instr_ReadRegister>
 800f50e:	4603      	mov	r3, r0
 800f510:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f512:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f514:	2b00      	cmp	r3, #0
 800f516:	d002      	beq.n	800f51e <phhalHw_Pn5180_SetConfig+0xd86>
 800f518:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f51a:	f000 bd80 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>
                dwTemp = dwTemp & PHHAL_HW_15693_RX106_CORRSPEED;
 800f51e:	68ba      	ldr	r2, [r7, #8]
 800f520:	f64f 73cf 	movw	r3, #65487	@ 0xffcf
 800f524:	4013      	ands	r3, r2
 800f526:	60bb      	str	r3, [r7, #8]
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, SIGPRO_RM_CONFIG, (uint32_t)dwTemp));
 800f528:	68bb      	ldr	r3, [r7, #8]
 800f52a:	461a      	mov	r2, r3
 800f52c:	211c      	movs	r1, #28
 800f52e:	6878      	ldr	r0, [r7, #4]
 800f530:	f001 ffa0 	bl	8011474 <phhalHw_Pn5180_Instr_WriteRegister>
 800f534:	4603      	mov	r3, r0
 800f536:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f538:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d002      	beq.n	800f544 <phhalHw_Pn5180_SetConfig+0xdac>
 800f53e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f540:	f000 bd6d 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>

                /* Write config data into shadow */
                pDataParams->wCfgShadow[wConfig] = wTmpValue;
 800f544:	887a      	ldrh	r2, [r7, #2]
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	322c      	adds	r2, #44	@ 0x2c
 800f54a:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 800f54c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            }
        }
        break;
 800f550:	f000 bd3d 	b.w	800ffce <phhalHw_Pn5180_SetConfig+0x1836>

    case PHHAL_HW_CONFIG_TIMEOUT_VALUE_US:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bTimeoutUnit != PHHAL_HW_TIME_MICROSECONDS) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800f554:	887a      	ldrh	r2, [r7, #2]
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	322c      	adds	r2, #44	@ 0x2c
 800f55a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800f55e:	883a      	ldrh	r2, [r7, #0]
 800f560:	429a      	cmp	r2, r3
 800f562:	d10a      	bne.n	800f57a <phhalHw_Pn5180_SetConfig+0xde2>
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d105      	bne.n	800f57a <phhalHw_Pn5180_SetConfig+0xde2>
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f574:	2b01      	cmp	r3, #1
 800f576:	f000 852c 	beq.w	800ffd2 <phhalHw_Pn5180_SetConfig+0x183a>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp,
 800f57a:	883b      	ldrh	r3, [r7, #0]
 800f57c:	2200      	movs	r2, #0
 800f57e:	4619      	mov	r1, r3
 800f580:	6878      	ldr	r0, [r7, #4]
 800f582:	f003 fec3 	bl	801330c <phhalHw_Pn5180_SetTmo>
 800f586:	4603      	mov	r3, r0
 800f588:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f58a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d002      	beq.n	800f596 <phhalHw_Pn5180_SetConfig+0xdfe>
 800f590:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f592:	f000 bd44 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>
                                 phhalHw_Pn5180_SetTmo(
                                         pDataParams,
                                         wValue,
                                         PHHAL_HW_TIME_MICROSECONDS));
            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800f596:	887a      	ldrh	r2, [r7, #2]
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	322c      	adds	r2, #44	@ 0x2c
 800f59c:	8839      	ldrh	r1, [r7, #0]
 800f59e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            pDataParams->bTimeoutUnit = PHHAL_HW_TIME_MICROSECONDS;
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        }
        break;
 800f5aa:	f000 bd12 	b.w	800ffd2 <phhalHw_Pn5180_SetConfig+0x183a>

    case PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bTimeoutUnit != PHHAL_HW_TIME_MILLISECONDS) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800f5ae:	887a      	ldrh	r2, [r7, #2]
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	322c      	adds	r2, #44	@ 0x2c
 800f5b4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800f5b8:	883a      	ldrh	r2, [r7, #0]
 800f5ba:	429a      	cmp	r2, r3
 800f5bc:	d10a      	bne.n	800f5d4 <phhalHw_Pn5180_SetConfig+0xe3c>
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f5c4:	2b01      	cmp	r3, #1
 800f5c6:	d105      	bne.n	800f5d4 <phhalHw_Pn5180_SetConfig+0xe3c>
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f5ce:	2b01      	cmp	r3, #1
 800f5d0:	f000 8501 	beq.w	800ffd6 <phhalHw_Pn5180_SetConfig+0x183e>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp,
 800f5d4:	883b      	ldrh	r3, [r7, #0]
 800f5d6:	2201      	movs	r2, #1
 800f5d8:	4619      	mov	r1, r3
 800f5da:	6878      	ldr	r0, [r7, #4]
 800f5dc:	f003 fe96 	bl	801330c <phhalHw_Pn5180_SetTmo>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f5e4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d002      	beq.n	800f5f0 <phhalHw_Pn5180_SetConfig+0xe58>
 800f5ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f5ec:	f000 bd17 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>
                                 phhalHw_Pn5180_SetTmo(
                                         pDataParams,
                                         wValue,
                                         PHHAL_HW_TIME_MILLISECONDS));
            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800f5f0:	887a      	ldrh	r2, [r7, #2]
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	322c      	adds	r2, #44	@ 0x2c
 800f5f6:	8839      	ldrh	r1, [r7, #0]
 800f5f8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            pDataParams->bTimeoutUnit = PHHAL_HW_TIME_MILLISECONDS;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	2201      	movs	r2, #1
 800f600:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        }
        break;
 800f604:	f000 bce7 	b.w	800ffd6 <phhalHw_Pn5180_SetConfig+0x183e>

    case PHHAL_HW_CONFIG_SUBCARRIER:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800f608:	887a      	ldrh	r2, [r7, #2]
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	322c      	adds	r2, #44	@ 0x2c
 800f60e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800f612:	883a      	ldrh	r2, [r7, #0]
 800f614:	429a      	cmp	r2, r3
 800f616:	d105      	bne.n	800f624 <phhalHw_Pn5180_SetConfig+0xe8c>
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f61e:	2b01      	cmp	r3, #1
 800f620:	f000 84db 	beq.w	800ffda <phhalHw_Pn5180_SetConfig+0x1842>
        {
            /* Parameter check */
            if ((pDataParams->bCardType != PHHAL_HW_CARDTYPE_ISO15693) &&
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f62a:	2b04      	cmp	r3, #4
 800f62c:	d008      	beq.n	800f640 <phhalHw_Pn5180_SetConfig+0xea8>
                    (pDataParams->bCardType != PHHAL_HW_CARDTYPE_I18000P3M3))
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
            if ((pDataParams->bCardType != PHHAL_HW_CARDTYPE_ISO15693) &&
 800f634:	2b06      	cmp	r3, #6
 800f636:	d003      	beq.n	800f640 <phhalHw_Pn5180_SetConfig+0xea8>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_HAL);
 800f638:	f240 2325 	movw	r3, #549	@ 0x225
 800f63c:	f000 bcef 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>
            }

            /* only single subcarrier to be used while reception by ISO15693 */
            if ((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wValue != PHHAL_HW_SUBCARRIER_SINGLE))
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f646:	2b04      	cmp	r3, #4
 800f648:	d106      	bne.n	800f658 <phhalHw_Pn5180_SetConfig+0xec0>
 800f64a:	883b      	ldrh	r3, [r7, #0]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d003      	beq.n	800f658 <phhalHw_Pn5180_SetConfig+0xec0>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 800f650:	f240 2323 	movw	r3, #547	@ 0x223
 800f654:	f000 bce3 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>
            }

            /* Evaluate hardware settings */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetCardMode(
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	f8b3 106a 	ldrh.w	r1, [r3, #106]	@ 0x6a
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	f8b3 206c 	ldrh.w	r2, [r3, #108]	@ 0x6c
 800f664:	883b      	ldrh	r3, [r7, #0]
 800f666:	6878      	ldr	r0, [r7, #4]
 800f668:	f003 fb5a 	bl	8012d20 <phhalHw_Pn5180_SetCardMode>
 800f66c:	4603      	mov	r3, r0
 800f66e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f670:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f672:	2b00      	cmp	r3, #0
 800f674:	d002      	beq.n	800f67c <phhalHw_Pn5180_SetConfig+0xee4>
 800f676:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f678:	f000 bcd1 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>
                    pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TXDATARATE_FRAMING],
                    pDataParams->wCfgShadow[PHHAL_HW_CONFIG_RXDATARATE_FRAMING],
                    wValue));

            /* Update Subcarrier setting */
            pDataParams->wCfgShadow[PHHAL_HW_CONFIG_SUBCARRIER] = wValue;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	883a      	ldrh	r2, [r7, #0]
 800f680:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76
        }

        break;
 800f684:	f000 bca9 	b.w	800ffda <phhalHw_Pn5180_SetConfig+0x1842>

    case PHHAL_HW_CONFIG_TIMING_MODE:

        /* Check supported option bits */
        switch (wValue & PHHAL_HW_TIMING_MODE_OPTION_MASK)
 800f688:	883b      	ldrh	r3, [r7, #0]
 800f68a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d006      	beq.n	800f6a0 <phhalHw_Pn5180_SetConfig+0xf08>
 800f692:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f696:	d003      	beq.n	800f6a0 <phhalHw_Pn5180_SetConfig+0xf08>
        {
        case PHHAL_HW_TIMING_MODE_OPTION_DEFAULT:
        case PHHAL_HW_TIMING_MODE_OPTION_AUTOCLEAR:
            break;
        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800f698:	f240 2321 	movw	r3, #545	@ 0x221
 800f69c:	f000 bcbf 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>
            break;
 800f6a0:	bf00      	nop
        }

        /* Check supported timing modes */
        switch (wValue & (uint16_t)~(uint16_t)PHHAL_HW_TIMING_MODE_OPTION_MASK)
 800f6a2:	883b      	ldrh	r3, [r7, #0]
 800f6a4:	b2db      	uxtb	r3, r3
 800f6a6:	2b01      	cmp	r3, #1
 800f6a8:	dc02      	bgt.n	800f6b0 <phhalHw_Pn5180_SetConfig+0xf18>
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	da03      	bge.n	800f6b6 <phhalHw_Pn5180_SetConfig+0xf1e>
 800f6ae:	e00f      	b.n	800f6d0 <phhalHw_Pn5180_SetConfig+0xf38>
 800f6b0:	2b02      	cmp	r3, #2
 800f6b2:	d009      	beq.n	800f6c8 <phhalHw_Pn5180_SetConfig+0xf30>
 800f6b4:	e00c      	b.n	800f6d0 <phhalHw_Pn5180_SetConfig+0xf38>
        {
        case PHHAL_HW_TIMING_MODE_OFF:
        case PHHAL_HW_TIMING_MODE_FDT:
            pDataParams->dwTimingUs = 0U;
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	2200      	movs	r2, #0
 800f6ba:	621a      	str	r2, [r3, #32]
            pDataParams->wTimingMode = wValue;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	883a      	ldrh	r2, [r7, #0]
 800f6c0:	851a      	strh	r2, [r3, #40]	@ 0x28
            break;
 800f6c2:	bf00      	nop
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
        }

        break;
 800f6c4:	f000 bcaa 	b.w	801001c <phhalHw_Pn5180_SetConfig+0x1884>
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 800f6c8:	f240 2323 	movw	r3, #547	@ 0x223
 800f6cc:	f000 bca7 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800f6d0:	f240 2321 	movw	r3, #545	@ 0x221
 800f6d4:	f000 bca3 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>

    case PHHAL_HW_CONFIG_FIELD_OFF_TIME:

        /* Parameter Check */
        if (wValue == 0U)
 800f6d8:	883b      	ldrh	r3, [r7, #0]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d103      	bne.n	800f6e6 <phhalHw_Pn5180_SetConfig+0xf4e>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800f6de:	f240 2321 	movw	r3, #545	@ 0x221
 800f6e2:	f000 bc9c 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* Store config data */
        pDataParams->wFieldOffTime = wValue;
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	883a      	ldrh	r2, [r7, #0]
 800f6ea:	859a      	strh	r2, [r3, #44]	@ 0x2c
        break;
 800f6ec:	f000 bc96 	b.w	801001c <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_FIELD_RECOVERY_TIME:

        /* Store config data */
        pDataParams->wFieldRecoveryTime = wValue;
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	883a      	ldrh	r2, [r7, #0]
 800f6f4:	85da      	strh	r2, [r3, #46]	@ 0x2e
        break;
 800f6f6:	f000 bc91 	b.w	801001c <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_JEWEL_MODE:

        if (wValue == PH_ON)
 800f6fa:	883b      	ldrh	r3, [r7, #0]
 800f6fc:	2b01      	cmp	r3, #1
 800f6fe:	d106      	bne.n	800f70e <phhalHw_Pn5180_SetConfig+0xf76>
        {
            pDataParams->bJewelActivated = (uint8_t)wValue;
 800f700:	883b      	ldrh	r3, [r7, #0]
 800f702:	b2da      	uxtb	r2, r3
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        }
        else
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
        }
        break;
 800f70a:	f000 bc87 	b.w	801001c <phhalHw_Pn5180_SetConfig+0x1884>
        else if (wValue == PH_OFF)
 800f70e:	883b      	ldrh	r3, [r7, #0]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d106      	bne.n	800f722 <phhalHw_Pn5180_SetConfig+0xf8a>
            pDataParams->bJewelActivated = (uint8_t)wValue;
 800f714:	883b      	ldrh	r3, [r7, #0]
 800f716:	b2da      	uxtb	r2, r3
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        break;
 800f71e:	f000 bc7d 	b.w	801001c <phhalHw_Pn5180_SetConfig+0x1884>
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800f722:	f240 2321 	movw	r3, #545	@ 0x221
 800f726:	f000 bc7a 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>

    case PHHAL_HW_CONFIG_RFRESET_ON_TIMEOUT:

        if (wValue == PH_OFF)
 800f72a:	883b      	ldrh	r3, [r7, #0]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d105      	bne.n	800f73c <phhalHw_Pn5180_SetConfig+0xfa4>
        {
            pDataParams->bRfResetAfterTo = PH_OFF;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2200      	movs	r2, #0
 800f734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        }
        else
        {
            pDataParams->bRfResetAfterTo = PH_ON;
        }
        break;
 800f738:	f000 bc70 	b.w	801001c <phhalHw_Pn5180_SetConfig+0x1884>
            pDataParams->bRfResetAfterTo = PH_ON;
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	2201      	movs	r2, #1
 800f740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        break;
 800f744:	f000 bc6a 	b.w	801001c <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_OPE_MODE:

        pDataParams->bOpeMode = (uint8_t)wValue;
 800f748:	883b      	ldrh	r3, [r7, #0]
 800f74a:	b2da      	uxtb	r2, r3
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        break;
 800f752:	f000 bc63 	b.w	801001c <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_SET_EMD:
        pDataParams->bEmdFlag = (uint8_t)wValue;
 800f756:	883b      	ldrh	r3, [r7, #0]
 800f758:	b2da      	uxtb	r2, r3
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        if(wValue == 0x1U)
 800f760:	883b      	ldrh	r3, [r7, #0]
 800f762:	2b01      	cmp	r3, #1
 800f764:	d122      	bne.n	800f7ac <phhalHw_Pn5180_SetConfig+0x1014>
        {
            if(pDataParams->bOpeMode != RD_LIB_MODE_ISO)
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f76c:	2b03      	cmp	r3, #3
 800f76e:	d00e      	beq.n	800f78e <phhalHw_Pn5180_SetConfig+0xff6>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WriteRegister(pDataParams, EMD_CONTROL, PHHAL_HW_PN5180_EMVCO_NFC_EMD));
 800f770:	f240 1207 	movw	r2, #263	@ 0x107
 800f774:	2128      	movs	r1, #40	@ 0x28
 800f776:	6878      	ldr	r0, [r7, #4]
 800f778:	f7fe fa6e 	bl	800dc58 <phhalHw_Pn5180_WriteRegister>
 800f77c:	4603      	mov	r3, r0
 800f77e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f780:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f782:	2b00      	cmp	r3, #0
 800f784:	f000 842b 	beq.w	800ffde <phhalHw_Pn5180_SetConfig+0x1846>
 800f788:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f78a:	f000 bc48 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>
            }
            else
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WriteRegister(pDataParams, EMD_CONTROL, PHHAL_HW_PN5180_ISO_EMD));
 800f78e:	f240 1203 	movw	r2, #259	@ 0x103
 800f792:	2128      	movs	r1, #40	@ 0x28
 800f794:	6878      	ldr	r0, [r7, #4]
 800f796:	f7fe fa5f 	bl	800dc58 <phhalHw_Pn5180_WriteRegister>
 800f79a:	4603      	mov	r3, r0
 800f79c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f79e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	f000 841c 	beq.w	800ffde <phhalHw_Pn5180_SetConfig+0x1846>
 800f7a6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f7a8:	f000 bc39 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>
            }
        }
        else
        {
            /* Clear EMD Enable bit in EMD Control Register */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, EMD_CONTROL, (uint32_t)~EMD_CONTROL_EMD_ENABLE_MASK));
 800f7ac:	f06f 0201 	mvn.w	r2, #1
 800f7b0:	2128      	movs	r1, #40	@ 0x28
 800f7b2:	6878      	ldr	r0, [r7, #4]
 800f7b4:	f001 ff4a 	bl	801164c <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800f7b8:	4603      	mov	r3, r0
 800f7ba:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f7bc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	f000 840d 	beq.w	800ffde <phhalHw_Pn5180_SetConfig+0x1846>
 800f7c4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f7c6:	f000 bc2a 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    case PHHAL_HW_CONFIG_SETMINFDT:

        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetMinFDT(pDataParams, wValue));
 800f7ca:	883b      	ldrh	r3, [r7, #0]
 800f7cc:	4619      	mov	r1, r3
 800f7ce:	6878      	ldr	r0, [r7, #4]
 800f7d0:	f000 fec6 	bl	8010560 <phhalHw_Pn5180_SetMinFDT>
 800f7d4:	4603      	mov	r3, r0
 800f7d6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f7d8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	f000 8401 	beq.w	800ffe2 <phhalHw_Pn5180_SetConfig+0x184a>
 800f7e0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f7e2:	f000 bc1c 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>
        break;

    case PHHAL_HW_CONFIG_RXMULTIPLE:

        if (wValue == PH_ON)
 800f7e6:	883b      	ldrh	r3, [r7, #0]
 800f7e8:	2b01      	cmp	r3, #1
 800f7ea:	d111      	bne.n	800f810 <phhalHw_Pn5180_SetConfig+0x1078>
        {
            pDataParams->bRxMultiple = PH_ON;
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	2201      	movs	r2, #1
 800f7f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask( pDataParams, TRANSCEIVER_CONFIG, TRANSCEIVER_CONFIG_RX_MULTIPLE_ENABLE_MASK ));
 800f7f4:	2202      	movs	r2, #2
 800f7f6:	2104      	movs	r1, #4
 800f7f8:	6878      	ldr	r0, [r7, #4]
 800f7fa:	f001 feb1 	bl	8011560 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 800f7fe:	4603      	mov	r3, r0
 800f800:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f802:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f804:	2b00      	cmp	r3, #0
 800f806:	f000 83ee 	beq.w	800ffe6 <phhalHw_Pn5180_SetConfig+0x184e>
 800f80a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f80c:	f000 bc07 	b.w	801001e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        else
        {
            pDataParams->bRxMultiple = PH_OFF;
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	2200      	movs	r2, #0
 800f814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask( pDataParams, TRANSCEIVER_CONFIG, (uint32_t )~(TRANSCEIVER_CONFIG_RX_MULTIPLE_ENABLE_MASK) ));
 800f818:	f06f 0202 	mvn.w	r2, #2
 800f81c:	2104      	movs	r1, #4
 800f81e:	6878      	ldr	r0, [r7, #4]
 800f820:	f001 ff14 	bl	801164c <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800f824:	4603      	mov	r3, r0
 800f826:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f828:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	f000 83db 	beq.w	800ffe6 <phhalHw_Pn5180_SetConfig+0x184e>
 800f830:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f832:	e3f4      	b.n	801001e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    case PHHAL_HW_CONFIG_RFCA:
        if((wValue != PH_ON) && (wValue != PH_OFF))
 800f834:	883b      	ldrh	r3, [r7, #0]
 800f836:	2b01      	cmp	r3, #1
 800f838:	d005      	beq.n	800f846 <phhalHw_Pn5180_SetConfig+0x10ae>
 800f83a:	883b      	ldrh	r3, [r7, #0]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d002      	beq.n	800f846 <phhalHw_Pn5180_SetConfig+0x10ae>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800f840:	f240 2321 	movw	r3, #545	@ 0x221
 800f844:	e3eb      	b.n	801001e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        pDataParams->bRfca = (uint8_t)wValue;
 800f846:	883b      	ldrh	r3, [r7, #0]
 800f848:	b2da      	uxtb	r2, r3
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	70da      	strb	r2, [r3, #3]
        break;
 800f84e:	e3e5      	b.n	801001c <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_RFON_INTERRUPT:
        if((wValue != PH_ON) && (wValue != PH_OFF))
 800f850:	883b      	ldrh	r3, [r7, #0]
 800f852:	2b01      	cmp	r3, #1
 800f854:	d00c      	beq.n	800f870 <phhalHw_Pn5180_SetConfig+0x10d8>
 800f856:	883b      	ldrh	r3, [r7, #0]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d009      	beq.n	800f870 <phhalHw_Pn5180_SetConfig+0x10d8>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800f85c:	f240 2321 	movw	r3, #545	@ 0x221
 800f860:	e3dd      	b.n	801001e <phhalHw_Pn5180_SetConfig+0x1886>
 800f862:	bf00      	nop
 800f864:	f3af 8000 	nop.w
 800f868:	51eb851f 	.word	0x51eb851f
 800f86c:	402b1eb8 	.word	0x402b1eb8
        }

        if(wValue == PH_ON)
 800f870:	883b      	ldrh	r3, [r7, #0]
 800f872:	2b01      	cmp	r3, #1
 800f874:	d10c      	bne.n	800f890 <phhalHw_Pn5180_SetConfig+0x10f8>
        {
            /* Enable RF-ON Interrupt*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_ENABLE, IRQ_ENABLE_RFON_DET_IRQ_SET_ENABLE_MASK));
 800f876:	2280      	movs	r2, #128	@ 0x80
 800f878:	2101      	movs	r1, #1
 800f87a:	6878      	ldr	r0, [r7, #4]
 800f87c:	f001 fdfa 	bl	8011474 <phhalHw_Pn5180_Instr_WriteRegister>
 800f880:	4603      	mov	r3, r0
 800f882:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f884:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f886:	2b00      	cmp	r3, #0
 800f888:	f000 83af 	beq.w	800ffea <phhalHw_Pn5180_SetConfig+0x1852>
 800f88c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f88e:	e3c6      	b.n	801001e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        else
        {
            /* Disable RF-ON Interrupt*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, IRQ_ENABLE,  ~(uint32_t)IRQ_ENABLE_RFON_DET_IRQ_SET_ENABLE_MASK));
 800f890:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800f894:	2101      	movs	r1, #1
 800f896:	6878      	ldr	r0, [r7, #4]
 800f898:	f001 fed8 	bl	801164c <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800f89c:	4603      	mov	r3, r0
 800f89e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f8a0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	f000 83a1 	beq.w	800ffea <phhalHw_Pn5180_SetConfig+0x1852>
 800f8a8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f8aa:	e3b8      	b.n	801001e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    case PHHAL_HW_CONFIG_NFCIP_STARTBYTE:
        if((wValue != PH_ON) && (wValue != PH_OFF))
 800f8ac:	883b      	ldrh	r3, [r7, #0]
 800f8ae:	2b01      	cmp	r3, #1
 800f8b0:	d005      	beq.n	800f8be <phhalHw_Pn5180_SetConfig+0x1126>
 800f8b2:	883b      	ldrh	r3, [r7, #0]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d002      	beq.n	800f8be <phhalHw_Pn5180_SetConfig+0x1126>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800f8b8:	f240 2321 	movw	r3, #545	@ 0x221
 800f8bc:	e3af      	b.n	801001e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        pDataParams->bNfcipMode = (uint8_t)wValue;
 800f8be:	883b      	ldrh	r3, [r7, #0]
 800f8c0:	b2da      	uxtb	r2, r3
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
        if (pDataParams->bNfcipMode == PH_ON)
        {
            phhalHw_Pn5180_AutoSyncByte(pDataParams);
        }
#endif
        break;
 800f8c8:	e3a8      	b.n	801001c <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_SET_SYMBOL_SEND:

        /* check parameter */
        if ((wValue != PH_ON) && (wValue != PH_OFF))
 800f8ca:	883b      	ldrh	r3, [r7, #0]
 800f8cc:	2b01      	cmp	r3, #1
 800f8ce:	d005      	beq.n	800f8dc <phhalHw_Pn5180_SetConfig+0x1144>
 800f8d0:	883b      	ldrh	r3, [r7, #0]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d002      	beq.n	800f8dc <phhalHw_Pn5180_SetConfig+0x1144>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800f8d6:	f240 2321 	movw	r3, #545	@ 0x221
 800f8da:	e3a0      	b.n	801001e <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* PH_ON implies Clearing Bit-3 (DataEn Bit in TxDataNum). */
        if (wValue == PH_ON)
 800f8dc:	883b      	ldrh	r3, [r7, #0]
 800f8de:	2b01      	cmp	r3, #1
 800f8e0:	d10d      	bne.n	800f8fe <phhalHw_Pn5180_SetConfig+0x1166>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, TX_CONFIG,  ~(uint32_t)TX_CONFIG_TX_DATA_ENABLE_MASK));
 800f8e2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800f8e6:	2118      	movs	r1, #24
 800f8e8:	6878      	ldr	r0, [r7, #4]
 800f8ea:	f001 feaf 	bl	801164c <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800f8ee:	4603      	mov	r3, r0
 800f8f0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f8f2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	f000 837a 	beq.w	800ffee <phhalHw_Pn5180_SetConfig+0x1856>
 800f8fa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f8fc:	e38f      	b.n	801001e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        /* PH_OFF implies Setting Bit-3 (DataEn Bit in TxDataNum). */
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, TX_CONFIG, TX_CONFIG_TX_DATA_ENABLE_MASK));
 800f8fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800f902:	2118      	movs	r1, #24
 800f904:	6878      	ldr	r0, [r7, #4]
 800f906:	f001 fe2b 	bl	8011560 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 800f90a:	4603      	mov	r3, r0
 800f90c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f90e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f910:	2b00      	cmp	r3, #0
 800f912:	f000 836c 	beq.w	800ffee <phhalHw_Pn5180_SetConfig+0x1856>
 800f916:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f918:	e381      	b.n	801001e <phhalHw_Pn5180_SetConfig+0x1886>
        break;

    case PHHAL_HW_CONFIG_SYMBOL_START:

        /* Parameter check */
        if ((pDataParams->bCardType != PHHAL_HW_CARDTYPE_ICODEEPCUID) &&
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f920:	2b05      	cmp	r3, #5
 800f922:	d00c      	beq.n	800f93e <phhalHw_Pn5180_SetConfig+0x11a6>
            (pDataParams->bCardType != PHHAL_HW_CARDTYPE_ISO15693) &&
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
        if ((pDataParams->bCardType != PHHAL_HW_CARDTYPE_ICODEEPCUID) &&
 800f92a:	2b04      	cmp	r3, #4
 800f92c:	d007      	beq.n	800f93e <phhalHw_Pn5180_SetConfig+0x11a6>
            (pDataParams->bCardType != PHHAL_HW_CARDTYPE_I18000P3M3))
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
            (pDataParams->bCardType != PHHAL_HW_CARDTYPE_ISO15693) &&
 800f934:	2b06      	cmp	r3, #6
 800f936:	d002      	beq.n	800f93e <phhalHw_Pn5180_SetConfig+0x11a6>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_HAL);
 800f938:	f240 2325 	movw	r3, #549	@ 0x225
 800f93c:	e36f      	b.n	801001e <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* Parameter check #2 */
        switch (wValue)
 800f93e:	883b      	ldrh	r3, [r7, #0]
 800f940:	2b07      	cmp	r3, #7
 800f942:	d82b      	bhi.n	800f99c <phhalHw_Pn5180_SetConfig+0x1204>
 800f944:	a201      	add	r2, pc, #4	@ (adr r2, 800f94c <phhalHw_Pn5180_SetConfig+0x11b4>)
 800f946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f94a:	bf00      	nop
 800f94c:	0800f9a3 	.word	0x0800f9a3
 800f950:	0800f96d 	.word	0x0800f96d
 800f954:	0800f96d 	.word	0x0800f96d
 800f958:	0800f99d 	.word	0x0800f99d
 800f95c:	0800f96d 	.word	0x0800f96d
 800f960:	0800f97d 	.word	0x0800f97d
 800f964:	0800f98d 	.word	0x0800f98d
 800f968:	0800f98d 	.word	0x0800f98d
        {
        case PHHAL_HW_SYMBOL_ICODEEPCUID_SSOF:
        case PHHAL_HW_SYMBOL_ICODEEPCUID_LSOF:
        case PHHAL_HW_SYMBOL_ICODEEPCUID_CS:
            if (pDataParams->bCardType != PHHAL_HW_CARDTYPE_ICODEEPCUID)
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f972:	2b05      	cmp	r3, #5
 800f974:	d017      	beq.n	800f9a6 <phhalHw_Pn5180_SetConfig+0x120e>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800f976:	f240 2321 	movw	r3, #545	@ 0x221
 800f97a:	e350      	b.n	801001e <phhalHw_Pn5180_SetConfig+0x1886>
            }
            break;
        case PHHAL_HW_SYMBOL_I15693_SOF:
            if (pDataParams->bCardType != PHHAL_HW_CARDTYPE_ISO15693)
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f982:	2b04      	cmp	r3, #4
 800f984:	d011      	beq.n	800f9aa <phhalHw_Pn5180_SetConfig+0x1212>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800f986:	f240 2321 	movw	r3, #545	@ 0x221
 800f98a:	e348      	b.n	801001e <phhalHw_Pn5180_SetConfig+0x1886>
            }
            break;
        case PHHAL_HW_SYMBOL_I18000P3M3_PREAMBLE:
        case PHHAL_HW_SYMBOL_I18000P3M3_FSYNC:
            if (pDataParams->bCardType != PHHAL_HW_CARDTYPE_I18000P3M3)
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f992:	2b06      	cmp	r3, #6
 800f994:	d00b      	beq.n	800f9ae <phhalHw_Pn5180_SetConfig+0x1216>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800f996:	f240 2321 	movw	r3, #545	@ 0x221
 800f99a:	e340      	b.n	801001e <phhalHw_Pn5180_SetConfig+0x1886>
            }
            break;
        case PH_OFF:
            break;
        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 800f99c:	f240 2323 	movw	r3, #547	@ 0x223
 800f9a0:	e33d      	b.n	801001e <phhalHw_Pn5180_SetConfig+0x1886>
            break;
 800f9a2:	bf00      	nop
 800f9a4:	e004      	b.n	800f9b0 <phhalHw_Pn5180_SetConfig+0x1218>
            break;
 800f9a6:	bf00      	nop
 800f9a8:	e002      	b.n	800f9b0 <phhalHw_Pn5180_SetConfig+0x1218>
            break;
 800f9aa:	bf00      	nop
 800f9ac:	e000      	b.n	800f9b0 <phhalHw_Pn5180_SetConfig+0x1218>
            break;
 800f9ae:	bf00      	nop
        }

        wSizeOfRegTypeValueSets = 0U;
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	84bb      	strh	r3, [r7, #36]	@ 0x24

        /*Clear the Bits of TX_CONFIG_TX_START_SYMBOL_MASK & DATA_ENABLE*/
        if(wValue == PH_OFF)
 800f9b4:	883b      	ldrh	r3, [r7, #0]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d103      	bne.n	800f9c2 <phhalHw_Pn5180_SetConfig+0x122a>
        {
            dwTemp = (uint32_t) ~( TX_CONFIG_TX_START_SYMBOL_MASK | TX_CONFIG_TX_DATA_ENABLE_MASK);
 800f9ba:	f46f 6398 	mvn.w	r3, #1216	@ 0x4c0
 800f9be:	60bb      	str	r3, [r7, #8]
 800f9c0:	e002      	b.n	800f9c8 <phhalHw_Pn5180_SetConfig+0x1230>
        }
        else
        {
            dwTemp = (uint32_t) ~( TX_CONFIG_TX_START_SYMBOL_MASK);
 800f9c2:	f06f 03c0 	mvn.w	r3, #192	@ 0xc0
 800f9c6:	60bb      	str	r3, [r7, #8]
        }

        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = TX_CONFIG;
 800f9c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f9ca:	1c5a      	adds	r2, r3, #1
 800f9cc:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800f9ce:	3338      	adds	r3, #56	@ 0x38
 800f9d0:	443b      	add	r3, r7
 800f9d2:	2218      	movs	r2, #24
 800f9d4:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 800f9d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f9da:	1c5a      	adds	r2, r3, #1
 800f9dc:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800f9de:	3338      	adds	r3, #56	@ 0x38
 800f9e0:	443b      	add	r3, r7
 800f9e2:	2203      	movs	r2, #3
 800f9e4:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800f9e8:	68ba      	ldr	r2, [r7, #8]
 800f9ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f9ec:	1c59      	adds	r1, r3, #1
 800f9ee:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800f9f0:	b2d2      	uxtb	r2, r2
 800f9f2:	3338      	adds	r3, #56	@ 0x38
 800f9f4:	443b      	add	r3, r7
 800f9f6:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800f9fa:	68bb      	ldr	r3, [r7, #8]
 800f9fc:	0a1a      	lsrs	r2, r3, #8
 800f9fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fa00:	1c59      	adds	r1, r3, #1
 800fa02:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800fa04:	b2d2      	uxtb	r2, r2
 800fa06:	3338      	adds	r3, #56	@ 0x38
 800fa08:	443b      	add	r3, r7
 800fa0a:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800fa0e:	68bb      	ldr	r3, [r7, #8]
 800fa10:	0c1a      	lsrs	r2, r3, #16
 800fa12:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fa14:	1c59      	adds	r1, r3, #1
 800fa16:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800fa18:	b2d2      	uxtb	r2, r2
 800fa1a:	3338      	adds	r3, #56	@ 0x38
 800fa1c:	443b      	add	r3, r7
 800fa1e:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800fa22:	68bb      	ldr	r3, [r7, #8]
 800fa24:	0e1a      	lsrs	r2, r3, #24
 800fa26:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fa28:	1c59      	adds	r1, r3, #1
 800fa2a:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800fa2c:	b2d2      	uxtb	r2, r2
 800fa2e:	3338      	adds	r3, #56	@ 0x38
 800fa30:	443b      	add	r3, r7
 800fa32:	f803 2c2c 	strb.w	r2, [r3, #-44]

        dwValue = 0U;
 800fa36:	2300      	movs	r3, #0
 800fa38:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Set new symbol */
        switch (wValue)
 800fa3a:	883b      	ldrh	r3, [r7, #0]
 800fa3c:	3b01      	subs	r3, #1
 800fa3e:	2b06      	cmp	r3, #6
 800fa40:	d822      	bhi.n	800fa88 <phhalHw_Pn5180_SetConfig+0x12f0>
 800fa42:	a201      	add	r2, pc, #4	@ (adr r2, 800fa48 <phhalHw_Pn5180_SetConfig+0x12b0>)
 800fa44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa48:	0800fa65 	.word	0x0800fa65
 800fa4c:	0800fa6b 	.word	0x0800fa6b
 800fa50:	0800fa89 	.word	0x0800fa89
 800fa54:	0800fa71 	.word	0x0800fa71
 800fa58:	0800fa77 	.word	0x0800fa77
 800fa5c:	0800fa7d 	.word	0x0800fa7d
 800fa60:	0800fa83 	.word	0x0800fa83
        {
        case PHHAL_HW_SYMBOL_ICODEEPCUID_SSOF:
            dwValue = 0x3U;
 800fa64:	2303      	movs	r3, #3
 800fa66:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 800fa68:	e00f      	b.n	800fa8a <phhalHw_Pn5180_SetConfig+0x12f2>
        case PHHAL_HW_SYMBOL_ICODEEPCUID_LSOF:
            dwValue = 0x1U;
 800fa6a:	2301      	movs	r3, #1
 800fa6c:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 800fa6e:	e00c      	b.n	800fa8a <phhalHw_Pn5180_SetConfig+0x12f2>
        case PHHAL_HW_SYMBOL_ICODEEPCUID_CS:
            dwValue = 0x2U;
 800fa70:	2302      	movs	r3, #2
 800fa72:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 800fa74:	e009      	b.n	800fa8a <phhalHw_Pn5180_SetConfig+0x12f2>
        case PHHAL_HW_SYMBOL_I15693_SOF:
            dwValue = 0x3U;
 800fa76:	2303      	movs	r3, #3
 800fa78:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 800fa7a:	e006      	b.n	800fa8a <phhalHw_Pn5180_SetConfig+0x12f2>
        case PHHAL_HW_SYMBOL_I18000P3M3_PREAMBLE:
            dwValue = 0x1U;
 800fa7c:	2301      	movs	r3, #1
 800fa7e:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 800fa80:	e003      	b.n	800fa8a <phhalHw_Pn5180_SetConfig+0x12f2>
        case PHHAL_HW_SYMBOL_I18000P3M3_FSYNC:
            dwValue = 0x2U;
 800fa82:	2302      	movs	r3, #2
 800fa84:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 800fa86:	e000      	b.n	800fa8a <phhalHw_Pn5180_SetConfig+0x12f2>
        default:
            break;
 800fa88:	bf00      	nop
        }

        /*Set the new value  */
        dwTemp = (uint32_t)((dwValue << TX_CONFIG_TX_START_SYMBOL_POS) & TX_CONFIG_TX_START_SYMBOL_MASK);
 800fa8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa8c:	019b      	lsls	r3, r3, #6
 800fa8e:	b2db      	uxtb	r3, r3
 800fa90:	60bb      	str	r3, [r7, #8]
        dwTemp |= (uint32_t)((dwValue << TX_CONFIG_TX_DATA_ENABLE_POS) & TX_CONFIG_TX_DATA_ENABLE_MASK);
 800fa92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa94:	029b      	lsls	r3, r3, #10
 800fa96:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 800fa9a:	68bb      	ldr	r3, [r7, #8]
 800fa9c:	4313      	orrs	r3, r2
 800fa9e:	60bb      	str	r3, [r7, #8]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = TX_CONFIG;
 800faa0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800faa2:	1c5a      	adds	r2, r3, #1
 800faa4:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800faa6:	3338      	adds	r3, #56	@ 0x38
 800faa8:	443b      	add	r3, r7
 800faaa:	2218      	movs	r2, #24
 800faac:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 800fab0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fab2:	1c5a      	adds	r2, r3, #1
 800fab4:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800fab6:	3338      	adds	r3, #56	@ 0x38
 800fab8:	443b      	add	r3, r7
 800faba:	2202      	movs	r2, #2
 800fabc:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800fac0:	68ba      	ldr	r2, [r7, #8]
 800fac2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fac4:	1c59      	adds	r1, r3, #1
 800fac6:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800fac8:	b2d2      	uxtb	r2, r2
 800faca:	3338      	adds	r3, #56	@ 0x38
 800facc:	443b      	add	r3, r7
 800face:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800fad2:	68bb      	ldr	r3, [r7, #8]
 800fad4:	0a1a      	lsrs	r2, r3, #8
 800fad6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fad8:	1c59      	adds	r1, r3, #1
 800fada:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800fadc:	b2d2      	uxtb	r2, r2
 800fade:	3338      	adds	r3, #56	@ 0x38
 800fae0:	443b      	add	r3, r7
 800fae2:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800fae6:	68bb      	ldr	r3, [r7, #8]
 800fae8:	0c1a      	lsrs	r2, r3, #16
 800faea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800faec:	1c59      	adds	r1, r3, #1
 800faee:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800faf0:	b2d2      	uxtb	r2, r2
 800faf2:	3338      	adds	r3, #56	@ 0x38
 800faf4:	443b      	add	r3, r7
 800faf6:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800fafa:	68bb      	ldr	r3, [r7, #8]
 800fafc:	0e1a      	lsrs	r2, r3, #24
 800fafe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fb00:	1c59      	adds	r1, r3, #1
 800fb02:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800fb04:	b2d2      	uxtb	r2, r2
 800fb06:	3338      	adds	r3, #56	@ 0x38
 800fb08:	443b      	add	r3, r7
 800fb0a:	f803 2c2c 	strb.w	r2, [r3, #-44]

        /*Send the array to the IC*/
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 800fb0e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800fb10:	f107 030c 	add.w	r3, r7, #12
 800fb14:	4619      	mov	r1, r3
 800fb16:	6878      	ldr	r0, [r7, #4]
 800fb18:	f001 fe0e 	bl	8011738 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800fb20:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	f000 8265 	beq.w	800fff2 <phhalHw_Pn5180_SetConfig+0x185a>
 800fb28:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fb2a:	e278      	b.n	801001e <phhalHw_Pn5180_SetConfig+0x1886>
        break;

    case PHHAL_HW_CONFIG_SYMBOL_END:

        /* Parameter check */
        if (pDataParams->bCardType != PHHAL_HW_CARDTYPE_ICODEEPCUID)
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fb32:	2b05      	cmp	r3, #5
 800fb34:	d002      	beq.n	800fb3c <phhalHw_Pn5180_SetConfig+0x13a4>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_HAL);
 800fb36:	f240 2325 	movw	r3, #549	@ 0x225
 800fb3a:	e270      	b.n	801001e <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* Parameter check #2 */
        switch (wValue)
 800fb3c:	883b      	ldrh	r3, [r7, #0]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d004      	beq.n	800fb4c <phhalHw_Pn5180_SetConfig+0x13b4>
 800fb42:	2b03      	cmp	r3, #3
 800fb44:	d002      	beq.n	800fb4c <phhalHw_Pn5180_SetConfig+0x13b4>
        {
        case PHHAL_HW_SYMBOL_ICODEEPCUID_CEOF:
        case PH_OFF:
            break;
        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800fb46:	f240 2321 	movw	r3, #545	@ 0x221
 800fb4a:	e268      	b.n	801001e <phhalHw_Pn5180_SetConfig+0x1886>
            break;
 800fb4c:	bf00      	nop
        }

        /* Read out TxFrameCon register */

        /* Set new symbol */
        switch (wValue)
 800fb4e:	883b      	ldrh	r3, [r7, #0]
 800fb50:	2b03      	cmp	r3, #3
 800fb52:	f040 8083 	bne.w	800fc5c <phhalHw_Pn5180_SetConfig+0x14c4>
        {
        case PHHAL_HW_SYMBOL_ICODEEPCUID_CEOF:
            wSizeOfRegTypeValueSets = 0U;
 800fb56:	2300      	movs	r3, #0
 800fb58:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /*Clear the Bits of TX_CONFIG_TX_STOP_SYMBOL_MASK*/
            dwTemp = (uint32_t) ~( TX_CONFIG_TX_STOP_SYMBOL_MASK );
 800fb5a:	f46f 7340 	mvn.w	r3, #768	@ 0x300
 800fb5e:	60bb      	str	r3, [r7, #8]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = TX_CONFIG;
 800fb60:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fb62:	1c5a      	adds	r2, r3, #1
 800fb64:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800fb66:	3338      	adds	r3, #56	@ 0x38
 800fb68:	443b      	add	r3, r7
 800fb6a:	2218      	movs	r2, #24
 800fb6c:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 800fb70:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fb72:	1c5a      	adds	r2, r3, #1
 800fb74:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800fb76:	3338      	adds	r3, #56	@ 0x38
 800fb78:	443b      	add	r3, r7
 800fb7a:	2203      	movs	r2, #3
 800fb7c:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800fb80:	68ba      	ldr	r2, [r7, #8]
 800fb82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fb84:	1c59      	adds	r1, r3, #1
 800fb86:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800fb88:	b2d2      	uxtb	r2, r2
 800fb8a:	3338      	adds	r3, #56	@ 0x38
 800fb8c:	443b      	add	r3, r7
 800fb8e:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800fb92:	68bb      	ldr	r3, [r7, #8]
 800fb94:	0a1a      	lsrs	r2, r3, #8
 800fb96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fb98:	1c59      	adds	r1, r3, #1
 800fb9a:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800fb9c:	b2d2      	uxtb	r2, r2
 800fb9e:	3338      	adds	r3, #56	@ 0x38
 800fba0:	443b      	add	r3, r7
 800fba2:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800fba6:	68bb      	ldr	r3, [r7, #8]
 800fba8:	0c1a      	lsrs	r2, r3, #16
 800fbaa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fbac:	1c59      	adds	r1, r3, #1
 800fbae:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800fbb0:	b2d2      	uxtb	r2, r2
 800fbb2:	3338      	adds	r3, #56	@ 0x38
 800fbb4:	443b      	add	r3, r7
 800fbb6:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800fbba:	68bb      	ldr	r3, [r7, #8]
 800fbbc:	0e1a      	lsrs	r2, r3, #24
 800fbbe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fbc0:	1c59      	adds	r1, r3, #1
 800fbc2:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800fbc4:	b2d2      	uxtb	r2, r2
 800fbc6:	3338      	adds	r3, #56	@ 0x38
 800fbc8:	443b      	add	r3, r7
 800fbca:	f803 2c2c 	strb.w	r2, [r3, #-44]

            /*Set the new value  */
            dwTemp = (uint32_t)((0x0CU << TX_CONFIG_TX_STOP_SYMBOL_POS) & TX_CONFIG_TX_STOP_SYMBOL_MASK);
 800fbce:	2300      	movs	r3, #0
 800fbd0:	60bb      	str	r3, [r7, #8]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = TX_CONFIG;
 800fbd2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fbd4:	1c5a      	adds	r2, r3, #1
 800fbd6:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800fbd8:	3338      	adds	r3, #56	@ 0x38
 800fbda:	443b      	add	r3, r7
 800fbdc:	2218      	movs	r2, #24
 800fbde:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 800fbe2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fbe4:	1c5a      	adds	r2, r3, #1
 800fbe6:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800fbe8:	3338      	adds	r3, #56	@ 0x38
 800fbea:	443b      	add	r3, r7
 800fbec:	2202      	movs	r2, #2
 800fbee:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800fbf2:	68ba      	ldr	r2, [r7, #8]
 800fbf4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fbf6:	1c59      	adds	r1, r3, #1
 800fbf8:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800fbfa:	b2d2      	uxtb	r2, r2
 800fbfc:	3338      	adds	r3, #56	@ 0x38
 800fbfe:	443b      	add	r3, r7
 800fc00:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800fc04:	68bb      	ldr	r3, [r7, #8]
 800fc06:	0a1a      	lsrs	r2, r3, #8
 800fc08:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fc0a:	1c59      	adds	r1, r3, #1
 800fc0c:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800fc0e:	b2d2      	uxtb	r2, r2
 800fc10:	3338      	adds	r3, #56	@ 0x38
 800fc12:	443b      	add	r3, r7
 800fc14:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800fc18:	68bb      	ldr	r3, [r7, #8]
 800fc1a:	0c1a      	lsrs	r2, r3, #16
 800fc1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fc1e:	1c59      	adds	r1, r3, #1
 800fc20:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800fc22:	b2d2      	uxtb	r2, r2
 800fc24:	3338      	adds	r3, #56	@ 0x38
 800fc26:	443b      	add	r3, r7
 800fc28:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800fc2c:	68bb      	ldr	r3, [r7, #8]
 800fc2e:	0e1a      	lsrs	r2, r3, #24
 800fc30:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fc32:	1c59      	adds	r1, r3, #1
 800fc34:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800fc36:	b2d2      	uxtb	r2, r2
 800fc38:	3338      	adds	r3, #56	@ 0x38
 800fc3a:	443b      	add	r3, r7
 800fc3c:	f803 2c2c 	strb.w	r2, [r3, #-44]

            /*Send the array to the IC*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 800fc40:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800fc42:	f107 030c 	add.w	r3, r7, #12
 800fc46:	4619      	mov	r1, r3
 800fc48:	6878      	ldr	r0, [r7, #4]
 800fc4a:	f001 fd75 	bl	8011738 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 800fc4e:	4603      	mov	r3, r0
 800fc50:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800fc52:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d003      	beq.n	800fc60 <phhalHw_Pn5180_SetConfig+0x14c8>
 800fc58:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fc5a:	e1e0      	b.n	801001e <phhalHw_Pn5180_SetConfig+0x1886>
            break;
        default:
            break;
 800fc5c:	bf00      	nop
 800fc5e:	e1dd      	b.n	801001c <phhalHw_Pn5180_SetConfig+0x1884>
            break;
 800fc60:	bf00      	nop
        }

        break;
 800fc62:	e1db      	b.n	801001c <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_CRCTYPE:

        if(!(wValue & (PHHAL_HW_CRCTYPE_CRC5 | PHHAL_HW_CRCTYPE_CRC16 | PHHAL_HW_CRCOPTION_INVERTED)))
 800fc64:	883a      	ldrh	r2, [r7, #0]
 800fc66:	f240 1303 	movw	r3, #259	@ 0x103
 800fc6a:	4013      	ands	r3, r2
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d102      	bne.n	800fc76 <phhalHw_Pn5180_SetConfig+0x14de>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800fc70:	f240 2321 	movw	r3, #545	@ 0x221
 800fc74:	e1d3      	b.n	801001e <phhalHw_Pn5180_SetConfig+0x1886>

        /* in case of 18000P3M3 for CRC5 calculation we need preset value of 9 which is not supported by
        * So flag is enable to perform software calculation of CRC5 in Pn5180 HAL
        */

        dwValue = 0U;
 800fc76:	2300      	movs	r3, #0
 800fc78:	633b      	str	r3, [r7, #48]	@ 0x30
        /*dwRegister will contain all the bits that need to be zeroed out*/
        dwRegister = 0U;
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	637b      	str	r3, [r7, #52]	@ 0x34

        if((0U != ((wValue & PHHAL_HW_CRCTYPE_CRC5))) && (pDataParams->bCardType == PHHAL_HW_CARDTYPE_I18000P3M3))
 800fc7e:	883b      	ldrh	r3, [r7, #0]
 800fc80:	f003 0301 	and.w	r3, r3, #1
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d015      	beq.n	800fcb4 <phhalHw_Pn5180_SetConfig+0x151c>
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fc8e:	2b06      	cmp	r3, #6
 800fc90:	d110      	bne.n	800fcb4 <phhalHw_Pn5180_SetConfig+0x151c>
        {
            dwValue |= CRC_TX_CONFIG_TX_CRC_TYPE_MASK;
 800fc92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc94:	f043 0304 	orr.w	r3, r3, #4
 800fc98:	633b      	str	r3, [r7, #48]	@ 0x30
            dwRegister |= CRC_TX_CONFIG_TX_CRC_INV_MASK;
 800fc9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc9c:	f043 0302 	orr.w	r3, r3, #2
 800fca0:	637b      	str	r3, [r7, #52]	@ 0x34
            dwRegister |= CRC_TX_CONFIG_TX_CRC_PRESET_SEL_MASK;
 800fca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fca4:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 800fca8:	637b      	str	r3, [r7, #52]	@ 0x34
            dwValue |= (0x5U << CRC_TX_CONFIG_TX_CRC_PRESET_SEL_POS);
 800fcaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcac:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 800fcb0:	633b      	str	r3, [r7, #48]	@ 0x30
 800fcb2:	e008      	b.n	800fcc6 <phhalHw_Pn5180_SetConfig+0x152e>
        }
        else if(0U != (wValue & PHHAL_HW_CRCTYPE_CRC16))
 800fcb4:	883b      	ldrh	r3, [r7, #0]
 800fcb6:	f003 0302 	and.w	r3, r3, #2
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d003      	beq.n	800fcc6 <phhalHw_Pn5180_SetConfig+0x152e>
        {
            dwRegister |= CRC_TX_CONFIG_TX_CRC_TYPE_MASK;
 800fcbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fcc0:	f043 0304 	orr.w	r3, r3, #4
 800fcc4:	637b      	str	r3, [r7, #52]	@ 0x34
        else
        {
            /* QAC */
        }

        if(0U != (wValue & PHHAL_HW_CRCOPTION_INVERTED))
 800fcc6:	883b      	ldrh	r3, [r7, #0]
 800fcc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d004      	beq.n	800fcda <phhalHw_Pn5180_SetConfig+0x1542>
        {
            dwValue |= CRC_TX_CONFIG_TX_CRC_INV_MASK;
 800fcd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcd2:	f043 0302 	orr.w	r3, r3, #2
 800fcd6:	633b      	str	r3, [r7, #48]	@ 0x30
 800fcd8:	e003      	b.n	800fce2 <phhalHw_Pn5180_SetConfig+0x154a>
        }
        else
        {
            dwRegister |= CRC_TX_CONFIG_TX_CRC_INV_MASK;
 800fcda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fcdc:	f043 0302 	orr.w	r3, r3, #2
 800fce0:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        if ((pDataParams->bCardType == PHHAL_HW_CARDTYPE_I18000P3M3) && (0U != ((wValue & PHHAL_HW_CRCTYPE_CRC16))))
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fce8:	2b06      	cmp	r3, #6
 800fcea:	d10c      	bne.n	800fd06 <phhalHw_Pn5180_SetConfig+0x156e>
 800fcec:	883b      	ldrh	r3, [r7, #0]
 800fcee:	f003 0302 	and.w	r3, r3, #2
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d007      	beq.n	800fd06 <phhalHw_Pn5180_SetConfig+0x156e>
        {
            dwRegister |= CRC_TX_CONFIG_TX_CRC_PRESET_SEL_MASK;
 800fcf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fcf8:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 800fcfc:	637b      	str	r3, [r7, #52]	@ 0x34
            dwValue |= (0x3U << CRC_TX_CONFIG_TX_CRC_PRESET_SEL_POS);
 800fcfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd00:	f043 0318 	orr.w	r3, r3, #24
 800fd04:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        wSizeOfRegTypeValueSets = 0U;
 800fd06:	2300      	movs	r3, #0
 800fd08:	84bb      	strh	r3, [r7, #36]	@ 0x24

        /*Clear the Bits */
        dwTemp = (uint32_t) ~( dwRegister );
 800fd0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd0c:	43db      	mvns	r3, r3
 800fd0e:	60bb      	str	r3, [r7, #8]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_TX_CONFIG;
 800fd10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fd12:	1c5a      	adds	r2, r3, #1
 800fd14:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800fd16:	3338      	adds	r3, #56	@ 0x38
 800fd18:	443b      	add	r3, r7
 800fd1a:	2219      	movs	r2, #25
 800fd1c:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 800fd20:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fd22:	1c5a      	adds	r2, r3, #1
 800fd24:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800fd26:	3338      	adds	r3, #56	@ 0x38
 800fd28:	443b      	add	r3, r7
 800fd2a:	2203      	movs	r2, #3
 800fd2c:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800fd30:	68ba      	ldr	r2, [r7, #8]
 800fd32:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fd34:	1c59      	adds	r1, r3, #1
 800fd36:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800fd38:	b2d2      	uxtb	r2, r2
 800fd3a:	3338      	adds	r3, #56	@ 0x38
 800fd3c:	443b      	add	r3, r7
 800fd3e:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800fd42:	68bb      	ldr	r3, [r7, #8]
 800fd44:	0a1a      	lsrs	r2, r3, #8
 800fd46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fd48:	1c59      	adds	r1, r3, #1
 800fd4a:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800fd4c:	b2d2      	uxtb	r2, r2
 800fd4e:	3338      	adds	r3, #56	@ 0x38
 800fd50:	443b      	add	r3, r7
 800fd52:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800fd56:	68bb      	ldr	r3, [r7, #8]
 800fd58:	0c1a      	lsrs	r2, r3, #16
 800fd5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fd5c:	1c59      	adds	r1, r3, #1
 800fd5e:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800fd60:	b2d2      	uxtb	r2, r2
 800fd62:	3338      	adds	r3, #56	@ 0x38
 800fd64:	443b      	add	r3, r7
 800fd66:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800fd6a:	68bb      	ldr	r3, [r7, #8]
 800fd6c:	0e1a      	lsrs	r2, r3, #24
 800fd6e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fd70:	1c59      	adds	r1, r3, #1
 800fd72:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800fd74:	b2d2      	uxtb	r2, r2
 800fd76:	3338      	adds	r3, #56	@ 0x38
 800fd78:	443b      	add	r3, r7
 800fd7a:	f803 2c2c 	strb.w	r2, [r3, #-44]

        /*Set the new value  */
        dwTemp = dwValue;
 800fd7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd80:	60bb      	str	r3, [r7, #8]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_TX_CONFIG;
 800fd82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fd84:	1c5a      	adds	r2, r3, #1
 800fd86:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800fd88:	3338      	adds	r3, #56	@ 0x38
 800fd8a:	443b      	add	r3, r7
 800fd8c:	2219      	movs	r2, #25
 800fd8e:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 800fd92:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fd94:	1c5a      	adds	r2, r3, #1
 800fd96:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800fd98:	3338      	adds	r3, #56	@ 0x38
 800fd9a:	443b      	add	r3, r7
 800fd9c:	2202      	movs	r2, #2
 800fd9e:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800fda2:	68ba      	ldr	r2, [r7, #8]
 800fda4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fda6:	1c59      	adds	r1, r3, #1
 800fda8:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800fdaa:	b2d2      	uxtb	r2, r2
 800fdac:	3338      	adds	r3, #56	@ 0x38
 800fdae:	443b      	add	r3, r7
 800fdb0:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800fdb4:	68bb      	ldr	r3, [r7, #8]
 800fdb6:	0a1a      	lsrs	r2, r3, #8
 800fdb8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fdba:	1c59      	adds	r1, r3, #1
 800fdbc:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800fdbe:	b2d2      	uxtb	r2, r2
 800fdc0:	3338      	adds	r3, #56	@ 0x38
 800fdc2:	443b      	add	r3, r7
 800fdc4:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800fdc8:	68bb      	ldr	r3, [r7, #8]
 800fdca:	0c1a      	lsrs	r2, r3, #16
 800fdcc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fdce:	1c59      	adds	r1, r3, #1
 800fdd0:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800fdd2:	b2d2      	uxtb	r2, r2
 800fdd4:	3338      	adds	r3, #56	@ 0x38
 800fdd6:	443b      	add	r3, r7
 800fdd8:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800fddc:	68bb      	ldr	r3, [r7, #8]
 800fdde:	0e1a      	lsrs	r2, r3, #24
 800fde0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fde2:	1c59      	adds	r1, r3, #1
 800fde4:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800fde6:	b2d2      	uxtb	r2, r2
 800fde8:	3338      	adds	r3, #56	@ 0x38
 800fdea:	443b      	add	r3, r7
 800fdec:	f803 2c2c 	strb.w	r2, [r3, #-44]

        /*Send the array to the IC*/
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 800fdf0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800fdf2:	f107 030c 	add.w	r3, r7, #12
 800fdf6:	4619      	mov	r1, r3
 800fdf8:	6878      	ldr	r0, [r7, #4]
 800fdfa:	f001 fc9d 	bl	8011738 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 800fdfe:	4603      	mov	r3, r0
 800fe00:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800fe02:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	f000 80f6 	beq.w	800fff6 <phhalHw_Pn5180_SetConfig+0x185e>
 800fe0a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fe0c:	e107      	b.n	801001e <phhalHw_Pn5180_SetConfig+0x1886>

        break;

    case PHHAL_HW_CONFIG_MFHALTED:
        if((wValue != PH_ON) && (wValue != PH_OFF))
 800fe0e:	883b      	ldrh	r3, [r7, #0]
 800fe10:	2b01      	cmp	r3, #1
 800fe12:	d005      	beq.n	800fe20 <phhalHw_Pn5180_SetConfig+0x1688>
 800fe14:	883b      	ldrh	r3, [r7, #0]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d002      	beq.n	800fe20 <phhalHw_Pn5180_SetConfig+0x1688>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800fe1a:	f240 2321 	movw	r3, #545	@ 0x221
 800fe1e:	e0fe      	b.n	801001e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        if(wValue == PH_ON)
 800fe20:	883b      	ldrh	r3, [r7, #0]
 800fe22:	2b01      	cmp	r3, #1
 800fe24:	d111      	bne.n	800fe4a <phhalHw_Pn5180_SetConfig+0x16b2>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp,
 800fe26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fe2a:	2100      	movs	r1, #0
 800fe2c:	6878      	ldr	r0, [r7, #4]
 800fe2e:	f001 fb97 	bl	8011560 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 800fe32:	4603      	mov	r3, r0
 800fe34:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800fe36:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d001      	beq.n	800fe40 <phhalHw_Pn5180_SetConfig+0x16a8>
 800fe3c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fe3e:	e0ee      	b.n	801001e <phhalHw_Pn5180_SetConfig+0x1886>
                phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, SYSTEM_CONFIG, SYSTEM_CONFIG_AUTOCOLL_STATE_A_MASK));
           pDataParams->bCardMode  = PH_ON;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	2201      	movs	r2, #1
 800fe44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            PH_CHECK_SUCCESS_FCT(statusTmp,
                phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, SYSTEM_CONFIG, (uint32_t)~SYSTEM_CONFIG_AUTOCOLL_STATE_A_MASK));
            pDataParams->bCardMode  = PH_OFF;

        }
        break;
 800fe48:	e0e8      	b.n	801001c <phhalHw_Pn5180_SetConfig+0x1884>
            PH_CHECK_SUCCESS_FCT(statusTmp,
 800fe4a:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800fe4e:	2100      	movs	r1, #0
 800fe50:	6878      	ldr	r0, [r7, #4]
 800fe52:	f001 fbfb 	bl	801164c <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800fe56:	4603      	mov	r3, r0
 800fe58:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800fe5a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d001      	beq.n	800fe64 <phhalHw_Pn5180_SetConfig+0x16cc>
 800fe60:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fe62:	e0dc      	b.n	801001e <phhalHw_Pn5180_SetConfig+0x1886>
            pDataParams->bCardMode  = PH_OFF;
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	2200      	movs	r2, #0
 800fe68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
        break;
 800fe6c:	e0d6      	b.n	801001c <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_POLL_GUARD_TIME_US:
        /* Disable Poll guard time. */
        if (wValue == 0x00U)
 800fe6e:	883b      	ldrh	r3, [r7, #0]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d101      	bne.n	800fe78 <phhalHw_Pn5180_SetConfig+0x16e0>
        {
            return PH_ERR_SUCCESS;
 800fe74:	2300      	movs	r3, #0
 800fe76:	e0d2      	b.n	801001e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        pDataParams->bPollGuardTimeFlag = PH_ON;
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	2201      	movs	r2, #1
 800fe7c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        phOsal_EventClear(&xEventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_GT_EXP, NULL);
 800fe80:	2300      	movs	r3, #0
 800fe82:	2202      	movs	r2, #2
 800fe84:	2100      	movs	r1, #0
 800fe86:	4868      	ldr	r0, [pc, #416]	@ (8010028 <phhalHw_Pn5180_SetConfig+0x1890>)
 800fe88:	f00a fc90 	bl	801a7ac <phOsal_EventClear>
        PH_CHECK_SUCCESS_FCT(statusTmp, phDriver_TimerStart(PH_DRIVER_TIMER_MICRO_SECS, wValue,
 800fe8c:	883b      	ldrh	r3, [r7, #0]
 800fe8e:	4a67      	ldr	r2, [pc, #412]	@ (801002c <phhalHw_Pn5180_SetConfig+0x1894>)
 800fe90:	4619      	mov	r1, r3
 800fe92:	4867      	ldr	r0, [pc, #412]	@ (8010030 <phhalHw_Pn5180_SetConfig+0x1898>)
 800fe94:	f00a fa64 	bl	801a360 <phDriver_TimerStart>
 800fe98:	4603      	mov	r3, r0
 800fe9a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800fe9c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	f000 80ab 	beq.w	800fffa <phhalHw_Pn5180_SetConfig+0x1862>
 800fea4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fea6:	e0ba      	b.n	801001e <phhalHw_Pn5180_SetConfig+0x1886>
                phhalHw_Pn5180_GuardTimeCallBck));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD:
        if ((wValue == PH_ON) && (pDataParams->bOpeMode != RD_LIB_MODE_FELICA))
 800fea8:	883b      	ldrh	r3, [r7, #0]
 800feaa:	2b01      	cmp	r3, #1
 800feac:	d107      	bne.n	800febe <phhalHw_Pn5180_SetConfig+0x1726>
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800feb4:	2b04      	cmp	r3, #4
 800feb6:	d002      	beq.n	800febe <phhalHw_Pn5180_SetConfig+0x1726>
        {
            /* Before Setting FELICA_EMD bit, OpeMode need to be configured to RD_LIB_MODE_FELICA */
            return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_HAL);
 800feb8:	f240 2325 	movw	r3, #549	@ 0x225
 800febc:	e0af      	b.n	801001e <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* Configure FeliCa EMD enable bit in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 800febe:	883b      	ldrh	r3, [r7, #0]
 800fec0:	2201      	movs	r2, #1
 800fec2:	4619      	mov	r1, r3
 800fec4:	6878      	ldr	r0, [r7, #4]
 800fec6:	f002 fea1 	bl	8012c0c <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit>
 800feca:	4603      	mov	r3, r0
 800fecc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800fece:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	f000 8094 	beq.w	800fffe <phhalHw_Pn5180_SetConfig+0x1866>
 800fed6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fed8:	e0a1      	b.n	801001e <phhalHw_Pn5180_SetConfig+0x1886>
            phhalHw_Pn5180_SetConfig_FelicaEmdRegBit(pDataParams, wValue, (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_ENABLE_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_LEN_CHECK:
        /* Configure EMD length byte check enable bit in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 800feda:	883b      	ldrh	r3, [r7, #0]
 800fedc:	2202      	movs	r2, #2
 800fede:	4619      	mov	r1, r3
 800fee0:	6878      	ldr	r0, [r7, #4]
 800fee2:	f002 fe93 	bl	8012c0c <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit>
 800fee6:	4603      	mov	r3, r0
 800fee8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800feea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800feec:	2b00      	cmp	r3, #0
 800feee:	f000 8088 	beq.w	8010002 <phhalHw_Pn5180_SetConfig+0x186a>
 800fef2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fef4:	e093      	b.n	801001e <phhalHw_Pn5180_SetConfig+0x1886>
            phhalHw_Pn5180_SetConfig_FelicaEmdRegBit(pDataParams, wValue, (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_LEN_CHECK_ENABLE_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_RC_CHECK:
        /* Configure RC byte check enable bit in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 800fef6:	883b      	ldrh	r3, [r7, #0]
 800fef8:	2204      	movs	r2, #4
 800fefa:	4619      	mov	r1, r3
 800fefc:	6878      	ldr	r0, [r7, #4]
 800fefe:	f002 fe85 	bl	8012c0c <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit>
 800ff02:	4603      	mov	r3, r0
 800ff04:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ff06:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d07c      	beq.n	8010006 <phhalHw_Pn5180_SetConfig+0x186e>
 800ff0c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ff0e:	e086      	b.n	801001e <phhalHw_Pn5180_SetConfig+0x1886>
            phhalHw_Pn5180_SetConfig_FelicaEmdRegBit(pDataParams, wValue, (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_RC_CHECK_ENABLE_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_PROTOCOL_ERR_CHECK:
        /* Configure Protocol error check enable bit in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 800ff10:	883b      	ldrh	r3, [r7, #0]
 800ff12:	2208      	movs	r2, #8
 800ff14:	4619      	mov	r1, r3
 800ff16:	6878      	ldr	r0, [r7, #4]
 800ff18:	f002 fe78 	bl	8012c0c <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit>
 800ff1c:	4603      	mov	r3, r0
 800ff1e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ff20:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d071      	beq.n	801000a <phhalHw_Pn5180_SetConfig+0x1872>
 800ff26:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ff28:	e079      	b.n	801001e <phhalHw_Pn5180_SetConfig+0x1886>
            phhalHw_Pn5180_SetConfig_FelicaEmdRegBit(pDataParams, wValue, (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_PROTOCOL_ERR_CHECK_ENABLE_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_INTEGRITY_ERR_CHECK:
        /* Configure Integrity error check enable bit in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 800ff2a:	883b      	ldrh	r3, [r7, #0]
 800ff2c:	2210      	movs	r2, #16
 800ff2e:	4619      	mov	r1, r3
 800ff30:	6878      	ldr	r0, [r7, #4]
 800ff32:	f002 fe6b 	bl	8012c0c <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit>
 800ff36:	4603      	mov	r3, r0
 800ff38:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ff3a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d066      	beq.n	801000e <phhalHw_Pn5180_SetConfig+0x1876>
 800ff40:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ff42:	e06c      	b.n	801001e <phhalHw_Pn5180_SetConfig+0x1886>
            phhalHw_Pn5180_SetConfig_FelicaEmdRegBit(pDataParams, wValue, (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_INTEGRITY_ERR_CHECK_ENABLE_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_LEN_BYTE_MIN:
        /* Configure min length byte value in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 800ff44:	8839      	ldrh	r1, [r7, #0]
 800ff46:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 800ff4a:	2208      	movs	r2, #8
 800ff4c:	6878      	ldr	r0, [r7, #4]
 800ff4e:	f002 fea9 	bl	8012ca4 <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte>
 800ff52:	4603      	mov	r3, r0
 800ff54:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ff56:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d05a      	beq.n	8010012 <phhalHw_Pn5180_SetConfig+0x187a>
 800ff5c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ff5e:	e05e      	b.n	801001e <phhalHw_Pn5180_SetConfig+0x1886>
                (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_LENGTH_BYTE_MIN_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_LEN_BYTE_MAX:
        /* Configure max length byte value in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 800ff60:	8839      	ldrh	r1, [r7, #0]
 800ff62:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
 800ff66:	2210      	movs	r2, #16
 800ff68:	6878      	ldr	r0, [r7, #4]
 800ff6a:	f002 fe9b 	bl	8012ca4 <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte>
 800ff6e:	4603      	mov	r3, r0
 800ff70:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ff72:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d04e      	beq.n	8010016 <phhalHw_Pn5180_SetConfig+0x187e>
 800ff78:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ff7a:	e050      	b.n	801001e <phhalHw_Pn5180_SetConfig+0x1886>
                (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_LENGTH_BYTE_MAX_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_RC_BYTE_VAL:
        /* Configure RC byte value in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 800ff7c:	8839      	ldrh	r1, [r7, #0]
 800ff7e:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 800ff82:	2218      	movs	r2, #24
 800ff84:	6878      	ldr	r0, [r7, #4]
 800ff86:	f002 fe8d 	bl	8012ca4 <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte>
 800ff8a:	4603      	mov	r3, r0
 800ff8c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ff8e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d042      	beq.n	801001a <phhalHw_Pn5180_SetConfig+0x1882>
 800ff94:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ff96:	e042      	b.n	801001e <phhalHw_Pn5180_SetConfig+0x1886>
                (uint8_t)FELICA_EMD_CONTROL_FELICA_EMD_RC_BYTE_VALUE_POS,
                (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_RC_BYTE_VALUE_MASK));
        break;

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 800ff98:	f240 2323 	movw	r3, #547	@ 0x223
 800ff9c:	e03f      	b.n	801001e <phhalHw_Pn5180_SetConfig+0x1886>
        break;
 800ff9e:	bf00      	nop
 800ffa0:	e03c      	b.n	801001c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ffa2:	bf00      	nop
 800ffa4:	e03a      	b.n	801001c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ffa6:	bf00      	nop
 800ffa8:	e038      	b.n	801001c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ffaa:	bf00      	nop
 800ffac:	e036      	b.n	801001c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ffae:	bf00      	nop
 800ffb0:	e034      	b.n	801001c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ffb2:	bf00      	nop
 800ffb4:	e032      	b.n	801001c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ffb6:	bf00      	nop
 800ffb8:	e030      	b.n	801001c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ffba:	bf00      	nop
 800ffbc:	e02e      	b.n	801001c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ffbe:	bf00      	nop
 800ffc0:	e02c      	b.n	801001c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ffc2:	bf00      	nop
 800ffc4:	e02a      	b.n	801001c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ffc6:	bf00      	nop
 800ffc8:	e028      	b.n	801001c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ffca:	bf00      	nop
 800ffcc:	e026      	b.n	801001c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ffce:	bf00      	nop
 800ffd0:	e024      	b.n	801001c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ffd2:	bf00      	nop
 800ffd4:	e022      	b.n	801001c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ffd6:	bf00      	nop
 800ffd8:	e020      	b.n	801001c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ffda:	bf00      	nop
 800ffdc:	e01e      	b.n	801001c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ffde:	bf00      	nop
 800ffe0:	e01c      	b.n	801001c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ffe2:	bf00      	nop
 800ffe4:	e01a      	b.n	801001c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ffe6:	bf00      	nop
 800ffe8:	e018      	b.n	801001c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ffea:	bf00      	nop
 800ffec:	e016      	b.n	801001c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ffee:	bf00      	nop
 800fff0:	e014      	b.n	801001c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800fff2:	bf00      	nop
 800fff4:	e012      	b.n	801001c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800fff6:	bf00      	nop
 800fff8:	e010      	b.n	801001c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800fffa:	bf00      	nop
 800fffc:	e00e      	b.n	801001c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800fffe:	bf00      	nop
 8010000:	e00c      	b.n	801001c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 8010002:	bf00      	nop
 8010004:	e00a      	b.n	801001c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 8010006:	bf00      	nop
 8010008:	e008      	b.n	801001c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 801000a:	bf00      	nop
 801000c:	e006      	b.n	801001c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 801000e:	bf00      	nop
 8010010:	e004      	b.n	801001c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 8010012:	bf00      	nop
 8010014:	e002      	b.n	801001c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 8010016:	bf00      	nop
 8010018:	e000      	b.n	801001c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 801001a:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 801001c:	2300      	movs	r3, #0
}
 801001e:	4618      	mov	r0, r3
 8010020:	3738      	adds	r7, #56	@ 0x38
 8010022:	46bd      	mov	sp, r7
 8010024:	bdb0      	pop	{r4, r5, r7, pc}
 8010026:	bf00      	nop
 8010028:	20001be0 	.word	0x20001be0
 801002c:	0800d8a9 	.word	0x0800d8a9
 8010030:	000f4240 	.word	0x000f4240

08010034 <phhalHw_Pn5180_GetConfig>:
phStatus_t phhalHw_Pn5180_GetConfig(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wConfig,
    uint16_t * pValue
    )
{
 8010034:	b580      	push	{r7, lr}
 8010036:	b08a      	sub	sp, #40	@ 0x28
 8010038:	af02      	add	r7, sp, #8
 801003a:	60f8      	str	r0, [r7, #12]
 801003c:	460b      	mov	r3, r1
 801003e:	607a      	str	r2, [r7, #4]
 8010040:	817b      	strh	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t *   PH_MEMLOC_REM pBuffer = NULL;
 8010042:	2300      	movs	r3, #0
 8010044:	61bb      	str	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wBufferLen = 0;
 8010046:	2300      	movs	r3, #0
 8010048:	82fb      	strh	r3, [r7, #22]
    uint16_t    PH_MEMLOC_REM wBufferSize;
    uint32_t    PH_MEMLOC_REM dwRegister;

    /* Check all the pointers */
    PH_ASSERT_NULL(pValue);
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d101      	bne.n	8010054 <phhalHw_Pn5180_GetConfig+0x20>
 8010050:	2321      	movs	r3, #33	@ 0x21
 8010052:	e281      	b.n	8010558 <phhalHw_Pn5180_GetConfig+0x524>

    switch(wConfig)
 8010054:	897b      	ldrh	r3, [r7, #10]
 8010056:	f248 0250 	movw	r2, #32848	@ 0x8050
 801005a:	4293      	cmp	r3, r2
 801005c:	f000 817f 	beq.w	801035e <phhalHw_Pn5180_GetConfig+0x32a>
 8010060:	f248 0250 	movw	r2, #32848	@ 0x8050
 8010064:	4293      	cmp	r3, r2
 8010066:	f300 8273 	bgt.w	8010550 <phhalHw_Pn5180_GetConfig+0x51c>
 801006a:	f248 0212 	movw	r2, #32786	@ 0x8012
 801006e:	4293      	cmp	r3, r2
 8010070:	f000 814c 	beq.w	801030c <phhalHw_Pn5180_GetConfig+0x2d8>
 8010074:	f248 0212 	movw	r2, #32786	@ 0x8012
 8010078:	4293      	cmp	r3, r2
 801007a:	f300 8269 	bgt.w	8010550 <phhalHw_Pn5180_GetConfig+0x51c>
 801007e:	f248 0211 	movw	r2, #32785	@ 0x8011
 8010082:	4293      	cmp	r3, r2
 8010084:	f000 8131 	beq.w	80102ea <phhalHw_Pn5180_GetConfig+0x2b6>
 8010088:	f248 0211 	movw	r2, #32785	@ 0x8011
 801008c:	4293      	cmp	r3, r2
 801008e:	f300 825f 	bgt.w	8010550 <phhalHw_Pn5180_GetConfig+0x51c>
 8010092:	2b5f      	cmp	r3, #95	@ 0x5f
 8010094:	f300 80ca 	bgt.w	801022c <phhalHw_Pn5180_GetConfig+0x1f8>
 8010098:	2b00      	cmp	r3, #0
 801009a:	f2c0 8259 	blt.w	8010550 <phhalHw_Pn5180_GetConfig+0x51c>
 801009e:	2b5f      	cmp	r3, #95	@ 0x5f
 80100a0:	f200 8256 	bhi.w	8010550 <phhalHw_Pn5180_GetConfig+0x51c>
 80100a4:	a201      	add	r2, pc, #4	@ (adr r2, 80100ac <phhalHw_Pn5180_GetConfig+0x78>)
 80100a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100aa:	bf00      	nop
 80100ac:	08010253 	.word	0x08010253
 80100b0:	08010253 	.word	0x08010253
 80100b4:	08010253 	.word	0x08010253
 80100b8:	08010253 	.word	0x08010253
 80100bc:	08010263 	.word	0x08010263
 80100c0:	08010551 	.word	0x08010551
 80100c4:	08010253 	.word	0x08010253
 80100c8:	08010253 	.word	0x08010253
 80100cc:	08010253 	.word	0x08010253
 80100d0:	08010253 	.word	0x08010253
 80100d4:	08010253 	.word	0x08010253
 80100d8:	08010253 	.word	0x08010253
 80100dc:	08010253 	.word	0x08010253
 80100e0:	0801026d 	.word	0x0801026d
 80100e4:	080102b1 	.word	0x080102b1
 80100e8:	08010253 	.word	0x08010253
 80100ec:	08010551 	.word	0x08010551
 80100f0:	08010551 	.word	0x08010551
 80100f4:	08010551 	.word	0x08010551
 80100f8:	0801033d 	.word	0x0801033d
 80100fc:	08010347 	.word	0x08010347
 8010100:	08010551 	.word	0x08010551
 8010104:	08010551 	.word	0x08010551
 8010108:	08010551 	.word	0x08010551
 801010c:	08010551 	.word	0x08010551
 8010110:	08010551 	.word	0x08010551
 8010114:	08010551 	.word	0x08010551
 8010118:	08010551 	.word	0x08010551
 801011c:	08010551 	.word	0x08010551
 8010120:	08010551 	.word	0x08010551
 8010124:	08010551 	.word	0x08010551
 8010128:	08010551 	.word	0x08010551
 801012c:	08010351 	.word	0x08010351
 8010130:	08010505 	.word	0x08010505
 8010134:	08010551 	.word	0x08010551
 8010138:	08010551 	.word	0x08010551
 801013c:	08010551 	.word	0x08010551
 8010140:	08010551 	.word	0x08010551
 8010144:	08010551 	.word	0x08010551
 8010148:	08010551 	.word	0x08010551
 801014c:	08010551 	.word	0x08010551
 8010150:	08010551 	.word	0x08010551
 8010154:	08010551 	.word	0x08010551
 8010158:	08010551 	.word	0x08010551
 801015c:	08010551 	.word	0x08010551
 8010160:	08010551 	.word	0x08010551
 8010164:	0801036d 	.word	0x0801036d
 8010168:	08010263 	.word	0x08010263
 801016c:	08010387 	.word	0x08010387
 8010170:	08010391 	.word	0x08010391
 8010174:	080103bf 	.word	0x080103bf
 8010178:	080103ed 	.word	0x080103ed
 801017c:	0801041b 	.word	0x0801041b
 8010180:	08010551 	.word	0x08010551
 8010184:	08010551 	.word	0x08010551
 8010188:	08010551 	.word	0x08010551
 801018c:	08010551 	.word	0x08010551
 8010190:	08010551 	.word	0x08010551
 8010194:	08010551 	.word	0x08010551
 8010198:	08010551 	.word	0x08010551
 801019c:	08010551 	.word	0x08010551
 80101a0:	08010551 	.word	0x08010551
 80101a4:	08010551 	.word	0x08010551
 80101a8:	08010551 	.word	0x08010551
 80101ac:	08010551 	.word	0x08010551
 80101b0:	08010551 	.word	0x08010551
 80101b4:	08010551 	.word	0x08010551
 80101b8:	08010551 	.word	0x08010551
 80101bc:	08010551 	.word	0x08010551
 80101c0:	08010551 	.word	0x08010551
 80101c4:	08010551 	.word	0x08010551
 80101c8:	08010551 	.word	0x08010551
 80101cc:	08010551 	.word	0x08010551
 80101d0:	08010551 	.word	0x08010551
 80101d4:	08010551 	.word	0x08010551
 80101d8:	08010551 	.word	0x08010551
 80101dc:	08010551 	.word	0x08010551
 80101e0:	08010551 	.word	0x08010551
 80101e4:	08010551 	.word	0x08010551
 80101e8:	08010551 	.word	0x08010551
 80101ec:	08010551 	.word	0x08010551
 80101f0:	08010551 	.word	0x08010551
 80101f4:	08010499 	.word	0x08010499
 80101f8:	08010465 	.word	0x08010465
 80101fc:	0801048b 	.word	0x0801048b
 8010200:	080104cf 	.word	0x080104cf
 8010204:	08010551 	.word	0x08010551
 8010208:	08010551 	.word	0x08010551
 801020c:	08010551 	.word	0x08010551
 8010210:	08010481 	.word	0x08010481
 8010214:	08010237 	.word	0x08010237
 8010218:	08010551 	.word	0x08010551
 801021c:	08010473 	.word	0x08010473
 8010220:	08010551 	.word	0x08010551
 8010224:	08010245 	.word	0x08010245
 8010228:	08010513 	.word	0x08010513
 801022c:	f248 0210 	movw	r2, #32784	@ 0x8010
 8010230:	4293      	cmp	r3, r2
 8010232:	d055      	beq.n	80102e0 <phhalHw_Pn5180_GetConfig+0x2ac>
 8010234:	e18c      	b.n	8010550 <phhalHw_Pn5180_GetConfig+0x51c>
    {

    case PHHAL_HW_CONFIG_OPE_MODE:
        *pValue = pDataParams->bOpeMode;
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801023c:	461a      	mov	r2, r3
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	801a      	strh	r2, [r3, #0]
        break;
 8010242:	e188      	b.n	8010556 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_SET_EMD:
        *pValue = pDataParams->bEmdFlag;
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801024a:	461a      	mov	r2, r3
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	801a      	strh	r2, [r3, #0]
        break;
 8010250:	e181      	b.n	8010556 <phhalHw_Pn5180_GetConfig+0x522>
    case PHHAL_HW_CONFIG_SUBCARRIER:
    case PHHAL_HW_CONFIG_TXWAIT_US:
    case PHHAL_HW_CONFIG_RXWAIT_US:

        /* Read config from shadow */
        *pValue = pDataParams->wCfgShadow[wConfig];
 8010252:	897a      	ldrh	r2, [r7, #10]
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	322c      	adds	r2, #44	@ 0x2c
 8010258:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	801a      	strh	r2, [r3, #0]
        break;
 8010260:	e179      	b.n	8010556 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TXBUFFER_OFFSET:
    case PHHAL_HW_CONFIG_RXLASTBITS:

        *pValue = pDataParams->wAdditionalInfo;
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	801a      	strh	r2, [r3, #0]
        break;
 801026a:	e174      	b.n	8010556 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TIMEOUT_VALUE_US:

        if (pDataParams->bTimeoutUnit == PHHAL_HW_TIME_MICROSECONDS)
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010272:	2b00      	cmp	r3, #0
 8010274:	d107      	bne.n	8010286 <phhalHw_Pn5180_GetConfig+0x252>
        {
            *pValue = pDataParams->wCfgShadow[wConfig];
 8010276:	897a      	ldrh	r2, [r7, #10]
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	322c      	adds	r2, #44	@ 0x2c
 801027c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	801a      	strh	r2, [r3, #0]
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
            }
            *pValue = pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS] * 1000U;
        }
        break;
 8010284:	e167      	b.n	8010556 <phhalHw_Pn5180_GetConfig+0x522>
            if (pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS] > (0xFFFFU / 1000U))
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 801028c:	2b41      	cmp	r3, #65	@ 0x41
 801028e:	d902      	bls.n	8010296 <phhalHw_Pn5180_GetConfig+0x262>
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
 8010290:	f240 2322 	movw	r3, #546	@ 0x222
 8010294:	e160      	b.n	8010558 <phhalHw_Pn5180_GetConfig+0x524>
            *pValue = pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS] * 1000U;
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 801029c:	461a      	mov	r2, r3
 801029e:	0152      	lsls	r2, r2, #5
 80102a0:	1ad2      	subs	r2, r2, r3
 80102a2:	0092      	lsls	r2, r2, #2
 80102a4:	4413      	add	r3, r2
 80102a6:	00db      	lsls	r3, r3, #3
 80102a8:	b29a      	uxth	r2, r3
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	801a      	strh	r2, [r3, #0]
        break;
 80102ae:	e152      	b.n	8010556 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS:

        if (pDataParams->bTimeoutUnit == PHHAL_HW_TIME_MILLISECONDS)
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80102b6:	2b01      	cmp	r3, #1
 80102b8:	d107      	bne.n	80102ca <phhalHw_Pn5180_GetConfig+0x296>
        {
            *pValue = pDataParams->wCfgShadow[wConfig];
 80102ba:	897a      	ldrh	r2, [r7, #10]
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	322c      	adds	r2, #44	@ 0x2c
 80102c0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TIMEOUT_VALUE_US] / 1000U;
        }
        break;
 80102c8:	e145      	b.n	8010556 <phhalHw_Pn5180_GetConfig+0x522>
            *pValue = pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TIMEOUT_VALUE_US] / 1000U;
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80102d0:	4a9b      	ldr	r2, [pc, #620]	@ (8010540 <phhalHw_Pn5180_GetConfig+0x50c>)
 80102d2:	fba2 2303 	umull	r2, r3, r2, r3
 80102d6:	099b      	lsrs	r3, r3, #6
 80102d8:	b29a      	uxth	r2, r3
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	801a      	strh	r2, [r3, #0]
        break;
 80102de:	e13a      	b.n	8010556 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TIMING_MODE:

        *pValue = pDataParams->wTimingMode;
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	801a      	strh	r2, [r3, #0]
        break;
 80102e8:	e135      	b.n	8010556 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TIMING_US:

        if (pDataParams->dwTimingUs > 0xFFFFU)
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	6a1b      	ldr	r3, [r3, #32]
 80102ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80102f2:	d302      	bcc.n	80102fa <phhalHw_Pn5180_GetConfig+0x2c6>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
 80102f4:	f240 2322 	movw	r3, #546	@ 0x222
 80102f8:	e12e      	b.n	8010558 <phhalHw_Pn5180_GetConfig+0x524>
        }

        *pValue = (uint16_t)pDataParams->dwTimingUs;
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	6a1b      	ldr	r3, [r3, #32]
 80102fe:	b29a      	uxth	r2, r3
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	801a      	strh	r2, [r3, #0]
        pDataParams->dwTimingUs = 0U;
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	2200      	movs	r2, #0
 8010308:	621a      	str	r2, [r3, #32]
        break;
 801030a:	e124      	b.n	8010556 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TIMING_MS:

        if (pDataParams->dwTimingUs > (0xFFFFU * 1000U))
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	6a1b      	ldr	r3, [r3, #32]
 8010310:	4a8c      	ldr	r2, [pc, #560]	@ (8010544 <phhalHw_Pn5180_GetConfig+0x510>)
 8010312:	4293      	cmp	r3, r2
 8010314:	d905      	bls.n	8010322 <phhalHw_Pn5180_GetConfig+0x2ee>
        {
            pDataParams->dwTimingUs = 0U;
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	2200      	movs	r2, #0
 801031a:	621a      	str	r2, [r3, #32]
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
 801031c:	f240 2322 	movw	r3, #546	@ 0x222
 8010320:	e11a      	b.n	8010558 <phhalHw_Pn5180_GetConfig+0x524>
        }

        *pValue = (uint16_t)(pDataParams->dwTimingUs / 1000U);
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	6a1b      	ldr	r3, [r3, #32]
 8010326:	4a86      	ldr	r2, [pc, #536]	@ (8010540 <phhalHw_Pn5180_GetConfig+0x50c>)
 8010328:	fba2 2303 	umull	r2, r3, r2, r3
 801032c:	099b      	lsrs	r3, r3, #6
 801032e:	b29a      	uxth	r2, r3
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	801a      	strh	r2, [r3, #0]
        pDataParams->dwTimingUs = 0U;
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	2200      	movs	r2, #0
 8010338:	621a      	str	r2, [r3, #32]
        break;
 801033a:	e10c      	b.n	8010556 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_FIELD_OFF_TIME:

        *pValue = pDataParams->wFieldOffTime;
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	801a      	strh	r2, [r3, #0]
        break;
 8010344:	e107      	b.n	8010556 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_FIELD_RECOVERY_TIME:

        *pValue = pDataParams->wFieldRecoveryTime;
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	8dda      	ldrh	r2, [r3, #46]	@ 0x2e
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	801a      	strh	r2, [r3, #0]
        break;
 801034e:	e102      	b.n	8010556 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_JEWEL_MODE:

        /* Write configuration data into shadow */
        *pValue = pDataParams->bJewelActivated;
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8010356:	461a      	mov	r2, r3
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	801a      	strh	r2, [r3, #0]
        break;
 801035c:	e0fb      	b.n	8010556 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_RFRESET_ON_TIMEOUT:

        *pValue = pDataParams->bRfResetAfterTo;
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010364:	461a      	mov	r2, r3
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	801a      	strh	r2, [r3, #0]
        break;
 801036a:	e0f4      	b.n	8010556 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_DISABLE_MF_CRYPTO1:

        /* Check Crypto1On Status */
        if ( pDataParams->bMfcCryptoEnabled == PH_ON)
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010372:	2b01      	cmp	r3, #1
 8010374:	d103      	bne.n	801037e <phhalHw_Pn5180_GetConfig+0x34a>
        {
            *pValue = PH_OFF; /* OFF in this case means "Crypto1 not disabled --> enabled" */
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	2200      	movs	r2, #0
 801037a:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = PH_ON; /* ON in this case means "Crypto1 is disabled" */
        }
        break;
 801037c:	e0eb      	b.n	8010556 <phhalHw_Pn5180_GetConfig+0x522>
            *pValue = PH_ON; /* ON in this case means "Crypto1 is disabled" */
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	2201      	movs	r2, #1
 8010382:	801a      	strh	r2, [r3, #0]
        break;
 8010384:	e0e7      	b.n	8010556 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_RXBUFFER_STARTPOS:

        /* Return parameter */
        *pValue = pDataParams->wRxBufStartPos;
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	8bda      	ldrh	r2, [r3, #30]
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	801a      	strh	r2, [r3, #0]
        break;
 801038e:	e0e2      	b.n	8010556 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_RXBUFFER_BUFSIZE:

        /* Retrieve RxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetRxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 8010390:	f107 0116 	add.w	r1, r7, #22
 8010394:	f107 0218 	add.w	r2, r7, #24
 8010398:	f107 0314 	add.w	r3, r7, #20
 801039c:	9300      	str	r3, [sp, #0]
 801039e:	460b      	mov	r3, r1
 80103a0:	2101      	movs	r1, #1
 80103a2:	68f8      	ldr	r0, [r7, #12]
 80103a4:	f002 f873 	bl	801248e <phhalHw_Pn5180_GetRxBuffer>
 80103a8:	4603      	mov	r3, r0
 80103aa:	83fb      	strh	r3, [r7, #30]
 80103ac:	8bfb      	ldrh	r3, [r7, #30]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d001      	beq.n	80103b6 <phhalHw_Pn5180_GetConfig+0x382>
 80103b2:	8bfb      	ldrh	r3, [r7, #30]
 80103b4:	e0d0      	b.n	8010558 <phhalHw_Pn5180_GetConfig+0x524>

        /* Return parameter */
        *pValue = wBufferSize;
 80103b6:	8aba      	ldrh	r2, [r7, #20]
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	801a      	strh	r2, [r3, #0]
        break;
 80103bc:	e0cb      	b.n	8010556 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TXBUFFER_BUFSIZE:

        /* Retrieve TxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetTxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 80103be:	f107 0116 	add.w	r1, r7, #22
 80103c2:	f107 0218 	add.w	r2, r7, #24
 80103c6:	f107 0314 	add.w	r3, r7, #20
 80103ca:	9300      	str	r3, [sp, #0]
 80103cc:	460b      	mov	r3, r1
 80103ce:	2101      	movs	r1, #1
 80103d0:	68f8      	ldr	r0, [r7, #12]
 80103d2:	f002 f820 	bl	8012416 <phhalHw_Pn5180_GetTxBuffer>
 80103d6:	4603      	mov	r3, r0
 80103d8:	83fb      	strh	r3, [r7, #30]
 80103da:	8bfb      	ldrh	r3, [r7, #30]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d001      	beq.n	80103e4 <phhalHw_Pn5180_GetConfig+0x3b0>
 80103e0:	8bfb      	ldrh	r3, [r7, #30]
 80103e2:	e0b9      	b.n	8010558 <phhalHw_Pn5180_GetConfig+0x524>

        /* Return parameter */
        *pValue = wBufferSize;
 80103e4:	8aba      	ldrh	r2, [r7, #20]
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	801a      	strh	r2, [r3, #0]
        break;
 80103ea:	e0b4      	b.n	8010556 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TXBUFFER_LENGTH:

        /* Retrieve TxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetTxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 80103ec:	f107 0116 	add.w	r1, r7, #22
 80103f0:	f107 0218 	add.w	r2, r7, #24
 80103f4:	f107 0314 	add.w	r3, r7, #20
 80103f8:	9300      	str	r3, [sp, #0]
 80103fa:	460b      	mov	r3, r1
 80103fc:	2101      	movs	r1, #1
 80103fe:	68f8      	ldr	r0, [r7, #12]
 8010400:	f002 f809 	bl	8012416 <phhalHw_Pn5180_GetTxBuffer>
 8010404:	4603      	mov	r3, r0
 8010406:	83fb      	strh	r3, [r7, #30]
 8010408:	8bfb      	ldrh	r3, [r7, #30]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d001      	beq.n	8010412 <phhalHw_Pn5180_GetConfig+0x3de>
 801040e:	8bfb      	ldrh	r3, [r7, #30]
 8010410:	e0a2      	b.n	8010558 <phhalHw_Pn5180_GetConfig+0x524>

        /* Return parameter */
        *pValue = wBufferLen;
 8010412:	8afa      	ldrh	r2, [r7, #22]
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	801a      	strh	r2, [r3, #0]
        break;
 8010418:	e09d      	b.n	8010556 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TXBUFFER:

        /* Retrieve TxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetTxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 801041a:	f107 0116 	add.w	r1, r7, #22
 801041e:	f107 0218 	add.w	r2, r7, #24
 8010422:	f107 0314 	add.w	r3, r7, #20
 8010426:	9300      	str	r3, [sp, #0]
 8010428:	460b      	mov	r3, r1
 801042a:	2101      	movs	r1, #1
 801042c:	68f8      	ldr	r0, [r7, #12]
 801042e:	f001 fff2 	bl	8012416 <phhalHw_Pn5180_GetTxBuffer>
 8010432:	4603      	mov	r3, r0
 8010434:	83fb      	strh	r3, [r7, #30]
 8010436:	8bfb      	ldrh	r3, [r7, #30]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d001      	beq.n	8010440 <phhalHw_Pn5180_GetConfig+0x40c>
 801043c:	8bfb      	ldrh	r3, [r7, #30]
 801043e:	e08b      	b.n	8010558 <phhalHw_Pn5180_GetConfig+0x524>

        /* Check additional info parameter */
        if (pDataParams->wAdditionalInfo >= pDataParams->wTxBufSize)
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	8a1b      	ldrh	r3, [r3, #16]
 8010448:	429a      	cmp	r2, r3
 801044a:	d302      	bcc.n	8010452 <phhalHw_Pn5180_GetConfig+0x41e>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 801044c:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8010450:	e082      	b.n	8010558 <phhalHw_Pn5180_GetConfig+0x524>
        }

        /* Retrieve TxBuffer byte */
        *pValue = (uint16_t)pBuffer[pDataParams->wAdditionalInfo];
 8010452:	69bb      	ldr	r3, [r7, #24]
 8010454:	68fa      	ldr	r2, [r7, #12]
 8010456:	8e12      	ldrh	r2, [r2, #48]	@ 0x30
 8010458:	4413      	add	r3, r2
 801045a:	781b      	ldrb	r3, [r3, #0]
 801045c:	461a      	mov	r2, r3
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	801a      	strh	r2, [r3, #0]
        break;
 8010462:	e078      	b.n	8010556 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_RXMULTIPLE:
        *pValue =  pDataParams->bRxMultiple;
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801046a:	461a      	mov	r2, r3
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	801a      	strh	r2, [r3, #0]
        break;
 8010470:	e071      	b.n	8010556 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_NFCIP_STARTBYTE:
        *pValue = pDataParams->bNfcipMode;
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8010478:	461a      	mov	r2, r3
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	801a      	strh	r2, [r3, #0]
        break;
 801047e:	e06a      	b.n	8010556 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TARGET_DATARATE_FRAMING:
        *pValue = pDataParams->wTargetMode;
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	801a      	strh	r2, [r3, #0]
        break;
 8010488:	e065      	b.n	8010556 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_ACTIVEMODE:
        /* Return parameter */
        *pValue = (uint16_t)pDataParams->bActiveMode;
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010490:	461a      	mov	r2, r3
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	801a      	strh	r2, [r3, #0]
        break;
 8010496:	e05e      	b.n	8010556 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_EXT_RF_ON:
        /* Retrieve Status register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 8010498:	f107 0310 	add.w	r3, r7, #16
 801049c:	461a      	mov	r2, r3
 801049e:	211d      	movs	r1, #29
 80104a0:	68f8      	ldr	r0, [r7, #12]
 80104a2:	f001 f9fb 	bl	801189c <phhalHw_Pn5180_Instr_ReadRegister>
 80104a6:	4603      	mov	r3, r0
 80104a8:	83fb      	strh	r3, [r7, #30]
 80104aa:	8bfb      	ldrh	r3, [r7, #30]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d001      	beq.n	80104b4 <phhalHw_Pn5180_GetConfig+0x480>
 80104b0:	8bfb      	ldrh	r3, [r7, #30]
 80104b2:	e051      	b.n	8010558 <phhalHw_Pn5180_GetConfig+0x524>
            phhalHw_Pn5180_Instr_ReadRegister(pDataParams, RF_STATUS, &dwRegister));

        /* Check EXT_RF_ON bit */
        if (0U != (dwRegister & RF_STATUS_RF_DET_STATUS_MASK))
 80104b4:	693b      	ldr	r3, [r7, #16]
 80104b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d003      	beq.n	80104c6 <phhalHw_Pn5180_GetConfig+0x492>
        {
            *pValue = PH_ON; /* ON if external RF field is detected */
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	2201      	movs	r2, #1
 80104c2:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = PH_OFF; /* OFF if no external RF field is detected */
        }
        break;
 80104c4:	e047      	b.n	8010556 <phhalHw_Pn5180_GetConfig+0x522>
            *pValue = PH_OFF; /* OFF if no external RF field is detected */
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	2200      	movs	r2, #0
 80104ca:	801a      	strh	r2, [r3, #0]
        break;
 80104cc:	e043      	b.n	8010556 <phhalHw_Pn5180_GetConfig+0x522>
    case PHHAL_HW_CONFIG_MFHALTED:
    {
        PH_CHECK_SUCCESS_FCT(statusTmp,
 80104ce:	f107 0310 	add.w	r3, r7, #16
 80104d2:	461a      	mov	r2, r3
 80104d4:	2100      	movs	r1, #0
 80104d6:	68f8      	ldr	r0, [r7, #12]
 80104d8:	f001 f9e0 	bl	801189c <phhalHw_Pn5180_Instr_ReadRegister>
 80104dc:	4603      	mov	r3, r0
 80104de:	83fb      	strh	r3, [r7, #30]
 80104e0:	8bfb      	ldrh	r3, [r7, #30]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d001      	beq.n	80104ea <phhalHw_Pn5180_GetConfig+0x4b6>
 80104e6:	8bfb      	ldrh	r3, [r7, #30]
 80104e8:	e036      	b.n	8010558 <phhalHw_Pn5180_GetConfig+0x524>
            phhalHw_Pn5180_Instr_ReadRegister(pDataParams, SYSTEM_CONFIG, &dwRegister));
        if(0U != (dwRegister & SYSTEM_CONFIG_AUTOCOLL_STATE_A_MASK))
 80104ea:	693b      	ldr	r3, [r7, #16]
 80104ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d003      	beq.n	80104fc <phhalHw_Pn5180_GetConfig+0x4c8>
        {
            *pValue = PH_ON;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	2201      	movs	r2, #1
 80104f8:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = PH_OFF;
        }
        break;
 80104fa:	e02c      	b.n	8010556 <phhalHw_Pn5180_GetConfig+0x522>
            *pValue = PH_OFF;
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	2200      	movs	r2, #0
 8010500:	801a      	strh	r2, [r3, #0]
        break;
 8010502:	e028      	b.n	8010556 <phhalHw_Pn5180_GetConfig+0x522>
    }

    case PHHAL_HW_CONFIG_CARD_TYPE:
        *pValue = pDataParams->bCardType;
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801050a:	461a      	mov	r2, r3
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	801a      	strh	r2, [r3, #0]
        break;
 8010510:	e021      	b.n	8010556 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_INT_RF_ON:
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegister(pDataParams, RF_STATUS, &dwRegister));
 8010512:	f107 0310 	add.w	r3, r7, #16
 8010516:	461a      	mov	r2, r3
 8010518:	211d      	movs	r1, #29
 801051a:	68f8      	ldr	r0, [r7, #12]
 801051c:	f001 f9be 	bl	801189c <phhalHw_Pn5180_Instr_ReadRegister>
 8010520:	4603      	mov	r3, r0
 8010522:	83fb      	strh	r3, [r7, #30]
 8010524:	8bfb      	ldrh	r3, [r7, #30]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d001      	beq.n	801052e <phhalHw_Pn5180_GetConfig+0x4fa>
 801052a:	8bfb      	ldrh	r3, [r7, #30]
 801052c:	e014      	b.n	8010558 <phhalHw_Pn5180_GetConfig+0x524>
        if((dwRegister & RF_STATUS_TX_RF_STATUS_MASK ) == RF_STATUS_TX_RF_STATUS_MASK)
 801052e:	693b      	ldr	r3, [r7, #16]
 8010530:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010534:	2b00      	cmp	r3, #0
 8010536:	d007      	beq.n	8010548 <phhalHw_Pn5180_GetConfig+0x514>
        {
            *pValue = PH_ON;
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	2201      	movs	r2, #1
 801053c:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = PH_OFF;
        }
        break;
 801053e:	e00a      	b.n	8010556 <phhalHw_Pn5180_GetConfig+0x522>
 8010540:	10624dd3 	.word	0x10624dd3
 8010544:	03e7fc18 	.word	0x03e7fc18
            *pValue = PH_OFF;
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	2200      	movs	r2, #0
 801054c:	801a      	strh	r2, [r3, #0]
        break;
 801054e:	e002      	b.n	8010556 <phhalHw_Pn5180_GetConfig+0x522>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 8010550:	f240 2323 	movw	r3, #547	@ 0x223
 8010554:	e000      	b.n	8010558 <phhalHw_Pn5180_GetConfig+0x524>
    }

    return PH_ERR_SUCCESS;
 8010556:	2300      	movs	r3, #0
}
 8010558:	4618      	mov	r0, r3
 801055a:	3720      	adds	r7, #32
 801055c:	46bd      	mov	sp, r7
 801055e:	bd80      	pop	{r7, pc}

08010560 <phhalHw_Pn5180_SetMinFDT>:

phStatus_t phhalHw_Pn5180_SetMinFDT(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wValue
    )
{
 8010560:	b580      	push	{r7, lr}
 8010562:	b084      	sub	sp, #16
 8010564:	af00      	add	r7, sp, #0
 8010566:	6078      	str	r0, [r7, #4]
 8010568:	460b      	mov	r3, r1
 801056a:	807b      	strh	r3, [r7, #2]
    phStatus_t PH_MEMLOC_REM statusTmp = 0U;
 801056c:	2300      	movs	r3, #0
 801056e:	81fb      	strh	r3, [r7, #14]
    uint16_t   PH_MEMLOC_REM wTimer = 0U;
 8010570:	2300      	movs	r3, #0
 8010572:	81bb      	strh	r3, [r7, #12]
    uint16_t   PH_MEMLOC_REM wTxRate = 0U;
 8010574:	2300      	movs	r3, #0
 8010576:	817b      	strh	r3, [r7, #10]

    if (wValue == PH_ON)
 8010578:	887b      	ldrh	r3, [r7, #2]
 801057a:	2b01      	cmp	r3, #1
 801057c:	d146      	bne.n	801060c <phhalHw_Pn5180_SetMinFDT+0xac>
    {
        /*Backup the old Timer values and set min FDT*/
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetConfig(pDataParams,
 801057e:	f107 030c 	add.w	r3, r7, #12
 8010582:	461a      	mov	r2, r3
 8010584:	210e      	movs	r1, #14
 8010586:	6878      	ldr	r0, [r7, #4]
 8010588:	f7ff fd54 	bl	8010034 <phhalHw_Pn5180_GetConfig>
 801058c:	4603      	mov	r3, r0
 801058e:	81fb      	strh	r3, [r7, #14]
 8010590:	89fb      	ldrh	r3, [r7, #14]
 8010592:	2b00      	cmp	r3, #0
 8010594:	d001      	beq.n	801059a <phhalHw_Pn5180_SetMinFDT+0x3a>
 8010596:	89fb      	ldrh	r3, [r7, #14]
 8010598:	e04a      	b.n	8010630 <phhalHw_Pn5180_SetMinFDT+0xd0>
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS, &wTimer));
        pDataParams->dwFdtPc = wTimer;
 801059a:	89ba      	ldrh	r2, [r7, #12]
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        /* Calculate values for Microsecond values */
        /* Get the data rate */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetConfig(pDataParams,
 80105a0:	f107 030a 	add.w	r3, r7, #10
 80105a4:	461a      	mov	r2, r3
 80105a6:	2109      	movs	r1, #9
 80105a8:	6878      	ldr	r0, [r7, #4]
 80105aa:	f7ff fd43 	bl	8010034 <phhalHw_Pn5180_GetConfig>
 80105ae:	4603      	mov	r3, r0
 80105b0:	81fb      	strh	r3, [r7, #14]
 80105b2:	89fb      	ldrh	r3, [r7, #14]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d001      	beq.n	80105bc <phhalHw_Pn5180_SetMinFDT+0x5c>
 80105b8:	89fb      	ldrh	r3, [r7, #14]
 80105ba:	e039      	b.n	8010630 <phhalHw_Pn5180_SetMinFDT+0xd0>
            PHHAL_HW_CONFIG_TXDATARATE_FRAMING, &wTxRate));
        switch(wTxRate)
 80105bc:	897b      	ldrh	r3, [r7, #10]
 80105be:	2b03      	cmp	r3, #3
 80105c0:	d816      	bhi.n	80105f0 <phhalHw_Pn5180_SetMinFDT+0x90>
 80105c2:	a201      	add	r2, pc, #4	@ (adr r2, 80105c8 <phhalHw_Pn5180_SetMinFDT+0x68>)
 80105c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105c8:	080105d9 	.word	0x080105d9
 80105cc:	080105df 	.word	0x080105df
 80105d0:	080105e5 	.word	0x080105e5
 80105d4:	080105eb 	.word	0x080105eb
        {
        case PHHAL_HW_RF_DATARATE_106:
            wTimer = PHHAL_HW_MINFDT_106_US;
 80105d8:	2365      	movs	r3, #101	@ 0x65
 80105da:	81bb      	strh	r3, [r7, #12]
            break;
 80105dc:	e009      	b.n	80105f2 <phhalHw_Pn5180_SetMinFDT+0x92>
        case PHHAL_HW_RF_DATARATE_212:
            wTimer = PHHAL_HW_MINFDT_212_US;
 80105de:	237f      	movs	r3, #127	@ 0x7f
 80105e0:	81bb      	strh	r3, [r7, #12]
            break;
 80105e2:	e006      	b.n	80105f2 <phhalHw_Pn5180_SetMinFDT+0x92>
        case PHHAL_HW_RF_DATARATE_424:
            wTimer = PHHAL_HW_MINFDT_424_US;
 80105e4:	2377      	movs	r3, #119	@ 0x77
 80105e6:	81bb      	strh	r3, [r7, #12]
            break;
 80105e8:	e003      	b.n	80105f2 <phhalHw_Pn5180_SetMinFDT+0x92>
        case PHHAL_HW_RF_DATARATE_848:
            wTimer = PHHAL_HW_MINFDT_848_US;
 80105ea:	2380      	movs	r3, #128	@ 0x80
 80105ec:	81bb      	strh	r3, [r7, #12]
            break;
 80105ee:	e000      	b.n	80105f2 <phhalHw_Pn5180_SetMinFDT+0x92>
        default:
            break;
 80105f0:	bf00      	nop
        }
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams,
 80105f2:	89bb      	ldrh	r3, [r7, #12]
 80105f4:	461a      	mov	r2, r3
 80105f6:	210d      	movs	r1, #13
 80105f8:	6878      	ldr	r0, [r7, #4]
 80105fa:	f7fe f8cd 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 80105fe:	4603      	mov	r3, r0
 8010600:	81fb      	strh	r3, [r7, #14]
 8010602:	89fb      	ldrh	r3, [r7, #14]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d012      	beq.n	801062e <phhalHw_Pn5180_SetMinFDT+0xce>
 8010608:	89fb      	ldrh	r3, [r7, #14]
 801060a:	e011      	b.n	8010630 <phhalHw_Pn5180_SetMinFDT+0xd0>
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_US, wTimer));
    }
    else if (wValue == PH_OFF)
 801060c:	887b      	ldrh	r3, [r7, #2]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d10d      	bne.n	801062e <phhalHw_Pn5180_SetMinFDT+0xce>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams,
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010616:	461a      	mov	r2, r3
 8010618:	210e      	movs	r1, #14
 801061a:	6878      	ldr	r0, [r7, #4]
 801061c:	f7fe f8bc 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8010620:	4603      	mov	r3, r0
 8010622:	81fb      	strh	r3, [r7, #14]
 8010624:	89fb      	ldrh	r3, [r7, #14]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d001      	beq.n	801062e <phhalHw_Pn5180_SetMinFDT+0xce>
 801062a:	89fb      	ldrh	r3, [r7, #14]
 801062c:	e000      	b.n	8010630 <phhalHw_Pn5180_SetMinFDT+0xd0>
    }
    else
    {
        /* Do nothing*/
    }
    return PH_ERR_SUCCESS;
 801062e:	2300      	movs	r3, #0
}
 8010630:	4618      	mov	r0, r3
 8010632:	3710      	adds	r7, #16
 8010634:	46bd      	mov	sp, r7
 8010636:	bd80      	pop	{r7, pc}

08010638 <phhalHw_Pn5180_BalExchange>:
                                      uint16_t wTxLength,
                                      uint16_t wRxBufSize,
                                      uint8_t * pRxBuffer,
                                      uint16_t * pRxLength
                                      )
{
 8010638:	b580      	push	{r7, lr}
 801063a:	b08a      	sub	sp, #40	@ 0x28
 801063c:	af04      	add	r7, sp, #16
 801063e:	60f8      	str	r0, [r7, #12]
 8010640:	60b9      	str	r1, [r7, #8]
 8010642:	4611      	mov	r1, r2
 8010644:	461a      	mov	r2, r3
 8010646:	460b      	mov	r3, r1
 8010648:	80fb      	strh	r3, [r7, #6]
 801064a:	4613      	mov	r3, r2
 801064c:	80bb      	strh	r3, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;

    if (((phbalReg_Type_t *)(pDataParams->pBalDataParams))->bBalType == PHBAL_REG_TYPE_KERNEL_SPI)
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	685b      	ldr	r3, [r3, #4]
 8010652:	789b      	ldrb	r3, [r3, #2]
 8010654:	2b04      	cmp	r3, #4
 8010656:	d10f      	bne.n	8010678 <phhalHw_Pn5180_BalExchange+0x40>
    {
        return phbalReg_Exchange(
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	6858      	ldr	r0, [r3, #4]
 801065c:	88fa      	ldrh	r2, [r7, #6]
 801065e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010660:	9302      	str	r3, [sp, #8]
 8010662:	6a3b      	ldr	r3, [r7, #32]
 8010664:	9301      	str	r3, [sp, #4]
 8010666:	88bb      	ldrh	r3, [r7, #4]
 8010668:	9300      	str	r3, [sp, #0]
 801066a:	4613      	mov	r3, r2
 801066c:	68ba      	ldr	r2, [r7, #8]
 801066e:	2100      	movs	r1, #0
 8010670:	f009 fee6 	bl	801a440 <phbalReg_Exchange>
 8010674:	4603      	mov	r3, r0
 8010676:	e077      	b.n	8010768 <phhalHw_Pn5180_BalExchange+0x130>
    else
    {

#ifndef _WIN32
        /* Wait for the Busy to be low */
        while(phDriver_PinRead(PHDRIVER_PIN_BUSY, PH_DRIVER_PINFUNC_INPUT));
 8010678:	bf00      	nop
 801067a:	2201      	movs	r2, #1
 801067c:	2102      	movs	r1, #2
 801067e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8010682:	f009 fe49 	bl	801a318 <phDriver_PinRead>
 8010686:	4603      	mov	r3, r0
 8010688:	2b00      	cmp	r3, #0
 801068a:	d1f6      	bne.n	801067a <phhalHw_Pn5180_BalExchange+0x42>
                0U,
                NULL,
                NULL));
#else
        /* Enable chip select connected to reader IC by pulling NSS low. */
        phhalHw_Pn5180_WriteSSEL(pDataParams->pBalDataParams, PH_DRIVER_SET_LOW);
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	685b      	ldr	r3, [r3, #4]
 8010690:	2100      	movs	r1, #0
 8010692:	4618      	mov	r0, r3
 8010694:	f000 fea2 	bl	80113dc <phhalHw_Pn5180_WriteSSEL>

        PH_CHECK_SUCCESS_FCT(statusTmp, phbalReg_Exchange(
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	6858      	ldr	r0, [r3, #4]
 801069c:	88fa      	ldrh	r2, [r7, #6]
 801069e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106a0:	9302      	str	r3, [sp, #8]
 80106a2:	2300      	movs	r3, #0
 80106a4:	9301      	str	r3, [sp, #4]
 80106a6:	88fb      	ldrh	r3, [r7, #6]
 80106a8:	9300      	str	r3, [sp, #0]
 80106aa:	4613      	mov	r3, r2
 80106ac:	68ba      	ldr	r2, [r7, #8]
 80106ae:	2100      	movs	r1, #0
 80106b0:	f009 fec6 	bl	801a440 <phbalReg_Exchange>
 80106b4:	4603      	mov	r3, r0
 80106b6:	82fb      	strh	r3, [r7, #22]
 80106b8:	8afb      	ldrh	r3, [r7, #22]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d001      	beq.n	80106c2 <phhalHw_Pn5180_BalExchange+0x8a>
 80106be:	8afb      	ldrh	r3, [r7, #22]
 80106c0:	e052      	b.n	8010768 <phhalHw_Pn5180_BalExchange+0x130>
                wTxLength,
                wTxLength,
                NULL,
                pRxLength));

        if (pDataParams->bIsTestBusEnabled == PH_ON)
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 80106c8:	2b01      	cmp	r3, #1
 80106ca:	d109      	bne.n	80106e0 <phhalHw_Pn5180_BalExchange+0xa8>
        {
            /* Wait for the Busy Pin to go high when TestBus is enabled. */
            while(!phDriver_PinRead(PHDRIVER_PIN_BUSY, PH_DRIVER_PINFUNC_INPUT));
 80106cc:	bf00      	nop
 80106ce:	2201      	movs	r2, #1
 80106d0:	2102      	movs	r1, #2
 80106d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80106d6:	f009 fe1f 	bl	801a318 <phDriver_PinRead>
 80106da:	4603      	mov	r3, r0
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d0f6      	beq.n	80106ce <phhalHw_Pn5180_BalExchange+0x96>
        }

        /* Disable chip select connected to reader IC by pulling NSS high. */
        phhalHw_Pn5180_WriteSSEL(pDataParams->pBalDataParams, PH_DRIVER_SET_HIGH);
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	685b      	ldr	r3, [r3, #4]
 80106e4:	2101      	movs	r1, #1
 80106e6:	4618      	mov	r0, r3
 80106e8:	f000 fe78 	bl	80113dc <phhalHw_Pn5180_WriteSSEL>
#endif

        if (0U != wRxBufSize)
 80106ec:	88bb      	ldrh	r3, [r7, #4]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d039      	beq.n	8010766 <phhalHw_Pn5180_BalExchange+0x12e>
        {
#ifndef _WIN32
            while(phDriver_PinRead(PHDRIVER_PIN_BUSY, PH_DRIVER_PINFUNC_INPUT));
 80106f2:	bf00      	nop
 80106f4:	2201      	movs	r2, #1
 80106f6:	2102      	movs	r1, #2
 80106f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80106fc:	f009 fe0c 	bl	801a318 <phDriver_PinRead>
 8010700:	4603      	mov	r3, r0
 8010702:	2b00      	cmp	r3, #0
 8010704:	d1f6      	bne.n	80106f4 <phhalHw_Pn5180_BalExchange+0xbc>
                    wRxBufSize,
                    pRxBuffer,
                    pRxLength));
#else
            /* Enable chip select connected to reader IC by pulling NSS low. */
            phhalHw_Pn5180_WriteSSEL(pDataParams->pBalDataParams, PH_DRIVER_SET_LOW);
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	685b      	ldr	r3, [r3, #4]
 801070a:	2100      	movs	r1, #0
 801070c:	4618      	mov	r0, r3
 801070e:	f000 fe65 	bl	80113dc <phhalHw_Pn5180_WriteSSEL>

            PH_CHECK_SUCCESS_FCT(statusTmp, phbalReg_Exchange(
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	6858      	ldr	r0, [r3, #4]
 8010716:	88ba      	ldrh	r2, [r7, #4]
 8010718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801071a:	9302      	str	r3, [sp, #8]
 801071c:	6a3b      	ldr	r3, [r7, #32]
 801071e:	9301      	str	r3, [sp, #4]
 8010720:	88bb      	ldrh	r3, [r7, #4]
 8010722:	9300      	str	r3, [sp, #0]
 8010724:	4613      	mov	r3, r2
 8010726:	2200      	movs	r2, #0
 8010728:	2100      	movs	r1, #0
 801072a:	f009 fe89 	bl	801a440 <phbalReg_Exchange>
 801072e:	4603      	mov	r3, r0
 8010730:	82fb      	strh	r3, [r7, #22]
 8010732:	8afb      	ldrh	r3, [r7, #22]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d001      	beq.n	801073c <phhalHw_Pn5180_BalExchange+0x104>
 8010738:	8afb      	ldrh	r3, [r7, #22]
 801073a:	e015      	b.n	8010768 <phhalHw_Pn5180_BalExchange+0x130>
                    wRxBufSize,
                    wRxBufSize,
                    pRxBuffer,
                    pRxLength));

            if (pDataParams->bIsTestBusEnabled == PH_ON)
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 8010742:	2b01      	cmp	r3, #1
 8010744:	d109      	bne.n	801075a <phhalHw_Pn5180_BalExchange+0x122>
            {
                /* Wait for the Busy Pin to go high when TestBus is enabled. */
                while(!phDriver_PinRead(PHDRIVER_PIN_BUSY, PH_DRIVER_PINFUNC_INPUT));
 8010746:	bf00      	nop
 8010748:	2201      	movs	r2, #1
 801074a:	2102      	movs	r1, #2
 801074c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8010750:	f009 fde2 	bl	801a318 <phDriver_PinRead>
 8010754:	4603      	mov	r3, r0
 8010756:	2b00      	cmp	r3, #0
 8010758:	d0f6      	beq.n	8010748 <phhalHw_Pn5180_BalExchange+0x110>
            }

            /* Disable chip select connected to reader IC by pulling NSS high. */
            phhalHw_Pn5180_WriteSSEL(pDataParams->pBalDataParams, PH_DRIVER_SET_HIGH);
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	685b      	ldr	r3, [r3, #4]
 801075e:	2101      	movs	r1, #1
 8010760:	4618      	mov	r0, r3
 8010762:	f000 fe3b 	bl	80113dc <phhalHw_Pn5180_WriteSSEL>
#endif
        }

    }

    return PH_ERR_SUCCESS;
 8010766:	2300      	movs	r3, #0
}
 8010768:	4618      	mov	r0, r3
 801076a:	3718      	adds	r7, #24
 801076c:	46bd      	mov	sp, r7
 801076e:	bd80      	pop	{r7, pc}

08010770 <phhalHw_Pn5180_Autocoll>:
    uint16_t wMode,
    uint8_t ** ppRxBuffer,
    uint16_t * pRxLength,
    uint16_t * pProtParams
    )
{
 8010770:	b580      	push	{r7, lr}
 8010772:	b090      	sub	sp, #64	@ 0x40
 8010774:	af02      	add	r7, sp, #8
 8010776:	60f8      	str	r0, [r7, #12]
 8010778:	607a      	str	r2, [r7, #4]
 801077a:	603b      	str	r3, [r7, #0]
 801077c:	460b      	mov	r3, r1
 801077e:	817b      	strh	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_INTERNAL_ERROR;
 8010780:	237f      	movs	r3, #127	@ 0x7f
 8010782:	86fb      	strh	r3, [r7, #54]	@ 0x36
    uint32_t    PH_MEMLOC_REM dwIrqWaitFor;
    uint32_t    PH_MEMLOC_REM dwRegValue = 0U;
 8010784:	2300      	movs	r3, #0
 8010786:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t    PH_MEMLOC_REM dwRfStatus;
    uint8_t     PH_MEMLOC_REM bRfTechnology = 0U;
 8010788:	2300      	movs	r3, #0
 801078a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    uint8_t     PH_MEMLOC_REM offsetPos = 0U;
 801078e:	2300      	movs	r3, #0
 8010790:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    uint8_t     PH_MEMLOC_REM offsetLen = 0U;
 8010794:	2300      	movs	r3, #0
 8010796:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    uint8_t     PH_MEMLOC_REM bFraming = 0U;
 801079a:	2300      	movs	r3, #0
 801079c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    uint8_t     PH_MEMLOC_REM bSpeed = 0U;
 80107a0:	2300      	movs	r3, #0
 80107a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    uint8_t     PH_MEMLOC_REM pRegisters[4];
    uint8_t*    PH_MEMLOC_REM pTmpBuffer;

    /*Fixed for Autonomous mode not used, i.e. autocoll terminates when external RF field is not present*/
    uint8_t PH_MEMLOC_REM   bAutocollMode = 0U;
 80107a6:	2300      	movs	r3, #0
 80107a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    uint32_t PH_MEMLOC_REM  dwIrqReg = 0U;
 80107ac:	2300      	movs	r3, #0
 80107ae:	617b      	str	r3, [r7, #20]

    /* Disable the EMD. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_OFF));
 80107b0:	2200      	movs	r2, #0
 80107b2:	215e      	movs	r1, #94	@ 0x5e
 80107b4:	68f8      	ldr	r0, [r7, #12]
 80107b6:	f7fd ffef 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 80107ba:	4603      	mov	r3, r0
 80107bc:	853b      	strh	r3, [r7, #40]	@ 0x28
 80107be:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d001      	beq.n	80107c8 <phhalHw_Pn5180_Autocoll+0x58>
 80107c4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80107c6:	e25e      	b.n	8010c86 <phhalHw_Pn5180_Autocoll+0x516>

    /*bTransmited is a flag which is used to identify if a transmit is followed by a receive.
    If any other api follows a transmit, then it should be reset */
    pDataParams->bTransmited = PH_OFF;
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	2200      	movs	r2, #0
 80107cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    if ( (NULL == pDataParams) \
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d008      	beq.n	80107e8 <phhalHw_Pn5180_Autocoll+0x78>
        || (NULL == ppRxBuffer)\
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d005      	beq.n	80107e8 <phhalHw_Pn5180_Autocoll+0x78>
        || (NULL == pRxLength) \
 80107dc:	683b      	ldr	r3, [r7, #0]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d002      	beq.n	80107e8 <phhalHw_Pn5180_Autocoll+0x78>
        ||  (NULL == pProtParams) \
 80107e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d102      	bne.n	80107ee <phhalHw_Pn5180_Autocoll+0x7e>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80107e8:	f240 2321 	movw	r3, #545	@ 0x221
 80107ec:	e24b      	b.n	8010c86 <phhalHw_Pn5180_Autocoll+0x516>
    }

    if(pDataParams->bCardMode == PH_ON)
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80107f4:	2b01      	cmp	r3, #1
 80107f6:	d103      	bne.n	8010800 <phhalHw_Pn5180_Autocoll+0x90>
    {
        bRfTechnology = PHHAL_HW_PN5180_AUTOCOLL_RF_TECHNOLOGY_MASK_NFC_A;
 80107f8:	2301      	movs	r3, #1
 80107fa:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 80107fe:	e037      	b.n	8010870 <phhalHw_Pn5180_Autocoll+0x100>
    }
    else
    {
        /*RFTech A*/
        if((wMode & A_MODE) == A_MODE)
 8010800:	897b      	ldrh	r3, [r7, #10]
 8010802:	f003 0301 	and.w	r3, r3, #1
 8010806:	2b00      	cmp	r3, #0
 8010808:	d005      	beq.n	8010816 <phhalHw_Pn5180_Autocoll+0xa6>
        {
            bRfTechnology |= PHHAL_HW_PN5180_AUTOCOLL_RF_TECHNOLOGY_MASK_NFC_A;
 801080a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801080e:	f043 0301 	orr.w	r3, r3, #1
 8010812:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        }
        /*RFTech F*/
        if((wMode & F_MODE) == F_MODE)
 8010816:	897b      	ldrh	r3, [r7, #10]
 8010818:	f003 0304 	and.w	r3, r3, #4
 801081c:	2b00      	cmp	r3, #0
 801081e:	d005      	beq.n	801082c <phhalHw_Pn5180_Autocoll+0xbc>
        {
            bRfTechnology |= PHHAL_HW_PN5180_AUTOCOLL_RF_TECHNOLOGY_MASK_NFC_F;
 8010820:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8010824:	f043 0302 	orr.w	r3, r3, #2
 8010828:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        }
        /*RFTech Active A*/
        if((wMode & ACTIVE_A_MODE) == ACTIVE_A_MODE)
 801082c:	897b      	ldrh	r3, [r7, #10]
 801082e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010832:	2b00      	cmp	r3, #0
 8010834:	d005      	beq.n	8010842 <phhalHw_Pn5180_Autocoll+0xd2>
        {
            bRfTechnology |= PHHAL_HW_PN5180_AUTOCOLL_RF_TECHNOLOGY_MASK_ISO18092_ACTIVE;
 8010836:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801083a:	f043 0304 	orr.w	r3, r3, #4
 801083e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        }
        /*RFTech Active F*/
        if((wMode & ACTIVE_F_MODE) == ACTIVE_F_MODE)
 8010842:	897b      	ldrh	r3, [r7, #10]
 8010844:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010848:	2b00      	cmp	r3, #0
 801084a:	d005      	beq.n	8010858 <phhalHw_Pn5180_Autocoll+0xe8>
        {
            bRfTechnology |= PHHAL_HW_PN5180_AUTOCOLL_RF_TECHNOLOGY_MASK_NFC_F_ACTIVE;
 801084c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8010850:	f043 0308 	orr.w	r3, r3, #8
 8010854:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        }
        /*RFTech B and Active B*/
        if(((wMode & B_MODE) == B_MODE)||((wMode & ACTIVE_B_MODE) == ACTIVE_B_MODE))
 8010858:	897b      	ldrh	r3, [r7, #10]
 801085a:	f003 0302 	and.w	r3, r3, #2
 801085e:	2b00      	cmp	r3, #0
 8010860:	d104      	bne.n	801086c <phhalHw_Pn5180_Autocoll+0xfc>
 8010862:	897b      	ldrh	r3, [r7, #10]
 8010864:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010868:	2b00      	cmp	r3, #0
 801086a:	d001      	beq.n	8010870 <phhalHw_Pn5180_Autocoll+0x100>
        {
            /* Do nothing, ignore -- NFCP576 -- as the NFC forum DTA application expects success for Listen B */
            return PH_ERR_SUCCESS;
 801086c:	2300      	movs	r3, #0
 801086e:	e20a      	b.n	8010c86 <phhalHw_Pn5180_Autocoll+0x516>
        }

    }

    /* set the receive length */
    *pRxLength = 0U;
 8010870:	683b      	ldr	r3, [r7, #0]
 8010872:	2200      	movs	r2, #0
 8010874:	801a      	strh	r2, [r3, #0]

    pDataParams->wRxBufLen = 0U;
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	2200      	movs	r2, #0
 801087a:	835a      	strh	r2, [r3, #26]

    /* Reset the Flag used to indicate if Passive Target is activated by ISO/IEC 18092 Frame */
    pDataParams->wTargetMode = PH_OFF;
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	2200      	movs	r2, #0
 8010880:	865a      	strh	r2, [r3, #50]	@ 0x32
    pDataParams->bActiveMode = PH_OFF;
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	2200      	movs	r2, #0
 8010886:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    pDataParams->bNfcipMode  = PH_OFF;
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	2200      	movs	r2, #0
 801088e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f

    /* Terminate a probably running command */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Int_IdleCommand(pDataParams));
 8010892:	68f8      	ldr	r0, [r7, #12]
 8010894:	f003 f9d2 	bl	8013c3c <phhalHw_Pn5180_Int_IdleCommand>
 8010898:	4603      	mov	r3, r0
 801089a:	853b      	strh	r3, [r7, #40]	@ 0x28
 801089c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d001      	beq.n	80108a6 <phhalHw_Pn5180_Autocoll+0x136>
 80108a2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80108a4:	e1ef      	b.n	8010c86 <phhalHw_Pn5180_Autocoll+0x516>

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_RfOff(pDataParams));
 80108a6:	68f8      	ldr	r0, [r7, #12]
 80108a8:	f001 fd7b 	bl	80123a2 <phhalHw_Pn5180_Instr_RfOff>
 80108ac:	4603      	mov	r3, r0
 80108ae:	853b      	strh	r3, [r7, #40]	@ 0x28
 80108b0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d001      	beq.n	80108ba <phhalHw_Pn5180_Autocoll+0x14a>
 80108b6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80108b8:	e1e5      	b.n	8010c86 <phhalHw_Pn5180_Autocoll+0x516>

    /*Set wait IRQ */
    dwIrqWaitFor =  IRQ_STATUS_RX_IRQ_MASK | IRQ_STATUS_GENERAL_ERROR_IRQ_MASK | IRQ_STATUS_RFOFF_DET_IRQ_MASK;
 80108ba:	4b9d      	ldr	r3, [pc, #628]	@ (8010b30 <phhalHw_Pn5180_Autocoll+0x3c0>)
 80108bc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear all Interrupts for e.g Tx interrupt during receive */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, PHHAL_HW_PN5180_IRQ_SET_CLEAR_ALL_MASK));
 80108be:	4a9d      	ldr	r2, [pc, #628]	@ (8010b34 <phhalHw_Pn5180_Autocoll+0x3c4>)
 80108c0:	2103      	movs	r1, #3
 80108c2:	68f8      	ldr	r0, [r7, #12]
 80108c4:	f000 fdd6 	bl	8011474 <phhalHw_Pn5180_Instr_WriteRegister>
 80108c8:	4603      	mov	r3, r0
 80108ca:	853b      	strh	r3, [r7, #40]	@ 0x28
 80108cc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d001      	beq.n	80108d6 <phhalHw_Pn5180_Autocoll+0x166>
 80108d2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80108d4:	e1d7      	b.n	8010c86 <phhalHw_Pn5180_Autocoll+0x516>

    (void)phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL);
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 80108dc:	2300      	movs	r3, #0
 80108de:	2201      	movs	r2, #1
 80108e0:	2100      	movs	r1, #0
 80108e2:	f009 ff63 	bl	801a7ac <phOsal_EventClear>

    /* Enable IRQ sources */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_ENABLE, dwIrqWaitFor));
 80108e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80108e8:	2101      	movs	r1, #1
 80108ea:	68f8      	ldr	r0, [r7, #12]
 80108ec:	f000 fdc2 	bl	8011474 <phhalHw_Pn5180_Instr_WriteRegister>
 80108f0:	4603      	mov	r3, r0
 80108f2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80108f4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d001      	beq.n	80108fe <phhalHw_Pn5180_Autocoll+0x18e>
 80108fa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80108fc:	e1c3      	b.n	8010c86 <phhalHw_Pn5180_Autocoll+0x516>

    /*Go to autocoll mode*/
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeAutocoll(pDataParams, bRfTechnology, bAutocollMode ) );
 80108fe:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 8010902:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8010906:	4619      	mov	r1, r3
 8010908:	68f8      	ldr	r0, [r7, #12]
 801090a:	f001 fa9f 	bl	8011e4c <phhalHw_Pn5180_Instr_SwitchModeAutocoll>
 801090e:	4603      	mov	r3, r0
 8010910:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010912:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010914:	2b00      	cmp	r3, #0
 8010916:	d001      	beq.n	801091c <phhalHw_Pn5180_Autocoll+0x1ac>
 8010918:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801091a:	e1b4      	b.n	8010c86 <phhalHw_Pn5180_Autocoll+0x516>

    /* Wait for Interrupt to occur */
    statusTmp =  phhalHw_Pn5180_WaitIrq( pDataParams, PH_ON, PH_OFF, dwIrqWaitFor, &dwIrqReg);
 801091c:	f107 0314 	add.w	r3, r7, #20
 8010920:	9300      	str	r3, [sp, #0]
 8010922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010924:	2200      	movs	r2, #0
 8010926:	2101      	movs	r1, #1
 8010928:	68f8      	ldr	r0, [r7, #12]
 801092a:	f003 fa39 	bl	8013da0 <phhalHw_Pn5180_WaitIrq>
 801092e:	4603      	mov	r3, r0
 8010930:	853b      	strh	r3, [r7, #40]	@ 0x28

    if((statusTmp & PH_ERR_MASK) == PH_ERR_ABORTED)
 8010932:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010934:	b2db      	uxtb	r3, r3
 8010936:	2b12      	cmp	r3, #18
 8010938:	d10c      	bne.n	8010954 <phhalHw_Pn5180_Autocoll+0x1e4>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams) );
 801093a:	68f8      	ldr	r0, [r7, #12]
 801093c:	f001 fadf 	bl	8011efe <phhalHw_Pn5180_Instr_SwitchModeNormal>
 8010940:	4603      	mov	r3, r0
 8010942:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010944:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010946:	2b00      	cmp	r3, #0
 8010948:	d001      	beq.n	801094e <phhalHw_Pn5180_Autocoll+0x1de>
 801094a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801094c:	e19b      	b.n	8010c86 <phhalHw_Pn5180_Autocoll+0x516>
        return PH_ADD_COMPCODE_FIXED(PH_ERR_ABORTED, PH_COMP_HAL);
 801094e:	f240 2312 	movw	r3, #530	@ 0x212
 8010952:	e198      	b.n	8010c86 <phhalHw_Pn5180_Autocoll+0x516>
    }

    if(0U != (dwIrqReg & IRQ_STATUS_GENERAL_ERROR_IRQ_MASK))
 8010954:	697b      	ldr	r3, [r7, #20]
 8010956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801095a:	2b00      	cmp	r3, #0
 801095c:	d00c      	beq.n	8010978 <phhalHw_Pn5180_Autocoll+0x208>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams) );
 801095e:	68f8      	ldr	r0, [r7, #12]
 8010960:	f001 facd 	bl	8011efe <phhalHw_Pn5180_Instr_SwitchModeNormal>
 8010964:	4603      	mov	r3, r0
 8010966:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010968:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801096a:	2b00      	cmp	r3, #0
 801096c:	d001      	beq.n	8010972 <phhalHw_Pn5180_Autocoll+0x202>
 801096e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010970:	e189      	b.n	8010c86 <phhalHw_Pn5180_Autocoll+0x516>
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 8010972:	f240 237f 	movw	r3, #639	@ 0x27f
 8010976:	e186      	b.n	8010c86 <phhalHw_Pn5180_Autocoll+0x516>
    }
    else if (0U != (dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))
 8010978:	697b      	ldr	r3, [r7, #20]
 801097a:	f003 0301 	and.w	r3, r3, #1
 801097e:	2b00      	cmp	r3, #0
 8010980:	f000 815d 	beq.w	8010c3e <phhalHw_Pn5180_Autocoll+0x4ce>
    {

        pRegisters[0] = SIGPRO_CM_CONFIG;
 8010984:	231b      	movs	r3, #27
 8010986:	773b      	strb	r3, [r7, #28]
        pRegisters[1] = SIGPRO_CONFIG;
 8010988:	231a      	movs	r3, #26
 801098a:	777b      	strb	r3, [r7, #29]
        pRegisters[2] = RX_STATUS;
 801098c:	2313      	movs	r3, #19
 801098e:	77bb      	strb	r3, [r7, #30]
        pRegisters[3] = RF_STATUS;
 8010990:	231d      	movs	r3, #29
 8010992:	77fb      	strb	r3, [r7, #31]

        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegisterMultiple(pDataParams, pRegisters, 4U, &pTmpBuffer));
 8010994:	f107 0318 	add.w	r3, r7, #24
 8010998:	f107 011c 	add.w	r1, r7, #28
 801099c:	2204      	movs	r2, #4
 801099e:	68f8      	ldr	r0, [r7, #12]
 80109a0:	f000 ffea 	bl	8011978 <phhalHw_Pn5180_Instr_ReadRegisterMultiple>
 80109a4:	4603      	mov	r3, r0
 80109a6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80109a8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d001      	beq.n	80109b2 <phhalHw_Pn5180_Autocoll+0x242>
 80109ae:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80109b0:	e169      	b.n	8010c86 <phhalHw_Pn5180_Autocoll+0x516>

        dwRegValue = (uint32_t)pTmpBuffer[0];
 80109b2:	69bb      	ldr	r3, [r7, #24]
 80109b4:	781b      	ldrb	r3, [r3, #0]
 80109b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[1]<<8U;
 80109b8:	69bb      	ldr	r3, [r7, #24]
 80109ba:	3301      	adds	r3, #1
 80109bc:	781b      	ldrb	r3, [r3, #0]
 80109be:	021b      	lsls	r3, r3, #8
 80109c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80109c2:	4313      	orrs	r3, r2
 80109c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[2]<<16U;
 80109c6:	69bb      	ldr	r3, [r7, #24]
 80109c8:	3302      	adds	r3, #2
 80109ca:	781b      	ldrb	r3, [r3, #0]
 80109cc:	041b      	lsls	r3, r3, #16
 80109ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80109d0:	4313      	orrs	r3, r2
 80109d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[3]<<24U;
 80109d4:	69bb      	ldr	r3, [r7, #24]
 80109d6:	3303      	adds	r3, #3
 80109d8:	781b      	ldrb	r3, [r3, #0]
 80109da:	061b      	lsls	r3, r3, #24
 80109dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80109de:	4313      	orrs	r3, r2
 80109e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

        bFraming = (uint8_t)((dwRegValue & SIGPRO_CM_CONFIG_RX_FRAMING_MASK) >> SIGPRO_CM_CONFIG_RX_FRAMING_POS);
 80109e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109e4:	0f5b      	lsrs	r3, r3, #29
 80109e6:	b2db      	uxtb	r3, r3
 80109e8:	f003 0303 	and.w	r3, r3, #3
 80109ec:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

        dwRegValue = (uint32_t)pTmpBuffer[4];
 80109f0:	69bb      	ldr	r3, [r7, #24]
 80109f2:	3304      	adds	r3, #4
 80109f4:	781b      	ldrb	r3, [r3, #0]
 80109f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[5]<<8U;
 80109f8:	69bb      	ldr	r3, [r7, #24]
 80109fa:	3305      	adds	r3, #5
 80109fc:	781b      	ldrb	r3, [r3, #0]
 80109fe:	021b      	lsls	r3, r3, #8
 8010a00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010a02:	4313      	orrs	r3, r2
 8010a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[6]<<16U;
 8010a06:	69bb      	ldr	r3, [r7, #24]
 8010a08:	3306      	adds	r3, #6
 8010a0a:	781b      	ldrb	r3, [r3, #0]
 8010a0c:	041b      	lsls	r3, r3, #16
 8010a0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010a10:	4313      	orrs	r3, r2
 8010a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[7]<<24U;
 8010a14:	69bb      	ldr	r3, [r7, #24]
 8010a16:	3307      	adds	r3, #7
 8010a18:	781b      	ldrb	r3, [r3, #0]
 8010a1a:	061b      	lsls	r3, r3, #24
 8010a1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010a1e:	4313      	orrs	r3, r2
 8010a20:	62fb      	str	r3, [r7, #44]	@ 0x2c

        bSpeed = (uint8_t)(dwRegValue & SIGPRO_CONFIG_BAUDRATE_MASK);
 8010a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a24:	b2db      	uxtb	r3, r3
 8010a26:	f003 0307 	and.w	r3, r3, #7
 8010a2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        bSpeed -= PHHAL_HW_PN5180_SIGPRO_GENERAL_MAPPING;
 8010a2e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010a32:	3b04      	subs	r3, #4
 8010a34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* Read RX_STATUS_REG to know the status of reception */
        dwRegValue = (uint32_t)pTmpBuffer[8];
 8010a38:	69bb      	ldr	r3, [r7, #24]
 8010a3a:	3308      	adds	r3, #8
 8010a3c:	781b      	ldrb	r3, [r3, #0]
 8010a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[9]<<8U;
 8010a40:	69bb      	ldr	r3, [r7, #24]
 8010a42:	3309      	adds	r3, #9
 8010a44:	781b      	ldrb	r3, [r3, #0]
 8010a46:	021b      	lsls	r3, r3, #8
 8010a48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010a4a:	4313      	orrs	r3, r2
 8010a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[10]<<16U;
 8010a4e:	69bb      	ldr	r3, [r7, #24]
 8010a50:	330a      	adds	r3, #10
 8010a52:	781b      	ldrb	r3, [r3, #0]
 8010a54:	041b      	lsls	r3, r3, #16
 8010a56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010a58:	4313      	orrs	r3, r2
 8010a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[11]<<24U;
 8010a5c:	69bb      	ldr	r3, [r7, #24]
 8010a5e:	330b      	adds	r3, #11
 8010a60:	781b      	ldrb	r3, [r3, #0]
 8010a62:	061b      	lsls	r3, r3, #24
 8010a64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010a66:	4313      	orrs	r3, r2
 8010a68:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Read RF_STATUS_REG to know the status of reception */
        dwRfStatus = (uint32_t)pTmpBuffer[12];
 8010a6a:	69bb      	ldr	r3, [r7, #24]
 8010a6c:	330c      	adds	r3, #12
 8010a6e:	781b      	ldrb	r3, [r3, #0]
 8010a70:	623b      	str	r3, [r7, #32]
        dwRfStatus |= (uint32_t)pTmpBuffer[13]<<8U;
 8010a72:	69bb      	ldr	r3, [r7, #24]
 8010a74:	330d      	adds	r3, #13
 8010a76:	781b      	ldrb	r3, [r3, #0]
 8010a78:	021b      	lsls	r3, r3, #8
 8010a7a:	6a3a      	ldr	r2, [r7, #32]
 8010a7c:	4313      	orrs	r3, r2
 8010a7e:	623b      	str	r3, [r7, #32]
        dwRfStatus |= (uint32_t)pTmpBuffer[14]<<16U;
 8010a80:	69bb      	ldr	r3, [r7, #24]
 8010a82:	330e      	adds	r3, #14
 8010a84:	781b      	ldrb	r3, [r3, #0]
 8010a86:	041b      	lsls	r3, r3, #16
 8010a88:	6a3a      	ldr	r2, [r7, #32]
 8010a8a:	4313      	orrs	r3, r2
 8010a8c:	623b      	str	r3, [r7, #32]
        dwRfStatus |= (uint32_t)pTmpBuffer[15]<<24U;
 8010a8e:	69bb      	ldr	r3, [r7, #24]
 8010a90:	330f      	adds	r3, #15
 8010a92:	781b      	ldrb	r3, [r3, #0]
 8010a94:	061b      	lsls	r3, r3, #24
 8010a96:	6a3a      	ldr	r2, [r7, #32]
 8010a98:	4313      	orrs	r3, r2
 8010a9a:	623b      	str	r3, [r7, #32]

        if (0U != (dwRegValue & RX_STATUS_RX_DATA_INTEGRITY_ERROR_MASK))
 8010a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d00c      	beq.n	8010ac0 <phhalHw_Pn5180_Autocoll+0x350>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams));
 8010aa6:	68f8      	ldr	r0, [r7, #12]
 8010aa8:	f001 fa29 	bl	8011efe <phhalHw_Pn5180_Instr_SwitchModeNormal>
 8010aac:	4603      	mov	r3, r0
 8010aae:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010ab0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d001      	beq.n	8010aba <phhalHw_Pn5180_Autocoll+0x34a>
 8010ab6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010ab8:	e0e5      	b.n	8010c86 <phhalHw_Pn5180_Autocoll+0x516>
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INTEGRITY_ERROR, PH_COMP_HAL);
 8010aba:	f240 2302 	movw	r3, #514	@ 0x202
 8010abe:	e0e2      	b.n	8010c86 <phhalHw_Pn5180_Autocoll+0x516>
        }

        PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_ReadData(pDataParams, ppRxBuffer, pRxLength));
 8010ac0:	683a      	ldr	r2, [r7, #0]
 8010ac2:	6879      	ldr	r1, [r7, #4]
 8010ac4:	68f8      	ldr	r0, [r7, #12]
 8010ac6:	f001 fd6e 	bl	80125a6 <phhalHw_Pn5180_ReadData>
 8010aca:	4603      	mov	r3, r0
 8010acc:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010ace:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d001      	beq.n	8010ad8 <phhalHw_Pn5180_Autocoll+0x368>
 8010ad4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010ad6:	e0d6      	b.n	8010c86 <phhalHw_Pn5180_Autocoll+0x516>

        if(0U != (dwIrqReg & IRQ_STATUS_CARD_ACTIVATED_IRQ_MASK))
 8010ad8:	697b      	ldr	r3, [r7, #20]
 8010ada:	f003 0310 	and.w	r3, r3, #16
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d02a      	beq.n	8010b38 <phhalHw_Pn5180_Autocoll+0x3c8>
        {
            /* In case External RF OFF also occurred then exit with RF Error. */
            if (0U != (dwIrqReg & IRQ_STATUS_RFOFF_DET_IRQ_MASK))
 8010ae2:	697b      	ldr	r3, [r7, #20]
 8010ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d00c      	beq.n	8010b06 <phhalHw_Pn5180_Autocoll+0x396>
            {
                /* Terminate Autocoll command before existing. */
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams) );
 8010aec:	68f8      	ldr	r0, [r7, #12]
 8010aee:	f001 fa06 	bl	8011efe <phhalHw_Pn5180_Instr_SwitchModeNormal>
 8010af2:	4603      	mov	r3, r0
 8010af4:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010af6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d001      	beq.n	8010b00 <phhalHw_Pn5180_Autocoll+0x390>
 8010afc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010afe:	e0c2      	b.n	8010c86 <phhalHw_Pn5180_Autocoll+0x516>
                return PH_ADD_COMPCODE_FIXED(PH_ERR_EXT_RF_ERROR, PH_COMP_HAL);
 8010b00:	f44f 7304 	mov.w	r3, #528	@ 0x210
 8010b04:	e0bf      	b.n	8010c86 <phhalHw_Pn5180_Autocoll+0x516>
            }
            /* Disable active mode */
            pDataParams->bActiveMode = PH_OFF;
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	2200      	movs	r2, #0
 8010b0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
            if((bSpeed == PHHAL_HW_RF_DATARATE_106) && (**ppRxBuffer == PHHAL_HW_PN5180_I18092MT_START_BYTE))
 8010b0e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d134      	bne.n	8010b80 <phhalHw_Pn5180_Autocoll+0x410>
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	781b      	ldrb	r3, [r3, #0]
 8010b1c:	2bf0      	cmp	r3, #240	@ 0xf0
 8010b1e:	d12f      	bne.n	8010b80 <phhalHw_Pn5180_Autocoll+0x410>
            {
                /* Offset for StartByte as it included if Passive Communication in ISO/IEC 18092 */
                offsetPos = 1U;
 8010b20:	2301      	movs	r3, #1
 8010b22:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                offsetLen = 1U;
 8010b26:	2301      	movs	r3, #1
 8010b28:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8010b2c:	e028      	b.n	8010b80 <phhalHw_Pn5180_Autocoll+0x410>
 8010b2e:	bf00      	nop
 8010b30:	00020041 	.word	0x00020041
 8010b34:	000fffff 	.word	0x000fffff
            }
        }
        else if ((dwRfStatus & RF_STATUS_RF_DET_STATUS_MASK) == 0U)
 8010b38:	6a3b      	ldr	r3, [r7, #32]
 8010b3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d111      	bne.n	8010b66 <phhalHw_Pn5180_Autocoll+0x3f6>
        {
            /* Enable active mode */
            pDataParams->bActiveMode = PH_ON;
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	2201      	movs	r2, #1
 8010b46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
            if(bSpeed == PHHAL_HW_RF_DATARATE_106)
 8010b4a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d105      	bne.n	8010b5e <phhalHw_Pn5180_Autocoll+0x3ee>
            {
                /* Offset for StartByte and CRC as it is included if Active Communication in ISO/IEC 18092 */
                offsetPos = 1U;
 8010b52:	2301      	movs	r3, #1
 8010b54:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                offsetLen = 3U;
 8010b58:	2303      	movs	r3, #3
 8010b5a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            }
            bFraming = PHHAL_HW_PN5180_BIT_ISO18092;
 8010b5e:	2301      	movs	r3, #1
 8010b60:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8010b64:	e00c      	b.n	8010b80 <phhalHw_Pn5180_Autocoll+0x410>
        }
        else
        {
            /* Terminate Autocoll command before existing. */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams) );
 8010b66:	68f8      	ldr	r0, [r7, #12]
 8010b68:	f001 f9c9 	bl	8011efe <phhalHw_Pn5180_Instr_SwitchModeNormal>
 8010b6c:	4603      	mov	r3, r0
 8010b6e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010b70:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d001      	beq.n	8010b7a <phhalHw_Pn5180_Autocoll+0x40a>
 8010b76:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010b78:	e085      	b.n	8010c86 <phhalHw_Pn5180_Autocoll+0x516>
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_HAL);
 8010b7a:	f240 2306 	movw	r3, #518	@ 0x206
 8010b7e:	e082      	b.n	8010c86 <phhalHw_Pn5180_Autocoll+0x516>
        }
        if((pDataParams->bActiveMode == PH_ON) && ((wMode & ACTIVE_A_MODE) != ACTIVE_A_MODE) && (bSpeed == PHHAL_HW_RF_DATARATE_106))
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010b86:	2b01      	cmp	r3, #1
 8010b88:	d115      	bne.n	8010bb6 <phhalHw_Pn5180_Autocoll+0x446>
 8010b8a:	897b      	ldrh	r3, [r7, #10]
 8010b8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d110      	bne.n	8010bb6 <phhalHw_Pn5180_Autocoll+0x446>
 8010b94:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d10c      	bne.n	8010bb6 <phhalHw_Pn5180_Autocoll+0x446>
        {
            /* Terminate Autocoll command before existing. */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams) );
 8010b9c:	68f8      	ldr	r0, [r7, #12]
 8010b9e:	f001 f9ae 	bl	8011efe <phhalHw_Pn5180_Instr_SwitchModeNormal>
 8010ba2:	4603      	mov	r3, r0
 8010ba4:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010ba6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d001      	beq.n	8010bb0 <phhalHw_Pn5180_Autocoll+0x440>
 8010bac:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010bae:	e06a      	b.n	8010c86 <phhalHw_Pn5180_Autocoll+0x516>
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_HAL);
 8010bb0:	f240 2306 	movw	r3, #518	@ 0x206
 8010bb4:	e067      	b.n	8010c86 <phhalHw_Pn5180_Autocoll+0x516>
        }

        if(bFraming == PHHAL_HW_PN5180_BIT_MIFARE)
 8010bb6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d108      	bne.n	8010bd0 <phhalHw_Pn5180_Autocoll+0x460>
        {
            *pProtParams = PHHAL_HW_RF_TYPE_A_FRAMING | bSpeed;
 8010bbe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010bc2:	b29b      	uxth	r3, r3
 8010bc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010bc8:	b29a      	uxth	r2, r3
 8010bca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010bcc:	801a      	strh	r2, [r3, #0]
 8010bce:	e01b      	b.n	8010c08 <phhalHw_Pn5180_Autocoll+0x498>
        }
        else if(bFraming == PHHAL_HW_PN5180_BIT_ISO18092)
 8010bd0:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8010bd4:	2b01      	cmp	r3, #1
 8010bd6:	d108      	bne.n	8010bea <phhalHw_Pn5180_Autocoll+0x47a>
        {
            *pProtParams = PHHAL_HW_RF_TYPE_ACTIVE_FRAMING | bSpeed;
 8010bd8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010bdc:	b29b      	uxth	r3, r3
 8010bde:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8010be2:	b29a      	uxth	r2, r3
 8010be4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010be6:	801a      	strh	r2, [r3, #0]
 8010be8:	e00e      	b.n	8010c08 <phhalHw_Pn5180_Autocoll+0x498>
        }
        else if(bFraming == PHHAL_HW_PN5180_BIT_FELICA)
 8010bea:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8010bee:	2b02      	cmp	r3, #2
 8010bf0:	d108      	bne.n	8010c04 <phhalHw_Pn5180_Autocoll+0x494>
        {
            *pProtParams = PHHAL_HW_RF_TYPE_F_FRAMING | bSpeed;
 8010bf2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010bf6:	b29b      	uxth	r3, r3
 8010bf8:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8010bfc:	b29a      	uxth	r2, r3
 8010bfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010c00:	801a      	strh	r2, [r3, #0]
 8010c02:	e001      	b.n	8010c08 <phhalHw_Pn5180_Autocoll+0x498>
        }
        else
        {
            /* Invalid Framing as PN5180 will not emulate other than Type-A, Type-F and Active Frame */
            status = PH_ERR_FRAMING_ERROR;
 8010c04:	2305      	movs	r3, #5
 8010c06:	86fb      	strh	r3, [r7, #54]	@ 0x36
        }

        /* Store received data length in dataparams */
        pDataParams->wRxBufLen = *pRxLength;
 8010c08:	683b      	ldr	r3, [r7, #0]
 8010c0a:	881a      	ldrh	r2, [r3, #0]
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	835a      	strh	r2, [r3, #26]

        /* Return RxBuffer pointer */
        /* Offset "F0" incase of Active communication */
        *ppRxBuffer = pDataParams->pRxBuffer + offsetPos;
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	695a      	ldr	r2, [r3, #20]
 8010c14:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8010c18:	441a      	add	r2, r3
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	601a      	str	r2, [r3, #0]

        /* Return RxBuffer length */
        /* Offset "F0" + CRC incase of Active communication */
        *pRxLength = pDataParams->wRxBufLen - offsetLen;
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	8b5a      	ldrh	r2, [r3, #26]
 8010c22:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8010c26:	b29b      	uxth	r3, r3
 8010c28:	1ad3      	subs	r3, r2, r3
 8010c2a:	b29a      	uxth	r2, r3
 8010c2c:	683b      	ldr	r3, [r7, #0]
 8010c2e:	801a      	strh	r2, [r3, #0]
        pDataParams->wTargetMode = *pProtParams;
 8010c30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010c32:	881a      	ldrh	r2, [r3, #0]
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	865a      	strh	r2, [r3, #50]	@ 0x32

        status = PH_ERR_SUCCESS;
 8010c38:	2300      	movs	r3, #0
 8010c3a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8010c3c:	e006      	b.n	8010c4c <phhalHw_Pn5180_Autocoll+0x4dc>
    }
    else if(0U != (dwIrqReg & IRQ_STATUS_RFOFF_DET_IRQ_MASK))
 8010c3e:	697b      	ldr	r3, [r7, #20]
 8010c40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d001      	beq.n	8010c4c <phhalHw_Pn5180_Autocoll+0x4dc>
    {
        status = PH_ERR_EXT_RF_ERROR;
 8010c48:	2310      	movs	r3, #16
 8010c4a:	86fb      	strh	r3, [r7, #54]	@ 0x36
    else
    {
        /* QAC */
    }

    if(status != PH_ERR_SUCCESS)
 8010c4c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d009      	beq.n	8010c66 <phhalHw_Pn5180_Autocoll+0x4f6>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams) );
 8010c52:	68f8      	ldr	r0, [r7, #12]
 8010c54:	f001 f953 	bl	8011efe <phhalHw_Pn5180_Instr_SwitchModeNormal>
 8010c58:	4603      	mov	r3, r0
 8010c5a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010c5c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d001      	beq.n	8010c66 <phhalHw_Pn5180_Autocoll+0x4f6>
 8010c62:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010c64:	e00f      	b.n	8010c86 <phhalHw_Pn5180_Autocoll+0x516>
    }

    return PH_ADD_COMPCODE(status, PH_COMP_HAL);
 8010c66:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d00b      	beq.n	8010c84 <phhalHw_Pn5180_Autocoll+0x514>
 8010c6c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010c6e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d106      	bne.n	8010c84 <phhalHw_Pn5180_Autocoll+0x514>
 8010c76:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010c78:	b2db      	uxtb	r3, r3
 8010c7a:	b29b      	uxth	r3, r3
 8010c7c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8010c80:	b29b      	uxth	r3, r3
 8010c82:	e000      	b.n	8010c86 <phhalHw_Pn5180_Autocoll+0x516>
 8010c84:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
}
 8010c86:	4618      	mov	r0, r3
 8010c88:	3738      	adds	r7, #56	@ 0x38
 8010c8a:	46bd      	mov	sp, r7
 8010c8c:	bd80      	pop	{r7, pc}
 8010c8e:	bf00      	nop

08010c90 <phhalHw_Pn5180_Lpcd>:

phStatus_t phhalHw_Pn5180_Lpcd(
    phhalHw_Pn5180_DataParams_t * pDataParams)
{
 8010c90:	b580      	push	{r7, lr}
 8010c92:	b090      	sub	sp, #64	@ 0x40
 8010c94:	af02      	add	r7, sp, #8
 8010c96:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint32_t    PH_MEMLOC_REM dwRegister;
    uint32_t    PH_MEMLOC_REM dwIrqWaitFor= 0U;
 8010c98:	2300      	movs	r3, #0
 8010c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t    PH_MEMLOC_REM dwIrqReg;
    phStatus_t  PH_MEMLOC_REM status;
    uint8_t     PH_MEMLOC_REM bEPromData[5];
    uint32_t    PH_MEMLOC_REM dwAgcValVariation = 0U;
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t    PH_MEMLOC_REM dwAgcRefVal = 0U;
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	633b      	str	r3, [r7, #48]	@ 0x30
    uint32_t    PH_MEMLOC_REM dwLpcdThreshold = 0U;
 8010ca4:	2300      	movs	r3, #0
 8010ca6:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t     PH_MEMLOC_REM bOcProtControl[1];

    switch (pDataParams->bLpcdMode)
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d002      	beq.n	8010cb8 <phhalHw_Pn5180_Lpcd+0x28>
 8010cb2:	2b01      	cmp	r3, #1
 8010cb4:	d072      	beq.n	8010d9c <phhalHw_Pn5180_Lpcd+0x10c>
 8010cb6:	e0c4      	b.n	8010e42 <phhalHw_Pn5180_Lpcd+0x1b2>
    {
    case PHHAL_HW_PN5180_LPCD_MODE_DEFAULT:

        /*Get the current AGC measurement*/
        PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_ReadRegister( pDataParams, AGC_REF_CONFIG, &dwRegister));
 8010cb8:	f107 031c 	add.w	r3, r7, #28
 8010cbc:	461a      	mov	r2, r3
 8010cbe:	2126      	movs	r1, #38	@ 0x26
 8010cc0:	6878      	ldr	r0, [r7, #4]
 8010cc2:	f000 fdeb 	bl	801189c <phhalHw_Pn5180_Instr_ReadRegister>
 8010cc6:	4603      	mov	r3, r0
 8010cc8:	847b      	strh	r3, [r7, #34]	@ 0x22
 8010cca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d001      	beq.n	8010cd4 <phhalHw_Pn5180_Lpcd+0x44>
 8010cd0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010cd2:	e0c9      	b.n	8010e68 <phhalHw_Pn5180_Lpcd+0x1d8>

        PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_ReadE2Prom( pDataParams, PHHAL_HW_PN5180_LPCD_REFERENCE_VALUE_ADDR, bEPromData,  5U));
 8010cd4:	f107 0210 	add.w	r2, r7, #16
 8010cd8:	2305      	movs	r3, #5
 8010cda:	2134      	movs	r1, #52	@ 0x34
 8010cdc:	6878      	ldr	r0, [r7, #4]
 8010cde:	f000 ff5d 	bl	8011b9c <phhalHw_Pn5180_Instr_ReadE2Prom>
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	847b      	strh	r3, [r7, #34]	@ 0x22
 8010ce6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d001      	beq.n	8010cf0 <phhalHw_Pn5180_Lpcd+0x60>
 8010cec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010cee:	e0bb      	b.n	8010e68 <phhalHw_Pn5180_Lpcd+0x1d8>

        PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_ReadE2Prom( pDataParams, PHHAL_HW_PN5180_OCPROT_CONTROL_ADDR, bOcProtControl,  1U));
 8010cf0:	f107 020c 	add.w	r2, r7, #12
 8010cf4:	2301      	movs	r3, #1
 8010cf6:	2159      	movs	r1, #89	@ 0x59
 8010cf8:	6878      	ldr	r0, [r7, #4]
 8010cfa:	f000 ff4f 	bl	8011b9c <phhalHw_Pn5180_Instr_ReadE2Prom>
 8010cfe:	4603      	mov	r3, r0
 8010d00:	847b      	strh	r3, [r7, #34]	@ 0x22
 8010d02:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d001      	beq.n	8010d0c <phhalHw_Pn5180_Lpcd+0x7c>
 8010d08:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010d0a:	e0ad      	b.n	8010e68 <phhalHw_Pn5180_Lpcd+0x1d8>

        /*Use EEPROM Value for reference value*/
        if((bEPromData[4] & LPCD_REFVAL_CONTROL_MASK) == 0U )
 8010d0c:	7d3b      	ldrb	r3, [r7, #20]
 8010d0e:	f003 0303 	and.w	r3, r3, #3
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d109      	bne.n	8010d2a <phhalHw_Pn5180_Lpcd+0x9a>
        {
            /*Get the AGC Ref Value from E2PROM*/
            dwAgcRefVal = (uint8_t)bEPromData[0];
 8010d16:	7c3b      	ldrb	r3, [r7, #16]
 8010d18:	633b      	str	r3, [r7, #48]	@ 0x30
            dwAgcRefVal |= (uint16_t)((uint16_t)bEPromData[1]<<8U);
 8010d1a:	7c7b      	ldrb	r3, [r7, #17]
 8010d1c:	021b      	lsls	r3, r3, #8
 8010d1e:	b29b      	uxth	r3, r3
 8010d20:	461a      	mov	r2, r3
 8010d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d24:	4313      	orrs	r3, r2
 8010d26:	633b      	str	r3, [r7, #48]	@ 0x30
 8010d28:	e002      	b.n	8010d30 <phhalHw_Pn5180_Lpcd+0xa0>
        }

        else
        {
            /*used the stored reference value */
            dwAgcRefVal = pDataParams->wLpcdReference;
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8010d2e:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        /*Get the AGV Variation threshold*/
        dwLpcdThreshold =(uint8_t)bEPromData[3];
 8010d30:	7cfb      	ldrb	r3, [r7, #19]
 8010d32:	627b      	str	r3, [r7, #36]	@ 0x24

        //Store the read AGC_REF_CONFIG reg value as reference for next comparison
        pDataParams->wLpcdReference = (uint16_t)(dwRegister &(AGC_REF_CONFIG_AGC_GEAR_MASK | AGC_REF_CONFIG_AGC_VALUE_MASK));
 8010d34:	69fb      	ldr	r3, [r7, #28]
 8010d36:	b29b      	uxth	r3, r3
 8010d38:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010d3c:	b29a      	uxth	r2, r3
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	86da      	strh	r2, [r3, #54]	@ 0x36

        /*If TXOCP is enabled, Then we need to compare gear*/
        if((bOcProtControl[0] & 0x01U) && (dwRegister & AGC_REF_CONFIG_AGC_GEAR_MASK)!= (dwAgcRefVal & AGC_REF_CONFIG_AGC_GEAR_MASK))
 8010d42:	7b3b      	ldrb	r3, [r7, #12]
 8010d44:	f003 0301 	and.w	r3, r3, #1
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d009      	beq.n	8010d60 <phhalHw_Pn5180_Lpcd+0xd0>
 8010d4c:	69fa      	ldr	r2, [r7, #28]
 8010d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d50:	4053      	eors	r3, r2
 8010d52:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d002      	beq.n	8010d60 <phhalHw_Pn5180_Lpcd+0xd0>
        {
            status = PH_ERR_SUCCESS;
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	86fb      	strh	r3, [r7, #54]	@ 0x36
            {
                status = PH_ERR_IO_TIMEOUT;
            }
        }

        break;
 8010d5e:	e073      	b.n	8010e48 <phhalHw_Pn5180_Lpcd+0x1b8>
            dwRegister &= AGC_REF_CONFIG_AGC_VALUE_MASK;
 8010d60:	69fb      	ldr	r3, [r7, #28]
 8010d62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010d66:	61fb      	str	r3, [r7, #28]
            dwAgcRefVal &= AGC_REF_CONFIG_AGC_VALUE_MASK;
 8010d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010d6e:	633b      	str	r3, [r7, #48]	@ 0x30
            dwAgcValVariation = ((dwRegister > dwAgcRefVal) ?
 8010d70:	69fb      	ldr	r3, [r7, #28]
                (dwRegister - dwAgcRefVal) : (dwAgcRefVal - dwRegister));
 8010d72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010d74:	429a      	cmp	r2, r3
 8010d76:	d203      	bcs.n	8010d80 <phhalHw_Pn5180_Lpcd+0xf0>
 8010d78:	69fa      	ldr	r2, [r7, #28]
 8010d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d7c:	1ad3      	subs	r3, r2, r3
 8010d7e:	e002      	b.n	8010d86 <phhalHw_Pn5180_Lpcd+0xf6>
 8010d80:	69fb      	ldr	r3, [r7, #28]
 8010d82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010d84:	1ad3      	subs	r3, r2, r3
            dwAgcValVariation = ((dwRegister > dwAgcRefVal) ?
 8010d86:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (dwAgcValVariation > dwLpcdThreshold)
 8010d88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d8c:	429a      	cmp	r2, r3
 8010d8e:	d902      	bls.n	8010d96 <phhalHw_Pn5180_Lpcd+0x106>
                status = PH_ERR_SUCCESS;
 8010d90:	2300      	movs	r3, #0
 8010d92:	86fb      	strh	r3, [r7, #54]	@ 0x36
        break;
 8010d94:	e058      	b.n	8010e48 <phhalHw_Pn5180_Lpcd+0x1b8>
                status = PH_ERR_IO_TIMEOUT;
 8010d96:	2301      	movs	r3, #1
 8010d98:	86fb      	strh	r3, [r7, #54]	@ 0x36
        break;
 8010d9a:	e055      	b.n	8010e48 <phhalHw_Pn5180_Lpcd+0x1b8>

    case PHHAL_HW_PN5180_LPCD_MODE_POWERDOWN:
        dwIrqWaitFor = (IRQ_STATUS_LPCD_IRQ_MASK | IRQ_STATUS_GENERAL_ERROR_IRQ_MASK);
 8010d9c:	f44f 2320 	mov.w	r3, #655360	@ 0xa0000
 8010da0:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Clear above Interrupts  */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, dwIrqWaitFor));
 8010da2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010da4:	2103      	movs	r1, #3
 8010da6:	6878      	ldr	r0, [r7, #4]
 8010da8:	f000 fb64 	bl	8011474 <phhalHw_Pn5180_Instr_WriteRegister>
 8010dac:	4603      	mov	r3, r0
 8010dae:	847b      	strh	r3, [r7, #34]	@ 0x22
 8010db0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d001      	beq.n	8010dba <phhalHw_Pn5180_Lpcd+0x12a>
 8010db6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010db8:	e056      	b.n	8010e68 <phhalHw_Pn5180_Lpcd+0x1d8>
        (void)phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL);
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 8010dc0:	2300      	movs	r3, #0
 8010dc2:	2201      	movs	r2, #1
 8010dc4:	2100      	movs	r1, #0
 8010dc6:	f009 fcf1 	bl	801a7ac <phOsal_EventClear>

        /* Enable IRQ sources */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_ENABLE, dwIrqWaitFor));
 8010dca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010dcc:	2101      	movs	r1, #1
 8010dce:	6878      	ldr	r0, [r7, #4]
 8010dd0:	f000 fb50 	bl	8011474 <phhalHw_Pn5180_Instr_WriteRegister>
 8010dd4:	4603      	mov	r3, r0
 8010dd6:	847b      	strh	r3, [r7, #34]	@ 0x22
 8010dd8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d001      	beq.n	8010de2 <phhalHw_Pn5180_Lpcd+0x152>
 8010dde:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010de0:	e042      	b.n	8010e68 <phhalHw_Pn5180_Lpcd+0x1d8>

        PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_SwitchModeLpcd(
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8010de6:	4619      	mov	r1, r3
 8010de8:	6878      	ldr	r0, [r7, #4]
 8010dea:	f000 ffd6 	bl	8011d9a <phhalHw_Pn5180_Instr_SwitchModeLpcd>
 8010dee:	4603      	mov	r3, r0
 8010df0:	847b      	strh	r3, [r7, #34]	@ 0x22
 8010df2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d001      	beq.n	8010dfc <phhalHw_Pn5180_Lpcd+0x16c>
 8010df8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010dfa:	e035      	b.n	8010e68 <phhalHw_Pn5180_Lpcd+0x1d8>
            pDataParams,
            (uint16_t)(pDataParams->wWakeupCounterInMs))
            );

        /* Now wait for the IRQ */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WaitIrq(
 8010dfc:	f107 0318 	add.w	r3, r7, #24
 8010e00:	9300      	str	r3, [sp, #0]
 8010e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e04:	2200      	movs	r2, #0
 8010e06:	2101      	movs	r1, #1
 8010e08:	6878      	ldr	r0, [r7, #4]
 8010e0a:	f002 ffc9 	bl	8013da0 <phhalHw_Pn5180_WaitIrq>
 8010e0e:	4603      	mov	r3, r0
 8010e10:	847b      	strh	r3, [r7, #34]	@ 0x22
 8010e12:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d001      	beq.n	8010e1c <phhalHw_Pn5180_Lpcd+0x18c>
 8010e18:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010e1a:	e025      	b.n	8010e68 <phhalHw_Pn5180_Lpcd+0x1d8>
            PH_ON,
            PH_OFF,
            dwIrqWaitFor,
            &dwIrqReg));

        if(0U != (dwIrqReg & IRQ_STATUS_LPCD_IRQ_MASK))
 8010e1c:	69bb      	ldr	r3, [r7, #24]
 8010e1e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d002      	beq.n	8010e2c <phhalHw_Pn5180_Lpcd+0x19c>
        {
            status = PH_ERR_SUCCESS;
 8010e26:	2300      	movs	r3, #0
 8010e28:	86fb      	strh	r3, [r7, #54]	@ 0x36
        }
        else
        {
            status = PH_ERR_IO_TIMEOUT;
        }
        break;
 8010e2a:	e00d      	b.n	8010e48 <phhalHw_Pn5180_Lpcd+0x1b8>
        else if (0U != (dwIrqReg & IRQ_STATUS_GENERAL_ERROR_IRQ_MASK))
 8010e2c:	69bb      	ldr	r3, [r7, #24]
 8010e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d002      	beq.n	8010e3c <phhalHw_Pn5180_Lpcd+0x1ac>
            status = PH_ERR_INVALID_PARAMETER;
 8010e36:	2321      	movs	r3, #33	@ 0x21
 8010e38:	86fb      	strh	r3, [r7, #54]	@ 0x36
        break;
 8010e3a:	e005      	b.n	8010e48 <phhalHw_Pn5180_Lpcd+0x1b8>
            status = PH_ERR_IO_TIMEOUT;
 8010e3c:	2301      	movs	r3, #1
 8010e3e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        break;
 8010e40:	e002      	b.n	8010e48 <phhalHw_Pn5180_Lpcd+0x1b8>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010e42:	f240 2321 	movw	r3, #545	@ 0x221
 8010e46:	e00f      	b.n	8010e68 <phhalHw_Pn5180_Lpcd+0x1d8>
    }

    return PH_ADD_COMPCODE(status, PH_COMP_HAL);
 8010e48:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d00b      	beq.n	8010e66 <phhalHw_Pn5180_Lpcd+0x1d6>
 8010e4e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010e50:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d106      	bne.n	8010e66 <phhalHw_Pn5180_Lpcd+0x1d6>
 8010e58:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010e5a:	b2db      	uxtb	r3, r3
 8010e5c:	b29b      	uxth	r3, r3
 8010e5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8010e62:	b29b      	uxth	r3, r3
 8010e64:	e000      	b.n	8010e68 <phhalHw_Pn5180_Lpcd+0x1d8>
 8010e66:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
}
 8010e68:	4618      	mov	r0, r3
 8010e6a:	3738      	adds	r7, #56	@ 0x38
 8010e6c:	46bd      	mov	sp, r7
 8010e6e:	bd80      	pop	{r7, pc}

08010e70 <phhalHw_Pn5180_SetListenParameters>:
    uint8_t * pNfcId1,
    uint8_t SelRes,
    uint8_t * pPollingResp,
    uint8_t bNfcId3
    )
{
 8010e70:	b580      	push	{r7, lr}
 8010e72:	b08a      	sub	sp, #40	@ 0x28
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	60f8      	str	r0, [r7, #12]
 8010e78:	60b9      	str	r1, [r7, #8]
 8010e7a:	607a      	str	r2, [r7, #4]
 8010e7c:	70fb      	strb	r3, [r7, #3]
    /* Check all the pointers */
    PH_ASSERT_NULL(pSensRes);
 8010e7e:	68bb      	ldr	r3, [r7, #8]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d101      	bne.n	8010e88 <phhalHw_Pn5180_SetListenParameters+0x18>
 8010e84:	2321      	movs	r3, #33	@ 0x21
 8010e86:	e027      	b.n	8010ed8 <phhalHw_Pn5180_SetListenParameters+0x68>
    PH_ASSERT_NULL(pNfcId1);
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d101      	bne.n	8010e92 <phhalHw_Pn5180_SetListenParameters+0x22>
 8010e8e:	2321      	movs	r3, #33	@ 0x21
 8010e90:	e022      	b.n	8010ed8 <phhalHw_Pn5180_SetListenParameters+0x68>
    PH_ASSERT_NULL(pPollingResp);
 8010e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d101      	bne.n	8010e9c <phhalHw_Pn5180_SetListenParameters+0x2c>
 8010e98:	2321      	movs	r3, #33	@ 0x21
 8010e9a:	e01d      	b.n	8010ed8 <phhalHw_Pn5180_SetListenParameters+0x68>
    if(0U != bNfcId3)
    {
        /*Coverity*/;
    }

    (void)memcpy(&aCmd[0], pSensRes, PHHAL_HW_PN5180_SET_LISTEN_SENRES_LEN);
 8010e9c:	68bb      	ldr	r3, [r7, #8]
 8010e9e:	881b      	ldrh	r3, [r3, #0]
 8010ea0:	b29b      	uxth	r3, r3
 8010ea2:	823b      	strh	r3, [r7, #16]
    (void)memcpy(&aCmd[2], pNfcId1, PHHAL_HW_PN5180_SET_LISTEN_NFCID1_LEN);
 8010ea4:	f107 0310 	add.w	r3, r7, #16
 8010ea8:	3302      	adds	r3, #2
 8010eaa:	2203      	movs	r2, #3
 8010eac:	6879      	ldr	r1, [r7, #4]
 8010eae:	4618      	mov	r0, r3
 8010eb0:	f00f fd6f 	bl	8020992 <memcpy>
    (void)memcpy(&aCmd[5], &SelRes, PHHAL_HW_PN5180_SET_LISTEN_SELRES_LEN);
 8010eb4:	78fb      	ldrb	r3, [r7, #3]
 8010eb6:	757b      	strb	r3, [r7, #21]
    (void)memcpy(&aCmd[6], pPollingResp, PHHAL_HW_PN5180_SET_LISTEN_POLLRES_LEN);
 8010eb8:	f107 0310 	add.w	r3, r7, #16
 8010ebc:	3306      	adds	r3, #6
 8010ebe:	2212      	movs	r2, #18
 8010ec0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	f00f fd65 	bl	8020992 <memcpy>

    return phhalHw_Pn5180_Instr_WriteE2Prom(pDataParams, PHHAL_HW_PN5180_SET_LISTEN_E2PROM_ADDR, aCmd, PHHAL_HW_PN5180_SET_LISTEN_LEN);
 8010ec8:	f107 0210 	add.w	r2, r7, #16
 8010ecc:	2318      	movs	r3, #24
 8010ece:	2140      	movs	r1, #64	@ 0x40
 8010ed0:	68f8      	ldr	r0, [r7, #12]
 8010ed2:	f000 fdeb 	bl	8011aac <phhalHw_Pn5180_Instr_WriteE2Prom>
 8010ed6:	4603      	mov	r3, r0
}
 8010ed8:	4618      	mov	r0, r3
 8010eda:	3728      	adds	r7, #40	@ 0x28
 8010edc:	46bd      	mov	sp, r7
 8010ede:	bd80      	pop	{r7, pc}

08010ee0 <phhalHw_Pn5180_I18000p3m3Inventory>:
    uint8_t * pBeginRndCmd,             /**< [In] ISO 18000p3m3 BeginRound command frame. This is 17bits i.e., 3 bytes are expected. CRC5 should not be provided. */
    uint8_t bTSprocessing,              /**< [In] TimeSlot processing behavior. */
    uint8_t ** ppRxBuffer,              /**< [In] Pointer to HAL Rx Buffer containing response from single/multiple tags. */
    uint16_t * wRxBufferLen             /**< [In] Length of response in hal Rx Buffer. */
    )
{
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b08e      	sub	sp, #56	@ 0x38
 8010ee4:	af02      	add	r7, sp, #8
 8010ee6:	60f8      	str	r0, [r7, #12]
 8010ee8:	60b9      	str	r1, [r7, #8]
 8010eea:	4611      	mov	r1, r2
 8010eec:	461a      	mov	r2, r3
 8010eee:	460b      	mov	r3, r1
 8010ef0:	71fb      	strb	r3, [r7, #7]
 8010ef2:	4613      	mov	r3, r2
 8010ef4:	71bb      	strb	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM statusTmp = PH_ERR_SUCCESS;
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 8010efa:	2300      	movs	r3, #0
 8010efc:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    uint16_t  PH_MEMLOC_REM ResultSize;
    uint32_t  PH_MEMLOC_REM dwIrqWaitFor;
    uint8_t  PH_MEMLOC_REM bTarget = 0U;
 8010efe:	2300      	movs	r3, #0
 8010f00:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    uint8_t  PH_MEMLOC_REM bSession = 0U;
 8010f04:	2300      	movs	r3, #0
 8010f06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint32_t PH_MEMLOC_REM dwIrqReg;
    phOsal_EventBits_t PH_MEMLOC_REM dwEventFlags;
    uint8_t    PH_MEMLOC_COUNT bQ = 1;
 8010f0a:	2301      	movs	r3, #1
 8010f0c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    uint8_t    PH_MEMLOC_REM bBuff1, bBuff2;
    uint16_t   PH_MEMLOC_REM index=0;
 8010f10:	2300      	movs	r3, #0
 8010f12:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint8_t    PH_MEMLOC_REM numOfSlots=0;
 8010f14:	2300      	movs	r3, #0
 8010f16:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

    /* Check all the pointers */
    PH_ASSERT_NULL(pSelCmd);
 8010f1a:	68bb      	ldr	r3, [r7, #8]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d101      	bne.n	8010f24 <phhalHw_Pn5180_I18000p3m3Inventory+0x44>
 8010f20:	2321      	movs	r3, #33	@ 0x21
 8010f22:	e16b      	b.n	80111fc <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
    PH_ASSERT_NULL(pBeginRndCmd);
 8010f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d101      	bne.n	8010f2e <phhalHw_Pn5180_I18000p3m3Inventory+0x4e>
 8010f2a:	2321      	movs	r3, #33	@ 0x21
 8010f2c:	e166      	b.n	80111fc <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
    PH_ASSERT_NULL(ppRxBuffer);
 8010f2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d101      	bne.n	8010f38 <phhalHw_Pn5180_I18000p3m3Inventory+0x58>
 8010f34:	2321      	movs	r3, #33	@ 0x21
 8010f36:	e161      	b.n	80111fc <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
    PH_ASSERT_NULL(wRxBufferLen);
 8010f38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d101      	bne.n	8010f42 <phhalHw_Pn5180_I18000p3m3Inventory+0x62>
 8010f3e:	2321      	movs	r3, #33	@ 0x21
 8010f40:	e15c      	b.n	80111fc <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>

    if(bSelCmdLen > 0U)
 8010f42:	79fb      	ldrb	r3, [r7, #7]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d02f      	beq.n	8010fa8 <phhalHw_Pn5180_I18000p3m3Inventory+0xc8>
    {
        bTarget = pSelCmd[0];
 8010f48:	68bb      	ldr	r3, [r7, #8]
 8010f4a:	781b      	ldrb	r3, [r3, #0]
 8010f4c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        bTarget = bTarget>> 1U;
 8010f50:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010f54:	085b      	lsrs	r3, r3, #1
 8010f56:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        bTarget = bTarget&0x07U;
 8010f5a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010f5e:	f003 0307 	and.w	r3, r3, #7
 8010f62:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

        bSession = pBeginRndCmd[1]>> 4U;
 8010f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f68:	3301      	adds	r3, #1
 8010f6a:	781b      	ldrb	r3, [r3, #0]
 8010f6c:	091b      	lsrs	r3, r3, #4
 8010f6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        bSession &= 0x03U;
 8010f72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010f76:	f003 0303 	and.w	r3, r3, #3
 8010f7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        switch(bSession)
 8010f7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d001      	beq.n	8010f8a <phhalHw_Pn5180_I18000p3m3Inventory+0xaa>
 8010f86:	2b02      	cmp	r3, #2
 8010f88:	d109      	bne.n	8010f9e <phhalHw_Pn5180_I18000p3m3Inventory+0xbe>
        {
        case 0:
        case 2:
        {
            if(bSession != bTarget)
 8010f8a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8010f8e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010f92:	429a      	cmp	r2, r3
 8010f94:	d007      	beq.n	8010fa6 <phhalHw_Pn5180_I18000p3m3Inventory+0xc6>
            {
                statusTmp = (PH_ERR_INVALID_PARAMETER | PH_COMP_HAL);
 8010f96:	f240 2321 	movw	r3, #545	@ 0x221
 8010f9a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            }
            break;
 8010f9c:	e003      	b.n	8010fa6 <phhalHw_Pn5180_I18000p3m3Inventory+0xc6>
        }
        default:
            statusTmp = (PH_ERR_INVALID_PARAMETER | PH_COMP_HAL);
 8010f9e:	f240 2321 	movw	r3, #545	@ 0x221
 8010fa2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8010fa4:	e000      	b.n	8010fa8 <phhalHw_Pn5180_I18000p3m3Inventory+0xc8>
            break;
 8010fa6:	bf00      	nop
        }

    }

    if (pDataParams->bPollGuardTimeFlag == PH_ON)
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8010fae:	2b01      	cmp	r3, #1
 8010fb0:	d120      	bne.n	8010ff4 <phhalHw_Pn5180_I18000p3m3Inventory+0x114>
    {
        pDataParams->bPollGuardTimeFlag = PH_OFF;
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	2200      	movs	r2, #0
 8010fb6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        /* When there is no errors in preconditions wait till timer expire. */
        if (statusTmp == PH_ERR_SUCCESS)
 8010fba:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d110      	bne.n	8010fe2 <phhalHw_Pn5180_I18000p3m3Inventory+0x102>
        {
            /* Wait for the Poll Guard Time to Expire. */
            (void)phOsal_EventPend(&xEventHandle, (phOsal_EventOpt_t)(E_OS_EVENT_OPT_PEND_SET_ANY | E_OS_EVENT_OPT_PEND_CLEAR_ON_EXIT),
 8010fc0:	f107 0314 	add.w	r3, r7, #20
 8010fc4:	9300      	str	r3, [sp, #0]
 8010fc6:	2322      	movs	r3, #34	@ 0x22
 8010fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8010fcc:	2105      	movs	r1, #5
 8010fce:	488d      	ldr	r0, [pc, #564]	@ (8011204 <phhalHw_Pn5180_I18000p3m3Inventory+0x324>)
 8010fd0:	f009 fb6a 	bl	801a6a8 <phOsal_EventPend>
                    PHOSAL_MAX_DELAY, E_PH_OSAL_EVT_GT_EXP | E_PH_OSAL_EVT_ABORT, &dwEventFlags);
            if(0U != (dwEventFlags & E_PH_OSAL_EVT_ABORT))
 8010fd4:	697b      	ldr	r3, [r7, #20]
 8010fd6:	f003 0320 	and.w	r3, r3, #32
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d001      	beq.n	8010fe2 <phhalHw_Pn5180_I18000p3m3Inventory+0x102>
            {
                statusTmp = PH_ERR_ABORTED;
 8010fde:	2312      	movs	r3, #18
 8010fe0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            }
        }

        /* Stop Timer */
        PH_CHECK_SUCCESS_FCT(status, phDriver_TimerStop());
 8010fe2:	f009 fa07 	bl	801a3f4 <phDriver_TimerStop>
 8010fe6:	4603      	mov	r3, r0
 8010fe8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8010fea:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d001      	beq.n	8010ff4 <phhalHw_Pn5180_I18000p3m3Inventory+0x114>
 8010ff0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8010ff2:	e103      	b.n	80111fc <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
    }

    if (statusTmp != PH_ERR_SUCCESS)
 8010ff4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d001      	beq.n	8010ffe <phhalHw_Pn5180_I18000p3m3Inventory+0x11e>
    {
        return statusTmp;
 8010ffa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010ffc:	e0fe      	b.n	80111fc <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
    }

    dwIrqWaitFor = (IRQ_STATUS_RX_IRQ_MASK | IRQ_STATUS_GENERAL_ERROR_IRQ_MASK);
 8010ffe:	4b82      	ldr	r3, [pc, #520]	@ (8011208 <phhalHw_Pn5180_I18000p3m3Inventory+0x328>)
 8011000:	623b      	str	r3, [r7, #32]

    /* Clear Interrupts  */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, PHHAL_HW_PN5180_IRQ_SET_CLEAR_ALL_MASK));
 8011002:	4a82      	ldr	r2, [pc, #520]	@ (801120c <phhalHw_Pn5180_I18000p3m3Inventory+0x32c>)
 8011004:	2103      	movs	r1, #3
 8011006:	68f8      	ldr	r0, [r7, #12]
 8011008:	f000 fa34 	bl	8011474 <phhalHw_Pn5180_Instr_WriteRegister>
 801100c:	4603      	mov	r3, r0
 801100e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8011010:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011012:	2b00      	cmp	r3, #0
 8011014:	d001      	beq.n	801101a <phhalHw_Pn5180_I18000p3m3Inventory+0x13a>
 8011016:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011018:	e0f0      	b.n	80111fc <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>

    /* Clear the Rf Event. */
    PH_CHECK_SUCCESS_FCT(status, phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL));
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 8011020:	2300      	movs	r3, #0
 8011022:	2201      	movs	r2, #1
 8011024:	2100      	movs	r1, #0
 8011026:	f009 fbc1 	bl	801a7ac <phOsal_EventClear>
 801102a:	4603      	mov	r3, r0
 801102c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 801102e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8011030:	2b00      	cmp	r3, #0
 8011032:	d001      	beq.n	8011038 <phhalHw_Pn5180_I18000p3m3Inventory+0x158>
 8011034:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8011036:	e0e1      	b.n	80111fc <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>

    /* Enable IRQ sources */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, IRQ_ENABLE, dwIrqWaitFor));
 8011038:	6a3a      	ldr	r2, [r7, #32]
 801103a:	2101      	movs	r1, #1
 801103c:	68f8      	ldr	r0, [r7, #12]
 801103e:	f000 fa8f 	bl	8011560 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 8011042:	4603      	mov	r3, r0
 8011044:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8011046:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011048:	2b00      	cmp	r3, #0
 801104a:	d001      	beq.n	8011050 <phhalHw_Pn5180_I18000p3m3Inventory+0x170>
 801104c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801104e:	e0d5      	b.n	80111fc <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>

    if (bTSprocessing == PHHAL_HW_I18000P3M3_GET_MAX_RESPS)
 8011050:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8011054:	2b00      	cmp	r3, #0
 8011056:	d101      	bne.n	801105c <phhalHw_Pn5180_I18000p3m3Inventory+0x17c>
    {
        bSelCmdLen = 0U;
 8011058:	2300      	movs	r3, #0
 801105a:	71fb      	strb	r3, [r7, #7]
    }

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_EpcGen2Inventory(
 801105c:	79b9      	ldrb	r1, [r7, #6]
 801105e:	79fa      	ldrb	r2, [r7, #7]
 8011060:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8011064:	9301      	str	r3, [sp, #4]
 8011066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011068:	9300      	str	r3, [sp, #0]
 801106a:	460b      	mov	r3, r1
 801106c:	68b9      	ldr	r1, [r7, #8]
 801106e:	68f8      	ldr	r0, [r7, #12]
 8011070:	f000 ff7a 	bl	8011f68 <phhalHw_Pn5180_Instr_EpcGen2Inventory>
 8011074:	4603      	mov	r3, r0
 8011076:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8011078:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801107a:	2b00      	cmp	r3, #0
 801107c:	d001      	beq.n	8011082 <phhalHw_Pn5180_I18000p3m3Inventory+0x1a2>
 801107e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011080:	e0bc      	b.n	80111fc <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
        pBeginRndCmd,
        bTSprocessing
        ));

    /* Now wait for the IRQ */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WaitIrq(
 8011082:	f107 0318 	add.w	r3, r7, #24
 8011086:	9300      	str	r3, [sp, #0]
 8011088:	6a3b      	ldr	r3, [r7, #32]
 801108a:	2200      	movs	r2, #0
 801108c:	2101      	movs	r1, #1
 801108e:	68f8      	ldr	r0, [r7, #12]
 8011090:	f002 fe86 	bl	8013da0 <phhalHw_Pn5180_WaitIrq>
 8011094:	4603      	mov	r3, r0
 8011096:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8011098:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801109a:	2b00      	cmp	r3, #0
 801109c:	d001      	beq.n	80110a2 <phhalHw_Pn5180_I18000p3m3Inventory+0x1c2>
 801109e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80110a0:	e0ac      	b.n	80111fc <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
        PH_OFF,
        dwIrqWaitFor,
        &dwIrqReg));

    /* Check if an error has occured */
    if (0U != (dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))
 80110a2:	69bb      	ldr	r3, [r7, #24]
 80110a4:	f003 0301 	and.w	r3, r3, #1
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	f000 8095 	beq.w	80111d8 <phhalHw_Pn5180_I18000p3m3Inventory+0x2f8>
    {
        /*Retrieve the result size and result*/
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize( pDataParams, &ResultSize));
 80110ae:	f107 031c 	add.w	r3, r7, #28
 80110b2:	4619      	mov	r1, r3
 80110b4:	68f8      	ldr	r0, [r7, #12]
 80110b6:	f000 ffe6 	bl	8012086 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize>
 80110ba:	4603      	mov	r3, r0
 80110bc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80110be:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d001      	beq.n	80110c8 <phhalHw_Pn5180_I18000p3m3Inventory+0x1e8>
 80110c4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80110c6:	e099      	b.n	80111fc <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_EpcGen2RetrieveResult( pDataParams, ppRxBuffer, ResultSize));
 80110c8:	8bbb      	ldrh	r3, [r7, #28]
 80110ca:	461a      	mov	r2, r3
 80110cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80110ce:	68f8      	ldr	r0, [r7, #12]
 80110d0:	f001 f82f 	bl	8012132 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult>
 80110d4:	4603      	mov	r3, r0
 80110d6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80110d8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d001      	beq.n	80110e2 <phhalHw_Pn5180_I18000p3m3Inventory+0x202>
 80110de:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80110e0:	e08c      	b.n	80111fc <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>

        *wRxBufferLen = ResultSize;
 80110e2:	8bba      	ldrh	r2, [r7, #28]
 80110e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80110e6:	801a      	strh	r2, [r3, #0]
        if(ResultSize > 0U)
 80110e8:	8bbb      	ldrh	r3, [r7, #28]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d071      	beq.n	80111d2 <phhalHw_Pn5180_I18000p3m3Inventory+0x2f2>
            /* Response length is 3bytes by default. With 1st byte indicating Response status.
             * If 1st Byte has value '2' it indicates there is no response in any Timeslot,
             * all other values indicate response availability.(As specified in PN5180 Instruction Layer document) */

            /* Extract bQ value from pBeginRndCmd */
            bBuff1 = *(pBeginRndCmd + 1) & (uint8_t)0x7;
 80110ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110f0:	3301      	adds	r3, #1
 80110f2:	781b      	ldrb	r3, [r3, #0]
 80110f4:	f003 0307 	and.w	r3, r3, #7
 80110f8:	77fb      	strb	r3, [r7, #31]
            bBuff2 = *(pBeginRndCmd + 2) & (uint8_t)0x80;
 80110fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110fc:	3302      	adds	r3, #2
 80110fe:	781b      	ldrb	r3, [r3, #0]
 8011100:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8011104:	77bb      	strb	r3, [r7, #30]

            bQ = (bBuff1 << 1) | (bBuff2 >> 7);
 8011106:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801110a:	005b      	lsls	r3, r3, #1
 801110c:	b25a      	sxtb	r2, r3
 801110e:	7fbb      	ldrb	r3, [r7, #30]
 8011110:	09db      	lsrs	r3, r3, #7
 8011112:	b2db      	uxtb	r3, r3
 8011114:	b25b      	sxtb	r3, r3
 8011116:	4313      	orrs	r3, r2
 8011118:	b25b      	sxtb	r3, r3
 801111a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

            index=0;
 801111e:	2300      	movs	r3, #0
 8011120:	857b      	strh	r3, [r7, #42]	@ 0x2a
            numOfSlots= 1 << bQ;
 8011122:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011126:	2201      	movs	r2, #1
 8011128:	fa02 f303 	lsl.w	r3, r2, r3
 801112c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

            while(numOfSlots)
 8011130:	e04a      	b.n	80111c8 <phhalHw_Pn5180_I18000p3m3Inventory+0x2e8>
            {
                if( ( (*ppRxBuffer)[index] == 2 )
 8011132:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011134:	681a      	ldr	r2, [r3, #0]
 8011136:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011138:	4413      	add	r3, r2
 801113a:	781b      	ldrb	r3, [r3, #0]
 801113c:	2b02      	cmp	r3, #2
 801113e:	d112      	bne.n	8011166 <phhalHw_Pn5180_I18000p3m3Inventory+0x286>
                    && ( (*ppRxBuffer)[index + 1] == 0 )
 8011140:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011142:	681a      	ldr	r2, [r3, #0]
 8011144:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011146:	3301      	adds	r3, #1
 8011148:	4413      	add	r3, r2
 801114a:	781b      	ldrb	r3, [r3, #0]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d10a      	bne.n	8011166 <phhalHw_Pn5180_I18000p3m3Inventory+0x286>
                    && ( (*ppRxBuffer)[index + 2] == 0 )
 8011150:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011152:	681a      	ldr	r2, [r3, #0]
 8011154:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011156:	3302      	adds	r3, #2
 8011158:	4413      	add	r3, r2
 801115a:	781b      	ldrb	r3, [r3, #0]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d102      	bne.n	8011166 <phhalHw_Pn5180_I18000p3m3Inventory+0x286>
                    )
                {
                    status = PH_ERR_IO_TIMEOUT;
 8011160:	2301      	movs	r3, #1
 8011162:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8011164:	e028      	b.n	80111b8 <phhalHw_Pn5180_I18000p3m3Inventory+0x2d8>
                }
                else if( ( (*ppRxBuffer)[index] == 3 )
 8011166:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011168:	681a      	ldr	r2, [r3, #0]
 801116a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801116c:	4413      	add	r3, r2
 801116e:	781b      	ldrb	r3, [r3, #0]
 8011170:	2b03      	cmp	r3, #3
 8011172:	d11e      	bne.n	80111b2 <phhalHw_Pn5180_I18000p3m3Inventory+0x2d2>
                    && ( (*ppRxBuffer)[index + 1] == 0 )
 8011174:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011176:	681a      	ldr	r2, [r3, #0]
 8011178:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801117a:	3301      	adds	r3, #1
 801117c:	4413      	add	r3, r2
 801117e:	781b      	ldrb	r3, [r3, #0]
 8011180:	2b00      	cmp	r3, #0
 8011182:	d116      	bne.n	80111b2 <phhalHw_Pn5180_I18000p3m3Inventory+0x2d2>
                    && ( (*ppRxBuffer)[index + 2] == 0 )
 8011184:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011186:	681a      	ldr	r2, [r3, #0]
 8011188:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801118a:	3302      	adds	r3, #2
 801118c:	4413      	add	r3, r2
 801118e:	781b      	ldrb	r3, [r3, #0]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d10e      	bne.n	80111b2 <phhalHw_Pn5180_I18000p3m3Inventory+0x2d2>
                    )
                {
                    status = PH_ERR_COLLISION_ERROR;
 8011194:	2303      	movs	r3, #3
 8011196:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                    // If TimeSlot behaviour is ONE_TS_ONLY or GET_TAG_HANDLE
                    if(bTSprocessing & PHHAL_HW_I18000P3M3_ONE_TS_ONLY ||
 8011198:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 801119c:	f003 0301 	and.w	r3, r3, #1
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d11b      	bne.n	80111dc <phhalHw_Pn5180_I18000p3m3Inventory+0x2fc>
                        bTSprocessing & PHHAL_HW_I18000P3M3_GET_TAG_HANDLE)
 80111a4:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80111a8:	f003 0302 	and.w	r3, r3, #2
                    if(bTSprocessing & PHHAL_HW_I18000P3M3_ONE_TS_ONLY ||
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d115      	bne.n	80111dc <phhalHw_Pn5180_I18000p3m3Inventory+0x2fc>
 80111b0:	e002      	b.n	80111b8 <phhalHw_Pn5180_I18000p3m3Inventory+0x2d8>
                        break;
                    }
                }
                else
                {
                    status = PH_ERR_SUCCESS;
 80111b2:	2300      	movs	r3, #0
 80111b4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                    break;
 80111b6:	e011      	b.n	80111dc <phhalHw_Pn5180_I18000p3m3Inventory+0x2fc>
                }
                index=index+3;
 80111b8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80111ba:	3303      	adds	r3, #3
 80111bc:	857b      	strh	r3, [r7, #42]	@ 0x2a
                numOfSlots--;
 80111be:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80111c2:	3b01      	subs	r3, #1
 80111c4:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
            while(numOfSlots)
 80111c8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d1b0      	bne.n	8011132 <phhalHw_Pn5180_I18000p3m3Inventory+0x252>
 80111d0:	e004      	b.n	80111dc <phhalHw_Pn5180_I18000p3m3Inventory+0x2fc>
            }
        }
        else
        {
            status = PH_ERR_INTERNAL_ERROR;
 80111d2:	237f      	movs	r3, #127	@ 0x7f
 80111d4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80111d6:	e001      	b.n	80111dc <phhalHw_Pn5180_I18000p3m3Inventory+0x2fc>
        }
    }
    else
    {
        status = PH_ERR_IO_TIMEOUT;
 80111d8:	2301      	movs	r3, #1
 80111da:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    }

    return PH_ADD_COMPCODE(status, PH_COMP_HAL);
 80111dc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d00b      	beq.n	80111fa <phhalHw_Pn5180_I18000p3m3Inventory+0x31a>
 80111e2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80111e4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d106      	bne.n	80111fa <phhalHw_Pn5180_I18000p3m3Inventory+0x31a>
 80111ec:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80111ee:	b2db      	uxtb	r3, r3
 80111f0:	b29b      	uxth	r3, r3
 80111f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80111f6:	b29b      	uxth	r3, r3
 80111f8:	e000      	b.n	80111fc <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
 80111fa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
}
 80111fc:	4618      	mov	r0, r3
 80111fe:	3730      	adds	r7, #48	@ 0x30
 8011200:	46bd      	mov	sp, r7
 8011202:	bd80      	pop	{r7, pc}
 8011204:	20001be0 	.word	0x20001be0
 8011208:	00020001 	.word	0x00020001
 801120c:	000fffff 	.word	0x000fffff

08011210 <phhalHw_Pn5180_18000p3m3ResumeInventory>:
phStatus_t phhalHw_Pn5180_18000p3m3ResumeInventory(
    phhalHw_Pn5180_DataParams_t * pDataParams,  /**< [In] Pointer to this layer's parameter structure. */
    uint8_t ** ppRxBuffer,                      /**< [In] Pointer to HAL Rx Buffer containing response from single/multiple tags. */
    uint16_t * wRxBufferLen                     /**< [In] Length of response in hal Rx Buffer. */
    )
{
 8011210:	b580      	push	{r7, lr}
 8011212:	b08a      	sub	sp, #40	@ 0x28
 8011214:	af02      	add	r7, sp, #8
 8011216:	60f8      	str	r0, [r7, #12]
 8011218:	60b9      	str	r1, [r7, #8]
 801121a:	607a      	str	r2, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 801121c:	2300      	movs	r3, #0
 801121e:	83fb      	strh	r3, [r7, #30]
    uint16_t  PH_MEMLOC_REM ResultSize;
    uint32_t  PH_MEMLOC_REM dwIrqWaitFor;
    uint32_t PH_MEMLOC_REM dwIrqReg;

    /* Check all the pointers */
    PH_ASSERT_NULL(ppRxBuffer);
 8011220:	68bb      	ldr	r3, [r7, #8]
 8011222:	2b00      	cmp	r3, #0
 8011224:	d101      	bne.n	801122a <phhalHw_Pn5180_18000p3m3ResumeInventory+0x1a>
 8011226:	2321      	movs	r3, #33	@ 0x21
 8011228:	e07d      	b.n	8011326 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>
    PH_ASSERT_NULL(wRxBufferLen);
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	2b00      	cmp	r3, #0
 801122e:	d101      	bne.n	8011234 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x24>
 8011230:	2321      	movs	r3, #33	@ 0x21
 8011232:	e078      	b.n	8011326 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>

    dwIrqWaitFor =  (IRQ_STATUS_RX_IRQ_MASK| IRQ_STATUS_GENERAL_ERROR_IRQ_MASK);
 8011234:	4b3e      	ldr	r3, [pc, #248]	@ (8011330 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x120>)
 8011236:	61bb      	str	r3, [r7, #24]

    /* Clear Interrupts  */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, dwIrqWaitFor));
 8011238:	69ba      	ldr	r2, [r7, #24]
 801123a:	2103      	movs	r1, #3
 801123c:	68f8      	ldr	r0, [r7, #12]
 801123e:	f000 f919 	bl	8011474 <phhalHw_Pn5180_Instr_WriteRegister>
 8011242:	4603      	mov	r3, r0
 8011244:	82fb      	strh	r3, [r7, #22]
 8011246:	8afb      	ldrh	r3, [r7, #22]
 8011248:	2b00      	cmp	r3, #0
 801124a:	d001      	beq.n	8011250 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x40>
 801124c:	8afb      	ldrh	r3, [r7, #22]
 801124e:	e06a      	b.n	8011326 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>

    (void)phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL);
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 8011256:	2300      	movs	r3, #0
 8011258:	2201      	movs	r2, #1
 801125a:	2100      	movs	r1, #0
 801125c:	f009 faa6 	bl	801a7ac <phOsal_EventClear>

    /* Enable IRQ sources */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, IRQ_ENABLE, dwIrqWaitFor));
 8011260:	69ba      	ldr	r2, [r7, #24]
 8011262:	2101      	movs	r1, #1
 8011264:	68f8      	ldr	r0, [r7, #12]
 8011266:	f000 f97b 	bl	8011560 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 801126a:	4603      	mov	r3, r0
 801126c:	82fb      	strh	r3, [r7, #22]
 801126e:	8afb      	ldrh	r3, [r7, #22]
 8011270:	2b00      	cmp	r3, #0
 8011272:	d001      	beq.n	8011278 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x68>
 8011274:	8afb      	ldrh	r3, [r7, #22]
 8011276:	e056      	b.n	8011326 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_EpcGen2ResumeInventory(pDataParams));
 8011278:	68f8      	ldr	r0, [r7, #12]
 801127a:	f000 ffba 	bl	80121f2 <phhalHw_Pn5180_Instr_EpcGen2ResumeInventory>
 801127e:	4603      	mov	r3, r0
 8011280:	82fb      	strh	r3, [r7, #22]
 8011282:	8afb      	ldrh	r3, [r7, #22]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d001      	beq.n	801128c <phhalHw_Pn5180_18000p3m3ResumeInventory+0x7c>
 8011288:	8afb      	ldrh	r3, [r7, #22]
 801128a:	e04c      	b.n	8011326 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>

    /* Now wait for the IRQ */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WaitIrq(
 801128c:	f107 0310 	add.w	r3, r7, #16
 8011290:	9300      	str	r3, [sp, #0]
 8011292:	69bb      	ldr	r3, [r7, #24]
 8011294:	2200      	movs	r2, #0
 8011296:	2101      	movs	r1, #1
 8011298:	68f8      	ldr	r0, [r7, #12]
 801129a:	f002 fd81 	bl	8013da0 <phhalHw_Pn5180_WaitIrq>
 801129e:	4603      	mov	r3, r0
 80112a0:	82fb      	strh	r3, [r7, #22]
 80112a2:	8afb      	ldrh	r3, [r7, #22]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d001      	beq.n	80112ac <phhalHw_Pn5180_18000p3m3ResumeInventory+0x9c>
 80112a8:	8afb      	ldrh	r3, [r7, #22]
 80112aa:	e03c      	b.n	8011326 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>
        PH_OFF,
        dwIrqWaitFor,
        &dwIrqReg));

    /* Check if an error has occurred */
    if (0U != (dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))
 80112ac:	693b      	ldr	r3, [r7, #16]
 80112ae:	f003 0301 	and.w	r3, r3, #1
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d025      	beq.n	8011302 <phhalHw_Pn5180_18000p3m3ResumeInventory+0xf2>
    {
        /*Retrieve the result size and result*/
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize( pDataParams, &ResultSize));
 80112b6:	f107 0314 	add.w	r3, r7, #20
 80112ba:	4619      	mov	r1, r3
 80112bc:	68f8      	ldr	r0, [r7, #12]
 80112be:	f000 fee2 	bl	8012086 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize>
 80112c2:	4603      	mov	r3, r0
 80112c4:	82fb      	strh	r3, [r7, #22]
 80112c6:	8afb      	ldrh	r3, [r7, #22]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d001      	beq.n	80112d0 <phhalHw_Pn5180_18000p3m3ResumeInventory+0xc0>
 80112cc:	8afb      	ldrh	r3, [r7, #22]
 80112ce:	e02a      	b.n	8011326 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>

        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_EpcGen2RetrieveResult( pDataParams, ppRxBuffer, ResultSize));
 80112d0:	8abb      	ldrh	r3, [r7, #20]
 80112d2:	461a      	mov	r2, r3
 80112d4:	68b9      	ldr	r1, [r7, #8]
 80112d6:	68f8      	ldr	r0, [r7, #12]
 80112d8:	f000 ff2b 	bl	8012132 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult>
 80112dc:	4603      	mov	r3, r0
 80112de:	82fb      	strh	r3, [r7, #22]
 80112e0:	8afb      	ldrh	r3, [r7, #22]
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d001      	beq.n	80112ea <phhalHw_Pn5180_18000p3m3ResumeInventory+0xda>
 80112e6:	8afb      	ldrh	r3, [r7, #22]
 80112e8:	e01d      	b.n	8011326 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>

        *wRxBufferLen = ResultSize;
 80112ea:	8aba      	ldrh	r2, [r7, #20]
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	801a      	strh	r2, [r3, #0]

        if(ResultSize>0U)
 80112f0:	8abb      	ldrh	r3, [r7, #20]
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d002      	beq.n	80112fc <phhalHw_Pn5180_18000p3m3ResumeInventory+0xec>
        {
            status = PH_ERR_SUCCESS;
 80112f6:	2300      	movs	r3, #0
 80112f8:	83fb      	strh	r3, [r7, #30]
 80112fa:	e004      	b.n	8011306 <phhalHw_Pn5180_18000p3m3ResumeInventory+0xf6>
        }
        else
        {
            status = PH_ERR_INTERNAL_ERROR;
 80112fc:	237f      	movs	r3, #127	@ 0x7f
 80112fe:	83fb      	strh	r3, [r7, #30]
 8011300:	e001      	b.n	8011306 <phhalHw_Pn5180_18000p3m3ResumeInventory+0xf6>
        }
    }
    else
    {
        status = PH_ERR_IO_TIMEOUT;
 8011302:	2301      	movs	r3, #1
 8011304:	83fb      	strh	r3, [r7, #30]
    }

    return PH_ADD_COMPCODE(status, PH_COMP_HAL);
 8011306:	8bfb      	ldrh	r3, [r7, #30]
 8011308:	2b00      	cmp	r3, #0
 801130a:	d00b      	beq.n	8011324 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x114>
 801130c:	8bfb      	ldrh	r3, [r7, #30]
 801130e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011312:	2b00      	cmp	r3, #0
 8011314:	d106      	bne.n	8011324 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x114>
 8011316:	8bfb      	ldrh	r3, [r7, #30]
 8011318:	b2db      	uxtb	r3, r3
 801131a:	b29b      	uxth	r3, r3
 801131c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8011320:	b29b      	uxth	r3, r3
 8011322:	e000      	b.n	8011326 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>
 8011324:	8bfb      	ldrh	r3, [r7, #30]
}
 8011326:	4618      	mov	r0, r3
 8011328:	3720      	adds	r7, #32
 801132a:	46bd      	mov	sp, r7
 801132c:	bd80      	pop	{r7, pc}
 801132e:	bf00      	nop
 8011330:	00020001 	.word	0x00020001

08011334 <phhalHw_Pn5180_EventWait>:

phStatus_t phhalHw_Pn5180_EventWait(phhalHw_Pn5180_DataParams_t * pDataParams, uint32_t dwEventTimeout)
{
 8011334:	b580      	push	{r7, lr}
 8011336:	b084      	sub	sp, #16
 8011338:	af02      	add	r7, sp, #8
 801133a:	6078      	str	r0, [r7, #4]
 801133c:	6039      	str	r1, [r7, #0]
	printf("phhalHw_Pn5180_EventWait:\r\n");
 801133e:	4809      	ldr	r0, [pc, #36]	@ (8011364 <phhalHw_Pn5180_EventWait+0x30>)
 8011340:	f00f f9b8 	bl	80206b4 <puts>
    return phOsal_EventPend((volatile phOsal_Event_t *)(&pDataParams->HwEventObj.EventHandle), E_OS_EVENT_OPT_PEND_SET_ANY, dwEventTimeout,
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 801134a:	2300      	movs	r3, #0
 801134c:	9300      	str	r3, [sp, #0]
 801134e:	2321      	movs	r3, #33	@ 0x21
 8011350:	683a      	ldr	r2, [r7, #0]
 8011352:	2101      	movs	r1, #1
 8011354:	f009 f9a8 	bl	801a6a8 <phOsal_EventPend>
 8011358:	4603      	mov	r3, r0
        (E_PH_OSAL_EVT_RF | E_PH_OSAL_EVT_ABORT), NULL);
}
 801135a:	4618      	mov	r0, r3
 801135c:	3708      	adds	r7, #8
 801135e:	46bd      	mov	sp, r7
 8011360:	bd80      	pop	{r7, pc}
 8011362:	bf00      	nop
 8011364:	080230d0 	.word	0x080230d0

08011368 <phhalHw_Pn5180_EventConsume>:

phStatus_t phhalHw_Pn5180_EventConsume(phhalHw_Pn5180_DataParams_t * pDataParams)
{
 8011368:	b580      	push	{r7, lr}
 801136a:	b082      	sub	sp, #8
 801136c:	af00      	add	r7, sp, #0
 801136e:	6078      	str	r0, [r7, #4]
    return phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, (E_PH_OSAL_EVT_RF | E_PH_OSAL_EVT_ABORT), NULL);
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 8011376:	2300      	movs	r3, #0
 8011378:	2221      	movs	r2, #33	@ 0x21
 801137a:	2100      	movs	r1, #0
 801137c:	f009 fa16 	bl	801a7ac <phOsal_EventClear>
 8011380:	4603      	mov	r3, r0
}
 8011382:	4618      	mov	r0, r3
 8011384:	3708      	adds	r7, #8
 8011386:	46bd      	mov	sp, r7
 8011388:	bd80      	pop	{r7, pc}
	...

0801138c <phhalHw_Pn5180_Reset>:
    /* Delete event */
    return phOsal_EventDelete(&pDataParams->HwEventObj.EventHandle);
}

static void phhalHw_Pn5180_Reset(void)
{
 801138c:	b580      	push	{r7, lr}
 801138e:	af00      	add	r7, sp, #0
    /* As per current design, phDriver will not be implemented on PC Host side */
#ifndef _WIN32
    /* Send the reset pulse to FE to reset. */
    phDriver_PinWrite(PHDRIVER_PIN_RESET, RESET_POWERUP_LEVEL);
 8011390:	2201      	movs	r2, #1
 8011392:	2120      	movs	r1, #32
 8011394:	4810      	ldr	r0, [pc, #64]	@ (80113d8 <phhalHw_Pn5180_Reset+0x4c>)
 8011396:	f008 ffd1 	bl	801a33c <phDriver_PinWrite>
    /* delay of ~2 ms */
    phDriver_TimerStart(PH_DRIVER_TIMER_MILLI_SECS, PHHAL_HW_PN5180_RESET_DELAY_MILLI_SECS, NULL);
 801139a:	2200      	movs	r2, #0
 801139c:	2102      	movs	r1, #2
 801139e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80113a2:	f008 ffdd 	bl	801a360 <phDriver_TimerStart>

    phDriver_PinWrite(PHDRIVER_PIN_RESET, RESET_POWERDOWN_LEVEL);
 80113a6:	2200      	movs	r2, #0
 80113a8:	2120      	movs	r1, #32
 80113aa:	480b      	ldr	r0, [pc, #44]	@ (80113d8 <phhalHw_Pn5180_Reset+0x4c>)
 80113ac:	f008 ffc6 	bl	801a33c <phDriver_PinWrite>
    /* delay of ~2 ms */
    phDriver_TimerStart(PH_DRIVER_TIMER_MILLI_SECS, PHHAL_HW_PN5180_RESET_DELAY_MILLI_SECS, NULL);
 80113b0:	2200      	movs	r2, #0
 80113b2:	2102      	movs	r1, #2
 80113b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80113b8:	f008 ffd2 	bl	801a360 <phDriver_TimerStart>

    phDriver_PinWrite(PHDRIVER_PIN_RESET, RESET_POWERUP_LEVEL);
 80113bc:	2201      	movs	r2, #1
 80113be:	2120      	movs	r1, #32
 80113c0:	4805      	ldr	r0, [pc, #20]	@ (80113d8 <phhalHw_Pn5180_Reset+0x4c>)
 80113c2:	f008 ffbb 	bl	801a33c <phDriver_PinWrite>
    /* delay of ~2 ms */
    phDriver_TimerStart(PH_DRIVER_TIMER_MILLI_SECS, PHHAL_HW_PN5180_RESET_DELAY_MILLI_SECS, NULL);
 80113c6:	2200      	movs	r2, #0
 80113c8:	2102      	movs	r1, #2
 80113ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80113ce:	f008 ffc7 	bl	801a360 <phDriver_TimerStart>
#endif /*_WIN32*/
}
 80113d2:	bf00      	nop
 80113d4:	bd80      	pop	{r7, pc}
 80113d6:	bf00      	nop
 80113d8:	48000400 	.word	0x48000400

080113dc <phhalHw_Pn5180_WriteSSEL>:

#ifndef _WIN32
static void phhalHw_Pn5180_WriteSSEL(phbalReg_Type_t *pBalDataParams, uint8_t bValue)
{
 80113dc:	b580      	push	{r7, lr}
 80113de:	b082      	sub	sp, #8
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	6078      	str	r0, [r7, #4]
 80113e4:	460b      	mov	r3, r1
 80113e6:	70fb      	strb	r3, [r7, #3]
    if (pBalDataParams->bBalType == PHBAL_REG_TYPE_SPI)
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	789b      	ldrb	r3, [r3, #2]
 80113ec:	2b01      	cmp	r3, #1
 80113ee:	d107      	bne.n	8011400 <phhalHw_Pn5180_WriteSSEL+0x24>
    {
        phDriver_PinWrite(PHDRIVER_PIN_SSEL, bValue);
 80113f0:	78fb      	ldrb	r3, [r7, #3]
 80113f2:	461a      	mov	r2, r3
 80113f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80113f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80113fc:	f008 ff9e 	bl	801a33c <phDriver_PinWrite>
    }
}
 8011400:	bf00      	nop
 8011402:	3708      	adds	r7, #8
 8011404:	46bd      	mov	sp, r7
 8011406:	bd80      	pop	{r7, pc}

08011408 <phhalHw_Pn5180_Instr_GetInstrBuffer>:
static void phhalHw_Pn5180_Instr_GetInstrBuffer(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t ** pTxBuffer,
    uint16_t * pTxBufferLen
    )
{
 8011408:	b480      	push	{r7}
 801140a:	b085      	sub	sp, #20
 801140c:	af00      	add	r7, sp, #0
 801140e:	60f8      	str	r0, [r7, #12]
 8011410:	60b9      	str	r1, [r7, #8]
 8011412:	607a      	str	r2, [r7, #4]
    /*Return Instr buffer*/
    *pTxBuffer =pDataParams->pInstrBuffer;
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	f103 027a 	add.w	r2, r3, #122	@ 0x7a
 801141a:	68bb      	ldr	r3, [r7, #8]
 801141c:	601a      	str	r2, [r3, #0]
    /* Return stored length */
    *pTxBufferLen = INSTR_BUFFER_SIZE;
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8011424:	801a      	strh	r2, [r3, #0]
}
 8011426:	bf00      	nop
 8011428:	3714      	adds	r7, #20
 801142a:	46bd      	mov	sp, r7
 801142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011430:	4770      	bx	lr
	...

08011434 <phhalHw_Pn5180_Check_Reg_Readonly>:
}

static phStatus_t phhalHw_Pn5180_Check_Reg_Readonly(
    uint8_t bRegister
    )
{
 8011434:	b480      	push	{r7}
 8011436:	b085      	sub	sp, #20
 8011438:	af00      	add	r7, sp, #0
 801143a:	4603      	mov	r3, r0
 801143c:	71fb      	strb	r3, [r7, #7]
    uint8_t     PH_MEMLOC_REM bIndex;

    /* Validate the registers */
    for (bIndex = 0U; bIndex < sizeof(phhalHw_Pn5180_Instr_RO_Reg_Table); bIndex++)
 801143e:	2300      	movs	r3, #0
 8011440:	73fb      	strb	r3, [r7, #15]
 8011442:	e00b      	b.n	801145c <phhalHw_Pn5180_Check_Reg_Readonly+0x28>
    {
        /* Check if the register is read-only */
        if (bRegister == phhalHw_Pn5180_Instr_RO_Reg_Table[bIndex])
 8011444:	7bfb      	ldrb	r3, [r7, #15]
 8011446:	4a0a      	ldr	r2, [pc, #40]	@ (8011470 <phhalHw_Pn5180_Check_Reg_Readonly+0x3c>)
 8011448:	5cd3      	ldrb	r3, [r2, r3]
 801144a:	79fa      	ldrb	r2, [r7, #7]
 801144c:	429a      	cmp	r2, r3
 801144e:	d102      	bne.n	8011456 <phhalHw_Pn5180_Check_Reg_Readonly+0x22>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_READ_WRITE_ERROR, PH_COMP_HAL);
 8011450:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8011454:	e006      	b.n	8011464 <phhalHw_Pn5180_Check_Reg_Readonly+0x30>
    for (bIndex = 0U; bIndex < sizeof(phhalHw_Pn5180_Instr_RO_Reg_Table); bIndex++)
 8011456:	7bfb      	ldrb	r3, [r7, #15]
 8011458:	3301      	adds	r3, #1
 801145a:	73fb      	strb	r3, [r7, #15]
 801145c:	7bfb      	ldrb	r3, [r7, #15]
 801145e:	2b06      	cmp	r3, #6
 8011460:	d9f0      	bls.n	8011444 <phhalHw_Pn5180_Check_Reg_Readonly+0x10>
        }
    }
    return PH_ERR_SUCCESS;
 8011462:	2300      	movs	r3, #0

}
 8011464:	4618      	mov	r0, r3
 8011466:	3714      	adds	r7, #20
 8011468:	46bd      	mov	sp, r7
 801146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801146e:	4770      	bx	lr
 8011470:	08023ad4 	.word	0x08023ad4

08011474 <phhalHw_Pn5180_Instr_WriteRegister>:
phStatus_t phhalHw_Pn5180_Instr_WriteRegister(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRegister,
    uint32_t dwValue
    )
{
 8011474:	b580      	push	{r7, lr}
 8011476:	b08a      	sub	sp, #40	@ 0x28
 8011478:	af02      	add	r7, sp, #8
 801147a:	60f8      	str	r0, [r7, #12]
 801147c:	460b      	mov	r3, r1
 801147e:	607a      	str	r2, [r7, #4]
 8011480:	72fb      	strb	r3, [r7, #11]
    uint8_t     PH_MEMLOC_REM pData[1];

    /* Validate pDataParams
    * Check if the Register address is invalid
    * */
    if ( (NULL == pDataParams)\
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	2b00      	cmp	r3, #0
 8011486:	d006      	beq.n	8011496 <phhalHw_Pn5180_Instr_WriteRegister+0x22>
        ||((bRegister >= PHHAL_HW_PN5180_INVALID_REG_START_ADDRESS) \
 8011488:	7afb      	ldrb	r3, [r7, #11]
 801148a:	2b43      	cmp	r3, #67	@ 0x43
 801148c:	d906      	bls.n	801149c <phhalHw_Pn5180_Instr_WriteRegister+0x28>
        && (bRegister <= PHHAL_HW_PN5180_INVALID_REG_END_ADDRESS)) \
 801148e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011492:	2b00      	cmp	r3, #0
 8011494:	db02      	blt.n	801149c <phhalHw_Pn5180_Instr_WriteRegister+0x28>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011496:	f240 2321 	movw	r3, #545	@ 0x221
 801149a:	e05d      	b.n	8011558 <phhalHw_Pn5180_Instr_WriteRegister+0xe4>
    }

    /* Check for read-only registers */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Check_Reg_Readonly(bRegister));
 801149c:	7afb      	ldrb	r3, [r7, #11]
 801149e:	4618      	mov	r0, r3
 80114a0:	f7ff ffc8 	bl	8011434 <phhalHw_Pn5180_Check_Reg_Readonly>
 80114a4:	4603      	mov	r3, r0
 80114a6:	83fb      	strh	r3, [r7, #30]
 80114a8:	8bfb      	ldrh	r3, [r7, #30]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d001      	beq.n	80114b2 <phhalHw_Pn5180_Instr_WriteRegister+0x3e>
 80114ae:	8bfb      	ldrh	r3, [r7, #30]
 80114b0:	e052      	b.n	8011558 <phhalHw_Pn5180_Instr_WriteRegister+0xe4>

    /* Build the command frame */
    wBufferLength = 0U;
 80114b2:	2300      	movs	r3, #0
 80114b4:	777b      	strb	r3, [r7, #29]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_WRITE_REGISTER;
 80114b6:	7f7b      	ldrb	r3, [r7, #29]
 80114b8:	1c5a      	adds	r2, r3, #1
 80114ba:	777a      	strb	r2, [r7, #29]
 80114bc:	3320      	adds	r3, #32
 80114be:	443b      	add	r3, r7
 80114c0:	2200      	movs	r2, #0
 80114c2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bRegister;
 80114c6:	7f7b      	ldrb	r3, [r7, #29]
 80114c8:	1c5a      	adds	r2, r3, #1
 80114ca:	777a      	strb	r2, [r7, #29]
 80114cc:	3320      	adds	r3, #32
 80114ce:	443b      	add	r3, r7
 80114d0:	7afa      	ldrb	r2, [r7, #11]
 80114d2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* LSB1 */
    bDataBuffer[wBufferLength++] = (uint8_t)(dwValue & 0xFFU);
 80114d6:	7f7b      	ldrb	r3, [r7, #29]
 80114d8:	1c5a      	adds	r2, r3, #1
 80114da:	777a      	strb	r2, [r7, #29]
 80114dc:	687a      	ldr	r2, [r7, #4]
 80114de:	b2d2      	uxtb	r2, r2
 80114e0:	3320      	adds	r3, #32
 80114e2:	443b      	add	r3, r7
 80114e4:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* LSB2 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwValue >> 8U) & 0xFFU);
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	0a1a      	lsrs	r2, r3, #8
 80114ec:	7f7b      	ldrb	r3, [r7, #29]
 80114ee:	1c59      	adds	r1, r3, #1
 80114f0:	7779      	strb	r1, [r7, #29]
 80114f2:	b2d2      	uxtb	r2, r2
 80114f4:	3320      	adds	r3, #32
 80114f6:	443b      	add	r3, r7
 80114f8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* MSB1 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwValue >> 16U) & 0xFFU);
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	0c1a      	lsrs	r2, r3, #16
 8011500:	7f7b      	ldrb	r3, [r7, #29]
 8011502:	1c59      	adds	r1, r3, #1
 8011504:	7779      	strb	r1, [r7, #29]
 8011506:	b2d2      	uxtb	r2, r2
 8011508:	3320      	adds	r3, #32
 801150a:	443b      	add	r3, r7
 801150c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* MSB2 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwValue >> 24U) & 0xFFU);
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	0e1a      	lsrs	r2, r3, #24
 8011514:	7f7b      	ldrb	r3, [r7, #29]
 8011516:	1c59      	adds	r1, r3, #1
 8011518:	7779      	strb	r1, [r7, #29]
 801151a:	b2d2      	uxtb	r2, r2
 801151c:	3320      	adds	r3, #32
 801151e:	443b      	add	r3, r7
 8011520:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* No Response expected*/
    bNumExpBytes = 0U;
 8011524:	2300      	movs	r3, #0
 8011526:	773b      	strb	r3, [r7, #28]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8011528:	7f7b      	ldrb	r3, [r7, #29]
 801152a:	b29a      	uxth	r2, r3
 801152c:	7f3b      	ldrb	r3, [r7, #28]
 801152e:	b298      	uxth	r0, r3
 8011530:	f107 0114 	add.w	r1, r7, #20
 8011534:	f107 031a 	add.w	r3, r7, #26
 8011538:	9301      	str	r3, [sp, #4]
 801153a:	f107 0310 	add.w	r3, r7, #16
 801153e:	9300      	str	r3, [sp, #0]
 8011540:	4603      	mov	r3, r0
 8011542:	68f8      	ldr	r0, [r7, #12]
 8011544:	f7ff f878 	bl	8010638 <phhalHw_Pn5180_BalExchange>
 8011548:	4603      	mov	r3, r0
 801154a:	83fb      	strh	r3, [r7, #30]
 801154c:	8bfb      	ldrh	r3, [r7, #30]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d001      	beq.n	8011556 <phhalHw_Pn5180_Instr_WriteRegister+0xe2>
 8011552:	8bfb      	ldrh	r3, [r7, #30]
 8011554:	e000      	b.n	8011558 <phhalHw_Pn5180_Instr_WriteRegister+0xe4>
        wBufferLength,
        bNumExpBytes,
        pData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 8011556:	2300      	movs	r3, #0
}
 8011558:	4618      	mov	r0, r3
 801155a:	3720      	adds	r7, #32
 801155c:	46bd      	mov	sp, r7
 801155e:	bd80      	pop	{r7, pc}

08011560 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>:
phStatus_t phhalHw_Pn5180_Instr_WriteRegisterOrMask(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRegister,
    uint32_t dwMask
    )
{
 8011560:	b580      	push	{r7, lr}
 8011562:	b08a      	sub	sp, #40	@ 0x28
 8011564:	af02      	add	r7, sp, #8
 8011566:	60f8      	str	r0, [r7, #12]
 8011568:	460b      	mov	r3, r1
 801156a:	607a      	str	r2, [r7, #4]
 801156c:	72fb      	strb	r3, [r7, #11]
    uint8_t     PH_MEMLOC_REM pData[1];

    /* Validate pDataParams
    * Check if the Register address is invalid
    * */
    if ( (NULL == pDataParams)\
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	2b00      	cmp	r3, #0
 8011572:	d006      	beq.n	8011582 <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0x22>
        ||((bRegister >= PHHAL_HW_PN5180_INVALID_REG_START_ADDRESS) \
 8011574:	7afb      	ldrb	r3, [r7, #11]
 8011576:	2b43      	cmp	r3, #67	@ 0x43
 8011578:	d906      	bls.n	8011588 <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0x28>
        && (bRegister <= PHHAL_HW_PN5180_INVALID_REG_END_ADDRESS)) \
 801157a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801157e:	2b00      	cmp	r3, #0
 8011580:	db02      	blt.n	8011588 <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0x28>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011582:	f240 2321 	movw	r3, #545	@ 0x221
 8011586:	e05d      	b.n	8011644 <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0xe4>
    }

    /* Check for read-only registers */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Check_Reg_Readonly(bRegister));
 8011588:	7afb      	ldrb	r3, [r7, #11]
 801158a:	4618      	mov	r0, r3
 801158c:	f7ff ff52 	bl	8011434 <phhalHw_Pn5180_Check_Reg_Readonly>
 8011590:	4603      	mov	r3, r0
 8011592:	83fb      	strh	r3, [r7, #30]
 8011594:	8bfb      	ldrh	r3, [r7, #30]
 8011596:	2b00      	cmp	r3, #0
 8011598:	d001      	beq.n	801159e <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0x3e>
 801159a:	8bfb      	ldrh	r3, [r7, #30]
 801159c:	e052      	b.n	8011644 <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0xe4>

    /* Build the command frame */
    wBufferLength = 0U;
 801159e:	2300      	movs	r3, #0
 80115a0:	777b      	strb	r3, [r7, #29]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_WRITE_REGISTER_OR_MASK;
 80115a2:	7f7b      	ldrb	r3, [r7, #29]
 80115a4:	1c5a      	adds	r2, r3, #1
 80115a6:	777a      	strb	r2, [r7, #29]
 80115a8:	3320      	adds	r3, #32
 80115aa:	443b      	add	r3, r7
 80115ac:	2201      	movs	r2, #1
 80115ae:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bRegister;
 80115b2:	7f7b      	ldrb	r3, [r7, #29]
 80115b4:	1c5a      	adds	r2, r3, #1
 80115b6:	777a      	strb	r2, [r7, #29]
 80115b8:	3320      	adds	r3, #32
 80115ba:	443b      	add	r3, r7
 80115bc:	7afa      	ldrb	r2, [r7, #11]
 80115be:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* LSB1 */
    bDataBuffer[wBufferLength++] = (uint8_t)(dwMask & 0xFFU);
 80115c2:	7f7b      	ldrb	r3, [r7, #29]
 80115c4:	1c5a      	adds	r2, r3, #1
 80115c6:	777a      	strb	r2, [r7, #29]
 80115c8:	687a      	ldr	r2, [r7, #4]
 80115ca:	b2d2      	uxtb	r2, r2
 80115cc:	3320      	adds	r3, #32
 80115ce:	443b      	add	r3, r7
 80115d0:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* LSB2 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwMask >> 8U) & 0xFFU);
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	0a1a      	lsrs	r2, r3, #8
 80115d8:	7f7b      	ldrb	r3, [r7, #29]
 80115da:	1c59      	adds	r1, r3, #1
 80115dc:	7779      	strb	r1, [r7, #29]
 80115de:	b2d2      	uxtb	r2, r2
 80115e0:	3320      	adds	r3, #32
 80115e2:	443b      	add	r3, r7
 80115e4:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* MSB1 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwMask >> 16U) & 0xFFU);
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	0c1a      	lsrs	r2, r3, #16
 80115ec:	7f7b      	ldrb	r3, [r7, #29]
 80115ee:	1c59      	adds	r1, r3, #1
 80115f0:	7779      	strb	r1, [r7, #29]
 80115f2:	b2d2      	uxtb	r2, r2
 80115f4:	3320      	adds	r3, #32
 80115f6:	443b      	add	r3, r7
 80115f8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* MSB2 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwMask >> 24U) & 0xFFU);
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	0e1a      	lsrs	r2, r3, #24
 8011600:	7f7b      	ldrb	r3, [r7, #29]
 8011602:	1c59      	adds	r1, r3, #1
 8011604:	7779      	strb	r1, [r7, #29]
 8011606:	b2d2      	uxtb	r2, r2
 8011608:	3320      	adds	r3, #32
 801160a:	443b      	add	r3, r7
 801160c:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* No Response expected */
    bNumExpBytes = 0U;
 8011610:	2300      	movs	r3, #0
 8011612:	773b      	strb	r3, [r7, #28]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8011614:	7f7b      	ldrb	r3, [r7, #29]
 8011616:	b29a      	uxth	r2, r3
 8011618:	7f3b      	ldrb	r3, [r7, #28]
 801161a:	b298      	uxth	r0, r3
 801161c:	f107 0114 	add.w	r1, r7, #20
 8011620:	f107 031a 	add.w	r3, r7, #26
 8011624:	9301      	str	r3, [sp, #4]
 8011626:	f107 0310 	add.w	r3, r7, #16
 801162a:	9300      	str	r3, [sp, #0]
 801162c:	4603      	mov	r3, r0
 801162e:	68f8      	ldr	r0, [r7, #12]
 8011630:	f7ff f802 	bl	8010638 <phhalHw_Pn5180_BalExchange>
 8011634:	4603      	mov	r3, r0
 8011636:	83fb      	strh	r3, [r7, #30]
 8011638:	8bfb      	ldrh	r3, [r7, #30]
 801163a:	2b00      	cmp	r3, #0
 801163c:	d001      	beq.n	8011642 <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0xe2>
 801163e:	8bfb      	ldrh	r3, [r7, #30]
 8011640:	e000      	b.n	8011644 <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0xe4>
        wBufferLength,
        bNumExpBytes,
        pData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 8011642:	2300      	movs	r3, #0
}
 8011644:	4618      	mov	r0, r3
 8011646:	3720      	adds	r7, #32
 8011648:	46bd      	mov	sp, r7
 801164a:	bd80      	pop	{r7, pc}

0801164c <phhalHw_Pn5180_Instr_WriteRegisterAndMask>:
phStatus_t phhalHw_Pn5180_Instr_WriteRegisterAndMask(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRegister,
    uint32_t dwMask
    )
{
 801164c:	b580      	push	{r7, lr}
 801164e:	b08a      	sub	sp, #40	@ 0x28
 8011650:	af02      	add	r7, sp, #8
 8011652:	60f8      	str	r0, [r7, #12]
 8011654:	460b      	mov	r3, r1
 8011656:	607a      	str	r2, [r7, #4]
 8011658:	72fb      	strb	r3, [r7, #11]
    uint8_t     PH_MEMLOC_REM bDataBuffer[6];
    uint8_t     PH_MEMLOC_REM pData[1];

    /* Validate pDataParams
    *  Check if the Register address is invalid */
    if ( (NULL == pDataParams)\
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	2b00      	cmp	r3, #0
 801165e:	d006      	beq.n	801166e <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0x22>
        ||((bRegister >= PHHAL_HW_PN5180_INVALID_REG_START_ADDRESS) \
 8011660:	7afb      	ldrb	r3, [r7, #11]
 8011662:	2b43      	cmp	r3, #67	@ 0x43
 8011664:	d906      	bls.n	8011674 <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0x28>
        && (bRegister <= PHHAL_HW_PN5180_INVALID_REG_END_ADDRESS)) \
 8011666:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801166a:	2b00      	cmp	r3, #0
 801166c:	db02      	blt.n	8011674 <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0x28>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 801166e:	f240 2321 	movw	r3, #545	@ 0x221
 8011672:	e05d      	b.n	8011730 <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0xe4>
    }

    /* Check for read-only registers */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Check_Reg_Readonly(bRegister));
 8011674:	7afb      	ldrb	r3, [r7, #11]
 8011676:	4618      	mov	r0, r3
 8011678:	f7ff fedc 	bl	8011434 <phhalHw_Pn5180_Check_Reg_Readonly>
 801167c:	4603      	mov	r3, r0
 801167e:	83fb      	strh	r3, [r7, #30]
 8011680:	8bfb      	ldrh	r3, [r7, #30]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d001      	beq.n	801168a <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0x3e>
 8011686:	8bfb      	ldrh	r3, [r7, #30]
 8011688:	e052      	b.n	8011730 <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0xe4>

    /* Build the command frame */
    wBufferLength = 0U;
 801168a:	2300      	movs	r3, #0
 801168c:	777b      	strb	r3, [r7, #29]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_WRITE_REGISTER_AND_MASK;
 801168e:	7f7b      	ldrb	r3, [r7, #29]
 8011690:	1c5a      	adds	r2, r3, #1
 8011692:	777a      	strb	r2, [r7, #29]
 8011694:	3320      	adds	r3, #32
 8011696:	443b      	add	r3, r7
 8011698:	2202      	movs	r2, #2
 801169a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bRegister;
 801169e:	7f7b      	ldrb	r3, [r7, #29]
 80116a0:	1c5a      	adds	r2, r3, #1
 80116a2:	777a      	strb	r2, [r7, #29]
 80116a4:	3320      	adds	r3, #32
 80116a6:	443b      	add	r3, r7
 80116a8:	7afa      	ldrb	r2, [r7, #11]
 80116aa:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* LSB1 */
    bDataBuffer[wBufferLength++] = (uint8_t)(dwMask & 0xFFU);
 80116ae:	7f7b      	ldrb	r3, [r7, #29]
 80116b0:	1c5a      	adds	r2, r3, #1
 80116b2:	777a      	strb	r2, [r7, #29]
 80116b4:	687a      	ldr	r2, [r7, #4]
 80116b6:	b2d2      	uxtb	r2, r2
 80116b8:	3320      	adds	r3, #32
 80116ba:	443b      	add	r3, r7
 80116bc:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* LSB2 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwMask >> 8U) & 0xFFU);
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	0a1a      	lsrs	r2, r3, #8
 80116c4:	7f7b      	ldrb	r3, [r7, #29]
 80116c6:	1c59      	adds	r1, r3, #1
 80116c8:	7779      	strb	r1, [r7, #29]
 80116ca:	b2d2      	uxtb	r2, r2
 80116cc:	3320      	adds	r3, #32
 80116ce:	443b      	add	r3, r7
 80116d0:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* MSB1 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwMask >> 16U) & 0xFFU);
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	0c1a      	lsrs	r2, r3, #16
 80116d8:	7f7b      	ldrb	r3, [r7, #29]
 80116da:	1c59      	adds	r1, r3, #1
 80116dc:	7779      	strb	r1, [r7, #29]
 80116de:	b2d2      	uxtb	r2, r2
 80116e0:	3320      	adds	r3, #32
 80116e2:	443b      	add	r3, r7
 80116e4:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* MSB2 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwMask >> 24U) & 0xFFU);
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	0e1a      	lsrs	r2, r3, #24
 80116ec:	7f7b      	ldrb	r3, [r7, #29]
 80116ee:	1c59      	adds	r1, r3, #1
 80116f0:	7779      	strb	r1, [r7, #29]
 80116f2:	b2d2      	uxtb	r2, r2
 80116f4:	3320      	adds	r3, #32
 80116f6:	443b      	add	r3, r7
 80116f8:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* No Response expected */
    bNumExpBytes = 0U;
 80116fc:	2300      	movs	r3, #0
 80116fe:	773b      	strb	r3, [r7, #28]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8011700:	7f7b      	ldrb	r3, [r7, #29]
 8011702:	b29a      	uxth	r2, r3
 8011704:	7f3b      	ldrb	r3, [r7, #28]
 8011706:	b298      	uxth	r0, r3
 8011708:	f107 0114 	add.w	r1, r7, #20
 801170c:	f107 031a 	add.w	r3, r7, #26
 8011710:	9301      	str	r3, [sp, #4]
 8011712:	f107 0310 	add.w	r3, r7, #16
 8011716:	9300      	str	r3, [sp, #0]
 8011718:	4603      	mov	r3, r0
 801171a:	68f8      	ldr	r0, [r7, #12]
 801171c:	f7fe ff8c 	bl	8010638 <phhalHw_Pn5180_BalExchange>
 8011720:	4603      	mov	r3, r0
 8011722:	83fb      	strh	r3, [r7, #30]
 8011724:	8bfb      	ldrh	r3, [r7, #30]
 8011726:	2b00      	cmp	r3, #0
 8011728:	d001      	beq.n	801172e <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0xe2>
 801172a:	8bfb      	ldrh	r3, [r7, #30]
 801172c:	e000      	b.n	8011730 <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0xe4>
        wBufferLength,
        bNumExpBytes,
        pData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 801172e:	2300      	movs	r3, #0
}
 8011730:	4618      	mov	r0, r3
 8011732:	3720      	adds	r7, #32
 8011734:	46bd      	mov	sp, r7
 8011736:	bd80      	pop	{r7, pc}

08011738 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>:
phStatus_t phhalHw_Pn5180_Instr_WriteRegisterMultiple(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t * pRegTypeValueSets,
    uint16_t wSizeOfRegTypeValueSets
    )
{
 8011738:	b580      	push	{r7, lr}
 801173a:	b08c      	sub	sp, #48	@ 0x30
 801173c:	af02      	add	r7, sp, #8
 801173e:	60f8      	str	r0, [r7, #12]
 8011740:	60b9      	str	r1, [r7, #8]
 8011742:	4613      	mov	r3, r2
 8011744:	80fb      	strh	r3, [r7, #6]
    uint8_t     PH_MEMLOC_REM bReg_offset;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t    PH_MEMLOC_REM wDataLenTmp;
    uint16_t    PH_MEMLOC_REM wBufferLength = 0;
 8011746:	2300      	movs	r3, #0
 8011748:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint8_t     PH_MEMLOC_REM bNumExpBytes;

    uint8_t*    PH_MEMLOC_REM pTmpBuffer;
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 801174a:	2300      	movs	r3, #0
 801174c:	82fb      	strh	r3, [r7, #22]
    * pDataParams
    * pRegTypeValueSets
    * wSizeOfRegTypeValueSets
    * wSizeOfRegTypeValueSets for modulus of 6. One set of write register is of 6 byte*/

    if ((NULL == pDataParams) \
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	2b00      	cmp	r3, #0
 8011752:	d016      	beq.n	8011782 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x4a>
        || (NULL == pRegTypeValueSets) \
 8011754:	68bb      	ldr	r3, [r7, #8]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d013      	beq.n	8011782 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x4a>
        || (wSizeOfRegTypeValueSets > PHHAL_HW_PN5180_MAX_REGISTER_TYPE_VALUE_SET) \
 801175a:	88fb      	ldrh	r3, [r7, #6]
 801175c:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8011760:	d80f      	bhi.n	8011782 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x4a>
        || (wSizeOfRegTypeValueSets < PHHAL_HW_PN5180_MIN_REGISTER_TYPE_VALUE_SET) \
 8011762:	88fb      	ldrh	r3, [r7, #6]
 8011764:	2b05      	cmp	r3, #5
 8011766:	d90c      	bls.n	8011782 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x4a>
        || ( (wSizeOfRegTypeValueSets % PHHAL_HW_PN5180_MIN_REGISTER_TYPE_VALUE_SET) != 0U ) \
 8011768:	88fa      	ldrh	r2, [r7, #6]
 801176a:	4b4b      	ldr	r3, [pc, #300]	@ (8011898 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x160>)
 801176c:	fba3 1302 	umull	r1, r3, r3, r2
 8011770:	0899      	lsrs	r1, r3, #2
 8011772:	460b      	mov	r3, r1
 8011774:	005b      	lsls	r3, r3, #1
 8011776:	440b      	add	r3, r1
 8011778:	005b      	lsls	r3, r3, #1
 801177a:	1ad3      	subs	r3, r2, r3
 801177c:	b29b      	uxth	r3, r3
 801177e:	2b00      	cmp	r3, #0
 8011780:	d002      	beq.n	8011788 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x50>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011782:	f240 2321 	movw	r3, #545	@ 0x221
 8011786:	e082      	b.n	801188e <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x156>
    }

    /* Validate if the register addresses given in pRegTypeValueSets buffer are not READ only and have valid addresses */
    for (bReg_offset = 0U; bReg_offset < wSizeOfRegTypeValueSets; bReg_offset += PHHAL_HW_PN5180_MIN_REGISTER_TYPE_VALUE_SET)
 8011788:	2300      	movs	r3, #0
 801178a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801178e:	e038      	b.n	8011802 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0xca>
    {
        /* Check for read-only registers */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Check_Reg_Readonly(*(pRegTypeValueSets+bReg_offset)));
 8011790:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011794:	68ba      	ldr	r2, [r7, #8]
 8011796:	4413      	add	r3, r2
 8011798:	781b      	ldrb	r3, [r3, #0]
 801179a:	4618      	mov	r0, r3
 801179c:	f7ff fe4a 	bl	8011434 <phhalHw_Pn5180_Check_Reg_Readonly>
 80117a0:	4603      	mov	r3, r0
 80117a2:	843b      	strh	r3, [r7, #32]
 80117a4:	8c3b      	ldrh	r3, [r7, #32]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d001      	beq.n	80117ae <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x76>
 80117aa:	8c3b      	ldrh	r3, [r7, #32]
 80117ac:	e06f      	b.n	801188e <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x156>

        /* Check if the Register address is invalid */
        if((*(pRegTypeValueSets+bReg_offset) >= PHHAL_HW_PN5180_INVALID_REG_START_ADDRESS) \
 80117ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80117b2:	68ba      	ldr	r2, [r7, #8]
 80117b4:	4413      	add	r3, r2
 80117b6:	781b      	ldrb	r3, [r3, #0]
 80117b8:	2b43      	cmp	r3, #67	@ 0x43
 80117ba:	d90a      	bls.n	80117d2 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x9a>
            && (*(pRegTypeValueSets+bReg_offset) <= PHHAL_HW_PN5180_INVALID_REG_END_ADDRESS)) \
 80117bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80117c0:	68ba      	ldr	r2, [r7, #8]
 80117c2:	4413      	add	r3, r2
 80117c4:	781b      	ldrb	r3, [r3, #0]
 80117c6:	b25b      	sxtb	r3, r3
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	db02      	blt.n	80117d2 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x9a>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80117cc:	f240 2321 	movw	r3, #545	@ 0x221
 80117d0:	e05d      	b.n	801188e <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x156>
        }

        /* Check if the operation TYPE are valid -  Type will be present after register address in every set */
        if ( ( *(pRegTypeValueSets+bReg_offset+1U) <  PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE ) || \
 80117d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80117d6:	3301      	adds	r3, #1
 80117d8:	68ba      	ldr	r2, [r7, #8]
 80117da:	4413      	add	r3, r2
 80117dc:	781b      	ldrb	r3, [r3, #0]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d007      	beq.n	80117f2 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0xba>
            ( *(pRegTypeValueSets+bReg_offset+1U) >  PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK) )
 80117e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80117e6:	3301      	adds	r3, #1
 80117e8:	68ba      	ldr	r2, [r7, #8]
 80117ea:	4413      	add	r3, r2
 80117ec:	781b      	ldrb	r3, [r3, #0]
        if ( ( *(pRegTypeValueSets+bReg_offset+1U) <  PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE ) || \
 80117ee:	2b03      	cmp	r3, #3
 80117f0:	d902      	bls.n	80117f8 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0xc0>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80117f2:	f240 2321 	movw	r3, #545	@ 0x221
 80117f6:	e04a      	b.n	801188e <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x156>
    for (bReg_offset = 0U; bReg_offset < wSizeOfRegTypeValueSets; bReg_offset += PHHAL_HW_PN5180_MIN_REGISTER_TYPE_VALUE_SET)
 80117f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80117fc:	3306      	adds	r3, #6
 80117fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011802:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011806:	b29b      	uxth	r3, r3
 8011808:	88fa      	ldrh	r2, [r7, #6]
 801180a:	429a      	cmp	r2, r3
 801180c:	d8c0      	bhi.n	8011790 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x58>
        }
    }
    /* Get Buffer */

    phhalHw_Pn5180_Instr_GetInstrBuffer(pDataParams, &pTmpBuffer, &wTmpBufferLen);
 801180e:	f107 0216 	add.w	r2, r7, #22
 8011812:	f107 0318 	add.w	r3, r7, #24
 8011816:	4619      	mov	r1, r3
 8011818:	68f8      	ldr	r0, [r7, #12]
 801181a:	f7ff fdf5 	bl	8011408 <phhalHw_Pn5180_Instr_GetInstrBuffer>

    /* Check if the buffer size is sufficient*/
    if (wTmpBufferLen < (wSizeOfRegTypeValueSets + 1U))
 801181e:	8afb      	ldrh	r3, [r7, #22]
 8011820:	461a      	mov	r2, r3
 8011822:	88fb      	ldrh	r3, [r7, #6]
 8011824:	3301      	adds	r3, #1
 8011826:	429a      	cmp	r2, r3
 8011828:	d202      	bcs.n	8011830 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0xf8>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 801182a:	f44f 7301 	mov.w	r3, #516	@ 0x204
 801182e:	e02e      	b.n	801188e <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x156>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8011830:	2300      	movs	r3, #0
 8011832:	84bb      	strh	r3, [r7, #36]	@ 0x24
    pTmpBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_WRITE_REGISTER_MULTIPLE;
 8011834:	69ba      	ldr	r2, [r7, #24]
 8011836:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011838:	1c59      	adds	r1, r3, #1
 801183a:	84b9      	strh	r1, [r7, #36]	@ 0x24
 801183c:	4413      	add	r3, r2
 801183e:	2203      	movs	r2, #3
 8011840:	701a      	strb	r2, [r3, #0]

    /* Copy the Instruction payload and update the buffer length*/
    (void)memcpy(&pTmpBuffer[wBufferLength], pRegTypeValueSets, wSizeOfRegTypeValueSets);
 8011842:	69ba      	ldr	r2, [r7, #24]
 8011844:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011846:	4413      	add	r3, r2
 8011848:	88fa      	ldrh	r2, [r7, #6]
 801184a:	68b9      	ldr	r1, [r7, #8]
 801184c:	4618      	mov	r0, r3
 801184e:	f00f f8a0 	bl	8020992 <memcpy>
    wBufferLength+= wSizeOfRegTypeValueSets;
 8011852:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011854:	88fb      	ldrh	r3, [r7, #6]
 8011856:	4413      	add	r3, r2
 8011858:	84bb      	strh	r3, [r7, #36]	@ 0x24

    /* No Response expected */
    bNumExpBytes = 0U;
 801185a:	2300      	movs	r3, #0
 801185c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8011860:	69b9      	ldr	r1, [r7, #24]
 8011862:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011866:	b298      	uxth	r0, r3
 8011868:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801186a:	f107 031e 	add.w	r3, r7, #30
 801186e:	9301      	str	r3, [sp, #4]
 8011870:	f107 0314 	add.w	r3, r7, #20
 8011874:	9300      	str	r3, [sp, #0]
 8011876:	4603      	mov	r3, r0
 8011878:	68f8      	ldr	r0, [r7, #12]
 801187a:	f7fe fedd 	bl	8010638 <phhalHw_Pn5180_BalExchange>
 801187e:	4603      	mov	r3, r0
 8011880:	843b      	strh	r3, [r7, #32]
 8011882:	8c3b      	ldrh	r3, [r7, #32]
 8011884:	2b00      	cmp	r3, #0
 8011886:	d001      	beq.n	801188c <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x154>
 8011888:	8c3b      	ldrh	r3, [r7, #32]
 801188a:	e000      	b.n	801188e <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x156>
        wBufferLength,
        bNumExpBytes,
        pReceivedData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 801188c:	2300      	movs	r3, #0
}
 801188e:	4618      	mov	r0, r3
 8011890:	3728      	adds	r7, #40	@ 0x28
 8011892:	46bd      	mov	sp, r7
 8011894:	bd80      	pop	{r7, pc}
 8011896:	bf00      	nop
 8011898:	aaaaaaab 	.word	0xaaaaaaab

0801189c <phhalHw_Pn5180_Instr_ReadRegister>:
phStatus_t phhalHw_Pn5180_Instr_ReadRegister(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRegister,
    uint32_t * pValue
    )
{
 801189c:	b580      	push	{r7, lr}
 801189e:	b08c      	sub	sp, #48	@ 0x30
 80118a0:	af02      	add	r7, sp, #8
 80118a2:	60f8      	str	r0, [r7, #12]
 80118a4:	460b      	mov	r3, r1
 80118a6:	607a      	str	r2, [r7, #4]
 80118a8:	72fb      	strb	r3, [r7, #11]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint16_t    PH_MEMLOC_REM wTempRxDataLen = 0;
 80118aa:	2300      	movs	r3, #0
 80118ac:	843b      	strh	r3, [r7, #32]
    uint8_t     PH_MEMLOC_REM bDataBuffer[2];
    uint8_t     PH_MEMLOC_REM bRecBuffer[5];

    /* Validate pDataParams
    * Check if the Register address is invalid*/
    if ( (NULL == pDataParams ) \
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d009      	beq.n	80118c8 <phhalHw_Pn5180_Instr_ReadRegister+0x2c>
        || (NULL == pValue) \
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d006      	beq.n	80118c8 <phhalHw_Pn5180_Instr_ReadRegister+0x2c>
        ||((bRegister >= PHHAL_HW_PN5180_INVALID_REG_START_ADDRESS) \
 80118ba:	7afb      	ldrb	r3, [r7, #11]
 80118bc:	2b43      	cmp	r3, #67	@ 0x43
 80118be:	d906      	bls.n	80118ce <phhalHw_Pn5180_Instr_ReadRegister+0x32>
        && (bRegister <= PHHAL_HW_PN5180_INVALID_REG_END_ADDRESS)) \
 80118c0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	db02      	blt.n	80118ce <phhalHw_Pn5180_Instr_ReadRegister+0x32>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80118c8:	f240 2321 	movw	r3, #545	@ 0x221
 80118cc:	e050      	b.n	8011970 <phhalHw_Pn5180_Instr_ReadRegister+0xd4>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 80118ce:	2300      	movs	r3, #0
 80118d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_READ_REGISTER;
 80118d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80118d8:	1c5a      	adds	r2, r3, #1
 80118da:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 80118de:	3328      	adds	r3, #40	@ 0x28
 80118e0:	443b      	add	r3, r7
 80118e2:	2204      	movs	r2, #4
 80118e4:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bRegister;
 80118e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80118ec:	1c5a      	adds	r2, r3, #1
 80118ee:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 80118f2:	3328      	adds	r3, #40	@ 0x28
 80118f4:	443b      	add	r3, r7
 80118f6:	7afa      	ldrb	r2, [r7, #11]
 80118f8:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* Expected number of bytes */
    bNumExpBytes = 4;
 80118fc:	2304      	movs	r3, #4
 80118fe:	84bb      	strh	r3, [r7, #36]	@ 0x24

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8011900:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011904:	b29a      	uxth	r2, r3
 8011906:	8cb8      	ldrh	r0, [r7, #36]	@ 0x24
 8011908:	f107 011c 	add.w	r1, r7, #28
 801190c:	f107 0320 	add.w	r3, r7, #32
 8011910:	9301      	str	r3, [sp, #4]
 8011912:	f107 0314 	add.w	r3, r7, #20
 8011916:	9300      	str	r3, [sp, #0]
 8011918:	4603      	mov	r3, r0
 801191a:	68f8      	ldr	r0, [r7, #12]
 801191c:	f7fe fe8c 	bl	8010638 <phhalHw_Pn5180_BalExchange>
 8011920:	4603      	mov	r3, r0
 8011922:	847b      	strh	r3, [r7, #34]	@ 0x22
 8011924:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011926:	2b00      	cmp	r3, #0
 8011928:	d001      	beq.n	801192e <phhalHw_Pn5180_Instr_ReadRegister+0x92>
 801192a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801192c:	e020      	b.n	8011970 <phhalHw_Pn5180_Instr_ReadRegister+0xd4>
        wBufferLength,
        bNumExpBytes,
        bRecBuffer,
        &wTempRxDataLen));

    if (wTempRxDataLen != bNumExpBytes)
 801192e:	8c3b      	ldrh	r3, [r7, #32]
 8011930:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011932:	429a      	cmp	r2, r3
 8011934:	d002      	beq.n	801193c <phhalHw_Pn5180_Instr_ReadRegister+0xa0>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 8011936:	f240 237f 	movw	r3, #639	@ 0x27f
 801193a:	e019      	b.n	8011970 <phhalHw_Pn5180_Instr_ReadRegister+0xd4>
    }

    /* Pack the data that was received */
    *pValue = bRecBuffer[0];
 801193c:	7d3b      	ldrb	r3, [r7, #20]
 801193e:	461a      	mov	r2, r3
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	601a      	str	r2, [r3, #0]
    *pValue |= (((uint32_t) bRecBuffer[1]) << 8U);
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	681a      	ldr	r2, [r3, #0]
 8011948:	7d7b      	ldrb	r3, [r7, #21]
 801194a:	021b      	lsls	r3, r3, #8
 801194c:	431a      	orrs	r2, r3
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	601a      	str	r2, [r3, #0]
    *pValue |= (((uint32_t) bRecBuffer[2]) << 16U);
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	681a      	ldr	r2, [r3, #0]
 8011956:	7dbb      	ldrb	r3, [r7, #22]
 8011958:	041b      	lsls	r3, r3, #16
 801195a:	431a      	orrs	r2, r3
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	601a      	str	r2, [r3, #0]
    *pValue |= (((uint32_t) bRecBuffer[3]) << 24U);
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	681a      	ldr	r2, [r3, #0]
 8011964:	7dfb      	ldrb	r3, [r7, #23]
 8011966:	061b      	lsls	r3, r3, #24
 8011968:	431a      	orrs	r2, r3
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	601a      	str	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 801196e:	2300      	movs	r3, #0
}
 8011970:	4618      	mov	r0, r3
 8011972:	3728      	adds	r7, #40	@ 0x28
 8011974:	46bd      	mov	sp, r7
 8011976:	bd80      	pop	{r7, pc}

08011978 <phhalHw_Pn5180_Instr_ReadRegisterMultiple>:
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t * pRegisters,
    uint8_t bNumOfRegisters,
    uint8_t ** ppValues
    )
{
 8011978:	b590      	push	{r4, r7, lr}
 801197a:	b091      	sub	sp, #68	@ 0x44
 801197c:	af02      	add	r7, sp, #8
 801197e:	60f8      	str	r0, [r7, #12]
 8011980:	60b9      	str	r1, [r7, #8]
 8011982:	603b      	str	r3, [r7, #0]
 8011984:	4613      	mov	r3, r2
 8011986:	71fb      	strb	r3, [r7, #7]
    uint8_t *   PH_MEMLOC_REM pTmpBuffer = NULL;
 8011988:	2300      	movs	r3, #0
 801198a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 801198c:	2300      	movs	r3, #0
 801198e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* Validate pDataParams
    * Validate pRegisters
    * Validate ppValues
    * Validate bNumOfRegisters
    * */
    if ( (NULL == pDataParams) || (NULL == pRegisters) || (NULL == ppValues) \
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	2b00      	cmp	r3, #0
 8011994:	d00b      	beq.n	80119ae <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x36>
 8011996:	68bb      	ldr	r3, [r7, #8]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d008      	beq.n	80119ae <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x36>
 801199c:	683b      	ldr	r3, [r7, #0]
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d005      	beq.n	80119ae <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x36>
        || (0U == bNumOfRegisters) \
 80119a2:	79fb      	ldrb	r3, [r7, #7]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d002      	beq.n	80119ae <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x36>
        || (bNumOfRegisters > PHHAL_HW_PN5180_MAX_REGISTERS_READ_MULTIPLE) \
 80119a8:	79fb      	ldrb	r3, [r7, #7]
 80119aa:	2b12      	cmp	r3, #18
 80119ac:	d902      	bls.n	80119b4 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x3c>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80119ae:	f240 2321 	movw	r3, #545	@ 0x221
 80119b2:	e077      	b.n	8011aa4 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x12c>
    }

    /* Check if all the register addresses are valid */
    for (regIndex = 0U; regIndex < bNumOfRegisters; regIndex++)
 80119b4:	2300      	movs	r3, #0
 80119b6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80119ba:	e016      	b.n	80119ea <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x72>
    {
        /* Check if the Register address is invalid */
        if((pRegisters[regIndex] >= PHHAL_HW_PN5180_INVALID_REG_START_ADDRESS) \
 80119bc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80119c0:	68ba      	ldr	r2, [r7, #8]
 80119c2:	4413      	add	r3, r2
 80119c4:	781b      	ldrb	r3, [r3, #0]
 80119c6:	2b43      	cmp	r3, #67	@ 0x43
 80119c8:	d90a      	bls.n	80119e0 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x68>
            && (pRegisters[regIndex] <= PHHAL_HW_PN5180_INVALID_REG_END_ADDRESS)) \
 80119ca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80119ce:	68ba      	ldr	r2, [r7, #8]
 80119d0:	4413      	add	r3, r2
 80119d2:	781b      	ldrb	r3, [r3, #0]
 80119d4:	b25b      	sxtb	r3, r3
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	db02      	blt.n	80119e0 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x68>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80119da:	f240 2321 	movw	r3, #545	@ 0x221
 80119de:	e061      	b.n	8011aa4 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x12c>
    for (regIndex = 0U; regIndex < bNumOfRegisters; regIndex++)
 80119e0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80119e4:	3301      	adds	r3, #1
 80119e6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80119ea:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80119ee:	79fb      	ldrb	r3, [r7, #7]
 80119f0:	429a      	cmp	r2, r3
 80119f2:	d3e3      	bcc.n	80119bc <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x44>
        }
    }

    /* Get Buffer*/
    phhalHw_Pn5180_Instr_GetInstrBuffer(pDataParams, &pTmpBuffer, &wTmpBufferLen);
 80119f4:	f107 022a 	add.w	r2, r7, #42	@ 0x2a
 80119f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80119fc:	4619      	mov	r1, r3
 80119fe:	68f8      	ldr	r0, [r7, #12]
 8011a00:	f7ff fd02 	bl	8011408 <phhalHw_Pn5180_Instr_GetInstrBuffer>

    /* total number of expected bytes*/
    bNumExpBytes = (bNumOfRegisters * PHHAL_HW_PN5180_BYTES_PER_REGISTER);
 8011a04:	79fb      	ldrb	r3, [r7, #7]
 8011a06:	009b      	lsls	r3, r3, #2
 8011a08:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Check if the buffer size is sufficient*/
    if (wTmpBufferLen < bNumExpBytes)
 8011a0c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8011a10:	b29a      	uxth	r2, r3
 8011a12:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011a14:	429a      	cmp	r2, r3
 8011a16:	d902      	bls.n	8011a1e <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0xa6>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 8011a18:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8011a1c:	e042      	b.n	8011aa4 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x12c>
    }
    /* Build the command frame */
    wBufferLength = 0U;
 8011a1e:	2300      	movs	r3, #0
 8011a20:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_READ_REGISTER_MULTIPLE;
 8011a24:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8011a28:	1c5a      	adds	r2, r3, #1
 8011a2a:	f887 2035 	strb.w	r2, [r7, #53]	@ 0x35
 8011a2e:	3338      	adds	r3, #56	@ 0x38
 8011a30:	443b      	add	r3, r7
 8011a32:	2205      	movs	r2, #5
 8011a34:	f803 2c24 	strb.w	r2, [r3, #-36]

    /* Copy the Instruction payload and update the buffer length*/
    (void)memcpy(&bDataBuffer[wBufferLength], pRegisters, bNumOfRegisters);
 8011a38:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8011a3c:	f107 0214 	add.w	r2, r7, #20
 8011a40:	4413      	add	r3, r2
 8011a42:	79fa      	ldrb	r2, [r7, #7]
 8011a44:	68b9      	ldr	r1, [r7, #8]
 8011a46:	4618      	mov	r0, r3
 8011a48:	f00e ffa3 	bl	8020992 <memcpy>
    wBufferLength+= bNumOfRegisters;
 8011a4c:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8011a50:	79fb      	ldrb	r3, [r7, #7]
 8011a52:	4413      	add	r3, r2
 8011a54:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8011a58:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8011a5c:	b298      	uxth	r0, r3
 8011a5e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8011a62:	b29c      	uxth	r4, r3
 8011a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a66:	f107 0114 	add.w	r1, r7, #20
 8011a6a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8011a6e:	9201      	str	r2, [sp, #4]
 8011a70:	9300      	str	r3, [sp, #0]
 8011a72:	4623      	mov	r3, r4
 8011a74:	4602      	mov	r2, r0
 8011a76:	68f8      	ldr	r0, [r7, #12]
 8011a78:	f7fe fdde 	bl	8010638 <phhalHw_Pn5180_BalExchange>
 8011a7c:	4603      	mov	r3, r0
 8011a7e:	867b      	strh	r3, [r7, #50]	@ 0x32
 8011a80:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d001      	beq.n	8011a8a <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x112>
 8011a86:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8011a88:	e00c      	b.n	8011aa4 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x12c>
        bNumExpBytes,
        pTmpBuffer,
        &wDataLenTmp));

    /* Validate the response length */
    if (wDataLenTmp  != bNumExpBytes)
 8011a8a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8011a8e:	b29a      	uxth	r2, r3
 8011a90:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011a92:	429a      	cmp	r2, r3
 8011a94:	d002      	beq.n	8011a9c <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x124>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 8011a96:	f240 237f 	movw	r3, #639	@ 0x27f
 8011a9a:	e003      	b.n	8011aa4 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x12c>
    }

    /* return the pointer to the buffer*/
    *ppValues = pTmpBuffer;
 8011a9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011a9e:	683b      	ldr	r3, [r7, #0]
 8011aa0:	601a      	str	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8011aa2:	2300      	movs	r3, #0
}
 8011aa4:	4618      	mov	r0, r3
 8011aa6:	373c      	adds	r7, #60	@ 0x3c
 8011aa8:	46bd      	mov	sp, r7
 8011aaa:	bd90      	pop	{r4, r7, pc}

08011aac <phhalHw_Pn5180_Instr_WriteE2Prom>:
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bE2PromAddress,
    uint8_t * pDataToWrite,
    uint8_t bDataLength
    )
{
 8011aac:	b580      	push	{r7, lr}
 8011aae:	b08a      	sub	sp, #40	@ 0x28
 8011ab0:	af02      	add	r7, sp, #8
 8011ab2:	60f8      	str	r0, [r7, #12]
 8011ab4:	607a      	str	r2, [r7, #4]
 8011ab6:	461a      	mov	r2, r3
 8011ab8:	460b      	mov	r3, r1
 8011aba:	72fb      	strb	r3, [r7, #11]
 8011abc:	4613      	mov	r3, r2
 8011abe:	72bb      	strb	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t    PH_MEMLOC_REM wDataLenTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint8_t     PH_MEMLOC_REM bNumExpBytes;

    uint8_t *   PH_MEMLOC_REM pTmpBuffer = NULL;
 8011ac0:	2300      	movs	r3, #0
 8011ac2:	617b      	str	r3, [r7, #20]
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 8011ac4:	2300      	movs	r3, #0
 8011ac6:	827b      	strh	r3, [r7, #18]
    uint8_t     PH_MEMLOC_REM pReceivedData[1];

    /* Validate pDataParams and pDataToWrite
    * Validate E2PROM address
    * Validate the data length */
    if ( (NULL == pDataParams) || (NULL == pDataToWrite) \
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d00b      	beq.n	8011ae6 <phhalHw_Pn5180_Instr_WriteE2Prom+0x3a>
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d008      	beq.n	8011ae6 <phhalHw_Pn5180_Instr_WriteE2Prom+0x3a>
        || (bE2PromAddress > PHHAL_HW_PN5180_E2PROM_MAX_ADDESS) \
 8011ad4:	7afb      	ldrb	r3, [r7, #11]
 8011ad6:	2bfd      	cmp	r3, #253	@ 0xfd
 8011ad8:	d805      	bhi.n	8011ae6 <phhalHw_Pn5180_Instr_WriteE2Prom+0x3a>
        || (bE2PromAddress < PHHAL_HW_PN5180_E2PROM_MIN_ADDESS) \
 8011ada:	7afb      	ldrb	r3, [r7, #11]
 8011adc:	2b15      	cmp	r3, #21
 8011ade:	d902      	bls.n	8011ae6 <phhalHw_Pn5180_Instr_WriteE2Prom+0x3a>
        || (0U == bDataLength) \
 8011ae0:	7abb      	ldrb	r3, [r7, #10]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d102      	bne.n	8011aec <phhalHw_Pn5180_Instr_WriteE2Prom+0x40>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011ae6:	f240 2321 	movw	r3, #545	@ 0x221
 8011aea:	e053      	b.n	8011b94 <phhalHw_Pn5180_Instr_WriteE2Prom+0xe8>
    }

    /* Calculate maximum writable data from current address*/
    bE2PLength = (PHHAL_HW_PN5180_E2PROM_MAX_ADDESS - bE2PromAddress) + 1U;
 8011aec:	7afb      	ldrb	r3, [r7, #11]
 8011aee:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 8011af2:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 8011af6:	33fe      	adds	r3, #254	@ 0xfe
 8011af8:	77fb      	strb	r3, [r7, #31]

    /* Validate The E2PROM minimum payload length of 1 byte */
    if (bE2PLength < bDataLength)
 8011afa:	7ffa      	ldrb	r2, [r7, #31]
 8011afc:	7abb      	ldrb	r3, [r7, #10]
 8011afe:	429a      	cmp	r2, r3
 8011b00:	d202      	bcs.n	8011b08 <phhalHw_Pn5180_Instr_WriteE2Prom+0x5c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
 8011b02:	f240 2322 	movw	r3, #546	@ 0x222
 8011b06:	e045      	b.n	8011b94 <phhalHw_Pn5180_Instr_WriteE2Prom+0xe8>
    }

    /* Get Buffer */
    phhalHw_Pn5180_Instr_GetInstrBuffer(pDataParams, &pTmpBuffer, &wTmpBufferLen);
 8011b08:	f107 0212 	add.w	r2, r7, #18
 8011b0c:	f107 0314 	add.w	r3, r7, #20
 8011b10:	4619      	mov	r1, r3
 8011b12:	68f8      	ldr	r0, [r7, #12]
 8011b14:	f7ff fc78 	bl	8011408 <phhalHw_Pn5180_Instr_GetInstrBuffer>

    /* Check if the buffer size is sufficient*/
    if (wTmpBufferLen < (bDataLength + PHHAL_HW_PN5180_WRITE_E2PROM_FIXED_CMD_BYTES))
 8011b18:	8a7b      	ldrh	r3, [r7, #18]
 8011b1a:	461a      	mov	r2, r3
 8011b1c:	7abb      	ldrb	r3, [r7, #10]
 8011b1e:	3303      	adds	r3, #3
 8011b20:	429a      	cmp	r2, r3
 8011b22:	d202      	bcs.n	8011b2a <phhalHw_Pn5180_Instr_WriteE2Prom+0x7e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 8011b24:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8011b28:	e034      	b.n	8011b94 <phhalHw_Pn5180_Instr_WriteE2Prom+0xe8>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	77bb      	strb	r3, [r7, #30]
    pTmpBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_WRITE_E2PROM;
 8011b2e:	697a      	ldr	r2, [r7, #20]
 8011b30:	7fbb      	ldrb	r3, [r7, #30]
 8011b32:	1c59      	adds	r1, r3, #1
 8011b34:	77b9      	strb	r1, [r7, #30]
 8011b36:	4413      	add	r3, r2
 8011b38:	2206      	movs	r2, #6
 8011b3a:	701a      	strb	r2, [r3, #0]
    pTmpBuffer[wBufferLength++] = bE2PromAddress;
 8011b3c:	697a      	ldr	r2, [r7, #20]
 8011b3e:	7fbb      	ldrb	r3, [r7, #30]
 8011b40:	1c59      	adds	r1, r3, #1
 8011b42:	77b9      	strb	r1, [r7, #30]
 8011b44:	4413      	add	r3, r2
 8011b46:	7afa      	ldrb	r2, [r7, #11]
 8011b48:	701a      	strb	r2, [r3, #0]

    /* Copy the Instruction payload and update the buffer length*/
    (void)memcpy(&pTmpBuffer[wBufferLength], pDataToWrite, bDataLength);
 8011b4a:	697a      	ldr	r2, [r7, #20]
 8011b4c:	7fbb      	ldrb	r3, [r7, #30]
 8011b4e:	4413      	add	r3, r2
 8011b50:	7aba      	ldrb	r2, [r7, #10]
 8011b52:	6879      	ldr	r1, [r7, #4]
 8011b54:	4618      	mov	r0, r3
 8011b56:	f00e ff1c 	bl	8020992 <memcpy>
    wBufferLength += bDataLength;
 8011b5a:	7fba      	ldrb	r2, [r7, #30]
 8011b5c:	7abb      	ldrb	r3, [r7, #10]
 8011b5e:	4413      	add	r3, r2
 8011b60:	77bb      	strb	r3, [r7, #30]

    /* No Response expected*/
    bNumExpBytes = 0U;
 8011b62:	2300      	movs	r3, #0
 8011b64:	777b      	strb	r3, [r7, #29]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8011b66:	6979      	ldr	r1, [r7, #20]
 8011b68:	7fbb      	ldrb	r3, [r7, #30]
 8011b6a:	b29a      	uxth	r2, r3
 8011b6c:	7f7b      	ldrb	r3, [r7, #29]
 8011b6e:	b298      	uxth	r0, r3
 8011b70:	f107 0318 	add.w	r3, r7, #24
 8011b74:	9301      	str	r3, [sp, #4]
 8011b76:	f107 0310 	add.w	r3, r7, #16
 8011b7a:	9300      	str	r3, [sp, #0]
 8011b7c:	4603      	mov	r3, r0
 8011b7e:	68f8      	ldr	r0, [r7, #12]
 8011b80:	f7fe fd5a 	bl	8010638 <phhalHw_Pn5180_BalExchange>
 8011b84:	4603      	mov	r3, r0
 8011b86:	837b      	strh	r3, [r7, #26]
 8011b88:	8b7b      	ldrh	r3, [r7, #26]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d001      	beq.n	8011b92 <phhalHw_Pn5180_Instr_WriteE2Prom+0xe6>
 8011b8e:	8b7b      	ldrh	r3, [r7, #26]
 8011b90:	e000      	b.n	8011b94 <phhalHw_Pn5180_Instr_WriteE2Prom+0xe8>
        wBufferLength,
        bNumExpBytes,
        pReceivedData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 8011b92:	2300      	movs	r3, #0
}
 8011b94:	4618      	mov	r0, r3
 8011b96:	3720      	adds	r7, #32
 8011b98:	46bd      	mov	sp, r7
 8011b9a:	bd80      	pop	{r7, pc}

08011b9c <phhalHw_Pn5180_Instr_ReadE2Prom>:
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bE2PromAddress,
    uint8_t * pReadData,
    uint8_t bDataLength
    )
{
 8011b9c:	b580      	push	{r7, lr}
 8011b9e:	b08a      	sub	sp, #40	@ 0x28
 8011ba0:	af02      	add	r7, sp, #8
 8011ba2:	60f8      	str	r0, [r7, #12]
 8011ba4:	607a      	str	r2, [r7, #4]
 8011ba6:	461a      	mov	r2, r3
 8011ba8:	460b      	mov	r3, r1
 8011baa:	72fb      	strb	r3, [r7, #11]
 8011bac:	4613      	mov	r3, r2
 8011bae:	72bb      	strb	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t    PH_MEMLOC_REM wDataLenTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint8_t     PH_MEMLOC_REM bDataBuffer[3];
    uint8_t     PH_MEMLOC_REM bE2PLength;
    bE2PLength = 0U;
 8011bb0:	2300      	movs	r3, #0
 8011bb2:	77fb      	strb	r3, [r7, #31]

    /* Validate pDataParams
    * Validate E2PROM maximum address value
    * Validate the datalength*/
    if ( (NULL == pDataParams) || (NULL == pReadData) \
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d008      	beq.n	8011bcc <phhalHw_Pn5180_Instr_ReadE2Prom+0x30>
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d005      	beq.n	8011bcc <phhalHw_Pn5180_Instr_ReadE2Prom+0x30>
        || (bE2PromAddress > PHHAL_HW_PN5180_E2PROM_MAX_ADDESS) \
 8011bc0:	7afb      	ldrb	r3, [r7, #11]
 8011bc2:	2bfd      	cmp	r3, #253	@ 0xfd
 8011bc4:	d802      	bhi.n	8011bcc <phhalHw_Pn5180_Instr_ReadE2Prom+0x30>
        || (0U == bDataLength) \
 8011bc6:	7abb      	ldrb	r3, [r7, #10]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d11f      	bne.n	8011c0c <phhalHw_Pn5180_Instr_ReadE2Prom+0x70>
        )
    {
    	printf("Error: %s%s%s%s\n",
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d101      	bne.n	8011bd6 <phhalHw_Pn5180_Instr_ReadE2Prom+0x3a>
 8011bd2:	4934      	ldr	r1, [pc, #208]	@ (8011ca4 <phhalHw_Pn5180_Instr_ReadE2Prom+0x108>)
 8011bd4:	e000      	b.n	8011bd8 <phhalHw_Pn5180_Instr_ReadE2Prom+0x3c>
 8011bd6:	4934      	ldr	r1, [pc, #208]	@ (8011ca8 <phhalHw_Pn5180_Instr_ReadE2Prom+0x10c>)
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d101      	bne.n	8011be2 <phhalHw_Pn5180_Instr_ReadE2Prom+0x46>
 8011bde:	4a33      	ldr	r2, [pc, #204]	@ (8011cac <phhalHw_Pn5180_Instr_ReadE2Prom+0x110>)
 8011be0:	e000      	b.n	8011be4 <phhalHw_Pn5180_Instr_ReadE2Prom+0x48>
 8011be2:	4a31      	ldr	r2, [pc, #196]	@ (8011ca8 <phhalHw_Pn5180_Instr_ReadE2Prom+0x10c>)
 8011be4:	7afb      	ldrb	r3, [r7, #11]
 8011be6:	2bfd      	cmp	r3, #253	@ 0xfd
 8011be8:	d901      	bls.n	8011bee <phhalHw_Pn5180_Instr_ReadE2Prom+0x52>
 8011bea:	4831      	ldr	r0, [pc, #196]	@ (8011cb0 <phhalHw_Pn5180_Instr_ReadE2Prom+0x114>)
 8011bec:	e000      	b.n	8011bf0 <phhalHw_Pn5180_Instr_ReadE2Prom+0x54>
 8011bee:	482e      	ldr	r0, [pc, #184]	@ (8011ca8 <phhalHw_Pn5180_Instr_ReadE2Prom+0x10c>)
 8011bf0:	7abb      	ldrb	r3, [r7, #10]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d101      	bne.n	8011bfa <phhalHw_Pn5180_Instr_ReadE2Prom+0x5e>
 8011bf6:	4b2f      	ldr	r3, [pc, #188]	@ (8011cb4 <phhalHw_Pn5180_Instr_ReadE2Prom+0x118>)
 8011bf8:	e000      	b.n	8011bfc <phhalHw_Pn5180_Instr_ReadE2Prom+0x60>
 8011bfa:	4b2b      	ldr	r3, [pc, #172]	@ (8011ca8 <phhalHw_Pn5180_Instr_ReadE2Prom+0x10c>)
 8011bfc:	9300      	str	r3, [sp, #0]
 8011bfe:	4603      	mov	r3, r0
 8011c00:	482d      	ldr	r0, [pc, #180]	@ (8011cb8 <phhalHw_Pn5180_Instr_ReadE2Prom+0x11c>)
 8011c02:	f00e fce7 	bl	80205d4 <iprintf>
    	           (NULL == pDataParams) ? "pDataParams=NULL " : "",
    	           (NULL == pReadData) ? "pReadData=NULL " : "",
    	           (bE2PromAddress > PHHAL_HW_PN5180_E2PROM_MAX_ADDESS) ? "E2PromAddr>MAX " : "",
    	           (0U == bDataLength) ? "bDataLength=0 " : ""); //debug printf

        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011c06:	f240 2321 	movw	r3, #545	@ 0x221
 8011c0a:	e046      	b.n	8011c9a <phhalHw_Pn5180_Instr_ReadE2Prom+0xfe>
    }

    /* Calculate maximum readable data from current address*/
    bE2PLength = (PHHAL_HW_PN5180_E2PROM_MAX_ADDESS - bE2PromAddress) + 1U;
 8011c0c:	7afb      	ldrb	r3, [r7, #11]
 8011c0e:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 8011c12:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 8011c16:	33fe      	adds	r3, #254	@ 0xfe
 8011c18:	77fb      	strb	r3, [r7, #31]

    /* Validate The E2PROM minimum payload length of 1 byte */
    if  (bE2PLength < bDataLength)
 8011c1a:	7ffa      	ldrb	r2, [r7, #31]
 8011c1c:	7abb      	ldrb	r3, [r7, #10]
 8011c1e:	429a      	cmp	r2, r3
 8011c20:	d202      	bcs.n	8011c28 <phhalHw_Pn5180_Instr_ReadE2Prom+0x8c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
 8011c22:	f240 2322 	movw	r3, #546	@ 0x222
 8011c26:	e038      	b.n	8011c9a <phhalHw_Pn5180_Instr_ReadE2Prom+0xfe>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8011c28:	2300      	movs	r3, #0
 8011c2a:	77bb      	strb	r3, [r7, #30]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_READ_E2PROM;
 8011c2c:	7fbb      	ldrb	r3, [r7, #30]
 8011c2e:	1c5a      	adds	r2, r3, #1
 8011c30:	77ba      	strb	r2, [r7, #30]
 8011c32:	3320      	adds	r3, #32
 8011c34:	443b      	add	r3, r7
 8011c36:	2207      	movs	r2, #7
 8011c38:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bE2PromAddress;
 8011c3c:	7fbb      	ldrb	r3, [r7, #30]
 8011c3e:	1c5a      	adds	r2, r3, #1
 8011c40:	77ba      	strb	r2, [r7, #30]
 8011c42:	3320      	adds	r3, #32
 8011c44:	443b      	add	r3, r7
 8011c46:	7afa      	ldrb	r2, [r7, #11]
 8011c48:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bDataLength;
 8011c4c:	7fbb      	ldrb	r3, [r7, #30]
 8011c4e:	1c5a      	adds	r2, r3, #1
 8011c50:	77ba      	strb	r2, [r7, #30]
 8011c52:	3320      	adds	r3, #32
 8011c54:	443b      	add	r3, r7
 8011c56:	7aba      	ldrb	r2, [r7, #10]
 8011c58:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8011c5c:	7fbb      	ldrb	r3, [r7, #30]
 8011c5e:	b29a      	uxth	r2, r3
 8011c60:	7abb      	ldrb	r3, [r7, #10]
 8011c62:	b298      	uxth	r0, r3
 8011c64:	f107 0114 	add.w	r1, r7, #20
 8011c68:	f107 031a 	add.w	r3, r7, #26
 8011c6c:	9301      	str	r3, [sp, #4]
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	9300      	str	r3, [sp, #0]
 8011c72:	4603      	mov	r3, r0
 8011c74:	68f8      	ldr	r0, [r7, #12]
 8011c76:	f7fe fcdf 	bl	8010638 <phhalHw_Pn5180_BalExchange>
 8011c7a:	4603      	mov	r3, r0
 8011c7c:	83bb      	strh	r3, [r7, #28]
 8011c7e:	8bbb      	ldrh	r3, [r7, #28]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d001      	beq.n	8011c88 <phhalHw_Pn5180_Instr_ReadE2Prom+0xec>
 8011c84:	8bbb      	ldrh	r3, [r7, #28]
 8011c86:	e008      	b.n	8011c9a <phhalHw_Pn5180_Instr_ReadE2Prom+0xfe>
        bDataLength,
        pReadData,
        &wDataLenTmp));

    /* Validate the response, if any */
    if (wDataLenTmp  != bDataLength)
 8011c88:	7abb      	ldrb	r3, [r7, #10]
 8011c8a:	b29a      	uxth	r2, r3
 8011c8c:	8b7b      	ldrh	r3, [r7, #26]
 8011c8e:	429a      	cmp	r2, r3
 8011c90:	d002      	beq.n	8011c98 <phhalHw_Pn5180_Instr_ReadE2Prom+0xfc>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 8011c92:	f240 237f 	movw	r3, #639	@ 0x27f
 8011c96:	e000      	b.n	8011c9a <phhalHw_Pn5180_Instr_ReadE2Prom+0xfe>
    }

    return PH_ERR_SUCCESS;
 8011c98:	2300      	movs	r3, #0
}
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	3720      	adds	r7, #32
 8011c9e:	46bd      	mov	sp, r7
 8011ca0:	bd80      	pop	{r7, pc}
 8011ca2:	bf00      	nop
 8011ca4:	080230ec 	.word	0x080230ec
 8011ca8:	08023100 	.word	0x08023100
 8011cac:	08023104 	.word	0x08023104
 8011cb0:	08023114 	.word	0x08023114
 8011cb4:	08023124 	.word	0x08023124
 8011cb8:	08023134 	.word	0x08023134

08011cbc <phhalHw_Pn5180_Instr_RetrieveRxData>:
phStatus_t phhalHw_Pn5180_Instr_RetrieveRxData(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t ** pRxBuffer,
    uint16_t wExpectedRxDataLength
    )
{
 8011cbc:	b590      	push	{r4, r7, lr}
 8011cbe:	b08b      	sub	sp, #44	@ 0x2c
 8011cc0:	af02      	add	r7, sp, #8
 8011cc2:	60f8      	str	r0, [r7, #12]
 8011cc4:	60b9      	str	r1, [r7, #8]
 8011cc6:	4613      	mov	r3, r2
 8011cc8:	80fb      	strh	r3, [r7, #6]
    uint8_t *   PH_MEMLOC_REM pTmpBuffer = NULL;
 8011cca:	2300      	movs	r3, #0
 8011ccc:	61bb      	str	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 8011cce:	2300      	movs	r3, #0
 8011cd0:	82fb      	strh	r3, [r7, #22]
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint8_t     PH_MEMLOC_REM bDataBuffer[2];

    /* Validate pDataParams
    * Validate reception buffer length*/
    if ( (NULL == pDataParams) || (NULL == pRxBuffer) )
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d002      	beq.n	8011cde <phhalHw_Pn5180_Instr_RetrieveRxData+0x22>
 8011cd8:	68bb      	ldr	r3, [r7, #8]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d102      	bne.n	8011ce4 <phhalHw_Pn5180_Instr_RetrieveRxData+0x28>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011cde:	f240 2321 	movw	r3, #545	@ 0x221
 8011ce2:	e056      	b.n	8011d92 <phhalHw_Pn5180_Instr_RetrieveRxData+0xd6>
    }

    /* Validate reception buffer length*/
    if ( (wExpectedRxDataLength > PHHAL_HW_PN5180_RX_DATA_MAX_LENGTH) \
 8011ce4:	88fb      	ldrh	r3, [r7, #6]
 8011ce6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011cea:	d802      	bhi.n	8011cf2 <phhalHw_Pn5180_Instr_RetrieveRxData+0x36>
        || (wExpectedRxDataLength < PHHAL_HW_PN5180_RX_DATA_MIN_LENGTH) \
 8011cec:	88fb      	ldrh	r3, [r7, #6]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d102      	bne.n	8011cf8 <phhalHw_Pn5180_Instr_RetrieveRxData+0x3c>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 8011cf2:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8011cf6:	e04c      	b.n	8011d92 <phhalHw_Pn5180_Instr_RetrieveRxData+0xd6>
    }

    /* Get Buffer*/
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetRxBuffer(pDataParams, PH_ON, &pTmpBuffer, &wTmpBufferLen, &wTmpBufferSize));
 8011cf8:	f107 0116 	add.w	r1, r7, #22
 8011cfc:	f107 0218 	add.w	r2, r7, #24
 8011d00:	f107 0314 	add.w	r3, r7, #20
 8011d04:	9300      	str	r3, [sp, #0]
 8011d06:	460b      	mov	r3, r1
 8011d08:	2101      	movs	r1, #1
 8011d0a:	68f8      	ldr	r0, [r7, #12]
 8011d0c:	f000 fbbf 	bl	801248e <phhalHw_Pn5180_GetRxBuffer>
 8011d10:	4603      	mov	r3, r0
 8011d12:	83fb      	strh	r3, [r7, #30]
 8011d14:	8bfb      	ldrh	r3, [r7, #30]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d001      	beq.n	8011d1e <phhalHw_Pn5180_Instr_RetrieveRxData+0x62>
 8011d1a:	8bfb      	ldrh	r3, [r7, #30]
 8011d1c:	e039      	b.n	8011d92 <phhalHw_Pn5180_Instr_RetrieveRxData+0xd6>

    /* Check if the buffer size is sufficient*/
    if (wTmpBufferSize < wExpectedRxDataLength)
 8011d1e:	8abb      	ldrh	r3, [r7, #20]
 8011d20:	88fa      	ldrh	r2, [r7, #6]
 8011d22:	429a      	cmp	r2, r3
 8011d24:	d902      	bls.n	8011d2c <phhalHw_Pn5180_Instr_RetrieveRxData+0x70>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 8011d26:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8011d2a:	e032      	b.n	8011d92 <phhalHw_Pn5180_Instr_RetrieveRxData+0xd6>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	777b      	strb	r3, [r7, #29]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_RETRIEVE_RX_DATA;
 8011d30:	7f7b      	ldrb	r3, [r7, #29]
 8011d32:	1c5a      	adds	r2, r3, #1
 8011d34:	777a      	strb	r2, [r7, #29]
 8011d36:	3320      	adds	r3, #32
 8011d38:	443b      	add	r3, r7
 8011d3a:	220a      	movs	r2, #10
 8011d3c:	f803 2c10 	strb.w	r2, [r3, #-16]
    /*bDataBuffer[wBufferLength++] = (uint8_t)wExpectedRxDataLength;*/ /* RFU */
    bDataBuffer[wBufferLength++] = 0U; /* RFU */
 8011d40:	7f7b      	ldrb	r3, [r7, #29]
 8011d42:	1c5a      	adds	r2, r3, #1
 8011d44:	777a      	strb	r2, [r7, #29]
 8011d46:	3320      	adds	r3, #32
 8011d48:	443b      	add	r3, r7
 8011d4a:	2200      	movs	r2, #0
 8011d4c:	f803 2c10 	strb.w	r2, [r3, #-16]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8011d50:	7f7b      	ldrb	r3, [r7, #29]
 8011d52:	b298      	uxth	r0, r3
 8011d54:	69bb      	ldr	r3, [r7, #24]
 8011d56:	88fc      	ldrh	r4, [r7, #6]
 8011d58:	f107 0110 	add.w	r1, r7, #16
 8011d5c:	f107 0212 	add.w	r2, r7, #18
 8011d60:	9201      	str	r2, [sp, #4]
 8011d62:	9300      	str	r3, [sp, #0]
 8011d64:	4623      	mov	r3, r4
 8011d66:	4602      	mov	r2, r0
 8011d68:	68f8      	ldr	r0, [r7, #12]
 8011d6a:	f7fe fc65 	bl	8010638 <phhalHw_Pn5180_BalExchange>
 8011d6e:	4603      	mov	r3, r0
 8011d70:	83fb      	strh	r3, [r7, #30]
 8011d72:	8bfb      	ldrh	r3, [r7, #30]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d001      	beq.n	8011d7c <phhalHw_Pn5180_Instr_RetrieveRxData+0xc0>
 8011d78:	8bfb      	ldrh	r3, [r7, #30]
 8011d7a:	e00a      	b.n	8011d92 <phhalHw_Pn5180_Instr_RetrieveRxData+0xd6>
        wExpectedRxDataLength,
        pTmpBuffer,
        &wDataLenTmp));

    /* Validate the response, if any */
    if (wDataLenTmp  != wExpectedRxDataLength)
 8011d7c:	8a7b      	ldrh	r3, [r7, #18]
 8011d7e:	88fa      	ldrh	r2, [r7, #6]
 8011d80:	429a      	cmp	r2, r3
 8011d82:	d002      	beq.n	8011d8a <phhalHw_Pn5180_Instr_RetrieveRxData+0xce>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 8011d84:	f240 237f 	movw	r3, #639	@ 0x27f
 8011d88:	e003      	b.n	8011d92 <phhalHw_Pn5180_Instr_RetrieveRxData+0xd6>
    }

    /* return the pointer to the buffer */
    *pRxBuffer = pTmpBuffer;
 8011d8a:	69ba      	ldr	r2, [r7, #24]
 8011d8c:	68bb      	ldr	r3, [r7, #8]
 8011d8e:	601a      	str	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8011d90:	2300      	movs	r3, #0
}
 8011d92:	4618      	mov	r0, r3
 8011d94:	3724      	adds	r7, #36	@ 0x24
 8011d96:	46bd      	mov	sp, r7
 8011d98:	bd90      	pop	{r4, r7, pc}

08011d9a <phhalHw_Pn5180_Instr_SwitchModeLpcd>:

phStatus_t phhalHw_Pn5180_Instr_SwitchModeLpcd(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wWakeupCounterInMs
    )
{
 8011d9a:	b580      	push	{r7, lr}
 8011d9c:	b088      	sub	sp, #32
 8011d9e:	af02      	add	r7, sp, #8
 8011da0:	6078      	str	r0, [r7, #4]
 8011da2:	460b      	mov	r3, r1
 8011da4:	807b      	strh	r3, [r7, #2]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint16_t    PH_MEMLOC_REM wTempRxDataLen = 0;
 8011da6:	2300      	movs	r3, #0
 8011da8:	823b      	strh	r3, [r7, #16]

    /*
    Validate pDataParams
    Validate wWakeupCounterInMs
    */
    if ( (NULL == pDataParams) \
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d007      	beq.n	8011dc0 <phhalHw_Pn5180_Instr_SwitchModeLpcd+0x26>
        /* wWakeupCounterInMs is zero */
        || (wWakeupCounterInMs == 0U) \
 8011db0:	887b      	ldrh	r3, [r7, #2]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d004      	beq.n	8011dc0 <phhalHw_Pn5180_Instr_SwitchModeLpcd+0x26>
        /* wWakeupCounterInMs is more than the maximum value */
        || (wWakeupCounterInMs > PHHAL_HW_PN5180_MAX_WAKEUP_COUNTER)    \
 8011db6:	887b      	ldrh	r3, [r7, #2]
 8011db8:	f640 2282 	movw	r2, #2690	@ 0xa82
 8011dbc:	4293      	cmp	r3, r2
 8011dbe:	d902      	bls.n	8011dc6 <phhalHw_Pn5180_Instr_SwitchModeLpcd+0x2c>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011dc0:	f240 2321 	movw	r3, #545	@ 0x221
 8011dc4:	e03e      	b.n	8011e44 <phhalHw_Pn5180_Instr_SwitchModeLpcd+0xaa>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_SWITCH_MODE;
 8011dca:	7dfb      	ldrb	r3, [r7, #23]
 8011dcc:	1c5a      	adds	r2, r3, #1
 8011dce:	75fa      	strb	r2, [r7, #23]
 8011dd0:	3318      	adds	r3, #24
 8011dd2:	443b      	add	r3, r7
 8011dd4:	220b      	movs	r2, #11
 8011dd6:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SWITCH_MODE_LPCD;
 8011dda:	7dfb      	ldrb	r3, [r7, #23]
 8011ddc:	1c5a      	adds	r2, r3, #1
 8011dde:	75fa      	strb	r2, [r7, #23]
 8011de0:	3318      	adds	r3, #24
 8011de2:	443b      	add	r3, r7
 8011de4:	2201      	movs	r2, #1
 8011de6:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* wWakeupCounterInMs LSB */
    bDataBuffer[wBufferLength++] = (uint8_t)(wWakeupCounterInMs & 0xFFU);
 8011dea:	7dfb      	ldrb	r3, [r7, #23]
 8011dec:	1c5a      	adds	r2, r3, #1
 8011dee:	75fa      	strb	r2, [r7, #23]
 8011df0:	887a      	ldrh	r2, [r7, #2]
 8011df2:	b2d2      	uxtb	r2, r2
 8011df4:	3318      	adds	r3, #24
 8011df6:	443b      	add	r3, r7
 8011df8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* wWakeupCounterInMs MSB */
    bDataBuffer[wBufferLength++] = (uint8_t)((wWakeupCounterInMs >> 8U) & 0xFFU);
 8011dfc:	887b      	ldrh	r3, [r7, #2]
 8011dfe:	0a1b      	lsrs	r3, r3, #8
 8011e00:	b29a      	uxth	r2, r3
 8011e02:	7dfb      	ldrb	r3, [r7, #23]
 8011e04:	1c59      	adds	r1, r3, #1
 8011e06:	75f9      	strb	r1, [r7, #23]
 8011e08:	b2d2      	uxtb	r2, r2
 8011e0a:	3318      	adds	r3, #24
 8011e0c:	443b      	add	r3, r7
 8011e0e:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* Expected number of bytes */
    bNumExpBytes = 0U;
 8011e12:	2300      	movs	r3, #0
 8011e14:	82bb      	strh	r3, [r7, #20]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8011e16:	7dfb      	ldrb	r3, [r7, #23]
 8011e18:	b29a      	uxth	r2, r3
 8011e1a:	8ab8      	ldrh	r0, [r7, #20]
 8011e1c:	f107 010c 	add.w	r1, r7, #12
 8011e20:	f107 0310 	add.w	r3, r7, #16
 8011e24:	9301      	str	r3, [sp, #4]
 8011e26:	f107 0308 	add.w	r3, r7, #8
 8011e2a:	9300      	str	r3, [sp, #0]
 8011e2c:	4603      	mov	r3, r0
 8011e2e:	6878      	ldr	r0, [r7, #4]
 8011e30:	f7fe fc02 	bl	8010638 <phhalHw_Pn5180_BalExchange>
 8011e34:	4603      	mov	r3, r0
 8011e36:	827b      	strh	r3, [r7, #18]
 8011e38:	8a7b      	ldrh	r3, [r7, #18]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d001      	beq.n	8011e42 <phhalHw_Pn5180_Instr_SwitchModeLpcd+0xa8>
 8011e3e:	8a7b      	ldrh	r3, [r7, #18]
 8011e40:	e000      	b.n	8011e44 <phhalHw_Pn5180_Instr_SwitchModeLpcd+0xaa>
        wBufferLength,
        bNumExpBytes,
        bRecBuffer,
        &wTempRxDataLen));

    return PH_ERR_SUCCESS;
 8011e42:	2300      	movs	r3, #0
}
 8011e44:	4618      	mov	r0, r3
 8011e46:	3718      	adds	r7, #24
 8011e48:	46bd      	mov	sp, r7
 8011e4a:	bd80      	pop	{r7, pc}

08011e4c <phhalHw_Pn5180_Instr_SwitchModeAutocoll>:
phStatus_t phhalHw_Pn5180_Instr_SwitchModeAutocoll(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRfTechnology,
    uint8_t bAutocollMode
    )
{
 8011e4c:	b580      	push	{r7, lr}
 8011e4e:	b088      	sub	sp, #32
 8011e50:	af02      	add	r7, sp, #8
 8011e52:	6078      	str	r0, [r7, #4]
 8011e54:	460b      	mov	r3, r1
 8011e56:	70fb      	strb	r3, [r7, #3]
 8011e58:	4613      	mov	r3, r2
 8011e5a:	70bb      	strb	r3, [r7, #2]

    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint16_t    PH_MEMLOC_REM wTempRxDataLen = 0;
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	823b      	strh	r3, [r7, #16]
    uint16_t    PH_MEMLOC_REM bNumExpBytes;
    uint8_t     PH_MEMLOC_REM bDataBuffer[4];
    uint8_t     PH_MEMLOC_REM bRecBuffer[1];

    bRfTechnology &= PHHAL_HW_PN5180_AUTOCOLL_RF_TECHNOLOGY_MASK;
 8011e60:	78fb      	ldrb	r3, [r7, #3]
 8011e62:	f003 030f 	and.w	r3, r3, #15
 8011e66:	70fb      	strb	r3, [r7, #3]
    /* Validate pDataParams
    Validate bRfTechnologyMask
    Validate bAutocollMode
    */
    if ( (NULL == pDataParams)  \
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d005      	beq.n	8011e7a <phhalHw_Pn5180_Instr_SwitchModeAutocoll+0x2e>
        || (0U == bRfTechnology) \
 8011e6e:	78fb      	ldrb	r3, [r7, #3]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d002      	beq.n	8011e7a <phhalHw_Pn5180_Instr_SwitchModeAutocoll+0x2e>
        || ( bAutocollMode > 2U) \
 8011e74:	78bb      	ldrb	r3, [r7, #2]
 8011e76:	2b02      	cmp	r3, #2
 8011e78:	d902      	bls.n	8011e80 <phhalHw_Pn5180_Instr_SwitchModeAutocoll+0x34>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011e7a:	f240 2321 	movw	r3, #545	@ 0x221
 8011e7e:	e03a      	b.n	8011ef6 <phhalHw_Pn5180_Instr_SwitchModeAutocoll+0xaa>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8011e80:	2300      	movs	r3, #0
 8011e82:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_SWITCH_MODE;
 8011e84:	7dfb      	ldrb	r3, [r7, #23]
 8011e86:	1c5a      	adds	r2, r3, #1
 8011e88:	75fa      	strb	r2, [r7, #23]
 8011e8a:	3318      	adds	r3, #24
 8011e8c:	443b      	add	r3, r7
 8011e8e:	220b      	movs	r2, #11
 8011e90:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SWITCH_MODE_AUTOCOLL;
 8011e94:	7dfb      	ldrb	r3, [r7, #23]
 8011e96:	1c5a      	adds	r2, r3, #1
 8011e98:	75fa      	strb	r2, [r7, #23]
 8011e9a:	3318      	adds	r3, #24
 8011e9c:	443b      	add	r3, r7
 8011e9e:	2202      	movs	r2, #2
 8011ea0:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* RF technologies  */
    bDataBuffer[wBufferLength++] = bRfTechnology;
 8011ea4:	7dfb      	ldrb	r3, [r7, #23]
 8011ea6:	1c5a      	adds	r2, r3, #1
 8011ea8:	75fa      	strb	r2, [r7, #23]
 8011eaa:	3318      	adds	r3, #24
 8011eac:	443b      	add	r3, r7
 8011eae:	78fa      	ldrb	r2, [r7, #3]
 8011eb0:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* mode of autocoll*/
    bDataBuffer[wBufferLength++] = bAutocollMode;
 8011eb4:	7dfb      	ldrb	r3, [r7, #23]
 8011eb6:	1c5a      	adds	r2, r3, #1
 8011eb8:	75fa      	strb	r2, [r7, #23]
 8011eba:	3318      	adds	r3, #24
 8011ebc:	443b      	add	r3, r7
 8011ebe:	78ba      	ldrb	r2, [r7, #2]
 8011ec0:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* Expected number of bytes */
    bNumExpBytes = 0U;
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	82bb      	strh	r3, [r7, #20]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8011ec8:	7dfb      	ldrb	r3, [r7, #23]
 8011eca:	b29a      	uxth	r2, r3
 8011ecc:	8ab8      	ldrh	r0, [r7, #20]
 8011ece:	f107 010c 	add.w	r1, r7, #12
 8011ed2:	f107 0310 	add.w	r3, r7, #16
 8011ed6:	9301      	str	r3, [sp, #4]
 8011ed8:	f107 0308 	add.w	r3, r7, #8
 8011edc:	9300      	str	r3, [sp, #0]
 8011ede:	4603      	mov	r3, r0
 8011ee0:	6878      	ldr	r0, [r7, #4]
 8011ee2:	f7fe fba9 	bl	8010638 <phhalHw_Pn5180_BalExchange>
 8011ee6:	4603      	mov	r3, r0
 8011ee8:	827b      	strh	r3, [r7, #18]
 8011eea:	8a7b      	ldrh	r3, [r7, #18]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d001      	beq.n	8011ef4 <phhalHw_Pn5180_Instr_SwitchModeAutocoll+0xa8>
 8011ef0:	8a7b      	ldrh	r3, [r7, #18]
 8011ef2:	e000      	b.n	8011ef6 <phhalHw_Pn5180_Instr_SwitchModeAutocoll+0xaa>
        wBufferLength,
        bNumExpBytes,
        bRecBuffer,
        &wTempRxDataLen));

    return PH_ERR_SUCCESS;
 8011ef4:	2300      	movs	r3, #0
}
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	3718      	adds	r7, #24
 8011efa:	46bd      	mov	sp, r7
 8011efc:	bd80      	pop	{r7, pc}

08011efe <phhalHw_Pn5180_Instr_SwitchModeNormal>:

phStatus_t phhalHw_Pn5180_Instr_SwitchModeNormal(phhalHw_Pn5180_DataParams_t * pDataParams)
{
 8011efe:	b580      	push	{r7, lr}
 8011f00:	b088      	sub	sp, #32
 8011f02:	af02      	add	r7, sp, #8
 8011f04:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint16_t    PH_MEMLOC_REM bNumExpBytes;
    uint8_t     PH_MEMLOC_REM bDataBuffer[2];
    uint8_t     PH_MEMLOC_REM bRecBuffer[1];
    uint16_t    PH_MEMLOC_REM wTempRxDataLen = 0;
 8011f06:	2300      	movs	r3, #0
 8011f08:	817b      	strh	r3, [r7, #10]
    /* Build the command frame */
    wBufferLength = 0U;
 8011f0a:	2300      	movs	r3, #0
 8011f0c:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_SWITCH_MODE;
 8011f0e:	7dfb      	ldrb	r3, [r7, #23]
 8011f10:	1c5a      	adds	r2, r3, #1
 8011f12:	75fa      	strb	r2, [r7, #23]
 8011f14:	3318      	adds	r3, #24
 8011f16:	443b      	add	r3, r7
 8011f18:	220b      	movs	r2, #11
 8011f1a:	f803 2c08 	strb.w	r2, [r3, #-8]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SWITCH_MODE_NORMAL;
 8011f1e:	7dfb      	ldrb	r3, [r7, #23]
 8011f20:	1c5a      	adds	r2, r3, #1
 8011f22:	75fa      	strb	r2, [r7, #23]
 8011f24:	3318      	adds	r3, #24
 8011f26:	443b      	add	r3, r7
 8011f28:	2203      	movs	r2, #3
 8011f2a:	f803 2c08 	strb.w	r2, [r3, #-8]

    /* Expected number of bytes */
    bNumExpBytes = 0U;
 8011f2e:	2300      	movs	r3, #0
 8011f30:	82bb      	strh	r3, [r7, #20]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8011f32:	7dfb      	ldrb	r3, [r7, #23]
 8011f34:	b29a      	uxth	r2, r3
 8011f36:	8ab8      	ldrh	r0, [r7, #20]
 8011f38:	f107 0110 	add.w	r1, r7, #16
 8011f3c:	f107 030a 	add.w	r3, r7, #10
 8011f40:	9301      	str	r3, [sp, #4]
 8011f42:	f107 030c 	add.w	r3, r7, #12
 8011f46:	9300      	str	r3, [sp, #0]
 8011f48:	4603      	mov	r3, r0
 8011f4a:	6878      	ldr	r0, [r7, #4]
 8011f4c:	f7fe fb74 	bl	8010638 <phhalHw_Pn5180_BalExchange>
 8011f50:	4603      	mov	r3, r0
 8011f52:	827b      	strh	r3, [r7, #18]
 8011f54:	8a7b      	ldrh	r3, [r7, #18]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d001      	beq.n	8011f5e <phhalHw_Pn5180_Instr_SwitchModeNormal+0x60>
 8011f5a:	8a7b      	ldrh	r3, [r7, #18]
 8011f5c:	e000      	b.n	8011f60 <phhalHw_Pn5180_Instr_SwitchModeNormal+0x62>
        wBufferLength,
        bNumExpBytes,
        bRecBuffer,
        &wTempRxDataLen));

    return PH_ERR_SUCCESS;
 8011f5e:	2300      	movs	r3, #0
}
 8011f60:	4618      	mov	r0, r3
 8011f62:	3718      	adds	r7, #24
 8011f64:	46bd      	mov	sp, r7
 8011f66:	bd80      	pop	{r7, pc}

08011f68 <phhalHw_Pn5180_Instr_EpcGen2Inventory>:
    uint8_t bSelectCommandLength,
    uint8_t bSelectCommandBitsInLastByte,
    uint8_t * pBeginRoundCommand,
    uint8_t bTimeslotProcessingBehavior
    )
{
 8011f68:	b580      	push	{r7, lr}
 8011f6a:	b08a      	sub	sp, #40	@ 0x28
 8011f6c:	af02      	add	r7, sp, #8
 8011f6e:	60f8      	str	r0, [r7, #12]
 8011f70:	60b9      	str	r1, [r7, #8]
 8011f72:	4611      	mov	r1, r2
 8011f74:	461a      	mov	r2, r3
 8011f76:	460b      	mov	r3, r1
 8011f78:	71fb      	strb	r3, [r7, #7]
 8011f7a:	4613      	mov	r3, r2
 8011f7c:	71bb      	strb	r3, [r7, #6]

    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t    PH_MEMLOC_REM wDataLenTmp;
    uint16_t    PH_MEMLOC_REM wBufferLength = 0;
 8011f7e:	2300      	movs	r3, #0
 8011f80:	83fb      	strh	r3, [r7, #30]
    uint8_t     PH_MEMLOC_REM bNumExpBytes;

    uint8_t*    PH_MEMLOC_REM pTmpBuffer;
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 8011f82:	2300      	movs	r3, #0
 8011f84:	827b      	strh	r3, [r7, #18]

    /* Validate pDataParams
    Validate pBeginRoundCommand
    Validate bTimeslotProcessingBehavior */

    if ( (NULL == pDataParams) \
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d006      	beq.n	8011f9a <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x32>
        || (NULL == pBeginRoundCommand)
 8011f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d003      	beq.n	8011f9a <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x32>
        || (bTimeslotProcessingBehavior > PHHAL_HW_PN5180_MAX_EPC_GEN2_TIMESLOT)
 8011f92:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011f96:	2b02      	cmp	r3, #2
 8011f98:	d902      	bls.n	8011fa0 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x38>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011f9a:	f240 2321 	movw	r3, #545	@ 0x221
 8011f9e:	e06e      	b.n	801207e <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x116>
    }

    /* Validate the parameters of Select command */
    if (0U != (bSelectCommandLength))
 8011fa0:	79fb      	ldrb	r3, [r7, #7]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d00b      	beq.n	8011fbe <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x56>
    {
        /* Validate pSelectCommand
        Validate bSelectCommandLength
        Validate bSelectCommandBitsInLastByte */
        if (                            \
 8011fa6:	68bb      	ldr	r3, [r7, #8]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d005      	beq.n	8011fb8 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x50>
            (NULL == pSelectCommand)    \
            || (bSelectCommandLength > PHHAL_HW_PN5180_MAX_SELECT_COMMAND_LENGTH)    \
 8011fac:	79fb      	ldrb	r3, [r7, #7]
 8011fae:	2b27      	cmp	r3, #39	@ 0x27
 8011fb0:	d802      	bhi.n	8011fb8 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x50>
            ||  (bSelectCommandBitsInLastByte > PHHAL_HW_PN5180_MAX_NUM_OF_BITS_FOR_LAST_BYTE) \
 8011fb2:	79bb      	ldrb	r3, [r7, #6]
 8011fb4:	2b07      	cmp	r3, #7
 8011fb6:	d902      	bls.n	8011fbe <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x56>
            )
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011fb8:	f240 2321 	movw	r3, #545	@ 0x221
 8011fbc:	e05f      	b.n	801207e <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x116>
        }
    }

    /* Get Buffer */
    phhalHw_Pn5180_Instr_GetInstrBuffer(pDataParams, &pTmpBuffer, &wTmpBufferLen);
 8011fbe:	f107 0212 	add.w	r2, r7, #18
 8011fc2:	f107 0314 	add.w	r3, r7, #20
 8011fc6:	4619      	mov	r1, r3
 8011fc8:	68f8      	ldr	r0, [r7, #12]
 8011fca:	f7ff fa1d 	bl	8011408 <phhalHw_Pn5180_Instr_GetInstrBuffer>

    /* Check if the buffer size is sufficient*/
    if (wTmpBufferLen < 46U)
 8011fce:	8a7b      	ldrh	r3, [r7, #18]
 8011fd0:	2b2d      	cmp	r3, #45	@ 0x2d
 8011fd2:	d802      	bhi.n	8011fda <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x72>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 8011fd4:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8011fd8:	e051      	b.n	801207e <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x116>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8011fda:	2300      	movs	r3, #0
 8011fdc:	83fb      	strh	r3, [r7, #30]
    pTmpBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_EPC_GEN2_INVENTORY;
 8011fde:	697a      	ldr	r2, [r7, #20]
 8011fe0:	8bfb      	ldrh	r3, [r7, #30]
 8011fe2:	1c59      	adds	r1, r3, #1
 8011fe4:	83f9      	strh	r1, [r7, #30]
 8011fe6:	4413      	add	r3, r2
 8011fe8:	220d      	movs	r2, #13
 8011fea:	701a      	strb	r2, [r3, #0]
    pTmpBuffer[wBufferLength++] = bSelectCommandLength;
 8011fec:	697a      	ldr	r2, [r7, #20]
 8011fee:	8bfb      	ldrh	r3, [r7, #30]
 8011ff0:	1c59      	adds	r1, r3, #1
 8011ff2:	83f9      	strh	r1, [r7, #30]
 8011ff4:	4413      	add	r3, r2
 8011ff6:	79fa      	ldrb	r2, [r7, #7]
 8011ff8:	701a      	strb	r2, [r3, #0]

    /*
    No Select command is set prior to BeginRound command.
    'Valid Bits in last Byte' field and 'Select command' field shall not be present.
    */
    if(0U != (bSelectCommandLength))
 8011ffa:	79fb      	ldrb	r3, [r7, #7]
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d013      	beq.n	8012028 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0xc0>
    {
        pTmpBuffer[wBufferLength++] = bSelectCommandBitsInLastByte;
 8012000:	697a      	ldr	r2, [r7, #20]
 8012002:	8bfb      	ldrh	r3, [r7, #30]
 8012004:	1c59      	adds	r1, r3, #1
 8012006:	83f9      	strh	r1, [r7, #30]
 8012008:	4413      	add	r3, r2
 801200a:	79ba      	ldrb	r2, [r7, #6]
 801200c:	701a      	strb	r2, [r3, #0]

        /* Copy the Instruction payload and update the buffer length*/
        (void)memcpy(&pTmpBuffer[wBufferLength], pSelectCommand, bSelectCommandLength);
 801200e:	697a      	ldr	r2, [r7, #20]
 8012010:	8bfb      	ldrh	r3, [r7, #30]
 8012012:	4413      	add	r3, r2
 8012014:	79fa      	ldrb	r2, [r7, #7]
 8012016:	68b9      	ldr	r1, [r7, #8]
 8012018:	4618      	mov	r0, r3
 801201a:	f00e fcba 	bl	8020992 <memcpy>
        wBufferLength+= bSelectCommandLength;
 801201e:	79fb      	ldrb	r3, [r7, #7]
 8012020:	b29a      	uxth	r2, r3
 8012022:	8bfb      	ldrh	r3, [r7, #30]
 8012024:	4413      	add	r3, r2
 8012026:	83fb      	strh	r3, [r7, #30]
    }
    /* Copy the Instruction payload and update the buffer length*/
    (void)memcpy(&pTmpBuffer[wBufferLength], pBeginRoundCommand, PHHAL_HW_PN5180_BEGIN_COMMAND_LENGTH);
 8012028:	697a      	ldr	r2, [r7, #20]
 801202a:	8bfb      	ldrh	r3, [r7, #30]
 801202c:	4413      	add	r3, r2
 801202e:	2203      	movs	r2, #3
 8012030:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012032:	4618      	mov	r0, r3
 8012034:	f00e fcad 	bl	8020992 <memcpy>
    wBufferLength+= PHHAL_HW_PN5180_BEGIN_COMMAND_LENGTH;
 8012038:	8bfb      	ldrh	r3, [r7, #30]
 801203a:	3303      	adds	r3, #3
 801203c:	83fb      	strh	r3, [r7, #30]

    pTmpBuffer[wBufferLength++] = bTimeslotProcessingBehavior;
 801203e:	697a      	ldr	r2, [r7, #20]
 8012040:	8bfb      	ldrh	r3, [r7, #30]
 8012042:	1c59      	adds	r1, r3, #1
 8012044:	83f9      	strh	r1, [r7, #30]
 8012046:	4413      	add	r3, r2
 8012048:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801204c:	701a      	strb	r2, [r3, #0]

    /* No Response expected */
    bNumExpBytes = 0U;
 801204e:	2300      	movs	r3, #0
 8012050:	777b      	strb	r3, [r7, #29]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8012052:	6979      	ldr	r1, [r7, #20]
 8012054:	7f7b      	ldrb	r3, [r7, #29]
 8012056:	b298      	uxth	r0, r3
 8012058:	8bfa      	ldrh	r2, [r7, #30]
 801205a:	f107 0318 	add.w	r3, r7, #24
 801205e:	9301      	str	r3, [sp, #4]
 8012060:	f107 0310 	add.w	r3, r7, #16
 8012064:	9300      	str	r3, [sp, #0]
 8012066:	4603      	mov	r3, r0
 8012068:	68f8      	ldr	r0, [r7, #12]
 801206a:	f7fe fae5 	bl	8010638 <phhalHw_Pn5180_BalExchange>
 801206e:	4603      	mov	r3, r0
 8012070:	837b      	strh	r3, [r7, #26]
 8012072:	8b7b      	ldrh	r3, [r7, #26]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d001      	beq.n	801207c <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x114>
 8012078:	8b7b      	ldrh	r3, [r7, #26]
 801207a:	e000      	b.n	801207e <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x116>
        wBufferLength,
        bNumExpBytes,
        pReceivedData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 801207c:	2300      	movs	r3, #0
}
 801207e:	4618      	mov	r0, r3
 8012080:	3720      	adds	r7, #32
 8012082:	46bd      	mov	sp, r7
 8012084:	bd80      	pop	{r7, pc}

08012086 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize>:

phStatus_t phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t * pResultSize
    )
{
 8012086:	b580      	push	{r7, lr}
 8012088:	b088      	sub	sp, #32
 801208a:	af02      	add	r7, sp, #8
 801208c:	6078      	str	r0, [r7, #4]
 801208e:	6039      	str	r1, [r7, #0]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint16_t    PH_MEMLOC_REM wTempRxDataLen = 0;
 8012090:	2300      	movs	r3, #0
 8012092:	823b      	strh	r3, [r7, #16]

    /*
    Validate pDataParams
    Validate pResultSize
    */
    if ( (NULL == pDataParams)    \
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d002      	beq.n	80120a0 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0x1a>
        || (NULL == pResultSize)    \
 801209a:	683b      	ldr	r3, [r7, #0]
 801209c:	2b00      	cmp	r3, #0
 801209e:	d102      	bne.n	80120a6 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0x20>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80120a0:	f240 2321 	movw	r3, #545	@ 0x221
 80120a4:	e041      	b.n	801212a <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0xa4>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 80120a6:	2300      	movs	r3, #0
 80120a8:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_EPC_GEN2_RETRIEVE_INVENTORY_RESULT_SIZE;
 80120aa:	7dfb      	ldrb	r3, [r7, #23]
 80120ac:	1c5a      	adds	r2, r3, #1
 80120ae:	75fa      	strb	r2, [r7, #23]
 80120b0:	3318      	adds	r3, #24
 80120b2:	443b      	add	r3, r7
 80120b4:	220f      	movs	r2, #15
 80120b6:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = 0U;   /*RFU*/
 80120ba:	7dfb      	ldrb	r3, [r7, #23]
 80120bc:	1c5a      	adds	r2, r3, #1
 80120be:	75fa      	strb	r2, [r7, #23]
 80120c0:	3318      	adds	r3, #24
 80120c2:	443b      	add	r3, r7
 80120c4:	2200      	movs	r2, #0
 80120c6:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* Expected number of bytes */
    bNumExpBytes = 2;
 80120ca:	2302      	movs	r3, #2
 80120cc:	82bb      	strh	r3, [r7, #20]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 80120ce:	7dfb      	ldrb	r3, [r7, #23]
 80120d0:	b29a      	uxth	r2, r3
 80120d2:	8ab8      	ldrh	r0, [r7, #20]
 80120d4:	f107 010c 	add.w	r1, r7, #12
 80120d8:	f107 0310 	add.w	r3, r7, #16
 80120dc:	9301      	str	r3, [sp, #4]
 80120de:	f107 0308 	add.w	r3, r7, #8
 80120e2:	9300      	str	r3, [sp, #0]
 80120e4:	4603      	mov	r3, r0
 80120e6:	6878      	ldr	r0, [r7, #4]
 80120e8:	f7fe faa6 	bl	8010638 <phhalHw_Pn5180_BalExchange>
 80120ec:	4603      	mov	r3, r0
 80120ee:	827b      	strh	r3, [r7, #18]
 80120f0:	8a7b      	ldrh	r3, [r7, #18]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d001      	beq.n	80120fa <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0x74>
 80120f6:	8a7b      	ldrh	r3, [r7, #18]
 80120f8:	e017      	b.n	801212a <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0xa4>
        bNumExpBytes,
        bRecBuffer,
        &wTempRxDataLen));

    /* Validate the response, if any */
    if (wTempRxDataLen != bNumExpBytes)
 80120fa:	8a3b      	ldrh	r3, [r7, #16]
 80120fc:	8aba      	ldrh	r2, [r7, #20]
 80120fe:	429a      	cmp	r2, r3
 8012100:	d002      	beq.n	8012108 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0x82>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 8012102:	f240 237f 	movw	r3, #639	@ 0x27f
 8012106:	e010      	b.n	801212a <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0xa4>
    }

    /* Pack the data that was received */
    *pResultSize = bRecBuffer[0];
 8012108:	7a3b      	ldrb	r3, [r7, #8]
 801210a:	461a      	mov	r2, r3
 801210c:	683b      	ldr	r3, [r7, #0]
 801210e:	801a      	strh	r2, [r3, #0]
    *pResultSize |= (((uint16_t) bRecBuffer[1]) << 8U);
 8012110:	683b      	ldr	r3, [r7, #0]
 8012112:	881b      	ldrh	r3, [r3, #0]
 8012114:	b21a      	sxth	r2, r3
 8012116:	7a7b      	ldrb	r3, [r7, #9]
 8012118:	b21b      	sxth	r3, r3
 801211a:	021b      	lsls	r3, r3, #8
 801211c:	b21b      	sxth	r3, r3
 801211e:	4313      	orrs	r3, r2
 8012120:	b21b      	sxth	r3, r3
 8012122:	b29a      	uxth	r2, r3
 8012124:	683b      	ldr	r3, [r7, #0]
 8012126:	801a      	strh	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8012128:	2300      	movs	r3, #0
}
 801212a:	4618      	mov	r0, r3
 801212c:	3718      	adds	r7, #24
 801212e:	46bd      	mov	sp, r7
 8012130:	bd80      	pop	{r7, pc}

08012132 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult>:
phStatus_t phhalHw_Pn5180_Instr_EpcGen2RetrieveResult(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t ** ppInventoryResult,
    uint16_t wResultSize
    )
{
 8012132:	b590      	push	{r4, r7, lr}
 8012134:	b08b      	sub	sp, #44	@ 0x2c
 8012136:	af02      	add	r7, sp, #8
 8012138:	60f8      	str	r0, [r7, #12]
 801213a:	60b9      	str	r1, [r7, #8]
 801213c:	4613      	mov	r3, r2
 801213e:	80fb      	strh	r3, [r7, #6]
    uint8_t *   PH_MEMLOC_REM pTmpBuffer = NULL;
 8012140:	2300      	movs	r3, #0
 8012142:	61bb      	str	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 8012144:	2300      	movs	r3, #0
 8012146:	82fb      	strh	r3, [r7, #22]
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint8_t     PH_MEMLOC_REM bDataBuffer[2];

    /* Validate pDataParams */
    /* Validate ppInventoryResult */
    if (                        \
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	2b00      	cmp	r3, #0
 801214c:	d002      	beq.n	8012154 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0x22>
        (NULL == pDataParams)   \
        || (NULL == ppInventoryResult)  \
 801214e:	68bb      	ldr	r3, [r7, #8]
 8012150:	2b00      	cmp	r3, #0
 8012152:	d102      	bne.n	801215a <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0x28>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012154:	f240 2321 	movw	r3, #545	@ 0x221
 8012158:	e047      	b.n	80121ea <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xb8>
    }

    /* Validate wResultSize */
    if (0x00U == wResultSize)
 801215a:	88fb      	ldrh	r3, [r7, #6]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d102      	bne.n	8012166 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0x34>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012160:	f240 2321 	movw	r3, #545	@ 0x221
 8012164:	e041      	b.n	80121ea <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xb8>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8012166:	2300      	movs	r3, #0
 8012168:	77fb      	strb	r3, [r7, #31]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_EPC_GEN2_RETRIEVE_INVENTORY_RESULT;
 801216a:	7ffb      	ldrb	r3, [r7, #31]
 801216c:	1c5a      	adds	r2, r3, #1
 801216e:	77fa      	strb	r2, [r7, #31]
 8012170:	3320      	adds	r3, #32
 8012172:	443b      	add	r3, r7
 8012174:	2210      	movs	r2, #16
 8012176:	f803 2c10 	strb.w	r2, [r3, #-16]
    bDataBuffer[wBufferLength++] = 0U;   /*RFU*/
 801217a:	7ffb      	ldrb	r3, [r7, #31]
 801217c:	1c5a      	adds	r2, r3, #1
 801217e:	77fa      	strb	r2, [r7, #31]
 8012180:	3320      	adds	r3, #32
 8012182:	443b      	add	r3, r7
 8012184:	2200      	movs	r2, #0
 8012186:	f803 2c10 	strb.w	r2, [r3, #-16]

    /* Get Buffer*/
    phhalHw_Pn5180_Instr_GetInstrBuffer(pDataParams, &pTmpBuffer, &wTmpBufferLen);
 801218a:	f107 0216 	add.w	r2, r7, #22
 801218e:	f107 0318 	add.w	r3, r7, #24
 8012192:	4619      	mov	r1, r3
 8012194:	68f8      	ldr	r0, [r7, #12]
 8012196:	f7ff f937 	bl	8011408 <phhalHw_Pn5180_Instr_GetInstrBuffer>

    /* Check if the buffer size is sufficient*/
    if (wTmpBufferLen < wResultSize)
 801219a:	8afb      	ldrh	r3, [r7, #22]
 801219c:	88fa      	ldrh	r2, [r7, #6]
 801219e:	429a      	cmp	r2, r3
 80121a0:	d902      	bls.n	80121a8 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0x76>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 80121a2:	f44f 7301 	mov.w	r3, #516	@ 0x204
 80121a6:	e020      	b.n	80121ea <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xb8>
    }

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 80121a8:	7ffb      	ldrb	r3, [r7, #31]
 80121aa:	b298      	uxth	r0, r3
 80121ac:	69bb      	ldr	r3, [r7, #24]
 80121ae:	88fc      	ldrh	r4, [r7, #6]
 80121b0:	f107 0110 	add.w	r1, r7, #16
 80121b4:	f107 0214 	add.w	r2, r7, #20
 80121b8:	9201      	str	r2, [sp, #4]
 80121ba:	9300      	str	r3, [sp, #0]
 80121bc:	4623      	mov	r3, r4
 80121be:	4602      	mov	r2, r0
 80121c0:	68f8      	ldr	r0, [r7, #12]
 80121c2:	f7fe fa39 	bl	8010638 <phhalHw_Pn5180_BalExchange>
 80121c6:	4603      	mov	r3, r0
 80121c8:	83bb      	strh	r3, [r7, #28]
 80121ca:	8bbb      	ldrh	r3, [r7, #28]
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d001      	beq.n	80121d4 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xa2>
 80121d0:	8bbb      	ldrh	r3, [r7, #28]
 80121d2:	e00a      	b.n	80121ea <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xb8>
        wResultSize,
        pTmpBuffer,
        &wDataLenTmp));

    /* Validate the response, if any */
    if (wDataLenTmp  != wResultSize)
 80121d4:	8abb      	ldrh	r3, [r7, #20]
 80121d6:	88fa      	ldrh	r2, [r7, #6]
 80121d8:	429a      	cmp	r2, r3
 80121da:	d002      	beq.n	80121e2 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xb0>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 80121dc:	f240 237f 	movw	r3, #639	@ 0x27f
 80121e0:	e003      	b.n	80121ea <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xb8>
    }
    /* return the pointer to the buffer*/
    *ppInventoryResult = pTmpBuffer;
 80121e2:	69ba      	ldr	r2, [r7, #24]
 80121e4:	68bb      	ldr	r3, [r7, #8]
 80121e6:	601a      	str	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 80121e8:	2300      	movs	r3, #0

}
 80121ea:	4618      	mov	r0, r3
 80121ec:	3724      	adds	r7, #36	@ 0x24
 80121ee:	46bd      	mov	sp, r7
 80121f0:	bd90      	pop	{r4, r7, pc}

080121f2 <phhalHw_Pn5180_Instr_EpcGen2ResumeInventory>:

phStatus_t phhalHw_Pn5180_Instr_EpcGen2ResumeInventory(
    phhalHw_Pn5180_DataParams_t * pDataParams)
{
 80121f2:	b580      	push	{r7, lr}
 80121f4:	b088      	sub	sp, #32
 80121f6:	af02      	add	r7, sp, #8
 80121f8:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint16_t    PH_MEMLOC_REM wTempRxDataLen = 0;
 80121fa:	2300      	movs	r3, #0
 80121fc:	823b      	strh	r3, [r7, #16]
    uint16_t    PH_MEMLOC_REM bNumExpBytes;
    uint8_t     PH_MEMLOC_REM bDataBuffer[2];
    uint8_t     PH_MEMLOC_REM bRecBuffer[1];

    /* Validate pDataParams */
    if (NULL == pDataParams)
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	2b00      	cmp	r3, #0
 8012202:	d102      	bne.n	801220a <phhalHw_Pn5180_Instr_EpcGen2ResumeInventory+0x18>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012204:	f240 2321 	movw	r3, #545	@ 0x221
 8012208:	e02a      	b.n	8012260 <phhalHw_Pn5180_Instr_EpcGen2ResumeInventory+0x6e>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 801220a:	2300      	movs	r3, #0
 801220c:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_EPC_GEN2_RESUME_INVENTORY;
 801220e:	7dfb      	ldrb	r3, [r7, #23]
 8012210:	1c5a      	adds	r2, r3, #1
 8012212:	75fa      	strb	r2, [r7, #23]
 8012214:	3318      	adds	r3, #24
 8012216:	443b      	add	r3, r7
 8012218:	220e      	movs	r2, #14
 801221a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = 0U;   /*RFU*/
 801221e:	7dfb      	ldrb	r3, [r7, #23]
 8012220:	1c5a      	adds	r2, r3, #1
 8012222:	75fa      	strb	r2, [r7, #23]
 8012224:	3318      	adds	r3, #24
 8012226:	443b      	add	r3, r7
 8012228:	2200      	movs	r2, #0
 801222a:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* Expected number of bytes */
    bNumExpBytes = 0U;
 801222e:	2300      	movs	r3, #0
 8012230:	82bb      	strh	r3, [r7, #20]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8012232:	7dfb      	ldrb	r3, [r7, #23]
 8012234:	b29a      	uxth	r2, r3
 8012236:	8ab8      	ldrh	r0, [r7, #20]
 8012238:	f107 010c 	add.w	r1, r7, #12
 801223c:	f107 0310 	add.w	r3, r7, #16
 8012240:	9301      	str	r3, [sp, #4]
 8012242:	f107 0308 	add.w	r3, r7, #8
 8012246:	9300      	str	r3, [sp, #0]
 8012248:	4603      	mov	r3, r0
 801224a:	6878      	ldr	r0, [r7, #4]
 801224c:	f7fe f9f4 	bl	8010638 <phhalHw_Pn5180_BalExchange>
 8012250:	4603      	mov	r3, r0
 8012252:	827b      	strh	r3, [r7, #18]
 8012254:	8a7b      	ldrh	r3, [r7, #18]
 8012256:	2b00      	cmp	r3, #0
 8012258:	d001      	beq.n	801225e <phhalHw_Pn5180_Instr_EpcGen2ResumeInventory+0x6c>
 801225a:	8a7b      	ldrh	r3, [r7, #18]
 801225c:	e000      	b.n	8012260 <phhalHw_Pn5180_Instr_EpcGen2ResumeInventory+0x6e>
        wBufferLength,
        bNumExpBytes,
        bRecBuffer,
        &wTempRxDataLen));

    return PH_ERR_SUCCESS;
 801225e:	2300      	movs	r3, #0
}
 8012260:	4618      	mov	r0, r3
 8012262:	3718      	adds	r7, #24
 8012264:	46bd      	mov	sp, r7
 8012266:	bd80      	pop	{r7, pc}

08012268 <phhalHw_Pn5180_Instr_LoadRfConfiguration>:
phStatus_t phhalHw_Pn5180_Instr_LoadRfConfiguration(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRfTxConfiguration,
    uint8_t bRfRxConfiguration
    )
{
 8012268:	b580      	push	{r7, lr}
 801226a:	b088      	sub	sp, #32
 801226c:	af02      	add	r7, sp, #8
 801226e:	6078      	str	r0, [r7, #4]
 8012270:	460b      	mov	r3, r1
 8012272:	70fb      	strb	r3, [r7, #3]
 8012274:	4613      	mov	r3, r2
 8012276:	70bb      	strb	r3, [r7, #2]
    * bRfTxConfiguration is not the PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX
    * Validate bRfRxConfiguration
    * bRfRxConfiguration is lesser than the minimum RF RX configuration
    * bRfRxConfiguration is greater than the maximum RF RX configuration
    * and bRfRxConfiguration is not the PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX*/
    if ((NULL == pDataParams) \
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	2b00      	cmp	r3, #0
 801227c:	d00f      	beq.n	801229e <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x36>
        || ((bRfTxConfiguration > PHHAL_HW_PN5180_MAX_RF_TX_CONFIGURATION_INDEX) \
 801227e:	78fb      	ldrb	r3, [r7, #3]
 8012280:	2b1c      	cmp	r3, #28
 8012282:	d902      	bls.n	801228a <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x22>
        && (bRfTxConfiguration != PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX)) \
 8012284:	78fb      	ldrb	r3, [r7, #3]
 8012286:	2bff      	cmp	r3, #255	@ 0xff
 8012288:	d109      	bne.n	801229e <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x36>
        || (bRfRxConfiguration < PHHAL_HW_PN5180_MIN_RF_RX_CONFIGURATION_INDEX) \
 801228a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801228e:	2b00      	cmp	r3, #0
 8012290:	da05      	bge.n	801229e <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x36>
        || ((bRfRxConfiguration > PHHAL_HW_PN5180_MAX_RF_RX_CONFIGURATION_INDEX) \
 8012292:	78bb      	ldrb	r3, [r7, #2]
 8012294:	2b9d      	cmp	r3, #157	@ 0x9d
 8012296:	d905      	bls.n	80122a4 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x3c>
        && (bRfRxConfiguration != PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX)) \
 8012298:	78bb      	ldrb	r3, [r7, #2]
 801229a:	2bff      	cmp	r3, #255	@ 0xff
 801229c:	d002      	beq.n	80122a4 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x3c>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 801229e:	f240 2321 	movw	r3, #545	@ 0x221
 80122a2:	e03b      	b.n	801231c <phhalHw_Pn5180_Instr_LoadRfConfiguration+0xb4>
    }
    /*bRfTxConfiguration == bRfRxConfiguration == PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX then no change required*/
    if((bRfTxConfiguration & bRfRxConfiguration) == PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX)
 80122a4:	78fa      	ldrb	r2, [r7, #3]
 80122a6:	78bb      	ldrb	r3, [r7, #2]
 80122a8:	4013      	ands	r3, r2
 80122aa:	b2db      	uxtb	r3, r3
 80122ac:	2bff      	cmp	r3, #255	@ 0xff
 80122ae:	d101      	bne.n	80122b4 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x4c>
    {
        return PH_ERR_SUCCESS;
 80122b0:	2300      	movs	r3, #0
 80122b2:	e033      	b.n	801231c <phhalHw_Pn5180_Instr_LoadRfConfiguration+0xb4>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 80122b4:	2300      	movs	r3, #0
 80122b6:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_LOAD_RF_CONFIGURATION;
 80122b8:	7dfb      	ldrb	r3, [r7, #23]
 80122ba:	1c5a      	adds	r2, r3, #1
 80122bc:	75fa      	strb	r2, [r7, #23]
 80122be:	3318      	adds	r3, #24
 80122c0:	443b      	add	r3, r7
 80122c2:	2211      	movs	r2, #17
 80122c4:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bRfTxConfiguration;
 80122c8:	7dfb      	ldrb	r3, [r7, #23]
 80122ca:	1c5a      	adds	r2, r3, #1
 80122cc:	75fa      	strb	r2, [r7, #23]
 80122ce:	3318      	adds	r3, #24
 80122d0:	443b      	add	r3, r7
 80122d2:	78fa      	ldrb	r2, [r7, #3]
 80122d4:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bRfRxConfiguration;
 80122d8:	7dfb      	ldrb	r3, [r7, #23]
 80122da:	1c5a      	adds	r2, r3, #1
 80122dc:	75fa      	strb	r2, [r7, #23]
 80122de:	3318      	adds	r3, #24
 80122e0:	443b      	add	r3, r7
 80122e2:	78ba      	ldrb	r2, [r7, #2]
 80122e4:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* No Response expected*/
    bNumExpBytes = 0U;
 80122e8:	2300      	movs	r3, #0
 80122ea:	75bb      	strb	r3, [r7, #22]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,
 80122ec:	7dfb      	ldrb	r3, [r7, #23]
 80122ee:	b29a      	uxth	r2, r3
 80122f0:	7dbb      	ldrb	r3, [r7, #22]
 80122f2:	b298      	uxth	r0, r3
 80122f4:	f107 010c 	add.w	r1, r7, #12
 80122f8:	f107 0312 	add.w	r3, r7, #18
 80122fc:	9301      	str	r3, [sp, #4]
 80122fe:	f107 0308 	add.w	r3, r7, #8
 8012302:	9300      	str	r3, [sp, #0]
 8012304:	4603      	mov	r3, r0
 8012306:	6878      	ldr	r0, [r7, #4]
 8012308:	f7fe f996 	bl	8010638 <phhalHw_Pn5180_BalExchange>
 801230c:	4603      	mov	r3, r0
 801230e:	82bb      	strh	r3, [r7, #20]
 8012310:	8abb      	ldrh	r3, [r7, #20]
 8012312:	2b00      	cmp	r3, #0
 8012314:	d001      	beq.n	801231a <phhalHw_Pn5180_Instr_LoadRfConfiguration+0xb2>
 8012316:	8abb      	ldrh	r3, [r7, #20]
 8012318:	e000      	b.n	801231c <phhalHw_Pn5180_Instr_LoadRfConfiguration+0xb4>
        wBufferLength,
        bNumExpBytes,
        pData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 801231a:	2300      	movs	r3, #0
}
 801231c:	4618      	mov	r0, r3
 801231e:	3718      	adds	r7, #24
 8012320:	46bd      	mov	sp, r7
 8012322:	bd80      	pop	{r7, pc}

08012324 <phhalHw_Pn5180_Instr_RfOn>:

phStatus_t phhalHw_Pn5180_Instr_RfOn(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRfOnConfig
    )
{
 8012324:	b580      	push	{r7, lr}
 8012326:	b088      	sub	sp, #32
 8012328:	af02      	add	r7, sp, #8
 801232a:	6078      	str	r0, [r7, #4]
 801232c:	460b      	mov	r3, r1
 801232e:	70fb      	strb	r3, [r7, #3]

    /* Validate pDataParams
    * Validate bRfOnConfig
    *
    * */
    if ( (NULL == pDataParams) \
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	2b00      	cmp	r3, #0
 8012334:	d002      	beq.n	801233c <phhalHw_Pn5180_Instr_RfOn+0x18>
        || (bRfOnConfig > 3U) \
 8012336:	78fb      	ldrb	r3, [r7, #3]
 8012338:	2b03      	cmp	r3, #3
 801233a:	d902      	bls.n	8012342 <phhalHw_Pn5180_Instr_RfOn+0x1e>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 801233c:	f240 2321 	movw	r3, #545	@ 0x221
 8012340:	e02b      	b.n	801239a <phhalHw_Pn5180_Instr_RfOn+0x76>
    }

    /* Build the command frame */

    wBufferLength = 0U;
 8012342:	2300      	movs	r3, #0
 8012344:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_FIELD_ON;
 8012346:	7dfb      	ldrb	r3, [r7, #23]
 8012348:	1c5a      	adds	r2, r3, #1
 801234a:	75fa      	strb	r2, [r7, #23]
 801234c:	3318      	adds	r3, #24
 801234e:	443b      	add	r3, r7
 8012350:	2216      	movs	r2, #22
 8012352:	f803 2c08 	strb.w	r2, [r3, #-8]
    bDataBuffer[wBufferLength++] = bRfOnConfig;
 8012356:	7dfb      	ldrb	r3, [r7, #23]
 8012358:	1c5a      	adds	r2, r3, #1
 801235a:	75fa      	strb	r2, [r7, #23]
 801235c:	3318      	adds	r3, #24
 801235e:	443b      	add	r3, r7
 8012360:	78fa      	ldrb	r2, [r7, #3]
 8012362:	f803 2c08 	strb.w	r2, [r3, #-8]

    /* No Response expected*/
    bNumExpBytes = 0U;
 8012366:	2300      	movs	r3, #0
 8012368:	75bb      	strb	r3, [r7, #22]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,
 801236a:	7dfb      	ldrb	r3, [r7, #23]
 801236c:	b29a      	uxth	r2, r3
 801236e:	7dbb      	ldrb	r3, [r7, #22]
 8012370:	b298      	uxth	r0, r3
 8012372:	f107 0110 	add.w	r1, r7, #16
 8012376:	f107 0312 	add.w	r3, r7, #18
 801237a:	9301      	str	r3, [sp, #4]
 801237c:	f107 030c 	add.w	r3, r7, #12
 8012380:	9300      	str	r3, [sp, #0]
 8012382:	4603      	mov	r3, r0
 8012384:	6878      	ldr	r0, [r7, #4]
 8012386:	f7fe f957 	bl	8010638 <phhalHw_Pn5180_BalExchange>
 801238a:	4603      	mov	r3, r0
 801238c:	82bb      	strh	r3, [r7, #20]
 801238e:	8abb      	ldrh	r3, [r7, #20]
 8012390:	2b00      	cmp	r3, #0
 8012392:	d001      	beq.n	8012398 <phhalHw_Pn5180_Instr_RfOn+0x74>
 8012394:	8abb      	ldrh	r3, [r7, #20]
 8012396:	e000      	b.n	801239a <phhalHw_Pn5180_Instr_RfOn+0x76>
        wBufferLength,
        bNumExpBytes,
        pData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 8012398:	2300      	movs	r3, #0

}
 801239a:	4618      	mov	r0, r3
 801239c:	3718      	adds	r7, #24
 801239e:	46bd      	mov	sp, r7
 80123a0:	bd80      	pop	{r7, pc}

080123a2 <phhalHw_Pn5180_Instr_RfOff>:

phStatus_t phhalHw_Pn5180_Instr_RfOff(
    phhalHw_Pn5180_DataParams_t * pDataParams
    )
{
 80123a2:	b580      	push	{r7, lr}
 80123a4:	b088      	sub	sp, #32
 80123a6:	af02      	add	r7, sp, #8
 80123a8:	6078      	str	r0, [r7, #4]
    uint8_t     PH_MEMLOC_REM bNumExpBytes;
    uint8_t     PH_MEMLOC_REM bDataBuffer[2];
    uint8_t     PH_MEMLOC_REM pData[1];

    /* Validate pDataParams */
    if (NULL == pDataParams)
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d102      	bne.n	80123b6 <phhalHw_Pn5180_Instr_RfOff+0x14>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80123b0:	f240 2321 	movw	r3, #545	@ 0x221
 80123b4:	e02b      	b.n	801240e <phhalHw_Pn5180_Instr_RfOff+0x6c>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 80123b6:	2300      	movs	r3, #0
 80123b8:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_FIELD_OFF;
 80123ba:	7dfb      	ldrb	r3, [r7, #23]
 80123bc:	1c5a      	adds	r2, r3, #1
 80123be:	75fa      	strb	r2, [r7, #23]
 80123c0:	3318      	adds	r3, #24
 80123c2:	443b      	add	r3, r7
 80123c4:	2217      	movs	r2, #23
 80123c6:	f803 2c08 	strb.w	r2, [r3, #-8]
    bDataBuffer[wBufferLength++] = 0U;
 80123ca:	7dfb      	ldrb	r3, [r7, #23]
 80123cc:	1c5a      	adds	r2, r3, #1
 80123ce:	75fa      	strb	r2, [r7, #23]
 80123d0:	3318      	adds	r3, #24
 80123d2:	443b      	add	r3, r7
 80123d4:	2200      	movs	r2, #0
 80123d6:	f803 2c08 	strb.w	r2, [r3, #-8]

    /* No Response expected*/
    bNumExpBytes = 0U;
 80123da:	2300      	movs	r3, #0
 80123dc:	75bb      	strb	r3, [r7, #22]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,
 80123de:	7dfb      	ldrb	r3, [r7, #23]
 80123e0:	b29a      	uxth	r2, r3
 80123e2:	7dbb      	ldrb	r3, [r7, #22]
 80123e4:	b298      	uxth	r0, r3
 80123e6:	f107 0110 	add.w	r1, r7, #16
 80123ea:	f107 0312 	add.w	r3, r7, #18
 80123ee:	9301      	str	r3, [sp, #4]
 80123f0:	f107 030c 	add.w	r3, r7, #12
 80123f4:	9300      	str	r3, [sp, #0]
 80123f6:	4603      	mov	r3, r0
 80123f8:	6878      	ldr	r0, [r7, #4]
 80123fa:	f7fe f91d 	bl	8010638 <phhalHw_Pn5180_BalExchange>
 80123fe:	4603      	mov	r3, r0
 8012400:	82bb      	strh	r3, [r7, #20]
 8012402:	8abb      	ldrh	r3, [r7, #20]
 8012404:	2b00      	cmp	r3, #0
 8012406:	d001      	beq.n	801240c <phhalHw_Pn5180_Instr_RfOff+0x6a>
 8012408:	8abb      	ldrh	r3, [r7, #20]
 801240a:	e000      	b.n	801240e <phhalHw_Pn5180_Instr_RfOff+0x6c>
        wBufferLength,
        bNumExpBytes,
        pData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 801240c:	2300      	movs	r3, #0

}
 801240e:	4618      	mov	r0, r3
 8012410:	3718      	adds	r7, #24
 8012412:	46bd      	mov	sp, r7
 8012414:	bd80      	pop	{r7, pc}

08012416 <phhalHw_Pn5180_GetTxBuffer>:
    uint8_t bIsExchange,
    uint8_t ** pTxBuffer,
    uint16_t * pTxBufferLen,
    uint16_t * pTxBufferSize
    )
{
 8012416:	b580      	push	{r7, lr}
 8012418:	b086      	sub	sp, #24
 801241a:	af02      	add	r7, sp, #8
 801241c:	60f8      	str	r0, [r7, #12]
 801241e:	607a      	str	r2, [r7, #4]
 8012420:	603b      	str	r3, [r7, #0]
 8012422:	460b      	mov	r3, r1
 8012424:	72fb      	strb	r3, [r7, #11]
    /* Exchange command -> RxBuffer overwriting is allowed */
    if (bIsExchange != PH_OFF)
 8012426:	7afb      	ldrb	r3, [r7, #11]
 8012428:	2b00      	cmp	r3, #0
 801242a:	d023      	beq.n	8012474 <phhalHw_Pn5180_GetTxBuffer+0x5e>
    {
        /* We need to watch that we do not overwrite content below the RxStartPos though */
        if (pDataParams->pTxBuffer == pDataParams->pRxBuffer)
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	68da      	ldr	r2, [r3, #12]
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	695b      	ldr	r3, [r3, #20]
 8012434:	429a      	cmp	r2, r3
 8012436:	d10f      	bne.n	8012458 <phhalHw_Pn5180_GetTxBuffer+0x42>
        {
            *pTxBuffer = &pDataParams->pTxBuffer[pDataParams->wRxBufStartPos];
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	68db      	ldr	r3, [r3, #12]
 801243c:	68fa      	ldr	r2, [r7, #12]
 801243e:	8bd2      	ldrh	r2, [r2, #30]
 8012440:	441a      	add	r2, r3
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	601a      	str	r2, [r3, #0]
            *pTxBufferSize = pDataParams->wTxBufSize - pDataParams->wRxBufStartPos;
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	8a1a      	ldrh	r2, [r3, #16]
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	8bdb      	ldrh	r3, [r3, #30]
 801244e:	1ad3      	subs	r3, r2, r3
 8012450:	b29a      	uxth	r2, r3
 8012452:	69bb      	ldr	r3, [r7, #24]
 8012454:	801a      	strh	r2, [r3, #0]
 8012456:	e007      	b.n	8012468 <phhalHw_Pn5180_GetTxBuffer+0x52>
        }
        /* Else just return the actual Buffer */
        else
        {
            *pTxBuffer = pDataParams->pTxBuffer;
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	68da      	ldr	r2, [r3, #12]
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	601a      	str	r2, [r3, #0]
            *pTxBufferSize = pDataParams->wTxBufSize;
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	8a1a      	ldrh	r2, [r3, #16]
 8012464:	69bb      	ldr	r3, [r7, #24]
 8012466:	801a      	strh	r2, [r3, #0]
        }

        /* Return stored length */
        *pTxBufferLen = pDataParams->wTxBufLen;
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	8a5a      	ldrh	r2, [r3, #18]
 801246c:	683b      	ldr	r3, [r7, #0]
 801246e:	801a      	strh	r2, [r3, #0]
    {
        /* Redundant code */
        return phhalHw_Pn5180_GetRxBuffer(pDataParams, bIsExchange, pTxBuffer, pTxBufferLen, pTxBufferSize);
    }

    return PH_ERR_SUCCESS;
 8012470:	2300      	movs	r3, #0
 8012472:	e008      	b.n	8012486 <phhalHw_Pn5180_GetTxBuffer+0x70>
        return phhalHw_Pn5180_GetRxBuffer(pDataParams, bIsExchange, pTxBuffer, pTxBufferLen, pTxBufferSize);
 8012474:	7af9      	ldrb	r1, [r7, #11]
 8012476:	69bb      	ldr	r3, [r7, #24]
 8012478:	9300      	str	r3, [sp, #0]
 801247a:	683b      	ldr	r3, [r7, #0]
 801247c:	687a      	ldr	r2, [r7, #4]
 801247e:	68f8      	ldr	r0, [r7, #12]
 8012480:	f000 f805 	bl	801248e <phhalHw_Pn5180_GetRxBuffer>
 8012484:	4603      	mov	r3, r0
}
 8012486:	4618      	mov	r0, r3
 8012488:	3710      	adds	r7, #16
 801248a:	46bd      	mov	sp, r7
 801248c:	bd80      	pop	{r7, pc}

0801248e <phhalHw_Pn5180_GetRxBuffer>:
    uint8_t bIsExchange,
    uint8_t ** pRxBuffer,
    uint16_t * pRxBufferLen,
    uint16_t * pRxBufferSize
    )
{
 801248e:	b480      	push	{r7}
 8012490:	b087      	sub	sp, #28
 8012492:	af00      	add	r7, sp, #0
 8012494:	60f8      	str	r0, [r7, #12]
 8012496:	607a      	str	r2, [r7, #4]
 8012498:	603b      	str	r3, [r7, #0]
 801249a:	460b      	mov	r3, r1
 801249c:	72fb      	strb	r3, [r7, #11]
    uint8_t bOffset = 0U;
 801249e:	2300      	movs	r3, #0
 80124a0:	75fb      	strb	r3, [r7, #23]

    /* Exchange command -> TxBuffer overwriting is allowed */
    if (bIsExchange != PH_OFF)
 80124a2:	7afb      	ldrb	r3, [r7, #11]
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d021      	beq.n	80124ec <phhalHw_Pn5180_GetRxBuffer+0x5e>
    {
#ifndef PN5180_P2P_HW_SYNC_BYTE
        if (pDataParams->bNfcipMode == PH_ON)
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80124ae:	2b01      	cmp	r3, #1
 80124b0:	d101      	bne.n	80124b6 <phhalHw_Pn5180_GetRxBuffer+0x28>
        {
            bOffset = 1U;
 80124b2:	2301      	movs	r3, #1
 80124b4:	75fb      	strb	r3, [r7, #23]
        }
#endif
        *pRxBuffer = &pDataParams->pRxBuffer[pDataParams->wRxBufStartPos - bOffset];
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	695b      	ldr	r3, [r3, #20]
 80124ba:	68fa      	ldr	r2, [r7, #12]
 80124bc:	8bd2      	ldrh	r2, [r2, #30]
 80124be:	4611      	mov	r1, r2
 80124c0:	7dfa      	ldrb	r2, [r7, #23]
 80124c2:	1a8a      	subs	r2, r1, r2
 80124c4:	441a      	add	r2, r3
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	601a      	str	r2, [r3, #0]
        *pRxBufferSize = pDataParams->wRxBufSize - pDataParams->wRxBufStartPos - bOffset;
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	8b1a      	ldrh	r2, [r3, #24]
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	8bdb      	ldrh	r3, [r3, #30]
 80124d2:	1ad3      	subs	r3, r2, r3
 80124d4:	b29a      	uxth	r2, r3
 80124d6:	7dfb      	ldrb	r3, [r7, #23]
 80124d8:	b29b      	uxth	r3, r3
 80124da:	1ad3      	subs	r3, r2, r3
 80124dc:	b29a      	uxth	r2, r3
 80124de:	6a3b      	ldr	r3, [r7, #32]
 80124e0:	801a      	strh	r2, [r3, #0]
        *pRxBufferLen = pDataParams->wRxBufLen;
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	8b5a      	ldrh	r2, [r3, #26]
 80124e6:	683b      	ldr	r3, [r7, #0]
 80124e8:	801a      	strh	r2, [r3, #0]
 80124ea:	e055      	b.n	8012598 <phhalHw_Pn5180_GetRxBuffer+0x10a>
    }
    /* Normal command -> do not overwrite Tx- and Rx-Contents */
    else
    {
        /* Command buffering is NOT supported by this HAL */
        *pRxBufferLen = 0U;
 80124ec:	683b      	ldr	r3, [r7, #0]
 80124ee:	2200      	movs	r2, #0
 80124f0:	801a      	strh	r2, [r3, #0]

        /* TxBuffer equals RxBuffer */
        /* And the buffer contains something that needs to be preserved */
        if ((pDataParams->pTxBuffer == pDataParams->pRxBuffer) &&
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	68da      	ldr	r2, [r3, #12]
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	695b      	ldr	r3, [r3, #20]
 80124fa:	429a      	cmp	r2, r3
 80124fc:	d11f      	bne.n	801253e <phhalHw_Pn5180_GetRxBuffer+0xb0>
            ((pDataParams->wTxBufLen != 0U) || (pDataParams->wRxBufStartPos != 0U)))
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	8a5b      	ldrh	r3, [r3, #18]
        if ((pDataParams->pTxBuffer == pDataParams->pRxBuffer) &&
 8012502:	2b00      	cmp	r3, #0
 8012504:	d103      	bne.n	801250e <phhalHw_Pn5180_GetRxBuffer+0x80>
            ((pDataParams->wTxBufLen != 0U) || (pDataParams->wRxBufStartPos != 0U)))
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	8bdb      	ldrh	r3, [r3, #30]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d017      	beq.n	801253e <phhalHw_Pn5180_GetRxBuffer+0xb0>
        {
            /* Start at TxLenght if neccessary */
            if ((pDataParams->wRxBufStartPos + pDataParams->wTxBufLen) >= pDataParams->wRxBufStartPos)
            {
                *pRxBuffer = &pDataParams->pTxBuffer[pDataParams->wRxBufStartPos + pDataParams->wTxBufLen];
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	68db      	ldr	r3, [r3, #12]
 8012512:	68fa      	ldr	r2, [r7, #12]
 8012514:	8bd2      	ldrh	r2, [r2, #30]
 8012516:	4611      	mov	r1, r2
 8012518:	68fa      	ldr	r2, [r7, #12]
 801251a:	8a52      	ldrh	r2, [r2, #18]
 801251c:	440a      	add	r2, r1
 801251e:	441a      	add	r2, r3
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	601a      	str	r2, [r3, #0]
                *pRxBufferSize = pDataParams->wTxBufSize - (pDataParams->wRxBufStartPos + pDataParams->wTxBufLen);
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	8a1a      	ldrh	r2, [r3, #16]
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	8bd9      	ldrh	r1, [r3, #30]
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	8a5b      	ldrh	r3, [r3, #18]
 8012530:	440b      	add	r3, r1
 8012532:	b29b      	uxth	r3, r3
 8012534:	1ad3      	subs	r3, r2, r3
 8012536:	b29a      	uxth	r2, r3
 8012538:	6a3b      	ldr	r3, [r7, #32]
 801253a:	801a      	strh	r2, [r3, #0]
            if ((pDataParams->wRxBufStartPos + pDataParams->wTxBufLen) >= pDataParams->wRxBufStartPos)
 801253c:	e02c      	b.n	8012598 <phhalHw_Pn5180_GetRxBuffer+0x10a>
        }
        /* Buffers are different */
        else
        {
            /* Use TxBuffer if it has more space than RxBuffer */
            if ((pDataParams->wTxBufSize - pDataParams->wTxBufLen) >= (pDataParams->wRxBufSize - pDataParams->wRxBufStartPos))
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	8a1b      	ldrh	r3, [r3, #16]
 8012542:	461a      	mov	r2, r3
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	8a5b      	ldrh	r3, [r3, #18]
 8012548:	1ad2      	subs	r2, r2, r3
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	8b1b      	ldrh	r3, [r3, #24]
 801254e:	4619      	mov	r1, r3
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	8bdb      	ldrh	r3, [r3, #30]
 8012554:	1acb      	subs	r3, r1, r3
 8012556:	429a      	cmp	r2, r3
 8012558:	db0f      	blt.n	801257a <phhalHw_Pn5180_GetRxBuffer+0xec>
            {
                *pRxBuffer = &pDataParams->pTxBuffer[pDataParams->wTxBufLen];
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	68db      	ldr	r3, [r3, #12]
 801255e:	68fa      	ldr	r2, [r7, #12]
 8012560:	8a52      	ldrh	r2, [r2, #18]
 8012562:	441a      	add	r2, r3
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	601a      	str	r2, [r3, #0]
                *pRxBufferSize = pDataParams->wTxBufSize - pDataParams->wTxBufLen;
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	8a1a      	ldrh	r2, [r3, #16]
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	8a5b      	ldrh	r3, [r3, #18]
 8012570:	1ad3      	subs	r3, r2, r3
 8012572:	b29a      	uxth	r2, r3
 8012574:	6a3b      	ldr	r3, [r7, #32]
 8012576:	801a      	strh	r2, [r3, #0]
 8012578:	e00e      	b.n	8012598 <phhalHw_Pn5180_GetRxBuffer+0x10a>
            }
            /* Else use RxBuffer */
            else
            {
                *pRxBuffer = &pDataParams->pRxBuffer[pDataParams->wRxBufStartPos];
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	695b      	ldr	r3, [r3, #20]
 801257e:	68fa      	ldr	r2, [r7, #12]
 8012580:	8bd2      	ldrh	r2, [r2, #30]
 8012582:	441a      	add	r2, r3
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	601a      	str	r2, [r3, #0]
                *pRxBufferSize = pDataParams->wRxBufSize - pDataParams->wRxBufStartPos;
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	8b1a      	ldrh	r2, [r3, #24]
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	8bdb      	ldrh	r3, [r3, #30]
 8012590:	1ad3      	subs	r3, r2, r3
 8012592:	b29a      	uxth	r2, r3
 8012594:	6a3b      	ldr	r3, [r7, #32]
 8012596:	801a      	strh	r2, [r3, #0]
            }
        }
    }

    return PH_ERR_SUCCESS;
 8012598:	2300      	movs	r3, #0
}
 801259a:	4618      	mov	r0, r3
 801259c:	371c      	adds	r7, #28
 801259e:	46bd      	mov	sp, r7
 80125a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a4:	4770      	bx	lr

080125a6 <phhalHw_Pn5180_ReadData>:
phStatus_t phhalHw_Pn5180_ReadData(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t ** ppData,
    uint16_t * pBytesRead
    )
{
 80125a6:	b580      	push	{r7, lr}
 80125a8:	b086      	sub	sp, #24
 80125aa:	af00      	add	r7, sp, #0
 80125ac:	60f8      	str	r0, [r7, #12]
 80125ae:	60b9      	str	r1, [r7, #8]
 80125b0:	607a      	str	r2, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp = PH_ERR_SUCCESS;
 80125b2:	2300      	movs	r3, #0
 80125b4:	82bb      	strh	r3, [r7, #20]

    uint16_t    PH_MEMLOC_REM wNumExpBytes;
    uint32_t    PH_MEMLOC_REM dwValue;

    /* Read the RX_STATUS */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_ReadRegister(
 80125b6:	f107 0310 	add.w	r3, r7, #16
 80125ba:	461a      	mov	r2, r3
 80125bc:	2113      	movs	r1, #19
 80125be:	68f8      	ldr	r0, [r7, #12]
 80125c0:	f7fb fb5c 	bl	800dc7c <phhalHw_Pn5180_ReadRegister>
 80125c4:	4603      	mov	r3, r0
 80125c6:	82bb      	strh	r3, [r7, #20]
 80125c8:	8abb      	ldrh	r3, [r7, #20]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d001      	beq.n	80125d2 <phhalHw_Pn5180_ReadData+0x2c>
 80125ce:	8abb      	ldrh	r3, [r7, #20]
 80125d0:	e02d      	b.n	801262e <phhalHw_Pn5180_ReadData+0x88>
        pDataParams,
        RX_STATUS,
        &dwValue));

    if(pDataParams->bRxMultiple == PH_ON)
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80125d8:	2b01      	cmp	r3, #1
 80125da:	d10f      	bne.n	80125fc <phhalHw_Pn5180_ReadData+0x56>
    {
        wNumExpBytes = (uint16_t)((dwValue & RX_STATUS_RX_NUM_BYTES_RECEIVED_MASK) |
 80125dc:	693b      	ldr	r3, [r7, #16]
 80125de:	b29b      	uxth	r3, r3
 80125e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80125e4:	b29a      	uxth	r2, r3
            (((dwValue & RX_STATUS_RX_NUM_FRAMES_RECEIVED_MASK) >>
 80125e6:	693b      	ldr	r3, [r7, #16]
 80125e8:	0a5b      	lsrs	r3, r3, #9
        wNumExpBytes = (uint16_t)((dwValue & RX_STATUS_RX_NUM_BYTES_RECEIVED_MASK) |
 80125ea:	b29b      	uxth	r3, r3
 80125ec:	f003 030f 	and.w	r3, r3, #15
 80125f0:	b29b      	uxth	r3, r3
 80125f2:	015b      	lsls	r3, r3, #5
 80125f4:	b29b      	uxth	r3, r3
 80125f6:	4313      	orrs	r3, r2
 80125f8:	82fb      	strh	r3, [r7, #22]
 80125fa:	e004      	b.n	8012606 <phhalHw_Pn5180_ReadData+0x60>
            RX_STATUS_RX_NUM_FRAMES_RECEIVED_POS) * 32U));
    }
    else
    {
        wNumExpBytes = (uint16_t)(dwValue & RX_STATUS_RX_NUM_BYTES_RECEIVED_MASK);
 80125fc:	693b      	ldr	r3, [r7, #16]
 80125fe:	b29b      	uxth	r3, r3
 8012600:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012604:	82fb      	strh	r3, [r7, #22]
    }

    if(wNumExpBytes != 0U)
 8012606:	8afb      	ldrh	r3, [r7, #22]
 8012608:	2b00      	cmp	r3, #0
 801260a:	d00c      	beq.n	8012626 <phhalHw_Pn5180_ReadData+0x80>
    {
        /* Prepare the command for reading the RX FIFO of the Pn5180 */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_RetrieveRxData(
 801260c:	8afb      	ldrh	r3, [r7, #22]
 801260e:	461a      	mov	r2, r3
 8012610:	68b9      	ldr	r1, [r7, #8]
 8012612:	68f8      	ldr	r0, [r7, #12]
 8012614:	f7ff fb52 	bl	8011cbc <phhalHw_Pn5180_Instr_RetrieveRxData>
 8012618:	4603      	mov	r3, r0
 801261a:	82bb      	strh	r3, [r7, #20]
 801261c:	8abb      	ldrh	r3, [r7, #20]
 801261e:	2b00      	cmp	r3, #0
 8012620:	d001      	beq.n	8012626 <phhalHw_Pn5180_ReadData+0x80>
 8012622:	8abb      	ldrh	r3, [r7, #20]
 8012624:	e003      	b.n	801262e <phhalHw_Pn5180_ReadData+0x88>
            ppData,
            wNumExpBytes));
    }

    /* Update the actual number of bytes received */
    *pBytesRead = wNumExpBytes;
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	8afa      	ldrh	r2, [r7, #22]
 801262a:	801a      	strh	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 801262c:	2300      	movs	r3, #0
}
 801262e:	4618      	mov	r0, r3
 8012630:	3718      	adds	r7, #24
 8012632:	46bd      	mov	sp, r7
 8012634:	bd80      	pop	{r7, pc}

08012636 <phhalHw_Pn5180_TimerStart>:
    uint32_t dwStartCond,
    uint32_t dwStopCond,
    uint32_t wPrescaler,
    uint32_t dwLoadValue
    )
{
 8012636:	b580      	push	{r7, lr}
 8012638:	b08e      	sub	sp, #56	@ 0x38
 801263a:	af00      	add	r7, sp, #0
 801263c:	60f8      	str	r0, [r7, #12]
 801263e:	607a      	str	r2, [r7, #4]
 8012640:	603b      	str	r3, [r7, #0]
 8012642:	460b      	mov	r3, r1
 8012644:	72fb      	strb	r3, [r7, #11]
    uint8_t     PH_MEMLOC_BUF wRegTypeValueSets[18];
    uint16_t    PH_MEMLOC_REM wSizeOfRegTypeValueSets;

    /* Populate the timer configure and reload registers */

    switch(bTimer)
 8012646:	7afb      	ldrb	r3, [r7, #11]
 8012648:	2b10      	cmp	r3, #16
 801264a:	d018      	beq.n	801267e <phhalHw_Pn5180_TimerStart+0x48>
 801264c:	2b10      	cmp	r3, #16
 801264e:	dc1f      	bgt.n	8012690 <phhalHw_Pn5180_TimerStart+0x5a>
 8012650:	2b0e      	cmp	r3, #14
 8012652:	d002      	beq.n	801265a <phhalHw_Pn5180_TimerStart+0x24>
 8012654:	2b0f      	cmp	r3, #15
 8012656:	d009      	beq.n	801266c <phhalHw_Pn5180_TimerStart+0x36>
 8012658:	e01a      	b.n	8012690 <phhalHw_Pn5180_TimerStart+0x5a>
    {
    case TIMER0_CONFIG:
        bTmrConfigReg = TIMER0_CONFIG;
 801265a:	230e      	movs	r3, #14
 801265c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        bTmrRelaodReg = TIMER0_RELOAD;
 8012660:	230b      	movs	r3, #11
 8012662:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        dwEnableMask = TIMER0_CONFIG_T0_ENABLE_MASK;
 8012666:	2301      	movs	r3, #1
 8012668:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 801266a:	e014      	b.n	8012696 <phhalHw_Pn5180_TimerStart+0x60>

    case TIMER1_CONFIG:
        bTmrConfigReg = TIMER1_CONFIG;
 801266c:	230f      	movs	r3, #15
 801266e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        bTmrRelaodReg = TIMER1_RELOAD;
 8012672:	230c      	movs	r3, #12
 8012674:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        dwEnableMask = TIMER1_CONFIG_T1_ENABLE_MASK;
 8012678:	2301      	movs	r3, #1
 801267a:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 801267c:	e00b      	b.n	8012696 <phhalHw_Pn5180_TimerStart+0x60>

    case TIMER2_CONFIG:
        bTmrConfigReg = TIMER2_CONFIG;
 801267e:	2310      	movs	r3, #16
 8012680:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        bTmrRelaodReg = TIMER2_RELOAD;
 8012684:	230d      	movs	r3, #13
 8012686:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        dwEnableMask = TIMER2_CONFIG_T2_ENABLE_MASK;
 801268a:	2301      	movs	r3, #1
 801268c:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 801268e:	e002      	b.n	8012696 <phhalHw_Pn5180_TimerStart+0x60>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012690:	f240 2321 	movw	r3, #545	@ 0x221
 8012694:	e0bd      	b.n	8012812 <phhalHw_Pn5180_TimerStart+0x1dc>
    }

    /*write 0 to stop timer*/
    wSizeOfRegTypeValueSets = 0U;
 8012696:	2300      	movs	r3, #0
 8012698:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = bTmrConfigReg;
 801269a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801269c:	1c5a      	adds	r2, r3, #1
 801269e:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 80126a0:	3338      	adds	r3, #56	@ 0x38
 80126a2:	443b      	add	r3, r7
 80126a4:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80126a8:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE;
 80126ac:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80126ae:	1c5a      	adds	r2, r3, #1
 80126b0:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 80126b2:	3338      	adds	r3, #56	@ 0x38
 80126b4:	443b      	add	r3, r7
 80126b6:	2201      	movs	r2, #1
 80126b8:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 80126bc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80126be:	1c5a      	adds	r2, r3, #1
 80126c0:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 80126c2:	3338      	adds	r3, #56	@ 0x38
 80126c4:	443b      	add	r3, r7
 80126c6:	2200      	movs	r2, #0
 80126c8:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 80126cc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80126ce:	1c5a      	adds	r2, r3, #1
 80126d0:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 80126d2:	3338      	adds	r3, #56	@ 0x38
 80126d4:	443b      	add	r3, r7
 80126d6:	2200      	movs	r2, #0
 80126d8:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 80126dc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80126de:	1c5a      	adds	r2, r3, #1
 80126e0:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 80126e2:	3338      	adds	r3, #56	@ 0x38
 80126e4:	443b      	add	r3, r7
 80126e6:	2200      	movs	r2, #0
 80126e8:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 80126ec:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80126ee:	1c5a      	adds	r2, r3, #1
 80126f0:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 80126f2:	3338      	adds	r3, #56	@ 0x38
 80126f4:	443b      	add	r3, r7
 80126f6:	2200      	movs	r2, #0
 80126f8:	f803 2c24 	strb.w	r2, [r3, #-36]

    /*load the timer  reload value*/
    dwTemp = (dwLoadValue & TMR_RELOAD_VALUE_MASK);
 80126fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80126fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012702:	62bb      	str	r3, [r7, #40]	@ 0x28
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = bTmrRelaodReg;
 8012704:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012706:	1c5a      	adds	r2, r3, #1
 8012708:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 801270a:	3338      	adds	r3, #56	@ 0x38
 801270c:	443b      	add	r3, r7
 801270e:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8012712:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE;
 8012716:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012718:	1c5a      	adds	r2, r3, #1
 801271a:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 801271c:	3338      	adds	r3, #56	@ 0x38
 801271e:	443b      	add	r3, r7
 8012720:	2201      	movs	r2, #1
 8012722:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 8012726:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012728:	1c5a      	adds	r2, r3, #1
 801272a:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 801272c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801272e:	b2d2      	uxtb	r2, r2
 8012730:	3338      	adds	r3, #56	@ 0x38
 8012732:	443b      	add	r3, r7
 8012734:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 8012738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801273a:	0a1a      	lsrs	r2, r3, #8
 801273c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801273e:	1c59      	adds	r1, r3, #1
 8012740:	85f9      	strh	r1, [r7, #46]	@ 0x2e
 8012742:	b2d2      	uxtb	r2, r2
 8012744:	3338      	adds	r3, #56	@ 0x38
 8012746:	443b      	add	r3, r7
 8012748:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 801274c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801274e:	0c1a      	lsrs	r2, r3, #16
 8012750:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012752:	1c59      	adds	r1, r3, #1
 8012754:	85f9      	strh	r1, [r7, #46]	@ 0x2e
 8012756:	b2d2      	uxtb	r2, r2
 8012758:	3338      	adds	r3, #56	@ 0x38
 801275a:	443b      	add	r3, r7
 801275c:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 8012760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012762:	0e1a      	lsrs	r2, r3, #24
 8012764:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012766:	1c59      	adds	r1, r3, #1
 8012768:	85f9      	strh	r1, [r7, #46]	@ 0x2e
 801276a:	b2d2      	uxtb	r2, r2
 801276c:	3338      	adds	r3, #56	@ 0x38
 801276e:	443b      	add	r3, r7
 8012770:	f803 2c24 	strb.w	r2, [r3, #-36]

    /* Timer MODE_SEL is defined by ePrescaler, 0x01U enables the timer */
    dwTemp = (dwStartCond | dwStopCond | wPrescaler | dwEnableMask );
 8012774:	687a      	ldr	r2, [r7, #4]
 8012776:	683b      	ldr	r3, [r7, #0]
 8012778:	431a      	orrs	r2, r3
 801277a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801277c:	4313      	orrs	r3, r2
 801277e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012780:	4313      	orrs	r3, r2
 8012782:	62bb      	str	r3, [r7, #40]	@ 0x28
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = bTmrConfigReg;
 8012784:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012786:	1c5a      	adds	r2, r3, #1
 8012788:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 801278a:	3338      	adds	r3, #56	@ 0x38
 801278c:	443b      	add	r3, r7
 801278e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8012792:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE;
 8012796:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012798:	1c5a      	adds	r2, r3, #1
 801279a:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 801279c:	3338      	adds	r3, #56	@ 0x38
 801279e:	443b      	add	r3, r7
 80127a0:	2201      	movs	r2, #1
 80127a2:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 80127a6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80127a8:	1c5a      	adds	r2, r3, #1
 80127aa:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 80127ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80127ae:	b2d2      	uxtb	r2, r2
 80127b0:	3338      	adds	r3, #56	@ 0x38
 80127b2:	443b      	add	r3, r7
 80127b4:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 80127b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127ba:	0a1a      	lsrs	r2, r3, #8
 80127bc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80127be:	1c59      	adds	r1, r3, #1
 80127c0:	85f9      	strh	r1, [r7, #46]	@ 0x2e
 80127c2:	b2d2      	uxtb	r2, r2
 80127c4:	3338      	adds	r3, #56	@ 0x38
 80127c6:	443b      	add	r3, r7
 80127c8:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 80127cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127ce:	0c1a      	lsrs	r2, r3, #16
 80127d0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80127d2:	1c59      	adds	r1, r3, #1
 80127d4:	85f9      	strh	r1, [r7, #46]	@ 0x2e
 80127d6:	b2d2      	uxtb	r2, r2
 80127d8:	3338      	adds	r3, #56	@ 0x38
 80127da:	443b      	add	r3, r7
 80127dc:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 80127e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127e2:	0e1a      	lsrs	r2, r3, #24
 80127e4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80127e6:	1c59      	adds	r1, r3, #1
 80127e8:	85f9      	strh	r1, [r7, #46]	@ 0x2e
 80127ea:	b2d2      	uxtb	r2, r2
 80127ec:	3338      	adds	r3, #56	@ 0x38
 80127ee:	443b      	add	r3, r7
 80127f0:	f803 2c24 	strb.w	r2, [r3, #-36]

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple( pDataParams, wRegTypeValueSets, wSizeOfRegTypeValueSets));
 80127f4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80127f6:	f107 0314 	add.w	r3, r7, #20
 80127fa:	4619      	mov	r1, r3
 80127fc:	68f8      	ldr	r0, [r7, #12]
 80127fe:	f7fe ff9b 	bl	8011738 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 8012802:	4603      	mov	r3, r0
 8012804:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8012806:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012808:	2b00      	cmp	r3, #0
 801280a:	d001      	beq.n	8012810 <phhalHw_Pn5180_TimerStart+0x1da>
 801280c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801280e:	e000      	b.n	8012812 <phhalHw_Pn5180_TimerStart+0x1dc>

    return PH_ERR_SUCCESS;
 8012810:	2300      	movs	r3, #0
}
 8012812:	4618      	mov	r0, r3
 8012814:	3738      	adds	r7, #56	@ 0x38
 8012816:	46bd      	mov	sp, r7
 8012818:	bd80      	pop	{r7, pc}
	...

0801281c <phhalHw_Pn5180_SetConfig_Int>:
phStatus_t phhalHw_Pn5180_SetConfig_Int(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wConfig,
    uint16_t wValue
    )
{
 801281c:	b580      	push	{r7, lr}
 801281e:	b088      	sub	sp, #32
 8012820:	af00      	add	r7, sp, #0
 8012822:	6078      	str	r0, [r7, #4]
 8012824:	460b      	mov	r3, r1
 8012826:	807b      	strh	r3, [r7, #2]
 8012828:	4613      	mov	r3, r2
 801282a:	803b      	strh	r3, [r7, #0]
    uint32_t    PH_MEMLOC_REM dwValue;
    uint8_t     PH_MEMLOC_BUF wRegTypeValueSets[12];
    uint16_t    PH_MEMLOC_REM wSizeOfRegTypeValueSets;
    uint32_t    PH_MEMLOC_REM dwTemp;

    switch(wConfig)
 801282c:	887b      	ldrh	r3, [r7, #2]
 801282e:	2b0c      	cmp	r3, #12
 8012830:	f200 81ad 	bhi.w	8012b8e <phhalHw_Pn5180_SetConfig_Int+0x372>
 8012834:	a201      	add	r2, pc, #4	@ (adr r2, 801283c <phhalHw_Pn5180_SetConfig_Int+0x20>)
 8012836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801283a:	bf00      	nop
 801283c:	08012871 	.word	0x08012871
 8012840:	080128eb 	.word	0x080128eb
 8012844:	08012a2b 	.word	0x08012a2b
 8012848:	08012b8f 	.word	0x08012b8f
 801284c:	08012b8f 	.word	0x08012b8f
 8012850:	08012b8f 	.word	0x08012b8f
 8012854:	08012b8f 	.word	0x08012b8f
 8012858:	08012b8f 	.word	0x08012b8f
 801285c:	08012b8f 	.word	0x08012b8f
 8012860:	08012b8f 	.word	0x08012b8f
 8012864:	08012b8f 	.word	0x08012b8f
 8012868:	08012b8f 	.word	0x08012b8f
 801286c:	08012b69 	.word	0x08012b69
    {
    case PHHAL_HW_CONFIG_PARITY:

        /* Tx-Parity,  Rx-Parity is OFF */
        if (wValue == PH_OFF)
 8012870:	883b      	ldrh	r3, [r7, #0]
 8012872:	2b00      	cmp	r3, #0
 8012874:	d11e      	bne.n	80128b4 <phhalHw_Pn5180_SetConfig_Int+0x98>
        {
            dwValue = (uint32_t)~(uint32_t)TX_CONFIG_TX_PARITY_ENABLE_MASK;
 8012876:	f46f 6300 	mvn.w	r3, #2048	@ 0x800
 801287a:	617b      	str	r3, [r7, #20]
            /* Perform write */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, TX_CONFIG, dwValue));
 801287c:	697a      	ldr	r2, [r7, #20]
 801287e:	2118      	movs	r1, #24
 8012880:	6878      	ldr	r0, [r7, #4]
 8012882:	f7fe fee3 	bl	801164c <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 8012886:	4603      	mov	r3, r0
 8012888:	837b      	strh	r3, [r7, #26]
 801288a:	8b7b      	ldrh	r3, [r7, #26]
 801288c:	2b00      	cmp	r3, #0
 801288e:	d001      	beq.n	8012894 <phhalHw_Pn5180_SetConfig_Int+0x78>
 8012890:	8b7b      	ldrh	r3, [r7, #26]
 8012892:	e187      	b.n	8012ba4 <phhalHw_Pn5180_SetConfig_Int+0x388>

            dwValue = (uint32_t)~(uint32_t)CRC_RX_CONFIG_RX_PARITY_ENABLE_MASK;
 8012894:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8012898:	617b      	str	r3, [r7, #20]
            /* Perform write */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, CRC_RX_CONFIG, dwValue));
 801289a:	697a      	ldr	r2, [r7, #20]
 801289c:	2112      	movs	r1, #18
 801289e:	6878      	ldr	r0, [r7, #4]
 80128a0:	f7fe fed4 	bl	801164c <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 80128a4:	4603      	mov	r3, r0
 80128a6:	837b      	strh	r3, [r7, #26]
 80128a8:	8b7b      	ldrh	r3, [r7, #26]
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	f000 8172 	beq.w	8012b94 <phhalHw_Pn5180_SetConfig_Int+0x378>
 80128b0:	8b7b      	ldrh	r3, [r7, #26]
 80128b2:	e177      	b.n	8012ba4 <phhalHw_Pn5180_SetConfig_Int+0x388>
        }
        else
        {
            /* Turn ON Tx-Parity */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, TX_CONFIG, TX_CONFIG_TX_PARITY_ENABLE_MASK));
 80128b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80128b8:	2118      	movs	r1, #24
 80128ba:	6878      	ldr	r0, [r7, #4]
 80128bc:	f7fe fe50 	bl	8011560 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 80128c0:	4603      	mov	r3, r0
 80128c2:	837b      	strh	r3, [r7, #26]
 80128c4:	8b7b      	ldrh	r3, [r7, #26]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d001      	beq.n	80128ce <phhalHw_Pn5180_SetConfig_Int+0xb2>
 80128ca:	8b7b      	ldrh	r3, [r7, #26]
 80128cc:	e16a      	b.n	8012ba4 <phhalHw_Pn5180_SetConfig_Int+0x388>

            /* Turn ON Rx-Parity */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, CRC_RX_CONFIG, CRC_RX_CONFIG_RX_PARITY_ENABLE_MASK));
 80128ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80128d2:	2112      	movs	r1, #18
 80128d4:	6878      	ldr	r0, [r7, #4]
 80128d6:	f7fe fe43 	bl	8011560 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 80128da:	4603      	mov	r3, r0
 80128dc:	837b      	strh	r3, [r7, #26]
 80128de:	8b7b      	ldrh	r3, [r7, #26]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	f000 8157 	beq.w	8012b94 <phhalHw_Pn5180_SetConfig_Int+0x378>
 80128e6:	8b7b      	ldrh	r3, [r7, #26]
 80128e8:	e15c      	b.n	8012ba4 <phhalHw_Pn5180_SetConfig_Int+0x388>

        break;

    case PHHAL_HW_CONFIG_TXCRC:

        if (wValue == PH_OFF)
 80128ea:	883b      	ldrh	r3, [r7, #0]
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d10f      	bne.n	8012910 <phhalHw_Pn5180_SetConfig_Int+0xf4>
        {
            /* CRC calculator, your services are not required */
            dwValue = (uint32_t)~(uint32_t)CRC_TX_CONFIG_TX_CRC_ENABLE_MASK;
 80128f0:	f06f 0301 	mvn.w	r3, #1
 80128f4:	617b      	str	r3, [r7, #20]

            /* Perform write */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, CRC_TX_CONFIG, dwValue));
 80128f6:	697a      	ldr	r2, [r7, #20]
 80128f8:	2119      	movs	r1, #25
 80128fa:	6878      	ldr	r0, [r7, #4]
 80128fc:	f7fe fea6 	bl	801164c <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 8012900:	4603      	mov	r3, r0
 8012902:	837b      	strh	r3, [r7, #26]
 8012904:	8b7b      	ldrh	r3, [r7, #26]
 8012906:	2b00      	cmp	r3, #0
 8012908:	f000 8146 	beq.w	8012b98 <phhalHw_Pn5180_SetConfig_Int+0x37c>
 801290c:	8b7b      	ldrh	r3, [r7, #26]
 801290e:	e149      	b.n	8012ba4 <phhalHw_Pn5180_SetConfig_Int+0x388>
        }
        else
        {

            wSizeOfRegTypeValueSets = 0U;
 8012910:	2300      	movs	r3, #0
 8012912:	833b      	strh	r3, [r7, #24]

            /*Clear the Bits*/
            dwTemp = (uint32_t) ~( CRC_TX_CONFIG_TX_CRC_TYPE_MASK);
 8012914:	f06f 0304 	mvn.w	r3, #4
 8012918:	61fb      	str	r3, [r7, #28]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_TX_CONFIG;
 801291a:	8b3b      	ldrh	r3, [r7, #24]
 801291c:	1c5a      	adds	r2, r3, #1
 801291e:	833a      	strh	r2, [r7, #24]
 8012920:	3320      	adds	r3, #32
 8012922:	443b      	add	r3, r7
 8012924:	2219      	movs	r2, #25
 8012926:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 801292a:	8b3b      	ldrh	r3, [r7, #24]
 801292c:	1c5a      	adds	r2, r3, #1
 801292e:	833a      	strh	r2, [r7, #24]
 8012930:	3320      	adds	r3, #32
 8012932:	443b      	add	r3, r7
 8012934:	2203      	movs	r2, #3
 8012936:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 801293a:	8b3b      	ldrh	r3, [r7, #24]
 801293c:	1c5a      	adds	r2, r3, #1
 801293e:	833a      	strh	r2, [r7, #24]
 8012940:	69fa      	ldr	r2, [r7, #28]
 8012942:	b2d2      	uxtb	r2, r2
 8012944:	3320      	adds	r3, #32
 8012946:	443b      	add	r3, r7
 8012948:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 801294c:	69fb      	ldr	r3, [r7, #28]
 801294e:	0a1a      	lsrs	r2, r3, #8
 8012950:	8b3b      	ldrh	r3, [r7, #24]
 8012952:	1c59      	adds	r1, r3, #1
 8012954:	8339      	strh	r1, [r7, #24]
 8012956:	b2d2      	uxtb	r2, r2
 8012958:	3320      	adds	r3, #32
 801295a:	443b      	add	r3, r7
 801295c:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 8012960:	69fb      	ldr	r3, [r7, #28]
 8012962:	0c1a      	lsrs	r2, r3, #16
 8012964:	8b3b      	ldrh	r3, [r7, #24]
 8012966:	1c59      	adds	r1, r3, #1
 8012968:	8339      	strh	r1, [r7, #24]
 801296a:	b2d2      	uxtb	r2, r2
 801296c:	3320      	adds	r3, #32
 801296e:	443b      	add	r3, r7
 8012970:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 8012974:	69fb      	ldr	r3, [r7, #28]
 8012976:	0e1a      	lsrs	r2, r3, #24
 8012978:	8b3b      	ldrh	r3, [r7, #24]
 801297a:	1c59      	adds	r1, r3, #1
 801297c:	8339      	strh	r1, [r7, #24]
 801297e:	b2d2      	uxtb	r2, r2
 8012980:	3320      	adds	r3, #32
 8012982:	443b      	add	r3, r7
 8012984:	f803 2c18 	strb.w	r2, [r3, #-24]

            /*Set the new value  */
            dwTemp = (uint32_t)(CRC_TX_CONFIG_TX_CRC_ENABLE_MASK);
 8012988:	2301      	movs	r3, #1
 801298a:	61fb      	str	r3, [r7, #28]
            /* If the card type is other than I18000p3m3, operate the CRC in 16-bit mode */
            if (pDataParams->bCardType == PHHAL_HW_CARDTYPE_I18000P3M3)
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012992:	2b06      	cmp	r3, #6
 8012994:	d103      	bne.n	801299e <phhalHw_Pn5180_SetConfig_Int+0x182>
            {
                /* Just set the bit for 5-bit mode operation */
                dwTemp |= (uint32_t)CRC_TX_CONFIG_TX_CRC_TYPE_MASK;
 8012996:	69fb      	ldr	r3, [r7, #28]
 8012998:	f043 0304 	orr.w	r3, r3, #4
 801299c:	61fb      	str	r3, [r7, #28]
            }

            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_TX_CONFIG;
 801299e:	8b3b      	ldrh	r3, [r7, #24]
 80129a0:	1c5a      	adds	r2, r3, #1
 80129a2:	833a      	strh	r2, [r7, #24]
 80129a4:	3320      	adds	r3, #32
 80129a6:	443b      	add	r3, r7
 80129a8:	2219      	movs	r2, #25
 80129aa:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 80129ae:	8b3b      	ldrh	r3, [r7, #24]
 80129b0:	1c5a      	adds	r2, r3, #1
 80129b2:	833a      	strh	r2, [r7, #24]
 80129b4:	3320      	adds	r3, #32
 80129b6:	443b      	add	r3, r7
 80129b8:	2202      	movs	r2, #2
 80129ba:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 80129be:	8b3b      	ldrh	r3, [r7, #24]
 80129c0:	1c5a      	adds	r2, r3, #1
 80129c2:	833a      	strh	r2, [r7, #24]
 80129c4:	69fa      	ldr	r2, [r7, #28]
 80129c6:	b2d2      	uxtb	r2, r2
 80129c8:	3320      	adds	r3, #32
 80129ca:	443b      	add	r3, r7
 80129cc:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 80129d0:	69fb      	ldr	r3, [r7, #28]
 80129d2:	0a1a      	lsrs	r2, r3, #8
 80129d4:	8b3b      	ldrh	r3, [r7, #24]
 80129d6:	1c59      	adds	r1, r3, #1
 80129d8:	8339      	strh	r1, [r7, #24]
 80129da:	b2d2      	uxtb	r2, r2
 80129dc:	3320      	adds	r3, #32
 80129de:	443b      	add	r3, r7
 80129e0:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 80129e4:	69fb      	ldr	r3, [r7, #28]
 80129e6:	0c1a      	lsrs	r2, r3, #16
 80129e8:	8b3b      	ldrh	r3, [r7, #24]
 80129ea:	1c59      	adds	r1, r3, #1
 80129ec:	8339      	strh	r1, [r7, #24]
 80129ee:	b2d2      	uxtb	r2, r2
 80129f0:	3320      	adds	r3, #32
 80129f2:	443b      	add	r3, r7
 80129f4:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 80129f8:	69fb      	ldr	r3, [r7, #28]
 80129fa:	0e1a      	lsrs	r2, r3, #24
 80129fc:	8b3b      	ldrh	r3, [r7, #24]
 80129fe:	1c59      	adds	r1, r3, #1
 8012a00:	8339      	strh	r1, [r7, #24]
 8012a02:	b2d2      	uxtb	r2, r2
 8012a04:	3320      	adds	r3, #32
 8012a06:	443b      	add	r3, r7
 8012a08:	f803 2c18 	strb.w	r2, [r3, #-24]

            /*Send the array to the IC*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 8012a0c:	8b3a      	ldrh	r2, [r7, #24]
 8012a0e:	f107 0308 	add.w	r3, r7, #8
 8012a12:	4619      	mov	r1, r3
 8012a14:	6878      	ldr	r0, [r7, #4]
 8012a16:	f7fe fe8f 	bl	8011738 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 8012a1a:	4603      	mov	r3, r0
 8012a1c:	837b      	strh	r3, [r7, #26]
 8012a1e:	8b7b      	ldrh	r3, [r7, #26]
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	f000 80b9 	beq.w	8012b98 <phhalHw_Pn5180_SetConfig_Int+0x37c>
 8012a26:	8b7b      	ldrh	r3, [r7, #26]
 8012a28:	e0bc      	b.n	8012ba4 <phhalHw_Pn5180_SetConfig_Int+0x388>
        }
        break;

    case PHHAL_HW_CONFIG_RXCRC:

        if (wValue == PH_OFF)
 8012a2a:	883b      	ldrh	r3, [r7, #0]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d10f      	bne.n	8012a50 <phhalHw_Pn5180_SetConfig_Int+0x234>
        {
            /* CRC calculator, your services are not required */
            dwValue = (uint32_t)~(uint32_t)CRC_RX_CONFIG_RX_CRC_ENABLE_MASK;
 8012a30:	f06f 0301 	mvn.w	r3, #1
 8012a34:	617b      	str	r3, [r7, #20]

            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, CRC_RX_CONFIG, dwValue));
 8012a36:	697a      	ldr	r2, [r7, #20]
 8012a38:	2112      	movs	r1, #18
 8012a3a:	6878      	ldr	r0, [r7, #4]
 8012a3c:	f7fe fe06 	bl	801164c <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 8012a40:	4603      	mov	r3, r0
 8012a42:	837b      	strh	r3, [r7, #26]
 8012a44:	8b7b      	ldrh	r3, [r7, #26]
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	f000 80a8 	beq.w	8012b9c <phhalHw_Pn5180_SetConfig_Int+0x380>
 8012a4c:	8b7b      	ldrh	r3, [r7, #26]
 8012a4e:	e0a9      	b.n	8012ba4 <phhalHw_Pn5180_SetConfig_Int+0x388>
        }
        else
        {

            wSizeOfRegTypeValueSets = 0U;
 8012a50:	2300      	movs	r3, #0
 8012a52:	833b      	strh	r3, [r7, #24]

            /*Clear the Bits */
            dwTemp = (uint32_t) ~( CRC_RX_CONFIG_RX_CRC_TYPE_MASK);
 8012a54:	f06f 0304 	mvn.w	r3, #4
 8012a58:	61fb      	str	r3, [r7, #28]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_RX_CONFIG;
 8012a5a:	8b3b      	ldrh	r3, [r7, #24]
 8012a5c:	1c5a      	adds	r2, r3, #1
 8012a5e:	833a      	strh	r2, [r7, #24]
 8012a60:	3320      	adds	r3, #32
 8012a62:	443b      	add	r3, r7
 8012a64:	2212      	movs	r2, #18
 8012a66:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 8012a6a:	8b3b      	ldrh	r3, [r7, #24]
 8012a6c:	1c5a      	adds	r2, r3, #1
 8012a6e:	833a      	strh	r2, [r7, #24]
 8012a70:	3320      	adds	r3, #32
 8012a72:	443b      	add	r3, r7
 8012a74:	2203      	movs	r2, #3
 8012a76:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 8012a7a:	8b3b      	ldrh	r3, [r7, #24]
 8012a7c:	1c5a      	adds	r2, r3, #1
 8012a7e:	833a      	strh	r2, [r7, #24]
 8012a80:	69fa      	ldr	r2, [r7, #28]
 8012a82:	b2d2      	uxtb	r2, r2
 8012a84:	3320      	adds	r3, #32
 8012a86:	443b      	add	r3, r7
 8012a88:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 8012a8c:	69fb      	ldr	r3, [r7, #28]
 8012a8e:	0a1a      	lsrs	r2, r3, #8
 8012a90:	8b3b      	ldrh	r3, [r7, #24]
 8012a92:	1c59      	adds	r1, r3, #1
 8012a94:	8339      	strh	r1, [r7, #24]
 8012a96:	b2d2      	uxtb	r2, r2
 8012a98:	3320      	adds	r3, #32
 8012a9a:	443b      	add	r3, r7
 8012a9c:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 8012aa0:	69fb      	ldr	r3, [r7, #28]
 8012aa2:	0c1a      	lsrs	r2, r3, #16
 8012aa4:	8b3b      	ldrh	r3, [r7, #24]
 8012aa6:	1c59      	adds	r1, r3, #1
 8012aa8:	8339      	strh	r1, [r7, #24]
 8012aaa:	b2d2      	uxtb	r2, r2
 8012aac:	3320      	adds	r3, #32
 8012aae:	443b      	add	r3, r7
 8012ab0:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 8012ab4:	69fb      	ldr	r3, [r7, #28]
 8012ab6:	0e1a      	lsrs	r2, r3, #24
 8012ab8:	8b3b      	ldrh	r3, [r7, #24]
 8012aba:	1c59      	adds	r1, r3, #1
 8012abc:	8339      	strh	r1, [r7, #24]
 8012abe:	b2d2      	uxtb	r2, r2
 8012ac0:	3320      	adds	r3, #32
 8012ac2:	443b      	add	r3, r7
 8012ac4:	f803 2c18 	strb.w	r2, [r3, #-24]

            /*Set the new value  */
            dwTemp = (uint32_t)CRC_RX_CONFIG_RX_CRC_ENABLE_MASK;
 8012ac8:	2301      	movs	r3, #1
 8012aca:	61fb      	str	r3, [r7, #28]
            /* If the card type is other than I18000p3m3, operate the CRC in 16-bit mode */
            if (pDataParams->bCardType == PHHAL_HW_CARDTYPE_I18000P3M3)
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012ad2:	2b06      	cmp	r3, #6
 8012ad4:	d103      	bne.n	8012ade <phhalHw_Pn5180_SetConfig_Int+0x2c2>
            {
                /* Just set the bit for 5-bit mode operation */
                dwTemp |= (uint32_t)CRC_RX_CONFIG_RX_CRC_TYPE_MASK;
 8012ad6:	69fb      	ldr	r3, [r7, #28]
 8012ad8:	f043 0304 	orr.w	r3, r3, #4
 8012adc:	61fb      	str	r3, [r7, #28]
            }

            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_RX_CONFIG;
 8012ade:	8b3b      	ldrh	r3, [r7, #24]
 8012ae0:	1c5a      	adds	r2, r3, #1
 8012ae2:	833a      	strh	r2, [r7, #24]
 8012ae4:	3320      	adds	r3, #32
 8012ae6:	443b      	add	r3, r7
 8012ae8:	2212      	movs	r2, #18
 8012aea:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 8012aee:	8b3b      	ldrh	r3, [r7, #24]
 8012af0:	1c5a      	adds	r2, r3, #1
 8012af2:	833a      	strh	r2, [r7, #24]
 8012af4:	3320      	adds	r3, #32
 8012af6:	443b      	add	r3, r7
 8012af8:	2202      	movs	r2, #2
 8012afa:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 8012afe:	8b3b      	ldrh	r3, [r7, #24]
 8012b00:	1c5a      	adds	r2, r3, #1
 8012b02:	833a      	strh	r2, [r7, #24]
 8012b04:	69fa      	ldr	r2, [r7, #28]
 8012b06:	b2d2      	uxtb	r2, r2
 8012b08:	3320      	adds	r3, #32
 8012b0a:	443b      	add	r3, r7
 8012b0c:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 8012b10:	69fb      	ldr	r3, [r7, #28]
 8012b12:	0a1a      	lsrs	r2, r3, #8
 8012b14:	8b3b      	ldrh	r3, [r7, #24]
 8012b16:	1c59      	adds	r1, r3, #1
 8012b18:	8339      	strh	r1, [r7, #24]
 8012b1a:	b2d2      	uxtb	r2, r2
 8012b1c:	3320      	adds	r3, #32
 8012b1e:	443b      	add	r3, r7
 8012b20:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 8012b24:	69fb      	ldr	r3, [r7, #28]
 8012b26:	0c1a      	lsrs	r2, r3, #16
 8012b28:	8b3b      	ldrh	r3, [r7, #24]
 8012b2a:	1c59      	adds	r1, r3, #1
 8012b2c:	8339      	strh	r1, [r7, #24]
 8012b2e:	b2d2      	uxtb	r2, r2
 8012b30:	3320      	adds	r3, #32
 8012b32:	443b      	add	r3, r7
 8012b34:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 8012b38:	69fb      	ldr	r3, [r7, #28]
 8012b3a:	0e1a      	lsrs	r2, r3, #24
 8012b3c:	8b3b      	ldrh	r3, [r7, #24]
 8012b3e:	1c59      	adds	r1, r3, #1
 8012b40:	8339      	strh	r1, [r7, #24]
 8012b42:	b2d2      	uxtb	r2, r2
 8012b44:	3320      	adds	r3, #32
 8012b46:	443b      	add	r3, r7
 8012b48:	f803 2c18 	strb.w	r2, [r3, #-24]

            /*Send the array to the IC*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 8012b4c:	8b3a      	ldrh	r2, [r7, #24]
 8012b4e:	f107 0308 	add.w	r3, r7, #8
 8012b52:	4619      	mov	r1, r3
 8012b54:	6878      	ldr	r0, [r7, #4]
 8012b56:	f7fe fdef 	bl	8011738 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 8012b5a:	4603      	mov	r3, r0
 8012b5c:	837b      	strh	r3, [r7, #26]
 8012b5e:	8b7b      	ldrh	r3, [r7, #26]
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d01b      	beq.n	8012b9c <phhalHw_Pn5180_SetConfig_Int+0x380>
 8012b64:	8b7b      	ldrh	r3, [r7, #26]
 8012b66:	e01d      	b.n	8012ba4 <phhalHw_Pn5180_SetConfig_Int+0x388>
        break;

    case PHHAL_HW_CONFIG_ASK100:

        /* switch off 100% ASK */
        if (wValue == PH_OFF)
 8012b68:	883b      	ldrh	r3, [r7, #0]
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d102      	bne.n	8012b74 <phhalHw_Pn5180_SetConfig_Int+0x358>
        {
            /* ASK 10  is not supported for all the combinations*/;
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 8012b6e:	f240 2323 	movw	r3, #547	@ 0x223
 8012b72:	e017      	b.n	8012ba4 <phhalHw_Pn5180_SetConfig_Int+0x388>
        }
        /* switch on 100% ASK */
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, ANA_RF_CONTROL_TX, ~(uint32_t)ANA_RF_CONTROL_TX_TX_RESIDUAL_CARRIER_MASK));
 8012b74:	f46f 3278 	mvn.w	r2, #253952	@ 0x3e000
 8012b78:	2120      	movs	r1, #32
 8012b7a:	6878      	ldr	r0, [r7, #4]
 8012b7c:	f7fe fd66 	bl	801164c <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 8012b80:	4603      	mov	r3, r0
 8012b82:	837b      	strh	r3, [r7, #26]
 8012b84:	8b7b      	ldrh	r3, [r7, #26]
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d00a      	beq.n	8012ba0 <phhalHw_Pn5180_SetConfig_Int+0x384>
 8012b8a:	8b7b      	ldrh	r3, [r7, #26]
 8012b8c:	e00a      	b.n	8012ba4 <phhalHw_Pn5180_SetConfig_Int+0x388>
        }

        break;

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 8012b8e:	f240 237f 	movw	r3, #639	@ 0x27f
 8012b92:	e007      	b.n	8012ba4 <phhalHw_Pn5180_SetConfig_Int+0x388>
        break;
 8012b94:	bf00      	nop
 8012b96:	e004      	b.n	8012ba2 <phhalHw_Pn5180_SetConfig_Int+0x386>
        break;
 8012b98:	bf00      	nop
 8012b9a:	e002      	b.n	8012ba2 <phhalHw_Pn5180_SetConfig_Int+0x386>
        break;
 8012b9c:	bf00      	nop
 8012b9e:	e000      	b.n	8012ba2 <phhalHw_Pn5180_SetConfig_Int+0x386>
        break;
 8012ba0:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 8012ba2:	2300      	movs	r3, #0
}
 8012ba4:	4618      	mov	r0, r3
 8012ba6:	3720      	adds	r7, #32
 8012ba8:	46bd      	mov	sp, r7
 8012baa:	bd80      	pop	{r7, pc}

08012bac <phhalHw_Pn5180_SetConfig_FelicaEmdReg>:

phStatus_t phhalHw_Pn5180_SetConfig_FelicaEmdReg(
    phhalHw_Pn5180_DataParams_t * pDataParams
    )
{
 8012bac:	b580      	push	{r7, lr}
 8012bae:	b084      	sub	sp, #16
 8012bb0:	af00      	add	r7, sp, #0
 8012bb2:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM statusTmp;

    if (pDataParams->bOpeMode != RD_LIB_MODE_FELICA)
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8012bba:	2b04      	cmp	r3, #4
 8012bbc:	d00f      	beq.n	8012bde <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x32>
    {
        /* Clear FeliCa EMD Control Register */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, FELICA_EMD_CONTROL, (uint32_t)0x0U));
 8012bbe:	2200      	movs	r2, #0
 8012bc0:	2143      	movs	r1, #67	@ 0x43
 8012bc2:	6878      	ldr	r0, [r7, #4]
 8012bc4:	f7fe fc56 	bl	8011474 <phhalHw_Pn5180_Instr_WriteRegister>
 8012bc8:	4603      	mov	r3, r0
 8012bca:	81fb      	strh	r3, [r7, #14]
 8012bcc:	89fb      	ldrh	r3, [r7, #14]
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d001      	beq.n	8012bd6 <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x2a>
 8012bd2:	89fb      	ldrh	r3, [r7, #14]
 8012bd4:	e013      	b.n	8012bfe <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x52>
        /* Reset shadow register */
        pDataParams->dwFelicaEmdReg = (uint32_t)0x0U;
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	2200      	movs	r2, #0
 8012bda:	655a      	str	r2, [r3, #84]	@ 0x54
 8012bdc:	e00e      	b.n	8012bfc <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x50>
    }
    else
    {
        /* Configure FeliCa EMD Control Register with default value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, FELICA_EMD_CONTROL, PHHAL_HW_PN5180_DEFAULT_FELICA_EMD_REGISTER));
 8012bde:	4a0a      	ldr	r2, [pc, #40]	@ (8012c08 <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x5c>)
 8012be0:	2143      	movs	r1, #67	@ 0x43
 8012be2:	6878      	ldr	r0, [r7, #4]
 8012be4:	f7fe fc46 	bl	8011474 <phhalHw_Pn5180_Instr_WriteRegister>
 8012be8:	4603      	mov	r3, r0
 8012bea:	81fb      	strh	r3, [r7, #14]
 8012bec:	89fb      	ldrh	r3, [r7, #14]
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d001      	beq.n	8012bf6 <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x4a>
 8012bf2:	89fb      	ldrh	r3, [r7, #14]
 8012bf4:	e003      	b.n	8012bfe <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x52>
        /* Configure shadow register with default value */
        pDataParams->dwFelicaEmdReg = PHHAL_HW_PN5180_DEFAULT_FELICA_EMD_REGISTER;
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	4a03      	ldr	r2, [pc, #12]	@ (8012c08 <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x5c>)
 8012bfa:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    return PH_ERR_SUCCESS;
 8012bfc:	2300      	movs	r3, #0
}
 8012bfe:	4618      	mov	r0, r3
 8012c00:	3710      	adds	r7, #16
 8012c02:	46bd      	mov	sp, r7
 8012c04:	bd80      	pop	{r7, pc}
 8012c06:	bf00      	nop
 8012c08:	00ff0019 	.word	0x00ff0019

08012c0c <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit>:
phStatus_t phhalHw_Pn5180_SetConfig_FelicaEmdRegBit(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wValue,
    uint32_t dwMaskValue
    )
{
 8012c0c:	b580      	push	{r7, lr}
 8012c0e:	b086      	sub	sp, #24
 8012c10:	af00      	add	r7, sp, #0
 8012c12:	60f8      	str	r0, [r7, #12]
 8012c14:	460b      	mov	r3, r1
 8012c16:	607a      	str	r2, [r7, #4]
 8012c18:	817b      	strh	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM statusTmp;

    if ((wValue != PH_ON) && (wValue != PH_OFF))
 8012c1a:	897b      	ldrh	r3, [r7, #10]
 8012c1c:	2b01      	cmp	r3, #1
 8012c1e:	d005      	beq.n	8012c2c <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x20>
 8012c20:	897b      	ldrh	r3, [r7, #10]
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d002      	beq.n	8012c2c <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x20>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012c26:	f240 2321 	movw	r3, #545	@ 0x221
 8012c2a:	e037      	b.n	8012c9c <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x90>
    }

    if(wValue != PH_OFF)
 8012c2c:	897b      	ldrh	r3, [r7, #10]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d018      	beq.n	8012c64 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x58>
    {
        if (!(pDataParams->dwFelicaEmdReg & dwMaskValue))
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	4013      	ands	r3, r2
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d12d      	bne.n	8012c9a <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x8e>
        {
            /* Update FELICA_EMD_CONTROL Register */
            PH_CHECK_SUCCESS_FCT(statusTmp,
 8012c3e:	687a      	ldr	r2, [r7, #4]
 8012c40:	2143      	movs	r1, #67	@ 0x43
 8012c42:	68f8      	ldr	r0, [r7, #12]
 8012c44:	f7fe fc8c 	bl	8011560 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 8012c48:	4603      	mov	r3, r0
 8012c4a:	82fb      	strh	r3, [r7, #22]
 8012c4c:	8afb      	ldrh	r3, [r7, #22]
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d001      	beq.n	8012c56 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x4a>
 8012c52:	8afb      	ldrh	r3, [r7, #22]
 8012c54:	e022      	b.n	8012c9c <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x90>
                phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, FELICA_EMD_CONTROL, dwMaskValue));
            /* Update shadow register */
            pDataParams->dwFelicaEmdReg |= dwMaskValue;
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	431a      	orrs	r2, r3
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	655a      	str	r2, [r3, #84]	@ 0x54
 8012c62:	e01a      	b.n	8012c9a <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x8e>
        }
    }
    else
    {
        if (pDataParams->dwFelicaEmdReg & dwMaskValue)
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	4013      	ands	r3, r2
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d014      	beq.n	8012c9a <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x8e>
        {
            /* Update FELICA_EMD_CONTROL Register */
            PH_CHECK_SUCCESS_FCT(statusTmp,
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	43db      	mvns	r3, r3
 8012c74:	461a      	mov	r2, r3
 8012c76:	2143      	movs	r1, #67	@ 0x43
 8012c78:	68f8      	ldr	r0, [r7, #12]
 8012c7a:	f7fe fce7 	bl	801164c <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 8012c7e:	4603      	mov	r3, r0
 8012c80:	82fb      	strh	r3, [r7, #22]
 8012c82:	8afb      	ldrh	r3, [r7, #22]
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d001      	beq.n	8012c8c <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x80>
 8012c88:	8afb      	ldrh	r3, [r7, #22]
 8012c8a:	e007      	b.n	8012c9c <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x90>
                phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, FELICA_EMD_CONTROL, (uint32_t)~dwMaskValue));
            /* Update shadow register */
            pDataParams->dwFelicaEmdReg &= (uint32_t)~dwMaskValue;
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	43db      	mvns	r3, r3
 8012c94:	401a      	ands	r2, r3
 8012c96:	68fb      	ldr	r3, [r7, #12]
 8012c98:	655a      	str	r2, [r3, #84]	@ 0x54
        }
    }

    return PH_ERR_SUCCESS;
 8012c9a:	2300      	movs	r3, #0
}
 8012c9c:	4618      	mov	r0, r3
 8012c9e:	3718      	adds	r7, #24
 8012ca0:	46bd      	mov	sp, r7
 8012ca2:	bd80      	pop	{r7, pc}

08012ca4 <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte>:
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wValue,
    uint8_t bBytePos,
    uint32_t dwMaskValue
    )
{
 8012ca4:	b580      	push	{r7, lr}
 8012ca6:	b086      	sub	sp, #24
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	60f8      	str	r0, [r7, #12]
 8012cac:	607b      	str	r3, [r7, #4]
 8012cae:	460b      	mov	r3, r1
 8012cb0:	817b      	strh	r3, [r7, #10]
 8012cb2:	4613      	mov	r3, r2
 8012cb4:	727b      	strb	r3, [r7, #9]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint32_t    PH_MEMLOC_REM dwValue;

    if (wValue & 0xFF00U)
 8012cb6:	897b      	ldrh	r3, [r7, #10]
 8012cb8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d002      	beq.n	8012cc6 <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte+0x22>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012cc0:	f240 2321 	movw	r3, #545	@ 0x221
 8012cc4:	e028      	b.n	8012d18 <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte+0x74>
    }

    if ((uint8_t)(pDataParams->dwFelicaEmdReg >> bBytePos) != (uint8_t)wValue)
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012cca:	7a7b      	ldrb	r3, [r7, #9]
 8012ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8012cd0:	b2da      	uxtb	r2, r3
 8012cd2:	897b      	ldrh	r3, [r7, #10]
 8012cd4:	b2db      	uxtb	r3, r3
 8012cd6:	429a      	cmp	r2, r3
 8012cd8:	d01d      	beq.n	8012d16 <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte+0x72>
    {
        dwValue = pDataParams->dwFelicaEmdReg;
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012cde:	617b      	str	r3, [r7, #20]
        dwValue &= ((uint32_t)~dwMaskValue);
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	43db      	mvns	r3, r3
 8012ce4:	697a      	ldr	r2, [r7, #20]
 8012ce6:	4013      	ands	r3, r2
 8012ce8:	617b      	str	r3, [r7, #20]
        dwValue |= ((uint32_t)wValue << bBytePos);
 8012cea:	897a      	ldrh	r2, [r7, #10]
 8012cec:	7a7b      	ldrb	r3, [r7, #9]
 8012cee:	fa02 f303 	lsl.w	r3, r2, r3
 8012cf2:	697a      	ldr	r2, [r7, #20]
 8012cf4:	4313      	orrs	r3, r2
 8012cf6:	617b      	str	r3, [r7, #20]
        /* Update FELICA_EMD_CONTROL Register */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, FELICA_EMD_CONTROL, dwValue));
 8012cf8:	697a      	ldr	r2, [r7, #20]
 8012cfa:	2143      	movs	r1, #67	@ 0x43
 8012cfc:	68f8      	ldr	r0, [r7, #12]
 8012cfe:	f7fe fbb9 	bl	8011474 <phhalHw_Pn5180_Instr_WriteRegister>
 8012d02:	4603      	mov	r3, r0
 8012d04:	827b      	strh	r3, [r7, #18]
 8012d06:	8a7b      	ldrh	r3, [r7, #18]
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d001      	beq.n	8012d10 <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte+0x6c>
 8012d0c:	8a7b      	ldrh	r3, [r7, #18]
 8012d0e:	e003      	b.n	8012d18 <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte+0x74>
        /* Update shadow register */
        pDataParams->dwFelicaEmdReg = dwValue;
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	697a      	ldr	r2, [r7, #20]
 8012d14:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    return PH_ERR_SUCCESS;
 8012d16:	2300      	movs	r3, #0
}
 8012d18:	4618      	mov	r0, r3
 8012d1a:	3718      	adds	r7, #24
 8012d1c:	46bd      	mov	sp, r7
 8012d1e:	bd80      	pop	{r7, pc}

08012d20 <phhalHw_Pn5180_SetCardMode>:
phStatus_t phhalHw_Pn5180_SetCardMode(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wTxDataRate,
    uint16_t wRxDataRate,
    uint16_t wSubcarrier )
{
 8012d20:	b580      	push	{r7, lr}
 8012d22:	b086      	sub	sp, #24
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	60f8      	str	r0, [r7, #12]
 8012d28:	4608      	mov	r0, r1
 8012d2a:	4611      	mov	r1, r2
 8012d2c:	461a      	mov	r2, r3
 8012d2e:	4603      	mov	r3, r0
 8012d30:	817b      	strh	r3, [r7, #10]
 8012d32:	460b      	mov	r3, r1
 8012d34:	813b      	strh	r3, [r7, #8]
 8012d36:	4613      	mov	r3, r2
 8012d38:	80fb      	strh	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bTxConfig = 0U;
 8012d3a:	2300      	movs	r3, #0
 8012d3c:	75fb      	strb	r3, [r7, #23]
    uint8_t     PH_MEMLOC_REM bRxConfig = 0U;
 8012d3e:	2300      	movs	r3, #0
 8012d40:	75bb      	strb	r3, [r7, #22]

    if(pDataParams->wTargetMode == PH_OFF)
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d10f      	bne.n	8012d6a <phhalHw_Pn5180_SetCardMode+0x4a>
    {
        if(wTxDataRate == pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TXDATARATE_FRAMING])
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8012d50:	897a      	ldrh	r2, [r7, #10]
 8012d52:	429a      	cmp	r2, r3
 8012d54:	d101      	bne.n	8012d5a <phhalHw_Pn5180_SetCardMode+0x3a>
        {
            wTxDataRate = PHHAL_HW_RF_DATARATE_NO_CHANGE;
 8012d56:	23ff      	movs	r3, #255	@ 0xff
 8012d58:	817b      	strh	r3, [r7, #10]
        }
        if(wRxDataRate == pDataParams->wCfgShadow[PHHAL_HW_CONFIG_RXDATARATE_FRAMING])
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	f8b3 306c 	ldrh.w	r3, [r3, #108]	@ 0x6c
 8012d60:	893a      	ldrh	r2, [r7, #8]
 8012d62:	429a      	cmp	r2, r3
 8012d64:	d101      	bne.n	8012d6a <phhalHw_Pn5180_SetCardMode+0x4a>
        {
            wRxDataRate = PHHAL_HW_RF_DATARATE_NO_CHANGE;
 8012d66:	23ff      	movs	r3, #255	@ 0xff
 8012d68:	813b      	strh	r3, [r7, #8]
        }
    }

    switch (pDataParams->bCardType)
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012d70:	3b01      	subs	r3, #1
 8012d72:	2b09      	cmp	r3, #9
 8012d74:	f200 82a1 	bhi.w	80132ba <phhalHw_Pn5180_SetCardMode+0x59a>
 8012d78:	a201      	add	r2, pc, #4	@ (adr r2, 8012d80 <phhalHw_Pn5180_SetCardMode+0x60>)
 8012d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d7e:	bf00      	nop
 8012d80:	08012da9 	.word	0x08012da9
 8012d84:	08012f71 	.word	0x08012f71
 8012d88:	08013011 	.word	0x08013011
 8012d8c:	0801312d 	.word	0x0801312d
 8012d90:	080132bb 	.word	0x080132bb
 8012d94:	080131c3 	.word	0x080131c3
 8012d98:	08013245 	.word	0x08013245
 8012d9c:	08013245 	.word	0x08013245
 8012da0:	08013245 	.word	0x08013245
 8012da4:	08013011 	.word	0x08013011
    {
    case PHHAL_HW_CARDTYPE_ISO14443A:

        /* Check if Target is activated and perform required change to switch BaudRate. */
        if (pDataParams->wTargetMode != PH_OFF)
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	f000 808e 	beq.w	8012ece <phhalHw_Pn5180_SetCardMode+0x1ae>
        {
            if(pDataParams->bActiveMode == PH_OFF)
 8012db2:	68fb      	ldr	r3, [r7, #12]
 8012db4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d14e      	bne.n	8012e5a <phhalHw_Pn5180_SetCardMode+0x13a>
            {
                switch (wTxDataRate)
 8012dbc:	897b      	ldrh	r3, [r7, #10]
 8012dbe:	2b03      	cmp	r3, #3
 8012dc0:	dc0e      	bgt.n	8012de0 <phhalHw_Pn5180_SetCardMode+0xc0>
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	db1e      	blt.n	8012e04 <phhalHw_Pn5180_SetCardMode+0xe4>
 8012dc6:	2b03      	cmp	r3, #3
 8012dc8:	d81c      	bhi.n	8012e04 <phhalHw_Pn5180_SetCardMode+0xe4>
 8012dca:	a201      	add	r2, pc, #4	@ (adr r2, 8012dd0 <phhalHw_Pn5180_SetCardMode+0xb0>)
 8012dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012dd0:	08012de7 	.word	0x08012de7
 8012dd4:	08012ded 	.word	0x08012ded
 8012dd8:	08012df3 	.word	0x08012df3
 8012ddc:	08012df9 	.word	0x08012df9
 8012de0:	2bff      	cmp	r3, #255	@ 0xff
 8012de2:	d00c      	beq.n	8012dfe <phhalHw_Pn5180_SetCardMode+0xde>
 8012de4:	e00e      	b.n	8012e04 <phhalHw_Pn5180_SetCardMode+0xe4>
                {
                    case PHHAL_HW_RF_DATARATE_106:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_PICC_106_MANCH_SUBC;
 8012de6:	2313      	movs	r3, #19
 8012de8:	75fb      	strb	r3, [r7, #23]
                        /*pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_106;*/
                        break;
 8012dea:	e00e      	b.n	8012e0a <phhalHw_Pn5180_SetCardMode+0xea>
                    case PHHAL_HW_RF_DATARATE_212:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_PICC_212_BPSK;
 8012dec:	2314      	movs	r3, #20
 8012dee:	75fb      	strb	r3, [r7, #23]
                        /*pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_212;*/
                        break;
 8012df0:	e00b      	b.n	8012e0a <phhalHw_Pn5180_SetCardMode+0xea>
                    case PHHAL_HW_RF_DATARATE_424:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_PICC_424_BPSK;
 8012df2:	2315      	movs	r3, #21
 8012df4:	75fb      	strb	r3, [r7, #23]
                        /* pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_424;*/
                        break;
 8012df6:	e008      	b.n	8012e0a <phhalHw_Pn5180_SetCardMode+0xea>
                    case PHHAL_HW_RF_DATARATE_848:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_PICC_848_BPSK;
 8012df8:	2316      	movs	r3, #22
 8012dfa:	75fb      	strb	r3, [r7, #23]
                        /* pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_848;*/
                        break;
 8012dfc:	e005      	b.n	8012e0a <phhalHw_Pn5180_SetCardMode+0xea>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8012dfe:	23ff      	movs	r3, #255	@ 0xff
 8012e00:	75fb      	strb	r3, [r7, #23]
                        break;
 8012e02:	e002      	b.n	8012e0a <phhalHw_Pn5180_SetCardMode+0xea>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012e04:	f240 2321 	movw	r3, #545	@ 0x221
 8012e08:	e27c      	b.n	8013304 <phhalHw_Pn5180_SetCardMode+0x5e4>
                }

                switch (wRxDataRate)
 8012e0a:	893b      	ldrh	r3, [r7, #8]
 8012e0c:	2b03      	cmp	r3, #3
 8012e0e:	dc0f      	bgt.n	8012e30 <phhalHw_Pn5180_SetCardMode+0x110>
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	db1f      	blt.n	8012e54 <phhalHw_Pn5180_SetCardMode+0x134>
 8012e14:	2b03      	cmp	r3, #3
 8012e16:	d81d      	bhi.n	8012e54 <phhalHw_Pn5180_SetCardMode+0x134>
 8012e18:	a201      	add	r2, pc, #4	@ (adr r2, 8012e20 <phhalHw_Pn5180_SetCardMode+0x100>)
 8012e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e1e:	bf00      	nop
 8012e20:	08012e37 	.word	0x08012e37
 8012e24:	08012e3d 	.word	0x08012e3d
 8012e28:	08012e43 	.word	0x08012e43
 8012e2c:	08012e49 	.word	0x08012e49
 8012e30:	2bff      	cmp	r3, #255	@ 0xff
 8012e32:	d00c      	beq.n	8012e4e <phhalHw_Pn5180_SetCardMode+0x12e>
 8012e34:	e00e      	b.n	8012e54 <phhalHw_Pn5180_SetCardMode+0x134>
                {
                    case PHHAL_HW_RF_DATARATE_106:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_PICC_106_MILLER;
 8012e36:	2393      	movs	r3, #147	@ 0x93
 8012e38:	75bb      	strb	r3, [r7, #22]
                        /*pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_106;*/
                        break;
 8012e3a:	e098      	b.n	8012f6e <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_212:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_PICC_212_MILLER;
 8012e3c:	2394      	movs	r3, #148	@ 0x94
 8012e3e:	75bb      	strb	r3, [r7, #22]
                        /*pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_212;*/
                        break;
 8012e40:	e095      	b.n	8012f6e <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_424:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_PICC_424_MILLER;
 8012e42:	2395      	movs	r3, #149	@ 0x95
 8012e44:	75bb      	strb	r3, [r7, #22]
                        /* pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_424;*/
                        break;
 8012e46:	e092      	b.n	8012f6e <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_848:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_PICC_848_MILLER;
 8012e48:	2396      	movs	r3, #150	@ 0x96
 8012e4a:	75bb      	strb	r3, [r7, #22]
                        /* pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_848;*/
                        break;
 8012e4c:	e08f      	b.n	8012f6e <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8012e4e:	23ff      	movs	r3, #255	@ 0xff
 8012e50:	75bb      	strb	r3, [r7, #22]
                        break;
 8012e52:	e08c      	b.n	8012f6e <phhalHw_Pn5180_SetCardMode+0x24e>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012e54:	f240 2321 	movw	r3, #545	@ 0x221
 8012e58:	e254      	b.n	8013304 <phhalHw_Pn5180_SetCardMode+0x5e4>
                }
            }
            else
            {
                switch (wTxDataRate)
 8012e5a:	897b      	ldrh	r3, [r7, #10]
 8012e5c:	2bff      	cmp	r3, #255	@ 0xff
 8012e5e:	d013      	beq.n	8012e88 <phhalHw_Pn5180_SetCardMode+0x168>
 8012e60:	2bff      	cmp	r3, #255	@ 0xff
 8012e62:	dc14      	bgt.n	8012e8e <phhalHw_Pn5180_SetCardMode+0x16e>
 8012e64:	2b02      	cmp	r3, #2
 8012e66:	d00c      	beq.n	8012e82 <phhalHw_Pn5180_SetCardMode+0x162>
 8012e68:	2b02      	cmp	r3, #2
 8012e6a:	dc10      	bgt.n	8012e8e <phhalHw_Pn5180_SetCardMode+0x16e>
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d002      	beq.n	8012e76 <phhalHw_Pn5180_SetCardMode+0x156>
 8012e70:	2b01      	cmp	r3, #1
 8012e72:	d003      	beq.n	8012e7c <phhalHw_Pn5180_SetCardMode+0x15c>
 8012e74:	e00b      	b.n	8012e8e <phhalHw_Pn5180_SetCardMode+0x16e>
                {
                    case PHHAL_HW_RF_DATARATE_106:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AT_106;
 8012e76:	2319      	movs	r3, #25
 8012e78:	75fb      	strb	r3, [r7, #23]
                        break;
 8012e7a:	e00b      	b.n	8012e94 <phhalHw_Pn5180_SetCardMode+0x174>
                    case PHHAL_HW_RF_DATARATE_212:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AT_212;
 8012e7c:	231a      	movs	r3, #26
 8012e7e:	75fb      	strb	r3, [r7, #23]
                        break;
 8012e80:	e008      	b.n	8012e94 <phhalHw_Pn5180_SetCardMode+0x174>
                    case PHHAL_HW_RF_DATARATE_424:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AT_424;
 8012e82:	231b      	movs	r3, #27
 8012e84:	75fb      	strb	r3, [r7, #23]
                        break;
 8012e86:	e005      	b.n	8012e94 <phhalHw_Pn5180_SetCardMode+0x174>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8012e88:	23ff      	movs	r3, #255	@ 0xff
 8012e8a:	75fb      	strb	r3, [r7, #23]
                        break;
 8012e8c:	e002      	b.n	8012e94 <phhalHw_Pn5180_SetCardMode+0x174>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012e8e:	f240 2321 	movw	r3, #545	@ 0x221
 8012e92:	e237      	b.n	8013304 <phhalHw_Pn5180_SetCardMode+0x5e4>
                }
                switch (wRxDataRate)
 8012e94:	893b      	ldrh	r3, [r7, #8]
 8012e96:	2bff      	cmp	r3, #255	@ 0xff
 8012e98:	d013      	beq.n	8012ec2 <phhalHw_Pn5180_SetCardMode+0x1a2>
 8012e9a:	2bff      	cmp	r3, #255	@ 0xff
 8012e9c:	dc14      	bgt.n	8012ec8 <phhalHw_Pn5180_SetCardMode+0x1a8>
 8012e9e:	2b02      	cmp	r3, #2
 8012ea0:	d00c      	beq.n	8012ebc <phhalHw_Pn5180_SetCardMode+0x19c>
 8012ea2:	2b02      	cmp	r3, #2
 8012ea4:	dc10      	bgt.n	8012ec8 <phhalHw_Pn5180_SetCardMode+0x1a8>
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d002      	beq.n	8012eb0 <phhalHw_Pn5180_SetCardMode+0x190>
 8012eaa:	2b01      	cmp	r3, #1
 8012eac:	d003      	beq.n	8012eb6 <phhalHw_Pn5180_SetCardMode+0x196>
 8012eae:	e00b      	b.n	8012ec8 <phhalHw_Pn5180_SetCardMode+0x1a8>
                {
                    case PHHAL_HW_RF_DATARATE_106:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AT_106;
 8012eb0:	2399      	movs	r3, #153	@ 0x99
 8012eb2:	75bb      	strb	r3, [r7, #22]
                        break;
 8012eb4:	e05b      	b.n	8012f6e <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_212:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AT_212;
 8012eb6:	239a      	movs	r3, #154	@ 0x9a
 8012eb8:	75bb      	strb	r3, [r7, #22]
                        break;
 8012eba:	e058      	b.n	8012f6e <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_424:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AT_424;
 8012ebc:	239b      	movs	r3, #155	@ 0x9b
 8012ebe:	75bb      	strb	r3, [r7, #22]
                        break;
 8012ec0:	e055      	b.n	8012f6e <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8012ec2:	23ff      	movs	r3, #255	@ 0xff
 8012ec4:	75bb      	strb	r3, [r7, #22]
                        break;
 8012ec6:	e052      	b.n	8012f6e <phhalHw_Pn5180_SetCardMode+0x24e>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012ec8:	f240 2321 	movw	r3, #545	@ 0x221
 8012ecc:	e21a      	b.n	8013304 <phhalHw_Pn5180_SetCardMode+0x5e4>
            }

        }
        else
        {
            switch (wTxDataRate)
 8012ece:	897b      	ldrh	r3, [r7, #10]
 8012ed0:	2b03      	cmp	r3, #3
 8012ed2:	dc0f      	bgt.n	8012ef4 <phhalHw_Pn5180_SetCardMode+0x1d4>
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	db1f      	blt.n	8012f18 <phhalHw_Pn5180_SetCardMode+0x1f8>
 8012ed8:	2b03      	cmp	r3, #3
 8012eda:	d81d      	bhi.n	8012f18 <phhalHw_Pn5180_SetCardMode+0x1f8>
 8012edc:	a201      	add	r2, pc, #4	@ (adr r2, 8012ee4 <phhalHw_Pn5180_SetCardMode+0x1c4>)
 8012ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ee2:	bf00      	nop
 8012ee4:	08012efb 	.word	0x08012efb
 8012ee8:	08012f01 	.word	0x08012f01
 8012eec:	08012f07 	.word	0x08012f07
 8012ef0:	08012f0d 	.word	0x08012f0d
 8012ef4:	2bff      	cmp	r3, #255	@ 0xff
 8012ef6:	d00c      	beq.n	8012f12 <phhalHw_Pn5180_SetCardMode+0x1f2>
 8012ef8:	e00e      	b.n	8012f18 <phhalHw_Pn5180_SetCardMode+0x1f8>
            {
                case PHHAL_HW_RF_DATARATE_106:
                    bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_106_MILLER;
 8012efa:	2300      	movs	r3, #0
 8012efc:	75fb      	strb	r3, [r7, #23]
                    /*pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_106;*/
                    break;
 8012efe:	e00e      	b.n	8012f1e <phhalHw_Pn5180_SetCardMode+0x1fe>
                case PHHAL_HW_RF_DATARATE_212:
                    bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_212_MILLER;
 8012f00:	2301      	movs	r3, #1
 8012f02:	75fb      	strb	r3, [r7, #23]
                    /*pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_212;*/
                    break;
 8012f04:	e00b      	b.n	8012f1e <phhalHw_Pn5180_SetCardMode+0x1fe>
                case PHHAL_HW_RF_DATARATE_424:
                    bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_424_MILLER;
 8012f06:	2302      	movs	r3, #2
 8012f08:	75fb      	strb	r3, [r7, #23]
                    /* pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_424;*/
                    break;
 8012f0a:	e008      	b.n	8012f1e <phhalHw_Pn5180_SetCardMode+0x1fe>
                case PHHAL_HW_RF_DATARATE_848:
                    bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_848_MILLER;
 8012f0c:	2303      	movs	r3, #3
 8012f0e:	75fb      	strb	r3, [r7, #23]
                    /* pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_848;*/
                    break;
 8012f10:	e005      	b.n	8012f1e <phhalHw_Pn5180_SetCardMode+0x1fe>
                case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                    bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8012f12:	23ff      	movs	r3, #255	@ 0xff
 8012f14:	75fb      	strb	r3, [r7, #23]
                    break;
 8012f16:	e002      	b.n	8012f1e <phhalHw_Pn5180_SetCardMode+0x1fe>
                default:
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012f18:	f240 2321 	movw	r3, #545	@ 0x221
 8012f1c:	e1f2      	b.n	8013304 <phhalHw_Pn5180_SetCardMode+0x5e4>
            }
            switch (wRxDataRate)
 8012f1e:	893b      	ldrh	r3, [r7, #8]
 8012f20:	2b03      	cmp	r3, #3
 8012f22:	dc0f      	bgt.n	8012f44 <phhalHw_Pn5180_SetCardMode+0x224>
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	db1f      	blt.n	8012f68 <phhalHw_Pn5180_SetCardMode+0x248>
 8012f28:	2b03      	cmp	r3, #3
 8012f2a:	d81d      	bhi.n	8012f68 <phhalHw_Pn5180_SetCardMode+0x248>
 8012f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8012f34 <phhalHw_Pn5180_SetCardMode+0x214>)
 8012f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f32:	bf00      	nop
 8012f34:	08012f4b 	.word	0x08012f4b
 8012f38:	08012f51 	.word	0x08012f51
 8012f3c:	08012f57 	.word	0x08012f57
 8012f40:	08012f5d 	.word	0x08012f5d
 8012f44:	2bff      	cmp	r3, #255	@ 0xff
 8012f46:	d00c      	beq.n	8012f62 <phhalHw_Pn5180_SetCardMode+0x242>
 8012f48:	e00e      	b.n	8012f68 <phhalHw_Pn5180_SetCardMode+0x248>
            {
                case PHHAL_HW_RF_DATARATE_106:
                    bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_106_MANCH_SUBC;
 8012f4a:	2380      	movs	r3, #128	@ 0x80
 8012f4c:	75bb      	strb	r3, [r7, #22]
                    /*pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_106;*/
                    break;
 8012f4e:	e00e      	b.n	8012f6e <phhalHw_Pn5180_SetCardMode+0x24e>
                case PHHAL_HW_RF_DATARATE_212:
                    bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_212_BPSK;
 8012f50:	2381      	movs	r3, #129	@ 0x81
 8012f52:	75bb      	strb	r3, [r7, #22]
                    /*pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_212;*/
                    break;
 8012f54:	e00b      	b.n	8012f6e <phhalHw_Pn5180_SetCardMode+0x24e>
                case PHHAL_HW_RF_DATARATE_424:
                    bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_424_BPSK;
 8012f56:	2382      	movs	r3, #130	@ 0x82
 8012f58:	75bb      	strb	r3, [r7, #22]
                    /* pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_424;*/
                    break;
 8012f5a:	e008      	b.n	8012f6e <phhalHw_Pn5180_SetCardMode+0x24e>
                case PHHAL_HW_RF_DATARATE_848:
                    bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_848_BPSK;
 8012f5c:	2383      	movs	r3, #131	@ 0x83
 8012f5e:	75bb      	strb	r3, [r7, #22]
                    /* pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_848;*/
                    break;
 8012f60:	e005      	b.n	8012f6e <phhalHw_Pn5180_SetCardMode+0x24e>
                case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                    bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8012f62:	23ff      	movs	r3, #255	@ 0xff
 8012f64:	75bb      	strb	r3, [r7, #22]
                    break;
 8012f66:	e002      	b.n	8012f6e <phhalHw_Pn5180_SetCardMode+0x24e>
                default:
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012f68:	f240 2321 	movw	r3, #545	@ 0x221
 8012f6c:	e1ca      	b.n	8013304 <phhalHw_Pn5180_SetCardMode+0x5e4>
            }
        }
        break;
 8012f6e:	e1a7      	b.n	80132c0 <phhalHw_Pn5180_SetCardMode+0x5a0>

    case PHHAL_HW_CARDTYPE_ISO14443B:

        switch (wTxDataRate)
 8012f70:	897b      	ldrh	r3, [r7, #10]
 8012f72:	2b03      	cmp	r3, #3
 8012f74:	dc0e      	bgt.n	8012f94 <phhalHw_Pn5180_SetCardMode+0x274>
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	db1e      	blt.n	8012fb8 <phhalHw_Pn5180_SetCardMode+0x298>
 8012f7a:	2b03      	cmp	r3, #3
 8012f7c:	d81c      	bhi.n	8012fb8 <phhalHw_Pn5180_SetCardMode+0x298>
 8012f7e:	a201      	add	r2, pc, #4	@ (adr r2, 8012f84 <phhalHw_Pn5180_SetCardMode+0x264>)
 8012f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f84:	08012f9b 	.word	0x08012f9b
 8012f88:	08012fa1 	.word	0x08012fa1
 8012f8c:	08012fa7 	.word	0x08012fa7
 8012f90:	08012fad 	.word	0x08012fad
 8012f94:	2bff      	cmp	r3, #255	@ 0xff
 8012f96:	d00c      	beq.n	8012fb2 <phhalHw_Pn5180_SetCardMode+0x292>
 8012f98:	e00e      	b.n	8012fb8 <phhalHw_Pn5180_SetCardMode+0x298>
        {
            case PHHAL_HW_RF_DATARATE_106:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443B_106_NRZ;
 8012f9a:	2304      	movs	r3, #4
 8012f9c:	75fb      	strb	r3, [r7, #23]
                /* pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_106;*/
                break;
 8012f9e:	e00e      	b.n	8012fbe <phhalHw_Pn5180_SetCardMode+0x29e>
            case PHHAL_HW_RF_DATARATE_212:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443B_212_NRZ;
 8012fa0:	2305      	movs	r3, #5
 8012fa2:	75fb      	strb	r3, [r7, #23]
                /* pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_212;*/
                break;
 8012fa4:	e00b      	b.n	8012fbe <phhalHw_Pn5180_SetCardMode+0x29e>
            case PHHAL_HW_RF_DATARATE_424:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443B_424_NRZ;
 8012fa6:	2306      	movs	r3, #6
 8012fa8:	75fb      	strb	r3, [r7, #23]
                /*pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_424;*/
                break;
 8012faa:	e008      	b.n	8012fbe <phhalHw_Pn5180_SetCardMode+0x29e>
            case PHHAL_HW_RF_DATARATE_848:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443B_848_NRZ;
 8012fac:	2307      	movs	r3, #7
 8012fae:	75fb      	strb	r3, [r7, #23]
                /*pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_848;*/
                break;
 8012fb0:	e005      	b.n	8012fbe <phhalHw_Pn5180_SetCardMode+0x29e>
            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8012fb2:	23ff      	movs	r3, #255	@ 0xff
 8012fb4:	75fb      	strb	r3, [r7, #23]
                break;
 8012fb6:	e002      	b.n	8012fbe <phhalHw_Pn5180_SetCardMode+0x29e>
            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012fb8:	f240 2321 	movw	r3, #545	@ 0x221
 8012fbc:	e1a2      	b.n	8013304 <phhalHw_Pn5180_SetCardMode+0x5e4>
        }

        switch (wRxDataRate)
 8012fbe:	893b      	ldrh	r3, [r7, #8]
 8012fc0:	2b03      	cmp	r3, #3
 8012fc2:	dc0f      	bgt.n	8012fe4 <phhalHw_Pn5180_SetCardMode+0x2c4>
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	db1f      	blt.n	8013008 <phhalHw_Pn5180_SetCardMode+0x2e8>
 8012fc8:	2b03      	cmp	r3, #3
 8012fca:	d81d      	bhi.n	8013008 <phhalHw_Pn5180_SetCardMode+0x2e8>
 8012fcc:	a201      	add	r2, pc, #4	@ (adr r2, 8012fd4 <phhalHw_Pn5180_SetCardMode+0x2b4>)
 8012fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fd2:	bf00      	nop
 8012fd4:	08012feb 	.word	0x08012feb
 8012fd8:	08012ff1 	.word	0x08012ff1
 8012fdc:	08012ff7 	.word	0x08012ff7
 8012fe0:	08012ffd 	.word	0x08012ffd
 8012fe4:	2bff      	cmp	r3, #255	@ 0xff
 8012fe6:	d00c      	beq.n	8013002 <phhalHw_Pn5180_SetCardMode+0x2e2>
 8012fe8:	e00e      	b.n	8013008 <phhalHw_Pn5180_SetCardMode+0x2e8>
        {
            case PHHAL_HW_RF_DATARATE_106:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443B_106_BPSK;
 8012fea:	2384      	movs	r3, #132	@ 0x84
 8012fec:	75bb      	strb	r3, [r7, #22]
                /* pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_106;*/
                break;
 8012fee:	e00e      	b.n	801300e <phhalHw_Pn5180_SetCardMode+0x2ee>
            case PHHAL_HW_RF_DATARATE_212:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443B_212_BPSK;
 8012ff0:	2385      	movs	r3, #133	@ 0x85
 8012ff2:	75bb      	strb	r3, [r7, #22]
                /*pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_212;*/
                break;
 8012ff4:	e00b      	b.n	801300e <phhalHw_Pn5180_SetCardMode+0x2ee>
            case PHHAL_HW_RF_DATARATE_424:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443B_424_BPSK;
 8012ff6:	2386      	movs	r3, #134	@ 0x86
 8012ff8:	75bb      	strb	r3, [r7, #22]
                /* pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_424;*/
                break;
 8012ffa:	e008      	b.n	801300e <phhalHw_Pn5180_SetCardMode+0x2ee>
            case PHHAL_HW_RF_DATARATE_848:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443B_848_BPSK;
 8012ffc:	2387      	movs	r3, #135	@ 0x87
 8012ffe:	75bb      	strb	r3, [r7, #22]
                /*  pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_848;*/
                break;
 8013000:	e005      	b.n	801300e <phhalHw_Pn5180_SetCardMode+0x2ee>
            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8013002:	23ff      	movs	r3, #255	@ 0xff
 8013004:	75bb      	strb	r3, [r7, #22]
                break;
 8013006:	e002      	b.n	801300e <phhalHw_Pn5180_SetCardMode+0x2ee>
            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8013008:	f240 2321 	movw	r3, #545	@ 0x221
 801300c:	e17a      	b.n	8013304 <phhalHw_Pn5180_SetCardMode+0x5e4>
        }
        break;
 801300e:	e157      	b.n	80132c0 <phhalHw_Pn5180_SetCardMode+0x5a0>

    case PHHAL_HW_CARDTYPE_FELICA_212:
    case PHHAL_HW_CARDTYPE_FELICA_424:

        if (pDataParams->wTargetMode != PH_OFF)
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013014:	2b00      	cmp	r3, #0
 8013016:	d05c      	beq.n	80130d2 <phhalHw_Pn5180_SetCardMode+0x3b2>
        {
            if(pDataParams->bActiveMode == PH_OFF)
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801301e:	2b00      	cmp	r3, #0
 8013020:	d12b      	bne.n	801307a <phhalHw_Pn5180_SetCardMode+0x35a>
            {
                switch (wTxDataRate)
 8013022:	897b      	ldrh	r3, [r7, #10]
 8013024:	2bff      	cmp	r3, #255	@ 0xff
 8013026:	d00c      	beq.n	8013042 <phhalHw_Pn5180_SetCardMode+0x322>
 8013028:	2bff      	cmp	r3, #255	@ 0xff
 801302a:	dc0d      	bgt.n	8013048 <phhalHw_Pn5180_SetCardMode+0x328>
 801302c:	2b01      	cmp	r3, #1
 801302e:	d002      	beq.n	8013036 <phhalHw_Pn5180_SetCardMode+0x316>
 8013030:	2b02      	cmp	r3, #2
 8013032:	d003      	beq.n	801303c <phhalHw_Pn5180_SetCardMode+0x31c>
 8013034:	e008      	b.n	8013048 <phhalHw_Pn5180_SetCardMode+0x328>
                {
                    case PHHAL_HW_RF_DATARATE_212:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_PT_212;
 8013036:	2317      	movs	r3, #23
 8013038:	75fb      	strb	r3, [r7, #23]
                        break;
 801303a:	e008      	b.n	801304e <phhalHw_Pn5180_SetCardMode+0x32e>

                    case PHHAL_HW_RF_DATARATE_424:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_PT_424;
 801303c:	2318      	movs	r3, #24
 801303e:	75fb      	strb	r3, [r7, #23]
                        break;
 8013040:	e005      	b.n	801304e <phhalHw_Pn5180_SetCardMode+0x32e>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8013042:	23ff      	movs	r3, #255	@ 0xff
 8013044:	75fb      	strb	r3, [r7, #23]
                        break;
 8013046:	e002      	b.n	801304e <phhalHw_Pn5180_SetCardMode+0x32e>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8013048:	f240 2321 	movw	r3, #545	@ 0x221
 801304c:	e15a      	b.n	8013304 <phhalHw_Pn5180_SetCardMode+0x5e4>
                }

                switch (wRxDataRate)
 801304e:	893b      	ldrh	r3, [r7, #8]
 8013050:	2bff      	cmp	r3, #255	@ 0xff
 8013052:	d00c      	beq.n	801306e <phhalHw_Pn5180_SetCardMode+0x34e>
 8013054:	2bff      	cmp	r3, #255	@ 0xff
 8013056:	dc0d      	bgt.n	8013074 <phhalHw_Pn5180_SetCardMode+0x354>
 8013058:	2b01      	cmp	r3, #1
 801305a:	d002      	beq.n	8013062 <phhalHw_Pn5180_SetCardMode+0x342>
 801305c:	2b02      	cmp	r3, #2
 801305e:	d003      	beq.n	8013068 <phhalHw_Pn5180_SetCardMode+0x348>
 8013060:	e008      	b.n	8013074 <phhalHw_Pn5180_SetCardMode+0x354>
                {
                    case PHHAL_HW_RF_DATARATE_212:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_PT_212;
 8013062:	2397      	movs	r3, #151	@ 0x97
 8013064:	75bb      	strb	r3, [r7, #22]
                        break;
 8013066:	e060      	b.n	801312a <phhalHw_Pn5180_SetCardMode+0x40a>

                    case PHHAL_HW_RF_DATARATE_424:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_PT_424;
 8013068:	2398      	movs	r3, #152	@ 0x98
 801306a:	75bb      	strb	r3, [r7, #22]
                        break;
 801306c:	e05d      	b.n	801312a <phhalHw_Pn5180_SetCardMode+0x40a>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 801306e:	23ff      	movs	r3, #255	@ 0xff
 8013070:	75bb      	strb	r3, [r7, #22]
                        break;
 8013072:	e05a      	b.n	801312a <phhalHw_Pn5180_SetCardMode+0x40a>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8013074:	f240 2321 	movw	r3, #545	@ 0x221
 8013078:	e144      	b.n	8013304 <phhalHw_Pn5180_SetCardMode+0x5e4>
                }
            }
            else
            {
                switch (wTxDataRate)
 801307a:	897b      	ldrh	r3, [r7, #10]
 801307c:	2bff      	cmp	r3, #255	@ 0xff
 801307e:	d00c      	beq.n	801309a <phhalHw_Pn5180_SetCardMode+0x37a>
 8013080:	2bff      	cmp	r3, #255	@ 0xff
 8013082:	dc0d      	bgt.n	80130a0 <phhalHw_Pn5180_SetCardMode+0x380>
 8013084:	2b01      	cmp	r3, #1
 8013086:	d002      	beq.n	801308e <phhalHw_Pn5180_SetCardMode+0x36e>
 8013088:	2b02      	cmp	r3, #2
 801308a:	d003      	beq.n	8013094 <phhalHw_Pn5180_SetCardMode+0x374>
 801308c:	e008      	b.n	80130a0 <phhalHw_Pn5180_SetCardMode+0x380>
                {
                    case PHHAL_HW_RF_DATARATE_212:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AT_212;
 801308e:	231a      	movs	r3, #26
 8013090:	75fb      	strb	r3, [r7, #23]
                        break;
 8013092:	e008      	b.n	80130a6 <phhalHw_Pn5180_SetCardMode+0x386>
                    case PHHAL_HW_RF_DATARATE_424:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AT_424;
 8013094:	231b      	movs	r3, #27
 8013096:	75fb      	strb	r3, [r7, #23]
                        break;
 8013098:	e005      	b.n	80130a6 <phhalHw_Pn5180_SetCardMode+0x386>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 801309a:	23ff      	movs	r3, #255	@ 0xff
 801309c:	75fb      	strb	r3, [r7, #23]
                        break;
 801309e:	e002      	b.n	80130a6 <phhalHw_Pn5180_SetCardMode+0x386>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80130a0:	f240 2321 	movw	r3, #545	@ 0x221
 80130a4:	e12e      	b.n	8013304 <phhalHw_Pn5180_SetCardMode+0x5e4>
                }

                switch (wRxDataRate)
 80130a6:	893b      	ldrh	r3, [r7, #8]
 80130a8:	2bff      	cmp	r3, #255	@ 0xff
 80130aa:	d00c      	beq.n	80130c6 <phhalHw_Pn5180_SetCardMode+0x3a6>
 80130ac:	2bff      	cmp	r3, #255	@ 0xff
 80130ae:	dc0d      	bgt.n	80130cc <phhalHw_Pn5180_SetCardMode+0x3ac>
 80130b0:	2b01      	cmp	r3, #1
 80130b2:	d002      	beq.n	80130ba <phhalHw_Pn5180_SetCardMode+0x39a>
 80130b4:	2b02      	cmp	r3, #2
 80130b6:	d003      	beq.n	80130c0 <phhalHw_Pn5180_SetCardMode+0x3a0>
 80130b8:	e008      	b.n	80130cc <phhalHw_Pn5180_SetCardMode+0x3ac>
                {
                    case PHHAL_HW_RF_DATARATE_212:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AT_212;
 80130ba:	239a      	movs	r3, #154	@ 0x9a
 80130bc:	75bb      	strb	r3, [r7, #22]
                        break;
 80130be:	e034      	b.n	801312a <phhalHw_Pn5180_SetCardMode+0x40a>
                    case PHHAL_HW_RF_DATARATE_424:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AT_424;
 80130c0:	239b      	movs	r3, #155	@ 0x9b
 80130c2:	75bb      	strb	r3, [r7, #22]
                        break;
 80130c4:	e031      	b.n	801312a <phhalHw_Pn5180_SetCardMode+0x40a>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 80130c6:	23ff      	movs	r3, #255	@ 0xff
 80130c8:	75bb      	strb	r3, [r7, #22]
                        break;
 80130ca:	e02e      	b.n	801312a <phhalHw_Pn5180_SetCardMode+0x40a>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80130cc:	f240 2321 	movw	r3, #545	@ 0x221
 80130d0:	e118      	b.n	8013304 <phhalHw_Pn5180_SetCardMode+0x5e4>
                }
            }
        }
        else
        {
            switch (wTxDataRate)
 80130d2:	897b      	ldrh	r3, [r7, #10]
 80130d4:	2bff      	cmp	r3, #255	@ 0xff
 80130d6:	d00c      	beq.n	80130f2 <phhalHw_Pn5180_SetCardMode+0x3d2>
 80130d8:	2bff      	cmp	r3, #255	@ 0xff
 80130da:	dc0d      	bgt.n	80130f8 <phhalHw_Pn5180_SetCardMode+0x3d8>
 80130dc:	2b01      	cmp	r3, #1
 80130de:	d002      	beq.n	80130e6 <phhalHw_Pn5180_SetCardMode+0x3c6>
 80130e0:	2b02      	cmp	r3, #2
 80130e2:	d003      	beq.n	80130ec <phhalHw_Pn5180_SetCardMode+0x3cc>
 80130e4:	e008      	b.n	80130f8 <phhalHw_Pn5180_SetCardMode+0x3d8>
            {
                case PHHAL_HW_RF_DATARATE_212:
                    bTxConfig = PHHAL_HW_PN5180_RF_TX_FELICA_212;
 80130e6:	2308      	movs	r3, #8
 80130e8:	75fb      	strb	r3, [r7, #23]
                    break;
 80130ea:	e008      	b.n	80130fe <phhalHw_Pn5180_SetCardMode+0x3de>

                case PHHAL_HW_RF_DATARATE_424:
                    bTxConfig = PHHAL_HW_PN5180_RF_TX_FELICA_424;
 80130ec:	2309      	movs	r3, #9
 80130ee:	75fb      	strb	r3, [r7, #23]
                    break;
 80130f0:	e005      	b.n	80130fe <phhalHw_Pn5180_SetCardMode+0x3de>

                case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                    bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 80130f2:	23ff      	movs	r3, #255	@ 0xff
 80130f4:	75fb      	strb	r3, [r7, #23]
                    break;
 80130f6:	e002      	b.n	80130fe <phhalHw_Pn5180_SetCardMode+0x3de>

                default:
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80130f8:	f240 2321 	movw	r3, #545	@ 0x221
 80130fc:	e102      	b.n	8013304 <phhalHw_Pn5180_SetCardMode+0x5e4>
            }

            switch (wRxDataRate)
 80130fe:	893b      	ldrh	r3, [r7, #8]
 8013100:	2bff      	cmp	r3, #255	@ 0xff
 8013102:	d00c      	beq.n	801311e <phhalHw_Pn5180_SetCardMode+0x3fe>
 8013104:	2bff      	cmp	r3, #255	@ 0xff
 8013106:	dc0d      	bgt.n	8013124 <phhalHw_Pn5180_SetCardMode+0x404>
 8013108:	2b01      	cmp	r3, #1
 801310a:	d002      	beq.n	8013112 <phhalHw_Pn5180_SetCardMode+0x3f2>
 801310c:	2b02      	cmp	r3, #2
 801310e:	d003      	beq.n	8013118 <phhalHw_Pn5180_SetCardMode+0x3f8>
 8013110:	e008      	b.n	8013124 <phhalHw_Pn5180_SetCardMode+0x404>
            {
                case PHHAL_HW_RF_DATARATE_212:
                    bRxConfig = PHHAL_HW_PN5180_RF_RX_FELICA_212;
 8013112:	2388      	movs	r3, #136	@ 0x88
 8013114:	75bb      	strb	r3, [r7, #22]
                    break;
 8013116:	e008      	b.n	801312a <phhalHw_Pn5180_SetCardMode+0x40a>

                case PHHAL_HW_RF_DATARATE_424:
                    bRxConfig = PHHAL_HW_PN5180_RF_RX_FELICA_424;
 8013118:	2389      	movs	r3, #137	@ 0x89
 801311a:	75bb      	strb	r3, [r7, #22]
                    break;
 801311c:	e005      	b.n	801312a <phhalHw_Pn5180_SetCardMode+0x40a>

                case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                    bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 801311e:	23ff      	movs	r3, #255	@ 0xff
 8013120:	75bb      	strb	r3, [r7, #22]
                    break;
 8013122:	e002      	b.n	801312a <phhalHw_Pn5180_SetCardMode+0x40a>

                default:
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8013124:	f240 2321 	movw	r3, #545	@ 0x221
 8013128:	e0ec      	b.n	8013304 <phhalHw_Pn5180_SetCardMode+0x5e4>
            }

        }
        break;
 801312a:	e0c9      	b.n	80132c0 <phhalHw_Pn5180_SetCardMode+0x5a0>

    case PHHAL_HW_CARDTYPE_ISO15693:

        switch (wTxDataRate)
 801312c:	897b      	ldrh	r3, [r7, #10]
 801312e:	2b0b      	cmp	r3, #11
 8013130:	d002      	beq.n	8013138 <phhalHw_Pn5180_SetCardMode+0x418>
 8013132:	2bff      	cmp	r3, #255	@ 0xff
 8013134:	d003      	beq.n	801313e <phhalHw_Pn5180_SetCardMode+0x41e>
 8013136:	e005      	b.n	8013144 <phhalHw_Pn5180_SetCardMode+0x424>
        {
            case PHHAL_HW_RF_TX_DATARATE_1_OUT_OF_4:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO15693_26_1OF4_ASK10;
 8013138:	230e      	movs	r3, #14
 801313a:	75fb      	strb	r3, [r7, #23]
                break;
 801313c:	e005      	b.n	801314a <phhalHw_Pn5180_SetCardMode+0x42a>

            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 801313e:	23ff      	movs	r3, #255	@ 0xff
 8013140:	75fb      	strb	r3, [r7, #23]
                break;
 8013142:	e002      	b.n	801314a <phhalHw_Pn5180_SetCardMode+0x42a>

            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8013144:	f240 2321 	movw	r3, #545	@ 0x221
 8013148:	e0dc      	b.n	8013304 <phhalHw_Pn5180_SetCardMode+0x5e4>
        }

        switch (wRxDataRate)
 801314a:	893b      	ldrh	r3, [r7, #8]
 801314c:	2b0f      	cmp	r3, #15
 801314e:	dc25      	bgt.n	801319c <phhalHw_Pn5180_SetCardMode+0x47c>
 8013150:	2b00      	cmp	r3, #0
 8013152:	dd32      	ble.n	80131ba <phhalHw_Pn5180_SetCardMode+0x49a>
 8013154:	3b01      	subs	r3, #1
 8013156:	2b0e      	cmp	r3, #14
 8013158:	d82f      	bhi.n	80131ba <phhalHw_Pn5180_SetCardMode+0x49a>
 801315a:	a201      	add	r2, pc, #4	@ (adr r2, 8013160 <phhalHw_Pn5180_SetCardMode+0x440>)
 801315c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013160:	080131af 	.word	0x080131af
 8013164:	080131bb 	.word	0x080131bb
 8013168:	080131bb 	.word	0x080131bb
 801316c:	080131bb 	.word	0x080131bb
 8013170:	080131bb 	.word	0x080131bb
 8013174:	080131bb 	.word	0x080131bb
 8013178:	080131bb 	.word	0x080131bb
 801317c:	080131bb 	.word	0x080131bb
 8013180:	080131bb 	.word	0x080131bb
 8013184:	080131bb 	.word	0x080131bb
 8013188:	080131bb 	.word	0x080131bb
 801318c:	080131af 	.word	0x080131af
 8013190:	080131a3 	.word	0x080131a3
 8013194:	080131af 	.word	0x080131af
 8013198:	080131a9 	.word	0x080131a9
 801319c:	2bff      	cmp	r3, #255	@ 0xff
 801319e:	d009      	beq.n	80131b4 <phhalHw_Pn5180_SetCardMode+0x494>
 80131a0:	e00b      	b.n	80131ba <phhalHw_Pn5180_SetCardMode+0x49a>
        {
            case PHHAL_HW_RF_RX_DATARATE_HIGH:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO15693_26_1OF4_SC;
 80131a2:	238d      	movs	r3, #141	@ 0x8d
 80131a4:	75bb      	strb	r3, [r7, #22]
                break;
 80131a6:	e00b      	b.n	80131c0 <phhalHw_Pn5180_SetCardMode+0x4a0>

            case PHHAL_HW_RF_RX_DATARATE_FAST_HIGH:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO15693_53_1OF4_SC;
 80131a8:	238e      	movs	r3, #142	@ 0x8e
 80131aa:	75bb      	strb	r3, [r7, #22]
                break;
 80131ac:	e008      	b.n	80131c0 <phhalHw_Pn5180_SetCardMode+0x4a0>

            case PHHAL_HW_RF_RX_DATARATE_LOW:
            case PHHAL_HW_RF_RX_DATARATE_FAST_LOW:
            case PHHAL_HW_RF_DATARATE_212:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 80131ae:	f240 2323 	movw	r3, #547	@ 0x223
 80131b2:	e0a7      	b.n	8013304 <phhalHw_Pn5180_SetCardMode+0x5e4>

            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 80131b4:	23ff      	movs	r3, #255	@ 0xff
 80131b6:	75bb      	strb	r3, [r7, #22]
                break;
 80131b8:	e002      	b.n	80131c0 <phhalHw_Pn5180_SetCardMode+0x4a0>

            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80131ba:	f240 2321 	movw	r3, #545	@ 0x221
 80131be:	e0a1      	b.n	8013304 <phhalHw_Pn5180_SetCardMode+0x5e4>
        }
        break;
 80131c0:	e07e      	b.n	80132c0 <phhalHw_Pn5180_SetCardMode+0x5a0>

    case PHHAL_HW_CARDTYPE_I18000P3M3:

        switch (wTxDataRate)
 80131c2:	897b      	ldrh	r3, [r7, #10]
 80131c4:	2b11      	cmp	r3, #17
 80131c6:	d002      	beq.n	80131ce <phhalHw_Pn5180_SetCardMode+0x4ae>
 80131c8:	2bff      	cmp	r3, #255	@ 0xff
 80131ca:	d00c      	beq.n	80131e6 <phhalHw_Pn5180_SetCardMode+0x4c6>
 80131cc:	e00e      	b.n	80131ec <phhalHw_Pn5180_SetCardMode+0x4cc>
        {
            case PHHAL_HW_RF_TX_DATARATE_I18000P3M3:
                /* Subcarrier check */
                if ((wSubcarrier != PHHAL_HW_SUBCARRIER_DUAL) &&
 80131ce:	88fb      	ldrh	r3, [r7, #6]
 80131d0:	2b01      	cmp	r3, #1
 80131d2:	d005      	beq.n	80131e0 <phhalHw_Pn5180_SetCardMode+0x4c0>
 80131d4:	88fb      	ldrh	r3, [r7, #6]
 80131d6:	2b02      	cmp	r3, #2
 80131d8:	d002      	beq.n	80131e0 <phhalHw_Pn5180_SetCardMode+0x4c0>
                    (wSubcarrier != PHHAL_HW_SUBCARRIER_QUAD))
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80131da:	f240 2321 	movw	r3, #545	@ 0x221
 80131de:	e091      	b.n	8013304 <phhalHw_Pn5180_SetCardMode+0x5e4>
                }

                bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO180003M3_TARI_9_44_ASK;
 80131e0:	2310      	movs	r3, #16
 80131e2:	75fb      	strb	r3, [r7, #23]
                break;
 80131e4:	e005      	b.n	80131f2 <phhalHw_Pn5180_SetCardMode+0x4d2>

            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 80131e6:	23ff      	movs	r3, #255	@ 0xff
 80131e8:	75fb      	strb	r3, [r7, #23]
                break;
 80131ea:	e002      	b.n	80131f2 <phhalHw_Pn5180_SetCardMode+0x4d2>

            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80131ec:	f240 2321 	movw	r3, #545	@ 0x221
 80131f0:	e088      	b.n	8013304 <phhalHw_Pn5180_SetCardMode+0x5e4>
        }

        switch (wRxDataRate)
 80131f2:	893b      	ldrh	r3, [r7, #8]
 80131f4:	2b16      	cmp	r3, #22
 80131f6:	dc0f      	bgt.n	8013218 <phhalHw_Pn5180_SetCardMode+0x4f8>
 80131f8:	2b13      	cmp	r3, #19
 80131fa:	db1f      	blt.n	801323c <phhalHw_Pn5180_SetCardMode+0x51c>
 80131fc:	3b13      	subs	r3, #19
 80131fe:	2b03      	cmp	r3, #3
 8013200:	d81c      	bhi.n	801323c <phhalHw_Pn5180_SetCardMode+0x51c>
 8013202:	a201      	add	r2, pc, #4	@ (adr r2, 8013208 <phhalHw_Pn5180_SetCardMode+0x4e8>)
 8013204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013208:	0801321f 	.word	0x0801321f
 801320c:	0801322b 	.word	0x0801322b
 8013210:	08013225 	.word	0x08013225
 8013214:	08013231 	.word	0x08013231
 8013218:	2bff      	cmp	r3, #255	@ 0xff
 801321a:	d00c      	beq.n	8013236 <phhalHw_Pn5180_SetCardMode+0x516>
 801321c:	e00e      	b.n	801323c <phhalHw_Pn5180_SetCardMode+0x51c>
        {
            case PHHAL_HW_RX_I18000P3M3_FL_423_MAN2:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO180003M3_MANCH424_2_PERIOD;
 801321e:	2390      	movs	r3, #144	@ 0x90
 8013220:	75bb      	strb	r3, [r7, #22]
                break;
 8013222:	e00e      	b.n	8013242 <phhalHw_Pn5180_SetCardMode+0x522>
            case PHHAL_HW_RX_I18000P3M3_FL_423_MAN4:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO180003M3_MANCH424_4_PERIOD;
 8013224:	238f      	movs	r3, #143	@ 0x8f
 8013226:	75bb      	strb	r3, [r7, #22]
                break;
 8013228:	e00b      	b.n	8013242 <phhalHw_Pn5180_SetCardMode+0x522>
            case PHHAL_HW_RX_I18000P3M3_FL_847_MAN2:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO180003M3_MANCH848_2_PERIOD;
 801322a:	2392      	movs	r3, #146	@ 0x92
 801322c:	75bb      	strb	r3, [r7, #22]
                break;
 801322e:	e008      	b.n	8013242 <phhalHw_Pn5180_SetCardMode+0x522>
            case PHHAL_HW_RX_I18000P3M3_FL_847_MAN4:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO180003M3_MANCH848_4_PERIOD;
 8013230:	2391      	movs	r3, #145	@ 0x91
 8013232:	75bb      	strb	r3, [r7, #22]
                break;
 8013234:	e005      	b.n	8013242 <phhalHw_Pn5180_SetCardMode+0x522>
            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8013236:	23ff      	movs	r3, #255	@ 0xff
 8013238:	75bb      	strb	r3, [r7, #22]
                break;
 801323a:	e002      	b.n	8013242 <phhalHw_Pn5180_SetCardMode+0x522>
            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 801323c:	f240 2321 	movw	r3, #545	@ 0x221
 8013240:	e060      	b.n	8013304 <phhalHw_Pn5180_SetCardMode+0x5e4>
        }
        break;
 8013242:	e03d      	b.n	80132c0 <phhalHw_Pn5180_SetCardMode+0x5a0>

    case PHHAL_HW_CARDTYPE_I18092M_ACTIVE_106:
    case PHHAL_HW_CARDTYPE_I18092M_ACTIVE_212:
    case PHHAL_HW_CARDTYPE_I18092M_ACTIVE_424:

        switch (wTxDataRate)
 8013244:	897b      	ldrh	r3, [r7, #10]
 8013246:	2bff      	cmp	r3, #255	@ 0xff
 8013248:	d013      	beq.n	8013272 <phhalHw_Pn5180_SetCardMode+0x552>
 801324a:	2bff      	cmp	r3, #255	@ 0xff
 801324c:	dc14      	bgt.n	8013278 <phhalHw_Pn5180_SetCardMode+0x558>
 801324e:	2b02      	cmp	r3, #2
 8013250:	d00c      	beq.n	801326c <phhalHw_Pn5180_SetCardMode+0x54c>
 8013252:	2b02      	cmp	r3, #2
 8013254:	dc10      	bgt.n	8013278 <phhalHw_Pn5180_SetCardMode+0x558>
 8013256:	2b00      	cmp	r3, #0
 8013258:	d002      	beq.n	8013260 <phhalHw_Pn5180_SetCardMode+0x540>
 801325a:	2b01      	cmp	r3, #1
 801325c:	d003      	beq.n	8013266 <phhalHw_Pn5180_SetCardMode+0x546>
 801325e:	e00b      	b.n	8013278 <phhalHw_Pn5180_SetCardMode+0x558>
        {
            case PHHAL_HW_RF_DATARATE_106:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AI_106_106;
 8013260:	230a      	movs	r3, #10
 8013262:	75fb      	strb	r3, [r7, #23]
                break;
 8013264:	e00b      	b.n	801327e <phhalHw_Pn5180_SetCardMode+0x55e>

            case PHHAL_HW_RF_DATARATE_212:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AI_212_212;
 8013266:	230b      	movs	r3, #11
 8013268:	75fb      	strb	r3, [r7, #23]
            break;
 801326a:	e008      	b.n	801327e <phhalHw_Pn5180_SetCardMode+0x55e>

            case PHHAL_HW_RF_DATARATE_424:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AI_424_424;
 801326c:	230c      	movs	r3, #12
 801326e:	75fb      	strb	r3, [r7, #23]
                break;
 8013270:	e005      	b.n	801327e <phhalHw_Pn5180_SetCardMode+0x55e>

            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8013272:	23ff      	movs	r3, #255	@ 0xff
 8013274:	75fb      	strb	r3, [r7, #23]
                break;
 8013276:	e002      	b.n	801327e <phhalHw_Pn5180_SetCardMode+0x55e>

            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8013278:	f240 2321 	movw	r3, #545	@ 0x221
 801327c:	e042      	b.n	8013304 <phhalHw_Pn5180_SetCardMode+0x5e4>
        }

        switch (wRxDataRate)
 801327e:	893b      	ldrh	r3, [r7, #8]
 8013280:	2bff      	cmp	r3, #255	@ 0xff
 8013282:	d013      	beq.n	80132ac <phhalHw_Pn5180_SetCardMode+0x58c>
 8013284:	2bff      	cmp	r3, #255	@ 0xff
 8013286:	dc14      	bgt.n	80132b2 <phhalHw_Pn5180_SetCardMode+0x592>
 8013288:	2b02      	cmp	r3, #2
 801328a:	d00c      	beq.n	80132a6 <phhalHw_Pn5180_SetCardMode+0x586>
 801328c:	2b02      	cmp	r3, #2
 801328e:	dc10      	bgt.n	80132b2 <phhalHw_Pn5180_SetCardMode+0x592>
 8013290:	2b00      	cmp	r3, #0
 8013292:	d002      	beq.n	801329a <phhalHw_Pn5180_SetCardMode+0x57a>
 8013294:	2b01      	cmp	r3, #1
 8013296:	d003      	beq.n	80132a0 <phhalHw_Pn5180_SetCardMode+0x580>
 8013298:	e00b      	b.n	80132b2 <phhalHw_Pn5180_SetCardMode+0x592>
        {
            case PHHAL_HW_RF_DATARATE_106:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AI_106;
 801329a:	238a      	movs	r3, #138	@ 0x8a
 801329c:	75bb      	strb	r3, [r7, #22]
                break;
 801329e:	e00b      	b.n	80132b8 <phhalHw_Pn5180_SetCardMode+0x598>

            case PHHAL_HW_RF_DATARATE_212:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AI_212;
 80132a0:	238b      	movs	r3, #139	@ 0x8b
 80132a2:	75bb      	strb	r3, [r7, #22]
            break;
 80132a4:	e008      	b.n	80132b8 <phhalHw_Pn5180_SetCardMode+0x598>

            case PHHAL_HW_RF_DATARATE_424:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AI_424;
 80132a6:	238c      	movs	r3, #140	@ 0x8c
 80132a8:	75bb      	strb	r3, [r7, #22]
                break;
 80132aa:	e005      	b.n	80132b8 <phhalHw_Pn5180_SetCardMode+0x598>

            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 80132ac:	23ff      	movs	r3, #255	@ 0xff
 80132ae:	75bb      	strb	r3, [r7, #22]
                break;
 80132b0:	e002      	b.n	80132b8 <phhalHw_Pn5180_SetCardMode+0x598>

            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80132b2:	f240 2321 	movw	r3, #545	@ 0x221
 80132b6:	e025      	b.n	8013304 <phhalHw_Pn5180_SetCardMode+0x5e4>
        }

        break;
 80132b8:	e002      	b.n	80132c0 <phhalHw_Pn5180_SetCardMode+0x5a0>

    case PHHAL_HW_CARDTYPE_ICODEEPCUID:
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80132ba:	f240 2321 	movw	r3, #545	@ 0x221
 80132be:	e021      	b.n	8013304 <phhalHw_Pn5180_SetCardMode+0x5e4>
    }

    if((PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX != bTxConfig) || (PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX != bRxConfig))
 80132c0:	7dfb      	ldrb	r3, [r7, #23]
 80132c2:	2bff      	cmp	r3, #255	@ 0xff
 80132c4:	d102      	bne.n	80132cc <phhalHw_Pn5180_SetCardMode+0x5ac>
 80132c6:	7dbb      	ldrb	r3, [r7, #22]
 80132c8:	2bff      	cmp	r3, #255	@ 0xff
 80132ca:	d00c      	beq.n	80132e6 <phhalHw_Pn5180_SetCardMode+0x5c6>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp,
 80132cc:	7dba      	ldrb	r2, [r7, #22]
 80132ce:	7dfb      	ldrb	r3, [r7, #23]
 80132d0:	4619      	mov	r1, r3
 80132d2:	68f8      	ldr	r0, [r7, #12]
 80132d4:	f7fe ffc8 	bl	8012268 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 80132d8:	4603      	mov	r3, r0
 80132da:	82bb      	strh	r3, [r7, #20]
 80132dc:	8abb      	ldrh	r3, [r7, #20]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d001      	beq.n	80132e6 <phhalHw_Pn5180_SetCardMode+0x5c6>
 80132e2:	8abb      	ldrh	r3, [r7, #20]
 80132e4:	e00e      	b.n	8013304 <phhalHw_Pn5180_SetCardMode+0x5e4>
            (uint8_t) bTxConfig,
            (uint8_t) bRxConfig ));
    }

    /* If Datarate is changed, then Update Data-rate in shadow for parity setting */
    if(wTxDataRate != PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX)
 80132e6:	897b      	ldrh	r3, [r7, #10]
 80132e8:	2bff      	cmp	r3, #255	@ 0xff
 80132ea:	d003      	beq.n	80132f4 <phhalHw_Pn5180_SetCardMode+0x5d4>
    {
        pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TXDATARATE_FRAMING] = wTxDataRate;
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	897a      	ldrh	r2, [r7, #10]
 80132f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if(wRxDataRate != PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX)
 80132f4:	893b      	ldrh	r3, [r7, #8]
 80132f6:	2bff      	cmp	r3, #255	@ 0xff
 80132f8:	d003      	beq.n	8013302 <phhalHw_Pn5180_SetCardMode+0x5e2>
    {
        pDataParams->wCfgShadow[PHHAL_HW_CONFIG_RXDATARATE_FRAMING] = wRxDataRate;
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	893a      	ldrh	r2, [r7, #8]
 80132fe:	f8a3 206c 	strh.w	r2, [r3, #108]	@ 0x6c
    }

    return PH_ERR_SUCCESS;
 8013302:	2300      	movs	r3, #0
}
 8013304:	4618      	mov	r0, r3
 8013306:	3718      	adds	r7, #24
 8013308:	46bd      	mov	sp, r7
 801330a:	bd80      	pop	{r7, pc}

0801330c <phhalHw_Pn5180_SetTmo>:
phStatus_t phhalHw_Pn5180_SetTmo(
    phhalHw_Pn5180_DataParams_t *pDataParams,
    uint16_t wTimeout,
    uint8_t  bUnit
    )
{
 801330c:	b580      	push	{r7, lr}
 801330e:	b088      	sub	sp, #32
 8013310:	af02      	add	r7, sp, #8
 8013312:	6078      	str	r0, [r7, #4]
 8013314:	460b      	mov	r3, r1
 8013316:	807b      	strh	r3, [r7, #2]
 8013318:	4613      	mov	r3, r2
 801331a:	707b      	strb	r3, [r7, #1]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint32_t    PH_MEMLOC_REM wPrescaler;
    uint32_t    PH_MEMLOC_REM dwLoadValue;
    uint16_t    PH_MEMLOC_REM wUDigitalDelay;

    wUDigitalDelay = 0U;
 801331c:	2300      	movs	r3, #0
 801331e:	81bb      	strh	r3, [r7, #12]
    /* Parameter check */
    if ((bUnit != PHHAL_HW_TIME_MICROSECONDS) && (bUnit != PHHAL_HW_TIME_MILLISECONDS))
 8013320:	787b      	ldrb	r3, [r7, #1]
 8013322:	2b00      	cmp	r3, #0
 8013324:	d005      	beq.n	8013332 <phhalHw_Pn5180_SetTmo+0x26>
 8013326:	787b      	ldrb	r3, [r7, #1]
 8013328:	2b01      	cmp	r3, #1
 801332a:	d002      	beq.n	8013332 <phhalHw_Pn5180_SetTmo+0x26>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 801332c:	f240 2321 	movw	r3, #545	@ 0x221
 8013330:	e051      	b.n	80133d6 <phhalHw_Pn5180_SetTmo+0xca>
    }

    if(wTimeout == 0U)
 8013332:	887b      	ldrh	r3, [r7, #2]
 8013334:	2b00      	cmp	r3, #0
 8013336:	d101      	bne.n	801333c <phhalHw_Pn5180_SetTmo+0x30>
    {
        return PH_ERR_SUCCESS;
 8013338:	2300      	movs	r3, #0
 801333a:	e04c      	b.n	80133d6 <phhalHw_Pn5180_SetTmo+0xca>
    }

    if (bUnit == PHHAL_HW_TIME_MICROSECONDS)
 801333c:	787b      	ldrb	r3, [r7, #1]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d125      	bne.n	801338e <phhalHw_Pn5180_SetTmo+0x82>
    {
        if (pDataParams->wFirmwareVer < 0x308U)
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 8013348:	f5b3 7f42 	cmp.w	r3, #776	@ 0x308
 801334c:	d20d      	bcs.n	801336a <phhalHw_Pn5180_SetTmo+0x5e>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Int_GetDigiDelay(
 801334e:	f107 030c 	add.w	r3, r7, #12
 8013352:	461a      	mov	r2, r3
 8013354:	2101      	movs	r1, #1
 8013356:	6878      	ldr	r0, [r7, #4]
 8013358:	f000 f966 	bl	8013628 <phhalHw_Pn5180_Int_GetDigiDelay>
 801335c:	4603      	mov	r3, r0
 801335e:	81fb      	strh	r3, [r7, #14]
 8013360:	89fb      	ldrh	r3, [r7, #14]
 8013362:	2b00      	cmp	r3, #0
 8013364:	d001      	beq.n	801336a <phhalHw_Pn5180_SetTmo+0x5e>
 8013366:	89fb      	ldrh	r3, [r7, #14]
 8013368:	e035      	b.n	80133d6 <phhalHw_Pn5180_SetTmo+0xca>
                PH_ON,
                &wUDigitalDelay));
        }

        /* here wTimeout will be in uS */
        wPrescaler = 0x00U;
 801336a:	2300      	movs	r3, #0
 801336c:	617b      	str	r3, [r7, #20]
        /*Reducing the division by 2 digits to retain the 2 digit decimal places which were getting wiped out*/
        dwLoadValue =(uint32_t) ( PHHAL_HW_PN5180_MAX_FREQ / (PHHAL_HW_PN5180_CONVERSION_US_SEC/100));
 801336e:	f240 534c 	movw	r3, #1356	@ 0x54c
 8013372:	613b      	str	r3, [r7, #16]
        /*Restoring the division done in the earlier step*/
        dwLoadValue =(uint32_t) (((wTimeout + wUDigitalDelay) * dwLoadValue)/100);
 8013374:	887b      	ldrh	r3, [r7, #2]
 8013376:	89ba      	ldrh	r2, [r7, #12]
 8013378:	4413      	add	r3, r2
 801337a:	461a      	mov	r2, r3
 801337c:	693b      	ldr	r3, [r7, #16]
 801337e:	fb02 f303 	mul.w	r3, r2, r3
 8013382:	4a17      	ldr	r2, [pc, #92]	@ (80133e0 <phhalHw_Pn5180_SetTmo+0xd4>)
 8013384:	fba2 2303 	umull	r2, r3, r2, r3
 8013388:	095b      	lsrs	r3, r3, #5
 801338a:	613b      	str	r3, [r7, #16]
 801338c:	e00f      	b.n	80133ae <phhalHw_Pn5180_SetTmo+0xa2>
    }
    else
    {
        wPrescaler = 0x3CU;
 801338e:	233c      	movs	r3, #60	@ 0x3c
 8013390:	617b      	str	r3, [r7, #20]
        if(wTimeout <= PHHAL_HW_PN5180_MAX_TIME_DELAY_MS)
 8013392:	887b      	ldrh	r3, [r7, #2]
 8013394:	f644 5248 	movw	r2, #19784	@ 0x4d48
 8013398:	4293      	cmp	r3, r2
 801339a:	d805      	bhi.n	80133a8 <phhalHw_Pn5180_SetTmo+0x9c>
        {
            dwLoadValue =(uint32_t) (  wTimeout * ( PHHAL_HW_PN5180_MIN_FREQ  / PHHAL_HW_PN5180_CONVERSION_MS_SEC) );
 801339c:	887b      	ldrh	r3, [r7, #2]
 801339e:	2235      	movs	r2, #53	@ 0x35
 80133a0:	fb02 f303 	mul.w	r3, r2, r3
 80133a4:	613b      	str	r3, [r7, #16]
 80133a6:	e002      	b.n	80133ae <phhalHw_Pn5180_SetTmo+0xa2>
        }
        else
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
 80133a8:	f240 2322 	movw	r3, #546	@ 0x222
 80133ac:	e013      	b.n	80133d6 <phhalHw_Pn5180_SetTmo+0xca>
        }
    }

    PH_CHECK_SUCCESS_FCT(statusTmp,
 80133ae:	693b      	ldr	r3, [r7, #16]
 80133b0:	9301      	str	r3, [sp, #4]
 80133b2:	697b      	ldr	r3, [r7, #20]
 80133b4:	9300      	str	r3, [sp, #0]
 80133b6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80133ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80133be:	210f      	movs	r1, #15
 80133c0:	6878      	ldr	r0, [r7, #4]
 80133c2:	f7ff f938 	bl	8012636 <phhalHw_Pn5180_TimerStart>
 80133c6:	4603      	mov	r3, r0
 80133c8:	81fb      	strh	r3, [r7, #14]
 80133ca:	89fb      	ldrh	r3, [r7, #14]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d001      	beq.n	80133d4 <phhalHw_Pn5180_SetTmo+0xc8>
 80133d0:	89fb      	ldrh	r3, [r7, #14]
 80133d2:	e000      	b.n	80133d6 <phhalHw_Pn5180_SetTmo+0xca>
        TIMER1_CONFIG_T1_STOP_ON_RX_STARTED_MASK,
        wPrescaler,
        dwLoadValue
        ));

    return PH_ERR_SUCCESS;
 80133d4:	2300      	movs	r3, #0
}
 80133d6:	4618      	mov	r0, r3
 80133d8:	3718      	adds	r7, #24
 80133da:	46bd      	mov	sp, r7
 80133dc:	bd80      	pop	{r7, pc}
 80133de:	bf00      	nop
 80133e0:	51eb851f 	.word	0x51eb851f

080133e4 <phhalHw_Pn5180_Int_Wait>:

phStatus_t phhalHw_Pn5180_Int_Wait(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint32_t dwLoadValue,
    uint32_t wPrescaler)
{
 80133e4:	b580      	push	{r7, lr}
 80133e6:	b094      	sub	sp, #80	@ 0x50
 80133e8:	af02      	add	r7, sp, #8
 80133ea:	60f8      	str	r0, [r7, #12]
 80133ec:	60b9      	str	r1, [r7, #8]
 80133ee:	607a      	str	r2, [r7, #4]
    uint8_t     PH_MEMLOC_BUF wRegTypeValueSets[18];
    uint16_t    PH_MEMLOC_REM wSizeOfRegTypeValueSets;
    uint32_t    PH_MEMLOC_REM dwIrqStatusReg;

    /* Setting Timer1 & Reload value Registers */
    bTmrConfigReg = TIMER0_CONFIG;
 80133f0:	230e      	movs	r3, #14
 80133f2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    bTmrReloadReg = TIMER0_RELOAD;
 80133f6:	230b      	movs	r3, #11
 80133f8:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    dwEnableMask = TIMER0_CONFIG_T0_ENABLE_MASK;
 80133fc:	2301      	movs	r3, #1
 80133fe:	643b      	str	r3, [r7, #64]	@ 0x40

    /*write 0 to stop timer1*/
    wSizeOfRegTypeValueSets = 0U;
 8013400:	2300      	movs	r3, #0
 8013402:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = bTmrConfigReg;
 8013404:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013406:	1c5a      	adds	r2, r3, #1
 8013408:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 801340a:	3348      	adds	r3, #72	@ 0x48
 801340c:	443b      	add	r3, r7
 801340e:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8013412:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE;
 8013416:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013418:	1c5a      	adds	r2, r3, #1
 801341a:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 801341c:	3348      	adds	r3, #72	@ 0x48
 801341e:	443b      	add	r3, r7
 8013420:	2201      	movs	r2, #1
 8013422:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 8013426:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013428:	1c5a      	adds	r2, r3, #1
 801342a:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 801342c:	3348      	adds	r3, #72	@ 0x48
 801342e:	443b      	add	r3, r7
 8013430:	2200      	movs	r2, #0
 8013432:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 8013436:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013438:	1c5a      	adds	r2, r3, #1
 801343a:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 801343c:	3348      	adds	r3, #72	@ 0x48
 801343e:	443b      	add	r3, r7
 8013440:	2200      	movs	r2, #0
 8013442:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 8013446:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013448:	1c5a      	adds	r2, r3, #1
 801344a:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 801344c:	3348      	adds	r3, #72	@ 0x48
 801344e:	443b      	add	r3, r7
 8013450:	2200      	movs	r2, #0
 8013452:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 8013456:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013458:	1c5a      	adds	r2, r3, #1
 801345a:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 801345c:	3348      	adds	r3, #72	@ 0x48
 801345e:	443b      	add	r3, r7
 8013460:	2200      	movs	r2, #0
 8013462:	f803 2c2c 	strb.w	r2, [r3, #-44]

    /*load the timer 2 reload value*/
    dwTemp = (dwLoadValue & TMR_RELOAD_VALUE_MASK);
 8013466:	68bb      	ldr	r3, [r7, #8]
 8013468:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801346c:	63bb      	str	r3, [r7, #56]	@ 0x38
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = bTmrReloadReg;
 801346e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013470:	1c5a      	adds	r2, r3, #1
 8013472:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 8013474:	3348      	adds	r3, #72	@ 0x48
 8013476:	443b      	add	r3, r7
 8013478:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 801347c:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE;
 8013480:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013482:	1c5a      	adds	r2, r3, #1
 8013484:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 8013486:	3348      	adds	r3, #72	@ 0x48
 8013488:	443b      	add	r3, r7
 801348a:	2201      	movs	r2, #1
 801348c:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 8013490:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013492:	1c5a      	adds	r2, r3, #1
 8013494:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 8013496:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013498:	b2d2      	uxtb	r2, r2
 801349a:	3348      	adds	r3, #72	@ 0x48
 801349c:	443b      	add	r3, r7
 801349e:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 80134a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134a4:	0a1a      	lsrs	r2, r3, #8
 80134a6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80134a8:	1c59      	adds	r1, r3, #1
 80134aa:	87f9      	strh	r1, [r7, #62]	@ 0x3e
 80134ac:	b2d2      	uxtb	r2, r2
 80134ae:	3348      	adds	r3, #72	@ 0x48
 80134b0:	443b      	add	r3, r7
 80134b2:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 80134b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134b8:	0c1a      	lsrs	r2, r3, #16
 80134ba:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80134bc:	1c59      	adds	r1, r3, #1
 80134be:	87f9      	strh	r1, [r7, #62]	@ 0x3e
 80134c0:	b2d2      	uxtb	r2, r2
 80134c2:	3348      	adds	r3, #72	@ 0x48
 80134c4:	443b      	add	r3, r7
 80134c6:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 80134ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134cc:	0e1a      	lsrs	r2, r3, #24
 80134ce:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80134d0:	1c59      	adds	r1, r3, #1
 80134d2:	87f9      	strh	r1, [r7, #62]	@ 0x3e
 80134d4:	b2d2      	uxtb	r2, r2
 80134d6:	3348      	adds	r3, #72	@ 0x48
 80134d8:	443b      	add	r3, r7
 80134da:	f803 2c2c 	strb.w	r2, [r3, #-44]

    dwStartCond = TIMER0_CONFIG_T0_START_NOW_MASK;
 80134de:	2340      	movs	r3, #64	@ 0x40
 80134e0:	637b      	str	r3, [r7, #52]	@ 0x34
    dwStopCond = 0x00U;
 80134e2:	2300      	movs	r3, #0
 80134e4:	633b      	str	r3, [r7, #48]	@ 0x30

    /* T2_MODE_SEL is defined by ePrescaler, 0x01U enables the timer */
    dwTemp = (dwStartCond | dwStopCond | wPrescaler | dwEnableMask);
 80134e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80134e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134ea:	431a      	orrs	r2, r3
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	4313      	orrs	r3, r2
 80134f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80134f2:	4313      	orrs	r3, r2
 80134f4:	63bb      	str	r3, [r7, #56]	@ 0x38

    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = bTmrConfigReg;
 80134f6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80134f8:	1c5a      	adds	r2, r3, #1
 80134fa:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 80134fc:	3348      	adds	r3, #72	@ 0x48
 80134fe:	443b      	add	r3, r7
 8013500:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8013504:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE;
 8013508:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801350a:	1c5a      	adds	r2, r3, #1
 801350c:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 801350e:	3348      	adds	r3, #72	@ 0x48
 8013510:	443b      	add	r3, r7
 8013512:	2201      	movs	r2, #1
 8013514:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 8013518:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801351a:	1c5a      	adds	r2, r3, #1
 801351c:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 801351e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013520:	b2d2      	uxtb	r2, r2
 8013522:	3348      	adds	r3, #72	@ 0x48
 8013524:	443b      	add	r3, r7
 8013526:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 801352a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801352c:	0a1a      	lsrs	r2, r3, #8
 801352e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013530:	1c59      	adds	r1, r3, #1
 8013532:	87f9      	strh	r1, [r7, #62]	@ 0x3e
 8013534:	b2d2      	uxtb	r2, r2
 8013536:	3348      	adds	r3, #72	@ 0x48
 8013538:	443b      	add	r3, r7
 801353a:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 801353e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013540:	0c1a      	lsrs	r2, r3, #16
 8013542:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013544:	1c59      	adds	r1, r3, #1
 8013546:	87f9      	strh	r1, [r7, #62]	@ 0x3e
 8013548:	b2d2      	uxtb	r2, r2
 801354a:	3348      	adds	r3, #72	@ 0x48
 801354c:	443b      	add	r3, r7
 801354e:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 8013552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013554:	0e1a      	lsrs	r2, r3, #24
 8013556:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013558:	1c59      	adds	r1, r3, #1
 801355a:	87f9      	strh	r1, [r7, #62]	@ 0x3e
 801355c:	b2d2      	uxtb	r2, r2
 801355e:	3348      	adds	r3, #72	@ 0x48
 8013560:	443b      	add	r3, r7
 8013562:	f803 2c2c 	strb.w	r2, [r3, #-44]

    /* Clear Interrupt  */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, IRQ_SET_CLEAR_TIMER0_IRQ_CLR_MASK));
 8013566:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801356a:	2103      	movs	r1, #3
 801356c:	68f8      	ldr	r0, [r7, #12]
 801356e:	f7fd ff81 	bl	8011474 <phhalHw_Pn5180_Instr_WriteRegister>
 8013572:	4603      	mov	r3, r0
 8013574:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8013576:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013578:	2b00      	cmp	r3, #0
 801357a:	d001      	beq.n	8013580 <phhalHw_Pn5180_Int_Wait+0x19c>
 801357c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801357e:	e04f      	b.n	8013620 <phhalHw_Pn5180_Int_Wait+0x23c>
    phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL);
 8013580:	68fb      	ldr	r3, [r7, #12]
 8013582:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 8013586:	2300      	movs	r3, #0
 8013588:	2201      	movs	r2, #1
 801358a:	2100      	movs	r1, #0
 801358c:	f007 f90e 	bl	801a7ac <phOsal_EventClear>
    /* Enable IRQ source */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_ENABLE, IRQ_ENABLE_TIMER0_IRQ_SET_ENABLE_MASK));
 8013590:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8013594:	2101      	movs	r1, #1
 8013596:	68f8      	ldr	r0, [r7, #12]
 8013598:	f7fd ff6c 	bl	8011474 <phhalHw_Pn5180_Instr_WriteRegister>
 801359c:	4603      	mov	r3, r0
 801359e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80135a0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d001      	beq.n	80135aa <phhalHw_Pn5180_Int_Wait+0x1c6>
 80135a6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80135a8:	e03a      	b.n	8013620 <phhalHw_Pn5180_Int_Wait+0x23c>
    /*Start the timer*/
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple( pDataParams, wRegTypeValueSets, wSizeOfRegTypeValueSets));
 80135aa:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80135ac:	f107 031c 	add.w	r3, r7, #28
 80135b0:	4619      	mov	r1, r3
 80135b2:	68f8      	ldr	r0, [r7, #12]
 80135b4:	f7fe f8c0 	bl	8011738 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 80135b8:	4603      	mov	r3, r0
 80135ba:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80135bc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d001      	beq.n	80135c6 <phhalHw_Pn5180_Int_Wait+0x1e2>
 80135c2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80135c4:	e02c      	b.n	8013620 <phhalHw_Pn5180_Int_Wait+0x23c>

    uint32_t irqEnable;
    phhalHw_Pn5180_Instr_ReadRegister(pDataParams, IRQ_ENABLE, &irqEnable);
 80135c6:	f107 0314 	add.w	r3, r7, #20
 80135ca:	461a      	mov	r2, r3
 80135cc:	2101      	movs	r1, #1
 80135ce:	68f8      	ldr	r0, [r7, #12]
 80135d0:	f7fe f964 	bl	801189c <phhalHw_Pn5180_Instr_ReadRegister>

    uint32_t irqStatus;
    phhalHw_Pn5180_Instr_ReadRegister(pDataParams, IRQ_STATUS, &irqStatus);
 80135d4:	f107 0310 	add.w	r3, r7, #16
 80135d8:	461a      	mov	r2, r3
 80135da:	2102      	movs	r1, #2
 80135dc:	68f8      	ldr	r0, [r7, #12]
 80135de:	f7fe f95d 	bl	801189c <phhalHw_Pn5180_Instr_ReadRegister>

    /* Wait for the timer0 to expire. */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_WaitIrq(pDataParams,PH_ON,PH_OFF,IRQ_STATUS_TIMER0_IRQ_MASK,&dwIrqStatusReg));
 80135e2:	f107 0318 	add.w	r3, r7, #24
 80135e6:	9300      	str	r3, [sp, #0]
 80135e8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80135ec:	2200      	movs	r2, #0
 80135ee:	2101      	movs	r1, #1
 80135f0:	68f8      	ldr	r0, [r7, #12]
 80135f2:	f000 fbd5 	bl	8013da0 <phhalHw_Pn5180_WaitIrq>
 80135f6:	4603      	mov	r3, r0
 80135f8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80135fa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d001      	beq.n	8013604 <phhalHw_Pn5180_Int_Wait+0x220>
 8013600:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013602:	e00d      	b.n	8013620 <phhalHw_Pn5180_Int_Wait+0x23c>

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams,TIMER0_CONFIG, (uint32_t)(~TIMER0_CONFIG_T0_ENABLE_MASK)));
 8013604:	f06f 0201 	mvn.w	r2, #1
 8013608:	210e      	movs	r1, #14
 801360a:	68f8      	ldr	r0, [r7, #12]
 801360c:	f7fe f81e 	bl	801164c <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 8013610:	4603      	mov	r3, r0
 8013612:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8013614:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013616:	2b00      	cmp	r3, #0
 8013618:	d001      	beq.n	801361e <phhalHw_Pn5180_Int_Wait+0x23a>
 801361a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801361c:	e000      	b.n	8013620 <phhalHw_Pn5180_Int_Wait+0x23c>
    return PH_ERR_SUCCESS;
 801361e:	2300      	movs	r3, #0
}
 8013620:	4618      	mov	r0, r3
 8013622:	3748      	adds	r7, #72	@ 0x48
 8013624:	46bd      	mov	sp, r7
 8013626:	bd80      	pop	{r7, pc}

08013628 <phhalHw_Pn5180_Int_GetDigiDelay>:
phStatus_t phhalHw_Pn5180_Int_GetDigiDelay(
                                      phhalHw_Pn5180_DataParams_t * pDataParams,
                                      uint8_t bIsTimeout,
                                      uint16_t * pDelayUs
                                      )
{
 8013628:	b480      	push	{r7}
 801362a:	b087      	sub	sp, #28
 801362c:	af00      	add	r7, sp, #0
 801362e:	60f8      	str	r0, [r7, #12]
 8013630:	460b      	mov	r3, r1
 8013632:	607a      	str	r2, [r7, #4]
 8013634:	72fb      	strb	r3, [r7, #11]
    uint16_t    PH_MEMLOC_REM wDataRate;
    uint8_t     PH_MEMLOC_REM bIndex;

    wDataRate = pDataParams->wCfgShadow[PHHAL_HW_CONFIG_RXDATARATE_FRAMING];
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	f8b3 306c 	ldrh.w	r3, [r3, #108]	@ 0x6c
 801363c:	82fb      	strh	r3, [r7, #22]
    bIndex = pDataParams->bCardType - 1U;
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013644:	3b01      	subs	r3, #1
 8013646:	757b      	strb	r3, [r7, #21]

    switch (pDataParams->bCardType)
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801364e:	3b01      	subs	r3, #1
 8013650:	2b09      	cmp	r3, #9
 8013652:	f200 8086 	bhi.w	8013762 <phhalHw_Pn5180_Int_GetDigiDelay+0x13a>
 8013656:	a201      	add	r2, pc, #4	@ (adr r2, 801365c <phhalHw_Pn5180_Int_GetDigiDelay+0x34>)
 8013658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801365c:	08013685 	.word	0x08013685
 8013660:	08013685 	.word	0x08013685
 8013664:	080136c3 	.word	0x080136c3
 8013668:	080136db 	.word	0x080136db
 801366c:	080136f1 	.word	0x080136f1
 8013670:	080136ff 	.word	0x080136ff
 8013674:	08013763 	.word	0x08013763
 8013678:	08013763 	.word	0x08013763
 801367c:	08013763 	.word	0x08013763
 8013680:	080136c3 	.word	0x080136c3
    {
    case PHHAL_HW_CARDTYPE_ISO14443A:
    case PHHAL_HW_CARDTYPE_ISO14443B:
        *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][wDataRate];
 8013684:	7d7a      	ldrb	r2, [r7, #21]
 8013686:	8afb      	ldrh	r3, [r7, #22]
 8013688:	493b      	ldr	r1, [pc, #236]	@ (8013778 <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 801368a:	0092      	lsls	r2, r2, #2
 801368c:	4413      	add	r3, r2
 801368e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	801a      	strh	r2, [r3, #0]
        /* In a timeout case we have to add an additional delay */
        if (bIsTimeout != PH_OFF)
 8013696:	7afb      	ldrb	r3, [r7, #11]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d005      	beq.n	80136a8 <phhalHw_Pn5180_Int_GetDigiDelay+0x80>
        {
            *pDelayUs = *pDelayUs + PHHAL_HW_PN5180_I14443_ADD_DELAY_US;
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	881b      	ldrh	r3, [r3, #0]
 80136a0:	330f      	adds	r3, #15
 80136a2:	b29a      	uxth	r2, r3
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	801a      	strh	r2, [r3, #0]
        }

        if(pDataParams->bJewelActivated == PH_ON)
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80136ae:	2b01      	cmp	r3, #1
 80136b0:	d15a      	bne.n	8013768 <phhalHw_Pn5180_Int_GetDigiDelay+0x140>
        {
            *pDelayUs += 2000U;
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	881b      	ldrh	r3, [r3, #0]
 80136b6:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80136ba:	b29a      	uxth	r2, r3
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	801a      	strh	r2, [r3, #0]
        }
        break;
 80136c0:	e052      	b.n	8013768 <phhalHw_Pn5180_Int_GetDigiDelay+0x140>
    case PHHAL_HW_CARDTYPE_FELICA_212:
    case PHHAL_HW_CARDTYPE_FELICA_424:
        bIndex = PHHAL_HW_CARDTYPE_FELICA_212 - 1U;
 80136c2:	2302      	movs	r3, #2
 80136c4:	757b      	strb	r3, [r7, #21]
        *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][wDataRate];
 80136c6:	7d7a      	ldrb	r2, [r7, #21]
 80136c8:	8afb      	ldrh	r3, [r7, #22]
 80136ca:	492b      	ldr	r1, [pc, #172]	@ (8013778 <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 80136cc:	0092      	lsls	r2, r2, #2
 80136ce:	4413      	add	r3, r2
 80136d0:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	801a      	strh	r2, [r3, #0]
        break;
 80136d8:	e047      	b.n	801376a <phhalHw_Pn5180_Int_GetDigiDelay+0x142>
    case PHHAL_HW_CARDTYPE_ISO15693:
        *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][wDataRate - PHHAL_HW_RF_RX_DATARATE_LOW];
 80136da:	7d7a      	ldrb	r2, [r7, #21]
 80136dc:	8afb      	ldrh	r3, [r7, #22]
 80136de:	3b0c      	subs	r3, #12
 80136e0:	4925      	ldr	r1, [pc, #148]	@ (8013778 <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 80136e2:	0092      	lsls	r2, r2, #2
 80136e4:	4413      	add	r3, r2
 80136e6:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	801a      	strh	r2, [r3, #0]
        break;
 80136ee:	e03c      	b.n	801376a <phhalHw_Pn5180_Int_GetDigiDelay+0x142>
    case PHHAL_HW_CARDTYPE_ICODEEPCUID:
        *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][0];
 80136f0:	7d7b      	ldrb	r3, [r7, #21]
 80136f2:	4a21      	ldr	r2, [pc, #132]	@ (8013778 <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 80136f4:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	801a      	strh	r2, [r3, #0]
        break;
 80136fc:	e035      	b.n	801376a <phhalHw_Pn5180_Int_GetDigiDelay+0x142>
    case PHHAL_HW_CARDTYPE_I18000P3M3:
        switch (wDataRate)
 80136fe:	8afb      	ldrh	r3, [r7, #22]
 8013700:	3b13      	subs	r3, #19
 8013702:	2b03      	cmp	r3, #3
 8013704:	d829      	bhi.n	801375a <phhalHw_Pn5180_Int_GetDigiDelay+0x132>
 8013706:	a201      	add	r2, pc, #4	@ (adr r2, 801370c <phhalHw_Pn5180_Int_GetDigiDelay+0xe4>)
 8013708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801370c:	0801371d 	.word	0x0801371d
 8013710:	0801373b 	.word	0x0801373b
 8013714:	0801372b 	.word	0x0801372b
 8013718:	0801374b 	.word	0x0801374b
        {
            case PHHAL_HW_RX_I18000P3M3_FL_423_MAN2:
                *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][0];
 801371c:	7d7b      	ldrb	r3, [r7, #21]
 801371e:	4a16      	ldr	r2, [pc, #88]	@ (8013778 <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 8013720:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	801a      	strh	r2, [r3, #0]
                break;
 8013728:	e01a      	b.n	8013760 <phhalHw_Pn5180_Int_GetDigiDelay+0x138>
            case PHHAL_HW_RX_I18000P3M3_FL_423_MAN4:
                *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][1];
 801372a:	7d7b      	ldrb	r3, [r7, #21]
 801372c:	4a12      	ldr	r2, [pc, #72]	@ (8013778 <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 801372e:	00db      	lsls	r3, r3, #3
 8013730:	4413      	add	r3, r2
 8013732:	885a      	ldrh	r2, [r3, #2]
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	801a      	strh	r2, [r3, #0]
                break;
 8013738:	e012      	b.n	8013760 <phhalHw_Pn5180_Int_GetDigiDelay+0x138>
            case PHHAL_HW_RX_I18000P3M3_FL_847_MAN2:
                *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][2];
 801373a:	7d7b      	ldrb	r3, [r7, #21]
 801373c:	4a0e      	ldr	r2, [pc, #56]	@ (8013778 <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 801373e:	00db      	lsls	r3, r3, #3
 8013740:	4413      	add	r3, r2
 8013742:	889a      	ldrh	r2, [r3, #4]
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	801a      	strh	r2, [r3, #0]
                break;
 8013748:	e00a      	b.n	8013760 <phhalHw_Pn5180_Int_GetDigiDelay+0x138>
            case PHHAL_HW_RX_I18000P3M3_FL_847_MAN4:
                *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][3];
 801374a:	7d7b      	ldrb	r3, [r7, #21]
 801374c:	4a0a      	ldr	r2, [pc, #40]	@ (8013778 <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 801374e:	00db      	lsls	r3, r3, #3
 8013750:	4413      	add	r3, r2
 8013752:	88da      	ldrh	r2, [r3, #6]
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	801a      	strh	r2, [r3, #0]
                break;
 8013758:	e002      	b.n	8013760 <phhalHw_Pn5180_Int_GetDigiDelay+0x138>
            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 801375a:	f240 237f 	movw	r3, #639	@ 0x27f
 801375e:	e005      	b.n	801376c <phhalHw_Pn5180_Int_GetDigiDelay+0x144>
        }
        break;
 8013760:	e003      	b.n	801376a <phhalHw_Pn5180_Int_GetDigiDelay+0x142>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 8013762:	f240 237f 	movw	r3, #639	@ 0x27f
 8013766:	e001      	b.n	801376c <phhalHw_Pn5180_Int_GetDigiDelay+0x144>
        break;
 8013768:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 801376a:	2300      	movs	r3, #0
}
 801376c:	4618      	mov	r0, r3
 801376e:	371c      	adds	r7, #28
 8013770:	46bd      	mov	sp, r7
 8013772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013776:	4770      	bx	lr
 8013778:	08023adc 	.word	0x08023adc

0801377c <phhalHw_Pn5180_Receive_Int>:
                                      uint32_t dwIrqWaitFor,
                                      uint8_t ** ppRxBuffer,
                                      uint16_t * pRxLength,
                                      uint8_t    bIrqEnable
                                      )
{
 801377c:	b5b0      	push	{r4, r5, r7, lr}
 801377e:	b094      	sub	sp, #80	@ 0x50
 8013780:	af04      	add	r7, sp, #16
 8013782:	60f8      	str	r0, [r7, #12]
 8013784:	60b9      	str	r1, [r7, #8]
 8013786:	607a      	str	r2, [r7, #4]
 8013788:	603b      	str	r3, [r7, #0]
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 801378a:	2300      	movs	r3, #0
 801378c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint32_t    PH_MEMLOC_REM dwIrqReg;
    uint8_t *   PH_MEMLOC_REM pTmpBuffer = NULL;
 801378e:	2300      	movs	r3, #0
 8013790:	627b      	str	r3, [r7, #36]	@ 0x24
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 8013792:	2300      	movs	r3, #0
 8013794:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t    PH_MEMLOC_REM wTmpBufferSize;
    uint32_t    PH_MEMLOC_REM dwValue;
    uint32_t    PH_MEMLOC_REM dwTemp;
    uint32_t    PH_MEMLOC_REM dwColPos = 0U;
 8013796:	2300      	movs	r3, #0
 8013798:	63bb      	str	r3, [r7, #56]	@ 0x38
    uint32_t    PH_MEMLOC_REM dwRegister;
    uint16_t    PH_MEMLOC_REM wIndex = 0U;
 801379a:	2300      	movs	r3, #0
 801379c:	86fb      	strh	r3, [r7, #54]	@ 0x36
    uint8_t     PH_MEMLOC_REM bBitlen;
    uint8_t     PH_MEMLOC_REM aCrc[2];
    uint8_t     PH_MEMLOC_REM bBackup = 0U;
 801379e:	2300      	movs	r3, #0
 80137a0:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    uint8_t     PH_MEMLOC_REM bRfActiveErrCause = 0U;
 80137a4:	2300      	movs	r3, #0
 80137a6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    /* Now wait for the IRQ */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WaitIrq(
 80137aa:	f897 1050 	ldrb.w	r1, [r7, #80]	@ 0x50
 80137ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80137b2:	9300      	str	r3, [sp, #0]
 80137b4:	68bb      	ldr	r3, [r7, #8]
 80137b6:	2200      	movs	r2, #0
 80137b8:	68f8      	ldr	r0, [r7, #12]
 80137ba:	f000 faf1 	bl	8013da0 <phhalHw_Pn5180_WaitIrq>
 80137be:	4603      	mov	r3, r0
 80137c0:	867b      	strh	r3, [r7, #50]	@ 0x32
 80137c2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d001      	beq.n	80137cc <phhalHw_Pn5180_Receive_Int+0x50>
 80137c8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80137ca:	e233      	b.n	8013c34 <phhalHw_Pn5180_Receive_Int+0x4b8>
        PH_OFF,
        dwIrqWaitFor,
        &dwIrqReg));

    /* If in active mode, retrieve the content of the RF_STATUS register */
    if (pDataParams->bActiveMode == PH_ON)
 80137cc:	68fb      	ldr	r3, [r7, #12]
 80137ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80137d2:	2b01      	cmp	r3, #1
 80137d4:	d10d      	bne.n	80137f2 <phhalHw_Pn5180_Receive_Int+0x76>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegister(pDataParams, RF_STATUS, &dwRegister));
 80137d6:	f107 0318 	add.w	r3, r7, #24
 80137da:	461a      	mov	r2, r3
 80137dc:	211d      	movs	r1, #29
 80137de:	68f8      	ldr	r0, [r7, #12]
 80137e0:	f7fe f85c 	bl	801189c <phhalHw_Pn5180_Instr_ReadRegister>
 80137e4:	4603      	mov	r3, r0
 80137e6:	867b      	strh	r3, [r7, #50]	@ 0x32
 80137e8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d001      	beq.n	80137f2 <phhalHw_Pn5180_Receive_Int+0x76>
 80137ee:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80137f0:	e220      	b.n	8013c34 <phhalHw_Pn5180_Receive_Int+0x4b8>
    }

    /* Check if an error has occurred */
    if (0U != (dwIrqReg & IRQ_STATUS_GENERAL_ERROR_IRQ_MASK))
 80137f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d002      	beq.n	8013802 <phhalHw_Pn5180_Receive_Int+0x86>
    {
        status = PH_ERR_INTERNAL_ERROR;
 80137fc:	237f      	movs	r3, #127	@ 0x7f
 80137fe:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8013800:	e089      	b.n	8013916 <phhalHw_Pn5180_Receive_Int+0x19a>
    }
    else if((pDataParams->bRxMultiple == PH_ON) && (0U != ((dwIrqReg & IRQ_STATUS_TIMER1_IRQ_MASK))))
 8013802:	68fb      	ldr	r3, [r7, #12]
 8013804:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013808:	2b01      	cmp	r3, #1
 801380a:	d10f      	bne.n	801382c <phhalHw_Pn5180_Receive_Int+0xb0>
 801380c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801380e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8013812:	2b00      	cmp	r3, #0
 8013814:	d00a      	beq.n	801382c <phhalHw_Pn5180_Receive_Int+0xb0>
    {
        if(0U != (dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))
 8013816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013818:	f003 0301 	and.w	r3, r3, #1
 801381c:	2b00      	cmp	r3, #0
 801381e:	d002      	beq.n	8013826 <phhalHw_Pn5180_Receive_Int+0xaa>
        {
            status = PH_ERR_SUCCESS;
 8013820:	2300      	movs	r3, #0
 8013822:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if(0U != (dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))
 8013824:	e077      	b.n	8013916 <phhalHw_Pn5180_Receive_Int+0x19a>
        }
        else
        {
            status = PH_ERR_IO_TIMEOUT;
 8013826:	2301      	movs	r3, #1
 8013828:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if(0U != (dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))
 801382a:	e074      	b.n	8013916 <phhalHw_Pn5180_Receive_Int+0x19a>
        }
    }
    /* Timeout handling */
   else if ((dwIrqReg & IRQ_STATUS_TIMER1_IRQ_MASK))
 801382c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801382e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8013832:	2b00      	cmp	r3, #0
 8013834:	d02e      	beq.n	8013894 <phhalHw_Pn5180_Receive_Int+0x118>
   {
        /* Reset after timeout behavior */
        if (pDataParams->bRfResetAfterTo != PH_OFF)
 8013836:	68fb      	ldr	r3, [r7, #12]
 8013838:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801383c:	2b00      	cmp	r3, #0
 801383e:	d009      	beq.n	8013854 <phhalHw_Pn5180_Receive_Int+0xd8>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_FieldReset(pDataParams));
 8013840:	68f8      	ldr	r0, [r7, #12]
 8013842:	f7fa ff6f 	bl	800e724 <phhalHw_Pn5180_FieldReset>
 8013846:	4603      	mov	r3, r0
 8013848:	867b      	strh	r3, [r7, #50]	@ 0x32
 801384a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801384c:	2b00      	cmp	r3, #0
 801384e:	d001      	beq.n	8013854 <phhalHw_Pn5180_Receive_Int+0xd8>
 8013850:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8013852:	e1ef      	b.n	8013c34 <phhalHw_Pn5180_Receive_Int+0x4b8>
        }

        status = PH_ERR_IO_TIMEOUT;
 8013854:	2301      	movs	r3, #1
 8013856:	87fb      	strh	r3, [r7, #62]	@ 0x3e

        if ((pDataParams->bActiveMode == PH_ON) && (pDataParams->wTargetMode == PH_OFF))
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801385e:	2b01      	cmp	r3, #1
 8013860:	d159      	bne.n	8013916 <phhalHw_Pn5180_Receive_Int+0x19a>
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013866:	2b00      	cmp	r3, #0
 8013868:	d155      	bne.n	8013916 <phhalHw_Pn5180_Receive_Int+0x19a>
        {
            if (0U != (dwRegister & RF_STATUS_TX_RF_STATUS_MASK ))
 801386a:	69bb      	ldr	r3, [r7, #24]
 801386c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013870:	2b00      	cmp	r3, #0
 8013872:	d007      	beq.n	8013884 <phhalHw_Pn5180_Receive_Int+0x108>
            {
                /* If External RF ON Event occurred and Internal Field is ON then Internal Error Should
                 * not be returned, otherwise Internal Error is returned */
                if ((0U == ((dwIrqReg & IRQ_STATUS_RFON_DET_IRQ_MASK))))
 8013874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801387a:	2b00      	cmp	r3, #0
 801387c:	d14b      	bne.n	8013916 <phhalHw_Pn5180_Receive_Int+0x19a>
                {
                    /* After RWT Timeout if Internal RF is ON (Stuck) then return Internal Error. */
                    status = PH_ERR_INTERNAL_ERROR;
 801387e:	237f      	movs	r3, #127	@ 0x7f
 8013880:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8013882:	e048      	b.n	8013916 <phhalHw_Pn5180_Receive_Int+0x19a>
                }
            }
            else if (0U != (dwRegister & RF_STATUS_RF_DET_STATUS_MASK))
 8013884:	69bb      	ldr	r3, [r7, #24]
 8013886:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801388a:	2b00      	cmp	r3, #0
 801388c:	d043      	beq.n	8013916 <phhalHw_Pn5180_Receive_Int+0x19a>
            {
                /* If External RF Field is ON after FWT Timeout, then return External RF Error. */
                status = PH_ERR_EXT_RF_ERROR;
 801388e:	2310      	movs	r3, #16
 8013890:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8013892:	e040      	b.n	8013916 <phhalHw_Pn5180_Receive_Int+0x19a>
                /* Do nothing */
            }
        }
    }
    /* Handle External RF error */
    else if ((pDataParams->bActiveMode == PH_ON) && (0U != ((dwIrqReg & IRQ_STATUS_RF_ACTIVE_ERROR_IRQ_MASK))))
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801389a:	2b01      	cmp	r3, #1
 801389c:	d123      	bne.n	80138e6 <phhalHw_Pn5180_Receive_Int+0x16a>
 801389e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d01e      	beq.n	80138e6 <phhalHw_Pn5180_Receive_Int+0x16a>
    {
        bRfActiveErrCause = (uint8_t)((dwRegister & RF_STATUS_RF_ACTIVE_ERROR_CAUSE_MASK) >> RF_STATUS_RF_ACTIVE_ERROR_CAUSE_POS);
 80138a8:	69bb      	ldr	r3, [r7, #24]
 80138aa:	0b5b      	lsrs	r3, r3, #13
 80138ac:	b2db      	uxtb	r3, r3
 80138ae:	f003 0307 	and.w	r3, r3, #7
 80138b2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

        if (pDataParams->wTargetMode != PH_OFF)
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d009      	beq.n	80138d2 <phhalHw_Pn5180_Receive_Int+0x156>
        {
            if(bRfActiveErrCause != 4U)
 80138be:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80138c2:	2b04      	cmp	r3, #4
 80138c4:	d002      	beq.n	80138cc <phhalHw_Pn5180_Receive_Int+0x150>
            {
                status = PH_ERR_EXT_RF_ERROR;
 80138c6:	2310      	movs	r3, #16
 80138c8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (pDataParams->wTargetMode != PH_OFF)
 80138ca:	e024      	b.n	8013916 <phhalHw_Pn5180_Receive_Int+0x19a>
            }
            else
            {
                status = PHHAL_HW_PN5180_ACTIVE_ERR_CAUSE4;
 80138cc:	2344      	movs	r3, #68	@ 0x44
 80138ce:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (pDataParams->wTargetMode != PH_OFF)
 80138d0:	e021      	b.n	8013916 <phhalHw_Pn5180_Receive_Int+0x19a>
            }
        }
        else
        {
            if((bRfActiveErrCause == 4U))
 80138d2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80138d6:	2b04      	cmp	r3, #4
 80138d8:	d102      	bne.n	80138e0 <phhalHw_Pn5180_Receive_Int+0x164>
            {
                status = PH_ERR_IO_TIMEOUT;
 80138da:	2301      	movs	r3, #1
 80138dc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (pDataParams->wTargetMode != PH_OFF)
 80138de:	e01a      	b.n	8013916 <phhalHw_Pn5180_Receive_Int+0x19a>

            }
            else
            {
                status = PH_ERR_EXT_RF_ERROR;
 80138e0:	2310      	movs	r3, #16
 80138e2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (pDataParams->wTargetMode != PH_OFF)
 80138e4:	e017      	b.n	8013916 <phhalHw_Pn5180_Receive_Int+0x19a>
            }
        }
    }
    /* Passive mode */
    else if(0U != (dwIrqReg & IRQ_STATUS_RFOFF_DET_IRQ_MASK))
 80138e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d012      	beq.n	8013916 <phhalHw_Pn5180_Receive_Int+0x19a>
    {
        /* In case External RF OFF also occurred then exit with RF Error. */
        if ((pDataParams->bActiveMode == PH_OFF) && (pDataParams->wTargetMode))
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d106      	bne.n	8013908 <phhalHw_Pn5180_Receive_Int+0x18c>
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d002      	beq.n	8013908 <phhalHw_Pn5180_Receive_Int+0x18c>
        {
            /* Terminate with RF_ERROR*/
            status = PH_ERR_EXT_RF_ERROR;
 8013902:	2310      	movs	r3, #16
 8013904:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8013906:	e006      	b.n	8013916 <phhalHw_Pn5180_Receive_Int+0x19a>
        }
        else if((0U == ((dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))))
 8013908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801390a:	f003 0301 	and.w	r3, r3, #1
 801390e:	2b00      	cmp	r3, #0
 8013910:	d101      	bne.n	8013916 <phhalHw_Pn5180_Receive_Int+0x19a>
        {
            status = PH_ERR_INTEGRITY_ERROR;
 8013912:	2302      	movs	r3, #2
 8013914:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    {
        /*QAC*/
    }

    /* Receive data */
    if ((0U != ((dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))) && (status == PH_ERR_SUCCESS))
 8013916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013918:	f003 0301 	and.w	r3, r3, #1
 801391c:	2b00      	cmp	r3, #0
 801391e:	f000 8174 	beq.w	8013c0a <phhalHw_Pn5180_Receive_Int+0x48e>
 8013922:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013924:	2b00      	cmp	r3, #0
 8013926:	f040 8170 	bne.w	8013c0a <phhalHw_Pn5180_Receive_Int+0x48e>
    {
        pDataParams->wRxBufLen = 0U;
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	2200      	movs	r2, #0
 801392e:	835a      	strh	r2, [r3, #26]

        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetRxBuffer(pDataParams, PH_ON, &pTmpBuffer, &wTmpBufferLen, &wTmpBufferSize));
 8013930:	f107 0122 	add.w	r1, r7, #34	@ 0x22
 8013934:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8013938:	f107 0320 	add.w	r3, r7, #32
 801393c:	9300      	str	r3, [sp, #0]
 801393e:	460b      	mov	r3, r1
 8013940:	2101      	movs	r1, #1
 8013942:	68f8      	ldr	r0, [r7, #12]
 8013944:	f7fe fda3 	bl	801248e <phhalHw_Pn5180_GetRxBuffer>
 8013948:	4603      	mov	r3, r0
 801394a:	867b      	strh	r3, [r7, #50]	@ 0x32
 801394c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801394e:	2b00      	cmp	r3, #0
 8013950:	d001      	beq.n	8013956 <phhalHw_Pn5180_Receive_Int+0x1da>
 8013952:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8013954:	e16e      	b.n	8013c34 <phhalHw_Pn5180_Receive_Int+0x4b8>

#ifndef PN5180_P2P_HW_SYNC_BYTE
        if (pDataParams->bNfcipMode == PH_ON)
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 801395c:	2b01      	cmp	r3, #1
 801395e:	d103      	bne.n	8013968 <phhalHw_Pn5180_Receive_Int+0x1ec>
        {
            bBackup = pTmpBuffer[0];
 8013960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013962:	781b      	ldrb	r3, [r3, #0]
 8013964:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
        }
#endif
        /* Read the RX_STATUS */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_ReadRegister(pDataParams, RX_STATUS, &dwValue));
 8013968:	f107 031c 	add.w	r3, r7, #28
 801396c:	461a      	mov	r2, r3
 801396e:	2113      	movs	r1, #19
 8013970:	68f8      	ldr	r0, [r7, #12]
 8013972:	f7fa f983 	bl	800dc7c <phhalHw_Pn5180_ReadRegister>
 8013976:	4603      	mov	r3, r0
 8013978:	867b      	strh	r3, [r7, #50]	@ 0x32
 801397a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801397c:	2b00      	cmp	r3, #0
 801397e:	d001      	beq.n	8013984 <phhalHw_Pn5180_Receive_Int+0x208>
 8013980:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8013982:	e157      	b.n	8013c34 <phhalHw_Pn5180_Receive_Int+0x4b8>

        if(pDataParams->bRxMultiple == PH_ON)
 8013984:	68fb      	ldr	r3, [r7, #12]
 8013986:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801398a:	2b01      	cmp	r3, #1
 801398c:	d110      	bne.n	80139b0 <phhalHw_Pn5180_Receive_Int+0x234>
        {
            wTmpBufferLen = (uint16_t)((dwValue & RX_STATUS_RX_NUM_BYTES_RECEIVED_MASK) |
 801398e:	69fb      	ldr	r3, [r7, #28]
 8013990:	b29b      	uxth	r3, r3
 8013992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013996:	b29a      	uxth	r2, r3
                (((dwValue & RX_STATUS_RX_NUM_FRAMES_RECEIVED_MASK) >>
 8013998:	69fb      	ldr	r3, [r7, #28]
 801399a:	0a5b      	lsrs	r3, r3, #9
            wTmpBufferLen = (uint16_t)((dwValue & RX_STATUS_RX_NUM_BYTES_RECEIVED_MASK) |
 801399c:	b29b      	uxth	r3, r3
 801399e:	f003 030f 	and.w	r3, r3, #15
 80139a2:	b29b      	uxth	r3, r3
 80139a4:	015b      	lsls	r3, r3, #5
 80139a6:	b29b      	uxth	r3, r3
 80139a8:	4313      	orrs	r3, r2
 80139aa:	b29b      	uxth	r3, r3
 80139ac:	847b      	strh	r3, [r7, #34]	@ 0x22
 80139ae:	e005      	b.n	80139bc <phhalHw_Pn5180_Receive_Int+0x240>
                RX_STATUS_RX_NUM_FRAMES_RECEIVED_POS) * 32U));
        }
        else
        {
            wTmpBufferLen = (uint16_t)(dwValue & RX_STATUS_RX_NUM_BYTES_RECEIVED_MASK);
 80139b0:	69fb      	ldr	r3, [r7, #28]
 80139b2:	b29b      	uxth	r3, r3
 80139b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80139b8:	b29b      	uxth	r3, r3
 80139ba:	847b      	strh	r3, [r7, #34]	@ 0x22
        }

        if(wTmpBufferLen != 0U)
 80139bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d00c      	beq.n	80139dc <phhalHw_Pn5180_Receive_Int+0x260>
        {
            /* Prepare the command for reading the RX FIFO of the Pn5180 */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_RetrieveRxData(
 80139c2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80139c4:	461a      	mov	r2, r3
 80139c6:	6879      	ldr	r1, [r7, #4]
 80139c8:	68f8      	ldr	r0, [r7, #12]
 80139ca:	f7fe f977 	bl	8011cbc <phhalHw_Pn5180_Instr_RetrieveRxData>
 80139ce:	4603      	mov	r3, r0
 80139d0:	867b      	strh	r3, [r7, #50]	@ 0x32
 80139d2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d001      	beq.n	80139dc <phhalHw_Pn5180_Receive_Int+0x260>
 80139d8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80139da:	e12b      	b.n	8013c34 <phhalHw_Pn5180_Receive_Int+0x4b8>
                ppRxBuffer,
                wTmpBufferLen));
        }

        /* Extract RX last bits */
        dwTemp = dwValue & RX_STATUS_RX_NUM_LAST_BITS_MASK;
 80139dc:	69fb      	ldr	r3, [r7, #28]
 80139de:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80139e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwTemp = dwTemp >> RX_STATUS_RX_NUM_LAST_BITS_POS;
 80139e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139e6:	0b5b      	lsrs	r3, r3, #13
 80139e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Set RX last bits */
        pDataParams->wAdditionalInfo = (uint16_t)dwTemp;
 80139ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139ec:	b29a      	uxth	r2, r3
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	861a      	strh	r2, [r3, #48]	@ 0x30

        if (0U != (dwValue & RX_STATUS_RX_COLLISION_DETECTED_MASK))
 80139f2:	69fb      	ldr	r3, [r7, #28]
 80139f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d044      	beq.n	8013a86 <phhalHw_Pn5180_Receive_Int+0x30a>
        {
            if ((wTmpBufferLen == 0U) && ((dwValue & RX_STATUS_RX_COLL_POS_MASK) == 0U))
 80139fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d107      	bne.n	8013a12 <phhalHw_Pn5180_Receive_Int+0x296>
 8013a02:	69fb      	ldr	r3, [r7, #28]
 8013a04:	f003 737e 	and.w	r3, r3, #66584576	@ 0x3f80000
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d102      	bne.n	8013a12 <phhalHw_Pn5180_Receive_Int+0x296>
            {
                /* No data received */
                status = PH_ERR_IO_TIMEOUT;
 8013a0c:	2301      	movs	r3, #1
 8013a0e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8013a10:	e051      	b.n	8013ab6 <phhalHw_Pn5180_Receive_Int+0x33a>
            }
            else
            {
                status = PH_ERR_COLLISION_ERROR;
 8013a12:	2303      	movs	r3, #3
 8013a14:	87fb      	strh	r3, [r7, #62]	@ 0x3e

                /* Retrieve collision position */
                dwColPos = dwValue & RX_STATUS_RX_COLL_POS_MASK;
 8013a16:	69fb      	ldr	r3, [r7, #28]
 8013a18:	f003 737e 	and.w	r3, r3, #66584576	@ 0x3f80000
 8013a1c:	63bb      	str	r3, [r7, #56]	@ 0x38
                dwColPos = dwColPos >> RX_STATUS_RX_COLL_POS_POS;
 8013a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a20:	0cdb      	lsrs	r3, r3, #19
 8013a22:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Restore RX buffer size */
                wTmpBufferSize = wTmpBufferSize + wTmpBufferLen;
 8013a24:	8c3a      	ldrh	r2, [r7, #32]
 8013a26:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013a28:	4413      	add	r3, r2
 8013a2a:	b29b      	uxth	r3, r3
 8013a2c:	843b      	strh	r3, [r7, #32]
                if (dwColPos > wTmpBufferSize)
 8013a2e:	8c3b      	ldrh	r3, [r7, #32]
 8013a30:	461a      	mov	r2, r3
 8013a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a34:	4293      	cmp	r3, r2
 8013a36:	d904      	bls.n	8013a42 <phhalHw_Pn5180_Receive_Int+0x2c6>
                {
                    wTmpBufferLen = wTmpBufferSize;
 8013a38:	8c3b      	ldrh	r3, [r7, #32]
 8013a3a:	847b      	strh	r3, [r7, #34]	@ 0x22
                    status = PH_ERR_BUFFER_OVERFLOW;
 8013a3c:	2304      	movs	r3, #4
 8013a3e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8013a40:	e004      	b.n	8013a4c <phhalHw_Pn5180_Receive_Int+0x2d0>
                }
                else
                {
                    wTmpBufferLen = ((uint16_t)dwColPos >> 3U);
 8013a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a44:	b29b      	uxth	r3, r3
 8013a46:	08db      	lsrs	r3, r3, #3
 8013a48:	b29b      	uxth	r3, r3
 8013a4a:	847b      	strh	r3, [r7, #34]	@ 0x22
                }

                /* Extracting valid bits from Collision position */
                if(dwColPos >= 8U)
 8013a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a4e:	2b07      	cmp	r3, #7
 8013a50:	d904      	bls.n	8013a5c <phhalHw_Pn5180_Receive_Int+0x2e0>
                {
                    dwValue = dwColPos % 8U ;
 8013a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a54:	f003 0307 	and.w	r3, r3, #7
 8013a58:	61fb      	str	r3, [r7, #28]
 8013a5a:	e001      	b.n	8013a60 <phhalHw_Pn5180_Receive_Int+0x2e4>
                }
                else
                {
                    dwValue = dwColPos;
 8013a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a5e:	61fb      	str	r3, [r7, #28]
                }

                if (0U != (dwValue))
 8013a60:	69fb      	ldr	r3, [r7, #28]
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d00a      	beq.n	8013a7c <phhalHw_Pn5180_Receive_Int+0x300>
                {
                    /* If it is non zero, some valid bits are received */
                    if (wTmpBufferLen == wTmpBufferSize)
 8013a66:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8013a68:	8c3b      	ldrh	r3, [r7, #32]
 8013a6a:	429a      	cmp	r2, r3
 8013a6c:	d102      	bne.n	8013a74 <phhalHw_Pn5180_Receive_Int+0x2f8>
                    {
                        status = PH_ERR_BUFFER_OVERFLOW;
 8013a6e:	2304      	movs	r3, #4
 8013a70:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8013a72:	e003      	b.n	8013a7c <phhalHw_Pn5180_Receive_Int+0x300>
                    }
                    else
                    {
                        ++wTmpBufferLen;
 8013a74:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013a76:	3301      	adds	r3, #1
 8013a78:	b29b      	uxth	r3, r3
 8013a7a:	847b      	strh	r3, [r7, #34]	@ 0x22
                    }
                }

                /* Store valid bits of last byte */
                pDataParams->wAdditionalInfo = (uint16_t)dwValue;
 8013a7c:	69fb      	ldr	r3, [r7, #28]
 8013a7e:	b29a      	uxth	r2, r3
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	861a      	strh	r2, [r3, #48]	@ 0x30
 8013a84:	e017      	b.n	8013ab6 <phhalHw_Pn5180_Receive_Int+0x33a>
            }
        }
        else if (0U != (dwValue & RX_STATUS_RX_DATA_INTEGRITY_ERROR_MASK))
 8013a86:	69fb      	ldr	r3, [r7, #28]
 8013a88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d002      	beq.n	8013a96 <phhalHw_Pn5180_Receive_Int+0x31a>
        {
            status = PH_ERR_INTEGRITY_ERROR;
 8013a90:	2302      	movs	r3, #2
 8013a92:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8013a94:	e00f      	b.n	8013ab6 <phhalHw_Pn5180_Receive_Int+0x33a>
        }
        else if (0U != (dwValue & RX_STATUS_RX_PROTOCOL_ERROR_MASK))
 8013a96:	69fb      	ldr	r3, [r7, #28]
 8013a98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d002      	beq.n	8013aa6 <phhalHw_Pn5180_Receive_Int+0x32a>
        {
            status = PH_ERR_PROTOCOL_ERROR;
 8013aa0:	2306      	movs	r3, #6
 8013aa2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8013aa4:	e007      	b.n	8013ab6 <phhalHw_Pn5180_Receive_Int+0x33a>
        }
        else if (dwTemp != 0x00U && dwTemp != 0x08U)
 8013aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d004      	beq.n	8013ab6 <phhalHw_Pn5180_Receive_Int+0x33a>
 8013aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013aae:	2b08      	cmp	r3, #8
 8013ab0:	d001      	beq.n	8013ab6 <phhalHw_Pn5180_Receive_Int+0x33a>
        {
            /* Set incomplete byte status if applicable */
            status =  PH_ERR_SUCCESS_INCOMPLETE_BYTE;
 8013ab2:	2373      	movs	r3, #115	@ 0x73
 8013ab4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        {
            /* For QAC */
        }

#ifndef PN5180_P2P_HW_SYNC_BYTE
        if ((pDataParams->bNfcipMode) == PH_ON && (wTmpBufferLen != 0U))
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8013abc:	2b01      	cmp	r3, #1
 8013abe:	d117      	bne.n	8013af0 <phhalHw_Pn5180_Receive_Int+0x374>
 8013ac0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d014      	beq.n	8013af0 <phhalHw_Pn5180_Receive_Int+0x374>
        {
            if(*ppRxBuffer[0] != 0xF0U)
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	781b      	ldrb	r3, [r3, #0]
 8013acc:	2bf0      	cmp	r3, #240	@ 0xf0
 8013ace:	d002      	beq.n	8013ad6 <phhalHw_Pn5180_Receive_Int+0x35a>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_IO_TIMEOUT, PH_COMP_HAL);
 8013ad0:	f240 2301 	movw	r3, #513	@ 0x201
 8013ad4:	e0ae      	b.n	8013c34 <phhalHw_Pn5180_Receive_Int+0x4b8>
            }
            pTmpBuffer[0] = bBackup;
 8013ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ad8:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8013adc:	701a      	strb	r2, [r3, #0]
            (*ppRxBuffer)++;
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	1c5a      	adds	r2, r3, #1
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	601a      	str	r2, [r3, #0]
            wTmpBufferLen--;
 8013ae8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013aea:	3b01      	subs	r3, #1
 8013aec:	b29b      	uxth	r3, r3
 8013aee:	847b      	strh	r3, [r7, #34]	@ 0x22
        }
#endif
        /* Store received data length in dataparams */
        pDataParams->wRxBufLen = pDataParams->wRxBufStartPos + wTmpBufferLen;
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	8bda      	ldrh	r2, [r3, #30]
 8013af4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013af6:	4413      	add	r3, r2
 8013af8:	b29a      	uxth	r2, r3
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	835a      	strh	r2, [r3, #26]

        if (ppRxBuffer != NULL)
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d005      	beq.n	8013b10 <phhalHw_Pn5180_Receive_Int+0x394>
        {
            *ppRxBuffer = pDataParams->pRxBuffer  + wIndex;;
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	695a      	ldr	r2, [r3, #20]
 8013b08:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013b0a:	441a      	add	r2, r3
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	601a      	str	r2, [r3, #0]
        }

        if (pRxLength != NULL)
 8013b10:	683b      	ldr	r3, [r7, #0]
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d003      	beq.n	8013b1e <phhalHw_Pn5180_Receive_Int+0x3a2>
        {
            *pRxLength = pDataParams->wRxBufLen;
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	8b5a      	ldrh	r2, [r3, #26]
 8013b1a:	683b      	ldr	r3, [r7, #0]
 8013b1c:	801a      	strh	r2, [r3, #0]
        }

        if(pDataParams->bJewelActivated == PH_ON && ((status == PH_ERR_SUCCESS) || ( status & PH_ERR_MASK) == PH_ERR_SUCCESS_INCOMPLETE_BYTE))
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8013b24:	2b01      	cmp	r3, #1
 8013b26:	d169      	bne.n	8013bfc <phhalHw_Pn5180_Receive_Int+0x480>
 8013b28:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d003      	beq.n	8013b36 <phhalHw_Pn5180_Receive_Int+0x3ba>
 8013b2e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013b30:	b2db      	uxtb	r3, r3
 8013b32:	2b73      	cmp	r3, #115	@ 0x73
 8013b34:	d162      	bne.n	8013bfc <phhalHw_Pn5180_Receive_Int+0x480>
        {
            do
            {
                if ((ppRxBuffer != NULL) && (pRxLength != NULL))
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d025      	beq.n	8013b88 <phhalHw_Pn5180_Receive_Int+0x40c>
 8013b3c:	683b      	ldr	r3, [r7, #0]
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d022      	beq.n	8013b88 <phhalHw_Pn5180_Receive_Int+0x40c>
                {
                    /*remove parity of the received data-as harware's parity is off*/
                    statusTmp = phTools_DecodeParity(
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	6818      	ldr	r0, [r3, #0]
 8013b46:	683b      	ldr	r3, [r7, #0]
 8013b48:	881c      	ldrh	r4, [r3, #0]
                        PH_TOOLS_PARITY_OPTION_ODD ,
                        *ppRxBuffer,
                        *pRxLength,
                        (uint8_t)pDataParams->wAdditionalInfo,
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
                    statusTmp = phTools_DecodeParity(
 8013b4e:	b2dd      	uxtb	r5, r3
 8013b50:	683b      	ldr	r3, [r7, #0]
 8013b52:	881b      	ldrh	r3, [r3, #0]
 8013b54:	687a      	ldr	r2, [r7, #4]
 8013b56:	6812      	ldr	r2, [r2, #0]
 8013b58:	f107 0117 	add.w	r1, r7, #23
 8013b5c:	9103      	str	r1, [sp, #12]
 8013b5e:	f107 0122 	add.w	r1, r7, #34	@ 0x22
 8013b62:	9102      	str	r1, [sp, #8]
 8013b64:	9201      	str	r2, [sp, #4]
 8013b66:	9300      	str	r3, [sp, #0]
 8013b68:	462b      	mov	r3, r5
 8013b6a:	4622      	mov	r2, r4
 8013b6c:	4601      	mov	r1, r0
 8013b6e:	2001      	movs	r0, #1
 8013b70:	f7f3 ff10 	bl	8007994 <phTools_DecodeParity>
 8013b74:	4603      	mov	r3, r0
 8013b76:	867b      	strh	r3, [r7, #50]	@ 0x32
                        *ppRxBuffer,
                        &wTmpBufferLen,
                        &bBitlen);

                    /* Return error if there is a Parity error */
                    if ((statusTmp & PH_ERR_MASK) != PH_ERR_SUCCESS)
 8013b78:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8013b7a:	b2db      	uxtb	r3, r3
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d003      	beq.n	8013b88 <phhalHw_Pn5180_Receive_Int+0x40c>
                    {
                        status = statusTmp & PH_ERR_MASK;
 8013b80:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8013b82:	b2db      	uxtb	r3, r3
 8013b84:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                        break;
 8013b86:	e039      	b.n	8013bfc <phhalHw_Pn5180_Receive_Int+0x480>
                    }
                }
                /* Check for response length
                * For Type 1 tag, valid minimum response length is 4 */
                if((wTmpBufferLen >= 4U) && (ppRxBuffer != NULL) && (pRxLength != NULL))
 8013b88:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013b8a:	2b03      	cmp	r3, #3
 8013b8c:	d933      	bls.n	8013bf6 <phhalHw_Pn5180_Receive_Int+0x47a>
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d030      	beq.n	8013bf6 <phhalHw_Pn5180_Receive_Int+0x47a>
 8013b94:	683b      	ldr	r3, [r7, #0]
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d02d      	beq.n	8013bf6 <phhalHw_Pn5180_Receive_Int+0x47a>
                {
                    /*verify Crc_B for the received data*/
                    PH_CHECK_SUCCESS_FCT(statusTmp,phTools_ComputeCrc_B( *ppRxBuffer, wTmpBufferLen-2, aCrc));
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8013ba0:	3a02      	subs	r2, #2
 8013ba2:	4611      	mov	r1, r2
 8013ba4:	f107 0214 	add.w	r2, r7, #20
 8013ba8:	4618      	mov	r0, r3
 8013baa:	f7f4 f872 	bl	8007c92 <phTools_ComputeCrc_B>
 8013bae:	4603      	mov	r3, r0
 8013bb0:	867b      	strh	r3, [r7, #50]	@ 0x32
 8013bb2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d001      	beq.n	8013bbc <phhalHw_Pn5180_Receive_Int+0x440>
 8013bb8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8013bba:	e03b      	b.n	8013c34 <phhalHw_Pn5180_Receive_Int+0x4b8>
                    if((aCrc[0] != ((*ppRxBuffer)[wTmpBufferLen - 2U])) || (aCrc[1] != ((*ppRxBuffer)[wTmpBufferLen - 1U])))
 8013bbc:	7d3a      	ldrb	r2, [r7, #20]
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	6819      	ldr	r1, [r3, #0]
 8013bc2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013bc4:	3b02      	subs	r3, #2
 8013bc6:	440b      	add	r3, r1
 8013bc8:	781b      	ldrb	r3, [r3, #0]
 8013bca:	429a      	cmp	r2, r3
 8013bcc:	d108      	bne.n	8013be0 <phhalHw_Pn5180_Receive_Int+0x464>
 8013bce:	7d7a      	ldrb	r2, [r7, #21]
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	6819      	ldr	r1, [r3, #0]
 8013bd4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013bd6:	3b01      	subs	r3, #1
 8013bd8:	440b      	add	r3, r1
 8013bda:	781b      	ldrb	r3, [r3, #0]
 8013bdc:	429a      	cmp	r2, r3
 8013bde:	d002      	beq.n	8013be6 <phhalHw_Pn5180_Receive_Int+0x46a>
                    {
                        status = PH_ERR_INTEGRITY_ERROR;
 8013be0:	2302      	movs	r3, #2
 8013be2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                        break;
 8013be4:	e00a      	b.n	8013bfc <phhalHw_Pn5180_Receive_Int+0x480>
                    }
                    else
                    {
                        /* subtract CRC from Rx buffer */
                        *pRxLength = wTmpBufferLen - 2U;
 8013be6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013be8:	3b02      	subs	r3, #2
 8013bea:	b29a      	uxth	r2, r3
 8013bec:	683b      	ldr	r3, [r7, #0]
 8013bee:	801a      	strh	r2, [r3, #0]
                        status = PH_ERR_SUCCESS;
 8013bf0:	2300      	movs	r3, #0
 8013bf2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                    if((aCrc[0] != ((*ppRxBuffer)[wTmpBufferLen - 2U])) || (aCrc[1] != ((*ppRxBuffer)[wTmpBufferLen - 1U])))
 8013bf4:	e002      	b.n	8013bfc <phhalHw_Pn5180_Receive_Int+0x480>
                    }
                }
                else
                {
                    status = PH_ERR_PROTOCOL_ERROR;
 8013bf6:	2306      	movs	r3, #6
 8013bf8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                    break;
 8013bfa:	bf00      	nop
                }
            }while (FALSE);
        }

        if (wTmpBufferLen > PHHAL_HW_PN5180_MAX_FSD)  // Frame Size > FSD
 8013bfc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013bfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013c02:	d907      	bls.n	8013c14 <phhalHw_Pn5180_Receive_Int+0x498>
        {
            status = PH_ERR_BUFFER_OVERFLOW;
 8013c04:	2304      	movs	r3, #4
 8013c06:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (wTmpBufferLen > PHHAL_HW_PN5180_MAX_FSD)  // Frame Size > FSD
 8013c08:	e004      	b.n	8013c14 <phhalHw_Pn5180_Receive_Int+0x498>
        }
    }
    else
    {
        if(PH_ERR_SUCCESS == status)
 8013c0a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d101      	bne.n	8013c14 <phhalHw_Pn5180_Receive_Int+0x498>
        {
            status = PH_ERR_INTERNAL_ERROR;
 8013c10:	237f      	movs	r3, #127	@ 0x7f
 8013c12:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        }
    }

    return PH_ADD_COMPCODE(status, PH_COMP_HAL);
 8013c14:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d00b      	beq.n	8013c32 <phhalHw_Pn5180_Receive_Int+0x4b6>
 8013c1a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013c1c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d106      	bne.n	8013c32 <phhalHw_Pn5180_Receive_Int+0x4b6>
 8013c24:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013c26:	b2db      	uxtb	r3, r3
 8013c28:	b29b      	uxth	r3, r3
 8013c2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8013c2e:	b29b      	uxth	r3, r3
 8013c30:	e000      	b.n	8013c34 <phhalHw_Pn5180_Receive_Int+0x4b8>
 8013c32:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
}
 8013c34:	4618      	mov	r0, r3
 8013c36:	3740      	adds	r7, #64	@ 0x40
 8013c38:	46bd      	mov	sp, r7
 8013c3a:	bdb0      	pop	{r4, r5, r7, pc}

08013c3c <phhalHw_Pn5180_Int_IdleCommand>:

phStatus_t phhalHw_Pn5180_Int_IdleCommand(phhalHw_Pn5180_DataParams_t * pDataParams)
{
 8013c3c:	b580      	push	{r7, lr}
 8013c3e:	b084      	sub	sp, #16
 8013c40:	af00      	add	r7, sp, #0
 8013c42:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(
 8013c44:	f06f 0207 	mvn.w	r2, #7
 8013c48:	2100      	movs	r1, #0
 8013c4a:	6878      	ldr	r0, [r7, #4]
 8013c4c:	f7fd fcfe 	bl	801164c <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 8013c50:	4603      	mov	r3, r0
 8013c52:	81fb      	strh	r3, [r7, #14]
 8013c54:	89fb      	ldrh	r3, [r7, #14]
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d001      	beq.n	8013c5e <phhalHw_Pn5180_Int_IdleCommand+0x22>
 8013c5a:	89fb      	ldrh	r3, [r7, #14]
 8013c5c:	e00c      	b.n	8013c78 <phhalHw_Pn5180_Int_IdleCommand+0x3c>
        pDataParams,
        SYSTEM_CONFIG,
        (uint32_t)~(SYSTEM_CONFIG_COMMAND_MASK)));
#ifndef _WIN32
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, IRQ_SET_CLEAR_IDLE_IRQ_CLR_MASK));
 8013c5e:	2204      	movs	r2, #4
 8013c60:	2103      	movs	r1, #3
 8013c62:	6878      	ldr	r0, [r7, #4]
 8013c64:	f7fd fc06 	bl	8011474 <phhalHw_Pn5180_Instr_WriteRegister>
 8013c68:	4603      	mov	r3, r0
 8013c6a:	81fb      	strh	r3, [r7, #14]
 8013c6c:	89fb      	ldrh	r3, [r7, #14]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d001      	beq.n	8013c76 <phhalHw_Pn5180_Int_IdleCommand+0x3a>
 8013c72:	89fb      	ldrh	r3, [r7, #14]
 8013c74:	e000      	b.n	8013c78 <phhalHw_Pn5180_Int_IdleCommand+0x3c>
#endif

    return PH_ERR_SUCCESS;
 8013c76:	2300      	movs	r3, #0
}
 8013c78:	4618      	mov	r0, r3
 8013c7a:	3710      	adds	r7, #16
 8013c7c:	46bd      	mov	sp, r7
 8013c7e:	bd80      	pop	{r7, pc}

08013c80 <phhalHw_Pn5180_Int_LoadCommand>:

phStatus_t phhalHw_Pn5180_Int_LoadCommand(phhalHw_Pn5180_DataParams_t * pDataParams, uint8_t bCmd)
{
 8013c80:	b580      	push	{r7, lr}
 8013c82:	b088      	sub	sp, #32
 8013c84:	af00      	add	r7, sp, #0
 8013c86:	6078      	str	r0, [r7, #4]
 8013c88:	460b      	mov	r3, r1
 8013c8a:	70fb      	strb	r3, [r7, #3]

    uint8_t     PH_MEMLOC_BUF wRegTypeValueSets[12];
    uint16_t    PH_MEMLOC_REM wSizeOfRegTypeValueSets;
    uint32_t    PH_MEMLOC_REM dwTemp;

    wSizeOfRegTypeValueSets = 0U;
 8013c8c:	2300      	movs	r3, #0
 8013c8e:	83fb      	strh	r3, [r7, #30]

    /*Clear the Bits of TX_CONFIG_TX_STOP_SYMBOL_MASK*/
    dwTemp = (uint32_t) ~( SYSTEM_CONFIG_COMMAND_MASK );
 8013c90:	f06f 0307 	mvn.w	r3, #7
 8013c94:	61bb      	str	r3, [r7, #24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = SYSTEM_CONFIG;
 8013c96:	8bfb      	ldrh	r3, [r7, #30]
 8013c98:	1c5a      	adds	r2, r3, #1
 8013c9a:	83fa      	strh	r2, [r7, #30]
 8013c9c:	3320      	adds	r3, #32
 8013c9e:	443b      	add	r3, r7
 8013ca0:	2200      	movs	r2, #0
 8013ca2:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 8013ca6:	8bfb      	ldrh	r3, [r7, #30]
 8013ca8:	1c5a      	adds	r2, r3, #1
 8013caa:	83fa      	strh	r2, [r7, #30]
 8013cac:	3320      	adds	r3, #32
 8013cae:	443b      	add	r3, r7
 8013cb0:	2203      	movs	r2, #3
 8013cb2:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 8013cb6:	8bfb      	ldrh	r3, [r7, #30]
 8013cb8:	1c5a      	adds	r2, r3, #1
 8013cba:	83fa      	strh	r2, [r7, #30]
 8013cbc:	69ba      	ldr	r2, [r7, #24]
 8013cbe:	b2d2      	uxtb	r2, r2
 8013cc0:	3320      	adds	r3, #32
 8013cc2:	443b      	add	r3, r7
 8013cc4:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 8013cc8:	69bb      	ldr	r3, [r7, #24]
 8013cca:	0a1a      	lsrs	r2, r3, #8
 8013ccc:	8bfb      	ldrh	r3, [r7, #30]
 8013cce:	1c59      	adds	r1, r3, #1
 8013cd0:	83f9      	strh	r1, [r7, #30]
 8013cd2:	b2d2      	uxtb	r2, r2
 8013cd4:	3320      	adds	r3, #32
 8013cd6:	443b      	add	r3, r7
 8013cd8:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 8013cdc:	69bb      	ldr	r3, [r7, #24]
 8013cde:	0c1a      	lsrs	r2, r3, #16
 8013ce0:	8bfb      	ldrh	r3, [r7, #30]
 8013ce2:	1c59      	adds	r1, r3, #1
 8013ce4:	83f9      	strh	r1, [r7, #30]
 8013ce6:	b2d2      	uxtb	r2, r2
 8013ce8:	3320      	adds	r3, #32
 8013cea:	443b      	add	r3, r7
 8013cec:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 8013cf0:	69bb      	ldr	r3, [r7, #24]
 8013cf2:	0e1a      	lsrs	r2, r3, #24
 8013cf4:	8bfb      	ldrh	r3, [r7, #30]
 8013cf6:	1c59      	adds	r1, r3, #1
 8013cf8:	83f9      	strh	r1, [r7, #30]
 8013cfa:	b2d2      	uxtb	r2, r2
 8013cfc:	3320      	adds	r3, #32
 8013cfe:	443b      	add	r3, r7
 8013d00:	f803 2c18 	strb.w	r2, [r3, #-24]

    /*Set the new value  */
    dwTemp = ((uint32_t)bCmd & SYSTEM_CONFIG_COMMAND_MASK);
 8013d04:	78fb      	ldrb	r3, [r7, #3]
 8013d06:	f003 0307 	and.w	r3, r3, #7
 8013d0a:	61bb      	str	r3, [r7, #24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = SYSTEM_CONFIG;
 8013d0c:	8bfb      	ldrh	r3, [r7, #30]
 8013d0e:	1c5a      	adds	r2, r3, #1
 8013d10:	83fa      	strh	r2, [r7, #30]
 8013d12:	3320      	adds	r3, #32
 8013d14:	443b      	add	r3, r7
 8013d16:	2200      	movs	r2, #0
 8013d18:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 8013d1c:	8bfb      	ldrh	r3, [r7, #30]
 8013d1e:	1c5a      	adds	r2, r3, #1
 8013d20:	83fa      	strh	r2, [r7, #30]
 8013d22:	3320      	adds	r3, #32
 8013d24:	443b      	add	r3, r7
 8013d26:	2202      	movs	r2, #2
 8013d28:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 8013d2c:	8bfb      	ldrh	r3, [r7, #30]
 8013d2e:	1c5a      	adds	r2, r3, #1
 8013d30:	83fa      	strh	r2, [r7, #30]
 8013d32:	69ba      	ldr	r2, [r7, #24]
 8013d34:	b2d2      	uxtb	r2, r2
 8013d36:	3320      	adds	r3, #32
 8013d38:	443b      	add	r3, r7
 8013d3a:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 8013d3e:	69bb      	ldr	r3, [r7, #24]
 8013d40:	0a1a      	lsrs	r2, r3, #8
 8013d42:	8bfb      	ldrh	r3, [r7, #30]
 8013d44:	1c59      	adds	r1, r3, #1
 8013d46:	83f9      	strh	r1, [r7, #30]
 8013d48:	b2d2      	uxtb	r2, r2
 8013d4a:	3320      	adds	r3, #32
 8013d4c:	443b      	add	r3, r7
 8013d4e:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 8013d52:	69bb      	ldr	r3, [r7, #24]
 8013d54:	0c1a      	lsrs	r2, r3, #16
 8013d56:	8bfb      	ldrh	r3, [r7, #30]
 8013d58:	1c59      	adds	r1, r3, #1
 8013d5a:	83f9      	strh	r1, [r7, #30]
 8013d5c:	b2d2      	uxtb	r2, r2
 8013d5e:	3320      	adds	r3, #32
 8013d60:	443b      	add	r3, r7
 8013d62:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 8013d66:	69bb      	ldr	r3, [r7, #24]
 8013d68:	0e1a      	lsrs	r2, r3, #24
 8013d6a:	8bfb      	ldrh	r3, [r7, #30]
 8013d6c:	1c59      	adds	r1, r3, #1
 8013d6e:	83f9      	strh	r1, [r7, #30]
 8013d70:	b2d2      	uxtb	r2, r2
 8013d72:	3320      	adds	r3, #32
 8013d74:	443b      	add	r3, r7
 8013d76:	f803 2c18 	strb.w	r2, [r3, #-24]

    /*Send the array to the IC*/
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 8013d7a:	8bfa      	ldrh	r2, [r7, #30]
 8013d7c:	f107 0308 	add.w	r3, r7, #8
 8013d80:	4619      	mov	r1, r3
 8013d82:	6878      	ldr	r0, [r7, #4]
 8013d84:	f7fd fcd8 	bl	8011738 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 8013d88:	4603      	mov	r3, r0
 8013d8a:	82fb      	strh	r3, [r7, #22]
 8013d8c:	8afb      	ldrh	r3, [r7, #22]
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d001      	beq.n	8013d96 <phhalHw_Pn5180_Int_LoadCommand+0x116>
 8013d92:	8afb      	ldrh	r3, [r7, #22]
 8013d94:	e000      	b.n	8013d98 <phhalHw_Pn5180_Int_LoadCommand+0x118>

    return PH_ERR_SUCCESS;
 8013d96:	2300      	movs	r3, #0

}
 8013d98:	4618      	mov	r0, r3
 8013d9a:	3720      	adds	r7, #32
 8013d9c:	46bd      	mov	sp, r7
 8013d9e:	bd80      	pop	{r7, pc}

08013da0 <phhalHw_Pn5180_WaitIrq>:
    uint8_t bEnableIrq,
    uint8_t bWaitUntilPowerUp,
    uint32_t dwIrqWaitFor,
    uint32_t * dwIrqReg
    )
{
 8013da0:	b580      	push	{r7, lr}
 8013da2:	b088      	sub	sp, #32
 8013da4:	af00      	add	r7, sp, #0
 8013da6:	60f8      	str	r0, [r7, #12]
 8013da8:	607b      	str	r3, [r7, #4]
 8013daa:	460b      	mov	r3, r1
 8013dac:	72fb      	strb	r3, [r7, #11]
 8013dae:	4613      	mov	r3, r2
 8013db0:	72bb      	strb	r3, [r7, #10]
    phStatus_t PH_MEMLOC_REM statusTmp;
    uint32_t   PH_MEMLOC_REM dwRegister;
    phOsal_EventBits_t PH_MEMLOC_REM tReceivedEvents;

    /* Parameter check */
    if (0U == (dwIrqWaitFor))
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d102      	bne.n	8013dbe <phhalHw_Pn5180_WaitIrq+0x1e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 8013db8:	f240 237f 	movw	r3, #639	@ 0x27f
 8013dbc:	e04a      	b.n	8013e54 <phhalHw_Pn5180_WaitIrq+0xb4>
        /* Need to add power up behaviour */
    }

    /* If Test Bus is enabled, we should not relay on IRQ Pin
     * instead poll on IRQ Status register. */
    if ( pDataParams->bIsTestBusEnabled == PH_ON)
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 8013dc4:	2b01      	cmp	r3, #1
 8013dc6:	d103      	bne.n	8013dd0 <phhalHw_Pn5180_WaitIrq+0x30>
    {
        /* Test Bus is enabled */
        bEnableIrq &= (uint8_t)~(uint8_t)PHHAL_HW_CHECK_IRQ_PIN_MASK;
 8013dc8:	7afb      	ldrb	r3, [r7, #11]
 8013dca:	f023 0301 	bic.w	r3, r3, #1
 8013dce:	72fb      	strb	r3, [r7, #11]
        do
        {
#ifndef _WIN32
            /* If Test Bus is enabled, we should avoid polling on registers
             * continuously as we put SPI noise on RF. */
            if ( pDataParams->bIsTestBusEnabled == PH_ON)
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 8013dd6:	2b01      	cmp	r3, #1
 8013dd8:	d114      	bne.n	8013e04 <phhalHw_Pn5180_WaitIrq+0x64>
            {
                if (pDataParams->wWaitIRQDelayWithTestBus == 0x00U)
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	f8b3 3182 	ldrh.w	r3, [r3, #386]	@ 0x182
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d106      	bne.n	8013df2 <phhalHw_Pn5180_WaitIrq+0x52>
                {
                    /* Wait for atleast 1milli sec. */
                    phDriver_TimerStart(PH_DRIVER_TIMER_MILLI_SECS, 0x01U, NULL);
 8013de4:	2200      	movs	r2, #0
 8013de6:	2101      	movs	r1, #1
 8013de8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8013dec:	f006 fab8 	bl	801a360 <phDriver_TimerStart>
 8013df0:	e008      	b.n	8013e04 <phhalHw_Pn5180_WaitIrq+0x64>
                }
                else
                {
                    phDriver_TimerStart(PH_DRIVER_TIMER_MILLI_SECS, pDataParams->wWaitIRQDelayWithTestBus, NULL);
 8013df2:	68fb      	ldr	r3, [r7, #12]
 8013df4:	f8b3 3182 	ldrh.w	r3, [r3, #386]	@ 0x182
 8013df8:	2200      	movs	r2, #0
 8013dfa:	4619      	mov	r1, r3
 8013dfc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8013e00:	f006 faae 	bl	801a360 <phDriver_TimerStart>
                }
            }
#endif
            /* Read the IRQ register and check if the interrupt has occured */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegister(pDataParams, IRQ_STATUS, &dwRegister));
 8013e04:	f107 0318 	add.w	r3, r7, #24
 8013e08:	461a      	mov	r2, r3
 8013e0a:	2102      	movs	r1, #2
 8013e0c:	68f8      	ldr	r0, [r7, #12]
 8013e0e:	f7fd fd45 	bl	801189c <phhalHw_Pn5180_Instr_ReadRegister>
 8013e12:	4603      	mov	r3, r0
 8013e14:	83fb      	strh	r3, [r7, #30]
 8013e16:	8bfb      	ldrh	r3, [r7, #30]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d001      	beq.n	8013e20 <phhalHw_Pn5180_WaitIrq+0x80>
 8013e1c:	8bfb      	ldrh	r3, [r7, #30]
 8013e1e:	e019      	b.n	8013e54 <phhalHw_Pn5180_WaitIrq+0xb4>
        }while((0U == ((dwRegister & dwIrqWaitFor))));
 8013e20:	69ba      	ldr	r2, [r7, #24]
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	4013      	ands	r3, r2
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d0d2      	beq.n	8013dd0 <phhalHw_Pn5180_WaitIrq+0x30>

        /* Store the state of status register */
        *dwIrqReg = dwRegister;
 8013e2a:	69ba      	ldr	r2, [r7, #24]
 8013e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e2e:	601a      	str	r2, [r3, #0]

        if ((bEnableIrq & PHHAL_HW_DISABLE_IRQ_CLEAR_MASK) == PH_OFF)
 8013e30:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	db0c      	blt.n	8013e52 <phhalHw_Pn5180_WaitIrq+0xb2>
        {
            /* Clear all Interrupts for e.g Tx interrupt during receive */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, dwRegister));
 8013e38:	69bb      	ldr	r3, [r7, #24]
 8013e3a:	461a      	mov	r2, r3
 8013e3c:	2103      	movs	r1, #3
 8013e3e:	68f8      	ldr	r0, [r7, #12]
 8013e40:	f7fd fb18 	bl	8011474 <phhalHw_Pn5180_Instr_WriteRegister>
 8013e44:	4603      	mov	r3, r0
 8013e46:	83fb      	strh	r3, [r7, #30]
 8013e48:	8bfb      	ldrh	r3, [r7, #30]
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d001      	beq.n	8013e52 <phhalHw_Pn5180_WaitIrq+0xb2>
 8013e4e:	8bfb      	ldrh	r3, [r7, #30]
 8013e50:	e000      	b.n	8013e54 <phhalHw_Pn5180_WaitIrq+0xb4>
        }
    }

    return PH_ERR_SUCCESS;
 8013e52:	2300      	movs	r3, #0

}
 8013e54:	4618      	mov	r0, r3
 8013e56:	3720      	adds	r7, #32
 8013e58:	46bd      	mov	sp, r7
 8013e5a:	bd80      	pop	{r7, pc}

08013e5c <phpalFelica_Sw_Init>:
phStatus_t phpalFelica_Sw_Init(
                               phpalFelica_Sw_DataParams_t * pDataParams,
                               uint16_t wSizeOfDataParams,
                               void * pHalDataParams
                               )
{
 8013e5c:	b480      	push	{r7}
 8013e5e:	b085      	sub	sp, #20
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	60f8      	str	r0, [r7, #12]
 8013e64:	460b      	mov	r3, r1
 8013e66:	607a      	str	r2, [r7, #4]
 8013e68:	817b      	strh	r3, [r7, #10]
    /* parameter structure length check */
    if (sizeof(phpalFelica_Sw_DataParams_t) != wSizeOfDataParams)
 8013e6a:	897b      	ldrh	r3, [r7, #10]
 8013e6c:	2b20      	cmp	r3, #32
 8013e6e:	d002      	beq.n	8013e76 <phpalFelica_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_FELICA);
 8013e70:	f44f 6302 	mov.w	r3, #2080	@ 0x820
 8013e74:	e01d      	b.n	8013eb2 <phpalFelica_Sw_Init+0x56>
    }
    PH_ASSERT_NULL (pDataParams);
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d101      	bne.n	8013e80 <phpalFelica_Sw_Init+0x24>
 8013e7c:	2321      	movs	r3, #33	@ 0x21
 8013e7e:	e018      	b.n	8013eb2 <phpalFelica_Sw_Init+0x56>
    PH_ASSERT_NULL (pHalDataParams);
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d101      	bne.n	8013e8a <phpalFelica_Sw_Init+0x2e>
 8013e86:	2321      	movs	r3, #33	@ 0x21
 8013e88:	e013      	b.n	8013eb2 <phpalFelica_Sw_Init+0x56>

    /* init private data */
    pDataParams->wId            = PH_COMP_PAL_FELICA | PHPAL_FELICA_SW_ID;
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	f640 0201 	movw	r2, #2049	@ 0x801
 8013e90:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams = pHalDataParams;
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	687a      	ldr	r2, [r7, #4]
 8013e96:	605a      	str	r2, [r3, #4]
    pDataParams->bIDmPMmValid   = PHPAL_FELICA_SW_IDMPMM_INVALID;
 8013e98:	68fb      	ldr	r3, [r7, #12]
 8013e9a:	2200      	movs	r2, #0
 8013e9c:	769a      	strb	r2, [r3, #26]
    pDataParams->bLength        = 0x00;
 8013e9e:	68fb      	ldr	r3, [r7, #12]
 8013ea0:	2200      	movs	r2, #0
 8013ea2:	76da      	strb	r2, [r3, #27]
    pDataParams->bRequestCode   = 0x00;
 8013ea4:	68fb      	ldr	r3, [r7, #12]
 8013ea6:	2200      	movs	r2, #0
 8013ea8:	771a      	strb	r2, [r3, #28]
    pDataParams->bPreambleLen   = PHPAL_FELICA_PREAMBLE_LEN_48BITS;
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	2200      	movs	r2, #0
 8013eae:	779a      	strb	r2, [r3, #30]

    return PH_ERR_SUCCESS;
 8013eb0:	2300      	movs	r3, #0
}
 8013eb2:	4618      	mov	r0, r3
 8013eb4:	3714      	adds	r7, #20
 8013eb6:	46bd      	mov	sp, r7
 8013eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ebc:	4770      	bx	lr
	...

08013ec0 <phpalFelica_Sw_ReqC>:
                               uint8_t * pSystemCode,
                               uint8_t  bNumTimeSlots,
                               uint8_t ** ppRxBuffer,
                               uint16_t * pRxLength
                               )
{
 8013ec0:	b580      	push	{r7, lr}
 8013ec2:	b08c      	sub	sp, #48	@ 0x30
 8013ec4:	af02      	add	r7, sp, #8
 8013ec6:	60f8      	str	r0, [r7, #12]
 8013ec8:	60b9      	str	r1, [r7, #8]
 8013eca:	603b      	str	r3, [r7, #0]
 8013ecc:	4613      	mov	r3, r2
 8013ece:	71fb      	strb	r3, [r7, #7]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aCmd[6];
    uint8_t *   PH_MEMLOC_REM pRxBufferTmp = NULL;
 8013ed0:	2300      	movs	r3, #0
 8013ed2:	617b      	str	r3, [r7, #20]
    uint16_t    PH_MEMLOC_REM wRxLengthTmp = 0;
 8013ed4:	2300      	movs	r3, #0
 8013ed6:	827b      	strh	r3, [r7, #18]
    uint16_t    PH_MEMLOC_REM wTimeOutUs;
    uint16_t    PH_MEMLOC_REM wCardType = 0;
 8013ed8:	2300      	movs	r3, #0
 8013eda:	823b      	strh	r3, [r7, #16]
    uint16_t    PH_MEMLOC_REM wTR1ValueUs;

    /* Reset IDm, PMm and RD data*/
    (void)memset(pDataParams->aIDmPMm, 0x00, (PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH + PHPAL_FELICA_RD_LENGTH));
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	3308      	adds	r3, #8
 8013ee0:	2212      	movs	r2, #18
 8013ee2:	2100      	movs	r1, #0
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	f00c fcd5 	bl	8020894 <memset>
    /* Reset validity of stored card IDs */
    pDataParams->bIDmPMmValid = PHPAL_FELICA_SW_IDMPMM_INVALID;
 8013eea:	68fb      	ldr	r3, [r7, #12]
 8013eec:	2200      	movs	r2, #0
 8013eee:	769a      	strb	r2, [r3, #26]

    /* Reset received frame count */
    pDataParams->bTotalFrames = 0;
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	2200      	movs	r2, #0
 8013ef4:	775a      	strb	r2, [r3, #29]

    /* parameter check and timeout setting */
    if(!((bNumTimeSlots == PHPAL_FELICA_NUMSLOTS_1) ||
 8013ef6:	79fb      	ldrb	r3, [r7, #7]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d00e      	beq.n	8013f1a <phpalFelica_Sw_ReqC+0x5a>
 8013efc:	79fb      	ldrb	r3, [r7, #7]
 8013efe:	2b01      	cmp	r3, #1
 8013f00:	d00b      	beq.n	8013f1a <phpalFelica_Sw_ReqC+0x5a>
        (bNumTimeSlots == PHPAL_FELICA_NUMSLOTS_2) ||
 8013f02:	79fb      	ldrb	r3, [r7, #7]
 8013f04:	2b03      	cmp	r3, #3
 8013f06:	d008      	beq.n	8013f1a <phpalFelica_Sw_ReqC+0x5a>
        (bNumTimeSlots == PHPAL_FELICA_NUMSLOTS_4) ||
 8013f08:	79fb      	ldrb	r3, [r7, #7]
 8013f0a:	2b07      	cmp	r3, #7
 8013f0c:	d005      	beq.n	8013f1a <phpalFelica_Sw_ReqC+0x5a>
    if(!((bNumTimeSlots == PHPAL_FELICA_NUMSLOTS_1) ||
 8013f0e:	79fb      	ldrb	r3, [r7, #7]
 8013f10:	2b0f      	cmp	r3, #15
 8013f12:	d002      	beq.n	8013f1a <phpalFelica_Sw_ReqC+0x5a>
        (bNumTimeSlots == PHPAL_FELICA_NUMSLOTS_8) ||
        (bNumTimeSlots == PHPAL_FELICA_NUMSLOTS_16))
      )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_FELICA);
 8013f14:	f640 0321 	movw	r3, #2081	@ 0x821
 8013f18:	e0e2      	b.n	80140e0 <phpalFelica_Sw_ReqC+0x220>
    }
    else
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 8013f1a:	68fb      	ldr	r3, [r7, #12]
 8013f1c:	685b      	ldr	r3, [r3, #4]
 8013f1e:	f107 0210 	add.w	r2, r7, #16
 8013f22:	2121      	movs	r1, #33	@ 0x21
 8013f24:	4618      	mov	r0, r3
 8013f26:	f7fc f885 	bl	8010034 <phhalHw_Pn5180_GetConfig>
 8013f2a:	4603      	mov	r3, r0
 8013f2c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8013f2e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d001      	beq.n	8013f38 <phpalFelica_Sw_ReqC+0x78>
 8013f34:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013f36:	e0d3      	b.n	80140e0 <phpalFelica_Sw_ReqC+0x220>
            PHHAL_HW_CONFIG_CARD_TYPE,
            &wCardType));
        /* NFC Forum Digital Protocol Technical Specification v2.3
         * 8.7.1.3 : wTimeOutUs = FDTF,LISTEN,SENSF_REQ(TSN+1U) - TR1 + (delta)TF,POLL
         * Using TR1 value @212kbps */
        if ((wCardType != PHHAL_HW_CARDTYPE_FELICA_212) && (wCardType != PHHAL_HW_CARDTYPE_FELICA_424))
 8013f38:	8a3b      	ldrh	r3, [r7, #16]
 8013f3a:	2b03      	cmp	r3, #3
 8013f3c:	d005      	beq.n	8013f4a <phpalFelica_Sw_ReqC+0x8a>
 8013f3e:	8a3b      	ldrh	r3, [r7, #16]
 8013f40:	2b0a      	cmp	r3, #10
 8013f42:	d002      	beq.n	8013f4a <phpalFelica_Sw_ReqC+0x8a>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_PAL_FELICA);
 8013f44:	f640 0325 	movw	r3, #2085	@ 0x825
 8013f48:	e0ca      	b.n	80140e0 <phpalFelica_Sw_ReqC+0x220>
        }

        if (wCardType == PHHAL_HW_CARDTYPE_FELICA_212)
 8013f4a:	8a3b      	ldrh	r3, [r7, #16]
 8013f4c:	2b03      	cmp	r3, #3
 8013f4e:	d107      	bne.n	8013f60 <phpalFelica_Sw_ReqC+0xa0>
        {
            wTR1ValueUs = aFelica_TR1_Value_Us[pDataParams->bPreambleLen][0];
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	7f9b      	ldrb	r3, [r3, #30]
 8013f54:	461a      	mov	r2, r3
 8013f56:	4b64      	ldr	r3, [pc, #400]	@ (80140e8 <phpalFelica_Sw_ReqC+0x228>)
 8013f58:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8013f5c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8013f5e:	e006      	b.n	8013f6e <phpalFelica_Sw_ReqC+0xae>
        }
        else
        {
            wTR1ValueUs = aFelica_TR1_Value_Us[pDataParams->bPreambleLen][1];
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	7f9b      	ldrb	r3, [r3, #30]
 8013f64:	4a60      	ldr	r2, [pc, #384]	@ (80140e8 <phpalFelica_Sw_ReqC+0x228>)
 8013f66:	009b      	lsls	r3, r3, #2
 8013f68:	4413      	add	r3, r2
 8013f6a:	885b      	ldrh	r3, [r3, #2]
 8013f6c:	84bb      	strh	r3, [r7, #36]	@ 0x24
        }

        wTimeOutUs = FDTF_LISTEN_SENSF_REQ((((uint16_t)bNumTimeSlots) + 1U), wTR1ValueUs) - wTR1ValueUs + PHPAL_FELICA_SW_T_DELTA_F_POLL_US;
 8013f6e:	79fb      	ldrb	r3, [r7, #7]
 8013f70:	b29b      	uxth	r3, r3
 8013f72:	461a      	mov	r2, r3
 8013f74:	0092      	lsls	r2, r2, #2
 8013f76:	441a      	add	r2, r3
 8013f78:	4611      	mov	r1, r2
 8013f7a:	0109      	lsls	r1, r1, #4
 8013f7c:	1a8a      	subs	r2, r1, r2
 8013f7e:	0052      	lsls	r2, r2, #1
 8013f80:	4413      	add	r3, r2
 8013f82:	00db      	lsls	r3, r3, #3
 8013f84:	b29b      	uxth	r3, r3
 8013f86:	f603 632a 	addw	r3, r3, #3626	@ 0xe2a
 8013f8a:	847b      	strh	r3, [r7, #34]	@ 0x22
    }

    /* build the command frame */
    aCmd[0] = 6;
 8013f8c:	2306      	movs	r3, #6
 8013f8e:	763b      	strb	r3, [r7, #24]
    aCmd[1] = PHPAL_FELICA_SW_CMD_REQC;
 8013f90:	2300      	movs	r3, #0
 8013f92:	767b      	strb	r3, [r7, #25]
    aCmd[2] = pSystemCode[0];
 8013f94:	68bb      	ldr	r3, [r7, #8]
 8013f96:	781b      	ldrb	r3, [r3, #0]
 8013f98:	76bb      	strb	r3, [r7, #26]
    aCmd[3] = pSystemCode[1];
 8013f9a:	68bb      	ldr	r3, [r7, #8]
 8013f9c:	785b      	ldrb	r3, [r3, #1]
 8013f9e:	76fb      	strb	r3, [r7, #27]
    aCmd[4] = pDataParams->bRequestCode;
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	7f1b      	ldrb	r3, [r3, #28]
 8013fa4:	773b      	strb	r3, [r7, #28]
    aCmd[5] = bNumTimeSlots;
 8013fa6:	79fb      	ldrb	r3, [r7, #7]
 8013fa8:	777b      	strb	r3, [r7, #29]

    /* Set ReqC timeout according to the number of slots */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	685b      	ldr	r3, [r3, #4]
 8013fae:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8013fb0:	210d      	movs	r1, #13
 8013fb2:	4618      	mov	r0, r3
 8013fb4:	f7fa fbf0 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8013fb8:	4603      	mov	r3, r0
 8013fba:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8013fbc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d001      	beq.n	8013fc6 <phpalFelica_Sw_ReqC+0x106>
 8013fc2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013fc4:	e08c      	b.n	80140e0 <phpalFelica_Sw_ReqC+0x220>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
        wTimeOutUs));

    if(bNumTimeSlots > PHPAL_FELICA_NUMSLOTS_1)
 8013fc6:	79fb      	ldrb	r3, [r7, #7]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d00d      	beq.n	8013fe8 <phpalFelica_Sw_ReqC+0x128>
    {
        /* Set RX Multiple feature of HW */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	685b      	ldr	r3, [r3, #4]
 8013fd0:	2201      	movs	r2, #1
 8013fd2:	2153      	movs	r1, #83	@ 0x53
 8013fd4:	4618      	mov	r0, r3
 8013fd6:	f7fa fbdf 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8013fda:	4603      	mov	r3, r0
 8013fdc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8013fde:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d001      	beq.n	8013fe8 <phpalFelica_Sw_ReqC+0x128>
 8013fe4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013fe6:	e07b      	b.n	80140e0 <phpalFelica_Sw_ReqC+0x220>
                PHHAL_HW_CONFIG_RXMULTIPLE,
                PH_ON));
    }

    /* Exchange command */
     status = phhalHw_Exchange(
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	6858      	ldr	r0, [r3, #4]
 8013fec:	f107 0218 	add.w	r2, r7, #24
 8013ff0:	f107 0312 	add.w	r3, r7, #18
 8013ff4:	9301      	str	r3, [sp, #4]
 8013ff6:	f107 0314 	add.w	r3, r7, #20
 8013ffa:	9300      	str	r3, [sp, #0]
 8013ffc:	2306      	movs	r3, #6
 8013ffe:	2100      	movs	r1, #0
 8014000:	f7fa f814 	bl	800e02c <phhalHw_Pn5180_Exchange>
 8014004:	4603      	mov	r3, r0
 8014006:	843b      	strh	r3, [r7, #32]
        aCmd,
        6,
        &pRxBufferTmp,
        &wRxLengthTmp);

    if(bNumTimeSlots > PHPAL_FELICA_NUMSLOTS_1)
 8014008:	79fb      	ldrb	r3, [r7, #7]
 801400a:	2b00      	cmp	r3, #0
 801400c:	d00d      	beq.n	801402a <phpalFelica_Sw_ReqC+0x16a>
    {
        /* Re-Set RX Multiple feature of HW */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	685b      	ldr	r3, [r3, #4]
 8014012:	2200      	movs	r2, #0
 8014014:	2153      	movs	r1, #83	@ 0x53
 8014016:	4618      	mov	r0, r3
 8014018:	f7fa fbbe 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 801401c:	4603      	mov	r3, r0
 801401e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8014020:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8014022:	2b00      	cmp	r3, #0
 8014024:	d001      	beq.n	801402a <phpalFelica_Sw_ReqC+0x16a>
 8014026:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8014028:	e05a      	b.n	80140e0 <phpalFelica_Sw_ReqC+0x220>
                PHHAL_HW_CONFIG_RXMULTIPLE,
                PH_OFF));
    }

    /* Error check */
    PH_CHECK_SUCCESS(status);
 801402a:	8c3b      	ldrh	r3, [r7, #32]
 801402c:	2b00      	cmp	r3, #0
 801402e:	d001      	beq.n	8014034 <phpalFelica_Sw_ReqC+0x174>
 8014030:	8c3b      	ldrh	r3, [r7, #32]
 8014032:	e055      	b.n	80140e0 <phpalFelica_Sw_ReqC+0x220>

    /* Check length and update info*/
    if(bNumTimeSlots > PHPAL_FELICA_NUMSLOTS_1)
 8014034:	79fb      	ldrb	r3, [r7, #7]
 8014036:	2b00      	cmp	r3, #0
 8014038:	d015      	beq.n	8014066 <phpalFelica_Sw_ReqC+0x1a6>
    {
        /* Rx Length should be multiple of response frame size */
        if(0U != (wRxLengthTmp % PHPAL_FELICA_SW_RESP_FRAME_SIZE))
 801403a:	8a7b      	ldrh	r3, [r7, #18]
 801403c:	f003 031f 	and.w	r3, r3, #31
 8014040:	b29b      	uxth	r3, r3
 8014042:	2b00      	cmp	r3, #0
 8014044:	d002      	beq.n	801404c <phpalFelica_Sw_ReqC+0x18c>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_FELICA);
 8014046:	f640 0306 	movw	r3, #2054	@ 0x806
 801404a:	e049      	b.n	80140e0 <phpalFelica_Sw_ReqC+0x220>
        }
        /* assign and update IDm and PMm and length */
        *ppRxBuffer = pRxBufferTmp;
 801404c:	697a      	ldr	r2, [r7, #20]
 801404e:	683b      	ldr	r3, [r7, #0]
 8014050:	601a      	str	r2, [r3, #0]
        *pRxLength = wRxLengthTmp;
 8014052:	8a7a      	ldrh	r2, [r7, #18]
 8014054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014056:	801a      	strh	r2, [r3, #0]

        pDataParams->bTotalFrames = (uint8_t)(wRxLengthTmp / PHPAL_FELICA_SW_RESP_FRAME_SIZE);
 8014058:	8a7b      	ldrh	r3, [r7, #18]
 801405a:	095b      	lsrs	r3, r3, #5
 801405c:	b29b      	uxth	r3, r3
 801405e:	b2da      	uxtb	r2, r3
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	775a      	strb	r2, [r3, #29]
 8014064:	e038      	b.n	80140d8 <phpalFelica_Sw_ReqC+0x218>
    }
    else
    {
        if (((wRxLengthTmp != (PHPAL_FELICA_ATQC_LENGTH + 1U)) &&
 8014066:	8a7b      	ldrh	r3, [r7, #18]
 8014068:	2b12      	cmp	r3, #18
 801406a:	d002      	beq.n	8014072 <phpalFelica_Sw_ReqC+0x1b2>
            (wRxLengthTmp != (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_RD_LENGTH + 1U))) ||
 801406c:	8a7b      	ldrh	r3, [r7, #18]
        if (((wRxLengthTmp != (PHPAL_FELICA_ATQC_LENGTH + 1U)) &&
 801406e:	2b14      	cmp	r3, #20
 8014070:	d10a      	bne.n	8014088 <phpalFelica_Sw_ReqC+0x1c8>
            (pRxBufferTmp[0] != wRxLengthTmp) ||
 8014072:	697b      	ldr	r3, [r7, #20]
 8014074:	781b      	ldrb	r3, [r3, #0]
 8014076:	461a      	mov	r2, r3
 8014078:	8a7b      	ldrh	r3, [r7, #18]
            (wRxLengthTmp != (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_RD_LENGTH + 1U))) ||
 801407a:	429a      	cmp	r2, r3
 801407c:	d104      	bne.n	8014088 <phpalFelica_Sw_ReqC+0x1c8>
            (pRxBufferTmp[1] != PHPAL_FELICA_SW_RSP_REQC))
 801407e:	697b      	ldr	r3, [r7, #20]
 8014080:	3301      	adds	r3, #1
 8014082:	781b      	ldrb	r3, [r3, #0]
            (pRxBufferTmp[0] != wRxLengthTmp) ||
 8014084:	2b01      	cmp	r3, #1
 8014086:	d002      	beq.n	801408e <phpalFelica_Sw_ReqC+0x1ce>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_FELICA);
 8014088:	f640 0306 	movw	r3, #2054	@ 0x806
 801408c:	e028      	b.n	80140e0 <phpalFelica_Sw_ReqC+0x220>
        }

        /* RC = 0 and card response with RD information */
        if((wRxLengthTmp == (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_RD_LENGTH + 1U)) && (pDataParams->bRequestCode == 0U))
 801408e:	8a7b      	ldrh	r3, [r7, #18]
 8014090:	2b14      	cmp	r3, #20
 8014092:	d106      	bne.n	80140a2 <phpalFelica_Sw_ReqC+0x1e2>
 8014094:	68fb      	ldr	r3, [r7, #12]
 8014096:	7f1b      	ldrb	r3, [r3, #28]
 8014098:	2b00      	cmp	r3, #0
 801409a:	d102      	bne.n	80140a2 <phpalFelica_Sw_ReqC+0x1e2>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_FELICA);
 801409c:	f640 0306 	movw	r3, #2054	@ 0x806
 80140a0:	e01e      	b.n	80140e0 <phpalFelica_Sw_ReqC+0x220>
        }
        /* Store IDm and PMm */
        (void)memcpy(pDataParams->aIDmPMm, &pRxBufferTmp[2], (((uint32_t)(pRxBufferTmp[0])) - 2U));
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	f103 0008 	add.w	r0, r3, #8
 80140a8:	697b      	ldr	r3, [r7, #20]
 80140aa:	1c99      	adds	r1, r3, #2
 80140ac:	697b      	ldr	r3, [r7, #20]
 80140ae:	781b      	ldrb	r3, [r3, #0]
 80140b0:	3b02      	subs	r3, #2
 80140b2:	461a      	mov	r2, r3
 80140b4:	f00c fc6d 	bl	8020992 <memcpy>
        pDataParams->bIDmPMmValid = PHPAL_FELICA_SW_IDMPMM_VALID;
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	2201      	movs	r2, #1
 80140bc:	769a      	strb	r2, [r3, #26]

        /* Remove LEN Byte and Response Byte from response and assign start position of ID */
        *ppRxBuffer = &pRxBufferTmp[PHPAL_FELICA_SW_LEN_BYTE_SIZE + PHPAL_FELICA_SW_RESP_REQC_SIZE];
 80140be:	697b      	ldr	r3, [r7, #20]
 80140c0:	1c9a      	adds	r2, r3, #2
 80140c2:	683b      	ldr	r3, [r7, #0]
 80140c4:	601a      	str	r2, [r3, #0]
        *pRxLength = (uint16_t)(((uint16_t)pRxBufferTmp[0]) - (PHPAL_FELICA_SW_LEN_BYTE_SIZE + PHPAL_FELICA_SW_RESP_REQC_SIZE));
 80140c6:	697b      	ldr	r3, [r7, #20]
 80140c8:	781b      	ldrb	r3, [r3, #0]
 80140ca:	3b02      	subs	r3, #2
 80140cc:	b29a      	uxth	r2, r3
 80140ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140d0:	801a      	strh	r2, [r3, #0]

        pDataParams->bTotalFrames = 1;
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	2201      	movs	r2, #1
 80140d6:	775a      	strb	r2, [r3, #29]
    }

    pDataParams->bIDmPMmValid = PHPAL_FELICA_SW_IDMPMM_VALID;
 80140d8:	68fb      	ldr	r3, [r7, #12]
 80140da:	2201      	movs	r2, #1
 80140dc:	769a      	strb	r2, [r3, #26]

    return PH_ERR_SUCCESS;
 80140de:	2300      	movs	r3, #0
}
 80140e0:	4618      	mov	r0, r3
 80140e2:	3728      	adds	r7, #40	@ 0x28
 80140e4:	46bd      	mov	sp, r7
 80140e6:	bd80      	pop	{r7, pc}
 80140e8:	08023b14 	.word	0x08023b14

080140ec <phpalFelica_Sw_GetFrameInfo>:
                                        uint8_t * pResponseBuffer,
                                        uint16_t *pwStatus,
                                        uint8_t** ppID,
                                        uint8_t * pLen
                                        )
{
 80140ec:	b480      	push	{r7}
 80140ee:	b087      	sub	sp, #28
 80140f0:	af00      	add	r7, sp, #0
 80140f2:	60f8      	str	r0, [r7, #12]
 80140f4:	607a      	str	r2, [r7, #4]
 80140f6:	603b      	str	r3, [r7, #0]
 80140f8:	460b      	mov	r3, r1
 80140fa:	72fb      	strb	r3, [r7, #11]
    uint8_t PH_MEMLOC_REM       bError;
    uint8_t PH_MEMLOC_REM       bStartPos;

    /* check frame number */
    if((bFrameNum > pDataParams->bTotalFrames) || (bFrameNum == 0U))
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	7f5b      	ldrb	r3, [r3, #29]
 8014100:	7afa      	ldrb	r2, [r7, #11]
 8014102:	429a      	cmp	r2, r3
 8014104:	d802      	bhi.n	801410c <phpalFelica_Sw_GetFrameInfo+0x20>
 8014106:	7afb      	ldrb	r3, [r7, #11]
 8014108:	2b00      	cmp	r3, #0
 801410a:	d102      	bne.n	8014112 <phpalFelica_Sw_GetFrameInfo+0x26>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_FELICA);
 801410c:	f640 0321 	movw	r3, #2081	@ 0x821
 8014110:	e06f      	b.n	80141f2 <phpalFelica_Sw_GetFrameInfo+0x106>
    }

    *pwStatus = PH_ERR_SUCCESS;
 8014112:	683b      	ldr	r3, [r7, #0]
 8014114:	2200      	movs	r2, #0
 8014116:	801a      	strh	r2, [r3, #0]

    /* get start position of frame */
    bStartPos = (uint8_t)(PHPAL_FELICA_SW_RESP_FRAME_SIZE * (bFrameNum - 1U));
 8014118:	7afb      	ldrb	r3, [r7, #11]
 801411a:	3b01      	subs	r3, #1
 801411c:	b2db      	uxtb	r3, r3
 801411e:	015b      	lsls	r3, r3, #5
 8014120:	75fb      	strb	r3, [r7, #23]

    /* Check length */
    if( ((pResponseBuffer[bStartPos + PHHAL_HW_STATUS_FRAME_LEN_BYTE_POS] != (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_SW_LEN_BYTE_SIZE)) &&
 8014122:	7dfb      	ldrb	r3, [r7, #23]
 8014124:	331c      	adds	r3, #28
 8014126:	687a      	ldr	r2, [r7, #4]
 8014128:	4413      	add	r3, r2
 801412a:	781b      	ldrb	r3, [r3, #0]
 801412c:	2b12      	cmp	r3, #18
 801412e:	d006      	beq.n	801413e <phpalFelica_Sw_GetFrameInfo+0x52>
        (pResponseBuffer[bStartPos + PHHAL_HW_STATUS_FRAME_LEN_BYTE_POS] != (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_RD_LENGTH + PHPAL_FELICA_SW_LEN_BYTE_SIZE))) ||
 8014130:	7dfb      	ldrb	r3, [r7, #23]
 8014132:	331c      	adds	r3, #28
 8014134:	687a      	ldr	r2, [r7, #4]
 8014136:	4413      	add	r3, r2
 8014138:	781b      	ldrb	r3, [r3, #0]
    if( ((pResponseBuffer[bStartPos + PHHAL_HW_STATUS_FRAME_LEN_BYTE_POS] != (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_SW_LEN_BYTE_SIZE)) &&
 801413a:	2b14      	cmp	r3, #20
 801413c:	d106      	bne.n	801414c <phpalFelica_Sw_GetFrameInfo+0x60>
        (pResponseBuffer[bStartPos + 1U] != PHPAL_FELICA_SW_RSP_REQC))
 801413e:	7dfb      	ldrb	r3, [r7, #23]
 8014140:	3301      	adds	r3, #1
 8014142:	687a      	ldr	r2, [r7, #4]
 8014144:	4413      	add	r3, r2
 8014146:	781b      	ldrb	r3, [r3, #0]
        (pResponseBuffer[bStartPos + PHHAL_HW_STATUS_FRAME_LEN_BYTE_POS] != (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_RD_LENGTH + PHPAL_FELICA_SW_LEN_BYTE_SIZE))) ||
 8014148:	2b01      	cmp	r3, #1
 801414a:	d002      	beq.n	8014152 <phpalFelica_Sw_GetFrameInfo+0x66>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_FELICA);
 801414c:	f640 0306 	movw	r3, #2054	@ 0x806
 8014150:	e04f      	b.n	80141f2 <phpalFelica_Sw_GetFrameInfo+0x106>
    }

    /* RC = 0 and card response with RD information */
    if((pResponseBuffer[bStartPos + PHHAL_HW_STATUS_FRAME_LEN_BYTE_POS] == (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_RD_LENGTH + PHPAL_FELICA_SW_LEN_BYTE_SIZE)) && (pDataParams->bRequestCode == 0U))
 8014152:	7dfb      	ldrb	r3, [r7, #23]
 8014154:	331c      	adds	r3, #28
 8014156:	687a      	ldr	r2, [r7, #4]
 8014158:	4413      	add	r3, r2
 801415a:	781b      	ldrb	r3, [r3, #0]
 801415c:	2b14      	cmp	r3, #20
 801415e:	d106      	bne.n	801416e <phpalFelica_Sw_GetFrameInfo+0x82>
 8014160:	68fb      	ldr	r3, [r7, #12]
 8014162:	7f1b      	ldrb	r3, [r3, #28]
 8014164:	2b00      	cmp	r3, #0
 8014166:	d102      	bne.n	801416e <phpalFelica_Sw_GetFrameInfo+0x82>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_FELICA);
 8014168:	f640 0306 	movw	r3, #2054	@ 0x806
 801416c:	e041      	b.n	80141f2 <phpalFelica_Sw_GetFrameInfo+0x106>
    }

    /* Extract error from Status byte */
    bError = pResponseBuffer[(bStartPos) + PHHAL_HW_STATUS_FRAME_ERR_BYTE_POS ] & PHHAL_HW_STATUS_FRAME_ERR_MASK;
 801416e:	7dfb      	ldrb	r3, [r7, #23]
 8014170:	331d      	adds	r3, #29
 8014172:	687a      	ldr	r2, [r7, #4]
 8014174:	4413      	add	r3, r2
 8014176:	781b      	ldrb	r3, [r3, #0]
 8014178:	f003 031f 	and.w	r3, r3, #31
 801417c:	75bb      	strb	r3, [r7, #22]

    if(bError != 0x00U)
 801417e:	7dbb      	ldrb	r3, [r7, #22]
 8014180:	2b00      	cmp	r3, #0
 8014182:	d026      	beq.n	80141d2 <phpalFelica_Sw_GetFrameInfo+0xe6>
    {
        /* check for contact less error */
        if(0U != (bError & PHHAL_HW_STATUS_FRAME_CL_ERR_POS))
 8014184:	7dbb      	ldrb	r3, [r7, #22]
 8014186:	f003 0301 	and.w	r3, r3, #1
 801418a:	2b00      	cmp	r3, #0
 801418c:	d01d      	beq.n	80141ca <phpalFelica_Sw_GetFrameInfo+0xde>
        {
            /* check for protocol error */
            if(0U != (bError & PHHAL_HW_STATUS_FRAME_PROT_ERR_POS))
 801418e:	7dbb      	ldrb	r3, [r7, #22]
 8014190:	f003 0304 	and.w	r3, r3, #4
 8014194:	2b00      	cmp	r3, #0
 8014196:	d003      	beq.n	80141a0 <phpalFelica_Sw_GetFrameInfo+0xb4>
            {
                *pwStatus = PH_ERR_PROTOCOL_ERROR;
 8014198:	683b      	ldr	r3, [r7, #0]
 801419a:	2206      	movs	r2, #6
 801419c:	801a      	strh	r2, [r3, #0]
 801419e:	e027      	b.n	80141f0 <phpalFelica_Sw_GetFrameInfo+0x104>
            }
            /* check for collision error */
            else if(0U != (bError & PHHAL_HW_STATUS_FRAME_COLL_ERR_POS))
 80141a0:	7dbb      	ldrb	r3, [r7, #22]
 80141a2:	f003 0308 	and.w	r3, r3, #8
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d003      	beq.n	80141b2 <phpalFelica_Sw_GetFrameInfo+0xc6>
            {
                *pwStatus = PH_ERR_COLLISION_ERROR;
 80141aa:	683b      	ldr	r3, [r7, #0]
 80141ac:	2203      	movs	r2, #3
 80141ae:	801a      	strh	r2, [r3, #0]
 80141b0:	e01e      	b.n	80141f0 <phpalFelica_Sw_GetFrameInfo+0x104>
            }
            /* check for Integrity error */
            else if(0U != (bError & PHHAL_HW_STATUS_FRAME_DATA_ERR_POS))
 80141b2:	7dbb      	ldrb	r3, [r7, #22]
 80141b4:	f003 0302 	and.w	r3, r3, #2
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d003      	beq.n	80141c4 <phpalFelica_Sw_GetFrameInfo+0xd8>
            {
                *pwStatus = PH_ERR_INTEGRITY_ERROR;
 80141bc:	683b      	ldr	r3, [r7, #0]
 80141be:	2202      	movs	r2, #2
 80141c0:	801a      	strh	r2, [r3, #0]
 80141c2:	e015      	b.n	80141f0 <phpalFelica_Sw_GetFrameInfo+0x104>
            }
            else
            {
                /* If CL Error is set and no Protocol, Collision, Integrity flag is set */
                return (PH_ERR_PROTOCOL_ERROR | PH_COMP_PAL_FELICA);
 80141c4:	f640 0306 	movw	r3, #2054	@ 0x806
 80141c8:	e013      	b.n	80141f2 <phpalFelica_Sw_GetFrameInfo+0x106>
            }
        }
        else
        {   /* Length error */
            *pwStatus = PH_ERR_LENGTH_ERROR;
 80141ca:	683b      	ldr	r3, [r7, #0]
 80141cc:	220c      	movs	r2, #12
 80141ce:	801a      	strh	r2, [r3, #0]
 80141d0:	e00e      	b.n	80141f0 <phpalFelica_Sw_GetFrameInfo+0x104>

    }
    else
    {
      /* Remove LEN Byte and Response Byte (0x01) from response and assign start position of ID */
      *ppID = &pResponseBuffer[bStartPos + (PHPAL_FELICA_SW_LEN_BYTE_SIZE + PHPAL_FELICA_SW_RESP_REQC_SIZE)];
 80141d2:	7dfb      	ldrb	r3, [r7, #23]
 80141d4:	3302      	adds	r3, #2
 80141d6:	687a      	ldr	r2, [r7, #4]
 80141d8:	441a      	add	r2, r3
 80141da:	6a3b      	ldr	r3, [r7, #32]
 80141dc:	601a      	str	r2, [r3, #0]
      *pLen = pResponseBuffer[bStartPos + PHHAL_HW_STATUS_FRAME_LEN_BYTE_POS] - (PHPAL_FELICA_SW_LEN_BYTE_SIZE + PHPAL_FELICA_SW_RESP_REQC_SIZE);
 80141de:	7dfb      	ldrb	r3, [r7, #23]
 80141e0:	331c      	adds	r3, #28
 80141e2:	687a      	ldr	r2, [r7, #4]
 80141e4:	4413      	add	r3, r2
 80141e6:	781b      	ldrb	r3, [r3, #0]
 80141e8:	3b02      	subs	r3, #2
 80141ea:	b2da      	uxtb	r2, r3
 80141ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141ee:	701a      	strb	r2, [r3, #0]
    }

    return PH_ERR_SUCCESS;
 80141f0:	2300      	movs	r3, #0
}
 80141f2:	4618      	mov	r0, r3
 80141f4:	371c      	adds	r7, #28
 80141f6:	46bd      	mov	sp, r7
 80141f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141fc:	4770      	bx	lr

080141fe <phpalFelica_Sw_SetSerialNo>:

phStatus_t phpalFelica_Sw_SetSerialNo(
                                      phpalFelica_Sw_DataParams_t * pDataParams,
                                      uint8_t * pIDmPMm
                                      )
{
 80141fe:	b580      	push	{r7, lr}
 8014200:	b082      	sub	sp, #8
 8014202:	af00      	add	r7, sp, #0
 8014204:	6078      	str	r0, [r7, #4]
 8014206:	6039      	str	r1, [r7, #0]

    pDataParams->bIDmPMmValid = PHPAL_FELICA_SW_IDMPMM_VALID;
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	2201      	movs	r2, #1
 801420c:	769a      	strb	r2, [r3, #26]
    /* copy IDm and PMm */
    (void)memcpy(pDataParams->aIDmPMm, pIDmPMm, (PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH));
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	3308      	adds	r3, #8
 8014212:	2210      	movs	r2, #16
 8014214:	6839      	ldr	r1, [r7, #0]
 8014216:	4618      	mov	r0, r3
 8014218:	f00c fbbb 	bl	8020992 <memcpy>

    return PH_ERR_SUCCESS;
 801421c:	2300      	movs	r3, #0

}
 801421e:	4618      	mov	r0, r3
 8014220:	3708      	adds	r7, #8
 8014222:	46bd      	mov	sp, r7
 8014224:	bd80      	pop	{r7, pc}

08014226 <phpalFelica_Sw_SetConfig>:
phStatus_t phpalFelica_Sw_SetConfig(
                                    phpalFelica_Sw_DataParams_t* pDataParams,
                                    uint16_t wConfig,
                                    uint16_t wValue
                                    )
{
 8014226:	b480      	push	{r7}
 8014228:	b083      	sub	sp, #12
 801422a:	af00      	add	r7, sp, #0
 801422c:	6078      	str	r0, [r7, #4]
 801422e:	460b      	mov	r3, r1
 8014230:	807b      	strh	r3, [r7, #2]
 8014232:	4613      	mov	r3, r2
 8014234:	803b      	strh	r3, [r7, #0]
    switch(wConfig)
 8014236:	887b      	ldrh	r3, [r7, #2]
 8014238:	2b00      	cmp	r3, #0
 801423a:	d002      	beq.n	8014242 <phpalFelica_Sw_SetConfig+0x1c>
 801423c:	2b02      	cmp	r3, #2
 801423e:	d00c      	beq.n	801425a <phpalFelica_Sw_SetConfig+0x34>
 8014240:	e01f      	b.n	8014282 <phpalFelica_Sw_SetConfig+0x5c>
    {
    case PHPAL_FELICA_CONFIG_RC:
        if ((uint8_t)wValue > 0x02U)
 8014242:	883b      	ldrh	r3, [r7, #0]
 8014244:	b2db      	uxtb	r3, r3
 8014246:	2b02      	cmp	r3, #2
 8014248:	d902      	bls.n	8014250 <phpalFelica_Sw_SetConfig+0x2a>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_FELICA);
 801424a:	f640 0321 	movw	r3, #2081	@ 0x821
 801424e:	e01c      	b.n	801428a <phpalFelica_Sw_SetConfig+0x64>
        }
        pDataParams->bRequestCode = (uint8_t)(wValue);
 8014250:	883b      	ldrh	r3, [r7, #0]
 8014252:	b2da      	uxtb	r2, r3
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	771a      	strb	r2, [r3, #28]
        break;
 8014258:	e016      	b.n	8014288 <phpalFelica_Sw_SetConfig+0x62>

    case PHPAL_FELICA_PREAMBLE_LENGTH:
        if(!((wValue == PHPAL_FELICA_PREAMBLE_LEN_48BITS) ||
 801425a:	883b      	ldrh	r3, [r7, #0]
 801425c:	2b00      	cmp	r3, #0
 801425e:	d00b      	beq.n	8014278 <phpalFelica_Sw_SetConfig+0x52>
 8014260:	883b      	ldrh	r3, [r7, #0]
 8014262:	2b02      	cmp	r3, #2
 8014264:	d008      	beq.n	8014278 <phpalFelica_Sw_SetConfig+0x52>
            (wValue == PHPAL_FELICA_PREAMBLE_LEN_56BITS) ||
 8014266:	883b      	ldrh	r3, [r7, #0]
 8014268:	2b03      	cmp	r3, #3
 801426a:	d005      	beq.n	8014278 <phpalFelica_Sw_SetConfig+0x52>
        if(!((wValue == PHPAL_FELICA_PREAMBLE_LEN_48BITS) ||
 801426c:	883b      	ldrh	r3, [r7, #0]
 801426e:	2b04      	cmp	r3, #4
 8014270:	d002      	beq.n	8014278 <phpalFelica_Sw_SetConfig+0x52>
            (wValue == PHPAL_FELICA_PREAMBLE_LEN_64BITS) ||
            (wValue == PHPAL_FELICA_PREAMBLE_LEN_72BITS))
          )
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_FELICA);
 8014272:	f640 0321 	movw	r3, #2081	@ 0x821
 8014276:	e008      	b.n	801428a <phpalFelica_Sw_SetConfig+0x64>
        }
        pDataParams->bPreambleLen = (uint8_t)(wValue);
 8014278:	883b      	ldrh	r3, [r7, #0]
 801427a:	b2da      	uxtb	r2, r3
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	779a      	strb	r2, [r3, #30]
        break;
 8014280:	e002      	b.n	8014288 <phpalFelica_Sw_SetConfig+0x62>

    default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_FELICA);
 8014282:	f640 0323 	movw	r3, #2083	@ 0x823
 8014286:	e000      	b.n	801428a <phpalFelica_Sw_SetConfig+0x64>
    }

    return PH_ERR_SUCCESS;
 8014288:	2300      	movs	r3, #0
}
 801428a:	4618      	mov	r0, r3
 801428c:	370c      	adds	r7, #12
 801428e:	46bd      	mov	sp, r7
 8014290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014294:	4770      	bx	lr

08014296 <phpalFelica_Sw_GetConfig>:
phStatus_t phpalFelica_Sw_GetConfig(
                                    phpalFelica_Sw_DataParams_t* pDataParams,
                                    uint16_t wConfig,
                                    uint16_t * pValue
                                    )
{
 8014296:	b480      	push	{r7}
 8014298:	b085      	sub	sp, #20
 801429a:	af00      	add	r7, sp, #0
 801429c:	60f8      	str	r0, [r7, #12]
 801429e:	460b      	mov	r3, r1
 80142a0:	607a      	str	r2, [r7, #4]
 80142a2:	817b      	strh	r3, [r7, #10]
    switch(wConfig)
 80142a4:	897b      	ldrh	r3, [r7, #10]
 80142a6:	2b03      	cmp	r3, #3
 80142a8:	d012      	beq.n	80142d0 <phpalFelica_Sw_GetConfig+0x3a>
 80142aa:	2b03      	cmp	r3, #3
 80142ac:	dc26      	bgt.n	80142fc <phpalFelica_Sw_GetConfig+0x66>
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d002      	beq.n	80142b8 <phpalFelica_Sw_GetConfig+0x22>
 80142b2:	2b01      	cmp	r3, #1
 80142b4:	d006      	beq.n	80142c4 <phpalFelica_Sw_GetConfig+0x2e>
 80142b6:	e021      	b.n	80142fc <phpalFelica_Sw_GetConfig+0x66>
    {
    case PHPAL_FELICA_CONFIG_RC:
        *pValue = (uint16_t)pDataParams->bRequestCode;
 80142b8:	68fb      	ldr	r3, [r7, #12]
 80142ba:	7f1b      	ldrb	r3, [r3, #28]
 80142bc:	461a      	mov	r2, r3
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	801a      	strh	r2, [r3, #0]
        break;
 80142c2:	e01e      	b.n	8014302 <phpalFelica_Sw_GetConfig+0x6c>

    case PH_PALFELICA_CONFIG_NUM_RESPONSE_FRAMES:
        *pValue = (uint16_t)pDataParams->bTotalFrames;
 80142c4:	68fb      	ldr	r3, [r7, #12]
 80142c6:	7f5b      	ldrb	r3, [r3, #29]
 80142c8:	461a      	mov	r2, r3
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	801a      	strh	r2, [r3, #0]
        break;
 80142ce:	e018      	b.n	8014302 <phpalFelica_Sw_GetConfig+0x6c>

    case PHPAL_FELICA_RD:
        if(pDataParams->bIDmPMmValid == PHPAL_FELICA_SW_IDMPMM_VALID)
 80142d0:	68fb      	ldr	r3, [r7, #12]
 80142d2:	7e9b      	ldrb	r3, [r3, #26]
 80142d4:	2b01      	cmp	r3, #1
 80142d6:	d10d      	bne.n	80142f4 <phpalFelica_Sw_GetConfig+0x5e>
        {
            *pValue = (((uint16_t)pDataParams->aIDmPMm[PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH ] << 8U) |
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	7e1b      	ldrb	r3, [r3, #24]
 80142dc:	b21b      	sxth	r3, r3
 80142de:	021b      	lsls	r3, r3, #8
 80142e0:	b21a      	sxth	r2, r3
                       ((uint16_t)pDataParams->aIDmPMm[PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH + 1U]));
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	7e5b      	ldrb	r3, [r3, #25]
 80142e6:	b21b      	sxth	r3, r3
            *pValue = (((uint16_t)pDataParams->aIDmPMm[PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH ] << 8U) |
 80142e8:	4313      	orrs	r3, r2
 80142ea:	b21b      	sxth	r3, r3
 80142ec:	b29a      	uxth	r2, r3
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = 0;
        }
        break;
 80142f2:	e006      	b.n	8014302 <phpalFelica_Sw_GetConfig+0x6c>
            *pValue = 0;
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	2200      	movs	r2, #0
 80142f8:	801a      	strh	r2, [r3, #0]
        break;
 80142fa:	e002      	b.n	8014302 <phpalFelica_Sw_GetConfig+0x6c>

    default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_FELICA);
 80142fc:	f640 0323 	movw	r3, #2083	@ 0x823
 8014300:	e000      	b.n	8014304 <phpalFelica_Sw_GetConfig+0x6e>
    }

    return PH_ERR_SUCCESS;
 8014302:	2300      	movs	r3, #0
}
 8014304:	4618      	mov	r0, r3
 8014306:	3714      	adds	r7, #20
 8014308:	46bd      	mov	sp, r7
 801430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801430e:	4770      	bx	lr

08014310 <phpalI14443p3a_Sw_Init>:
phStatus_t phpalI14443p3a_Sw_Init(
                                  phpalI14443p3a_Sw_DataParams_t * pDataParams,
                                  uint16_t wSizeOfDataParams,
                                  void * pHalDataParams
                                  )
{
 8014310:	b480      	push	{r7}
 8014312:	b085      	sub	sp, #20
 8014314:	af00      	add	r7, sp, #0
 8014316:	60f8      	str	r0, [r7, #12]
 8014318:	460b      	mov	r3, r1
 801431a:	607a      	str	r2, [r7, #4]
 801431c:	817b      	strh	r3, [r7, #10]
    if (sizeof(phpalI14443p3a_Sw_DataParams_t) != wSizeOfDataParams)
 801431e:	897b      	ldrh	r3, [r7, #10]
 8014320:	2b18      	cmp	r3, #24
 8014322:	d002      	beq.n	801432a <phpalI14443p3a_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_ISO14443P3A);
 8014324:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8014328:	e01d      	b.n	8014366 <phpalI14443p3a_Sw_Init+0x56>
    }
    PH_ASSERT_NULL (pDataParams);
 801432a:	68fb      	ldr	r3, [r7, #12]
 801432c:	2b00      	cmp	r3, #0
 801432e:	d101      	bne.n	8014334 <phpalI14443p3a_Sw_Init+0x24>
 8014330:	2321      	movs	r3, #33	@ 0x21
 8014332:	e018      	b.n	8014366 <phpalI14443p3a_Sw_Init+0x56>
    PH_ASSERT_NULL (pHalDataParams);
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	2b00      	cmp	r3, #0
 8014338:	d101      	bne.n	801433e <phpalI14443p3a_Sw_Init+0x2e>
 801433a:	2321      	movs	r3, #33	@ 0x21
 801433c:	e013      	b.n	8014366 <phpalI14443p3a_Sw_Init+0x56>

    /* init private data */
    pDataParams->wId            = PH_COMP_PAL_ISO14443P3A | PHPAL_I14443P3A_SW_ID;
 801433e:	68fb      	ldr	r3, [r7, #12]
 8014340:	f240 3201 	movw	r2, #769	@ 0x301
 8014344:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams = pHalDataParams;
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	687a      	ldr	r2, [r7, #4]
 801434a:	605a      	str	r2, [r3, #4]
    pDataParams->bUidLength     = 0;
 801434c:	68fb      	ldr	r3, [r7, #12]
 801434e:	2200      	movs	r2, #0
 8014350:	749a      	strb	r2, [r3, #18]
    pDataParams->bUidComplete   = 0;
 8014352:	68fb      	ldr	r3, [r7, #12]
 8014354:	2200      	movs	r2, #0
 8014356:	74da      	strb	r2, [r3, #19]
    pDataParams->bOpeMode       = RD_LIB_MODE_NFC;
 8014358:	68fb      	ldr	r3, [r7, #12]
 801435a:	2202      	movs	r2, #2
 801435c:	751a      	strb	r2, [r3, #20]
    pDataParams->bPollCmd       = PHPAL_I14443P3A_USE_REQA;
 801435e:	68fb      	ldr	r3, [r7, #12]
 8014360:	2200      	movs	r2, #0
 8014362:	755a      	strb	r2, [r3, #21]
    return PH_ERR_SUCCESS;
 8014364:	2300      	movs	r3, #0
}
 8014366:	4618      	mov	r0, r3
 8014368:	3714      	adds	r7, #20
 801436a:	46bd      	mov	sp, r7
 801436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014370:	4770      	bx	lr

08014372 <phpalI14443p3a_Sw_SetConfig>:
phStatus_t phpalI14443p3a_Sw_SetConfig(
                                       phpalI14443p3a_Sw_DataParams_t * pDataParams,
                                       uint16_t wConfig,
                                       uint16_t wValue
                                     )
{
 8014372:	b580      	push	{r7, lr}
 8014374:	b084      	sub	sp, #16
 8014376:	af00      	add	r7, sp, #0
 8014378:	6078      	str	r0, [r7, #4]
 801437a:	460b      	mov	r3, r1
 801437c:	807b      	strh	r3, [r7, #2]
 801437e:	4613      	mov	r3, r2
 8014380:	803b      	strh	r3, [r7, #0]
    phStatus_t PH_MEMLOC_REM statusTmp;

    switch (wConfig)
 8014382:	887b      	ldrh	r3, [r7, #2]
 8014384:	2b03      	cmp	r3, #3
 8014386:	d010      	beq.n	80143aa <phpalI14443p3a_Sw_SetConfig+0x38>
 8014388:	2b03      	cmp	r3, #3
 801438a:	dc1c      	bgt.n	80143c6 <phpalI14443p3a_Sw_SetConfig+0x54>
 801438c:	2b01      	cmp	r3, #1
 801438e:	d002      	beq.n	8014396 <phpalI14443p3a_Sw_SetConfig+0x24>
 8014390:	2b02      	cmp	r3, #2
 8014392:	d005      	beq.n	80143a0 <phpalI14443p3a_Sw_SetConfig+0x2e>
 8014394:	e017      	b.n	80143c6 <phpalI14443p3a_Sw_SetConfig+0x54>
    {
    /* Emvco: To Define Running Mode for RdLib: Either Nfc, EMVCO, ISO */
    case PHPAL_I14443P3A_CONFIG_OPE_MODE:
    {
       pDataParams->bOpeMode = (uint8_t)wValue;
 8014396:	883b      	ldrh	r3, [r7, #0]
 8014398:	b2da      	uxtb	r2, r3
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	751a      	strb	r2, [r3, #20]
       break;
 801439e:	e016      	b.n	80143ce <phpalI14443p3a_Sw_SetConfig+0x5c>
    }

    case PHPAL_I14443P3A_CONFIG_POLL_CMD:
    {
       pDataParams->bPollCmd = (uint8_t)wValue;
 80143a0:	883b      	ldrh	r3, [r7, #0]
 80143a2:	b2da      	uxtb	r2, r3
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	755a      	strb	r2, [r3, #21]
       break;
 80143a8:	e011      	b.n	80143ce <phpalI14443p3a_Sw_SetConfig+0x5c>
    }

    case PHPAL_I14443P3A_CONFIG_TIMEOUT_VALUE_US:
    {
       PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	685b      	ldr	r3, [r3, #4]
 80143ae:	883a      	ldrh	r2, [r7, #0]
 80143b0:	210d      	movs	r1, #13
 80143b2:	4618      	mov	r0, r3
 80143b4:	f7fa f9f0 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 80143b8:	4603      	mov	r3, r0
 80143ba:	81fb      	strh	r3, [r7, #14]
 80143bc:	89fb      	ldrh	r3, [r7, #14]
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d004      	beq.n	80143cc <phpalI14443p3a_Sw_SetConfig+0x5a>
 80143c2:	89fb      	ldrh	r3, [r7, #14]
 80143c4:	e004      	b.n	80143d0 <phpalI14443p3a_Sw_SetConfig+0x5e>
                   wValue));
       break;
    }

    default:
       return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_ISO14443P3A);
 80143c6:	f240 3323 	movw	r3, #803	@ 0x323
 80143ca:	e001      	b.n	80143d0 <phpalI14443p3a_Sw_SetConfig+0x5e>
       break;
 80143cc:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 80143ce:	2300      	movs	r3, #0

}
 80143d0:	4618      	mov	r0, r3
 80143d2:	3710      	adds	r7, #16
 80143d4:	46bd      	mov	sp, r7
 80143d6:	bd80      	pop	{r7, pc}

080143d8 <phpalI14443p3a_Sw_RequestA>:

phStatus_t phpalI14443p3a_Sw_RequestA(
                                      phpalI14443p3a_Sw_DataParams_t * pDataParams,
                                      uint8_t * pAtqa
                                      )
{
 80143d8:	b580      	push	{r7, lr}
 80143da:	b082      	sub	sp, #8
 80143dc:	af00      	add	r7, sp, #0
 80143de:	6078      	str	r0, [r7, #4]
 80143e0:	6039      	str	r1, [r7, #0]
    return phpalI14443p3a_Sw_RequestAEx(pDataParams, PHPAL_I14443P3A_REQUEST_CMD, pAtqa);
 80143e2:	683a      	ldr	r2, [r7, #0]
 80143e4:	2126      	movs	r1, #38	@ 0x26
 80143e6:	6878      	ldr	r0, [r7, #4]
 80143e8:	f000 fc89 	bl	8014cfe <phpalI14443p3a_Sw_RequestAEx>
 80143ec:	4603      	mov	r3, r0
}
 80143ee:	4618      	mov	r0, r3
 80143f0:	3708      	adds	r7, #8
 80143f2:	46bd      	mov	sp, r7
 80143f4:	bd80      	pop	{r7, pc}

080143f6 <phpalI14443p3a_Sw_WakeUpA>:

phStatus_t phpalI14443p3a_Sw_WakeUpA(
                                     phpalI14443p3a_Sw_DataParams_t * pDataParams,
                                     uint8_t * pAtqa
                                     )
{
 80143f6:	b580      	push	{r7, lr}
 80143f8:	b082      	sub	sp, #8
 80143fa:	af00      	add	r7, sp, #0
 80143fc:	6078      	str	r0, [r7, #4]
 80143fe:	6039      	str	r1, [r7, #0]
    return phpalI14443p3a_Sw_RequestAEx(pDataParams, PHPAL_I14443P3A_WAKEUP_CMD, pAtqa);
 8014400:	683a      	ldr	r2, [r7, #0]
 8014402:	2152      	movs	r1, #82	@ 0x52
 8014404:	6878      	ldr	r0, [r7, #4]
 8014406:	f000 fc7a 	bl	8014cfe <phpalI14443p3a_Sw_RequestAEx>
 801440a:	4603      	mov	r3, r0
}
 801440c:	4618      	mov	r0, r3
 801440e:	3708      	adds	r7, #8
 8014410:	46bd      	mov	sp, r7
 8014412:	bd80      	pop	{r7, pc}

08014414 <phpalI14443p3a_Sw_HaltA>:

phStatus_t phpalI14443p3a_Sw_HaltA(
                                   phpalI14443p3a_Sw_DataParams_t * pDataParams
                                   )
{
 8014414:	b580      	push	{r7, lr}
 8014416:	b088      	sub	sp, #32
 8014418:	af02      	add	r7, sp, #8
 801441a:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM cmd[2];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 801441c:	2300      	movs	r3, #0
 801441e:	60fb      	str	r3, [r7, #12]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8014420:	2300      	movs	r3, #0
 8014422:	817b      	strh	r3, [r7, #10]

    /* Set halt timeout */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	685b      	ldr	r3, [r3, #4]
 8014428:	f44f 6291 	mov.w	r2, #1160	@ 0x488
 801442c:	210d      	movs	r1, #13
 801442e:	4618      	mov	r0, r3
 8014430:	f7fa f9b2 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8014434:	4603      	mov	r3, r0
 8014436:	82fb      	strh	r3, [r7, #22]
 8014438:	8afb      	ldrh	r3, [r7, #22]
 801443a:	2b00      	cmp	r3, #0
 801443c:	d001      	beq.n	8014442 <phpalI14443p3a_Sw_HaltA+0x2e>
 801443e:	8afb      	ldrh	r3, [r7, #22]
 8014440:	e03b      	b.n	80144ba <phpalI14443p3a_Sw_HaltA+0xa6>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
        PHPAL_I14443P3A_HALT_TIME_US + PHPAL_I14443P3A_EXT_TIME_US));

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXCRC, PH_ON));
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	685b      	ldr	r3, [r3, #4]
 8014446:	2201      	movs	r2, #1
 8014448:	2101      	movs	r1, #1
 801444a:	4618      	mov	r0, r3
 801444c:	f7fa f9a4 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8014450:	4603      	mov	r3, r0
 8014452:	82fb      	strh	r3, [r7, #22]
 8014454:	8afb      	ldrh	r3, [r7, #22]
 8014456:	2b00      	cmp	r3, #0
 8014458:	d001      	beq.n	801445e <phpalI14443p3a_Sw_HaltA+0x4a>
 801445a:	8afb      	ldrh	r3, [r7, #22]
 801445c:	e02d      	b.n	80144ba <phpalI14443p3a_Sw_HaltA+0xa6>
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXCRC, PH_ON));
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	685b      	ldr	r3, [r3, #4]
 8014462:	2201      	movs	r2, #1
 8014464:	2102      	movs	r1, #2
 8014466:	4618      	mov	r0, r3
 8014468:	f7fa f996 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 801446c:	4603      	mov	r3, r0
 801446e:	82fb      	strh	r3, [r7, #22]
 8014470:	8afb      	ldrh	r3, [r7, #22]
 8014472:	2b00      	cmp	r3, #0
 8014474:	d001      	beq.n	801447a <phpalI14443p3a_Sw_HaltA+0x66>
 8014476:	8afb      	ldrh	r3, [r7, #22]
 8014478:	e01f      	b.n	80144ba <phpalI14443p3a_Sw_HaltA+0xa6>

    /* Send HltA command */
    cmd[0] = PHPAL_I14443P3A_HALT_CMD;
 801447a:	2350      	movs	r3, #80	@ 0x50
 801447c:	743b      	strb	r3, [r7, #16]
    cmd[1] = 0x00;
 801447e:	2300      	movs	r3, #0
 8014480:	747b      	strb	r3, [r7, #17]

    status = phhalHw_Exchange(pDataParams->pHalDataParams, PH_EXCHANGE_DEFAULT, cmd, 2, &pResp, &wRespLength);
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	6858      	ldr	r0, [r3, #4]
 8014486:	f107 0210 	add.w	r2, r7, #16
 801448a:	f107 030a 	add.w	r3, r7, #10
 801448e:	9301      	str	r3, [sp, #4]
 8014490:	f107 030c 	add.w	r3, r7, #12
 8014494:	9300      	str	r3, [sp, #0]
 8014496:	2302      	movs	r3, #2
 8014498:	2100      	movs	r1, #0
 801449a:	f7f9 fdc7 	bl	800e02c <phhalHw_Pn5180_Exchange>
 801449e:	4603      	mov	r3, r0
 80144a0:	82bb      	strh	r3, [r7, #20]

    switch (status & PH_ERR_MASK)
 80144a2:	8abb      	ldrh	r3, [r7, #20]
 80144a4:	b2db      	uxtb	r3, r3
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d003      	beq.n	80144b2 <phpalI14443p3a_Sw_HaltA+0x9e>
 80144aa:	2b01      	cmp	r3, #1
 80144ac:	d104      	bne.n	80144b8 <phpalI14443p3a_Sw_HaltA+0xa4>
    {
        /* HltA command should timeout -> success */
    case PH_ERR_IO_TIMEOUT:
        return PH_ERR_SUCCESS;
 80144ae:	2300      	movs	r3, #0
 80144b0:	e003      	b.n	80144ba <phpalI14443p3a_Sw_HaltA+0xa6>
        /* Return protocol error */
    case PH_ERR_SUCCESS:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 80144b2:	f240 3306 	movw	r3, #774	@ 0x306
 80144b6:	e000      	b.n	80144ba <phpalI14443p3a_Sw_HaltA+0xa6>
        /* Return other errors */
    default:
        return status;
 80144b8:	8abb      	ldrh	r3, [r7, #20]
    }
}
 80144ba:	4618      	mov	r0, r3
 80144bc:	3718      	adds	r7, #24
 80144be:	46bd      	mov	sp, r7
 80144c0:	bd80      	pop	{r7, pc}

080144c2 <phpalI14443p3a_Sw_Anticollision>:
    uint8_t * pUidIn,
    uint8_t bNvbUidIn,
    uint8_t * pUidOut,
    uint8_t * pNvbUidOut
    )
{
 80144c2:	b580      	push	{r7, lr}
 80144c4:	b08e      	sub	sp, #56	@ 0x38
 80144c6:	af02      	add	r7, sp, #8
 80144c8:	60f8      	str	r0, [r7, #12]
 80144ca:	607a      	str	r2, [r7, #4]
 80144cc:	461a      	mov	r2, r3
 80144ce:	460b      	mov	r3, r1
 80144d0:	72fb      	strb	r3, [r7, #11]
 80144d2:	4613      	mov	r3, r2
 80144d4:	72bb      	strb	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bIsSelect;
    uint8_t     PH_MEMLOC_REM bCmdBuffer[10];
    uint8_t *   PH_MEMLOC_REM pRcvBuffer = NULL;
 80144d6:	2300      	movs	r3, #0
 80144d8:	617b      	str	r3, [r7, #20]
    uint16_t    PH_MEMLOC_REM wSndBytes;
    uint16_t    PH_MEMLOC_REM wRcvBytes = 0;
 80144da:	2300      	movs	r3, #0
 80144dc:	827b      	strh	r3, [r7, #18]
    uint16_t    PH_MEMLOC_REM wRcvBits = 0;
 80144de:	2300      	movs	r3, #0
 80144e0:	823b      	strh	r3, [r7, #16]
    uint8_t     PH_MEMLOC_REM bUidStartIndex;
    uint8_t     PH_MEMLOC_REM bBitCount;

    /* Check for invalid bNvbUidIn parameter */
    if ((bNvbUidIn > 0x40U) || ((bNvbUidIn & 0x0FU) > 0x07U))
 80144e2:	7abb      	ldrb	r3, [r7, #10]
 80144e4:	2b40      	cmp	r3, #64	@ 0x40
 80144e6:	d804      	bhi.n	80144f2 <phpalI14443p3a_Sw_Anticollision+0x30>
 80144e8:	7abb      	ldrb	r3, [r7, #10]
 80144ea:	f003 0308 	and.w	r3, r3, #8
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d002      	beq.n	80144f8 <phpalI14443p3a_Sw_Anticollision+0x36>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3A);
 80144f2:	f240 3321 	movw	r3, #801	@ 0x321
 80144f6:	e217      	b.n	8014928 <phpalI14443p3a_Sw_Anticollision+0x466>
    }

    /* Check for invalid bCascadeIndex parameter */
    switch (bCascadeLevel)
 80144f8:	7afb      	ldrb	r3, [r7, #11]
 80144fa:	2b97      	cmp	r3, #151	@ 0x97
 80144fc:	d00d      	beq.n	801451a <phpalI14443p3a_Sw_Anticollision+0x58>
 80144fe:	2b97      	cmp	r3, #151	@ 0x97
 8014500:	dc08      	bgt.n	8014514 <phpalI14443p3a_Sw_Anticollision+0x52>
 8014502:	2b93      	cmp	r3, #147	@ 0x93
 8014504:	d002      	beq.n	801450c <phpalI14443p3a_Sw_Anticollision+0x4a>
 8014506:	2b95      	cmp	r3, #149	@ 0x95
 8014508:	d007      	beq.n	801451a <phpalI14443p3a_Sw_Anticollision+0x58>
 801450a:	e003      	b.n	8014514 <phpalI14443p3a_Sw_Anticollision+0x52>
    {
    case PHPAL_I14443P3A_CASCADE_LEVEL_1:
        /* Reset UID length */
        pDataParams->bUidLength = 0;
 801450c:	68fb      	ldr	r3, [r7, #12]
 801450e:	2200      	movs	r2, #0
 8014510:	749a      	strb	r2, [r3, #18]
    case PHPAL_I14443P3A_CASCADE_LEVEL_2:
    case PHPAL_I14443P3A_CASCADE_LEVEL_3:
        break;
 8014512:	e002      	b.n	801451a <phpalI14443p3a_Sw_Anticollision+0x58>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3A);
 8014514:	f240 3321 	movw	r3, #801	@ 0x321
 8014518:	e206      	b.n	8014928 <phpalI14443p3a_Sw_Anticollision+0x466>
        break;
 801451a:	bf00      	nop
    }

    /* Reset UID complete flag */
    pDataParams->bUidComplete = 0;
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	2200      	movs	r2, #0
 8014520:	74da      	strb	r2, [r3, #19]

    /* ANTICOLLISION: Disable CRC */
    if (bNvbUidIn != 0x40U)
 8014522:	7abb      	ldrb	r3, [r7, #10]
 8014524:	2b40      	cmp	r3, #64	@ 0x40
 8014526:	d01e      	beq.n	8014566 <phpalI14443p3a_Sw_Anticollision+0xa4>
    {
        bIsSelect = 0;
 8014528:	2300      	movs	r3, #0
 801452a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXCRC, PH_OFF));
 801452e:	68fb      	ldr	r3, [r7, #12]
 8014530:	685b      	ldr	r3, [r3, #4]
 8014532:	2200      	movs	r2, #0
 8014534:	2101      	movs	r1, #1
 8014536:	4618      	mov	r0, r3
 8014538:	f7fa f92e 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 801453c:	4603      	mov	r3, r0
 801453e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8014540:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014542:	2b00      	cmp	r3, #0
 8014544:	d001      	beq.n	801454a <phpalI14443p3a_Sw_Anticollision+0x88>
 8014546:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014548:	e1ee      	b.n	8014928 <phpalI14443p3a_Sw_Anticollision+0x466>
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXCRC, PH_OFF));
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	685b      	ldr	r3, [r3, #4]
 801454e:	2200      	movs	r2, #0
 8014550:	2102      	movs	r1, #2
 8014552:	4618      	mov	r0, r3
 8014554:	f7fa f920 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8014558:	4603      	mov	r3, r0
 801455a:	853b      	strh	r3, [r7, #40]	@ 0x28
 801455c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801455e:	2b00      	cmp	r3, #0
 8014560:	d020      	beq.n	80145a4 <phpalI14443p3a_Sw_Anticollision+0xe2>
 8014562:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014564:	e1e0      	b.n	8014928 <phpalI14443p3a_Sw_Anticollision+0x466>
    }
    /* SELECT: Enable CRC */
    else
    {
        bIsSelect = 1;
 8014566:	2301      	movs	r3, #1
 8014568:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXCRC, PH_ON));
 801456c:	68fb      	ldr	r3, [r7, #12]
 801456e:	685b      	ldr	r3, [r3, #4]
 8014570:	2201      	movs	r2, #1
 8014572:	2101      	movs	r1, #1
 8014574:	4618      	mov	r0, r3
 8014576:	f7fa f90f 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 801457a:	4603      	mov	r3, r0
 801457c:	853b      	strh	r3, [r7, #40]	@ 0x28
 801457e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014580:	2b00      	cmp	r3, #0
 8014582:	d001      	beq.n	8014588 <phpalI14443p3a_Sw_Anticollision+0xc6>
 8014584:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014586:	e1cf      	b.n	8014928 <phpalI14443p3a_Sw_Anticollision+0x466>
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXCRC, PH_ON));
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	685b      	ldr	r3, [r3, #4]
 801458c:	2201      	movs	r2, #1
 801458e:	2102      	movs	r1, #2
 8014590:	4618      	mov	r0, r3
 8014592:	f7fa f901 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8014596:	4603      	mov	r3, r0
 8014598:	853b      	strh	r3, [r7, #40]	@ 0x28
 801459a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801459c:	2b00      	cmp	r3, #0
 801459e:	d001      	beq.n	80145a4 <phpalI14443p3a_Sw_Anticollision+0xe2>
 80145a0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80145a2:	e1c1      	b.n	8014928 <phpalI14443p3a_Sw_Anticollision+0x466>
    }

    /* Init. command buffer */
    bCmdBuffer[0] = bCascadeLevel;
 80145a4:	7afb      	ldrb	r3, [r7, #11]
 80145a6:	763b      	strb	r3, [r7, #24]
    (void)memset(&bCmdBuffer[2], 0x00, 5);
 80145a8:	f107 0318 	add.w	r3, r7, #24
 80145ac:	3302      	adds	r3, #2
 80145ae:	2205      	movs	r2, #5
 80145b0:	2100      	movs	r1, #0
 80145b2:	4618      	mov	r0, r3
 80145b4:	f00c f96e 	bl	8020894 <memset>

    /* Copy valid UID bits */
    wSndBytes = (uint16_t)(((((uint16_t)bNvbUidIn) & 0xF0U) >> 4U) + (((bNvbUidIn & 0x0FU) != 0U) ? 1U : 0U));
 80145b8:	7abb      	ldrb	r3, [r7, #10]
 80145ba:	091b      	lsrs	r3, r3, #4
 80145bc:	b2db      	uxtb	r3, r3
 80145be:	461a      	mov	r2, r3
 80145c0:	7abb      	ldrb	r3, [r7, #10]
 80145c2:	f003 030f 	and.w	r3, r3, #15
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d001      	beq.n	80145ce <phpalI14443p3a_Sw_Anticollision+0x10c>
 80145ca:	2301      	movs	r3, #1
 80145cc:	e000      	b.n	80145d0 <phpalI14443p3a_Sw_Anticollision+0x10e>
 80145ce:	2300      	movs	r3, #0
 80145d0:	4413      	add	r3, r2
 80145d2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    (void)memcpy(&bCmdBuffer[2], pUidIn, (size_t)wSndBytes);
 80145d4:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80145d6:	f107 0318 	add.w	r3, r7, #24
 80145da:	3302      	adds	r3, #2
 80145dc:	6879      	ldr	r1, [r7, #4]
 80145de:	4618      	mov	r0, r3
 80145e0:	f00c f9d7 	bl	8020992 <memcpy>
    wSndBytes += 2U;
 80145e4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80145e6:	3302      	adds	r3, #2
 80145e8:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    /* SELECT: Add BCC */
    if (0U != (bIsSelect))
 80145ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d016      	beq.n	8014620 <phpalI14443p3a_Sw_Anticollision+0x15e>
    {
        bNvbUidIn = 0x50;
 80145f2:	2350      	movs	r3, #80	@ 0x50
 80145f4:	72bb      	strb	r3, [r7, #10]
        bCmdBuffer[6] = pUidIn[0] ^ pUidIn[1] ^ pUidIn[2] ^ pUidIn[3];
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	781a      	ldrb	r2, [r3, #0]
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	3301      	adds	r3, #1
 80145fe:	781b      	ldrb	r3, [r3, #0]
 8014600:	4053      	eors	r3, r2
 8014602:	b2da      	uxtb	r2, r3
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	3302      	adds	r3, #2
 8014608:	781b      	ldrb	r3, [r3, #0]
 801460a:	4053      	eors	r3, r2
 801460c:	b2da      	uxtb	r2, r3
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	3303      	adds	r3, #3
 8014612:	781b      	ldrb	r3, [r3, #0]
 8014614:	4053      	eors	r3, r2
 8014616:	b2db      	uxtb	r3, r3
 8014618:	77bb      	strb	r3, [r7, #30]
        ++wSndBytes;
 801461a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801461c:	3301      	adds	r3, #1
 801461e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    }

    /* Encode NVB */
    bCmdBuffer[1] = bNvbUidIn + 0x20U;
 8014620:	7abb      	ldrb	r3, [r7, #10]
 8014622:	3320      	adds	r3, #32
 8014624:	b2db      	uxtb	r3, r3
 8014626:	767b      	strb	r3, [r7, #25]

    /* Adjust Rx-Align */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXALIGN, (((uint16_t)bNvbUidIn) & 0x07U)));
 8014628:	68fb      	ldr	r3, [r7, #12]
 801462a:	6858      	ldr	r0, [r3, #4]
 801462c:	7abb      	ldrb	r3, [r7, #10]
 801462e:	b29b      	uxth	r3, r3
 8014630:	f003 0307 	and.w	r3, r3, #7
 8014634:	b29b      	uxth	r3, r3
 8014636:	461a      	mov	r2, r3
 8014638:	2105      	movs	r1, #5
 801463a:	f7fa f8ad 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 801463e:	4603      	mov	r3, r0
 8014640:	853b      	strh	r3, [r7, #40]	@ 0x28
 8014642:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014644:	2b00      	cmp	r3, #0
 8014646:	d001      	beq.n	801464c <phpalI14443p3a_Sw_Anticollision+0x18a>
 8014648:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801464a:	e16d      	b.n	8014928 <phpalI14443p3a_Sw_Anticollision+0x466>

    /* Adjust TxBits */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXLASTBITS, (((uint16_t)bNvbUidIn) & 0x07U)));
 801464c:	68fb      	ldr	r3, [r7, #12]
 801464e:	6858      	ldr	r0, [r3, #4]
 8014650:	7abb      	ldrb	r3, [r7, #10]
 8014652:	b29b      	uxth	r3, r3
 8014654:	f003 0307 	and.w	r3, r3, #7
 8014658:	b29b      	uxth	r3, r3
 801465a:	461a      	mov	r2, r3
 801465c:	2103      	movs	r1, #3
 801465e:	f7fa f89b 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8014662:	4603      	mov	r3, r0
 8014664:	853b      	strh	r3, [r7, #40]	@ 0x28
 8014666:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014668:	2b00      	cmp	r3, #0
 801466a:	d001      	beq.n	8014670 <phpalI14443p3a_Sw_Anticollision+0x1ae>
 801466c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801466e:	e15b      	b.n	8014928 <phpalI14443p3a_Sw_Anticollision+0x466>

    /* Send the ANTICOLLISION command */
    status = phhalHw_Exchange(pDataParams->pHalDataParams, PH_EXCHANGE_DEFAULT, bCmdBuffer, wSndBytes, &pRcvBuffer, &wRcvBytes);
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	6858      	ldr	r0, [r3, #4]
 8014674:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8014676:	f107 0218 	add.w	r2, r7, #24
 801467a:	f107 0312 	add.w	r3, r7, #18
 801467e:	9301      	str	r3, [sp, #4]
 8014680:	f107 0314 	add.w	r3, r7, #20
 8014684:	9300      	str	r3, [sp, #0]
 8014686:	460b      	mov	r3, r1
 8014688:	2100      	movs	r1, #0
 801468a:	f7f9 fccf 	bl	800e02c <phhalHw_Pn5180_Exchange>
 801468e:	4603      	mov	r3, r0
 8014690:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /* Reset RxAlignment */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXALIGN, 0));
 8014692:	68fb      	ldr	r3, [r7, #12]
 8014694:	685b      	ldr	r3, [r3, #4]
 8014696:	2200      	movs	r2, #0
 8014698:	2105      	movs	r1, #5
 801469a:	4618      	mov	r0, r3
 801469c:	f7fa f87c 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 80146a0:	4603      	mov	r3, r0
 80146a2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80146a4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d001      	beq.n	80146ae <phpalI14443p3a_Sw_Anticollision+0x1ec>
 80146aa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80146ac:	e13c      	b.n	8014928 <phpalI14443p3a_Sw_Anticollision+0x466>

    /* Check status, Collision is allowed for anti-collision command. */
    if ((bIsSelect == 0U) && ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR))
 80146ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d112      	bne.n	80146dc <phpalI14443p3a_Sw_Anticollision+0x21a>
 80146b6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80146b8:	b2db      	uxtb	r3, r3
 80146ba:	2b03      	cmp	r3, #3
 80146bc:	d10e      	bne.n	80146dc <phpalI14443p3a_Sw_Anticollision+0x21a>
    {
        /* Retrieve number of valid bits of last byte */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXLASTBITS, &wRcvBits));
 80146be:	68fb      	ldr	r3, [r7, #12]
 80146c0:	685b      	ldr	r3, [r3, #4]
 80146c2:	f107 0210 	add.w	r2, r7, #16
 80146c6:	2104      	movs	r1, #4
 80146c8:	4618      	mov	r0, r3
 80146ca:	f7fb fcb3 	bl	8010034 <phhalHw_Pn5180_GetConfig>
 80146ce:	4603      	mov	r3, r0
 80146d0:	853b      	strh	r3, [r7, #40]	@ 0x28
 80146d2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d00f      	beq.n	80146f8 <phpalI14443p3a_Sw_Anticollision+0x236>
 80146d8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80146da:	e125      	b.n	8014928 <phpalI14443p3a_Sw_Anticollision+0x466>
    }
    else
    {
        /* Check for protocol error */
        if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS_INCOMPLETE_BYTE)
 80146dc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80146de:	b2db      	uxtb	r3, r3
 80146e0:	2b73      	cmp	r3, #115	@ 0x73
 80146e2:	d102      	bne.n	80146ea <phpalI14443p3a_Sw_Anticollision+0x228>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 80146e4:	f240 3306 	movw	r3, #774	@ 0x306
 80146e8:	e11e      	b.n	8014928 <phpalI14443p3a_Sw_Anticollision+0x466>
        }
        /* Return on other errors */
        else
        {
            PH_CHECK_SUCCESS(status);
 80146ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d001      	beq.n	80146f4 <phpalI14443p3a_Sw_Anticollision+0x232>
 80146f0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80146f2:	e119      	b.n	8014928 <phpalI14443p3a_Sw_Anticollision+0x466>
        }

        /* whole byte valid */
        wRcvBits = 0;
 80146f4:	2300      	movs	r3, #0
 80146f6:	823b      	strh	r3, [r7, #16]
    }

    /* Add received data to UID */
    if (bIsSelect == 0U)
 80146f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	f040 80ae 	bne.w	801485e <phpalI14443p3a_Sw_Anticollision+0x39c>
    {
        /* Retrieve byte-starting-index of received Uid */
        bUidStartIndex = (uint8_t)((bNvbUidIn & 0xF0U) >> 4U);
 8014702:	7abb      	ldrb	r3, [r7, #10]
 8014704:	091b      	lsrs	r3, r3, #4
 8014706:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

        /* Add new bitcount */
        bBitCount = (uint8_t)(((((uint16_t)bNvbUidIn) >> 4U) << 3U) + (wRcvBytes << 3U) + wRcvBits);
 801470a:	7abb      	ldrb	r3, [r7, #10]
 801470c:	091b      	lsrs	r3, r3, #4
 801470e:	b2da      	uxtb	r2, r3
 8014710:	8a7b      	ldrh	r3, [r7, #18]
 8014712:	b2db      	uxtb	r3, r3
 8014714:	4413      	add	r3, r2
 8014716:	b2db      	uxtb	r3, r3
 8014718:	00db      	lsls	r3, r3, #3
 801471a:	b2da      	uxtb	r2, r3
 801471c:	8a3b      	ldrh	r3, [r7, #16]
 801471e:	b2db      	uxtb	r3, r3
 8014720:	4413      	add	r3, r2
 8014722:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* Last incomplete byte is added to wRcvBytes, so remove that again */
        if (wRcvBits > 0U)
 8014726:	8a3b      	ldrh	r3, [r7, #16]
 8014728:	2b00      	cmp	r3, #0
 801472a:	d004      	beq.n	8014736 <phpalI14443p3a_Sw_Anticollision+0x274>
        {
            bBitCount -= 8U;
 801472c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8014730:	3b08      	subs	r3, #8
 8014732:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        }

        /* Convert bitcount to NVB format */
        *pNvbUidOut = (uint8_t)(((bBitCount >> 3U) << 4U) + (bBitCount & 0x07U));
 8014736:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801473a:	08db      	lsrs	r3, r3, #3
 801473c:	b2db      	uxtb	r3, r3
 801473e:	011b      	lsls	r3, r3, #4
 8014740:	b2da      	uxtb	r2, r3
 8014742:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8014746:	f003 0307 	and.w	r3, r3, #7
 801474a:	b2db      	uxtb	r3, r3
 801474c:	4413      	add	r3, r2
 801474e:	b2da      	uxtb	r2, r3
 8014750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014752:	701a      	strb	r2, [r3, #0]

        /* We do not tolerate more than (5u * 8 =)40 bits because it would lead to buffer overflows */
        if (*pNvbUidOut > 0x50U)
 8014754:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014756:	781b      	ldrb	r3, [r3, #0]
 8014758:	2b50      	cmp	r3, #80	@ 0x50
 801475a:	d902      	bls.n	8014762 <phpalI14443p3a_Sw_Anticollision+0x2a0>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 801475c:	f240 3306 	movw	r3, #774	@ 0x306
 8014760:	e0e2      	b.n	8014928 <phpalI14443p3a_Sw_Anticollision+0x466>
        }

        /* After successfull reception, the UID must be exact 40 bits */
        if (((status & PH_ERR_MASK) == PH_ERR_SUCCESS) && (*pNvbUidOut != 0x50U))
 8014762:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8014764:	b2db      	uxtb	r3, r3
 8014766:	2b00      	cmp	r3, #0
 8014768:	d106      	bne.n	8014778 <phpalI14443p3a_Sw_Anticollision+0x2b6>
 801476a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801476c:	781b      	ldrb	r3, [r3, #0]
 801476e:	2b50      	cmp	r3, #80	@ 0x50
 8014770:	d002      	beq.n	8014778 <phpalI14443p3a_Sw_Anticollision+0x2b6>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 8014772:	f240 3306 	movw	r3, #774	@ 0x306
 8014776:	e0d7      	b.n	8014928 <phpalI14443p3a_Sw_Anticollision+0x466>
        }

        /* Copy received bytes to uid */
        if (wRcvBytes > 0U)
 8014778:	8a7b      	ldrh	r3, [r7, #18]
 801477a:	2b00      	cmp	r3, #0
 801477c:	d041      	beq.n	8014802 <phpalI14443p3a_Sw_Anticollision+0x340>
        {
            /* Incomplete byte sent: Merge Rx-Aligned first byte */
            if (0U != (bNvbUidIn & 0x07U))
 801477e:	7abb      	ldrb	r3, [r7, #10]
 8014780:	f003 0307 	and.w	r3, r3, #7
 8014784:	2b00      	cmp	r3, #0
 8014786:	d026      	beq.n	80147d6 <phpalI14443p3a_Sw_Anticollision+0x314>
            {
                bCmdBuffer[2U + bUidStartIndex] = (bCmdBuffer[2U + bUidStartIndex] & (uint8_t)((1U << (bNvbUidIn & 0x07U)) - 1U)) |
 8014788:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 801478c:	3302      	adds	r3, #2
 801478e:	3330      	adds	r3, #48	@ 0x30
 8014790:	443b      	add	r3, r7
 8014792:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8014796:	7abb      	ldrb	r3, [r7, #10]
 8014798:	f003 0307 	and.w	r3, r3, #7
 801479c:	2101      	movs	r1, #1
 801479e:	fa01 f303 	lsl.w	r3, r1, r3
 80147a2:	b2db      	uxtb	r3, r3
 80147a4:	3b01      	subs	r3, #1
 80147a6:	b2db      	uxtb	r3, r3
 80147a8:	4013      	ands	r3, r2
 80147aa:	b2d9      	uxtb	r1, r3
                                                 (pRcvBuffer[0] & (uint8_t)(0xFFU << (bNvbUidIn & 0x07U)));
 80147ac:	697b      	ldr	r3, [r7, #20]
 80147ae:	781a      	ldrb	r2, [r3, #0]
 80147b0:	7abb      	ldrb	r3, [r7, #10]
 80147b2:	f003 0307 	and.w	r3, r3, #7
 80147b6:	20ff      	movs	r0, #255	@ 0xff
 80147b8:	fa00 f303 	lsl.w	r3, r0, r3
 80147bc:	b2db      	uxtb	r3, r3
                bCmdBuffer[2U + bUidStartIndex] = (bCmdBuffer[2U + bUidStartIndex] & (uint8_t)((1U << (bNvbUidIn & 0x07U)) - 1U)) |
 80147be:	4013      	ands	r3, r2
 80147c0:	b2da      	uxtb	r2, r3
 80147c2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80147c6:	3302      	adds	r3, #2
 80147c8:	430a      	orrs	r2, r1
 80147ca:	b2d2      	uxtb	r2, r2
 80147cc:	3330      	adds	r3, #48	@ 0x30
 80147ce:	443b      	add	r3, r7
 80147d0:	f803 2c18 	strb.w	r2, [r3, #-24]
 80147d4:	e008      	b.n	80147e8 <phpalI14443p3a_Sw_Anticollision+0x326>
            }
            /* Else just copy the first byte */
            else
            {
                bCmdBuffer[2U + bUidStartIndex] = pRcvBuffer[0];
 80147d6:	697a      	ldr	r2, [r7, #20]
 80147d8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80147dc:	3302      	adds	r3, #2
 80147de:	7812      	ldrb	r2, [r2, #0]
 80147e0:	3330      	adds	r3, #48	@ 0x30
 80147e2:	443b      	add	r3, r7
 80147e4:	f803 2c18 	strb.w	r2, [r3, #-24]
            }

            /* Add the rest of the uid bytes */
            (void)memcpy(&bCmdBuffer[2U + bUidStartIndex + 1U], &pRcvBuffer[1], (size_t)(((uint32_t)wRcvBytes) - 1u));
 80147e8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80147ec:	3303      	adds	r3, #3
 80147ee:	f107 0218 	add.w	r2, r7, #24
 80147f2:	18d0      	adds	r0, r2, r3
 80147f4:	697b      	ldr	r3, [r7, #20]
 80147f6:	3301      	adds	r3, #1
 80147f8:	8a7a      	ldrh	r2, [r7, #18]
 80147fa:	3a01      	subs	r2, #1
 80147fc:	4619      	mov	r1, r3
 80147fe:	f00c f8c8 	bl	8020992 <memcpy>
        }

        /* Anticollision finished */
        if (*pNvbUidOut > 0x40U)
 8014802:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014804:	781b      	ldrb	r3, [r3, #0]
 8014806:	2b40      	cmp	r3, #64	@ 0x40
 8014808:	d91d      	bls.n	8014846 <phpalI14443p3a_Sw_Anticollision+0x384>
        {
            /* Collision in BCC byte can never happen */
            if (*pNvbUidOut < 0x50U)
 801480a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801480c:	781b      	ldrb	r3, [r3, #0]
 801480e:	2b4f      	cmp	r3, #79	@ 0x4f
 8014810:	d802      	bhi.n	8014818 <phpalI14443p3a_Sw_Anticollision+0x356>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_FRAMING_ERROR, PH_COMP_PAL_ISO14443P3A);
 8014812:	f240 3305 	movw	r3, #773	@ 0x305
 8014816:	e087      	b.n	8014928 <phpalI14443p3a_Sw_Anticollision+0x466>
            }

            /* Remove BCC from NvbUidOut */
            *pNvbUidOut = 0x40;
 8014818:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801481a:	2240      	movs	r2, #64	@ 0x40
 801481c:	701a      	strb	r2, [r3, #0]
            --wRcvBytes;
 801481e:	8a7b      	ldrh	r3, [r7, #18]
 8014820:	3b01      	subs	r3, #1
 8014822:	b29b      	uxth	r3, r3
 8014824:	827b      	strh	r3, [r7, #18]

            /* BCC Check */
            if ((bCmdBuffer[2] ^ bCmdBuffer[3] ^ bCmdBuffer[4] ^ bCmdBuffer[5]) != bCmdBuffer[6])
 8014826:	7eba      	ldrb	r2, [r7, #26]
 8014828:	7efb      	ldrb	r3, [r7, #27]
 801482a:	4053      	eors	r3, r2
 801482c:	b2da      	uxtb	r2, r3
 801482e:	7f3b      	ldrb	r3, [r7, #28]
 8014830:	4053      	eors	r3, r2
 8014832:	b2da      	uxtb	r2, r3
 8014834:	7f7b      	ldrb	r3, [r7, #29]
 8014836:	4053      	eors	r3, r2
 8014838:	b2da      	uxtb	r2, r3
 801483a:	7fbb      	ldrb	r3, [r7, #30]
 801483c:	429a      	cmp	r2, r3
 801483e:	d002      	beq.n	8014846 <phpalI14443p3a_Sw_Anticollision+0x384>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_FRAMING_ERROR, PH_COMP_PAL_ISO14443P3A);
 8014840:	f240 3305 	movw	r3, #773	@ 0x305
 8014844:	e070      	b.n	8014928 <phpalI14443p3a_Sw_Anticollision+0x466>
            }
        }

        /* Copy UID */
        (void)memcpy(pUidOut, &bCmdBuffer[2], (size_t)(bUidStartIndex + ((uint32_t)wRcvBytes)));
 8014846:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 801484a:	8a7a      	ldrh	r2, [r7, #18]
 801484c:	441a      	add	r2, r3
 801484e:	f107 0318 	add.w	r3, r7, #24
 8014852:	3302      	adds	r3, #2
 8014854:	4619      	mov	r1, r3
 8014856:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8014858:	f00c f89b 	bl	8020992 <memcpy>
 801485c:	e054      	b.n	8014908 <phpalI14443p3a_Sw_Anticollision+0x446>
    }
    /* Return SAK instead of the UID */
    else
    {
        /* only one byte allowed */
        if (wRcvBytes != 1U)
 801485e:	8a7b      	ldrh	r3, [r7, #18]
 8014860:	2b01      	cmp	r3, #1
 8014862:	d002      	beq.n	801486a <phpalI14443p3a_Sw_Anticollision+0x3a8>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 8014864:	f240 3306 	movw	r3, #774	@ 0x306
 8014868:	e05e      	b.n	8014928 <phpalI14443p3a_Sw_Anticollision+0x466>
        }

        /* Cascade Bit is set */
        if (0U != (pRcvBuffer[0] & 0x04U))
 801486a:	697b      	ldr	r3, [r7, #20]
 801486c:	781b      	ldrb	r3, [r3, #0]
 801486e:	f003 0304 	and.w	r3, r3, #4
 8014872:	2b00      	cmp	r3, #0
 8014874:	d01e      	beq.n	80148b4 <phpalI14443p3a_Sw_Anticollision+0x3f2>
        {
            /* If additional cascade levels are impossible -> protocol error */
            if (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_3)
 8014876:	7afb      	ldrb	r3, [r7, #11]
 8014878:	2b97      	cmp	r3, #151	@ 0x97
 801487a:	d102      	bne.n	8014882 <phpalI14443p3a_Sw_Anticollision+0x3c0>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 801487c:	f240 3306 	movw	r3, #774	@ 0x306
 8014880:	e052      	b.n	8014928 <phpalI14443p3a_Sw_Anticollision+0x466>
            }

            /* Cascade tag does not match -> protocol error */
            if (pUidIn[0] != PHPAL_I14443P3A_CASCADE_TAG)
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	781b      	ldrb	r3, [r3, #0]
 8014886:	2b88      	cmp	r3, #136	@ 0x88
 8014888:	d002      	beq.n	8014890 <phpalI14443p3a_Sw_Anticollision+0x3ce>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 801488a:	f240 3306 	movw	r3, #774	@ 0x306
 801488e:	e04b      	b.n	8014928 <phpalI14443p3a_Sw_Anticollision+0x466>
            }

            /* Ignore Cascade Tag */
            (void)memcpy(&pDataParams->abUid[pDataParams->bUidLength], &pUidIn[1], 3);
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	7c9b      	ldrb	r3, [r3, #18]
 8014894:	3308      	adds	r3, #8
 8014896:	68fa      	ldr	r2, [r7, #12]
 8014898:	18d0      	adds	r0, r2, r3
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	3301      	adds	r3, #1
 801489e:	2203      	movs	r2, #3
 80148a0:	4619      	mov	r1, r3
 80148a2:	f00c f876 	bl	8020992 <memcpy>

            /* Increment Uid length */
            pDataParams->bUidLength += 3U;
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	7c9b      	ldrb	r3, [r3, #18]
 80148aa:	3303      	adds	r3, #3
 80148ac:	b2da      	uxtb	r2, r3
 80148ae:	68fb      	ldr	r3, [r7, #12]
 80148b0:	749a      	strb	r2, [r3, #18]
 80148b2:	e025      	b.n	8014900 <phpalI14443p3a_Sw_Anticollision+0x43e>
        }
        /* Cascade Bit is cleared -> no further cascade levels */
        else
        {
            /* Cascade tag does not match -> protocol error */
            if (pUidIn[0] == PHPAL_I14443P3A_CASCADE_TAG)
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	781b      	ldrb	r3, [r3, #0]
 80148b8:	2b88      	cmp	r3, #136	@ 0x88
 80148ba:	d102      	bne.n	80148c2 <phpalI14443p3a_Sw_Anticollision+0x400>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 80148bc:	f240 3306 	movw	r3, #774	@ 0x306
 80148c0:	e032      	b.n	8014928 <phpalI14443p3a_Sw_Anticollision+0x466>
            }

            /* Copy all uid bytes except BCC */
            (void)memcpy(&pDataParams->abUid[pDataParams->bUidLength], &pUidIn[0], 4);
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	7c9b      	ldrb	r3, [r3, #18]
 80148c6:	3308      	adds	r3, #8
 80148c8:	68fa      	ldr	r2, [r7, #12]
 80148ca:	4413      	add	r3, r2
 80148cc:	687a      	ldr	r2, [r7, #4]
 80148ce:	6812      	ldr	r2, [r2, #0]
 80148d0:	601a      	str	r2, [r3, #0]

            /* Increment Uid length */
            pDataParams->bUidLength += 4U;
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	7c9b      	ldrb	r3, [r3, #18]
 80148d6:	3304      	adds	r3, #4
 80148d8:	b2da      	uxtb	r2, r3
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	749a      	strb	r2, [r3, #18]

            /* Set UID complete flag */
            pDataParams->bUidComplete = 1;
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	2201      	movs	r2, #1
 80148e2:	74da      	strb	r2, [r3, #19]

            /* set default card timeout */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80148e4:	68fb      	ldr	r3, [r7, #12]
 80148e6:	685b      	ldr	r3, [r3, #4]
 80148e8:	220a      	movs	r2, #10
 80148ea:	210e      	movs	r1, #14
 80148ec:	4618      	mov	r0, r3
 80148ee:	f7f9 ff53 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 80148f2:	4603      	mov	r3, r0
 80148f4:	853b      	strh	r3, [r7, #40]	@ 0x28
 80148f6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d001      	beq.n	8014900 <phpalI14443p3a_Sw_Anticollision+0x43e>
 80148fc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80148fe:	e013      	b.n	8014928 <phpalI14443p3a_Sw_Anticollision+0x466>
                PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
                PHPAL_I14443P3A_TIMEOUT_DEFAULT_MS));
        }

        /* Copy SAK */
        pUidOut[0] = pRcvBuffer[0];
 8014900:	697b      	ldr	r3, [r7, #20]
 8014902:	781a      	ldrb	r2, [r3, #0]
 8014904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014906:	701a      	strb	r2, [r3, #0]
    }

    return PH_ADD_COMPCODE(status, PH_COMP_PAL_ISO14443P3A);
 8014908:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801490a:	2b00      	cmp	r3, #0
 801490c:	d00b      	beq.n	8014926 <phpalI14443p3a_Sw_Anticollision+0x464>
 801490e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8014910:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014914:	2b00      	cmp	r3, #0
 8014916:	d106      	bne.n	8014926 <phpalI14443p3a_Sw_Anticollision+0x464>
 8014918:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801491a:	b2db      	uxtb	r3, r3
 801491c:	b29b      	uxth	r3, r3
 801491e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8014922:	b29b      	uxth	r3, r3
 8014924:	e000      	b.n	8014928 <phpalI14443p3a_Sw_Anticollision+0x466>
 8014926:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 8014928:	4618      	mov	r0, r3
 801492a:	3730      	adds	r7, #48	@ 0x30
 801492c:	46bd      	mov	sp, r7
 801492e:	bd80      	pop	{r7, pc}

08014930 <phpalI14443p3a_Sw_Select>:
                                    phpalI14443p3a_Sw_DataParams_t * pDataParams,
                                    uint8_t bCascadeLevel,
                                    uint8_t * pUidIn,
                                    uint8_t * pSak
                                    )
{
 8014930:	b580      	push	{r7, lr}
 8014932:	b088      	sub	sp, #32
 8014934:	af02      	add	r7, sp, #8
 8014936:	60f8      	str	r0, [r7, #12]
 8014938:	607a      	str	r2, [r7, #4]
 801493a:	603b      	str	r3, [r7, #0]
 801493c:	460b      	mov	r3, r1
 801493e:	72fb      	strb	r3, [r7, #11]
    uint8_t PH_MEMLOC_REM bDummy;
    return phpalI14443p3a_Sw_Anticollision(pDataParams, bCascadeLevel, pUidIn, 0x40, pSak, &bDummy);
 8014940:	7af9      	ldrb	r1, [r7, #11]
 8014942:	f107 0317 	add.w	r3, r7, #23
 8014946:	9301      	str	r3, [sp, #4]
 8014948:	683b      	ldr	r3, [r7, #0]
 801494a:	9300      	str	r3, [sp, #0]
 801494c:	2340      	movs	r3, #64	@ 0x40
 801494e:	687a      	ldr	r2, [r7, #4]
 8014950:	68f8      	ldr	r0, [r7, #12]
 8014952:	f7ff fdb6 	bl	80144c2 <phpalI14443p3a_Sw_Anticollision>
 8014956:	4603      	mov	r3, r0
}
 8014958:	4618      	mov	r0, r3
 801495a:	3718      	adds	r7, #24
 801495c:	46bd      	mov	sp, r7
 801495e:	bd80      	pop	{r7, pc}

08014960 <phpalI14443p3a_Sw_ActivateCard>:
    uint8_t * pUidOut,
    uint8_t * pLenUidOut,
    uint8_t * pSak,
    uint8_t * pMoreCardsAvailable
    )
{
 8014960:	b580      	push	{r7, lr}
 8014962:	b08a      	sub	sp, #40	@ 0x28
 8014964:	af02      	add	r7, sp, #8
 8014966:	60f8      	str	r0, [r7, #12]
 8014968:	60b9      	str	r1, [r7, #8]
 801496a:	603b      	str	r3, [r7, #0]
 801496c:	4613      	mov	r3, r2
 801496e:	71fb      	strb	r3, [r7, #7]
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 8014970:	2300      	movs	r3, #0
 8014972:	83fb      	strh	r3, [r7, #30]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bCascadeLevel;
    uint8_t     PH_MEMLOC_COUNT bCascadeIndex;
    uint8_t     PH_MEMLOC_REM bUidIndex;
    uint8_t     PH_MEMLOC_REM bNvbUid;
    uint8_t     PH_MEMLOC_REM bAtqa[2] = {0};
 8014974:	2300      	movs	r3, #0
 8014976:	82bb      	strh	r3, [r7, #20]
    uint8_t     PH_MEMLOC_REM bUid[4];
    uint8_t     PH_MEMLOC_COUNT bRetryCount;
    uint8_t     PH_MEMLOC_REM bCollDetected = PH_OFF;
 8014978:	2300      	movs	r3, #0
 801497a:	75fb      	strb	r3, [r7, #23]

    bRetryCount = 0;
 801497c:	2300      	movs	r3, #0
 801497e:	763b      	strb	r3, [r7, #24]

    /* Parameter check */
    if ((bLenUidIn != 0U) &&
 8014980:	79fb      	ldrb	r3, [r7, #7]
 8014982:	2b00      	cmp	r3, #0
 8014984:	d00f      	beq.n	80149a6 <phpalI14443p3a_Sw_ActivateCard+0x46>
 8014986:	79fb      	ldrb	r3, [r7, #7]
 8014988:	2b04      	cmp	r3, #4
 801498a:	d00c      	beq.n	80149a6 <phpalI14443p3a_Sw_ActivateCard+0x46>
        (bLenUidIn != 4U) &&
 801498c:	79fb      	ldrb	r3, [r7, #7]
 801498e:	2b07      	cmp	r3, #7
 8014990:	d009      	beq.n	80149a6 <phpalI14443p3a_Sw_ActivateCard+0x46>
        (bLenUidIn != 7U) &&
 8014992:	79fb      	ldrb	r3, [r7, #7]
 8014994:	2b0a      	cmp	r3, #10
 8014996:	d006      	beq.n	80149a6 <phpalI14443p3a_Sw_ActivateCard+0x46>
        (bLenUidIn != 10U)&&
        (pDataParams->bPollCmd != PHPAL_I14443P3A_USE_WUPA))
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	7d5b      	ldrb	r3, [r3, #21]
        (bLenUidIn != 10U)&&
 801499c:	2b01      	cmp	r3, #1
 801499e:	d002      	beq.n	80149a6 <phpalI14443p3a_Sw_ActivateCard+0x46>
    {
        /* Given UID length is invalid, return error */
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3A);
 80149a0:	f240 3321 	movw	r3, #801	@ 0x321
 80149a4:	e18c      	b.n	8014cc0 <phpalI14443p3a_Sw_ActivateCard+0x360>
    }
    /* initialise to zero, for VS studio warning */
    bCascadeLevel = 0;
 80149a6:	2300      	movs	r3, #0
 80149a8:	76fb      	strb	r3, [r7, #27]
    /* Clear Uid */
    (void)memset(bUid, 0x00, 4);
 80149aa:	f107 0310 	add.w	r3, r7, #16
 80149ae:	2204      	movs	r2, #4
 80149b0:	2100      	movs	r1, #0
 80149b2:	4618      	mov	r0, r3
 80149b4:	f00b ff6e 	bl	8020894 <memset>

    /* Clear Uid lengths */
    bUidIndex = 0;
 80149b8:	2300      	movs	r3, #0
 80149ba:	767b      	strb	r3, [r7, #25]
    *pLenUidOut = 0;
 80149bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149be:	2200      	movs	r2, #0
 80149c0:	701a      	strb	r2, [r3, #0]

    /* Clear the more cards available flag */
    *pMoreCardsAvailable = PH_OFF;
 80149c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149c4:	2200      	movs	r2, #0
 80149c6:	701a      	strb	r2, [r3, #0]

    if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	7d1b      	ldrb	r3, [r3, #20]
 80149cc:	2b01      	cmp	r3, #1
 80149ce:	d12a      	bne.n	8014a26 <phpalI14443p3a_Sw_ActivateCard+0xc6>
    {
        status = phpalI14443p3a_Sw_WakeUpA(pDataParams, bAtqa);
 80149d0:	f107 0314 	add.w	r3, r7, #20
 80149d4:	4619      	mov	r1, r3
 80149d6:	68f8      	ldr	r0, [r7, #12]
 80149d8:	f7ff fd0d 	bl	80143f6 <phpalI14443p3a_Sw_WakeUpA>
 80149dc:	4603      	mov	r3, r0
 80149de:	83fb      	strh	r3, [r7, #30]
        /* As per EMVCo 2.6 req 9.6.1.3, wait for at least Tmin retransmission in case of timeout error. */
        while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 80149e0:	e019      	b.n	8014a16 <phpalI14443p3a_Sw_ActivateCard+0xb6>
        {
            bRetryCount++;
 80149e2:	7e3b      	ldrb	r3, [r7, #24]
 80149e4:	3301      	adds	r3, #1
 80149e6:	763b      	strb	r3, [r7, #24]
            /* Wait for at least Tmin retransmission delay. */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 80149e8:	68fb      	ldr	r3, [r7, #12]
 80149ea:	685b      	ldr	r3, [r3, #4]
 80149ec:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80149f0:	2100      	movs	r1, #0
 80149f2:	4618      	mov	r0, r3
 80149f4:	f7f9 fe16 	bl	800e624 <phhalHw_Pn5180_Wait>
 80149f8:	4603      	mov	r3, r0
 80149fa:	83fb      	strh	r3, [r7, #30]
 80149fc:	8bfb      	ldrh	r3, [r7, #30]
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d001      	beq.n	8014a06 <phpalI14443p3a_Sw_ActivateCard+0xa6>
 8014a02:	8bfb      	ldrh	r3, [r7, #30]
 8014a04:	e15c      	b.n	8014cc0 <phpalI14443p3a_Sw_ActivateCard+0x360>
                pDataParams->pHalDataParams,
                PHHAL_HW_TIME_MICROSECONDS,
                PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

            status = phpalI14443p3a_Sw_WakeUpA(pDataParams, bAtqa);
 8014a06:	f107 0314 	add.w	r3, r7, #20
 8014a0a:	4619      	mov	r1, r3
 8014a0c:	68f8      	ldr	r0, [r7, #12]
 8014a0e:	f7ff fcf2 	bl	80143f6 <phpalI14443p3a_Sw_WakeUpA>
 8014a12:	4603      	mov	r3, r0
 8014a14:	83fb      	strh	r3, [r7, #30]
        while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 8014a16:	8bfb      	ldrh	r3, [r7, #30]
 8014a18:	b2db      	uxtb	r3, r3
 8014a1a:	2b01      	cmp	r3, #1
 8014a1c:	d128      	bne.n	8014a70 <phpalI14443p3a_Sw_ActivateCard+0x110>
 8014a1e:	7e3b      	ldrb	r3, [r7, #24]
 8014a20:	2b01      	cmp	r3, #1
 8014a22:	d9de      	bls.n	80149e2 <phpalI14443p3a_Sw_ActivateCard+0x82>
 8014a24:	e024      	b.n	8014a70 <phpalI14443p3a_Sw_ActivateCard+0x110>
        }
    }
    else
    {
        if( (pDataParams->bOpeMode == RD_LIB_MODE_ISO) && (pDataParams->bPollCmd == PHPAL_I14443P3A_USE_WUPA))
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	7d1b      	ldrb	r3, [r3, #20]
 8014a2a:	2b03      	cmp	r3, #3
 8014a2c:	d10c      	bne.n	8014a48 <phpalI14443p3a_Sw_ActivateCard+0xe8>
 8014a2e:	68fb      	ldr	r3, [r7, #12]
 8014a30:	7d5b      	ldrb	r3, [r3, #21]
 8014a32:	2b01      	cmp	r3, #1
 8014a34:	d108      	bne.n	8014a48 <phpalI14443p3a_Sw_ActivateCard+0xe8>
        {
            status = phpalI14443p3a_Sw_WakeUpA(pDataParams, bAtqa);
 8014a36:	f107 0314 	add.w	r3, r7, #20
 8014a3a:	4619      	mov	r1, r3
 8014a3c:	68f8      	ldr	r0, [r7, #12]
 8014a3e:	f7ff fcda 	bl	80143f6 <phpalI14443p3a_Sw_WakeUpA>
 8014a42:	4603      	mov	r3, r0
 8014a44:	83fb      	strh	r3, [r7, #30]
 8014a46:	e013      	b.n	8014a70 <phpalI14443p3a_Sw_ActivateCard+0x110>
        }
        else
        {
            if (bLenUidIn == 0U)
 8014a48:	79fb      	ldrb	r3, [r7, #7]
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d108      	bne.n	8014a60 <phpalI14443p3a_Sw_ActivateCard+0x100>
            {
                status = phpalI14443p3a_Sw_RequestA(pDataParams, bAtqa);
 8014a4e:	f107 0314 	add.w	r3, r7, #20
 8014a52:	4619      	mov	r1, r3
 8014a54:	68f8      	ldr	r0, [r7, #12]
 8014a56:	f7ff fcbf 	bl	80143d8 <phpalI14443p3a_Sw_RequestA>
 8014a5a:	4603      	mov	r3, r0
 8014a5c:	83fb      	strh	r3, [r7, #30]
 8014a5e:	e007      	b.n	8014a70 <phpalI14443p3a_Sw_ActivateCard+0x110>
            }
            /* UidIn is given -> WupA */
            else
            {
                status = phpalI14443p3a_Sw_WakeUpA(pDataParams, bAtqa);
 8014a60:	f107 0314 	add.w	r3, r7, #20
 8014a64:	4619      	mov	r1, r3
 8014a66:	68f8      	ldr	r0, [r7, #12]
 8014a68:	f7ff fcc5 	bl	80143f6 <phpalI14443p3a_Sw_WakeUpA>
 8014a6c:	4603      	mov	r3, r0
 8014a6e:	83fb      	strh	r3, [r7, #30]
            }
        }
    }

    /* Collision error may happen */
    if ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 8014a70:	8bfb      	ldrh	r3, [r7, #30]
 8014a72:	b2db      	uxtb	r3, r3
 8014a74:	2b03      	cmp	r3, #3
 8014a76:	d10b      	bne.n	8014a90 <phpalI14443p3a_Sw_ActivateCard+0x130>
    {
        /* Emvco: case_id TA304_XY */
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8014a78:	68fb      	ldr	r3, [r7, #12]
 8014a7a:	7d1b      	ldrb	r3, [r3, #20]
 8014a7c:	2b01      	cmp	r3, #1
 8014a7e:	d101      	bne.n	8014a84 <phpalI14443p3a_Sw_ActivateCard+0x124>
        {
            return status;
 8014a80:	8bfb      	ldrh	r3, [r7, #30]
 8014a82:	e11d      	b.n	8014cc0 <phpalI14443p3a_Sw_ActivateCard+0x360>
        }
        bCollDetected = PH_ON;
 8014a84:	2301      	movs	r3, #1
 8014a86:	75fb      	strb	r3, [r7, #23]

        /* Set the more cards available flag */
        *pMoreCardsAvailable = PH_ON;
 8014a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a8a:	2201      	movs	r2, #1
 8014a8c:	701a      	strb	r2, [r3, #0]
 8014a8e:	e004      	b.n	8014a9a <phpalI14443p3a_Sw_ActivateCard+0x13a>
    }
    /* Status check */
    else
    {
        PH_CHECK_SUCCESS(status);
 8014a90:	8bfb      	ldrh	r3, [r7, #30]
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d001      	beq.n	8014a9a <phpalI14443p3a_Sw_ActivateCard+0x13a>
 8014a96:	8bfb      	ldrh	r3, [r7, #30]
 8014a98:	e112      	b.n	8014cc0 <phpalI14443p3a_Sw_ActivateCard+0x360>
    }

    /* Go through all cascade levels */
    for (bCascadeIndex = 0; bCascadeIndex < 3U; bCascadeIndex++)
 8014a9a:	2300      	movs	r3, #0
 8014a9c:	76bb      	strb	r3, [r7, #26]
 8014a9e:	e0fb      	b.n	8014c98 <phpalI14443p3a_Sw_ActivateCard+0x338>
    {
        /* Set cascade level tags */
        switch (bCascadeIndex)
 8014aa0:	7ebb      	ldrb	r3, [r7, #26]
 8014aa2:	2b02      	cmp	r3, #2
 8014aa4:	d00c      	beq.n	8014ac0 <phpalI14443p3a_Sw_ActivateCard+0x160>
 8014aa6:	2b02      	cmp	r3, #2
 8014aa8:	dc0d      	bgt.n	8014ac6 <phpalI14443p3a_Sw_ActivateCard+0x166>
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d002      	beq.n	8014ab4 <phpalI14443p3a_Sw_ActivateCard+0x154>
 8014aae:	2b01      	cmp	r3, #1
 8014ab0:	d003      	beq.n	8014aba <phpalI14443p3a_Sw_ActivateCard+0x15a>
 8014ab2:	e008      	b.n	8014ac6 <phpalI14443p3a_Sw_ActivateCard+0x166>
        {
        case 0:
            bCascadeLevel = PHPAL_I14443P3A_CASCADE_LEVEL_1;
 8014ab4:	2393      	movs	r3, #147	@ 0x93
 8014ab6:	76fb      	strb	r3, [r7, #27]
            break;
 8014ab8:	e005      	b.n	8014ac6 <phpalI14443p3a_Sw_ActivateCard+0x166>
        case 1:
            bCascadeLevel = PHPAL_I14443P3A_CASCADE_LEVEL_2;
 8014aba:	2395      	movs	r3, #149	@ 0x95
 8014abc:	76fb      	strb	r3, [r7, #27]
            break;
 8014abe:	e002      	b.n	8014ac6 <phpalI14443p3a_Sw_ActivateCard+0x166>
        case 2:
            bCascadeLevel = PHPAL_I14443P3A_CASCADE_LEVEL_3;
 8014ac0:	2397      	movs	r3, #151	@ 0x97
 8014ac2:	76fb      	strb	r3, [r7, #27]
            break;
 8014ac4:	bf00      	nop
        /* Default Case is not required as it will be a Dead Code due to the condition in for() loop statement. */
        } /* PRQA S 2002 */

        /* Copy know Uid part if neccessary */
        if (bLenUidIn == (bUidIndex + 4U))
 8014ac6:	79fa      	ldrb	r2, [r7, #7]
 8014ac8:	7e7b      	ldrb	r3, [r7, #25]
 8014aca:	3304      	adds	r3, #4
 8014acc:	429a      	cmp	r2, r3
 8014ace:	d107      	bne.n	8014ae0 <phpalI14443p3a_Sw_ActivateCard+0x180>
        {
            /* Copy whole Uid if this is the only cascade level */
            (void)memcpy(&bUid[0], &pUidIn[bUidIndex], 4);
 8014ad0:	7e7b      	ldrb	r3, [r7, #25]
 8014ad2:	68ba      	ldr	r2, [r7, #8]
 8014ad4:	4413      	add	r3, r2
 8014ad6:	681b      	ldr	r3, [r3, #0]
 8014ad8:	613b      	str	r3, [r7, #16]

            /* [Incrementing Uid index would have no effect] */

            /* All bits except BCC are valid */
            bNvbUid = 0x40;
 8014ada:	2340      	movs	r3, #64	@ 0x40
 8014adc:	75bb      	strb	r3, [r7, #22]
 8014ade:	e097      	b.n	8014c10 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
        }
        else if (bLenUidIn > (bUidIndex + /* */ 4U))
 8014ae0:	79fa      	ldrb	r2, [r7, #7]
 8014ae2:	7e7b      	ldrb	r3, [r7, #25]
 8014ae4:	3304      	adds	r3, #4
 8014ae6:	429a      	cmp	r2, r3
 8014ae8:	d911      	bls.n	8014b0e <phpalI14443p3a_Sw_ActivateCard+0x1ae>
        {
            /* Prepend cascade tag if we expect more cascade levels*/
            bUid[0] = PHPAL_I14443P3A_CASCADE_TAG;
 8014aea:	2388      	movs	r3, #136	@ 0x88
 8014aec:	743b      	strb	r3, [r7, #16]

            /* Only three more uid bytes are valid for this level */
            (void)memcpy(&bUid[1], &pUidIn[bUidIndex], 3);
 8014aee:	7e7b      	ldrb	r3, [r7, #25]
 8014af0:	68ba      	ldr	r2, [r7, #8]
 8014af2:	18d1      	adds	r1, r2, r3
 8014af4:	f107 0310 	add.w	r3, r7, #16
 8014af8:	3301      	adds	r3, #1
 8014afa:	2203      	movs	r2, #3
 8014afc:	4618      	mov	r0, r3
 8014afe:	f00b ff48 	bl	8020992 <memcpy>

            /* Increment Uid index */
            bUidIndex += 3U;
 8014b02:	7e7b      	ldrb	r3, [r7, #25]
 8014b04:	3303      	adds	r3, #3
 8014b06:	767b      	strb	r3, [r7, #25]

            /* All bits except BCC are valid */
            bNvbUid = 0x40;
 8014b08:	2340      	movs	r3, #64	@ 0x40
 8014b0a:	75bb      	strb	r3, [r7, #22]
 8014b0c:	e080      	b.n	8014c10 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
        }
        else
        {
            /* No Uid given */
            bNvbUid = 0;
 8014b0e:	2300      	movs	r3, #0
 8014b10:	75bb      	strb	r3, [r7, #22]
        }

        /* Anticollision Loop */
        while (bNvbUid != 0x40U)
 8014b12:	e07d      	b.n	8014c10 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
        {
            /* Perform single anticollision command */
            status = phpalI14443p3a_Sw_Anticollision(pDataParams, bCascadeLevel, bUid, bNvbUid, bUid, &bNvbUid);
 8014b14:	7db8      	ldrb	r0, [r7, #22]
 8014b16:	f107 0210 	add.w	r2, r7, #16
 8014b1a:	7ef9      	ldrb	r1, [r7, #27]
 8014b1c:	f107 0316 	add.w	r3, r7, #22
 8014b20:	9301      	str	r3, [sp, #4]
 8014b22:	f107 0310 	add.w	r3, r7, #16
 8014b26:	9300      	str	r3, [sp, #0]
 8014b28:	4603      	mov	r3, r0
 8014b2a:	68f8      	ldr	r0, [r7, #12]
 8014b2c:	f7ff fcc9 	bl	80144c2 <phpalI14443p3a_Sw_Anticollision>
 8014b30:	4603      	mov	r3, r0
 8014b32:	83fb      	strh	r3, [r7, #30]

            /* As per EMVCo 2.6 req 9.6.1.3, wait for at least Tmin retransmission in case of timeout error. */
            if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8014b34:	68fb      	ldr	r3, [r7, #12]
 8014b36:	7d1b      	ldrb	r3, [r3, #20]
 8014b38:	2b01      	cmp	r3, #1
 8014b3a:	d12b      	bne.n	8014b94 <phpalI14443p3a_Sw_ActivateCard+0x234>
            {
                bRetryCount = 0;
 8014b3c:	2300      	movs	r3, #0
 8014b3e:	763b      	strb	r3, [r7, #24]
                while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 8014b40:	e021      	b.n	8014b86 <phpalI14443p3a_Sw_ActivateCard+0x226>
                {
                    bRetryCount++;
 8014b42:	7e3b      	ldrb	r3, [r7, #24]
 8014b44:	3301      	adds	r3, #1
 8014b46:	763b      	strb	r3, [r7, #24]
                    /* Wait for at least Tmin retransmission delay. */
                    PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	685b      	ldr	r3, [r3, #4]
 8014b4c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8014b50:	2100      	movs	r1, #0
 8014b52:	4618      	mov	r0, r3
 8014b54:	f7f9 fd66 	bl	800e624 <phhalHw_Pn5180_Wait>
 8014b58:	4603      	mov	r3, r0
 8014b5a:	83fb      	strh	r3, [r7, #30]
 8014b5c:	8bfb      	ldrh	r3, [r7, #30]
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d001      	beq.n	8014b66 <phpalI14443p3a_Sw_ActivateCard+0x206>
 8014b62:	8bfb      	ldrh	r3, [r7, #30]
 8014b64:	e0ac      	b.n	8014cc0 <phpalI14443p3a_Sw_ActivateCard+0x360>
                        pDataParams->pHalDataParams,
                        PHHAL_HW_TIME_MICROSECONDS,
                        PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

                    status = phpalI14443p3a_Sw_Anticollision(pDataParams, bCascadeLevel, bUid, bNvbUid, bUid, &bNvbUid);
 8014b66:	7db8      	ldrb	r0, [r7, #22]
 8014b68:	f107 0210 	add.w	r2, r7, #16
 8014b6c:	7ef9      	ldrb	r1, [r7, #27]
 8014b6e:	f107 0316 	add.w	r3, r7, #22
 8014b72:	9301      	str	r3, [sp, #4]
 8014b74:	f107 0310 	add.w	r3, r7, #16
 8014b78:	9300      	str	r3, [sp, #0]
 8014b7a:	4603      	mov	r3, r0
 8014b7c:	68f8      	ldr	r0, [r7, #12]
 8014b7e:	f7ff fca0 	bl	80144c2 <phpalI14443p3a_Sw_Anticollision>
 8014b82:	4603      	mov	r3, r0
 8014b84:	83fb      	strh	r3, [r7, #30]
                while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 8014b86:	8bfb      	ldrh	r3, [r7, #30]
 8014b88:	b2db      	uxtb	r3, r3
 8014b8a:	2b01      	cmp	r3, #1
 8014b8c:	d102      	bne.n	8014b94 <phpalI14443p3a_Sw_ActivateCard+0x234>
 8014b8e:	7e3b      	ldrb	r3, [r7, #24]
 8014b90:	2b01      	cmp	r3, #1
 8014b92:	d9d6      	bls.n	8014b42 <phpalI14443p3a_Sw_ActivateCard+0x1e2>
                }
            }
            /* Collision error occured, add one (zero-)bit to Uid */
            if ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 8014b94:	8bfb      	ldrh	r3, [r7, #30]
 8014b96:	b2db      	uxtb	r3, r3
 8014b98:	2b03      	cmp	r3, #3
 8014b9a:	d11b      	bne.n	8014bd4 <phpalI14443p3a_Sw_ActivateCard+0x274>
            {
                /* Emvco: case_id TA302_00 */
                if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	7d1b      	ldrb	r3, [r3, #20]
 8014ba0:	2b01      	cmp	r3, #1
 8014ba2:	d101      	bne.n	8014ba8 <phpalI14443p3a_Sw_ActivateCard+0x248>
                {
                    /* Report Error to Application and Application will perform PICC Reset */
                    return status;
 8014ba4:	8bfb      	ldrh	r3, [r7, #30]
 8014ba6:	e08b      	b.n	8014cc0 <phpalI14443p3a_Sw_ActivateCard+0x360>
                }

                /* Set the more cards available flag */
                *pMoreCardsAvailable = PH_ON;
 8014ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014baa:	2201      	movs	r2, #1
 8014bac:	701a      	strb	r2, [r3, #0]

                /* Increment NvbUid by one bit */
                if ((bNvbUid & 0x07U) < 7U)
 8014bae:	7dbb      	ldrb	r3, [r7, #22]
 8014bb0:	f003 0307 	and.w	r3, r3, #7
 8014bb4:	2b06      	cmp	r3, #6
 8014bb6:	d804      	bhi.n	8014bc2 <phpalI14443p3a_Sw_ActivateCard+0x262>
                {
                    bNvbUid++;
 8014bb8:	7dbb      	ldrb	r3, [r7, #22]
 8014bba:	3301      	adds	r3, #1
 8014bbc:	b2db      	uxtb	r3, r3
 8014bbe:	75bb      	strb	r3, [r7, #22]
 8014bc0:	e00d      	b.n	8014bde <phpalI14443p3a_Sw_ActivateCard+0x27e>
                }
                /* This is more difficult if we have to increment the bytecount */
                else
                {
                    bNvbUid = (uint8_t)((((bNvbUid & 0xF0U) >> 4U) + 1U) << 4U);
 8014bc2:	7dbb      	ldrb	r3, [r7, #22]
 8014bc4:	091b      	lsrs	r3, r3, #4
 8014bc6:	b2db      	uxtb	r3, r3
 8014bc8:	3301      	adds	r3, #1
 8014bca:	b2db      	uxtb	r3, r3
 8014bcc:	011b      	lsls	r3, r3, #4
 8014bce:	b2db      	uxtb	r3, r3
 8014bd0:	75bb      	strb	r3, [r7, #22]
 8014bd2:	e004      	b.n	8014bde <phpalI14443p3a_Sw_ActivateCard+0x27e>
                }
            }
            else
            {
                /* Check success */
                PH_CHECK_SUCCESS(status);
 8014bd4:	8bfb      	ldrh	r3, [r7, #30]
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	d001      	beq.n	8014bde <phpalI14443p3a_Sw_ActivateCard+0x27e>
 8014bda:	8bfb      	ldrh	r3, [r7, #30]
 8014bdc:	e070      	b.n	8014cc0 <phpalI14443p3a_Sw_ActivateCard+0x360>
            }

            if(bCollDetected == PH_OFF)
 8014bde:	7dfb      	ldrb	r3, [r7, #23]
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d115      	bne.n	8014c10 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
                 * EMVCo article 5.4.2
                 * So For Single UID Size The NFC Forum Device MUST set nfcid10 of a single-size NFCID1 and nfcid13
                 * of a double-size NFCID1 to a value different from 88h.
                 */
                if(
                    ( (((bAtqa[0] & 0xC0U) == 0x00U) && (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_1))||
 8014be4:	7d3b      	ldrb	r3, [r7, #20]
 8014be6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
                if(
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d102      	bne.n	8014bf4 <phpalI14443p3a_Sw_ActivateCard+0x294>
                    ( (((bAtqa[0] & 0xC0U) == 0x00U) && (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_1))||
 8014bee:	7efb      	ldrb	r3, [r7, #27]
 8014bf0:	2b93      	cmp	r3, #147	@ 0x93
 8014bf2:	d007      	beq.n	8014c04 <phpalI14443p3a_Sw_ActivateCard+0x2a4>
                      (((bAtqa[0] & 0xC0U) == 0x40U) && (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_2)) ) &&
 8014bf4:	7d3b      	ldrb	r3, [r7, #20]
 8014bf6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
                    ( (((bAtqa[0] & 0xC0U) == 0x00U) && (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_1))||
 8014bfa:	2b40      	cmp	r3, #64	@ 0x40
 8014bfc:	d108      	bne.n	8014c10 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
                      (((bAtqa[0] & 0xC0U) == 0x40U) && (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_2)) ) &&
 8014bfe:	7efb      	ldrb	r3, [r7, #27]
 8014c00:	2b95      	cmp	r3, #149	@ 0x95
 8014c02:	d105      	bne.n	8014c10 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
                      (bUid[0] == PHPAL_I14443P3A_CASCADE_TAG)
 8014c04:	7c3b      	ldrb	r3, [r7, #16]
                      (((bAtqa[0] & 0xC0U) == 0x40U) && (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_2)) ) &&
 8014c06:	2b88      	cmp	r3, #136	@ 0x88
 8014c08:	d102      	bne.n	8014c10 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
                  )
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 8014c0a:	f240 3306 	movw	r3, #774	@ 0x306
 8014c0e:	e057      	b.n	8014cc0 <phpalI14443p3a_Sw_ActivateCard+0x360>
        while (bNvbUid != 0x40U)
 8014c10:	7dbb      	ldrb	r3, [r7, #22]
 8014c12:	2b40      	cmp	r3, #64	@ 0x40
 8014c14:	f47f af7e 	bne.w	8014b14 <phpalI14443p3a_Sw_ActivateCard+0x1b4>
                }
            }
        }

        statusTmp = phpalI14443p3a_Sw_Select(pDataParams, bCascadeLevel, bUid, pSak);
 8014c18:	f107 0210 	add.w	r2, r7, #16
 8014c1c:	7ef9      	ldrb	r1, [r7, #27]
 8014c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c20:	68f8      	ldr	r0, [r7, #12]
 8014c22:	f7ff fe85 	bl	8014930 <phpalI14443p3a_Sw_Select>
 8014c26:	4603      	mov	r3, r0
 8014c28:	83bb      	strh	r3, [r7, #28]

        /* As per EMVCo 2.6 req 9.6.1.3, wait for at least Tmin retransmission in case of timeout error. */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	7d1b      	ldrb	r3, [r3, #20]
 8014c2e:	2b01      	cmp	r3, #1
 8014c30:	d124      	bne.n	8014c7c <phpalI14443p3a_Sw_ActivateCard+0x31c>
        {
            bRetryCount = 0;
 8014c32:	2300      	movs	r3, #0
 8014c34:	763b      	strb	r3, [r7, #24]
            while (((statusTmp & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 8014c36:	e01a      	b.n	8014c6e <phpalI14443p3a_Sw_ActivateCard+0x30e>
            {
                bRetryCount++;
 8014c38:	7e3b      	ldrb	r3, [r7, #24]
 8014c3a:	3301      	adds	r3, #1
 8014c3c:	763b      	strb	r3, [r7, #24]
                /* Wait for at least Tmin retransmission delay. */
                PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	685b      	ldr	r3, [r3, #4]
 8014c42:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8014c46:	2100      	movs	r1, #0
 8014c48:	4618      	mov	r0, r3
 8014c4a:	f7f9 fceb 	bl	800e624 <phhalHw_Pn5180_Wait>
 8014c4e:	4603      	mov	r3, r0
 8014c50:	83fb      	strh	r3, [r7, #30]
 8014c52:	8bfb      	ldrh	r3, [r7, #30]
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d001      	beq.n	8014c5c <phpalI14443p3a_Sw_ActivateCard+0x2fc>
 8014c58:	8bfb      	ldrh	r3, [r7, #30]
 8014c5a:	e031      	b.n	8014cc0 <phpalI14443p3a_Sw_ActivateCard+0x360>
                    pDataParams->pHalDataParams,
                    PHHAL_HW_TIME_MICROSECONDS,
                    PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

                statusTmp = phpalI14443p3a_Sw_Select(pDataParams, bCascadeLevel, bUid, pSak);
 8014c5c:	f107 0210 	add.w	r2, r7, #16
 8014c60:	7ef9      	ldrb	r1, [r7, #27]
 8014c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c64:	68f8      	ldr	r0, [r7, #12]
 8014c66:	f7ff fe63 	bl	8014930 <phpalI14443p3a_Sw_Select>
 8014c6a:	4603      	mov	r3, r0
 8014c6c:	83bb      	strh	r3, [r7, #28]
            while (((statusTmp & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 8014c6e:	8bbb      	ldrh	r3, [r7, #28]
 8014c70:	b2db      	uxtb	r3, r3
 8014c72:	2b01      	cmp	r3, #1
 8014c74:	d102      	bne.n	8014c7c <phpalI14443p3a_Sw_ActivateCard+0x31c>
 8014c76:	7e3b      	ldrb	r3, [r7, #24]
 8014c78:	2b01      	cmp	r3, #1
 8014c7a:	d9dd      	bls.n	8014c38 <phpalI14443p3a_Sw_ActivateCard+0x2d8>
            }
        }

        /* Emvco: Case_id TA305. EMVCo Req. 9.6.1.2 */
        PH_CHECK_SUCCESS(statusTmp);
 8014c7c:	8bbb      	ldrh	r3, [r7, #28]
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	d001      	beq.n	8014c86 <phpalI14443p3a_Sw_ActivateCard+0x326>
 8014c82:	8bbb      	ldrh	r3, [r7, #28]
 8014c84:	e01c      	b.n	8014cc0 <phpalI14443p3a_Sw_ActivateCard+0x360>

        /* Cascade Bit is cleared -> no further cascade levels */
        if ((pSak[0] & 0x04U) == 0U)
 8014c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c88:	781b      	ldrb	r3, [r3, #0]
 8014c8a:	f003 0304 	and.w	r3, r3, #4
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d007      	beq.n	8014ca2 <phpalI14443p3a_Sw_ActivateCard+0x342>
    for (bCascadeIndex = 0; bCascadeIndex < 3U; bCascadeIndex++)
 8014c92:	7ebb      	ldrb	r3, [r7, #26]
 8014c94:	3301      	adds	r3, #1
 8014c96:	76bb      	strb	r3, [r7, #26]
 8014c98:	7ebb      	ldrb	r3, [r7, #26]
 8014c9a:	2b02      	cmp	r3, #2
 8014c9c:	f67f af00 	bls.w	8014aa0 <phpalI14443p3a_Sw_ActivateCard+0x140>
 8014ca0:	e000      	b.n	8014ca4 <phpalI14443p3a_Sw_ActivateCard+0x344>
        {
            break;
 8014ca2:	bf00      	nop
        }
    }

    /* Return UID */
    (void)memcpy(pUidOut, pDataParams->abUid, pDataParams->bUidLength);
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	f103 0108 	add.w	r1, r3, #8
 8014caa:	68fb      	ldr	r3, [r7, #12]
 8014cac:	7c9b      	ldrb	r3, [r3, #18]
 8014cae:	461a      	mov	r2, r3
 8014cb0:	6838      	ldr	r0, [r7, #0]
 8014cb2:	f00b fe6e 	bl	8020992 <memcpy>
    *pLenUidOut = pDataParams->bUidLength;
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	7c9a      	ldrb	r2, [r3, #18]
 8014cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014cbc:	701a      	strb	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8014cbe:	2300      	movs	r3, #0
}
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	3720      	adds	r7, #32
 8014cc4:	46bd      	mov	sp, r7
 8014cc6:	bd80      	pop	{r7, pc}

08014cc8 <phpalI14443p3a_Sw_Exchange>:
                                      uint8_t * pTxBuffer,
                                      uint16_t wTxLength,
                                      uint8_t ** ppRxBuffer,
                                      uint16_t * pRxLength
                                      )
{
 8014cc8:	b580      	push	{r7, lr}
 8014cca:	b086      	sub	sp, #24
 8014ccc:	af02      	add	r7, sp, #8
 8014cce:	60f8      	str	r0, [r7, #12]
 8014cd0:	607a      	str	r2, [r7, #4]
 8014cd2:	461a      	mov	r2, r3
 8014cd4:	460b      	mov	r3, r1
 8014cd6:	817b      	strh	r3, [r7, #10]
 8014cd8:	4613      	mov	r3, r2
 8014cda:	813b      	strh	r3, [r7, #8]
    /* direct mapping of HAL exchange function */
    return phhalHw_Exchange(
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	6858      	ldr	r0, [r3, #4]
 8014ce0:	893a      	ldrh	r2, [r7, #8]
 8014ce2:	8979      	ldrh	r1, [r7, #10]
 8014ce4:	69fb      	ldr	r3, [r7, #28]
 8014ce6:	9301      	str	r3, [sp, #4]
 8014ce8:	69bb      	ldr	r3, [r7, #24]
 8014cea:	9300      	str	r3, [sp, #0]
 8014cec:	4613      	mov	r3, r2
 8014cee:	687a      	ldr	r2, [r7, #4]
 8014cf0:	f7f9 f99c 	bl	800e02c <phhalHw_Pn5180_Exchange>
 8014cf4:	4603      	mov	r3, r0
        wOption,
        pTxBuffer,
        wTxLength,
        ppRxBuffer,
        pRxLength);
}
 8014cf6:	4618      	mov	r0, r3
 8014cf8:	3710      	adds	r7, #16
 8014cfa:	46bd      	mov	sp, r7
 8014cfc:	bd80      	pop	{r7, pc}

08014cfe <phpalI14443p3a_Sw_RequestAEx>:
phStatus_t phpalI14443p3a_Sw_RequestAEx(
                                        phpalI14443p3a_Sw_DataParams_t * pDataParams,
                                        uint8_t bReqCode,
                                        uint8_t * pAtqa
                                        )
{
 8014cfe:	b580      	push	{r7, lr}
 8014d00:	b08a      	sub	sp, #40	@ 0x28
 8014d02:	af02      	add	r7, sp, #8
 8014d04:	60f8      	str	r0, [r7, #12]
 8014d06:	460b      	mov	r3, r1
 8014d08:	607a      	str	r2, [r7, #4]
 8014d0a:	72fb      	strb	r3, [r7, #11]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    phStatus_t  PH_MEMLOC_REM Status;
    uint8_t     PH_MEMLOC_REM cmd[1];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8014d0c:	2300      	movs	r3, #0
 8014d0e:	617b      	str	r3, [r7, #20]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8014d10:	2300      	movs	r3, #0
 8014d12:	827b      	strh	r3, [r7, #18]
    uint16_t    PH_MEMLOC_REM wRegister;

    /* Disable MIFARE Classic contactless IC Crypto1 */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	685b      	ldr	r3, [r3, #4]
 8014d18:	2201      	movs	r2, #1
 8014d1a:	212e      	movs	r1, #46	@ 0x2e
 8014d1c:	4618      	mov	r0, r3
 8014d1e:	f7f9 fd3b 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8014d22:	4603      	mov	r3, r0
 8014d24:	83fb      	strh	r3, [r7, #30]
 8014d26:	8bfb      	ldrh	r3, [r7, #30]
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d001      	beq.n	8014d30 <phpalI14443p3a_Sw_RequestAEx+0x32>
 8014d2c:	8bfb      	ldrh	r3, [r7, #30]
 8014d2e:	e0cc      	b.n	8014eca <phpalI14443p3a_Sw_RequestAEx+0x1cc>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_DISABLE_MF_CRYPTO1,
        PH_ON));

    /* Reset default data rates */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	685b      	ldr	r3, [r3, #4]
 8014d34:	2200      	movs	r2, #0
 8014d36:	2109      	movs	r1, #9
 8014d38:	4618      	mov	r0, r3
 8014d3a:	f7f9 fd2d 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8014d3e:	4603      	mov	r3, r0
 8014d40:	83fb      	strh	r3, [r7, #30]
 8014d42:	8bfb      	ldrh	r3, [r7, #30]
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d001      	beq.n	8014d4c <phpalI14443p3a_Sw_RequestAEx+0x4e>
 8014d48:	8bfb      	ldrh	r3, [r7, #30]
 8014d4a:	e0be      	b.n	8014eca <phpalI14443p3a_Sw_RequestAEx+0x1cc>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TXDATARATE_FRAMING,
        PHHAL_HW_RF_DATARATE_106));
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8014d4c:	68fb      	ldr	r3, [r7, #12]
 8014d4e:	685b      	ldr	r3, [r3, #4]
 8014d50:	2200      	movs	r2, #0
 8014d52:	210a      	movs	r1, #10
 8014d54:	4618      	mov	r0, r3
 8014d56:	f7f9 fd1f 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8014d5a:	4603      	mov	r3, r0
 8014d5c:	83fb      	strh	r3, [r7, #30]
 8014d5e:	8bfb      	ldrh	r3, [r7, #30]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d001      	beq.n	8014d68 <phpalI14443p3a_Sw_RequestAEx+0x6a>
 8014d64:	8bfb      	ldrh	r3, [r7, #30]
 8014d66:	e0b0      	b.n	8014eca <phpalI14443p3a_Sw_RequestAEx+0x1cc>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_RXDATARATE_FRAMING,
        PHHAL_HW_RF_DATARATE_106));

    /* Set selection timeout */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8014d68:	68fb      	ldr	r3, [r7, #12]
 8014d6a:	685b      	ldr	r3, [r3, #4]
 8014d6c:	2291      	movs	r2, #145	@ 0x91
 8014d6e:	210d      	movs	r1, #13
 8014d70:	4618      	mov	r0, r3
 8014d72:	f7f9 fd11 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8014d76:	4603      	mov	r3, r0
 8014d78:	83fb      	strh	r3, [r7, #30]
 8014d7a:	8bfb      	ldrh	r3, [r7, #30]
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	d001      	beq.n	8014d84 <phpalI14443p3a_Sw_RequestAEx+0x86>
 8014d80:	8bfb      	ldrh	r3, [r7, #30]
 8014d82:	e0a2      	b.n	8014eca <phpalI14443p3a_Sw_RequestAEx+0x1cc>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
        PHPAL_I14443P3A_SELECTION_TIME_US + PHPAL_I14443P3A_EXT_TIME_US));

    /* Retrieve RxWaitTime */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXWAIT_US, &wRegister));
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	685b      	ldr	r3, [r3, #4]
 8014d88:	f107 0210 	add.w	r2, r7, #16
 8014d8c:	2106      	movs	r1, #6
 8014d8e:	4618      	mov	r0, r3
 8014d90:	f7fb f950 	bl	8010034 <phhalHw_Pn5180_GetConfig>
 8014d94:	4603      	mov	r3, r0
 8014d96:	83fb      	strh	r3, [r7, #30]
 8014d98:	8bfb      	ldrh	r3, [r7, #30]
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d001      	beq.n	8014da2 <phpalI14443p3a_Sw_RequestAEx+0xa4>
 8014d9e:	8bfb      	ldrh	r3, [r7, #30]
 8014da0:	e093      	b.n	8014eca <phpalI14443p3a_Sw_RequestAEx+0x1cc>
    /* Set RxWaitTime to 76 microseconds equivalent to 8 Bits. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXWAIT_US, 76));
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	685b      	ldr	r3, [r3, #4]
 8014da6:	224c      	movs	r2, #76	@ 0x4c
 8014da8:	2106      	movs	r1, #6
 8014daa:	4618      	mov	r0, r3
 8014dac:	f7f9 fcf4 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8014db0:	4603      	mov	r3, r0
 8014db2:	83fb      	strh	r3, [r7, #30]
 8014db4:	8bfb      	ldrh	r3, [r7, #30]
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d001      	beq.n	8014dbe <phpalI14443p3a_Sw_RequestAEx+0xc0>
 8014dba:	8bfb      	ldrh	r3, [r7, #30]
 8014dbc:	e085      	b.n	8014eca <phpalI14443p3a_Sw_RequestAEx+0x1cc>

    /* Switch off CRC */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXCRC, PH_OFF));
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	685b      	ldr	r3, [r3, #4]
 8014dc2:	2200      	movs	r2, #0
 8014dc4:	2101      	movs	r1, #1
 8014dc6:	4618      	mov	r0, r3
 8014dc8:	f7f9 fce6 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8014dcc:	4603      	mov	r3, r0
 8014dce:	83fb      	strh	r3, [r7, #30]
 8014dd0:	8bfb      	ldrh	r3, [r7, #30]
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	d001      	beq.n	8014dda <phpalI14443p3a_Sw_RequestAEx+0xdc>
 8014dd6:	8bfb      	ldrh	r3, [r7, #30]
 8014dd8:	e077      	b.n	8014eca <phpalI14443p3a_Sw_RequestAEx+0x1cc>
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXCRC, PH_OFF));
 8014dda:	68fb      	ldr	r3, [r7, #12]
 8014ddc:	685b      	ldr	r3, [r3, #4]
 8014dde:	2200      	movs	r2, #0
 8014de0:	2102      	movs	r1, #2
 8014de2:	4618      	mov	r0, r3
 8014de4:	f7f9 fcd8 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8014de8:	4603      	mov	r3, r0
 8014dea:	83fb      	strh	r3, [r7, #30]
 8014dec:	8bfb      	ldrh	r3, [r7, #30]
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d001      	beq.n	8014df6 <phpalI14443p3a_Sw_RequestAEx+0xf8>
 8014df2:	8bfb      	ldrh	r3, [r7, #30]
 8014df4:	e069      	b.n	8014eca <phpalI14443p3a_Sw_RequestAEx+0x1cc>

    /* Only 7 bits are valid */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXLASTBITS, 7));
 8014df6:	68fb      	ldr	r3, [r7, #12]
 8014df8:	685b      	ldr	r3, [r3, #4]
 8014dfa:	2207      	movs	r2, #7
 8014dfc:	2103      	movs	r1, #3
 8014dfe:	4618      	mov	r0, r3
 8014e00:	f7f9 fcca 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8014e04:	4603      	mov	r3, r0
 8014e06:	83fb      	strh	r3, [r7, #30]
 8014e08:	8bfb      	ldrh	r3, [r7, #30]
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d001      	beq.n	8014e12 <phpalI14443p3a_Sw_RequestAEx+0x114>
 8014e0e:	8bfb      	ldrh	r3, [r7, #30]
 8014e10:	e05b      	b.n	8014eca <phpalI14443p3a_Sw_RequestAEx+0x1cc>

    /* Send ReqA command */
    cmd[0] = bReqCode;
 8014e12:	7afb      	ldrb	r3, [r7, #11]
 8014e14:	763b      	strb	r3, [r7, #24]
    statusTmp = phhalHw_Exchange(pDataParams->pHalDataParams, PH_EXCHANGE_DEFAULT, cmd, 1, &pResp, &wRespLength);
 8014e16:	68fb      	ldr	r3, [r7, #12]
 8014e18:	6858      	ldr	r0, [r3, #4]
 8014e1a:	f107 0218 	add.w	r2, r7, #24
 8014e1e:	f107 0312 	add.w	r3, r7, #18
 8014e22:	9301      	str	r3, [sp, #4]
 8014e24:	f107 0314 	add.w	r3, r7, #20
 8014e28:	9300      	str	r3, [sp, #0]
 8014e2a:	2301      	movs	r3, #1
 8014e2c:	2100      	movs	r1, #0
 8014e2e:	f7f9 f8fd 	bl	800e02c <phhalHw_Pn5180_Exchange>
 8014e32:	4603      	mov	r3, r0
 8014e34:	83fb      	strh	r3, [r7, #30]

    /* Restore previous RxWaitTime */
    PH_CHECK_SUCCESS_FCT(Status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXWAIT_US, wRegister));
 8014e36:	68fb      	ldr	r3, [r7, #12]
 8014e38:	685b      	ldr	r3, [r3, #4]
 8014e3a:	8a3a      	ldrh	r2, [r7, #16]
 8014e3c:	2106      	movs	r1, #6
 8014e3e:	4618      	mov	r0, r3
 8014e40:	f7f9 fcaa 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8014e44:	4603      	mov	r3, r0
 8014e46:	83bb      	strh	r3, [r7, #28]
 8014e48:	8bbb      	ldrh	r3, [r7, #28]
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d001      	beq.n	8014e52 <phpalI14443p3a_Sw_RequestAEx+0x154>
 8014e4e:	8bbb      	ldrh	r3, [r7, #28]
 8014e50:	e03b      	b.n	8014eca <phpalI14443p3a_Sw_RequestAEx+0x1cc>

    PH_CHECK_SUCCESS(statusTmp);
 8014e52:	8bfb      	ldrh	r3, [r7, #30]
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d001      	beq.n	8014e5c <phpalI14443p3a_Sw_RequestAEx+0x15e>
 8014e58:	8bfb      	ldrh	r3, [r7, #30]
 8014e5a:	e036      	b.n	8014eca <phpalI14443p3a_Sw_RequestAEx+0x1cc>
    /* Check and copy ATQA */
    if (wRespLength == PHPAL_I14443P3A_ATQA_LENGTH)
 8014e5c:	8a7b      	ldrh	r3, [r7, #18]
 8014e5e:	2b02      	cmp	r3, #2
 8014e60:	d12f      	bne.n	8014ec2 <phpalI14443p3a_Sw_RequestAEx+0x1c4>
    {
        (void)memcpy(pAtqa, pResp, PHPAL_I14443P3A_ATQA_LENGTH);
 8014e62:	697b      	ldr	r3, [r7, #20]
 8014e64:	881b      	ldrh	r3, [r3, #0]
 8014e66:	b29a      	uxth	r2, r3
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	801a      	strh	r2, [r3, #0]
        /* Emvco: case_id: TA304_10, TA304_11, TA304_12 */
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8014e6c:	68fb      	ldr	r3, [r7, #12]
 8014e6e:	7d1b      	ldrb	r3, [r3, #20]
 8014e70:	2b01      	cmp	r3, #1
 8014e72:	d109      	bne.n	8014e88 <phpalI14443p3a_Sw_RequestAEx+0x18a>
        {
            /*5.3.2*/
            if(0U != (pAtqa[1] & 0xF0U))    /* Most significant nibble of byte 2 must be 0 */
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	3301      	adds	r3, #1
 8014e78:	781b      	ldrb	r3, [r3, #0]
 8014e7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	d022      	beq.n	8014ec8 <phpalI14443p3a_Sw_RequestAEx+0x1ca>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 8014e82:	f240 3306 	movw	r3, #774	@ 0x306
 8014e86:	e020      	b.n	8014eca <phpalI14443p3a_Sw_RequestAEx+0x1cc>
            }
        }
        else
        {
            /* NFCForum-TS-DigitalProtocol-1.0, Requirement 18, Section 4.6.3.3 */
            if((((pAtqa[0] & 0x1FU) == 0x00U) && ((pAtqa[1] & 0x0FU) != 0x0CU)) || (((pAtqa[1] & 0x0FU) == 0x0CU) && ((pAtqa[0] & 0x1FU) != 0x00U)))
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	781b      	ldrb	r3, [r3, #0]
 8014e8c:	f003 031f 	and.w	r3, r3, #31
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d106      	bne.n	8014ea2 <phpalI14443p3a_Sw_RequestAEx+0x1a4>
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	3301      	adds	r3, #1
 8014e98:	781b      	ldrb	r3, [r3, #0]
 8014e9a:	f003 030f 	and.w	r3, r3, #15
 8014e9e:	2b0c      	cmp	r3, #12
 8014ea0:	d10c      	bne.n	8014ebc <phpalI14443p3a_Sw_RequestAEx+0x1be>
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	3301      	adds	r3, #1
 8014ea6:	781b      	ldrb	r3, [r3, #0]
 8014ea8:	f003 030f 	and.w	r3, r3, #15
 8014eac:	2b0c      	cmp	r3, #12
 8014eae:	d10b      	bne.n	8014ec8 <phpalI14443p3a_Sw_RequestAEx+0x1ca>
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	781b      	ldrb	r3, [r3, #0]
 8014eb4:	f003 031f 	and.w	r3, r3, #31
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d005      	beq.n	8014ec8 <phpalI14443p3a_Sw_RequestAEx+0x1ca>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 8014ebc:	f240 3306 	movw	r3, #774	@ 0x306
 8014ec0:	e003      	b.n	8014eca <phpalI14443p3a_Sw_RequestAEx+0x1cc>
            }
        }
    }
    else
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 8014ec2:	f240 3306 	movw	r3, #774	@ 0x306
 8014ec6:	e000      	b.n	8014eca <phpalI14443p3a_Sw_RequestAEx+0x1cc>
    }

    return PH_ERR_SUCCESS;
 8014ec8:	2300      	movs	r3, #0
}
 8014eca:	4618      	mov	r0, r3
 8014ecc:	3720      	adds	r7, #32
 8014ece:	46bd      	mov	sp, r7
 8014ed0:	bd80      	pop	{r7, pc}

08014ed2 <phpalI14443p3a_Sw_GetSerialNo>:
phStatus_t phpalI14443p3a_Sw_GetSerialNo(
    phpalI14443p3a_Sw_DataParams_t * pDataParams,
    uint8_t * pUidOut,
    uint8_t * pLenUidOut
    )
{
 8014ed2:	b580      	push	{r7, lr}
 8014ed4:	b084      	sub	sp, #16
 8014ed6:	af00      	add	r7, sp, #0
 8014ed8:	60f8      	str	r0, [r7, #12]
 8014eda:	60b9      	str	r1, [r7, #8]
 8014edc:	607a      	str	r2, [r7, #4]
    /* Return an error if UID is not complete */
    if (0U == (pDataParams->bUidComplete))
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	7cdb      	ldrb	r3, [r3, #19]
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d102      	bne.n	8014eec <phpalI14443p3a_Sw_GetSerialNo+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_PAL_ISO14443P3A);
 8014ee6:	f240 3325 	movw	r3, #805	@ 0x325
 8014eea:	e00d      	b.n	8014f08 <phpalI14443p3a_Sw_GetSerialNo+0x36>
    }

    /* Copy UID */
    (void)memcpy(pUidOut, pDataParams->abUid, pDataParams->bUidLength);
 8014eec:	68fb      	ldr	r3, [r7, #12]
 8014eee:	f103 0108 	add.w	r1, r3, #8
 8014ef2:	68fb      	ldr	r3, [r7, #12]
 8014ef4:	7c9b      	ldrb	r3, [r3, #18]
 8014ef6:	461a      	mov	r2, r3
 8014ef8:	68b8      	ldr	r0, [r7, #8]
 8014efa:	f00b fd4a 	bl	8020992 <memcpy>
    *pLenUidOut = pDataParams->bUidLength;
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	7c9a      	ldrb	r2, [r3, #18]
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	701a      	strb	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8014f06:	2300      	movs	r3, #0
}
 8014f08:	4618      	mov	r0, r3
 8014f0a:	3710      	adds	r7, #16
 8014f0c:	46bd      	mov	sp, r7
 8014f0e:	bd80      	pop	{r7, pc}

08014f10 <phpalI14443p3b_Sw_Init>:
phStatus_t phpalI14443p3b_Sw_Init(
                                  phpalI14443p3b_Sw_DataParams_t * pDataParams,
                                  uint16_t wSizeOfDataParams,
                                  void * pHalDataParams
                                  )
{
 8014f10:	b480      	push	{r7}
 8014f12:	b085      	sub	sp, #20
 8014f14:	af00      	add	r7, sp, #0
 8014f16:	60f8      	str	r0, [r7, #12]
 8014f18:	460b      	mov	r3, r1
 8014f1a:	607a      	str	r2, [r7, #4]
 8014f1c:	817b      	strh	r3, [r7, #10]
    if (sizeof(phpalI14443p3b_Sw_DataParams_t) != wSizeOfDataParams)
 8014f1e:	897b      	ldrh	r3, [r7, #10]
 8014f20:	2b2c      	cmp	r3, #44	@ 0x2c
 8014f22:	d002      	beq.n	8014f2a <phpalI14443p3b_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_ISO14443P3B);
 8014f24:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8014f28:	e051      	b.n	8014fce <phpalI14443p3b_Sw_Init+0xbe>
    }
    PH_ASSERT_NULL (pDataParams);
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d101      	bne.n	8014f34 <phpalI14443p3b_Sw_Init+0x24>
 8014f30:	2321      	movs	r3, #33	@ 0x21
 8014f32:	e04c      	b.n	8014fce <phpalI14443p3b_Sw_Init+0xbe>
    PH_ASSERT_NULL (pHalDataParams);
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d101      	bne.n	8014f3e <phpalI14443p3b_Sw_Init+0x2e>
 8014f3a:	2321      	movs	r3, #33	@ 0x21
 8014f3c:	e047      	b.n	8014fce <phpalI14443p3b_Sw_Init+0xbe>

    /* init private data */
    pDataParams->wId                    = PH_COMP_PAL_ISO14443P3B | PHPAL_I14443P3B_SW_ID;
 8014f3e:	68fb      	ldr	r3, [r7, #12]
 8014f40:	f240 4201 	movw	r2, #1025	@ 0x401
 8014f44:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams         = pHalDataParams;
 8014f46:	68fb      	ldr	r3, [r7, #12]
 8014f48:	687a      	ldr	r2, [r7, #4]
 8014f4a:	605a      	str	r2, [r3, #4]
    pDataParams->bExtAtqb               = PH_OFF;
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	2200      	movs	r2, #0
 8014f50:	721a      	strb	r2, [r3, #8]
    pDataParams->bPupiValid             = PH_OFF;
 8014f52:	68fb      	ldr	r3, [r7, #12]
 8014f54:	2200      	movs	r2, #0
 8014f56:	735a      	strb	r2, [r3, #13]
    pDataParams->bCidSupported          = 0;
 8014f58:	68fb      	ldr	r3, [r7, #12]
 8014f5a:	2200      	movs	r2, #0
 8014f5c:	739a      	strb	r2, [r3, #14]
    pDataParams->bNadSupported          = 0;
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	2200      	movs	r2, #0
 8014f62:	73da      	strb	r2, [r3, #15]
    pDataParams->bCid                   = 0;
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	2200      	movs	r2, #0
 8014f68:	741a      	strb	r2, [r3, #16]
    pDataParams->bFwi                   = PHPAL_I14443P3B_SW_FWI_DEFAULT;
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	2204      	movs	r2, #4
 8014f6e:	745a      	strb	r2, [r3, #17]
    pDataParams->bFsci                  = PHPAL_I14443P3B_SW_FSCI_DEFAULT;
 8014f70:	68fb      	ldr	r3, [r7, #12]
 8014f72:	2202      	movs	r2, #2
 8014f74:	749a      	strb	r2, [r3, #18]
    pDataParams->bFsdi                  = 0;
 8014f76:	68fb      	ldr	r3, [r7, #12]
 8014f78:	2200      	movs	r2, #0
 8014f7a:	74da      	strb	r2, [r3, #19]
    pDataParams->bDri                   = 0;
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	2200      	movs	r2, #0
 8014f80:	751a      	strb	r2, [r3, #20]
    pDataParams->bDsi                   = 0;
 8014f82:	68fb      	ldr	r3, [r7, #12]
 8014f84:	2200      	movs	r2, #0
 8014f86:	755a      	strb	r2, [r3, #21]
    pDataParams->bAttribParam1          = PHPAL_I14443P3B_SW_ATTRIB_PARAM1_DEFAULT;
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	2200      	movs	r2, #0
 8014f8c:	759a      	strb	r2, [r3, #22]
    pDataParams->pHigherLayerInf        = NULL;
 8014f8e:	68fb      	ldr	r3, [r7, #12]
 8014f90:	2200      	movs	r2, #0
 8014f92:	619a      	str	r2, [r3, #24]
    pDataParams->wTxWait                = PHPAL_I14443P3B_SW_TXWAIT_US_DEFAULT;
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8014f9a:	839a      	strh	r2, [r3, #28]
    pDataParams->wHigherLayerInfLen     = 0;
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	2200      	movs	r2, #0
 8014fa0:	83da      	strh	r2, [r3, #30]
    pDataParams->pHigherLayerResp       = NULL;
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	2200      	movs	r2, #0
 8014fa6:	621a      	str	r2, [r3, #32]
    pDataParams->wHigherLayerRespSize   = 0;
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	2200      	movs	r2, #0
 8014fac:	849a      	strh	r2, [r3, #36]	@ 0x24
    pDataParams->wHigherLayerRespLen    = 0;
 8014fae:	68fb      	ldr	r3, [r7, #12]
 8014fb0:	2200      	movs	r2, #0
 8014fb2:	84da      	strh	r2, [r3, #38]	@ 0x26
    pDataParams->bOpeMode               = RD_LIB_MODE_NFC;
 8014fb4:	68fb      	ldr	r3, [r7, #12]
 8014fb6:	2202      	movs	r2, #2
 8014fb8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    pDataParams->bPollCmd               = PHPAL_I14443P3B_USE_REQB;
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	2200      	movs	r2, #0
 8014fc0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    pDataParams->bRetryCount            = PHPAL_I14443P3B_ATTRIB_RETRY_MAX;
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	2201      	movs	r2, #1
 8014fc8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

    return PH_ERR_SUCCESS;
 8014fcc:	2300      	movs	r3, #0
}
 8014fce:	4618      	mov	r0, r3
 8014fd0:	3714      	adds	r7, #20
 8014fd2:	46bd      	mov	sp, r7
 8014fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fd8:	4770      	bx	lr
	...

08014fdc <phpalI14443p3b_Sw_SetConfig>:
phStatus_t phpalI14443p3b_Sw_SetConfig(
                                       phpalI14443p3b_Sw_DataParams_t * pDataParams,
                                       uint16_t wConfig,
                                       uint16_t wValue
                                       )
{
 8014fdc:	b480      	push	{r7}
 8014fde:	b083      	sub	sp, #12
 8014fe0:	af00      	add	r7, sp, #0
 8014fe2:	6078      	str	r0, [r7, #4]
 8014fe4:	460b      	mov	r3, r1
 8014fe6:	807b      	strh	r3, [r7, #2]
 8014fe8:	4613      	mov	r3, r2
 8014fea:	803b      	strh	r3, [r7, #0]
    switch (wConfig)
 8014fec:	887b      	ldrh	r3, [r7, #2]
 8014fee:	2b03      	cmp	r3, #3
 8014ff0:	d82c      	bhi.n	801504c <phpalI14443p3b_Sw_SetConfig+0x70>
 8014ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8014ff8 <phpalI14443p3b_Sw_SetConfig+0x1c>)
 8014ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ff8:	08015009 	.word	0x08015009
 8014ffc:	08015013 	.word	0x08015013
 8015000:	0801501f 	.word	0x0801501f
 8015004:	0801502b 	.word	0x0801502b
    {
    case PHPAL_I14443P3B_CONFIG_ATTRIB_PARAM1:
        pDataParams->bAttribParam1 = (uint8_t)wValue;
 8015008:	883b      	ldrh	r3, [r7, #0]
 801500a:	b2da      	uxtb	r2, r3
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	759a      	strb	r2, [r3, #22]
        break;
 8015010:	e01f      	b.n	8015052 <phpalI14443p3b_Sw_SetConfig+0x76>

    /* Emvco: To Define Running Mode for RdLib: Either Normal, EMVCO, ISO */
    case PHPAL_I14443P3B_CONFIG_OPE_MODE:
      {
         pDataParams->bOpeMode = (uint8_t)wValue;
 8015012:	883b      	ldrh	r3, [r7, #0]
 8015014:	b2da      	uxtb	r2, r3
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
         break;
 801501c:	e019      	b.n	8015052 <phpalI14443p3b_Sw_SetConfig+0x76>
      }

    case PHPAL_I14443P3B_CONFIG_POLL_CMD:
    {
        pDataParams->bPollCmd = (uint8_t)wValue;
 801501e:	883b      	ldrh	r3, [r7, #0]
 8015020:	b2da      	uxtb	r2, r3
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
        break;
 8015028:	e013      	b.n	8015052 <phpalI14443p3b_Sw_SetConfig+0x76>
    }

    case PHPAL_I14443P3B_CONFIG_ATTRIB_RETRY_COUNT:
    {
        if(!(((wValue & 0xFFU) == PHPAL_I14443P3B_ATTRIB_RETRY_MIN) ||
 801502a:	883b      	ldrh	r3, [r7, #0]
 801502c:	b2db      	uxtb	r3, r3
 801502e:	2b00      	cmp	r3, #0
 8015030:	d006      	beq.n	8015040 <phpalI14443p3b_Sw_SetConfig+0x64>
             ((wValue & 0xFFU) == PHPAL_I14443P3B_ATTRIB_RETRY_MAX)))
 8015032:	883b      	ldrh	r3, [r7, #0]
 8015034:	b2db      	uxtb	r3, r3
        if(!(((wValue & 0xFFU) == PHPAL_I14443P3B_ATTRIB_RETRY_MIN) ||
 8015036:	2b01      	cmp	r3, #1
 8015038:	d002      	beq.n	8015040 <phpalI14443p3b_Sw_SetConfig+0x64>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 801503a:	f240 4321 	movw	r3, #1057	@ 0x421
 801503e:	e009      	b.n	8015054 <phpalI14443p3b_Sw_SetConfig+0x78>
        }

        pDataParams->bRetryCount = (uint8_t)wValue;
 8015040:	883b      	ldrh	r3, [r7, #0]
 8015042:	b2da      	uxtb	r2, r3
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
        break;
 801504a:	e002      	b.n	8015052 <phpalI14443p3b_Sw_SetConfig+0x76>
    }
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 801504c:	f240 4323 	movw	r3, #1059	@ 0x423
 8015050:	e000      	b.n	8015054 <phpalI14443p3b_Sw_SetConfig+0x78>
    }

    return PH_ERR_SUCCESS;
 8015052:	2300      	movs	r3, #0
}
 8015054:	4618      	mov	r0, r3
 8015056:	370c      	adds	r7, #12
 8015058:	46bd      	mov	sp, r7
 801505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801505e:	4770      	bx	lr

08015060 <phpalI14443p3b_Sw_GetConfig>:
phStatus_t phpalI14443p3b_Sw_GetConfig(
                                       phpalI14443p3b_Sw_DataParams_t * pDataParams,
                                       uint16_t wConfig,
                                       uint16_t* pValue
                                       )
{
 8015060:	b480      	push	{r7}
 8015062:	b085      	sub	sp, #20
 8015064:	af00      	add	r7, sp, #0
 8015066:	60f8      	str	r0, [r7, #12]
 8015068:	460b      	mov	r3, r1
 801506a:	607a      	str	r2, [r7, #4]
 801506c:	817b      	strh	r3, [r7, #10]
    switch (wConfig)
 801506e:	897b      	ldrh	r3, [r7, #10]
 8015070:	2b05      	cmp	r3, #5
 8015072:	d828      	bhi.n	80150c6 <phpalI14443p3b_Sw_GetConfig+0x66>
 8015074:	a201      	add	r2, pc, #4	@ (adr r2, 801507c <phpalI14443p3b_Sw_GetConfig+0x1c>)
 8015076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801507a:	bf00      	nop
 801507c:	08015095 	.word	0x08015095
 8015080:	080150c7 	.word	0x080150c7
 8015084:	080150c7 	.word	0x080150c7
 8015088:	080150a1 	.word	0x080150a1
 801508c:	080150af 	.word	0x080150af
 8015090:	080150bb 	.word	0x080150bb
    {
    case PHPAL_I14443P3B_CONFIG_ATTRIB_PARAM1:
        *pValue = (uint16_t)pDataParams->bAttribParam1;
 8015094:	68fb      	ldr	r3, [r7, #12]
 8015096:	7d9b      	ldrb	r3, [r3, #22]
 8015098:	461a      	mov	r2, r3
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	801a      	strh	r2, [r3, #0]
        break;
 801509e:	e015      	b.n	80150cc <phpalI14443p3b_Sw_GetConfig+0x6c>

    case PHPAL_I14443P3B_CONFIG_ATTRIB_RETRY_COUNT:
        *pValue = (uint16_t)pDataParams->bRetryCount;
 80150a0:	68fb      	ldr	r3, [r7, #12]
 80150a2:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80150a6:	461a      	mov	r2, r3
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	801a      	strh	r2, [r3, #0]
        break;
 80150ac:	e00e      	b.n	80150cc <phpalI14443p3b_Sw_GetConfig+0x6c>

    case PHPAL_I14443P3B_CONFIG_DRI:
        *pValue = (uint16_t)pDataParams->bDri;
 80150ae:	68fb      	ldr	r3, [r7, #12]
 80150b0:	7d1b      	ldrb	r3, [r3, #20]
 80150b2:	461a      	mov	r2, r3
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	801a      	strh	r2, [r3, #0]
        break;
 80150b8:	e008      	b.n	80150cc <phpalI14443p3b_Sw_GetConfig+0x6c>

    case PHPAL_I14443P3B_CONFIG_DSI:
        *pValue = (uint16_t)pDataParams->bDsi;
 80150ba:	68fb      	ldr	r3, [r7, #12]
 80150bc:	7d5b      	ldrb	r3, [r3, #21]
 80150be:	461a      	mov	r2, r3
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	801a      	strh	r2, [r3, #0]
        break;
 80150c4:	e002      	b.n	80150cc <phpalI14443p3b_Sw_GetConfig+0x6c>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 80150c6:	f240 4323 	movw	r3, #1059	@ 0x423
 80150ca:	e000      	b.n	80150ce <phpalI14443p3b_Sw_GetConfig+0x6e>
    }

    return PH_ERR_SUCCESS;
 80150cc:	2300      	movs	r3, #0
}
 80150ce:	4618      	mov	r0, r3
 80150d0:	3714      	adds	r7, #20
 80150d2:	46bd      	mov	sp, r7
 80150d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d8:	4770      	bx	lr
 80150da:	bf00      	nop

080150dc <phpalI14443p3b_Sw_RequestB>:
                                      uint8_t bAfi,
                                      uint8_t bExtAtqb,
                                      uint8_t * pAtqb,
                                      uint8_t * pAtqbLen
                                      )
{
 80150dc:	b580      	push	{r7, lr}
 80150de:	b086      	sub	sp, #24
 80150e0:	af04      	add	r7, sp, #16
 80150e2:	6078      	str	r0, [r7, #4]
 80150e4:	4608      	mov	r0, r1
 80150e6:	4611      	mov	r1, r2
 80150e8:	461a      	mov	r2, r3
 80150ea:	4603      	mov	r3, r0
 80150ec:	70fb      	strb	r3, [r7, #3]
 80150ee:	460b      	mov	r3, r1
 80150f0:	70bb      	strb	r3, [r7, #2]
 80150f2:	4613      	mov	r3, r2
 80150f4:	707b      	strb	r3, [r7, #1]
    return phpalI14443p3b_Sw_RequestBEx(pDataParams, 0, bNumSlots, bAfi, bExtAtqb, pAtqb, pAtqbLen);
 80150f6:	78b9      	ldrb	r1, [r7, #2]
 80150f8:	78fa      	ldrb	r2, [r7, #3]
 80150fa:	697b      	ldr	r3, [r7, #20]
 80150fc:	9302      	str	r3, [sp, #8]
 80150fe:	693b      	ldr	r3, [r7, #16]
 8015100:	9301      	str	r3, [sp, #4]
 8015102:	787b      	ldrb	r3, [r7, #1]
 8015104:	9300      	str	r3, [sp, #0]
 8015106:	460b      	mov	r3, r1
 8015108:	2100      	movs	r1, #0
 801510a:	6878      	ldr	r0, [r7, #4]
 801510c:	f000 fc54 	bl	80159b8 <phpalI14443p3b_Sw_RequestBEx>
 8015110:	4603      	mov	r3, r0
}
 8015112:	4618      	mov	r0, r3
 8015114:	3708      	adds	r7, #8
 8015116:	46bd      	mov	sp, r7
 8015118:	bd80      	pop	{r7, pc}

0801511a <phpalI14443p3b_Sw_WakeUpB>:
                                     uint8_t bAfi,
                                     uint8_t bExtAtqb,
                                     uint8_t * pAtqb,
                                     uint8_t * pAtqbLen
                                     )
{
 801511a:	b580      	push	{r7, lr}
 801511c:	b086      	sub	sp, #24
 801511e:	af04      	add	r7, sp, #16
 8015120:	6078      	str	r0, [r7, #4]
 8015122:	4608      	mov	r0, r1
 8015124:	4611      	mov	r1, r2
 8015126:	461a      	mov	r2, r3
 8015128:	4603      	mov	r3, r0
 801512a:	70fb      	strb	r3, [r7, #3]
 801512c:	460b      	mov	r3, r1
 801512e:	70bb      	strb	r3, [r7, #2]
 8015130:	4613      	mov	r3, r2
 8015132:	707b      	strb	r3, [r7, #1]
    return phpalI14443p3b_Sw_RequestBEx(pDataParams, 1, bNumSlots, bAfi, bExtAtqb, pAtqb, pAtqbLen);
 8015134:	78b9      	ldrb	r1, [r7, #2]
 8015136:	78fa      	ldrb	r2, [r7, #3]
 8015138:	697b      	ldr	r3, [r7, #20]
 801513a:	9302      	str	r3, [sp, #8]
 801513c:	693b      	ldr	r3, [r7, #16]
 801513e:	9301      	str	r3, [sp, #4]
 8015140:	787b      	ldrb	r3, [r7, #1]
 8015142:	9300      	str	r3, [sp, #0]
 8015144:	460b      	mov	r3, r1
 8015146:	2101      	movs	r1, #1
 8015148:	6878      	ldr	r0, [r7, #4]
 801514a:	f000 fc35 	bl	80159b8 <phpalI14443p3b_Sw_RequestBEx>
 801514e:	4603      	mov	r3, r0
}
 8015150:	4618      	mov	r0, r3
 8015152:	3708      	adds	r7, #8
 8015154:	46bd      	mov	sp, r7
 8015156:	bd80      	pop	{r7, pc}

08015158 <phpalI14443p3b_Sw_SlotMarker>:
                                        phpalI14443p3b_Sw_DataParams_t * pDataParams,
                                        uint8_t bSlotNumber,
                                        uint8_t * pAtqb,
                                        uint8_t * pAtqbLen
                                        )
{
 8015158:	b580      	push	{r7, lr}
 801515a:	b08a      	sub	sp, #40	@ 0x28
 801515c:	af02      	add	r7, sp, #8
 801515e:	60f8      	str	r0, [r7, #12]
 8015160:	607a      	str	r2, [r7, #4]
 8015162:	603b      	str	r3, [r7, #0]
 8015164:	460b      	mov	r3, r1
 8015166:	72fb      	strb	r3, [r7, #11]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aCmd[1];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8015168:	2300      	movs	r3, #0
 801516a:	61bb      	str	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 801516c:	2300      	movs	r3, #0
 801516e:	82fb      	strh	r3, [r7, #22]

    /* Parameter check */
    if ((bSlotNumber < 2U) || (bSlotNumber > 16U))
 8015170:	7afb      	ldrb	r3, [r7, #11]
 8015172:	2b01      	cmp	r3, #1
 8015174:	d902      	bls.n	801517c <phpalI14443p3b_Sw_SlotMarker+0x24>
 8015176:	7afb      	ldrb	r3, [r7, #11]
 8015178:	2b10      	cmp	r3, #16
 801517a:	d902      	bls.n	8015182 <phpalI14443p3b_Sw_SlotMarker+0x2a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 801517c:	f240 4321 	movw	r3, #1057	@ 0x421
 8015180:	e026      	b.n	80151d0 <phpalI14443p3b_Sw_SlotMarker+0x78>

    /* Note: No need to set time out and RxDeafTime since this is done in RequestB,
    which must be the previous command. */

    /* Build the command */
    aCmd[0] = (uint8_t)(((uint8_t)(bSlotNumber-1U) & 0x0FU) << 4U) | 0x05U;
 8015182:	7afb      	ldrb	r3, [r7, #11]
 8015184:	3b01      	subs	r3, #1
 8015186:	b2db      	uxtb	r3, r3
 8015188:	011b      	lsls	r3, r3, #4
 801518a:	b2db      	uxtb	r3, r3
 801518c:	f043 0305 	orr.w	r3, r3, #5
 8015190:	b2db      	uxtb	r3, r3
 8015192:	773b      	strb	r3, [r7, #28]

    /* Exchange command */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	6858      	ldr	r0, [r3, #4]
 8015198:	f107 021c 	add.w	r2, r7, #28
 801519c:	f107 0316 	add.w	r3, r7, #22
 80151a0:	9301      	str	r3, [sp, #4]
 80151a2:	f107 0318 	add.w	r3, r7, #24
 80151a6:	9300      	str	r3, [sp, #0]
 80151a8:	2301      	movs	r3, #1
 80151aa:	2100      	movs	r1, #0
 80151ac:	f7f8 ff3e 	bl	800e02c <phhalHw_Pn5180_Exchange>
 80151b0:	4603      	mov	r3, r0
 80151b2:	83fb      	strh	r3, [r7, #30]
 80151b4:	8bfb      	ldrh	r3, [r7, #30]
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	d001      	beq.n	80151be <phpalI14443p3b_Sw_SlotMarker+0x66>
 80151ba:	8bfb      	ldrh	r3, [r7, #30]
 80151bc:	e008      	b.n	80151d0 <phpalI14443p3b_Sw_SlotMarker+0x78>
        aCmd,
        1,
        &pResp,
        &wRespLength));

    return phpalI14443p3b_Sw_CheckATQBEx( pDataParams,
 80151be:	69b9      	ldr	r1, [r7, #24]
 80151c0:	8afa      	ldrh	r2, [r7, #22]
 80151c2:	683b      	ldr	r3, [r7, #0]
 80151c4:	9300      	str	r3, [sp, #0]
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	68f8      	ldr	r0, [r7, #12]
 80151ca:	f000 fb31 	bl	8015830 <phpalI14443p3b_Sw_CheckATQBEx>
 80151ce:	4603      	mov	r3, r0
        pResp,
        wRespLength,
        pAtqb,
        pAtqbLen
        );
}
 80151d0:	4618      	mov	r0, r3
 80151d2:	3720      	adds	r7, #32
 80151d4:	46bd      	mov	sp, r7
 80151d6:	bd80      	pop	{r7, pc}

080151d8 <phpalI14443p3b_Sw_HaltB>:

phStatus_t phpalI14443p3b_Sw_HaltB(
                                   phpalI14443p3b_Sw_DataParams_t * pDataParams
                                   )
{
 80151d8:	b580      	push	{r7, lr}
 80151da:	b088      	sub	sp, #32
 80151dc:	af02      	add	r7, sp, #8
 80151de:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aCmd[5];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 80151e0:	2300      	movs	r3, #0
 80151e2:	60fb      	str	r3, [r7, #12]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 80151e4:	2300      	movs	r3, #0
 80151e6:	817b      	strh	r3, [r7, #10]

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	685b      	ldr	r3, [r3, #4]
 80151ec:	f241 22ff 	movw	r2, #4863	@ 0x12ff
 80151f0:	210d      	movs	r1, #13
 80151f2:	4618      	mov	r0, r3
 80151f4:	f7f9 fad0 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 80151f8:	4603      	mov	r3, r0
 80151fa:	82fb      	strh	r3, [r7, #22]
 80151fc:	8afb      	ldrh	r3, [r7, #22]
 80151fe:	2b00      	cmp	r3, #0
 8015200:	d001      	beq.n	8015206 <phpalI14443p3b_Sw_HaltB+0x2e>
 8015202:	8afb      	ldrh	r3, [r7, #22]
 8015204:	e029      	b.n	801525a <phpalI14443p3b_Sw_HaltB+0x82>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
        PHPAL_I14443P3B_SW_ATTRIB_TIME_US + PHPAL_I14443P3B_SW_EXT_TIME_US));

    /* Build the command */
    aCmd[0] = PHPAL_I14443P3B_SW_HALT_CMD;
 8015206:	2350      	movs	r3, #80	@ 0x50
 8015208:	743b      	strb	r3, [r7, #16]
    (void)memcpy(&aCmd[1], pDataParams->pPupi, (uint32_t)(sizeof(pDataParams->pPupi)));
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	3309      	adds	r3, #9
 801520e:	681b      	ldr	r3, [r3, #0]
 8015210:	f8c7 3011 	str.w	r3, [r7, #17]

    /* Exchange command */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	6858      	ldr	r0, [r3, #4]
 8015218:	f107 0210 	add.w	r2, r7, #16
 801521c:	f107 030a 	add.w	r3, r7, #10
 8015220:	9301      	str	r3, [sp, #4]
 8015222:	f107 030c 	add.w	r3, r7, #12
 8015226:	9300      	str	r3, [sp, #0]
 8015228:	2305      	movs	r3, #5
 801522a:	2100      	movs	r1, #0
 801522c:	f7f8 fefe 	bl	800e02c <phhalHw_Pn5180_Exchange>
 8015230:	4603      	mov	r3, r0
 8015232:	82fb      	strh	r3, [r7, #22]
 8015234:	8afb      	ldrh	r3, [r7, #22]
 8015236:	2b00      	cmp	r3, #0
 8015238:	d001      	beq.n	801523e <phpalI14443p3b_Sw_HaltB+0x66>
 801523a:	8afb      	ldrh	r3, [r7, #22]
 801523c:	e00d      	b.n	801525a <phpalI14443p3b_Sw_HaltB+0x82>
        5,
        &pResp,
        &wRespLength));

    /* Response check */
    if ((wRespLength != 1U) || (pResp[0] != PHPAL_I14443P3B_SW_HALT_RESP))
 801523e:	897b      	ldrh	r3, [r7, #10]
 8015240:	2b01      	cmp	r3, #1
 8015242:	d103      	bne.n	801524c <phpalI14443p3b_Sw_HaltB+0x74>
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	781b      	ldrb	r3, [r3, #0]
 8015248:	2b00      	cmp	r3, #0
 801524a:	d002      	beq.n	8015252 <phpalI14443p3b_Sw_HaltB+0x7a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 801524c:	f240 4306 	movw	r3, #1030	@ 0x406
 8015250:	e003      	b.n	801525a <phpalI14443p3b_Sw_HaltB+0x82>
    }

    /* PUPI is invalid */
    pDataParams->bPupiValid = PH_OFF;
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	2200      	movs	r2, #0
 8015256:	735a      	strb	r2, [r3, #13]

    return PH_ERR_SUCCESS;
 8015258:	2300      	movs	r3, #0
}
 801525a:	4618      	mov	r0, r3
 801525c:	3718      	adds	r7, #24
 801525e:	46bd      	mov	sp, r7
 8015260:	bd80      	pop	{r7, pc}
 8015262:	0000      	movs	r0, r0
 8015264:	0000      	movs	r0, r0
	...

08015268 <phpalI14443p3b_Sw_Attrib>:
                                    uint8_t bCid,
                                    uint8_t bDri,
                                    uint8_t bDsi,
                                    uint8_t * pMbli
                                    )
{
 8015268:	b580      	push	{r7, lr}
 801526a:	b090      	sub	sp, #64	@ 0x40
 801526c:	af02      	add	r7, sp, #8
 801526e:	60f8      	str	r0, [r7, #12]
 8015270:	60b9      	str	r1, [r7, #8]
 8015272:	4611      	mov	r1, r2
 8015274:	461a      	mov	r2, r3
 8015276:	460b      	mov	r3, r1
 8015278:	71fb      	strb	r3, [r7, #7]
 801527a:	4613      	mov	r3, r2
 801527c:	71bb      	strb	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aCmd[9];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 801527e:	2300      	movs	r3, #0
 8015280:	61bb      	str	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8015282:	2300      	movs	r3, #0
 8015284:	82fb      	strh	r3, [r7, #22]
    uint8_t     PH_MEMLOC_REM bTemp = 0;
 8015286:	2300      	movs	r3, #0
 8015288:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    uint32_t    PH_MEMLOC_REM dwSfgt = 0;
 801528c:	2300      	movs	r3, #0
 801528e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t    PH_MEMLOC_REM dwFwt = 0;
 8015290:	2300      	movs	r3, #0
 8015292:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t   PH_MEMLOC_REM fFwt = 0;
 8015294:	f04f 0300 	mov.w	r3, #0
 8015298:	633b      	str	r3, [r7, #48]	@ 0x30

    /* parameter check */
    /* ATQB length */
    if ((bAtqbLen != 12U) && (bAtqbLen != 13U))
 801529a:	79fb      	ldrb	r3, [r7, #7]
 801529c:	2b0c      	cmp	r3, #12
 801529e:	d005      	beq.n	80152ac <phpalI14443p3b_Sw_Attrib+0x44>
 80152a0:	79fb      	ldrb	r3, [r7, #7]
 80152a2:	2b0d      	cmp	r3, #13
 80152a4:	d002      	beq.n	80152ac <phpalI14443p3b_Sw_Attrib+0x44>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 80152a6:	f240 4321 	movw	r3, #1057	@ 0x421
 80152aa:	e295      	b.n	80157d8 <phpalI14443p3b_Sw_Attrib+0x570>
    }

    /* check given DSI, DRI, FSDI */
    if ((bFsdi > PHPAL_I14443P3B_FRAMESIZE_MAX) || (bDri > 0x03U) || (bDsi > 0x03U))
 80152ac:	79bb      	ldrb	r3, [r7, #6]
 80152ae:	2b0c      	cmp	r3, #12
 80152b0:	d807      	bhi.n	80152c2 <phpalI14443p3b_Sw_Attrib+0x5a>
 80152b2:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80152b6:	2b03      	cmp	r3, #3
 80152b8:	d803      	bhi.n	80152c2 <phpalI14443p3b_Sw_Attrib+0x5a>
 80152ba:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80152be:	2b03      	cmp	r3, #3
 80152c0:	d902      	bls.n	80152c8 <phpalI14443p3b_Sw_Attrib+0x60>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 80152c2:	f240 4321 	movw	r3, #1057	@ 0x421
 80152c6:	e287      	b.n	80157d8 <phpalI14443p3b_Sw_Attrib+0x570>
    }

    if ((bFsdi < PHPAL_I14443P3B_EMVCO_FRAMESIZE_MIN) && (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO))
 80152c8:	79bb      	ldrb	r3, [r7, #6]
 80152ca:	2b07      	cmp	r3, #7
 80152cc:	d807      	bhi.n	80152de <phpalI14443p3b_Sw_Attrib+0x76>
 80152ce:	68fb      	ldr	r3, [r7, #12]
 80152d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80152d4:	2b01      	cmp	r3, #1
 80152d6:	d102      	bne.n	80152de <phpalI14443p3b_Sw_Attrib+0x76>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 80152d8:	f240 4321 	movw	r3, #1057	@ 0x421
 80152dc:	e27c      	b.n	80157d8 <phpalI14443p3b_Sw_Attrib+0x570>
    }

    /* build the command frame */
    aCmd[0] = PHPAL_I14443P3B_SW_ATTRIB_CMD;
 80152de:	231d      	movs	r3, #29
 80152e0:	773b      	strb	r3, [r7, #28]

    /* copy PUPI to command frame */
    (void)memcpy(&aCmd[1], &pAtqb[1], 4);
 80152e2:	68bb      	ldr	r3, [r7, #8]
 80152e4:	3301      	adds	r3, #1
 80152e6:	681b      	ldr	r3, [r3, #0]
 80152e8:	f8c7 301d 	str.w	r3, [r7, #29]

    /* Param1: TR0, TR1, SOF/EOF suppression */
    aCmd[5] = pDataParams->bAttribParam1;
 80152ec:	68fb      	ldr	r3, [r7, #12]
 80152ee:	7d9b      	ldrb	r3, [r3, #22]
 80152f0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    /* Param2: Dsi, Dri, FSDI */
    aCmd[6] = (bDsi << 6U) | (bDri << 4U) | bFsdi;
 80152f4:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 80152f8:	019b      	lsls	r3, r3, #6
 80152fa:	b25a      	sxtb	r2, r3
 80152fc:	f997 3044 	ldrsb.w	r3, [r7, #68]	@ 0x44
 8015300:	011b      	lsls	r3, r3, #4
 8015302:	b25b      	sxtb	r3, r3
 8015304:	4313      	orrs	r3, r2
 8015306:	b25a      	sxtb	r2, r3
 8015308:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801530c:	4313      	orrs	r3, r2
 801530e:	b25b      	sxtb	r3, r3
 8015310:	b2db      	uxtb	r3, r3
 8015312:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

    /* Emvco: case_id TB107_X
     * PCD shall disregards the value of bits b4-b2 of Protocol_Type
     */
    if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8015316:	68fb      	ldr	r3, [r7, #12]
 8015318:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801531c:	2b01      	cmp	r3, #1
 801531e:	d108      	bne.n	8015332 <phpalI14443p3b_Sw_Attrib+0xca>
    {
        aCmd[7] = pAtqb[10] & 0x01U;
 8015320:	68bb      	ldr	r3, [r7, #8]
 8015322:	330a      	adds	r3, #10
 8015324:	781b      	ldrb	r3, [r3, #0]
 8015326:	f003 0301 	and.w	r3, r3, #1
 801532a:	b2db      	uxtb	r3, r3
 801532c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015330:	e007      	b.n	8015342 <phpalI14443p3b_Sw_Attrib+0xda>
    }
    else
    {
        /* Param3: confirmation of protocol info byte 2 (protocol type and minimum TR2) */
        aCmd[7] = pAtqb[10] & 0x07U;
 8015332:	68bb      	ldr	r3, [r7, #8]
 8015334:	330a      	adds	r3, #10
 8015336:	781b      	ldrb	r3, [r3, #0]
 8015338:	f003 0307 	and.w	r3, r3, #7
 801533c:	b2db      	uxtb	r3, r3
 801533e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    }

    /* Param4: Cid */
    /* check if supported by PICC, check given value for < 0x0F */
    if (0U != (pAtqb[11] & 0x01U))
 8015342:	68bb      	ldr	r3, [r7, #8]
 8015344:	330b      	adds	r3, #11
 8015346:	781b      	ldrb	r3, [r3, #0]
 8015348:	f003 0301 	and.w	r3, r3, #1
 801534c:	2b00      	cmp	r3, #0
 801534e:	d006      	beq.n	801535e <phpalI14443p3b_Sw_Attrib+0xf6>
    {
        if (bCid > 0x0EU)
 8015350:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8015354:	2b0e      	cmp	r3, #14
 8015356:	d905      	bls.n	8015364 <phpalI14443p3b_Sw_Attrib+0xfc>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8015358:	f240 4321 	movw	r3, #1057	@ 0x421
 801535c:	e23c      	b.n	80157d8 <phpalI14443p3b_Sw_Attrib+0x570>
        }
    }
    else
    {
        bCid = 0x00;
 801535e:	2300      	movs	r3, #0
 8015360:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    }
    aCmd[8] = bCid;
 8015364:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8015368:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

    /* Calculate FWT timeout */
    /* get the Fwt, because we need it for the timeout. */
    pDataParams->bFwi = (uint8_t)(pAtqb[11] >> 4U);
 801536c:	68bb      	ldr	r3, [r7, #8]
 801536e:	330b      	adds	r3, #11
 8015370:	781b      	ldrb	r3, [r3, #0]
 8015372:	091b      	lsrs	r3, r3, #4
 8015374:	b2da      	uxtb	r2, r3
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	745a      	strb	r2, [r3, #17]
    if (pDataParams->bFwi == 0x0FU)
 801537a:	68fb      	ldr	r3, [r7, #12]
 801537c:	7c5b      	ldrb	r3, [r3, #17]
 801537e:	2b0f      	cmp	r3, #15
 8015380:	d102      	bne.n	8015388 <phpalI14443p3b_Sw_Attrib+0x120>
    {
        pDataParams->bFwi = PHPAL_I14443P3B_SW_FWI_DEFAULT;
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	2204      	movs	r2, #4
 8015386:	745a      	strb	r2, [r3, #17]
    }

    /* Calculate FWT timeout */
    fFwt = (PHPAL_I14443P3B_SW_FWT_MIN_US * ((uint32_t)1U << pDataParams->bFwi));
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	7c5b      	ldrb	r3, [r3, #17]
 801538c:	461a      	mov	r2, r3
 801538e:	2301      	movs	r3, #1
 8015390:	4093      	lsls	r3, r2
 8015392:	4618      	mov	r0, r3
 8015394:	f7eb f8b6 	bl	8000504 <__aeabi_ui2d>
 8015398:	a3ab      	add	r3, pc, #684	@ (adr r3, 8015648 <phpalI14443p3b_Sw_Attrib+0x3e0>)
 801539a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801539e:	f7eb f92b 	bl	80005f8 <__aeabi_dmul>
 80153a2:	4602      	mov	r2, r0
 80153a4:	460b      	mov	r3, r1
 80153a6:	4610      	mov	r0, r2
 80153a8:	4619      	mov	r1, r3
 80153aa:	f7eb fbfd 	bl	8000ba8 <__aeabi_d2f>
 80153ae:	4603      	mov	r3, r0
 80153b0:	633b      	str	r3, [r7, #48]	@ 0x30
    if(pDataParams->bOpeMode == RD_LIB_MODE_ISO)
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80153b8:	2b03      	cmp	r3, #3
 80153ba:	d108      	bne.n	80153ce <phpalI14443p3b_Sw_Attrib+0x166>
    {
        /* Add extension time */
        fFwt += PHPAL_I14443P3B_SW_EXT_TIME_US;
 80153bc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80153c0:	ed9f 7a9d 	vldr	s14, [pc, #628]	@ 8015638 <phpalI14443p3b_Sw_Attrib+0x3d0>
 80153c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80153c8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
 80153cc:	e014      	b.n	80153f8 <phpalI14443p3b_Sw_Attrib+0x190>
    }
    else
    {
        /* As per Digital Spec V1.1 req 7.9.1.3, NFC Forum Device SHALL wait at least FWT + delta FWTB for a Response */
        fFwt += PHPAL_I14443P3B_SW_DELTA_FWT_US;
 80153ce:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80153d2:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 801563c <phpalI14443p3b_Sw_Attrib+0x3d4>
 80153d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80153da:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) {
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80153e4:	2b01      	cmp	r3, #1
 80153e6:	d107      	bne.n	80153f8 <phpalI14443p3b_Sw_Attrib+0x190>
            /* As per EMVCo, add delta Tpcd time along with delta FWT time */
            fFwt += PHPAL_I14443P3B_SW_DELTA_TPCD_US;
 80153e8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80153ec:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8015640 <phpalI14443p3b_Sw_Attrib+0x3d8>
 80153f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80153f4:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        }
    }
    dwFwt = (uint32_t)fFwt;
 80153f8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80153fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015400:	ee17 3a90 	vmov	r3, s15
 8015404:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* ISO IEC 14443-3, 7.9.4.3 FWI:
    In case of extended ATQB ...
    ... FWT applies after the Answer to ATTRIB and
    ... the waiting time for the Answer to ATTRIB is fixed to ~4,8 ms */

    if (bAtqbLen == 13U)
 8015406:	79fb      	ldrb	r3, [r7, #7]
 8015408:	2b0d      	cmp	r3, #13
 801540a:	d10e      	bne.n	801542a <phpalI14443p3b_Sw_Attrib+0x1c2>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	685b      	ldr	r3, [r3, #4]
 8015410:	f241 22ff 	movw	r2, #4863	@ 0x12ff
 8015414:	210d      	movs	r1, #13
 8015416:	4618      	mov	r0, r3
 8015418:	f7f9 f9be 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 801541c:	4603      	mov	r3, r0
 801541e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8015420:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015422:	2b00      	cmp	r3, #0
 8015424:	d029      	beq.n	801547a <phpalI14443p3b_Sw_Attrib+0x212>
 8015426:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015428:	e1d6      	b.n	80157d8 <phpalI14443p3b_Sw_Attrib+0x570>
            PHPAL_I14443P3B_SW_ATTRIB_TIME_US + PHPAL_I14443P3B_SW_EXT_TIME_US));
    }
    else
    {
        /* Set FWT timeout */
        if (dwFwt > 0xFFFFU)
 801542a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801542c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015430:	d314      	bcc.n	801545c <phpalI14443p3b_Sw_Attrib+0x1f4>
        {
            /* +1 is added to the timeout in millisecond to compensate the
             * fractional microseconds lost in division by 1000 */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8015432:	68fb      	ldr	r3, [r7, #12]
 8015434:	6858      	ldr	r0, [r3, #4]
 8015436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015438:	4a82      	ldr	r2, [pc, #520]	@ (8015644 <phpalI14443p3b_Sw_Attrib+0x3dc>)
 801543a:	fba2 2303 	umull	r2, r3, r2, r3
 801543e:	099b      	lsrs	r3, r3, #6
 8015440:	b29b      	uxth	r3, r3
 8015442:	3301      	adds	r3, #1
 8015444:	b29b      	uxth	r3, r3
 8015446:	461a      	mov	r2, r3
 8015448:	210e      	movs	r1, #14
 801544a:	f7f9 f9a5 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 801544e:	4603      	mov	r3, r0
 8015450:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8015452:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015454:	2b00      	cmp	r3, #0
 8015456:	d010      	beq.n	801547a <phpalI14443p3b_Sw_Attrib+0x212>
 8015458:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801545a:	e1bd      	b.n	80157d8 <phpalI14443p3b_Sw_Attrib+0x570>
                PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
                (uint16_t)((dwFwt / 1000U) + 1U)));
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	685b      	ldr	r3, [r3, #4]
 8015460:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015462:	b292      	uxth	r2, r2
 8015464:	210d      	movs	r1, #13
 8015466:	4618      	mov	r0, r3
 8015468:	f7f9 f996 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 801546c:	4603      	mov	r3, r0
 801546e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8015470:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015472:	2b00      	cmp	r3, #0
 8015474:	d001      	beq.n	801547a <phpalI14443p3b_Sw_Attrib+0x212>
 8015476:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015478:	e1ae      	b.n	80157d8 <phpalI14443p3b_Sw_Attrib+0x570>

        }
    }

    /* Exchange command */
    wRespLength = 0;
 801547a:	2300      	movs	r3, #0
 801547c:	82fb      	strh	r3, [r7, #22]
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	6858      	ldr	r0, [r3, #4]
 8015482:	f107 021c 	add.w	r2, r7, #28
 8015486:	f107 0316 	add.w	r3, r7, #22
 801548a:	9301      	str	r3, [sp, #4]
 801548c:	f107 0318 	add.w	r3, r7, #24
 8015490:	9300      	str	r3, [sp, #0]
 8015492:	2309      	movs	r3, #9
 8015494:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8015498:	f7f8 fdc8 	bl	800e02c <phhalHw_Pn5180_Exchange>
 801549c:	4603      	mov	r3, r0
 801549e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80154a0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d001      	beq.n	80154aa <phpalI14443p3b_Sw_Attrib+0x242>
 80154a6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80154a8:	e196      	b.n	80157d8 <phpalI14443p3b_Sw_Attrib+0x570>
        9,
        &pResp,
        &wRespLength));

    /* the remaining part of the ATTRIB command frame holds the Higher Layer INF */
    statusTmp = phhalHw_Exchange(
 80154aa:	68fb      	ldr	r3, [r7, #12]
 80154ac:	6858      	ldr	r0, [r3, #4]
 80154ae:	68fb      	ldr	r3, [r7, #12]
 80154b0:	699a      	ldr	r2, [r3, #24]
 80154b2:	68fb      	ldr	r3, [r7, #12]
 80154b4:	8bd9      	ldrh	r1, [r3, #30]
 80154b6:	f107 0316 	add.w	r3, r7, #22
 80154ba:	9301      	str	r3, [sp, #4]
 80154bc:	f107 0318 	add.w	r3, r7, #24
 80154c0:	9300      	str	r3, [sp, #0]
 80154c2:	460b      	mov	r3, r1
 80154c4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80154c8:	f7f8 fdb0 	bl	800e02c <phhalHw_Pn5180_Exchange>
 80154cc:	4603      	mov	r3, r0
 80154ce:	86fb      	strh	r3, [r7, #54]	@ 0x36
        pDataParams->pHigherLayerInf,
        pDataParams->wHigherLayerInfLen,
        &pResp,
        &wRespLength);

    bTemp = pDataParams->bRetryCount;
 80154d0:	68fb      	ldr	r3, [r7, #12]
 80154d2:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80154d6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    /* check and perform re-transmission of ATTRIB in case of Transmission or Timeout error
     * Nfc Digital Specification ver 1.1, Req 14.7.1.1
     */
    while((bTemp > 0U) && (PH_ERR_SUCCESS != (statusTmp & PH_ERR_MASK)))
 80154da:	e04d      	b.n	8015578 <phpalI14443p3b_Sw_Attrib+0x310>
    {
        /* Return error other than Timeout or Noise Error */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 80154dc:	68fb      	ldr	r3, [r7, #12]
 80154de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80154e2:	2b01      	cmp	r3, #1
 80154e4:	d118      	bne.n	8015518 <phpalI14443p3b_Sw_Attrib+0x2b0>
        {
            if((((statusTmp & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) || ((statusTmp & PH_ERR_MASK) == PH_ERR_NOISE_ERROR)))
 80154e6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80154e8:	b2db      	uxtb	r3, r3
 80154ea:	2b01      	cmp	r3, #1
 80154ec:	d003      	beq.n	80154f6 <phpalI14443p3b_Sw_Attrib+0x28e>
 80154ee:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80154f0:	b2db      	uxtb	r3, r3
 80154f2:	2b11      	cmp	r3, #17
 80154f4:	d10e      	bne.n	8015514 <phpalI14443p3b_Sw_Attrib+0x2ac>
            {
                /* Wait for at least Tmin retransmission delay. */
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 80154f6:	68fb      	ldr	r3, [r7, #12]
 80154f8:	685b      	ldr	r3, [r3, #4]
 80154fa:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80154fe:	2100      	movs	r1, #0
 8015500:	4618      	mov	r0, r3
 8015502:	f7f9 f88f 	bl	800e624 <phhalHw_Pn5180_Wait>
 8015506:	4603      	mov	r3, r0
 8015508:	86fb      	strh	r3, [r7, #54]	@ 0x36
 801550a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801550c:	2b00      	cmp	r3, #0
 801550e:	d003      	beq.n	8015518 <phpalI14443p3b_Sw_Attrib+0x2b0>
 8015510:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015512:	e161      	b.n	80157d8 <phpalI14443p3b_Sw_Attrib+0x570>
                    PHHAL_HW_TIME_MICROSECONDS,
                    PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));
            }
            else
            {
                return statusTmp;
 8015514:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015516:	e15f      	b.n	80157d8 <phpalI14443p3b_Sw_Attrib+0x570>
            }
        }

         /* Emvco:  case_id TB305_X  TB312_X and Req. 9.6.1.3 */
        wRespLength = 0;
 8015518:	2300      	movs	r3, #0
 801551a:	82fb      	strh	r3, [r7, #22]

        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 801551c:	68fb      	ldr	r3, [r7, #12]
 801551e:	6858      	ldr	r0, [r3, #4]
 8015520:	f107 021c 	add.w	r2, r7, #28
 8015524:	f107 0316 	add.w	r3, r7, #22
 8015528:	9301      	str	r3, [sp, #4]
 801552a:	f107 0318 	add.w	r3, r7, #24
 801552e:	9300      	str	r3, [sp, #0]
 8015530:	2309      	movs	r3, #9
 8015532:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8015536:	f7f8 fd79 	bl	800e02c <phhalHw_Pn5180_Exchange>
 801553a:	4603      	mov	r3, r0
 801553c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 801553e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015540:	2b00      	cmp	r3, #0
 8015542:	d001      	beq.n	8015548 <phpalI14443p3b_Sw_Attrib+0x2e0>
 8015544:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015546:	e147      	b.n	80157d8 <phpalI14443p3b_Sw_Attrib+0x570>
            9,
            &pResp,
            &wRespLength));

        /* the remaining part of the ATTRIB command frame holds the Higher Layer INF */
        statusTmp = phhalHw_Exchange(
 8015548:	68fb      	ldr	r3, [r7, #12]
 801554a:	6858      	ldr	r0, [r3, #4]
 801554c:	68fb      	ldr	r3, [r7, #12]
 801554e:	699a      	ldr	r2, [r3, #24]
 8015550:	68fb      	ldr	r3, [r7, #12]
 8015552:	8bd9      	ldrh	r1, [r3, #30]
 8015554:	f107 0316 	add.w	r3, r7, #22
 8015558:	9301      	str	r3, [sp, #4]
 801555a:	f107 0318 	add.w	r3, r7, #24
 801555e:	9300      	str	r3, [sp, #0]
 8015560:	460b      	mov	r3, r1
 8015562:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8015566:	f7f8 fd61 	bl	800e02c <phhalHw_Pn5180_Exchange>
 801556a:	4603      	mov	r3, r0
 801556c:	86fb      	strh	r3, [r7, #54]	@ 0x36
            pDataParams->pHigherLayerInf,
            pDataParams->wHigherLayerInfLen,
            &pResp,
            &wRespLength);

        bTemp--;
 801556e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8015572:	3b01      	subs	r3, #1
 8015574:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    while((bTemp > 0U) && (PH_ERR_SUCCESS != (statusTmp & PH_ERR_MASK)))
 8015578:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801557c:	2b00      	cmp	r3, #0
 801557e:	d003      	beq.n	8015588 <phpalI14443p3b_Sw_Attrib+0x320>
 8015580:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015582:	b2db      	uxtb	r3, r3
 8015584:	2b00      	cmp	r3, #0
 8015586:	d1a9      	bne.n	80154dc <phpalI14443p3b_Sw_Attrib+0x274>
    }

    PH_CHECK_SUCCESS(statusTmp);
 8015588:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801558a:	2b00      	cmp	r3, #0
 801558c:	d001      	beq.n	8015592 <phpalI14443p3b_Sw_Attrib+0x32a>
 801558e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015590:	e122      	b.n	80157d8 <phpalI14443p3b_Sw_Attrib+0x570>

    /* we hopefully received at least one byte */
    if (wRespLength < 1U)
 8015592:	8afb      	ldrh	r3, [r7, #22]
 8015594:	2b00      	cmp	r3, #0
 8015596:	d102      	bne.n	801559e <phpalI14443p3b_Sw_Attrib+0x336>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 8015598:	f240 4306 	movw	r3, #1030	@ 0x406
 801559c:	e11c      	b.n	80157d8 <phpalI14443p3b_Sw_Attrib+0x570>
    }

    /* we receive MBLI and CID in the first byte: */
    /* check the received cid: */
    if (((pAtqb[11] & 0x01U) != 0U) && ((pResp[0] & 0x0FU) != bCid))
 801559e:	68bb      	ldr	r3, [r7, #8]
 80155a0:	330b      	adds	r3, #11
 80155a2:	781b      	ldrb	r3, [r3, #0]
 80155a4:	f003 0301 	and.w	r3, r3, #1
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d00a      	beq.n	80155c2 <phpalI14443p3b_Sw_Attrib+0x35a>
 80155ac:	69bb      	ldr	r3, [r7, #24]
 80155ae:	781b      	ldrb	r3, [r3, #0]
 80155b0:	f003 020f 	and.w	r2, r3, #15
 80155b4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80155b8:	429a      	cmp	r2, r3
 80155ba:	d002      	beq.n	80155c2 <phpalI14443p3b_Sw_Attrib+0x35a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 80155bc:	f240 4306 	movw	r3, #1030	@ 0x406
 80155c0:	e10a      	b.n	80157d8 <phpalI14443p3b_Sw_Attrib+0x570>
    }

    /* If the CID is not supported, PICC SHALL set the CID to 0 */
    /* PCD SHALL treat a CID field with a different value as Protocol Error */
    /* Digital Protocol 1.1, Requirements 166 and EMVCo 2.6, Requirements 6.24, 6.4.1.10 */
    if ((pDataParams->bOpeMode != RD_LIB_MODE_ISO) && (((pAtqb[11] & 0x01U) == 0U) && ((pResp[0] & 0x0FU) != 0x0U)))
 80155c2:	68fb      	ldr	r3, [r7, #12]
 80155c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80155c8:	2b03      	cmp	r3, #3
 80155ca:	d00f      	beq.n	80155ec <phpalI14443p3b_Sw_Attrib+0x384>
 80155cc:	68bb      	ldr	r3, [r7, #8]
 80155ce:	330b      	adds	r3, #11
 80155d0:	781b      	ldrb	r3, [r3, #0]
 80155d2:	f003 0301 	and.w	r3, r3, #1
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d108      	bne.n	80155ec <phpalI14443p3b_Sw_Attrib+0x384>
 80155da:	69bb      	ldr	r3, [r7, #24]
 80155dc:	781b      	ldrb	r3, [r3, #0]
 80155de:	f003 030f 	and.w	r3, r3, #15
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	d002      	beq.n	80155ec <phpalI14443p3b_Sw_Attrib+0x384>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 80155e6:	f240 4306 	movw	r3, #1030	@ 0x406
 80155ea:	e0f5      	b.n	80157d8 <phpalI14443p3b_Sw_Attrib+0x570>
    }

    /* Note: ISO14443-3 7.11: The MBLI (maximum buffer size) gives information about
    the PICCs internal buffer */
    *pMbli = (uint8_t)(pResp[0] >> 4U);
 80155ec:	69bb      	ldr	r3, [r7, #24]
 80155ee:	781b      	ldrb	r3, [r3, #0]
 80155f0:	091b      	lsrs	r3, r3, #4
 80155f2:	b2da      	uxtb	r2, r3
 80155f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80155f6:	701a      	strb	r2, [r3, #0]

    if (1U < wRespLength)
 80155f8:	8afb      	ldrh	r3, [r7, #22]
 80155fa:	2b01      	cmp	r3, #1
 80155fc:	d931      	bls.n	8015662 <phpalI14443p3b_Sw_Attrib+0x3fa>
    {
        /* we received some Higher Layer INF bytes:
        ISO14443-3 TypeB, 7.11 Higher Response (optional 0 or "more" bytes) --> see page 46. */
        pDataParams->wHigherLayerRespLen = wRespLength - 1u;
 80155fe:	8afb      	ldrh	r3, [r7, #22]
 8015600:	3b01      	subs	r3, #1
 8015602:	b29a      	uxth	r2, r3
 8015604:	68fb      	ldr	r3, [r7, #12]
 8015606:	84da      	strh	r2, [r3, #38]	@ 0x26

        /* should we have received it? */
        if ( pDataParams->wHigherLayerInfLen == 0U )
 8015608:	68fb      	ldr	r3, [r7, #12]
 801560a:	8bdb      	ldrh	r3, [r3, #30]
 801560c:	2b00      	cmp	r3, #0
 801560e:	d105      	bne.n	801561c <phpalI14443p3b_Sw_Attrib+0x3b4>
        {
            pDataParams->wHigherLayerRespLen = 0;
 8015610:	68fb      	ldr	r3, [r7, #12]
 8015612:	2200      	movs	r2, #0
 8015614:	84da      	strh	r2, [r3, #38]	@ 0x26
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 8015616:	f240 4306 	movw	r3, #1030	@ 0x406
 801561a:	e0dd      	b.n	80157d8 <phpalI14443p3b_Sw_Attrib+0x570>
        }

        if (pDataParams->wHigherLayerRespLen > pDataParams->wHigherLayerRespSize)
 801561c:	68fb      	ldr	r3, [r7, #12]
 801561e:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 8015620:	68fb      	ldr	r3, [r7, #12]
 8015622:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015624:	429a      	cmp	r2, r3
 8015626:	d913      	bls.n	8015650 <phpalI14443p3b_Sw_Attrib+0x3e8>
        {
            pDataParams->wHigherLayerRespLen = 0;
 8015628:	68fb      	ldr	r3, [r7, #12]
 801562a:	2200      	movs	r2, #0
 801562c:	84da      	strh	r2, [r3, #38]	@ 0x26
            return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_PAL_ISO14443P3B);
 801562e:	f240 4304 	movw	r3, #1028	@ 0x404
 8015632:	e0d1      	b.n	80157d8 <phpalI14443p3b_Sw_Attrib+0x570>
 8015634:	f3af 8000 	nop.w
 8015638:	427c0000 	.word	0x427c0000
 801563c:	4566a000 	.word	0x4566a000
 8015640:	447a0000 	.word	0x447a0000
 8015644:	10624dd3 	.word	0x10624dd3
 8015648:	d12e109d 	.word	0xd12e109d
 801564c:	4072e109 	.word	0x4072e109
        }
        (void)memcpy( pDataParams->pHigherLayerResp, &pResp[1], pDataParams->wHigherLayerRespLen );
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	6a18      	ldr	r0, [r3, #32]
 8015654:	69bb      	ldr	r3, [r7, #24]
 8015656:	1c59      	adds	r1, r3, #1
 8015658:	68fb      	ldr	r3, [r7, #12]
 801565a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 801565c:	461a      	mov	r2, r3
 801565e:	f00b f998 	bl	8020992 <memcpy>
    }

    /* Now, that the PICC accepted our protocol settings, we can store them in the structure */
    if (pDataParams->bOpeMode != RD_LIB_MODE_ISO)
 8015662:	68fb      	ldr	r3, [r7, #12]
 8015664:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015668:	2b03      	cmp	r3, #3
 801566a:	d006      	beq.n	801567a <phpalI14443p3b_Sw_Attrib+0x412>
    {
        pDataParams->bCidSupported = 0x00;
 801566c:	68fb      	ldr	r3, [r7, #12]
 801566e:	2200      	movs	r2, #0
 8015670:	739a      	strb	r2, [r3, #14]
        pDataParams->bNadSupported = 0x00;
 8015672:	68fb      	ldr	r3, [r7, #12]
 8015674:	2200      	movs	r2, #0
 8015676:	73da      	strb	r2, [r3, #15]
 8015678:	e011      	b.n	801569e <phpalI14443p3b_Sw_Attrib+0x436>
    }
    else
    {
        pDataParams->bCidSupported = pAtqb[11] & 0x01U;
 801567a:	68bb      	ldr	r3, [r7, #8]
 801567c:	330b      	adds	r3, #11
 801567e:	781b      	ldrb	r3, [r3, #0]
 8015680:	f003 0301 	and.w	r3, r3, #1
 8015684:	b2da      	uxtb	r2, r3
 8015686:	68fb      	ldr	r3, [r7, #12]
 8015688:	739a      	strb	r2, [r3, #14]
        pDataParams->bNadSupported = (pAtqb[11] & 0x02U) >> 1U;
 801568a:	68bb      	ldr	r3, [r7, #8]
 801568c:	330b      	adds	r3, #11
 801568e:	781b      	ldrb	r3, [r3, #0]
 8015690:	085b      	lsrs	r3, r3, #1
 8015692:	b2db      	uxtb	r3, r3
 8015694:	f003 0301 	and.w	r3, r3, #1
 8015698:	b2da      	uxtb	r2, r3
 801569a:	68fb      	ldr	r3, [r7, #12]
 801569c:	73da      	strb	r2, [r3, #15]
    }
    pDataParams->bCid = pResp[0] & 0x0FU;
 801569e:	69bb      	ldr	r3, [r7, #24]
 80156a0:	781b      	ldrb	r3, [r3, #0]
 80156a2:	f003 030f 	and.w	r3, r3, #15
 80156a6:	b2da      	uxtb	r2, r3
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	741a      	strb	r2, [r3, #16]
    pDataParams->bFsci = (uint8_t)(pAtqb[10] >> 4U);
 80156ac:	68bb      	ldr	r3, [r7, #8]
 80156ae:	330a      	adds	r3, #10
 80156b0:	781b      	ldrb	r3, [r3, #0]
 80156b2:	091b      	lsrs	r3, r3, #4
 80156b4:	b2da      	uxtb	r2, r3
 80156b6:	68fb      	ldr	r3, [r7, #12]
 80156b8:	749a      	strb	r2, [r3, #18]
    pDataParams->bFsdi = bFsdi;
 80156ba:	68fb      	ldr	r3, [r7, #12]
 80156bc:	79ba      	ldrb	r2, [r7, #6]
 80156be:	74da      	strb	r2, [r3, #19]
    pDataParams->bDri = bDri;
 80156c0:	68fb      	ldr	r3, [r7, #12]
 80156c2:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 80156c6:	751a      	strb	r2, [r3, #20]
    pDataParams->bDsi = bDsi;
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 80156ce:	755a      	strb	r2, [r3, #21]

    bTemp = 0;
 80156d0:	2300      	movs	r3, #0
 80156d2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* If we had an extended ATQB, the timeout was set for the reception
    of the ATTRIB command (see line 280). */
    if (bAtqbLen == 13U)
 80156d6:	79fb      	ldrb	r3, [r7, #7]
 80156d8:	2b0d      	cmp	r3, #13
 80156da:	d125      	bne.n	8015728 <phpalI14443p3b_Sw_Attrib+0x4c0>
    {
        /* Set FWT timeout */
        if (dwFwt > 0xFFFFU)
 80156dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80156e2:	d312      	bcc.n	801570a <phpalI14443p3b_Sw_Attrib+0x4a2>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80156e4:	68fb      	ldr	r3, [r7, #12]
 80156e6:	6858      	ldr	r0, [r3, #4]
 80156e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156ea:	4a3d      	ldr	r2, [pc, #244]	@ (80157e0 <phpalI14443p3b_Sw_Attrib+0x578>)
 80156ec:	fba2 2303 	umull	r2, r3, r2, r3
 80156f0:	099b      	lsrs	r3, r3, #6
 80156f2:	b29b      	uxth	r3, r3
 80156f4:	461a      	mov	r2, r3
 80156f6:	210e      	movs	r1, #14
 80156f8:	f7f9 f84e 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 80156fc:	4603      	mov	r3, r0
 80156fe:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8015700:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015702:	2b00      	cmp	r3, #0
 8015704:	d010      	beq.n	8015728 <phpalI14443p3b_Sw_Attrib+0x4c0>
 8015706:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015708:	e066      	b.n	80157d8 <phpalI14443p3b_Sw_Attrib+0x570>
                PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
                (uint16_t)(dwFwt / 1000U)));
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801570a:	68fb      	ldr	r3, [r7, #12]
 801570c:	685b      	ldr	r3, [r3, #4]
 801570e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015710:	b292      	uxth	r2, r2
 8015712:	210d      	movs	r1, #13
 8015714:	4618      	mov	r0, r3
 8015716:	f7f9 f83f 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 801571a:	4603      	mov	r3, r0
 801571c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 801571e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015720:	2b00      	cmp	r3, #0
 8015722:	d001      	beq.n	8015728 <phpalI14443p3b_Sw_Attrib+0x4c0>
 8015724:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015726:	e057      	b.n	80157d8 <phpalI14443p3b_Sw_Attrib+0x570>
                (uint16_t)dwFwt));
        }
    }

    /* Set baud rate on Pcd */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p3b_Sw_SetReaderBaudRateEx(pDataParams));
 8015728:	68f8      	ldr	r0, [r7, #12]
 801572a:	f000 f9ef 	bl	8015b0c <phpalI14443p3b_Sw_SetReaderBaudRateEx>
 801572e:	4603      	mov	r3, r0
 8015730:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8015732:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015734:	2b00      	cmp	r3, #0
 8015736:	d001      	beq.n	801573c <phpalI14443p3b_Sw_Attrib+0x4d4>
 8015738:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801573a:	e04d      	b.n	80157d8 <phpalI14443p3b_Sw_Attrib+0x570>

    /* Applying Tx Wait saved according to the TR value of ATQb as setreaderbaudrateEx restores default */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	6858      	ldr	r0, [r3, #4]
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	8b9b      	ldrh	r3, [r3, #28]
 8015744:	461a      	mov	r2, r3
 8015746:	2107      	movs	r1, #7
 8015748:	f7f9 f826 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 801574c:	4603      	mov	r3, r0
 801574e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8015750:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015752:	2b00      	cmp	r3, #0
 8015754:	d001      	beq.n	801575a <phpalI14443p3b_Sw_Attrib+0x4f2>
 8015756:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015758:	e03e      	b.n	80157d8 <phpalI14443p3b_Sw_Attrib+0x570>
        PHHAL_HW_CONFIG_TXWAIT_US,
        pDataParams->wTxWait));

    /* If we have had received an extended ATQB with an SFGT (startup frame guard time)
    we need to wait this time here. */
    if (bAtqbLen == 13U)
 801575a:	79fb      	ldrb	r3, [r7, #7]
 801575c:	2b0d      	cmp	r3, #13
 801575e:	d13a      	bne.n	80157d6 <phpalI14443p3b_Sw_Attrib+0x56e>
    {
        /* fetch sfgi value from response */
        bTemp = (uint8_t)(pAtqb[12] >> 4U);
 8015760:	68bb      	ldr	r3, [r7, #8]
 8015762:	330c      	adds	r3, #12
 8015764:	781b      	ldrb	r3, [r3, #0]
 8015766:	091b      	lsrs	r3, r3, #4
 8015768:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

        if (bTemp == 0x0FU)
 801576c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8015770:	2b0f      	cmp	r3, #15
 8015772:	d102      	bne.n	801577a <phpalI14443p3b_Sw_Attrib+0x512>
        {
            bTemp = PHPAL_I14443P3B_SW_SFGI_DEFAULT;
 8015774:	2300      	movs	r3, #0
 8015776:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        }
        /* Calculate SFGT in Microseconds */
        dwSfgt = ((uint32_t)(PHPAL_I14443P3B_SW_FWT_MIN_US) * ((uint32_t)1U << bTemp)) + PHPAL_I14443P3B_SW_EXT_TIME_US;
 801577a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801577e:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 8015782:	fa02 f303 	lsl.w	r3, r2, r3
 8015786:	333f      	adds	r3, #63	@ 0x3f
 8015788:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Perform SFGT Wait */
        if (dwSfgt > 0xFFFFU)
 801578a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801578c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015790:	d312      	bcc.n	80157b8 <phpalI14443p3b_Sw_Attrib+0x550>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(pDataParams->pHalDataParams, PHHAL_HW_TIME_MILLISECONDS, (uint16_t)(dwSfgt / 1000U)));
 8015792:	68fb      	ldr	r3, [r7, #12]
 8015794:	6858      	ldr	r0, [r3, #4]
 8015796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015798:	4a11      	ldr	r2, [pc, #68]	@ (80157e0 <phpalI14443p3b_Sw_Attrib+0x578>)
 801579a:	fba2 2303 	umull	r2, r3, r2, r3
 801579e:	099b      	lsrs	r3, r3, #6
 80157a0:	b29b      	uxth	r3, r3
 80157a2:	461a      	mov	r2, r3
 80157a4:	2101      	movs	r1, #1
 80157a6:	f7f8 ff3d 	bl	800e624 <phhalHw_Pn5180_Wait>
 80157aa:	4603      	mov	r3, r0
 80157ac:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80157ae:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	d010      	beq.n	80157d6 <phpalI14443p3b_Sw_Attrib+0x56e>
 80157b4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80157b6:	e00f      	b.n	80157d8 <phpalI14443p3b_Sw_Attrib+0x570>
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(pDataParams->pHalDataParams, PHHAL_HW_TIME_MICROSECONDS, (uint16_t)dwSfgt));
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	685b      	ldr	r3, [r3, #4]
 80157bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80157be:	b292      	uxth	r2, r2
 80157c0:	2100      	movs	r1, #0
 80157c2:	4618      	mov	r0, r3
 80157c4:	f7f8 ff2e 	bl	800e624 <phhalHw_Pn5180_Wait>
 80157c8:	4603      	mov	r3, r0
 80157ca:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80157cc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d001      	beq.n	80157d6 <phpalI14443p3b_Sw_Attrib+0x56e>
 80157d2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80157d4:	e000      	b.n	80157d8 <phpalI14443p3b_Sw_Attrib+0x570>
        }
    }

    return PH_ERR_SUCCESS;
 80157d6:	2300      	movs	r3, #0
}
 80157d8:	4618      	mov	r0, r3
 80157da:	3738      	adds	r7, #56	@ 0x38
 80157dc:	46bd      	mov	sp, r7
 80157de:	bd80      	pop	{r7, pc}
 80157e0:	10624dd3 	.word	0x10624dd3

080157e4 <phpalI14443p3b_Sw_GetProtocolParams>:
    uint8_t * pNadSupported,
    uint8_t * pFwi,
    uint8_t * pFsdi,
    uint8_t * pFsci
    )
{
 80157e4:	b480      	push	{r7}
 80157e6:	b085      	sub	sp, #20
 80157e8:	af00      	add	r7, sp, #0
 80157ea:	60f8      	str	r0, [r7, #12]
 80157ec:	60b9      	str	r1, [r7, #8]
 80157ee:	607a      	str	r2, [r7, #4]
 80157f0:	603b      	str	r3, [r7, #0]
    *pCidEnabled    = pDataParams->bCidSupported;
 80157f2:	68fb      	ldr	r3, [r7, #12]
 80157f4:	7b9a      	ldrb	r2, [r3, #14]
 80157f6:	68bb      	ldr	r3, [r7, #8]
 80157f8:	701a      	strb	r2, [r3, #0]
    *pCid           = pDataParams->bCid;
 80157fa:	68fb      	ldr	r3, [r7, #12]
 80157fc:	7c1a      	ldrb	r2, [r3, #16]
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	701a      	strb	r2, [r3, #0]
    *pNadSupported  = pDataParams->bNadSupported;
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	7bda      	ldrb	r2, [r3, #15]
 8015806:	683b      	ldr	r3, [r7, #0]
 8015808:	701a      	strb	r2, [r3, #0]
    *pFwi           = pDataParams->bFwi;
 801580a:	68fb      	ldr	r3, [r7, #12]
 801580c:	7c5a      	ldrb	r2, [r3, #17]
 801580e:	69bb      	ldr	r3, [r7, #24]
 8015810:	701a      	strb	r2, [r3, #0]
    *pFsdi          = pDataParams->bFsdi;
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	7cda      	ldrb	r2, [r3, #19]
 8015816:	69fb      	ldr	r3, [r7, #28]
 8015818:	701a      	strb	r2, [r3, #0]
    *pFsci          = pDataParams->bFsci;
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	7c9a      	ldrb	r2, [r3, #18]
 801581e:	6a3b      	ldr	r3, [r7, #32]
 8015820:	701a      	strb	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8015822:	2300      	movs	r3, #0
}
 8015824:	4618      	mov	r0, r3
 8015826:	3714      	adds	r7, #20
 8015828:	46bd      	mov	sp, r7
 801582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801582e:	4770      	bx	lr

08015830 <phpalI14443p3b_Sw_CheckATQBEx>:
    uint8_t * pResp,
    uint16_t wRespLength,
    uint8_t * pAtqb,
    uint8_t * pAtqbLen
    )
{
 8015830:	b580      	push	{r7, lr}
 8015832:	b086      	sub	sp, #24
 8015834:	af00      	add	r7, sp, #0
 8015836:	60f8      	str	r0, [r7, #12]
 8015838:	60b9      	str	r1, [r7, #8]
 801583a:	603b      	str	r3, [r7, #0]
 801583c:	4613      	mov	r3, r2
 801583e:	80fb      	strh	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bTR2;

    /* Response check */
    /* Digital Protocol Requirement 49, Section 5.6.1.5 */
    if ((wRespLength != 12U) && (wRespLength != 13U))
 8015840:	88fb      	ldrh	r3, [r7, #6]
 8015842:	2b0c      	cmp	r3, #12
 8015844:	d005      	beq.n	8015852 <phpalI14443p3b_Sw_CheckATQBEx+0x22>
 8015846:	88fb      	ldrh	r3, [r7, #6]
 8015848:	2b0d      	cmp	r3, #13
 801584a:	d002      	beq.n	8015852 <phpalI14443p3b_Sw_CheckATQBEx+0x22>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 801584c:	f240 4306 	movw	r3, #1030	@ 0x406
 8015850:	e0ae      	b.n	80159b0 <phpalI14443p3b_Sw_CheckATQBEx+0x180>
    }

    /* The ATQB should look like the following (see ISO14443-3 7.9.1): */
    /* [0x50][PUPI0][PUPI1][PUPI2][PUPI3][PInfo0][PInfo1][PInfo2]([PInfo3])[CRC][CRC] */

    if ( pResp[0] != 0x50U )    /* ATQB byte */
 8015852:	68bb      	ldr	r3, [r7, #8]
 8015854:	781b      	ldrb	r3, [r3, #0]
 8015856:	2b50      	cmp	r3, #80	@ 0x50
 8015858:	d002      	beq.n	8015860 <phpalI14443p3b_Sw_CheckATQBEx+0x30>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 801585a:	f240 4306 	movw	r3, #1030	@ 0x406
 801585e:	e0a7      	b.n	80159b0 <phpalI14443p3b_Sw_CheckATQBEx+0x180>
    }

    /* Copy received AtqB */
    (void)memcpy(pAtqb, pResp, wRespLength);
 8015860:	88fb      	ldrh	r3, [r7, #6]
 8015862:	461a      	mov	r2, r3
 8015864:	68b9      	ldr	r1, [r7, #8]
 8015866:	6838      	ldr	r0, [r7, #0]
 8015868:	f00b f893 	bl	8020992 <memcpy>
    *pAtqbLen = (uint8_t)wRespLength;
 801586c:	88fb      	ldrh	r3, [r7, #6]
 801586e:	b2da      	uxtb	r2, r3
 8015870:	6a3b      	ldr	r3, [r7, #32]
 8015872:	701a      	strb	r2, [r3, #0]

    if (pDataParams->bOpeMode != RD_LIB_MODE_NFC)
 8015874:	68fb      	ldr	r3, [r7, #12]
 8015876:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801587a:	2b02      	cmp	r3, #2
 801587c:	d013      	beq.n	80158a6 <phpalI14443p3b_Sw_CheckATQBEx+0x76>
    {
        /* Max allowed frame size integer for ISO and EMVCo(v3.0) mode is less than or equals to 0x0C (4096 bytes) */
        if ((uint8_t)(pAtqb[10] & 0xF0U) > 0xC0U)
 801587e:	683b      	ldr	r3, [r7, #0]
 8015880:	330a      	adds	r3, #10
 8015882:	781b      	ldrb	r3, [r3, #0]
 8015884:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015888:	2bc0      	cmp	r3, #192	@ 0xc0
 801588a:	d91f      	bls.n	80158cc <phpalI14443p3b_Sw_CheckATQBEx+0x9c>
        {
            pAtqb[10] = (pAtqb[10] & 0x0FU) | 0xC0U;
 801588c:	683b      	ldr	r3, [r7, #0]
 801588e:	330a      	adds	r3, #10
 8015890:	781b      	ldrb	r3, [r3, #0]
 8015892:	f003 030f 	and.w	r3, r3, #15
 8015896:	b2da      	uxtb	r2, r3
 8015898:	683b      	ldr	r3, [r7, #0]
 801589a:	330a      	adds	r3, #10
 801589c:	f062 023f 	orn	r2, r2, #63	@ 0x3f
 80158a0:	b2d2      	uxtb	r2, r2
 80158a2:	701a      	strb	r2, [r3, #0]
 80158a4:	e012      	b.n	80158cc <phpalI14443p3b_Sw_CheckATQBEx+0x9c>
        }
    }
    else
    {
        /* Max allowed frame size integer for NFC(DP 1.1, Requirements 64) mode is less than or equals to 0x08 (256 bytes) */
        if ((uint8_t)(pAtqb[10] & 0xF0U) > 0x80U)
 80158a6:	683b      	ldr	r3, [r7, #0]
 80158a8:	330a      	adds	r3, #10
 80158aa:	781b      	ldrb	r3, [r3, #0]
 80158ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80158b0:	2b80      	cmp	r3, #128	@ 0x80
 80158b2:	d90b      	bls.n	80158cc <phpalI14443p3b_Sw_CheckATQBEx+0x9c>
        {
            pAtqb[10] = (pAtqb[10] & 0x0FU) | 0x80U;
 80158b4:	683b      	ldr	r3, [r7, #0]
 80158b6:	330a      	adds	r3, #10
 80158b8:	781b      	ldrb	r3, [r3, #0]
 80158ba:	f003 030f 	and.w	r3, r3, #15
 80158be:	b2da      	uxtb	r2, r3
 80158c0:	683b      	ldr	r3, [r7, #0]
 80158c2:	330a      	adds	r3, #10
 80158c4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80158c8:	b2d2      	uxtb	r2, r2
 80158ca:	701a      	strb	r2, [r3, #0]
/* Emvco: case_id 304_14
 * Conflict with TC304_14(added in 2.3.1a) and TC107_04
 * As per 6.3.2.8a in EMV Contactless Communication Protocol Specification Book D
 * Reset if b4 of Protocol Type set to (1)b
*/
    if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 80158cc:	68fb      	ldr	r3, [r7, #12]
 80158ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80158d2:	2b01      	cmp	r3, #1
 80158d4:	d109      	bne.n	80158ea <phpalI14443p3b_Sw_CheckATQBEx+0xba>
    {
        if((uint8_t)(pAtqb[10]& 0x08U) ==0x08U)
 80158d6:	683b      	ldr	r3, [r7, #0]
 80158d8:	330a      	adds	r3, #10
 80158da:	781b      	ldrb	r3, [r3, #0]
 80158dc:	f003 0308 	and.w	r3, r3, #8
 80158e0:	2b00      	cmp	r3, #0
 80158e2:	d002      	beq.n	80158ea <phpalI14443p3b_Sw_CheckATQBEx+0xba>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 80158e4:	f240 4306 	movw	r3, #1030	@ 0x406
 80158e8:	e062      	b.n	80159b0 <phpalI14443p3b_Sw_CheckATQBEx+0x180>
        }
    }

    if (pDataParams->bOpeMode == RD_LIB_MODE_ISO)
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80158f0:	2b03      	cmp	r3, #3
 80158f2:	d132      	bne.n	801595a <phpalI14443p3b_Sw_CheckATQBEx+0x12a>
    {
        /* Check TR2 value received in Atqb and set relevant TxWait as per ISO-IEC 14443-3. */
        bTR2 = (uint8_t)((pAtqb[10] & PHPAL_I14443P3B_SW_MINIMUM_TR2_MASK) >> PHPAL_I14443P3B_SW_MINIMUM_TR2_POS);
 80158f4:	683b      	ldr	r3, [r7, #0]
 80158f6:	330a      	adds	r3, #10
 80158f8:	781b      	ldrb	r3, [r3, #0]
 80158fa:	085b      	lsrs	r3, r3, #1
 80158fc:	b2db      	uxtb	r3, r3
 80158fe:	f003 0303 	and.w	r3, r3, #3
 8015902:	757b      	strb	r3, [r7, #21]
        switch(bTR2)
 8015904:	7d7b      	ldrb	r3, [r7, #21]
 8015906:	2b02      	cmp	r3, #2
 8015908:	d00e      	beq.n	8015928 <phpalI14443p3b_Sw_CheckATQBEx+0xf8>
 801590a:	2b02      	cmp	r3, #2
 801590c:	dc11      	bgt.n	8015932 <phpalI14443p3b_Sw_CheckATQBEx+0x102>
 801590e:	2b00      	cmp	r3, #0
 8015910:	d002      	beq.n	8015918 <phpalI14443p3b_Sw_CheckATQBEx+0xe8>
 8015912:	2b01      	cmp	r3, #1
 8015914:	d004      	beq.n	8015920 <phpalI14443p3b_Sw_CheckATQBEx+0xf0>
 8015916:	e00c      	b.n	8015932 <phpalI14443p3b_Sw_CheckATQBEx+0x102>
        {
        case PHPAL_I14443P3B_SW_MINIMUM_TR2_VALUE_0:
            pDataParams->wTxWait = (uint16_t)PHPAL_I14443P3B_SW_TXWAIT_US_TR2_0;
 8015918:	68fb      	ldr	r3, [r7, #12]
 801591a:	2285      	movs	r2, #133	@ 0x85
 801591c:	839a      	strh	r2, [r3, #28]
            break;
 801591e:	e00d      	b.n	801593c <phpalI14443p3b_Sw_CheckATQBEx+0x10c>
        case PHPAL_I14443P3B_SW_MINIMUM_TR2_VALUE_1:
            pDataParams->wTxWait = (uint16_t)PHPAL_I14443P3B_SW_TXWAIT_US_TR2_1;
 8015920:	68fb      	ldr	r3, [r7, #12]
 8015922:	22f6      	movs	r2, #246	@ 0xf6
 8015924:	839a      	strh	r2, [r3, #28]
            break;
 8015926:	e009      	b.n	801593c <phpalI14443p3b_Sw_CheckATQBEx+0x10c>
        case PHPAL_I14443P3B_SW_MINIMUM_TR2_VALUE_2:
            pDataParams->wTxWait = (uint16_t)PHPAL_I14443P3B_SW_TXWAIT_US_TR2_2;
 8015928:	68fb      	ldr	r3, [r7, #12]
 801592a:	f240 128d 	movw	r2, #397	@ 0x18d
 801592e:	839a      	strh	r2, [r3, #28]
            break;
 8015930:	e004      	b.n	801593c <phpalI14443p3b_Sw_CheckATQBEx+0x10c>
        default:
            pDataParams->wTxWait = (uint16_t)PHPAL_I14443P3B_SW_TXWAIT_US_TR2_3;
 8015932:	68fb      	ldr	r3, [r7, #12]
 8015934:	f240 22bb 	movw	r2, #699	@ 0x2bb
 8015938:	839a      	strh	r2, [r3, #28]
            break;
 801593a:	bf00      	nop
        }

        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801593c:	68fb      	ldr	r3, [r7, #12]
 801593e:	6858      	ldr	r0, [r3, #4]
 8015940:	68fb      	ldr	r3, [r7, #12]
 8015942:	8b9b      	ldrh	r3, [r3, #28]
 8015944:	461a      	mov	r2, r3
 8015946:	2107      	movs	r1, #7
 8015948:	f7f8 ff26 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 801594c:	4603      	mov	r3, r0
 801594e:	82fb      	strh	r3, [r7, #22]
 8015950:	8afb      	ldrh	r3, [r7, #22]
 8015952:	2b00      	cmp	r3, #0
 8015954:	d022      	beq.n	801599c <phpalI14443p3b_Sw_CheckATQBEx+0x16c>
 8015956:	8afb      	ldrh	r3, [r7, #22]
 8015958:	e02a      	b.n	80159b0 <phpalI14443p3b_Sw_CheckATQBEx+0x180>
            pDataParams->wTxWait));
    }
    else
    {
        /* If the TR2 value is (11)b then the default TxWait of 500us (6780/fc) has to changed to 699us (9472/fc). */
        if ((uint8_t)((pAtqb[10] & PHPAL_I14443P3B_SW_MINIMUM_TR2_MASK) >> PHPAL_I14443P3B_SW_MINIMUM_TR2_POS)
 801595a:	683b      	ldr	r3, [r7, #0]
 801595c:	330a      	adds	r3, #10
 801595e:	781b      	ldrb	r3, [r3, #0]
 8015960:	085b      	lsrs	r3, r3, #1
 8015962:	b2db      	uxtb	r3, r3
 8015964:	f003 0303 	and.w	r3, r3, #3
 8015968:	b2db      	uxtb	r3, r3
 801596a:	2b03      	cmp	r3, #3
 801596c:	d112      	bne.n	8015994 <phpalI14443p3b_Sw_CheckATQBEx+0x164>
            == PHPAL_I14443P3B_SW_MINIMUM_TR2_VALUE_3)
        {
            pDataParams->wTxWait = (uint16_t)PHPAL_I14443P3B_SW_TXWAIT_US_TR2_3;
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	f240 22bb 	movw	r2, #699	@ 0x2bb
 8015974:	839a      	strh	r2, [r3, #28]
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8015976:	68fb      	ldr	r3, [r7, #12]
 8015978:	685b      	ldr	r3, [r3, #4]
 801597a:	f240 22bb 	movw	r2, #699	@ 0x2bb
 801597e:	2107      	movs	r1, #7
 8015980:	4618      	mov	r0, r3
 8015982:	f7f8 ff09 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8015986:	4603      	mov	r3, r0
 8015988:	82fb      	strh	r3, [r7, #22]
 801598a:	8afb      	ldrh	r3, [r7, #22]
 801598c:	2b00      	cmp	r3, #0
 801598e:	d005      	beq.n	801599c <phpalI14443p3b_Sw_CheckATQBEx+0x16c>
 8015990:	8afb      	ldrh	r3, [r7, #22]
 8015992:	e00d      	b.n	80159b0 <phpalI14443p3b_Sw_CheckATQBEx+0x180>
                PHHAL_HW_CONFIG_TXWAIT_US,
                PHPAL_I14443P3B_SW_TXWAIT_US_TR2_3));
        }
        else
        {
            pDataParams->wTxWait = PHPAL_I14443P3B_SW_TXWAIT_US_DEFAULT;
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 801599a:	839a      	strh	r2, [r3, #28]
        }
    }

    /* and also copy the PUPI into the protocol params structure to be available
    for a possible following HaltB command */
    (void)memcpy( pDataParams->pPupi, &pAtqb[1], (uint32_t)(sizeof(pDataParams->pPupi)) );
 801599c:	68fb      	ldr	r3, [r7, #12]
 801599e:	3309      	adds	r3, #9
 80159a0:	683a      	ldr	r2, [r7, #0]
 80159a2:	3201      	adds	r2, #1
 80159a4:	6812      	ldr	r2, [r2, #0]
 80159a6:	601a      	str	r2, [r3, #0]
    pDataParams->bPupiValid = PH_ON;
 80159a8:	68fb      	ldr	r3, [r7, #12]
 80159aa:	2201      	movs	r2, #1
 80159ac:	735a      	strb	r2, [r3, #13]

    return PH_ERR_SUCCESS;
 80159ae:	2300      	movs	r3, #0
}
 80159b0:	4618      	mov	r0, r3
 80159b2:	3718      	adds	r7, #24
 80159b4:	46bd      	mov	sp, r7
 80159b6:	bd80      	pop	{r7, pc}

080159b8 <phpalI14443p3b_Sw_RequestBEx>:
                                        uint8_t bAfi,
                                        uint8_t bExtAtqb,
                                        uint8_t * pAtqb,
                                        uint8_t * pAtqbLen
                                        )
{
 80159b8:	b580      	push	{r7, lr}
 80159ba:	b088      	sub	sp, #32
 80159bc:	af02      	add	r7, sp, #8
 80159be:	6078      	str	r0, [r7, #4]
 80159c0:	4608      	mov	r0, r1
 80159c2:	4611      	mov	r1, r2
 80159c4:	461a      	mov	r2, r3
 80159c6:	4603      	mov	r3, r0
 80159c8:	70fb      	strb	r3, [r7, #3]
 80159ca:	460b      	mov	r3, r1
 80159cc:	70bb      	strb	r3, [r7, #2]
 80159ce:	4613      	mov	r3, r2
 80159d0:	707b      	strb	r3, [r7, #1]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aCmd[3];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 80159d2:	2300      	movs	r3, #0
 80159d4:	60fb      	str	r3, [r7, #12]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 80159d6:	2300      	movs	r3, #0
 80159d8:	817b      	strh	r3, [r7, #10]

    /* parameter check */
    if (bNumSlots > 4U)
 80159da:	78bb      	ldrb	r3, [r7, #2]
 80159dc:	2b04      	cmp	r3, #4
 80159de:	d902      	bls.n	80159e6 <phpalI14443p3b_Sw_RequestBEx+0x2e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 80159e0:	f240 4321 	movw	r3, #1057	@ 0x421
 80159e4:	e08d      	b.n	8015b02 <phpalI14443p3b_Sw_RequestBEx+0x14a>
    }

    /* Build the command */
    aCmd[0] = PHPAL_I14443P3B_SW_APF;
 80159e6:	2305      	movs	r3, #5
 80159e8:	743b      	strb	r3, [r7, #16]
    aCmd[1] = bAfi;
 80159ea:	787b      	ldrb	r3, [r7, #1]
 80159ec:	747b      	strb	r3, [r7, #17]
    aCmd[2] = bNumSlots;    /* N = 2^bNumSlots*/
 80159ee:	78bb      	ldrb	r3, [r7, #2]
 80159f0:	74bb      	strb	r3, [r7, #18]

    /* Set wakeup bit if necessary */
    if (0U != (bIsWakeUp))
 80159f2:	78fb      	ldrb	r3, [r7, #3]
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d004      	beq.n	8015a02 <phpalI14443p3b_Sw_RequestBEx+0x4a>
    {
        aCmd[2] |= PHPAL_I14443P3B_SW_PARAM_WUP_BIT;
 80159f8:	7cbb      	ldrb	r3, [r7, #18]
 80159fa:	f043 0308 	orr.w	r3, r3, #8
 80159fe:	b2db      	uxtb	r3, r3
 8015a00:	74bb      	strb	r3, [r7, #18]
    }

    /* Enable Extended ATQB if necessary */
    if (bExtAtqb != PH_OFF)
 8015a02:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	d004      	beq.n	8015a14 <phpalI14443p3b_Sw_RequestBEx+0x5c>
    {
        aCmd[2] |= PHPAL_I14443P3B_SW_PARAM_EXTATQB_BIT;
 8015a0a:	7cbb      	ldrb	r3, [r7, #18]
 8015a0c:	f043 0310 	orr.w	r3, r3, #16
 8015a10:	b2db      	uxtb	r3, r3
 8015a12:	74bb      	strb	r3, [r7, #18]
    }

    /* Store usage of Extended ATQB */
    pDataParams->bExtAtqb = bExtAtqb;
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	f897 2020 	ldrb.w	r2, [r7, #32]
 8015a1a:	721a      	strb	r2, [r3, #8]

    /* PUPI is invalid */
    pDataParams->bPupiValid = PH_OFF;
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	2200      	movs	r2, #0
 8015a20:	735a      	strb	r2, [r3, #13]

    /* Reset default data rates */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	685b      	ldr	r3, [r3, #4]
 8015a26:	2200      	movs	r2, #0
 8015a28:	2109      	movs	r1, #9
 8015a2a:	4618      	mov	r0, r3
 8015a2c:	f7f8 feb4 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8015a30:	4603      	mov	r3, r0
 8015a32:	82fb      	strh	r3, [r7, #22]
 8015a34:	8afb      	ldrh	r3, [r7, #22]
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d001      	beq.n	8015a3e <phpalI14443p3b_Sw_RequestBEx+0x86>
 8015a3a:	8afb      	ldrh	r3, [r7, #22]
 8015a3c:	e061      	b.n	8015b02 <phpalI14443p3b_Sw_RequestBEx+0x14a>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TXDATARATE_FRAMING,
        PHHAL_HW_RF_DATARATE_106));
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	685b      	ldr	r3, [r3, #4]
 8015a42:	2200      	movs	r2, #0
 8015a44:	210a      	movs	r1, #10
 8015a46:	4618      	mov	r0, r3
 8015a48:	f7f8 fea6 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8015a4c:	4603      	mov	r3, r0
 8015a4e:	82fb      	strh	r3, [r7, #22]
 8015a50:	8afb      	ldrh	r3, [r7, #22]
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d001      	beq.n	8015a5a <phpalI14443p3b_Sw_RequestBEx+0xa2>
 8015a56:	8afb      	ldrh	r3, [r7, #22]
 8015a58:	e053      	b.n	8015b02 <phpalI14443p3b_Sw_RequestBEx+0x14a>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_RXDATARATE_FRAMING,
        PHHAL_HW_RF_DATARATE_106));

    /* Set RequestB timeout */
    if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015a60:	2b01      	cmp	r3, #1
 8015a62:	d10e      	bne.n	8015a82 <phpalI14443p3b_Sw_RequestBEx+0xca>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	685b      	ldr	r3, [r3, #4]
 8015a68:	f240 22d6 	movw	r2, #726	@ 0x2d6
 8015a6c:	210d      	movs	r1, #13
 8015a6e:	4618      	mov	r0, r3
 8015a70:	f7f8 fe92 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8015a74:	4603      	mov	r3, r0
 8015a76:	82fb      	strh	r3, [r7, #22]
 8015a78:	8afb      	ldrh	r3, [r7, #22]
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d023      	beq.n	8015ac6 <phpalI14443p3b_Sw_RequestBEx+0x10e>
 8015a7e:	8afb      	ldrh	r3, [r7, #22]
 8015a80:	e03f      	b.n	8015b02 <phpalI14443p3b_Sw_RequestBEx+0x14a>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
            PHPAL_I14443P3B_SW_ATQB_TIME_US + (PHPAL_I14443P3B_SW_EXT_TIME_US * 2U)));
    }
    else if(pDataParams->bOpeMode == RD_LIB_MODE_ISO)
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015a88:	2b03      	cmp	r3, #3
 8015a8a:	d10e      	bne.n	8015aaa <phpalI14443p3b_Sw_RequestBEx+0xf2>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	685b      	ldr	r3, [r3, #4]
 8015a90:	f240 2297 	movw	r2, #663	@ 0x297
 8015a94:	210d      	movs	r1, #13
 8015a96:	4618      	mov	r0, r3
 8015a98:	f7f8 fe7e 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8015a9c:	4603      	mov	r3, r0
 8015a9e:	82fb      	strh	r3, [r7, #22]
 8015aa0:	8afb      	ldrh	r3, [r7, #22]
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d00f      	beq.n	8015ac6 <phpalI14443p3b_Sw_RequestBEx+0x10e>
 8015aa6:	8afb      	ldrh	r3, [r7, #22]
 8015aa8:	e02b      	b.n	8015b02 <phpalI14443p3b_Sw_RequestBEx+0x14a>
    else
    {
        /* As per Digital Protocol Ver1.1 Article 7.9.1.5
         * PCD should wait ~17ms (FWT(B,SENSB) + T(B,POLL)) * (566us + 16.4ms = ~17ms)
         */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	685b      	ldr	r3, [r3, #4]
 8015aae:	2211      	movs	r2, #17
 8015ab0:	210e      	movs	r1, #14
 8015ab2:	4618      	mov	r0, r3
 8015ab4:	f7f8 fe70 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8015ab8:	4603      	mov	r3, r0
 8015aba:	82fb      	strh	r3, [r7, #22]
 8015abc:	8afb      	ldrh	r3, [r7, #22]
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d001      	beq.n	8015ac6 <phpalI14443p3b_Sw_RequestBEx+0x10e>
 8015ac2:	8afb      	ldrh	r3, [r7, #22]
 8015ac4:	e01d      	b.n	8015b02 <phpalI14443p3b_Sw_RequestBEx+0x14a>
                    PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
                    PHPAL_I14443P3B_SW_DELTA_POLL));
    }

    /* Exchange command */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	6858      	ldr	r0, [r3, #4]
 8015aca:	f107 0210 	add.w	r2, r7, #16
 8015ace:	f107 030a 	add.w	r3, r7, #10
 8015ad2:	9301      	str	r3, [sp, #4]
 8015ad4:	f107 030c 	add.w	r3, r7, #12
 8015ad8:	9300      	str	r3, [sp, #0]
 8015ada:	2303      	movs	r3, #3
 8015adc:	2100      	movs	r1, #0
 8015ade:	f7f8 faa5 	bl	800e02c <phhalHw_Pn5180_Exchange>
 8015ae2:	4603      	mov	r3, r0
 8015ae4:	82fb      	strh	r3, [r7, #22]
 8015ae6:	8afb      	ldrh	r3, [r7, #22]
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d001      	beq.n	8015af0 <phpalI14443p3b_Sw_RequestBEx+0x138>
 8015aec:	8afb      	ldrh	r3, [r7, #22]
 8015aee:	e008      	b.n	8015b02 <phpalI14443p3b_Sw_RequestBEx+0x14a>
        aCmd,
        3,
        &pResp,
        &wRespLength));

    return phpalI14443p3b_Sw_CheckATQBEx( pDataParams,
 8015af0:	68f9      	ldr	r1, [r7, #12]
 8015af2:	897a      	ldrh	r2, [r7, #10]
 8015af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015af6:	9300      	str	r3, [sp, #0]
 8015af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015afa:	6878      	ldr	r0, [r7, #4]
 8015afc:	f7ff fe98 	bl	8015830 <phpalI14443p3b_Sw_CheckATQBEx>
 8015b00:	4603      	mov	r3, r0
        pResp,
        wRespLength,
        pAtqb,
        pAtqbLen
        );
}
 8015b02:	4618      	mov	r0, r3
 8015b04:	3718      	adds	r7, #24
 8015b06:	46bd      	mov	sp, r7
 8015b08:	bd80      	pop	{r7, pc}
	...

08015b0c <phpalI14443p3b_Sw_SetReaderBaudRateEx>:

phStatus_t phpalI14443p3b_Sw_SetReaderBaudRateEx( phpalI14443p3b_Sw_DataParams_t * pDataParams )
{
 8015b0c:	b580      	push	{r7, lr}
 8015b0e:	b084      	sub	sp, #16
 8015b10:	af00      	add	r7, sp, #0
 8015b12:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t    PH_MEMLOC_REM wTxDataRate;
    uint16_t    PH_MEMLOC_REM wRxDataRate;

    /* Check and convert Dri value */
    switch (pDataParams->bDri)
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	7d1b      	ldrb	r3, [r3, #20]
 8015b18:	2b03      	cmp	r3, #3
 8015b1a:	d817      	bhi.n	8015b4c <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x40>
 8015b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8015b24 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x18>)
 8015b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b22:	bf00      	nop
 8015b24:	08015b35 	.word	0x08015b35
 8015b28:	08015b3b 	.word	0x08015b3b
 8015b2c:	08015b41 	.word	0x08015b41
 8015b30:	08015b47 	.word	0x08015b47
    {
    case PHPAL_I14443P3B_DATARATE_106:
        wTxDataRate = PHHAL_HW_RF_DATARATE_106;
 8015b34:	2300      	movs	r3, #0
 8015b36:	81fb      	strh	r3, [r7, #14]
        break;
 8015b38:	e00b      	b.n	8015b52 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x46>
    case PHPAL_I14443P3B_DATARATE_212:
        wTxDataRate = PHHAL_HW_RF_DATARATE_212;
 8015b3a:	2301      	movs	r3, #1
 8015b3c:	81fb      	strh	r3, [r7, #14]
        break;
 8015b3e:	e008      	b.n	8015b52 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x46>
    case PHPAL_I14443P3B_DATARATE_424:
        wTxDataRate = PHHAL_HW_RF_DATARATE_424;
 8015b40:	2302      	movs	r3, #2
 8015b42:	81fb      	strh	r3, [r7, #14]
        break;
 8015b44:	e005      	b.n	8015b52 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x46>
    case PHPAL_I14443P3B_DATARATE_848:
        wTxDataRate = PHHAL_HW_RF_DATARATE_848;
 8015b46:	2303      	movs	r3, #3
 8015b48:	81fb      	strh	r3, [r7, #14]
        break;
 8015b4a:	e002      	b.n	8015b52 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x46>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8015b4c:	f240 4321 	movw	r3, #1057	@ 0x421
 8015b50:	e03a      	b.n	8015bc8 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0xbc>
    }

    /* Check and convert Dsi value */
    switch (pDataParams->bDsi)
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	7d5b      	ldrb	r3, [r3, #21]
 8015b56:	2b03      	cmp	r3, #3
 8015b58:	d816      	bhi.n	8015b88 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x7c>
 8015b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8015b60 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x54>)
 8015b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b60:	08015b71 	.word	0x08015b71
 8015b64:	08015b77 	.word	0x08015b77
 8015b68:	08015b7d 	.word	0x08015b7d
 8015b6c:	08015b83 	.word	0x08015b83
    {
    case PHPAL_I14443P3B_DATARATE_106:
        wRxDataRate = PHHAL_HW_RF_DATARATE_106;
 8015b70:	2300      	movs	r3, #0
 8015b72:	81bb      	strh	r3, [r7, #12]
        break;
 8015b74:	e00b      	b.n	8015b8e <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x82>
    case PHPAL_I14443P3B_DATARATE_212:
        wRxDataRate = PHHAL_HW_RF_DATARATE_212;
 8015b76:	2301      	movs	r3, #1
 8015b78:	81bb      	strh	r3, [r7, #12]
        break;
 8015b7a:	e008      	b.n	8015b8e <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x82>
    case PHPAL_I14443P3B_DATARATE_424:
        wRxDataRate = PHHAL_HW_RF_DATARATE_424;
 8015b7c:	2302      	movs	r3, #2
 8015b7e:	81bb      	strh	r3, [r7, #12]
        break;
 8015b80:	e005      	b.n	8015b8e <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x82>
    case PHPAL_I14443P3B_DATARATE_848:
        wRxDataRate = PHHAL_HW_RF_DATARATE_848;
 8015b82:	2303      	movs	r3, #3
 8015b84:	81bb      	strh	r3, [r7, #12]
        break;
 8015b86:	e002      	b.n	8015b8e <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x82>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8015b88:	f240 4321 	movw	r3, #1057	@ 0x421
 8015b8c:	e01c      	b.n	8015bc8 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0xbc>
    }

    /* Apply new data rates to Pcd */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXDATARATE_FRAMING, wTxDataRate));
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	685b      	ldr	r3, [r3, #4]
 8015b92:	89fa      	ldrh	r2, [r7, #14]
 8015b94:	2109      	movs	r1, #9
 8015b96:	4618      	mov	r0, r3
 8015b98:	f7f8 fdfe 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8015b9c:	4603      	mov	r3, r0
 8015b9e:	817b      	strh	r3, [r7, #10]
 8015ba0:	897b      	ldrh	r3, [r7, #10]
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d001      	beq.n	8015baa <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x9e>
 8015ba6:	897b      	ldrh	r3, [r7, #10]
 8015ba8:	e00e      	b.n	8015bc8 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0xbc>
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXDATARATE_FRAMING, wRxDataRate));
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	685b      	ldr	r3, [r3, #4]
 8015bae:	89ba      	ldrh	r2, [r7, #12]
 8015bb0:	210a      	movs	r1, #10
 8015bb2:	4618      	mov	r0, r3
 8015bb4:	f7f8 fdf0 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8015bb8:	4603      	mov	r3, r0
 8015bba:	817b      	strh	r3, [r7, #10]
 8015bbc:	897b      	ldrh	r3, [r7, #10]
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d001      	beq.n	8015bc6 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0xba>
 8015bc2:	897b      	ldrh	r3, [r7, #10]
 8015bc4:	e000      	b.n	8015bc8 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0xbc>

    return PH_ERR_SUCCESS;
 8015bc6:	2300      	movs	r3, #0

}
 8015bc8:	4618      	mov	r0, r3
 8015bca:	3710      	adds	r7, #16
 8015bcc:	46bd      	mov	sp, r7
 8015bce:	bd80      	pop	{r7, pc}

08015bd0 <phpalI14443p3b_Sw_SetSerialNo>:

    return PH_ERR_SUCCESS;
}

phStatus_t phpalI14443p3b_Sw_SetSerialNo(phpalI14443p3b_Sw_DataParams_t * pDataParams, uint8_t *pPupi)
{
 8015bd0:	b480      	push	{r7}
 8015bd2:	b083      	sub	sp, #12
 8015bd4:	af00      	add	r7, sp, #0
 8015bd6:	6078      	str	r0, [r7, #4]
 8015bd8:	6039      	str	r1, [r7, #0]
    (void)memcpy(pDataParams->pPupi, pPupi, (uint32_t)(sizeof(pDataParams->pPupi)));
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	3309      	adds	r3, #9
 8015bde:	683a      	ldr	r2, [r7, #0]
 8015be0:	6812      	ldr	r2, [r2, #0]
 8015be2:	601a      	str	r2, [r3, #0]
    pDataParams->bPupiValid = PH_ON;
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	2201      	movs	r2, #1
 8015be8:	735a      	strb	r2, [r3, #13]

    return PH_ERR_SUCCESS;
 8015bea:	2300      	movs	r3, #0
}
 8015bec:	4618      	mov	r0, r3
 8015bee:	370c      	adds	r7, #12
 8015bf0:	46bd      	mov	sp, r7
 8015bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bf6:	4770      	bx	lr

08015bf8 <phpalI14443p4_Sw_Init>:
phStatus_t phpalI14443p4_Sw_Init(
                                 phpalI14443p4_Sw_DataParams_t * pDataParams,
                                 uint16_t wSizeOfDataParams,
                                 void * pHalDataParams
                                 )
{
 8015bf8:	b580      	push	{r7, lr}
 8015bfa:	b084      	sub	sp, #16
 8015bfc:	af00      	add	r7, sp, #0
 8015bfe:	60f8      	str	r0, [r7, #12]
 8015c00:	460b      	mov	r3, r1
 8015c02:	607a      	str	r2, [r7, #4]
 8015c04:	817b      	strh	r3, [r7, #10]
    if (sizeof(phpalI14443p4_Sw_DataParams_t) != wSizeOfDataParams)
 8015c06:	897b      	ldrh	r3, [r7, #10]
 8015c08:	2b14      	cmp	r3, #20
 8015c0a:	d002      	beq.n	8015c12 <phpalI14443p4_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_ISO14443P4);
 8015c0c:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8015c10:	e017      	b.n	8015c42 <phpalI14443p4_Sw_Init+0x4a>
    }
    PH_ASSERT_NULL (pDataParams);
 8015c12:	68fb      	ldr	r3, [r7, #12]
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	d101      	bne.n	8015c1c <phpalI14443p4_Sw_Init+0x24>
 8015c18:	2321      	movs	r3, #33	@ 0x21
 8015c1a:	e012      	b.n	8015c42 <phpalI14443p4_Sw_Init+0x4a>
    PH_ASSERT_NULL (pHalDataParams);
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	d101      	bne.n	8015c26 <phpalI14443p4_Sw_Init+0x2e>
 8015c22:	2321      	movs	r3, #33	@ 0x21
 8015c24:	e00d      	b.n	8015c42 <phpalI14443p4_Sw_Init+0x4a>

    /* Init private data */
    pDataParams->wId            = PH_COMP_PAL_ISO14443P4 | PHPAL_I14443P4_SW_ID;
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	f240 6201 	movw	r2, #1537	@ 0x601
 8015c2c:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams = pHalDataParams;
 8015c2e:	68fb      	ldr	r3, [r7, #12]
 8015c30:	687a      	ldr	r2, [r7, #4]
 8015c32:	605a      	str	r2, [r3, #4]
    pDataParams->bOpeMode       = RD_LIB_MODE_NFC;
 8015c34:	68fb      	ldr	r3, [r7, #12]
 8015c36:	2202      	movs	r2, #2
 8015c38:	749a      	strb	r2, [r3, #18]

    /* Reset protocol to defaults */
    return phpalI14443p4_Sw_ResetProtocol(pDataParams);
 8015c3a:	68f8      	ldr	r0, [r7, #12]
 8015c3c:	f000 f840 	bl	8015cc0 <phpalI14443p4_Sw_ResetProtocol>
 8015c40:	4603      	mov	r3, r0
}
 8015c42:	4618      	mov	r0, r3
 8015c44:	3710      	adds	r7, #16
 8015c46:	46bd      	mov	sp, r7
 8015c48:	bd80      	pop	{r7, pc}

08015c4a <phpalI14443p4_Sw_SetProtocol>:
                                        uint8_t   bNad,
                                        uint8_t   bFwi,
                                        uint8_t   bFsdi,
                                        uint8_t   bFsci
                                        )
{
 8015c4a:	b480      	push	{r7}
 8015c4c:	b083      	sub	sp, #12
 8015c4e:	af00      	add	r7, sp, #0
 8015c50:	6078      	str	r0, [r7, #4]
 8015c52:	4608      	mov	r0, r1
 8015c54:	4611      	mov	r1, r2
 8015c56:	461a      	mov	r2, r3
 8015c58:	4603      	mov	r3, r0
 8015c5a:	70fb      	strb	r3, [r7, #3]
 8015c5c:	460b      	mov	r3, r1
 8015c5e:	70bb      	strb	r3, [r7, #2]
 8015c60:	4613      	mov	r3, r2
 8015c62:	707b      	strb	r3, [r7, #1]
    /* Rule A, ISO/IEC 14443-4:2008(E), init. Blocknumber to zero */
    pDataParams->bPcbBlockNum = 0;
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	2200      	movs	r2, #0
 8015c68:	741a      	strb	r2, [r3, #16]

    /* Check parameters */
    if ((bCid > PHPAL_I14443P4_CID_MAX) ||
 8015c6a:	78bb      	ldrb	r3, [r7, #2]
 8015c6c:	2b0e      	cmp	r3, #14
 8015c6e:	d808      	bhi.n	8015c82 <phpalI14443p4_Sw_SetProtocol+0x38>
 8015c70:	7d3b      	ldrb	r3, [r7, #20]
 8015c72:	2b0e      	cmp	r3, #14
 8015c74:	d805      	bhi.n	8015c82 <phpalI14443p4_Sw_SetProtocol+0x38>
        (bFwi > PHPAL_I14443P4_FWI_MAX) ||
 8015c76:	7e3b      	ldrb	r3, [r7, #24]
 8015c78:	2b0c      	cmp	r3, #12
 8015c7a:	d802      	bhi.n	8015c82 <phpalI14443p4_Sw_SetProtocol+0x38>
        (bFsdi > PHPAL_I14443P4_FRAMESIZE_MAX) ||
 8015c7c:	7f3b      	ldrb	r3, [r7, #28]
 8015c7e:	2b0c      	cmp	r3, #12
 8015c80:	d902      	bls.n	8015c88 <phpalI14443p4_Sw_SetProtocol+0x3e>
        (bFsci > PHPAL_I14443P4_FRAMESIZE_MAX))
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4);
 8015c82:	f240 6321 	movw	r3, #1569	@ 0x621
 8015c86:	e015      	b.n	8015cb4 <phpalI14443p4_Sw_SetProtocol+0x6a>
    }

    /* Apply parameters */
    pDataParams->bCidEnabled = bCidEnable;
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	78fa      	ldrb	r2, [r7, #3]
 8015c8c:	725a      	strb	r2, [r3, #9]
    pDataParams->bCid = bCid;
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	78ba      	ldrb	r2, [r7, #2]
 8015c92:	729a      	strb	r2, [r3, #10]
    pDataParams->bNadEnabled = bNadEnable;
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	787a      	ldrb	r2, [r7, #1]
 8015c98:	72da      	strb	r2, [r3, #11]
    pDataParams->bNad = bNad;
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	7c3a      	ldrb	r2, [r7, #16]
 8015c9e:	731a      	strb	r2, [r3, #12]
    pDataParams->bFwi = bFwi;
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	7d3a      	ldrb	r2, [r7, #20]
 8015ca4:	735a      	strb	r2, [r3, #13]
    pDataParams->bFsdi = bFsdi;
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	7e3a      	ldrb	r2, [r7, #24]
 8015caa:	739a      	strb	r2, [r3, #14]
    pDataParams->bFsci = bFsci;
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	7f3a      	ldrb	r2, [r7, #28]
 8015cb0:	73da      	strb	r2, [r3, #15]

    return PH_ERR_SUCCESS;
 8015cb2:	2300      	movs	r3, #0
}
 8015cb4:	4618      	mov	r0, r3
 8015cb6:	370c      	adds	r7, #12
 8015cb8:	46bd      	mov	sp, r7
 8015cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cbe:	4770      	bx	lr

08015cc0 <phpalI14443p4_Sw_ResetProtocol>:

phStatus_t phpalI14443p4_Sw_ResetProtocol(
    phpalI14443p4_Sw_DataParams_t * pDataParams
    )
{
 8015cc0:	b480      	push	{r7}
 8015cc2:	b083      	sub	sp, #12
 8015cc4:	af00      	add	r7, sp, #0
 8015cc6:	6078      	str	r0, [r7, #4]
    /* Set default state */
    pDataParams->bStateNow = PHPAL_I14443P4_SW_STATE_I_BLOCK_TX;
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	2201      	movs	r2, #1
 8015ccc:	721a      	strb	r2, [r3, #8]

    /* Rule A, ISO/IEC 14443-4:2008(E), init. Blocknumber to zero */
    pDataParams->bPcbBlockNum = 0;
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	2200      	movs	r2, #0
 8015cd2:	741a      	strb	r2, [r3, #16]

    /* Apply default parameters */
    pDataParams->bCidEnabled        = 0x00;
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	2200      	movs	r2, #0
 8015cd8:	725a      	strb	r2, [r3, #9]
    pDataParams->bCid               = 0x00;
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	2200      	movs	r2, #0
 8015cde:	729a      	strb	r2, [r3, #10]
    pDataParams->bNadEnabled        = 0x00;
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	2200      	movs	r2, #0
 8015ce4:	72da      	strb	r2, [r3, #11]
    pDataParams->bNad               = 0x00;
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	2200      	movs	r2, #0
 8015cea:	731a      	strb	r2, [r3, #12]
    pDataParams->bFwi               = PHPAL_I14443P4_SW_FWI_DEFAULT;
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	2204      	movs	r2, #4
 8015cf0:	735a      	strb	r2, [r3, #13]
    pDataParams->bFsdi              = 0x00;
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	2200      	movs	r2, #0
 8015cf6:	739a      	strb	r2, [r3, #14]
    pDataParams->bFsci              = PHPAL_I14443P4_SW_FSCI_DEFAULT;
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	2202      	movs	r2, #2
 8015cfc:	73da      	strb	r2, [r3, #15]
    pDataParams->bMaxRetryCount     = PHPAL_I14443P4_SW_MAX_RETRIES_DEFAULT;
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	2202      	movs	r2, #2
 8015d02:	745a      	strb	r2, [r3, #17]

    return PH_ERR_SUCCESS;
 8015d04:	2300      	movs	r3, #0
}
 8015d06:	4618      	mov	r0, r3
 8015d08:	370c      	adds	r7, #12
 8015d0a:	46bd      	mov	sp, r7
 8015d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d10:	4770      	bx	lr

08015d12 <phpalI14443p4_Sw_Deselect>:

phStatus_t phpalI14443p4_Sw_Deselect(
                                     phpalI14443p4_Sw_DataParams_t * pDataParams
                                     )
{
 8015d12:	b580      	push	{r7, lr}
 8015d14:	b08a      	sub	sp, #40	@ 0x28
 8015d16:	af02      	add	r7, sp, #8
 8015d18:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bIsoFrame[3];
    uint16_t    PH_MEMLOC_REM wIsoFrameLen = 0;
 8015d1a:	2300      	movs	r3, #0
 8015d1c:	827b      	strh	r3, [r7, #18]
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8015d1e:	2300      	movs	r3, #0
 8015d20:	60fb      	str	r3, [r7, #12]
    uint16_t    PH_MEMLOC_REM wRespLen = 0;
 8015d22:	2300      	movs	r3, #0
 8015d24:	817b      	strh	r3, [r7, #10]
    uint8_t     PH_MEMLOC_REM bInvalidBlock;
    uint8_t     PH_MEMLOC_REM bResponseReceived;
    uint16_t    PH_MEMLOC_REM wRetries;

    /* Build S(DESELECT) frame */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p4_Sw_BuildSBlock(
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	7a58      	ldrb	r0, [r3, #9]
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	7a99      	ldrb	r1, [r3, #10]
 8015d2e:	f107 0312 	add.w	r3, r7, #18
 8015d32:	9301      	str	r3, [sp, #4]
 8015d34:	f107 0314 	add.w	r3, r7, #20
 8015d38:	9300      	str	r3, [sp, #0]
 8015d3a:	2300      	movs	r3, #0
 8015d3c:	2200      	movs	r2, #0
 8015d3e:	f001 f936 	bl	8016fae <phpalI14443p4_Sw_BuildSBlock>
 8015d42:	4603      	mov	r3, r0
 8015d44:	833b      	strh	r3, [r7, #24]
 8015d46:	8b3b      	ldrh	r3, [r7, #24]
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d001      	beq.n	8015d50 <phpalI14443p4_Sw_Deselect+0x3e>
 8015d4c:	8b3b      	ldrh	r3, [r7, #24]
 8015d4e:	e08f      	b.n	8015e70 <phpalI14443p4_Sw_Deselect+0x15e>
        0,
        bIsoFrame,
        &wIsoFrameLen));

    /* Set DESELECT timeout */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	685b      	ldr	r3, [r3, #4]
 8015d54:	f241 42e2 	movw	r2, #5346	@ 0x14e2
 8015d58:	210d      	movs	r1, #13
 8015d5a:	4618      	mov	r0, r3
 8015d5c:	f7f8 fd1c 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8015d60:	4603      	mov	r3, r0
 8015d62:	833b      	strh	r3, [r7, #24]
 8015d64:	8b3b      	ldrh	r3, [r7, #24]
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d001      	beq.n	8015d6e <phpalI14443p4_Sw_Deselect+0x5c>
 8015d6a:	8b3b      	ldrh	r3, [r7, #24]
 8015d6c:	e080      	b.n	8015e70 <phpalI14443p4_Sw_Deselect+0x15e>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
        PHPAL_I14443P4_SW_FWT_DESELECT_US + PHPAL_I14443P4_EXT_TIME_US));

    /* Retrieve max. retry count */
    wRetries = (uint16_t)pDataParams->bMaxRetryCount + 1U;
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	7c5b      	ldrb	r3, [r3, #17]
 8015d72:	3301      	adds	r3, #1
 8015d74:	837b      	strh	r3, [r7, #26]

    /* Reset response received flag */
    bResponseReceived = 0;
 8015d76:	2300      	movs	r3, #0
 8015d78:	777b      	strb	r3, [r7, #29]
    /* Do as long as invalid responses are received
    and the retry counter has not reached zero.*/
    do
    {
        /* Send the S(DESELECT) request */
        status = phhalHw_Exchange(
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	6858      	ldr	r0, [r3, #4]
 8015d7e:	8a79      	ldrh	r1, [r7, #18]
 8015d80:	f107 0214 	add.w	r2, r7, #20
 8015d84:	f107 030a 	add.w	r3, r7, #10
 8015d88:	9301      	str	r3, [sp, #4]
 8015d8a:	f107 030c 	add.w	r3, r7, #12
 8015d8e:	9300      	str	r3, [sp, #0]
 8015d90:	460b      	mov	r3, r1
 8015d92:	2100      	movs	r1, #0
 8015d94:	f7f8 f94a 	bl	800e02c <phhalHw_Pn5180_Exchange>
 8015d98:	4603      	mov	r3, r0
 8015d9a:	83fb      	strh	r3, [r7, #30]
            wIsoFrameLen,
            &pResp,
            &wRespLen);

        /* Status --> InvalidBlock mapping */
        bInvalidBlock = (uint8_t)PHPAL_I14443P4_SW_DESELECT_IS_INVALID_BLOCK_STATUS(status);
 8015d9c:	8bfb      	ldrh	r3, [r7, #30]
 8015d9e:	b2db      	uxtb	r3, r3
 8015da0:	2b01      	cmp	r3, #1
 8015da2:	d013      	beq.n	8015dcc <phpalI14443p4_Sw_Deselect+0xba>
 8015da4:	8bfb      	ldrh	r3, [r7, #30]
 8015da6:	b2db      	uxtb	r3, r3
 8015da8:	2b02      	cmp	r3, #2
 8015daa:	d00f      	beq.n	8015dcc <phpalI14443p4_Sw_Deselect+0xba>
 8015dac:	8bfb      	ldrh	r3, [r7, #30]
 8015dae:	b2db      	uxtb	r3, r3
 8015db0:	2b05      	cmp	r3, #5
 8015db2:	d00b      	beq.n	8015dcc <phpalI14443p4_Sw_Deselect+0xba>
 8015db4:	8bfb      	ldrh	r3, [r7, #30]
 8015db6:	b2db      	uxtb	r3, r3
 8015db8:	2b73      	cmp	r3, #115	@ 0x73
 8015dba:	d007      	beq.n	8015dcc <phpalI14443p4_Sw_Deselect+0xba>
 8015dbc:	8bfb      	ldrh	r3, [r7, #30]
 8015dbe:	b2db      	uxtb	r3, r3
 8015dc0:	2b06      	cmp	r3, #6
 8015dc2:	d003      	beq.n	8015dcc <phpalI14443p4_Sw_Deselect+0xba>
 8015dc4:	8bfb      	ldrh	r3, [r7, #30]
 8015dc6:	b2db      	uxtb	r3, r3
 8015dc8:	2b03      	cmp	r3, #3
 8015dca:	d101      	bne.n	8015dd0 <phpalI14443p4_Sw_Deselect+0xbe>
 8015dcc:	2301      	movs	r3, #1
 8015dce:	e000      	b.n	8015dd2 <phpalI14443p4_Sw_Deselect+0xc0>
 8015dd0:	2300      	movs	r3, #0
 8015dd2:	75fb      	strb	r3, [r7, #23]

        if (0U == (bInvalidBlock))
 8015dd4:	7dfb      	ldrb	r3, [r7, #23]
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d12f      	bne.n	8015e3a <phpalI14443p4_Sw_Deselect+0x128>
        {
            /* Check for other errors */
            PH_CHECK_SUCCESS(status);
 8015dda:	8bfb      	ldrh	r3, [r7, #30]
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d001      	beq.n	8015de4 <phpalI14443p4_Sw_Deselect+0xd2>
 8015de0:	8bfb      	ldrh	r3, [r7, #30]
 8015de2:	e045      	b.n	8015e70 <phpalI14443p4_Sw_Deselect+0x15e>

            /* Signal that we've received something */
            bResponseReceived = 1;
 8015de4:	2301      	movs	r3, #1
 8015de6:	777b      	strb	r3, [r7, #29]

            /* Rule 8, ISO/IEC 14443-4:2008(E), "...the S(DESELECT) request may be re-transmitted..." */
            if ((wRespLen == wIsoFrameLen) && (wRespLen > 0U) && (wRespLen < 3U))
 8015de8:	897a      	ldrh	r2, [r7, #10]
 8015dea:	8a7b      	ldrh	r3, [r7, #18]
 8015dec:	429a      	cmp	r2, r3
 8015dee:	d121      	bne.n	8015e34 <phpalI14443p4_Sw_Deselect+0x122>
 8015df0:	897b      	ldrh	r3, [r7, #10]
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	d01e      	beq.n	8015e34 <phpalI14443p4_Sw_Deselect+0x122>
 8015df6:	897b      	ldrh	r3, [r7, #10]
 8015df8:	2b02      	cmp	r3, #2
 8015dfa:	d81b      	bhi.n	8015e34 <phpalI14443p4_Sw_Deselect+0x122>
            {
                /* Mask out Power-Level-Indication */
                if (0U != (pDataParams->bCidEnabled))
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	7a5b      	ldrb	r3, [r3, #9]
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	d008      	beq.n	8015e16 <phpalI14443p4_Sw_Deselect+0x104>
                {
                    pResp[1] &= 0x3FU;
 8015e04:	68fb      	ldr	r3, [r7, #12]
 8015e06:	3301      	adds	r3, #1
 8015e08:	781a      	ldrb	r2, [r3, #0]
 8015e0a:	68fb      	ldr	r3, [r7, #12]
 8015e0c:	3301      	adds	r3, #1
 8015e0e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8015e12:	b2d2      	uxtb	r2, r2
 8015e14:	701a      	strb	r2, [r3, #0]
                }

                /* Verify S(DESELECT) Response */
                if (memcmp(bIsoFrame, pResp, wRespLen) != 0)
 8015e16:	68f9      	ldr	r1, [r7, #12]
 8015e18:	897b      	ldrh	r3, [r7, #10]
 8015e1a:	461a      	mov	r2, r3
 8015e1c:	f107 0314 	add.w	r3, r7, #20
 8015e20:	4618      	mov	r0, r3
 8015e22:	f00a fd27 	bl	8020874 <memcmp>
 8015e26:	4603      	mov	r3, r0
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d006      	beq.n	8015e3a <phpalI14443p4_Sw_Deselect+0x128>
                {
                    status = PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 8015e2c:	f240 6306 	movw	r3, #1542	@ 0x606
 8015e30:	83fb      	strh	r3, [r7, #30]
                if (memcmp(bIsoFrame, pResp, wRespLen) != 0)
 8015e32:	e002      	b.n	8015e3a <phpalI14443p4_Sw_Deselect+0x128>
                }
            }
            else
            {
                status = PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 8015e34:	f240 6306 	movw	r3, #1542	@ 0x606
 8015e38:	83fb      	strh	r3, [r7, #30]
            }
        }
        --wRetries;
 8015e3a:	8b7b      	ldrh	r3, [r7, #26]
 8015e3c:	3b01      	subs	r3, #1
 8015e3e:	837b      	strh	r3, [r7, #26]
    }
    /* Retry as long as neccessary */
    while ((0U != bInvalidBlock) && (wRetries != 0U));
 8015e40:	7dfb      	ldrb	r3, [r7, #23]
 8015e42:	2b00      	cmp	r3, #0
 8015e44:	d002      	beq.n	8015e4c <phpalI14443p4_Sw_Deselect+0x13a>
 8015e46:	8b7b      	ldrh	r3, [r7, #26]
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d196      	bne.n	8015d7a <phpalI14443p4_Sw_Deselect+0x68>

    /* Operation not successful */
    if ((status & PH_ERR_MASK) != PH_ERR_SUCCESS)
 8015e4c:	8bfb      	ldrh	r3, [r7, #30]
 8015e4e:	b2db      	uxtb	r3, r3
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d009      	beq.n	8015e68 <phpalI14443p4_Sw_Deselect+0x156>
    {
        /* Return ERR_RECOVERY_FAILED if some response has been received before (bMaxRetryCount = 0 suppresses the retry behaviour) */
        if ((pDataParams->bMaxRetryCount > 0U) && (bResponseReceived > 0U))
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	7c5b      	ldrb	r3, [r3, #17]
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d005      	beq.n	8015e68 <phpalI14443p4_Sw_Deselect+0x156>
 8015e5c:	7f7b      	ldrb	r3, [r7, #29]
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d002      	beq.n	8015e68 <phpalI14443p4_Sw_Deselect+0x156>
        {
            status = PH_ADD_COMPCODE_FIXED(PHPAL_I14443P4_ERR_RECOVERY_FAILED, PH_COMP_PAL_ISO14443P4);
 8015e62:	f44f 63d0 	mov.w	r3, #1664	@ 0x680
 8015e66:	83fb      	strh	r3, [r7, #30]
        }
    }

    /* Apply default parameters */
    (void) phpalI14443p4_Sw_ResetProtocol(pDataParams);
 8015e68:	6878      	ldr	r0, [r7, #4]
 8015e6a:	f7ff ff29 	bl	8015cc0 <phpalI14443p4_Sw_ResetProtocol>

    return status;
 8015e6e:	8bfb      	ldrh	r3, [r7, #30]
}
 8015e70:	4618      	mov	r0, r3
 8015e72:	3720      	adds	r7, #32
 8015e74:	46bd      	mov	sp, r7
 8015e76:	bd80      	pop	{r7, pc}

08015e78 <phpalI14443p4_Sw_Exchange>:
                                     uint8_t * pTxBuffer,
                                     uint16_t wTxLength,
                                     uint8_t ** ppRxBuffer,
                                     uint16_t * pRxLength
                                     )
{
 8015e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e7a:	b095      	sub	sp, #84	@ 0x54
 8015e7c:	af04      	add	r7, sp, #16
 8015e7e:	60f8      	str	r0, [r7, #12]
 8015e80:	607a      	str	r2, [r7, #4]
 8015e82:	461a      	mov	r2, r3
 8015e84:	460b      	mov	r3, r1
 8015e86:	817b      	strh	r3, [r7, #10]
 8015e88:	4613      	mov	r3, r2
 8015e8a:	813b      	strh	r3, [r7, #8]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bBufferOverflow;

    /* Used to build I/R/S block frames */
    uint8_t     PH_MEMLOC_REM bIsoFrame[3];
    uint16_t    PH_MEMLOC_REM wIsoFrameLen = 0;
 8015e8c:	2300      	movs	r3, #0
 8015e8e:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint8_t     PH_MEMLOC_REM bRxOverlapped[3];
    uint16_t    PH_MEMLOC_REM wRxOverlappedLen = 0;
 8015e90:	2300      	movs	r3, #0
 8015e92:	877b      	strh	r3, [r7, #58]	@ 0x3a
    uint16_t    PH_MEMLOC_REM wRxStartPos;
    uint8_t     PH_MEMLOC_REM bUseNad = 0;
 8015e94:	2300      	movs	r3, #0
 8015e96:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint8_t     PH_MEMLOC_REM bForceSend;

    /* Used for Transmission */
    uint16_t    PH_MEMLOC_REM wRxBufferSize;
    uint16_t    PH_MEMLOC_REM wTxBufferSize;
    uint16_t    PH_MEMLOC_REM wTxBufferLen = 0;
 8015e9a:	2300      	movs	r3, #0
 8015e9c:	837b      	strh	r3, [r7, #26]
    uint16_t    PH_MEMLOC_REM wInfLength = 0;
 8015e9e:	2300      	movs	r3, #0
 8015ea0:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint16_t    PH_MEMLOC_REM wMaxPcdFrameSize;
    uint16_t    PH_MEMLOC_REM wMaxCardFrameSize;
    uint16_t    PH_MEMLOC_REM wPcb = 0;
 8015ea2:	2300      	movs	r3, #0
 8015ea4:	833b      	strh	r3, [r7, #24]
    uint8_t     PH_MEMLOC_REM bRetryCountRetransmit;

    /* Used for Reception */
    uint16_t    PH_MEMLOC_REM RxLength;
    uint8_t *   PH_MEMLOC_REM pRxBuffer = NULL;
 8015ea6:	2300      	movs	r3, #0
 8015ea8:	613b      	str	r3, [r7, #16]

    /* Option parameter check */
    if (0u != (wOption &  (uint16_t)~(uint16_t)
 8015eaa:	897a      	ldrh	r2, [r7, #10]
 8015eac:	f643 73fc 	movw	r3, #16380	@ 0x3ffc
 8015eb0:	4013      	ands	r3, r2
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d002      	beq.n	8015ebc <phpalI14443p4_Sw_Exchange+0x44>
        (
        PH_EXCHANGE_BUFFERED_BIT | PH_EXCHANGE_LEAVE_BUFFER_BIT |
        PH_EXCHANGE_TXCHAINING | PH_EXCHANGE_RXCHAINING | PH_EXCHANGE_RXCHAINING_BUFSIZE
        )))
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4);
 8015eb6:	f240 6321 	movw	r3, #1569	@ 0x621
 8015eba:	e34b      	b.n	8016554 <phpalI14443p4_Sw_Exchange+0x6dc>
    }

    /* Check if caller has provided valid RxBuffer */
    if (ppRxBuffer == NULL)
 8015ebc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d102      	bne.n	8015ec8 <phpalI14443p4_Sw_Exchange+0x50>
    {
        ppRxBuffer = &pRxBuffer;
 8015ec2:	f107 0310 	add.w	r3, r7, #16
 8015ec6:	65bb      	str	r3, [r7, #88]	@ 0x58
    }
    if (pRxLength == NULL)
 8015ec8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d102      	bne.n	8015ed4 <phpalI14443p4_Sw_Exchange+0x5c>
    {
        pRxLength = &RxLength;
 8015ece:	f107 0316 	add.w	r3, r7, #22
 8015ed2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    }

    /* Retrieve HAL buffer sizes */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXBUFFER_BUFSIZE, &wRxBufferSize));
 8015ed4:	68fb      	ldr	r3, [r7, #12]
 8015ed6:	685b      	ldr	r3, [r3, #4]
 8015ed8:	f107 021e 	add.w	r2, r7, #30
 8015edc:	2131      	movs	r1, #49	@ 0x31
 8015ede:	4618      	mov	r0, r3
 8015ee0:	f7fa f8a8 	bl	8010034 <phhalHw_Pn5180_GetConfig>
 8015ee4:	4603      	mov	r3, r0
 8015ee6:	863b      	strh	r3, [r7, #48]	@ 0x30
 8015ee8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d001      	beq.n	8015ef2 <phpalI14443p4_Sw_Exchange+0x7a>
 8015eee:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8015ef0:	e330      	b.n	8016554 <phpalI14443p4_Sw_Exchange+0x6dc>
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXBUFFER_BUFSIZE, &wTxBufferSize));
 8015ef2:	68fb      	ldr	r3, [r7, #12]
 8015ef4:	685b      	ldr	r3, [r3, #4]
 8015ef6:	f107 021c 	add.w	r2, r7, #28
 8015efa:	2132      	movs	r1, #50	@ 0x32
 8015efc:	4618      	mov	r0, r3
 8015efe:	f7fa f899 	bl	8010034 <phhalHw_Pn5180_GetConfig>
 8015f02:	4603      	mov	r3, r0
 8015f04:	863b      	strh	r3, [r7, #48]	@ 0x30
 8015f06:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d001      	beq.n	8015f10 <phpalI14443p4_Sw_Exchange+0x98>
 8015f0c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8015f0e:	e321      	b.n	8016554 <phpalI14443p4_Sw_Exchange+0x6dc>

    /* Retrieve maximum frame sizes */
    wMaxPcdFrameSize = bI14443p4_FsTable[pDataParams->bFsdi] - (uint16_t)2U;
 8015f10:	68fb      	ldr	r3, [r7, #12]
 8015f12:	7b9b      	ldrb	r3, [r3, #14]
 8015f14:	461a      	mov	r2, r3
 8015f16:	4b98      	ldr	r3, [pc, #608]	@ (8016178 <phpalI14443p4_Sw_Exchange+0x300>)
 8015f18:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8015f1c:	3b02      	subs	r3, #2
 8015f1e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    wMaxCardFrameSize = bI14443p4_FsTable[pDataParams->bFsci] - (uint16_t)2U;
 8015f20:	68fb      	ldr	r3, [r7, #12]
 8015f22:	7bdb      	ldrb	r3, [r3, #15]
 8015f24:	461a      	mov	r2, r3
 8015f26:	4b94      	ldr	r3, [pc, #592]	@ (8016178 <phpalI14443p4_Sw_Exchange+0x300>)
 8015f28:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8015f2c:	3b02      	subs	r3, #2
 8015f2e:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    /* R(ACK) transmission in case of Rx-Chaining */
    if (((wOption & PH_EXCHANGE_MODE_MASK) == PH_EXCHANGE_RXCHAINING) ||
 8015f30:	897b      	ldrh	r3, [r7, #10]
 8015f32:	f003 030f 	and.w	r3, r3, #15
 8015f36:	2b02      	cmp	r3, #2
 8015f38:	d004      	beq.n	8015f44 <phpalI14443p4_Sw_Exchange+0xcc>
        ((wOption & PH_EXCHANGE_MODE_MASK) == PH_EXCHANGE_RXCHAINING_BUFSIZE))
 8015f3a:	897b      	ldrh	r3, [r7, #10]
 8015f3c:	f003 030f 	and.w	r3, r3, #15
    if (((wOption & PH_EXCHANGE_MODE_MASK) == PH_EXCHANGE_RXCHAINING) ||
 8015f40:	2b03      	cmp	r3, #3
 8015f42:	d103      	bne.n	8015f4c <phpalI14443p4_Sw_Exchange+0xd4>
    {
        pDataParams->bStateNow = PHPAL_I14443P4_SW_STATE_I_BLOCK_RX | PHPAL_I14443P4_SW_STATE_CHAINING_BIT;
 8015f44:	68fb      	ldr	r3, [r7, #12]
 8015f46:	2282      	movs	r2, #130	@ 0x82
 8015f48:	721a      	strb	r2, [r3, #8]
 8015f4a:	e008      	b.n	8015f5e <phpalI14443p4_Sw_Exchange+0xe6>
    }
    /* I-Block transmission */
    else
    {
        /* Reset to default state if not in Tx-Mode */
        if ((pDataParams->bStateNow & PH_EXCHANGE_MODE_MASK) != PHPAL_I14443P4_SW_STATE_I_BLOCK_TX)
 8015f4c:	68fb      	ldr	r3, [r7, #12]
 8015f4e:	7a1b      	ldrb	r3, [r3, #8]
 8015f50:	f003 030f 	and.w	r3, r3, #15
 8015f54:	2b01      	cmp	r3, #1
 8015f56:	d002      	beq.n	8015f5e <phpalI14443p4_Sw_Exchange+0xe6>
        {
            pDataParams->bStateNow = PHPAL_I14443P4_SW_STATE_I_BLOCK_TX;
 8015f58:	68fb      	ldr	r3, [r7, #12]
 8015f5a:	2201      	movs	r2, #1
 8015f5c:	721a      	strb	r2, [r3, #8]
        }
    }

    /* Reset receive length */
    *pRxLength = 0;
 8015f5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015f60:	2200      	movs	r2, #0
 8015f62:	801a      	strh	r2, [r3, #0]

    /* Reset RetryCount */
    bRetryCountRetransmit = 0;
 8015f64:	2300      	movs	r3, #0
 8015f66:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

    /* Reset BufferOverflow flag */
    bBufferOverflow = 0;
 8015f6a:	2300      	movs	r3, #0
 8015f6c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    /*     I-BLOCK TRANSMISSION LOOP    */
    /* ******************************** */
    do
    {
        /* Reset Preloaded bytes and ForceSend */
        wTxBufferLen = 0;
 8015f70:	2300      	movs	r3, #0
 8015f72:	837b      	strh	r3, [r7, #26]
        bForceSend = 0;
 8015f74:	2300      	movs	r3, #0
 8015f76:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

        switch (pDataParams->bStateNow & PHPAL_I14443P4_SW_STATE_MASK)
 8015f7a:	68fb      	ldr	r3, [r7, #12]
 8015f7c:	7a1b      	ldrb	r3, [r3, #8]
 8015f7e:	f003 030f 	and.w	r3, r3, #15
 8015f82:	2b01      	cmp	r3, #1
 8015f84:	d003      	beq.n	8015f8e <phpalI14443p4_Sw_Exchange+0x116>
 8015f86:	2b02      	cmp	r3, #2
 8015f88:	f000 8114 	beq.w	80161b4 <phpalI14443p4_Sw_Exchange+0x33c>
 8015f8c:	e143      	b.n	8016216 <phpalI14443p4_Sw_Exchange+0x39e>
        {
        case PHPAL_I14443P4_SW_STATE_I_BLOCK_TX:

            /* Retrieve Number of preloaded bytes */
            if (0U != (wOption & PH_EXCHANGE_LEAVE_BUFFER_BIT))
 8015f8e:	897b      	ldrh	r3, [r7, #10]
 8015f90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d00e      	beq.n	8015fb6 <phpalI14443p4_Sw_Exchange+0x13e>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 8015f98:	68fb      	ldr	r3, [r7, #12]
 8015f9a:	685b      	ldr	r3, [r3, #4]
 8015f9c:	f107 021a 	add.w	r2, r7, #26
 8015fa0:	2133      	movs	r1, #51	@ 0x33
 8015fa2:	4618      	mov	r0, r3
 8015fa4:	f7fa f846 	bl	8010034 <phhalHw_Pn5180_GetConfig>
 8015fa8:	4603      	mov	r3, r0
 8015faa:	863b      	strh	r3, [r7, #48]	@ 0x30
 8015fac:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d001      	beq.n	8015fb6 <phpalI14443p4_Sw_Exchange+0x13e>
 8015fb2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8015fb4:	e2ce      	b.n	8016554 <phpalI14443p4_Sw_Exchange+0x6dc>
                    PHHAL_HW_CONFIG_TXBUFFER_LENGTH,
                    &wTxBufferLen));
            }

            /* Set initial INF length to (remaining) input data length */
            wInfLength = wTxLength;
 8015fb6:	893b      	ldrh	r3, [r7, #8]
 8015fb8:	86bb      	strh	r3, [r7, #52]	@ 0x34

            /* Frame has already been preloaded -> IsoFrameLen is zero */
            if (wTxBufferLen > 0U)
 8015fba:	8b7b      	ldrh	r3, [r7, #26]
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d002      	beq.n	8015fc6 <phpalI14443p4_Sw_Exchange+0x14e>
            {
                /* do not generate the iso frame */
                wIsoFrameLen = 0;
 8015fc0:	2300      	movs	r3, #0
 8015fc2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8015fc4:	e01e      	b.n	8016004 <phpalI14443p4_Sw_Exchange+0x18c>
            }
            /* Else evaluate IsoFrameLen*/
            else
            {
                /* 7.1.1.3 c), ISO/IEC 14443-4:2008(E), "During chaining the NAD shall only be transmitted in the first block of chain." */
                if ((0U == ((pDataParams->bStateNow & PHPAL_I14443P4_SW_STATE_CHAINING_BIT))))
 8015fc6:	68fb      	ldr	r3, [r7, #12]
 8015fc8:	7a1b      	ldrb	r3, [r3, #8]
 8015fca:	b25b      	sxtb	r3, r3
 8015fcc:	2b00      	cmp	r3, #0
 8015fce:	db04      	blt.n	8015fda <phpalI14443p4_Sw_Exchange+0x162>
                {
                    bUseNad = pDataParams->bNadEnabled;
 8015fd0:	68fb      	ldr	r3, [r7, #12]
 8015fd2:	7adb      	ldrb	r3, [r3, #11]
 8015fd4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015fd8:	e002      	b.n	8015fe0 <phpalI14443p4_Sw_Exchange+0x168>
                }
                else
                {
                    bUseNad = 0;
 8015fda:	2300      	movs	r3, #0
 8015fdc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                }

                /* Evaluate frame overhead */
                wIsoFrameLen = 1;
 8015fe0:	2301      	movs	r3, #1
 8015fe2:	84fb      	strh	r3, [r7, #38]	@ 0x26
                if (0U != (bUseNad))
 8015fe4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d003      	beq.n	8015ff4 <phpalI14443p4_Sw_Exchange+0x17c>
                {
                    ++wIsoFrameLen;
 8015fec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8015fee:	3301      	adds	r3, #1
 8015ff0:	b29b      	uxth	r3, r3
 8015ff2:	84fb      	strh	r3, [r7, #38]	@ 0x26
                }
                if (0U != (pDataParams->bCidEnabled))
 8015ff4:	68fb      	ldr	r3, [r7, #12]
 8015ff6:	7a5b      	ldrb	r3, [r3, #9]
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d003      	beq.n	8016004 <phpalI14443p4_Sw_Exchange+0x18c>
                {
                    ++wIsoFrameLen;
 8015ffc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8015ffe:	3301      	adds	r3, #1
 8016000:	b29b      	uxth	r3, r3
 8016002:	84fb      	strh	r3, [r7, #38]	@ 0x26
                }
            }

            /* Check if chaining is intended or not */
            if ((wOption & PH_EXCHANGE_MODE_MASK) == PH_EXCHANGE_TXCHAINING)
 8016004:	897b      	ldrh	r3, [r7, #10]
 8016006:	f003 030f 	and.w	r3, r3, #15
 801600a:	2b01      	cmp	r3, #1
 801600c:	d107      	bne.n	801601e <phpalI14443p4_Sw_Exchange+0x1a6>
            {
                pDataParams->bStateNow |= PHPAL_I14443P4_SW_STATE_CHAINING_BIT;
 801600e:	68fb      	ldr	r3, [r7, #12]
 8016010:	7a1b      	ldrb	r3, [r3, #8]
 8016012:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8016016:	b2da      	uxtb	r2, r3
 8016018:	68fb      	ldr	r3, [r7, #12]
 801601a:	721a      	strb	r2, [r3, #8]
 801601c:	e006      	b.n	801602c <phpalI14443p4_Sw_Exchange+0x1b4>
            }
            else
            {
                pDataParams->bStateNow &= (uint8_t)~(uint8_t)PHPAL_I14443P4_SW_STATE_CHAINING_BIT;
 801601e:	68fb      	ldr	r3, [r7, #12]
 8016020:	7a1b      	ldrb	r3, [r3, #8]
 8016022:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016026:	b2da      	uxtb	r2, r3
 8016028:	68fb      	ldr	r3, [r7, #12]
 801602a:	721a      	strb	r2, [r3, #8]
            }

            /* Force frame exchange if
            a) the maximum frame size of the card has been reached;
            */
            if ((wTxBufferLen + wIsoFrameLen + wInfLength) > wMaxCardFrameSize)
 801602c:	8b7b      	ldrh	r3, [r7, #26]
 801602e:	461a      	mov	r2, r3
 8016030:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8016032:	441a      	add	r2, r3
 8016034:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8016036:	441a      	add	r2, r3
 8016038:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801603a:	429a      	cmp	r2, r3
 801603c:	dd10      	ble.n	8016060 <phpalI14443p4_Sw_Exchange+0x1e8>
            {
                /* force frame exchange */
                bForceSend = 1;
 801603e:	2301      	movs	r3, #1
 8016040:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

                /* force chaining */
                pDataParams->bStateNow |= PHPAL_I14443P4_SW_STATE_CHAINING_BIT;
 8016044:	68fb      	ldr	r3, [r7, #12]
 8016046:	7a1b      	ldrb	r3, [r3, #8]
 8016048:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801604c:	b2da      	uxtb	r2, r3
 801604e:	68fb      	ldr	r3, [r7, #12]
 8016050:	721a      	strb	r2, [r3, #8]

                /* limit number of bytes to send */
                wInfLength = wMaxCardFrameSize - wTxBufferLen - wIsoFrameLen;
 8016052:	8b7b      	ldrh	r3, [r7, #26]
 8016054:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8016056:	1ad3      	subs	r3, r2, r3
 8016058:	b29a      	uxth	r2, r3
 801605a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801605c:	1ad3      	subs	r3, r2, r3
 801605e:	86bb      	strh	r3, [r7, #52]	@ 0x34
            }

            /* Force frame exchange if
            b) the TxBuffer is full;
            */
            if ((0U != ((wOption & PH_EXCHANGE_BUFFERED_BIT))) &&
 8016060:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8016064:	2b00      	cmp	r3, #0
 8016066:	da12      	bge.n	801608e <phpalI14443p4_Sw_Exchange+0x216>
                ((wTxBufferLen + wIsoFrameLen + wInfLength) >= wTxBufferSize))
 8016068:	8b7b      	ldrh	r3, [r7, #26]
 801606a:	461a      	mov	r2, r3
 801606c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801606e:	441a      	add	r2, r3
 8016070:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8016072:	4413      	add	r3, r2
 8016074:	8bba      	ldrh	r2, [r7, #28]
            if ((0U != ((wOption & PH_EXCHANGE_BUFFERED_BIT))) &&
 8016076:	4293      	cmp	r3, r2
 8016078:	db09      	blt.n	801608e <phpalI14443p4_Sw_Exchange+0x216>
            {
                /* force frame exchange */
                bForceSend = 1;
 801607a:	2301      	movs	r3, #1
 801607c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

                /* force chaining */
                pDataParams->bStateNow |= PHPAL_I14443P4_SW_STATE_CHAINING_BIT;
 8016080:	68fb      	ldr	r3, [r7, #12]
 8016082:	7a1b      	ldrb	r3, [r3, #8]
 8016084:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8016088:	b2da      	uxtb	r2, r3
 801608a:	68fb      	ldr	r3, [r7, #12]
 801608c:	721a      	strb	r2, [r3, #8]
            }

            /* Generate / Buffer ISO frame */
            if (wIsoFrameLen > 0U)
 801608e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8016090:	2b00      	cmp	r3, #0
 8016092:	d039      	beq.n	8016108 <phpalI14443p4_Sw_Exchange+0x290>
            {
                /* Generate I-Block frame header */
                PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p4_Sw_BuildIBlock(
 8016094:	68fb      	ldr	r3, [r7, #12]
 8016096:	7a58      	ldrb	r0, [r3, #9]
 8016098:	68fb      	ldr	r3, [r7, #12]
 801609a:	7a9c      	ldrb	r4, [r3, #10]
 801609c:	68fb      	ldr	r3, [r7, #12]
 801609e:	7b1e      	ldrb	r6, [r3, #12]
 80160a0:	68fb      	ldr	r3, [r7, #12]
 80160a2:	7c1b      	ldrb	r3, [r3, #16]
 80160a4:	68fa      	ldr	r2, [r7, #12]
 80160a6:	7a12      	ldrb	r2, [r2, #8]
 80160a8:	09d2      	lsrs	r2, r2, #7
 80160aa:	b2d2      	uxtb	r2, r2
 80160ac:	f897 5037 	ldrb.w	r5, [r7, #55]	@ 0x37
 80160b0:	f107 0126 	add.w	r1, r7, #38	@ 0x26
 80160b4:	9103      	str	r1, [sp, #12]
 80160b6:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80160ba:	9102      	str	r1, [sp, #8]
 80160bc:	9201      	str	r2, [sp, #4]
 80160be:	9300      	str	r3, [sp, #0]
 80160c0:	4633      	mov	r3, r6
 80160c2:	462a      	mov	r2, r5
 80160c4:	4621      	mov	r1, r4
 80160c6:	f000 fee3 	bl	8016e90 <phpalI14443p4_Sw_BuildIBlock>
 80160ca:	4603      	mov	r3, r0
 80160cc:	863b      	strh	r3, [r7, #48]	@ 0x30
 80160ce:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d001      	beq.n	80160d8 <phpalI14443p4_Sw_Exchange+0x260>
 80160d4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80160d6:	e23d      	b.n	8016554 <phpalI14443p4_Sw_Exchange+0x6dc>
                    (0U != (pDataParams->bStateNow & PHPAL_I14443P4_SW_STATE_CHAINING_BIT)) ? 1U : 0U,
                    bIsoFrame,
                    &wIsoFrameLen));

                /* Write Frame to HAL TxBuffer but do not preform Exchange */
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 80160d8:	68fb      	ldr	r3, [r7, #12]
 80160da:	6858      	ldr	r0, [r3, #4]
 80160dc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80160de:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80160e2:	2100      	movs	r1, #0
 80160e4:	9101      	str	r1, [sp, #4]
 80160e6:	2100      	movs	r1, #0
 80160e8:	9100      	str	r1, [sp, #0]
 80160ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80160ee:	f7f7 ff9d 	bl	800e02c <phhalHw_Pn5180_Exchange>
 80160f2:	4603      	mov	r3, r0
 80160f4:	863b      	strh	r3, [r7, #48]	@ 0x30
 80160f6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d001      	beq.n	8016100 <phpalI14443p4_Sw_Exchange+0x288>
 80160fc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80160fe:	e229      	b.n	8016554 <phpalI14443p4_Sw_Exchange+0x6dc>
                    wIsoFrameLen,
                    NULL,
                    NULL));

                /* Retain the preloaded bytes from now on */
                wOption |= PH_EXCHANGE_LEAVE_BUFFER_BIT;
 8016100:	897b      	ldrh	r3, [r7, #10]
 8016102:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8016106:	817b      	strh	r3, [r7, #10]
            }

            /* Tx-Buffering mode (and no forced exchange) */
            if ((0U == bForceSend) && (0U != (wOption & PH_EXCHANGE_BUFFERED_BIT)))
 8016108:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 801610c:	2b00      	cmp	r3, #0
 801610e:	d113      	bne.n	8016138 <phpalI14443p4_Sw_Exchange+0x2c0>
 8016110:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8016114:	2b00      	cmp	r3, #0
 8016116:	da0f      	bge.n	8016138 <phpalI14443p4_Sw_Exchange+0x2c0>
            {
                /* Preload the data into the TxBuffer */
                return phhalHw_Exchange(
 8016118:	68fb      	ldr	r3, [r7, #12]
 801611a:	6858      	ldr	r0, [r3, #4]
 801611c:	897b      	ldrh	r3, [r7, #10]
 801611e:	f023 030f 	bic.w	r3, r3, #15
 8016122:	b299      	uxth	r1, r3
 8016124:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8016126:	2200      	movs	r2, #0
 8016128:	9201      	str	r2, [sp, #4]
 801612a:	2200      	movs	r2, #0
 801612c:	9200      	str	r2, [sp, #0]
 801612e:	687a      	ldr	r2, [r7, #4]
 8016130:	f7f7 ff7c 	bl	800e02c <phhalHw_Pn5180_Exchange>
 8016134:	4603      	mov	r3, r0
 8016136:	e20d      	b.n	8016554 <phpalI14443p4_Sw_Exchange+0x6dc>
                    NULL,
                    NULL);
            }

            /* Content has been buffered before */
            if (wTxBufferLen > 0U)
 8016138:	8b7b      	ldrh	r3, [r7, #26]
 801613a:	2b00      	cmp	r3, #0
 801613c:	d06e      	beq.n	801621c <phpalI14443p4_Sw_Exchange+0x3a4>
            {
                /* retrieve PCB byte */
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXBUFFER_OFFSET, 0x00));
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	685b      	ldr	r3, [r3, #4]
 8016142:	2200      	movs	r2, #0
 8016144:	212f      	movs	r1, #47	@ 0x2f
 8016146:	4618      	mov	r0, r3
 8016148:	f7f8 fb26 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 801614c:	4603      	mov	r3, r0
 801614e:	863b      	strh	r3, [r7, #48]	@ 0x30
 8016150:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8016152:	2b00      	cmp	r3, #0
 8016154:	d001      	beq.n	801615a <phpalI14443p4_Sw_Exchange+0x2e2>
 8016156:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8016158:	e1fc      	b.n	8016554 <phpalI14443p4_Sw_Exchange+0x6dc>
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXBUFFER, &wPcb));
 801615a:	68fb      	ldr	r3, [r7, #12]
 801615c:	685b      	ldr	r3, [r3, #4]
 801615e:	f107 0218 	add.w	r2, r7, #24
 8016162:	2134      	movs	r1, #52	@ 0x34
 8016164:	4618      	mov	r0, r3
 8016166:	f7f9 ff65 	bl	8010034 <phhalHw_Pn5180_GetConfig>
 801616a:	4603      	mov	r3, r0
 801616c:	863b      	strh	r3, [r7, #48]	@ 0x30
 801616e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8016170:	2b00      	cmp	r3, #0
 8016172:	d003      	beq.n	801617c <phpalI14443p4_Sw_Exchange+0x304>
 8016174:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8016176:	e1ed      	b.n	8016554 <phpalI14443p4_Sw_Exchange+0x6dc>
 8016178:	08023b24 	.word	0x08023b24

                /* Preloaded Data or ForceSend -> Modify PCB byte if neccessary */
                if ((0U != bForceSend) || ((wOption & PH_EXCHANGE_MODE_MASK) == PH_EXCHANGE_TXCHAINING))
 801617c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8016180:	2b00      	cmp	r3, #0
 8016182:	d104      	bne.n	801618e <phpalI14443p4_Sw_Exchange+0x316>
 8016184:	897b      	ldrh	r3, [r7, #10]
 8016186:	f003 030f 	and.w	r3, r3, #15
 801618a:	2b01      	cmp	r3, #1
 801618c:	d146      	bne.n	801621c <phpalI14443p4_Sw_Exchange+0x3a4>
                {
                    /* modify PCB byte */
                    wPcb |= PHPAL_I14443P4_SW_PCB_CHAINING;
 801618e:	8b3b      	ldrh	r3, [r7, #24]
 8016190:	f043 0310 	orr.w	r3, r3, #16
 8016194:	b29b      	uxth	r3, r3
 8016196:	833b      	strh	r3, [r7, #24]
                    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXBUFFER, wPcb));
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	685b      	ldr	r3, [r3, #4]
 801619c:	8b3a      	ldrh	r2, [r7, #24]
 801619e:	2134      	movs	r1, #52	@ 0x34
 80161a0:	4618      	mov	r0, r3
 80161a2:	f7f8 faf9 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 80161a6:	4603      	mov	r3, r0
 80161a8:	863b      	strh	r3, [r7, #48]	@ 0x30
 80161aa:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d035      	beq.n	801621c <phpalI14443p4_Sw_Exchange+0x3a4>
 80161b0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80161b2:	e1cf      	b.n	8016554 <phpalI14443p4_Sw_Exchange+0x6dc>
            break;

        case PHPAL_I14443P4_SW_STATE_I_BLOCK_RX:

            /* Build R(ACK) frame */
            PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p4_Sw_BuildRBlock(
 80161b4:	68fb      	ldr	r3, [r7, #12]
 80161b6:	7a58      	ldrb	r0, [r3, #9]
 80161b8:	68fb      	ldr	r3, [r7, #12]
 80161ba:	7a99      	ldrb	r1, [r3, #10]
 80161bc:	68fb      	ldr	r3, [r7, #12]
 80161be:	7c1a      	ldrb	r2, [r3, #16]
 80161c0:	f107 0326 	add.w	r3, r7, #38	@ 0x26
 80161c4:	9301      	str	r3, [sp, #4]
 80161c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80161ca:	9300      	str	r3, [sp, #0]
 80161cc:	2301      	movs	r3, #1
 80161ce:	f000 feb1 	bl	8016f34 <phpalI14443p4_Sw_BuildRBlock>
 80161d2:	4603      	mov	r3, r0
 80161d4:	863b      	strh	r3, [r7, #48]	@ 0x30
 80161d6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d001      	beq.n	80161e0 <phpalI14443p4_Sw_Exchange+0x368>
 80161dc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80161de:	e1b9      	b.n	8016554 <phpalI14443p4_Sw_Exchange+0x6dc>
                1,
                bIsoFrame,
                &wIsoFrameLen));

            /* Write Frame to HAL TxBuffer but do not preform Exchange */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 80161e0:	68fb      	ldr	r3, [r7, #12]
 80161e2:	6858      	ldr	r0, [r3, #4]
 80161e4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80161e6:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80161ea:	2100      	movs	r1, #0
 80161ec:	9101      	str	r1, [sp, #4]
 80161ee:	2100      	movs	r1, #0
 80161f0:	9100      	str	r1, [sp, #0]
 80161f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80161f6:	f7f7 ff19 	bl	800e02c <phhalHw_Pn5180_Exchange>
 80161fa:	4603      	mov	r3, r0
 80161fc:	863b      	strh	r3, [r7, #48]	@ 0x30
 80161fe:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8016200:	2b00      	cmp	r3, #0
 8016202:	d001      	beq.n	8016208 <phpalI14443p4_Sw_Exchange+0x390>
 8016204:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8016206:	e1a5      	b.n	8016554 <phpalI14443p4_Sw_Exchange+0x6dc>
                wIsoFrameLen,
                NULL,
                NULL));

            /* Retain the preloaded bytes from now on */
            wOption |= PH_EXCHANGE_LEAVE_BUFFER_BIT;
 8016208:	897b      	ldrh	r3, [r7, #10]
 801620a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801620e:	817b      	strh	r3, [r7, #10]

            /* do not append any data */
            wInfLength = 0;
 8016210:	2300      	movs	r3, #0
 8016212:	86bb      	strh	r3, [r7, #52]	@ 0x34
            break;
 8016214:	e003      	b.n	801621e <phpalI14443p4_Sw_Exchange+0x3a6>

            /* Should NEVER happen! */
        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_PAL_ISO14443P4);
 8016216:	f240 637f 	movw	r3, #1663	@ 0x67f
 801621a:	e19b      	b.n	8016554 <phpalI14443p4_Sw_Exchange+0x6dc>
            break;
 801621c:	bf00      	nop
        }

        /* Perform Exchange using complete ISO handling */
        status = phpalI14443p4_Sw_IsoHandling(
 801621e:	897b      	ldrh	r3, [r7, #10]
 8016220:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8016224:	b299      	uxth	r1, r3
 8016226:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 801622a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801622c:	9302      	str	r3, [sp, #8]
 801622e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016230:	9301      	str	r3, [sp, #4]
 8016232:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8016234:	9300      	str	r3, [sp, #0]
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	68f8      	ldr	r0, [r7, #12]
 801623a:	f000 f98f 	bl	801655c <phpalI14443p4_Sw_IsoHandling>
 801623e:	4603      	mov	r3, r0
 8016240:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            wInfLength,
            ppRxBuffer,
            pRxLength);

        /* Complete chaining if buffer is full */
        if (((status & PH_ERR_MASK) == PH_ERR_BUFFER_OVERFLOW) &&
 8016242:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016244:	b2db      	uxtb	r3, r3
 8016246:	2b04      	cmp	r3, #4
 8016248:	d10f      	bne.n	801626a <phpalI14443p4_Sw_Exchange+0x3f2>
            ((wOption & PH_EXCHANGE_MODE_MASK) == PH_EXCHANGE_RXCHAINING_BUFSIZE))
 801624a:	897b      	ldrh	r3, [r7, #10]
 801624c:	f003 030f 	and.w	r3, r3, #15
        if (((status & PH_ERR_MASK) == PH_ERR_BUFFER_OVERFLOW) &&
 8016250:	2b03      	cmp	r3, #3
 8016252:	d10a      	bne.n	801626a <phpalI14443p4_Sw_Exchange+0x3f2>
        {
            /* Indicate Buffer Overflow */
            bBufferOverflow = 1;
 8016254:	2301      	movs	r3, #1
 8016256:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

            /* Toggle Blocknumber */
            pDataParams->bPcbBlockNum ^= PHPAL_I14443P4_SW_PCB_BLOCKNR;
 801625a:	68fb      	ldr	r3, [r7, #12]
 801625c:	7c1b      	ldrb	r3, [r3, #16]
 801625e:	f083 0301 	eor.w	r3, r3, #1
 8016262:	b2da      	uxtb	r2, r3
 8016264:	68fb      	ldr	r3, [r7, #12]
 8016266:	741a      	strb	r2, [r3, #16]
 8016268:	e004      	b.n	8016274 <phpalI14443p4_Sw_Exchange+0x3fc>
        }
        /* Else bail out on error */
        else
        {
            PH_CHECK_SUCCESS(status);
 801626a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801626c:	2b00      	cmp	r3, #0
 801626e:	d001      	beq.n	8016274 <phpalI14443p4_Sw_Exchange+0x3fc>
 8016270:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016272:	e16f      	b.n	8016554 <phpalI14443p4_Sw_Exchange+0x6dc>
        }

        /* Retransmission in progress */
        if (0U != (pDataParams->bStateNow & PHPAL_I14443P4_SW_STATE_RETRANSMIT_BIT))
 8016274:	68fb      	ldr	r3, [r7, #12]
 8016276:	7a1b      	ldrb	r3, [r3, #8]
 8016278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801627c:	2b00      	cmp	r3, #0
 801627e:	d039      	beq.n	80162f4 <phpalI14443p4_Sw_Exchange+0x47c>
        {
            /* Increment Retransmit RetryCount */
            ++bRetryCountRetransmit;
 8016280:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8016284:	3301      	adds	r3, #1
 8016286:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

            /* Restore internal TxBuffer. */
            /* Neccessary in case RxBuffer and TxBuffer are the same. */
            if (wTxBufferLen > 0U)
 801628a:	8b7b      	ldrh	r3, [r7, #26]
 801628c:	2b00      	cmp	r3, #0
 801628e:	d029      	beq.n	80162e4 <phpalI14443p4_Sw_Exchange+0x46c>
            {
                /* restore PCB byte */
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXBUFFER_OFFSET, 0x00));
 8016290:	68fb      	ldr	r3, [r7, #12]
 8016292:	685b      	ldr	r3, [r3, #4]
 8016294:	2200      	movs	r2, #0
 8016296:	212f      	movs	r1, #47	@ 0x2f
 8016298:	4618      	mov	r0, r3
 801629a:	f7f8 fa7d 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 801629e:	4603      	mov	r3, r0
 80162a0:	863b      	strh	r3, [r7, #48]	@ 0x30
 80162a2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d001      	beq.n	80162ac <phpalI14443p4_Sw_Exchange+0x434>
 80162a8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80162aa:	e153      	b.n	8016554 <phpalI14443p4_Sw_Exchange+0x6dc>
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXBUFFER, wPcb));
 80162ac:	68fb      	ldr	r3, [r7, #12]
 80162ae:	685b      	ldr	r3, [r3, #4]
 80162b0:	8b3a      	ldrh	r2, [r7, #24]
 80162b2:	2134      	movs	r1, #52	@ 0x34
 80162b4:	4618      	mov	r0, r3
 80162b6:	f7f8 fa6f 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 80162ba:	4603      	mov	r3, r0
 80162bc:	863b      	strh	r3, [r7, #48]	@ 0x30
 80162be:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d001      	beq.n	80162c8 <phpalI14443p4_Sw_Exchange+0x450>
 80162c4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80162c6:	e145      	b.n	8016554 <phpalI14443p4_Sw_Exchange+0x6dc>

                /* restore TxBufferLen */
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80162c8:	68fb      	ldr	r3, [r7, #12]
 80162ca:	685b      	ldr	r3, [r3, #4]
 80162cc:	8b7a      	ldrh	r2, [r7, #26]
 80162ce:	2133      	movs	r1, #51	@ 0x33
 80162d0:	4618      	mov	r0, r3
 80162d2:	f7f8 fa61 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 80162d6:	4603      	mov	r3, r0
 80162d8:	863b      	strh	r3, [r7, #48]	@ 0x30
 80162da:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d001      	beq.n	80162e4 <phpalI14443p4_Sw_Exchange+0x46c>
 80162e0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80162e2:	e137      	b.n	8016554 <phpalI14443p4_Sw_Exchange+0x6dc>
                    PHHAL_HW_CONFIG_TXBUFFER_LENGTH,
                    wTxBufferLen));
            }

            /* Clear retransmission bit */
            pDataParams->bStateNow &= (uint8_t)~(uint8_t)PHPAL_I14443P4_SW_STATE_RETRANSMIT_BIT;
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	7a1b      	ldrb	r3, [r3, #8]
 80162e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80162ec:	b2da      	uxtb	r2, r3
 80162ee:	68fb      	ldr	r3, [r7, #12]
 80162f0:	721a      	strb	r2, [r3, #8]
 80162f2:	e026      	b.n	8016342 <phpalI14443p4_Sw_Exchange+0x4ca>
        }
        /* No retransmission in progress */
        else
        {
            /* Reset Retransmit RetryCount */
            bRetryCountRetransmit = 0;
 80162f4:	2300      	movs	r3, #0
 80162f6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

            /* Chaining is active */
            if (pDataParams->bStateNow == (PHPAL_I14443P4_SW_STATE_I_BLOCK_TX | PHPAL_I14443P4_SW_STATE_CHAINING_BIT))
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	7a1b      	ldrb	r3, [r3, #8]
 80162fe:	2b81      	cmp	r3, #129	@ 0x81
 8016300:	d111      	bne.n	8016326 <phpalI14443p4_Sw_Exchange+0x4ae>
            {
                /* Bytes to send cannot be less than sent bytes */
                if (wTxLength < wInfLength)
 8016302:	893a      	ldrh	r2, [r7, #8]
 8016304:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8016306:	429a      	cmp	r2, r3
 8016308:	d202      	bcs.n	8016310 <phpalI14443p4_Sw_Exchange+0x498>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_PAL_ISO14443P4);
 801630a:	f240 637f 	movw	r3, #1663	@ 0x67f
 801630e:	e121      	b.n	8016554 <phpalI14443p4_Sw_Exchange+0x6dc>
                }

                /* Remove sent bytes from TxBuffer */
                pTxBuffer = pTxBuffer + wInfLength;
 8016310:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8016312:	687a      	ldr	r2, [r7, #4]
 8016314:	4413      	add	r3, r2
 8016316:	607b      	str	r3, [r7, #4]

                /* below if condition is added to make QAC compliant  */
                if(wTxLength > 0U)
 8016318:	893b      	ldrh	r3, [r7, #8]
 801631a:	2b00      	cmp	r3, #0
 801631c:	d003      	beq.n	8016326 <phpalI14443p4_Sw_Exchange+0x4ae>
                {
                    wTxLength = wTxLength - wInfLength;
 801631e:	893a      	ldrh	r2, [r7, #8]
 8016320:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8016322:	1ad3      	subs	r3, r2, r3
 8016324:	813b      	strh	r3, [r7, #8]
                }
            }

            /* Buffered / TxChaining mode -> finished after sending */
            if ((wTxLength == 0U) &&
 8016326:	893b      	ldrh	r3, [r7, #8]
 8016328:	2b00      	cmp	r3, #0
 801632a:	d10a      	bne.n	8016342 <phpalI14443p4_Sw_Exchange+0x4ca>
                (
                ((wOption & PH_EXCHANGE_BUFFERED_BIT) > 0U) ||
 801632c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
            if ((wTxLength == 0U) &&
 8016330:	2b00      	cmp	r3, #0
 8016332:	db04      	blt.n	801633e <phpalI14443p4_Sw_Exchange+0x4c6>
                ((wOption & PH_EXCHANGE_MODE_MASK) == PH_EXCHANGE_TXCHAINING)
 8016334:	897b      	ldrh	r3, [r7, #10]
 8016336:	f003 030f 	and.w	r3, r3, #15
                ((wOption & PH_EXCHANGE_BUFFERED_BIT) > 0U) ||
 801633a:	2b01      	cmp	r3, #1
 801633c:	d101      	bne.n	8016342 <phpalI14443p4_Sw_Exchange+0x4ca>
                ))
            {
                return PH_ERR_SUCCESS;
 801633e:	2300      	movs	r3, #0
 8016340:	e108      	b.n	8016554 <phpalI14443p4_Sw_Exchange+0x6dc>
            }
        }
    }
    /* Loop as long as the state does not transit to RX mode */
    while ((pDataParams->bStateNow & PHPAL_I14443P4_SW_STATE_MASK) != PHPAL_I14443P4_SW_STATE_I_BLOCK_RX);
 8016342:	68fb      	ldr	r3, [r7, #12]
 8016344:	7a1b      	ldrb	r3, [r3, #8]
 8016346:	f003 030f 	and.w	r3, r3, #15
 801634a:	2b02      	cmp	r3, #2
 801634c:	f47f ae10 	bne.w	8015f70 <phpalI14443p4_Sw_Exchange+0xf8>

    /* Overlap PCB */
    wRxOverlappedLen = 1;
 8016350:	2301      	movs	r3, #1
 8016352:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* Overlap CID */
    if (0u != ((*ppRxBuffer)[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_PCB_CID_FOLLOWING))
 8016354:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016356:	681b      	ldr	r3, [r3, #0]
 8016358:	781b      	ldrb	r3, [r3, #0]
 801635a:	f003 0308 	and.w	r3, r3, #8
 801635e:	2b00      	cmp	r3, #0
 8016360:	d002      	beq.n	8016368 <phpalI14443p4_Sw_Exchange+0x4f0>
    {
        wRxOverlappedLen++;
 8016362:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016364:	3301      	adds	r3, #1
 8016366:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }

    /* Overlap NAD */
    if (0u != ((*ppRxBuffer)[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_PCB_NAD_FOLLOWING))
 8016368:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801636a:	681b      	ldr	r3, [r3, #0]
 801636c:	781b      	ldrb	r3, [r3, #0]
 801636e:	f003 0304 	and.w	r3, r3, #4
 8016372:	2b00      	cmp	r3, #0
 8016374:	d002      	beq.n	801637c <phpalI14443p4_Sw_Exchange+0x504>
    {
        wRxOverlappedLen++;
 8016376:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016378:	3301      	adds	r3, #1
 801637a:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }

    /* Reset RxStartPos */
    wRxStartPos = 0;
 801637c:	2300      	movs	r3, #0
 801637e:	873b      	strh	r3, [r7, #56]	@ 0x38
    /*      I-BLOCK RECEPTION LOOP      */
    /* ******************************** */
    do
    {
        /* Only allow receive state at this point */
        if ((pDataParams->bStateNow & PHPAL_I14443P4_SW_STATE_MASK) != PHPAL_I14443P4_SW_STATE_I_BLOCK_RX)
 8016380:	68fb      	ldr	r3, [r7, #12]
 8016382:	7a1b      	ldrb	r3, [r3, #8]
 8016384:	f003 030f 	and.w	r3, r3, #15
 8016388:	2b02      	cmp	r3, #2
 801638a:	d002      	beq.n	8016392 <phpalI14443p4_Sw_Exchange+0x51a>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_PAL_ISO14443P4);
 801638c:	f240 637f 	movw	r3, #1663	@ 0x67f
 8016390:	e0e0      	b.n	8016554 <phpalI14443p4_Sw_Exchange+0x6dc>
        }

        /* Rule 2, ISO/IEC 14443-4:2008(E), PICC chaining */
        if (0U != (pDataParams->bStateNow & PHPAL_I14443P4_SW_STATE_CHAINING_BIT))
 8016392:	68fb      	ldr	r3, [r7, #12]
 8016394:	7a1b      	ldrb	r3, [r3, #8]
 8016396:	b25b      	sxtb	r3, r3
 8016398:	2b00      	cmp	r3, #0
 801639a:	f280 80ae 	bge.w	80164fa <phpalI14443p4_Sw_Exchange+0x682>
        {
            /* Skip overlapping / SUCCESS_CHAINING checks in case of BufferOverflow */
            if (0U == (bBufferOverflow))
 801639e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d139      	bne.n	801641a <phpalI14443p4_Sw_Exchange+0x5a2>
            {
                /* This is first chained response */
                if (wRxStartPos == 0U)
 80163a6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d106      	bne.n	80163ba <phpalI14443p4_Sw_Exchange+0x542>
                {
                    /* Special NAD chaining handling */
                    /* 7.1.1.3 c), ISO/IEC 14443-4:2008(E), "During chaining the NAD shall only be transmitted in the first block of chain." */
                    if (0U != (pDataParams->bNadEnabled))
 80163ac:	68fb      	ldr	r3, [r7, #12]
 80163ae:	7adb      	ldrb	r3, [r3, #11]
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	d002      	beq.n	80163ba <phpalI14443p4_Sw_Exchange+0x542>
                    {
                        --wRxOverlappedLen;
 80163b4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80163b6:	3b01      	subs	r3, #1
 80163b8:	877b      	strh	r3, [r7, #58]	@ 0x3a
                    }
                }

                /* Backup overlapped bytes */
                (void)memcpy(bRxOverlapped, &(*ppRxBuffer)[((*pRxLength) - wRxOverlappedLen)], wRxOverlappedLen);
 80163ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80163bc:	681b      	ldr	r3, [r3, #0]
 80163be:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80163c0:	8812      	ldrh	r2, [r2, #0]
 80163c2:	4611      	mov	r1, r2
 80163c4:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80163c6:	1a8a      	subs	r2, r1, r2
 80163c8:	1899      	adds	r1, r3, r2
 80163ca:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80163cc:	f107 0320 	add.w	r3, r7, #32
 80163d0:	4618      	mov	r0, r3
 80163d2:	f00a fade 	bl	8020992 <memcpy>

                /* Calculate RxBuffer Start Position */
                wRxStartPos = (*pRxLength) - wRxOverlappedLen;
 80163d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80163d8:	881a      	ldrh	r2, [r3, #0]
 80163da:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80163dc:	1ad3      	subs	r3, r2, r3
 80163de:	873b      	strh	r3, [r7, #56]	@ 0x38

                /* Skip SUCCESS_CHAINING check for RXCHAINING_BUFSIZE mode */
                if ((wOption & PH_EXCHANGE_MODE_MASK) != PH_EXCHANGE_RXCHAINING_BUFSIZE)
 80163e0:	897b      	ldrh	r3, [r7, #10]
 80163e2:	f003 030f 	and.w	r3, r3, #15
 80163e6:	2b03      	cmp	r3, #3
 80163e8:	d017      	beq.n	801641a <phpalI14443p4_Sw_Exchange+0x5a2>
                {
                    /* Return with chaining status if the next chain may not fit into our buffer */
                    if ((*pRxLength + wMaxPcdFrameSize) > wRxBufferSize)
 80163ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80163ec:	881b      	ldrh	r3, [r3, #0]
 80163ee:	461a      	mov	r2, r3
 80163f0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80163f2:	4413      	add	r3, r2
 80163f4:	8bfa      	ldrh	r2, [r7, #30]
 80163f6:	4293      	cmp	r3, r2
 80163f8:	dd0f      	ble.n	801641a <phpalI14443p4_Sw_Exchange+0x5a2>
                    {
                        /* Adjust RxBuffer position */
                        (*ppRxBuffer) = (*ppRxBuffer) + wRxOverlappedLen;
 80163fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80163fc:	681a      	ldr	r2, [r3, #0]
 80163fe:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016400:	441a      	add	r2, r3
 8016402:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016404:	601a      	str	r2, [r3, #0]
                        *pRxLength = *pRxLength - wRxOverlappedLen;
 8016406:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016408:	881a      	ldrh	r2, [r3, #0]
 801640a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801640c:	1ad3      	subs	r3, r2, r3
 801640e:	b29a      	uxth	r2, r3
 8016410:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016412:	801a      	strh	r2, [r3, #0]

                        return PH_ADD_COMPCODE_FIXED(PH_ERR_SUCCESS_CHAINING, PH_COMP_PAL_ISO14443P4);
 8016414:	f240 6371 	movw	r3, #1649	@ 0x671
 8016418:	e09c      	b.n	8016554 <phpalI14443p4_Sw_Exchange+0x6dc>
                    }
                }
            }

            /* Set RxBuffer Start Position */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801641a:	68fb      	ldr	r3, [r7, #12]
 801641c:	685b      	ldr	r3, [r3, #4]
 801641e:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8016420:	2130      	movs	r1, #48	@ 0x30
 8016422:	4618      	mov	r0, r3
 8016424:	f7f8 f9b8 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8016428:	4603      	mov	r3, r0
 801642a:	863b      	strh	r3, [r7, #48]	@ 0x30
 801642c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801642e:	2b00      	cmp	r3, #0
 8016430:	d001      	beq.n	8016436 <phpalI14443p4_Sw_Exchange+0x5be>
 8016432:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8016434:	e08e      	b.n	8016554 <phpalI14443p4_Sw_Exchange+0x6dc>
                pDataParams->pHalDataParams,
                PHHAL_HW_CONFIG_RXBUFFER_STARTPOS,
                wRxStartPos));

            /* Prepare R(ACK) frame */
            PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p4_Sw_BuildRBlock(
 8016436:	68fb      	ldr	r3, [r7, #12]
 8016438:	7a58      	ldrb	r0, [r3, #9]
 801643a:	68fb      	ldr	r3, [r7, #12]
 801643c:	7a99      	ldrb	r1, [r3, #10]
 801643e:	68fb      	ldr	r3, [r7, #12]
 8016440:	7c1a      	ldrb	r2, [r3, #16]
 8016442:	f107 0326 	add.w	r3, r7, #38	@ 0x26
 8016446:	9301      	str	r3, [sp, #4]
 8016448:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801644c:	9300      	str	r3, [sp, #0]
 801644e:	2301      	movs	r3, #1
 8016450:	f000 fd70 	bl	8016f34 <phpalI14443p4_Sw_BuildRBlock>
 8016454:	4603      	mov	r3, r0
 8016456:	863b      	strh	r3, [r7, #48]	@ 0x30
 8016458:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801645a:	2b00      	cmp	r3, #0
 801645c:	d001      	beq.n	8016462 <phpalI14443p4_Sw_Exchange+0x5ea>
 801645e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8016460:	e078      	b.n	8016554 <phpalI14443p4_Sw_Exchange+0x6dc>
                1,
                bIsoFrame,
                &wIsoFrameLen));

            /* Perform Exchange using complete ISO handling */
            status = phpalI14443p4_Sw_IsoHandling(
 8016462:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8016464:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8016468:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801646a:	9202      	str	r2, [sp, #8]
 801646c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801646e:	9201      	str	r2, [sp, #4]
 8016470:	9300      	str	r3, [sp, #0]
 8016472:	460b      	mov	r3, r1
 8016474:	2200      	movs	r2, #0
 8016476:	2100      	movs	r1, #0
 8016478:	68f8      	ldr	r0, [r7, #12]
 801647a:	f000 f86f 	bl	801655c <phpalI14443p4_Sw_IsoHandling>
 801647e:	4603      	mov	r3, r0
 8016480:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                wIsoFrameLen,
                ppRxBuffer,
                pRxLength);

            /* Complete chaining if buffer is full */
            if (((status & PH_ERR_MASK) == PH_ERR_BUFFER_OVERFLOW) &&
 8016482:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016484:	b2db      	uxtb	r3, r3
 8016486:	2b04      	cmp	r3, #4
 8016488:	d111      	bne.n	80164ae <phpalI14443p4_Sw_Exchange+0x636>
                ((wOption & PH_EXCHANGE_MODE_MASK) == PH_EXCHANGE_RXCHAINING_BUFSIZE))
 801648a:	897b      	ldrh	r3, [r7, #10]
 801648c:	f003 030f 	and.w	r3, r3, #15
            if (((status & PH_ERR_MASK) == PH_ERR_BUFFER_OVERFLOW) &&
 8016490:	2b03      	cmp	r3, #3
 8016492:	d10c      	bne.n	80164ae <phpalI14443p4_Sw_Exchange+0x636>
            {
                /* Reset wRxStartPos */
                wRxStartPos = 0;
 8016494:	2300      	movs	r3, #0
 8016496:	873b      	strh	r3, [r7, #56]	@ 0x38

                /* Indicate Buffer Overflow */
                bBufferOverflow = 1;
 8016498:	2301      	movs	r3, #1
 801649a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

                /* Toggle Blocknumber */
                pDataParams->bPcbBlockNum ^= PHPAL_I14443P4_SW_PCB_BLOCKNR;
 801649e:	68fb      	ldr	r3, [r7, #12]
 80164a0:	7c1b      	ldrb	r3, [r3, #16]
 80164a2:	f083 0301 	eor.w	r3, r3, #1
 80164a6:	b2da      	uxtb	r2, r3
 80164a8:	68fb      	ldr	r3, [r7, #12]
 80164aa:	741a      	strb	r2, [r3, #16]
 80164ac:	e04c      	b.n	8016548 <phpalI14443p4_Sw_Exchange+0x6d0>
            }
            /* Default behaviour */
            else
            {
                /* In case of buffer overflow error from HAL, reset the HAL Rx Buffer Start position */
                if ((pDataParams->bOpeMode != RD_LIB_MODE_ISO) && ((status & PH_ERR_MASK) == PH_ERR_BUFFER_OVERFLOW))
 80164ae:	68fb      	ldr	r3, [r7, #12]
 80164b0:	7c9b      	ldrb	r3, [r3, #18]
 80164b2:	2b03      	cmp	r3, #3
 80164b4:	d011      	beq.n	80164da <phpalI14443p4_Sw_Exchange+0x662>
 80164b6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80164b8:	b2db      	uxtb	r3, r3
 80164ba:	2b04      	cmp	r3, #4
 80164bc:	d10d      	bne.n	80164da <phpalI14443p4_Sw_Exchange+0x662>
                {
                    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXBUFFER_STARTPOS, 0));
 80164be:	68fb      	ldr	r3, [r7, #12]
 80164c0:	685b      	ldr	r3, [r3, #4]
 80164c2:	2200      	movs	r2, #0
 80164c4:	2130      	movs	r1, #48	@ 0x30
 80164c6:	4618      	mov	r0, r3
 80164c8:	f7f8 f966 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 80164cc:	4603      	mov	r3, r0
 80164ce:	863b      	strh	r3, [r7, #48]	@ 0x30
 80164d0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	d001      	beq.n	80164da <phpalI14443p4_Sw_Exchange+0x662>
 80164d6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80164d8:	e03c      	b.n	8016554 <phpalI14443p4_Sw_Exchange+0x6dc>
                }
                /* Bail out on error */
                PH_CHECK_SUCCESS(status);
 80164da:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d001      	beq.n	80164e4 <phpalI14443p4_Sw_Exchange+0x66c>
 80164e0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80164e2:	e037      	b.n	8016554 <phpalI14443p4_Sw_Exchange+0x6dc>

                /* Restore overlapped INF bytes */
                (void)memcpy(&(*ppRxBuffer)[wRxStartPos], bRxOverlapped, wRxOverlappedLen); /* PRQA S 3354 */
 80164e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80164e6:	681a      	ldr	r2, [r3, #0]
 80164e8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80164ea:	4413      	add	r3, r2
 80164ec:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80164ee:	f107 0120 	add.w	r1, r7, #32
 80164f2:	4618      	mov	r0, r3
 80164f4:	f00a fa4d 	bl	8020992 <memcpy>
 80164f8:	e026      	b.n	8016548 <phpalI14443p4_Sw_Exchange+0x6d0>
        }
        /* No chaining -> reception finished */
        else
        {
            /* Return data */
            if (0U == (bBufferOverflow))
 80164fa:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d119      	bne.n	8016536 <phpalI14443p4_Sw_Exchange+0x6be>
            {
                /* Special NAD chaining handling */
                /* 7.1.1.3 c), ISO/IEC 14443-4:2008(E), "During chaining the NAD shall only be transmitted in the first block of chain." */
                if ((wRxStartPos > 0U) && (pDataParams->bNadEnabled > 0U))
 8016502:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8016504:	2b00      	cmp	r3, #0
 8016506:	d006      	beq.n	8016516 <phpalI14443p4_Sw_Exchange+0x69e>
 8016508:	68fb      	ldr	r3, [r7, #12]
 801650a:	7adb      	ldrb	r3, [r3, #11]
 801650c:	2b00      	cmp	r3, #0
 801650e:	d002      	beq.n	8016516 <phpalI14443p4_Sw_Exchange+0x69e>
                {
                    ++wRxOverlappedLen;
 8016510:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016512:	3301      	adds	r3, #1
 8016514:	877b      	strh	r3, [r7, #58]	@ 0x3a
                }

                /* Do not return protocol bytes, advance to INF field */
                (*ppRxBuffer) = (*ppRxBuffer) + wRxOverlappedLen;
 8016516:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016518:	681a      	ldr	r2, [r3, #0]
 801651a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801651c:	441a      	add	r2, r3
 801651e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016520:	601a      	str	r2, [r3, #0]
                *pRxLength = *pRxLength - wRxOverlappedLen;
 8016522:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016524:	881a      	ldrh	r2, [r3, #0]
 8016526:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016528:	1ad3      	subs	r3, r2, r3
 801652a:	b29a      	uxth	r2, r3
 801652c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801652e:	801a      	strh	r2, [r3, #0]
                /* Reception successful */
                status = PH_ERR_SUCCESS;
 8016530:	2300      	movs	r3, #0
 8016532:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8016534:	e005      	b.n	8016542 <phpalI14443p4_Sw_Exchange+0x6ca>
            }
            /* do not return any data in case of Buffer Overflow */
            else
            {
                *pRxLength = 0;
 8016536:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016538:	2200      	movs	r2, #0
 801653a:	801a      	strh	r2, [r3, #0]
                status = PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_PAL_ISO14443P4);
 801653c:	f240 6304 	movw	r3, #1540	@ 0x604
 8016540:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            }

            /* Reception finished */
            pDataParams->bStateNow = PHPAL_I14443P4_SW_STATE_FINISHED;
 8016542:	68fb      	ldr	r3, [r7, #12]
 8016544:	220f      	movs	r2, #15
 8016546:	721a      	strb	r2, [r3, #8]
        }
    }
    while (pDataParams->bStateNow != PHPAL_I14443P4_SW_STATE_FINISHED);
 8016548:	68fb      	ldr	r3, [r7, #12]
 801654a:	7a1b      	ldrb	r3, [r3, #8]
 801654c:	2b0f      	cmp	r3, #15
 801654e:	f47f af17 	bne.w	8016380 <phpalI14443p4_Sw_Exchange+0x508>

    return status;
 8016552:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
}
 8016554:	4618      	mov	r0, r3
 8016556:	3744      	adds	r7, #68	@ 0x44
 8016558:	46bd      	mov	sp, r7
 801655a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801655c <phpalI14443p4_Sw_IsoHandling>:
                                        uint8_t * pTxBuffer,
                                        uint16_t wTxLength,
                                        uint8_t ** ppRxBuffer,
                                        uint16_t * pRxLength
                                        )
{
 801655c:	b590      	push	{r4, r7, lr}
 801655e:	b091      	sub	sp, #68	@ 0x44
 8016560:	af02      	add	r7, sp, #8
 8016562:	60f8      	str	r0, [r7, #12]
 8016564:	607b      	str	r3, [r7, #4]
 8016566:	460b      	mov	r3, r1
 8016568:	817b      	strh	r3, [r7, #10]
 801656a:	4613      	mov	r3, r2
 801656c:	727b      	strb	r3, [r7, #9]
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 801656e:	2300      	movs	r3, #0
 8016570:	86fb      	strh	r3, [r7, #54]	@ 0x36
    phStatus_t  PH_MEMLOC_REM statusBkUp = PH_ERR_SUCCESS;
 8016572:	2300      	movs	r3, #0
 8016574:	847b      	strh	r3, [r7, #34]	@ 0x22
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bIsoFrame[3];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8016576:	2300      	movs	r3, #0
 8016578:	61fb      	str	r3, [r7, #28]
    uint16_t    PH_MEMLOC_REM wRespLen = 0;
 801657a:	2300      	movs	r3, #0
 801657c:	837b      	strh	r3, [r7, #26]
    uint16_t    PH_MEMLOC_REM wRxBufferStartPos;
    uint8_t     PH_MEMLOC_REM bInvalidBlock;
    uint8_t     PH_MEMLOC_REM bResponseReceived;
    uint8_t     PH_MEMLOC_REM bWtxm = 0;
 801657e:	2300      	movs	r3, #0
 8016580:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    uint8_t     PH_MEMLOC_REM bCheckNad;
    uint32_t    PH_MEMLOC_REM dwTimeout;
    uint32_t    PH_MEMLOC_REM dwTimeoutMax = PHPAL_I14443P4_SW_FWT_MAX_US;
 8016584:	4b99      	ldr	r3, [pc, #612]	@ (80167ec <phpalI14443p4_Sw_IsoHandling+0x290>)
 8016586:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint16_t    PH_MEMLOC_REM wTimeoutPrev = 0;
 8016588:	2300      	movs	r3, #0
 801658a:	823b      	strh	r3, [r7, #16]
    uint8_t     PH_MEMLOC_REM bTimeoutInMs = 0;
 801658c:	2300      	movs	r3, #0
 801658e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint8_t     bNAKCount = 0;
 8016592:	2300      	movs	r3, #0
 8016594:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    uint8_t     bACKCount = 0;
 8016598:	2300      	movs	r3, #0
 801659a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Buffered Exchange is not allowed here */
    if (0U != (wOption & PH_EXCHANGE_BUFFERED_BIT))
 801659e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	da02      	bge.n	80165ac <phpalI14443p4_Sw_IsoHandling+0x50>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_PAL_ISO14443P4);
 80165a6:	f240 637f 	movw	r3, #1663	@ 0x67f
 80165aa:	e362      	b.n	8016c72 <phpalI14443p4_Sw_IsoHandling+0x716>
    }

    /* Ignore custom modes */
    wOption &= (uint16_t)~(uint16_t)PH_EXCHANGE_MODE_MASK;
 80165ac:	897b      	ldrh	r3, [r7, #10]
 80165ae:	f023 030f 	bic.w	r3, r3, #15
 80165b2:	817b      	strh	r3, [r7, #10]

    /* Reset response received flag */
    bResponseReceived = 0;
 80165b4:	2300      	movs	r3, #0
 80165b6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Loops in case of an error */
    do
    {
        /* WTX Timeout - set temporary FWT */
        if (bWtxm > 0U)
 80165ba:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80165be:	2b00      	cmp	r3, #0
 80165c0:	f000 8081 	beq.w	80166c6 <phpalI14443p4_Sw_IsoHandling+0x16a>
        {
            /* Retrieve current timeout */
            status = phhalHw_GetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TIMEOUT_VALUE_US, &wTimeoutPrev);
 80165c4:	68fb      	ldr	r3, [r7, #12]
 80165c6:	685b      	ldr	r3, [r3, #4]
 80165c8:	f107 0210 	add.w	r2, r7, #16
 80165cc:	210d      	movs	r1, #13
 80165ce:	4618      	mov	r0, r3
 80165d0:	f7f9 fd30 	bl	8010034 <phhalHw_Pn5180_GetConfig>
 80165d4:	4603      	mov	r3, r0
 80165d6:	86fb      	strh	r3, [r7, #54]	@ 0x36

            /* Timeout is out of range, retrieve it in milliseconds */
            if ((status & PH_ERR_MASK) == PH_ERR_PARAMETER_OVERFLOW)
 80165d8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80165da:	b2db      	uxtb	r3, r3
 80165dc:	2b22      	cmp	r3, #34	@ 0x22
 80165de:	d112      	bne.n	8016606 <phpalI14443p4_Sw_IsoHandling+0xaa>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS, &wTimeoutPrev));
 80165e0:	68fb      	ldr	r3, [r7, #12]
 80165e2:	685b      	ldr	r3, [r3, #4]
 80165e4:	f107 0210 	add.w	r2, r7, #16
 80165e8:	210e      	movs	r1, #14
 80165ea:	4618      	mov	r0, r3
 80165ec:	f7f9 fd22 	bl	8010034 <phhalHw_Pn5180_GetConfig>
 80165f0:	4603      	mov	r3, r0
 80165f2:	833b      	strh	r3, [r7, #24]
 80165f4:	8b3b      	ldrh	r3, [r7, #24]
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d001      	beq.n	80165fe <phpalI14443p4_Sw_IsoHandling+0xa2>
 80165fa:	8b3b      	ldrh	r3, [r7, #24]
 80165fc:	e339      	b.n	8016c72 <phpalI14443p4_Sw_IsoHandling+0x716>
                bTimeoutInMs = 1;
 80165fe:	2301      	movs	r3, #1
 8016600:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016604:	e007      	b.n	8016616 <phpalI14443p4_Sw_IsoHandling+0xba>
            }
            else
            {
                PH_CHECK_SUCCESS(status);
 8016606:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016608:	2b00      	cmp	r3, #0
 801660a:	d001      	beq.n	8016610 <phpalI14443p4_Sw_IsoHandling+0xb4>
 801660c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801660e:	e330      	b.n	8016c72 <phpalI14443p4_Sw_IsoHandling+0x716>
                bTimeoutInMs = 0;
 8016610:	2300      	movs	r3, #0
 8016612:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }

            /* Calculate temporary WTX timeout */
            if(pDataParams->bOpeMode == RD_LIB_MODE_ISO)
 8016616:	68fb      	ldr	r3, [r7, #12]
 8016618:	7c9b      	ldrb	r3, [r3, #18]
 801661a:	2b03      	cmp	r3, #3
 801661c:	d10c      	bne.n	8016638 <phpalI14443p4_Sw_IsoHandling+0xdc>
            {
                dwTimeout = (((uint32_t)PHPAL_I14443P4_SW_FWT_MIN_US * ((uint32_t)1U << pDataParams->bFwi)) * (uint32_t)bWtxm) +
 801661e:	68fb      	ldr	r3, [r7, #12]
 8016620:	7b5b      	ldrb	r3, [r3, #13]
 8016622:	461a      	mov	r2, r3
 8016624:	f44f 7397 	mov.w	r3, #302	@ 0x12e
 8016628:	4093      	lsls	r3, r2
 801662a:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 801662e:	fb02 f303 	mul.w	r3, r2, r3
 8016632:	333c      	adds	r3, #60	@ 0x3c
 8016634:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016636:	e018      	b.n	801666a <phpalI14443p4_Sw_IsoHandling+0x10e>
                            (uint32_t)PHPAL_I14443P4_EXT_TIME_US;
            }
            else
            {
                /* As per Digital Spec V1.1 req 15.3.2.1, NFC Forum Device SHALL wait at least FWTtemp + delta FWTT4AT for a Response */
                dwTimeout = (((uint32_t)PHPAL_I14443P4_SW_FWT_MIN_US * ((uint32_t)1U << pDataParams->bFwi)) * (uint32_t)bWtxm) +
 8016638:	68fb      	ldr	r3, [r7, #12]
 801663a:	7b5b      	ldrb	r3, [r3, #13]
 801663c:	461a      	mov	r2, r3
 801663e:	f44f 7397 	mov.w	r3, #302	@ 0x12e
 8016642:	4093      	lsls	r3, r2
 8016644:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8016648:	fb02 f303 	mul.w	r3, r2, r3
 801664c:	f603 6329 	addw	r3, r3, #3625	@ 0xe29
 8016650:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            (uint32_t)PHPAL_I14443P4_SW_DELTA_FWT_US;

                dwTimeoutMax = PHPAL_I14443P4_SW_NFC_FWT_MAX_US;
 8016652:	4b67      	ldr	r3, [pc, #412]	@ (80167f0 <phpalI14443p4_Sw_IsoHandling+0x294>)
 8016654:	62bb      	str	r3, [r7, #40]	@ 0x28

                if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8016656:	68fb      	ldr	r3, [r7, #12]
 8016658:	7c9b      	ldrb	r3, [r3, #18]
 801665a:	2b01      	cmp	r3, #1
 801665c:	d105      	bne.n	801666a <phpalI14443p4_Sw_IsoHandling+0x10e>
                {
                    dwTimeout += (uint32_t)PHPAL_I14443P4_SW_DELTA_TPCD_US;
 801665e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016660:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8016664:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    dwTimeoutMax = PHPAL_I14443P4_SW_EMVCO_FWT_MAX_US;
 8016666:	4b63      	ldr	r3, [pc, #396]	@ (80167f4 <phpalI14443p4_Sw_IsoHandling+0x298>)
 8016668:	62bb      	str	r3, [r7, #40]	@ 0x28
                }
            }

            /* Limit timeout to FWT max */
            if (dwTimeout > dwTimeoutMax)
 801666a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801666c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801666e:	429a      	cmp	r2, r3
 8016670:	d901      	bls.n	8016676 <phpalI14443p4_Sw_IsoHandling+0x11a>
            {
                dwTimeout = dwTimeoutMax;
 8016672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016674:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            /* Set temporary WTX timeout */
            if (dwTimeout > 0xFFFFU)
 8016676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016678:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801667c:	d314      	bcc.n	80166a8 <phpalI14443p4_Sw_IsoHandling+0x14c>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS, (uint16_t)((dwTimeout / 1000U) + 1U)));
 801667e:	68fb      	ldr	r3, [r7, #12]
 8016680:	6858      	ldr	r0, [r3, #4]
 8016682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016684:	4a5c      	ldr	r2, [pc, #368]	@ (80167f8 <phpalI14443p4_Sw_IsoHandling+0x29c>)
 8016686:	fba2 2303 	umull	r2, r3, r2, r3
 801668a:	099b      	lsrs	r3, r3, #6
 801668c:	b29b      	uxth	r3, r3
 801668e:	3301      	adds	r3, #1
 8016690:	b29b      	uxth	r3, r3
 8016692:	461a      	mov	r2, r3
 8016694:	210e      	movs	r1, #14
 8016696:	f7f8 f87f 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 801669a:	4603      	mov	r3, r0
 801669c:	833b      	strh	r3, [r7, #24]
 801669e:	8b3b      	ldrh	r3, [r7, #24]
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d010      	beq.n	80166c6 <phpalI14443p4_Sw_IsoHandling+0x16a>
 80166a4:	8b3b      	ldrh	r3, [r7, #24]
 80166a6:	e2e4      	b.n	8016c72 <phpalI14443p4_Sw_IsoHandling+0x716>
            }
            else
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TIMEOUT_VALUE_US, (uint16_t)dwTimeout));
 80166a8:	68fb      	ldr	r3, [r7, #12]
 80166aa:	685b      	ldr	r3, [r3, #4]
 80166ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80166ae:	b292      	uxth	r2, r2
 80166b0:	210d      	movs	r1, #13
 80166b2:	4618      	mov	r0, r3
 80166b4:	f7f8 f870 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 80166b8:	4603      	mov	r3, r0
 80166ba:	833b      	strh	r3, [r7, #24]
 80166bc:	8b3b      	ldrh	r3, [r7, #24]
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d001      	beq.n	80166c6 <phpalI14443p4_Sw_IsoHandling+0x16a>
 80166c2:	8b3b      	ldrh	r3, [r7, #24]
 80166c4:	e2d5      	b.n	8016c72 <phpalI14443p4_Sw_IsoHandling+0x716>
            }
        }

        /* Call HAL exchange function */
        status = phhalHw_Exchange(
 80166c6:	68fb      	ldr	r3, [r7, #12]
 80166c8:	6858      	ldr	r0, [r3, #4]
 80166ca:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80166ce:	8979      	ldrh	r1, [r7, #10]
 80166d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80166d2:	9301      	str	r3, [sp, #4]
 80166d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80166d6:	9300      	str	r3, [sp, #0]
 80166d8:	4613      	mov	r3, r2
 80166da:	687a      	ldr	r2, [r7, #4]
 80166dc:	f7f7 fca6 	bl	800e02c <phhalHw_Pn5180_Exchange>
 80166e0:	4603      	mov	r3, r0
 80166e2:	86fb      	strh	r3, [r7, #54]	@ 0x36
            wOption,
            pTxBuffer,
            wTxLength,
            ppRxBuffer,
            pRxLength);
        statusBkUp = status;
 80166e4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80166e6:	847b      	strh	r3, [r7, #34]	@ 0x22

        /* Reset Exchange Option */
        wOption = PH_EXCHANGE_DEFAULT;
 80166e8:	2300      	movs	r3, #0
 80166ea:	817b      	strh	r3, [r7, #10]

        /* Reset transmission length */
        wTxLength = 0;
 80166ec:	2300      	movs	r3, #0
 80166ee:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

        /* Status --> InvalidBlock mapping */
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 80166f2:	68fb      	ldr	r3, [r7, #12]
 80166f4:	7c9b      	ldrb	r3, [r3, #18]
 80166f6:	2b01      	cmp	r3, #1
 80166f8:	d11d      	bne.n	8016736 <phpalI14443p4_Sw_IsoHandling+0x1da>
        {
            bInvalidBlock = (uint8_t)PHPAL_I14443P4_SW_EMVCO_IS_INVALID_BLOCK_STATUS(status);
 80166fa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80166fc:	b2db      	uxtb	r3, r3
 80166fe:	2b01      	cmp	r3, #1
 8016700:	d013      	beq.n	801672a <phpalI14443p4_Sw_IsoHandling+0x1ce>
 8016702:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016704:	b2db      	uxtb	r3, r3
 8016706:	2b02      	cmp	r3, #2
 8016708:	d00f      	beq.n	801672a <phpalI14443p4_Sw_IsoHandling+0x1ce>
 801670a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801670c:	b2db      	uxtb	r3, r3
 801670e:	2b11      	cmp	r3, #17
 8016710:	d00b      	beq.n	801672a <phpalI14443p4_Sw_IsoHandling+0x1ce>
 8016712:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016714:	b2db      	uxtb	r3, r3
 8016716:	2b05      	cmp	r3, #5
 8016718:	d007      	beq.n	801672a <phpalI14443p4_Sw_IsoHandling+0x1ce>
 801671a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801671c:	b2db      	uxtb	r3, r3
 801671e:	2b03      	cmp	r3, #3
 8016720:	d003      	beq.n	801672a <phpalI14443p4_Sw_IsoHandling+0x1ce>
 8016722:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016724:	b2db      	uxtb	r3, r3
 8016726:	2b06      	cmp	r3, #6
 8016728:	d101      	bne.n	801672e <phpalI14443p4_Sw_IsoHandling+0x1d2>
 801672a:	2301      	movs	r3, #1
 801672c:	e000      	b.n	8016730 <phpalI14443p4_Sw_IsoHandling+0x1d4>
 801672e:	2300      	movs	r3, #0
 8016730:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8016734:	e014      	b.n	8016760 <phpalI14443p4_Sw_IsoHandling+0x204>
        }
        else
        {
           bInvalidBlock = (uint8_t)PHPAL_I14443P4_SW_IS_INVALID_BLOCK_STATUS(status);
 8016736:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016738:	b2db      	uxtb	r3, r3
 801673a:	2b01      	cmp	r3, #1
 801673c:	d00b      	beq.n	8016756 <phpalI14443p4_Sw_IsoHandling+0x1fa>
 801673e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016740:	b2db      	uxtb	r3, r3
 8016742:	2b02      	cmp	r3, #2
 8016744:	d007      	beq.n	8016756 <phpalI14443p4_Sw_IsoHandling+0x1fa>
 8016746:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016748:	b2db      	uxtb	r3, r3
 801674a:	2b05      	cmp	r3, #5
 801674c:	d003      	beq.n	8016756 <phpalI14443p4_Sw_IsoHandling+0x1fa>
 801674e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016750:	b2db      	uxtb	r3, r3
 8016752:	2b03      	cmp	r3, #3
 8016754:	d101      	bne.n	801675a <phpalI14443p4_Sw_IsoHandling+0x1fe>
 8016756:	2301      	movs	r3, #1
 8016758:	e000      	b.n	801675c <phpalI14443p4_Sw_IsoHandling+0x200>
 801675a:	2300      	movs	r3, #0
 801675c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        }
        if (0U == (bInvalidBlock))
 8016760:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8016764:	2b00      	cmp	r3, #0
 8016766:	d149      	bne.n	80167fc <phpalI14443p4_Sw_IsoHandling+0x2a0>
        {
            /* MIFARE compliancy: force protocol error on NAK */
            if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS_INCOMPLETE_BYTE)
 8016768:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801676a:	b2db      	uxtb	r3, r3
 801676c:	2b73      	cmp	r3, #115	@ 0x73
 801676e:	d113      	bne.n	8016798 <phpalI14443p4_Sw_IsoHandling+0x23c>
            {
                *pRxLength = 0;
 8016770:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016772:	2200      	movs	r2, #0
 8016774:	801a      	strh	r2, [r3, #0]
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXBUFFER_STARTPOS, 0));
 8016776:	68fb      	ldr	r3, [r7, #12]
 8016778:	685b      	ldr	r3, [r3, #4]
 801677a:	2200      	movs	r2, #0
 801677c:	2130      	movs	r1, #48	@ 0x30
 801677e:	4618      	mov	r0, r3
 8016780:	f7f8 f80a 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8016784:	4603      	mov	r3, r0
 8016786:	833b      	strh	r3, [r7, #24]
 8016788:	8b3b      	ldrh	r3, [r7, #24]
 801678a:	2b00      	cmp	r3, #0
 801678c:	d001      	beq.n	8016792 <phpalI14443p4_Sw_IsoHandling+0x236>
 801678e:	8b3b      	ldrh	r3, [r7, #24]
 8016790:	e26f      	b.n	8016c72 <phpalI14443p4_Sw_IsoHandling+0x716>
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 8016792:	f240 6306 	movw	r3, #1542	@ 0x606
 8016796:	e26c      	b.n	8016c72 <phpalI14443p4_Sw_IsoHandling+0x716>
            }
            else
            {
                PH_CHECK_SUCCESS(status);
 8016798:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801679a:	2b00      	cmp	r3, #0
 801679c:	d001      	beq.n	80167a2 <phpalI14443p4_Sw_IsoHandling+0x246>
 801679e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80167a0:	e267      	b.n	8016c72 <phpalI14443p4_Sw_IsoHandling+0x716>

                /* WTX Timeout - restore previous value */
                if (bWtxm > 0U)
 80167a2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	d028      	beq.n	80167fc <phpalI14443p4_Sw_IsoHandling+0x2a0>
                {
                    /* Restore previous state and timeout after */
                    if (0U == (bTimeoutInMs))
 80167aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80167ae:	2b00      	cmp	r3, #0
 80167b0:	d10d      	bne.n	80167ce <phpalI14443p4_Sw_IsoHandling+0x272>
                    {
                        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TIMEOUT_VALUE_US, wTimeoutPrev));
 80167b2:	68fb      	ldr	r3, [r7, #12]
 80167b4:	685b      	ldr	r3, [r3, #4]
 80167b6:	8a3a      	ldrh	r2, [r7, #16]
 80167b8:	210d      	movs	r1, #13
 80167ba:	4618      	mov	r0, r3
 80167bc:	f7f7 ffec 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 80167c0:	4603      	mov	r3, r0
 80167c2:	833b      	strh	r3, [r7, #24]
 80167c4:	8b3b      	ldrh	r3, [r7, #24]
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d018      	beq.n	80167fc <phpalI14443p4_Sw_IsoHandling+0x2a0>
 80167ca:	8b3b      	ldrh	r3, [r7, #24]
 80167cc:	e251      	b.n	8016c72 <phpalI14443p4_Sw_IsoHandling+0x716>
                    }
                    else
                    {
                        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS, wTimeoutPrev));
 80167ce:	68fb      	ldr	r3, [r7, #12]
 80167d0:	685b      	ldr	r3, [r3, #4]
 80167d2:	8a3a      	ldrh	r2, [r7, #16]
 80167d4:	210e      	movs	r1, #14
 80167d6:	4618      	mov	r0, r3
 80167d8:	f7f7 ffde 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 80167dc:	4603      	mov	r3, r0
 80167de:	833b      	strh	r3, [r7, #24]
 80167e0:	8b3b      	ldrh	r3, [r7, #24]
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	d00a      	beq.n	80167fc <phpalI14443p4_Sw_IsoHandling+0x2a0>
 80167e6:	8b3b      	ldrh	r3, [r7, #24]
 80167e8:	e243      	b.n	8016c72 <phpalI14443p4_Sw_IsoHandling+0x716>
 80167ea:	bf00      	nop
 80167ec:	004b8408 	.word	0x004b8408
 80167f0:	004b93a8 	.word	0x004b93a8
 80167f4:	004b9790 	.word	0x004b9790
 80167f8:	10624dd3 	.word	0x10624dd3
                }
            }
        }

        /* Reset defaults */
        bWtxm = 0;
 80167fc:	2300      	movs	r3, #0
 80167fe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

        /* Emvco: case_id TA404_04, TA411_04, TB404_04, TB411_04 */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXBUFFER_STARTPOS, &wRxBufferStartPos));
 8016802:	68fb      	ldr	r3, [r7, #12]
 8016804:	685b      	ldr	r3, [r3, #4]
 8016806:	f107 0212 	add.w	r2, r7, #18
 801680a:	2130      	movs	r1, #48	@ 0x30
 801680c:	4618      	mov	r0, r3
 801680e:	f7f9 fc11 	bl	8010034 <phhalHw_Pn5180_GetConfig>
 8016812:	4603      	mov	r3, r0
 8016814:	833b      	strh	r3, [r7, #24]
 8016816:	8b3b      	ldrh	r3, [r7, #24]
 8016818:	2b00      	cmp	r3, #0
 801681a:	d001      	beq.n	8016820 <phpalI14443p4_Sw_IsoHandling+0x2c4>
 801681c:	8b3b      	ldrh	r3, [r7, #24]
 801681e:	e228      	b.n	8016c72 <phpalI14443p4_Sw_IsoHandling+0x716>
        /* Check for FSD */
        if(((*pRxLength) - wRxBufferStartPos) > (bI14443p4_FsTable[pDataParams->bFsdi] - 2))
 8016820:	68fb      	ldr	r3, [r7, #12]
 8016822:	7b9b      	ldrb	r3, [r3, #14]
 8016824:	461a      	mov	r2, r3
 8016826:	4b9d      	ldr	r3, [pc, #628]	@ (8016a9c <phpalI14443p4_Sw_IsoHandling+0x540>)
 8016828:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801682c:	1e5a      	subs	r2, r3, #1
 801682e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016830:	881b      	ldrh	r3, [r3, #0]
 8016832:	4619      	mov	r1, r3
 8016834:	8a7b      	ldrh	r3, [r7, #18]
 8016836:	1acb      	subs	r3, r1, r3
 8016838:	429a      	cmp	r2, r3
 801683a:	dc15      	bgt.n	8016868 <phpalI14443p4_Sw_IsoHandling+0x30c>
         {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXBUFFER_STARTPOS, 0));
 801683c:	68fb      	ldr	r3, [r7, #12]
 801683e:	685b      	ldr	r3, [r3, #4]
 8016840:	2200      	movs	r2, #0
 8016842:	2130      	movs	r1, #48	@ 0x30
 8016844:	4618      	mov	r0, r3
 8016846:	f7f7 ffa7 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 801684a:	4603      	mov	r3, r0
 801684c:	833b      	strh	r3, [r7, #24]
 801684e:	8b3b      	ldrh	r3, [r7, #24]
 8016850:	2b00      	cmp	r3, #0
 8016852:	d001      	beq.n	8016858 <phpalI14443p4_Sw_IsoHandling+0x2fc>
 8016854:	8b3b      	ldrh	r3, [r7, #24]
 8016856:	e20c      	b.n	8016c72 <phpalI14443p4_Sw_IsoHandling+0x716>
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 8016858:	f240 6306 	movw	r3, #1542	@ 0x606
 801685c:	86fb      	strh	r3, [r7, #54]	@ 0x36
            *pRxLength = 0;
 801685e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016860:	2200      	movs	r2, #0
 8016862:	801a      	strh	r2, [r3, #0]
            return status;
 8016864:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016866:	e204      	b.n	8016c72 <phpalI14443p4_Sw_IsoHandling+0x716>
         }
        /* Do not enter if we received an invalid block */
        if (0U == (bInvalidBlock))
 8016868:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801686c:	2b00      	cmp	r3, #0
 801686e:	f040 8138 	bne.w	8016ae2 <phpalI14443p4_Sw_IsoHandling+0x586>
        {
            /* Signal that we've received something */
            bResponseReceived = 1;
 8016872:	2301      	movs	r3, #1
 8016874:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

            /* Map receive buffer pointer to current data */
            pResp = *ppRxBuffer + wRxBufferStartPos;
 8016878:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801687a:	681b      	ldr	r3, [r3, #0]
 801687c:	8a7a      	ldrh	r2, [r7, #18]
 801687e:	4413      	add	r3, r2
 8016880:	61fb      	str	r3, [r7, #28]
            wRespLen = *pRxLength - wRxBufferStartPos;
 8016882:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016884:	881a      	ldrh	r2, [r3, #0]
 8016886:	8a7b      	ldrh	r3, [r7, #18]
 8016888:	1ad3      	subs	r3, r2, r3
 801688a:	837b      	strh	r3, [r7, #26]

            /* I-Block handling */
            if (0u != (PHPAL_I14443P4_SW_IS_I_BLOCK(pResp[PHPAL_I14443P4_SW_PCB_POS])))
 801688c:	69fb      	ldr	r3, [r7, #28]
 801688e:	781b      	ldrb	r3, [r3, #0]
 8016890:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8016894:	2b00      	cmp	r3, #0
 8016896:	d15e      	bne.n	8016956 <phpalI14443p4_Sw_IsoHandling+0x3fa>
            {
                /* Rule 2/10, ISO/IEC 14443-4:2008(E) */
                if (pDataParams->bStateNow == (PHPAL_I14443P4_SW_STATE_I_BLOCK_TX | PHPAL_I14443P4_SW_STATE_CHAINING_BIT))
 8016898:	68fb      	ldr	r3, [r7, #12]
 801689a:	7a1b      	ldrb	r3, [r3, #8]
 801689c:	2b81      	cmp	r3, #129	@ 0x81
 801689e:	d103      	bne.n	80168a8 <phpalI14443p4_Sw_IsoHandling+0x34c>
                {
                    /* Protocol violation */
                    bInvalidBlock = 1;
 80168a0:	2301      	movs	r3, #1
 80168a2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 80168a6:	e104      	b.n	8016ab2 <phpalI14443p4_Sw_IsoHandling+0x556>
                }
                else
                {
                    /* Evaluate if NAD should be present */
                    /* 7.1.1.3 c), ISO/IEC 14443-4:2008(E), "During chaining the NAD shall only be transmitted in the first block of chain." */
                    if ((pDataParams->bNadEnabled > 0U) && (0U == ((pDataParams->bStateNow & PHPAL_I14443P4_SW_STATE_CHAINING_BIT))))
 80168a8:	68fb      	ldr	r3, [r7, #12]
 80168aa:	7adb      	ldrb	r3, [r3, #11]
 80168ac:	2b00      	cmp	r3, #0
 80168ae:	d008      	beq.n	80168c2 <phpalI14443p4_Sw_IsoHandling+0x366>
 80168b0:	68fb      	ldr	r3, [r7, #12]
 80168b2:	7a1b      	ldrb	r3, [r3, #8]
 80168b4:	b25b      	sxtb	r3, r3
 80168b6:	2b00      	cmp	r3, #0
 80168b8:	db03      	blt.n	80168c2 <phpalI14443p4_Sw_IsoHandling+0x366>
                    {
                        bCheckNad = 1;
 80168ba:	2301      	movs	r3, #1
 80168bc:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 80168c0:	e002      	b.n	80168c8 <phpalI14443p4_Sw_IsoHandling+0x36c>
                    }
                    else
                    {
                        bCheckNad = 0;
 80168c2:	2300      	movs	r3, #0
 80168c4:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
                    }

                    /* Check if I-Block is valid */
                    status = phpalI14443p4_Sw_IsValidIBlock(
 80168c8:	68fb      	ldr	r3, [r7, #12]
 80168ca:	7a58      	ldrb	r0, [r3, #9]
 80168cc:	68fb      	ldr	r3, [r7, #12]
 80168ce:	7a99      	ldrb	r1, [r3, #10]
 80168d0:	68fb      	ldr	r3, [r7, #12]
 80168d2:	7b1c      	ldrb	r4, [r3, #12]
 80168d4:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80168d8:	8b7b      	ldrh	r3, [r7, #26]
 80168da:	9301      	str	r3, [sp, #4]
 80168dc:	69fb      	ldr	r3, [r7, #28]
 80168de:	9300      	str	r3, [sp, #0]
 80168e0:	4623      	mov	r3, r4
 80168e2:	f000 f9cb 	bl	8016c7c <phpalI14443p4_Sw_IsValidIBlock>
 80168e6:	4603      	mov	r3, r0
 80168e8:	86fb      	strh	r3, [r7, #54]	@ 0x36
                        pDataParams->bNad,
                        pResp,
                        wRespLen);

                    /* Blocknumber is equal, I-Block Rx mode is active */
                    if (((status & PH_ERR_MASK) == PH_ERR_SUCCESS) && (PHPAL_I14443P4_SW_IS_BLOCKNR_EQUAL(pResp[PHPAL_I14443P4_SW_PCB_POS]) > 0U))
 80168ea:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80168ec:	b2db      	uxtb	r3, r3
 80168ee:	2b00      	cmp	r3, #0
 80168f0:	d12d      	bne.n	801694e <phpalI14443p4_Sw_IsoHandling+0x3f2>
 80168f2:	69fb      	ldr	r3, [r7, #28]
 80168f4:	781b      	ldrb	r3, [r3, #0]
 80168f6:	f003 0301 	and.w	r3, r3, #1
 80168fa:	68fa      	ldr	r2, [r7, #12]
 80168fc:	7c12      	ldrb	r2, [r2, #16]
 80168fe:	4293      	cmp	r3, r2
 8016900:	d125      	bne.n	801694e <phpalI14443p4_Sw_IsoHandling+0x3f2>
                    {
                        /* Switch from Tx-Mode to Rx-Mode */
                        if ((pDataParams->bStateNow & PHPAL_I14443P4_SW_STATE_MASK) == PHPAL_I14443P4_SW_STATE_I_BLOCK_TX)
 8016902:	68fb      	ldr	r3, [r7, #12]
 8016904:	7a1b      	ldrb	r3, [r3, #8]
 8016906:	f003 030f 	and.w	r3, r3, #15
 801690a:	2b01      	cmp	r3, #1
 801690c:	d102      	bne.n	8016914 <phpalI14443p4_Sw_IsoHandling+0x3b8>
                        {
                            pDataParams->bStateNow = PHPAL_I14443P4_SW_STATE_I_BLOCK_RX;
 801690e:	68fb      	ldr	r3, [r7, #12]
 8016910:	2202      	movs	r2, #2
 8016912:	721a      	strb	r2, [r3, #8]
                        }

                        /* Rule B, ISO/IEC 14443-4:2008(E), toggle Blocknumber */
                        pDataParams->bPcbBlockNum ^= PHPAL_I14443P4_SW_PCB_BLOCKNR;
 8016914:	68fb      	ldr	r3, [r7, #12]
 8016916:	7c1b      	ldrb	r3, [r3, #16]
 8016918:	f083 0301 	eor.w	r3, r3, #1
 801691c:	b2da      	uxtb	r2, r3
 801691e:	68fb      	ldr	r3, [r7, #12]
 8016920:	741a      	strb	r2, [r3, #16]

                        /* Set chaining bit if card is chaining */
                        if (0u != (PHPAL_I14443P4_SW_IS_CHAINING(pResp[PHPAL_I14443P4_SW_PCB_POS])))
 8016922:	69fb      	ldr	r3, [r7, #28]
 8016924:	781b      	ldrb	r3, [r3, #0]
 8016926:	f003 0310 	and.w	r3, r3, #16
 801692a:	2b00      	cmp	r3, #0
 801692c:	d007      	beq.n	801693e <phpalI14443p4_Sw_IsoHandling+0x3e2>
                        {
                            pDataParams->bStateNow |= PHPAL_I14443P4_SW_STATE_CHAINING_BIT;
 801692e:	68fb      	ldr	r3, [r7, #12]
 8016930:	7a1b      	ldrb	r3, [r3, #8]
 8016932:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8016936:	b2da      	uxtb	r2, r3
 8016938:	68fb      	ldr	r3, [r7, #12]
 801693a:	721a      	strb	r2, [r3, #8]
                        if (0u != (PHPAL_I14443P4_SW_IS_CHAINING(pResp[PHPAL_I14443P4_SW_PCB_POS])))
 801693c:	e0b9      	b.n	8016ab2 <phpalI14443p4_Sw_IsoHandling+0x556>
                        }
                        /* Clear chaining bit otherwise */
                        else
                        {
                            pDataParams->bStateNow &= (uint8_t)~(uint8_t)PHPAL_I14443P4_SW_STATE_CHAINING_BIT;
 801693e:	68fb      	ldr	r3, [r7, #12]
 8016940:	7a1b      	ldrb	r3, [r3, #8]
 8016942:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016946:	b2da      	uxtb	r2, r3
 8016948:	68fb      	ldr	r3, [r7, #12]
 801694a:	721a      	strb	r2, [r3, #8]
                        if (0u != (PHPAL_I14443P4_SW_IS_CHAINING(pResp[PHPAL_I14443P4_SW_PCB_POS])))
 801694c:	e0b1      	b.n	8016ab2 <phpalI14443p4_Sw_IsoHandling+0x556>
                    }
                    /* We received an invalid block */
                    else
                    {
                        /* Protocol violation */
                        bInvalidBlock = 1;
 801694e:	2301      	movs	r3, #1
 8016950:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8016954:	e0ad      	b.n	8016ab2 <phpalI14443p4_Sw_IsoHandling+0x556>
                    }
                }
            }
            /* R(ACK) handling */
            else if ((PHPAL_I14443P4_SW_IS_R_BLOCK(pResp[PHPAL_I14443P4_SW_PCB_POS]) > 0U) && (PHPAL_I14443P4_SW_IS_ACK(pResp[PHPAL_I14443P4_SW_PCB_POS]) > 0U))
 8016956:	69fb      	ldr	r3, [r7, #28]
 8016958:	781b      	ldrb	r3, [r3, #0]
 801695a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801695e:	2b80      	cmp	r3, #128	@ 0x80
 8016960:	d144      	bne.n	80169ec <phpalI14443p4_Sw_IsoHandling+0x490>
 8016962:	69fb      	ldr	r3, [r7, #28]
 8016964:	781b      	ldrb	r3, [r3, #0]
 8016966:	f003 0310 	and.w	r3, r3, #16
 801696a:	2b00      	cmp	r3, #0
 801696c:	d13e      	bne.n	80169ec <phpalI14443p4_Sw_IsoHandling+0x490>
            {
                /* Check if R-Block is valid */
                status = phpalI14443p4_Sw_IsValidRBlock(
 801696e:	68fb      	ldr	r3, [r7, #12]
 8016970:	7a58      	ldrb	r0, [r3, #9]
 8016972:	68fb      	ldr	r3, [r7, #12]
 8016974:	7a99      	ldrb	r1, [r3, #10]
 8016976:	8b7b      	ldrh	r3, [r7, #26]
 8016978:	69fa      	ldr	r2, [r7, #28]
 801697a:	f000 f9ee 	bl	8016d5a <phpalI14443p4_Sw_IsValidRBlock>
 801697e:	4603      	mov	r3, r0
 8016980:	86fb      	strh	r3, [r7, #54]	@ 0x36
                    pDataParams->bCid,
                    pResp,
                    wRespLen);

                /* R-Block invalid or not in transmission mode */
                if ((status & PH_ERR_MASK) != PH_ERR_SUCCESS)
 8016982:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016984:	b2db      	uxtb	r3, r3
 8016986:	2b00      	cmp	r3, #0
 8016988:	d003      	beq.n	8016992 <phpalI14443p4_Sw_IsoHandling+0x436>
                {
                    /* Protocol violation */
                    bInvalidBlock = 1;
 801698a:	2301      	movs	r3, #1
 801698c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                if ((status & PH_ERR_MASK) != PH_ERR_SUCCESS)
 8016990:	e08f      	b.n	8016ab2 <phpalI14443p4_Sw_IsoHandling+0x556>
                }
                else
                {
                    /* Blocknumber is equal */
                    if (0u != (PHPAL_I14443P4_SW_IS_BLOCKNR_EQUAL(pResp[PHPAL_I14443P4_SW_PCB_POS])))
 8016992:	69fb      	ldr	r3, [r7, #28]
 8016994:	781b      	ldrb	r3, [r3, #0]
 8016996:	f003 0301 	and.w	r3, r3, #1
 801699a:	68fa      	ldr	r2, [r7, #12]
 801699c:	7c12      	ldrb	r2, [r2, #16]
 801699e:	4293      	cmp	r3, r2
 80169a0:	d10f      	bne.n	80169c2 <phpalI14443p4_Sw_IsoHandling+0x466>
                    {
                        /* Continue TX chaining */
                        if (pDataParams->bStateNow == (PHPAL_I14443P4_SW_STATE_I_BLOCK_TX | PHPAL_I14443P4_SW_STATE_CHAINING_BIT))
 80169a2:	68fb      	ldr	r3, [r7, #12]
 80169a4:	7a1b      	ldrb	r3, [r3, #8]
 80169a6:	2b81      	cmp	r3, #129	@ 0x81
 80169a8:	d107      	bne.n	80169ba <phpalI14443p4_Sw_IsoHandling+0x45e>
                        {
                            /* Rule B, ISO/IEC 14443-4:2008(E), toggle Blocknumber */
                            pDataParams->bPcbBlockNum ^= PHPAL_I14443P4_SW_PCB_BLOCKNR;
 80169aa:	68fb      	ldr	r3, [r7, #12]
 80169ac:	7c1b      	ldrb	r3, [r3, #16]
 80169ae:	f083 0301 	eor.w	r3, r3, #1
 80169b2:	b2da      	uxtb	r2, r3
 80169b4:	68fb      	ldr	r3, [r7, #12]
 80169b6:	741a      	strb	r2, [r3, #16]
                if ((status & PH_ERR_MASK) != PH_ERR_SUCCESS)
 80169b8:	e07b      	b.n	8016ab2 <phpalI14443p4_Sw_IsoHandling+0x556>
                        }
                        /* Not in chaining mode */
                        else
                        {
                            /* Protocol violation */
                            bInvalidBlock = 1;
 80169ba:	2301      	movs	r3, #1
 80169bc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                if ((status & PH_ERR_MASK) != PH_ERR_SUCCESS)
 80169c0:	e077      	b.n	8016ab2 <phpalI14443p4_Sw_IsoHandling+0x556>
                    }
                    /* Rule 6, ISO/IEC 14443-4:2008(E), unequal block number */
                    else
                    {
                        /* Limit this behaviour with bMaxRetryCount, bRetry count is set by the caller in this case */
                        if ((bRetryCount > pDataParams->bMaxRetryCount) || (pDataParams->bMaxRetryCount == 0U))
 80169c2:	68fb      	ldr	r3, [r7, #12]
 80169c4:	7c5b      	ldrb	r3, [r3, #17]
 80169c6:	7a7a      	ldrb	r2, [r7, #9]
 80169c8:	429a      	cmp	r2, r3
 80169ca:	d803      	bhi.n	80169d4 <phpalI14443p4_Sw_IsoHandling+0x478>
 80169cc:	68fb      	ldr	r3, [r7, #12]
 80169ce:	7c5b      	ldrb	r3, [r3, #17]
 80169d0:	2b00      	cmp	r3, #0
 80169d2:	d103      	bne.n	80169dc <phpalI14443p4_Sw_IsoHandling+0x480>
                        {
                            /* Protocol violation */
                            bInvalidBlock = 1;
 80169d4:	2301      	movs	r3, #1
 80169d6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                if ((status & PH_ERR_MASK) != PH_ERR_SUCCESS)
 80169da:	e06a      	b.n	8016ab2 <phpalI14443p4_Sw_IsoHandling+0x556>
                        }
                        /* Send last I-Block again */
                        else
                        {
                            pDataParams->bStateNow |= PHPAL_I14443P4_SW_STATE_RETRANSMIT_BIT;
 80169dc:	68fb      	ldr	r3, [r7, #12]
 80169de:	7a1b      	ldrb	r3, [r3, #8]
 80169e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80169e4:	b2da      	uxtb	r2, r3
 80169e6:	68fb      	ldr	r3, [r7, #12]
 80169e8:	721a      	strb	r2, [r3, #8]
                if ((status & PH_ERR_MASK) != PH_ERR_SUCCESS)
 80169ea:	e062      	b.n	8016ab2 <phpalI14443p4_Sw_IsoHandling+0x556>
                        }
                    }
                }
            }
            /* S(WTX) handling */
            else if ((PHPAL_I14443P4_SW_IS_S_BLOCK(pResp[PHPAL_I14443P4_SW_PCB_POS]) > 0U) && (PHPAL_I14443P4_SW_IS_WTX(pResp[PHPAL_I14443P4_SW_PCB_POS]) > 0U))
 80169ec:	69fb      	ldr	r3, [r7, #28]
 80169ee:	781b      	ldrb	r3, [r3, #0]
 80169f0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80169f4:	2bc0      	cmp	r3, #192	@ 0xc0
 80169f6:	d157      	bne.n	8016aa8 <phpalI14443p4_Sw_IsoHandling+0x54c>
 80169f8:	69fb      	ldr	r3, [r7, #28]
 80169fa:	781b      	ldrb	r3, [r3, #0]
 80169fc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8016a00:	2b30      	cmp	r3, #48	@ 0x30
 8016a02:	d151      	bne.n	8016aa8 <phpalI14443p4_Sw_IsoHandling+0x54c>
            {
                /* Check if S-Block is valid */
                status = phpalI14443p4_Sw_IsValidSBlock(
 8016a04:	68fb      	ldr	r3, [r7, #12]
 8016a06:	7a58      	ldrb	r0, [r3, #9]
 8016a08:	68fb      	ldr	r3, [r7, #12]
 8016a0a:	7a99      	ldrb	r1, [r3, #10]
 8016a0c:	8b7b      	ldrh	r3, [r7, #26]
 8016a0e:	69fa      	ldr	r2, [r7, #28]
 8016a10:	f000 f9ec 	bl	8016dec <phpalI14443p4_Sw_IsValidSBlock>
 8016a14:	4603      	mov	r3, r0
 8016a16:	86fb      	strh	r3, [r7, #54]	@ 0x36
                    pDataParams->bCid,
                    pResp,
                    wRespLen);

                /* Rule 3, ISO/IEC 14443-4:2008(E), S(WTX) handling */
                if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 8016a18:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016a1a:	b2db      	uxtb	r3, r3
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d13f      	bne.n	8016aa0 <phpalI14443p4_Sw_IsoHandling+0x544>
                {
                    /* Retrieve WTXM */
                    bWtxm = pResp[wRespLen-1u];
 8016a20:	8b7b      	ldrh	r3, [r7, #26]
 8016a22:	3b01      	subs	r3, #1
 8016a24:	69fa      	ldr	r2, [r7, #28]
 8016a26:	4413      	add	r3, r2
 8016a28:	781b      	ldrb	r3, [r3, #0]
 8016a2a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

                    /* EMV 2.5 */
                    if ((0U != ((bWtxm & PHPAL_I14443P4_SW_S_BLOCK_INF_PLI_MASK))) && (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO))
 8016a2e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8016a32:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	d007      	beq.n	8016a4a <phpalI14443p4_Sw_IsoHandling+0x4ee>
 8016a3a:	68fb      	ldr	r3, [r7, #12]
 8016a3c:	7c9b      	ldrb	r3, [r3, #18]
 8016a3e:	2b01      	cmp	r3, #1
 8016a40:	d103      	bne.n	8016a4a <phpalI14443p4_Sw_IsoHandling+0x4ee>
                    {
                        status =  PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 8016a42:	f240 6306 	movw	r3, #1542	@ 0x606
 8016a46:	86fb      	strh	r3, [r7, #54]	@ 0x36
                        break;
 8016a48:	e104      	b.n	8016c54 <phpalI14443p4_Sw_IsoHandling+0x6f8>
                    }

                    /* Ignore and clear the Power Level Indication */
                    bWtxm &= 0x3FU;
 8016a4a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8016a4e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8016a52:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

                    /* Treat invalid WTXM value as protocol error, do not perform error correction. */
                    if ((bWtxm == 0U) || (bWtxm > 59U))
 8016a56:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	d003      	beq.n	8016a66 <phpalI14443p4_Sw_IsoHandling+0x50a>
 8016a5e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8016a62:	2b3b      	cmp	r3, #59	@ 0x3b
 8016a64:	d903      	bls.n	8016a6e <phpalI14443p4_Sw_IsoHandling+0x512>
                    {
                        status = PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 8016a66:	f240 6306 	movw	r3, #1542	@ 0x606
 8016a6a:	86fb      	strh	r3, [r7, #54]	@ 0x36
                        break;
 8016a6c:	e0f2      	b.n	8016c54 <phpalI14443p4_Sw_IsoHandling+0x6f8>
                    }

                    /* Generate S(WTX) frame */
                    PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p4_Sw_BuildSBlock(
 8016a6e:	68fb      	ldr	r3, [r7, #12]
 8016a70:	7a58      	ldrb	r0, [r3, #9]
 8016a72:	68fb      	ldr	r3, [r7, #12]
 8016a74:	7a99      	ldrb	r1, [r3, #10]
 8016a76:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8016a7a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8016a7e:	9301      	str	r3, [sp, #4]
 8016a80:	f107 0314 	add.w	r3, r7, #20
 8016a84:	9300      	str	r3, [sp, #0]
 8016a86:	4613      	mov	r3, r2
 8016a88:	2201      	movs	r2, #1
 8016a8a:	f000 fa90 	bl	8016fae <phpalI14443p4_Sw_BuildSBlock>
 8016a8e:	4603      	mov	r3, r0
 8016a90:	833b      	strh	r3, [r7, #24]
 8016a92:	8b3b      	ldrh	r3, [r7, #24]
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	d00b      	beq.n	8016ab0 <phpalI14443p4_Sw_IsoHandling+0x554>
 8016a98:	8b3b      	ldrh	r3, [r7, #24]
 8016a9a:	e0ea      	b.n	8016c72 <phpalI14443p4_Sw_IsoHandling+0x716>
 8016a9c:	08023b24 	.word	0x08023b24
                }
                /* We received an invalid block */
                else
                {
                    /* Protocol violation */
                    bInvalidBlock = 1;
 8016aa0:	2301      	movs	r3, #1
 8016aa2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 8016aa6:	e003      	b.n	8016ab0 <phpalI14443p4_Sw_IsoHandling+0x554>
            }
            /* We received an invalid block */
            else
            {
                /* Protocol violation */
                bInvalidBlock = 1;
 8016aa8:	2301      	movs	r3, #1
 8016aaa:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8016aae:	e000      	b.n	8016ab2 <phpalI14443p4_Sw_IsoHandling+0x556>
                if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 8016ab0:	bf00      	nop
            }

            /* Protocol violation */
            if (0U != (bInvalidBlock))
 8016ab2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d010      	beq.n	8016adc <phpalI14443p4_Sw_IsoHandling+0x580>
            {
                /* Emvco:  case_id TA404_XY and TA401_15 */
                /* bMaxRetryCount = 0 suppresses the S(DESELECT) behaviour */
                if((pDataParams->bMaxRetryCount > 0U) && (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 8016aba:	68fb      	ldr	r3, [r7, #12]
 8016abc:	7c5b      	ldrb	r3, [r3, #17]
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d008      	beq.n	8016ad4 <phpalI14443p4_Sw_IsoHandling+0x578>
 8016ac2:	68fb      	ldr	r3, [r7, #12]
 8016ac4:	7c9b      	ldrb	r3, [r3, #18]
 8016ac6:	2b01      	cmp	r3, #1
 8016ac8:	d004      	beq.n	8016ad4 <phpalI14443p4_Sw_IsoHandling+0x578>
                {
                    /* send S(DESELECT) (ignore return code) */
                    statusTmp = phpalI14443p4_Sw_Deselect(pDataParams);
 8016aca:	68f8      	ldr	r0, [r7, #12]
 8016acc:	f7ff f921 	bl	8015d12 <phpalI14443p4_Sw_Deselect>
 8016ad0:	4603      	mov	r3, r0
 8016ad2:	833b      	strh	r3, [r7, #24]
                }

                /* bail out with protocol error */
                status = PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 8016ad4:	f240 6306 	movw	r3, #1542	@ 0x606
 8016ad8:	86fb      	strh	r3, [r7, #54]	@ 0x36
                break;
 8016ada:	e0bb      	b.n	8016c54 <phpalI14443p4_Sw_IsoHandling+0x6f8>
            }
            /* Reset retry counter on no error */
            else
            {
                bRetryCount = 0;
 8016adc:	2300      	movs	r3, #0
 8016ade:	727b      	strb	r3, [r7, #9]
 8016ae0:	e0a8      	b.n	8016c34 <phpalI14443p4_Sw_IsoHandling+0x6d8>
             * and For EMVCo: TA401_15 Article(10.3.4.4)
             * Says, After 2nd failed retry of I-block exchange. Send NAk
             */

            /* This is added to restrict retry count less than 1 for ISO mode */
            if( (bRetryCount >= pDataParams->bMaxRetryCount) && (pDataParams->bOpeMode == RD_LIB_MODE_ISO))
 8016ae2:	68fb      	ldr	r3, [r7, #12]
 8016ae4:	7c5b      	ldrb	r3, [r3, #17]
 8016ae6:	7a7a      	ldrb	r2, [r7, #9]
 8016ae8:	429a      	cmp	r2, r3
 8016aea:	d31f      	bcc.n	8016b2c <phpalI14443p4_Sw_IsoHandling+0x5d0>
 8016aec:	68fb      	ldr	r3, [r7, #12]
 8016aee:	7c9b      	ldrb	r3, [r3, #18]
 8016af0:	2b03      	cmp	r3, #3
 8016af2:	d11b      	bne.n	8016b2c <phpalI14443p4_Sw_IsoHandling+0x5d0>
            {
                if (pDataParams->bMaxRetryCount > 0U)
 8016af4:	68fb      	ldr	r3, [r7, #12]
 8016af6:	7c5b      	ldrb	r3, [r3, #17]
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	f000 80a4 	beq.w	8016c46 <phpalI14443p4_Sw_IsoHandling+0x6ea>
                {
                    /* backup retry count */
                    bRetryCount = pDataParams->bMaxRetryCount;
 8016afe:	68fb      	ldr	r3, [r7, #12]
 8016b00:	7c5b      	ldrb	r3, [r3, #17]
 8016b02:	727b      	strb	r3, [r7, #9]

                    /* set retry count to zero to send only one S(DESELECT) */
                    pDataParams->bMaxRetryCount = 0;
 8016b04:	68fb      	ldr	r3, [r7, #12]
 8016b06:	2200      	movs	r2, #0
 8016b08:	745a      	strb	r2, [r3, #17]

                    /* send deselect (ignore return code) */
                    statusTmp = phpalI14443p4_Sw_Deselect(pDataParams);
 8016b0a:	68f8      	ldr	r0, [r7, #12]
 8016b0c:	f7ff f901 	bl	8015d12 <phpalI14443p4_Sw_Deselect>
 8016b10:	4603      	mov	r3, r0
 8016b12:	833b      	strh	r3, [r7, #24]

                    /* restore retry count setting */
                    pDataParams->bMaxRetryCount = bRetryCount;
 8016b14:	68fb      	ldr	r3, [r7, #12]
 8016b16:	7a7a      	ldrb	r2, [r7, #9]
 8016b18:	745a      	strb	r2, [r3, #17]

                    /* Return ERR_RECOVERY_FAILED if some response has been received before */
                    if (0U != (bResponseReceived))
 8016b1a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	f000 8091 	beq.w	8016c46 <phpalI14443p4_Sw_IsoHandling+0x6ea>
                    {
                        status = PH_ADD_COMPCODE_FIXED(PHPAL_I14443P4_ERR_RECOVERY_FAILED, PH_COMP_PAL_ISO14443P4);
 8016b24:	f44f 63d0 	mov.w	r3, #1664	@ 0x680
 8016b28:	86fb      	strh	r3, [r7, #54]	@ 0x36
                    }
                }
                break;
 8016b2a:	e08c      	b.n	8016c46 <phpalI14443p4_Sw_IsoHandling+0x6ea>
            }

            else if (bRetryCount <= pDataParams->bMaxRetryCount)
 8016b2c:	68fb      	ldr	r3, [r7, #12]
 8016b2e:	7c5b      	ldrb	r3, [r3, #17]
 8016b30:	7a7a      	ldrb	r2, [r7, #9]
 8016b32:	429a      	cmp	r2, r3
 8016b34:	d85d      	bhi.n	8016bf2 <phpalI14443p4_Sw_IsoHandling+0x696>
            {
                /* Rule 5, ISO/IEC 14443-4:2008(E) */
                if (pDataParams->bStateNow == (PHPAL_I14443P4_SW_STATE_I_BLOCK_RX | PHPAL_I14443P4_SW_STATE_CHAINING_BIT))
 8016b36:	68fb      	ldr	r3, [r7, #12]
 8016b38:	7a1b      	ldrb	r3, [r3, #8]
 8016b3a:	2b82      	cmp	r3, #130	@ 0x82
 8016b3c:	d12c      	bne.n	8016b98 <phpalI14443p4_Sw_IsoHandling+0x63c>
                {
                    /* Generate R(ACK) frame */
                    PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p4_Sw_BuildRBlock(
 8016b3e:	68fb      	ldr	r3, [r7, #12]
 8016b40:	7a58      	ldrb	r0, [r3, #9]
 8016b42:	68fb      	ldr	r3, [r7, #12]
 8016b44:	7a99      	ldrb	r1, [r3, #10]
 8016b46:	68fb      	ldr	r3, [r7, #12]
 8016b48:	7c1a      	ldrb	r2, [r3, #16]
 8016b4a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8016b4e:	9301      	str	r3, [sp, #4]
 8016b50:	f107 0314 	add.w	r3, r7, #20
 8016b54:	9300      	str	r3, [sp, #0]
 8016b56:	2301      	movs	r3, #1
 8016b58:	f000 f9ec 	bl	8016f34 <phpalI14443p4_Sw_BuildRBlock>
 8016b5c:	4603      	mov	r3, r0
 8016b5e:	833b      	strh	r3, [r7, #24]
 8016b60:	8b3b      	ldrh	r3, [r7, #24]
 8016b62:	2b00      	cmp	r3, #0
 8016b64:	d001      	beq.n	8016b6a <phpalI14443p4_Sw_IsoHandling+0x60e>
 8016b66:	8b3b      	ldrh	r3, [r7, #24]
 8016b68:	e083      	b.n	8016c72 <phpalI14443p4_Sw_IsoHandling+0x716>
                        pDataParams->bPcbBlockNum,
                        1,
                        bIsoFrame,
                        &wTxLength));

                    bNAKCount = 0;
 8016b6a:	2300      	movs	r3, #0
 8016b6c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

                    /* Emvco: case_id TA410 */
                    if(bACKCount >= pDataParams->bMaxRetryCount)
 8016b70:	68fb      	ldr	r3, [r7, #12]
 8016b72:	7c5b      	ldrb	r3, [r3, #17]
 8016b74:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8016b78:	429a      	cmp	r2, r3
 8016b7a:	d266      	bcs.n	8016c4a <phpalI14443p4_Sw_IsoHandling+0x6ee>
                    {
                        break;
                    }

                    if((statusBkUp & PH_ERR_MASK) != PH_ERR_SUCCESS )
 8016b7c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016b7e:	b2db      	uxtb	r3, r3
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	d005      	beq.n	8016b90 <phpalI14443p4_Sw_IsoHandling+0x634>
                    {
                        bACKCount++;
 8016b84:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8016b88:	3301      	adds	r3, #1
 8016b8a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8016b8e:	e04e      	b.n	8016c2e <phpalI14443p4_Sw_IsoHandling+0x6d2>
                    }
                    else
                    {
                        bACKCount = 0;
 8016b90:	2300      	movs	r3, #0
 8016b92:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8016b96:	e04a      	b.n	8016c2e <phpalI14443p4_Sw_IsoHandling+0x6d2>
                }
                /* Rule 4, ISO/IEC 14443-4:2008(E) */
                else
                {
                    /* Generate R(NAK) frame */
                    PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p4_Sw_BuildRBlock(
 8016b98:	68fb      	ldr	r3, [r7, #12]
 8016b9a:	7a58      	ldrb	r0, [r3, #9]
 8016b9c:	68fb      	ldr	r3, [r7, #12]
 8016b9e:	7a99      	ldrb	r1, [r3, #10]
 8016ba0:	68fb      	ldr	r3, [r7, #12]
 8016ba2:	7c1a      	ldrb	r2, [r3, #16]
 8016ba4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8016ba8:	9301      	str	r3, [sp, #4]
 8016baa:	f107 0314 	add.w	r3, r7, #20
 8016bae:	9300      	str	r3, [sp, #0]
 8016bb0:	2300      	movs	r3, #0
 8016bb2:	f000 f9bf 	bl	8016f34 <phpalI14443p4_Sw_BuildRBlock>
 8016bb6:	4603      	mov	r3, r0
 8016bb8:	833b      	strh	r3, [r7, #24]
 8016bba:	8b3b      	ldrh	r3, [r7, #24]
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	d001      	beq.n	8016bc4 <phpalI14443p4_Sw_IsoHandling+0x668>
 8016bc0:	8b3b      	ldrh	r3, [r7, #24]
 8016bc2:	e056      	b.n	8016c72 <phpalI14443p4_Sw_IsoHandling+0x716>
                        pDataParams->bCid,
                        pDataParams->bPcbBlockNum,
                        0,
                        bIsoFrame,
                        &wTxLength));
                    bACKCount = 0;
 8016bc4:	2300      	movs	r3, #0
 8016bc6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

                    /* Emvco: case_id TA402 TA403 */
                    if(bNAKCount >= pDataParams->bMaxRetryCount)
 8016bca:	68fb      	ldr	r3, [r7, #12]
 8016bcc:	7c5b      	ldrb	r3, [r3, #17]
 8016bce:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8016bd2:	429a      	cmp	r2, r3
 8016bd4:	d23b      	bcs.n	8016c4e <phpalI14443p4_Sw_IsoHandling+0x6f2>
                    {
                        break;
                    }
                    /* Emvco: case_id: TA415_X */
                    if((statusBkUp & PH_ERR_MASK) != PH_ERR_SUCCESS )
 8016bd6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016bd8:	b2db      	uxtb	r3, r3
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	d005      	beq.n	8016bea <phpalI14443p4_Sw_IsoHandling+0x68e>
                    {
                        bNAKCount++;
 8016bde:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8016be2:	3301      	adds	r3, #1
 8016be4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8016be8:	e021      	b.n	8016c2e <phpalI14443p4_Sw_IsoHandling+0x6d2>
                    }
                    else
                    {
                        bNAKCount = 0;
 8016bea:	2300      	movs	r3, #0
 8016bec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8016bf0:	e01d      	b.n	8016c2e <phpalI14443p4_Sw_IsoHandling+0x6d2>
            }
            /* Bail out if the max. retry count is reached */
            else
            {
                /* Deselect card if behaviour is enabled */
                if (pDataParams->bMaxRetryCount > 0U)
 8016bf2:	68fb      	ldr	r3, [r7, #12]
 8016bf4:	7c5b      	ldrb	r3, [r3, #17]
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	d02b      	beq.n	8016c52 <phpalI14443p4_Sw_IsoHandling+0x6f6>
                {
                    /* backup retry count */
                    bRetryCount = pDataParams->bMaxRetryCount;
 8016bfa:	68fb      	ldr	r3, [r7, #12]
 8016bfc:	7c5b      	ldrb	r3, [r3, #17]
 8016bfe:	727b      	strb	r3, [r7, #9]

                    /* set retry count to zero to send only one S(DESELECT) */
                    pDataParams->bMaxRetryCount = 0;
 8016c00:	68fb      	ldr	r3, [r7, #12]
 8016c02:	2200      	movs	r2, #0
 8016c04:	745a      	strb	r2, [r3, #17]

                    /* Emvco Doesnot expect DeSelect Command*/
                    if(pDataParams->bOpeMode != RD_LIB_MODE_EMVCO)
 8016c06:	68fb      	ldr	r3, [r7, #12]
 8016c08:	7c9b      	ldrb	r3, [r3, #18]
 8016c0a:	2b01      	cmp	r3, #1
 8016c0c:	d004      	beq.n	8016c18 <phpalI14443p4_Sw_IsoHandling+0x6bc>
                    {
                        /* send deselect (ignore return code) */
                        statusTmp = phpalI14443p4_Sw_Deselect(pDataParams);
 8016c0e:	68f8      	ldr	r0, [r7, #12]
 8016c10:	f7ff f87f 	bl	8015d12 <phpalI14443p4_Sw_Deselect>
 8016c14:	4603      	mov	r3, r0
 8016c16:	833b      	strh	r3, [r7, #24]
                    }
                    /* restore retry count setting */
                    pDataParams->bMaxRetryCount = bRetryCount;
 8016c18:	68fb      	ldr	r3, [r7, #12]
 8016c1a:	7a7a      	ldrb	r2, [r7, #9]
 8016c1c:	745a      	strb	r2, [r3, #17]

                    /* Return ERR_RECOVERY_FAILED if some response has been received before */
                    if (0U != (bResponseReceived)) {
 8016c1e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	d015      	beq.n	8016c52 <phpalI14443p4_Sw_IsoHandling+0x6f6>
                        status = PH_ADD_COMPCODE_FIXED(PHPAL_I14443P4_ERR_RECOVERY_FAILED, PH_COMP_PAL_ISO14443P4);
 8016c26:	f44f 63d0 	mov.w	r3, #1664	@ 0x680
 8016c2a:	86fb      	strh	r3, [r7, #54]	@ 0x36
                    }
                }
                break;
 8016c2c:	e011      	b.n	8016c52 <phpalI14443p4_Sw_IsoHandling+0x6f6>
            }

            /* Increment retry count */
            ++bRetryCount;
 8016c2e:	7a7b      	ldrb	r3, [r7, #9]
 8016c30:	3301      	adds	r3, #1
 8016c32:	727b      	strb	r3, [r7, #9]
        }

        /* Map TxBuffer to ISO Frame buffer for next loop */
        pTxBuffer = bIsoFrame;
 8016c34:	f107 0314 	add.w	r3, r7, #20
 8016c38:	607b      	str	r3, [r7, #4]
    }
    /* Loop as long as we generate transmissions */
    while (0U != wTxLength);
 8016c3a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8016c3e:	2b00      	cmp	r3, #0
 8016c40:	f47f acbb 	bne.w	80165ba <phpalI14443p4_Sw_IsoHandling+0x5e>
 8016c44:	e006      	b.n	8016c54 <phpalI14443p4_Sw_IsoHandling+0x6f8>
                break;
 8016c46:	bf00      	nop
 8016c48:	e004      	b.n	8016c54 <phpalI14443p4_Sw_IsoHandling+0x6f8>
                        break;
 8016c4a:	bf00      	nop
 8016c4c:	e002      	b.n	8016c54 <phpalI14443p4_Sw_IsoHandling+0x6f8>
                        break;
 8016c4e:	bf00      	nop
 8016c50:	e000      	b.n	8016c54 <phpalI14443p4_Sw_IsoHandling+0x6f8>
                break;
 8016c52:	bf00      	nop

    /* Reset RxBuffer Start Position */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXBUFFER_STARTPOS, 0));
 8016c54:	68fb      	ldr	r3, [r7, #12]
 8016c56:	685b      	ldr	r3, [r3, #4]
 8016c58:	2200      	movs	r2, #0
 8016c5a:	2130      	movs	r1, #48	@ 0x30
 8016c5c:	4618      	mov	r0, r3
 8016c5e:	f7f7 fd9b 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8016c62:	4603      	mov	r3, r0
 8016c64:	833b      	strh	r3, [r7, #24]
 8016c66:	8b3b      	ldrh	r3, [r7, #24]
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d001      	beq.n	8016c70 <phpalI14443p4_Sw_IsoHandling+0x714>
 8016c6c:	8b3b      	ldrh	r3, [r7, #24]
 8016c6e:	e000      	b.n	8016c72 <phpalI14443p4_Sw_IsoHandling+0x716>

    return status;
 8016c70:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
}
 8016c72:	4618      	mov	r0, r3
 8016c74:	373c      	adds	r7, #60	@ 0x3c
 8016c76:	46bd      	mov	sp, r7
 8016c78:	bd90      	pop	{r4, r7, pc}
 8016c7a:	bf00      	nop

08016c7c <phpalI14443p4_Sw_IsValidIBlock>:
    uint8_t bCheckNad,
    uint8_t bNad,
    uint8_t * pRxBuffer,
    uint16_t wRxLength
    )
{
 8016c7c:	b490      	push	{r4, r7}
 8016c7e:	b084      	sub	sp, #16
 8016c80:	af00      	add	r7, sp, #0
 8016c82:	4604      	mov	r4, r0
 8016c84:	4608      	mov	r0, r1
 8016c86:	4611      	mov	r1, r2
 8016c88:	461a      	mov	r2, r3
 8016c8a:	4623      	mov	r3, r4
 8016c8c:	71fb      	strb	r3, [r7, #7]
 8016c8e:	4603      	mov	r3, r0
 8016c90:	71bb      	strb	r3, [r7, #6]
 8016c92:	460b      	mov	r3, r1
 8016c94:	717b      	strb	r3, [r7, #5]
 8016c96:	4613      	mov	r3, r2
 8016c98:	713b      	strb	r3, [r7, #4]
    uint16_t PH_MEMLOC_REM wExpRxLength = 0;
 8016c9a:	2300      	movs	r3, #0
 8016c9c:	81fb      	strh	r3, [r7, #14]

    /* Check RFU bits */
    if ((pRxBuffer[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_I_BLOCK_RFU_MASK) != PHPAL_I14443P4_SW_I_BLOCK_RFU_BITS)
 8016c9e:	69bb      	ldr	r3, [r7, #24]
 8016ca0:	781b      	ldrb	r3, [r3, #0]
 8016ca2:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8016ca6:	2b02      	cmp	r3, #2
 8016ca8:	d002      	beq.n	8016cb0 <phpalI14443p4_Sw_IsValidIBlock+0x34>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 8016caa:	f240 6306 	movw	r3, #1542	@ 0x606
 8016cae:	e04f      	b.n	8016d50 <phpalI14443p4_Sw_IsValidIBlock+0xd4>
    }

    /* We always expect the PCB byte to be present */
    wExpRxLength = 1;
 8016cb0:	2301      	movs	r3, #1
 8016cb2:	81fb      	strh	r3, [r7, #14]

    /* Enable CID checking if neccessary */
    if (0U != (bCheckCid))
 8016cb4:	79fb      	ldrb	r3, [r7, #7]
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d002      	beq.n	8016cc0 <phpalI14443p4_Sw_IsValidIBlock+0x44>
    {
        wExpRxLength++;
 8016cba:	89fb      	ldrh	r3, [r7, #14]
 8016cbc:	3301      	adds	r3, #1
 8016cbe:	81fb      	strh	r3, [r7, #14]
    }

    /* Enable NAD checking if neccessary */
    if (0U != (bCheckNad))
 8016cc0:	797b      	ldrb	r3, [r7, #5]
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	d002      	beq.n	8016ccc <phpalI14443p4_Sw_IsValidIBlock+0x50>
    {
        wExpRxLength++;
 8016cc6:	89fb      	ldrh	r3, [r7, #14]
 8016cc8:	3301      	adds	r3, #1
 8016cca:	81fb      	strh	r3, [r7, #14]
    }

    /* The frame should have the minimum frame length */
    if (wRxLength < wExpRxLength)
 8016ccc:	8bba      	ldrh	r2, [r7, #28]
 8016cce:	89fb      	ldrh	r3, [r7, #14]
 8016cd0:	429a      	cmp	r2, r3
 8016cd2:	d202      	bcs.n	8016cda <phpalI14443p4_Sw_IsValidIBlock+0x5e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 8016cd4:	f240 6306 	movw	r3, #1542	@ 0x606
 8016cd8:	e03a      	b.n	8016d50 <phpalI14443p4_Sw_IsValidIBlock+0xd4>
    }

    /* CID presence check */
    if ((0u != bCheckCid) &&
 8016cda:	79fb      	ldrb	r3, [r7, #7]
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d00d      	beq.n	8016cfc <phpalI14443p4_Sw_IsValidIBlock+0x80>
        ((pRxBuffer[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_PCB_CID_FOLLOWING) > 0U) &&
 8016ce0:	69bb      	ldr	r3, [r7, #24]
 8016ce2:	781b      	ldrb	r3, [r3, #0]
 8016ce4:	f003 0308 	and.w	r3, r3, #8
    if ((0u != bCheckCid) &&
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	d007      	beq.n	8016cfc <phpalI14443p4_Sw_IsValidIBlock+0x80>
        ((pRxBuffer[PHPAL_I14443P4_SW_PCB_POS+1U] & PHPAL_I14443P4_SW_CID_MASK) == bCid)
 8016cec:	69bb      	ldr	r3, [r7, #24]
 8016cee:	3301      	adds	r3, #1
 8016cf0:	781b      	ldrb	r3, [r3, #0]
 8016cf2:	f003 020f 	and.w	r2, r3, #15
 8016cf6:	79bb      	ldrb	r3, [r7, #6]
        ((pRxBuffer[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_PCB_CID_FOLLOWING) > 0U) &&
 8016cf8:	429a      	cmp	r2, r3
 8016cfa:	d00b      	beq.n	8016d14 <phpalI14443p4_Sw_IsValidIBlock+0x98>
        )
    {
        /* CHECK SUCCEEDED */
    }
    /* CID absence check */
    else if ((0u == bCheckCid) && (0u == (pRxBuffer[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_PCB_CID_FOLLOWING)))
 8016cfc:	79fb      	ldrb	r3, [r7, #7]
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	d105      	bne.n	8016d0e <phpalI14443p4_Sw_IsValidIBlock+0x92>
 8016d02:	69bb      	ldr	r3, [r7, #24]
 8016d04:	781b      	ldrb	r3, [r3, #0]
 8016d06:	f003 0308 	and.w	r3, r3, #8
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	d002      	beq.n	8016d14 <phpalI14443p4_Sw_IsValidIBlock+0x98>
        /* CHECK SUCCEEDED */
    }
    /* CID protocol error */
    else
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 8016d0e:	f240 6306 	movw	r3, #1542	@ 0x606
 8016d12:	e01d      	b.n	8016d50 <phpalI14443p4_Sw_IsValidIBlock+0xd4>
    }

    /* NAD presence check */
    if ((0u != bCheckNad) &&
 8016d14:	797b      	ldrb	r3, [r7, #5]
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	d00d      	beq.n	8016d36 <phpalI14443p4_Sw_IsValidIBlock+0xba>
        (0U != (pRxBuffer[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_PCB_NAD_FOLLOWING)) &&
 8016d1a:	69bb      	ldr	r3, [r7, #24]
 8016d1c:	781b      	ldrb	r3, [r3, #0]
 8016d1e:	f003 0304 	and.w	r3, r3, #4
    if ((0u != bCheckNad) &&
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	d007      	beq.n	8016d36 <phpalI14443p4_Sw_IsValidIBlock+0xba>
        (pRxBuffer[wExpRxLength-1u] == bNad)
 8016d26:	89fb      	ldrh	r3, [r7, #14]
 8016d28:	3b01      	subs	r3, #1
 8016d2a:	69ba      	ldr	r2, [r7, #24]
 8016d2c:	4413      	add	r3, r2
 8016d2e:	781b      	ldrb	r3, [r3, #0]
        (0U != (pRxBuffer[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_PCB_NAD_FOLLOWING)) &&
 8016d30:	793a      	ldrb	r2, [r7, #4]
 8016d32:	429a      	cmp	r2, r3
 8016d34:	d00b      	beq.n	8016d4e <phpalI14443p4_Sw_IsValidIBlock+0xd2>
        )
    {
        /* CHECK SUCCEEDED */
    }
    /* NAD absence check */
    else if ((bCheckNad == 0U) && ((pRxBuffer[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_PCB_NAD_FOLLOWING) == 0U))
 8016d36:	797b      	ldrb	r3, [r7, #5]
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d105      	bne.n	8016d48 <phpalI14443p4_Sw_IsValidIBlock+0xcc>
 8016d3c:	69bb      	ldr	r3, [r7, #24]
 8016d3e:	781b      	ldrb	r3, [r3, #0]
 8016d40:	f003 0304 	and.w	r3, r3, #4
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	d002      	beq.n	8016d4e <phpalI14443p4_Sw_IsValidIBlock+0xd2>
        /* CHECK SUCCEEDED */
    }
    /* NAD protocol error */
    else
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 8016d48:	f240 6306 	movw	r3, #1542	@ 0x606
 8016d4c:	e000      	b.n	8016d50 <phpalI14443p4_Sw_IsValidIBlock+0xd4>
    }

    return PH_ERR_SUCCESS;
 8016d4e:	2300      	movs	r3, #0
}
 8016d50:	4618      	mov	r0, r3
 8016d52:	3710      	adds	r7, #16
 8016d54:	46bd      	mov	sp, r7
 8016d56:	bc90      	pop	{r4, r7}
 8016d58:	4770      	bx	lr

08016d5a <phpalI14443p4_Sw_IsValidRBlock>:
    uint8_t bCheckCid,
    uint8_t bCid,
    uint8_t * pRxBuffer,
    uint16_t wRxLength
    )
{
 8016d5a:	b480      	push	{r7}
 8016d5c:	b085      	sub	sp, #20
 8016d5e:	af00      	add	r7, sp, #0
 8016d60:	603a      	str	r2, [r7, #0]
 8016d62:	461a      	mov	r2, r3
 8016d64:	4603      	mov	r3, r0
 8016d66:	71fb      	strb	r3, [r7, #7]
 8016d68:	460b      	mov	r3, r1
 8016d6a:	71bb      	strb	r3, [r7, #6]
 8016d6c:	4613      	mov	r3, r2
 8016d6e:	80bb      	strh	r3, [r7, #4]
    uint16_t PH_MEMLOC_REM wExpRxLength = 0;
 8016d70:	2300      	movs	r3, #0
 8016d72:	81fb      	strh	r3, [r7, #14]

    /* Check RFU bits */
    if ((pRxBuffer[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_R_BLOCK_RFU_MASK) != PHPAL_I14443P4_SW_R_BLOCK_RFU_BITS)
 8016d74:	683b      	ldr	r3, [r7, #0]
 8016d76:	781b      	ldrb	r3, [r3, #0]
 8016d78:	f003 0326 	and.w	r3, r3, #38	@ 0x26
 8016d7c:	2b22      	cmp	r3, #34	@ 0x22
 8016d7e:	d002      	beq.n	8016d86 <phpalI14443p4_Sw_IsValidRBlock+0x2c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 8016d80:	f240 6306 	movw	r3, #1542	@ 0x606
 8016d84:	e02c      	b.n	8016de0 <phpalI14443p4_Sw_IsValidRBlock+0x86>
    }

    /* We always expect the PCB byte to be present */
    wExpRxLength = 1;
 8016d86:	2301      	movs	r3, #1
 8016d88:	81fb      	strh	r3, [r7, #14]

    /* If CID is enabled, we always expect it */
    if (0U != (bCheckCid))
 8016d8a:	79fb      	ldrb	r3, [r7, #7]
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d002      	beq.n	8016d96 <phpalI14443p4_Sw_IsValidRBlock+0x3c>
    {
        wExpRxLength++;
 8016d90:	89fb      	ldrh	r3, [r7, #14]
 8016d92:	3301      	adds	r3, #1
 8016d94:	81fb      	strh	r3, [r7, #14]
    }

    /* The frame should have the exact frame length */
    if (wRxLength != wExpRxLength)
 8016d96:	88ba      	ldrh	r2, [r7, #4]
 8016d98:	89fb      	ldrh	r3, [r7, #14]
 8016d9a:	429a      	cmp	r2, r3
 8016d9c:	d002      	beq.n	8016da4 <phpalI14443p4_Sw_IsValidRBlock+0x4a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 8016d9e:	f240 6306 	movw	r3, #1542	@ 0x606
 8016da2:	e01d      	b.n	8016de0 <phpalI14443p4_Sw_IsValidRBlock+0x86>
    }

    /* CID presence check */
    if ((0U != bCheckCid) &&
 8016da4:	79fb      	ldrb	r3, [r7, #7]
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	d00d      	beq.n	8016dc6 <phpalI14443p4_Sw_IsValidRBlock+0x6c>
        (0U != (pRxBuffer[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_PCB_CID_FOLLOWING)) &&
 8016daa:	683b      	ldr	r3, [r7, #0]
 8016dac:	781b      	ldrb	r3, [r3, #0]
 8016dae:	f003 0308 	and.w	r3, r3, #8
    if ((0U != bCheckCid) &&
 8016db2:	2b00      	cmp	r3, #0
 8016db4:	d007      	beq.n	8016dc6 <phpalI14443p4_Sw_IsValidRBlock+0x6c>
        ((pRxBuffer[PHPAL_I14443P4_SW_PCB_POS+1U] & PHPAL_I14443P4_SW_CID_MASK) == bCid))
 8016db6:	683b      	ldr	r3, [r7, #0]
 8016db8:	3301      	adds	r3, #1
 8016dba:	781b      	ldrb	r3, [r3, #0]
 8016dbc:	f003 020f 	and.w	r2, r3, #15
 8016dc0:	79bb      	ldrb	r3, [r7, #6]
        (0U != (pRxBuffer[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_PCB_CID_FOLLOWING)) &&
 8016dc2:	429a      	cmp	r2, r3
 8016dc4:	d00b      	beq.n	8016dde <phpalI14443p4_Sw_IsValidRBlock+0x84>
    {
        /* CHECK SUCCEEDED */
    }
    /* CID absence check */
    else if ((0u == bCheckCid) && (0u == (pRxBuffer[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_PCB_CID_FOLLOWING)))
 8016dc6:	79fb      	ldrb	r3, [r7, #7]
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	d105      	bne.n	8016dd8 <phpalI14443p4_Sw_IsValidRBlock+0x7e>
 8016dcc:	683b      	ldr	r3, [r7, #0]
 8016dce:	781b      	ldrb	r3, [r3, #0]
 8016dd0:	f003 0308 	and.w	r3, r3, #8
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d002      	beq.n	8016dde <phpalI14443p4_Sw_IsValidRBlock+0x84>
        /* CHECK SUCCEEDED */
    }
    /* CID protocol error */
    else
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 8016dd8:	f240 6306 	movw	r3, #1542	@ 0x606
 8016ddc:	e000      	b.n	8016de0 <phpalI14443p4_Sw_IsValidRBlock+0x86>
    }

    return PH_ERR_SUCCESS;
 8016dde:	2300      	movs	r3, #0
}
 8016de0:	4618      	mov	r0, r3
 8016de2:	3714      	adds	r7, #20
 8016de4:	46bd      	mov	sp, r7
 8016de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dea:	4770      	bx	lr

08016dec <phpalI14443p4_Sw_IsValidSBlock>:
    uint8_t bCheckCid,
    uint8_t bCid,
    uint8_t * pRxBuffer,
    uint16_t wRxLength
    )
{
 8016dec:	b480      	push	{r7}
 8016dee:	b085      	sub	sp, #20
 8016df0:	af00      	add	r7, sp, #0
 8016df2:	603a      	str	r2, [r7, #0]
 8016df4:	461a      	mov	r2, r3
 8016df6:	4603      	mov	r3, r0
 8016df8:	71fb      	strb	r3, [r7, #7]
 8016dfa:	460b      	mov	r3, r1
 8016dfc:	71bb      	strb	r3, [r7, #6]
 8016dfe:	4613      	mov	r3, r2
 8016e00:	80bb      	strh	r3, [r7, #4]
    uint16_t PH_MEMLOC_REM wExpRxLength = 0;
 8016e02:	2300      	movs	r3, #0
 8016e04:	81fb      	strh	r3, [r7, #14]

    /* Check RFU bits, return with Protocol error if received PCB byte is not related to "Waiting time extension" */
    if ((pRxBuffer[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_S_BLOCK_RFU_MASK) != PHPAL_I14443P4_SW_S_BLOCK_RFU_BITS)
 8016e06:	683b      	ldr	r3, [r7, #0]
 8016e08:	781b      	ldrb	r3, [r3, #0]
 8016e0a:	f003 0307 	and.w	r3, r3, #7
 8016e0e:	2b02      	cmp	r3, #2
 8016e10:	d002      	beq.n	8016e18 <phpalI14443p4_Sw_IsValidSBlock+0x2c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 8016e12:	f240 6306 	movw	r3, #1542	@ 0x606
 8016e16:	e035      	b.n	8016e84 <phpalI14443p4_Sw_IsValidSBlock+0x98>
    }

    /* We always expect the PCB byte to be present */
    wExpRxLength = 1;
 8016e18:	2301      	movs	r3, #1
 8016e1a:	81fb      	strh	r3, [r7, #14]

    /* If CID is enabled, we always expect it */
    if (0U != (bCheckCid))
 8016e1c:	79fb      	ldrb	r3, [r7, #7]
 8016e1e:	2b00      	cmp	r3, #0
 8016e20:	d002      	beq.n	8016e28 <phpalI14443p4_Sw_IsValidSBlock+0x3c>
    {
        wExpRxLength++;
 8016e22:	89fb      	ldrh	r3, [r7, #14]
 8016e24:	3301      	adds	r3, #1
 8016e26:	81fb      	strh	r3, [r7, #14]
    }

    /* If this is a WTX request, we expect an additional INF byte */
    if (0u != (PHPAL_I14443P4_SW_IS_WTX(pRxBuffer[PHPAL_I14443P4_SW_PCB_POS])))
 8016e28:	683b      	ldr	r3, [r7, #0]
 8016e2a:	781b      	ldrb	r3, [r3, #0]
 8016e2c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8016e30:	2b30      	cmp	r3, #48	@ 0x30
 8016e32:	d102      	bne.n	8016e3a <phpalI14443p4_Sw_IsValidSBlock+0x4e>
    {
        wExpRxLength++;
 8016e34:	89fb      	ldrh	r3, [r7, #14]
 8016e36:	3301      	adds	r3, #1
 8016e38:	81fb      	strh	r3, [r7, #14]
    }

    /* The frame should have the exact frame length */
    if (wRxLength != wExpRxLength)
 8016e3a:	88ba      	ldrh	r2, [r7, #4]
 8016e3c:	89fb      	ldrh	r3, [r7, #14]
 8016e3e:	429a      	cmp	r2, r3
 8016e40:	d002      	beq.n	8016e48 <phpalI14443p4_Sw_IsValidSBlock+0x5c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 8016e42:	f240 6306 	movw	r3, #1542	@ 0x606
 8016e46:	e01d      	b.n	8016e84 <phpalI14443p4_Sw_IsValidSBlock+0x98>
    }

    /* CID presence check */
    if ((0u != bCheckCid) &&
 8016e48:	79fb      	ldrb	r3, [r7, #7]
 8016e4a:	2b00      	cmp	r3, #0
 8016e4c:	d00d      	beq.n	8016e6a <phpalI14443p4_Sw_IsValidSBlock+0x7e>
        (0U != (pRxBuffer[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_PCB_CID_FOLLOWING)) &&
 8016e4e:	683b      	ldr	r3, [r7, #0]
 8016e50:	781b      	ldrb	r3, [r3, #0]
 8016e52:	f003 0308 	and.w	r3, r3, #8
    if ((0u != bCheckCid) &&
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	d007      	beq.n	8016e6a <phpalI14443p4_Sw_IsValidSBlock+0x7e>
        ((pRxBuffer[PHPAL_I14443P4_SW_PCB_POS+1U] & PHPAL_I14443P4_SW_CID_MASK) == bCid))
 8016e5a:	683b      	ldr	r3, [r7, #0]
 8016e5c:	3301      	adds	r3, #1
 8016e5e:	781b      	ldrb	r3, [r3, #0]
 8016e60:	f003 020f 	and.w	r2, r3, #15
 8016e64:	79bb      	ldrb	r3, [r7, #6]
        (0U != (pRxBuffer[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_PCB_CID_FOLLOWING)) &&
 8016e66:	429a      	cmp	r2, r3
 8016e68:	d00b      	beq.n	8016e82 <phpalI14443p4_Sw_IsValidSBlock+0x96>
    {
        /* CHECK SUCCEEDED */
    }
    /* CID absence check */
    else if ((0u == bCheckCid) && (0u == (pRxBuffer[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_PCB_CID_FOLLOWING)))
 8016e6a:	79fb      	ldrb	r3, [r7, #7]
 8016e6c:	2b00      	cmp	r3, #0
 8016e6e:	d105      	bne.n	8016e7c <phpalI14443p4_Sw_IsValidSBlock+0x90>
 8016e70:	683b      	ldr	r3, [r7, #0]
 8016e72:	781b      	ldrb	r3, [r3, #0]
 8016e74:	f003 0308 	and.w	r3, r3, #8
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	d002      	beq.n	8016e82 <phpalI14443p4_Sw_IsValidSBlock+0x96>
        /* CHECK SUCCEEDED */
    }
    /* CID protocol error */
    else
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 8016e7c:	f240 6306 	movw	r3, #1542	@ 0x606
 8016e80:	e000      	b.n	8016e84 <phpalI14443p4_Sw_IsValidSBlock+0x98>
    }

    return PH_ERR_SUCCESS;
 8016e82:	2300      	movs	r3, #0
}
 8016e84:	4618      	mov	r0, r3
 8016e86:	3714      	adds	r7, #20
 8016e88:	46bd      	mov	sp, r7
 8016e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e8e:	4770      	bx	lr

08016e90 <phpalI14443p4_Sw_BuildIBlock>:
                                        uint8_t bPcbBlockNum,
                                        uint8_t bChaining,
                                        uint8_t * pTxBuffer,
                                        uint16_t * pTxLength
                                        )
{
 8016e90:	b490      	push	{r4, r7}
 8016e92:	b082      	sub	sp, #8
 8016e94:	af00      	add	r7, sp, #0
 8016e96:	4604      	mov	r4, r0
 8016e98:	4608      	mov	r0, r1
 8016e9a:	4611      	mov	r1, r2
 8016e9c:	461a      	mov	r2, r3
 8016e9e:	4623      	mov	r3, r4
 8016ea0:	71fb      	strb	r3, [r7, #7]
 8016ea2:	4603      	mov	r3, r0
 8016ea4:	71bb      	strb	r3, [r7, #6]
 8016ea6:	460b      	mov	r3, r1
 8016ea8:	717b      	strb	r3, [r7, #5]
 8016eaa:	4613      	mov	r3, r2
 8016eac:	713b      	strb	r3, [r7, #4]
    /* I-Block PCB */
    pTxBuffer[PHPAL_I14443P4_SW_PCB_POS] = PHPAL_I14443P4_SW_I_BLOCK | PHPAL_I14443P4_SW_I_BLOCK_RFU_BITS | bPcbBlockNum;
 8016eae:	7c3b      	ldrb	r3, [r7, #16]
 8016eb0:	f043 0302 	orr.w	r3, r3, #2
 8016eb4:	b2da      	uxtb	r2, r3
 8016eb6:	69bb      	ldr	r3, [r7, #24]
 8016eb8:	701a      	strb	r2, [r3, #0]
    *pTxLength = 1;
 8016eba:	69fb      	ldr	r3, [r7, #28]
 8016ebc:	2201      	movs	r2, #1
 8016ebe:	801a      	strh	r2, [r3, #0]

    /* Check if chaining is neccessary */
    if (0U != (bChaining))
 8016ec0:	7d3b      	ldrb	r3, [r7, #20]
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	d006      	beq.n	8016ed4 <phpalI14443p4_Sw_BuildIBlock+0x44>
    {
        pTxBuffer[PHPAL_I14443P4_SW_PCB_POS] |= PHPAL_I14443P4_SW_PCB_CHAINING;
 8016ec6:	69bb      	ldr	r3, [r7, #24]
 8016ec8:	781b      	ldrb	r3, [r3, #0]
 8016eca:	f043 0310 	orr.w	r3, r3, #16
 8016ece:	b2da      	uxtb	r2, r3
 8016ed0:	69bb      	ldr	r3, [r7, #24]
 8016ed2:	701a      	strb	r2, [r3, #0]
    }

    /* Append CID if neccessary */
    if (0U != (bCidEnabled))
 8016ed4:	79fb      	ldrb	r3, [r7, #7]
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	d011      	beq.n	8016efe <phpalI14443p4_Sw_BuildIBlock+0x6e>
    {
        pTxBuffer[PHPAL_I14443P4_SW_PCB_POS] |= PHPAL_I14443P4_SW_PCB_CID_FOLLOWING;
 8016eda:	69bb      	ldr	r3, [r7, #24]
 8016edc:	781b      	ldrb	r3, [r3, #0]
 8016ede:	f043 0308 	orr.w	r3, r3, #8
 8016ee2:	b2da      	uxtb	r2, r3
 8016ee4:	69bb      	ldr	r3, [r7, #24]
 8016ee6:	701a      	strb	r2, [r3, #0]
        pTxBuffer[(*pTxLength)++] = bCid;
 8016ee8:	69fb      	ldr	r3, [r7, #28]
 8016eea:	881b      	ldrh	r3, [r3, #0]
 8016eec:	1c5a      	adds	r2, r3, #1
 8016eee:	b291      	uxth	r1, r2
 8016ef0:	69fa      	ldr	r2, [r7, #28]
 8016ef2:	8011      	strh	r1, [r2, #0]
 8016ef4:	461a      	mov	r2, r3
 8016ef6:	69bb      	ldr	r3, [r7, #24]
 8016ef8:	4413      	add	r3, r2
 8016efa:	79ba      	ldrb	r2, [r7, #6]
 8016efc:	701a      	strb	r2, [r3, #0]
    }

    /* Append NAD if neccessary */
    if (0U != (bNadEnabled))
 8016efe:	797b      	ldrb	r3, [r7, #5]
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d011      	beq.n	8016f28 <phpalI14443p4_Sw_BuildIBlock+0x98>
    {
        pTxBuffer[PHPAL_I14443P4_SW_PCB_POS] |= PHPAL_I14443P4_SW_PCB_NAD_FOLLOWING;
 8016f04:	69bb      	ldr	r3, [r7, #24]
 8016f06:	781b      	ldrb	r3, [r3, #0]
 8016f08:	f043 0304 	orr.w	r3, r3, #4
 8016f0c:	b2da      	uxtb	r2, r3
 8016f0e:	69bb      	ldr	r3, [r7, #24]
 8016f10:	701a      	strb	r2, [r3, #0]
        pTxBuffer[(*pTxLength)++] = bNad;
 8016f12:	69fb      	ldr	r3, [r7, #28]
 8016f14:	881b      	ldrh	r3, [r3, #0]
 8016f16:	1c5a      	adds	r2, r3, #1
 8016f18:	b291      	uxth	r1, r2
 8016f1a:	69fa      	ldr	r2, [r7, #28]
 8016f1c:	8011      	strh	r1, [r2, #0]
 8016f1e:	461a      	mov	r2, r3
 8016f20:	69bb      	ldr	r3, [r7, #24]
 8016f22:	4413      	add	r3, r2
 8016f24:	793a      	ldrb	r2, [r7, #4]
 8016f26:	701a      	strb	r2, [r3, #0]
    }

    return PH_ERR_SUCCESS;
 8016f28:	2300      	movs	r3, #0
}
 8016f2a:	4618      	mov	r0, r3
 8016f2c:	3708      	adds	r7, #8
 8016f2e:	46bd      	mov	sp, r7
 8016f30:	bc90      	pop	{r4, r7}
 8016f32:	4770      	bx	lr

08016f34 <phpalI14443p4_Sw_BuildRBlock>:
                                        uint8_t bPcbBlockNum,
                                        uint8_t bIsAck,
                                        uint8_t * pTxBuffer,
                                        uint16_t * pTxLength
                                        )
{
 8016f34:	b490      	push	{r4, r7}
 8016f36:	b082      	sub	sp, #8
 8016f38:	af00      	add	r7, sp, #0
 8016f3a:	4604      	mov	r4, r0
 8016f3c:	4608      	mov	r0, r1
 8016f3e:	4611      	mov	r1, r2
 8016f40:	461a      	mov	r2, r3
 8016f42:	4623      	mov	r3, r4
 8016f44:	71fb      	strb	r3, [r7, #7]
 8016f46:	4603      	mov	r3, r0
 8016f48:	71bb      	strb	r3, [r7, #6]
 8016f4a:	460b      	mov	r3, r1
 8016f4c:	717b      	strb	r3, [r7, #5]
 8016f4e:	4613      	mov	r3, r2
 8016f50:	713b      	strb	r3, [r7, #4]
    /* R(ACK) PCB */
    pTxBuffer[PHPAL_I14443P4_SW_PCB_POS]  = PHPAL_I14443P4_SW_R_BLOCK | PHPAL_I14443P4_SW_R_BLOCK_RFU_BITS | bPcbBlockNum;
 8016f52:	797b      	ldrb	r3, [r7, #5]
 8016f54:	f063 035d 	orn	r3, r3, #93	@ 0x5d
 8016f58:	b2da      	uxtb	r2, r3
 8016f5a:	693b      	ldr	r3, [r7, #16]
 8016f5c:	701a      	strb	r2, [r3, #0]
    *pTxLength = 1;
 8016f5e:	697b      	ldr	r3, [r7, #20]
 8016f60:	2201      	movs	r2, #1
 8016f62:	801a      	strh	r2, [r3, #0]

    /* Switch to R(NAK) if neccessary */
    if (0U == (bIsAck))
 8016f64:	793b      	ldrb	r3, [r7, #4]
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	d106      	bne.n	8016f78 <phpalI14443p4_Sw_BuildRBlock+0x44>
    {
        pTxBuffer[PHPAL_I14443P4_SW_PCB_POS] |= PHPAL_I14443P4_SW_PCB_NAK;
 8016f6a:	693b      	ldr	r3, [r7, #16]
 8016f6c:	781b      	ldrb	r3, [r3, #0]
 8016f6e:	f043 0310 	orr.w	r3, r3, #16
 8016f72:	b2da      	uxtb	r2, r3
 8016f74:	693b      	ldr	r3, [r7, #16]
 8016f76:	701a      	strb	r2, [r3, #0]
    }

    /* Append CID if supported */
    if (bCidEnabled != 0U)
 8016f78:	79fb      	ldrb	r3, [r7, #7]
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d011      	beq.n	8016fa2 <phpalI14443p4_Sw_BuildRBlock+0x6e>
    {
        pTxBuffer[PHPAL_I14443P4_SW_PCB_POS] |= PHPAL_I14443P4_SW_PCB_CID_FOLLOWING;
 8016f7e:	693b      	ldr	r3, [r7, #16]
 8016f80:	781b      	ldrb	r3, [r3, #0]
 8016f82:	f043 0308 	orr.w	r3, r3, #8
 8016f86:	b2da      	uxtb	r2, r3
 8016f88:	693b      	ldr	r3, [r7, #16]
 8016f8a:	701a      	strb	r2, [r3, #0]
        pTxBuffer[(*pTxLength)++] = bCid;
 8016f8c:	697b      	ldr	r3, [r7, #20]
 8016f8e:	881b      	ldrh	r3, [r3, #0]
 8016f90:	1c5a      	adds	r2, r3, #1
 8016f92:	b291      	uxth	r1, r2
 8016f94:	697a      	ldr	r2, [r7, #20]
 8016f96:	8011      	strh	r1, [r2, #0]
 8016f98:	461a      	mov	r2, r3
 8016f9a:	693b      	ldr	r3, [r7, #16]
 8016f9c:	4413      	add	r3, r2
 8016f9e:	79ba      	ldrb	r2, [r7, #6]
 8016fa0:	701a      	strb	r2, [r3, #0]
    }

    return PH_ERR_SUCCESS;
 8016fa2:	2300      	movs	r3, #0
}
 8016fa4:	4618      	mov	r0, r3
 8016fa6:	3708      	adds	r7, #8
 8016fa8:	46bd      	mov	sp, r7
 8016faa:	bc90      	pop	{r4, r7}
 8016fac:	4770      	bx	lr

08016fae <phpalI14443p4_Sw_BuildSBlock>:
                                        uint8_t bIsWtx,
                                        uint8_t bWtxm,
                                        uint8_t * pTxBuffer,
                                        uint16_t * pTxLength
                                        )
{
 8016fae:	b490      	push	{r4, r7}
 8016fb0:	b082      	sub	sp, #8
 8016fb2:	af00      	add	r7, sp, #0
 8016fb4:	4604      	mov	r4, r0
 8016fb6:	4608      	mov	r0, r1
 8016fb8:	4611      	mov	r1, r2
 8016fba:	461a      	mov	r2, r3
 8016fbc:	4623      	mov	r3, r4
 8016fbe:	71fb      	strb	r3, [r7, #7]
 8016fc0:	4603      	mov	r3, r0
 8016fc2:	71bb      	strb	r3, [r7, #6]
 8016fc4:	460b      	mov	r3, r1
 8016fc6:	717b      	strb	r3, [r7, #5]
 8016fc8:	4613      	mov	r3, r2
 8016fca:	713b      	strb	r3, [r7, #4]
    /* S-Block PCB */
    pTxBuffer[PHPAL_I14443P4_SW_PCB_POS]  = PHPAL_I14443P4_SW_S_BLOCK | PHPAL_I14443P4_SW_S_BLOCK_RFU_BITS;
 8016fcc:	693b      	ldr	r3, [r7, #16]
 8016fce:	22c2      	movs	r2, #194	@ 0xc2
 8016fd0:	701a      	strb	r2, [r3, #0]
    *pTxLength = 1;
 8016fd2:	697b      	ldr	r3, [r7, #20]
 8016fd4:	2201      	movs	r2, #1
 8016fd6:	801a      	strh	r2, [r3, #0]

    /* Append CID if supported */
    if (bCidEnabled != 0U)
 8016fd8:	79fb      	ldrb	r3, [r7, #7]
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d011      	beq.n	8017002 <phpalI14443p4_Sw_BuildSBlock+0x54>
    {
        pTxBuffer[PHPAL_I14443P4_SW_PCB_POS] |= PHPAL_I14443P4_SW_PCB_CID_FOLLOWING;
 8016fde:	693b      	ldr	r3, [r7, #16]
 8016fe0:	781b      	ldrb	r3, [r3, #0]
 8016fe2:	f043 0308 	orr.w	r3, r3, #8
 8016fe6:	b2da      	uxtb	r2, r3
 8016fe8:	693b      	ldr	r3, [r7, #16]
 8016fea:	701a      	strb	r2, [r3, #0]
        pTxBuffer[(*pTxLength)++] = bCid;
 8016fec:	697b      	ldr	r3, [r7, #20]
 8016fee:	881b      	ldrh	r3, [r3, #0]
 8016ff0:	1c5a      	adds	r2, r3, #1
 8016ff2:	b291      	uxth	r1, r2
 8016ff4:	697a      	ldr	r2, [r7, #20]
 8016ff6:	8011      	strh	r1, [r2, #0]
 8016ff8:	461a      	mov	r2, r3
 8016ffa:	693b      	ldr	r3, [r7, #16]
 8016ffc:	4413      	add	r3, r2
 8016ffe:	79ba      	ldrb	r2, [r7, #6]
 8017000:	701a      	strb	r2, [r3, #0]
    }

    /* By default, PCB byte(bit 5 and 6) is configured to DESELECT command.
     * Configure PCB byte to WTX(instead of DESELECT) and append WTXM based on bIsWtx input value.
     */
    if (0U != (bIsWtx))
 8017002:	797b      	ldrb	r3, [r7, #5]
 8017004:	2b00      	cmp	r3, #0
 8017006:	d011      	beq.n	801702c <phpalI14443p4_Sw_BuildSBlock+0x7e>
    {
        pTxBuffer[PHPAL_I14443P4_SW_PCB_POS] |= PHPAL_I14443P4_SW_PCB_WTX;
 8017008:	693b      	ldr	r3, [r7, #16]
 801700a:	781b      	ldrb	r3, [r3, #0]
 801700c:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8017010:	b2da      	uxtb	r2, r3
 8017012:	693b      	ldr	r3, [r7, #16]
 8017014:	701a      	strb	r2, [r3, #0]
        pTxBuffer[(*pTxLength)++] = bWtxm;
 8017016:	697b      	ldr	r3, [r7, #20]
 8017018:	881b      	ldrh	r3, [r3, #0]
 801701a:	1c5a      	adds	r2, r3, #1
 801701c:	b291      	uxth	r1, r2
 801701e:	697a      	ldr	r2, [r7, #20]
 8017020:	8011      	strh	r1, [r2, #0]
 8017022:	461a      	mov	r2, r3
 8017024:	693b      	ldr	r3, [r7, #16]
 8017026:	4413      	add	r3, r2
 8017028:	793a      	ldrb	r2, [r7, #4]
 801702a:	701a      	strb	r2, [r3, #0]
    }

    return PH_ERR_SUCCESS;
 801702c:	2300      	movs	r3, #0
}
 801702e:	4618      	mov	r0, r3
 8017030:	3708      	adds	r7, #8
 8017032:	46bd      	mov	sp, r7
 8017034:	bc90      	pop	{r4, r7}
 8017036:	4770      	bx	lr

08017038 <phpalI14443p4_Sw_SetConfig>:
phStatus_t phpalI14443p4_Sw_SetConfig(
                                      phpalI14443p4_Sw_DataParams_t * pDataParams,
                                      uint16_t wConfig,
                                      uint16_t wValue
                                      )
{
 8017038:	b480      	push	{r7}
 801703a:	b083      	sub	sp, #12
 801703c:	af00      	add	r7, sp, #0
 801703e:	6078      	str	r0, [r7, #4]
 8017040:	460b      	mov	r3, r1
 8017042:	807b      	strh	r3, [r7, #2]
 8017044:	4613      	mov	r3, r2
 8017046:	803b      	strh	r3, [r7, #0]
    switch (wConfig)
 8017048:	887b      	ldrh	r3, [r7, #2]
 801704a:	2b06      	cmp	r3, #6
 801704c:	d876      	bhi.n	801713c <phpalI14443p4_Sw_SetConfig+0x104>
 801704e:	a201      	add	r2, pc, #4	@ (adr r2, 8017054 <phpalI14443p4_Sw_SetConfig+0x1c>)
 8017050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017054:	0801707b 	.word	0x0801707b
 8017058:	08017091 	.word	0x08017091
 801705c:	080170c7 	.word	0x080170c7
 8017060:	080170ef 	.word	0x080170ef
 8017064:	08017105 	.word	0x08017105
 8017068:	08017133 	.word	0x08017133
 801706c:	08017071 	.word	0x08017071
    {
    case PHPAL_I14443P4_CONFIG_OPE_MODE:
        {
            pDataParams->bOpeMode = (uint8_t)wValue;
 8017070:	883b      	ldrh	r3, [r7, #0]
 8017072:	b2da      	uxtb	r2, r3
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	749a      	strb	r2, [r3, #18]
            break;
 8017078:	e063      	b.n	8017142 <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    case PHPAL_I14443P4_CONFIG_BLOCKNO:
        {
            if (wValue == 0U)
 801707a:	883b      	ldrh	r3, [r7, #0]
 801707c:	2b00      	cmp	r3, #0
 801707e:	d103      	bne.n	8017088 <phpalI14443p4_Sw_SetConfig+0x50>
            {
                pDataParams->bPcbBlockNum = 0;
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	2200      	movs	r2, #0
 8017084:	741a      	strb	r2, [r3, #16]
            else
            {
                pDataParams->bPcbBlockNum = 1;
            }

            break;
 8017086:	e05c      	b.n	8017142 <phpalI14443p4_Sw_SetConfig+0x10a>
                pDataParams->bPcbBlockNum = 1;
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	2201      	movs	r2, #1
 801708c:	741a      	strb	r2, [r3, #16]
            break;
 801708e:	e058      	b.n	8017142 <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    case PHPAL_I14443P4_CONFIG_CID:
        {
            if (0U != (wValue & 0xFF00U))
 8017090:	883b      	ldrh	r3, [r7, #0]
 8017092:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8017096:	2b00      	cmp	r3, #0
 8017098:	d00e      	beq.n	80170b8 <phpalI14443p4_Sw_SetConfig+0x80>
            {
                if ((wValue & 0x00FFU) > PHPAL_I14443P4_CID_MAX)
 801709a:	883b      	ldrh	r3, [r7, #0]
 801709c:	b2db      	uxtb	r3, r3
 801709e:	2b0e      	cmp	r3, #14
 80170a0:	d902      	bls.n	80170a8 <phpalI14443p4_Sw_SetConfig+0x70>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4);
 80170a2:	f240 6321 	movw	r3, #1569	@ 0x621
 80170a6:	e04d      	b.n	8017144 <phpalI14443p4_Sw_SetConfig+0x10c>
                }
                pDataParams->bCidEnabled = 1;
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	2201      	movs	r2, #1
 80170ac:	725a      	strb	r2, [r3, #9]
                pDataParams->bCid = (uint8_t)(wValue);
 80170ae:	883b      	ldrh	r3, [r7, #0]
 80170b0:	b2da      	uxtb	r2, r3
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	729a      	strb	r2, [r3, #10]
            {
                pDataParams->bCidEnabled = 0;
                pDataParams->bCid = 0;
            }

            break;
 80170b6:	e044      	b.n	8017142 <phpalI14443p4_Sw_SetConfig+0x10a>
                pDataParams->bCidEnabled = 0;
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	2200      	movs	r2, #0
 80170bc:	725a      	strb	r2, [r3, #9]
                pDataParams->bCid = 0;
 80170be:	687b      	ldr	r3, [r7, #4]
 80170c0:	2200      	movs	r2, #0
 80170c2:	729a      	strb	r2, [r3, #10]
            break;
 80170c4:	e03d      	b.n	8017142 <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    case PHPAL_I14443P4_CONFIG_NAD:
        {
            if (0U != (wValue & 0xFF00U))
 80170c6:	883b      	ldrh	r3, [r7, #0]
 80170c8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80170cc:	2b00      	cmp	r3, #0
 80170ce:	d007      	beq.n	80170e0 <phpalI14443p4_Sw_SetConfig+0xa8>
            {
                pDataParams->bNadEnabled = 1;
 80170d0:	687b      	ldr	r3, [r7, #4]
 80170d2:	2201      	movs	r2, #1
 80170d4:	72da      	strb	r2, [r3, #11]
                pDataParams->bNad = (uint8_t)(wValue);
 80170d6:	883b      	ldrh	r3, [r7, #0]
 80170d8:	b2da      	uxtb	r2, r3
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	731a      	strb	r2, [r3, #12]
            {
                pDataParams->bNadEnabled = 0;
                pDataParams->bNad = 0;
            }

            break;
 80170de:	e030      	b.n	8017142 <phpalI14443p4_Sw_SetConfig+0x10a>
                pDataParams->bNadEnabled = 0;
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	2200      	movs	r2, #0
 80170e4:	72da      	strb	r2, [r3, #11]
                pDataParams->bNad = 0;
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	2200      	movs	r2, #0
 80170ea:	731a      	strb	r2, [r3, #12]
            break;
 80170ec:	e029      	b.n	8017142 <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    case PHPAL_I14443P4_CONFIG_FWI:
        {
            if (wValue > PHPAL_I14443P4_FWI_MAX)
 80170ee:	883b      	ldrh	r3, [r7, #0]
 80170f0:	2b0e      	cmp	r3, #14
 80170f2:	d902      	bls.n	80170fa <phpalI14443p4_Sw_SetConfig+0xc2>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4);
 80170f4:	f240 6321 	movw	r3, #1569	@ 0x621
 80170f8:	e024      	b.n	8017144 <phpalI14443p4_Sw_SetConfig+0x10c>
            }
            pDataParams->bFwi = (uint8_t)(wValue);
 80170fa:	883b      	ldrh	r3, [r7, #0]
 80170fc:	b2da      	uxtb	r2, r3
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	735a      	strb	r2, [r3, #13]
            break;
 8017102:	e01e      	b.n	8017142 <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    case PHPAL_I14443P4_CONFIG_FSI:
        {
            if (((wValue >> 8U) > PHPAL_I14443P4_FRAMESIZE_MAX) ||
 8017104:	883b      	ldrh	r3, [r7, #0]
 8017106:	0a1b      	lsrs	r3, r3, #8
 8017108:	b29b      	uxth	r3, r3
 801710a:	2b0c      	cmp	r3, #12
 801710c:	d803      	bhi.n	8017116 <phpalI14443p4_Sw_SetConfig+0xde>
                ((wValue & 0xFFU) > PHPAL_I14443P4_FRAMESIZE_MAX))
 801710e:	883b      	ldrh	r3, [r7, #0]
 8017110:	b2db      	uxtb	r3, r3
            if (((wValue >> 8U) > PHPAL_I14443P4_FRAMESIZE_MAX) ||
 8017112:	2b0c      	cmp	r3, #12
 8017114:	d902      	bls.n	801711c <phpalI14443p4_Sw_SetConfig+0xe4>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4);
 8017116:	f240 6321 	movw	r3, #1569	@ 0x621
 801711a:	e013      	b.n	8017144 <phpalI14443p4_Sw_SetConfig+0x10c>
            }

            pDataParams->bFsdi = (uint8_t)(wValue >> 8U);
 801711c:	883b      	ldrh	r3, [r7, #0]
 801711e:	0a1b      	lsrs	r3, r3, #8
 8017120:	b29b      	uxth	r3, r3
 8017122:	b2da      	uxtb	r2, r3
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	739a      	strb	r2, [r3, #14]
            pDataParams->bFsci = (uint8_t)(wValue);
 8017128:	883b      	ldrh	r3, [r7, #0]
 801712a:	b2da      	uxtb	r2, r3
 801712c:	687b      	ldr	r3, [r7, #4]
 801712e:	73da      	strb	r2, [r3, #15]
            break;
 8017130:	e007      	b.n	8017142 <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    case PHPAL_I14443P4_CONFIG_MAXRETRYCOUNT:
        {
            pDataParams->bMaxRetryCount = (uint8_t)(wValue);
 8017132:	883b      	ldrh	r3, [r7, #0]
 8017134:	b2da      	uxtb	r2, r3
 8017136:	687b      	ldr	r3, [r7, #4]
 8017138:	745a      	strb	r2, [r3, #17]
            break;
 801713a:	e002      	b.n	8017142 <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    default:
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_ISO14443P4);
 801713c:	f240 6323 	movw	r3, #1571	@ 0x623
 8017140:	e000      	b.n	8017144 <phpalI14443p4_Sw_SetConfig+0x10c>
        }
    }

    return PH_ERR_SUCCESS;
 8017142:	2300      	movs	r3, #0
}
 8017144:	4618      	mov	r0, r3
 8017146:	370c      	adds	r7, #12
 8017148:	46bd      	mov	sp, r7
 801714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801714e:	4770      	bx	lr

08017150 <phpalI14443p4a_Sw_Init>:
phStatus_t phpalI14443p4a_Sw_Init(
                                  phpalI14443p4a_Sw_DataParams_t * pDataParams,
                                  uint16_t wSizeOfDataParams,
                                  void * pHalDataParams
                                  )
{
 8017150:	b480      	push	{r7}
 8017152:	b085      	sub	sp, #20
 8017154:	af00      	add	r7, sp, #0
 8017156:	60f8      	str	r0, [r7, #12]
 8017158:	460b      	mov	r3, r1
 801715a:	607a      	str	r2, [r7, #4]
 801715c:	817b      	strh	r3, [r7, #10]
    if (sizeof(phpalI14443p4a_Sw_DataParams_t) != wSizeOfDataParams)
 801715e:	897b      	ldrh	r3, [r7, #10]
 8017160:	2b14      	cmp	r3, #20
 8017162:	d002      	beq.n	801716a <phpalI14443p4a_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_ISO14443P4A);
 8017164:	f44f 63a4 	mov.w	r3, #1312	@ 0x520
 8017168:	e032      	b.n	80171d0 <phpalI14443p4a_Sw_Init+0x80>
    }
    PH_ASSERT_NULL (pDataParams);
 801716a:	68fb      	ldr	r3, [r7, #12]
 801716c:	2b00      	cmp	r3, #0
 801716e:	d101      	bne.n	8017174 <phpalI14443p4a_Sw_Init+0x24>
 8017170:	2321      	movs	r3, #33	@ 0x21
 8017172:	e02d      	b.n	80171d0 <phpalI14443p4a_Sw_Init+0x80>
    PH_ASSERT_NULL (pHalDataParams);
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	2b00      	cmp	r3, #0
 8017178:	d101      	bne.n	801717e <phpalI14443p4a_Sw_Init+0x2e>
 801717a:	2321      	movs	r3, #33	@ 0x21
 801717c:	e028      	b.n	80171d0 <phpalI14443p4a_Sw_Init+0x80>

    /* init private data */
    pDataParams->wId            = PH_COMP_PAL_ISO14443P4A | PHPAL_I14443P4A_SW_ID;
 801717e:	68fb      	ldr	r3, [r7, #12]
 8017180:	f240 5201 	movw	r2, #1281	@ 0x501
 8017184:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams = pHalDataParams;
 8017186:	68fb      	ldr	r3, [r7, #12]
 8017188:	687a      	ldr	r2, [r7, #4]
 801718a:	605a      	str	r2, [r3, #4]
    pDataParams->bCidSupported  = PH_OFF;
 801718c:	68fb      	ldr	r3, [r7, #12]
 801718e:	2200      	movs	r2, #0
 8017190:	721a      	strb	r2, [r3, #8]
    pDataParams->bNadSupported  = PH_OFF;
 8017192:	68fb      	ldr	r3, [r7, #12]
 8017194:	2200      	movs	r2, #0
 8017196:	725a      	strb	r2, [r3, #9]
    pDataParams->bCid           = 0x00;
 8017198:	68fb      	ldr	r3, [r7, #12]
 801719a:	2200      	movs	r2, #0
 801719c:	729a      	strb	r2, [r3, #10]
    pDataParams->bBitRateCaps   = 0x00;
 801719e:	68fb      	ldr	r3, [r7, #12]
 80171a0:	2200      	movs	r2, #0
 80171a2:	72da      	strb	r2, [r3, #11]
    pDataParams->bFwi           = PHPAL_I14443P4A_SW_FWI_DEFAULT;
 80171a4:	68fb      	ldr	r3, [r7, #12]
 80171a6:	2204      	movs	r2, #4
 80171a8:	731a      	strb	r2, [r3, #12]
    pDataParams->bFsci          = PHPAL_I14443P4A_SW_FSCI_DEFAULT;
 80171aa:	68fb      	ldr	r3, [r7, #12]
 80171ac:	2202      	movs	r2, #2
 80171ae:	735a      	strb	r2, [r3, #13]
    pDataParams->bFsdi          = 0x00;
 80171b0:	68fb      	ldr	r3, [r7, #12]
 80171b2:	2200      	movs	r2, #0
 80171b4:	739a      	strb	r2, [r3, #14]
    pDataParams->bDri           = 0x00;
 80171b6:	68fb      	ldr	r3, [r7, #12]
 80171b8:	2200      	movs	r2, #0
 80171ba:	73da      	strb	r2, [r3, #15]
    pDataParams->bDsi           = 0x00;
 80171bc:	68fb      	ldr	r3, [r7, #12]
 80171be:	2200      	movs	r2, #0
 80171c0:	741a      	strb	r2, [r3, #16]
    pDataParams->bOpeMode       = RD_LIB_MODE_NFC;
 80171c2:	68fb      	ldr	r3, [r7, #12]
 80171c4:	2202      	movs	r2, #2
 80171c6:	745a      	strb	r2, [r3, #17]
    pDataParams->bRetryCount    = PHPAL_I14443P4A_RATS_RETRY_MAX;
 80171c8:	68fb      	ldr	r3, [r7, #12]
 80171ca:	2201      	movs	r2, #1
 80171cc:	749a      	strb	r2, [r3, #18]

    return PH_ERR_SUCCESS;
 80171ce:	2300      	movs	r3, #0
}
 80171d0:	4618      	mov	r0, r3
 80171d2:	3714      	adds	r7, #20
 80171d4:	46bd      	mov	sp, r7
 80171d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171da:	4770      	bx	lr

080171dc <phpalI14443p4a_Sw_SetConfig>:
phStatus_t phpalI14443p4a_Sw_SetConfig(
                                       phpalI14443p4a_Sw_DataParams_t * pDataParams,
                                       uint16_t wConfig,
                                       uint16_t wValue
                                     )
{
 80171dc:	b480      	push	{r7}
 80171de:	b083      	sub	sp, #12
 80171e0:	af00      	add	r7, sp, #0
 80171e2:	6078      	str	r0, [r7, #4]
 80171e4:	460b      	mov	r3, r1
 80171e6:	807b      	strh	r3, [r7, #2]
 80171e8:	4613      	mov	r3, r2
 80171ea:	803b      	strh	r3, [r7, #0]
   switch (wConfig)
 80171ec:	887b      	ldrh	r3, [r7, #2]
 80171ee:	2b01      	cmp	r3, #1
 80171f0:	d002      	beq.n	80171f8 <phpalI14443p4a_Sw_SetConfig+0x1c>
 80171f2:	2b02      	cmp	r3, #2
 80171f4:	d005      	beq.n	8017202 <phpalI14443p4a_Sw_SetConfig+0x26>
 80171f6:	e014      	b.n	8017222 <phpalI14443p4a_Sw_SetConfig+0x46>
   {
   /* Emvco: To Define Running Mode for RdLib: Either NFC, EMVCO or ISO */
   case PHPAL_I14443P4A_CONFIG_OPE_MODE:
   {
      pDataParams->bOpeMode = (uint8_t)wValue;
 80171f8:	883b      	ldrh	r3, [r7, #0]
 80171fa:	b2da      	uxtb	r2, r3
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	745a      	strb	r2, [r3, #17]
      break;
 8017200:	e012      	b.n	8017228 <phpalI14443p4a_Sw_SetConfig+0x4c>
   }

   case PHPAL_I14443P4A_CONFIG_RATS_RETRY_COUNT:
   {
      if(!(((wValue & 0xFFU) == PHPAL_I14443P4A_RATS_RETRY_MIN) ||
 8017202:	883b      	ldrh	r3, [r7, #0]
 8017204:	b2db      	uxtb	r3, r3
 8017206:	2b00      	cmp	r3, #0
 8017208:	d006      	beq.n	8017218 <phpalI14443p4a_Sw_SetConfig+0x3c>
                  ((wValue & 0xFFU) == PHPAL_I14443P4A_RATS_RETRY_MAX)))
 801720a:	883b      	ldrh	r3, [r7, #0]
 801720c:	b2db      	uxtb	r3, r3
      if(!(((wValue & 0xFFU) == PHPAL_I14443P4A_RATS_RETRY_MIN) ||
 801720e:	2b01      	cmp	r3, #1
 8017210:	d002      	beq.n	8017218 <phpalI14443p4a_Sw_SetConfig+0x3c>
      {
         return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8017212:	f240 5321 	movw	r3, #1313	@ 0x521
 8017216:	e008      	b.n	801722a <phpalI14443p4a_Sw_SetConfig+0x4e>
      }

      pDataParams->bRetryCount = (uint8_t)wValue;
 8017218:	883b      	ldrh	r3, [r7, #0]
 801721a:	b2da      	uxtb	r2, r3
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	749a      	strb	r2, [r3, #18]
      break;
 8017220:	e002      	b.n	8017228 <phpalI14443p4a_Sw_SetConfig+0x4c>
   }

   default:
      return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8017222:	f240 5323 	movw	r3, #1315	@ 0x523
 8017226:	e000      	b.n	801722a <phpalI14443p4a_Sw_SetConfig+0x4e>
   }

   return PH_ERR_SUCCESS;
 8017228:	2300      	movs	r3, #0
}
 801722a:	4618      	mov	r0, r3
 801722c:	370c      	adds	r7, #12
 801722e:	46bd      	mov	sp, r7
 8017230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017234:	4770      	bx	lr
	...

08017238 <phpalI14443p4a_Sw_GetConfig>:
phStatus_t phpalI14443p4a_Sw_GetConfig(
                                       phpalI14443p4a_Sw_DataParams_t * pDataParams,
                                       uint16_t wConfig,
                                       uint16_t *pValue
                                     )
{
 8017238:	b480      	push	{r7}
 801723a:	b085      	sub	sp, #20
 801723c:	af00      	add	r7, sp, #0
 801723e:	60f8      	str	r0, [r7, #12]
 8017240:	460b      	mov	r3, r1
 8017242:	607a      	str	r2, [r7, #4]
 8017244:	817b      	strh	r3, [r7, #10]
    switch (wConfig)
 8017246:	897b      	ldrh	r3, [r7, #10]
 8017248:	3b01      	subs	r3, #1
 801724a:	2b03      	cmp	r3, #3
 801724c:	d822      	bhi.n	8017294 <phpalI14443p4a_Sw_GetConfig+0x5c>
 801724e:	a201      	add	r2, pc, #4	@ (adr r2, 8017254 <phpalI14443p4a_Sw_GetConfig+0x1c>)
 8017250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017254:	08017265 	.word	0x08017265
 8017258:	08017271 	.word	0x08017271
 801725c:	0801727d 	.word	0x0801727d
 8017260:	08017289 	.word	0x08017289
    {
    case PHPAL_I14443P4A_CONFIG_OPE_MODE:
        *pValue = (uint16_t)pDataParams->bOpeMode;
 8017264:	68fb      	ldr	r3, [r7, #12]
 8017266:	7c5b      	ldrb	r3, [r3, #17]
 8017268:	461a      	mov	r2, r3
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	801a      	strh	r2, [r3, #0]
        break;
 801726e:	e014      	b.n	801729a <phpalI14443p4a_Sw_GetConfig+0x62>

    case PHPAL_I14443P4A_CONFIG_RATS_RETRY_COUNT:
        *pValue = (uint16_t)pDataParams->bRetryCount;
 8017270:	68fb      	ldr	r3, [r7, #12]
 8017272:	7c9b      	ldrb	r3, [r3, #18]
 8017274:	461a      	mov	r2, r3
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	801a      	strh	r2, [r3, #0]
        break;
 801727a:	e00e      	b.n	801729a <phpalI14443p4a_Sw_GetConfig+0x62>

    case PHPAL_I14443P4A_CONFIG_DRI:
        *pValue = (uint16_t)pDataParams->bDri;
 801727c:	68fb      	ldr	r3, [r7, #12]
 801727e:	7bdb      	ldrb	r3, [r3, #15]
 8017280:	461a      	mov	r2, r3
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	801a      	strh	r2, [r3, #0]
        break;
 8017286:	e008      	b.n	801729a <phpalI14443p4a_Sw_GetConfig+0x62>

    case PHPAL_I14443P4A_CONFIG_DSI:
        *pValue = (uint16_t)pDataParams->bDsi;
 8017288:	68fb      	ldr	r3, [r7, #12]
 801728a:	7c1b      	ldrb	r3, [r3, #16]
 801728c:	461a      	mov	r2, r3
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	801a      	strh	r2, [r3, #0]
        break;
 8017292:	e002      	b.n	801729a <phpalI14443p4a_Sw_GetConfig+0x62>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8017294:	f240 5323 	movw	r3, #1315	@ 0x523
 8017298:	e000      	b.n	801729c <phpalI14443p4a_Sw_GetConfig+0x64>
    }

    return PH_ERR_SUCCESS;
 801729a:	2300      	movs	r3, #0
}
 801729c:	4618      	mov	r0, r3
 801729e:	3714      	adds	r7, #20
 80172a0:	46bd      	mov	sp, r7
 80172a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172a6:	4770      	bx	lr

080172a8 <phpalI14443p4a_Sw_Rats>:
                                  phpalI14443p4a_Sw_DataParams_t * pDataParams,
                                  uint8_t bFsdi,
                                  uint8_t bCid,
                                  uint8_t * pAts
                                  )
{
 80172a8:	b5b0      	push	{r4, r5, r7, lr}
 80172aa:	b08e      	sub	sp, #56	@ 0x38
 80172ac:	af02      	add	r7, sp, #8
 80172ae:	60f8      	str	r0, [r7, #12]
 80172b0:	607b      	str	r3, [r7, #4]
 80172b2:	460b      	mov	r3, r1
 80172b4:	72fb      	strb	r3, [r7, #11]
 80172b6:	4613      	mov	r3, r2
 80172b8:	72bb      	strb	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM cmd[2];
    uint16_t    PH_MEMLOC_REM wCmdLength = 0;
 80172ba:	2300      	movs	r3, #0
 80172bc:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint8_t     PH_MEMLOC_REM bAtsIndex;
    uint8_t     PH_MEMLOC_REM bSfgi;
    uint32_t    PH_MEMLOC_REM dwSfgt;
    uint32_t    PH_MEMLOC_REM dwFwt;
    float32_t   PH_MEMLOC_REM fDelay;
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 80172be:	2300      	movs	r3, #0
 80172c0:	617b      	str	r3, [r7, #20]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 80172c2:	2300      	movs	r3, #0
 80172c4:	827b      	strh	r3, [r7, #18]

    /* Parameter check */
    if(pDataParams->bOpeMode != RD_LIB_MODE_NFC)
 80172c6:	68fb      	ldr	r3, [r7, #12]
 80172c8:	7c5b      	ldrb	r3, [r3, #17]
 80172ca:	2b02      	cmp	r3, #2
 80172cc:	d012      	beq.n	80172f4 <phpalI14443p4a_Sw_Rats+0x4c>
    {
        if ((bFsdi > PHPAL_I14443P4A_FRAMESIZE_MAX) || (bCid > 14U))
 80172ce:	7afb      	ldrb	r3, [r7, #11]
 80172d0:	2b0c      	cmp	r3, #12
 80172d2:	d802      	bhi.n	80172da <phpalI14443p4a_Sw_Rats+0x32>
 80172d4:	7abb      	ldrb	r3, [r7, #10]
 80172d6:	2b0e      	cmp	r3, #14
 80172d8:	d902      	bls.n	80172e0 <phpalI14443p4a_Sw_Rats+0x38>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 80172da:	f240 5321 	movw	r3, #1313	@ 0x521
 80172de:	e2c5      	b.n	801786c <phpalI14443p4a_Sw_Rats+0x5c4>
        }
        if ((bFsdi < PHPAL_I14443P4A_EMVCO_FRAMESIZE_MIN) && (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO))
 80172e0:	7afb      	ldrb	r3, [r7, #11]
 80172e2:	2b07      	cmp	r3, #7
 80172e4:	d80f      	bhi.n	8017306 <phpalI14443p4a_Sw_Rats+0x5e>
 80172e6:	68fb      	ldr	r3, [r7, #12]
 80172e8:	7c5b      	ldrb	r3, [r3, #17]
 80172ea:	2b01      	cmp	r3, #1
 80172ec:	d10b      	bne.n	8017306 <phpalI14443p4a_Sw_Rats+0x5e>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 80172ee:	f240 5321 	movw	r3, #1313	@ 0x521
 80172f2:	e2bb      	b.n	801786c <phpalI14443p4a_Sw_Rats+0x5c4>
        }
    }
    else
    {
        if ((bFsdi > PHPAL_I14443P4A_NFC_FRAMESIZE_MAX) || (bCid > 14U))
 80172f4:	7afb      	ldrb	r3, [r7, #11]
 80172f6:	2b08      	cmp	r3, #8
 80172f8:	d802      	bhi.n	8017300 <phpalI14443p4a_Sw_Rats+0x58>
 80172fa:	7abb      	ldrb	r3, [r7, #10]
 80172fc:	2b0e      	cmp	r3, #14
 80172fe:	d902      	bls.n	8017306 <phpalI14443p4a_Sw_Rats+0x5e>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8017300:	f240 5321 	movw	r3, #1313	@ 0x521
 8017304:	e2b2      	b.n	801786c <phpalI14443p4a_Sw_Rats+0x5c4>
        }
    }

    /* Set Activation timeout */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8017306:	68fb      	ldr	r3, [r7, #12]
 8017308:	685b      	ldr	r3, [r3, #4]
 801730a:	f241 42e2 	movw	r2, #5346	@ 0x14e2
 801730e:	210d      	movs	r1, #13
 8017310:	4618      	mov	r0, r3
 8017312:	f7f7 fa41 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8017316:	4603      	mov	r3, r0
 8017318:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801731a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801731c:	2b00      	cmp	r3, #0
 801731e:	d001      	beq.n	8017324 <phpalI14443p4a_Sw_Rats+0x7c>
 8017320:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017322:	e2a3      	b.n	801786c <phpalI14443p4a_Sw_Rats+0x5c4>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
        PHPAL_I14443P4A_SW_FWT_ACTIVATION_US + PHPAL_I14443P4A_SW_EXT_TIME_US));

    /* Send Rats command */
    cmd[0] = PHPAL_I14443P4A_SW_RATS;
 8017324:	23e0      	movs	r3, #224	@ 0xe0
 8017326:	763b      	strb	r3, [r7, #24]
    cmd[1] = (uint8_t)(((bFsdi << 4U) & 0xF0U) | (bCid & 0x0FU));
 8017328:	7afb      	ldrb	r3, [r7, #11]
 801732a:	011b      	lsls	r3, r3, #4
 801732c:	b2da      	uxtb	r2, r3
 801732e:	7abb      	ldrb	r3, [r7, #10]
 8017330:	f003 030f 	and.w	r3, r3, #15
 8017334:	b2db      	uxtb	r3, r3
 8017336:	4313      	orrs	r3, r2
 8017338:	b2db      	uxtb	r3, r3
 801733a:	767b      	strb	r3, [r7, #25]

    status = phhalHw_Exchange(
 801733c:	68fb      	ldr	r3, [r7, #12]
 801733e:	6858      	ldr	r0, [r3, #4]
 8017340:	f107 0218 	add.w	r2, r7, #24
 8017344:	f107 0312 	add.w	r3, r7, #18
 8017348:	9301      	str	r3, [sp, #4]
 801734a:	f107 0314 	add.w	r3, r7, #20
 801734e:	9300      	str	r3, [sp, #0]
 8017350:	2302      	movs	r3, #2
 8017352:	2100      	movs	r1, #0
 8017354:	f7f6 fe6a 	bl	800e02c <phhalHw_Pn5180_Exchange>
 8017358:	4603      	mov	r3, r0
 801735a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        &wRespLength);

    /* check and perform re-transmission of RATS in case of Transmission or Timeout error
     * Nfc Digital Specification ver 1.1, Req 13.7.1.1
     */
    bAtsIndex = pDataParams->bRetryCount;
 801735c:	68fb      	ldr	r3, [r7, #12]
 801735e:	7c9b      	ldrb	r3, [r3, #18]
 8017360:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    while((bAtsIndex > 0U) && (PH_ERR_SUCCESS != (status & PH_ERR_MASK)))
 8017364:	e031      	b.n	80173ca <phpalI14443p4a_Sw_Rats+0x122>
    {
        /* Return error other than Timeout or Noise Error */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8017366:	68fb      	ldr	r3, [r7, #12]
 8017368:	7c5b      	ldrb	r3, [r3, #17]
 801736a:	2b01      	cmp	r3, #1
 801736c:	d118      	bne.n	80173a0 <phpalI14443p4a_Sw_Rats+0xf8>
        {
            if((((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) || ((status & PH_ERR_MASK) == PH_ERR_NOISE_ERROR)))
 801736e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8017370:	b2db      	uxtb	r3, r3
 8017372:	2b01      	cmp	r3, #1
 8017374:	d003      	beq.n	801737e <phpalI14443p4a_Sw_Rats+0xd6>
 8017376:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8017378:	b2db      	uxtb	r3, r3
 801737a:	2b11      	cmp	r3, #17
 801737c:	d10e      	bne.n	801739c <phpalI14443p4a_Sw_Rats+0xf4>
            {
                /* Wait for at least Tmin retransmission delay. */
                PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 801737e:	68fb      	ldr	r3, [r7, #12]
 8017380:	685b      	ldr	r3, [r3, #4]
 8017382:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8017386:	2100      	movs	r1, #0
 8017388:	4618      	mov	r0, r3
 801738a:	f7f7 f94b 	bl	800e624 <phhalHw_Pn5180_Wait>
 801738e:	4603      	mov	r3, r0
 8017390:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8017392:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8017394:	2b00      	cmp	r3, #0
 8017396:	d003      	beq.n	80173a0 <phpalI14443p4a_Sw_Rats+0xf8>
 8017398:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801739a:	e267      	b.n	801786c <phpalI14443p4a_Sw_Rats+0x5c4>
                    PHHAL_HW_TIME_MICROSECONDS,
                    PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));
            }
            else
            {
                return status;
 801739c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801739e:	e265      	b.n	801786c <phpalI14443p4a_Sw_Rats+0x5c4>
            }
        }

        /* Emvco: case_id TA313, TA307_X, TA306_10-15, TA340_1 */
        status = phhalHw_Exchange(
 80173a0:	68fb      	ldr	r3, [r7, #12]
 80173a2:	6858      	ldr	r0, [r3, #4]
 80173a4:	f107 0218 	add.w	r2, r7, #24
 80173a8:	f107 0312 	add.w	r3, r7, #18
 80173ac:	9301      	str	r3, [sp, #4]
 80173ae:	f107 0314 	add.w	r3, r7, #20
 80173b2:	9300      	str	r3, [sp, #0]
 80173b4:	2302      	movs	r3, #2
 80173b6:	2100      	movs	r1, #0
 80173b8:	f7f6 fe38 	bl	800e02c <phhalHw_Pn5180_Exchange>
 80173bc:	4603      	mov	r3, r0
 80173be:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            cmd,
            2,
            &pResp,
            &wRespLength);

        bAtsIndex--;
 80173c0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80173c4:	3b01      	subs	r3, #1
 80173c6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    while((bAtsIndex > 0U) && (PH_ERR_SUCCESS != (status & PH_ERR_MASK)))
 80173ca:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d003      	beq.n	80173da <phpalI14443p4a_Sw_Rats+0x132>
 80173d2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80173d4:	b2db      	uxtb	r3, r3
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	d1c5      	bne.n	8017366 <phpalI14443p4a_Sw_Rats+0xbe>
    }

    if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 80173da:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80173dc:	b2db      	uxtb	r3, r3
 80173de:	2b00      	cmp	r3, #0
 80173e0:	f040 81c5 	bne.w	801776e <phpalI14443p4a_Sw_Rats+0x4c6>
    {
        /* Check for protocol error */
        if (((uint8_t)wRespLength != pResp[0]) || (wRespLength < 1U))
 80173e4:	8a7b      	ldrh	r3, [r7, #18]
 80173e6:	b2da      	uxtb	r2, r3
 80173e8:	697b      	ldr	r3, [r7, #20]
 80173ea:	781b      	ldrb	r3, [r3, #0]
 80173ec:	429a      	cmp	r2, r3
 80173ee:	d102      	bne.n	80173f6 <phpalI14443p4a_Sw_Rats+0x14e>
 80173f0:	8a7b      	ldrh	r3, [r7, #18]
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	d102      	bne.n	80173fc <phpalI14443p4a_Sw_Rats+0x154>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4A);
 80173f6:	f240 5306 	movw	r3, #1286	@ 0x506
 80173fa:	e237      	b.n	801786c <phpalI14443p4a_Sw_Rats+0x5c4>
        }

        /* Copy ATS buffer */
        (void)memcpy(pAts, pResp, wRespLength);
 80173fc:	697b      	ldr	r3, [r7, #20]
 80173fe:	8a7a      	ldrh	r2, [r7, #18]
 8017400:	4619      	mov	r1, r3
 8017402:	6878      	ldr	r0, [r7, #4]
 8017404:	f009 fac5 	bl	8020992 <memcpy>

        /* Set default values */
        if (pDataParams->bOpeMode != RD_LIB_MODE_ISO)
 8017408:	68fb      	ldr	r3, [r7, #12]
 801740a:	7c5b      	ldrb	r3, [r3, #17]
 801740c:	2b03      	cmp	r3, #3
 801740e:	d006      	beq.n	801741e <phpalI14443p4a_Sw_Rats+0x176>
        {
            pDataParams->bCidSupported = PH_OFF;
 8017410:	68fb      	ldr	r3, [r7, #12]
 8017412:	2200      	movs	r2, #0
 8017414:	721a      	strb	r2, [r3, #8]
            pDataParams->bCid          = 0x00;
 8017416:	68fb      	ldr	r3, [r7, #12]
 8017418:	2200      	movs	r2, #0
 801741a:	729a      	strb	r2, [r3, #10]
 801741c:	e005      	b.n	801742a <phpalI14443p4a_Sw_Rats+0x182>
        }
        else
        {
            pDataParams->bCidSupported  = PH_ON;
 801741e:	68fb      	ldr	r3, [r7, #12]
 8017420:	2201      	movs	r2, #1
 8017422:	721a      	strb	r2, [r3, #8]
            pDataParams->bCid           = bCid;
 8017424:	68fb      	ldr	r3, [r7, #12]
 8017426:	7aba      	ldrb	r2, [r7, #10]
 8017428:	729a      	strb	r2, [r3, #10]
        }
        pDataParams->bNadSupported  = PH_OFF;
 801742a:	68fb      	ldr	r3, [r7, #12]
 801742c:	2200      	movs	r2, #0
 801742e:	725a      	strb	r2, [r3, #9]
        pDataParams->bBitRateCaps   = 0x00;
 8017430:	68fb      	ldr	r3, [r7, #12]
 8017432:	2200      	movs	r2, #0
 8017434:	72da      	strb	r2, [r3, #11]
        pDataParams->bFwi           = PHPAL_I14443P4A_SW_FWI_DEFAULT;
 8017436:	68fb      	ldr	r3, [r7, #12]
 8017438:	2204      	movs	r2, #4
 801743a:	731a      	strb	r2, [r3, #12]
        pDataParams->bFsdi          = bFsdi;
 801743c:	68fb      	ldr	r3, [r7, #12]
 801743e:	7afa      	ldrb	r2, [r7, #11]
 8017440:	739a      	strb	r2, [r3, #14]
        pDataParams->bFsci          = PHPAL_I14443P4A_SW_FSCI_DEFAULT;
 8017442:	68fb      	ldr	r3, [r7, #12]
 8017444:	2202      	movs	r2, #2
 8017446:	735a      	strb	r2, [r3, #13]
        pDataParams->bDri           = 0x00;
 8017448:	68fb      	ldr	r3, [r7, #12]
 801744a:	2200      	movs	r2, #0
 801744c:	73da      	strb	r2, [r3, #15]
        pDataParams->bDsi           = 0x00;
 801744e:	68fb      	ldr	r3, [r7, #12]
 8017450:	2200      	movs	r2, #0
 8017452:	741a      	strb	r2, [r3, #16]
        bSfgi                       = PHPAL_I14443P4A_SW_SFGI_DEFAULT;
 8017454:	2300      	movs	r3, #0
 8017456:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

        /* Retrieve ATS information */
        /* Start parsing with T0 byte */
        bAtsIndex = PHPAL_I14443P4A_SW_ATS_T0;
 801745a:	2301      	movs	r3, #1
 801745c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

        /* Parse T0/TA/TB/TC */
        if (wRespLength > 1U)
 8017460:	8a7b      	ldrh	r3, [r7, #18]
 8017462:	2b01      	cmp	r3, #1
 8017464:	f240 80ba 	bls.w	80175dc <phpalI14443p4a_Sw_Rats+0x334>
        {
            /* Parse T0 */
            pDataParams->bFsci = pAts[bAtsIndex] & 0x0FU;
 8017468:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801746c:	687a      	ldr	r2, [r7, #4]
 801746e:	4413      	add	r3, r2
 8017470:	781b      	ldrb	r3, [r3, #0]
 8017472:	f003 030f 	and.w	r3, r3, #15
 8017476:	b2da      	uxtb	r2, r3
 8017478:	68fb      	ldr	r3, [r7, #12]
 801747a:	735a      	strb	r2, [r3, #13]
            if(pDataParams->bOpeMode != RD_LIB_MODE_NFC)
 801747c:	68fb      	ldr	r3, [r7, #12]
 801747e:	7c5b      	ldrb	r3, [r3, #17]
 8017480:	2b02      	cmp	r3, #2
 8017482:	d007      	beq.n	8017494 <phpalI14443p4a_Sw_Rats+0x1ec>
            {
                if (pDataParams->bFsci > PHPAL_I14443P4A_FRAMESIZE_MAX)
 8017484:	68fb      	ldr	r3, [r7, #12]
 8017486:	7b5b      	ldrb	r3, [r3, #13]
 8017488:	2b0c      	cmp	r3, #12
 801748a:	d90a      	bls.n	80174a2 <phpalI14443p4a_Sw_Rats+0x1fa>
                {
                    pDataParams->bFsci = PHPAL_I14443P4A_FRAMESIZE_MAX;
 801748c:	68fb      	ldr	r3, [r7, #12]
 801748e:	220c      	movs	r2, #12
 8017490:	735a      	strb	r2, [r3, #13]
 8017492:	e006      	b.n	80174a2 <phpalI14443p4a_Sw_Rats+0x1fa>
                }
            }
            else
            {   /* Nfc: Digital Specification Ver 1.1 Table 59 */
                if (pDataParams->bFsci > PHPAL_I14443P4A_NFC_FRAMESIZE_MAX)
 8017494:	68fb      	ldr	r3, [r7, #12]
 8017496:	7b5b      	ldrb	r3, [r3, #13]
 8017498:	2b08      	cmp	r3, #8
 801749a:	d902      	bls.n	80174a2 <phpalI14443p4a_Sw_Rats+0x1fa>
                {
                    pDataParams->bFsci = PHPAL_I14443P4A_NFC_FRAMESIZE_MAX;
 801749c:	68fb      	ldr	r3, [r7, #12]
 801749e:	2208      	movs	r2, #8
 80174a0:	735a      	strb	r2, [r3, #13]
                }
            }

            bAtsIndex++;
 80174a2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80174a6:	3301      	adds	r3, #1
 80174a8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

            /* Parse TA(1) */
            if (0U != (pAts[PHPAL_I14443P4A_SW_ATS_T0] & PHPAL_I14443P4A_SW_ATS_TA1_PRESENT))
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	3301      	adds	r3, #1
 80174b0:	781b      	ldrb	r3, [r3, #0]
 80174b2:	f003 0310 	and.w	r3, r3, #16
 80174b6:	2b00      	cmp	r3, #0
 80174b8:	d021      	beq.n	80174fe <phpalI14443p4a_Sw_Rats+0x256>
            {
                /* Check for protocol error */
                if (wRespLength <= bAtsIndex)
 80174ba:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80174be:	b29a      	uxth	r2, r3
 80174c0:	8a7b      	ldrh	r3, [r7, #18]
 80174c2:	429a      	cmp	r2, r3
 80174c4:	d302      	bcc.n	80174cc <phpalI14443p4a_Sw_Rats+0x224>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4A);
 80174c6:	f240 5306 	movw	r3, #1286	@ 0x506
 80174ca:	e1cf      	b.n	801786c <phpalI14443p4a_Sw_Rats+0x5c4>
                }

                /* Check for RFU bit b4 (b4 shall be 0; 1 is RFU) */
                if(0U != (pAts[bAtsIndex] & 0x08U))
 80174cc:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80174d0:	687a      	ldr	r2, [r7, #4]
 80174d2:	4413      	add	r3, r2
 80174d4:	781b      	ldrb	r3, [r3, #0]
 80174d6:	f003 0308 	and.w	r3, r3, #8
 80174da:	2b00      	cmp	r3, #0
 80174dc:	d003      	beq.n	80174e6 <phpalI14443p4a_Sw_Rats+0x23e>
                {
                    /* Only 106 kbps in both direction */
                    pDataParams->bBitRateCaps = 0x00;
 80174de:	68fb      	ldr	r3, [r7, #12]
 80174e0:	2200      	movs	r2, #0
 80174e2:	72da      	strb	r2, [r3, #11]
 80174e4:	e006      	b.n	80174f4 <phpalI14443p4a_Sw_Rats+0x24c>
                }
                else
                {
                    /* Store Bit rate capabilities */
                    pDataParams->bBitRateCaps = pAts[bAtsIndex];
 80174e6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80174ea:	687a      	ldr	r2, [r7, #4]
 80174ec:	4413      	add	r3, r2
 80174ee:	781a      	ldrb	r2, [r3, #0]
 80174f0:	68fb      	ldr	r3, [r7, #12]
 80174f2:	72da      	strb	r2, [r3, #11]
                }

                bAtsIndex++;
 80174f4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80174f8:	3301      	adds	r3, #1
 80174fa:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            }

            /* Parse TB(1) */
            if (0U != (pAts[PHPAL_I14443P4A_SW_ATS_T0] & PHPAL_I14443P4A_SW_ATS_TB1_PRESENT))
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	3301      	adds	r3, #1
 8017502:	781b      	ldrb	r3, [r3, #0]
 8017504:	f003 0320 	and.w	r3, r3, #32
 8017508:	2b00      	cmp	r3, #0
 801750a:	d02d      	beq.n	8017568 <phpalI14443p4a_Sw_Rats+0x2c0>
            {
                /* Check for protocol error */
                if (wRespLength <= bAtsIndex)
 801750c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8017510:	b29a      	uxth	r2, r3
 8017512:	8a7b      	ldrh	r3, [r7, #18]
 8017514:	429a      	cmp	r2, r3
 8017516:	d302      	bcc.n	801751e <phpalI14443p4a_Sw_Rats+0x276>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4A);
 8017518:	f240 5306 	movw	r3, #1286	@ 0x506
 801751c:	e1a6      	b.n	801786c <phpalI14443p4a_Sw_Rats+0x5c4>
                }
                else
                {
                    /* Store Sfgi */
                    bSfgi = pAts[bAtsIndex] & 0x0FU;
 801751e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8017522:	687a      	ldr	r2, [r7, #4]
 8017524:	4413      	add	r3, r2
 8017526:	781b      	ldrb	r3, [r3, #0]
 8017528:	f003 030f 	and.w	r3, r3, #15
 801752c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    if (bSfgi == 0x0FU)
 8017530:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8017534:	2b0f      	cmp	r3, #15
 8017536:	d102      	bne.n	801753e <phpalI14443p4a_Sw_Rats+0x296>
                    {
                        bSfgi = PHPAL_I14443P4A_SW_SFGI_DEFAULT;
 8017538:	2300      	movs	r3, #0
 801753a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    }

                    /* Store Fwi */
                    pDataParams->bFwi = (pAts[bAtsIndex] >> 4U) & 0x0FU;
 801753e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8017542:	687a      	ldr	r2, [r7, #4]
 8017544:	4413      	add	r3, r2
 8017546:	781b      	ldrb	r3, [r3, #0]
 8017548:	091b      	lsrs	r3, r3, #4
 801754a:	b2da      	uxtb	r2, r3
 801754c:	68fb      	ldr	r3, [r7, #12]
 801754e:	731a      	strb	r2, [r3, #12]
                    if (pDataParams->bFwi == 0x0FU)
 8017550:	68fb      	ldr	r3, [r7, #12]
 8017552:	7b1b      	ldrb	r3, [r3, #12]
 8017554:	2b0f      	cmp	r3, #15
 8017556:	d102      	bne.n	801755e <phpalI14443p4a_Sw_Rats+0x2b6>
                    {
                        pDataParams->bFwi = PHPAL_I14443P4A_SW_FWI_DEFAULT;
 8017558:	68fb      	ldr	r3, [r7, #12]
 801755a:	2204      	movs	r2, #4
 801755c:	731a      	strb	r2, [r3, #12]
                    }

                    bAtsIndex++;
 801755e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8017562:	3301      	adds	r3, #1
 8017564:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
                }
            }

            /* Parse TC(1) */
            if (0U != (pAts[PHPAL_I14443P4A_SW_ATS_T0] & PHPAL_I14443P4A_SW_ATS_TC1_PRESENT))
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	3301      	adds	r3, #1
 801756c:	781b      	ldrb	r3, [r3, #0]
 801756e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017572:	2b00      	cmp	r3, #0
 8017574:	d032      	beq.n	80175dc <phpalI14443p4a_Sw_Rats+0x334>
            {
                /* Check for protocol error */
                if (wRespLength <= bAtsIndex)
 8017576:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801757a:	b29a      	uxth	r2, r3
 801757c:	8a7b      	ldrh	r3, [r7, #18]
 801757e:	429a      	cmp	r2, r3
 8017580:	d302      	bcc.n	8017588 <phpalI14443p4a_Sw_Rats+0x2e0>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4A);
 8017582:	f240 5306 	movw	r3, #1286	@ 0x506
 8017586:	e171      	b.n	801786c <phpalI14443p4a_Sw_Rats+0x5c4>
                }
                else
                {
                    /* CID/NAD is not supported by EMVCo 2.5v specification. */
                    if (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO)
 8017588:	68fb      	ldr	r3, [r7, #12]
 801758a:	7c5b      	ldrb	r3, [r3, #17]
 801758c:	2b01      	cmp	r3, #1
 801758e:	d025      	beq.n	80175dc <phpalI14443p4a_Sw_Rats+0x334>
                    {
                        /* NAD is supported only in ISO/IEC 14443-4 specification. */
                        if (pDataParams->bOpeMode == RD_LIB_MODE_ISO)
 8017590:	68fb      	ldr	r3, [r7, #12]
 8017592:	7c5b      	ldrb	r3, [r3, #17]
 8017594:	2b03      	cmp	r3, #3
 8017596:	d10b      	bne.n	80175b0 <phpalI14443p4a_Sw_Rats+0x308>
                        {
                            /* Check NAD Support */
                            if (0U != (pAts[bAtsIndex] & PHPAL_I14443P4A_SW_ATS_TC1_NAD_SUPPORT))
 8017598:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801759c:	687a      	ldr	r2, [r7, #4]
 801759e:	4413      	add	r3, r2
 80175a0:	781b      	ldrb	r3, [r3, #0]
 80175a2:	f003 0301 	and.w	r3, r3, #1
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	d002      	beq.n	80175b0 <phpalI14443p4a_Sw_Rats+0x308>
                            {
                                pDataParams->bNadSupported = PH_ON;
 80175aa:	68fb      	ldr	r3, [r7, #12]
 80175ac:	2201      	movs	r2, #1
 80175ae:	725a      	strb	r2, [r3, #9]
                            }
                        }

                        /* Check CID Support */
                        if ((pAts[bAtsIndex] & PHPAL_I14443P4A_SW_ATS_TC1_CID_SUPPORT) == 0U)
 80175b0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80175b4:	687a      	ldr	r2, [r7, #4]
 80175b6:	4413      	add	r3, r2
 80175b8:	781b      	ldrb	r3, [r3, #0]
 80175ba:	f003 0302 	and.w	r3, r3, #2
 80175be:	2b00      	cmp	r3, #0
 80175c0:	d106      	bne.n	80175d0 <phpalI14443p4a_Sw_Rats+0x328>
                        {
                            pDataParams->bCidSupported = PH_OFF;
 80175c2:	68fb      	ldr	r3, [r7, #12]
 80175c4:	2200      	movs	r2, #0
 80175c6:	721a      	strb	r2, [r3, #8]
                            pDataParams->bCid = 0x00;
 80175c8:	68fb      	ldr	r3, [r7, #12]
 80175ca:	2200      	movs	r2, #0
 80175cc:	729a      	strb	r2, [r3, #10]
 80175ce:	e005      	b.n	80175dc <phpalI14443p4a_Sw_Rats+0x334>
                        }
                        else
                        {
                            pDataParams->bCidSupported = PH_ON;
 80175d0:	68fb      	ldr	r3, [r7, #12]
 80175d2:	2201      	movs	r2, #1
 80175d4:	721a      	strb	r2, [r3, #8]
                            pDataParams->bCid          = bCid;
 80175d6:	68fb      	ldr	r3, [r7, #12]
 80175d8:	7aba      	ldrb	r2, [r7, #10]
 80175da:	729a      	strb	r2, [r3, #10]
                }
            }
        }

        /* Calculate SFGT in Microseconds */
        fDelay = PHPAL_I14443P4A_SW_FWT_MIN_US * ((uint32_t)1U << bSfgi);
 80175dc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80175e0:	2201      	movs	r2, #1
 80175e2:	fa02 f303 	lsl.w	r3, r2, r3
 80175e6:	4618      	mov	r0, r3
 80175e8:	f7e8 ff8c 	bl	8000504 <__aeabi_ui2d>
 80175ec:	a3a7      	add	r3, pc, #668	@ (adr r3, 801788c <phpalI14443p4a_Sw_Rats+0x5e4>)
 80175ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175f2:	f7e9 f801 	bl	80005f8 <__aeabi_dmul>
 80175f6:	4602      	mov	r2, r0
 80175f8:	460b      	mov	r3, r1
 80175fa:	4610      	mov	r0, r2
 80175fc:	4619      	mov	r1, r3
 80175fe:	f7e9 fad3 	bl	8000ba8 <__aeabi_d2f>
 8017602:	4603      	mov	r3, r0
 8017604:	62bb      	str	r3, [r7, #40]	@ 0x28
        if(pDataParams->bOpeMode != RD_LIB_MODE_ISO)
 8017606:	68fb      	ldr	r3, [r7, #12]
 8017608:	7c5b      	ldrb	r3, [r3, #17]
 801760a:	2b03      	cmp	r3, #3
 801760c:	d01f      	beq.n	801764e <phpalI14443p4a_Sw_Rats+0x3a6>
        {
            fDelay += (PHPAL_I14443P4A_DELTA_SFGT_US) * ((uint32_t)1U << bSfgi);
 801760e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017610:	f7e8 ff9a 	bl	8000548 <__aeabi_f2d>
 8017614:	4604      	mov	r4, r0
 8017616:	460d      	mov	r5, r1
 8017618:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801761c:	2201      	movs	r2, #1
 801761e:	fa02 f303 	lsl.w	r3, r2, r3
 8017622:	4618      	mov	r0, r3
 8017624:	f7e8 ff6e 	bl	8000504 <__aeabi_ui2d>
 8017628:	a39a      	add	r3, pc, #616	@ (adr r3, 8017894 <phpalI14443p4a_Sw_Rats+0x5ec>)
 801762a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801762e:	f7e8 ffe3 	bl	80005f8 <__aeabi_dmul>
 8017632:	4602      	mov	r2, r0
 8017634:	460b      	mov	r3, r1
 8017636:	4620      	mov	r0, r4
 8017638:	4629      	mov	r1, r5
 801763a:	f7e8 fe27 	bl	800028c <__adddf3>
 801763e:	4602      	mov	r2, r0
 8017640:	460b      	mov	r3, r1
 8017642:	4610      	mov	r0, r2
 8017644:	4619      	mov	r1, r3
 8017646:	f7e9 faaf 	bl	8000ba8 <__aeabi_d2f>
 801764a:	4603      	mov	r3, r0
 801764c:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
        dwSfgt = (uint32_t)fDelay;
 801764e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8017652:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8017656:	ee17 3a90 	vmov	r3, s15
 801765a:	623b      	str	r3, [r7, #32]
        /* Perform SFGT Wait */
        if (dwSfgt > 0xFFFFU)
 801765c:	6a3b      	ldr	r3, [r7, #32]
 801765e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017662:	d314      	bcc.n	801768e <phpalI14443p4a_Sw_Rats+0x3e6>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 8017664:	68fb      	ldr	r3, [r7, #12]
 8017666:	6858      	ldr	r0, [r3, #4]
 8017668:	6a3b      	ldr	r3, [r7, #32]
 801766a:	4a83      	ldr	r2, [pc, #524]	@ (8017878 <phpalI14443p4a_Sw_Rats+0x5d0>)
 801766c:	fba2 2303 	umull	r2, r3, r2, r3
 8017670:	099b      	lsrs	r3, r3, #6
 8017672:	b29b      	uxth	r3, r3
 8017674:	3301      	adds	r3, #1
 8017676:	b29b      	uxth	r3, r3
 8017678:	461a      	mov	r2, r3
 801767a:	2101      	movs	r1, #1
 801767c:	f7f6 ffd2 	bl	800e624 <phhalHw_Pn5180_Wait>
 8017680:	4603      	mov	r3, r0
 8017682:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8017684:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017686:	2b00      	cmp	r3, #0
 8017688:	d010      	beq.n	80176ac <phpalI14443p4a_Sw_Rats+0x404>
 801768a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801768c:	e0ee      	b.n	801786c <phpalI14443p4a_Sw_Rats+0x5c4>
                PHHAL_HW_TIME_MILLISECONDS,
                (uint16_t)((dwSfgt / 1000U) + 1U)));
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 801768e:	68fb      	ldr	r3, [r7, #12]
 8017690:	685b      	ldr	r3, [r3, #4]
 8017692:	6a3a      	ldr	r2, [r7, #32]
 8017694:	b292      	uxth	r2, r2
 8017696:	2100      	movs	r1, #0
 8017698:	4618      	mov	r0, r3
 801769a:	f7f6 ffc3 	bl	800e624 <phhalHw_Pn5180_Wait>
 801769e:	4603      	mov	r3, r0
 80176a0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80176a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	d001      	beq.n	80176ac <phpalI14443p4a_Sw_Rats+0x404>
 80176a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80176aa:	e0df      	b.n	801786c <phpalI14443p4a_Sw_Rats+0x5c4>
                PHHAL_HW_TIME_MICROSECONDS,
                (uint16_t)dwSfgt));
        }

        /* Calculate FWT timeout */
        fDelay = PHPAL_I14443P4A_SW_FWT_MIN_US;
 80176ac:	4b73      	ldr	r3, [pc, #460]	@ (801787c <phpalI14443p4a_Sw_Rats+0x5d4>)
 80176ae:	62bb      	str	r3, [r7, #40]	@ 0x28
        fDelay = (fDelay * ((uint32_t)1U << pDataParams->bFwi));
 80176b0:	68fb      	ldr	r3, [r7, #12]
 80176b2:	7b1b      	ldrb	r3, [r3, #12]
 80176b4:	461a      	mov	r2, r3
 80176b6:	2301      	movs	r3, #1
 80176b8:	4093      	lsls	r3, r2
 80176ba:	ee07 3a90 	vmov	s15, r3
 80176be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80176c2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80176c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80176ca:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

        if(pDataParams->bOpeMode == RD_LIB_MODE_ISO)
 80176ce:	68fb      	ldr	r3, [r7, #12]
 80176d0:	7c5b      	ldrb	r3, [r3, #17]
 80176d2:	2b03      	cmp	r3, #3
 80176d4:	d108      	bne.n	80176e8 <phpalI14443p4a_Sw_Rats+0x440>
        {
            /* Add extension time */
            fDelay = fDelay + PHPAL_I14443P4A_SW_EXT_TIME_US;
 80176d6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80176da:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8017880 <phpalI14443p4a_Sw_Rats+0x5d8>
 80176de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80176e2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
 80176e6:	e013      	b.n	8017710 <phpalI14443p4a_Sw_Rats+0x468>
        }
        else
        {
            /* As per Digital Spec V1.1 req 13.8.1.3, NFC Forum Device SHALL wait at least FWT + delta FWTT4AT for a Response */
            fDelay = fDelay + PHPAL_I14443P4A_SW_DELTA_FWT_US;
 80176e8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80176ec:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8017884 <phpalI14443p4a_Sw_Rats+0x5dc>
 80176f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80176f4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

            if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) {
 80176f8:	68fb      	ldr	r3, [r7, #12]
 80176fa:	7c5b      	ldrb	r3, [r3, #17]
 80176fc:	2b01      	cmp	r3, #1
 80176fe:	d107      	bne.n	8017710 <phpalI14443p4a_Sw_Rats+0x468>
                /* As per EMVCo, add delta Tpcd time along with delta FWT time */
                fDelay += PHPAL_I14443P4A_SW_DELTA_TPCD_US;
 8017700:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8017704:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8017888 <phpalI14443p4a_Sw_Rats+0x5e0>
 8017708:	ee77 7a87 	vadd.f32	s15, s15, s14
 801770c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            }
        }
        dwFwt = (uint32_t)fDelay;
 8017710:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8017714:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8017718:	ee17 3a90 	vmov	r3, s15
 801771c:	61fb      	str	r3, [r7, #28]

        /* Set FWT timeout */
        if (dwFwt > 0xFFFFU)
 801771e:	69fb      	ldr	r3, [r7, #28]
 8017720:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017724:	d314      	bcc.n	8017750 <phpalI14443p4a_Sw_Rats+0x4a8>
        {
            /* +1 is added to the timeout in millisecond to compensate the
             * fractional microseconds lost in division by 1000 */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8017726:	68fb      	ldr	r3, [r7, #12]
 8017728:	6858      	ldr	r0, [r3, #4]
 801772a:	69fb      	ldr	r3, [r7, #28]
 801772c:	4a52      	ldr	r2, [pc, #328]	@ (8017878 <phpalI14443p4a_Sw_Rats+0x5d0>)
 801772e:	fba2 2303 	umull	r2, r3, r2, r3
 8017732:	099b      	lsrs	r3, r3, #6
 8017734:	b29b      	uxth	r3, r3
 8017736:	3301      	adds	r3, #1
 8017738:	b29b      	uxth	r3, r3
 801773a:	461a      	mov	r2, r3
 801773c:	210e      	movs	r1, #14
 801773e:	f7f7 f82b 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8017742:	4603      	mov	r3, r0
 8017744:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8017746:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017748:	2b00      	cmp	r3, #0
 801774a:	d07f      	beq.n	801784c <phpalI14443p4a_Sw_Rats+0x5a4>
 801774c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801774e:	e08d      	b.n	801786c <phpalI14443p4a_Sw_Rats+0x5c4>
                PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
                (uint16_t)((dwFwt / 1000U) + 1U)));
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8017750:	68fb      	ldr	r3, [r7, #12]
 8017752:	685b      	ldr	r3, [r3, #4]
 8017754:	69fa      	ldr	r2, [r7, #28]
 8017756:	b292      	uxth	r2, r2
 8017758:	210d      	movs	r1, #13
 801775a:	4618      	mov	r0, r3
 801775c:	f7f7 f81c 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8017760:	4603      	mov	r3, r0
 8017762:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8017764:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017766:	2b00      	cmp	r3, #0
 8017768:	d070      	beq.n	801784c <phpalI14443p4a_Sw_Rats+0x5a4>
 801776a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801776c:	e07e      	b.n	801786c <phpalI14443p4a_Sw_Rats+0x5c4>
    }
    /* Perform protocol error handling */
    else
    {
        /* Emvco: case_id TA306_XY and TA307 */
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 801776e:	68fb      	ldr	r3, [r7, #12]
 8017770:	7c5b      	ldrb	r3, [r3, #17]
 8017772:	2b01      	cmp	r3, #1
 8017774:	d101      	bne.n	801777a <phpalI14443p4a_Sw_Rats+0x4d2>
        {
            return status;
 8017776:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8017778:	e078      	b.n	801786c <phpalI14443p4a_Sw_Rats+0x5c4>
        }
        else
        {
            if (I14443P4A_SW_IS_INVALID_BLOCK_STATUS(status) == 0U)
 801777a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801777c:	b2db      	uxtb	r3, r3
 801777e:	2b01      	cmp	r3, #1
 8017780:	d00d      	beq.n	801779e <phpalI14443p4a_Sw_Rats+0x4f6>
 8017782:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8017784:	b2db      	uxtb	r3, r3
 8017786:	2b02      	cmp	r3, #2
 8017788:	d009      	beq.n	801779e <phpalI14443p4a_Sw_Rats+0x4f6>
 801778a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801778c:	b2db      	uxtb	r3, r3
 801778e:	2b05      	cmp	r3, #5
 8017790:	d005      	beq.n	801779e <phpalI14443p4a_Sw_Rats+0x4f6>
 8017792:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8017794:	b2db      	uxtb	r3, r3
 8017796:	2b03      	cmp	r3, #3
 8017798:	d001      	beq.n	801779e <phpalI14443p4a_Sw_Rats+0x4f6>
            {
                return status;
 801779a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801779c:	e066      	b.n	801786c <phpalI14443p4a_Sw_Rats+0x5c4>
            }

            /* Wait FWTmin after RATS */
            if ((status & PH_ERR_MASK) != PH_ERR_IO_TIMEOUT)
 801779e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80177a0:	b2db      	uxtb	r3, r3
 80177a2:	2b01      	cmp	r3, #1
 80177a4:	d00e      	beq.n	80177c4 <phpalI14443p4a_Sw_Rats+0x51c>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 80177a6:	68fb      	ldr	r3, [r7, #12]
 80177a8:	685b      	ldr	r3, [r3, #4]
 80177aa:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 80177ae:	2100      	movs	r1, #0
 80177b0:	4618      	mov	r0, r3
 80177b2:	f7f6 ff37 	bl	800e624 <phhalHw_Pn5180_Wait>
 80177b6:	4603      	mov	r3, r0
 80177b8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80177ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80177bc:	2b00      	cmp	r3, #0
 80177be:	d001      	beq.n	80177c4 <phpalI14443p4a_Sw_Rats+0x51c>
 80177c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80177c2:	e053      	b.n	801786c <phpalI14443p4a_Sw_Rats+0x5c4>
                    PHHAL_HW_TIME_MICROSECONDS,
                    (uint16_t)(PHPAL_I14443P4A_SW_FWT_MIN_US) + PHPAL_I14443P4A_SW_EXT_TIME_US));
            }

            /* Send S(DESELECT) command */
            cmd[0] = PHPAL_I14443P4A_SW_S_BLOCK | PHPAL_I14443P4A_SW_S_BLOCK_RFU_BITS | PHPAL_I14443P4A_SW_PCB_DESELECT;
 80177c4:	23c2      	movs	r3, #194	@ 0xc2
 80177c6:	763b      	strb	r3, [r7, #24]
            wCmdLength = 1;
 80177c8:	2301      	movs	r3, #1
 80177ca:	84fb      	strh	r3, [r7, #38]	@ 0x26

            statusTmp = phhalHw_Exchange(
 80177cc:	68fb      	ldr	r3, [r7, #12]
 80177ce:	6858      	ldr	r0, [r3, #4]
 80177d0:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 80177d2:	f107 0218 	add.w	r2, r7, #24
 80177d6:	f107 0312 	add.w	r3, r7, #18
 80177da:	9301      	str	r3, [sp, #4]
 80177dc:	f107 0314 	add.w	r3, r7, #20
 80177e0:	9300      	str	r3, [sp, #0]
 80177e2:	460b      	mov	r3, r1
 80177e4:	2100      	movs	r1, #0
 80177e6:	f7f6 fc21 	bl	800e02c <phhalHw_Pn5180_Exchange>
 80177ea:	4603      	mov	r3, r0
 80177ec:	84bb      	strh	r3, [r7, #36]	@ 0x24
                wCmdLength,
                &pResp,
                &wRespLength);

            /* S(DESELECT) failure */
            if (((statusTmp & PH_ERR_MASK) != PH_ERR_SUCCESS) || (wRespLength != 1U) || (pResp[0] != cmd[0]))
 80177ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80177f0:	b2db      	uxtb	r3, r3
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	d107      	bne.n	8017806 <phpalI14443p4a_Sw_Rats+0x55e>
 80177f6:	8a7b      	ldrh	r3, [r7, #18]
 80177f8:	2b01      	cmp	r3, #1
 80177fa:	d104      	bne.n	8017806 <phpalI14443p4a_Sw_Rats+0x55e>
 80177fc:	697b      	ldr	r3, [r7, #20]
 80177fe:	781a      	ldrb	r2, [r3, #0]
 8017800:	7e3b      	ldrb	r3, [r7, #24]
 8017802:	429a      	cmp	r2, r3
 8017804:	d022      	beq.n	801784c <phpalI14443p4a_Sw_Rats+0x5a4>
            {
                /* Set HLTA timeout */
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8017806:	68fb      	ldr	r3, [r7, #12]
 8017808:	685b      	ldr	r3, [r3, #4]
 801780a:	f240 424c 	movw	r2, #1100	@ 0x44c
 801780e:	210d      	movs	r1, #13
 8017810:	4618      	mov	r0, r3
 8017812:	f7f6 ffc1 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8017816:	4603      	mov	r3, r0
 8017818:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801781a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801781c:	2b00      	cmp	r3, #0
 801781e:	d001      	beq.n	8017824 <phpalI14443p4a_Sw_Rats+0x57c>
 8017820:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017822:	e023      	b.n	801786c <phpalI14443p4a_Sw_Rats+0x5c4>
                    pDataParams->pHalDataParams,
                    PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
                    PHPAL_I14443P4A_SW_HALT_TIME_US));

                /* Send HLTA */
                cmd[0] = PHPAL_I14443P4A_SW_HALT_CMD;
 8017824:	2350      	movs	r3, #80	@ 0x50
 8017826:	763b      	strb	r3, [r7, #24]
                cmd[1] = 0x00;
 8017828:	2300      	movs	r3, #0
 801782a:	767b      	strb	r3, [r7, #25]

                statusTmp = phhalHw_Exchange(
 801782c:	68fb      	ldr	r3, [r7, #12]
 801782e:	6858      	ldr	r0, [r3, #4]
 8017830:	f107 0218 	add.w	r2, r7, #24
 8017834:	f107 0312 	add.w	r3, r7, #18
 8017838:	9301      	str	r3, [sp, #4]
 801783a:	f107 0314 	add.w	r3, r7, #20
 801783e:	9300      	str	r3, [sp, #0]
 8017840:	2302      	movs	r3, #2
 8017842:	2100      	movs	r1, #0
 8017844:	f7f6 fbf2 	bl	800e02c <phhalHw_Pn5180_Exchange>
 8017848:	4603      	mov	r3, r0
 801784a:	84bb      	strh	r3, [r7, #36]	@ 0x24
                    &wRespLength);
            }
        }
    }

    return PH_ADD_COMPCODE(status, PH_COMP_PAL_ISO14443P4A);
 801784c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801784e:	2b00      	cmp	r3, #0
 8017850:	d00b      	beq.n	801786a <phpalI14443p4a_Sw_Rats+0x5c2>
 8017852:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8017854:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8017858:	2b00      	cmp	r3, #0
 801785a:	d106      	bne.n	801786a <phpalI14443p4a_Sw_Rats+0x5c2>
 801785c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801785e:	b2db      	uxtb	r3, r3
 8017860:	b29b      	uxth	r3, r3
 8017862:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8017866:	b29b      	uxth	r3, r3
 8017868:	e000      	b.n	801786c <phpalI14443p4a_Sw_Rats+0x5c4>
 801786a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
}
 801786c:	4618      	mov	r0, r3
 801786e:	3730      	adds	r7, #48	@ 0x30
 8017870:	46bd      	mov	sp, r7
 8017872:	bdb0      	pop	{r4, r5, r7, pc}
 8017874:	f3af 8000 	nop.w
 8017878:	10624dd3 	.word	0x10624dd3
 801787c:	4397084f 	.word	0x4397084f
 8017880:	42700000 	.word	0x42700000
 8017884:	45638000 	.word	0x45638000
 8017888:	447a0000 	.word	0x447a0000
 801788c:	d12e109d 	.word	0xd12e109d
 8017890:	4072e109 	.word	0x4072e109
 8017894:	b9c518eb 	.word	0xb9c518eb
 8017898:	403c518e 	.word	0x403c518e

0801789c <phpalI14443p4a_Sw_Pps>:
phStatus_t phpalI14443p4a_Sw_Pps(
                                 phpalI14443p4a_Sw_DataParams_t * pDataParams,
                                 uint8_t bDri,
                                 uint8_t bDsi
                                 )
{
 801789c:	b580      	push	{r7, lr}
 801789e:	b08a      	sub	sp, #40	@ 0x28
 80178a0:	af02      	add	r7, sp, #8
 80178a2:	6078      	str	r0, [r7, #4]
 80178a4:	460b      	mov	r3, r1
 80178a6:	70fb      	strb	r3, [r7, #3]
 80178a8:	4613      	mov	r3, r2
 80178aa:	70bb      	strb	r3, [r7, #2]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM cmd[3];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 80178ac:	2300      	movs	r3, #0
 80178ae:	613b      	str	r3, [r7, #16]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 80178b0:	2300      	movs	r3, #0
 80178b2:	81fb      	strh	r3, [r7, #14]
    uint16_t    PH_MEMLOC_REM wTxDataRate;
    uint16_t    PH_MEMLOC_REM wRxDataRate;

    /* Check and convert Dri value */
    switch (bDri)
 80178b4:	78fb      	ldrb	r3, [r7, #3]
 80178b6:	2b03      	cmp	r3, #3
 80178b8:	d816      	bhi.n	80178e8 <phpalI14443p4a_Sw_Pps+0x4c>
 80178ba:	a201      	add	r2, pc, #4	@ (adr r2, 80178c0 <phpalI14443p4a_Sw_Pps+0x24>)
 80178bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80178c0:	080178d1 	.word	0x080178d1
 80178c4:	080178d7 	.word	0x080178d7
 80178c8:	080178dd 	.word	0x080178dd
 80178cc:	080178e3 	.word	0x080178e3
    {
    case PHPAL_I14443P4A_DATARATE_106:
        wTxDataRate = PHHAL_HW_RF_DATARATE_106;
 80178d0:	2300      	movs	r3, #0
 80178d2:	83fb      	strh	r3, [r7, #30]
        break;
 80178d4:	e00b      	b.n	80178ee <phpalI14443p4a_Sw_Pps+0x52>
    case PHPAL_I14443P4A_DATARATE_212:
        wTxDataRate = PHHAL_HW_RF_DATARATE_212;
 80178d6:	2301      	movs	r3, #1
 80178d8:	83fb      	strh	r3, [r7, #30]
        break;
 80178da:	e008      	b.n	80178ee <phpalI14443p4a_Sw_Pps+0x52>
    case PHPAL_I14443P4A_DATARATE_424:
        wTxDataRate = PHHAL_HW_RF_DATARATE_424;
 80178dc:	2302      	movs	r3, #2
 80178de:	83fb      	strh	r3, [r7, #30]
        break;
 80178e0:	e005      	b.n	80178ee <phpalI14443p4a_Sw_Pps+0x52>
    case PHPAL_I14443P4A_DATARATE_848:
        wTxDataRate = PHHAL_HW_RF_DATARATE_848;
 80178e2:	2303      	movs	r3, #3
 80178e4:	83fb      	strh	r3, [r7, #30]
        break;
 80178e6:	e002      	b.n	80178ee <phpalI14443p4a_Sw_Pps+0x52>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 80178e8:	f240 5321 	movw	r3, #1313	@ 0x521
 80178ec:	e080      	b.n	80179f0 <phpalI14443p4a_Sw_Pps+0x154>
    }

    /* Check and convert Dsi value */
    switch (bDsi)
 80178ee:	78bb      	ldrb	r3, [r7, #2]
 80178f0:	2b03      	cmp	r3, #3
 80178f2:	d817      	bhi.n	8017924 <phpalI14443p4a_Sw_Pps+0x88>
 80178f4:	a201      	add	r2, pc, #4	@ (adr r2, 80178fc <phpalI14443p4a_Sw_Pps+0x60>)
 80178f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80178fa:	bf00      	nop
 80178fc:	0801790d 	.word	0x0801790d
 8017900:	08017913 	.word	0x08017913
 8017904:	08017919 	.word	0x08017919
 8017908:	0801791f 	.word	0x0801791f
    {
    case PHPAL_I14443P4A_DATARATE_106:
        wRxDataRate = PHHAL_HW_RF_DATARATE_106;
 801790c:	2300      	movs	r3, #0
 801790e:	83bb      	strh	r3, [r7, #28]
        break;
 8017910:	e00b      	b.n	801792a <phpalI14443p4a_Sw_Pps+0x8e>
    case PHPAL_I14443P4A_DATARATE_212:
        wRxDataRate = PHHAL_HW_RF_DATARATE_212;
 8017912:	2301      	movs	r3, #1
 8017914:	83bb      	strh	r3, [r7, #28]
        break;
 8017916:	e008      	b.n	801792a <phpalI14443p4a_Sw_Pps+0x8e>
    case PHPAL_I14443P4A_DATARATE_424:
        wRxDataRate = PHHAL_HW_RF_DATARATE_424;
 8017918:	2302      	movs	r3, #2
 801791a:	83bb      	strh	r3, [r7, #28]
        break;
 801791c:	e005      	b.n	801792a <phpalI14443p4a_Sw_Pps+0x8e>
    case PHPAL_I14443P4A_DATARATE_848:
        wRxDataRate = PHHAL_HW_RF_DATARATE_848;
 801791e:	2303      	movs	r3, #3
 8017920:	83bb      	strh	r3, [r7, #28]
        break;
 8017922:	e002      	b.n	801792a <phpalI14443p4a_Sw_Pps+0x8e>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8017924:	f240 5321 	movw	r3, #1313	@ 0x521
 8017928:	e062      	b.n	80179f0 <phpalI14443p4a_Sw_Pps+0x154>
    }

    /* Send Pps command */
    cmd[0] = PHPAL_I14443P4A_SW_PPSS | pDataParams->bCid;
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	7a9b      	ldrb	r3, [r3, #10]
 801792e:	f063 032f 	orn	r3, r3, #47	@ 0x2f
 8017932:	b2db      	uxtb	r3, r3
 8017934:	753b      	strb	r3, [r7, #20]
    cmd[1] = PHPAL_I14443P4A_SW_PPS0;
 8017936:	2311      	movs	r3, #17
 8017938:	757b      	strb	r3, [r7, #21]
    cmd[2] = ((bDsi << 2U) & 0x0CU) | (bDri & 0x03U);
 801793a:	78bb      	ldrb	r3, [r7, #2]
 801793c:	009b      	lsls	r3, r3, #2
 801793e:	b2db      	uxtb	r3, r3
 8017940:	f003 030c 	and.w	r3, r3, #12
 8017944:	b2da      	uxtb	r2, r3
 8017946:	78fb      	ldrb	r3, [r7, #3]
 8017948:	f003 0303 	and.w	r3, r3, #3
 801794c:	b2db      	uxtb	r3, r3
 801794e:	4313      	orrs	r3, r2
 8017950:	b2db      	uxtb	r3, r3
 8017952:	75bb      	strb	r3, [r7, #22]
    status = phhalHw_Exchange(
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	6858      	ldr	r0, [r3, #4]
 8017958:	f107 0214 	add.w	r2, r7, #20
 801795c:	f107 030e 	add.w	r3, r7, #14
 8017960:	9301      	str	r3, [sp, #4]
 8017962:	f107 0310 	add.w	r3, r7, #16
 8017966:	9300      	str	r3, [sp, #0]
 8017968:	2303      	movs	r3, #3
 801796a:	2100      	movs	r1, #0
 801796c:	f7f6 fb5e 	bl	800e02c <phhalHw_Pn5180_Exchange>
 8017970:	4603      	mov	r3, r0
 8017972:	837b      	strh	r3, [r7, #26]
        3,
        &pResp,
        &wRespLength);

    /* NAK means protocol error */
    if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS_INCOMPLETE_BYTE)
 8017974:	8b7b      	ldrh	r3, [r7, #26]
 8017976:	b2db      	uxtb	r3, r3
 8017978:	2b73      	cmp	r3, #115	@ 0x73
 801797a:	d102      	bne.n	8017982 <phpalI14443p4a_Sw_Pps+0xe6>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4A);
 801797c:	f240 5306 	movw	r3, #1286	@ 0x506
 8017980:	e036      	b.n	80179f0 <phpalI14443p4a_Sw_Pps+0x154>
    }

    /* Success check */
    PH_CHECK_SUCCESS(status);
 8017982:	8b7b      	ldrh	r3, [r7, #26]
 8017984:	2b00      	cmp	r3, #0
 8017986:	d001      	beq.n	801798c <phpalI14443p4a_Sw_Pps+0xf0>
 8017988:	8b7b      	ldrh	r3, [r7, #26]
 801798a:	e031      	b.n	80179f0 <phpalI14443p4a_Sw_Pps+0x154>

    /* Check length and start byte of PPS */
    if ((wRespLength != 1U) || (pResp[0] != (PHPAL_I14443P4A_SW_PPSS | pDataParams->bCid)))
 801798c:	89fb      	ldrh	r3, [r7, #14]
 801798e:	2b01      	cmp	r3, #1
 8017990:	d108      	bne.n	80179a4 <phpalI14443p4a_Sw_Pps+0x108>
 8017992:	693b      	ldr	r3, [r7, #16]
 8017994:	781a      	ldrb	r2, [r3, #0]
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	7a9b      	ldrb	r3, [r3, #10]
 801799a:	f063 032f 	orn	r3, r3, #47	@ 0x2f
 801799e:	b2db      	uxtb	r3, r3
 80179a0:	429a      	cmp	r2, r3
 80179a2:	d002      	beq.n	80179aa <phpalI14443p4a_Sw_Pps+0x10e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4A);
 80179a4:	f240 5306 	movw	r3, #1286	@ 0x506
 80179a8:	e022      	b.n	80179f0 <phpalI14443p4a_Sw_Pps+0x154>
    }

    /* Store data rates */
    pDataParams->bDri = bDri;
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	78fa      	ldrb	r2, [r7, #3]
 80179ae:	73da      	strb	r2, [r3, #15]
    pDataParams->bDsi = bDsi;
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	78ba      	ldrb	r2, [r7, #2]
 80179b4:	741a      	strb	r2, [r3, #16]

    /* Apply new data rates to Pcd */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXDATARATE_FRAMING, wTxDataRate));
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	685b      	ldr	r3, [r3, #4]
 80179ba:	8bfa      	ldrh	r2, [r7, #30]
 80179bc:	2109      	movs	r1, #9
 80179be:	4618      	mov	r0, r3
 80179c0:	f7f6 feea 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 80179c4:	4603      	mov	r3, r0
 80179c6:	833b      	strh	r3, [r7, #24]
 80179c8:	8b3b      	ldrh	r3, [r7, #24]
 80179ca:	2b00      	cmp	r3, #0
 80179cc:	d001      	beq.n	80179d2 <phpalI14443p4a_Sw_Pps+0x136>
 80179ce:	8b3b      	ldrh	r3, [r7, #24]
 80179d0:	e00e      	b.n	80179f0 <phpalI14443p4a_Sw_Pps+0x154>
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXDATARATE_FRAMING, wRxDataRate));
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	685b      	ldr	r3, [r3, #4]
 80179d6:	8bba      	ldrh	r2, [r7, #28]
 80179d8:	210a      	movs	r1, #10
 80179da:	4618      	mov	r0, r3
 80179dc:	f7f6 fedc 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 80179e0:	4603      	mov	r3, r0
 80179e2:	833b      	strh	r3, [r7, #24]
 80179e4:	8b3b      	ldrh	r3, [r7, #24]
 80179e6:	2b00      	cmp	r3, #0
 80179e8:	d001      	beq.n	80179ee <phpalI14443p4a_Sw_Pps+0x152>
 80179ea:	8b3b      	ldrh	r3, [r7, #24]
 80179ec:	e000      	b.n	80179f0 <phpalI14443p4a_Sw_Pps+0x154>

    return PH_ERR_SUCCESS;
 80179ee:	2300      	movs	r3, #0
}
 80179f0:	4618      	mov	r0, r3
 80179f2:	3720      	adds	r7, #32
 80179f4:	46bd      	mov	sp, r7
 80179f6:	bd80      	pop	{r7, pc}

080179f8 <phpalI14443p4a_Sw_ActivateCard>:
    uint8_t bCid,
    uint8_t bDri,
    uint8_t bDsi,
    uint8_t * pAts
    )
{
 80179f8:	b580      	push	{r7, lr}
 80179fa:	b084      	sub	sp, #16
 80179fc:	af00      	add	r7, sp, #0
 80179fe:	6078      	str	r0, [r7, #4]
 8017a00:	4608      	mov	r0, r1
 8017a02:	4611      	mov	r1, r2
 8017a04:	461a      	mov	r2, r3
 8017a06:	4603      	mov	r3, r0
 8017a08:	70fb      	strb	r3, [r7, #3]
 8017a0a:	460b      	mov	r3, r1
 8017a0c:	70bb      	strb	r3, [r7, #2]
 8017a0e:	4613      	mov	r3, r2
 8017a10:	707b      	strb	r3, [r7, #1]
    phStatus_t PH_MEMLOC_REM statusTmp;
    uint8_t PH_MEMLOC_REM bAts_Dsi;
    uint8_t PH_MEMLOC_REM bAts_Dri;

    /* Check Dri value */
    switch (bDri)
 8017a12:	787b      	ldrb	r3, [r7, #1]
 8017a14:	2b03      	cmp	r3, #3
 8017a16:	d902      	bls.n	8017a1e <phpalI14443p4a_Sw_ActivateCard+0x26>
    case PHPAL_I14443P4A_DATARATE_424:
        /* fall through */
    case PHPAL_I14443P4A_DATARATE_848:
        break;
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8017a18:	f240 5321 	movw	r3, #1313	@ 0x521
 8017a1c:	e0a0      	b.n	8017b60 <phpalI14443p4a_Sw_ActivateCard+0x168>
        break;
 8017a1e:	bf00      	nop
    }

    /* Check Dri value */
    switch (bDsi)
 8017a20:	7e3b      	ldrb	r3, [r7, #24]
 8017a22:	2b03      	cmp	r3, #3
 8017a24:	d902      	bls.n	8017a2c <phpalI14443p4a_Sw_ActivateCard+0x34>
    case PHPAL_I14443P4A_DATARATE_424:
        /* fall through */
    case PHPAL_I14443P4A_DATARATE_848:
        break;
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8017a26:	f240 5321 	movw	r3, #1313	@ 0x521
 8017a2a:	e099      	b.n	8017b60 <phpalI14443p4a_Sw_ActivateCard+0x168>
        break;
 8017a2c:	bf00      	nop
    }

    /* Perform RATS */
    statusTmp = phpalI14443p4a_Sw_Rats(pDataParams, bFsdi, bCid, pAts);
 8017a2e:	78ba      	ldrb	r2, [r7, #2]
 8017a30:	78f9      	ldrb	r1, [r7, #3]
 8017a32:	69fb      	ldr	r3, [r7, #28]
 8017a34:	6878      	ldr	r0, [r7, #4]
 8017a36:	f7ff fc37 	bl	80172a8 <phpalI14443p4a_Sw_Rats>
 8017a3a:	4603      	mov	r3, r0
 8017a3c:	81fb      	strh	r3, [r7, #14]
    if ((statusTmp & PH_ERR_MASK) == PH_ERR_SUCCESS)
 8017a3e:	89fb      	ldrh	r3, [r7, #14]
 8017a40:	b2db      	uxtb	r3, r3
 8017a42:	2b00      	cmp	r3, #0
 8017a44:	d17c      	bne.n	8017b40 <phpalI14443p4a_Sw_ActivateCard+0x148>
    {
        /* Check user parameter change request versus Card bit rate capabilities and send PPS if required. */
        if (((bDri != PHPAL_I14443P4A_DATARATE_106) || (bDsi != PHPAL_I14443P4A_DATARATE_106)) &&
 8017a46:	787b      	ldrb	r3, [r7, #1]
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	d102      	bne.n	8017a52 <phpalI14443p4a_Sw_ActivateCard+0x5a>
 8017a4c:	7e3b      	ldrb	r3, [r7, #24]
 8017a4e:	2b00      	cmp	r3, #0
 8017a50:	d076      	beq.n	8017b40 <phpalI14443p4a_Sw_ActivateCard+0x148>
            (pDataParams->bBitRateCaps != 0x00))
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	7adb      	ldrb	r3, [r3, #11]
        if (((bDri != PHPAL_I14443P4A_DATARATE_106) || (bDsi != PHPAL_I14443P4A_DATARATE_106)) &&
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	d072      	beq.n	8017b40 <phpalI14443p4a_Sw_ActivateCard+0x148>
        {
            if (pDataParams->bBitRateCaps & 0x40U)
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	7adb      	ldrb	r3, [r3, #11]
 8017a5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017a62:	2b00      	cmp	r3, #0
 8017a64:	d002      	beq.n	8017a6c <phpalI14443p4a_Sw_ActivateCard+0x74>
            {
                bAts_Dsi = PHPAL_I14443P4A_DATARATE_848;
 8017a66:	2303      	movs	r3, #3
 8017a68:	737b      	strb	r3, [r7, #13]
 8017a6a:	e013      	b.n	8017a94 <phpalI14443p4a_Sw_ActivateCard+0x9c>
            }
            else if (pDataParams->bBitRateCaps & 0x20U)
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	7adb      	ldrb	r3, [r3, #11]
 8017a70:	f003 0320 	and.w	r3, r3, #32
 8017a74:	2b00      	cmp	r3, #0
 8017a76:	d002      	beq.n	8017a7e <phpalI14443p4a_Sw_ActivateCard+0x86>
            {
                bAts_Dsi = PHPAL_I14443P4A_DATARATE_424;
 8017a78:	2302      	movs	r3, #2
 8017a7a:	737b      	strb	r3, [r7, #13]
 8017a7c:	e00a      	b.n	8017a94 <phpalI14443p4a_Sw_ActivateCard+0x9c>
            }
            else if (pDataParams->bBitRateCaps & 0x10U)
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	7adb      	ldrb	r3, [r3, #11]
 8017a82:	f003 0310 	and.w	r3, r3, #16
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	d002      	beq.n	8017a90 <phpalI14443p4a_Sw_ActivateCard+0x98>
            {
                bAts_Dsi = PHPAL_I14443P4A_DATARATE_212;
 8017a8a:	2301      	movs	r3, #1
 8017a8c:	737b      	strb	r3, [r7, #13]
 8017a8e:	e001      	b.n	8017a94 <phpalI14443p4a_Sw_ActivateCard+0x9c>
            }
            else
            {
                bAts_Dsi = PHPAL_I14443P4A_DATARATE_106;
 8017a90:	2300      	movs	r3, #0
 8017a92:	737b      	strb	r3, [r7, #13]
            }

            if (pDataParams->bBitRateCaps & 0x04U)
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	7adb      	ldrb	r3, [r3, #11]
 8017a98:	f003 0304 	and.w	r3, r3, #4
 8017a9c:	2b00      	cmp	r3, #0
 8017a9e:	d002      	beq.n	8017aa6 <phpalI14443p4a_Sw_ActivateCard+0xae>
            {
                bAts_Dri = PHPAL_I14443P4A_DATARATE_848;
 8017aa0:	2303      	movs	r3, #3
 8017aa2:	733b      	strb	r3, [r7, #12]
 8017aa4:	e013      	b.n	8017ace <phpalI14443p4a_Sw_ActivateCard+0xd6>
            }
            else if (pDataParams->bBitRateCaps & 0x02U)
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	7adb      	ldrb	r3, [r3, #11]
 8017aaa:	f003 0302 	and.w	r3, r3, #2
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	d002      	beq.n	8017ab8 <phpalI14443p4a_Sw_ActivateCard+0xc0>
            {
                bAts_Dri = PHPAL_I14443P4A_DATARATE_424;
 8017ab2:	2302      	movs	r3, #2
 8017ab4:	733b      	strb	r3, [r7, #12]
 8017ab6:	e00a      	b.n	8017ace <phpalI14443p4a_Sw_ActivateCard+0xd6>
            }
            else if (pDataParams->bBitRateCaps & 0x01U)
 8017ab8:	687b      	ldr	r3, [r7, #4]
 8017aba:	7adb      	ldrb	r3, [r3, #11]
 8017abc:	f003 0301 	and.w	r3, r3, #1
 8017ac0:	2b00      	cmp	r3, #0
 8017ac2:	d002      	beq.n	8017aca <phpalI14443p4a_Sw_ActivateCard+0xd2>
            {
                bAts_Dri = PHPAL_I14443P4A_DATARATE_212;
 8017ac4:	2301      	movs	r3, #1
 8017ac6:	733b      	strb	r3, [r7, #12]
 8017ac8:	e001      	b.n	8017ace <phpalI14443p4a_Sw_ActivateCard+0xd6>
            }
            else
            {
                bAts_Dri = PHPAL_I14443P4A_DATARATE_106;
 8017aca:	2300      	movs	r3, #0
 8017acc:	733b      	strb	r3, [r7, #12]
            }

            if ((bDsi != bAts_Dsi) && (bDsi > bAts_Dsi))
 8017ace:	7e3a      	ldrb	r2, [r7, #24]
 8017ad0:	7b7b      	ldrb	r3, [r7, #13]
 8017ad2:	429a      	cmp	r2, r3
 8017ad4:	d005      	beq.n	8017ae2 <phpalI14443p4a_Sw_ActivateCard+0xea>
 8017ad6:	7e3a      	ldrb	r2, [r7, #24]
 8017ad8:	7b7b      	ldrb	r3, [r7, #13]
 8017ada:	429a      	cmp	r2, r3
 8017adc:	d901      	bls.n	8017ae2 <phpalI14443p4a_Sw_ActivateCard+0xea>
            {
                bDsi = bAts_Dsi;
 8017ade:	7b7b      	ldrb	r3, [r7, #13]
 8017ae0:	763b      	strb	r3, [r7, #24]
            }

            if ((bDri != bAts_Dri) && (bDri > bAts_Dri))
 8017ae2:	787a      	ldrb	r2, [r7, #1]
 8017ae4:	7b3b      	ldrb	r3, [r7, #12]
 8017ae6:	429a      	cmp	r2, r3
 8017ae8:	d005      	beq.n	8017af6 <phpalI14443p4a_Sw_ActivateCard+0xfe>
 8017aea:	787a      	ldrb	r2, [r7, #1]
 8017aec:	7b3b      	ldrb	r3, [r7, #12]
 8017aee:	429a      	cmp	r2, r3
 8017af0:	d901      	bls.n	8017af6 <phpalI14443p4a_Sw_ActivateCard+0xfe>
            {
                bDri = bAts_Dri;
 8017af2:	7b3b      	ldrb	r3, [r7, #12]
 8017af4:	707b      	strb	r3, [r7, #1]
            }

            if (pDataParams->bBitRateCaps & 0x80U)
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	7adb      	ldrb	r3, [r3, #11]
 8017afa:	b25b      	sxtb	r3, r3
 8017afc:	2b00      	cmp	r3, #0
 8017afe:	da0c      	bge.n	8017b1a <phpalI14443p4a_Sw_ActivateCard+0x122>
            {
                /* Only same bit rate allowed in both directions. */
                if (bDsi != bDri)
 8017b00:	7e3a      	ldrb	r2, [r7, #24]
 8017b02:	787b      	ldrb	r3, [r7, #1]
 8017b04:	429a      	cmp	r2, r3
 8017b06:	d008      	beq.n	8017b1a <phpalI14443p4a_Sw_ActivateCard+0x122>
                {
                    (bDsi < bDri) ? (bDri = bDsi) : (bDsi = bDri);
 8017b08:	7e3a      	ldrb	r2, [r7, #24]
 8017b0a:	787b      	ldrb	r3, [r7, #1]
 8017b0c:	429a      	cmp	r2, r3
 8017b0e:	d202      	bcs.n	8017b16 <phpalI14443p4a_Sw_ActivateCard+0x11e>
 8017b10:	7e3b      	ldrb	r3, [r7, #24]
 8017b12:	707b      	strb	r3, [r7, #1]
 8017b14:	e001      	b.n	8017b1a <phpalI14443p4a_Sw_ActivateCard+0x122>
 8017b16:	787b      	ldrb	r3, [r7, #1]
 8017b18:	763b      	strb	r3, [r7, #24]
                }
            }

            if ((bDri != PHPAL_I14443P4A_DATARATE_106) || (bDsi != PHPAL_I14443P4A_DATARATE_106))
 8017b1a:	787b      	ldrb	r3, [r7, #1]
 8017b1c:	2b00      	cmp	r3, #0
 8017b1e:	d102      	bne.n	8017b26 <phpalI14443p4a_Sw_ActivateCard+0x12e>
 8017b20:	7e3b      	ldrb	r3, [r7, #24]
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	d00c      	beq.n	8017b40 <phpalI14443p4a_Sw_ActivateCard+0x148>
            {
                /* Perform PPS */
                PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p4a_Sw_Pps(pDataParams, bDri, bDsi));
 8017b26:	7e3a      	ldrb	r2, [r7, #24]
 8017b28:	787b      	ldrb	r3, [r7, #1]
 8017b2a:	4619      	mov	r1, r3
 8017b2c:	6878      	ldr	r0, [r7, #4]
 8017b2e:	f7ff feb5 	bl	801789c <phpalI14443p4a_Sw_Pps>
 8017b32:	4603      	mov	r3, r0
 8017b34:	81fb      	strh	r3, [r7, #14]
 8017b36:	89fb      	ldrh	r3, [r7, #14]
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	d001      	beq.n	8017b40 <phpalI14443p4a_Sw_ActivateCard+0x148>
 8017b3c:	89fb      	ldrh	r3, [r7, #14]
 8017b3e:	e00f      	b.n	8017b60 <phpalI14443p4a_Sw_ActivateCard+0x168>
            }
        }
    }

    return PH_ADD_COMPCODE(statusTmp, PH_COMP_PAL_ISO14443P4A);
 8017b40:	89fb      	ldrh	r3, [r7, #14]
 8017b42:	2b00      	cmp	r3, #0
 8017b44:	d00b      	beq.n	8017b5e <phpalI14443p4a_Sw_ActivateCard+0x166>
 8017b46:	89fb      	ldrh	r3, [r7, #14]
 8017b48:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8017b4c:	2b00      	cmp	r3, #0
 8017b4e:	d106      	bne.n	8017b5e <phpalI14443p4a_Sw_ActivateCard+0x166>
 8017b50:	89fb      	ldrh	r3, [r7, #14]
 8017b52:	b2db      	uxtb	r3, r3
 8017b54:	b29b      	uxth	r3, r3
 8017b56:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8017b5a:	b29b      	uxth	r3, r3
 8017b5c:	e000      	b.n	8017b60 <phpalI14443p4a_Sw_ActivateCard+0x168>
 8017b5e:	89fb      	ldrh	r3, [r7, #14]
}
 8017b60:	4618      	mov	r0, r3
 8017b62:	3710      	adds	r7, #16
 8017b64:	46bd      	mov	sp, r7
 8017b66:	bd80      	pop	{r7, pc}

08017b68 <phpalI14443p4a_Sw_GetProtocolParams>:
    uint8_t * pNadSupported,
    uint8_t * pFwi,
    uint8_t * pFsdi,
    uint8_t * pFsci
    )
{
 8017b68:	b480      	push	{r7}
 8017b6a:	b085      	sub	sp, #20
 8017b6c:	af00      	add	r7, sp, #0
 8017b6e:	60f8      	str	r0, [r7, #12]
 8017b70:	60b9      	str	r1, [r7, #8]
 8017b72:	607a      	str	r2, [r7, #4]
 8017b74:	603b      	str	r3, [r7, #0]
    *pCidEnabled    = pDataParams->bCidSupported;
 8017b76:	68fb      	ldr	r3, [r7, #12]
 8017b78:	7a1a      	ldrb	r2, [r3, #8]
 8017b7a:	68bb      	ldr	r3, [r7, #8]
 8017b7c:	701a      	strb	r2, [r3, #0]
    *pCid           = pDataParams->bCid;
 8017b7e:	68fb      	ldr	r3, [r7, #12]
 8017b80:	7a9a      	ldrb	r2, [r3, #10]
 8017b82:	687b      	ldr	r3, [r7, #4]
 8017b84:	701a      	strb	r2, [r3, #0]
    *pNadSupported  = pDataParams->bNadSupported;
 8017b86:	68fb      	ldr	r3, [r7, #12]
 8017b88:	7a5a      	ldrb	r2, [r3, #9]
 8017b8a:	683b      	ldr	r3, [r7, #0]
 8017b8c:	701a      	strb	r2, [r3, #0]
    *pFwi           = pDataParams->bFwi;
 8017b8e:	68fb      	ldr	r3, [r7, #12]
 8017b90:	7b1a      	ldrb	r2, [r3, #12]
 8017b92:	69bb      	ldr	r3, [r7, #24]
 8017b94:	701a      	strb	r2, [r3, #0]
    *pFsdi          = pDataParams->bFsdi;
 8017b96:	68fb      	ldr	r3, [r7, #12]
 8017b98:	7b9a      	ldrb	r2, [r3, #14]
 8017b9a:	69fb      	ldr	r3, [r7, #28]
 8017b9c:	701a      	strb	r2, [r3, #0]
    *pFsci          = pDataParams->bFsci;
 8017b9e:	68fb      	ldr	r3, [r7, #12]
 8017ba0:	7b5a      	ldrb	r2, [r3, #13]
 8017ba2:	6a3b      	ldr	r3, [r7, #32]
 8017ba4:	701a      	strb	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8017ba6:	2300      	movs	r3, #0
}
 8017ba8:	4618      	mov	r0, r3
 8017baa:	3714      	adds	r7, #20
 8017bac:	46bd      	mov	sp, r7
 8017bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bb2:	4770      	bx	lr

08017bb4 <phpalI14443p4mC_Sw_Init>:
                                   phpalI14443p4mC_Sw_DataParams_t * pDataParams,
                                   uint16_t wSizeOfDataParams,
                                   void * pHalDataParams,
                                   pWtxTimerCallback pWtxCallback
                                   )
{
 8017bb4:	b580      	push	{r7, lr}
 8017bb6:	b086      	sub	sp, #24
 8017bb8:	af00      	add	r7, sp, #0
 8017bba:	60f8      	str	r0, [r7, #12]
 8017bbc:	607a      	str	r2, [r7, #4]
 8017bbe:	603b      	str	r3, [r7, #0]
 8017bc0:	460b      	mov	r3, r1
 8017bc2:	817b      	strh	r3, [r7, #10]
    phStatus_t wStatus = PH_ERR_SUCCESS;
 8017bc4:	2300      	movs	r3, #0
 8017bc6:	82fb      	strh	r3, [r7, #22]

    if (sizeof(phpalI14443p4mC_Sw_DataParams_t) != wSizeOfDataParams)
 8017bc8:	897b      	ldrh	r3, [r7, #10]
 8017bca:	2b34      	cmp	r3, #52	@ 0x34
 8017bcc:	d002      	beq.n	8017bd4 <phpalI14443p4mC_Sw_Init+0x20>
    {
        return (PH_ERR_INVALID_DATA_PARAMS | PH_COMP_PAL_I14443P4MC);
 8017bce:	f44f 6372 	mov.w	r3, #3872	@ 0xf20
 8017bd2:	e039      	b.n	8017c48 <phpalI14443p4mC_Sw_Init+0x94>
    }
    PH_ASSERT_NULL (pDataParams);
 8017bd4:	68fb      	ldr	r3, [r7, #12]
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d101      	bne.n	8017bde <phpalI14443p4mC_Sw_Init+0x2a>
 8017bda:	2321      	movs	r3, #33	@ 0x21
 8017bdc:	e034      	b.n	8017c48 <phpalI14443p4mC_Sw_Init+0x94>
    PH_ASSERT_NULL (pHalDataParams);
 8017bde:	687b      	ldr	r3, [r7, #4]
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	d101      	bne.n	8017be8 <phpalI14443p4mC_Sw_Init+0x34>
 8017be4:	2321      	movs	r3, #33	@ 0x21
 8017be6:	e02f      	b.n	8017c48 <phpalI14443p4mC_Sw_Init+0x94>

    /* Initialize data parameters */
    pDataParams->wId                = PH_COMP_PAL_I14443P4MC | PHPAL_I14443P4MC_SW_ID;
 8017be8:	68fb      	ldr	r3, [r7, #12]
 8017bea:	f640 7201 	movw	r2, #3841	@ 0xf01
 8017bee:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams     = pHalDataParams;
 8017bf0:	68fb      	ldr	r3, [r7, #12]
 8017bf2:	687a      	ldr	r2, [r7, #4]
 8017bf4:	605a      	str	r2, [r3, #4]
    pDataParams->pWtxTimerCallback  = pWtxCallback;
 8017bf6:	68fb      	ldr	r3, [r7, #12]
 8017bf8:	683a      	ldr	r2, [r7, #0]
 8017bfa:	631a      	str	r2, [r3, #48]	@ 0x30

    pDataParams->bWtx               = PHPAL_I14443P4MC_SW_MIN_WTX_VALUE;
 8017bfc:	68fb      	ldr	r3, [r7, #12]
 8017bfe:	2201      	movs	r2, #1
 8017c00:	765a      	strb	r2, [r3, #25]
    pDataParams->bDisableWtx        = PH_OFF;
 8017c02:	68fb      	ldr	r3, [r7, #12]
 8017c04:	2200      	movs	r2, #0
 8017c06:	761a      	strb	r2, [r3, #24]
    /* Default operating mode is NFC */
    pDataParams->bOpMode            = RD_LIB_MODE_NFC;
 8017c08:	68fb      	ldr	r3, [r7, #12]
 8017c0a:	2202      	movs	r2, #2
 8017c0c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
    /* By default delta time to be subtracted from WTX timer time is set to 0 */
    pDataParams->wWtDelta           = 0;
 8017c10:	68fb      	ldr	r3, [r7, #12]
 8017c12:	2200      	movs	r2, #0
 8017c14:	859a      	strh	r2, [r3, #44]	@ 0x2c
    /* Default percentage of actual time to be used in WTX timer is set to 75% */
    pDataParams->bWtPercentage      = 75;
 8017c16:	68fb      	ldr	r3, [r7, #12]
 8017c18:	224b      	movs	r2, #75	@ 0x4b
 8017c1a:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

    /* Reset protocol to defaults */
    (void)phpalI14443p4mC_Sw_ResetProtocol(pDataParams);
 8017c1e:	68f8      	ldr	r0, [r7, #12]
 8017c20:	f000 f818 	bl	8017c54 <phpalI14443p4mC_Sw_ResetProtocol>

    /* check whether event is already created. */
    pDataParams->mcEventObj.intialValue = 0;
 8017c24:	68fb      	ldr	r3, [r7, #12]
 8017c26:	2200      	movs	r2, #0
 8017c28:	611a      	str	r2, [r3, #16]
    pDataParams->mcEventObj.pEvtName = (uint8_t *)bmcEventName;
 8017c2a:	68fb      	ldr	r3, [r7, #12]
 8017c2c:	4a08      	ldr	r2, [pc, #32]	@ (8017c50 <phpalI14443p4mC_Sw_Init+0x9c>)
 8017c2e:	60da      	str	r2, [r3, #12]
    wStatus = phOsal_EventCreate(&pDataParams->mcEventObj.EventHandle, &pDataParams->mcEventObj);
 8017c30:	68fb      	ldr	r3, [r7, #12]
 8017c32:	f103 0208 	add.w	r2, r3, #8
 8017c36:	68fb      	ldr	r3, [r7, #12]
 8017c38:	3308      	adds	r3, #8
 8017c3a:	4619      	mov	r1, r3
 8017c3c:	4610      	mov	r0, r2
 8017c3e:	f002 fce7 	bl	801a610 <phOsal_EventCreate>
 8017c42:	4603      	mov	r3, r0
 8017c44:	82fb      	strh	r3, [r7, #22]

    return wStatus;
 8017c46:	8afb      	ldrh	r3, [r7, #22]
}
 8017c48:	4618      	mov	r0, r3
 8017c4a:	3718      	adds	r7, #24
 8017c4c:	46bd      	mov	sp, r7
 8017c4e:	bd80      	pop	{r7, pc}
 8017c50:	08023b40 	.word	0x08023b40

08017c54 <phpalI14443p4mC_Sw_ResetProtocol>:
}

phStatus_t phpalI14443p4mC_Sw_ResetProtocol(
                                            phpalI14443p4mC_Sw_DataParams_t * pDataParams
                                            )
{
 8017c54:	b580      	push	{r7, lr}
 8017c56:	b084      	sub	sp, #16
 8017c58:	af00      	add	r7, sp, #0
 8017c5a:	6078      	str	r0, [r7, #4]
    phStatus_t wStatus = PH_ERR_SUCCESS;
 8017c5c:	2300      	movs	r3, #0
 8017c5e:	81fb      	strh	r3, [r7, #14]
    pDataParams->bStateNow        = PHPAL_I14443P4MC_STATE_NONE;
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	2200      	movs	r2, #0
 8017c64:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    /* Default block number is 1. ISO14443-4 7.5.3.2. Rule C */
    pDataParams->bBlockNr         = 1;
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	2201      	movs	r2, #1
 8017c6c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    pDataParams->bFsdi            = 0;
 8017c70:	687b      	ldr	r3, [r7, #4]
 8017c72:	2200      	movs	r2, #0
 8017c74:	769a      	strb	r2, [r3, #26]
    /* Default FSCI value is 2 */
    pDataParams->bFsci            = PHPALI14443P4MC_FSCI_DEFAULT;
 8017c76:	687b      	ldr	r3, [r7, #4]
 8017c78:	2202      	movs	r2, #2
 8017c7a:	76da      	strb	r2, [r3, #27]
    pDataParams->bDr              = PHPAL_I14443P4MC_106;
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	2200      	movs	r2, #0
 8017c80:	771a      	strb	r2, [r3, #28]
    pDataParams->bDs              = PHPAL_I14443P4MC_106;
 8017c82:	687b      	ldr	r3, [r7, #4]
 8017c84:	2200      	movs	r2, #0
 8017c86:	775a      	strb	r2, [r3, #29]
    pDataParams->bSameDSupport    = 0;
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	2200      	movs	r2, #0
 8017c8c:	779a      	strb	r2, [r3, #30]
    pDataParams->bFwi             = PHPALI14443P4MC_FWI_DEFAULT;
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	2204      	movs	r2, #4
 8017c92:	77da      	strb	r2, [r3, #31]
    pDataParams->bSfgi            = PHPALI14443P4MC_SFGI_DEFAULT;
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	2200      	movs	r2, #0
 8017c98:	f883 2020 	strb.w	r2, [r3, #32]
    pDataParams->bCid             = 0;
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	2200      	movs	r2, #0
 8017ca0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    pDataParams->bNad             = 0;
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	2200      	movs	r2, #0
 8017ca8:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    pDataParams->bChainingRx      = 0;
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	2200      	movs	r2, #0
 8017cb0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    pDataParams->bChainingTx      = 0;
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	2200      	movs	r2, #0
 8017cb8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    /* Default CID supported ISO14443-4 5.2.6 */
    pDataParams->bCidEnable       = PH_ON;
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	2201      	movs	r2, #1
 8017cc0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    /* Default NAD not supported ISO14443-4 5.2.6 */
    pDataParams->bNadEnable       = PH_OFF;
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	2200      	movs	r2, #0
 8017cc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    pDataParams->bCidPresence     = FALSE;
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	2200      	movs	r2, #0
 8017cd0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    pDataParams->bNadPresence     = FALSE;
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	2200      	movs	r2, #0
 8017cd8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Reset the position in case the PICC stopped abruptly due to RF OFF during chaining */
    PH_CHECK_SUCCESS_FCT(wStatus, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXBUFFER_STARTPOS, 0));
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	685b      	ldr	r3, [r3, #4]
 8017ce0:	2200      	movs	r2, #0
 8017ce2:	2130      	movs	r1, #48	@ 0x30
 8017ce4:	4618      	mov	r0, r3
 8017ce6:	f7f6 fd57 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8017cea:	4603      	mov	r3, r0
 8017cec:	81fb      	strh	r3, [r7, #14]
 8017cee:	89fb      	ldrh	r3, [r7, #14]
 8017cf0:	2b00      	cmp	r3, #0
 8017cf2:	d001      	beq.n	8017cf8 <phpalI14443p4mC_Sw_ResetProtocol+0xa4>
 8017cf4:	89fb      	ldrh	r3, [r7, #14]
 8017cf6:	e000      	b.n	8017cfa <phpalI14443p4mC_Sw_ResetProtocol+0xa6>

    return wStatus;
 8017cf8:	89fb      	ldrh	r3, [r7, #14]
}
 8017cfa:	4618      	mov	r0, r3
 8017cfc:	3710      	adds	r7, #16
 8017cfe:	46bd      	mov	sp, r7
 8017d00:	bd80      	pop	{r7, pc}

08017d02 <phpalI18000p3m3_Sw_Init>:
phStatus_t phpalI18000p3m3_Sw_Init(
                                   phpalI18000p3m3_Sw_DataParams_t * pDataParams,
                                   uint16_t wSizeOfDataParams,
                                   void * pHalDataParams
                                   )
{
 8017d02:	b480      	push	{r7}
 8017d04:	b085      	sub	sp, #20
 8017d06:	af00      	add	r7, sp, #0
 8017d08:	60f8      	str	r0, [r7, #12]
 8017d0a:	460b      	mov	r3, r1
 8017d0c:	607a      	str	r2, [r7, #4]
 8017d0e:	817b      	strh	r3, [r7, #10]
    if (sizeof(phpalI18000p3m3_Sw_DataParams_t) != wSizeOfDataParams)
 8017d10:	897b      	ldrh	r3, [r7, #10]
 8017d12:	2b0c      	cmp	r3, #12
 8017d14:	d002      	beq.n	8017d1c <phpalI18000p3m3_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_I18000P3M3);
 8017d16:	f44f 6332 	mov.w	r3, #2848	@ 0xb20
 8017d1a:	e017      	b.n	8017d4c <phpalI18000p3m3_Sw_Init+0x4a>
    }
    PH_ASSERT_NULL (pDataParams);
 8017d1c:	68fb      	ldr	r3, [r7, #12]
 8017d1e:	2b00      	cmp	r3, #0
 8017d20:	d101      	bne.n	8017d26 <phpalI18000p3m3_Sw_Init+0x24>
 8017d22:	2321      	movs	r3, #33	@ 0x21
 8017d24:	e012      	b.n	8017d4c <phpalI18000p3m3_Sw_Init+0x4a>
    PH_ASSERT_NULL (pHalDataParams);
 8017d26:	687b      	ldr	r3, [r7, #4]
 8017d28:	2b00      	cmp	r3, #0
 8017d2a:	d101      	bne.n	8017d30 <phpalI18000p3m3_Sw_Init+0x2e>
 8017d2c:	2321      	movs	r3, #33	@ 0x21
 8017d2e:	e00d      	b.n	8017d4c <phpalI18000p3m3_Sw_Init+0x4a>

    pDataParams->wId                = PH_COMP_PAL_I18000P3M3 | PHPAL_I18000P3M3_SW_ID;
 8017d30:	68fb      	ldr	r3, [r7, #12]
 8017d32:	f640 3201 	movw	r2, #2817	@ 0xb01
 8017d36:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams     = pHalDataParams;
 8017d38:	68fb      	ldr	r3, [r7, #12]
 8017d3a:	687a      	ldr	r2, [r7, #4]
 8017d3c:	605a      	str	r2, [r3, #4]
    pDataParams->bSession           = PHPAL_I18000P3M3_SESSION_S0;
 8017d3e:	68fb      	ldr	r3, [r7, #12]
 8017d40:	2200      	movs	r2, #0
 8017d42:	721a      	strb	r2, [r3, #8]
    pDataParams->bStoredCRCValid    = PH_OFF;
 8017d44:	68fb      	ldr	r3, [r7, #12]
 8017d46:	2200      	movs	r2, #0
 8017d48:	72da      	strb	r2, [r3, #11]

    return PH_ERR_SUCCESS;
 8017d4a:	2300      	movs	r3, #0
}
 8017d4c:	4618      	mov	r0, r3
 8017d4e:	3714      	adds	r7, #20
 8017d50:	46bd      	mov	sp, r7
 8017d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d56:	4770      	bx	lr

08017d58 <phpalI18000p3m3_Sw_CreateSelectCmd>:
                                         uint8_t bTruncate,
                                         uint8_t * pSelectCmd,
                                         uint8_t * bLen,
                                         uint8_t * bValidBits
                                        )
{
 8017d58:	b480      	push	{r7}
 8017d5a:	b085      	sub	sp, #20
 8017d5c:	af00      	add	r7, sp, #0
 8017d5e:	6078      	str	r0, [r7, #4]
 8017d60:	4608      	mov	r0, r1
 8017d62:	4611      	mov	r1, r2
 8017d64:	461a      	mov	r2, r3
 8017d66:	4603      	mov	r3, r0
 8017d68:	70fb      	strb	r3, [r7, #3]
 8017d6a:	460b      	mov	r3, r1
 8017d6c:	70bb      	strb	r3, [r7, #2]
 8017d6e:	4613      	mov	r3, r2
 8017d70:	707b      	strb	r3, [r7, #1]
    uint8_t     PH_MEMLOC_COUNT bIndex;
    uint8_t     PH_MEMLOC_REM bCmdLength;
    uint8_t     PH_MEMLOC_REM bTmp;
    uint8_t     PH_MEMLOC_REM bMaskByteLength;
    uint16_t    PH_MEMLOC_REM wCmdBitLength = 0;
 8017d72:	2300      	movs	r3, #0
 8017d74:	817b      	strh	r3, [r7, #10]
    PH_UNUSED_VARIABLE(pDataParams);
    /* Parameter check */
    if ((bTarget > 0x07U) || (bAction > 0x07U) || (bMemBank > 0x03U) || (bPointerLength > 3U) || (bTruncate > 1U))
 8017d76:	78fb      	ldrb	r3, [r7, #3]
 8017d78:	2b07      	cmp	r3, #7
 8017d7a:	d80c      	bhi.n	8017d96 <phpalI18000p3m3_Sw_CreateSelectCmd+0x3e>
 8017d7c:	78bb      	ldrb	r3, [r7, #2]
 8017d7e:	2b07      	cmp	r3, #7
 8017d80:	d809      	bhi.n	8017d96 <phpalI18000p3m3_Sw_CreateSelectCmd+0x3e>
 8017d82:	787b      	ldrb	r3, [r7, #1]
 8017d84:	2b03      	cmp	r3, #3
 8017d86:	d806      	bhi.n	8017d96 <phpalI18000p3m3_Sw_CreateSelectCmd+0x3e>
 8017d88:	7f3b      	ldrb	r3, [r7, #28]
 8017d8a:	2b03      	cmp	r3, #3
 8017d8c:	d803      	bhi.n	8017d96 <phpalI18000p3m3_Sw_CreateSelectCmd+0x3e>
 8017d8e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8017d92:	2b01      	cmp	r3, #1
 8017d94:	d902      	bls.n	8017d9c <phpalI18000p3m3_Sw_CreateSelectCmd+0x44>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_I18000P3M3);
 8017d96:	f640 3321 	movw	r3, #2849	@ 0xb21
 8017d9a:	e0f0      	b.n	8017f7e <phpalI18000p3m3_Sw_CreateSelectCmd+0x226>
    }

    /* Build Command frame */
    bCmdLength = 0;
 8017d9c:	2300      	movs	r3, #0
 8017d9e:	73bb      	strb	r3, [r7, #14]
    *(pSelectCmd + bCmdLength++) = (PHPAL_I18000P3M3_CMD_SELECT << 4U) | (bTarget << 1U) | (bAction >> 2U);  /* 0 bits left */
 8017da0:	78fb      	ldrb	r3, [r7, #3]
 8017da2:	005b      	lsls	r3, r3, #1
 8017da4:	b2da      	uxtb	r2, r3
 8017da6:	78bb      	ldrb	r3, [r7, #2]
 8017da8:	089b      	lsrs	r3, r3, #2
 8017daa:	b2db      	uxtb	r3, r3
 8017dac:	4313      	orrs	r3, r2
 8017dae:	b2da      	uxtb	r2, r3
 8017db0:	7bbb      	ldrb	r3, [r7, #14]
 8017db2:	1c59      	adds	r1, r3, #1
 8017db4:	73b9      	strb	r1, [r7, #14]
 8017db6:	4619      	mov	r1, r3
 8017db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017dba:	440b      	add	r3, r1
 8017dbc:	f062 025f 	orn	r2, r2, #95	@ 0x5f
 8017dc0:	b2d2      	uxtb	r2, r2
 8017dc2:	701a      	strb	r2, [r3, #0]
    *(pSelectCmd + bCmdLength)   = (bAction << 6U) | (bMemBank <<  4U) | (bPointerLength << 2U);             /* 2 bits left */
 8017dc4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8017dc8:	019b      	lsls	r3, r3, #6
 8017dca:	b25a      	sxtb	r2, r3
 8017dcc:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8017dd0:	011b      	lsls	r3, r3, #4
 8017dd2:	b25b      	sxtb	r3, r3
 8017dd4:	4313      	orrs	r3, r2
 8017dd6:	b25a      	sxtb	r2, r3
 8017dd8:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8017ddc:	009b      	lsls	r3, r3, #2
 8017dde:	b25b      	sxtb	r3, r3
 8017de0:	4313      	orrs	r3, r2
 8017de2:	b259      	sxtb	r1, r3
 8017de4:	7bbb      	ldrb	r3, [r7, #14]
 8017de6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017de8:	4413      	add	r3, r2
 8017dea:	b2ca      	uxtb	r2, r1
 8017dec:	701a      	strb	r2, [r3, #0]

    /* append pointer */
    for (bIndex = 0; bIndex < (bPointerLength + /* */ 1U); ++bIndex)
 8017dee:	2300      	movs	r3, #0
 8017df0:	73fb      	strb	r3, [r7, #15]
 8017df2:	e01f      	b.n	8017e34 <phpalI18000p3m3_Sw_CreateSelectCmd+0xdc>
    {
        *(pSelectCmd + bCmdLength++) |= (pPointer[bIndex]) >> 6U;
 8017df4:	7bbb      	ldrb	r3, [r7, #14]
 8017df6:	1c5a      	adds	r2, r3, #1
 8017df8:	73ba      	strb	r2, [r7, #14]
 8017dfa:	4619      	mov	r1, r3
 8017dfc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017dfe:	440a      	add	r2, r1
 8017e00:	7811      	ldrb	r1, [r2, #0]
 8017e02:	7bfa      	ldrb	r2, [r7, #15]
 8017e04:	69b8      	ldr	r0, [r7, #24]
 8017e06:	4402      	add	r2, r0
 8017e08:	7812      	ldrb	r2, [r2, #0]
 8017e0a:	0992      	lsrs	r2, r2, #6
 8017e0c:	b2d2      	uxtb	r2, r2
 8017e0e:	4618      	mov	r0, r3
 8017e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e12:	4403      	add	r3, r0
 8017e14:	430a      	orrs	r2, r1
 8017e16:	b2d2      	uxtb	r2, r2
 8017e18:	701a      	strb	r2, [r3, #0]
        *(pSelectCmd + bCmdLength)    = (pPointer[bIndex]) << 2U;
 8017e1a:	7bfb      	ldrb	r3, [r7, #15]
 8017e1c:	69ba      	ldr	r2, [r7, #24]
 8017e1e:	4413      	add	r3, r2
 8017e20:	781a      	ldrb	r2, [r3, #0]
 8017e22:	7bbb      	ldrb	r3, [r7, #14]
 8017e24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017e26:	440b      	add	r3, r1
 8017e28:	0092      	lsls	r2, r2, #2
 8017e2a:	b2d2      	uxtb	r2, r2
 8017e2c:	701a      	strb	r2, [r3, #0]
    for (bIndex = 0; bIndex < (bPointerLength + /* */ 1U); ++bIndex)
 8017e2e:	7bfb      	ldrb	r3, [r7, #15]
 8017e30:	3301      	adds	r3, #1
 8017e32:	73fb      	strb	r3, [r7, #15]
 8017e34:	7bfa      	ldrb	r2, [r7, #15]
 8017e36:	7f3b      	ldrb	r3, [r7, #28]
 8017e38:	3301      	adds	r3, #1
 8017e3a:	429a      	cmp	r2, r3
 8017e3c:	d3da      	bcc.n	8017df4 <phpalI18000p3m3_Sw_CreateSelectCmd+0x9c>
    }
    /* 2 bits left */

    *(pSelectCmd + bCmdLength++) |= bMaskBitLength >> 6U;
 8017e3e:	7bbb      	ldrb	r3, [r7, #14]
 8017e40:	1c5a      	adds	r2, r3, #1
 8017e42:	73ba      	strb	r2, [r7, #14]
 8017e44:	4619      	mov	r1, r3
 8017e46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017e48:	440a      	add	r2, r1
 8017e4a:	7811      	ldrb	r1, [r2, #0]
 8017e4c:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8017e50:	0992      	lsrs	r2, r2, #6
 8017e52:	b2d2      	uxtb	r2, r2
 8017e54:	4618      	mov	r0, r3
 8017e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e58:	4403      	add	r3, r0
 8017e5a:	430a      	orrs	r2, r1
 8017e5c:	b2d2      	uxtb	r2, r2
 8017e5e:	701a      	strb	r2, [r3, #0]
    *(pSelectCmd + bCmdLength)    = bMaskBitLength << 2U;  /* 2 bits left */
 8017e60:	7bbb      	ldrb	r3, [r7, #14]
 8017e62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017e64:	4413      	add	r3, r2
 8017e66:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8017e6a:	0092      	lsls	r2, r2, #2
 8017e6c:	b2d2      	uxtb	r2, r2
 8017e6e:	701a      	strb	r2, [r3, #0]

    /* calculate intermediate bitlength */
    wCmdBitLength = ((uint16_t)bCmdLength << 3U) + 6U;
 8017e70:	7bbb      	ldrb	r3, [r7, #14]
 8017e72:	b29b      	uxth	r3, r3
 8017e74:	00db      	lsls	r3, r3, #3
 8017e76:	b29b      	uxth	r3, r3
 8017e78:	3306      	adds	r3, #6
 8017e7a:	817b      	strh	r3, [r7, #10]

    /* get byte-length of mask */
    bMaskByteLength = bMaskBitLength >> 3U;
 8017e7c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8017e80:	08db      	lsrs	r3, r3, #3
 8017e82:	733b      	strb	r3, [r7, #12]
    if (0U != (bMaskBitLength & 0x07U))
 8017e84:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8017e88:	f003 0307 	and.w	r3, r3, #7
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	d002      	beq.n	8017e96 <phpalI18000p3m3_Sw_CreateSelectCmd+0x13e>
    {
        ++bMaskByteLength;
 8017e90:	7b3b      	ldrb	r3, [r7, #12]
 8017e92:	3301      	adds	r3, #1
 8017e94:	733b      	strb	r3, [r7, #12]
    }

    /* append mask value */
    for (bIndex = 0; bIndex < bMaskByteLength; ++bIndex)
 8017e96:	2300      	movs	r3, #0
 8017e98:	73fb      	strb	r3, [r7, #15]
 8017e9a:	e036      	b.n	8017f0a <phpalI18000p3m3_Sw_CreateSelectCmd+0x1b2>
    {
        bTmp = pMask[bIndex];
 8017e9c:	7bfb      	ldrb	r3, [r7, #15]
 8017e9e:	6a3a      	ldr	r2, [r7, #32]
 8017ea0:	4413      	add	r3, r2
 8017ea2:	781b      	ldrb	r3, [r3, #0]
 8017ea4:	737b      	strb	r3, [r7, #13]

        /* Mask out invalid bits of last byte */
        if ((bIndex == (bMaskByteLength - 1U)) && ((bMaskBitLength & 0x07U) > 0U))
 8017ea6:	7bfa      	ldrb	r2, [r7, #15]
 8017ea8:	7b3b      	ldrb	r3, [r7, #12]
 8017eaa:	3b01      	subs	r3, #1
 8017eac:	429a      	cmp	r2, r3
 8017eae:	d112      	bne.n	8017ed6 <phpalI18000p3m3_Sw_CreateSelectCmd+0x17e>
 8017eb0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8017eb4:	f003 0307 	and.w	r3, r3, #7
 8017eb8:	2b00      	cmp	r3, #0
 8017eba:	d00c      	beq.n	8017ed6 <phpalI18000p3m3_Sw_CreateSelectCmd+0x17e>
        {
            bTmp &= (uint8_t)(0xFFU << (8U - (bMaskBitLength & 0x07U)));
 8017ebc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8017ec0:	f003 0307 	and.w	r3, r3, #7
 8017ec4:	f1c3 0308 	rsb	r3, r3, #8
 8017ec8:	22ff      	movs	r2, #255	@ 0xff
 8017eca:	fa02 f303 	lsl.w	r3, r2, r3
 8017ece:	b2da      	uxtb	r2, r3
 8017ed0:	7b7b      	ldrb	r3, [r7, #13]
 8017ed2:	4013      	ands	r3, r2
 8017ed4:	737b      	strb	r3, [r7, #13]
        }

        /* Append mask value */
        *(pSelectCmd + bCmdLength++) |= bTmp >> 6U;
 8017ed6:	7bbb      	ldrb	r3, [r7, #14]
 8017ed8:	1c5a      	adds	r2, r3, #1
 8017eda:	73ba      	strb	r2, [r7, #14]
 8017edc:	4619      	mov	r1, r3
 8017ede:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017ee0:	440a      	add	r2, r1
 8017ee2:	7811      	ldrb	r1, [r2, #0]
 8017ee4:	7b7a      	ldrb	r2, [r7, #13]
 8017ee6:	0992      	lsrs	r2, r2, #6
 8017ee8:	b2d2      	uxtb	r2, r2
 8017eea:	4618      	mov	r0, r3
 8017eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017eee:	4403      	add	r3, r0
 8017ef0:	430a      	orrs	r2, r1
 8017ef2:	b2d2      	uxtb	r2, r2
 8017ef4:	701a      	strb	r2, [r3, #0]
        *(pSelectCmd + bCmdLength)    = bTmp << 2U;
 8017ef6:	7bbb      	ldrb	r3, [r7, #14]
 8017ef8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017efa:	4413      	add	r3, r2
 8017efc:	7b7a      	ldrb	r2, [r7, #13]
 8017efe:	0092      	lsls	r2, r2, #2
 8017f00:	b2d2      	uxtb	r2, r2
 8017f02:	701a      	strb	r2, [r3, #0]
    for (bIndex = 0; bIndex < bMaskByteLength; ++bIndex)
 8017f04:	7bfb      	ldrb	r3, [r7, #15]
 8017f06:	3301      	adds	r3, #1
 8017f08:	73fb      	strb	r3, [r7, #15]
 8017f0a:	7bfa      	ldrb	r2, [r7, #15]
 8017f0c:	7b3b      	ldrb	r3, [r7, #12]
 8017f0e:	429a      	cmp	r2, r3
 8017f10:	d3c4      	bcc.n	8017e9c <phpalI18000p3m3_Sw_CreateSelectCmd+0x144>
    }
    /* calculate new bit length */
    wCmdBitLength = wCmdBitLength + bMaskBitLength;
 8017f12:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8017f16:	b29a      	uxth	r2, r3
 8017f18:	897b      	ldrh	r3, [r7, #10]
 8017f1a:	4413      	add	r3, r2
 8017f1c:	817b      	strh	r3, [r7, #10]

    /* decrement length if we incremented too much */
    if ((wCmdBitLength >> 3U) != bCmdLength)
 8017f1e:	897b      	ldrh	r3, [r7, #10]
 8017f20:	08db      	lsrs	r3, r3, #3
 8017f22:	b29a      	uxth	r2, r3
 8017f24:	7bbb      	ldrb	r3, [r7, #14]
 8017f26:	b29b      	uxth	r3, r3
 8017f28:	429a      	cmp	r2, r3
 8017f2a:	d002      	beq.n	8017f32 <phpalI18000p3m3_Sw_CreateSelectCmd+0x1da>
    {
        --bCmdLength;
 8017f2c:	7bbb      	ldrb	r3, [r7, #14]
 8017f2e:	3b01      	subs	r3, #1
 8017f30:	73bb      	strb	r3, [r7, #14]
    }

    /* append truncate bit */
    if (bTruncate != PH_OFF)
 8017f32:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8017f36:	2b00      	cmp	r3, #0
 8017f38:	d010      	beq.n	8017f5c <phpalI18000p3m3_Sw_CreateSelectCmd+0x204>
    {
        *(pSelectCmd + bCmdLength) |= (uint8_t)(0x80U >> (wCmdBitLength & 0x07U));
 8017f3a:	7bbb      	ldrb	r3, [r7, #14]
 8017f3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017f3e:	4413      	add	r3, r2
 8017f40:	7819      	ldrb	r1, [r3, #0]
 8017f42:	897b      	ldrh	r3, [r7, #10]
 8017f44:	f003 0307 	and.w	r3, r3, #7
 8017f48:	2280      	movs	r2, #128	@ 0x80
 8017f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8017f4e:	b2da      	uxtb	r2, r3
 8017f50:	7bbb      	ldrb	r3, [r7, #14]
 8017f52:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8017f54:	4403      	add	r3, r0
 8017f56:	430a      	orrs	r2, r1
 8017f58:	b2d2      	uxtb	r2, r2
 8017f5a:	701a      	strb	r2, [r3, #0]
    }
    ++bCmdLength;
 8017f5c:	7bbb      	ldrb	r3, [r7, #14]
 8017f5e:	3301      	adds	r3, #1
 8017f60:	73bb      	strb	r3, [r7, #14]
    ++wCmdBitLength;
 8017f62:	897b      	ldrh	r3, [r7, #10]
 8017f64:	3301      	adds	r3, #1
 8017f66:	817b      	strh	r3, [r7, #10]
    *bLen = bCmdLength;
 8017f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f6a:	7bba      	ldrb	r2, [r7, #14]
 8017f6c:	701a      	strb	r2, [r3, #0]
    *bValidBits = (uint8_t)(wCmdBitLength & 0x07U);
 8017f6e:	897b      	ldrh	r3, [r7, #10]
 8017f70:	b2db      	uxtb	r3, r3
 8017f72:	f003 0307 	and.w	r3, r3, #7
 8017f76:	b2da      	uxtb	r2, r3
 8017f78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017f7a:	701a      	strb	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8017f7c:	2300      	movs	r3, #0
}
 8017f7e:	4618      	mov	r0, r3
 8017f80:	3714      	adds	r7, #20
 8017f82:	46bd      	mov	sp, r7
 8017f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f88:	4770      	bx	lr

08017f8a <phpalI18000p3m3_Sw_CreateBeginRoundCmd>:
    uint8_t bSession,
    uint8_t bRfu,
    uint8_t bQ,
    uint8_t * pBeginRnd
    )
{
 8017f8a:	b580      	push	{r7, lr}
 8017f8c:	b084      	sub	sp, #16
 8017f8e:	af00      	add	r7, sp, #0
 8017f90:	6078      	str	r0, [r7, #4]
 8017f92:	4608      	mov	r0, r1
 8017f94:	4611      	mov	r1, r2
 8017f96:	461a      	mov	r2, r3
 8017f98:	4603      	mov	r3, r0
 8017f9a:	70fb      	strb	r3, [r7, #3]
 8017f9c:	460b      	mov	r3, r1
 8017f9e:	70bb      	strb	r3, [r7, #2]
 8017fa0:	4613      	mov	r3, r2
 8017fa2:	707b      	strb	r3, [r7, #1]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t PH_MEMLOC_REM wValue = 0;
 8017fa4:	2300      	movs	r3, #0
 8017fa6:	81fb      	strh	r3, [r7, #14]
    /* Parameter check */
    if ((bDr > 0x01U) || (bM < 0x02U) || (bM > 0x03U) || (bTRext > 1U) || (bSel > 0x03U) || (bSession > 0x03U) || (bRfu > 0x01U) || (bQ > 0x0FU))
 8017fa8:	78fb      	ldrb	r3, [r7, #3]
 8017faa:	2b01      	cmp	r3, #1
 8017fac:	d816      	bhi.n	8017fdc <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 8017fae:	78bb      	ldrb	r3, [r7, #2]
 8017fb0:	2b01      	cmp	r3, #1
 8017fb2:	d913      	bls.n	8017fdc <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 8017fb4:	78bb      	ldrb	r3, [r7, #2]
 8017fb6:	2b03      	cmp	r3, #3
 8017fb8:	d810      	bhi.n	8017fdc <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 8017fba:	787b      	ldrb	r3, [r7, #1]
 8017fbc:	2b01      	cmp	r3, #1
 8017fbe:	d80d      	bhi.n	8017fdc <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 8017fc0:	7e3b      	ldrb	r3, [r7, #24]
 8017fc2:	2b03      	cmp	r3, #3
 8017fc4:	d80a      	bhi.n	8017fdc <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 8017fc6:	7f3b      	ldrb	r3, [r7, #28]
 8017fc8:	2b03      	cmp	r3, #3
 8017fca:	d807      	bhi.n	8017fdc <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 8017fcc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017fd0:	2b01      	cmp	r3, #1
 8017fd2:	d803      	bhi.n	8017fdc <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 8017fd4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8017fd8:	2b0f      	cmp	r3, #15
 8017fda:	d902      	bls.n	8017fe2 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x58>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_I18000P3M3);
 8017fdc:	f640 3321 	movw	r3, #2849	@ 0xb21
 8017fe0:	e072      	b.n	80180c8 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x13e>
    }

    /* Store new session parameter */
   pDataParams->bSession = bSession;
 8017fe2:	687b      	ldr	r3, [r7, #4]
 8017fe4:	7f3a      	ldrb	r2, [r7, #28]
 8017fe6:	721a      	strb	r2, [r3, #8]

    /* Map TRext to 0 or 1 */
    if (bTRext != PH_OFF)
 8017fe8:	787b      	ldrb	r3, [r7, #1]
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	d002      	beq.n	8017ff4 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x6a>
    {
        bTRext = 1;
 8017fee:	2301      	movs	r3, #1
 8017ff0:	707b      	strb	r3, [r7, #1]
 8017ff2:	e001      	b.n	8017ff8 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x6e>
    }
    else
    {
        bTRext = 0;
 8017ff4:	2300      	movs	r3, #0
 8017ff6:	707b      	strb	r3, [r7, #1]
    }

    /* Build Command frame */
    *pBeginRnd = (PHPAL_I18000P3M3_CMD_BEGIN_ROUND << 4U) | (bDr << 3U) | (bM << 1U) | (bTRext);  /* 0 bits left */
 8017ff8:	78fb      	ldrb	r3, [r7, #3]
 8017ffa:	00db      	lsls	r3, r3, #3
 8017ffc:	b2da      	uxtb	r2, r3
 8017ffe:	78bb      	ldrb	r3, [r7, #2]
 8018000:	005b      	lsls	r3, r3, #1
 8018002:	b2db      	uxtb	r3, r3
 8018004:	4313      	orrs	r3, r2
 8018006:	b2da      	uxtb	r2, r3
 8018008:	787b      	ldrb	r3, [r7, #1]
 801800a:	4313      	orrs	r3, r2
 801800c:	b2db      	uxtb	r3, r3
 801800e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8018012:	b2da      	uxtb	r2, r3
 8018014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018016:	701a      	strb	r2, [r3, #0]
    *(pBeginRnd+1U) = (bSel << 6U) | (bSession << 4U) | (bRfu << 3U) | (bQ >> 1U);                      /* 0 bits left */
 8018018:	f997 3018 	ldrsb.w	r3, [r7, #24]
 801801c:	019b      	lsls	r3, r3, #6
 801801e:	b25a      	sxtb	r2, r3
 8018020:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8018024:	011b      	lsls	r3, r3, #4
 8018026:	b25b      	sxtb	r3, r3
 8018028:	4313      	orrs	r3, r2
 801802a:	b25a      	sxtb	r2, r3
 801802c:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8018030:	00db      	lsls	r3, r3, #3
 8018032:	b25b      	sxtb	r3, r3
 8018034:	4313      	orrs	r3, r2
 8018036:	b25a      	sxtb	r2, r3
 8018038:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801803c:	085b      	lsrs	r3, r3, #1
 801803e:	b2db      	uxtb	r3, r3
 8018040:	b25b      	sxtb	r3, r3
 8018042:	4313      	orrs	r3, r2
 8018044:	b25a      	sxtb	r2, r3
 8018046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018048:	3301      	adds	r3, #1
 801804a:	b2d2      	uxtb	r2, r2
 801804c:	701a      	strb	r2, [r3, #0]
    *(pBeginRnd+2U) = (bQ << 7U);                                                                    /* 7 bits left */
 801804e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018050:	3302      	adds	r3, #2
 8018052:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8018056:	01d2      	lsls	r2, r2, #7
 8018058:	b2d2      	uxtb	r2, r2
 801805a:	701a      	strb	r2, [r3, #0]

    if(bDr == 0U)
 801805c:	78fb      	ldrb	r3, [r7, #3]
 801805e:	2b00      	cmp	r3, #0
 8018060:	d108      	bne.n	8018074 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0xea>
    {
        if(bM == 2U)
 8018062:	78bb      	ldrb	r3, [r7, #2]
 8018064:	2b02      	cmp	r3, #2
 8018066:	d102      	bne.n	801806e <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0xe4>
        {
            wValue = PHHAL_HW_RX_I18000P3M3_FL_423_MAN2;
 8018068:	2313      	movs	r3, #19
 801806a:	81fb      	strh	r3, [r7, #14]
 801806c:	e00a      	b.n	8018084 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0xfa>
        }
        else
        {
            wValue = PHHAL_HW_RX_I18000P3M3_FL_423_MAN4;
 801806e:	2315      	movs	r3, #21
 8018070:	81fb      	strh	r3, [r7, #14]
 8018072:	e007      	b.n	8018084 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0xfa>
        }
    }
    else
    {
        if(bM == 2U)
 8018074:	78bb      	ldrb	r3, [r7, #2]
 8018076:	2b02      	cmp	r3, #2
 8018078:	d102      	bne.n	8018080 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0xf6>
        {
            wValue = PHHAL_HW_RX_I18000P3M3_FL_847_MAN2;
 801807a:	2314      	movs	r3, #20
 801807c:	81fb      	strh	r3, [r7, #14]
 801807e:	e001      	b.n	8018084 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0xfa>
        }
        else
        {
            wValue = PHHAL_HW_RX_I18000P3M3_FL_847_MAN4;
 8018080:	2316      	movs	r3, #22
 8018082:	81fb      	strh	r3, [r7, #14]
        }
    }

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	685b      	ldr	r3, [r3, #4]
 8018088:	89fa      	ldrh	r2, [r7, #14]
 801808a:	210a      	movs	r1, #10
 801808c:	4618      	mov	r0, r3
 801808e:	f7f6 fb83 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8018092:	4603      	mov	r3, r0
 8018094:	81bb      	strh	r3, [r7, #12]
 8018096:	89bb      	ldrh	r3, [r7, #12]
 8018098:	2b00      	cmp	r3, #0
 801809a:	d001      	beq.n	80180a0 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x116>
 801809c:	89bb      	ldrh	r3, [r7, #12]
 801809e:	e013      	b.n	80180c8 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x13e>
                pDataParams->pHalDataParams,
                PHHAL_HW_CONFIG_RXDATARATE_FRAMING,
                wValue));

    /* Set Subcarrier */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	6858      	ldr	r0, [r3, #4]
 80180a4:	78fb      	ldrb	r3, [r7, #3]
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	d101      	bne.n	80180ae <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x124>
 80180aa:	2301      	movs	r3, #1
 80180ac:	e000      	b.n	80180b0 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x126>
 80180ae:	2302      	movs	r3, #2
 80180b0:	461a      	mov	r2, r3
 80180b2:	210f      	movs	r1, #15
 80180b4:	f7f6 fb70 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 80180b8:	4603      	mov	r3, r0
 80180ba:	81bb      	strh	r3, [r7, #12]
 80180bc:	89bb      	ldrh	r3, [r7, #12]
 80180be:	2b00      	cmp	r3, #0
 80180c0:	d001      	beq.n	80180c6 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x13c>
 80180c2:	89bb      	ldrh	r3, [r7, #12]
 80180c4:	e000      	b.n	80180c8 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x13e>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_SUBCARRIER,
        (bDr == 0U) ? PHHAL_HW_SUBCARRIER_DUAL : PHHAL_HW_SUBCARRIER_QUAD));

    return PH_ERR_SUCCESS;
 80180c6:	2300      	movs	r3, #0
}
 80180c8:	4618      	mov	r0, r3
 80180ca:	3710      	adds	r7, #16
 80180cc:	46bd      	mov	sp, r7
 80180ce:	bd80      	pop	{r7, pc}

080180d0 <phpalI18092mPI_Sw_Init>:
phStatus_t phpalI18092mPI_Sw_Init(
                                  phpalI18092mPI_Sw_DataParams_t * pDataParams,
                                  uint16_t wSizeOfDataParams,
                                  void * pHalDataParams
                                  )
{
 80180d0:	b580      	push	{r7, lr}
 80180d2:	b084      	sub	sp, #16
 80180d4:	af00      	add	r7, sp, #0
 80180d6:	60f8      	str	r0, [r7, #12]
 80180d8:	460b      	mov	r3, r1
 80180da:	607a      	str	r2, [r7, #4]
 80180dc:	817b      	strh	r3, [r7, #10]
    if (sizeof(phpalI18092mPI_Sw_DataParams_t) != wSizeOfDataParams)
 80180de:	897b      	ldrh	r3, [r7, #10]
 80180e0:	2b24      	cmp	r3, #36	@ 0x24
 80180e2:	d002      	beq.n	80180ea <phpalI18092mPI_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_I18092MPI);
 80180e4:	f44f 6342 	mov.w	r3, #3104	@ 0xc20
 80180e8:	e014      	b.n	8018114 <phpalI18092mPI_Sw_Init+0x44>
    }
    PH_ASSERT_NULL (pDataParams);
 80180ea:	68fb      	ldr	r3, [r7, #12]
 80180ec:	2b00      	cmp	r3, #0
 80180ee:	d101      	bne.n	80180f4 <phpalI18092mPI_Sw_Init+0x24>
 80180f0:	2321      	movs	r3, #33	@ 0x21
 80180f2:	e00f      	b.n	8018114 <phpalI18092mPI_Sw_Init+0x44>
    PH_ASSERT_NULL (pHalDataParams);
 80180f4:	687b      	ldr	r3, [r7, #4]
 80180f6:	2b00      	cmp	r3, #0
 80180f8:	d101      	bne.n	80180fe <phpalI18092mPI_Sw_Init+0x2e>
 80180fa:	2321      	movs	r3, #33	@ 0x21
 80180fc:	e00a      	b.n	8018114 <phpalI18092mPI_Sw_Init+0x44>

    /* Init private data */
    pDataParams->wId            = PH_COMP_PAL_I18092MPI | PHPAL_I18092MPI_SW_ID;
 80180fe:	68fb      	ldr	r3, [r7, #12]
 8018100:	f640 4201 	movw	r2, #3073	@ 0xc01
 8018104:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams = pHalDataParams;
 8018106:	68fb      	ldr	r3, [r7, #12]
 8018108:	687a      	ldr	r2, [r7, #4]
 801810a:	605a      	str	r2, [r3, #4]

    /* Reset protocol to defaults */
    return phpalI18092mPI_Sw_ResetProtocol(pDataParams);
 801810c:	68f8      	ldr	r0, [r7, #12]
 801810e:	f000 f805 	bl	801811c <phpalI18092mPI_Sw_ResetProtocol>
 8018112:	4603      	mov	r3, r0
}
 8018114:	4618      	mov	r0, r3
 8018116:	3710      	adds	r7, #16
 8018118:	46bd      	mov	sp, r7
 801811a:	bd80      	pop	{r7, pc}

0801811c <phpalI18092mPI_Sw_ResetProtocol>:

phStatus_t phpalI18092mPI_Sw_ResetProtocol(
    phpalI18092mPI_Sw_DataParams_t * pDataParams
    )
{
 801811c:	b480      	push	{r7}
 801811e:	b083      	sub	sp, #12
 8018120:	af00      	add	r7, sp, #0
 8018122:	6078      	str	r0, [r7, #4]
    /* Apply default parameters */
    pDataParams->bNfcIdValid    = PH_OFF;
 8018124:	687b      	ldr	r3, [r7, #4]
 8018126:	2200      	movs	r2, #0
 8018128:	721a      	strb	r2, [r3, #8]
    pDataParams->bStateNow      = PHPAL_I18092MPI_SW_STATE_INFORMATION_PDU_TX;
 801812a:	687b      	ldr	r3, [r7, #4]
 801812c:	2200      	movs	r2, #0
 801812e:	74da      	strb	r2, [r3, #19]
    pDataParams->bDid           = 0;    /* set DID to 0, i.e. disable usage of DID */
 8018130:	687b      	ldr	r3, [r7, #4]
 8018132:	2200      	movs	r2, #0
 8018134:	751a      	strb	r2, [r3, #20]
    pDataParams->bNadEnabled    = PH_OFF;
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	2200      	movs	r2, #0
 801813a:	755a      	strb	r2, [r3, #21]
    pDataParams->bNad           = 0;
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	2200      	movs	r2, #0
 8018140:	759a      	strb	r2, [r3, #22]
    pDataParams->bWt            = PHPAL_I18092MPI_WT_MAX;
 8018142:	687b      	ldr	r3, [r7, #4]
 8018144:	220e      	movs	r2, #14
 8018146:	75da      	strb	r2, [r3, #23]
    pDataParams->bFsl           = PHPAL_I18092MPI_FRAMESIZE_64;
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	2200      	movs	r2, #0
 801814c:	761a      	strb	r2, [r3, #24]
    pDataParams->bLri           = PHPAL_I18092MPI_FRAMESIZE_64;
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	2200      	movs	r2, #0
 8018152:	771a      	strb	r2, [r3, #28]
    pDataParams->bLrt           = PHPAL_I18092MPI_FRAMESIZE_64;
 8018154:	687b      	ldr	r3, [r7, #4]
 8018156:	2200      	movs	r2, #0
 8018158:	775a      	strb	r2, [r3, #29]
    pDataParams->bPni           = 0;    /* NFCForum-TS-DigitalProtocol-1.0 section 14.12.3.1 */
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	2200      	movs	r2, #0
 801815e:	765a      	strb	r2, [r3, #25]
    pDataParams->bDsi           = 0;
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	2200      	movs	r2, #0
 8018164:	769a      	strb	r2, [r3, #26]
    pDataParams->bDri           = 0;
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	2200      	movs	r2, #0
 801816a:	76da      	strb	r2, [r3, #27]
    pDataParams->bMaxRetryCount = PHPAL_I18092MPI_SW_RETRIES_DEFAULT;
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	2202      	movs	r2, #2
 8018170:	779a      	strb	r2, [r3, #30]
    pDataParams->bAtnDisabled   = 0;
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	2200      	movs	r2, #0
 8018176:	77da      	strb	r2, [r3, #31]
    pDataParams->bActiveMode    = 0;
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	2200      	movs	r2, #0
 801817c:	f883 2020 	strb.w	r2, [r3, #32]
    pDataParams->bOpeMode       = RD_LIB_MODE_NFC;
 8018180:	687b      	ldr	r3, [r7, #4]
 8018182:	2202      	movs	r2, #2
 8018184:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    pDataParams->bPropPSLMode   = PH_OFF;
 8018188:	687b      	ldr	r3, [r7, #4]
 801818a:	2200      	movs	r2, #0
 801818c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    return PH_ERR_SUCCESS;
 8018190:	2300      	movs	r3, #0
}
 8018192:	4618      	mov	r0, r3
 8018194:	370c      	adds	r7, #12
 8018196:	46bd      	mov	sp, r7
 8018198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801819c:	4770      	bx	lr
	...

080181a0 <phpalI18092mPI_Sw_Atr>:
                                 uint8_t * pGi,
                                 uint8_t bGiLength,
                                 uint8_t * pAtrRes,
                                 uint8_t * pAtrResLength
                                 )
{
 80181a0:	b580      	push	{r7, lr}
 80181a2:	b098      	sub	sp, #96	@ 0x60
 80181a4:	af04      	add	r7, sp, #16
 80181a6:	60f8      	str	r0, [r7, #12]
 80181a8:	60b9      	str	r1, [r7, #8]
 80181aa:	4611      	mov	r1, r2
 80181ac:	461a      	mov	r2, r3
 80181ae:	460b      	mov	r3, r1
 80181b0:	71fb      	strb	r3, [r7, #7]
 80181b2:	4613      	mov	r3, r2
 80181b4:	71bb      	strb	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    phStatus_t  PH_MEMLOC_REM wPreviousStatus;
    uint8_t     PH_MEMLOC_REM aCmd[14];
    uint8_t     PH_MEMLOC_REM bCmdLen;
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 80181b6:	2300      	movs	r3, #0
 80181b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint16_t    PH_MEMLOC_REM wResponseLength = 0;
 80181ba:	2300      	movs	r3, #0
 80181bc:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t    PH_MEMLOC_REM wFrameLength = 0;
 80181be:	2300      	movs	r3, #0
 80181c0:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint8_t *   PH_MEMLOC_REM pFrame = NULL;
 80181c2:	2300      	movs	r3, #0
 80181c4:	623b      	str	r3, [r7, #32]
    uint8_t *   PH_MEMLOC_REM pPayload = NULL;
 80181c6:	2300      	movs	r3, #0
 80181c8:	61fb      	str	r3, [r7, #28]
    uint16_t    PH_MEMLOC_REM wPayloadLength = 0;
 80181ca:	2300      	movs	r3, #0
 80181cc:	837b      	strh	r3, [r7, #26]
    uint16_t    PH_MEMLOC_REM wActiveMode;
    uint8_t     PH_MEMLOC_REM bRetry;
    uint8_t     PH_MEMLOC_COUNT bRetryCount;
    uint8_t     PH_MEMLOC_REM bResponseReceived;
    uint8_t     PH_MEMLOC_REM bTo;
    uint16_t    PH_MEMLOC_REM wDsi = 0;
 80181ce:	2300      	movs	r3, #0
 80181d0:	82fb      	strh	r3, [r7, #22]
    uint16_t    PH_MEMLOC_REM wDri;
    uint32_t    PH_MEMLOC_REM dwRwt;
    uint32_t    PH_MEMLOC_REM dwShift = 1U;
 80181d2:	2301      	movs	r3, #1
 80181d4:	647b      	str	r3, [r7, #68]	@ 0x44

    wPreviousStatus = 0;
 80181d6:	2300      	movs	r3, #0
 80181d8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    bRetryCount = 0;
 80181dc:	2300      	movs	r3, #0
 80181de:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
    /* Parameter check */
    if ((bDid > PHPAL_I18092MPI_DID_MAX) ||
 80181e2:	79fb      	ldrb	r3, [r7, #7]
 80181e4:	2b0e      	cmp	r3, #14
 80181e6:	d806      	bhi.n	80181f6 <phpalI18092mPI_Sw_Atr+0x56>
 80181e8:	79bb      	ldrb	r3, [r7, #6]
 80181ea:	2b03      	cmp	r3, #3
 80181ec:	d803      	bhi.n	80181f6 <phpalI18092mPI_Sw_Atr+0x56>
        (bLri > PHPAL_I18092MPI_FRAMESIZE_254) ||
 80181ee:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 80181f2:	2b30      	cmp	r3, #48	@ 0x30
 80181f4:	d902      	bls.n	80181fc <phpalI18092mPI_Sw_Atr+0x5c>
        (bGiLength > PHPAL_I18092MPI_MAX_GI_LENGTH))
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_I18092MPI);
 80181f6:	f640 4321 	movw	r3, #3105	@ 0xc21
 80181fa:	e29f      	b.n	801873c <phpalI18092mPI_Sw_Atr+0x59c>
    }

    /* Make NfcID invalid */
    pDataParams->bNfcIdValid = PH_OFF;
 80181fc:	68fb      	ldr	r3, [r7, #12]
 80181fe:	2200      	movs	r2, #0
 8018200:	721a      	strb	r2, [r3, #8]

    /* Set new DID */
    pDataParams->bDid = bDid;
 8018202:	68fb      	ldr	r3, [r7, #12]
 8018204:	79fa      	ldrb	r2, [r7, #7]
 8018206:	751a      	strb	r2, [r3, #20]

    /* Build up frame data. */
    (void)memcpy(aCmd, pNfcid3i, PHPAL_I18092MPI_NFCID3_LENGTH);
 8018208:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801820c:	220a      	movs	r2, #10
 801820e:	68b9      	ldr	r1, [r7, #8]
 8018210:	4618      	mov	r0, r3
 8018212:	f008 fbbe 	bl	8020992 <memcpy>
    bCmdLen = PHPAL_I18092MPI_NFCID3_LENGTH;
 8018216:	230a      	movs	r3, #10
 8018218:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    aCmd[bCmdLen++] = bDid;
 801821c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8018220:	1c5a      	adds	r2, r3, #1
 8018222:	f887 2043 	strb.w	r2, [r7, #67]	@ 0x43
 8018226:	3350      	adds	r3, #80	@ 0x50
 8018228:	443b      	add	r3, r7
 801822a:	79fa      	ldrb	r2, [r7, #7]
 801822c:	f803 2c24 	strb.w	r2, [r3, #-36]

    /* Next two fields (BSi and BRi) only used for active mode, so set them to 0. */
    aCmd[bCmdLen++] = 0x00;
 8018230:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8018234:	1c5a      	adds	r2, r3, #1
 8018236:	f887 2043 	strb.w	r2, [r7, #67]	@ 0x43
 801823a:	3350      	adds	r3, #80	@ 0x50
 801823c:	443b      	add	r3, r7
 801823e:	2200      	movs	r2, #0
 8018240:	f803 2c24 	strb.w	r2, [r3, #-36]
    aCmd[bCmdLen++] = 0x00;
 8018244:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8018248:	1c5a      	adds	r2, r3, #1
 801824a:	f887 2043 	strb.w	r2, [r7, #67]	@ 0x43
 801824e:	3350      	adds	r3, #80	@ 0x50
 8018250:	443b      	add	r3, r7
 8018252:	2200      	movs	r2, #0
 8018254:	f803 2c24 	strb.w	r2, [r3, #-36]

    /* Configure PPi field */
    aCmd[bCmdLen++] = (bLri << PHPAL_I18092MPI_SW_ATR_PPI_LRI_BIT);
 8018258:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801825c:	1c5a      	adds	r2, r3, #1
 801825e:	f887 2043 	strb.w	r2, [r7, #67]	@ 0x43
 8018262:	4619      	mov	r1, r3
 8018264:	79bb      	ldrb	r3, [r7, #6]
 8018266:	011b      	lsls	r3, r3, #4
 8018268:	b2da      	uxtb	r2, r3
 801826a:	f101 0350 	add.w	r3, r1, #80	@ 0x50
 801826e:	443b      	add	r3, r7
 8018270:	f803 2c24 	strb.w	r2, [r3, #-36]
    if (0U != (bNadEnabled))
 8018274:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8018278:	2b00      	cmp	r3, #0
 801827a:	d010      	beq.n	801829e <phpalI18092mPI_Sw_Atr+0xfe>
    {
        aCmd[bCmdLen - 1U] |= 0x01U;
 801827c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8018280:	3b01      	subs	r3, #1
 8018282:	3350      	adds	r3, #80	@ 0x50
 8018284:	443b      	add	r3, r7
 8018286:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 801828a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801828e:	3b01      	subs	r3, #1
 8018290:	f042 0201 	orr.w	r2, r2, #1
 8018294:	b2d2      	uxtb	r2, r2
 8018296:	3350      	adds	r3, #80	@ 0x50
 8018298:	443b      	add	r3, r7
 801829a:	f803 2c24 	strb.w	r2, [r3, #-36]
    }

    /* Get initial set data rate from HAL since NFC allows starting at different data rates. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXDATARATE_FRAMING, &wDsi));
 801829e:	68fb      	ldr	r3, [r7, #12]
 80182a0:	685b      	ldr	r3, [r3, #4]
 80182a2:	f107 0216 	add.w	r2, r7, #22
 80182a6:	2109      	movs	r1, #9
 80182a8:	4618      	mov	r0, r3
 80182aa:	f7f7 fec3 	bl	8010034 <phhalHw_Pn5180_GetConfig>
 80182ae:	4603      	mov	r3, r0
 80182b0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80182b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80182b8:	2b00      	cmp	r3, #0
 80182ba:	d002      	beq.n	80182c2 <phpalI18092mPI_Sw_Atr+0x122>
 80182bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80182c0:	e23c      	b.n	801873c <phpalI18092mPI_Sw_Atr+0x59c>
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalI18092mPI_Sw_ConvertDatarate(wDsi, &pDataParams->bDsi));
 80182c2:	8afa      	ldrh	r2, [r7, #22]
 80182c4:	68fb      	ldr	r3, [r7, #12]
 80182c6:	331a      	adds	r3, #26
 80182c8:	4619      	mov	r1, r3
 80182ca:	4610      	mov	r0, r2
 80182cc:	f000 fc5e 	bl	8018b8c <phpalI18092mPI_Sw_ConvertDatarate>
 80182d0:	4603      	mov	r3, r0
 80182d2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80182d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80182da:	2b00      	cmp	r3, #0
 80182dc:	d002      	beq.n	80182e4 <phpalI18092mPI_Sw_Atr+0x144>
 80182de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80182e2:	e22b      	b.n	801873c <phpalI18092mPI_Sw_Atr+0x59c>
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXDATARATE_FRAMING, &wDri));
 80182e4:	68fb      	ldr	r3, [r7, #12]
 80182e6:	685b      	ldr	r3, [r3, #4]
 80182e8:	f107 0214 	add.w	r2, r7, #20
 80182ec:	210a      	movs	r1, #10
 80182ee:	4618      	mov	r0, r3
 80182f0:	f7f7 fea0 	bl	8010034 <phhalHw_Pn5180_GetConfig>
 80182f4:	4603      	mov	r3, r0
 80182f6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80182fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80182fe:	2b00      	cmp	r3, #0
 8018300:	d002      	beq.n	8018308 <phpalI18092mPI_Sw_Atr+0x168>
 8018302:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018306:	e219      	b.n	801873c <phpalI18092mPI_Sw_Atr+0x59c>
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalI18092mPI_Sw_ConvertDatarate(wDri, &pDataParams->bDri));
 8018308:	8aba      	ldrh	r2, [r7, #20]
 801830a:	68fb      	ldr	r3, [r7, #12]
 801830c:	331b      	adds	r3, #27
 801830e:	4619      	mov	r1, r3
 8018310:	4610      	mov	r0, r2
 8018312:	f000 fc3b 	bl	8018b8c <phpalI18092mPI_Sw_ConvertDatarate>
 8018316:	4603      	mov	r3, r0
 8018318:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 801831c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018320:	2b00      	cmp	r3, #0
 8018322:	d002      	beq.n	801832a <phpalI18092mPI_Sw_Atr+0x18a>
 8018324:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018328:	e208      	b.n	801873c <phpalI18092mPI_Sw_Atr+0x59c>

    /* Configure HAL for handling StartByte in case Transmit datarate is 106kbps. */
    if (pDataParams->bDsi == PHHAL_HW_RF_DATARATE_106)
 801832a:	68fb      	ldr	r3, [r7, #12]
 801832c:	7e9b      	ldrb	r3, [r3, #26]
 801832e:	2b00      	cmp	r3, #0
 8018330:	d110      	bne.n	8018354 <phpalI18092mPI_Sw_Atr+0x1b4>
    {
        /* Configure HAL for NFCIP to enable handling StartByte at 106kbps. */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_NFCIP_STARTBYTE, PH_ON));
 8018332:	68fb      	ldr	r3, [r7, #12]
 8018334:	685b      	ldr	r3, [r3, #4]
 8018336:	2201      	movs	r2, #1
 8018338:	215c      	movs	r1, #92	@ 0x5c
 801833a:	4618      	mov	r0, r3
 801833c:	f7f6 fa2c 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8018340:	4603      	mov	r3, r0
 8018342:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8018346:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801834a:	2b00      	cmp	r3, #0
 801834c:	d013      	beq.n	8018376 <phpalI18092mPI_Sw_Atr+0x1d6>
 801834e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018352:	e1f3      	b.n	801873c <phpalI18092mPI_Sw_Atr+0x59c>
    }
    else
    {
        /* Disabled handling of StartByte if datarate is other than 106kbps. */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_NFCIP_STARTBYTE, PH_OFF));
 8018354:	68fb      	ldr	r3, [r7, #12]
 8018356:	685b      	ldr	r3, [r3, #4]
 8018358:	2200      	movs	r2, #0
 801835a:	215c      	movs	r1, #92	@ 0x5c
 801835c:	4618      	mov	r0, r3
 801835e:	f7f6 fa1b 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8018362:	4603      	mov	r3, r0
 8018364:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8018368:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801836c:	2b00      	cmp	r3, #0
 801836e:	d002      	beq.n	8018376 <phpalI18092mPI_Sw_Atr+0x1d6>
 8018370:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018374:	e1e2      	b.n	801873c <phpalI18092mPI_Sw_Atr+0x59c>
    }

    /* Set Activation timeout */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8018376:	68fb      	ldr	r3, [r7, #12]
 8018378:	685b      	ldr	r3, [r3, #4]
 801837a:	f240 523b 	movw	r2, #1339	@ 0x53b
 801837e:	210e      	movs	r1, #14
 8018380:	4618      	mov	r0, r3
 8018382:	f7f6 fa09 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8018386:	4603      	mov	r3, r0
 8018388:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 801838c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018390:	2b00      	cmp	r3, #0
 8018392:	d002      	beq.n	801839a <phpalI18092mPI_Sw_Atr+0x1fa>
 8018394:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018398:	e1d0      	b.n	801873c <phpalI18092mPI_Sw_Atr+0x59c>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
        PHPAL_I18092MPI_SW_RWT_ACTIVATION_MS + PHPAL_I18092MPI_SW_DELTA_T_INITIATOR_MS));

    /* Reset response received flag */
    bResponseReceived = 0;
 801839a:	2300      	movs	r3, #0
 801839c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49

    /* Retry loop */
    do
    {
        /* Reset retry flag */
        bRetry = PH_OFF;
 80183a0:	2300      	movs	r3, #0
 80183a2:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

        /* Write frame header. */
        PH_CHECK_SUCCESS_FCT(statusTmp, phpalI18092mPI_Sw_WriteFrameHeader(pDataParams, PH_EXCHANGE_BUFFER_FIRST, PHPAL_I18092MPI_SW_CMD_ATR_REQ, (bCmdLen + bGiLength)));
 80183a6:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 80183aa:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 80183ae:	4413      	add	r3, r2
 80183b0:	b2db      	uxtb	r3, r3
 80183b2:	2200      	movs	r2, #0
 80183b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80183b8:	68f8      	ldr	r0, [r7, #12]
 80183ba:	f000 fab5 	bl	8018928 <phpalI18092mPI_Sw_WriteFrameHeader>
 80183be:	4603      	mov	r3, r0
 80183c0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80183c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80183c8:	2b00      	cmp	r3, #0
 80183ca:	d002      	beq.n	80183d2 <phpalI18092mPI_Sw_Atr+0x232>
 80183cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80183d0:	e1b4      	b.n	801873c <phpalI18092mPI_Sw_Atr+0x59c>

        /* Append general bytes if present */
        if (bGiLength > 0U)
 80183d2:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 80183d6:	2b00      	cmp	r3, #0
 80183d8:	d03e      	beq.n	8018458 <phpalI18092mPI_Sw_Atr+0x2b8>
        {
            /* Mark that general bytes are present */
            aCmd[bCmdLen - 1U] |= PHPAL_I18092MPI_SW_ATR_RES_PPT_GT_AVAILABLE;
 80183da:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80183de:	3b01      	subs	r3, #1
 80183e0:	3350      	adds	r3, #80	@ 0x50
 80183e2:	443b      	add	r3, r7
 80183e4:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 80183e8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80183ec:	3b01      	subs	r3, #1
 80183ee:	f042 0202 	orr.w	r2, r2, #2
 80183f2:	b2d2      	uxtb	r2, r2
 80183f4:	3350      	adds	r3, #80	@ 0x50
 80183f6:	443b      	add	r3, r7
 80183f8:	f803 2c24 	strb.w	r2, [r3, #-36]

            /* Write data to internal buffer. */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 80183fc:	68fb      	ldr	r3, [r7, #12]
 80183fe:	6858      	ldr	r0, [r3, #4]
 8018400:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8018404:	b29b      	uxth	r3, r3
 8018406:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801840a:	2100      	movs	r1, #0
 801840c:	9101      	str	r1, [sp, #4]
 801840e:	2100      	movs	r1, #0
 8018410:	9100      	str	r1, [sp, #0]
 8018412:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8018416:	f7f5 fe09 	bl	800e02c <phhalHw_Pn5180_Exchange>
 801841a:	4603      	mov	r3, r0
 801841c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8018420:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018424:	2b00      	cmp	r3, #0
 8018426:	d002      	beq.n	801842e <phpalI18092mPI_Sw_Atr+0x28e>
 8018428:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801842c:	e186      	b.n	801873c <phpalI18092mPI_Sw_Atr+0x59c>
                (uint16_t)bCmdLen,
                NULL,
                NULL));

            /* Write general bytes, transmit the whole buffer and receive response. */
            status = phhalHw_Exchange(pDataParams->pHalDataParams,
 801842e:	68fb      	ldr	r3, [r7, #12]
 8018430:	6858      	ldr	r0, [r3, #4]
 8018432:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8018436:	b29a      	uxth	r2, r3
 8018438:	f107 0326 	add.w	r3, r7, #38	@ 0x26
 801843c:	9301      	str	r3, [sp, #4]
 801843e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8018442:	9300      	str	r3, [sp, #0]
 8018444:	4613      	mov	r3, r2
 8018446:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8018448:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 801844c:	f7f5 fdee 	bl	800e02c <phhalHw_Pn5180_Exchange>
 8018450:	4603      	mov	r3, r0
 8018452:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8018456:	e014      	b.n	8018482 <phpalI18092mPI_Sw_Atr+0x2e2>
                &wResponseLength);
        }
        else
        {
            /* No additional general bytes to be sent so transmit the buffer now. */
            status = phhalHw_Exchange(pDataParams->pHalDataParams,
 8018458:	68fb      	ldr	r3, [r7, #12]
 801845a:	6858      	ldr	r0, [r3, #4]
 801845c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8018460:	b299      	uxth	r1, r3
 8018462:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8018466:	f107 0326 	add.w	r3, r7, #38	@ 0x26
 801846a:	9301      	str	r3, [sp, #4]
 801846c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8018470:	9300      	str	r3, [sp, #0]
 8018472:	460b      	mov	r3, r1
 8018474:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8018478:	f7f5 fdd8 	bl	800e02c <phhalHw_Pn5180_Exchange>
 801847c:	4603      	mov	r3, r0
 801847e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
                &pResp,
                &wResponseLength);
        }

        /* Get the state of activation mode status either indication active/passive mode. */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 8018482:	68fb      	ldr	r3, [r7, #12]
 8018484:	685b      	ldr	r3, [r3, #4]
 8018486:	f107 0218 	add.w	r2, r7, #24
 801848a:	2154      	movs	r1, #84	@ 0x54
 801848c:	4618      	mov	r0, r3
 801848e:	f7f7 fdd1 	bl	8010034 <phhalHw_Pn5180_GetConfig>
 8018492:	4603      	mov	r3, r0
 8018494:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8018498:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801849c:	2b00      	cmp	r3, #0
 801849e:	d002      	beq.n	80184a6 <phpalI18092mPI_Sw_Atr+0x306>
 80184a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80184a4:	e14a      	b.n	801873c <phpalI18092mPI_Sw_Atr+0x59c>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_ACTIVEMODE,
            &wActiveMode));
        pDataParams->bActiveMode = (uint8_t)wActiveMode;
 80184a6:	8b3b      	ldrh	r3, [r7, #24]
 80184a8:	b2da      	uxtb	r2, r3
 80184aa:	68fb      	ldr	r3, [r7, #12]
 80184ac:	f883 2020 	strb.w	r2, [r3, #32]

        /* Exchange was successful */
        if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 80184b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80184b4:	b2db      	uxtb	r3, r3
 80184b6:	2b00      	cmp	r3, #0
 80184b8:	d102      	bne.n	80184c0 <phpalI18092mPI_Sw_Atr+0x320>
        {
            /* Signal that we've received something */
            bResponseReceived = 1;
 80184ba:	2301      	movs	r3, #1
 80184bc:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
        }

        if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 80184c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80184c4:	b2db      	uxtb	r3, r3
 80184c6:	2b00      	cmp	r3, #0
 80184c8:	f040 80d0 	bne.w	801866c <phpalI18092mPI_Sw_Atr+0x4cc>
        {
            /* Check for valid response frame and remove start byte if present. */
            PH_CHECK_SUCCESS_FCT(statusTmp, phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame(
 80184cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80184ce:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80184d0:	f107 031a 	add.w	r3, r7, #26
 80184d4:	9303      	str	r3, [sp, #12]
 80184d6:	f107 031c 	add.w	r3, r7, #28
 80184da:	9302      	str	r3, [sp, #8]
 80184dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80184e0:	9301      	str	r3, [sp, #4]
 80184e2:	f107 0320 	add.w	r3, r7, #32
 80184e6:	9300      	str	r3, [sp, #0]
 80184e8:	2301      	movs	r3, #1
 80184ea:	68f8      	ldr	r0, [r7, #12]
 80184ec:	f000 fa60 	bl	80189b0 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame>
 80184f0:	4603      	mov	r3, r0
 80184f2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80184f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80184fa:	2b00      	cmp	r3, #0
 80184fc:	d002      	beq.n	8018504 <phpalI18092mPI_Sw_Atr+0x364>
 80184fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018502:	e11b      	b.n	801873c <phpalI18092mPI_Sw_Atr+0x59c>
                &wFrameLength,
                &pPayload,
                &wPayloadLength));

            /* Ignore length byte */
            ++pFrame;
 8018504:	6a3b      	ldr	r3, [r7, #32]
 8018506:	3301      	adds	r3, #1
 8018508:	623b      	str	r3, [r7, #32]
            --wFrameLength;
 801850a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801850c:	3b01      	subs	r3, #1
 801850e:	b29b      	uxth	r3, r3
 8018510:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /* Check for minimum and maximum frame size. NFCForum-TS-DigitalProtocol-1.0 section 14.6.1.3. */
            if ((wFrameLength > PHPAL_I18092MPI_SW_MAX_ACTIVATION_FRAME_LENGTH) ||
 8018512:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018514:	2b40      	cmp	r3, #64	@ 0x40
 8018516:	d802      	bhi.n	801851e <phpalI18092mPI_Sw_Atr+0x37e>
                (wFrameLength < PHPAL_I18092MPI_SW_MIN_ACTIVATION_FRAME_LENGTH))
 8018518:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
            if ((wFrameLength > PHPAL_I18092MPI_SW_MAX_ACTIVATION_FRAME_LENGTH) ||
 801851a:	2b10      	cmp	r3, #16
 801851c:	d802      	bhi.n	8018524 <phpalI18092mPI_Sw_Atr+0x384>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 801851e:	f640 4306 	movw	r3, #3078	@ 0xc06
 8018522:	e10b      	b.n	801873c <phpalI18092mPI_Sw_Atr+0x59c>
            }

            /* Check Gt presence / absence */
            if (0U != (pFrame[PHPAL_I18092MPI_SW_ATR_RES_PPT_POS] & PHPAL_I18092MPI_SW_ATR_RES_PPT_GT_AVAILABLE))
 8018524:	6a3b      	ldr	r3, [r7, #32]
 8018526:	3310      	adds	r3, #16
 8018528:	781b      	ldrb	r3, [r3, #0]
 801852a:	f003 0302 	and.w	r3, r3, #2
 801852e:	2b00      	cmp	r3, #0
 8018530:	d005      	beq.n	801853e <phpalI18092mPI_Sw_Atr+0x39e>
            {
                /* Gt should be present */
                if (wFrameLength <= PHPAL_I18092MPI_SW_MIN_ACTIVATION_FRAME_LENGTH)
 8018532:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018534:	2b11      	cmp	r3, #17
 8018536:	d808      	bhi.n	801854a <phpalI18092mPI_Sw_Atr+0x3aa>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8018538:	f640 4306 	movw	r3, #3078	@ 0xc06
 801853c:	e0fe      	b.n	801873c <phpalI18092mPI_Sw_Atr+0x59c>
                }
            }
            else
            {
                /* Gt should be absent */
                if (wFrameLength > PHPAL_I18092MPI_SW_MIN_ACTIVATION_FRAME_LENGTH)
 801853e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018540:	2b11      	cmp	r3, #17
 8018542:	d902      	bls.n	801854a <phpalI18092mPI_Sw_Atr+0x3aa>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8018544:	f640 4306 	movw	r3, #3078	@ 0xc06
 8018548:	e0f8      	b.n	801873c <phpalI18092mPI_Sw_Atr+0x59c>
                }
            }

            /* Protocol error in case DID is not the same. NFCForum-TS-DigitalProtocol-1.0 section 14.6.3.2. */
            if (pFrame[PHPAL_I18092MPI_SW_ATR_RES_DID_POS] != bDid)
 801854a:	6a3b      	ldr	r3, [r7, #32]
 801854c:	330c      	adds	r3, #12
 801854e:	781b      	ldrb	r3, [r3, #0]
 8018550:	79fa      	ldrb	r2, [r7, #7]
 8018552:	429a      	cmp	r2, r3
 8018554:	d002      	beq.n	801855c <phpalI18092mPI_Sw_Atr+0x3bc>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8018556:	f640 4306 	movw	r3, #3078	@ 0xc06
 801855a:	e0ef      	b.n	801873c <phpalI18092mPI_Sw_Atr+0x59c>
            }

            /* Check NadUsed bit */
            if (0U != (pFrame[PHPAL_I18092MPI_SW_ATR_RES_PPT_POS] & PHPAL_I18092MPI_SW_ATR_RES_PPT_NAD_USED))
 801855c:	6a3b      	ldr	r3, [r7, #32]
 801855e:	3310      	adds	r3, #16
 8018560:	781b      	ldrb	r3, [r3, #0]
 8018562:	f003 0301 	and.w	r3, r3, #1
 8018566:	2b00      	cmp	r3, #0
 8018568:	d00e      	beq.n	8018588 <phpalI18092mPI_Sw_Atr+0x3e8>
            {
                /* Protocol error if NAD use is requested to be disabled */
                if (bNadEnabled == PH_OFF)
 801856a:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 801856e:	2b00      	cmp	r3, #0
 8018570:	d102      	bne.n	8018578 <phpalI18092mPI_Sw_Atr+0x3d8>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8018572:	f640 4306 	movw	r3, #3078	@ 0xc06
 8018576:	e0e1      	b.n	801873c <phpalI18092mPI_Sw_Atr+0x59c>
                }

                pDataParams->bNad = bNad;
 8018578:	68fb      	ldr	r3, [r7, #12]
 801857a:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 801857e:	759a      	strb	r2, [r3, #22]
                pDataParams->bNadEnabled = PH_ON;
 8018580:	68fb      	ldr	r3, [r7, #12]
 8018582:	2201      	movs	r2, #1
 8018584:	755a      	strb	r2, [r3, #21]
 8018586:	e005      	b.n	8018594 <phpalI18092mPI_Sw_Atr+0x3f4>
            }
            else
            {
                pDataParams->bNad = 0x00;
 8018588:	68fb      	ldr	r3, [r7, #12]
 801858a:	2200      	movs	r2, #0
 801858c:	759a      	strb	r2, [r3, #22]
                pDataParams->bNadEnabled = PH_OFF;
 801858e:	68fb      	ldr	r3, [r7, #12]
 8018590:	2200      	movs	r2, #0
 8018592:	755a      	strb	r2, [r3, #21]
            }

            /* Copy ATR_RES to response buffer. */
            (void)memcpy(pAtrRes, pFrame, wFrameLength);
 8018594:	6a3b      	ldr	r3, [r7, #32]
 8018596:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8018598:	4619      	mov	r1, r3
 801859a:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 801859c:	f008 f9f9 	bl	8020992 <memcpy>
            *pAtrResLength = (uint8_t)wFrameLength;
 80185a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80185a2:	b2da      	uxtb	r2, r3
 80185a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80185a6:	701a      	strb	r2, [r3, #0]

            /* Update LRi */
            pDataParams->bLri = bLri;
 80185a8:	68fb      	ldr	r3, [r7, #12]
 80185aa:	79ba      	ldrb	r2, [r7, #6]
 80185ac:	771a      	strb	r2, [r3, #28]

            /* Retrieve TO */
            bTo = pAtrRes[PHPAL_I18092MPI_SW_ATR_RES_TO_POS] & 0xFU;
 80185ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80185b0:	330f      	adds	r3, #15
 80185b2:	781b      	ldrb	r3, [r3, #0]
 80185b4:	f003 030f 	and.w	r3, r3, #15
 80185b8:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48

            /* Adjust timeout field if necessary. NFCForum-TS-DigitalProtocol-1.0 section 14.6.3.8. */
            if (bTo > PHPAL_I18092MPI_WT_MAX)
 80185bc:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80185c0:	2b0e      	cmp	r3, #14
 80185c2:	d902      	bls.n	80185ca <phpalI18092mPI_Sw_Atr+0x42a>
            {
                bTo = PHPAL_I18092MPI_WT_MAX;
 80185c4:	230e      	movs	r3, #14
 80185c6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
            }

            /* Parse the response to see what frame size the target supports. */
            pDataParams->bLrt = (pAtrRes[PHPAL_I18092MPI_SW_ATR_RES_PPT_POS] >> 4U) & 0x3U;
 80185ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80185cc:	3310      	adds	r3, #16
 80185ce:	781b      	ldrb	r3, [r3, #0]
 80185d0:	091b      	lsrs	r3, r3, #4
 80185d2:	b2db      	uxtb	r3, r3
 80185d4:	f003 0303 	and.w	r3, r3, #3
 80185d8:	b2da      	uxtb	r2, r3
 80185da:	68fb      	ldr	r3, [r7, #12]
 80185dc:	775a      	strb	r2, [r3, #29]

            /* Set FSL to the lowest frame size (lowest of LRi and LRt) */
            pDataParams->bFsl = (pDataParams->bLrt < pDataParams->bLri) ? pDataParams->bLrt : pDataParams->bLri;
 80185de:	68fb      	ldr	r3, [r7, #12]
 80185e0:	7f1a      	ldrb	r2, [r3, #28]
 80185e2:	68fb      	ldr	r3, [r7, #12]
 80185e4:	7f5b      	ldrb	r3, [r3, #29]
 80185e6:	4293      	cmp	r3, r2
 80185e8:	bf28      	it	cs
 80185ea:	4613      	movcs	r3, r2
 80185ec:	b2da      	uxtb	r2, r3
 80185ee:	68fb      	ldr	r3, [r7, #12]
 80185f0:	761a      	strb	r2, [r3, #24]

            /* Store TO */
            pDataParams->bWt = bTo;
 80185f2:	68fb      	ldr	r3, [r7, #12]
 80185f4:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 80185f8:	75da      	strb	r2, [r3, #23]

            /* NfcID is now valid */
            pDataParams->bNfcIdValid = PH_ON;
 80185fa:	68fb      	ldr	r3, [r7, #12]
 80185fc:	2201      	movs	r2, #1
 80185fe:	721a      	strb	r2, [r3, #8]
            (void)memcpy(pDataParams->aNfcid3i, &pAtrRes[PHPAL_I18092MPI_SW_ATR_RES_NFCID3_POS], PHPAL_I18092MPI_NFCID3_LENGTH);
 8018600:	68fb      	ldr	r3, [r7, #12]
 8018602:	f103 0009 	add.w	r0, r3, #9
 8018606:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8018608:	3302      	adds	r3, #2
 801860a:	220a      	movs	r2, #10
 801860c:	4619      	mov	r1, r3
 801860e:	f008 f9c0 	bl	8020992 <memcpy>

            /* Calculate Response Waiting Time. */
            dwShift = 1U;
 8018612:	2301      	movs	r3, #1
 8018614:	647b      	str	r3, [r7, #68]	@ 0x44
            dwRwt = (uint32_t)(PHPAL_I18092MPI_SW_RWT_MIN_US * ((dwShift << bTo)));
 8018616:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 801861a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801861c:	fa02 f303 	lsl.w	r3, r2, r3
 8018620:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 8018624:	fb02 f303 	mul.w	r3, r2, r3
 8018628:	63fb      	str	r3, [r7, #60]	@ 0x3c
            dwRwt += PHPAL_I18092MPI_SW_DELTA_RWT_US;
 801862a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801862c:	3302      	adds	r3, #2
 801862e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            dwRwt /= 1000U;
 8018630:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018632:	4a44      	ldr	r2, [pc, #272]	@ (8018744 <phpalI18092mPI_Sw_Atr+0x5a4>)
 8018634:	fba2 2303 	umull	r2, r3, r2, r3
 8018638:	099b      	lsrs	r3, r3, #6
 801863a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            dwRwt += 1U;
 801863c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801863e:	3301      	adds	r3, #1
 8018640:	63fb      	str	r3, [r7, #60]	@ 0x3c
            dwRwt += PHPAL_I18092MPI_SW_DELTA_T_INITIATOR_MS;
 8018642:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018644:	3364      	adds	r3, #100	@ 0x64
 8018646:	63fb      	str	r3, [r7, #60]	@ 0x3c

            /* Set Response Waiting Time. */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8018648:	68fb      	ldr	r3, [r7, #12]
 801864a:	685b      	ldr	r3, [r3, #4]
 801864c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801864e:	b292      	uxth	r2, r2
 8018650:	210e      	movs	r1, #14
 8018652:	4618      	mov	r0, r3
 8018654:	f7f6 f8a0 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8018658:	4603      	mov	r3, r0
 801865a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 801865e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018662:	2b00      	cmp	r3, #0
 8018664:	d058      	beq.n	8018718 <phpalI18092mPI_Sw_Atr+0x578>
 8018666:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801866a:	e067      	b.n	801873c <phpalI18092mPI_Sw_Atr+0x59c>
                (uint16_t)dwRwt));
        }
        else
        {
            /* If HAL returned Integrity Error first time then save and return this status at the end of Retry. */
            if (((status & PH_ERR_MASK) == PH_ERR_INTEGRITY_ERROR) && (bRetryCount == 0U))
 801866c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8018670:	b2db      	uxtb	r3, r3
 8018672:	2b02      	cmp	r3, #2
 8018674:	d107      	bne.n	8018686 <phpalI18092mPI_Sw_Atr+0x4e6>
 8018676:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801867a:	2b00      	cmp	r3, #0
 801867c:	d103      	bne.n	8018686 <phpalI18092mPI_Sw_Atr+0x4e6>
            {
                wPreviousStatus = status;
 801867e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8018682:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
            }

            /* Retransmit in case of timeout or receive error, ISO/IEC 18092:2004(E) section 12.5.1.3.1. */
            if (0u != (PHPAL_I18092MPI_SW_IS_INVALID_BLOCK_STATUS(status)))
 8018686:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801868a:	b2db      	uxtb	r3, r3
 801868c:	2b01      	cmp	r3, #1
 801868e:	d00e      	beq.n	80186ae <phpalI18092mPI_Sw_Atr+0x50e>
 8018690:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8018694:	b2db      	uxtb	r3, r3
 8018696:	2b02      	cmp	r3, #2
 8018698:	d009      	beq.n	80186ae <phpalI18092mPI_Sw_Atr+0x50e>
 801869a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801869e:	b2db      	uxtb	r3, r3
 80186a0:	2b05      	cmp	r3, #5
 80186a2:	d004      	beq.n	80186ae <phpalI18092mPI_Sw_Atr+0x50e>
 80186a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80186a8:	b2db      	uxtb	r3, r3
 80186aa:	2b03      	cmp	r3, #3
 80186ac:	d134      	bne.n	8018718 <phpalI18092mPI_Sw_Atr+0x578>
            {
                /* Check if we shall perform another retry. */
                if (bRetryCount < pDataParams->bMaxRetryCount)
 80186ae:	68fb      	ldr	r3, [r7, #12]
 80186b0:	7f9b      	ldrb	r3, [r3, #30]
 80186b2:	f897 204a 	ldrb.w	r2, [r7, #74]	@ 0x4a
 80186b6:	429a      	cmp	r2, r3
 80186b8:	d21b      	bcs.n	80186f2 <phpalI18092mPI_Sw_Atr+0x552>
                {
                    ++bRetryCount;
 80186ba:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80186be:	3301      	adds	r3, #1
 80186c0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
                    bRetry = PH_ON;
 80186c4:	2301      	movs	r3, #1
 80186c6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

                    if (wActiveMode == PH_ON)
 80186ca:	8b3b      	ldrh	r3, [r7, #24]
 80186cc:	2b01      	cmp	r3, #1
 80186ce:	d123      	bne.n	8018718 <phpalI18092mPI_Sw_Atr+0x578>
                    {
                        /* Wait for T_IRFG (Initial RF guard time) before ATR retry. */
                        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 80186d0:	68fb      	ldr	r3, [r7, #12]
 80186d2:	685b      	ldr	r3, [r3, #4]
 80186d4:	2205      	movs	r2, #5
 80186d6:	2101      	movs	r1, #1
 80186d8:	4618      	mov	r0, r3
 80186da:	f7f5 ffa3 	bl	800e624 <phhalHw_Pn5180_Wait>
 80186de:	4603      	mov	r3, r0
 80186e0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80186e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	d015      	beq.n	8018718 <phpalI18092mPI_Sw_Atr+0x578>
 80186ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80186f0:	e024      	b.n	801873c <phpalI18092mPI_Sw_Atr+0x59c>
                    }
                }
                else
                {
                    /* Deselect target ISO/IEC 18092:2004(E) section 12.5.1.3.1. */
                    statusTmp = phpalI18092mPI_Sw_Deselect(pDataParams, PHPAL_I18092MPI_DESELECT_RLS);
 80186f2:	210a      	movs	r1, #10
 80186f4:	68f8      	ldr	r0, [r7, #12]
 80186f6:	f000 f827 	bl	8018748 <phpalI18092mPI_Sw_Deselect>
 80186fa:	4603      	mov	r3, r0
 80186fc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

                    /* Return ERR_RECOVERY_FAILED if some response has been received before (bMaxRetryCount = 0 suppresses the retry behaviour) */
                    if ((pDataParams->bMaxRetryCount > 0U) && (0u != bResponseReceived))
 8018700:	68fb      	ldr	r3, [r7, #12]
 8018702:	7f9b      	ldrb	r3, [r3, #30]
 8018704:	2b00      	cmp	r3, #0
 8018706:	d007      	beq.n	8018718 <phpalI18092mPI_Sw_Atr+0x578>
 8018708:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 801870c:	2b00      	cmp	r3, #0
 801870e:	d003      	beq.n	8018718 <phpalI18092mPI_Sw_Atr+0x578>
                    {
                        status = PH_ADD_COMPCODE_FIXED(PHPAL_I18092MPI_ERR_RECOVERY_FAILED, PH_COMP_PAL_I18092MPI);
 8018710:	f44f 6348 	mov.w	r3, #3200	@ 0xc80
 8018714:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
                }
            }
        }
    }
    /* Retry loop */
    while (bRetry != PH_OFF);
 8018718:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 801871c:	2b00      	cmp	r3, #0
 801871e:	f47f ae3f 	bne.w	80183a0 <phpalI18092mPI_Sw_Atr+0x200>

    if ((wPreviousStatus != 0U) && (status != PH_ERR_SUCCESS))
 8018722:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8018726:	2b00      	cmp	r3, #0
 8018728:	d006      	beq.n	8018738 <phpalI18092mPI_Sw_Atr+0x598>
 801872a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801872e:	2b00      	cmp	r3, #0
 8018730:	d002      	beq.n	8018738 <phpalI18092mPI_Sw_Atr+0x598>
    {
        return wPreviousStatus;
 8018732:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8018736:	e001      	b.n	801873c <phpalI18092mPI_Sw_Atr+0x59c>
    }
    return status;
 8018738:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
}
 801873c:	4618      	mov	r0, r3
 801873e:	3750      	adds	r7, #80	@ 0x50
 8018740:	46bd      	mov	sp, r7
 8018742:	bd80      	pop	{r7, pc}
 8018744:	10624dd3 	.word	0x10624dd3

08018748 <phpalI18092mPI_Sw_Deselect>:

phStatus_t phpalI18092mPI_Sw_Deselect(
                                      phpalI18092mPI_Sw_DataParams_t * pDataParams,
                                      uint8_t bDeselectCommand
                                      )
{
 8018748:	b580      	push	{r7, lr}
 801874a:	b092      	sub	sp, #72	@ 0x48
 801874c:	af04      	add	r7, sp, #16
 801874e:	6078      	str	r0, [r7, #4]
 8018750:	460b      	mov	r3, r1
 8018752:	70fb      	strb	r3, [r7, #3]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint32_t    PH_MEMLOC_REM dwTimeout;
    uint8_t     PH_MEMLOC_REM aCmd[1];
    uint8_t     PH_MEMLOC_REM bCmdLen = 0;
 8018754:	2300      	movs	r3, #0
 8018756:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    uint8_t     PH_MEMLOC_REM bExpectedResponse;
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 801875a:	2300      	movs	r3, #0
 801875c:	623b      	str	r3, [r7, #32]
    uint16_t    PH_MEMLOC_REM wResponseLength = 0;
 801875e:	2300      	movs	r3, #0
 8018760:	83fb      	strh	r3, [r7, #30]
    uint8_t *   PH_MEMLOC_REM pFrame = NULL;
 8018762:	2300      	movs	r3, #0
 8018764:	61bb      	str	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wFrameLength = 0;
 8018766:	2300      	movs	r3, #0
 8018768:	82fb      	strh	r3, [r7, #22]
    uint8_t *   PH_MEMLOC_REM pPayload = NULL;
 801876a:	2300      	movs	r3, #0
 801876c:	613b      	str	r3, [r7, #16]
    uint16_t    PH_MEMLOC_REM wPayloadLength = 0;
 801876e:	2300      	movs	r3, #0
 8018770:	81fb      	strh	r3, [r7, #14]
    uint8_t     PH_MEMLOC_COUNT bRetryCount = 0;
 8018772:	2300      	movs	r3, #0
 8018774:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    uint8_t     PH_MEMLOC_REM bResponseReceived;
    uint8_t     PH_MEMLOC_REM bRetry;
    uint32_t    PH_MEMLOC_REM dwShift = 1U;
 8018778:	2301      	movs	r3, #1
 801877a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Make NfcID invalid */
    pDataParams->bNfcIdValid = PH_OFF;
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	2200      	movs	r2, #0
 8018780:	721a      	strb	r2, [r3, #8]

    /* Calculate Response Waiting Time. */
    dwShift = 1U;
 8018782:	2301      	movs	r3, #1
 8018784:	62fb      	str	r3, [r7, #44]	@ 0x2c
    dwTimeout = (uint32_t)(PHPAL_I18092MPI_SW_RWT_MIN_US * ((uint32_t)(dwShift << pDataParams->bWt)));
 8018786:	687b      	ldr	r3, [r7, #4]
 8018788:	7ddb      	ldrb	r3, [r3, #23]
 801878a:	461a      	mov	r2, r3
 801878c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801878e:	4093      	lsls	r3, r2
 8018790:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 8018794:	fb02 f303 	mul.w	r3, r2, r3
 8018798:	62bb      	str	r3, [r7, #40]	@ 0x28
    dwTimeout += PHPAL_I18092MPI_SW_DELTA_RWT_US;
 801879a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801879c:	3302      	adds	r3, #2
 801879e:	62bb      	str	r3, [r7, #40]	@ 0x28
    dwTimeout /= 1000U;
 80187a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80187a2:	4a60      	ldr	r2, [pc, #384]	@ (8018924 <phpalI18092mPI_Sw_Deselect+0x1dc>)
 80187a4:	fba2 2303 	umull	r2, r3, r2, r3
 80187a8:	099b      	lsrs	r3, r3, #6
 80187aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    dwTimeout += 1U;
 80187ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80187ae:	3301      	adds	r3, #1
 80187b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    dwTimeout += PHPAL_I18092MPI_SW_DELTA_T_INITIATOR_MS;
 80187b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80187b4:	3364      	adds	r3, #100	@ 0x64
 80187b6:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Set Response Waiting Time as per NFCForum-TS-DigitalProtocol-1.1 section 16.11.2.3. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	685b      	ldr	r3, [r3, #4]
 80187bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80187be:	b292      	uxth	r2, r2
 80187c0:	210e      	movs	r1, #14
 80187c2:	4618      	mov	r0, r3
 80187c4:	f7f5 ffe8 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 80187c8:	4603      	mov	r3, r0
 80187ca:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80187cc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80187ce:	2b00      	cmp	r3, #0
 80187d0:	d001      	beq.n	80187d6 <phpalI18092mPI_Sw_Deselect+0x8e>
 80187d2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80187d4:	e0a1      	b.n	801891a <phpalI18092mPI_Sw_Deselect+0x1d2>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
        (uint16_t)dwTimeout));

    /* Append DID if enabled */
    if (pDataParams->bDid > 0U)
 80187d6:	687b      	ldr	r3, [r7, #4]
 80187d8:	7d1b      	ldrb	r3, [r3, #20]
 80187da:	2b00      	cmp	r3, #0
 80187dc:	d00c      	beq.n	80187f8 <phpalI18092mPI_Sw_Deselect+0xb0>
    {
        aCmd[bCmdLen++] = pDataParams->bDid;
 80187de:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80187e2:	1c5a      	adds	r2, r3, #1
 80187e4:	f887 2035 	strb.w	r2, [r7, #53]	@ 0x35
 80187e8:	4619      	mov	r1, r3
 80187ea:	687b      	ldr	r3, [r7, #4]
 80187ec:	7d1a      	ldrb	r2, [r3, #20]
 80187ee:	f101 0338 	add.w	r3, r1, #56	@ 0x38
 80187f2:	443b      	add	r3, r7
 80187f4:	f803 2c14 	strb.w	r2, [r3, #-20]
    }

    /* Reset response received flag */
    bResponseReceived = 0;
 80187f8:	2300      	movs	r3, #0
 80187fa:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

    /* Retry loop */
    do
    {
        /* Reset retry flag */
        bRetry = PH_OFF;
 80187fe:	2300      	movs	r3, #0
 8018800:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

        /* Write frame header and update length field. */
        PH_CHECK_SUCCESS_FCT(statusTmp, phpalI18092mPI_Sw_WriteFrameHeader(pDataParams,PH_EXCHANGE_BUFFER_FIRST, bDeselectCommand, bCmdLen));
 8018804:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8018808:	78fa      	ldrb	r2, [r7, #3]
 801880a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 801880e:	6878      	ldr	r0, [r7, #4]
 8018810:	f000 f88a 	bl	8018928 <phpalI18092mPI_Sw_WriteFrameHeader>
 8018814:	4603      	mov	r3, r0
 8018816:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8018818:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801881a:	2b00      	cmp	r3, #0
 801881c:	d001      	beq.n	8018822 <phpalI18092mPI_Sw_Deselect+0xda>
 801881e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8018820:	e07b      	b.n	801891a <phpalI18092mPI_Sw_Deselect+0x1d2>

        /* Start transmission. */
        status = phhalHw_Exchange(pDataParams->pHalDataParams,
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	6858      	ldr	r0, [r3, #4]
 8018826:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801882a:	b299      	uxth	r1, r3
 801882c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8018830:	f107 031e 	add.w	r3, r7, #30
 8018834:	9301      	str	r3, [sp, #4]
 8018836:	f107 0320 	add.w	r3, r7, #32
 801883a:	9300      	str	r3, [sp, #0]
 801883c:	460b      	mov	r3, r1
 801883e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8018842:	f7f5 fbf3 	bl	800e02c <phhalHw_Pn5180_Exchange>
 8018846:	4603      	mov	r3, r0
 8018848:	86fb      	strh	r3, [r7, #54]	@ 0x36
            (uint16_t)bCmdLen,
            &pResp,
            &wResponseLength);

        /* Exchange was successful */
        if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 801884a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801884c:	b2db      	uxtb	r3, r3
 801884e:	2b00      	cmp	r3, #0
 8018850:	d102      	bne.n	8018858 <phpalI18092mPI_Sw_Deselect+0x110>
        {
            /* Signal that we've received something */
            bResponseReceived = 1;
 8018852:	2301      	movs	r3, #1
 8018854:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
        }

        /* Exchange was successful */
        if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 8018858:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801885a:	b2db      	uxtb	r3, r3
 801885c:	2b00      	cmp	r3, #0
 801885e:	d13c      	bne.n	80188da <phpalI18092mPI_Sw_Deselect+0x192>
        {
            if (bDeselectCommand == PHPAL_I18092MPI_DESELECT_DSL)
 8018860:	78fb      	ldrb	r3, [r7, #3]
 8018862:	2b08      	cmp	r3, #8
 8018864:	d103      	bne.n	801886e <phpalI18092mPI_Sw_Deselect+0x126>
            {
                bExpectedResponse = PHPAL_I18092MPI_SW_CMD_DSL_RES;
 8018866:	2309      	movs	r3, #9
 8018868:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 801886c:	e002      	b.n	8018874 <phpalI18092mPI_Sw_Deselect+0x12c>
            }
            else
            {
                bExpectedResponse = PHPAL_I18092MPI_SW_CMD_RLS_RES;
 801886e:	230b      	movs	r3, #11
 8018870:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            }

            /* Check for valid response frame. */
            PH_CHECK_SUCCESS_FCT(statusTmp, phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame(
 8018874:	6a39      	ldr	r1, [r7, #32]
 8018876:	8bfa      	ldrh	r2, [r7, #30]
 8018878:	f897 0034 	ldrb.w	r0, [r7, #52]	@ 0x34
 801887c:	f107 030e 	add.w	r3, r7, #14
 8018880:	9303      	str	r3, [sp, #12]
 8018882:	f107 0310 	add.w	r3, r7, #16
 8018886:	9302      	str	r3, [sp, #8]
 8018888:	f107 0316 	add.w	r3, r7, #22
 801888c:	9301      	str	r3, [sp, #4]
 801888e:	f107 0318 	add.w	r3, r7, #24
 8018892:	9300      	str	r3, [sp, #0]
 8018894:	4603      	mov	r3, r0
 8018896:	6878      	ldr	r0, [r7, #4]
 8018898:	f000 f88a 	bl	80189b0 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame>
 801889c:	4603      	mov	r3, r0
 801889e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80188a0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80188a2:	2b00      	cmp	r3, #0
 80188a4:	d001      	beq.n	80188aa <phpalI18092mPI_Sw_Deselect+0x162>
 80188a6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80188a8:	e037      	b.n	801891a <phpalI18092mPI_Sw_Deselect+0x1d2>
                &wFrameLength,
                &pPayload,
                &wPayloadLength));

            /* Check DID */
            if (pDataParams->bDid > 0U)
 80188aa:	687b      	ldr	r3, [r7, #4]
 80188ac:	7d1b      	ldrb	r3, [r3, #20]
 80188ae:	2b00      	cmp	r3, #0
 80188b0:	d00c      	beq.n	80188cc <phpalI18092mPI_Sw_Deselect+0x184>
            {
                /* Protocol error in case DID is not the same. NFCForum-TS-DigitalProtocol-1.0 section 14.9.2.1. */
                if ((wPayloadLength != 1U) || (pPayload[0] != pDataParams->bDid))
 80188b2:	89fb      	ldrh	r3, [r7, #14]
 80188b4:	2b01      	cmp	r3, #1
 80188b6:	d105      	bne.n	80188c4 <phpalI18092mPI_Sw_Deselect+0x17c>
 80188b8:	693b      	ldr	r3, [r7, #16]
 80188ba:	781a      	ldrb	r2, [r3, #0]
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	7d1b      	ldrb	r3, [r3, #20]
 80188c0:	429a      	cmp	r2, r3
 80188c2:	d024      	beq.n	801890e <phpalI18092mPI_Sw_Deselect+0x1c6>
                {
                    status = PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 80188c4:	f640 4306 	movw	r3, #3078	@ 0xc06
 80188c8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80188ca:	e020      	b.n	801890e <phpalI18092mPI_Sw_Deselect+0x1c6>
                }
            }
            else
            {
                /* DID must not be present in response. NFCForum-TS-DigitalProtocol-1.0 section 14.9.2.1. */
                if (wPayloadLength != 0U)
 80188cc:	89fb      	ldrh	r3, [r7, #14]
 80188ce:	2b00      	cmp	r3, #0
 80188d0:	d01d      	beq.n	801890e <phpalI18092mPI_Sw_Deselect+0x1c6>
                {
                    status = PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 80188d2:	f640 4306 	movw	r3, #3078	@ 0xc06
 80188d6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80188d8:	e019      	b.n	801890e <phpalI18092mPI_Sw_Deselect+0x1c6>
            }
        }
        else
        {
            /* Check if we shall perform a(nother) retry. */
            if (bRetryCount < pDataParams->bMaxRetryCount)
 80188da:	687b      	ldr	r3, [r7, #4]
 80188dc:	7f9b      	ldrb	r3, [r3, #30]
 80188de:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80188e2:	429a      	cmp	r2, r3
 80188e4:	d208      	bcs.n	80188f8 <phpalI18092mPI_Sw_Deselect+0x1b0>
            {
                ++bRetryCount;
 80188e6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80188ea:	3301      	adds	r3, #1
 80188ec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                bRetry = PH_ON;
 80188f0:	2301      	movs	r3, #1
 80188f2:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 80188f6:	e00a      	b.n	801890e <phpalI18092mPI_Sw_Deselect+0x1c6>
            }
            else
            {
                /* Return ERR_RECOVERY_FAILED if some response has been received before (bMaxRetryCount = 0 suppresses the retry behaviour) */
                if ((pDataParams->bMaxRetryCount > 0U) && (0u != bResponseReceived))
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	7f9b      	ldrb	r3, [r3, #30]
 80188fc:	2b00      	cmp	r3, #0
 80188fe:	d006      	beq.n	801890e <phpalI18092mPI_Sw_Deselect+0x1c6>
 8018900:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8018904:	2b00      	cmp	r3, #0
 8018906:	d002      	beq.n	801890e <phpalI18092mPI_Sw_Deselect+0x1c6>
                {
                    status = PH_ADD_COMPCODE_FIXED(PHPAL_I18092MPI_ERR_RECOVERY_FAILED, PH_COMP_PAL_I18092MPI);
 8018908:	f44f 6348 	mov.w	r3, #3200	@ 0xc80
 801890c:	86fb      	strh	r3, [r7, #54]	@ 0x36
                }
            }
        }
    }
    /* Retry loop */
    while (bRetry != PH_OFF);
 801890e:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8018912:	2b00      	cmp	r3, #0
 8018914:	f47f af73 	bne.w	80187fe <phpalI18092mPI_Sw_Deselect+0xb6>

    return status;
 8018918:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
}
 801891a:	4618      	mov	r0, r3
 801891c:	3738      	adds	r7, #56	@ 0x38
 801891e:	46bd      	mov	sp, r7
 8018920:	bd80      	pop	{r7, pc}
 8018922:	bf00      	nop
 8018924:	10624dd3 	.word	0x10624dd3

08018928 <phpalI18092mPI_Sw_WriteFrameHeader>:
        phpalI18092mPI_Sw_DataParams_t * pDataParams,
        uint16_t wOption,
        uint8_t bCommandCode,
        uint8_t bDataLength
)
{
 8018928:	b590      	push	{r4, r7, lr}
 801892a:	b087      	sub	sp, #28
 801892c:	af02      	add	r7, sp, #8
 801892e:	6078      	str	r0, [r7, #4]
 8018930:	4608      	mov	r0, r1
 8018932:	4611      	mov	r1, r2
 8018934:	461a      	mov	r2, r3
 8018936:	4603      	mov	r3, r0
 8018938:	807b      	strh	r3, [r7, #2]
 801893a:	460b      	mov	r3, r1
 801893c:	707b      	strb	r3, [r7, #1]
 801893e:	4613      	mov	r3, r2
 8018940:	703b      	strb	r3, [r7, #0]
    phStatus_t  PH_MEMLOC_REM status;
    uint8_t     PH_MEMLOC_REM aHeader[4];
    uint8_t     PH_MEMLOC_REM bLength = 0;
 8018942:	2300      	movs	r3, #0
 8018944:	73fb      	strb	r3, [r7, #15]

    /* Set LEN byte (includes the length itself). */
    aHeader[bLength++] = bDataLength + 3U;
 8018946:	7bfb      	ldrb	r3, [r7, #15]
 8018948:	1c5a      	adds	r2, r3, #1
 801894a:	73fa      	strb	r2, [r7, #15]
 801894c:	4619      	mov	r1, r3
 801894e:	783b      	ldrb	r3, [r7, #0]
 8018950:	3303      	adds	r3, #3
 8018952:	b2da      	uxtb	r2, r3
 8018954:	f101 0310 	add.w	r3, r1, #16
 8018958:	443b      	add	r3, r7
 801895a:	f803 2c08 	strb.w	r2, [r3, #-8]

    /* Only NFC initiator mode is supported so only requests are sent. */
    aHeader[bLength++] = PHPAL_I18092MPI_SW_CMD_REQUEST;
 801895e:	7bfb      	ldrb	r3, [r7, #15]
 8018960:	1c5a      	adds	r2, r3, #1
 8018962:	73fa      	strb	r2, [r7, #15]
 8018964:	3310      	adds	r3, #16
 8018966:	443b      	add	r3, r7
 8018968:	22d4      	movs	r2, #212	@ 0xd4
 801896a:	f803 2c08 	strb.w	r2, [r3, #-8]

    /* Set the command code. */
    aHeader[bLength++] = bCommandCode;
 801896e:	7bfb      	ldrb	r3, [r7, #15]
 8018970:	1c5a      	adds	r2, r3, #1
 8018972:	73fa      	strb	r2, [r7, #15]
 8018974:	3310      	adds	r3, #16
 8018976:	443b      	add	r3, r7
 8018978:	787a      	ldrb	r2, [r7, #1]
 801897a:	f803 2c08 	strb.w	r2, [r3, #-8]

    PH_CHECK_SUCCESS_FCT(status, phhalHw_Exchange(
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	6858      	ldr	r0, [r3, #4]
 8018982:	7bfb      	ldrb	r3, [r7, #15]
 8018984:	b29b      	uxth	r3, r3
 8018986:	f107 0208 	add.w	r2, r7, #8
 801898a:	8879      	ldrh	r1, [r7, #2]
 801898c:	2400      	movs	r4, #0
 801898e:	9401      	str	r4, [sp, #4]
 8018990:	2400      	movs	r4, #0
 8018992:	9400      	str	r4, [sp, #0]
 8018994:	f7f5 fb4a 	bl	800e02c <phhalHw_Pn5180_Exchange>
 8018998:	4603      	mov	r3, r0
 801899a:	81bb      	strh	r3, [r7, #12]
 801899c:	89bb      	ldrh	r3, [r7, #12]
 801899e:	2b00      	cmp	r3, #0
 80189a0:	d001      	beq.n	80189a6 <phpalI18092mPI_Sw_WriteFrameHeader+0x7e>
 80189a2:	89bb      	ldrh	r3, [r7, #12]
 80189a4:	e000      	b.n	80189a8 <phpalI18092mPI_Sw_WriteFrameHeader+0x80>
        aHeader,
        (uint16_t)bLength,
        NULL,
        NULL));

    return PH_ERR_SUCCESS;
 80189a6:	2300      	movs	r3, #0
}
 80189a8:	4618      	mov	r0, r3
 80189aa:	3714      	adds	r7, #20
 80189ac:	46bd      	mov	sp, r7
 80189ae:	bd90      	pop	{r4, r7, pc}

080189b0 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame>:
    uint8_t ** ppValidatedFrame,
    uint16_t * pValidatedFrameLength,
    uint8_t ** ppPayload,
    uint16_t * pPayloadLength
    )
{
 80189b0:	b480      	push	{r7}
 80189b2:	b087      	sub	sp, #28
 80189b4:	af00      	add	r7, sp, #0
 80189b6:	60f8      	str	r0, [r7, #12]
 80189b8:	60b9      	str	r1, [r7, #8]
 80189ba:	4611      	mov	r1, r2
 80189bc:	461a      	mov	r2, r3
 80189be:	460b      	mov	r3, r1
 80189c0:	80fb      	strh	r3, [r7, #6]
 80189c2:	4613      	mov	r3, r2
 80189c4:	717b      	strb	r3, [r7, #5]
    phStatus_t  PH_MEMLOC_REM bOffset = 0;
 80189c6:	2300      	movs	r3, #0
 80189c8:	82fb      	strh	r3, [r7, #22]
    uint8_t     PH_MEMLOC_REM bPfb;

    /* Check maximum frame length */
    if (wFrameLength > aI18092_mPI_FsTable[pDataParams->bLri])
 80189ca:	68fb      	ldr	r3, [r7, #12]
 80189cc:	7f1b      	ldrb	r3, [r3, #28]
 80189ce:	461a      	mov	r2, r3
 80189d0:	4b6d      	ldr	r3, [pc, #436]	@ (8018b88 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1d8>)
 80189d2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80189d6:	88fa      	ldrh	r2, [r7, #6]
 80189d8:	429a      	cmp	r2, r3
 80189da:	d902      	bls.n	80189e2 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x32>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 80189dc:	f640 4306 	movw	r3, #3078	@ 0xc06
 80189e0:	e0cb      	b.n	8018b7a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
    }

    /* Check minimum frame length */
    if (wFrameLength < PHPAL_I18092MPI_SW_MIN_FRAMESIZE)
 80189e2:	88fb      	ldrh	r3, [r7, #6]
 80189e4:	2b02      	cmp	r3, #2
 80189e6:	d802      	bhi.n	80189ee <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x3e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 80189e8:	f640 4306 	movw	r3, #3078	@ 0xc06
 80189ec:	e0c5      	b.n	8018b7a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
    }

    /* Remove Startbyte if present */
    *ppValidatedFrame = &pFrame[bOffset];
 80189ee:	8afb      	ldrh	r3, [r7, #22]
 80189f0:	68ba      	ldr	r2, [r7, #8]
 80189f2:	441a      	add	r2, r3
 80189f4:	6a3b      	ldr	r3, [r7, #32]
 80189f6:	601a      	str	r2, [r3, #0]
    *pValidatedFrameLength = wFrameLength - (uint16_t)bOffset;
 80189f8:	88fa      	ldrh	r2, [r7, #6]
 80189fa:	8afb      	ldrh	r3, [r7, #22]
 80189fc:	1ad3      	subs	r3, r2, r3
 80189fe:	b29a      	uxth	r2, r3
 8018a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a02:	801a      	strh	r2, [r3, #0]

    /* Compare length field with frame length. */
    if (pFrame[bOffset++] != (uint8_t)*pValidatedFrameLength)
 8018a04:	8afb      	ldrh	r3, [r7, #22]
 8018a06:	1c5a      	adds	r2, r3, #1
 8018a08:	82fa      	strh	r2, [r7, #22]
 8018a0a:	461a      	mov	r2, r3
 8018a0c:	68bb      	ldr	r3, [r7, #8]
 8018a0e:	4413      	add	r3, r2
 8018a10:	781a      	ldrb	r2, [r3, #0]
 8018a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a14:	881b      	ldrh	r3, [r3, #0]
 8018a16:	b2db      	uxtb	r3, r3
 8018a18:	429a      	cmp	r2, r3
 8018a1a:	d002      	beq.n	8018a22 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x72>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8018a1c:	f640 4306 	movw	r3, #3078	@ 0xc06
 8018a20:	e0ab      	b.n	8018b7a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
    }

    /* Check if the received frame is a reponse frame. */
    if (pFrame[bOffset++] != PHPAL_I18092MPI_SW_CMD_RESPONSE)
 8018a22:	8afb      	ldrh	r3, [r7, #22]
 8018a24:	1c5a      	adds	r2, r3, #1
 8018a26:	82fa      	strh	r2, [r7, #22]
 8018a28:	461a      	mov	r2, r3
 8018a2a:	68bb      	ldr	r3, [r7, #8]
 8018a2c:	4413      	add	r3, r2
 8018a2e:	781b      	ldrb	r3, [r3, #0]
 8018a30:	2bd5      	cmp	r3, #213	@ 0xd5
 8018a32:	d002      	beq.n	8018a3a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x8a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8018a34:	f640 4306 	movw	r3, #3078	@ 0xc06
 8018a38:	e09f      	b.n	8018b7a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
    }

    /* Check if expected response code matches the received response code. */
    if (pFrame[bOffset++] != bExpectedResponseCode)
 8018a3a:	8afb      	ldrh	r3, [r7, #22]
 8018a3c:	1c5a      	adds	r2, r3, #1
 8018a3e:	82fa      	strh	r2, [r7, #22]
 8018a40:	461a      	mov	r2, r3
 8018a42:	68bb      	ldr	r3, [r7, #8]
 8018a44:	4413      	add	r3, r2
 8018a46:	781b      	ldrb	r3, [r3, #0]
 8018a48:	797a      	ldrb	r2, [r7, #5]
 8018a4a:	429a      	cmp	r2, r3
 8018a4c:	d002      	beq.n	8018a54 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0xa4>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8018a4e:	f640 4306 	movw	r3, #3078	@ 0xc06
 8018a52:	e092      	b.n	8018b7a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
    }

    /* In case the response is a DEP PDU also check for presence of DID, NAD and PNI. */
    if (bExpectedResponseCode == PHPAL_I18092MPI_SW_CMD_DEP_RES)
 8018a54:	797b      	ldrb	r3, [r7, #5]
 8018a56:	2b07      	cmp	r3, #7
 8018a58:	f040 8083 	bne.w	8018b62 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1b2>
    {
        /* PFB should be present in frame. */
        if (wFrameLength < (bOffset + /* */ 1U))
 8018a5c:	88fa      	ldrh	r2, [r7, #6]
 8018a5e:	8afb      	ldrh	r3, [r7, #22]
 8018a60:	3301      	adds	r3, #1
 8018a62:	429a      	cmp	r2, r3
 8018a64:	d202      	bcs.n	8018a6c <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0xbc>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8018a66:	f640 4306 	movw	r3, #3078	@ 0xc06
 8018a6a:	e086      	b.n	8018b7a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
        }

        /* Retrieve PFB */
        bPfb = pFrame[bOffset++];
 8018a6c:	8afb      	ldrh	r3, [r7, #22]
 8018a6e:	1c5a      	adds	r2, r3, #1
 8018a70:	82fa      	strh	r2, [r7, #22]
 8018a72:	461a      	mov	r2, r3
 8018a74:	68bb      	ldr	r3, [r7, #8]
 8018a76:	4413      	add	r3, r2
 8018a78:	781b      	ldrb	r3, [r3, #0]
 8018a7a:	757b      	strb	r3, [r7, #21]

        /* DID enabled */
        if (pDataParams->bDid > 0U)
 8018a7c:	68fb      	ldr	r3, [r7, #12]
 8018a7e:	7d1b      	ldrb	r3, [r3, #20]
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	d01d      	beq.n	8018ac0 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x110>
        {
            /* DID presence should be indicated. */
            if ((0U == ((bPfb & PHPAL_I18092MPI_SW_PFB_DID_MASK))))
 8018a84:	7d7b      	ldrb	r3, [r7, #21]
 8018a86:	f003 0304 	and.w	r3, r3, #4
 8018a8a:	2b00      	cmp	r3, #0
 8018a8c:	d102      	bne.n	8018a94 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0xe4>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8018a8e:	f640 4306 	movw	r3, #3078	@ 0xc06
 8018a92:	e072      	b.n	8018b7a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
            }
            /* DID should be present in frame. */
            if (wFrameLength < (bOffset + /* */ 1U))
 8018a94:	88fa      	ldrh	r2, [r7, #6]
 8018a96:	8afb      	ldrh	r3, [r7, #22]
 8018a98:	3301      	adds	r3, #1
 8018a9a:	429a      	cmp	r2, r3
 8018a9c:	d202      	bcs.n	8018aa4 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0xf4>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8018a9e:	f640 4306 	movw	r3, #3078	@ 0xc06
 8018aa2:	e06a      	b.n	8018b7a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
            }
            /* DID should match. */
            if (pFrame[bOffset++] != pDataParams->bDid)
 8018aa4:	8afb      	ldrh	r3, [r7, #22]
 8018aa6:	1c5a      	adds	r2, r3, #1
 8018aa8:	82fa      	strh	r2, [r7, #22]
 8018aaa:	461a      	mov	r2, r3
 8018aac:	68bb      	ldr	r3, [r7, #8]
 8018aae:	4413      	add	r3, r2
 8018ab0:	781a      	ldrb	r2, [r3, #0]
 8018ab2:	68fb      	ldr	r3, [r7, #12]
 8018ab4:	7d1b      	ldrb	r3, [r3, #20]
 8018ab6:	429a      	cmp	r2, r3
 8018ab8:	d00a      	beq.n	8018ad0 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x120>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8018aba:	f640 4306 	movw	r3, #3078	@ 0xc06
 8018abe:	e05c      	b.n	8018b7a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
        }
        /* DID disabled */
        else
        {
            /* DID presence should not be indicated. */
            if (0U != (bPfb & PHPAL_I18092MPI_SW_PFB_DID_MASK))
 8018ac0:	7d7b      	ldrb	r3, [r7, #21]
 8018ac2:	f003 0304 	and.w	r3, r3, #4
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	d002      	beq.n	8018ad0 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x120>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8018aca:	f640 4306 	movw	r3, #3078	@ 0xc06
 8018ace:	e054      	b.n	8018b7a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
            }
        }

        /* Check NAD only for first PDU frames. */
        if ((0U == ((pDataParams->bStateNow & PHPAL_I18092MPI_SW_STATE_CHAINING_BIT))) &&
 8018ad0:	68fb      	ldr	r3, [r7, #12]
 8018ad2:	7cdb      	ldrb	r3, [r3, #19]
 8018ad4:	f003 0320 	and.w	r3, r3, #32
 8018ad8:	2b00      	cmp	r3, #0
 8018ada:	d12e      	bne.n	8018b3a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x18a>
            (0U == ((pDataParams->bStateNow & PHPAL_I18092MPI_SW_STATE_CHAINING_LAST_BIT))))
 8018adc:	68fb      	ldr	r3, [r7, #12]
 8018ade:	7cdb      	ldrb	r3, [r3, #19]
 8018ae0:	b25b      	sxtb	r3, r3
        if ((0U == ((pDataParams->bStateNow & PHPAL_I18092MPI_SW_STATE_CHAINING_BIT))) &&
 8018ae2:	2b00      	cmp	r3, #0
 8018ae4:	db29      	blt.n	8018b3a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x18a>
        {
            /* NAD enabled */
            if (0U != (pDataParams->bNadEnabled))
 8018ae6:	68fb      	ldr	r3, [r7, #12]
 8018ae8:	7d5b      	ldrb	r3, [r3, #21]
 8018aea:	2b00      	cmp	r3, #0
 8018aec:	d01d      	beq.n	8018b2a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x17a>
            {
                /* NAD presence should be indicated. */
                if ((0U == ((bPfb & PHPAL_I18092MPI_SW_PFB_NAD_MASK))))
 8018aee:	7d7b      	ldrb	r3, [r7, #21]
 8018af0:	f003 0308 	and.w	r3, r3, #8
 8018af4:	2b00      	cmp	r3, #0
 8018af6:	d102      	bne.n	8018afe <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x14e>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8018af8:	f640 4306 	movw	r3, #3078	@ 0xc06
 8018afc:	e03d      	b.n	8018b7a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
                }
                /* NAD should be present in frame. */
                if (wFrameLength < (bOffset + /* */ 1U))
 8018afe:	88fa      	ldrh	r2, [r7, #6]
 8018b00:	8afb      	ldrh	r3, [r7, #22]
 8018b02:	3301      	adds	r3, #1
 8018b04:	429a      	cmp	r2, r3
 8018b06:	d202      	bcs.n	8018b0e <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x15e>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8018b08:	f640 4306 	movw	r3, #3078	@ 0xc06
 8018b0c:	e035      	b.n	8018b7a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
                }
                /* NAD should match. */
                if (pFrame[bOffset++] != pDataParams->bNad)
 8018b0e:	8afb      	ldrh	r3, [r7, #22]
 8018b10:	1c5a      	adds	r2, r3, #1
 8018b12:	82fa      	strh	r2, [r7, #22]
 8018b14:	461a      	mov	r2, r3
 8018b16:	68bb      	ldr	r3, [r7, #8]
 8018b18:	4413      	add	r3, r2
 8018b1a:	781a      	ldrb	r2, [r3, #0]
 8018b1c:	68fb      	ldr	r3, [r7, #12]
 8018b1e:	7d9b      	ldrb	r3, [r3, #22]
 8018b20:	429a      	cmp	r2, r3
 8018b22:	d00a      	beq.n	8018b3a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x18a>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8018b24:	f640 4306 	movw	r3, #3078	@ 0xc06
 8018b28:	e027      	b.n	8018b7a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
            }
            /* NAD disabled */
            else
            {
                /* NAD presence should not be indicated. */
                if (0U != (bPfb & PHPAL_I18092MPI_SW_PFB_NAD_MASK))
 8018b2a:	7d7b      	ldrb	r3, [r7, #21]
 8018b2c:	f003 0308 	and.w	r3, r3, #8
 8018b30:	2b00      	cmp	r3, #0
 8018b32:	d002      	beq.n	8018b3a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x18a>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8018b34:	f640 4306 	movw	r3, #3078	@ 0xc06
 8018b38:	e01f      	b.n	8018b7a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
                }
            }
        }

        /* For information or ACK PDU also check for PNI. */
        switch (bPfb & PHPAL_I18092MPI_SW_PFB_PDU_TYPE_MASK)
 8018b3a:	7d7b      	ldrb	r3, [r7, #21]
 8018b3c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8018b40:	2b00      	cmp	r3, #0
 8018b42:	d001      	beq.n	8018b48 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x198>
 8018b44:	2b40      	cmp	r3, #64	@ 0x40
 8018b46:	d109      	bne.n	8018b5c <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ac>
        {
        case PHPAL_I18092MPI_SW_PFB_INFORMATION_PDU_MASK:
        case PHPAL_I18092MPI_SW_PFB_ACK_PDU_MASK:
            if ((bPfb & PHPAL_I18092MPI_SW_PFB_PNI_MASK) != pDataParams->bPni)
 8018b48:	7d7b      	ldrb	r3, [r7, #21]
 8018b4a:	f003 0303 	and.w	r3, r3, #3
 8018b4e:	68fa      	ldr	r2, [r7, #12]
 8018b50:	7e52      	ldrb	r2, [r2, #25]
 8018b52:	4293      	cmp	r3, r2
 8018b54:	d004      	beq.n	8018b60 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1b0>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8018b56:	f640 4306 	movw	r3, #3078	@ 0xc06
 8018b5a:	e00e      	b.n	8018b7a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
            }
            break;

        default:
            /* nothing. */
            break;
 8018b5c:	bf00      	nop
 8018b5e:	e000      	b.n	8018b62 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1b2>
            break;
 8018b60:	bf00      	nop
        }
    }

    /* Return Payload. */
    *ppPayload = &pFrame[bOffset];
 8018b62:	8afb      	ldrh	r3, [r7, #22]
 8018b64:	68ba      	ldr	r2, [r7, #8]
 8018b66:	441a      	add	r2, r3
 8018b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b6a:	601a      	str	r2, [r3, #0]
    *pPayloadLength = wFrameLength - bOffset;
 8018b6c:	88fa      	ldrh	r2, [r7, #6]
 8018b6e:	8afb      	ldrh	r3, [r7, #22]
 8018b70:	1ad3      	subs	r3, r2, r3
 8018b72:	b29a      	uxth	r2, r3
 8018b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018b76:	801a      	strh	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8018b78:	2300      	movs	r3, #0
}
 8018b7a:	4618      	mov	r0, r3
 8018b7c:	371c      	adds	r7, #28
 8018b7e:	46bd      	mov	sp, r7
 8018b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b84:	4770      	bx	lr
 8018b86:	bf00      	nop
 8018b88:	08023b48 	.word	0x08023b48

08018b8c <phpalI18092mPI_Sw_ConvertDatarate>:

phStatus_t phpalI18092mPI_Sw_ConvertDatarate(
    uint16_t wHalDatarate,
    uint8_t * pI18092Datarate
    )
{
 8018b8c:	b480      	push	{r7}
 8018b8e:	b083      	sub	sp, #12
 8018b90:	af00      	add	r7, sp, #0
 8018b92:	4603      	mov	r3, r0
 8018b94:	6039      	str	r1, [r7, #0]
 8018b96:	80fb      	strh	r3, [r7, #6]
    wHalDatarate = wHalDatarate & PHHAL_HW_RF_DATARATE_OPTION_MASK;
 8018b98:	88fb      	ldrh	r3, [r7, #6]
 8018b9a:	b2db      	uxtb	r3, r3
 8018b9c:	80fb      	strh	r3, [r7, #6]
    switch (wHalDatarate)
 8018b9e:	88fb      	ldrh	r3, [r7, #6]
 8018ba0:	2b02      	cmp	r3, #2
 8018ba2:	d00e      	beq.n	8018bc2 <phpalI18092mPI_Sw_ConvertDatarate+0x36>
 8018ba4:	2b02      	cmp	r3, #2
 8018ba6:	dc10      	bgt.n	8018bca <phpalI18092mPI_Sw_ConvertDatarate+0x3e>
 8018ba8:	2b00      	cmp	r3, #0
 8018baa:	d002      	beq.n	8018bb2 <phpalI18092mPI_Sw_ConvertDatarate+0x26>
 8018bac:	2b01      	cmp	r3, #1
 8018bae:	d004      	beq.n	8018bba <phpalI18092mPI_Sw_ConvertDatarate+0x2e>
 8018bb0:	e00b      	b.n	8018bca <phpalI18092mPI_Sw_ConvertDatarate+0x3e>
    {
    case PHHAL_HW_RF_DATARATE_106:
        *pI18092Datarate = PHPAL_I18092MPI_DATARATE_106;
 8018bb2:	683b      	ldr	r3, [r7, #0]
 8018bb4:	2200      	movs	r2, #0
 8018bb6:	701a      	strb	r2, [r3, #0]
        break;
 8018bb8:	e00a      	b.n	8018bd0 <phpalI18092mPI_Sw_ConvertDatarate+0x44>
    case PHHAL_HW_RF_DATARATE_212:
        *pI18092Datarate = PHPAL_I18092MPI_DATARATE_212;
 8018bba:	683b      	ldr	r3, [r7, #0]
 8018bbc:	2201      	movs	r2, #1
 8018bbe:	701a      	strb	r2, [r3, #0]
        break;
 8018bc0:	e006      	b.n	8018bd0 <phpalI18092mPI_Sw_ConvertDatarate+0x44>
    case PHHAL_HW_RF_DATARATE_424:
        *pI18092Datarate = PHPAL_I18092MPI_DATARATE_424;
 8018bc2:	683b      	ldr	r3, [r7, #0]
 8018bc4:	2202      	movs	r2, #2
 8018bc6:	701a      	strb	r2, [r3, #0]
        break;
 8018bc8:	e002      	b.n	8018bd0 <phpalI18092mPI_Sw_ConvertDatarate+0x44>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_PAL_I18092MPI);
 8018bca:	f640 4325 	movw	r3, #3109	@ 0xc25
 8018bce:	e000      	b.n	8018bd2 <phpalI18092mPI_Sw_ConvertDatarate+0x46>
    }

    return PH_ERR_SUCCESS;
 8018bd0:	2300      	movs	r3, #0
}
 8018bd2:	4618      	mov	r0, r3
 8018bd4:	370c      	adds	r7, #12
 8018bd6:	46bd      	mov	sp, r7
 8018bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bdc:	4770      	bx	lr
	...

08018be0 <phpalI18092mT_Sw_Init>:
    phpalI18092mT_Sw_DataParams_t * pDataParams,
    uint16_t wSizeOfDataParams,
    void * pHalDataParams,
    pRtoxTimerCallback pRtoxCallback
    )
{
 8018be0:	b580      	push	{r7, lr}
 8018be2:	b086      	sub	sp, #24
 8018be4:	af00      	add	r7, sp, #0
 8018be6:	60f8      	str	r0, [r7, #12]
 8018be8:	607a      	str	r2, [r7, #4]
 8018bea:	603b      	str	r3, [r7, #0]
 8018bec:	460b      	mov	r3, r1
 8018bee:	817b      	strh	r3, [r7, #10]
    phStatus_t PH_MEMLOC_REM wStatus = PH_ERR_SUCCESS;
 8018bf0:	2300      	movs	r3, #0
 8018bf2:	82fb      	strh	r3, [r7, #22]

    if (sizeof(phpalI18092mT_Sw_DataParams_t) != wSizeOfDataParams)
 8018bf4:	897b      	ldrh	r3, [r7, #10]
 8018bf6:	2b4c      	cmp	r3, #76	@ 0x4c
 8018bf8:	d002      	beq.n	8018c00 <phpalI18092mT_Sw_Init+0x20>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_I18092MT);
 8018bfa:	f44f 6352 	mov.w	r3, #3360	@ 0xd20
 8018bfe:	e02c      	b.n	8018c5a <phpalI18092mT_Sw_Init+0x7a>
    }
    PH_ASSERT_NULL (pDataParams);
 8018c00:	68fb      	ldr	r3, [r7, #12]
 8018c02:	2b00      	cmp	r3, #0
 8018c04:	d101      	bne.n	8018c0a <phpalI18092mT_Sw_Init+0x2a>
 8018c06:	2321      	movs	r3, #33	@ 0x21
 8018c08:	e027      	b.n	8018c5a <phpalI18092mT_Sw_Init+0x7a>
    PH_ASSERT_NULL (pHalDataParams);
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	2b00      	cmp	r3, #0
 8018c0e:	d101      	bne.n	8018c14 <phpalI18092mT_Sw_Init+0x34>
 8018c10:	2321      	movs	r3, #33	@ 0x21
 8018c12:	e022      	b.n	8018c5a <phpalI18092mT_Sw_Init+0x7a>

    /* Init private data */
    pDataParams->wId            = PH_COMP_PAL_I18092MT | PHPAL_I18092MT_SW_ID;
 8018c14:	68fb      	ldr	r3, [r7, #12]
 8018c16:	f640 5201 	movw	r2, #3329	@ 0xd01
 8018c1a:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams = pHalDataParams;
 8018c1c:	68fb      	ldr	r3, [r7, #12]
 8018c1e:	687a      	ldr	r2, [r7, #4]
 8018c20:	605a      	str	r2, [r3, #4]
    pDataParams->pRtoxCallback  = pRtoxCallback;
 8018c22:	68fb      	ldr	r3, [r7, #12]
 8018c24:	683a      	ldr	r2, [r7, #0]
 8018c26:	60da      	str	r2, [r3, #12]
    pDataParams->bCmdtype       = PHPAL_I18092MT_SW_CMD_RLS_REQ;
 8018c28:	68fb      	ldr	r3, [r7, #12]
 8018c2a:	220a      	movs	r2, #10
 8018c2c:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37

    /* Reset protocol to defaults */
    (void)phpalI18092mT_Sw_ResetProtocol(pDataParams);
 8018c30:	68f8      	ldr	r0, [r7, #12]
 8018c32:	f000 f819 	bl	8018c68 <phpalI18092mT_Sw_ResetProtocol>

    /* Check whether event is already created. */
    pDataParams->Pal18092mTEventObj.pEvtName = (uint8_t *)bmtEventName;
 8018c36:	68fb      	ldr	r3, [r7, #12]
 8018c38:	4a0a      	ldr	r2, [pc, #40]	@ (8018c64 <phpalI18092mT_Sw_Init+0x84>)
 8018c3a:	641a      	str	r2, [r3, #64]	@ 0x40
    pDataParams->Pal18092mTEventObj.intialValue = 0;
 8018c3c:	68fb      	ldr	r3, [r7, #12]
 8018c3e:	2200      	movs	r2, #0
 8018c40:	645a      	str	r2, [r3, #68]	@ 0x44
    wStatus = phOsal_EventCreate(&pDataParams->Pal18092mTEventObj.EventHandle, &pDataParams->Pal18092mTEventObj);
 8018c42:	68fb      	ldr	r3, [r7, #12]
 8018c44:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8018c48:	68fb      	ldr	r3, [r7, #12]
 8018c4a:	333c      	adds	r3, #60	@ 0x3c
 8018c4c:	4619      	mov	r1, r3
 8018c4e:	4610      	mov	r0, r2
 8018c50:	f001 fcde 	bl	801a610 <phOsal_EventCreate>
 8018c54:	4603      	mov	r3, r0
 8018c56:	82fb      	strh	r3, [r7, #22]

    return wStatus;
 8018c58:	8afb      	ldrh	r3, [r7, #22]
}
 8018c5a:	4618      	mov	r0, r3
 8018c5c:	3718      	adds	r7, #24
 8018c5e:	46bd      	mov	sp, r7
 8018c60:	bd80      	pop	{r7, pc}
 8018c62:	bf00      	nop
 8018c64:	08023b50 	.word	0x08023b50

08018c68 <phpalI18092mT_Sw_ResetProtocol>:
}

phStatus_t phpalI18092mT_Sw_ResetProtocol(
    phpalI18092mT_Sw_DataParams_t * pDataParams
    )
{
 8018c68:	b580      	push	{r7, lr}
 8018c6a:	b082      	sub	sp, #8
 8018c6c:	af00      	add	r7, sp, #0
 8018c6e:	6078      	str	r0, [r7, #4]
    /* Apply default parameters */
    pDataParams->bStateNow          = PHPAL_I18092MT_SW_STATE_INFORMATION_PDU_TX;
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	2200      	movs	r2, #0
 8018c74:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    pDataParams->bDid               = 0;    /* set DID to 0, i.e. disable usage of DID */
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	2200      	movs	r2, #0
 8018c7c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    pDataParams->bNadEnabled        = PH_OFF;
 8018c80:	687b      	ldr	r3, [r7, #4]
 8018c82:	2200      	movs	r2, #0
 8018c84:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    pDataParams->bNadVal            = 0;
 8018c88:	687b      	ldr	r3, [r7, #4]
 8018c8a:	2200      	movs	r2, #0
 8018c8c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    pDataParams->bFsl               = PHPAL_I18092MT_FRAMESIZE_64;
 8018c90:	687b      	ldr	r3, [r7, #4]
 8018c92:	2200      	movs	r2, #0
 8018c94:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    pDataParams->bPni               = 0;    /* NFCForum-TS-DigitalProtocol-1.0 section 14.12.3.1 */
 8018c98:	687b      	ldr	r3, [r7, #4]
 8018c9a:	2200      	movs	r2, #0
 8018c9c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
    pDataParams->bDst               = PHPAL_I18092MT_DATARATE_106;
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	2200      	movs	r2, #0
 8018ca4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    pDataParams->bDrt               = PHPAL_I18092MT_DATARATE_106;
 8018ca8:	687b      	ldr	r3, [r7, #4]
 8018caa:	2200      	movs	r2, #0
 8018cac:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    pDataParams->bBsi               = 0;
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	2200      	movs	r2, #0
 8018cb4:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
    pDataParams->bBri               = 0;
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	2200      	movs	r2, #0
 8018cbc:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
    pDataParams->bLri               = PHPAL_I18092MT_FRAMESIZE_64;
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	2200      	movs	r2, #0
 8018cc4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    pDataParams->bBst               = 0;
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	2200      	movs	r2, #0
 8018ccc:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    pDataParams->bBrt               = 0;
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	2200      	movs	r2, #0
 8018cd4:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    pDataParams->bLrt               = PHPAL_I18092MT_FRAMESIZE_64;
 8018cd8:	687b      	ldr	r3, [r7, #4]
 8018cda:	2200      	movs	r2, #0
 8018cdc:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    pDataParams->bTo                = 0;
 8018ce0:	687b      	ldr	r3, [r7, #4]
 8018ce2:	2200      	movs	r2, #0
 8018ce4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    pDataParams->bRtoxDisabled      = PH_OFF;
 8018ce8:	687b      	ldr	r3, [r7, #4]
 8018cea:	2200      	movs	r2, #0
 8018cec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    pDataParams->ovrTask            = NULL;
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	2200      	movs	r2, #0
 8018cf4:	609a      	str	r2, [r3, #8]
    pDataParams->bCmdtype           = PHPAL_I18092MT_SW_CMD_RLS_REQ;
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	220a      	movs	r2, #10
 8018cfa:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
    pDataParams->bRtoxExtnVal       = PHPAL_I18092MT_SW_MIN_RTOX_VALUE;
 8018cfe:	687b      	ldr	r3, [r7, #4]
 8018d00:	2201      	movs	r2, #1
 8018d02:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    pDataParams->wLastTxLen         = 0;
 8018d06:	687b      	ldr	r3, [r7, #4]
 8018d08:	2200      	movs	r2, #0
 8018d0a:	821a      	strh	r2, [r3, #16]
    pDataParams->bOpeMode           = RD_LIB_MODE_NFC;
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	2202      	movs	r2, #2
 8018d10:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    pDataParams->bPropPSLMode       = PH_OFF;
 8018d14:	687b      	ldr	r3, [r7, #4]
 8018d16:	2200      	movs	r2, #0
 8018d18:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    (void)memset(pDataParams->aNfcid3i, 0, PHPAL_I18092MT_NFCID3_LENGTH);
 8018d1c:	687b      	ldr	r3, [r7, #4]
 8018d1e:	3312      	adds	r3, #18
 8018d20:	220a      	movs	r2, #10
 8018d22:	2100      	movs	r1, #0
 8018d24:	4618      	mov	r0, r3
 8018d26:	f007 fdb5 	bl	8020894 <memset>
    (void)memset(pDataParams->aNfcid3t, 0, PHPAL_I18092MT_NFCID3_LENGTH);
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	331c      	adds	r3, #28
 8018d2e:	220a      	movs	r2, #10
 8018d30:	2100      	movs	r1, #0
 8018d32:	4618      	mov	r0, r3
 8018d34:	f007 fdae 	bl	8020894 <memset>

    return PH_ERR_SUCCESS;
 8018d38:	2300      	movs	r3, #0
}
 8018d3a:	4618      	mov	r0, r3
 8018d3c:	3708      	adds	r7, #8
 8018d3e:	46bd      	mov	sp, r7
 8018d40:	bd80      	pop	{r7, pc}

08018d42 <phpalMifare_Sw_Init>:
                               phpalMifare_Sw_DataParams_t * pDataParams,
                               uint16_t wSizeOfDataParams,
                               void * pHalDataParams,
                               void * pPalI14443p4DataParams
                               )
{
 8018d42:	b480      	push	{r7}
 8018d44:	b085      	sub	sp, #20
 8018d46:	af00      	add	r7, sp, #0
 8018d48:	60f8      	str	r0, [r7, #12]
 8018d4a:	607a      	str	r2, [r7, #4]
 8018d4c:	603b      	str	r3, [r7, #0]
 8018d4e:	460b      	mov	r3, r1
 8018d50:	817b      	strh	r3, [r7, #10]
    if (sizeof(phpalMifare_Sw_DataParams_t) != wSizeOfDataParams)
 8018d52:	897b      	ldrh	r3, [r7, #10]
 8018d54:	2b0c      	cmp	r3, #12
 8018d56:	d002      	beq.n	8018d5e <phpalMifare_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_MIFARE);
 8018d58:	f44f 63e4 	mov.w	r3, #1824	@ 0x720
 8018d5c:	e014      	b.n	8018d88 <phpalMifare_Sw_Init+0x46>
    }
    PH_ASSERT_NULL (pDataParams);
 8018d5e:	68fb      	ldr	r3, [r7, #12]
 8018d60:	2b00      	cmp	r3, #0
 8018d62:	d101      	bne.n	8018d68 <phpalMifare_Sw_Init+0x26>
 8018d64:	2321      	movs	r3, #33	@ 0x21
 8018d66:	e00f      	b.n	8018d88 <phpalMifare_Sw_Init+0x46>
    PH_ASSERT_NULL (pHalDataParams);
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	2b00      	cmp	r3, #0
 8018d6c:	d101      	bne.n	8018d72 <phpalMifare_Sw_Init+0x30>
 8018d6e:	2321      	movs	r3, #33	@ 0x21
 8018d70:	e00a      	b.n	8018d88 <phpalMifare_Sw_Init+0x46>

    /* init private data */
    pDataParams->wId                    = PH_COMP_PAL_MIFARE | PHPAL_MIFARE_SW_ID;
 8018d72:	68fb      	ldr	r3, [r7, #12]
 8018d74:	f240 7202 	movw	r2, #1794	@ 0x702
 8018d78:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams         = pHalDataParams;
 8018d7a:	68fb      	ldr	r3, [r7, #12]
 8018d7c:	687a      	ldr	r2, [r7, #4]
 8018d7e:	605a      	str	r2, [r3, #4]
    pDataParams->pPalI14443p4DataParams = pPalI14443p4DataParams;
 8018d80:	68fb      	ldr	r3, [r7, #12]
 8018d82:	683a      	ldr	r2, [r7, #0]
 8018d84:	609a      	str	r2, [r3, #8]
    return PH_ERR_SUCCESS;
 8018d86:	2300      	movs	r3, #0
}
 8018d88:	4618      	mov	r0, r3
 8018d8a:	3714      	adds	r7, #20
 8018d8c:	46bd      	mov	sp, r7
 8018d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d92:	4770      	bx	lr

08018d94 <phpalSli15693_Sw_Init>:
phStatus_t phpalSli15693_Sw_Init(
                                 phpalSli15693_Sw_DataParams_t * pDataParams,
                                 uint16_t wSizeOfDataParams,
                                 void * pHalDataParams
                                 )
{
 8018d94:	b480      	push	{r7}
 8018d96:	b085      	sub	sp, #20
 8018d98:	af00      	add	r7, sp, #0
 8018d9a:	60f8      	str	r0, [r7, #12]
 8018d9c:	460b      	mov	r3, r1
 8018d9e:	607a      	str	r2, [r7, #4]
 8018da0:	817b      	strh	r3, [r7, #10]
    PH_ASSERT_NULL (pDataParams);
 8018da2:	68fb      	ldr	r3, [r7, #12]
 8018da4:	2b00      	cmp	r3, #0
 8018da6:	d101      	bne.n	8018dac <phpalSli15693_Sw_Init+0x18>
 8018da8:	2321      	movs	r3, #33	@ 0x21
 8018daa:	e02d      	b.n	8018e08 <phpalSli15693_Sw_Init+0x74>
    PH_ASSERT_NULL (pHalDataParams);
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	2b00      	cmp	r3, #0
 8018db0:	d101      	bne.n	8018db6 <phpalSli15693_Sw_Init+0x22>
 8018db2:	2321      	movs	r3, #33	@ 0x21
 8018db4:	e028      	b.n	8018e08 <phpalSli15693_Sw_Init+0x74>

    /* parameter structure length check */
    if (sizeof(phpalSli15693_Sw_DataParams_t) != wSizeOfDataParams)
 8018db6:	897b      	ldrh	r3, [r7, #10]
 8018db8:	2b1c      	cmp	r3, #28
 8018dba:	d002      	beq.n	8018dc2 <phpalSli15693_Sw_Init+0x2e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_SLI15693);
 8018dbc:	f44f 6322 	mov.w	r3, #2592	@ 0xa20
 8018dc0:	e022      	b.n	8018e08 <phpalSli15693_Sw_Init+0x74>
    }

    /* init private data */
    pDataParams->wId                = PH_COMP_PAL_SLI15693 | PHPAL_SLI15693_SW_ID;
 8018dc2:	68fb      	ldr	r3, [r7, #12]
 8018dc4:	f640 2201 	movw	r2, #2561	@ 0xa01
 8018dc8:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams     = pHalDataParams;
 8018dca:	68fb      	ldr	r3, [r7, #12]
 8018dcc:	687a      	ldr	r2, [r7, #4]
 8018dce:	605a      	str	r2, [r3, #4]
    pDataParams->wAdditionalInfo    = 0;
 8018dd0:	68fb      	ldr	r3, [r7, #12]
 8018dd2:	2200      	movs	r2, #0
 8018dd4:	811a      	strh	r2, [r3, #8]
    pDataParams->bFlags             = PHPAL_SLI15693_SW_FLAGS_DEFAULT;
 8018dd6:	68fb      	ldr	r3, [r7, #12]
 8018dd8:	2206      	movs	r2, #6
 8018dda:	729a      	strb	r2, [r3, #10]
    pDataParams->bUidBitLength      = 0;
 8018ddc:	68fb      	ldr	r3, [r7, #12]
 8018dde:	2200      	movs	r2, #0
 8018de0:	751a      	strb	r2, [r3, #20]
    pDataParams->bExplicitlyAddressed = 0;
 8018de2:	68fb      	ldr	r3, [r7, #12]
 8018de4:	2200      	movs	r2, #0
 8018de6:	755a      	strb	r2, [r3, #21]
    pDataParams->bOpeMode           = RD_LIB_MODE_ISO; /* Default Mode is ISO */
 8018de8:	68fb      	ldr	r3, [r7, #12]
 8018dea:	2203      	movs	r2, #3
 8018dec:	759a      	strb	r2, [r3, #22]
    pDataParams->bBuffering         = 0;
 8018dee:	68fb      	ldr	r3, [r7, #12]
 8018df0:	2200      	movs	r2, #0
 8018df2:	75da      	strb	r2, [r3, #23]
    pDataParams->bMaxRetryCount     = PHPAL_SLI15693_SW_RETRYCOUNT_DEFAULT;
 8018df4:	68fb      	ldr	r3, [r7, #12]
 8018df6:	2202      	movs	r2, #2
 8018df8:	761a      	strb	r2, [r3, #24]
    pDataParams->bIcMfgCode         = PHPAL_SLI15693_SW_NXP_MFG_CODE;
 8018dfa:	68fb      	ldr	r3, [r7, #12]
 8018dfc:	2204      	movs	r2, #4
 8018dfe:	765a      	strb	r2, [r3, #25]
    pDataParams->bResFlags          = 0;
 8018e00:	68fb      	ldr	r3, [r7, #12]
 8018e02:	2200      	movs	r2, #0
 8018e04:	72da      	strb	r2, [r3, #11]

    return PH_ERR_SUCCESS;
 8018e06:	2300      	movs	r3, #0
}
 8018e08:	4618      	mov	r0, r3
 8018e0a:	3714      	adds	r7, #20
 8018e0c:	46bd      	mov	sp, r7
 8018e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e12:	4770      	bx	lr

08018e14 <phpalSli15693_Sw_Inventory>:
                                      uint8_t * pMask,
                                      uint8_t bMaskBitLength,
                                      uint8_t * pDsfid,
                                      uint8_t * pUid
                                      )
{
 8018e14:	b580      	push	{r7, lr}
 8018e16:	b08e      	sub	sp, #56	@ 0x38
 8018e18:	af08      	add	r7, sp, #32
 8018e1a:	60f8      	str	r0, [r7, #12]
 8018e1c:	607b      	str	r3, [r7, #4]
 8018e1e:	460b      	mov	r3, r1
 8018e20:	72fb      	strb	r3, [r7, #11]
 8018e22:	4613      	mov	r3, r2
 8018e24:	72bb      	strb	r3, [r7, #10]
    uint8_t     PH_MEMLOC_REM bUidLength;
    uint16_t    PH_MEMLOC_REM wDataLength = 0;
 8018e26:	2300      	movs	r3, #0
 8018e28:	82bb      	strh	r3, [r7, #20]

    return phpalSli15693_Sw_InventoryEx(
 8018e2a:	7ab9      	ldrb	r1, [r7, #10]
 8018e2c:	7afa      	ldrb	r2, [r7, #11]
 8018e2e:	f107 0314 	add.w	r3, r7, #20
 8018e32:	9307      	str	r3, [sp, #28]
 8018e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e36:	9306      	str	r3, [sp, #24]
 8018e38:	f107 0317 	add.w	r3, r7, #23
 8018e3c:	9305      	str	r3, [sp, #20]
 8018e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e40:	9304      	str	r3, [sp, #16]
 8018e42:	2300      	movs	r3, #0
 8018e44:	9303      	str	r3, [sp, #12]
 8018e46:	2300      	movs	r3, #0
 8018e48:	9302      	str	r3, [sp, #8]
 8018e4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018e4e:	9301      	str	r3, [sp, #4]
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	9300      	str	r3, [sp, #0]
 8018e54:	460b      	mov	r3, r1
 8018e56:	2101      	movs	r1, #1
 8018e58:	68f8      	ldr	r0, [r7, #12]
 8018e5a:	f000 fe63 	bl	8019b24 <phpalSli15693_Sw_InventoryEx>
 8018e5e:	4603      	mov	r3, r0
        0,
        pUid,
        &bUidLength,
        pDsfid,
        &wDataLength);
}
 8018e60:	4618      	mov	r0, r3
 8018e62:	3718      	adds	r7, #24
 8018e64:	46bd      	mov	sp, r7
 8018e66:	bd80      	pop	{r7, pc}

08018e68 <phpalSli15693_Sw_SendEof>:
                                    uint8_t * pUid,
                                    uint8_t * pUidLength,
                                    uint8_t * pData,
                                    uint16_t * pDataLength
                                    )
{
 8018e68:	b580      	push	{r7, lr}
 8018e6a:	b08a      	sub	sp, #40	@ 0x28
 8018e6c:	af02      	add	r7, sp, #8
 8018e6e:	60f8      	str	r0, [r7, #12]
 8018e70:	607a      	str	r2, [r7, #4]
 8018e72:	603b      	str	r3, [r7, #0]
 8018e74:	460b      	mov	r3, r1
 8018e76:	72fb      	strb	r3, [r7, #11]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8018e78:	2300      	movs	r3, #0
 8018e7a:	617b      	str	r3, [r7, #20]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8018e7c:	2300      	movs	r3, #0
 8018e7e:	827b      	strh	r3, [r7, #18]
    uint8_t     PH_MEMLOC_REM bStoredUidLength;
    uint16_t    PH_MEMLOC_REM wAsk;
    uint16_t    PH_MEMLOC_REM wTimeout;

    /* Check bOption */
    switch (bOption)
 8018e80:	7afb      	ldrb	r3, [r7, #11]
 8018e82:	2b03      	cmp	r3, #3
 8018e84:	d902      	bls.n	8018e8c <phpalSli15693_Sw_SendEof+0x24>
    case PHPAL_SLI15693_EOF_NEXT_SLOT_INV_READ:
    case PHPAL_SLI15693_EOF_WRITE_ALIKE:
    case PHPAL_SLI15693_EOF_WRITE_ALIKE_WITH_WAIT:
        break;
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 8018e86:	f640 2321 	movw	r3, #2593	@ 0xa21
 8018e8a:	e1c1      	b.n	8019210 <phpalSli15693_Sw_SendEof+0x3a8>
        break;
 8018e8c:	bf00      	nop
    }

    /* Reset UID and data lengths */
    *pDsfid = 0;
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	2200      	movs	r2, #0
 8018e92:	701a      	strb	r2, [r3, #0]
    *pUidLength = 0;
 8018e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e96:	2200      	movs	r2, #0
 8018e98:	701a      	strb	r2, [r3, #0]
    *pDataLength = 0;
 8018e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018e9c:	2200      	movs	r2, #0
 8018e9e:	801a      	strh	r2, [r3, #0]

    /* if requested, wait ~20ms upon sending EOF */
    if (bOption == PHPAL_SLI15693_EOF_WRITE_ALIKE_WITH_WAIT)
 8018ea0:	7afb      	ldrb	r3, [r7, #11]
 8018ea2:	2b03      	cmp	r3, #3
 8018ea4:	d10e      	bne.n	8018ec4 <phpalSli15693_Sw_SendEof+0x5c>
    {
        /* in case of write alike commands wait 20 ms. */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 8018ea6:	68fb      	ldr	r3, [r7, #12]
 8018ea8:	685b      	ldr	r3, [r3, #4]
 8018eaa:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8018eae:	2100      	movs	r1, #0
 8018eb0:	4618      	mov	r0, r3
 8018eb2:	f7f5 fbb7 	bl	800e624 <phhalHw_Pn5180_Wait>
 8018eb6:	4603      	mov	r3, r0
 8018eb8:	83bb      	strh	r3, [r7, #28]
 8018eba:	8bbb      	ldrh	r3, [r7, #28]
 8018ebc:	2b00      	cmp	r3, #0
 8018ebe:	d001      	beq.n	8018ec4 <phpalSli15693_Sw_SendEof+0x5c>
 8018ec0:	8bbb      	ldrh	r3, [r7, #28]
 8018ec2:	e1a5      	b.n	8019210 <phpalSli15693_Sw_SendEof+0x3a8>
            PHHAL_HW_TIME_MICROSECONDS,
            PHPAL_SLI15693_TIMEOUT_LONG_US));
    }

    /* Get the ASK 100 Condition */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 8018ec4:	68fb      	ldr	r3, [r7, #12]
 8018ec6:	685b      	ldr	r3, [r3, #4]
 8018ec8:	f107 0210 	add.w	r2, r7, #16
 8018ecc:	210c      	movs	r1, #12
 8018ece:	4618      	mov	r0, r3
 8018ed0:	f7f7 f8b0 	bl	8010034 <phhalHw_Pn5180_GetConfig>
 8018ed4:	4603      	mov	r3, r0
 8018ed6:	83bb      	strh	r3, [r7, #28]
 8018ed8:	8bbb      	ldrh	r3, [r7, #28]
 8018eda:	2b00      	cmp	r3, #0
 8018edc:	d001      	beq.n	8018ee2 <phpalSli15693_Sw_SendEof+0x7a>
 8018ede:	8bbb      	ldrh	r3, [r7, #28]
 8018ee0:	e196      	b.n	8019210 <phpalSli15693_Sw_SendEof+0x3a8>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_ASK100,
        &wAsk));

    if(bOption == PHPAL_SLI15693_EOF_NEXT_SLOT)
 8018ee2:	7afb      	ldrb	r3, [r7, #11]
 8018ee4:	2b00      	cmp	r3, #0
 8018ee6:	d12a      	bne.n	8018f3e <phpalSli15693_Sw_SendEof+0xd6>
    {
        if(0U != (wAsk))
 8018ee8:	8a3b      	ldrh	r3, [r7, #16]
 8018eea:	2b00      	cmp	r3, #0
 8018eec:	d00d      	beq.n	8018f0a <phpalSli15693_Sw_SendEof+0xa2>
        {
            if(0U != (pDataParams->bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 8018eee:	68fb      	ldr	r3, [r7, #12]
 8018ef0:	7a9b      	ldrb	r3, [r3, #10]
 8018ef2:	f003 0302 	and.w	r3, r3, #2
 8018ef6:	2b00      	cmp	r3, #0
 8018ef8:	d003      	beq.n	8018f02 <phpalSli15693_Sw_SendEof+0x9a>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_HIGH_SOF_US;
 8018efa:	f44f 73ee 	mov.w	r3, #476	@ 0x1dc
 8018efe:	83fb      	strh	r3, [r7, #30]
 8018f00:	e010      	b.n	8018f24 <phpalSli15693_Sw_SendEof+0xbc>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_LOW_SOF_US;
 8018f02:	f240 33a1 	movw	r3, #929	@ 0x3a1
 8018f06:	83fb      	strh	r3, [r7, #30]
 8018f08:	e00c      	b.n	8018f24 <phpalSli15693_Sw_SendEof+0xbc>
            }
        }
        else
        {
            if(0U != (pDataParams->bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 8018f0a:	68fb      	ldr	r3, [r7, #12]
 8018f0c:	7a9b      	ldrb	r3, [r3, #10]
 8018f0e:	f003 0302 	and.w	r3, r3, #2
 8018f12:	2b00      	cmp	r3, #0
 8018f14:	d003      	beq.n	8018f1e <phpalSli15693_Sw_SendEof+0xb6>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_HIGH_NRT_US;
 8018f16:	f241 039c 	movw	r3, #4252	@ 0x109c
 8018f1a:	83fb      	strh	r3, [r7, #30]
 8018f1c:	e002      	b.n	8018f24 <phpalSli15693_Sw_SendEof+0xbc>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_LOW_NRT_US;
 8018f1e:	f643 63a1 	movw	r3, #16033	@ 0x3ea1
 8018f22:	83fb      	strh	r3, [r7, #30]
            }
        }
        /* Set  timeout. */
        PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 8018f24:	8bfb      	ldrh	r3, [r7, #30]
 8018f26:	461a      	mov	r2, r3
 8018f28:	2102      	movs	r1, #2
 8018f2a:	68f8      	ldr	r0, [r7, #12]
 8018f2c:	f000 faf8 	bl	8019520 <phpalSli15693_Sw_SetConfig>
 8018f30:	4603      	mov	r3, r0
 8018f32:	83bb      	strh	r3, [r7, #28]
 8018f34:	8bbb      	ldrh	r3, [r7, #28]
 8018f36:	2b00      	cmp	r3, #0
 8018f38:	d04b      	beq.n	8018fd2 <phpalSli15693_Sw_SendEof+0x16a>
 8018f3a:	8bbb      	ldrh	r3, [r7, #28]
 8018f3c:	e168      	b.n	8019210 <phpalSli15693_Sw_SendEof+0x3a8>
            pDataParams,
            PHPAL_SLI15693_CONFIG_TIMEOUT_US,
            wTimeout));
    }
    else if(bOption == PHPAL_SLI15693_EOF_NEXT_SLOT_INV_READ)
 8018f3e:	7afb      	ldrb	r3, [r7, #11]
 8018f40:	2b01      	cmp	r3, #1
 8018f42:	d12a      	bne.n	8018f9a <phpalSli15693_Sw_SendEof+0x132>
    {
        if(0U != (wAsk))
 8018f44:	8a3b      	ldrh	r3, [r7, #16]
 8018f46:	2b00      	cmp	r3, #0
 8018f48:	d00d      	beq.n	8018f66 <phpalSli15693_Sw_SendEof+0xfe>
        {
            if(0U != (pDataParams->bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 8018f4a:	68fb      	ldr	r3, [r7, #12]
 8018f4c:	7a9b      	ldrb	r3, [r3, #10]
 8018f4e:	f003 0302 	and.w	r3, r3, #2
 8018f52:	2b00      	cmp	r3, #0
 8018f54:	d003      	beq.n	8018f5e <phpalSli15693_Sw_SendEof+0xf6>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTHIGH_SOF_US;
 8018f56:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8018f5a:	83fb      	strh	r3, [r7, #30]
 8018f5c:	e010      	b.n	8018f80 <phpalSli15693_Sw_SendEof+0x118>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTLOW_SOF_US;
 8018f5e:	f240 2373 	movw	r3, #627	@ 0x273
 8018f62:	83fb      	strh	r3, [r7, #30]
 8018f64:	e00c      	b.n	8018f80 <phpalSli15693_Sw_SendEof+0x118>
            }
        }
        else
        {
            if(0U != (pDataParams->bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 8018f66:	68fb      	ldr	r3, [r7, #12]
 8018f68:	7a9b      	ldrb	r3, [r3, #10]
 8018f6a:	f003 0302 	and.w	r3, r3, #2
 8018f6e:	2b00      	cmp	r3, #0
 8018f70:	d003      	beq.n	8018f7a <phpalSli15693_Sw_SendEof+0x112>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTHIGH_NRT_US;
 8018f72:	f44f 630f 	mov.w	r3, #2288	@ 0x8f0
 8018f76:	83fb      	strh	r3, [r7, #30]
 8018f78:	e002      	b.n	8018f80 <phpalSli15693_Sw_SendEof+0x118>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTLOW_NRT_US;
 8018f7a:	f641 73f3 	movw	r3, #8179	@ 0x1ff3
 8018f7e:	83fb      	strh	r3, [r7, #30]
            }
        }

        /* Set  timeout. */
        PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 8018f80:	8bfb      	ldrh	r3, [r7, #30]
 8018f82:	461a      	mov	r2, r3
 8018f84:	2102      	movs	r1, #2
 8018f86:	68f8      	ldr	r0, [r7, #12]
 8018f88:	f000 faca 	bl	8019520 <phpalSli15693_Sw_SetConfig>
 8018f8c:	4603      	mov	r3, r0
 8018f8e:	83bb      	strh	r3, [r7, #28]
 8018f90:	8bbb      	ldrh	r3, [r7, #28]
 8018f92:	2b00      	cmp	r3, #0
 8018f94:	d01d      	beq.n	8018fd2 <phpalSli15693_Sw_SendEof+0x16a>
 8018f96:	8bbb      	ldrh	r3, [r7, #28]
 8018f98:	e13a      	b.n	8019210 <phpalSli15693_Sw_SendEof+0x3a8>
            PHPAL_SLI15693_CONFIG_TIMEOUT_US,
            wTimeout));
    }
    else
    {
        if(pDataParams->bOpeMode == RD_LIB_MODE_NFC)
 8018f9a:	68fb      	ldr	r3, [r7, #12]
 8018f9c:	7d9b      	ldrb	r3, [r3, #22]
 8018f9e:	2b02      	cmp	r3, #2
 8018fa0:	d10b      	bne.n	8018fba <phpalSli15693_Sw_SendEof+0x152>
        {
            /* Set FDT time max2(19.95ms) + Tolerance(Delta) Timeout(50ms). */
            PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 8018fa2:	2246      	movs	r2, #70	@ 0x46
 8018fa4:	2103      	movs	r1, #3
 8018fa6:	68f8      	ldr	r0, [r7, #12]
 8018fa8:	f000 faba 	bl	8019520 <phpalSli15693_Sw_SetConfig>
 8018fac:	4603      	mov	r3, r0
 8018fae:	83bb      	strh	r3, [r7, #28]
 8018fb0:	8bbb      	ldrh	r3, [r7, #28]
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	d00d      	beq.n	8018fd2 <phpalSli15693_Sw_SendEof+0x16a>
 8018fb6:	8bbb      	ldrh	r3, [r7, #28]
 8018fb8:	e12a      	b.n	8019210 <phpalSli15693_Sw_SendEof+0x3a8>
                (((PHPAL_SLI15693_TIMEOUT_MAX2_US + PHPAL_SLI15693_NFC_MODE_TIMEOUT_DELTA_US) / 1000) + ((((PHPAL_SLI15693_TIMEOUT_MAX2_US + PHPAL_SLI15693_NFC_MODE_TIMEOUT_DELTA_US) % 1000) > 500) ? 1 : 0))));
        }
        else
        {
            /* Set FDT time max2(19.95ms) + Tolerance(Delta) Timeout. */
            PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 8018fba:	2214      	movs	r2, #20
 8018fbc:	2103      	movs	r1, #3
 8018fbe:	68f8      	ldr	r0, [r7, #12]
 8018fc0:	f000 faae 	bl	8019520 <phpalSli15693_Sw_SetConfig>
 8018fc4:	4603      	mov	r3, r0
 8018fc6:	83bb      	strh	r3, [r7, #28]
 8018fc8:	8bbb      	ldrh	r3, [r7, #28]
 8018fca:	2b00      	cmp	r3, #0
 8018fcc:	d001      	beq.n	8018fd2 <phpalSli15693_Sw_SendEof+0x16a>
 8018fce:	8bbb      	ldrh	r3, [r7, #28]
 8018fd0:	e11e      	b.n	8019210 <phpalSli15693_Sw_SendEof+0x3a8>
                (((PHPAL_SLI15693_TIMEOUT_MAX2_US + PHPAL_SLI15693_ISO_MODE_TIMEOUT_DELTA_US) / 1000) + ((((PHPAL_SLI15693_TIMEOUT_MAX2_US + PHPAL_SLI15693_ISO_MODE_TIMEOUT_DELTA_US) % 1000) > 500) ? 1 : 0))));
        }
    }

    /* Disable SOF, so only EOF is sent */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8018fd2:	68fb      	ldr	r3, [r7, #12]
 8018fd4:	685b      	ldr	r3, [r3, #4]
 8018fd6:	2200      	movs	r2, #0
 8018fd8:	2115      	movs	r1, #21
 8018fda:	4618      	mov	r0, r3
 8018fdc:	f7f5 fbdc 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8018fe0:	4603      	mov	r3, r0
 8018fe2:	83bb      	strh	r3, [r7, #28]
 8018fe4:	8bbb      	ldrh	r3, [r7, #28]
 8018fe6:	2b00      	cmp	r3, #0
 8018fe8:	d001      	beq.n	8018fee <phpalSli15693_Sw_SendEof+0x186>
 8018fea:	8bbb      	ldrh	r3, [r7, #28]
 8018fec:	e110      	b.n	8019210 <phpalSli15693_Sw_SendEof+0x3a8>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_SYMBOL_START,
        PH_OFF));

    /* Exchange command */
    status = phhalHw_Exchange(
 8018fee:	68fb      	ldr	r3, [r7, #12]
 8018ff0:	6858      	ldr	r0, [r3, #4]
 8018ff2:	f107 0312 	add.w	r3, r7, #18
 8018ff6:	9301      	str	r3, [sp, #4]
 8018ff8:	f107 0314 	add.w	r3, r7, #20
 8018ffc:	9300      	str	r3, [sp, #0]
 8018ffe:	2300      	movs	r3, #0
 8019000:	2200      	movs	r2, #0
 8019002:	2100      	movs	r1, #0
 8019004:	f7f5 f812 	bl	800e02c <phhalHw_Pn5180_Exchange>
 8019008:	4603      	mov	r3, r0
 801900a:	837b      	strh	r3, [r7, #26]
        0,
        &pResp,
        &wRespLength);

    /* Reset HAL to send SOF and EOF */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801900c:	68fb      	ldr	r3, [r7, #12]
 801900e:	685b      	ldr	r3, [r3, #4]
 8019010:	2205      	movs	r2, #5
 8019012:	2115      	movs	r1, #21
 8019014:	4618      	mov	r0, r3
 8019016:	f7f5 fbbf 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 801901a:	4603      	mov	r3, r0
 801901c:	83bb      	strh	r3, [r7, #28]
 801901e:	8bbb      	ldrh	r3, [r7, #28]
 8019020:	2b00      	cmp	r3, #0
 8019022:	d001      	beq.n	8019028 <phpalSli15693_Sw_SendEof+0x1c0>
 8019024:	8bbb      	ldrh	r3, [r7, #28]
 8019026:	e0f3      	b.n	8019210 <phpalSli15693_Sw_SendEof+0x3a8>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_SYMBOL_START,
        PHHAL_HW_SYMBOL_I15693_SOF));

    /* Check Success */
    PH_CHECK_SUCCESS(status);
 8019028:	8b7b      	ldrh	r3, [r7, #26]
 801902a:	2b00      	cmp	r3, #0
 801902c:	d001      	beq.n	8019032 <phpalSli15693_Sw_SendEof+0x1ca>
 801902e:	8b7b      	ldrh	r3, [r7, #26]
 8019030:	e0ee      	b.n	8019210 <phpalSli15693_Sw_SendEof+0x3a8>

    /* Check RespLength */
    if (wRespLength == 0U)
 8019032:	8a7b      	ldrh	r3, [r7, #18]
 8019034:	2b00      	cmp	r3, #0
 8019036:	d102      	bne.n	801903e <phpalSli15693_Sw_SendEof+0x1d6>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 8019038:	f640 2306 	movw	r3, #2566	@ 0xa06
 801903c:	e0e8      	b.n	8019210 <phpalSli15693_Sw_SendEof+0x3a8>
    }

    /* check error flag */
    if (0U != (pResp[0] & PHPAL_SLI15693_FLAG_RESP_ERROR))
 801903e:	697b      	ldr	r3, [r7, #20]
 8019040:	781b      	ldrb	r3, [r3, #0]
 8019042:	f003 0301 	and.w	r3, r3, #1
 8019046:	2b00      	cmp	r3, #0
 8019048:	d00e      	beq.n	8019068 <phpalSli15693_Sw_SendEof+0x200>
    {
        /* check the length in case of error */
        if (wRespLength != 2U)
 801904a:	8a7b      	ldrh	r3, [r7, #18]
 801904c:	2b02      	cmp	r3, #2
 801904e:	d002      	beq.n	8019056 <phpalSli15693_Sw_SendEof+0x1ee>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 8019050:	f640 2306 	movw	r3, #2566	@ 0xa06
 8019054:	e0dc      	b.n	8019210 <phpalSli15693_Sw_SendEof+0x3a8>
        }

        pDataParams->wAdditionalInfo = pResp[1];
 8019056:	697b      	ldr	r3, [r7, #20]
 8019058:	3301      	adds	r3, #1
 801905a:	781b      	ldrb	r3, [r3, #0]
 801905c:	461a      	mov	r2, r3
 801905e:	68fb      	ldr	r3, [r7, #12]
 8019060:	811a      	strh	r2, [r3, #8]
        return PH_ADD_COMPCODE_FIXED(PHPAL_SLI15693_ERR_ISO15693, PH_COMP_PAL_SLI15693);
 8019062:	f44f 6328 	mov.w	r3, #2688	@ 0xa80
 8019066:	e0d3      	b.n	8019210 <phpalSli15693_Sw_SendEof+0x3a8>
    }

    if (bOption == PHPAL_SLI15693_EOF_NEXT_SLOT)
 8019068:	7afb      	ldrb	r3, [r7, #11]
 801906a:	2b00      	cmp	r3, #0
 801906c:	d13d      	bne.n	80190ea <phpalSli15693_Sw_SendEof+0x282>
    {
        /* ignore flag byte */
        ++pResp;
 801906e:	697b      	ldr	r3, [r7, #20]
 8019070:	3301      	adds	r3, #1
 8019072:	617b      	str	r3, [r7, #20]
        --wRespLength;
 8019074:	8a7b      	ldrh	r3, [r7, #18]
 8019076:	3b01      	subs	r3, #1
 8019078:	b29b      	uxth	r3, r3
 801907a:	827b      	strh	r3, [r7, #18]

        /* the UID is only returned on a next slot command. */
        if (wRespLength != (1u + PHPAL_SLI15693_UID_LENGTH))
 801907c:	8a7b      	ldrh	r3, [r7, #18]
 801907e:	2b09      	cmp	r3, #9
 8019080:	d002      	beq.n	8019088 <phpalSli15693_Sw_SendEof+0x220>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 8019082:	f640 2306 	movw	r3, #2566	@ 0xa06
 8019086:	e0c3      	b.n	8019210 <phpalSli15693_Sw_SendEof+0x3a8>
        }

        /* wait T2 */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 8019088:	68fb      	ldr	r3, [r7, #12]
 801908a:	685b      	ldr	r3, [r3, #4]
 801908c:	f44f 729b 	mov.w	r2, #310	@ 0x136
 8019090:	2100      	movs	r1, #0
 8019092:	4618      	mov	r0, r3
 8019094:	f7f5 fac6 	bl	800e624 <phhalHw_Pn5180_Wait>
 8019098:	4603      	mov	r3, r0
 801909a:	83bb      	strh	r3, [r7, #28]
 801909c:	8bbb      	ldrh	r3, [r7, #28]
 801909e:	2b00      	cmp	r3, #0
 80190a0:	d001      	beq.n	80190a6 <phpalSli15693_Sw_SendEof+0x23e>
 80190a2:	8bbb      	ldrh	r3, [r7, #28]
 80190a4:	e0b4      	b.n	8019210 <phpalSli15693_Sw_SendEof+0x3a8>
            pDataParams->pHalDataParams,
            PHHAL_HW_TIME_MICROSECONDS,
            PHPAL_SLI15693_SW_T2_WAITING_TIME));

        /* Copy the DSFID to the data buffer */
        *pDsfid = pResp[0];
 80190a6:	697b      	ldr	r3, [r7, #20]
 80190a8:	781a      	ldrb	r2, [r3, #0]
 80190aa:	687b      	ldr	r3, [r7, #4]
 80190ac:	701a      	strb	r2, [r3, #0]

        /* retrieve the UID */
        (void)memcpy(pDataParams->pUid, &pResp[1], PHPAL_SLI15693_UID_LENGTH);
 80190ae:	68fb      	ldr	r3, [r7, #12]
 80190b0:	f103 000c 	add.w	r0, r3, #12
 80190b4:	697b      	ldr	r3, [r7, #20]
 80190b6:	3301      	adds	r3, #1
 80190b8:	2208      	movs	r2, #8
 80190ba:	4619      	mov	r1, r3
 80190bc:	f007 fc69 	bl	8020992 <memcpy>
        pDataParams->bUidBitLength = PHPAL_SLI15693_SW_UID_COMPLETE;
 80190c0:	68fb      	ldr	r3, [r7, #12]
 80190c2:	2240      	movs	r2, #64	@ 0x40
 80190c4:	751a      	strb	r2, [r3, #20]

        /* return the UID */
        (void)memcpy(pUid, &pResp[1], PHPAL_SLI15693_UID_LENGTH);
 80190c6:	697b      	ldr	r3, [r7, #20]
 80190c8:	3301      	adds	r3, #1
 80190ca:	2208      	movs	r2, #8
 80190cc:	4619      	mov	r1, r3
 80190ce:	6838      	ldr	r0, [r7, #0]
 80190d0:	f007 fc5f 	bl	8020992 <memcpy>
        *pUidLength = PHPAL_SLI15693_UID_LENGTH;
 80190d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80190d6:	2208      	movs	r2, #8
 80190d8:	701a      	strb	r2, [r3, #0]

        /* set addressed flag */
        pDataParams->bFlags |= PHPAL_SLI15693_FLAG_ADDRESSED;
 80190da:	68fb      	ldr	r3, [r7, #12]
 80190dc:	7a9b      	ldrb	r3, [r3, #10]
 80190de:	f043 0320 	orr.w	r3, r3, #32
 80190e2:	b2da      	uxtb	r2, r3
 80190e4:	68fb      	ldr	r3, [r7, #12]
 80190e6:	729a      	strb	r2, [r3, #10]
 80190e8:	e091      	b.n	801920e <phpalSli15693_Sw_SendEof+0x3a6>
    }
    else if (bOption == PHPAL_SLI15693_EOF_NEXT_SLOT_INV_READ)
 80190ea:	7afb      	ldrb	r3, [r7, #11]
 80190ec:	2b01      	cmp	r3, #1
 80190ee:	f040 8088 	bne.w	8019202 <phpalSli15693_Sw_SendEof+0x39a>
    {
        /* ignore flag byte */
        ++pResp;
 80190f2:	697b      	ldr	r3, [r7, #20]
 80190f4:	3301      	adds	r3, #1
 80190f6:	617b      	str	r3, [r7, #20]
        --wRespLength;
 80190f8:	8a7b      	ldrh	r3, [r7, #18]
 80190fa:	3b01      	subs	r3, #1
 80190fc:	b29b      	uxth	r3, r3
 80190fe:	827b      	strh	r3, [r7, #18]

        /* Option flag is set -> we also received (partial) UID */
        if (0U != (pDataParams->bFlags & PHPAL_SLI15693_FLAG_OPTION))
 8019100:	68fb      	ldr	r3, [r7, #12]
 8019102:	7a9b      	ldrb	r3, [r3, #10]
 8019104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019108:	2b00      	cmp	r3, #0
 801910a:	d05b      	beq.n	80191c4 <phpalSli15693_Sw_SendEof+0x35c>
        {
            /* The response length should not be less than the remaining UID */
            bStoredUidLength = pDataParams->bUidBitLength >> 3U;
 801910c:	68fb      	ldr	r3, [r7, #12]
 801910e:	7d1b      	ldrb	r3, [r3, #20]
 8019110:	08db      	lsrs	r3, r3, #3
 8019112:	767b      	strb	r3, [r7, #25]
            *pUidLength = PHPAL_SLI15693_UID_LENGTH - bStoredUidLength;
 8019114:	7e7b      	ldrb	r3, [r7, #25]
 8019116:	f1c3 0308 	rsb	r3, r3, #8
 801911a:	b2da      	uxtb	r2, r3
 801911c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801911e:	701a      	strb	r2, [r3, #0]
            if (wRespLength < *pUidLength)
 8019120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019122:	781b      	ldrb	r3, [r3, #0]
 8019124:	461a      	mov	r2, r3
 8019126:	8a7b      	ldrh	r3, [r7, #18]
 8019128:	429a      	cmp	r2, r3
 801912a:	d902      	bls.n	8019132 <phpalSli15693_Sw_SendEof+0x2ca>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 801912c:	f640 2306 	movw	r3, #2566	@ 0xa06
 8019130:	e06e      	b.n	8019210 <phpalSli15693_Sw_SendEof+0x3a8>
            }

            if (bStoredUidLength < PHPAL_SLI15693_UID_LENGTH)
 8019132:	7e7b      	ldrb	r3, [r7, #25]
 8019134:	2b07      	cmp	r3, #7
 8019136:	d837      	bhi.n	80191a8 <phpalSli15693_Sw_SendEof+0x340>
            {
                /* We need to merge the contents of the mask buffer and the received data */
                if (0U != (pDataParams->bUidBitLength % 8U))
 8019138:	68fb      	ldr	r3, [r7, #12]
 801913a:	7d1b      	ldrb	r3, [r3, #20]
 801913c:	f003 0307 	and.w	r3, r3, #7
 8019140:	b2db      	uxtb	r3, r3
 8019142:	2b00      	cmp	r3, #0
 8019144:	d01e      	beq.n	8019184 <phpalSli15693_Sw_SendEof+0x31c>
                {
                    if (bStoredUidLength < 7U)
 8019146:	7e7b      	ldrb	r3, [r7, #25]
 8019148:	2b06      	cmp	r3, #6
 801914a:	d80d      	bhi.n	8019168 <phpalSli15693_Sw_SendEof+0x300>
                    {
                        /* copy the UID bytes we received from the card */
                        (void)memcpy(&(pDataParams->pUid[bStoredUidLength + 1U]), &pResp[1], ((uint32_t)(*pUidLength)-1U));
 801914c:	7e7b      	ldrb	r3, [r7, #25]
 801914e:	3301      	adds	r3, #1
 8019150:	3308      	adds	r3, #8
 8019152:	68fa      	ldr	r2, [r7, #12]
 8019154:	4413      	add	r3, r2
 8019156:	1d18      	adds	r0, r3, #4
 8019158:	697b      	ldr	r3, [r7, #20]
 801915a:	1c59      	adds	r1, r3, #1
 801915c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801915e:	781b      	ldrb	r3, [r3, #0]
 8019160:	3b01      	subs	r3, #1
 8019162:	461a      	mov	r2, r3
 8019164:	f007 fc15 	bl	8020992 <memcpy>
                    }

                    /* merge mask-bits with received bits */
                    pDataParams->pUid[bStoredUidLength] |= pResp[0];
 8019168:	7e7b      	ldrb	r3, [r7, #25]
 801916a:	68fa      	ldr	r2, [r7, #12]
 801916c:	4413      	add	r3, r2
 801916e:	7b19      	ldrb	r1, [r3, #12]
 8019170:	697b      	ldr	r3, [r7, #20]
 8019172:	781a      	ldrb	r2, [r3, #0]
 8019174:	7e7b      	ldrb	r3, [r7, #25]
 8019176:	430a      	orrs	r2, r1
 8019178:	b2d1      	uxtb	r1, r2
 801917a:	68fa      	ldr	r2, [r7, #12]
 801917c:	4413      	add	r3, r2
 801917e:	460a      	mov	r2, r1
 8019180:	731a      	strb	r2, [r3, #12]
 8019182:	e00a      	b.n	801919a <phpalSli15693_Sw_SendEof+0x332>
                }
                else
                {
                    /* copy the UID bytes we received from the card */
                    (void)memcpy(&(pDataParams->pUid[bStoredUidLength]), pResp, *pUidLength);
 8019184:	7e7b      	ldrb	r3, [r7, #25]
 8019186:	3308      	adds	r3, #8
 8019188:	68fa      	ldr	r2, [r7, #12]
 801918a:	4413      	add	r3, r2
 801918c:	1d18      	adds	r0, r3, #4
 801918e:	6979      	ldr	r1, [r7, #20]
 8019190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019192:	781b      	ldrb	r3, [r3, #0]
 8019194:	461a      	mov	r2, r3
 8019196:	f007 fbfc 	bl	8020992 <memcpy>
                }

                /* Return the received (partial) UID */
                (void)memcpy(pUid, pResp, *pUidLength);
 801919a:	6979      	ldr	r1, [r7, #20]
 801919c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801919e:	781b      	ldrb	r3, [r3, #0]
 80191a0:	461a      	mov	r2, r3
 80191a2:	6838      	ldr	r0, [r7, #0]
 80191a4:	f007 fbf5 	bl	8020992 <memcpy>
            }

            /* UID is now complete */
            pDataParams->bUidBitLength = PHPAL_SLI15693_SW_UID_COMPLETE;
 80191a8:	68fb      	ldr	r3, [r7, #12]
 80191aa:	2240      	movs	r2, #64	@ 0x40
 80191ac:	751a      	strb	r2, [r3, #20]

            /* shift pointer and length */
            pResp += *pUidLength;
 80191ae:	697b      	ldr	r3, [r7, #20]
 80191b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80191b2:	7812      	ldrb	r2, [r2, #0]
 80191b4:	4413      	add	r3, r2
 80191b6:	617b      	str	r3, [r7, #20]
            wRespLength = wRespLength - *pUidLength;
 80191b8:	8a7b      	ldrh	r3, [r7, #18]
 80191ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80191bc:	7812      	ldrb	r2, [r2, #0]
 80191be:	1a9b      	subs	r3, r3, r2
 80191c0:	b29b      	uxth	r3, r3
 80191c2:	827b      	strh	r3, [r7, #18]
        }

        /* copy the received data to the provided buffer */
        (void)memcpy(pData, pResp, wRespLength);
 80191c4:	697b      	ldr	r3, [r7, #20]
 80191c6:	8a7a      	ldrh	r2, [r7, #18]
 80191c8:	4619      	mov	r1, r3
 80191ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80191cc:	f007 fbe1 	bl	8020992 <memcpy>

        /* the remaining bytes of the response are the data bytes */
        *pDataLength = wRespLength;
 80191d0:	8a7a      	ldrh	r2, [r7, #18]
 80191d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80191d4:	801a      	strh	r2, [r3, #0]

        /* set addressed flag */
        pDataParams->bFlags |= PHPAL_SLI15693_FLAG_ADDRESSED;
 80191d6:	68fb      	ldr	r3, [r7, #12]
 80191d8:	7a9b      	ldrb	r3, [r3, #10]
 80191da:	f043 0320 	orr.w	r3, r3, #32
 80191de:	b2da      	uxtb	r2, r3
 80191e0:	68fb      	ldr	r3, [r7, #12]
 80191e2:	729a      	strb	r2, [r3, #10]

        /* wait T2 */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 80191e4:	68fb      	ldr	r3, [r7, #12]
 80191e6:	685b      	ldr	r3, [r3, #4]
 80191e8:	f44f 729b 	mov.w	r2, #310	@ 0x136
 80191ec:	2100      	movs	r1, #0
 80191ee:	4618      	mov	r0, r3
 80191f0:	f7f5 fa18 	bl	800e624 <phhalHw_Pn5180_Wait>
 80191f4:	4603      	mov	r3, r0
 80191f6:	83bb      	strh	r3, [r7, #28]
 80191f8:	8bbb      	ldrh	r3, [r7, #28]
 80191fa:	2b00      	cmp	r3, #0
 80191fc:	d007      	beq.n	801920e <phpalSli15693_Sw_SendEof+0x3a6>
 80191fe:	8bbb      	ldrh	r3, [r7, #28]
 8019200:	e006      	b.n	8019210 <phpalSli15693_Sw_SendEof+0x3a8>
            PHPAL_SLI15693_SW_T2_WAITING_TIME));
    }
    else
    {
        /* 1 byte is only returned on a eof for a write alike command. */
        if (wRespLength != 1U)
 8019202:	8a7b      	ldrh	r3, [r7, #18]
 8019204:	2b01      	cmp	r3, #1
 8019206:	d002      	beq.n	801920e <phpalSli15693_Sw_SendEof+0x3a6>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 8019208:	f640 2306 	movw	r3, #2566	@ 0xa06
 801920c:	e000      	b.n	8019210 <phpalSli15693_Sw_SendEof+0x3a8>
        }
    }

    return PH_ERR_SUCCESS;
 801920e:	2300      	movs	r3, #0
}
 8019210:	4618      	mov	r0, r3
 8019212:	3720      	adds	r7, #32
 8019214:	46bd      	mov	sp, r7
 8019216:	bd80      	pop	{r7, pc}

08019218 <phpalSli15693_Sw_Select>:
}

phStatus_t phpalSli15693_Sw_Select(
                                   phpalSli15693_Sw_DataParams_t * pDataParams
                                   )
{
 8019218:	b580      	push	{r7, lr}
 801921a:	b088      	sub	sp, #32
 801921c:	af02      	add	r7, sp, #8
 801921e:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aCmd[1];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8019220:	2300      	movs	r3, #0
 8019222:	613b      	str	r3, [r7, #16]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8019224:	2300      	movs	r3, #0
 8019226:	81fb      	strh	r3, [r7, #14]

    /* clear selected flag */
    pDataParams->bFlags &= (uint8_t)~(uint8_t)PHPAL_SLI15693_FLAG_SELECTED;
 8019228:	687b      	ldr	r3, [r7, #4]
 801922a:	7a9b      	ldrb	r3, [r3, #10]
 801922c:	f023 0310 	bic.w	r3, r3, #16
 8019230:	b2da      	uxtb	r2, r3
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	729a      	strb	r2, [r3, #10]

    /* set addressed flag */
    pDataParams->bFlags |= PHPAL_SLI15693_FLAG_ADDRESSED;
 8019236:	687b      	ldr	r3, [r7, #4]
 8019238:	7a9b      	ldrb	r3, [r3, #10]
 801923a:	f043 0320 	orr.w	r3, r3, #32
 801923e:	b2da      	uxtb	r2, r3
 8019240:	687b      	ldr	r3, [r7, #4]
 8019242:	729a      	strb	r2, [r3, #10]

    /* reset to ready command */
    aCmd[0] = PHPAL_SLI15693_SW_CMD_SELECT;
 8019244:	2325      	movs	r3, #37	@ 0x25
 8019246:	753b      	strb	r3, [r7, #20]

    /* Set short timeout. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 8019248:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 801924c:	2102      	movs	r1, #2
 801924e:	6878      	ldr	r0, [r7, #4]
 8019250:	f000 f966 	bl	8019520 <phpalSli15693_Sw_SetConfig>
 8019254:	4603      	mov	r3, r0
 8019256:	82fb      	strh	r3, [r7, #22]
 8019258:	8afb      	ldrh	r3, [r7, #22]
 801925a:	2b00      	cmp	r3, #0
 801925c:	d001      	beq.n	8019262 <phpalSli15693_Sw_Select+0x4a>
 801925e:	8afb      	ldrh	r3, [r7, #22]
 8019260:	e028      	b.n	80192b4 <phpalSli15693_Sw_Select+0x9c>
        pDataParams,
        PHPAL_SLI15693_CONFIG_TIMEOUT_US,
        PHPAL_SLI15693_TIMEOUT_SHORT_US));

    /* Exchange command */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_Exchange(
 8019262:	f107 0214 	add.w	r2, r7, #20
 8019266:	f107 030e 	add.w	r3, r7, #14
 801926a:	9301      	str	r3, [sp, #4]
 801926c:	f107 0310 	add.w	r3, r7, #16
 8019270:	9300      	str	r3, [sp, #0]
 8019272:	2301      	movs	r3, #1
 8019274:	2100      	movs	r1, #0
 8019276:	6878      	ldr	r0, [r7, #4]
 8019278:	f000 f820 	bl	80192bc <phpalSli15693_Sw_Exchange>
 801927c:	4603      	mov	r3, r0
 801927e:	82fb      	strh	r3, [r7, #22]
 8019280:	8afb      	ldrh	r3, [r7, #22]
 8019282:	2b00      	cmp	r3, #0
 8019284:	d001      	beq.n	801928a <phpalSli15693_Sw_Select+0x72>
 8019286:	8afb      	ldrh	r3, [r7, #22]
 8019288:	e014      	b.n	80192b4 <phpalSli15693_Sw_Select+0x9c>
        1,
        &pResp,
        &wRespLength));

    /* We shall not receive any data */
    if (wRespLength != 0U)
 801928a:	89fb      	ldrh	r3, [r7, #14]
 801928c:	2b00      	cmp	r3, #0
 801928e:	d002      	beq.n	8019296 <phpalSli15693_Sw_Select+0x7e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 8019290:	f640 2306 	movw	r3, #2566	@ 0xa06
 8019294:	e00e      	b.n	80192b4 <phpalSli15693_Sw_Select+0x9c>
    }

    /* clear addressed flag */
    pDataParams->bFlags &= (uint8_t)~(uint8_t)PHPAL_SLI15693_FLAG_ADDRESSED;
 8019296:	687b      	ldr	r3, [r7, #4]
 8019298:	7a9b      	ldrb	r3, [r3, #10]
 801929a:	f023 0320 	bic.w	r3, r3, #32
 801929e:	b2da      	uxtb	r2, r3
 80192a0:	687b      	ldr	r3, [r7, #4]
 80192a2:	729a      	strb	r2, [r3, #10]

    /* set selected flag */
    pDataParams->bFlags |= PHPAL_SLI15693_FLAG_SELECTED;
 80192a4:	687b      	ldr	r3, [r7, #4]
 80192a6:	7a9b      	ldrb	r3, [r3, #10]
 80192a8:	f043 0310 	orr.w	r3, r3, #16
 80192ac:	b2da      	uxtb	r2, r3
 80192ae:	687b      	ldr	r3, [r7, #4]
 80192b0:	729a      	strb	r2, [r3, #10]

    return PH_ERR_SUCCESS;
 80192b2:	2300      	movs	r3, #0
}
 80192b4:	4618      	mov	r0, r3
 80192b6:	3718      	adds	r7, #24
 80192b8:	46bd      	mov	sp, r7
 80192ba:	bd80      	pop	{r7, pc}

080192bc <phpalSli15693_Sw_Exchange>:
                                     uint8_t * pTxBuffer,
                                     uint16_t wTxLength,
                                     uint8_t ** ppRxBuffer,
                                     uint16_t * pRxLength
                                     )
{
 80192bc:	b580      	push	{r7, lr}
 80192be:	b08a      	sub	sp, #40	@ 0x28
 80192c0:	af02      	add	r7, sp, #8
 80192c2:	60f8      	str	r0, [r7, #12]
 80192c4:	607a      	str	r2, [r7, #4]
 80192c6:	461a      	mov	r2, r3
 80192c8:	460b      	mov	r3, r1
 80192ca:	817b      	strh	r3, [r7, #10]
 80192cc:	4613      	mov	r3, r2
 80192ce:	813b      	strh	r3, [r7, #8]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bFirstBlock[3];
    uint16_t    PH_MEMLOC_REM wTransmitLength = 0;
 80192d0:	2300      	movs	r3, #0
 80192d2:	83fb      	strh	r3, [r7, #30]
    uint16_t    PH_MEMLOC_REM RxLength;
    uint8_t *   PH_MEMLOC_REM pRxBuffer = NULL;
 80192d4:	2300      	movs	r3, #0
 80192d6:	613b      	str	r3, [r7, #16]
    /* the frame to exchange looks like the following:
    {optional} [one byte]
    [flags][CMD]{[MFC]}{[UID0] .. [UID3]}[CMDParam(0)] .. [CMDParam(N)] */

    /* Check for valid UID in addressed mode */
    if ((0U == ((pDataParams->bFlags & PHPAL_SLI15693_FLAG_INVENTORY))) && (0U != ((pDataParams->bFlags & PHPAL_SLI15693_FLAG_ADDRESSED))))
 80192d8:	68fb      	ldr	r3, [r7, #12]
 80192da:	7a9b      	ldrb	r3, [r3, #10]
 80192dc:	f003 0304 	and.w	r3, r3, #4
 80192e0:	2b00      	cmp	r3, #0
 80192e2:	d10c      	bne.n	80192fe <phpalSli15693_Sw_Exchange+0x42>
 80192e4:	68fb      	ldr	r3, [r7, #12]
 80192e6:	7a9b      	ldrb	r3, [r3, #10]
 80192e8:	f003 0320 	and.w	r3, r3, #32
 80192ec:	2b00      	cmp	r3, #0
 80192ee:	d006      	beq.n	80192fe <phpalSli15693_Sw_Exchange+0x42>
    {
        /* Return an error if UID is not valid */
        if (pDataParams->bUidBitLength != PHPAL_SLI15693_SW_UID_COMPLETE)
 80192f0:	68fb      	ldr	r3, [r7, #12]
 80192f2:	7d1b      	ldrb	r3, [r3, #20]
 80192f4:	2b40      	cmp	r3, #64	@ 0x40
 80192f6:	d002      	beq.n	80192fe <phpalSli15693_Sw_Exchange+0x42>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_PAL_SLI15693);
 80192f8:	f640 2325 	movw	r3, #2597	@ 0xa25
 80192fc:	e0f0      	b.n	80194e0 <phpalSli15693_Sw_Exchange+0x224>
        }
    }

    /* Check if caller has provided valid RxBuffer */
    if (ppRxBuffer == NULL)
 80192fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019300:	2b00      	cmp	r3, #0
 8019302:	d102      	bne.n	801930a <phpalSli15693_Sw_Exchange+0x4e>
    {
        ppRxBuffer = &pRxBuffer;
 8019304:	f107 0310 	add.w	r3, r7, #16
 8019308:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
    if (pRxLength == NULL)
 801930a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801930c:	2b00      	cmp	r3, #0
 801930e:	d102      	bne.n	8019316 <phpalSli15693_Sw_Exchange+0x5a>
    {
        pRxLength = &RxLength;
 8019310:	f107 0316 	add.w	r3, r7, #22
 8019314:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    if ((0U == ((wOption & PH_EXCHANGE_LEAVE_BUFFER_BIT))))
 8019316:	897b      	ldrh	r3, [r7, #10]
 8019318:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801931c:	2b00      	cmp	r3, #0
 801931e:	f040 8086 	bne.w	801942e <phpalSli15693_Sw_Exchange+0x172>
    {
        /* This is the first chunk of a command frame. Add the Flags byte and ... */
        bFirstBlock[wTransmitLength++] = pDataParams->bFlags;
 8019322:	8bfb      	ldrh	r3, [r7, #30]
 8019324:	1c5a      	adds	r2, r3, #1
 8019326:	83fa      	strh	r2, [r7, #30]
 8019328:	4619      	mov	r1, r3
 801932a:	68fb      	ldr	r3, [r7, #12]
 801932c:	7a9a      	ldrb	r2, [r3, #10]
 801932e:	f101 0320 	add.w	r3, r1, #32
 8019332:	443b      	add	r3, r7
 8019334:	f803 2c08 	strb.w	r2, [r3, #-8]
        bFirstBlock[wTransmitLength++] = pTxBuffer[0];
 8019338:	8bfb      	ldrh	r3, [r7, #30]
 801933a:	1c5a      	adds	r2, r3, #1
 801933c:	83fa      	strh	r2, [r7, #30]
 801933e:	4619      	mov	r1, r3
 8019340:	687b      	ldr	r3, [r7, #4]
 8019342:	781a      	ldrb	r2, [r3, #0]
 8019344:	f101 0320 	add.w	r3, r1, #32
 8019348:	443b      	add	r3, r7
 801934a:	f803 2c08 	strb.w	r2, [r3, #-8]

        /* add MFC byte for custom commands */
        if ((pTxBuffer[0] > PHPAL_SLI15693_SW_CUSTOM_CMD_CODE_BEGIN) && (pTxBuffer[0] < PHPAL_SLI15693_SW_CUSTOM_CMD_CODE_END))
 801934e:	687b      	ldr	r3, [r7, #4]
 8019350:	781b      	ldrb	r3, [r3, #0]
 8019352:	2b9f      	cmp	r3, #159	@ 0x9f
 8019354:	d90f      	bls.n	8019376 <phpalSli15693_Sw_Exchange+0xba>
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	781b      	ldrb	r3, [r3, #0]
 801935a:	2bdf      	cmp	r3, #223	@ 0xdf
 801935c:	d80b      	bhi.n	8019376 <phpalSli15693_Sw_Exchange+0xba>
        {
            /* if no serial number is valid we assume that we use only NXP tags. */
            bFirstBlock[wTransmitLength++] = pDataParams->bIcMfgCode;
 801935e:	8bfb      	ldrh	r3, [r7, #30]
 8019360:	1c5a      	adds	r2, r3, #1
 8019362:	83fa      	strh	r2, [r7, #30]
 8019364:	4619      	mov	r1, r3
 8019366:	68fb      	ldr	r3, [r7, #12]
 8019368:	7e5a      	ldrb	r2, [r3, #25]
 801936a:	f101 0320 	add.w	r3, r1, #32
 801936e:	443b      	add	r3, r7
 8019370:	f803 2c08 	strb.w	r2, [r3, #-8]
 8019374:	e017      	b.n	80193a6 <phpalSli15693_Sw_Exchange+0xea>
        }
        else
        {
            if((pTxBuffer[0] == PHPAL_SLI15693_SW_CMD_EXTENDED_GET_SYSTEM_INFORMATION)
 8019376:	687b      	ldr	r3, [r7, #4]
 8019378:	781b      	ldrb	r3, [r3, #0]
 801937a:	2b3b      	cmp	r3, #59	@ 0x3b
 801937c:	d113      	bne.n	80193a6 <phpalSli15693_Sw_Exchange+0xea>
               && (wTxLength > 1U))
 801937e:	893b      	ldrh	r3, [r7, #8]
 8019380:	2b01      	cmp	r3, #1
 8019382:	d910      	bls.n	80193a6 <phpalSli15693_Sw_Exchange+0xea>
                *  UID from 3rd Byte whereas rest other commands take UID from 2nd Byte
                *  SOF + FLAGS + COMMAND CODE +  INFO FLAGS  + UID  + CRC + EOF.
                */

               /* Copy Info Flags */
               bFirstBlock[wTransmitLength++] = pTxBuffer[1];
 8019384:	8bfb      	ldrh	r3, [r7, #30]
 8019386:	1c5a      	adds	r2, r3, #1
 8019388:	83fa      	strh	r2, [r7, #30]
 801938a:	4619      	mov	r1, r3
 801938c:	687b      	ldr	r3, [r7, #4]
 801938e:	785a      	ldrb	r2, [r3, #1]
 8019390:	f101 0320 	add.w	r3, r1, #32
 8019394:	443b      	add	r3, r7
 8019396:	f803 2c08 	strb.w	r2, [r3, #-8]

               /* First byte was the command byte */
               ++pTxBuffer;
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	3301      	adds	r3, #1
 801939e:	607b      	str	r3, [r7, #4]
               --wTxLength;
 80193a0:	893b      	ldrh	r3, [r7, #8]
 80193a2:	3b01      	subs	r3, #1
 80193a4:	813b      	strh	r3, [r7, #8]
           }
        }

        /* Exchange command */
        /* clear buffer but do not send */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 80193a6:	68fb      	ldr	r3, [r7, #12]
 80193a8:	6858      	ldr	r0, [r3, #4]
 80193aa:	8bf9      	ldrh	r1, [r7, #30]
 80193ac:	f107 0218 	add.w	r2, r7, #24
 80193b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80193b2:	9301      	str	r3, [sp, #4]
 80193b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80193b6:	9300      	str	r3, [sp, #0]
 80193b8:	460b      	mov	r3, r1
 80193ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80193be:	f7f4 fe35 	bl	800e02c <phhalHw_Pn5180_Exchange>
 80193c2:	4603      	mov	r3, r0
 80193c4:	83bb      	strh	r3, [r7, #28]
 80193c6:	8bbb      	ldrh	r3, [r7, #28]
 80193c8:	2b00      	cmp	r3, #0
 80193ca:	d001      	beq.n	80193d0 <phpalSli15693_Sw_Exchange+0x114>
 80193cc:	8bbb      	ldrh	r3, [r7, #28]
 80193ce:	e087      	b.n	80194e0 <phpalSli15693_Sw_Exchange+0x224>

        /* First set of TxBuffer contains
         *  1. command code + Info Bytes
         *  2. command Code
         */
        ++pTxBuffer;
 80193d0:	687b      	ldr	r3, [r7, #4]
 80193d2:	3301      	adds	r3, #1
 80193d4:	607b      	str	r3, [r7, #4]
        --wTxLength;
 80193d6:	893b      	ldrh	r3, [r7, #8]
 80193d8:	3b01      	subs	r3, #1
 80193da:	813b      	strh	r3, [r7, #8]

        /* If we are not waiting any more we can transmit the UID bytes, if necessary. */
        if ((0U == ((pDataParams->bFlags & PHPAL_SLI15693_FLAG_INVENTORY))) && (0U != ((pDataParams->bFlags & PHPAL_SLI15693_FLAG_ADDRESSED))))
 80193dc:	68fb      	ldr	r3, [r7, #12]
 80193de:	7a9b      	ldrb	r3, [r3, #10]
 80193e0:	f003 0304 	and.w	r3, r3, #4
 80193e4:	2b00      	cmp	r3, #0
 80193e6:	d11e      	bne.n	8019426 <phpalSli15693_Sw_Exchange+0x16a>
 80193e8:	68fb      	ldr	r3, [r7, #12]
 80193ea:	7a9b      	ldrb	r3, [r3, #10]
 80193ec:	f003 0320 	and.w	r3, r3, #32
 80193f0:	2b00      	cmp	r3, #0
 80193f2:	d018      	beq.n	8019426 <phpalSli15693_Sw_Exchange+0x16a>
        {
            if(0U == (pDataParams->bExplicitlyAddressed))
 80193f4:	68fb      	ldr	r3, [r7, #12]
 80193f6:	7d5b      	ldrb	r3, [r3, #21]
 80193f8:	2b00      	cmp	r3, #0
 80193fa:	d114      	bne.n	8019426 <phpalSli15693_Sw_Exchange+0x16a>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 80193fc:	68fb      	ldr	r3, [r7, #12]
 80193fe:	6858      	ldr	r0, [r3, #4]
 8019400:	68fb      	ldr	r3, [r7, #12]
 8019402:	f103 020c 	add.w	r2, r3, #12
 8019406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019408:	9301      	str	r3, [sp, #4]
 801940a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801940c:	9300      	str	r3, [sp, #0]
 801940e:	2308      	movs	r3, #8
 8019410:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8019414:	f7f4 fe0a 	bl	800e02c <phhalHw_Pn5180_Exchange>
 8019418:	4603      	mov	r3, r0
 801941a:	83bb      	strh	r3, [r7, #28]
 801941c:	8bbb      	ldrh	r3, [r7, #28]
 801941e:	2b00      	cmp	r3, #0
 8019420:	d001      	beq.n	8019426 <phpalSli15693_Sw_Exchange+0x16a>
 8019422:	8bbb      	ldrh	r3, [r7, #28]
 8019424:	e05c      	b.n	80194e0 <phpalSli15693_Sw_Exchange+0x224>
                    pRxLength));
            }
        }

        /* Now we need to keep our buffered contents */
        wOption |= PH_EXCHANGE_LEAVE_BUFFER_BIT;
 8019426:	897b      	ldrh	r3, [r7, #10]
 8019428:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801942c:	817b      	strh	r3, [r7, #10]
    }

    /* Exchange command */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 801942e:	68fb      	ldr	r3, [r7, #12]
 8019430:	6858      	ldr	r0, [r3, #4]
 8019432:	893a      	ldrh	r2, [r7, #8]
 8019434:	8979      	ldrh	r1, [r7, #10]
 8019436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019438:	9301      	str	r3, [sp, #4]
 801943a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801943c:	9300      	str	r3, [sp, #0]
 801943e:	4613      	mov	r3, r2
 8019440:	687a      	ldr	r2, [r7, #4]
 8019442:	f7f4 fdf3 	bl	800e02c <phhalHw_Pn5180_Exchange>
 8019446:	4603      	mov	r3, r0
 8019448:	83bb      	strh	r3, [r7, #28]
 801944a:	8bbb      	ldrh	r3, [r7, #28]
 801944c:	2b00      	cmp	r3, #0
 801944e:	d001      	beq.n	8019454 <phpalSli15693_Sw_Exchange+0x198>
 8019450:	8bbb      	ldrh	r3, [r7, #28]
 8019452:	e045      	b.n	80194e0 <phpalSli15693_Sw_Exchange+0x224>
        ppRxBuffer,
        pRxLength));

    /* If this was the last (or only) chunk, we shoult have received a response,
    so we extract the Flags byte and check the status */
    if ((0U == ((wOption & PH_EXCHANGE_BUFFERED_BIT))))
 8019454:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8019458:	2b00      	cmp	r3, #0
 801945a:	db40      	blt.n	80194de <phpalSli15693_Sw_Exchange+0x222>
    {
        /* First Check RespLength*/
        if (*pRxLength == 0U)
 801945c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801945e:	881b      	ldrh	r3, [r3, #0]
 8019460:	2b00      	cmp	r3, #0
 8019462:	d102      	bne.n	801946a <phpalSli15693_Sw_Exchange+0x1ae>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 8019464:	f640 2306 	movw	r3, #2566	@ 0xa06
 8019468:	e03a      	b.n	80194e0 <phpalSli15693_Sw_Exchange+0x224>
        }

        /*check error flag*/
        pDataParams->bResFlags = 0;
 801946a:	68fb      	ldr	r3, [r7, #12]
 801946c:	2200      	movs	r2, #0
 801946e:	72da      	strb	r2, [r3, #11]
        if (0U != ((*ppRxBuffer[0]) & PHPAL_SLI15693_FLAG_RESP_ERROR))
 8019470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019472:	681b      	ldr	r3, [r3, #0]
 8019474:	781b      	ldrb	r3, [r3, #0]
 8019476:	f003 0301 	and.w	r3, r3, #1
 801947a:	2b00      	cmp	r3, #0
 801947c:	d019      	beq.n	80194b2 <phpalSli15693_Sw_Exchange+0x1f6>
        {
            pDataParams->bResFlags = PHPAL_SLI15693_FLAG_RESP_ERROR;
 801947e:	68fb      	ldr	r3, [r7, #12]
 8019480:	2201      	movs	r2, #1
 8019482:	72da      	strb	r2, [r3, #11]

            /* check the length in case of error */
            if (*pRxLength != 2U)
 8019484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019486:	881b      	ldrh	r3, [r3, #0]
 8019488:	2b02      	cmp	r3, #2
 801948a:	d002      	beq.n	8019492 <phpalSli15693_Sw_Exchange+0x1d6>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 801948c:	f640 2306 	movw	r3, #2566	@ 0xa06
 8019490:	e026      	b.n	80194e0 <phpalSli15693_Sw_Exchange+0x224>
            }

            /* Copy error code to additional info */
            pDataParams->wAdditionalInfo = (*ppRxBuffer)[1];
 8019492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019494:	681b      	ldr	r3, [r3, #0]
 8019496:	3301      	adds	r3, #1
 8019498:	781b      	ldrb	r3, [r3, #0]
 801949a:	461a      	mov	r2, r3
 801949c:	68fb      	ldr	r3, [r7, #12]
 801949e:	811a      	strh	r2, [r3, #8]

            /* Return empty receive buffer */
            *ppRxBuffer = NULL;
 80194a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80194a2:	2200      	movs	r2, #0
 80194a4:	601a      	str	r2, [r3, #0]
            *pRxLength = 0;
 80194a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80194a8:	2200      	movs	r2, #0
 80194aa:	801a      	strh	r2, [r3, #0]

            return PH_ADD_COMPCODE_FIXED(PHPAL_SLI15693_ERR_ISO15693, PH_COMP_PAL_SLI15693);
 80194ac:	f44f 6328 	mov.w	r3, #2688	@ 0xa80
 80194b0:	e016      	b.n	80194e0 <phpalSli15693_Sw_Exchange+0x224>
        }

        /* Copy response flag to additional info */
        pDataParams->wAdditionalInfo = (*ppRxBuffer)[0];
 80194b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80194b4:	681b      	ldr	r3, [r3, #0]
 80194b6:	781b      	ldrb	r3, [r3, #0]
 80194b8:	461a      	mov	r2, r3
 80194ba:	68fb      	ldr	r3, [r7, #12]
 80194bc:	811a      	strh	r2, [r3, #8]
        pDataParams->bResFlags = (*ppRxBuffer)[0];
 80194be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80194c0:	681b      	ldr	r3, [r3, #0]
 80194c2:	781a      	ldrb	r2, [r3, #0]
 80194c4:	68fb      	ldr	r3, [r7, #12]
 80194c6:	72da      	strb	r2, [r3, #11]

        /* adjust pointer and length */
        ++(*ppRxBuffer);
 80194c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80194ca:	681b      	ldr	r3, [r3, #0]
 80194cc:	1c5a      	adds	r2, r3, #1
 80194ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80194d0:	601a      	str	r2, [r3, #0]
        --(*pRxLength);
 80194d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80194d4:	881b      	ldrh	r3, [r3, #0]
 80194d6:	3b01      	subs	r3, #1
 80194d8:	b29a      	uxth	r2, r3
 80194da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80194dc:	801a      	strh	r2, [r3, #0]
    }

    return PH_ERR_SUCCESS;
 80194de:	2300      	movs	r3, #0
}
 80194e0:	4618      	mov	r0, r3
 80194e2:	3720      	adds	r7, #32
 80194e4:	46bd      	mov	sp, r7
 80194e6:	bd80      	pop	{r7, pc}

080194e8 <phpalSli15693_Sw_SetSerialNo>:
phStatus_t phpalSli15693_Sw_SetSerialNo(
                                        phpalSli15693_Sw_DataParams_t * pDataParams,
                                        uint8_t * pUid,
                                        uint8_t bUidLength
                                        )
{
 80194e8:	b580      	push	{r7, lr}
 80194ea:	b084      	sub	sp, #16
 80194ec:	af00      	add	r7, sp, #0
 80194ee:	60f8      	str	r0, [r7, #12]
 80194f0:	60b9      	str	r1, [r7, #8]
 80194f2:	4613      	mov	r3, r2
 80194f4:	71fb      	strb	r3, [r7, #7]
    /* Check for valid UID length */
    if(bUidLength != PHPAL_SLI15693_UID_LENGTH)
 80194f6:	79fb      	ldrb	r3, [r7, #7]
 80194f8:	2b08      	cmp	r3, #8
 80194fa:	d002      	beq.n	8019502 <phpalSli15693_Sw_SetSerialNo+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 80194fc:	f640 2321 	movw	r3, #2593	@ 0xa21
 8019500:	e00a      	b.n	8019518 <phpalSli15693_Sw_SetSerialNo+0x30>
    }

    /* Copy UID and UID length */
    (void)memcpy(pDataParams->pUid, pUid, PHPAL_SLI15693_UID_LENGTH);
 8019502:	68fb      	ldr	r3, [r7, #12]
 8019504:	330c      	adds	r3, #12
 8019506:	2208      	movs	r2, #8
 8019508:	68b9      	ldr	r1, [r7, #8]
 801950a:	4618      	mov	r0, r3
 801950c:	f007 fa41 	bl	8020992 <memcpy>
    pDataParams->bUidBitLength = PHPAL_SLI15693_SW_UID_COMPLETE;
 8019510:	68fb      	ldr	r3, [r7, #12]
 8019512:	2240      	movs	r2, #64	@ 0x40
 8019514:	751a      	strb	r2, [r3, #20]

    return PH_ERR_SUCCESS;
 8019516:	2300      	movs	r3, #0
}
 8019518:	4618      	mov	r0, r3
 801951a:	3710      	adds	r7, #16
 801951c:	46bd      	mov	sp, r7
 801951e:	bd80      	pop	{r7, pc}

08019520 <phpalSli15693_Sw_SetConfig>:
phStatus_t phpalSli15693_Sw_SetConfig(
                                      phpalSli15693_Sw_DataParams_t * pDataParams,
                                      uint16_t wConfig,
                                      uint16_t wValue
                                      )
{
 8019520:	b580      	push	{r7, lr}
 8019522:	b084      	sub	sp, #16
 8019524:	af00      	add	r7, sp, #0
 8019526:	6078      	str	r0, [r7, #4]
 8019528:	460b      	mov	r3, r1
 801952a:	807b      	strh	r3, [r7, #2]
 801952c:	4613      	mov	r3, r2
 801952e:	803b      	strh	r3, [r7, #0]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t    PH_MEMLOC_REM wValueOld;

    switch (wConfig)
 8019530:	887b      	ldrh	r3, [r7, #2]
 8019532:	2b0a      	cmp	r3, #10
 8019534:	f200 81b9 	bhi.w	80198aa <phpalSli15693_Sw_SetConfig+0x38a>
 8019538:	a201      	add	r2, pc, #4	@ (adr r2, 8019540 <phpalSli15693_Sw_SetConfig+0x20>)
 801953a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801953e:	bf00      	nop
 8019540:	0801956d 	.word	0x0801956d
 8019544:	080198ab 	.word	0x080198ab
 8019548:	0801966b 	.word	0x0801966b
 801954c:	080196d7 	.word	0x080196d7
 8019550:	080197a3 	.word	0x080197a3
 8019554:	08019817 	.word	0x08019817
 8019558:	0801971d 	.word	0x0801971d
 801955c:	08019799 	.word	0x08019799
 8019560:	0801987f 	.word	0x0801987f
 8019564:	08019897 	.word	0x08019897
 8019568:	080198a1 	.word	0x080198a1
    {
    case PHPAL_SLI15693_CONFIG_FLAGS:

        /* Retrieve current subcarrier setting */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 801956c:	687b      	ldr	r3, [r7, #4]
 801956e:	685b      	ldr	r3, [r3, #4]
 8019570:	f107 020c 	add.w	r2, r7, #12
 8019574:	210f      	movs	r1, #15
 8019576:	4618      	mov	r0, r3
 8019578:	f7f6 fd5c 	bl	8010034 <phhalHw_Pn5180_GetConfig>
 801957c:	4603      	mov	r3, r0
 801957e:	81fb      	strh	r3, [r7, #14]
 8019580:	89fb      	ldrh	r3, [r7, #14]
 8019582:	2b00      	cmp	r3, #0
 8019584:	d001      	beq.n	801958a <phpalSli15693_Sw_SetConfig+0x6a>
 8019586:	89fb      	ldrh	r3, [r7, #14]
 8019588:	e19c      	b.n	80198c4 <phpalSli15693_Sw_SetConfig+0x3a4>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_SUBCARRIER,
            &wValueOld));

        /* Set dual subcarrier if HAL is not already configured for it */
        if (0U != (wValue & PHPAL_SLI15693_FLAG_TWO_SUB_CARRIERS))
 801958a:	883b      	ldrh	r3, [r7, #0]
 801958c:	f003 0301 	and.w	r3, r3, #1
 8019590:	2b00      	cmp	r3, #0
 8019592:	d017      	beq.n	80195c4 <phpalSli15693_Sw_SetConfig+0xa4>
        {
            /* NFC mode supports only single sub-carrier mode */
            if(pDataParams->bOpeMode == RD_LIB_MODE_NFC)
 8019594:	687b      	ldr	r3, [r7, #4]
 8019596:	7d9b      	ldrb	r3, [r3, #22]
 8019598:	2b02      	cmp	r3, #2
 801959a:	d102      	bne.n	80195a2 <phpalSli15693_Sw_SetConfig+0x82>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 801959c:	f640 2321 	movw	r3, #2593	@ 0xa21
 80195a0:	e190      	b.n	80198c4 <phpalSli15693_Sw_SetConfig+0x3a4>
            }

            if (wValueOld != PHHAL_HW_SUBCARRIER_DUAL)
 80195a2:	89bb      	ldrh	r3, [r7, #12]
 80195a4:	2b01      	cmp	r3, #1
 80195a6:	d01e      	beq.n	80195e6 <phpalSli15693_Sw_SetConfig+0xc6>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80195a8:	687b      	ldr	r3, [r7, #4]
 80195aa:	685b      	ldr	r3, [r3, #4]
 80195ac:	2201      	movs	r2, #1
 80195ae:	210f      	movs	r1, #15
 80195b0:	4618      	mov	r0, r3
 80195b2:	f7f5 f8f1 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 80195b6:	4603      	mov	r3, r0
 80195b8:	81fb      	strh	r3, [r7, #14]
 80195ba:	89fb      	ldrh	r3, [r7, #14]
 80195bc:	2b00      	cmp	r3, #0
 80195be:	d012      	beq.n	80195e6 <phpalSli15693_Sw_SetConfig+0xc6>
 80195c0:	89fb      	ldrh	r3, [r7, #14]
 80195c2:	e17f      	b.n	80198c4 <phpalSli15693_Sw_SetConfig+0x3a4>
            }
        }
        /* Set single subcarrier if HAL is not already configured for it */
        else
        {
            if (wValueOld != PHHAL_HW_SUBCARRIER_SINGLE)
 80195c4:	89bb      	ldrh	r3, [r7, #12]
 80195c6:	2b00      	cmp	r3, #0
 80195c8:	d00d      	beq.n	80195e6 <phpalSli15693_Sw_SetConfig+0xc6>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	685b      	ldr	r3, [r3, #4]
 80195ce:	2200      	movs	r2, #0
 80195d0:	210f      	movs	r1, #15
 80195d2:	4618      	mov	r0, r3
 80195d4:	f7f5 f8e0 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 80195d8:	4603      	mov	r3, r0
 80195da:	81fb      	strh	r3, [r7, #14]
 80195dc:	89fb      	ldrh	r3, [r7, #14]
 80195de:	2b00      	cmp	r3, #0
 80195e0:	d001      	beq.n	80195e6 <phpalSli15693_Sw_SetConfig+0xc6>
 80195e2:	89fb      	ldrh	r3, [r7, #14]
 80195e4:	e16e      	b.n	80198c4 <phpalSli15693_Sw_SetConfig+0x3a4>
                    PHHAL_HW_SUBCARRIER_SINGLE));
            }
        }

        /* Retrieve current datarate setting */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 80195e6:	687b      	ldr	r3, [r7, #4]
 80195e8:	685b      	ldr	r3, [r3, #4]
 80195ea:	f107 020c 	add.w	r2, r7, #12
 80195ee:	210a      	movs	r1, #10
 80195f0:	4618      	mov	r0, r3
 80195f2:	f7f6 fd1f 	bl	8010034 <phhalHw_Pn5180_GetConfig>
 80195f6:	4603      	mov	r3, r0
 80195f8:	81fb      	strh	r3, [r7, #14]
 80195fa:	89fb      	ldrh	r3, [r7, #14]
 80195fc:	2b00      	cmp	r3, #0
 80195fe:	d001      	beq.n	8019604 <phpalSli15693_Sw_SetConfig+0xe4>
 8019600:	89fb      	ldrh	r3, [r7, #14]
 8019602:	e15f      	b.n	80198c4 <phpalSli15693_Sw_SetConfig+0x3a4>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_RXDATARATE_FRAMING,
            &wValueOld));

        /* Set low data rate if HAL is not already configured for it */
        if (0U == (wValue & PHPAL_SLI15693_FLAG_DATA_RATE))
 8019604:	883b      	ldrh	r3, [r7, #0]
 8019606:	f003 0302 	and.w	r3, r3, #2
 801960a:	2b00      	cmp	r3, #0
 801960c:	d117      	bne.n	801963e <phpalSli15693_Sw_SetConfig+0x11e>
        {
            /* NFC mode supports only HIGH Data Rate */
            if(pDataParams->bOpeMode == RD_LIB_MODE_NFC)
 801960e:	687b      	ldr	r3, [r7, #4]
 8019610:	7d9b      	ldrb	r3, [r3, #22]
 8019612:	2b02      	cmp	r3, #2
 8019614:	d102      	bne.n	801961c <phpalSli15693_Sw_SetConfig+0xfc>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 8019616:	f640 2321 	movw	r3, #2593	@ 0xa21
 801961a:	e153      	b.n	80198c4 <phpalSli15693_Sw_SetConfig+0x3a4>
            }

            if (wValueOld != PHHAL_HW_RF_RX_DATARATE_LOW)
 801961c:	89bb      	ldrh	r3, [r7, #12]
 801961e:	2b0c      	cmp	r3, #12
 8019620:	d01e      	beq.n	8019660 <phpalSli15693_Sw_SetConfig+0x140>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8019622:	687b      	ldr	r3, [r7, #4]
 8019624:	685b      	ldr	r3, [r3, #4]
 8019626:	220c      	movs	r2, #12
 8019628:	210a      	movs	r1, #10
 801962a:	4618      	mov	r0, r3
 801962c:	f7f5 f8b4 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8019630:	4603      	mov	r3, r0
 8019632:	81fb      	strh	r3, [r7, #14]
 8019634:	89fb      	ldrh	r3, [r7, #14]
 8019636:	2b00      	cmp	r3, #0
 8019638:	d012      	beq.n	8019660 <phpalSli15693_Sw_SetConfig+0x140>
 801963a:	89fb      	ldrh	r3, [r7, #14]
 801963c:	e142      	b.n	80198c4 <phpalSli15693_Sw_SetConfig+0x3a4>

        }
        /* Set high data rate if HAL is not already configured for it */
        else
        {
            if (wValueOld != PHHAL_HW_RF_RX_DATARATE_HIGH)
 801963e:	89bb      	ldrh	r3, [r7, #12]
 8019640:	2b0d      	cmp	r3, #13
 8019642:	d00d      	beq.n	8019660 <phpalSli15693_Sw_SetConfig+0x140>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8019644:	687b      	ldr	r3, [r7, #4]
 8019646:	685b      	ldr	r3, [r3, #4]
 8019648:	220d      	movs	r2, #13
 801964a:	210a      	movs	r1, #10
 801964c:	4618      	mov	r0, r3
 801964e:	f7f5 f8a3 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8019652:	4603      	mov	r3, r0
 8019654:	81fb      	strh	r3, [r7, #14]
 8019656:	89fb      	ldrh	r3, [r7, #14]
 8019658:	2b00      	cmp	r3, #0
 801965a:	d001      	beq.n	8019660 <phpalSli15693_Sw_SetConfig+0x140>
 801965c:	89fb      	ldrh	r3, [r7, #14]
 801965e:	e131      	b.n	80198c4 <phpalSli15693_Sw_SetConfig+0x3a4>
                    PHHAL_HW_RF_RX_DATARATE_HIGH));
            }
        }

        /* retrieve flags */
        pDataParams->bFlags = (uint8_t)wValue;
 8019660:	883b      	ldrh	r3, [r7, #0]
 8019662:	b2da      	uxtb	r2, r3
 8019664:	687b      	ldr	r3, [r7, #4]
 8019666:	729a      	strb	r2, [r3, #10]

        break;
 8019668:	e12b      	b.n	80198c2 <phpalSli15693_Sw_SetConfig+0x3a2>

    case PHPAL_SLI15693_CONFIG_TIMEOUT_US:

        if (((uint32_t)wValue + PHPAL_SLI15693_SW_EXT_TIME_US) > 0xFFFFU)
 801966a:	883b      	ldrh	r3, [r7, #0]
 801966c:	333c      	adds	r3, #60	@ 0x3c
 801966e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019672:	d302      	bcc.n	801967a <phpalSli15693_Sw_SetConfig+0x15a>
        {
            /* Return error */
            /* Maximum allowed value is 0xFFC3 (0xFFFF - PHPAL_SLI15693_SW_EXT_TIME_US) */
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_PAL_SLI15693);
 8019674:	f640 2322 	movw	r3, #2594	@ 0xa22
 8019678:	e124      	b.n	80198c4 <phpalSli15693_Sw_SetConfig+0x3a4>
        }

        /* Extend timeout a little */
        wValue += PHPAL_SLI15693_SW_EXT_TIME_US;
 801967a:	883b      	ldrh	r3, [r7, #0]
 801967c:	333c      	adds	r3, #60	@ 0x3c
 801967e:	803b      	strh	r3, [r7, #0]

        /* Retrieve current timeout */
        statusTmp = phhalHw_GetConfig(
 8019680:	687b      	ldr	r3, [r7, #4]
 8019682:	685b      	ldr	r3, [r3, #4]
 8019684:	f107 020c 	add.w	r2, r7, #12
 8019688:	210d      	movs	r1, #13
 801968a:	4618      	mov	r0, r3
 801968c:	f7f6 fcd2 	bl	8010034 <phhalHw_Pn5180_GetConfig>
 8019690:	4603      	mov	r3, r0
 8019692:	81fb      	strh	r3, [r7, #14]
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
            &wValueOld);

        /* Set the new timeout */
        if ((((statusTmp & PH_ERR_MASK) == PH_ERR_SUCCESS) && (wValue != wValueOld)) ||
 8019694:	89fb      	ldrh	r3, [r7, #14]
 8019696:	b2db      	uxtb	r3, r3
 8019698:	2b00      	cmp	r3, #0
 801969a:	d103      	bne.n	80196a4 <phpalSli15693_Sw_SetConfig+0x184>
 801969c:	89bb      	ldrh	r3, [r7, #12]
 801969e:	883a      	ldrh	r2, [r7, #0]
 80196a0:	429a      	cmp	r2, r3
 80196a2:	d103      	bne.n	80196ac <phpalSli15693_Sw_SetConfig+0x18c>
            ((statusTmp & PH_ERR_MASK) == PH_ERR_PARAMETER_OVERFLOW))
 80196a4:	89fb      	ldrh	r3, [r7, #14]
 80196a6:	b2db      	uxtb	r3, r3
        if ((((statusTmp & PH_ERR_MASK) == PH_ERR_SUCCESS) && (wValue != wValueOld)) ||
 80196a8:	2b22      	cmp	r3, #34	@ 0x22
 80196aa:	d10d      	bne.n	80196c8 <phpalSli15693_Sw_SetConfig+0x1a8>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80196ac:	687b      	ldr	r3, [r7, #4]
 80196ae:	685b      	ldr	r3, [r3, #4]
 80196b0:	883a      	ldrh	r2, [r7, #0]
 80196b2:	210d      	movs	r1, #13
 80196b4:	4618      	mov	r0, r3
 80196b6:	f7f5 f86f 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 80196ba:	4603      	mov	r3, r0
 80196bc:	81fb      	strh	r3, [r7, #14]
 80196be:	89fb      	ldrh	r3, [r7, #14]
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	d007      	beq.n	80196d4 <phpalSli15693_Sw_SetConfig+0x1b4>
 80196c4:	89fb      	ldrh	r3, [r7, #14]
 80196c6:	e0fd      	b.n	80198c4 <phpalSli15693_Sw_SetConfig+0x3a4>
                wValue));
        }
        else
        {
            /* Return error if the error is other than PH_ERR_PARAMETER_OVERFLOW */
            PH_CHECK_SUCCESS(statusTmp);
 80196c8:	89fb      	ldrh	r3, [r7, #14]
 80196ca:	2b00      	cmp	r3, #0
 80196cc:	f000 80f0 	beq.w	80198b0 <phpalSli15693_Sw_SetConfig+0x390>
 80196d0:	89fb      	ldrh	r3, [r7, #14]
 80196d2:	e0f7      	b.n	80198c4 <phpalSli15693_Sw_SetConfig+0x3a4>
        }
        break;
 80196d4:	e0ec      	b.n	80198b0 <phpalSli15693_Sw_SetConfig+0x390>

    case PHPAL_SLI15693_CONFIG_TIMEOUT_MS:

        /* Retrieve current timeout */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 80196d6:	687b      	ldr	r3, [r7, #4]
 80196d8:	685b      	ldr	r3, [r3, #4]
 80196da:	f107 020c 	add.w	r2, r7, #12
 80196de:	210e      	movs	r1, #14
 80196e0:	4618      	mov	r0, r3
 80196e2:	f7f6 fca7 	bl	8010034 <phhalHw_Pn5180_GetConfig>
 80196e6:	4603      	mov	r3, r0
 80196e8:	81fb      	strh	r3, [r7, #14]
 80196ea:	89fb      	ldrh	r3, [r7, #14]
 80196ec:	2b00      	cmp	r3, #0
 80196ee:	d001      	beq.n	80196f4 <phpalSli15693_Sw_SetConfig+0x1d4>
 80196f0:	89fb      	ldrh	r3, [r7, #14]
 80196f2:	e0e7      	b.n	80198c4 <phpalSli15693_Sw_SetConfig+0x3a4>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
            &wValueOld));

        /* Set the new timeout */
        if (wValue != wValueOld)
 80196f4:	89bb      	ldrh	r3, [r7, #12]
 80196f6:	883a      	ldrh	r2, [r7, #0]
 80196f8:	429a      	cmp	r2, r3
 80196fa:	f000 80db 	beq.w	80198b4 <phpalSli15693_Sw_SetConfig+0x394>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80196fe:	687b      	ldr	r3, [r7, #4]
 8019700:	685b      	ldr	r3, [r3, #4]
 8019702:	883a      	ldrh	r2, [r7, #0]
 8019704:	210e      	movs	r1, #14
 8019706:	4618      	mov	r0, r3
 8019708:	f7f5 f846 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 801970c:	4603      	mov	r3, r0
 801970e:	81fb      	strh	r3, [r7, #14]
 8019710:	89fb      	ldrh	r3, [r7, #14]
 8019712:	2b00      	cmp	r3, #0
 8019714:	f000 80ce 	beq.w	80198b4 <phpalSli15693_Sw_SetConfig+0x394>
 8019718:	89fb      	ldrh	r3, [r7, #14]
 801971a:	e0d3      	b.n	80198c4 <phpalSli15693_Sw_SetConfig+0x3a4>
        }
        break;

    case PHPAL_SLI15693_CONFIG_T1_PARAMETER:

        if((wValue != PHPAL_SLI15693_TIMEOUT_SHORT_US) && (pDataParams->bOpeMode == RD_LIB_MODE_NFC))
 801971c:	883b      	ldrh	r3, [r7, #0]
 801971e:	f5b3 7fa2 	cmp.w	r3, #324	@ 0x144
 8019722:	d006      	beq.n	8019732 <phpalSli15693_Sw_SetConfig+0x212>
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	7d9b      	ldrb	r3, [r3, #22]
 8019728:	2b02      	cmp	r3, #2
 801972a:	d102      	bne.n	8019732 <phpalSli15693_Sw_SetConfig+0x212>
        {
            return PH_ADD_COMPCODE(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 801972c:	f640 2321 	movw	r3, #2593	@ 0xa21
 8019730:	e0c8      	b.n	80198c4 <phpalSli15693_Sw_SetConfig+0x3a4>
        }

        /* Retrieve current T1 Value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 8019732:	687b      	ldr	r3, [r7, #4]
 8019734:	685b      	ldr	r3, [r3, #4]
 8019736:	f107 020c 	add.w	r2, r7, #12
 801973a:	210d      	movs	r1, #13
 801973c:	4618      	mov	r0, r3
 801973e:	f7f6 fc79 	bl	8010034 <phhalHw_Pn5180_GetConfig>
 8019742:	4603      	mov	r3, r0
 8019744:	81fb      	strh	r3, [r7, #14]
 8019746:	89fb      	ldrh	r3, [r7, #14]
 8019748:	2b00      	cmp	r3, #0
 801974a:	d001      	beq.n	8019750 <phpalSli15693_Sw_SetConfig+0x230>
 801974c:	89fb      	ldrh	r3, [r7, #14]
 801974e:	e0b9      	b.n	80198c4 <phpalSli15693_Sw_SetConfig+0x3a4>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
            &wValueOld));

        /* Set the new T1 Value */
        if (wValue != wValueOld)
 8019750:	89bb      	ldrh	r3, [r7, #12]
 8019752:	883a      	ldrh	r2, [r7, #0]
 8019754:	429a      	cmp	r2, r3
 8019756:	f000 80af 	beq.w	80198b8 <phpalSli15693_Sw_SetConfig+0x398>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801975a:	687b      	ldr	r3, [r7, #4]
 801975c:	6858      	ldr	r0, [r3, #4]
 801975e:	883b      	ldrh	r3, [r7, #0]
 8019760:	3b0a      	subs	r3, #10
 8019762:	b29b      	uxth	r3, r3
 8019764:	461a      	mov	r2, r3
 8019766:	2106      	movs	r1, #6
 8019768:	f7f5 f816 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 801976c:	4603      	mov	r3, r0
 801976e:	81fb      	strh	r3, [r7, #14]
 8019770:	89fb      	ldrh	r3, [r7, #14]
 8019772:	2b00      	cmp	r3, #0
 8019774:	d001      	beq.n	801977a <phpalSli15693_Sw_SetConfig+0x25a>
 8019776:	89fb      	ldrh	r3, [r7, #14]
 8019778:	e0a4      	b.n	80198c4 <phpalSli15693_Sw_SetConfig+0x3a4>
                pDataParams->pHalDataParams,
                PHHAL_HW_CONFIG_RXWAIT_US,
                (wValue - 10U)));

            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801977a:	687b      	ldr	r3, [r7, #4]
 801977c:	685b      	ldr	r3, [r3, #4]
 801977e:	883a      	ldrh	r2, [r7, #0]
 8019780:	210d      	movs	r1, #13
 8019782:	4618      	mov	r0, r3
 8019784:	f7f5 f808 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8019788:	4603      	mov	r3, r0
 801978a:	81fb      	strh	r3, [r7, #14]
 801978c:	89fb      	ldrh	r3, [r7, #14]
 801978e:	2b00      	cmp	r3, #0
 8019790:	f000 8092 	beq.w	80198b8 <phpalSli15693_Sw_SetConfig+0x398>
 8019794:	89fb      	ldrh	r3, [r7, #14]
 8019796:	e095      	b.n	80198c4 <phpalSli15693_Sw_SetConfig+0x3a4>
                wValue));
        }
        break;

    case PHPAL_SLI15693_CONFIG_ENABLE_BUFFERING:
        pDataParams->bBuffering = (uint8_t)wValue;
 8019798:	883b      	ldrh	r3, [r7, #0]
 801979a:	b2da      	uxtb	r2, r3
 801979c:	687b      	ldr	r3, [r7, #4]
 801979e:	75da      	strb	r2, [r3, #23]
        break;
 80197a0:	e08f      	b.n	80198c2 <phpalSli15693_Sw_SetConfig+0x3a2>

    case PHPAL_SLI15693_CONFIG_TXDATARATE:

        if((pDataParams->bOpeMode == RD_LIB_MODE_NFC) && (wValue != PHPAL_SLI15693_26KBPS_DATARATE ))
 80197a2:	687b      	ldr	r3, [r7, #4]
 80197a4:	7d9b      	ldrb	r3, [r3, #22]
 80197a6:	2b02      	cmp	r3, #2
 80197a8:	d105      	bne.n	80197b6 <phpalSli15693_Sw_SetConfig+0x296>
 80197aa:	883b      	ldrh	r3, [r7, #0]
 80197ac:	2b1a      	cmp	r3, #26
 80197ae:	d002      	beq.n	80197b6 <phpalSli15693_Sw_SetConfig+0x296>
        {
            return PH_ADD_COMPCODE(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 80197b0:	f640 2321 	movw	r3, #2593	@ 0xa21
 80197b4:	e086      	b.n	80198c4 <phpalSli15693_Sw_SetConfig+0x3a4>
        }

        if(wValue > PHPAL_SLI15693_212KBPS_DATARATE)
 80197b6:	883b      	ldrh	r3, [r7, #0]
 80197b8:	2b1d      	cmp	r3, #29
 80197ba:	d902      	bls.n	80197c2 <phpalSli15693_Sw_SetConfig+0x2a2>
        {
            return PH_ADD_COMPCODE(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_SLI15693);
 80197bc:	f640 2323 	movw	r3, #2595	@ 0xa23
 80197c0:	e080      	b.n	80198c4 <phpalSli15693_Sw_SetConfig+0x3a4>
        }

        switch(wValue)
 80197c2:	883b      	ldrh	r3, [r7, #0]
 80197c4:	3b1a      	subs	r3, #26
 80197c6:	2b03      	cmp	r3, #3
 80197c8:	d816      	bhi.n	80197f8 <phpalSli15693_Sw_SetConfig+0x2d8>
 80197ca:	a201      	add	r2, pc, #4	@ (adr r2, 80197d0 <phpalSli15693_Sw_SetConfig+0x2b0>)
 80197cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80197d0:	080197e1 	.word	0x080197e1
 80197d4:	080197e7 	.word	0x080197e7
 80197d8:	080197ed 	.word	0x080197ed
 80197dc:	080197f3 	.word	0x080197f3
        {
        case PHPAL_SLI15693_26KBPS_DATARATE:
            wValue = PHHAL_HW_RF_TX_DATARATE_1_OUT_OF_4;
 80197e0:	230b      	movs	r3, #11
 80197e2:	803b      	strh	r3, [r7, #0]
            break;
 80197e4:	e009      	b.n	80197fa <phpalSli15693_Sw_SetConfig+0x2da>
        case PHPAL_SLI15693_53KBPS_DATARATE:
            wValue =  PHHAL_HW_RF_I15693_53KBPS_DATARATE;
 80197e6:	231b      	movs	r3, #27
 80197e8:	803b      	strh	r3, [r7, #0]
            break;
 80197ea:	e006      	b.n	80197fa <phpalSli15693_Sw_SetConfig+0x2da>
        case PHPAL_SLI15693_106KBPS_DATARATE:
            wValue = PHHAL_HW_RF_DATARATE_106;
 80197ec:	2300      	movs	r3, #0
 80197ee:	803b      	strh	r3, [r7, #0]
            break;
 80197f0:	e003      	b.n	80197fa <phpalSli15693_Sw_SetConfig+0x2da>
        case PHPAL_SLI15693_212KBPS_DATARATE:
            wValue = PHHAL_HW_RF_DATARATE_212;
 80197f2:	2301      	movs	r3, #1
 80197f4:	803b      	strh	r3, [r7, #0]
            break;
 80197f6:	e000      	b.n	80197fa <phpalSli15693_Sw_SetConfig+0x2da>
        default:
            break;
 80197f8:	bf00      	nop
        }

        /* Set the new TX data rate */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80197fa:	687b      	ldr	r3, [r7, #4]
 80197fc:	685b      	ldr	r3, [r3, #4]
 80197fe:	883a      	ldrh	r2, [r7, #0]
 8019800:	2109      	movs	r1, #9
 8019802:	4618      	mov	r0, r3
 8019804:	f7f4 ffc8 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8019808:	4603      	mov	r3, r0
 801980a:	81fb      	strh	r3, [r7, #14]
 801980c:	89fb      	ldrh	r3, [r7, #14]
 801980e:	2b00      	cmp	r3, #0
 8019810:	d054      	beq.n	80198bc <phpalSli15693_Sw_SetConfig+0x39c>
 8019812:	89fb      	ldrh	r3, [r7, #14]
 8019814:	e056      	b.n	80198c4 <phpalSli15693_Sw_SetConfig+0x3a4>

        break;

    case PHPAL_SLI15693_CONFIG_RXDATARATE:

        if((pDataParams->bOpeMode == RD_LIB_MODE_NFC) && (wValue != PHPAL_SLI15693_26KBPS_DATARATE))
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	7d9b      	ldrb	r3, [r3, #22]
 801981a:	2b02      	cmp	r3, #2
 801981c:	d105      	bne.n	801982a <phpalSli15693_Sw_SetConfig+0x30a>
 801981e:	883b      	ldrh	r3, [r7, #0]
 8019820:	2b1a      	cmp	r3, #26
 8019822:	d002      	beq.n	801982a <phpalSli15693_Sw_SetConfig+0x30a>
        {
            return PH_ADD_COMPCODE(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 8019824:	f640 2321 	movw	r3, #2593	@ 0xa21
 8019828:	e04c      	b.n	80198c4 <phpalSli15693_Sw_SetConfig+0x3a4>
        }

        switch(wValue)
 801982a:	883b      	ldrh	r3, [r7, #0]
 801982c:	3b1a      	subs	r3, #26
 801982e:	2b03      	cmp	r3, #3
 8019830:	d816      	bhi.n	8019860 <phpalSli15693_Sw_SetConfig+0x340>
 8019832:	a201      	add	r2, pc, #4	@ (adr r2, 8019838 <phpalSli15693_Sw_SetConfig+0x318>)
 8019834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019838:	08019849 	.word	0x08019849
 801983c:	0801984f 	.word	0x0801984f
 8019840:	08019855 	.word	0x08019855
 8019844:	0801985b 	.word	0x0801985b
        {
        case PHPAL_SLI15693_26KBPS_DATARATE:
            wValue = PHHAL_HW_RF_RX_DATARATE_HIGH;
 8019848:	230d      	movs	r3, #13
 801984a:	803b      	strh	r3, [r7, #0]
            break;
 801984c:	e009      	b.n	8019862 <phpalSli15693_Sw_SetConfig+0x342>
        case PHPAL_SLI15693_53KBPS_DATARATE:
            wValue = PHHAL_HW_RF_RX_DATARATE_FAST_HIGH;
 801984e:	230f      	movs	r3, #15
 8019850:	803b      	strh	r3, [r7, #0]
            break;
 8019852:	e006      	b.n	8019862 <phpalSli15693_Sw_SetConfig+0x342>
        case PHPAL_SLI15693_106KBPS_DATARATE:
            wValue = PHHAL_HW_RF_DATARATE_106;
 8019854:	2300      	movs	r3, #0
 8019856:	803b      	strh	r3, [r7, #0]
            break;
 8019858:	e003      	b.n	8019862 <phpalSli15693_Sw_SetConfig+0x342>
        case PHPAL_SLI15693_212KBPS_DATARATE:
            wValue = PHHAL_HW_RF_DATARATE_212;
 801985a:	2301      	movs	r3, #1
 801985c:	803b      	strh	r3, [r7, #0]
            break;
 801985e:	e000      	b.n	8019862 <phpalSli15693_Sw_SetConfig+0x342>
        default:
            break;
 8019860:	bf00      	nop
        }

        /* Set the new RX data rate */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8019862:	687b      	ldr	r3, [r7, #4]
 8019864:	685b      	ldr	r3, [r3, #4]
 8019866:	883a      	ldrh	r2, [r7, #0]
 8019868:	210a      	movs	r1, #10
 801986a:	4618      	mov	r0, r3
 801986c:	f7f4 ff94 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8019870:	4603      	mov	r3, r0
 8019872:	81fb      	strh	r3, [r7, #14]
 8019874:	89fb      	ldrh	r3, [r7, #14]
 8019876:	2b00      	cmp	r3, #0
 8019878:	d022      	beq.n	80198c0 <phpalSli15693_Sw_SetConfig+0x3a0>
 801987a:	89fb      	ldrh	r3, [r7, #14]
 801987c:	e022      	b.n	80198c4 <phpalSli15693_Sw_SetConfig+0x3a4>
            wValue));

        break;

    case PHPAL_SLI15693_CONFIG_MAXRETRYCOUNT:
            if(pDataParams->bMaxRetryCount > PHPAL_SLI15693_SW_RETRYCOUNT_MAX)
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	7e1b      	ldrb	r3, [r3, #24]
 8019882:	2b05      	cmp	r3, #5
 8019884:	d902      	bls.n	801988c <phpalSli15693_Sw_SetConfig+0x36c>
            {
                return PH_ADD_COMPCODE(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 8019886:	f640 2321 	movw	r3, #2593	@ 0xa21
 801988a:	e01b      	b.n	80198c4 <phpalSli15693_Sw_SetConfig+0x3a4>
            }
            pDataParams->bMaxRetryCount = (uint8_t)wValue;
 801988c:	883b      	ldrh	r3, [r7, #0]
 801988e:	b2da      	uxtb	r2, r3
 8019890:	687b      	ldr	r3, [r7, #4]
 8019892:	761a      	strb	r2, [r3, #24]
            break;
 8019894:	e015      	b.n	80198c2 <phpalSli15693_Sw_SetConfig+0x3a2>

    case PHPAL_SLI15693_CONFIG_ICMFGCODE:
            pDataParams->bIcMfgCode = (uint8_t)wValue;
 8019896:	883b      	ldrh	r3, [r7, #0]
 8019898:	b2da      	uxtb	r2, r3
 801989a:	687b      	ldr	r3, [r7, #4]
 801989c:	765a      	strb	r2, [r3, #25]
            break;
 801989e:	e010      	b.n	80198c2 <phpalSli15693_Sw_SetConfig+0x3a2>

    case PHPAL_SLI15693_CONFIG_OPE_MODE:
            pDataParams->bOpeMode = (uint8_t)wValue;
 80198a0:	883b      	ldrh	r3, [r7, #0]
 80198a2:	b2da      	uxtb	r2, r3
 80198a4:	687b      	ldr	r3, [r7, #4]
 80198a6:	759a      	strb	r2, [r3, #22]
            break;
 80198a8:	e00b      	b.n	80198c2 <phpalSli15693_Sw_SetConfig+0x3a2>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_SLI15693);
 80198aa:	f640 2323 	movw	r3, #2595	@ 0xa23
 80198ae:	e009      	b.n	80198c4 <phpalSli15693_Sw_SetConfig+0x3a4>
        break;
 80198b0:	bf00      	nop
 80198b2:	e006      	b.n	80198c2 <phpalSli15693_Sw_SetConfig+0x3a2>
        break;
 80198b4:	bf00      	nop
 80198b6:	e004      	b.n	80198c2 <phpalSli15693_Sw_SetConfig+0x3a2>
        break;
 80198b8:	bf00      	nop
 80198ba:	e002      	b.n	80198c2 <phpalSli15693_Sw_SetConfig+0x3a2>
        break;
 80198bc:	bf00      	nop
 80198be:	e000      	b.n	80198c2 <phpalSli15693_Sw_SetConfig+0x3a2>
        break;
 80198c0:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 80198c2:	2300      	movs	r3, #0
}
 80198c4:	4618      	mov	r0, r3
 80198c6:	3710      	adds	r7, #16
 80198c8:	46bd      	mov	sp, r7
 80198ca:	bd80      	pop	{r7, pc}

080198cc <phpalSli15693_Sw_GetConfig>:
phStatus_t phpalSli15693_Sw_GetConfig(
                                      phpalSli15693_Sw_DataParams_t * pDataParams,
                                      uint16_t wConfig,
                                      uint16_t * pValue
                                      )
{
 80198cc:	b580      	push	{r7, lr}
 80198ce:	b086      	sub	sp, #24
 80198d0:	af00      	add	r7, sp, #0
 80198d2:	60f8      	str	r0, [r7, #12]
 80198d4:	460b      	mov	r3, r1
 80198d6:	607a      	str	r2, [r7, #4]
 80198d8:	817b      	strh	r3, [r7, #10]
    phStatus_t PH_MEMLOC_REM statusTmp;

    switch (wConfig)
 80198da:	897b      	ldrh	r3, [r7, #10]
 80198dc:	2b0a      	cmp	r3, #10
 80198de:	f200 8115 	bhi.w	8019b0c <phpalSli15693_Sw_GetConfig+0x240>
 80198e2:	a201      	add	r2, pc, #4	@ (adr r2, 80198e8 <phpalSli15693_Sw_GetConfig+0x1c>)
 80198e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80198e8:	08019915 	.word	0x08019915
 80198ec:	08019921 	.word	0x08019921
 80198f0:	0801992b 	.word	0x0801992b
 80198f4:	08019955 	.word	0x08019955
 80198f8:	08019973 	.word	0x08019973
 80198fc:	08019a31 	.word	0x08019a31
 8019900:	08019ac1 	.word	0x08019ac1
 8019904:	08019add 	.word	0x08019add
 8019908:	08019ae9 	.word	0x08019ae9
 801990c:	08019af5 	.word	0x08019af5
 8019910:	08019b01 	.word	0x08019b01
    {
    case PHPAL_SLI15693_CONFIG_FLAGS:
        *pValue = pDataParams->bFlags;
 8019914:	68fb      	ldr	r3, [r7, #12]
 8019916:	7a9b      	ldrb	r3, [r3, #10]
 8019918:	461a      	mov	r2, r3
 801991a:	687b      	ldr	r3, [r7, #4]
 801991c:	801a      	strh	r2, [r3, #0]
        break;
 801991e:	e0fb      	b.n	8019b18 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_ADD_INFO:
        *pValue = pDataParams->wAdditionalInfo;
 8019920:	68fb      	ldr	r3, [r7, #12]
 8019922:	891a      	ldrh	r2, [r3, #8]
 8019924:	687b      	ldr	r3, [r7, #4]
 8019926:	801a      	strh	r2, [r3, #0]
        break;
 8019928:	e0f6      	b.n	8019b18 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_TIMEOUT_US:
        /* Get HAL timeout value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 801992a:	68fb      	ldr	r3, [r7, #12]
 801992c:	685b      	ldr	r3, [r3, #4]
 801992e:	687a      	ldr	r2, [r7, #4]
 8019930:	210d      	movs	r1, #13
 8019932:	4618      	mov	r0, r3
 8019934:	f7f6 fb7e 	bl	8010034 <phhalHw_Pn5180_GetConfig>
 8019938:	4603      	mov	r3, r0
 801993a:	82fb      	strh	r3, [r7, #22]
 801993c:	8afb      	ldrh	r3, [r7, #22]
 801993e:	2b00      	cmp	r3, #0
 8019940:	d001      	beq.n	8019946 <phpalSli15693_Sw_GetConfig+0x7a>
 8019942:	8afb      	ldrh	r3, [r7, #22]
 8019944:	e0e9      	b.n	8019b1a <phpalSli15693_Sw_GetConfig+0x24e>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
            pValue));

        /* Remove timeout extension */
        *pValue -= PHPAL_SLI15693_SW_EXT_TIME_US;
 8019946:	687b      	ldr	r3, [r7, #4]
 8019948:	881b      	ldrh	r3, [r3, #0]
 801994a:	3b3c      	subs	r3, #60	@ 0x3c
 801994c:	b29a      	uxth	r2, r3
 801994e:	687b      	ldr	r3, [r7, #4]
 8019950:	801a      	strh	r2, [r3, #0]
        break;
 8019952:	e0e1      	b.n	8019b18 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_TIMEOUT_MS:
        /* Get HAL timeout value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 8019954:	68fb      	ldr	r3, [r7, #12]
 8019956:	685b      	ldr	r3, [r3, #4]
 8019958:	687a      	ldr	r2, [r7, #4]
 801995a:	210e      	movs	r1, #14
 801995c:	4618      	mov	r0, r3
 801995e:	f7f6 fb69 	bl	8010034 <phhalHw_Pn5180_GetConfig>
 8019962:	4603      	mov	r3, r0
 8019964:	82fb      	strh	r3, [r7, #22]
 8019966:	8afb      	ldrh	r3, [r7, #22]
 8019968:	2b00      	cmp	r3, #0
 801996a:	f000 80d2 	beq.w	8019b12 <phpalSli15693_Sw_GetConfig+0x246>
 801996e:	8afb      	ldrh	r3, [r7, #22]
 8019970:	e0d3      	b.n	8019b1a <phpalSli15693_Sw_GetConfig+0x24e>

        break;

    case PHPAL_SLI15693_CONFIG_TXDATARATE:
        /* Get HAL Tx Data Rate value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 8019972:	68fb      	ldr	r3, [r7, #12]
 8019974:	685b      	ldr	r3, [r3, #4]
 8019976:	687a      	ldr	r2, [r7, #4]
 8019978:	2109      	movs	r1, #9
 801997a:	4618      	mov	r0, r3
 801997c:	f7f6 fb5a 	bl	8010034 <phhalHw_Pn5180_GetConfig>
 8019980:	4603      	mov	r3, r0
 8019982:	82fb      	strh	r3, [r7, #22]
 8019984:	8afb      	ldrh	r3, [r7, #22]
 8019986:	2b00      	cmp	r3, #0
 8019988:	d001      	beq.n	801998e <phpalSli15693_Sw_GetConfig+0xc2>
 801998a:	8afb      	ldrh	r3, [r7, #22]
 801998c:	e0c5      	b.n	8019b1a <phpalSli15693_Sw_GetConfig+0x24e>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_TXDATARATE_FRAMING,
            pValue));

        /* Map the HAL TX BaudRates to generic 15693 BaudRates */
        switch(*pValue)
 801998e:	687b      	ldr	r3, [r7, #4]
 8019990:	881b      	ldrh	r3, [r3, #0]
 8019992:	2b1b      	cmp	r3, #27
 8019994:	d84a      	bhi.n	8019a2c <phpalSli15693_Sw_GetConfig+0x160>
 8019996:	a201      	add	r2, pc, #4	@ (adr r2, 801999c <phpalSli15693_Sw_GetConfig+0xd0>)
 8019998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801999c:	08019a1d 	.word	0x08019a1d
 80199a0:	08019a25 	.word	0x08019a25
 80199a4:	08019a2d 	.word	0x08019a2d
 80199a8:	08019a2d 	.word	0x08019a2d
 80199ac:	08019a2d 	.word	0x08019a2d
 80199b0:	08019a2d 	.word	0x08019a2d
 80199b4:	08019a2d 	.word	0x08019a2d
 80199b8:	08019a2d 	.word	0x08019a2d
 80199bc:	08019a2d 	.word	0x08019a2d
 80199c0:	08019a2d 	.word	0x08019a2d
 80199c4:	08019a2d 	.word	0x08019a2d
 80199c8:	08019a0d 	.word	0x08019a0d
 80199cc:	08019a2d 	.word	0x08019a2d
 80199d0:	08019a2d 	.word	0x08019a2d
 80199d4:	08019a2d 	.word	0x08019a2d
 80199d8:	08019a2d 	.word	0x08019a2d
 80199dc:	08019a2d 	.word	0x08019a2d
 80199e0:	08019a2d 	.word	0x08019a2d
 80199e4:	08019a2d 	.word	0x08019a2d
 80199e8:	08019a2d 	.word	0x08019a2d
 80199ec:	08019a2d 	.word	0x08019a2d
 80199f0:	08019a2d 	.word	0x08019a2d
 80199f4:	08019a2d 	.word	0x08019a2d
 80199f8:	08019a2d 	.word	0x08019a2d
 80199fc:	08019a2d 	.word	0x08019a2d
 8019a00:	08019a2d 	.word	0x08019a2d
 8019a04:	08019a2d 	.word	0x08019a2d
 8019a08:	08019a15 	.word	0x08019a15
        {
        case PHHAL_HW_RF_TX_DATARATE_1_OUT_OF_4:
            *pValue = PHPAL_SLI15693_26KBPS_DATARATE;
 8019a0c:	687b      	ldr	r3, [r7, #4]
 8019a0e:	221a      	movs	r2, #26
 8019a10:	801a      	strh	r2, [r3, #0]
            break;
 8019a12:	e00c      	b.n	8019a2e <phpalSli15693_Sw_GetConfig+0x162>
        case PHHAL_HW_RF_I15693_53KBPS_DATARATE:
            *pValue = PHPAL_SLI15693_53KBPS_DATARATE;
 8019a14:	687b      	ldr	r3, [r7, #4]
 8019a16:	221b      	movs	r2, #27
 8019a18:	801a      	strh	r2, [r3, #0]
            break;
 8019a1a:	e008      	b.n	8019a2e <phpalSli15693_Sw_GetConfig+0x162>
        case PHHAL_HW_RF_DATARATE_106:
            *pValue = PHPAL_SLI15693_106KBPS_DATARATE;
 8019a1c:	687b      	ldr	r3, [r7, #4]
 8019a1e:	221c      	movs	r2, #28
 8019a20:	801a      	strh	r2, [r3, #0]
            break;
 8019a22:	e004      	b.n	8019a2e <phpalSli15693_Sw_GetConfig+0x162>
        case PHHAL_HW_RF_DATARATE_212:
            *pValue = PHPAL_SLI15693_212KBPS_DATARATE;
 8019a24:	687b      	ldr	r3, [r7, #4]
 8019a26:	221d      	movs	r2, #29
 8019a28:	801a      	strh	r2, [r3, #0]
            break;
 8019a2a:	e000      	b.n	8019a2e <phpalSli15693_Sw_GetConfig+0x162>
        default:
            break;
 8019a2c:	bf00      	nop
        }
        break;
 8019a2e:	e073      	b.n	8019b18 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_RXDATARATE:
        /* Get HAL timeout value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 8019a30:	68fb      	ldr	r3, [r7, #12]
 8019a32:	685b      	ldr	r3, [r3, #4]
 8019a34:	687a      	ldr	r2, [r7, #4]
 8019a36:	210a      	movs	r1, #10
 8019a38:	4618      	mov	r0, r3
 8019a3a:	f7f6 fafb 	bl	8010034 <phhalHw_Pn5180_GetConfig>
 8019a3e:	4603      	mov	r3, r0
 8019a40:	82fb      	strh	r3, [r7, #22]
 8019a42:	8afb      	ldrh	r3, [r7, #22]
 8019a44:	2b00      	cmp	r3, #0
 8019a46:	d001      	beq.n	8019a4c <phpalSli15693_Sw_GetConfig+0x180>
 8019a48:	8afb      	ldrh	r3, [r7, #22]
 8019a4a:	e066      	b.n	8019b1a <phpalSli15693_Sw_GetConfig+0x24e>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_RXDATARATE_FRAMING,
            pValue));

        /* Map the HAL RX BaudRates to generic 15693 BaudRates */
        switch(*pValue)
 8019a4c:	687b      	ldr	r3, [r7, #4]
 8019a4e:	881b      	ldrh	r3, [r3, #0]
 8019a50:	2b0f      	cmp	r3, #15
 8019a52:	d833      	bhi.n	8019abc <phpalSli15693_Sw_GetConfig+0x1f0>
 8019a54:	a201      	add	r2, pc, #4	@ (adr r2, 8019a5c <phpalSli15693_Sw_GetConfig+0x190>)
 8019a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019a5a:	bf00      	nop
 8019a5c:	08019aad 	.word	0x08019aad
 8019a60:	08019ab5 	.word	0x08019ab5
 8019a64:	08019abd 	.word	0x08019abd
 8019a68:	08019abd 	.word	0x08019abd
 8019a6c:	08019abd 	.word	0x08019abd
 8019a70:	08019abd 	.word	0x08019abd
 8019a74:	08019abd 	.word	0x08019abd
 8019a78:	08019abd 	.word	0x08019abd
 8019a7c:	08019abd 	.word	0x08019abd
 8019a80:	08019abd 	.word	0x08019abd
 8019a84:	08019abd 	.word	0x08019abd
 8019a88:	08019abd 	.word	0x08019abd
 8019a8c:	08019abd 	.word	0x08019abd
 8019a90:	08019a9d 	.word	0x08019a9d
 8019a94:	08019abd 	.word	0x08019abd
 8019a98:	08019aa5 	.word	0x08019aa5
        {
        case PHHAL_HW_RF_RX_DATARATE_HIGH:
            *pValue = PHPAL_SLI15693_26KBPS_DATARATE;
 8019a9c:	687b      	ldr	r3, [r7, #4]
 8019a9e:	221a      	movs	r2, #26
 8019aa0:	801a      	strh	r2, [r3, #0]
            break;
 8019aa2:	e00c      	b.n	8019abe <phpalSli15693_Sw_GetConfig+0x1f2>
        case PHHAL_HW_RF_RX_DATARATE_FAST_HIGH:
            *pValue = PHPAL_SLI15693_53KBPS_DATARATE;
 8019aa4:	687b      	ldr	r3, [r7, #4]
 8019aa6:	221b      	movs	r2, #27
 8019aa8:	801a      	strh	r2, [r3, #0]
            break;
 8019aaa:	e008      	b.n	8019abe <phpalSli15693_Sw_GetConfig+0x1f2>
        case PHHAL_HW_RF_DATARATE_106:
            *pValue = PHPAL_SLI15693_106KBPS_DATARATE;
 8019aac:	687b      	ldr	r3, [r7, #4]
 8019aae:	221c      	movs	r2, #28
 8019ab0:	801a      	strh	r2, [r3, #0]
            break;
 8019ab2:	e004      	b.n	8019abe <phpalSli15693_Sw_GetConfig+0x1f2>
        case PHHAL_HW_RF_DATARATE_212:
            *pValue = PHPAL_SLI15693_212KBPS_DATARATE;
 8019ab4:	687b      	ldr	r3, [r7, #4]
 8019ab6:	221d      	movs	r2, #29
 8019ab8:	801a      	strh	r2, [r3, #0]
            break;
 8019aba:	e000      	b.n	8019abe <phpalSli15693_Sw_GetConfig+0x1f2>
        default:
            break;
 8019abc:	bf00      	nop
        }
        break;
 8019abe:	e02b      	b.n	8019b18 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_T1_PARAMETER:

        /* Retrieve current T1 Value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 8019ac0:	68fb      	ldr	r3, [r7, #12]
 8019ac2:	685b      	ldr	r3, [r3, #4]
 8019ac4:	687a      	ldr	r2, [r7, #4]
 8019ac6:	210d      	movs	r1, #13
 8019ac8:	4618      	mov	r0, r3
 8019aca:	f7f6 fab3 	bl	8010034 <phhalHw_Pn5180_GetConfig>
 8019ace:	4603      	mov	r3, r0
 8019ad0:	82fb      	strh	r3, [r7, #22]
 8019ad2:	8afb      	ldrh	r3, [r7, #22]
 8019ad4:	2b00      	cmp	r3, #0
 8019ad6:	d01e      	beq.n	8019b16 <phpalSli15693_Sw_GetConfig+0x24a>
 8019ad8:	8afb      	ldrh	r3, [r7, #22]
 8019ada:	e01e      	b.n	8019b1a <phpalSli15693_Sw_GetConfig+0x24e>
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
            pValue));
        break;

    case PHPAL_SLI15693_CONFIG_ENABLE_BUFFERING:
        *pValue = pDataParams->bBuffering;
 8019adc:	68fb      	ldr	r3, [r7, #12]
 8019ade:	7ddb      	ldrb	r3, [r3, #23]
 8019ae0:	461a      	mov	r2, r3
 8019ae2:	687b      	ldr	r3, [r7, #4]
 8019ae4:	801a      	strh	r2, [r3, #0]
        break;
 8019ae6:	e017      	b.n	8019b18 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_MAXRETRYCOUNT:
        *pValue = pDataParams->bMaxRetryCount;
 8019ae8:	68fb      	ldr	r3, [r7, #12]
 8019aea:	7e1b      	ldrb	r3, [r3, #24]
 8019aec:	461a      	mov	r2, r3
 8019aee:	687b      	ldr	r3, [r7, #4]
 8019af0:	801a      	strh	r2, [r3, #0]
        break;
 8019af2:	e011      	b.n	8019b18 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_ICMFGCODE:
        *pValue = pDataParams->bIcMfgCode;
 8019af4:	68fb      	ldr	r3, [r7, #12]
 8019af6:	7e5b      	ldrb	r3, [r3, #25]
 8019af8:	461a      	mov	r2, r3
 8019afa:	687b      	ldr	r3, [r7, #4]
 8019afc:	801a      	strh	r2, [r3, #0]
        break;
 8019afe:	e00b      	b.n	8019b18 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_OPE_MODE:
        *pValue = pDataParams->bOpeMode;
 8019b00:	68fb      	ldr	r3, [r7, #12]
 8019b02:	7d9b      	ldrb	r3, [r3, #22]
 8019b04:	461a      	mov	r2, r3
 8019b06:	687b      	ldr	r3, [r7, #4]
 8019b08:	801a      	strh	r2, [r3, #0]
        break;
 8019b0a:	e005      	b.n	8019b18 <phpalSli15693_Sw_GetConfig+0x24c>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_SLI15693);
 8019b0c:	f640 2323 	movw	r3, #2595	@ 0xa23
 8019b10:	e003      	b.n	8019b1a <phpalSli15693_Sw_GetConfig+0x24e>
        break;
 8019b12:	bf00      	nop
 8019b14:	e000      	b.n	8019b18 <phpalSli15693_Sw_GetConfig+0x24c>
        break;
 8019b16:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 8019b18:	2300      	movs	r3, #0
}
 8019b1a:	4618      	mov	r0, r3
 8019b1c:	3718      	adds	r7, #24
 8019b1e:	46bd      	mov	sp, r7
 8019b20:	bd80      	pop	{r7, pc}
 8019b22:	bf00      	nop

08019b24 <phpalSli15693_Sw_InventoryEx>:
                                        uint8_t * pUid,
                                        uint8_t * pUidLength,
                                        uint8_t * pData,
                                        uint16_t * pDataLength
                                        )
{
 8019b24:	b580      	push	{r7, lr}
 8019b26:	b08e      	sub	sp, #56	@ 0x38
 8019b28:	af0c      	add	r7, sp, #48	@ 0x30
 8019b2a:	6078      	str	r0, [r7, #4]
 8019b2c:	4608      	mov	r0, r1
 8019b2e:	4611      	mov	r1, r2
 8019b30:	461a      	mov	r2, r3
 8019b32:	4603      	mov	r3, r0
 8019b34:	70fb      	strb	r3, [r7, #3]
 8019b36:	460b      	mov	r3, r1
 8019b38:	70bb      	strb	r3, [r7, #2]
 8019b3a:	4613      	mov	r3, r2
 8019b3c:	707b      	strb	r3, [r7, #1]
        return  phpalSli15693_Sw_InventoryExt(
 8019b3e:	7878      	ldrb	r0, [r7, #1]
 8019b40:	78ba      	ldrb	r2, [r7, #2]
 8019b42:	78f9      	ldrb	r1, [r7, #3]
 8019b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019b46:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019b4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8019b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8019b50:	6a3b      	ldr	r3, [r7, #32]
 8019b52:	9308      	str	r3, [sp, #32]
 8019b54:	2300      	movs	r3, #0
 8019b56:	9307      	str	r3, [sp, #28]
 8019b58:	8bbb      	ldrh	r3, [r7, #28]
 8019b5a:	9306      	str	r3, [sp, #24]
 8019b5c:	7e3b      	ldrb	r3, [r7, #24]
 8019b5e:	9305      	str	r3, [sp, #20]
 8019b60:	7d3b      	ldrb	r3, [r7, #20]
 8019b62:	9304      	str	r3, [sp, #16]
 8019b64:	693b      	ldr	r3, [r7, #16]
 8019b66:	9303      	str	r3, [sp, #12]
 8019b68:	2300      	movs	r3, #0
 8019b6a:	9302      	str	r3, [sp, #8]
 8019b6c:	2300      	movs	r3, #0
 8019b6e:	9301      	str	r3, [sp, #4]
 8019b70:	2300      	movs	r3, #0
 8019b72:	9300      	str	r3, [sp, #0]
 8019b74:	4603      	mov	r3, r0
 8019b76:	6878      	ldr	r0, [r7, #4]
 8019b78:	f000 f805 	bl	8019b86 <phpalSli15693_Sw_InventoryExt>
 8019b7c:	4603      	mov	r3, r0
                pUid,
                pUidLength,
                pData,
                pDataLength
                );
}
 8019b7e:	4618      	mov	r0, r3
 8019b80:	3708      	adds	r7, #8
 8019b82:	46bd      	mov	sp, r7
 8019b84:	bd80      	pop	{r7, pc}

08019b86 <phpalSli15693_Sw_InventoryExt>:
                                        uint8_t * pUid,
                                        uint8_t * pUidLength,
                                        uint8_t * pData,
                                        uint16_t * pDataLength
                                        )
{
 8019b86:	b580      	push	{r7, lr}
 8019b88:	b090      	sub	sp, #64	@ 0x40
 8019b8a:	af02      	add	r7, sp, #8
 8019b8c:	6078      	str	r0, [r7, #4]
 8019b8e:	4608      	mov	r0, r1
 8019b90:	4611      	mov	r1, r2
 8019b92:	461a      	mov	r2, r3
 8019b94:	4603      	mov	r3, r0
 8019b96:	70fb      	strb	r3, [r7, #3]
 8019b98:	460b      	mov	r3, r1
 8019b9a:	70bb      	strb	r3, [r7, #2]
 8019b9c:	4613      	mov	r3, r2
 8019b9e:	707b      	strb	r3, [r7, #1]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bCmdBuffer[15];
    uint8_t     PH_MEMLOC_REM bCmdBufferLen = 0;
 8019ba0:	2300      	movs	r3, #0
 8019ba2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint8_t     PH_MEMLOC_REM bCmdOffset = 0;
 8019ba6:	2300      	movs	r3, #0
 8019ba8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    uint8_t     PH_MEMLOC_REM bMaskByteLength;
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8019bac:	2300      	movs	r3, #0
 8019bae:	613b      	str	r3, [r7, #16]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8019bb0:	2300      	movs	r3, #0
 8019bb2:	81fb      	strh	r3, [r7, #14]
    uint8_t     PH_MEMLOC_REM bStoredUidLength = 0;
 8019bb4:	2300      	movs	r3, #0
 8019bb6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    uint16_t    PH_MEMLOC_REM wAsk = 0;
 8019bba:	2300      	movs	r3, #0
 8019bbc:	81bb      	strh	r3, [r7, #12]
    uint16_t    PH_MEMLOC_REM wTimeout = 0;
 8019bbe:	2300      	movs	r3, #0
 8019bc0:	867b      	strh	r3, [r7, #50]	@ 0x32
    uint16_t    PH_MEMLOC_REM wCurrBlocksToRead = 0;
 8019bc2:	2300      	movs	r3, #0
 8019bc4:	863b      	strh	r3, [r7, #48]	@ 0x30
    uint16_t    PH_MEMLOC_REM wCurrBlockNo = 0;
 8019bc6:	2300      	movs	r3, #0
 8019bc8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    uint16_t    PH_MEMLOC_REM wMaxNoBlocks = 0;
 8019bca:	2300      	movs	r3, #0
 8019bcc:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    uint8_t     PH_MEMLOC_REM bAllBlocksRead = 0;
 8019bce:	2300      	movs	r3, #0
 8019bd0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    uint8_t     PH_MEMLOC_REM bFirst = 0;
 8019bd4:	2300      	movs	r3, #0
 8019bd6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

    /* Reset UID and data length */
    pDataParams->bUidBitLength = 0;
 8019bda:	687b      	ldr	r3, [r7, #4]
 8019bdc:	2200      	movs	r2, #0
 8019bde:	751a      	strb	r2, [r3, #20]

    if(((pUidLength == NULL) || (pUid == NULL)) || ((0U != ((bExtendedOptions & PHPAL_SLI15693_FLAG_SKIP_DATA))) && ((pDataLength == NULL) || (pData == NULL))))
 8019be0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019be2:	2b00      	cmp	r3, #0
 8019be4:	d00e      	beq.n	8019c04 <phpalSli15693_Sw_InventoryExt+0x7e>
 8019be6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019be8:	2b00      	cmp	r3, #0
 8019bea:	d00b      	beq.n	8019c04 <phpalSli15693_Sw_InventoryExt+0x7e>
 8019bec:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8019bf0:	f003 0310 	and.w	r3, r3, #16
 8019bf4:	2b00      	cmp	r3, #0
 8019bf6:	d008      	beq.n	8019c0a <phpalSli15693_Sw_InventoryExt+0x84>
 8019bf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8019bfa:	2b00      	cmp	r3, #0
 8019bfc:	d002      	beq.n	8019c04 <phpalSli15693_Sw_InventoryExt+0x7e>
 8019bfe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019c00:	2b00      	cmp	r3, #0
 8019c02:	d102      	bne.n	8019c0a <phpalSli15693_Sw_InventoryExt+0x84>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 8019c04:	f640 2321 	movw	r3, #2593	@ 0xa21
 8019c08:	e334      	b.n	801a274 <phpalSli15693_Sw_InventoryExt+0x6ee>
    }

    /* If Extended Option is looking for CID response then CID should not be null */
    if ((0U != ((bExtendedOptions & PHPAL_SLI15693_FLAG_CID_COMPARE))) && (pCID == NULL))
 8019c0a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8019c0e:	f003 0304 	and.w	r3, r3, #4
 8019c12:	2b00      	cmp	r3, #0
 8019c14:	d005      	beq.n	8019c22 <phpalSli15693_Sw_InventoryExt+0x9c>
 8019c16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019c18:	2b00      	cmp	r3, #0
 8019c1a:	d102      	bne.n	8019c22 <phpalSli15693_Sw_InventoryExt+0x9c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 8019c1c:	f640 2321 	movw	r3, #2593	@ 0xa21
 8019c20:	e328      	b.n	801a274 <phpalSli15693_Sw_InventoryExt+0x6ee>
    }
    /* If Extended Option is looking for CID response then CID should not be null */
    if((0U != ((bExtendedOptions & PHPAL_SLI15693_FLAG_CID_RESPONSE))) && (pCIDOut == NULL))
 8019c22:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8019c26:	f003 0308 	and.w	r3, r3, #8
 8019c2a:	2b00      	cmp	r3, #0
 8019c2c:	d005      	beq.n	8019c3a <phpalSli15693_Sw_InventoryExt+0xb4>
 8019c2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019c30:	2b00      	cmp	r3, #0
 8019c32:	d102      	bne.n	8019c3a <phpalSli15693_Sw_InventoryExt+0xb4>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 8019c34:	f640 2321 	movw	r3, #2593	@ 0xa21
 8019c38:	e31c      	b.n	801a274 <phpalSli15693_Sw_InventoryExt+0x6ee>
    }

    *pUidLength = 0;
 8019c3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019c3c:	2200      	movs	r2, #0
 8019c3e:	701a      	strb	r2, [r3, #0]
    *pDataLength = 0;
 8019c40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8019c42:	2200      	movs	r2, #0
 8019c44:	801a      	strh	r2, [r3, #0]

    /* first of all we check the bMaskBitLength according to ISO/IEC15693, 8.1, assuming
    the inventory flag to be set, si b6 deines the number of slots
    b6 = 1: --> one slot --> mask length = [0 .. 64] bits
    b6 = 0: --> 16 slots --> mask length = [0 .. 60] bits */
    if (((0U != ((bFlags & PHPAL_SLI15693_FLAG_NBSLOTS))) && (bMaskBitLength > 64U)) ||
 8019c46:	78bb      	ldrb	r3, [r7, #2]
 8019c48:	f003 0320 	and.w	r3, r3, #32
 8019c4c:	2b00      	cmp	r3, #0
 8019c4e:	d003      	beq.n	8019c58 <phpalSli15693_Sw_InventoryExt+0xd2>
 8019c50:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8019c54:	2b40      	cmp	r3, #64	@ 0x40
 8019c56:	d808      	bhi.n	8019c6a <phpalSli15693_Sw_InventoryExt+0xe4>
        ((0U == ((bFlags & PHPAL_SLI15693_FLAG_NBSLOTS))) && (bMaskBitLength > 60U)))
 8019c58:	78bb      	ldrb	r3, [r7, #2]
 8019c5a:	f003 0320 	and.w	r3, r3, #32
    if (((0U != ((bFlags & PHPAL_SLI15693_FLAG_NBSLOTS))) && (bMaskBitLength > 64U)) ||
 8019c5e:	2b00      	cmp	r3, #0
 8019c60:	d106      	bne.n	8019c70 <phpalSli15693_Sw_InventoryExt+0xea>
        ((0U == ((bFlags & PHPAL_SLI15693_FLAG_NBSLOTS))) && (bMaskBitLength > 60U)))
 8019c62:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8019c66:	2b3c      	cmp	r3, #60	@ 0x3c
 8019c68:	d902      	bls.n	8019c70 <phpalSli15693_Sw_InventoryExt+0xea>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 8019c6a:	f640 2321 	movw	r3, #2593	@ 0xa21
 8019c6e:	e301      	b.n	801a274 <phpalSli15693_Sw_InventoryExt+0x6ee>
    }

    /* Number of Pages/Blocks check */
    if (bCmd != PHPAL_SLI15693_SW_CMD_INVENTORY)
 8019c70:	78fb      	ldrb	r3, [r7, #3]
 8019c72:	2b01      	cmp	r3, #1
 8019c74:	d010      	beq.n	8019c98 <phpalSli15693_Sw_InventoryExt+0x112>
    {
        /* Number of Pages/Blocks can't be zero */
        if (wNoOfPages_Blocks == 0U)
 8019c76:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8019c7a:	2b00      	cmp	r3, #0
 8019c7c:	d102      	bne.n	8019c84 <phpalSli15693_Sw_InventoryExt+0xfe>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 8019c7e:	f640 2321 	movw	r3, #2593	@ 0xa21
 8019c82:	e2f7      	b.n	801a274 <phpalSli15693_Sw_InventoryExt+0x6ee>
        }

        /* check if the block number exceeds the limit */
        if (((uint16_t)bPage_Block_No + wNoOfPages_Blocks) >= PHPAL_SLI15693_SW_MAX_BLOCKS)
 8019c84:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8019c88:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8019c8c:	4413      	add	r3, r2
 8019c8e:	2bff      	cmp	r3, #255	@ 0xff
 8019c90:	d902      	bls.n	8019c98 <phpalSli15693_Sw_InventoryExt+0x112>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 8019c92:	f640 2321 	movw	r3, #2593	@ 0xa21
 8019c96:	e2ed      	b.n	801a274 <phpalSli15693_Sw_InventoryExt+0x6ee>
        }
    }

    /* Add command code */
    bCmdBuffer[bCmdBufferLen++] = bCmd;
 8019c98:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8019c9c:	1c5a      	adds	r2, r3, #1
 8019c9e:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 8019ca2:	3338      	adds	r3, #56	@ 0x38
 8019ca4:	443b      	add	r3, r7
 8019ca6:	78fa      	ldrb	r2, [r7, #3]
 8019ca8:	f803 2c24 	strb.w	r2, [r3, #-36]

    /* Apply flag settings */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 8019cac:	78bb      	ldrb	r3, [r7, #2]
 8019cae:	b29b      	uxth	r3, r3
 8019cb0:	461a      	mov	r2, r3
 8019cb2:	2100      	movs	r1, #0
 8019cb4:	6878      	ldr	r0, [r7, #4]
 8019cb6:	f7ff fc33 	bl	8019520 <phpalSli15693_Sw_SetConfig>
 8019cba:	4603      	mov	r3, r0
 8019cbc:	853b      	strh	r3, [r7, #40]	@ 0x28
 8019cbe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8019cc0:	2b00      	cmp	r3, #0
 8019cc2:	d001      	beq.n	8019cc8 <phpalSli15693_Sw_InventoryExt+0x142>
 8019cc4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8019cc6:	e2d5      	b.n	801a274 <phpalSli15693_Sw_InventoryExt+0x6ee>
        pDataParams,
        PHPAL_SLI15693_CONFIG_FLAGS,
        bFlags));

    /* Overwrite datarate for fast inventory (page-)read */
    if ((bCmd == PHPAL_SLI15693_SW_CMD_FAST_INVENTORY_READ) ||
 8019cc8:	78fb      	ldrb	r3, [r7, #3]
 8019cca:	2ba1      	cmp	r3, #161	@ 0xa1
 8019ccc:	d002      	beq.n	8019cd4 <phpalSli15693_Sw_InventoryExt+0x14e>
 8019cce:	78fb      	ldrb	r3, [r7, #3]
 8019cd0:	2bb1      	cmp	r3, #177	@ 0xb1
 8019cd2:	d120      	bne.n	8019d16 <phpalSli15693_Sw_InventoryExt+0x190>
        (bCmd == PHPAL_SLI15693_SW_CMD_FAST_INVENTORY_PAGE_READ))
    {
        if (0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 8019cd4:	78bb      	ldrb	r3, [r7, #2]
 8019cd6:	f003 0302 	and.w	r3, r3, #2
 8019cda:	2b00      	cmp	r3, #0
 8019cdc:	d00d      	beq.n	8019cfa <phpalSli15693_Sw_InventoryExt+0x174>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8019cde:	687b      	ldr	r3, [r7, #4]
 8019ce0:	685b      	ldr	r3, [r3, #4]
 8019ce2:	220f      	movs	r2, #15
 8019ce4:	210a      	movs	r1, #10
 8019ce6:	4618      	mov	r0, r3
 8019ce8:	f7f4 fd56 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8019cec:	4603      	mov	r3, r0
 8019cee:	853b      	strh	r3, [r7, #40]	@ 0x28
 8019cf0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8019cf2:	2b00      	cmp	r3, #0
 8019cf4:	d00f      	beq.n	8019d16 <phpalSli15693_Sw_InventoryExt+0x190>
 8019cf6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8019cf8:	e2bc      	b.n	801a274 <phpalSli15693_Sw_InventoryExt+0x6ee>
                PHHAL_HW_CONFIG_RXDATARATE_FRAMING,
                PHHAL_HW_RF_RX_DATARATE_FAST_HIGH));
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8019cfa:	687b      	ldr	r3, [r7, #4]
 8019cfc:	685b      	ldr	r3, [r3, #4]
 8019cfe:	220e      	movs	r2, #14
 8019d00:	210a      	movs	r1, #10
 8019d02:	4618      	mov	r0, r3
 8019d04:	f7f4 fd48 	bl	800e798 <phhalHw_Pn5180_SetConfig>
 8019d08:	4603      	mov	r3, r0
 8019d0a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8019d0c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8019d0e:	2b00      	cmp	r3, #0
 8019d10:	d001      	beq.n	8019d16 <phpalSli15693_Sw_InventoryExt+0x190>
 8019d12:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8019d14:	e2ae      	b.n	801a274 <phpalSli15693_Sw_InventoryExt+0x6ee>
                PHHAL_HW_RF_RX_DATARATE_FAST_LOW));
        }
    }

    /* check if AFI shall be sent: */
    if ((0U != ((bFlags & PHPAL_SLI15693_FLAG_AFI))) && (0U != ((bFlags & PHPAL_SLI15693_FLAG_INVENTORY))))
 8019d16:	78bb      	ldrb	r3, [r7, #2]
 8019d18:	f003 0310 	and.w	r3, r3, #16
 8019d1c:	2b00      	cmp	r3, #0
 8019d1e:	d00e      	beq.n	8019d3e <phpalSli15693_Sw_InventoryExt+0x1b8>
 8019d20:	78bb      	ldrb	r3, [r7, #2]
 8019d22:	f003 0304 	and.w	r3, r3, #4
 8019d26:	2b00      	cmp	r3, #0
 8019d28:	d009      	beq.n	8019d3e <phpalSli15693_Sw_InventoryExt+0x1b8>
    {
        bCmdBuffer[bCmdBufferLen++] = bAfi;
 8019d2a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8019d2e:	1c5a      	adds	r2, r3, #1
 8019d30:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 8019d34:	3338      	adds	r3, #56	@ 0x38
 8019d36:	443b      	add	r3, r7
 8019d38:	787a      	ldrb	r2, [r7, #1]
 8019d3a:	f803 2c24 	strb.w	r2, [r3, #-36]
    }

    /* Add mask length */
    /* Making the MSB of mask length byte as 1 to show extended mode */
    /* In case of extended mode add the extended option in command */
    if (0U != (bExtended))
 8019d3e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8019d42:	2b00      	cmp	r3, #0
 8019d44:	d03b      	beq.n	8019dbe <phpalSli15693_Sw_InventoryExt+0x238>
    {
        bCmdBuffer[bCmdBufferLen++] = bMaskBitLength | PHPAL_SLI15693_FLAG_INVENTORY_READ_EXTENSION;
 8019d46:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8019d4a:	1c5a      	adds	r2, r3, #1
 8019d4c:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 8019d50:	4619      	mov	r1, r3
 8019d52:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8019d56:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8019d5a:	b2da      	uxtb	r2, r3
 8019d5c:	f101 0338 	add.w	r3, r1, #56	@ 0x38
 8019d60:	443b      	add	r3, r7
 8019d62:	f803 2c24 	strb.w	r2, [r3, #-36]
        bCmdBuffer[bCmdBufferLen++] = bExtendedOptions;
 8019d66:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8019d6a:	1c5a      	adds	r2, r3, #1
 8019d6c:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 8019d70:	3338      	adds	r3, #56	@ 0x38
 8019d72:	443b      	add	r3, r7
 8019d74:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8019d78:	f803 2c24 	strb.w	r2, [r3, #-36]
        if (0U != (bExtendedOptions & PHPAL_SLI15693_FLAG_CID_COMPARE))
 8019d7c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8019d80:	f003 0304 	and.w	r3, r3, #4
 8019d84:	2b00      	cmp	r3, #0
 8019d86:	d025      	beq.n	8019dd4 <phpalSli15693_Sw_InventoryExt+0x24e>
        {
            bCmdBuffer[bCmdBufferLen++] = pCID[0];
 8019d88:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8019d8c:	1c5a      	adds	r2, r3, #1
 8019d8e:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 8019d92:	4619      	mov	r1, r3
 8019d94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019d96:	781a      	ldrb	r2, [r3, #0]
 8019d98:	f101 0338 	add.w	r3, r1, #56	@ 0x38
 8019d9c:	443b      	add	r3, r7
 8019d9e:	f803 2c24 	strb.w	r2, [r3, #-36]
            bCmdBuffer[bCmdBufferLen++] = pCID[1];
 8019da2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8019da6:	1c5a      	adds	r2, r3, #1
 8019da8:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 8019dac:	4619      	mov	r1, r3
 8019dae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019db0:	785a      	ldrb	r2, [r3, #1]
 8019db2:	f101 0338 	add.w	r3, r1, #56	@ 0x38
 8019db6:	443b      	add	r3, r7
 8019db8:	f803 2c24 	strb.w	r2, [r3, #-36]
 8019dbc:	e00a      	b.n	8019dd4 <phpalSli15693_Sw_InventoryExt+0x24e>
        }
    }
    else
    {
        bCmdBuffer[bCmdBufferLen++] = bMaskBitLength;
 8019dbe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8019dc2:	1c5a      	adds	r2, r3, #1
 8019dc4:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 8019dc8:	3338      	adds	r3, #56	@ 0x38
 8019dca:	443b      	add	r3, r7
 8019dcc:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8019dd0:	f803 2c24 	strb.w	r2, [r3, #-36]
    }

    /* Retrieve mask byte length */
    bMaskByteLength = ((bMaskBitLength % 8U) != 0U) ? ((bMaskBitLength >> 3U) + 1U) : (bMaskBitLength >> 3U);
 8019dd4:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8019dd8:	f003 0307 	and.w	r3, r3, #7
 8019ddc:	b2db      	uxtb	r3, r3
 8019dde:	2b00      	cmp	r3, #0
 8019de0:	d006      	beq.n	8019df0 <phpalSli15693_Sw_InventoryExt+0x26a>
 8019de2:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8019de6:	08db      	lsrs	r3, r3, #3
 8019de8:	b2db      	uxtb	r3, r3
 8019dea:	3301      	adds	r3, #1
 8019dec:	b2db      	uxtb	r3, r3
 8019dee:	e003      	b.n	8019df8 <phpalSli15693_Sw_InventoryExt+0x272>
 8019df0:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8019df4:	08db      	lsrs	r3, r3, #3
 8019df6:	b2db      	uxtb	r3, r3
 8019df8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* prepare mask in dataparams */
    (void)memcpy(pDataParams->pUid, pMask, bMaskByteLength );
 8019dfc:	687b      	ldr	r3, [r7, #4]
 8019dfe:	330c      	adds	r3, #12
 8019e00:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8019e04:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8019e06:	4618      	mov	r0, r3
 8019e08:	f006 fdc3 	bl	8020992 <memcpy>
    pDataParams->bUidBitLength = bMaskBitLength;
 8019e0c:	687b      	ldr	r3, [r7, #4]
 8019e0e:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8019e12:	751a      	strb	r2, [r3, #20]

    /* prepare mask to send */
    (void)memcpy(&bCmdBuffer[bCmdBufferLen], pMask, bMaskByteLength );
 8019e14:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8019e18:	f107 0214 	add.w	r2, r7, #20
 8019e1c:	4413      	add	r3, r2
 8019e1e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8019e22:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8019e24:	4618      	mov	r0, r3
 8019e26:	f006 fdb4 	bl	8020992 <memcpy>
    bCmdBufferLen = bCmdBufferLen + bMaskByteLength;
 8019e2a:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8019e2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019e32:	4413      	add	r3, r2
 8019e34:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    /* mask out invalid bits */
    if (0U != (bMaskBitLength & 0x07U))
 8019e38:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8019e3c:	f003 0307 	and.w	r3, r3, #7
 8019e40:	2b00      	cmp	r3, #0
 8019e42:	d019      	beq.n	8019e78 <phpalSli15693_Sw_InventoryExt+0x2f2>
    {
        bCmdBuffer[bCmdBufferLen - 1U] &= (uint8_t)(0xFFU >> (8U - (bMaskBitLength & 0x07U)));
 8019e44:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8019e48:	3b01      	subs	r3, #1
 8019e4a:	3338      	adds	r3, #56	@ 0x38
 8019e4c:	443b      	add	r3, r7
 8019e4e:	f813 1c24 	ldrb.w	r1, [r3, #-36]
 8019e52:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8019e56:	f003 0307 	and.w	r3, r3, #7
 8019e5a:	f1c3 0308 	rsb	r3, r3, #8
 8019e5e:	22ff      	movs	r2, #255	@ 0xff
 8019e60:	fa22 f303 	lsr.w	r3, r2, r3
 8019e64:	b2da      	uxtb	r2, r3
 8019e66:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8019e6a:	3b01      	subs	r3, #1
 8019e6c:	400a      	ands	r2, r1
 8019e6e:	b2d2      	uxtb	r2, r2
 8019e70:	3338      	adds	r3, #56	@ 0x38
 8019e72:	443b      	add	r3, r7
 8019e74:	f803 2c24 	strb.w	r2, [r3, #-36]
    }

    /* Get the ASK 100 Condition */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 8019e78:	687b      	ldr	r3, [r7, #4]
 8019e7a:	685b      	ldr	r3, [r3, #4]
 8019e7c:	f107 020c 	add.w	r2, r7, #12
 8019e80:	210c      	movs	r1, #12
 8019e82:	4618      	mov	r0, r3
 8019e84:	f7f6 f8d6 	bl	8010034 <phhalHw_Pn5180_GetConfig>
 8019e88:	4603      	mov	r3, r0
 8019e8a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8019e8c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8019e8e:	2b00      	cmp	r3, #0
 8019e90:	d001      	beq.n	8019e96 <phpalSli15693_Sw_InventoryExt+0x310>
 8019e92:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8019e94:	e1ee      	b.n	801a274 <phpalSli15693_Sw_InventoryExt+0x6ee>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_ASK100,
        &wAsk));

    /* Calculate Timeout based on ask and baud rate */
    if(wAsk != 0U)
 8019e96:	89bb      	ldrh	r3, [r7, #12]
 8019e98:	2b00      	cmp	r3, #0
 8019e9a:	d01f      	beq.n	8019edc <phpalSli15693_Sw_InventoryExt+0x356>
    {
        if ((bCmd == PHPAL_SLI15693_SW_CMD_FAST_INVENTORY_READ) ||
 8019e9c:	78fb      	ldrb	r3, [r7, #3]
 8019e9e:	2ba1      	cmp	r3, #161	@ 0xa1
 8019ea0:	d002      	beq.n	8019ea8 <phpalSli15693_Sw_InventoryExt+0x322>
 8019ea2:	78fb      	ldrb	r3, [r7, #3]
 8019ea4:	2bb1      	cmp	r3, #177	@ 0xb1
 8019ea6:	d10c      	bne.n	8019ec2 <phpalSli15693_Sw_InventoryExt+0x33c>
            (bCmd == PHPAL_SLI15693_SW_CMD_FAST_INVENTORY_PAGE_READ))
        {
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 8019ea8:	78bb      	ldrb	r3, [r7, #2]
 8019eaa:	f003 0302 	and.w	r3, r3, #2
 8019eae:	2b00      	cmp	r3, #0
 8019eb0:	d003      	beq.n	8019eba <phpalSli15693_Sw_InventoryExt+0x334>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTHIGH_SOF_US;
 8019eb2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8019eb6:	867b      	strh	r3, [r7, #50]	@ 0x32
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 8019eb8:	e02f      	b.n	8019f1a <phpalSli15693_Sw_InventoryExt+0x394>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTLOW_SOF_US;
 8019eba:	f240 2373 	movw	r3, #627	@ 0x273
 8019ebe:	867b      	strh	r3, [r7, #50]	@ 0x32
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 8019ec0:	e02b      	b.n	8019f1a <phpalSli15693_Sw_InventoryExt+0x394>
            }
        }
        else
        {
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 8019ec2:	78bb      	ldrb	r3, [r7, #2]
 8019ec4:	f003 0302 	and.w	r3, r3, #2
 8019ec8:	2b00      	cmp	r3, #0
 8019eca:	d003      	beq.n	8019ed4 <phpalSli15693_Sw_InventoryExt+0x34e>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_HIGH_SOF_US;
 8019ecc:	f44f 73ee 	mov.w	r3, #476	@ 0x1dc
 8019ed0:	867b      	strh	r3, [r7, #50]	@ 0x32
 8019ed2:	e022      	b.n	8019f1a <phpalSli15693_Sw_InventoryExt+0x394>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_LOW_SOF_US;
 8019ed4:	f240 33a1 	movw	r3, #929	@ 0x3a1
 8019ed8:	867b      	strh	r3, [r7, #50]	@ 0x32
 8019eda:	e01e      	b.n	8019f1a <phpalSli15693_Sw_InventoryExt+0x394>
            }
        }
    }
    else
    {
        if ((bCmd == PHPAL_SLI15693_SW_CMD_FAST_INVENTORY_READ) ||
 8019edc:	78fb      	ldrb	r3, [r7, #3]
 8019ede:	2ba1      	cmp	r3, #161	@ 0xa1
 8019ee0:	d002      	beq.n	8019ee8 <phpalSli15693_Sw_InventoryExt+0x362>
 8019ee2:	78fb      	ldrb	r3, [r7, #3]
 8019ee4:	2bb1      	cmp	r3, #177	@ 0xb1
 8019ee6:	d10c      	bne.n	8019f02 <phpalSli15693_Sw_InventoryExt+0x37c>
            (bCmd == PHPAL_SLI15693_SW_CMD_FAST_INVENTORY_PAGE_READ))
        {
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 8019ee8:	78bb      	ldrb	r3, [r7, #2]
 8019eea:	f003 0302 	and.w	r3, r3, #2
 8019eee:	2b00      	cmp	r3, #0
 8019ef0:	d003      	beq.n	8019efa <phpalSli15693_Sw_InventoryExt+0x374>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTHIGH_NRT_US;
 8019ef2:	f44f 630f 	mov.w	r3, #2288	@ 0x8f0
 8019ef6:	867b      	strh	r3, [r7, #50]	@ 0x32
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 8019ef8:	e00f      	b.n	8019f1a <phpalSli15693_Sw_InventoryExt+0x394>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTLOW_NRT_US;
 8019efa:	f641 73f3 	movw	r3, #8179	@ 0x1ff3
 8019efe:	867b      	strh	r3, [r7, #50]	@ 0x32
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 8019f00:	e00b      	b.n	8019f1a <phpalSli15693_Sw_InventoryExt+0x394>
            }
        }
        else
        {
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 8019f02:	78bb      	ldrb	r3, [r7, #2]
 8019f04:	f003 0302 	and.w	r3, r3, #2
 8019f08:	2b00      	cmp	r3, #0
 8019f0a:	d003      	beq.n	8019f14 <phpalSli15693_Sw_InventoryExt+0x38e>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_HIGH_NRT_US;
 8019f0c:	f241 039c 	movw	r3, #4252	@ 0x109c
 8019f10:	867b      	strh	r3, [r7, #50]	@ 0x32
 8019f12:	e002      	b.n	8019f1a <phpalSli15693_Sw_InventoryExt+0x394>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_LOW_NRT_US;
 8019f14:	f643 63a1 	movw	r3, #16033	@ 0x3ea1
 8019f18:	867b      	strh	r3, [r7, #50]	@ 0x32
            }
        }
    }

    /* Set  timeout. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 8019f1a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8019f1c:	461a      	mov	r2, r3
 8019f1e:	2102      	movs	r1, #2
 8019f20:	6878      	ldr	r0, [r7, #4]
 8019f22:	f7ff fafd 	bl	8019520 <phpalSli15693_Sw_SetConfig>
 8019f26:	4603      	mov	r3, r0
 8019f28:	853b      	strh	r3, [r7, #40]	@ 0x28
 8019f2a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8019f2c:	2b00      	cmp	r3, #0
 8019f2e:	d001      	beq.n	8019f34 <phpalSli15693_Sw_InventoryExt+0x3ae>
 8019f30:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8019f32:	e19f      	b.n	801a274 <phpalSli15693_Sw_InventoryExt+0x6ee>
        pDataParams,
        PHPAL_SLI15693_CONFIG_TIMEOUT_US,
        wTimeout));

    /* Update the command offset variable. */
    bCmdOffset = bCmdBufferLen;
 8019f34:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8019f38:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* If buffering is set. */
    if((pDataParams->bBuffering) != 0U)
 8019f3c:	687b      	ldr	r3, [r7, #4]
 8019f3e:	7ddb      	ldrb	r3, [r3, #23]
 8019f40:	2b00      	cmp	r3, #0
 8019f42:	d016      	beq.n	8019f72 <phpalSli15693_Sw_InventoryExt+0x3ec>
    {
        /* Update the maximum number of blocks with respect to Option flag setting. The value for the blocks is fixed to 60 and 40 to avoid multiple
         * handling of different data in response. RD70x can respond with more amount of data but CM1 cannot. So fixing the blocks count to a lower
         * value.
         */
        wMaxNoBlocks = (uint8_t) (((bFlags & PHPAL_SLI15693_FLAG_OPTION) != 0U) ? 40U : 60U);
 8019f44:	78bb      	ldrb	r3, [r7, #2]
 8019f46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019f4a:	2b00      	cmp	r3, #0
 8019f4c:	d001      	beq.n	8019f52 <phpalSli15693_Sw_InventoryExt+0x3cc>
 8019f4e:	2328      	movs	r3, #40	@ 0x28
 8019f50:	e000      	b.n	8019f54 <phpalSli15693_Sw_InventoryExt+0x3ce>
 8019f52:	233c      	movs	r3, #60	@ 0x3c
 8019f54:	85bb      	strh	r3, [r7, #44]	@ 0x2c

        /* Blocks to read. */
        wCurrBlocksToRead = wMaxNoBlocks;
 8019f56:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8019f58:	863b      	strh	r3, [r7, #48]	@ 0x30

        /* Update the number of blocks to read if its less than the internal required one. */
        if(wNoOfPages_Blocks < wMaxNoBlocks)
 8019f5a:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8019f5e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8019f60:	429a      	cmp	r2, r3
 8019f62:	d20c      	bcs.n	8019f7e <phpalSli15693_Sw_InventoryExt+0x3f8>
        {
            wCurrBlocksToRead = wNoOfPages_Blocks;
 8019f64:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8019f68:	863b      	strh	r3, [r7, #48]	@ 0x30
            bAllBlocksRead = 1U;
 8019f6a:	2301      	movs	r3, #1
 8019f6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8019f70:	e005      	b.n	8019f7e <phpalSli15693_Sw_InventoryExt+0x3f8>
        }
    }
    else
    {
        wCurrBlocksToRead = wNoOfPages_Blocks;
 8019f72:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8019f76:	863b      	strh	r3, [r7, #48]	@ 0x30
        bAllBlocksRead = 1U;
 8019f78:	2301      	movs	r3, #1
 8019f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    }

    if((((pDataParams->bFlags & PHPAL_SLI15693_FLAG_INVENTORY) == 0U) && ((pDataParams->bFlags & PHPAL_SLI15693_FLAG_ADDRESSED) != 0U)) != 0U)
 8019f7e:	687b      	ldr	r3, [r7, #4]
 8019f80:	7a9b      	ldrb	r3, [r3, #10]
 8019f82:	f003 0304 	and.w	r3, r3, #4
 8019f86:	2b00      	cmp	r3, #0
 8019f88:	d107      	bne.n	8019f9a <phpalSli15693_Sw_InventoryExt+0x414>
 8019f8a:	687b      	ldr	r3, [r7, #4]
 8019f8c:	7a9b      	ldrb	r3, [r3, #10]
 8019f8e:	f003 0320 	and.w	r3, r3, #32
 8019f92:	2b00      	cmp	r3, #0
 8019f94:	d001      	beq.n	8019f9a <phpalSli15693_Sw_InventoryExt+0x414>
 8019f96:	2301      	movs	r3, #1
 8019f98:	e000      	b.n	8019f9c <phpalSli15693_Sw_InventoryExt+0x416>
 8019f9a:	2300      	movs	r3, #0
 8019f9c:	2b00      	cmp	r3, #0
 8019f9e:	d002      	beq.n	8019fa6 <phpalSli15693_Sw_InventoryExt+0x420>
    {
        pDataParams->bExplicitlyAddressed = 1U;
 8019fa0:	687b      	ldr	r3, [r7, #4]
 8019fa2:	2201      	movs	r2, #1
 8019fa4:	755a      	strb	r2, [r3, #21]
    }

    /* Set First variable. This variable will be used to validate the response only once in case if chaining is enabled. */
    bFirst = PH_ON;
 8019fa6:	2301      	movs	r3, #1
 8019fa8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

    /* Exchange the information. */
    do
    {
        /* Page (or block) number and count */
        if (bCmd != PHPAL_SLI15693_SW_CMD_INVENTORY)
 8019fac:	78fb      	ldrb	r3, [r7, #3]
 8019fae:	2b01      	cmp	r3, #1
 8019fb0:	d028      	beq.n	801a004 <phpalSli15693_Sw_InventoryExt+0x47e>
        {
         /* Adjust number of blocks. Adjustment is made because the User or the application will pass
         * the number of blocks starting from 1 to N. But as per Iso15693 specification the number
         * of blocks ranges from 0 - (N - 1).
         */
            --wCurrBlocksToRead;
 8019fb2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8019fb4:	3b01      	subs	r3, #1
 8019fb6:	863b      	strh	r3, [r7, #48]	@ 0x30

            if (!((bExtended != 0U) && ((bExtendedOptions & PHPAL_SLI15693_FLAG_SKIP_DATA) != 0U)))
 8019fb8:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8019fbc:	2b00      	cmp	r3, #0
 8019fbe:	d005      	beq.n	8019fcc <phpalSli15693_Sw_InventoryExt+0x446>
 8019fc0:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8019fc4:	f003 0310 	and.w	r3, r3, #16
 8019fc8:	2b00      	cmp	r3, #0
 8019fca:	d11b      	bne.n	801a004 <phpalSli15693_Sw_InventoryExt+0x47e>
            {
                bCmdBuffer[bCmdOffset++] = (uint8_t) ((wCurrBlockNo + bPage_Block_No) & 0x00FFU);
 8019fcc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8019fce:	b2da      	uxtb	r2, r3
 8019fd0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8019fd4:	1c59      	adds	r1, r3, #1
 8019fd6:	f887 1036 	strb.w	r1, [r7, #54]	@ 0x36
 8019fda:	4619      	mov	r1, r3
 8019fdc:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8019fe0:	4413      	add	r3, r2
 8019fe2:	b2da      	uxtb	r2, r3
 8019fe4:	f101 0338 	add.w	r3, r1, #56	@ 0x38
 8019fe8:	443b      	add	r3, r7
 8019fea:	f803 2c24 	strb.w	r2, [r3, #-36]
                bCmdBuffer[bCmdOffset++] = (uint8_t) wCurrBlocksToRead;
 8019fee:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8019ff2:	1c5a      	adds	r2, r3, #1
 8019ff4:	f887 2036 	strb.w	r2, [r7, #54]	@ 0x36
 8019ff8:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8019ffa:	b2d2      	uxtb	r2, r2
 8019ffc:	3338      	adds	r3, #56	@ 0x38
 8019ffe:	443b      	add	r3, r7
 801a000:	f803 2c24 	strb.w	r2, [r3, #-36]
            }
        }

        /* Exchange the command information to Hal layer. */
        status = phpalSli15693_Exchange(
 801a004:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 801a008:	b299      	uxth	r1, r3
 801a00a:	f107 0214 	add.w	r2, r7, #20
 801a00e:	f107 030e 	add.w	r3, r7, #14
 801a012:	9301      	str	r3, [sp, #4]
 801a014:	f107 0310 	add.w	r3, r7, #16
 801a018:	9300      	str	r3, [sp, #0]
 801a01a:	460b      	mov	r3, r1
 801a01c:	2100      	movs	r1, #0
 801a01e:	6878      	ldr	r0, [r7, #4]
 801a020:	f7ff f94c 	bl	80192bc <phpalSli15693_Sw_Exchange>
 801a024:	4603      	mov	r3, r0
 801a026:	84bb      	strh	r3, [r7, #36]	@ 0x24
            bCmdOffset,
            &pResp,
            &wRespLength);

        /* Clear INVENTORY, AFI and NBSLOTS flag */
        if((status & PH_ERR_MASK) != PH_ERR_SUCCESS)
 801a028:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a02a:	b2db      	uxtb	r3, r3
 801a02c:	2b00      	cmp	r3, #0
 801a02e:	d006      	beq.n	801a03e <phpalSli15693_Sw_InventoryExt+0x4b8>
        {
            pDataParams->bFlags &= (uint8_t)~(uint8_t)(PHPAL_SLI15693_FLAG_INVENTORY | PHPAL_SLI15693_FLAG_AFI | PHPAL_SLI15693_FLAG_NBSLOTS);
 801a030:	687b      	ldr	r3, [r7, #4]
 801a032:	7a9b      	ldrb	r3, [r3, #10]
 801a034:	f023 0334 	bic.w	r3, r3, #52	@ 0x34
 801a038:	b2da      	uxtb	r2, r3
 801a03a:	687b      	ldr	r3, [r7, #4]
 801a03c:	729a      	strb	r2, [r3, #10]
        }

        /* Verify the exchange status. */
        PH_CHECK_SUCCESS(status);
 801a03e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a040:	2b00      	cmp	r3, #0
 801a042:	d001      	beq.n	801a048 <phpalSli15693_Sw_InventoryExt+0x4c2>
 801a044:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a046:	e115      	b.n	801a274 <phpalSli15693_Sw_InventoryExt+0x6ee>

        /* Extracting  the CID as sent by the VICC. */
        if ((bExtended != 0U) && ((bExtendedOptions & PHPAL_SLI15693_FLAG_CID_RESPONSE) != 0U))
 801a048:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 801a04c:	2b00      	cmp	r3, #0
 801a04e:	d011      	beq.n	801a074 <phpalSli15693_Sw_InventoryExt+0x4ee>
 801a050:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801a054:	f003 0308 	and.w	r3, r3, #8
 801a058:	2b00      	cmp	r3, #0
 801a05a:	d00b      	beq.n	801a074 <phpalSli15693_Sw_InventoryExt+0x4ee>
        {
            (void)memcpy(pCIDOut, pResp, 2U);
 801a05c:	693b      	ldr	r3, [r7, #16]
 801a05e:	881b      	ldrh	r3, [r3, #0]
 801a060:	b29a      	uxth	r2, r3
 801a062:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a064:	801a      	strh	r2, [r3, #0]

            /* Update the response pointer address and length to Skip CID. */
            pResp += 2U;
 801a066:	693b      	ldr	r3, [r7, #16]
 801a068:	3302      	adds	r3, #2
 801a06a:	613b      	str	r3, [r7, #16]
            wRespLength -= 2U;
 801a06c:	89fb      	ldrh	r3, [r7, #14]
 801a06e:	3b02      	subs	r3, #2
 801a070:	b29b      	uxth	r3, r3
 801a072:	81fb      	strh	r3, [r7, #14]
        }

        /* Set the length (amount) of expected UID bytes. */
        if (bCmd == PHPAL_SLI15693_SW_CMD_INVENTORY)
 801a074:	78fb      	ldrb	r3, [r7, #3]
 801a076:	2b01      	cmp	r3, #1
 801a078:	d123      	bne.n	801a0c2 <phpalSli15693_Sw_InventoryExt+0x53c>
        {
            /* The response length should be exactly the complete UID */
            if (wRespLength != (1U + PHPAL_SLI15693_UID_LENGTH))
 801a07a:	89fb      	ldrh	r3, [r7, #14]
 801a07c:	2b09      	cmp	r3, #9
 801a07e:	d002      	beq.n	801a086 <phpalSli15693_Sw_InventoryExt+0x500>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 801a080:	f640 2306 	movw	r3, #2566	@ 0xa06
 801a084:	e0f6      	b.n	801a274 <phpalSli15693_Sw_InventoryExt+0x6ee>
            }

            /* Copy the DSFID to the data buffer. */
            pData[0] = pResp[0];
 801a086:	693b      	ldr	r3, [r7, #16]
 801a088:	781a      	ldrb	r2, [r3, #0]
 801a08a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a08c:	701a      	strb	r2, [r3, #0]
            *pDataLength = 1U;
 801a08e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a090:	2201      	movs	r2, #1
 801a092:	801a      	strh	r2, [r3, #0]

            /* Store the UID */
            (void)memcpy(pDataParams->pUid, &pResp[1], PHPAL_SLI15693_UID_LENGTH);
 801a094:	687b      	ldr	r3, [r7, #4]
 801a096:	f103 000c 	add.w	r0, r3, #12
 801a09a:	693b      	ldr	r3, [r7, #16]
 801a09c:	3301      	adds	r3, #1
 801a09e:	2208      	movs	r2, #8
 801a0a0:	4619      	mov	r1, r3
 801a0a2:	f006 fc76 	bl	8020992 <memcpy>
            pDataParams->bUidBitLength = PHPAL_SLI15693_SW_UID_COMPLETE;
 801a0a6:	687b      	ldr	r3, [r7, #4]
 801a0a8:	2240      	movs	r2, #64	@ 0x40
 801a0aa:	751a      	strb	r2, [r3, #20]

            /* Return the UID */
            (void)memcpy(pUid, pDataParams->pUid, PHPAL_SLI15693_UID_LENGTH);
 801a0ac:	687b      	ldr	r3, [r7, #4]
 801a0ae:	330c      	adds	r3, #12
 801a0b0:	2208      	movs	r2, #8
 801a0b2:	4619      	mov	r1, r3
 801a0b4:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 801a0b6:	f006 fc6c 	bl	8020992 <memcpy>
            *pUidLength = PHPAL_SLI15693_UID_LENGTH;
 801a0ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a0bc:	2208      	movs	r2, #8
 801a0be:	701a      	strb	r2, [r3, #0]
 801a0c0:	e099      	b.n	801a1f6 <phpalSli15693_Sw_InventoryExt+0x670>
        }
        else
        {
            if ((bFlags & PHPAL_SLI15693_FLAG_OPTION) != 0U)
 801a0c2:	78bb      	ldrb	r3, [r7, #2]
 801a0c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a0c8:	2b00      	cmp	r3, #0
 801a0ca:	f000 8083 	beq.w	801a1d4 <phpalSli15693_Sw_InventoryExt+0x64e>
            {
                *pUidLength = PHPAL_SLI15693_UID_LENGTH - bStoredUidLength;
 801a0ce:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801a0d2:	f1c3 0308 	rsb	r3, r3, #8
 801a0d6:	b2da      	uxtb	r2, r3
 801a0d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a0da:	701a      	strb	r2, [r3, #0]

                /* The response length should not be less than the remaining UID. */
                if(bFirst != 0U)
 801a0dc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 801a0e0:	2b00      	cmp	r3, #0
 801a0e2:	d018      	beq.n	801a116 <phpalSli15693_Sw_InventoryExt+0x590>
                {
                    bStoredUidLength = pDataParams->bUidBitLength >> 3U;
 801a0e4:	687b      	ldr	r3, [r7, #4]
 801a0e6:	7d1b      	ldrb	r3, [r3, #20]
 801a0e8:	08db      	lsrs	r3, r3, #3
 801a0ea:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                    *pUidLength = PHPAL_SLI15693_UID_LENGTH - bStoredUidLength;
 801a0ee:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801a0f2:	f1c3 0308 	rsb	r3, r3, #8
 801a0f6:	b2da      	uxtb	r2, r3
 801a0f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a0fa:	701a      	strb	r2, [r3, #0]

                    /* Update the UID length if extended. */
                    if((bExtended != 0U) && ((bExtendedOptions & PHPAL_SLI15693_FLAG_UID_MODE) != 0U))
 801a0fc:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 801a100:	2b00      	cmp	r3, #0
 801a102:	d008      	beq.n	801a116 <phpalSli15693_Sw_InventoryExt+0x590>
 801a104:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801a108:	f003 0302 	and.w	r3, r3, #2
 801a10c:	2b00      	cmp	r3, #0
 801a10e:	d002      	beq.n	801a116 <phpalSli15693_Sw_InventoryExt+0x590>
                    {
                        *pUidLength = PHPAL_SLI15693_UID_LENGTH;
 801a110:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a112:	2208      	movs	r2, #8
 801a114:	701a      	strb	r2, [r3, #0]
                    }
                }
                /* Validate the response length against UID length. */
                if (wRespLength < (*pUidLength))
 801a116:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a118:	781b      	ldrb	r3, [r3, #0]
 801a11a:	461a      	mov	r2, r3
 801a11c:	89fb      	ldrh	r3, [r7, #14]
 801a11e:	429a      	cmp	r2, r3
 801a120:	d902      	bls.n	801a128 <phpalSli15693_Sw_InventoryExt+0x5a2>
                {
                    return PH_ADD_COMPCODE(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 801a122:	f640 2306 	movw	r3, #2566	@ 0xa06
 801a126:	e0a5      	b.n	801a274 <phpalSli15693_Sw_InventoryExt+0x6ee>
                }

                if (bStoredUidLength < PHPAL_SLI15693_UID_LENGTH)
 801a128:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801a12c:	2b07      	cmp	r3, #7
 801a12e:	d843      	bhi.n	801a1b8 <phpalSli15693_Sw_InventoryExt+0x632>
                {
                    if ((*pUidLength) == 0U)
 801a130:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a132:	781b      	ldrb	r3, [r3, #0]
 801a134:	2b00      	cmp	r3, #0
 801a136:	d102      	bne.n	801a13e <phpalSli15693_Sw_InventoryExt+0x5b8>
                    {
                        return PH_ADD_COMPCODE(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 801a138:	f640 2306 	movw	r3, #2566	@ 0xa06
 801a13c:	e09a      	b.n	801a274 <phpalSli15693_Sw_InventoryExt+0x6ee>
                    }
                    /* Return the received (partial) UID */
                    (void)memcpy(pUid, pResp, (size_t)(*pUidLength));
 801a13e:	6939      	ldr	r1, [r7, #16]
 801a140:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a142:	781b      	ldrb	r3, [r3, #0]
 801a144:	461a      	mov	r2, r3
 801a146:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 801a148:	f006 fc23 	bl	8020992 <memcpy>

                    /* We need to merge the contents of the mask buffer and the received data */
                    if ((bMaskBitLength % 8U) != 0u)
 801a14c:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 801a150:	f003 0307 	and.w	r3, r3, #7
 801a154:	b2db      	uxtb	r3, r3
 801a156:	2b00      	cmp	r3, #0
 801a158:	d022      	beq.n	801a1a0 <phpalSli15693_Sw_InventoryExt+0x61a>
                    {
                        if (bStoredUidLength < 7U)
 801a15a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801a15e:	2b06      	cmp	r3, #6
 801a160:	d80e      	bhi.n	801a180 <phpalSli15693_Sw_InventoryExt+0x5fa>
                        {
                            /* copy the UID bytes we received from the card */
                            (void)memcpy(&(pDataParams->pUid[bStoredUidLength + 1U]), &pResp[1], (size_t)(*pUidLength)-1U);
 801a162:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801a166:	3301      	adds	r3, #1
 801a168:	3308      	adds	r3, #8
 801a16a:	687a      	ldr	r2, [r7, #4]
 801a16c:	4413      	add	r3, r2
 801a16e:	1d18      	adds	r0, r3, #4
 801a170:	693b      	ldr	r3, [r7, #16]
 801a172:	1c59      	adds	r1, r3, #1
 801a174:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a176:	781b      	ldrb	r3, [r3, #0]
 801a178:	3b01      	subs	r3, #1
 801a17a:	461a      	mov	r2, r3
 801a17c:	f006 fc09 	bl	8020992 <memcpy>
                        }

                        /* merge mask-bits with received bits */
                        pDataParams->pUid[bStoredUidLength] |= pResp[0];
 801a180:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801a184:	687a      	ldr	r2, [r7, #4]
 801a186:	4413      	add	r3, r2
 801a188:	7b19      	ldrb	r1, [r3, #12]
 801a18a:	693b      	ldr	r3, [r7, #16]
 801a18c:	781a      	ldrb	r2, [r3, #0]
 801a18e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801a192:	430a      	orrs	r2, r1
 801a194:	b2d1      	uxtb	r1, r2
 801a196:	687a      	ldr	r2, [r7, #4]
 801a198:	4413      	add	r3, r2
 801a19a:	460a      	mov	r2, r1
 801a19c:	731a      	strb	r2, [r3, #12]
 801a19e:	e00b      	b.n	801a1b8 <phpalSli15693_Sw_InventoryExt+0x632>
                    }
                    else
                    {
                        /* Copy the UID bytes we received from the card */
                        (void)memcpy(&(pDataParams->pUid[bStoredUidLength]), pResp, *pUidLength);
 801a1a0:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801a1a4:	3308      	adds	r3, #8
 801a1a6:	687a      	ldr	r2, [r7, #4]
 801a1a8:	4413      	add	r3, r2
 801a1aa:	1d18      	adds	r0, r3, #4
 801a1ac:	6939      	ldr	r1, [r7, #16]
 801a1ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a1b0:	781b      	ldrb	r3, [r3, #0]
 801a1b2:	461a      	mov	r2, r3
 801a1b4:	f006 fbed 	bl	8020992 <memcpy>
                    }
                }

                /* Update UID length. */
                pDataParams->bUidBitLength = PHPAL_SLI15693_SW_UID_COMPLETE;
 801a1b8:	687b      	ldr	r3, [r7, #4]
 801a1ba:	2240      	movs	r2, #64	@ 0x40
 801a1bc:	751a      	strb	r2, [r3, #20]

                /* Shift pointer and length */
                pResp += *pUidLength;
 801a1be:	693b      	ldr	r3, [r7, #16]
 801a1c0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801a1c2:	7812      	ldrb	r2, [r2, #0]
 801a1c4:	4413      	add	r3, r2
 801a1c6:	613b      	str	r3, [r7, #16]
                wRespLength = (uint16_t) (wRespLength - *pUidLength);
 801a1c8:	89fb      	ldrh	r3, [r7, #14]
 801a1ca:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801a1cc:	7812      	ldrb	r2, [r2, #0]
 801a1ce:	1a9b      	subs	r3, r3, r2
 801a1d0:	b29b      	uxth	r3, r3
 801a1d2:	81fb      	strh	r3, [r7, #14]
            }
            /* Copy the received data to internal buffer. */
            (void)memcpy(&pData[*pDataLength], pResp, wRespLength);
 801a1d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a1d6:	881b      	ldrh	r3, [r3, #0]
 801a1d8:	461a      	mov	r2, r3
 801a1da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a1dc:	4413      	add	r3, r2
 801a1de:	6939      	ldr	r1, [r7, #16]
 801a1e0:	89fa      	ldrh	r2, [r7, #14]
 801a1e2:	4618      	mov	r0, r3
 801a1e4:	f006 fbd5 	bl	8020992 <memcpy>
            *pDataLength += wRespLength;
 801a1e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a1ea:	881a      	ldrh	r2, [r3, #0]
 801a1ec:	89fb      	ldrh	r3, [r7, #14]
 801a1ee:	4413      	add	r3, r2
 801a1f0:	b29a      	uxth	r2, r3
 801a1f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a1f4:	801a      	strh	r2, [r3, #0]
        }

        /* Update the variables to read the remaining data. */
        wCurrBlockNo += wMaxNoBlocks;
 801a1f6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801a1f8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801a1fa:	4413      	add	r3, r2
 801a1fc:	85fb      	strh	r3, [r7, #46]	@ 0x2e

        /* Update the Current blocks to read. */
        wCurrBlocksToRead = wMaxNoBlocks;
 801a1fe:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801a200:	863b      	strh	r3, [r7, #48]	@ 0x30

        /* Reset the command buffer offset. */
        bCmdOffset = bCmdBufferLen;
 801a202:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801a206:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

        /* Set the remaining blocks to read. */
        if((wNoOfPages_Blocks - wCurrBlockNo) < wMaxNoBlocks)
 801a20a:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 801a20e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801a210:	1ad2      	subs	r2, r2, r3
 801a212:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801a214:	429a      	cmp	r2, r3
 801a216:	da04      	bge.n	801a222 <phpalSli15693_Sw_InventoryExt+0x69c>
        {
            wCurrBlocksToRead = (uint16_t) (wNoOfPages_Blocks - wCurrBlockNo);
 801a218:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 801a21c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801a21e:	1ad3      	subs	r3, r2, r3
 801a220:	863b      	strh	r3, [r7, #48]	@ 0x30
        }

        /* Set the flag to finish the loop. */
        if((wNoOfPages_Blocks * 4U) == *pDataLength)
 801a222:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 801a226:	009b      	lsls	r3, r3, #2
 801a228:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801a22a:	8812      	ldrh	r2, [r2, #0]
 801a22c:	4293      	cmp	r3, r2
 801a22e:	d102      	bne.n	801a236 <phpalSli15693_Sw_InventoryExt+0x6b0>
        {
            bAllBlocksRead = 1;
 801a230:	2301      	movs	r3, #1
 801a232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        }

        /* Set First variable. This variable will be used to validate the response only once in case if chaining is enabled. */
        bFirst = PH_OFF;
 801a236:	2300      	movs	r3, #0
 801a238:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

    }while(bAllBlocksRead == 0U);
 801a23c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801a240:	2b00      	cmp	r3, #0
 801a242:	f43f aeb3 	beq.w	8019fac <phpalSli15693_Sw_InventoryExt+0x426>

    /* Clear INVENTORY, AFI and NBSLOTS flag */
    pDataParams->bFlags &= (uint8_t)~(uint8_t)(PHPAL_SLI15693_FLAG_INVENTORY | PHPAL_SLI15693_FLAG_AFI | PHPAL_SLI15693_FLAG_NBSLOTS);
 801a246:	687b      	ldr	r3, [r7, #4]
 801a248:	7a9b      	ldrb	r3, [r3, #10]
 801a24a:	f023 0334 	bic.w	r3, r3, #52	@ 0x34
 801a24e:	b2da      	uxtb	r2, r3
 801a250:	687b      	ldr	r3, [r7, #4]
 801a252:	729a      	strb	r2, [r3, #10]

    pDataParams->bExplicitlyAddressed = 0;
 801a254:	687b      	ldr	r3, [r7, #4]
 801a256:	2200      	movs	r2, #0
 801a258:	755a      	strb	r2, [r3, #21]

    /* Error check */
    PH_CHECK_SUCCESS(status);
 801a25a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a25c:	2b00      	cmp	r3, #0
 801a25e:	d001      	beq.n	801a264 <phpalSli15693_Sw_InventoryExt+0x6de>
 801a260:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a262:	e007      	b.n	801a274 <phpalSli15693_Sw_InventoryExt+0x6ee>

    /* set addressed flag */
    pDataParams->bFlags |= PHPAL_SLI15693_FLAG_ADDRESSED;
 801a264:	687b      	ldr	r3, [r7, #4]
 801a266:	7a9b      	ldrb	r3, [r3, #10]
 801a268:	f043 0320 	orr.w	r3, r3, #32
 801a26c:	b2da      	uxtb	r2, r3
 801a26e:	687b      	ldr	r3, [r7, #4]
 801a270:	729a      	strb	r2, [r3, #10]

    return PH_ERR_SUCCESS;
 801a272:	2300      	movs	r3, #0
}
 801a274:	4618      	mov	r0, r3
 801a276:	3738      	adds	r7, #56	@ 0x38
 801a278:	46bd      	mov	sp, r7
 801a27a:	bd80      	pop	{r7, pc}

0801a27c <phDriver_PinConfig>:
 * PORT/GPIO PIN API's
 *******************************************************************************/

/* GPIO FUNC_1:配置GPIO引脚的功能和属性 */
phStatus_t phDriver_PinConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, phDriver_Pin_Func_t ePinFunc, phDriver_Pin_Config_t *pPinConfig)
{
 801a27c:	b580      	push	{r7, lr}
 801a27e:	b08a      	sub	sp, #40	@ 0x28
 801a280:	af00      	add	r7, sp, #0
 801a282:	60f8      	str	r0, [r7, #12]
 801a284:	607b      	str	r3, [r7, #4]
 801a286:	460b      	mov	r3, r1
 801a288:	817b      	strh	r3, [r7, #10]
 801a28a:	4613      	mov	r3, r2
 801a28c:	727b      	strb	r3, [r7, #9]
	uint32_t mode;

	// 空指针保护
	if (pPinConfig == NULL)
 801a28e:	687b      	ldr	r3, [r7, #4]
 801a290:	2b00      	cmp	r3, #0
 801a292:	d101      	bne.n	801a298 <phDriver_PinConfig+0x1c>
	    return PH_DRIVER_ERROR;
 801a294:	2380      	movs	r3, #128	@ 0x80
 801a296:	e039      	b.n	801a30c <phDriver_PinConfig+0x90>

	if(GPIO_Pin == PN5180_IRQ_Pin)
 801a298:	897b      	ldrh	r3, [r7, #10]
 801a29a:	2b10      	cmp	r3, #16
 801a29c:	d135      	bne.n	801a30a <phDriver_PinConfig+0x8e>
	{
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 801a29e:	f107 0310 	add.w	r3, r7, #16
 801a2a2:	2200      	movs	r2, #0
 801a2a4:	601a      	str	r2, [r3, #0]
 801a2a6:	605a      	str	r2, [r3, #4]
 801a2a8:	609a      	str	r2, [r3, #8]
 801a2aa:	60da      	str	r2, [r3, #12]
 801a2ac:	611a      	str	r2, [r3, #16]

		HAL_GPIO_DeInit(PN5180_IRQ_GPIO_Port, PN5180_IRQ_Pin);
 801a2ae:	2110      	movs	r1, #16
 801a2b0:	4818      	ldr	r0, [pc, #96]	@ (801a314 <phDriver_PinConfig+0x98>)
 801a2b2:	f000 fe91 	bl	801afd8 <HAL_GPIO_DeInit>

		mode = (pPinConfig->bPullSelect == PH_DRIVER_PULL_DOWN)?GPIO_PULLDOWN:GPIO_PULLUP;
 801a2b6:	687b      	ldr	r3, [r7, #4]
 801a2b8:	781b      	ldrb	r3, [r3, #0]
 801a2ba:	2b00      	cmp	r3, #0
 801a2bc:	d101      	bne.n	801a2c2 <phDriver_PinConfig+0x46>
 801a2be:	2302      	movs	r3, #2
 801a2c0:	e000      	b.n	801a2c4 <phDriver_PinConfig+0x48>
 801a2c2:	2301      	movs	r3, #1
 801a2c4:	627b      	str	r3, [r7, #36]	@ 0x24
		GPIO_InitStruct.Pull = mode;
 801a2c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a2c8:	61bb      	str	r3, [r7, #24]

		switch(pPinConfig->eInterruptConfig)
 801a2ca:	687b      	ldr	r3, [r7, #4]
 801a2cc:	789b      	ldrb	r3, [r3, #2]
 801a2ce:	2b05      	cmp	r3, #5
 801a2d0:	d00e      	beq.n	801a2f0 <phDriver_PinConfig+0x74>
 801a2d2:	2b05      	cmp	r3, #5
 801a2d4:	dc10      	bgt.n	801a2f8 <phDriver_PinConfig+0x7c>
 801a2d6:	2b03      	cmp	r3, #3
 801a2d8:	d002      	beq.n	801a2e0 <phDriver_PinConfig+0x64>
 801a2da:	2b04      	cmp	r3, #4
 801a2dc:	d004      	beq.n	801a2e8 <phDriver_PinConfig+0x6c>
			    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
			    break;

			default:
				/* Do Nothing. */
				break;
 801a2de:	e00b      	b.n	801a2f8 <phDriver_PinConfig+0x7c>
				GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801a2e0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 801a2e4:	617b      	str	r3, [r7, #20]
				break;
 801a2e6:	e008      	b.n	801a2fa <phDriver_PinConfig+0x7e>
				GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 801a2e8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 801a2ec:	617b      	str	r3, [r7, #20]
				break;
 801a2ee:	e004      	b.n	801a2fa <phDriver_PinConfig+0x7e>
			    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 801a2f0:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 801a2f4:	617b      	str	r3, [r7, #20]
			    break;
 801a2f6:	e000      	b.n	801a2fa <phDriver_PinConfig+0x7e>
				break;
 801a2f8:	bf00      	nop
	    }
		GPIO_InitStruct.Pin = PN5180_IRQ_Pin;
 801a2fa:	2310      	movs	r3, #16
 801a2fc:	613b      	str	r3, [r7, #16]
		HAL_GPIO_Init(PN5180_IRQ_GPIO_Port, &GPIO_InitStruct);
 801a2fe:	f107 0310 	add.w	r3, r7, #16
 801a302:	4619      	mov	r1, r3
 801a304:	4803      	ldr	r0, [pc, #12]	@ (801a314 <phDriver_PinConfig+0x98>)
 801a306:	f000 fced 	bl	801ace4 <HAL_GPIO_Init>
	}

    /* 其他GPIO已经在GPIO_INIT实现 */
    return PH_DRIVER_SUCCESS;
 801a30a:	2300      	movs	r3, #0
}
 801a30c:	4618      	mov	r0, r3
 801a30e:	3728      	adds	r7, #40	@ 0x28
 801a310:	46bd      	mov	sp, r7
 801a312:	bd80      	pop	{r7, pc}
 801a314:	48000400 	.word	0x48000400

0801a318 <phDriver_PinRead>:

/* GPIO FUNC_2：读GPIO引脚状态是高or低电平 */
uint8_t phDriver_PinRead(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, phDriver_Pin_Func_t ePinFunc)
{
 801a318:	b580      	push	{r7, lr}
 801a31a:	b082      	sub	sp, #8
 801a31c:	af00      	add	r7, sp, #0
 801a31e:	6078      	str	r0, [r7, #4]
 801a320:	460b      	mov	r3, r1
 801a322:	807b      	strh	r3, [r7, #2]
 801a324:	4613      	mov	r3, r2
 801a326:	707b      	strb	r3, [r7, #1]
    return HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 801a328:	887b      	ldrh	r3, [r7, #2]
 801a32a:	4619      	mov	r1, r3
 801a32c:	6878      	ldr	r0, [r7, #4]
 801a32e:	f000 ff2d 	bl	801b18c <HAL_GPIO_ReadPin>
 801a332:	4603      	mov	r3, r0
}
 801a334:	4618      	mov	r0, r3
 801a336:	3708      	adds	r7, #8
 801a338:	46bd      	mov	sp, r7
 801a33a:	bd80      	pop	{r7, pc}

0801a33c <phDriver_PinWrite>:
    return PH_DRIVER_SUCCESS;
}

/* GPIO FUNC_4：写GPIO引脚 */
void phDriver_PinWrite(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t bValue)
{
 801a33c:	b580      	push	{r7, lr}
 801a33e:	b082      	sub	sp, #8
 801a340:	af00      	add	r7, sp, #0
 801a342:	6078      	str	r0, [r7, #4]
 801a344:	460b      	mov	r3, r1
 801a346:	807b      	strh	r3, [r7, #2]
 801a348:	4613      	mov	r3, r2
 801a34a:	707b      	strb	r3, [r7, #1]
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, bValue);
 801a34c:	787a      	ldrb	r2, [r7, #1]
 801a34e:	887b      	ldrh	r3, [r7, #2]
 801a350:	4619      	mov	r1, r3
 801a352:	6878      	ldr	r0, [r7, #4]
 801a354:	f000 ff32 	bl	801b1bc <HAL_GPIO_WritePin>
}
 801a358:	bf00      	nop
 801a35a:	3708      	adds	r7, #8
 801a35c:	46bd      	mov	sp, r7
 801a35e:	bd80      	pop	{r7, pc}

0801a360 <phDriver_TimerStart>:
 * PH_DRIVER_TIMER_SECS = 1 (每秒1个单位)
 * PH_DRIVER_TIMER_MILLI_SECS = 1000 (每秒1000个单位)
 * PH_DRIVER_TIMER_MICRO_SECS = 1000000 (每秒1000000个单位)
 */
phStatus_t phDriver_TimerStart(phDriver_Timer_Unit_t eTimerUnit, uint32_t dwTimePeriod, pphDriver_TimerCallBck_t pTimerCallBack)
{
 801a360:	b580      	push	{r7, lr}
 801a362:	b084      	sub	sp, #16
 801a364:	af00      	add	r7, sp, #0
 801a366:	60f8      	str	r0, [r7, #12]
 801a368:	60b9      	str	r1, [r7, #8]
 801a36a:	607a      	str	r2, [r7, #4]
	if(pTimerCallBack == NULL)
 801a36c:	687b      	ldr	r3, [r7, #4]
 801a36e:	2b00      	cmp	r3, #0
 801a370:	d11d      	bne.n	801a3ae <phDriver_TimerStart+0x4e>
	{
		/* 时间单位都转成微秒 */
	    if(eTimerUnit == PH_DRIVER_TIMER_SECS)
 801a372:	68fb      	ldr	r3, [r7, #12]
 801a374:	2b01      	cmp	r3, #1
 801a376:	d108      	bne.n	801a38a <phDriver_TimerStart+0x2a>
	    {
	    	HAL_Delay(dwTimePeriod * 1000); // s -> ms
 801a378:	68bb      	ldr	r3, [r7, #8]
 801a37a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801a37e:	fb02 f303 	mul.w	r3, r2, r3
 801a382:	4618      	mov	r0, r3
 801a384:	f000 fafa 	bl	801a97c <HAL_Delay>
 801a388:	e029      	b.n	801a3de <phDriver_TimerStart+0x7e>
	    }
	    else if(eTimerUnit == PH_DRIVER_TIMER_MILLI_SECS)
 801a38a:	68fb      	ldr	r3, [r7, #12]
 801a38c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801a390:	d103      	bne.n	801a39a <phDriver_TimerStart+0x3a>
	    {
	    	HAL_Delay(dwTimePeriod);
 801a392:	68b8      	ldr	r0, [r7, #8]
 801a394:	f000 faf2 	bl	801a97c <HAL_Delay>
 801a398:	e021      	b.n	801a3de <phDriver_TimerStart+0x7e>
	    }
	    else if(eTimerUnit == PH_DRIVER_TIMER_MICRO_SECS)
 801a39a:	68fb      	ldr	r3, [r7, #12]
 801a39c:	4a12      	ldr	r2, [pc, #72]	@ (801a3e8 <phDriver_TimerStart+0x88>)
 801a39e:	4293      	cmp	r3, r2
 801a3a0:	d11d      	bne.n	801a3de <phDriver_TimerStart+0x7e>
	    {
	    	delay_us(dwTimePeriod);
 801a3a2:	68bb      	ldr	r3, [r7, #8]
 801a3a4:	b29b      	uxth	r3, r3
 801a3a6:	4618      	mov	r0, r3
 801a3a8:	f7e7 fa54 	bl	8001854 <delay_us>
 801a3ac:	e017      	b.n	801a3de <phDriver_TimerStart+0x7e>
	    }
	}
    else	/* Call the Timer callback. */
    {
        pTimerIsrCallBack = pTimerCallBack;
 801a3ae:	4a0f      	ldr	r2, [pc, #60]	@ (801a3ec <phDriver_TimerStart+0x8c>)
 801a3b0:	687b      	ldr	r3, [r7, #4]
 801a3b2:	6013      	str	r3, [r2, #0]

        __HAL_TIM_SET_AUTORELOAD(&htim2, dwTimePeriod-1);   // 替代TIMER_Open的周期设置
 801a3b4:	4b0e      	ldr	r3, [pc, #56]	@ (801a3f0 <phDriver_TimerStart+0x90>)
 801a3b6:	681b      	ldr	r3, [r3, #0]
 801a3b8:	68ba      	ldr	r2, [r7, #8]
 801a3ba:	3a01      	subs	r2, #1
 801a3bc:	62da      	str	r2, [r3, #44]	@ 0x2c
 801a3be:	68bb      	ldr	r3, [r7, #8]
 801a3c0:	3b01      	subs	r3, #1
 801a3c2:	4a0b      	ldr	r2, [pc, #44]	@ (801a3f0 <phDriver_TimerStart+0x90>)
 801a3c4:	60d3      	str	r3, [r2, #12]
        __HAL_TIM_SET_COUNTER(&htim2, 0);				    // 重置计数器
 801a3c6:	4b0a      	ldr	r3, [pc, #40]	@ (801a3f0 <phDriver_TimerStart+0x90>)
 801a3c8:	681b      	ldr	r3, [r3, #0]
 801a3ca:	2200      	movs	r2, #0
 801a3cc:	625a      	str	r2, [r3, #36]	@ 0x24
        __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);	 		// 清除中断标志
 801a3ce:	4b08      	ldr	r3, [pc, #32]	@ (801a3f0 <phDriver_TimerStart+0x90>)
 801a3d0:	681b      	ldr	r3, [r3, #0]
 801a3d2:	f06f 0201 	mvn.w	r2, #1
 801a3d6:	611a      	str	r2, [r3, #16]

        // 一次性启动定时器并使能中断
        HAL_TIM_Base_Start_IT(&htim2);
 801a3d8:	4805      	ldr	r0, [pc, #20]	@ (801a3f0 <phDriver_TimerStart+0x90>)
 801a3da:	f002 fdc3 	bl	801cf64 <HAL_TIM_Base_Start_IT>
    }

    return PH_DRIVER_SUCCESS;
 801a3de:	2300      	movs	r3, #0
}
 801a3e0:	4618      	mov	r0, r3
 801a3e2:	3710      	adds	r7, #16
 801a3e4:	46bd      	mov	sp, r7
 801a3e6:	bd80      	pop	{r7, pc}
 801a3e8:	000f4240 	.word	0x000f4240
 801a3ec:	20001be4 	.word	0x20001be4
 801a3f0:	20000310 	.word	0x20000310

0801a3f4 <phDriver_TimerStop>:


phStatus_t phDriver_TimerStop(void)
{
 801a3f4:	b480      	push	{r7}
 801a3f6:	af00      	add	r7, sp, #0

    /* 清除回调函数和标志 */
    pTimerIsrCallBack = NULL;
    dwTimerExp = 0;
#endif
    return PH_DRIVER_SUCCESS;
 801a3f8:	2300      	movs	r3, #0
}
 801a3fa:	4618      	mov	r0, r3
 801a3fc:	46bd      	mov	sp, r7
 801a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a402:	4770      	bx	lr

0801a404 <phbalReg_Init>:
*/
phStatus_t phbalReg_Init(
                                      void * pDataParams,
                                      uint16_t wSizeOfDataParams
                                      )
{
 801a404:	b480      	push	{r7}
 801a406:	b085      	sub	sp, #20
 801a408:	af00      	add	r7, sp, #0
 801a40a:	6078      	str	r0, [r7, #4]
 801a40c:	460b      	mov	r3, r1
 801a40e:	807b      	strh	r3, [r7, #2]
	volatile uint32_t delay;

    // 参数检查
    if((pDataParams == NULL) || (sizeof(phbalReg_Type_t) != wSizeOfDataParams))
 801a410:	687b      	ldr	r3, [r7, #4]
 801a412:	2b00      	cmp	r3, #0
 801a414:	d002      	beq.n	801a41c <phbalReg_Init+0x18>
 801a416:	887b      	ldrh	r3, [r7, #2]
 801a418:	2b04      	cmp	r3, #4
 801a41a:	d002      	beq.n	801a422 <phbalReg_Init+0x1e>
    {
        return (PH_DRIVER_ERROR | PH_COMP_DRIVER);
 801a41c:	f24f 1380 	movw	r3, #61824	@ 0xf180
 801a420:	e007      	b.n	801a432 <phbalReg_Init+0x2e>
    }

    // 设置BAL层参数:驱动模块的ID和总线是SPI类型
    ((phbalReg_Type_t *)pDataParams)->wId      = PH_COMP_DRIVER | PHBAL_REG_LPCOPEN_SPI_ID;
 801a422:	687b      	ldr	r3, [r7, #4]
 801a424:	f24f 120d 	movw	r2, #61709	@ 0xf10d
 801a428:	801a      	strh	r2, [r3, #0]
    ((phbalReg_Type_t *)pDataParams)->bBalType = PHBAL_REG_TYPE_SPI;
 801a42a:	687b      	ldr	r3, [r7, #4]
 801a42c:	2201      	movs	r2, #1
 801a42e:	709a      	strb	r2, [r3, #2]

    /* Wait Startup time */
    for(delay=0; delay<10000; delay++){}
#endif	// ---NXP原代码

    return PH_DRIVER_SUCCESS;
 801a430:	2300      	movs	r3, #0
}
 801a432:	4618      	mov	r0, r3
 801a434:	3714      	adds	r7, #20
 801a436:	46bd      	mov	sp, r7
 801a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a43c:	4770      	bx	lr
	...

0801a440 <phbalReg_Exchange>:
                                        uint16_t wTxLength,
                                        uint16_t wRxBufSize,
                                        uint8_t * pRxBuffer,
                                        uint16_t * pRxLength
                                        )
{
 801a440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a444:	b095      	sub	sp, #84	@ 0x54
 801a446:	af02      	add	r7, sp, #8
 801a448:	6178      	str	r0, [r7, #20]
 801a44a:	60fa      	str	r2, [r7, #12]
 801a44c:	461a      	mov	r2, r3
 801a44e:	460b      	mov	r3, r1
 801a450:	827b      	strh	r3, [r7, #18]
 801a452:	4613      	mov	r3, r2
 801a454:	823b      	strh	r3, [r7, #16]
 801a456:	466b      	mov	r3, sp
 801a458:	461e      	mov	r6, r3
		*pRxLength = (pRxBuf != NULL) ? wTxLength : 0;
	}

	return PH_DRIVER_SUCCESS;
#endif
	uint8_t *pRxBuf = NULL;
 801a45a:	2300      	movs	r3, #0
 801a45c:	647b      	str	r3, [r7, #68]	@ 0x44
	uint8_t dummyTxByte = 0xFF;
 801a45e:	23ff      	movs	r3, #255	@ 0xff
 801a460:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	// 只发送不接收
	if (pRxBuffer == NULL)
 801a464:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a466:	2b00      	cmp	r3, #0
 801a468:	d102      	bne.n	801a470 <phbalReg_Exchange+0x30>
	{
		pRxBuf = NULL;
 801a46a:	2300      	movs	r3, #0
 801a46c:	647b      	str	r3, [r7, #68]	@ 0x44
 801a46e:	e001      	b.n	801a474 <phbalReg_Exchange+0x34>
	}
	else // 接收
	{
		pRxBuf = pRxBuffer;
 801a470:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a472:	647b      	str	r3, [r7, #68]	@ 0x44
	}

//	printf("SPITX>> ");
	for (int i = 0; i < wTxLength; i++)
 801a474:	2300      	movs	r3, #0
 801a476:	643b      	str	r3, [r7, #64]	@ 0x40
 801a478:	e00d      	b.n	801a496 <phbalReg_Exchange+0x56>
	{
		uint8_t txByte = (pTxBuffer != NULL) ? pTxBuffer[i] : dummyTxByte;
 801a47a:	68fb      	ldr	r3, [r7, #12]
 801a47c:	2b00      	cmp	r3, #0
 801a47e:	d004      	beq.n	801a48a <phbalReg_Exchange+0x4a>
 801a480:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a482:	68fa      	ldr	r2, [r7, #12]
 801a484:	4413      	add	r3, r2
 801a486:	781b      	ldrb	r3, [r3, #0]
 801a488:	e001      	b.n	801a48e <phbalReg_Exchange+0x4e>
 801a48a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801a48e:	77fb      	strb	r3, [r7, #31]
	for (int i = 0; i < wTxLength; i++)
 801a490:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a492:	3301      	adds	r3, #1
 801a494:	643b      	str	r3, [r7, #64]	@ 0x40
 801a496:	8a3b      	ldrh	r3, [r7, #16]
 801a498:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a49a:	429a      	cmp	r2, r3
 801a49c:	dbed      	blt.n	801a47a <phbalReg_Exchange+0x3a>
//		printf("%02X ", txByte); // 打印发送内容
	}
//	printf("\n");

	// 定义临时 buffer
	uint8_t txBuf[wTxLength];
 801a49e:	8a39      	ldrh	r1, [r7, #16]
 801a4a0:	460b      	mov	r3, r1
 801a4a2:	3b01      	subs	r3, #1
 801a4a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a4a6:	b28b      	uxth	r3, r1
 801a4a8:	2200      	movs	r2, #0
 801a4aa:	603b      	str	r3, [r7, #0]
 801a4ac:	607a      	str	r2, [r7, #4]
 801a4ae:	f04f 0200 	mov.w	r2, #0
 801a4b2:	f04f 0300 	mov.w	r3, #0
 801a4b6:	6878      	ldr	r0, [r7, #4]
 801a4b8:	00c3      	lsls	r3, r0, #3
 801a4ba:	6838      	ldr	r0, [r7, #0]
 801a4bc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 801a4c0:	6838      	ldr	r0, [r7, #0]
 801a4c2:	00c2      	lsls	r2, r0, #3
 801a4c4:	b28b      	uxth	r3, r1
 801a4c6:	2200      	movs	r2, #0
 801a4c8:	469a      	mov	sl, r3
 801a4ca:	4693      	mov	fp, r2
 801a4cc:	f04f 0200 	mov.w	r2, #0
 801a4d0:	f04f 0300 	mov.w	r3, #0
 801a4d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801a4d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 801a4dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801a4e0:	460b      	mov	r3, r1
 801a4e2:	3307      	adds	r3, #7
 801a4e4:	08db      	lsrs	r3, r3, #3
 801a4e6:	00db      	lsls	r3, r3, #3
 801a4e8:	ebad 0d03 	sub.w	sp, sp, r3
 801a4ec:	ab02      	add	r3, sp, #8
 801a4ee:	3300      	adds	r3, #0
 801a4f0:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t rxBuf[wTxLength];
 801a4f2:	8a39      	ldrh	r1, [r7, #16]
 801a4f4:	460b      	mov	r3, r1
 801a4f6:	3b01      	subs	r3, #1
 801a4f8:	627b      	str	r3, [r7, #36]	@ 0x24
 801a4fa:	b28b      	uxth	r3, r1
 801a4fc:	2200      	movs	r2, #0
 801a4fe:	4698      	mov	r8, r3
 801a500:	4691      	mov	r9, r2
 801a502:	f04f 0200 	mov.w	r2, #0
 801a506:	f04f 0300 	mov.w	r3, #0
 801a50a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801a50e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801a512:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801a516:	b28b      	uxth	r3, r1
 801a518:	2200      	movs	r2, #0
 801a51a:	461c      	mov	r4, r3
 801a51c:	4615      	mov	r5, r2
 801a51e:	f04f 0200 	mov.w	r2, #0
 801a522:	f04f 0300 	mov.w	r3, #0
 801a526:	00eb      	lsls	r3, r5, #3
 801a528:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801a52c:	00e2      	lsls	r2, r4, #3
 801a52e:	460b      	mov	r3, r1
 801a530:	3307      	adds	r3, #7
 801a532:	08db      	lsrs	r3, r3, #3
 801a534:	00db      	lsls	r3, r3, #3
 801a536:	ebad 0d03 	sub.w	sp, sp, r3
 801a53a:	ab02      	add	r3, sp, #8
 801a53c:	3300      	adds	r3, #0
 801a53e:	623b      	str	r3, [r7, #32]

	// 填充 txBuf
	for (int i = 0; i < wTxLength; i++)
 801a540:	2300      	movs	r3, #0
 801a542:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a544:	e010      	b.n	801a568 <phbalReg_Exchange+0x128>
	{
		txBuf[i] = (pTxBuffer != NULL) ? pTxBuffer[i] : dummyTxByte;
 801a546:	68fb      	ldr	r3, [r7, #12]
 801a548:	2b00      	cmp	r3, #0
 801a54a:	d004      	beq.n	801a556 <phbalReg_Exchange+0x116>
 801a54c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a54e:	68fa      	ldr	r2, [r7, #12]
 801a550:	4413      	add	r3, r2
 801a552:	781b      	ldrb	r3, [r3, #0]
 801a554:	e001      	b.n	801a55a <phbalReg_Exchange+0x11a>
 801a556:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801a55a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a55c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a55e:	440a      	add	r2, r1
 801a560:	7013      	strb	r3, [r2, #0]
	for (int i = 0; i < wTxLength; i++)
 801a562:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a564:	3301      	adds	r3, #1
 801a566:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a568:	8a3b      	ldrh	r3, [r7, #16]
 801a56a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a56c:	429a      	cmp	r2, r3
 801a56e:	dbea      	blt.n	801a546 <phbalReg_Exchange+0x106>
	}

	// 一次性全双工发送接收
	if (HAL_SPI_TransmitReceive(&hspi3, txBuf, rxBuf, wTxLength, 1000) != HAL_OK)
 801a570:	8a3b      	ldrh	r3, [r7, #16]
 801a572:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801a576:	9200      	str	r2, [sp, #0]
 801a578:	6a3a      	ldr	r2, [r7, #32]
 801a57a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a57c:	4823      	ldr	r0, [pc, #140]	@ (801a60c <phbalReg_Exchange+0x1cc>)
 801a57e:	f002 f8a2 	bl	801c6c6 <HAL_SPI_TransmitReceive>
 801a582:	4603      	mov	r3, r0
 801a584:	2b00      	cmp	r3, #0
 801a586:	d002      	beq.n	801a58e <phbalReg_Exchange+0x14e>
	{
		return (PH_DRIVER_FAILURE | PH_COMP_DRIVER);
 801a588:	f24f 1381 	movw	r3, #61825	@ 0xf181
 801a58c:	e037      	b.n	801a5fe <phbalReg_Exchange+0x1be>
	}

	// 拷贝接收到的内容到 pRxBuf
	if (pRxBuf != NULL)
 801a58e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a590:	2b00      	cmp	r3, #0
 801a592:	d016      	beq.n	801a5c2 <phbalReg_Exchange+0x182>
	{
		for (int i = 0; i < wTxLength && i < wRxBufSize; i++)
 801a594:	2300      	movs	r3, #0
 801a596:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a598:	e00a      	b.n	801a5b0 <phbalReg_Exchange+0x170>
		{
			pRxBuf[i] = rxBuf[i];
 801a59a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a59c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a59e:	4413      	add	r3, r2
 801a5a0:	6a39      	ldr	r1, [r7, #32]
 801a5a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801a5a4:	440a      	add	r2, r1
 801a5a6:	7812      	ldrb	r2, [r2, #0]
 801a5a8:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < wTxLength && i < wRxBufSize; i++)
 801a5aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a5ac:	3301      	adds	r3, #1
 801a5ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a5b0:	8a3b      	ldrh	r3, [r7, #16]
 801a5b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801a5b4:	429a      	cmp	r2, r3
 801a5b6:	da04      	bge.n	801a5c2 <phbalReg_Exchange+0x182>
 801a5b8:	f8b7 3070 	ldrh.w	r3, [r7, #112]	@ 0x70
 801a5bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801a5be:	429a      	cmp	r2, r3
 801a5c0:	dbeb      	blt.n	801a59a <phbalReg_Exchange+0x15a>
		}
	}

	// 打印接收内容
	if (pRxBuf != NULL)
 801a5c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a5c4:	2b00      	cmp	r3, #0
 801a5c6:	d00e      	beq.n	801a5e6 <phbalReg_Exchange+0x1a6>
	{
//		printf("SPIRX<< ");
		for (int i = 0; i < wTxLength && i < wRxBufSize; i++)
 801a5c8:	2300      	movs	r3, #0
 801a5ca:	637b      	str	r3, [r7, #52]	@ 0x34
 801a5cc:	e002      	b.n	801a5d4 <phbalReg_Exchange+0x194>
 801a5ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a5d0:	3301      	adds	r3, #1
 801a5d2:	637b      	str	r3, [r7, #52]	@ 0x34
 801a5d4:	8a3b      	ldrh	r3, [r7, #16]
 801a5d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a5d8:	429a      	cmp	r2, r3
 801a5da:	da04      	bge.n	801a5e6 <phbalReg_Exchange+0x1a6>
 801a5dc:	f8b7 3070 	ldrh.w	r3, [r7, #112]	@ 0x70
 801a5e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a5e2:	429a      	cmp	r2, r3
 801a5e4:	dbf3      	blt.n	801a5ce <phbalReg_Exchange+0x18e>
		}
//		printf("\n");
	}

	// 返回接收长度
	if (pRxLength != NULL)
 801a5e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a5e8:	2b00      	cmp	r3, #0
 801a5ea:	d007      	beq.n	801a5fc <phbalReg_Exchange+0x1bc>
	{
		*pRxLength = (pRxBuf != NULL) ? wTxLength : 0;
 801a5ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a5ee:	2b00      	cmp	r3, #0
 801a5f0:	d001      	beq.n	801a5f6 <phbalReg_Exchange+0x1b6>
 801a5f2:	8a3a      	ldrh	r2, [r7, #16]
 801a5f4:	e000      	b.n	801a5f8 <phbalReg_Exchange+0x1b8>
 801a5f6:	2200      	movs	r2, #0
 801a5f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a5fa:	801a      	strh	r2, [r3, #0]
	}

	return PH_DRIVER_SUCCESS;
 801a5fc:	2300      	movs	r3, #0
 801a5fe:	46b5      	mov	sp, r6
}
 801a600:	4618      	mov	r0, r3
 801a602:	374c      	adds	r7, #76	@ 0x4c
 801a604:	46bd      	mov	sp, r7
 801a606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a60a:	bf00      	nop
 801a60c:	2000025c 	.word	0x2000025c

0801a610 <phOsal_EventCreate>:
//1    return phOsal_InitTickTimer(&phOsal_NullOsSysTickHandler);
    return HAL_InitTick(1);
}

phStatus_t phOsal_EventCreate(phOsal_Event_t *eventHandle, pphOsal_EventObj_t eventObj)
{
 801a610:	b580      	push	{r7, lr}
 801a612:	b084      	sub	sp, #16
 801a614:	af00      	add	r7, sp, #0
 801a616:	6078      	str	r0, [r7, #4]
 801a618:	6039      	str	r1, [r7, #0]
    uint32_t bEventIndex = 0;
 801a61a:	2300      	movs	r3, #0
 801a61c:	60fb      	str	r3, [r7, #12]

    if ((eventHandle == NULL) || (eventObj == NULL))
 801a61e:	687b      	ldr	r3, [r7, #4]
 801a620:	2b00      	cmp	r3, #0
 801a622:	d002      	beq.n	801a62a <phOsal_EventCreate+0x1a>
 801a624:	683b      	ldr	r3, [r7, #0]
 801a626:	2b00      	cmp	r3, #0
 801a628:	d102      	bne.n	801a630 <phOsal_EventCreate+0x20>
    {
        return PH_OSAL_ADD_COMPCODE(PH_OSAL_ERROR, PH_COMP_OSAL);
 801a62a:	f24f 0327 	movw	r3, #61479	@ 0xf027
 801a62e:	e033      	b.n	801a698 <phOsal_EventCreate+0x88>
    }

    PH_OSAL_CHECK_SUCCESS(phOsal_NullOs_GetFreeIndex(&bEventIndex, gdwEventBitMap, PH_OSAL_CONFIG_MAX_NUM_EVENTS));
 801a630:	4b1b      	ldr	r3, [pc, #108]	@ (801a6a0 <phOsal_EventCreate+0x90>)
 801a632:	6819      	ldr	r1, [r3, #0]
 801a634:	f107 030c 	add.w	r3, r7, #12
 801a638:	2205      	movs	r2, #5
 801a63a:	4618      	mov	r0, r3
 801a63c:	f000 f8e2 	bl	801a804 <phOsal_NullOs_GetFreeIndex>
 801a640:	4603      	mov	r3, r0
 801a642:	2b00      	cmp	r3, #0
 801a644:	d009      	beq.n	801a65a <phOsal_EventCreate+0x4a>
 801a646:	4b16      	ldr	r3, [pc, #88]	@ (801a6a0 <phOsal_EventCreate+0x90>)
 801a648:	6819      	ldr	r1, [r3, #0]
 801a64a:	f107 030c 	add.w	r3, r7, #12
 801a64e:	2205      	movs	r2, #5
 801a650:	4618      	mov	r0, r3
 801a652:	f000 f8d7 	bl	801a804 <phOsal_NullOs_GetFreeIndex>
 801a656:	4603      	mov	r3, r0
 801a658:	e01e      	b.n	801a698 <phOsal_EventCreate+0x88>

    gdwEvents[bEventIndex] = 0;
 801a65a:	68fb      	ldr	r3, [r7, #12]
 801a65c:	4a11      	ldr	r2, [pc, #68]	@ (801a6a4 <phOsal_EventCreate+0x94>)
 801a65e:	2100      	movs	r1, #0
 801a660:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    gdwEventBitMap |= (1 << bEventIndex);
 801a664:	68fb      	ldr	r3, [r7, #12]
 801a666:	2201      	movs	r2, #1
 801a668:	fa02 f303 	lsl.w	r3, r2, r3
 801a66c:	461a      	mov	r2, r3
 801a66e:	4b0c      	ldr	r3, [pc, #48]	@ (801a6a0 <phOsal_EventCreate+0x90>)
 801a670:	681b      	ldr	r3, [r3, #0]
 801a672:	4313      	orrs	r3, r2
 801a674:	4a0a      	ldr	r2, [pc, #40]	@ (801a6a0 <phOsal_EventCreate+0x90>)
 801a676:	6013      	str	r3, [r2, #0]
    *eventHandle = (phOsal_Event_t)(&gdwEvents[bEventIndex]);
 801a678:	68fb      	ldr	r3, [r7, #12]
 801a67a:	009b      	lsls	r3, r3, #2
 801a67c:	4a09      	ldr	r2, [pc, #36]	@ (801a6a4 <phOsal_EventCreate+0x94>)
 801a67e:	441a      	add	r2, r3
 801a680:	687b      	ldr	r3, [r7, #4]
 801a682:	601a      	str	r2, [r3, #0]
    eventObj->EventHandle = (phOsal_Event_t)(&gdwEvents[bEventIndex]);
 801a684:	68fb      	ldr	r3, [r7, #12]
 801a686:	009b      	lsls	r3, r3, #2
 801a688:	4a06      	ldr	r2, [pc, #24]	@ (801a6a4 <phOsal_EventCreate+0x94>)
 801a68a:	441a      	add	r2, r3
 801a68c:	683b      	ldr	r3, [r7, #0]
 801a68e:	601a      	str	r2, [r3, #0]
    eventObj->dwEventIndex = bEventIndex;
 801a690:	68fa      	ldr	r2, [r7, #12]
 801a692:	683b      	ldr	r3, [r7, #0]
 801a694:	60da      	str	r2, [r3, #12]

    return PH_OSAL_SUCCESS;
 801a696:	2300      	movs	r3, #0
}
 801a698:	4618      	mov	r0, r3
 801a69a:	3710      	adds	r7, #16
 801a69c:	46bd      	mov	sp, r7
 801a69e:	bd80      	pop	{r7, pc}
 801a6a0:	20001c00 	.word	0x20001c00
 801a6a4:	20001bec 	.word	0x20001bec

0801a6a8 <phOsal_EventPend>:

// 事件挂起函数：等待特定事件标志位被设置，类似于RTOS中的事件等待机制
phStatus_t phOsal_EventPend(volatile phOsal_Event_t * eventHandle, phOsal_EventOpt_t options, phOsal_Ticks_t ticksToWait,
                           phOsal_EventBits_t FlagsToWait, phOsal_EventBits_t *pCurrFlags)
{
 801a6a8:	b480      	push	{r7}
 801a6aa:	b087      	sub	sp, #28
 801a6ac:	af00      	add	r7, sp, #0
 801a6ae:	60f8      	str	r0, [r7, #12]
 801a6b0:	607a      	str	r2, [r7, #4]
 801a6b2:	603b      	str	r3, [r7, #0]
 801a6b4:	460b      	mov	r3, r1
 801a6b6:	72fb      	strb	r3, [r7, #11]
	phStatus_t status;

	/* 检查事件句柄是否有效 */
	if((eventHandle == NULL) || ((*eventHandle) == NULL))
 801a6b8:	68fb      	ldr	r3, [r7, #12]
 801a6ba:	2b00      	cmp	r3, #0
 801a6bc:	d003      	beq.n	801a6c6 <phOsal_EventPend+0x1e>
 801a6be:	68fb      	ldr	r3, [r7, #12]
 801a6c0:	681b      	ldr	r3, [r3, #0]
 801a6c2:	2b00      	cmp	r3, #0
 801a6c4:	d102      	bne.n	801a6cc <phOsal_EventPend+0x24>
	{
	    return PH_OSAL_ADD_COMPCODE(PH_OSAL_ERROR, PH_COMP_OSAL);
 801a6c6:	f24f 0327 	movw	r3, #61479	@ 0xf027
 801a6ca:	e02e      	b.n	801a72a <phOsal_EventPend+0x82>
	}

	status = PH_OSAL_IO_TIMEOUT; // 默认设置为超时状态
 801a6cc:	2301      	movs	r3, #1
 801a6ce:	82fb      	strh	r3, [r7, #22]
	    /* Wait for interrupts/events to occur */
	    phOsal_Sleep();
	}
#endif
	//dd1    phOsal_StopTickTimer();
	gbWaitTimedOut = 0;		// 清除超时标志
 801a6d0:	4b19      	ldr	r3, [pc, #100]	@ (801a738 <phOsal_EventPend+0x90>)
 801a6d2:	2200      	movs	r2, #0
 801a6d4:	701a      	strb	r2, [r3, #0]

	//dd1    phOsal_EnterCriticalSection();

	/* 返回当前标志位 */
	if (pCurrFlags != NULL)
 801a6d6:	6a3b      	ldr	r3, [r7, #32]
 801a6d8:	2b00      	cmp	r3, #0
 801a6da:	d004      	beq.n	801a6e6 <phOsal_EventPend+0x3e>
	{
	    *pCurrFlags = (*((uint32_t *)(*eventHandle)));
 801a6dc:	68fb      	ldr	r3, [r7, #12]
 801a6de:	681b      	ldr	r3, [r3, #0]
 801a6e0:	681a      	ldr	r2, [r3, #0]
 801a6e2:	6a3b      	ldr	r3, [r7, #32]
 801a6e4:	601a      	str	r2, [r3, #0]
	}

	/* 清除指定标志位 */
	if (options & E_OS_EVENT_OPT_PEND_CLEAR_ON_EXIT)
 801a6e6:	7afb      	ldrb	r3, [r7, #11]
 801a6e8:	f003 0304 	and.w	r3, r3, #4
 801a6ec:	2b00      	cmp	r3, #0
 801a6ee:	d00a      	beq.n	801a706 <phOsal_EventPend+0x5e>
	{
	    (*((uint32_t *)(*eventHandle))) &= (~(FlagsToWait & (*((uint32_t *)(*eventHandle)))));
 801a6f0:	68fb      	ldr	r3, [r7, #12]
 801a6f2:	681b      	ldr	r3, [r3, #0]
 801a6f4:	681a      	ldr	r2, [r3, #0]
 801a6f6:	683b      	ldr	r3, [r7, #0]
 801a6f8:	4013      	ands	r3, r2
 801a6fa:	43d9      	mvns	r1, r3
 801a6fc:	68fb      	ldr	r3, [r7, #12]
 801a6fe:	681b      	ldr	r3, [r3, #0]
 801a700:	681a      	ldr	r2, [r3, #0]
 801a702:	400a      	ands	r2, r1
 801a704:	601a      	str	r2, [r3, #0]
	}
	//dd1    phOsal_ExitCriticalSection();

	return PH_OSAL_ADD_COMPCODE(status, PH_COMP_OSAL);
 801a706:	8afb      	ldrh	r3, [r7, #22]
 801a708:	2b00      	cmp	r3, #0
 801a70a:	d00d      	beq.n	801a728 <phOsal_EventPend+0x80>
 801a70c:	8afb      	ldrh	r3, [r7, #22]
 801a70e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801a712:	2b00      	cmp	r3, #0
 801a714:	d108      	bne.n	801a728 <phOsal_EventPend+0x80>
 801a716:	8afb      	ldrh	r3, [r7, #22]
 801a718:	b2db      	uxtb	r3, r3
 801a71a:	b29b      	uxth	r3, r3
 801a71c:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801a720:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801a724:	b29b      	uxth	r3, r3
 801a726:	e000      	b.n	801a72a <phOsal_EventPend+0x82>
 801a728:	8afb      	ldrh	r3, [r7, #22]
}
 801a72a:	4618      	mov	r0, r3
 801a72c:	371c      	adds	r7, #28
 801a72e:	46bd      	mov	sp, r7
 801a730:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a734:	4770      	bx	lr
 801a736:	bf00      	nop
 801a738:	20001be8 	.word	0x20001be8

0801a73c <phOsal_EventPost>:

phStatus_t phOsal_EventPost(phOsal_Event_t * eventHandle, phOsal_EventOpt_t options, phOsal_EventBits_t FlagsToPost,
    phOsal_EventBits_t *pCurrFlags)
{
 801a73c:	b580      	push	{r7, lr}
 801a73e:	b084      	sub	sp, #16
 801a740:	af00      	add	r7, sp, #0
 801a742:	60f8      	str	r0, [r7, #12]
 801a744:	607a      	str	r2, [r7, #4]
 801a746:	603b      	str	r3, [r7, #0]
 801a748:	460b      	mov	r3, r1
 801a74a:	72fb      	strb	r3, [r7, #11]
	printf("POST: 0x%08lX\r\n", FlagsToPost);  // 添加这行
 801a74c:	6879      	ldr	r1, [r7, #4]
 801a74e:	4815      	ldr	r0, [pc, #84]	@ (801a7a4 <phOsal_EventPost+0x68>)
 801a750:	f005 ff40 	bl	80205d4 <iprintf>

    if((eventHandle == NULL) || ((*eventHandle) == NULL))
 801a754:	68fb      	ldr	r3, [r7, #12]
 801a756:	2b00      	cmp	r3, #0
 801a758:	d003      	beq.n	801a762 <phOsal_EventPost+0x26>
 801a75a:	68fb      	ldr	r3, [r7, #12]
 801a75c:	681b      	ldr	r3, [r3, #0]
 801a75e:	2b00      	cmp	r3, #0
 801a760:	d105      	bne.n	801a76e <phOsal_EventPost+0x32>
    {
    	printf("POST NULL\r\n");  // 添加这行
 801a762:	4811      	ldr	r0, [pc, #68]	@ (801a7a8 <phOsal_EventPost+0x6c>)
 801a764:	f005 ffa6 	bl	80206b4 <puts>
        return PH_OSAL_ADD_COMPCODE(PH_OSAL_ERROR, PH_COMP_OSAL);
 801a768:	f24f 0327 	movw	r3, #61479	@ 0xf027
 801a76c:	e016      	b.n	801a79c <phOsal_EventPost+0x60>
    }

    /* Enter Critical Section */
    phOsal_EnterCriticalSection();
 801a76e:	f000 f879 	bl	801a864 <phOsal_EnterCriticalSection>

    /* Set the events. */
    (*((uint32_t *)(*eventHandle))) |= FlagsToPost;
 801a772:	68fb      	ldr	r3, [r7, #12]
 801a774:	681b      	ldr	r3, [r3, #0]
 801a776:	6819      	ldr	r1, [r3, #0]
 801a778:	68fb      	ldr	r3, [r7, #12]
 801a77a:	681b      	ldr	r3, [r3, #0]
 801a77c:	687a      	ldr	r2, [r7, #4]
 801a77e:	430a      	orrs	r2, r1
 801a780:	601a      	str	r2, [r3, #0]

    if (pCurrFlags != NULL)
 801a782:	683b      	ldr	r3, [r7, #0]
 801a784:	2b00      	cmp	r3, #0
 801a786:	d004      	beq.n	801a792 <phOsal_EventPost+0x56>
    {
        *pCurrFlags = (*((uint32_t *)(*eventHandle)));
 801a788:	68fb      	ldr	r3, [r7, #12]
 801a78a:	681b      	ldr	r3, [r3, #0]
 801a78c:	681a      	ldr	r2, [r3, #0]
 801a78e:	683b      	ldr	r3, [r7, #0]
 801a790:	601a      	str	r2, [r3, #0]
    }

    /* Exit Critical Section */
    phOsal_ExitCriticalSection();
 801a792:	f000 f86f 	bl	801a874 <phOsal_ExitCriticalSection>

    phOsal_WakeUp();
 801a796:	f000 f875 	bl	801a884 <phOsal_WakeUp>

    return PH_OSAL_SUCCESS;
 801a79a:	2300      	movs	r3, #0

}
 801a79c:	4618      	mov	r0, r3
 801a79e:	3710      	adds	r7, #16
 801a7a0:	46bd      	mov	sp, r7
 801a7a2:	bd80      	pop	{r7, pc}
 801a7a4:	08023148 	.word	0x08023148
 801a7a8:	08023158 	.word	0x08023158

0801a7ac <phOsal_EventClear>:

phStatus_t phOsal_EventClear(phOsal_Event_t * eventHandle, phOsal_EventOpt_t options, phOsal_EventBits_t FlagsToClear,
    phOsal_EventBits_t *pCurrFlags)
{
 801a7ac:	b580      	push	{r7, lr}
 801a7ae:	b084      	sub	sp, #16
 801a7b0:	af00      	add	r7, sp, #0
 801a7b2:	60f8      	str	r0, [r7, #12]
 801a7b4:	607a      	str	r2, [r7, #4]
 801a7b6:	603b      	str	r3, [r7, #0]
 801a7b8:	460b      	mov	r3, r1
 801a7ba:	72fb      	strb	r3, [r7, #11]
    if((eventHandle == NULL) || ((*eventHandle) == NULL))
 801a7bc:	68fb      	ldr	r3, [r7, #12]
 801a7be:	2b00      	cmp	r3, #0
 801a7c0:	d003      	beq.n	801a7ca <phOsal_EventClear+0x1e>
 801a7c2:	68fb      	ldr	r3, [r7, #12]
 801a7c4:	681b      	ldr	r3, [r3, #0]
 801a7c6:	2b00      	cmp	r3, #0
 801a7c8:	d102      	bne.n	801a7d0 <phOsal_EventClear+0x24>
    {
        return PH_OSAL_ADD_COMPCODE(PH_OSAL_ERROR, PH_COMP_OSAL);
 801a7ca:	f24f 0327 	movw	r3, #61479	@ 0xf027
 801a7ce:	e015      	b.n	801a7fc <phOsal_EventClear+0x50>
    }

    /* Enter Critical Section */
    phOsal_EnterCriticalSection();
 801a7d0:	f000 f848 	bl	801a864 <phOsal_EnterCriticalSection>

    if (pCurrFlags != NULL)
 801a7d4:	683b      	ldr	r3, [r7, #0]
 801a7d6:	2b00      	cmp	r3, #0
 801a7d8:	d004      	beq.n	801a7e4 <phOsal_EventClear+0x38>
    {
        *pCurrFlags = (*((uint32_t *)(*eventHandle)));
 801a7da:	68fb      	ldr	r3, [r7, #12]
 801a7dc:	681b      	ldr	r3, [r3, #0]
 801a7de:	681a      	ldr	r2, [r3, #0]
 801a7e0:	683b      	ldr	r3, [r7, #0]
 801a7e2:	601a      	str	r2, [r3, #0]
    }

    (*((uint32_t *)(*eventHandle))) &= (~FlagsToClear);
 801a7e4:	68fb      	ldr	r3, [r7, #12]
 801a7e6:	681b      	ldr	r3, [r3, #0]
 801a7e8:	6819      	ldr	r1, [r3, #0]
 801a7ea:	687b      	ldr	r3, [r7, #4]
 801a7ec:	43da      	mvns	r2, r3
 801a7ee:	68fb      	ldr	r3, [r7, #12]
 801a7f0:	681b      	ldr	r3, [r3, #0]
 801a7f2:	400a      	ands	r2, r1
 801a7f4:	601a      	str	r2, [r3, #0]

    /* Exit Critical Section. */
    phOsal_ExitCriticalSection();
 801a7f6:	f000 f83d 	bl	801a874 <phOsal_ExitCriticalSection>

    return PH_OSAL_SUCCESS;
 801a7fa:	2300      	movs	r3, #0
}
 801a7fc:	4618      	mov	r0, r3
 801a7fe:	3710      	adds	r7, #16
 801a800:	46bd      	mov	sp, r7
 801a802:	bd80      	pop	{r7, pc}

0801a804 <phOsal_NullOs_GetFreeIndex>:
{
    return (PH_OSAL_UNSUPPORTED_COMMAND | PH_COMP_OSAL);
}

static phStatus_t phOsal_NullOs_GetFreeIndex(uint32_t * dwFreeIndex, uint32_t dwBitMap, uint32_t dwMaxLimit)
{
 801a804:	b480      	push	{r7}
 801a806:	b087      	sub	sp, #28
 801a808:	af00      	add	r7, sp, #0
 801a80a:	60f8      	str	r0, [r7, #12]
 801a80c:	60b9      	str	r1, [r7, #8]
 801a80e:	607a      	str	r2, [r7, #4]
    phStatus_t status;

    (*dwFreeIndex) = 0;
 801a810:	68fb      	ldr	r3, [r7, #12]
 801a812:	2200      	movs	r2, #0
 801a814:	601a      	str	r2, [r3, #0]

    while(((1 << (*dwFreeIndex)) & dwBitMap) && ((*dwFreeIndex) < dwMaxLimit))
 801a816:	e004      	b.n	801a822 <phOsal_NullOs_GetFreeIndex+0x1e>
    {
        (*dwFreeIndex)++;
 801a818:	68fb      	ldr	r3, [r7, #12]
 801a81a:	681b      	ldr	r3, [r3, #0]
 801a81c:	1c5a      	adds	r2, r3, #1
 801a81e:	68fb      	ldr	r3, [r7, #12]
 801a820:	601a      	str	r2, [r3, #0]
    while(((1 << (*dwFreeIndex)) & dwBitMap) && ((*dwFreeIndex) < dwMaxLimit))
 801a822:	68fb      	ldr	r3, [r7, #12]
 801a824:	681b      	ldr	r3, [r3, #0]
 801a826:	2201      	movs	r2, #1
 801a828:	fa02 f303 	lsl.w	r3, r2, r3
 801a82c:	461a      	mov	r2, r3
 801a82e:	68bb      	ldr	r3, [r7, #8]
 801a830:	4013      	ands	r3, r2
 801a832:	2b00      	cmp	r3, #0
 801a834:	d004      	beq.n	801a840 <phOsal_NullOs_GetFreeIndex+0x3c>
 801a836:	68fb      	ldr	r3, [r7, #12]
 801a838:	681b      	ldr	r3, [r3, #0]
 801a83a:	687a      	ldr	r2, [r7, #4]
 801a83c:	429a      	cmp	r2, r3
 801a83e:	d8eb      	bhi.n	801a818 <phOsal_NullOs_GetFreeIndex+0x14>
    }

    if (*dwFreeIndex == dwMaxLimit)
 801a840:	68fb      	ldr	r3, [r7, #12]
 801a842:	681b      	ldr	r3, [r3, #0]
 801a844:	687a      	ldr	r2, [r7, #4]
 801a846:	429a      	cmp	r2, r3
 801a848:	d103      	bne.n	801a852 <phOsal_NullOs_GetFreeIndex+0x4e>
    {
        status = (PH_OSAL_ERROR | PH_COMP_OSAL);
 801a84a:	f24f 0327 	movw	r3, #61479	@ 0xf027
 801a84e:	82fb      	strh	r3, [r7, #22]
 801a850:	e001      	b.n	801a856 <phOsal_NullOs_GetFreeIndex+0x52>
    }
    else
    {
        status = PH_OSAL_SUCCESS;
 801a852:	2300      	movs	r3, #0
 801a854:	82fb      	strh	r3, [r7, #22]
    }

    return status;
 801a856:	8afb      	ldrh	r3, [r7, #22]
}
 801a858:	4618      	mov	r0, r3
 801a85a:	371c      	adds	r7, #28
 801a85c:	46bd      	mov	sp, r7
 801a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a862:	4770      	bx	lr

0801a864 <phOsal_EnterCriticalSection>:

    return PH_OSAL_SUCCESS;
}

void phOsal_EnterCriticalSection(void)
{
 801a864:	b480      	push	{r7}
 801a866:	af00      	add	r7, sp, #0
    __DISABLE_IRQ();
 801a868:	b672      	cpsid	i
}
 801a86a:	bf00      	nop
 801a86c:	46bd      	mov	sp, r7
 801a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a872:	4770      	bx	lr

0801a874 <phOsal_ExitCriticalSection>:

void phOsal_ExitCriticalSection(void)
{
 801a874:	b480      	push	{r7}
 801a876:	af00      	add	r7, sp, #0
    __ENABLE_IRQ();
 801a878:	b662      	cpsie	i
}
 801a87a:	bf00      	nop
 801a87c:	46bd      	mov	sp, r7
 801a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a882:	4770      	bx	lr

0801a884 <phOsal_WakeUp>:
{
     __WFE();
}

void phOsal_WakeUp(void)
{
 801a884:	b480      	push	{r7}
 801a886:	af00      	add	r7, sp, #0
    __SEV();
 801a888:	bf40      	sev
}
 801a88a:	bf00      	nop
 801a88c:	46bd      	mov	sp, r7
 801a88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a892:	4770      	bx	lr

0801a894 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801a894:	b580      	push	{r7, lr}
 801a896:	b082      	sub	sp, #8
 801a898:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 801a89a:	2300      	movs	r3, #0
 801a89c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801a89e:	2003      	movs	r0, #3
 801a8a0:	f000 f960 	bl	801ab64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 801a8a4:	2001      	movs	r0, #1
 801a8a6:	f000 f80d 	bl	801a8c4 <HAL_InitTick>
 801a8aa:	4603      	mov	r3, r0
 801a8ac:	2b00      	cmp	r3, #0
 801a8ae:	d002      	beq.n	801a8b6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 801a8b0:	2301      	movs	r3, #1
 801a8b2:	71fb      	strb	r3, [r7, #7]
 801a8b4:	e001      	b.n	801a8ba <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 801a8b6:	f7e6 fce5 	bl	8001284 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 801a8ba:	79fb      	ldrb	r3, [r7, #7]
}
 801a8bc:	4618      	mov	r0, r3
 801a8be:	3708      	adds	r7, #8
 801a8c0:	46bd      	mov	sp, r7
 801a8c2:	bd80      	pop	{r7, pc}

0801a8c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801a8c4:	b580      	push	{r7, lr}
 801a8c6:	b084      	sub	sp, #16
 801a8c8:	af00      	add	r7, sp, #0
 801a8ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 801a8cc:	2300      	movs	r3, #0
 801a8ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 801a8d0:	4b17      	ldr	r3, [pc, #92]	@ (801a930 <HAL_InitTick+0x6c>)
 801a8d2:	781b      	ldrb	r3, [r3, #0]
 801a8d4:	2b00      	cmp	r3, #0
 801a8d6:	d023      	beq.n	801a920 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 801a8d8:	4b16      	ldr	r3, [pc, #88]	@ (801a934 <HAL_InitTick+0x70>)
 801a8da:	681a      	ldr	r2, [r3, #0]
 801a8dc:	4b14      	ldr	r3, [pc, #80]	@ (801a930 <HAL_InitTick+0x6c>)
 801a8de:	781b      	ldrb	r3, [r3, #0]
 801a8e0:	4619      	mov	r1, r3
 801a8e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801a8e6:	fbb3 f3f1 	udiv	r3, r3, r1
 801a8ea:	fbb2 f3f3 	udiv	r3, r2, r3
 801a8ee:	4618      	mov	r0, r3
 801a8f0:	f000 f96d 	bl	801abce <HAL_SYSTICK_Config>
 801a8f4:	4603      	mov	r3, r0
 801a8f6:	2b00      	cmp	r3, #0
 801a8f8:	d10f      	bne.n	801a91a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801a8fa:	687b      	ldr	r3, [r7, #4]
 801a8fc:	2b0f      	cmp	r3, #15
 801a8fe:	d809      	bhi.n	801a914 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801a900:	2200      	movs	r2, #0
 801a902:	6879      	ldr	r1, [r7, #4]
 801a904:	f04f 30ff 	mov.w	r0, #4294967295
 801a908:	f000 f937 	bl	801ab7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 801a90c:	4a0a      	ldr	r2, [pc, #40]	@ (801a938 <HAL_InitTick+0x74>)
 801a90e:	687b      	ldr	r3, [r7, #4]
 801a910:	6013      	str	r3, [r2, #0]
 801a912:	e007      	b.n	801a924 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 801a914:	2301      	movs	r3, #1
 801a916:	73fb      	strb	r3, [r7, #15]
 801a918:	e004      	b.n	801a924 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 801a91a:	2301      	movs	r3, #1
 801a91c:	73fb      	strb	r3, [r7, #15]
 801a91e:	e001      	b.n	801a924 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 801a920:	2301      	movs	r3, #1
 801a922:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 801a924:	7bfb      	ldrb	r3, [r7, #15]
}
 801a926:	4618      	mov	r0, r3
 801a928:	3710      	adds	r7, #16
 801a92a:	46bd      	mov	sp, r7
 801a92c:	bd80      	pop	{r7, pc}
 801a92e:	bf00      	nop
 801a930:	20000074 	.word	0x20000074
 801a934:	20000000 	.word	0x20000000
 801a938:	20000070 	.word	0x20000070

0801a93c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801a93c:	b480      	push	{r7}
 801a93e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 801a940:	4b06      	ldr	r3, [pc, #24]	@ (801a95c <HAL_IncTick+0x20>)
 801a942:	781b      	ldrb	r3, [r3, #0]
 801a944:	461a      	mov	r2, r3
 801a946:	4b06      	ldr	r3, [pc, #24]	@ (801a960 <HAL_IncTick+0x24>)
 801a948:	681b      	ldr	r3, [r3, #0]
 801a94a:	4413      	add	r3, r2
 801a94c:	4a04      	ldr	r2, [pc, #16]	@ (801a960 <HAL_IncTick+0x24>)
 801a94e:	6013      	str	r3, [r2, #0]
}
 801a950:	bf00      	nop
 801a952:	46bd      	mov	sp, r7
 801a954:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a958:	4770      	bx	lr
 801a95a:	bf00      	nop
 801a95c:	20000074 	.word	0x20000074
 801a960:	20001c04 	.word	0x20001c04

0801a964 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801a964:	b480      	push	{r7}
 801a966:	af00      	add	r7, sp, #0
  return uwTick;
 801a968:	4b03      	ldr	r3, [pc, #12]	@ (801a978 <HAL_GetTick+0x14>)
 801a96a:	681b      	ldr	r3, [r3, #0]
}
 801a96c:	4618      	mov	r0, r3
 801a96e:	46bd      	mov	sp, r7
 801a970:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a974:	4770      	bx	lr
 801a976:	bf00      	nop
 801a978:	20001c04 	.word	0x20001c04

0801a97c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801a97c:	b580      	push	{r7, lr}
 801a97e:	b084      	sub	sp, #16
 801a980:	af00      	add	r7, sp, #0
 801a982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801a984:	f7ff ffee 	bl	801a964 <HAL_GetTick>
 801a988:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801a98a:	687b      	ldr	r3, [r7, #4]
 801a98c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 801a98e:	68fb      	ldr	r3, [r7, #12]
 801a990:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a994:	d005      	beq.n	801a9a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 801a996:	4b0a      	ldr	r3, [pc, #40]	@ (801a9c0 <HAL_Delay+0x44>)
 801a998:	781b      	ldrb	r3, [r3, #0]
 801a99a:	461a      	mov	r2, r3
 801a99c:	68fb      	ldr	r3, [r7, #12]
 801a99e:	4413      	add	r3, r2
 801a9a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 801a9a2:	bf00      	nop
 801a9a4:	f7ff ffde 	bl	801a964 <HAL_GetTick>
 801a9a8:	4602      	mov	r2, r0
 801a9aa:	68bb      	ldr	r3, [r7, #8]
 801a9ac:	1ad3      	subs	r3, r2, r3
 801a9ae:	68fa      	ldr	r2, [r7, #12]
 801a9b0:	429a      	cmp	r2, r3
 801a9b2:	d8f7      	bhi.n	801a9a4 <HAL_Delay+0x28>
  {
  }
}
 801a9b4:	bf00      	nop
 801a9b6:	bf00      	nop
 801a9b8:	3710      	adds	r7, #16
 801a9ba:	46bd      	mov	sp, r7
 801a9bc:	bd80      	pop	{r7, pc}
 801a9be:	bf00      	nop
 801a9c0:	20000074 	.word	0x20000074

0801a9c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801a9c4:	b480      	push	{r7}
 801a9c6:	b085      	sub	sp, #20
 801a9c8:	af00      	add	r7, sp, #0
 801a9ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801a9cc:	687b      	ldr	r3, [r7, #4]
 801a9ce:	f003 0307 	and.w	r3, r3, #7
 801a9d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801a9d4:	4b0c      	ldr	r3, [pc, #48]	@ (801aa08 <__NVIC_SetPriorityGrouping+0x44>)
 801a9d6:	68db      	ldr	r3, [r3, #12]
 801a9d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801a9da:	68ba      	ldr	r2, [r7, #8]
 801a9dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 801a9e0:	4013      	ands	r3, r2
 801a9e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801a9e4:	68fb      	ldr	r3, [r7, #12]
 801a9e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801a9e8:	68bb      	ldr	r3, [r7, #8]
 801a9ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801a9ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 801a9f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801a9f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801a9f6:	4a04      	ldr	r2, [pc, #16]	@ (801aa08 <__NVIC_SetPriorityGrouping+0x44>)
 801a9f8:	68bb      	ldr	r3, [r7, #8]
 801a9fa:	60d3      	str	r3, [r2, #12]
}
 801a9fc:	bf00      	nop
 801a9fe:	3714      	adds	r7, #20
 801aa00:	46bd      	mov	sp, r7
 801aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa06:	4770      	bx	lr
 801aa08:	e000ed00 	.word	0xe000ed00

0801aa0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801aa0c:	b480      	push	{r7}
 801aa0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801aa10:	4b04      	ldr	r3, [pc, #16]	@ (801aa24 <__NVIC_GetPriorityGrouping+0x18>)
 801aa12:	68db      	ldr	r3, [r3, #12]
 801aa14:	0a1b      	lsrs	r3, r3, #8
 801aa16:	f003 0307 	and.w	r3, r3, #7
}
 801aa1a:	4618      	mov	r0, r3
 801aa1c:	46bd      	mov	sp, r7
 801aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa22:	4770      	bx	lr
 801aa24:	e000ed00 	.word	0xe000ed00

0801aa28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801aa28:	b480      	push	{r7}
 801aa2a:	b083      	sub	sp, #12
 801aa2c:	af00      	add	r7, sp, #0
 801aa2e:	4603      	mov	r3, r0
 801aa30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801aa32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801aa36:	2b00      	cmp	r3, #0
 801aa38:	db0b      	blt.n	801aa52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801aa3a:	79fb      	ldrb	r3, [r7, #7]
 801aa3c:	f003 021f 	and.w	r2, r3, #31
 801aa40:	4907      	ldr	r1, [pc, #28]	@ (801aa60 <__NVIC_EnableIRQ+0x38>)
 801aa42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801aa46:	095b      	lsrs	r3, r3, #5
 801aa48:	2001      	movs	r0, #1
 801aa4a:	fa00 f202 	lsl.w	r2, r0, r2
 801aa4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 801aa52:	bf00      	nop
 801aa54:	370c      	adds	r7, #12
 801aa56:	46bd      	mov	sp, r7
 801aa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa5c:	4770      	bx	lr
 801aa5e:	bf00      	nop
 801aa60:	e000e100 	.word	0xe000e100

0801aa64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801aa64:	b480      	push	{r7}
 801aa66:	b083      	sub	sp, #12
 801aa68:	af00      	add	r7, sp, #0
 801aa6a:	4603      	mov	r3, r0
 801aa6c:	6039      	str	r1, [r7, #0]
 801aa6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801aa70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801aa74:	2b00      	cmp	r3, #0
 801aa76:	db0a      	blt.n	801aa8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801aa78:	683b      	ldr	r3, [r7, #0]
 801aa7a:	b2da      	uxtb	r2, r3
 801aa7c:	490c      	ldr	r1, [pc, #48]	@ (801aab0 <__NVIC_SetPriority+0x4c>)
 801aa7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801aa82:	0112      	lsls	r2, r2, #4
 801aa84:	b2d2      	uxtb	r2, r2
 801aa86:	440b      	add	r3, r1
 801aa88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801aa8c:	e00a      	b.n	801aaa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801aa8e:	683b      	ldr	r3, [r7, #0]
 801aa90:	b2da      	uxtb	r2, r3
 801aa92:	4908      	ldr	r1, [pc, #32]	@ (801aab4 <__NVIC_SetPriority+0x50>)
 801aa94:	79fb      	ldrb	r3, [r7, #7]
 801aa96:	f003 030f 	and.w	r3, r3, #15
 801aa9a:	3b04      	subs	r3, #4
 801aa9c:	0112      	lsls	r2, r2, #4
 801aa9e:	b2d2      	uxtb	r2, r2
 801aaa0:	440b      	add	r3, r1
 801aaa2:	761a      	strb	r2, [r3, #24]
}
 801aaa4:	bf00      	nop
 801aaa6:	370c      	adds	r7, #12
 801aaa8:	46bd      	mov	sp, r7
 801aaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aaae:	4770      	bx	lr
 801aab0:	e000e100 	.word	0xe000e100
 801aab4:	e000ed00 	.word	0xe000ed00

0801aab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801aab8:	b480      	push	{r7}
 801aaba:	b089      	sub	sp, #36	@ 0x24
 801aabc:	af00      	add	r7, sp, #0
 801aabe:	60f8      	str	r0, [r7, #12]
 801aac0:	60b9      	str	r1, [r7, #8]
 801aac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801aac4:	68fb      	ldr	r3, [r7, #12]
 801aac6:	f003 0307 	and.w	r3, r3, #7
 801aaca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801aacc:	69fb      	ldr	r3, [r7, #28]
 801aace:	f1c3 0307 	rsb	r3, r3, #7
 801aad2:	2b04      	cmp	r3, #4
 801aad4:	bf28      	it	cs
 801aad6:	2304      	movcs	r3, #4
 801aad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801aada:	69fb      	ldr	r3, [r7, #28]
 801aadc:	3304      	adds	r3, #4
 801aade:	2b06      	cmp	r3, #6
 801aae0:	d902      	bls.n	801aae8 <NVIC_EncodePriority+0x30>
 801aae2:	69fb      	ldr	r3, [r7, #28]
 801aae4:	3b03      	subs	r3, #3
 801aae6:	e000      	b.n	801aaea <NVIC_EncodePriority+0x32>
 801aae8:	2300      	movs	r3, #0
 801aaea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801aaec:	f04f 32ff 	mov.w	r2, #4294967295
 801aaf0:	69bb      	ldr	r3, [r7, #24]
 801aaf2:	fa02 f303 	lsl.w	r3, r2, r3
 801aaf6:	43da      	mvns	r2, r3
 801aaf8:	68bb      	ldr	r3, [r7, #8]
 801aafa:	401a      	ands	r2, r3
 801aafc:	697b      	ldr	r3, [r7, #20]
 801aafe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801ab00:	f04f 31ff 	mov.w	r1, #4294967295
 801ab04:	697b      	ldr	r3, [r7, #20]
 801ab06:	fa01 f303 	lsl.w	r3, r1, r3
 801ab0a:	43d9      	mvns	r1, r3
 801ab0c:	687b      	ldr	r3, [r7, #4]
 801ab0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801ab10:	4313      	orrs	r3, r2
         );
}
 801ab12:	4618      	mov	r0, r3
 801ab14:	3724      	adds	r7, #36	@ 0x24
 801ab16:	46bd      	mov	sp, r7
 801ab18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab1c:	4770      	bx	lr
	...

0801ab20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801ab20:	b580      	push	{r7, lr}
 801ab22:	b082      	sub	sp, #8
 801ab24:	af00      	add	r7, sp, #0
 801ab26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801ab28:	687b      	ldr	r3, [r7, #4]
 801ab2a:	3b01      	subs	r3, #1
 801ab2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801ab30:	d301      	bcc.n	801ab36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801ab32:	2301      	movs	r3, #1
 801ab34:	e00f      	b.n	801ab56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801ab36:	4a0a      	ldr	r2, [pc, #40]	@ (801ab60 <SysTick_Config+0x40>)
 801ab38:	687b      	ldr	r3, [r7, #4]
 801ab3a:	3b01      	subs	r3, #1
 801ab3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801ab3e:	210f      	movs	r1, #15
 801ab40:	f04f 30ff 	mov.w	r0, #4294967295
 801ab44:	f7ff ff8e 	bl	801aa64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801ab48:	4b05      	ldr	r3, [pc, #20]	@ (801ab60 <SysTick_Config+0x40>)
 801ab4a:	2200      	movs	r2, #0
 801ab4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801ab4e:	4b04      	ldr	r3, [pc, #16]	@ (801ab60 <SysTick_Config+0x40>)
 801ab50:	2207      	movs	r2, #7
 801ab52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801ab54:	2300      	movs	r3, #0
}
 801ab56:	4618      	mov	r0, r3
 801ab58:	3708      	adds	r7, #8
 801ab5a:	46bd      	mov	sp, r7
 801ab5c:	bd80      	pop	{r7, pc}
 801ab5e:	bf00      	nop
 801ab60:	e000e010 	.word	0xe000e010

0801ab64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801ab64:	b580      	push	{r7, lr}
 801ab66:	b082      	sub	sp, #8
 801ab68:	af00      	add	r7, sp, #0
 801ab6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801ab6c:	6878      	ldr	r0, [r7, #4]
 801ab6e:	f7ff ff29 	bl	801a9c4 <__NVIC_SetPriorityGrouping>
}
 801ab72:	bf00      	nop
 801ab74:	3708      	adds	r7, #8
 801ab76:	46bd      	mov	sp, r7
 801ab78:	bd80      	pop	{r7, pc}

0801ab7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801ab7a:	b580      	push	{r7, lr}
 801ab7c:	b086      	sub	sp, #24
 801ab7e:	af00      	add	r7, sp, #0
 801ab80:	4603      	mov	r3, r0
 801ab82:	60b9      	str	r1, [r7, #8]
 801ab84:	607a      	str	r2, [r7, #4]
 801ab86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 801ab88:	2300      	movs	r3, #0
 801ab8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 801ab8c:	f7ff ff3e 	bl	801aa0c <__NVIC_GetPriorityGrouping>
 801ab90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801ab92:	687a      	ldr	r2, [r7, #4]
 801ab94:	68b9      	ldr	r1, [r7, #8]
 801ab96:	6978      	ldr	r0, [r7, #20]
 801ab98:	f7ff ff8e 	bl	801aab8 <NVIC_EncodePriority>
 801ab9c:	4602      	mov	r2, r0
 801ab9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aba2:	4611      	mov	r1, r2
 801aba4:	4618      	mov	r0, r3
 801aba6:	f7ff ff5d 	bl	801aa64 <__NVIC_SetPriority>
}
 801abaa:	bf00      	nop
 801abac:	3718      	adds	r7, #24
 801abae:	46bd      	mov	sp, r7
 801abb0:	bd80      	pop	{r7, pc}

0801abb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801abb2:	b580      	push	{r7, lr}
 801abb4:	b082      	sub	sp, #8
 801abb6:	af00      	add	r7, sp, #0
 801abb8:	4603      	mov	r3, r0
 801abba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801abbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801abc0:	4618      	mov	r0, r3
 801abc2:	f7ff ff31 	bl	801aa28 <__NVIC_EnableIRQ>
}
 801abc6:	bf00      	nop
 801abc8:	3708      	adds	r7, #8
 801abca:	46bd      	mov	sp, r7
 801abcc:	bd80      	pop	{r7, pc}

0801abce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801abce:	b580      	push	{r7, lr}
 801abd0:	b082      	sub	sp, #8
 801abd2:	af00      	add	r7, sp, #0
 801abd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801abd6:	6878      	ldr	r0, [r7, #4]
 801abd8:	f7ff ffa2 	bl	801ab20 <SysTick_Config>
 801abdc:	4603      	mov	r3, r0
}
 801abde:	4618      	mov	r0, r3
 801abe0:	3708      	adds	r7, #8
 801abe2:	46bd      	mov	sp, r7
 801abe4:	bd80      	pop	{r7, pc}

0801abe6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801abe6:	b480      	push	{r7}
 801abe8:	b085      	sub	sp, #20
 801abea:	af00      	add	r7, sp, #0
 801abec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801abee:	2300      	movs	r3, #0
 801abf0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 801abf2:	687b      	ldr	r3, [r7, #4]
 801abf4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 801abf8:	b2db      	uxtb	r3, r3
 801abfa:	2b02      	cmp	r3, #2
 801abfc:	d008      	beq.n	801ac10 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801abfe:	687b      	ldr	r3, [r7, #4]
 801ac00:	2204      	movs	r2, #4
 801ac02:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801ac04:	687b      	ldr	r3, [r7, #4]
 801ac06:	2200      	movs	r2, #0
 801ac08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 801ac0c:	2301      	movs	r3, #1
 801ac0e:	e022      	b.n	801ac56 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801ac10:	687b      	ldr	r3, [r7, #4]
 801ac12:	681b      	ldr	r3, [r3, #0]
 801ac14:	681a      	ldr	r2, [r3, #0]
 801ac16:	687b      	ldr	r3, [r7, #4]
 801ac18:	681b      	ldr	r3, [r3, #0]
 801ac1a:	f022 020e 	bic.w	r2, r2, #14
 801ac1e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 801ac20:	687b      	ldr	r3, [r7, #4]
 801ac22:	681b      	ldr	r3, [r3, #0]
 801ac24:	681a      	ldr	r2, [r3, #0]
 801ac26:	687b      	ldr	r3, [r7, #4]
 801ac28:	681b      	ldr	r3, [r3, #0]
 801ac2a:	f022 0201 	bic.w	r2, r2, #1
 801ac2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 801ac30:	687b      	ldr	r3, [r7, #4]
 801ac32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ac34:	f003 021c 	and.w	r2, r3, #28
 801ac38:	687b      	ldr	r3, [r7, #4]
 801ac3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ac3c:	2101      	movs	r1, #1
 801ac3e:	fa01 f202 	lsl.w	r2, r1, r2
 801ac42:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801ac44:	687b      	ldr	r3, [r7, #4]
 801ac46:	2201      	movs	r2, #1
 801ac48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801ac4c:	687b      	ldr	r3, [r7, #4]
 801ac4e:	2200      	movs	r2, #0
 801ac50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 801ac54:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 801ac56:	4618      	mov	r0, r3
 801ac58:	3714      	adds	r7, #20
 801ac5a:	46bd      	mov	sp, r7
 801ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac60:	4770      	bx	lr

0801ac62 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801ac62:	b580      	push	{r7, lr}
 801ac64:	b084      	sub	sp, #16
 801ac66:	af00      	add	r7, sp, #0
 801ac68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801ac6a:	2300      	movs	r3, #0
 801ac6c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 801ac6e:	687b      	ldr	r3, [r7, #4]
 801ac70:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 801ac74:	b2db      	uxtb	r3, r3
 801ac76:	2b02      	cmp	r3, #2
 801ac78:	d005      	beq.n	801ac86 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801ac7a:	687b      	ldr	r3, [r7, #4]
 801ac7c:	2204      	movs	r2, #4
 801ac7e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 801ac80:	2301      	movs	r3, #1
 801ac82:	73fb      	strb	r3, [r7, #15]
 801ac84:	e029      	b.n	801acda <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801ac86:	687b      	ldr	r3, [r7, #4]
 801ac88:	681b      	ldr	r3, [r3, #0]
 801ac8a:	681a      	ldr	r2, [r3, #0]
 801ac8c:	687b      	ldr	r3, [r7, #4]
 801ac8e:	681b      	ldr	r3, [r3, #0]
 801ac90:	f022 020e 	bic.w	r2, r2, #14
 801ac94:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 801ac96:	687b      	ldr	r3, [r7, #4]
 801ac98:	681b      	ldr	r3, [r3, #0]
 801ac9a:	681a      	ldr	r2, [r3, #0]
 801ac9c:	687b      	ldr	r3, [r7, #4]
 801ac9e:	681b      	ldr	r3, [r3, #0]
 801aca0:	f022 0201 	bic.w	r2, r2, #1
 801aca4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 801aca6:	687b      	ldr	r3, [r7, #4]
 801aca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801acaa:	f003 021c 	and.w	r2, r3, #28
 801acae:	687b      	ldr	r3, [r7, #4]
 801acb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801acb2:	2101      	movs	r1, #1
 801acb4:	fa01 f202 	lsl.w	r2, r1, r2
 801acb8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801acba:	687b      	ldr	r3, [r7, #4]
 801acbc:	2201      	movs	r2, #1
 801acbe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801acc2:	687b      	ldr	r3, [r7, #4]
 801acc4:	2200      	movs	r2, #0
 801acc6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 801acca:	687b      	ldr	r3, [r7, #4]
 801accc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801acce:	2b00      	cmp	r3, #0
 801acd0:	d003      	beq.n	801acda <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 801acd2:	687b      	ldr	r3, [r7, #4]
 801acd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801acd6:	6878      	ldr	r0, [r7, #4]
 801acd8:	4798      	blx	r3
    }
  }
  return status;
 801acda:	7bfb      	ldrb	r3, [r7, #15]
}
 801acdc:	4618      	mov	r0, r3
 801acde:	3710      	adds	r7, #16
 801ace0:	46bd      	mov	sp, r7
 801ace2:	bd80      	pop	{r7, pc}

0801ace4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801ace4:	b480      	push	{r7}
 801ace6:	b087      	sub	sp, #28
 801ace8:	af00      	add	r7, sp, #0
 801acea:	6078      	str	r0, [r7, #4]
 801acec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 801acee:	2300      	movs	r3, #0
 801acf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 801acf2:	e154      	b.n	801af9e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 801acf4:	683b      	ldr	r3, [r7, #0]
 801acf6:	681a      	ldr	r2, [r3, #0]
 801acf8:	2101      	movs	r1, #1
 801acfa:	697b      	ldr	r3, [r7, #20]
 801acfc:	fa01 f303 	lsl.w	r3, r1, r3
 801ad00:	4013      	ands	r3, r2
 801ad02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 801ad04:	68fb      	ldr	r3, [r7, #12]
 801ad06:	2b00      	cmp	r3, #0
 801ad08:	f000 8146 	beq.w	801af98 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801ad0c:	683b      	ldr	r3, [r7, #0]
 801ad0e:	685b      	ldr	r3, [r3, #4]
 801ad10:	f003 0303 	and.w	r3, r3, #3
 801ad14:	2b01      	cmp	r3, #1
 801ad16:	d005      	beq.n	801ad24 <HAL_GPIO_Init+0x40>
 801ad18:	683b      	ldr	r3, [r7, #0]
 801ad1a:	685b      	ldr	r3, [r3, #4]
 801ad1c:	f003 0303 	and.w	r3, r3, #3
 801ad20:	2b02      	cmp	r3, #2
 801ad22:	d130      	bne.n	801ad86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801ad24:	687b      	ldr	r3, [r7, #4]
 801ad26:	689b      	ldr	r3, [r3, #8]
 801ad28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 801ad2a:	697b      	ldr	r3, [r7, #20]
 801ad2c:	005b      	lsls	r3, r3, #1
 801ad2e:	2203      	movs	r2, #3
 801ad30:	fa02 f303 	lsl.w	r3, r2, r3
 801ad34:	43db      	mvns	r3, r3
 801ad36:	693a      	ldr	r2, [r7, #16]
 801ad38:	4013      	ands	r3, r2
 801ad3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 801ad3c:	683b      	ldr	r3, [r7, #0]
 801ad3e:	68da      	ldr	r2, [r3, #12]
 801ad40:	697b      	ldr	r3, [r7, #20]
 801ad42:	005b      	lsls	r3, r3, #1
 801ad44:	fa02 f303 	lsl.w	r3, r2, r3
 801ad48:	693a      	ldr	r2, [r7, #16]
 801ad4a:	4313      	orrs	r3, r2
 801ad4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 801ad4e:	687b      	ldr	r3, [r7, #4]
 801ad50:	693a      	ldr	r2, [r7, #16]
 801ad52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801ad54:	687b      	ldr	r3, [r7, #4]
 801ad56:	685b      	ldr	r3, [r3, #4]
 801ad58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801ad5a:	2201      	movs	r2, #1
 801ad5c:	697b      	ldr	r3, [r7, #20]
 801ad5e:	fa02 f303 	lsl.w	r3, r2, r3
 801ad62:	43db      	mvns	r3, r3
 801ad64:	693a      	ldr	r2, [r7, #16]
 801ad66:	4013      	ands	r3, r2
 801ad68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801ad6a:	683b      	ldr	r3, [r7, #0]
 801ad6c:	685b      	ldr	r3, [r3, #4]
 801ad6e:	091b      	lsrs	r3, r3, #4
 801ad70:	f003 0201 	and.w	r2, r3, #1
 801ad74:	697b      	ldr	r3, [r7, #20]
 801ad76:	fa02 f303 	lsl.w	r3, r2, r3
 801ad7a:	693a      	ldr	r2, [r7, #16]
 801ad7c:	4313      	orrs	r3, r2
 801ad7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 801ad80:	687b      	ldr	r3, [r7, #4]
 801ad82:	693a      	ldr	r2, [r7, #16]
 801ad84:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801ad86:	683b      	ldr	r3, [r7, #0]
 801ad88:	685b      	ldr	r3, [r3, #4]
 801ad8a:	f003 0303 	and.w	r3, r3, #3
 801ad8e:	2b03      	cmp	r3, #3
 801ad90:	d017      	beq.n	801adc2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 801ad92:	687b      	ldr	r3, [r7, #4]
 801ad94:	68db      	ldr	r3, [r3, #12]
 801ad96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801ad98:	697b      	ldr	r3, [r7, #20]
 801ad9a:	005b      	lsls	r3, r3, #1
 801ad9c:	2203      	movs	r2, #3
 801ad9e:	fa02 f303 	lsl.w	r3, r2, r3
 801ada2:	43db      	mvns	r3, r3
 801ada4:	693a      	ldr	r2, [r7, #16]
 801ada6:	4013      	ands	r3, r2
 801ada8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801adaa:	683b      	ldr	r3, [r7, #0]
 801adac:	689a      	ldr	r2, [r3, #8]
 801adae:	697b      	ldr	r3, [r7, #20]
 801adb0:	005b      	lsls	r3, r3, #1
 801adb2:	fa02 f303 	lsl.w	r3, r2, r3
 801adb6:	693a      	ldr	r2, [r7, #16]
 801adb8:	4313      	orrs	r3, r2
 801adba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 801adbc:	687b      	ldr	r3, [r7, #4]
 801adbe:	693a      	ldr	r2, [r7, #16]
 801adc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801adc2:	683b      	ldr	r3, [r7, #0]
 801adc4:	685b      	ldr	r3, [r3, #4]
 801adc6:	f003 0303 	and.w	r3, r3, #3
 801adca:	2b02      	cmp	r3, #2
 801adcc:	d123      	bne.n	801ae16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 801adce:	697b      	ldr	r3, [r7, #20]
 801add0:	08da      	lsrs	r2, r3, #3
 801add2:	687b      	ldr	r3, [r7, #4]
 801add4:	3208      	adds	r2, #8
 801add6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801adda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 801addc:	697b      	ldr	r3, [r7, #20]
 801adde:	f003 0307 	and.w	r3, r3, #7
 801ade2:	009b      	lsls	r3, r3, #2
 801ade4:	220f      	movs	r2, #15
 801ade6:	fa02 f303 	lsl.w	r3, r2, r3
 801adea:	43db      	mvns	r3, r3
 801adec:	693a      	ldr	r2, [r7, #16]
 801adee:	4013      	ands	r3, r2
 801adf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 801adf2:	683b      	ldr	r3, [r7, #0]
 801adf4:	691a      	ldr	r2, [r3, #16]
 801adf6:	697b      	ldr	r3, [r7, #20]
 801adf8:	f003 0307 	and.w	r3, r3, #7
 801adfc:	009b      	lsls	r3, r3, #2
 801adfe:	fa02 f303 	lsl.w	r3, r2, r3
 801ae02:	693a      	ldr	r2, [r7, #16]
 801ae04:	4313      	orrs	r3, r2
 801ae06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 801ae08:	697b      	ldr	r3, [r7, #20]
 801ae0a:	08da      	lsrs	r2, r3, #3
 801ae0c:	687b      	ldr	r3, [r7, #4]
 801ae0e:	3208      	adds	r2, #8
 801ae10:	6939      	ldr	r1, [r7, #16]
 801ae12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801ae16:	687b      	ldr	r3, [r7, #4]
 801ae18:	681b      	ldr	r3, [r3, #0]
 801ae1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 801ae1c:	697b      	ldr	r3, [r7, #20]
 801ae1e:	005b      	lsls	r3, r3, #1
 801ae20:	2203      	movs	r2, #3
 801ae22:	fa02 f303 	lsl.w	r3, r2, r3
 801ae26:	43db      	mvns	r3, r3
 801ae28:	693a      	ldr	r2, [r7, #16]
 801ae2a:	4013      	ands	r3, r2
 801ae2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 801ae2e:	683b      	ldr	r3, [r7, #0]
 801ae30:	685b      	ldr	r3, [r3, #4]
 801ae32:	f003 0203 	and.w	r2, r3, #3
 801ae36:	697b      	ldr	r3, [r7, #20]
 801ae38:	005b      	lsls	r3, r3, #1
 801ae3a:	fa02 f303 	lsl.w	r3, r2, r3
 801ae3e:	693a      	ldr	r2, [r7, #16]
 801ae40:	4313      	orrs	r3, r2
 801ae42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 801ae44:	687b      	ldr	r3, [r7, #4]
 801ae46:	693a      	ldr	r2, [r7, #16]
 801ae48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 801ae4a:	683b      	ldr	r3, [r7, #0]
 801ae4c:	685b      	ldr	r3, [r3, #4]
 801ae4e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801ae52:	2b00      	cmp	r3, #0
 801ae54:	f000 80a0 	beq.w	801af98 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801ae58:	4b58      	ldr	r3, [pc, #352]	@ (801afbc <HAL_GPIO_Init+0x2d8>)
 801ae5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ae5c:	4a57      	ldr	r2, [pc, #348]	@ (801afbc <HAL_GPIO_Init+0x2d8>)
 801ae5e:	f043 0301 	orr.w	r3, r3, #1
 801ae62:	6613      	str	r3, [r2, #96]	@ 0x60
 801ae64:	4b55      	ldr	r3, [pc, #340]	@ (801afbc <HAL_GPIO_Init+0x2d8>)
 801ae66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ae68:	f003 0301 	and.w	r3, r3, #1
 801ae6c:	60bb      	str	r3, [r7, #8]
 801ae6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 801ae70:	4a53      	ldr	r2, [pc, #332]	@ (801afc0 <HAL_GPIO_Init+0x2dc>)
 801ae72:	697b      	ldr	r3, [r7, #20]
 801ae74:	089b      	lsrs	r3, r3, #2
 801ae76:	3302      	adds	r3, #2
 801ae78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ae7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 801ae7e:	697b      	ldr	r3, [r7, #20]
 801ae80:	f003 0303 	and.w	r3, r3, #3
 801ae84:	009b      	lsls	r3, r3, #2
 801ae86:	220f      	movs	r2, #15
 801ae88:	fa02 f303 	lsl.w	r3, r2, r3
 801ae8c:	43db      	mvns	r3, r3
 801ae8e:	693a      	ldr	r2, [r7, #16]
 801ae90:	4013      	ands	r3, r2
 801ae92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 801ae94:	687b      	ldr	r3, [r7, #4]
 801ae96:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 801ae9a:	d019      	beq.n	801aed0 <HAL_GPIO_Init+0x1ec>
 801ae9c:	687b      	ldr	r3, [r7, #4]
 801ae9e:	4a49      	ldr	r2, [pc, #292]	@ (801afc4 <HAL_GPIO_Init+0x2e0>)
 801aea0:	4293      	cmp	r3, r2
 801aea2:	d013      	beq.n	801aecc <HAL_GPIO_Init+0x1e8>
 801aea4:	687b      	ldr	r3, [r7, #4]
 801aea6:	4a48      	ldr	r2, [pc, #288]	@ (801afc8 <HAL_GPIO_Init+0x2e4>)
 801aea8:	4293      	cmp	r3, r2
 801aeaa:	d00d      	beq.n	801aec8 <HAL_GPIO_Init+0x1e4>
 801aeac:	687b      	ldr	r3, [r7, #4]
 801aeae:	4a47      	ldr	r2, [pc, #284]	@ (801afcc <HAL_GPIO_Init+0x2e8>)
 801aeb0:	4293      	cmp	r3, r2
 801aeb2:	d007      	beq.n	801aec4 <HAL_GPIO_Init+0x1e0>
 801aeb4:	687b      	ldr	r3, [r7, #4]
 801aeb6:	4a46      	ldr	r2, [pc, #280]	@ (801afd0 <HAL_GPIO_Init+0x2ec>)
 801aeb8:	4293      	cmp	r3, r2
 801aeba:	d101      	bne.n	801aec0 <HAL_GPIO_Init+0x1dc>
 801aebc:	2304      	movs	r3, #4
 801aebe:	e008      	b.n	801aed2 <HAL_GPIO_Init+0x1ee>
 801aec0:	2307      	movs	r3, #7
 801aec2:	e006      	b.n	801aed2 <HAL_GPIO_Init+0x1ee>
 801aec4:	2303      	movs	r3, #3
 801aec6:	e004      	b.n	801aed2 <HAL_GPIO_Init+0x1ee>
 801aec8:	2302      	movs	r3, #2
 801aeca:	e002      	b.n	801aed2 <HAL_GPIO_Init+0x1ee>
 801aecc:	2301      	movs	r3, #1
 801aece:	e000      	b.n	801aed2 <HAL_GPIO_Init+0x1ee>
 801aed0:	2300      	movs	r3, #0
 801aed2:	697a      	ldr	r2, [r7, #20]
 801aed4:	f002 0203 	and.w	r2, r2, #3
 801aed8:	0092      	lsls	r2, r2, #2
 801aeda:	4093      	lsls	r3, r2
 801aedc:	693a      	ldr	r2, [r7, #16]
 801aede:	4313      	orrs	r3, r2
 801aee0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 801aee2:	4937      	ldr	r1, [pc, #220]	@ (801afc0 <HAL_GPIO_Init+0x2dc>)
 801aee4:	697b      	ldr	r3, [r7, #20]
 801aee6:	089b      	lsrs	r3, r3, #2
 801aee8:	3302      	adds	r3, #2
 801aeea:	693a      	ldr	r2, [r7, #16]
 801aeec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801aef0:	4b38      	ldr	r3, [pc, #224]	@ (801afd4 <HAL_GPIO_Init+0x2f0>)
 801aef2:	689b      	ldr	r3, [r3, #8]
 801aef4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801aef6:	68fb      	ldr	r3, [r7, #12]
 801aef8:	43db      	mvns	r3, r3
 801aefa:	693a      	ldr	r2, [r7, #16]
 801aefc:	4013      	ands	r3, r2
 801aefe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 801af00:	683b      	ldr	r3, [r7, #0]
 801af02:	685b      	ldr	r3, [r3, #4]
 801af04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801af08:	2b00      	cmp	r3, #0
 801af0a:	d003      	beq.n	801af14 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 801af0c:	693a      	ldr	r2, [r7, #16]
 801af0e:	68fb      	ldr	r3, [r7, #12]
 801af10:	4313      	orrs	r3, r2
 801af12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 801af14:	4a2f      	ldr	r2, [pc, #188]	@ (801afd4 <HAL_GPIO_Init+0x2f0>)
 801af16:	693b      	ldr	r3, [r7, #16]
 801af18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 801af1a:	4b2e      	ldr	r3, [pc, #184]	@ (801afd4 <HAL_GPIO_Init+0x2f0>)
 801af1c:	68db      	ldr	r3, [r3, #12]
 801af1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801af20:	68fb      	ldr	r3, [r7, #12]
 801af22:	43db      	mvns	r3, r3
 801af24:	693a      	ldr	r2, [r7, #16]
 801af26:	4013      	ands	r3, r2
 801af28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 801af2a:	683b      	ldr	r3, [r7, #0]
 801af2c:	685b      	ldr	r3, [r3, #4]
 801af2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801af32:	2b00      	cmp	r3, #0
 801af34:	d003      	beq.n	801af3e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 801af36:	693a      	ldr	r2, [r7, #16]
 801af38:	68fb      	ldr	r3, [r7, #12]
 801af3a:	4313      	orrs	r3, r2
 801af3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 801af3e:	4a25      	ldr	r2, [pc, #148]	@ (801afd4 <HAL_GPIO_Init+0x2f0>)
 801af40:	693b      	ldr	r3, [r7, #16]
 801af42:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 801af44:	4b23      	ldr	r3, [pc, #140]	@ (801afd4 <HAL_GPIO_Init+0x2f0>)
 801af46:	685b      	ldr	r3, [r3, #4]
 801af48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801af4a:	68fb      	ldr	r3, [r7, #12]
 801af4c:	43db      	mvns	r3, r3
 801af4e:	693a      	ldr	r2, [r7, #16]
 801af50:	4013      	ands	r3, r2
 801af52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 801af54:	683b      	ldr	r3, [r7, #0]
 801af56:	685b      	ldr	r3, [r3, #4]
 801af58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801af5c:	2b00      	cmp	r3, #0
 801af5e:	d003      	beq.n	801af68 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 801af60:	693a      	ldr	r2, [r7, #16]
 801af62:	68fb      	ldr	r3, [r7, #12]
 801af64:	4313      	orrs	r3, r2
 801af66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 801af68:	4a1a      	ldr	r2, [pc, #104]	@ (801afd4 <HAL_GPIO_Init+0x2f0>)
 801af6a:	693b      	ldr	r3, [r7, #16]
 801af6c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 801af6e:	4b19      	ldr	r3, [pc, #100]	@ (801afd4 <HAL_GPIO_Init+0x2f0>)
 801af70:	681b      	ldr	r3, [r3, #0]
 801af72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801af74:	68fb      	ldr	r3, [r7, #12]
 801af76:	43db      	mvns	r3, r3
 801af78:	693a      	ldr	r2, [r7, #16]
 801af7a:	4013      	ands	r3, r2
 801af7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 801af7e:	683b      	ldr	r3, [r7, #0]
 801af80:	685b      	ldr	r3, [r3, #4]
 801af82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801af86:	2b00      	cmp	r3, #0
 801af88:	d003      	beq.n	801af92 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 801af8a:	693a      	ldr	r2, [r7, #16]
 801af8c:	68fb      	ldr	r3, [r7, #12]
 801af8e:	4313      	orrs	r3, r2
 801af90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 801af92:	4a10      	ldr	r2, [pc, #64]	@ (801afd4 <HAL_GPIO_Init+0x2f0>)
 801af94:	693b      	ldr	r3, [r7, #16]
 801af96:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 801af98:	697b      	ldr	r3, [r7, #20]
 801af9a:	3301      	adds	r3, #1
 801af9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 801af9e:	683b      	ldr	r3, [r7, #0]
 801afa0:	681a      	ldr	r2, [r3, #0]
 801afa2:	697b      	ldr	r3, [r7, #20]
 801afa4:	fa22 f303 	lsr.w	r3, r2, r3
 801afa8:	2b00      	cmp	r3, #0
 801afaa:	f47f aea3 	bne.w	801acf4 <HAL_GPIO_Init+0x10>
  }
}
 801afae:	bf00      	nop
 801afb0:	bf00      	nop
 801afb2:	371c      	adds	r7, #28
 801afb4:	46bd      	mov	sp, r7
 801afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afba:	4770      	bx	lr
 801afbc:	40021000 	.word	0x40021000
 801afc0:	40010000 	.word	0x40010000
 801afc4:	48000400 	.word	0x48000400
 801afc8:	48000800 	.word	0x48000800
 801afcc:	48000c00 	.word	0x48000c00
 801afd0:	48001000 	.word	0x48001000
 801afd4:	40010400 	.word	0x40010400

0801afd8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 801afd8:	b480      	push	{r7}
 801afda:	b087      	sub	sp, #28
 801afdc:	af00      	add	r7, sp, #0
 801afde:	6078      	str	r0, [r7, #4]
 801afe0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 801afe2:	2300      	movs	r3, #0
 801afe4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 801afe6:	e0b7      	b.n	801b158 <HAL_GPIO_DeInit+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 801afe8:	2201      	movs	r2, #1
 801afea:	697b      	ldr	r3, [r7, #20]
 801afec:	fa02 f303 	lsl.w	r3, r2, r3
 801aff0:	683a      	ldr	r2, [r7, #0]
 801aff2:	4013      	ands	r3, r2
 801aff4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 801aff6:	693b      	ldr	r3, [r7, #16]
 801aff8:	2b00      	cmp	r3, #0
 801affa:	f000 80aa 	beq.w	801b152 <HAL_GPIO_DeInit+0x17a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 801affe:	4a5d      	ldr	r2, [pc, #372]	@ (801b174 <HAL_GPIO_DeInit+0x19c>)
 801b000:	697b      	ldr	r3, [r7, #20]
 801b002:	089b      	lsrs	r3, r3, #2
 801b004:	3302      	adds	r3, #2
 801b006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b00a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 801b00c:	697b      	ldr	r3, [r7, #20]
 801b00e:	f003 0303 	and.w	r3, r3, #3
 801b012:	009b      	lsls	r3, r3, #2
 801b014:	220f      	movs	r2, #15
 801b016:	fa02 f303 	lsl.w	r3, r2, r3
 801b01a:	68fa      	ldr	r2, [r7, #12]
 801b01c:	4013      	ands	r3, r2
 801b01e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 801b020:	687b      	ldr	r3, [r7, #4]
 801b022:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 801b026:	d019      	beq.n	801b05c <HAL_GPIO_DeInit+0x84>
 801b028:	687b      	ldr	r3, [r7, #4]
 801b02a:	4a53      	ldr	r2, [pc, #332]	@ (801b178 <HAL_GPIO_DeInit+0x1a0>)
 801b02c:	4293      	cmp	r3, r2
 801b02e:	d013      	beq.n	801b058 <HAL_GPIO_DeInit+0x80>
 801b030:	687b      	ldr	r3, [r7, #4]
 801b032:	4a52      	ldr	r2, [pc, #328]	@ (801b17c <HAL_GPIO_DeInit+0x1a4>)
 801b034:	4293      	cmp	r3, r2
 801b036:	d00d      	beq.n	801b054 <HAL_GPIO_DeInit+0x7c>
 801b038:	687b      	ldr	r3, [r7, #4]
 801b03a:	4a51      	ldr	r2, [pc, #324]	@ (801b180 <HAL_GPIO_DeInit+0x1a8>)
 801b03c:	4293      	cmp	r3, r2
 801b03e:	d007      	beq.n	801b050 <HAL_GPIO_DeInit+0x78>
 801b040:	687b      	ldr	r3, [r7, #4]
 801b042:	4a50      	ldr	r2, [pc, #320]	@ (801b184 <HAL_GPIO_DeInit+0x1ac>)
 801b044:	4293      	cmp	r3, r2
 801b046:	d101      	bne.n	801b04c <HAL_GPIO_DeInit+0x74>
 801b048:	2304      	movs	r3, #4
 801b04a:	e008      	b.n	801b05e <HAL_GPIO_DeInit+0x86>
 801b04c:	2307      	movs	r3, #7
 801b04e:	e006      	b.n	801b05e <HAL_GPIO_DeInit+0x86>
 801b050:	2303      	movs	r3, #3
 801b052:	e004      	b.n	801b05e <HAL_GPIO_DeInit+0x86>
 801b054:	2302      	movs	r3, #2
 801b056:	e002      	b.n	801b05e <HAL_GPIO_DeInit+0x86>
 801b058:	2301      	movs	r3, #1
 801b05a:	e000      	b.n	801b05e <HAL_GPIO_DeInit+0x86>
 801b05c:	2300      	movs	r3, #0
 801b05e:	697a      	ldr	r2, [r7, #20]
 801b060:	f002 0203 	and.w	r2, r2, #3
 801b064:	0092      	lsls	r2, r2, #2
 801b066:	4093      	lsls	r3, r2
 801b068:	68fa      	ldr	r2, [r7, #12]
 801b06a:	429a      	cmp	r2, r3
 801b06c:	d132      	bne.n	801b0d4 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 801b06e:	4b46      	ldr	r3, [pc, #280]	@ (801b188 <HAL_GPIO_DeInit+0x1b0>)
 801b070:	681a      	ldr	r2, [r3, #0]
 801b072:	693b      	ldr	r3, [r7, #16]
 801b074:	43db      	mvns	r3, r3
 801b076:	4944      	ldr	r1, [pc, #272]	@ (801b188 <HAL_GPIO_DeInit+0x1b0>)
 801b078:	4013      	ands	r3, r2
 801b07a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 801b07c:	4b42      	ldr	r3, [pc, #264]	@ (801b188 <HAL_GPIO_DeInit+0x1b0>)
 801b07e:	685a      	ldr	r2, [r3, #4]
 801b080:	693b      	ldr	r3, [r7, #16]
 801b082:	43db      	mvns	r3, r3
 801b084:	4940      	ldr	r1, [pc, #256]	@ (801b188 <HAL_GPIO_DeInit+0x1b0>)
 801b086:	4013      	ands	r3, r2
 801b088:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 801b08a:	4b3f      	ldr	r3, [pc, #252]	@ (801b188 <HAL_GPIO_DeInit+0x1b0>)
 801b08c:	68da      	ldr	r2, [r3, #12]
 801b08e:	693b      	ldr	r3, [r7, #16]
 801b090:	43db      	mvns	r3, r3
 801b092:	493d      	ldr	r1, [pc, #244]	@ (801b188 <HAL_GPIO_DeInit+0x1b0>)
 801b094:	4013      	ands	r3, r2
 801b096:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 801b098:	4b3b      	ldr	r3, [pc, #236]	@ (801b188 <HAL_GPIO_DeInit+0x1b0>)
 801b09a:	689a      	ldr	r2, [r3, #8]
 801b09c:	693b      	ldr	r3, [r7, #16]
 801b09e:	43db      	mvns	r3, r3
 801b0a0:	4939      	ldr	r1, [pc, #228]	@ (801b188 <HAL_GPIO_DeInit+0x1b0>)
 801b0a2:	4013      	ands	r3, r2
 801b0a4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 801b0a6:	697b      	ldr	r3, [r7, #20]
 801b0a8:	f003 0303 	and.w	r3, r3, #3
 801b0ac:	009b      	lsls	r3, r3, #2
 801b0ae:	220f      	movs	r2, #15
 801b0b0:	fa02 f303 	lsl.w	r3, r2, r3
 801b0b4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 801b0b6:	4a2f      	ldr	r2, [pc, #188]	@ (801b174 <HAL_GPIO_DeInit+0x19c>)
 801b0b8:	697b      	ldr	r3, [r7, #20]
 801b0ba:	089b      	lsrs	r3, r3, #2
 801b0bc:	3302      	adds	r3, #2
 801b0be:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801b0c2:	68fb      	ldr	r3, [r7, #12]
 801b0c4:	43da      	mvns	r2, r3
 801b0c6:	482b      	ldr	r0, [pc, #172]	@ (801b174 <HAL_GPIO_DeInit+0x19c>)
 801b0c8:	697b      	ldr	r3, [r7, #20]
 801b0ca:	089b      	lsrs	r3, r3, #2
 801b0cc:	400a      	ands	r2, r1
 801b0ce:	3302      	adds	r3, #2
 801b0d0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 801b0d4:	687b      	ldr	r3, [r7, #4]
 801b0d6:	681a      	ldr	r2, [r3, #0]
 801b0d8:	697b      	ldr	r3, [r7, #20]
 801b0da:	005b      	lsls	r3, r3, #1
 801b0dc:	2103      	movs	r1, #3
 801b0de:	fa01 f303 	lsl.w	r3, r1, r3
 801b0e2:	431a      	orrs	r2, r3
 801b0e4:	687b      	ldr	r3, [r7, #4]
 801b0e6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 801b0e8:	697b      	ldr	r3, [r7, #20]
 801b0ea:	08da      	lsrs	r2, r3, #3
 801b0ec:	687b      	ldr	r3, [r7, #4]
 801b0ee:	3208      	adds	r2, #8
 801b0f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b0f4:	697b      	ldr	r3, [r7, #20]
 801b0f6:	f003 0307 	and.w	r3, r3, #7
 801b0fa:	009b      	lsls	r3, r3, #2
 801b0fc:	220f      	movs	r2, #15
 801b0fe:	fa02 f303 	lsl.w	r3, r2, r3
 801b102:	43db      	mvns	r3, r3
 801b104:	697a      	ldr	r2, [r7, #20]
 801b106:	08d2      	lsrs	r2, r2, #3
 801b108:	4019      	ands	r1, r3
 801b10a:	687b      	ldr	r3, [r7, #4]
 801b10c:	3208      	adds	r2, #8
 801b10e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 801b112:	687b      	ldr	r3, [r7, #4]
 801b114:	689a      	ldr	r2, [r3, #8]
 801b116:	697b      	ldr	r3, [r7, #20]
 801b118:	005b      	lsls	r3, r3, #1
 801b11a:	2103      	movs	r1, #3
 801b11c:	fa01 f303 	lsl.w	r3, r1, r3
 801b120:	43db      	mvns	r3, r3
 801b122:	401a      	ands	r2, r3
 801b124:	687b      	ldr	r3, [r7, #4]
 801b126:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 801b128:	687b      	ldr	r3, [r7, #4]
 801b12a:	685a      	ldr	r2, [r3, #4]
 801b12c:	2101      	movs	r1, #1
 801b12e:	697b      	ldr	r3, [r7, #20]
 801b130:	fa01 f303 	lsl.w	r3, r1, r3
 801b134:	43db      	mvns	r3, r3
 801b136:	401a      	ands	r2, r3
 801b138:	687b      	ldr	r3, [r7, #4]
 801b13a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 801b13c:	687b      	ldr	r3, [r7, #4]
 801b13e:	68da      	ldr	r2, [r3, #12]
 801b140:	697b      	ldr	r3, [r7, #20]
 801b142:	005b      	lsls	r3, r3, #1
 801b144:	2103      	movs	r1, #3
 801b146:	fa01 f303 	lsl.w	r3, r1, r3
 801b14a:	43db      	mvns	r3, r3
 801b14c:	401a      	ands	r2, r3
 801b14e:	687b      	ldr	r3, [r7, #4]
 801b150:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 801b152:	697b      	ldr	r3, [r7, #20]
 801b154:	3301      	adds	r3, #1
 801b156:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 801b158:	683a      	ldr	r2, [r7, #0]
 801b15a:	697b      	ldr	r3, [r7, #20]
 801b15c:	fa22 f303 	lsr.w	r3, r2, r3
 801b160:	2b00      	cmp	r3, #0
 801b162:	f47f af41 	bne.w	801afe8 <HAL_GPIO_DeInit+0x10>
  }
}
 801b166:	bf00      	nop
 801b168:	bf00      	nop
 801b16a:	371c      	adds	r7, #28
 801b16c:	46bd      	mov	sp, r7
 801b16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b172:	4770      	bx	lr
 801b174:	40010000 	.word	0x40010000
 801b178:	48000400 	.word	0x48000400
 801b17c:	48000800 	.word	0x48000800
 801b180:	48000c00 	.word	0x48000c00
 801b184:	48001000 	.word	0x48001000
 801b188:	40010400 	.word	0x40010400

0801b18c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 801b18c:	b480      	push	{r7}
 801b18e:	b085      	sub	sp, #20
 801b190:	af00      	add	r7, sp, #0
 801b192:	6078      	str	r0, [r7, #4]
 801b194:	460b      	mov	r3, r1
 801b196:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 801b198:	687b      	ldr	r3, [r7, #4]
 801b19a:	691a      	ldr	r2, [r3, #16]
 801b19c:	887b      	ldrh	r3, [r7, #2]
 801b19e:	4013      	ands	r3, r2
 801b1a0:	2b00      	cmp	r3, #0
 801b1a2:	d002      	beq.n	801b1aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 801b1a4:	2301      	movs	r3, #1
 801b1a6:	73fb      	strb	r3, [r7, #15]
 801b1a8:	e001      	b.n	801b1ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801b1aa:	2300      	movs	r3, #0
 801b1ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801b1ae:	7bfb      	ldrb	r3, [r7, #15]
}
 801b1b0:	4618      	mov	r0, r3
 801b1b2:	3714      	adds	r7, #20
 801b1b4:	46bd      	mov	sp, r7
 801b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1ba:	4770      	bx	lr

0801b1bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801b1bc:	b480      	push	{r7}
 801b1be:	b083      	sub	sp, #12
 801b1c0:	af00      	add	r7, sp, #0
 801b1c2:	6078      	str	r0, [r7, #4]
 801b1c4:	460b      	mov	r3, r1
 801b1c6:	807b      	strh	r3, [r7, #2]
 801b1c8:	4613      	mov	r3, r2
 801b1ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801b1cc:	787b      	ldrb	r3, [r7, #1]
 801b1ce:	2b00      	cmp	r3, #0
 801b1d0:	d003      	beq.n	801b1da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 801b1d2:	887a      	ldrh	r2, [r7, #2]
 801b1d4:	687b      	ldr	r3, [r7, #4]
 801b1d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 801b1d8:	e002      	b.n	801b1e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 801b1da:	887a      	ldrh	r2, [r7, #2]
 801b1dc:	687b      	ldr	r3, [r7, #4]
 801b1de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 801b1e0:	bf00      	nop
 801b1e2:	370c      	adds	r7, #12
 801b1e4:	46bd      	mov	sp, r7
 801b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1ea:	4770      	bx	lr

0801b1ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 801b1ec:	b580      	push	{r7, lr}
 801b1ee:	b082      	sub	sp, #8
 801b1f0:	af00      	add	r7, sp, #0
 801b1f2:	4603      	mov	r3, r0
 801b1f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 801b1f6:	4b08      	ldr	r3, [pc, #32]	@ (801b218 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801b1f8:	695a      	ldr	r2, [r3, #20]
 801b1fa:	88fb      	ldrh	r3, [r7, #6]
 801b1fc:	4013      	ands	r3, r2
 801b1fe:	2b00      	cmp	r3, #0
 801b200:	d006      	beq.n	801b210 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801b202:	4a05      	ldr	r2, [pc, #20]	@ (801b218 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801b204:	88fb      	ldrh	r3, [r7, #6]
 801b206:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 801b208:	88fb      	ldrh	r3, [r7, #6]
 801b20a:	4618      	mov	r0, r3
 801b20c:	f000 f806 	bl	801b21c <HAL_GPIO_EXTI_Callback>
  }
}
 801b210:	bf00      	nop
 801b212:	3708      	adds	r7, #8
 801b214:	46bd      	mov	sp, r7
 801b216:	bd80      	pop	{r7, pc}
 801b218:	40010400 	.word	0x40010400

0801b21c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 801b21c:	b480      	push	{r7}
 801b21e:	b083      	sub	sp, #12
 801b220:	af00      	add	r7, sp, #0
 801b222:	4603      	mov	r3, r0
 801b224:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 801b226:	bf00      	nop
 801b228:	370c      	adds	r7, #12
 801b22a:	46bd      	mov	sp, r7
 801b22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b230:	4770      	bx	lr
	...

0801b234 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 801b234:	b480      	push	{r7}
 801b236:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 801b238:	4b04      	ldr	r3, [pc, #16]	@ (801b24c <HAL_PWREx_GetVoltageRange+0x18>)
 801b23a:	681b      	ldr	r3, [r3, #0]
 801b23c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 801b240:	4618      	mov	r0, r3
 801b242:	46bd      	mov	sp, r7
 801b244:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b248:	4770      	bx	lr
 801b24a:	bf00      	nop
 801b24c:	40007000 	.word	0x40007000

0801b250 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 801b250:	b480      	push	{r7}
 801b252:	b085      	sub	sp, #20
 801b254:	af00      	add	r7, sp, #0
 801b256:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 801b258:	687b      	ldr	r3, [r7, #4]
 801b25a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b25e:	d130      	bne.n	801b2c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 801b260:	4b23      	ldr	r3, [pc, #140]	@ (801b2f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801b262:	681b      	ldr	r3, [r3, #0]
 801b264:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801b268:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b26c:	d038      	beq.n	801b2e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801b26e:	4b20      	ldr	r3, [pc, #128]	@ (801b2f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801b270:	681b      	ldr	r3, [r3, #0]
 801b272:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 801b276:	4a1e      	ldr	r2, [pc, #120]	@ (801b2f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801b278:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801b27c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 801b27e:	4b1d      	ldr	r3, [pc, #116]	@ (801b2f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 801b280:	681b      	ldr	r3, [r3, #0]
 801b282:	2232      	movs	r2, #50	@ 0x32
 801b284:	fb02 f303 	mul.w	r3, r2, r3
 801b288:	4a1b      	ldr	r2, [pc, #108]	@ (801b2f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 801b28a:	fba2 2303 	umull	r2, r3, r2, r3
 801b28e:	0c9b      	lsrs	r3, r3, #18
 801b290:	3301      	adds	r3, #1
 801b292:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801b294:	e002      	b.n	801b29c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 801b296:	68fb      	ldr	r3, [r7, #12]
 801b298:	3b01      	subs	r3, #1
 801b29a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801b29c:	4b14      	ldr	r3, [pc, #80]	@ (801b2f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801b29e:	695b      	ldr	r3, [r3, #20]
 801b2a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801b2a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801b2a8:	d102      	bne.n	801b2b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 801b2aa:	68fb      	ldr	r3, [r7, #12]
 801b2ac:	2b00      	cmp	r3, #0
 801b2ae:	d1f2      	bne.n	801b296 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801b2b0:	4b0f      	ldr	r3, [pc, #60]	@ (801b2f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801b2b2:	695b      	ldr	r3, [r3, #20]
 801b2b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801b2b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801b2bc:	d110      	bne.n	801b2e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 801b2be:	2303      	movs	r3, #3
 801b2c0:	e00f      	b.n	801b2e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 801b2c2:	4b0b      	ldr	r3, [pc, #44]	@ (801b2f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801b2c4:	681b      	ldr	r3, [r3, #0]
 801b2c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801b2ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801b2ce:	d007      	beq.n	801b2e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 801b2d0:	4b07      	ldr	r3, [pc, #28]	@ (801b2f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801b2d2:	681b      	ldr	r3, [r3, #0]
 801b2d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 801b2d8:	4a05      	ldr	r2, [pc, #20]	@ (801b2f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801b2da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 801b2de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 801b2e0:	2300      	movs	r3, #0
}
 801b2e2:	4618      	mov	r0, r3
 801b2e4:	3714      	adds	r7, #20
 801b2e6:	46bd      	mov	sp, r7
 801b2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2ec:	4770      	bx	lr
 801b2ee:	bf00      	nop
 801b2f0:	40007000 	.word	0x40007000
 801b2f4:	20000000 	.word	0x20000000
 801b2f8:	431bde83 	.word	0x431bde83

0801b2fc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801b2fc:	b580      	push	{r7, lr}
 801b2fe:	b088      	sub	sp, #32
 801b300:	af00      	add	r7, sp, #0
 801b302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801b304:	687b      	ldr	r3, [r7, #4]
 801b306:	2b00      	cmp	r3, #0
 801b308:	d102      	bne.n	801b310 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801b30a:	2301      	movs	r3, #1
 801b30c:	f000 bc02 	b.w	801bb14 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801b310:	4b96      	ldr	r3, [pc, #600]	@ (801b56c <HAL_RCC_OscConfig+0x270>)
 801b312:	689b      	ldr	r3, [r3, #8]
 801b314:	f003 030c 	and.w	r3, r3, #12
 801b318:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 801b31a:	4b94      	ldr	r3, [pc, #592]	@ (801b56c <HAL_RCC_OscConfig+0x270>)
 801b31c:	68db      	ldr	r3, [r3, #12]
 801b31e:	f003 0303 	and.w	r3, r3, #3
 801b322:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801b324:	687b      	ldr	r3, [r7, #4]
 801b326:	681b      	ldr	r3, [r3, #0]
 801b328:	f003 0310 	and.w	r3, r3, #16
 801b32c:	2b00      	cmp	r3, #0
 801b32e:	f000 80e4 	beq.w	801b4fa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 801b332:	69bb      	ldr	r3, [r7, #24]
 801b334:	2b00      	cmp	r3, #0
 801b336:	d007      	beq.n	801b348 <HAL_RCC_OscConfig+0x4c>
 801b338:	69bb      	ldr	r3, [r7, #24]
 801b33a:	2b0c      	cmp	r3, #12
 801b33c:	f040 808b 	bne.w	801b456 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 801b340:	697b      	ldr	r3, [r7, #20]
 801b342:	2b01      	cmp	r3, #1
 801b344:	f040 8087 	bne.w	801b456 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801b348:	4b88      	ldr	r3, [pc, #544]	@ (801b56c <HAL_RCC_OscConfig+0x270>)
 801b34a:	681b      	ldr	r3, [r3, #0]
 801b34c:	f003 0302 	and.w	r3, r3, #2
 801b350:	2b00      	cmp	r3, #0
 801b352:	d005      	beq.n	801b360 <HAL_RCC_OscConfig+0x64>
 801b354:	687b      	ldr	r3, [r7, #4]
 801b356:	699b      	ldr	r3, [r3, #24]
 801b358:	2b00      	cmp	r3, #0
 801b35a:	d101      	bne.n	801b360 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 801b35c:	2301      	movs	r3, #1
 801b35e:	e3d9      	b.n	801bb14 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 801b360:	687b      	ldr	r3, [r7, #4]
 801b362:	6a1a      	ldr	r2, [r3, #32]
 801b364:	4b81      	ldr	r3, [pc, #516]	@ (801b56c <HAL_RCC_OscConfig+0x270>)
 801b366:	681b      	ldr	r3, [r3, #0]
 801b368:	f003 0308 	and.w	r3, r3, #8
 801b36c:	2b00      	cmp	r3, #0
 801b36e:	d004      	beq.n	801b37a <HAL_RCC_OscConfig+0x7e>
 801b370:	4b7e      	ldr	r3, [pc, #504]	@ (801b56c <HAL_RCC_OscConfig+0x270>)
 801b372:	681b      	ldr	r3, [r3, #0]
 801b374:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b378:	e005      	b.n	801b386 <HAL_RCC_OscConfig+0x8a>
 801b37a:	4b7c      	ldr	r3, [pc, #496]	@ (801b56c <HAL_RCC_OscConfig+0x270>)
 801b37c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801b380:	091b      	lsrs	r3, r3, #4
 801b382:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b386:	4293      	cmp	r3, r2
 801b388:	d223      	bcs.n	801b3d2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801b38a:	687b      	ldr	r3, [r7, #4]
 801b38c:	6a1b      	ldr	r3, [r3, #32]
 801b38e:	4618      	mov	r0, r3
 801b390:	f000 fd8c 	bl	801beac <RCC_SetFlashLatencyFromMSIRange>
 801b394:	4603      	mov	r3, r0
 801b396:	2b00      	cmp	r3, #0
 801b398:	d001      	beq.n	801b39e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 801b39a:	2301      	movs	r3, #1
 801b39c:	e3ba      	b.n	801bb14 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801b39e:	4b73      	ldr	r3, [pc, #460]	@ (801b56c <HAL_RCC_OscConfig+0x270>)
 801b3a0:	681b      	ldr	r3, [r3, #0]
 801b3a2:	4a72      	ldr	r2, [pc, #456]	@ (801b56c <HAL_RCC_OscConfig+0x270>)
 801b3a4:	f043 0308 	orr.w	r3, r3, #8
 801b3a8:	6013      	str	r3, [r2, #0]
 801b3aa:	4b70      	ldr	r3, [pc, #448]	@ (801b56c <HAL_RCC_OscConfig+0x270>)
 801b3ac:	681b      	ldr	r3, [r3, #0]
 801b3ae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 801b3b2:	687b      	ldr	r3, [r7, #4]
 801b3b4:	6a1b      	ldr	r3, [r3, #32]
 801b3b6:	496d      	ldr	r1, [pc, #436]	@ (801b56c <HAL_RCC_OscConfig+0x270>)
 801b3b8:	4313      	orrs	r3, r2
 801b3ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801b3bc:	4b6b      	ldr	r3, [pc, #428]	@ (801b56c <HAL_RCC_OscConfig+0x270>)
 801b3be:	685b      	ldr	r3, [r3, #4]
 801b3c0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 801b3c4:	687b      	ldr	r3, [r7, #4]
 801b3c6:	69db      	ldr	r3, [r3, #28]
 801b3c8:	021b      	lsls	r3, r3, #8
 801b3ca:	4968      	ldr	r1, [pc, #416]	@ (801b56c <HAL_RCC_OscConfig+0x270>)
 801b3cc:	4313      	orrs	r3, r2
 801b3ce:	604b      	str	r3, [r1, #4]
 801b3d0:	e025      	b.n	801b41e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801b3d2:	4b66      	ldr	r3, [pc, #408]	@ (801b56c <HAL_RCC_OscConfig+0x270>)
 801b3d4:	681b      	ldr	r3, [r3, #0]
 801b3d6:	4a65      	ldr	r2, [pc, #404]	@ (801b56c <HAL_RCC_OscConfig+0x270>)
 801b3d8:	f043 0308 	orr.w	r3, r3, #8
 801b3dc:	6013      	str	r3, [r2, #0]
 801b3de:	4b63      	ldr	r3, [pc, #396]	@ (801b56c <HAL_RCC_OscConfig+0x270>)
 801b3e0:	681b      	ldr	r3, [r3, #0]
 801b3e2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 801b3e6:	687b      	ldr	r3, [r7, #4]
 801b3e8:	6a1b      	ldr	r3, [r3, #32]
 801b3ea:	4960      	ldr	r1, [pc, #384]	@ (801b56c <HAL_RCC_OscConfig+0x270>)
 801b3ec:	4313      	orrs	r3, r2
 801b3ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801b3f0:	4b5e      	ldr	r3, [pc, #376]	@ (801b56c <HAL_RCC_OscConfig+0x270>)
 801b3f2:	685b      	ldr	r3, [r3, #4]
 801b3f4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 801b3f8:	687b      	ldr	r3, [r7, #4]
 801b3fa:	69db      	ldr	r3, [r3, #28]
 801b3fc:	021b      	lsls	r3, r3, #8
 801b3fe:	495b      	ldr	r1, [pc, #364]	@ (801b56c <HAL_RCC_OscConfig+0x270>)
 801b400:	4313      	orrs	r3, r2
 801b402:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 801b404:	69bb      	ldr	r3, [r7, #24]
 801b406:	2b00      	cmp	r3, #0
 801b408:	d109      	bne.n	801b41e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801b40a:	687b      	ldr	r3, [r7, #4]
 801b40c:	6a1b      	ldr	r3, [r3, #32]
 801b40e:	4618      	mov	r0, r3
 801b410:	f000 fd4c 	bl	801beac <RCC_SetFlashLatencyFromMSIRange>
 801b414:	4603      	mov	r3, r0
 801b416:	2b00      	cmp	r3, #0
 801b418:	d001      	beq.n	801b41e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 801b41a:	2301      	movs	r3, #1
 801b41c:	e37a      	b.n	801bb14 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801b41e:	f000 fc81 	bl	801bd24 <HAL_RCC_GetSysClockFreq>
 801b422:	4602      	mov	r2, r0
 801b424:	4b51      	ldr	r3, [pc, #324]	@ (801b56c <HAL_RCC_OscConfig+0x270>)
 801b426:	689b      	ldr	r3, [r3, #8]
 801b428:	091b      	lsrs	r3, r3, #4
 801b42a:	f003 030f 	and.w	r3, r3, #15
 801b42e:	4950      	ldr	r1, [pc, #320]	@ (801b570 <HAL_RCC_OscConfig+0x274>)
 801b430:	5ccb      	ldrb	r3, [r1, r3]
 801b432:	f003 031f 	and.w	r3, r3, #31
 801b436:	fa22 f303 	lsr.w	r3, r2, r3
 801b43a:	4a4e      	ldr	r2, [pc, #312]	@ (801b574 <HAL_RCC_OscConfig+0x278>)
 801b43c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 801b43e:	4b4e      	ldr	r3, [pc, #312]	@ (801b578 <HAL_RCC_OscConfig+0x27c>)
 801b440:	681b      	ldr	r3, [r3, #0]
 801b442:	4618      	mov	r0, r3
 801b444:	f7ff fa3e 	bl	801a8c4 <HAL_InitTick>
 801b448:	4603      	mov	r3, r0
 801b44a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 801b44c:	7bfb      	ldrb	r3, [r7, #15]
 801b44e:	2b00      	cmp	r3, #0
 801b450:	d052      	beq.n	801b4f8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 801b452:	7bfb      	ldrb	r3, [r7, #15]
 801b454:	e35e      	b.n	801bb14 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 801b456:	687b      	ldr	r3, [r7, #4]
 801b458:	699b      	ldr	r3, [r3, #24]
 801b45a:	2b00      	cmp	r3, #0
 801b45c:	d032      	beq.n	801b4c4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 801b45e:	4b43      	ldr	r3, [pc, #268]	@ (801b56c <HAL_RCC_OscConfig+0x270>)
 801b460:	681b      	ldr	r3, [r3, #0]
 801b462:	4a42      	ldr	r2, [pc, #264]	@ (801b56c <HAL_RCC_OscConfig+0x270>)
 801b464:	f043 0301 	orr.w	r3, r3, #1
 801b468:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 801b46a:	f7ff fa7b 	bl	801a964 <HAL_GetTick>
 801b46e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801b470:	e008      	b.n	801b484 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801b472:	f7ff fa77 	bl	801a964 <HAL_GetTick>
 801b476:	4602      	mov	r2, r0
 801b478:	693b      	ldr	r3, [r7, #16]
 801b47a:	1ad3      	subs	r3, r2, r3
 801b47c:	2b02      	cmp	r3, #2
 801b47e:	d901      	bls.n	801b484 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 801b480:	2303      	movs	r3, #3
 801b482:	e347      	b.n	801bb14 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801b484:	4b39      	ldr	r3, [pc, #228]	@ (801b56c <HAL_RCC_OscConfig+0x270>)
 801b486:	681b      	ldr	r3, [r3, #0]
 801b488:	f003 0302 	and.w	r3, r3, #2
 801b48c:	2b00      	cmp	r3, #0
 801b48e:	d0f0      	beq.n	801b472 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801b490:	4b36      	ldr	r3, [pc, #216]	@ (801b56c <HAL_RCC_OscConfig+0x270>)
 801b492:	681b      	ldr	r3, [r3, #0]
 801b494:	4a35      	ldr	r2, [pc, #212]	@ (801b56c <HAL_RCC_OscConfig+0x270>)
 801b496:	f043 0308 	orr.w	r3, r3, #8
 801b49a:	6013      	str	r3, [r2, #0]
 801b49c:	4b33      	ldr	r3, [pc, #204]	@ (801b56c <HAL_RCC_OscConfig+0x270>)
 801b49e:	681b      	ldr	r3, [r3, #0]
 801b4a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 801b4a4:	687b      	ldr	r3, [r7, #4]
 801b4a6:	6a1b      	ldr	r3, [r3, #32]
 801b4a8:	4930      	ldr	r1, [pc, #192]	@ (801b56c <HAL_RCC_OscConfig+0x270>)
 801b4aa:	4313      	orrs	r3, r2
 801b4ac:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801b4ae:	4b2f      	ldr	r3, [pc, #188]	@ (801b56c <HAL_RCC_OscConfig+0x270>)
 801b4b0:	685b      	ldr	r3, [r3, #4]
 801b4b2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 801b4b6:	687b      	ldr	r3, [r7, #4]
 801b4b8:	69db      	ldr	r3, [r3, #28]
 801b4ba:	021b      	lsls	r3, r3, #8
 801b4bc:	492b      	ldr	r1, [pc, #172]	@ (801b56c <HAL_RCC_OscConfig+0x270>)
 801b4be:	4313      	orrs	r3, r2
 801b4c0:	604b      	str	r3, [r1, #4]
 801b4c2:	e01a      	b.n	801b4fa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801b4c4:	4b29      	ldr	r3, [pc, #164]	@ (801b56c <HAL_RCC_OscConfig+0x270>)
 801b4c6:	681b      	ldr	r3, [r3, #0]
 801b4c8:	4a28      	ldr	r2, [pc, #160]	@ (801b56c <HAL_RCC_OscConfig+0x270>)
 801b4ca:	f023 0301 	bic.w	r3, r3, #1
 801b4ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 801b4d0:	f7ff fa48 	bl	801a964 <HAL_GetTick>
 801b4d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 801b4d6:	e008      	b.n	801b4ea <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801b4d8:	f7ff fa44 	bl	801a964 <HAL_GetTick>
 801b4dc:	4602      	mov	r2, r0
 801b4de:	693b      	ldr	r3, [r7, #16]
 801b4e0:	1ad3      	subs	r3, r2, r3
 801b4e2:	2b02      	cmp	r3, #2
 801b4e4:	d901      	bls.n	801b4ea <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 801b4e6:	2303      	movs	r3, #3
 801b4e8:	e314      	b.n	801bb14 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 801b4ea:	4b20      	ldr	r3, [pc, #128]	@ (801b56c <HAL_RCC_OscConfig+0x270>)
 801b4ec:	681b      	ldr	r3, [r3, #0]
 801b4ee:	f003 0302 	and.w	r3, r3, #2
 801b4f2:	2b00      	cmp	r3, #0
 801b4f4:	d1f0      	bne.n	801b4d8 <HAL_RCC_OscConfig+0x1dc>
 801b4f6:	e000      	b.n	801b4fa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801b4f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801b4fa:	687b      	ldr	r3, [r7, #4]
 801b4fc:	681b      	ldr	r3, [r3, #0]
 801b4fe:	f003 0301 	and.w	r3, r3, #1
 801b502:	2b00      	cmp	r3, #0
 801b504:	d073      	beq.n	801b5ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 801b506:	69bb      	ldr	r3, [r7, #24]
 801b508:	2b08      	cmp	r3, #8
 801b50a:	d005      	beq.n	801b518 <HAL_RCC_OscConfig+0x21c>
 801b50c:	69bb      	ldr	r3, [r7, #24]
 801b50e:	2b0c      	cmp	r3, #12
 801b510:	d10e      	bne.n	801b530 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 801b512:	697b      	ldr	r3, [r7, #20]
 801b514:	2b03      	cmp	r3, #3
 801b516:	d10b      	bne.n	801b530 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b518:	4b14      	ldr	r3, [pc, #80]	@ (801b56c <HAL_RCC_OscConfig+0x270>)
 801b51a:	681b      	ldr	r3, [r3, #0]
 801b51c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801b520:	2b00      	cmp	r3, #0
 801b522:	d063      	beq.n	801b5ec <HAL_RCC_OscConfig+0x2f0>
 801b524:	687b      	ldr	r3, [r7, #4]
 801b526:	685b      	ldr	r3, [r3, #4]
 801b528:	2b00      	cmp	r3, #0
 801b52a:	d15f      	bne.n	801b5ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 801b52c:	2301      	movs	r3, #1
 801b52e:	e2f1      	b.n	801bb14 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801b530:	687b      	ldr	r3, [r7, #4]
 801b532:	685b      	ldr	r3, [r3, #4]
 801b534:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b538:	d106      	bne.n	801b548 <HAL_RCC_OscConfig+0x24c>
 801b53a:	4b0c      	ldr	r3, [pc, #48]	@ (801b56c <HAL_RCC_OscConfig+0x270>)
 801b53c:	681b      	ldr	r3, [r3, #0]
 801b53e:	4a0b      	ldr	r2, [pc, #44]	@ (801b56c <HAL_RCC_OscConfig+0x270>)
 801b540:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801b544:	6013      	str	r3, [r2, #0]
 801b546:	e025      	b.n	801b594 <HAL_RCC_OscConfig+0x298>
 801b548:	687b      	ldr	r3, [r7, #4]
 801b54a:	685b      	ldr	r3, [r3, #4]
 801b54c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801b550:	d114      	bne.n	801b57c <HAL_RCC_OscConfig+0x280>
 801b552:	4b06      	ldr	r3, [pc, #24]	@ (801b56c <HAL_RCC_OscConfig+0x270>)
 801b554:	681b      	ldr	r3, [r3, #0]
 801b556:	4a05      	ldr	r2, [pc, #20]	@ (801b56c <HAL_RCC_OscConfig+0x270>)
 801b558:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801b55c:	6013      	str	r3, [r2, #0]
 801b55e:	4b03      	ldr	r3, [pc, #12]	@ (801b56c <HAL_RCC_OscConfig+0x270>)
 801b560:	681b      	ldr	r3, [r3, #0]
 801b562:	4a02      	ldr	r2, [pc, #8]	@ (801b56c <HAL_RCC_OscConfig+0x270>)
 801b564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801b568:	6013      	str	r3, [r2, #0]
 801b56a:	e013      	b.n	801b594 <HAL_RCC_OscConfig+0x298>
 801b56c:	40021000 	.word	0x40021000
 801b570:	08023164 	.word	0x08023164
 801b574:	20000000 	.word	0x20000000
 801b578:	20000070 	.word	0x20000070
 801b57c:	4ba0      	ldr	r3, [pc, #640]	@ (801b800 <HAL_RCC_OscConfig+0x504>)
 801b57e:	681b      	ldr	r3, [r3, #0]
 801b580:	4a9f      	ldr	r2, [pc, #636]	@ (801b800 <HAL_RCC_OscConfig+0x504>)
 801b582:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801b586:	6013      	str	r3, [r2, #0]
 801b588:	4b9d      	ldr	r3, [pc, #628]	@ (801b800 <HAL_RCC_OscConfig+0x504>)
 801b58a:	681b      	ldr	r3, [r3, #0]
 801b58c:	4a9c      	ldr	r2, [pc, #624]	@ (801b800 <HAL_RCC_OscConfig+0x504>)
 801b58e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801b592:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801b594:	687b      	ldr	r3, [r7, #4]
 801b596:	685b      	ldr	r3, [r3, #4]
 801b598:	2b00      	cmp	r3, #0
 801b59a:	d013      	beq.n	801b5c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b59c:	f7ff f9e2 	bl	801a964 <HAL_GetTick>
 801b5a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801b5a2:	e008      	b.n	801b5b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801b5a4:	f7ff f9de 	bl	801a964 <HAL_GetTick>
 801b5a8:	4602      	mov	r2, r0
 801b5aa:	693b      	ldr	r3, [r7, #16]
 801b5ac:	1ad3      	subs	r3, r2, r3
 801b5ae:	2b64      	cmp	r3, #100	@ 0x64
 801b5b0:	d901      	bls.n	801b5b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 801b5b2:	2303      	movs	r3, #3
 801b5b4:	e2ae      	b.n	801bb14 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801b5b6:	4b92      	ldr	r3, [pc, #584]	@ (801b800 <HAL_RCC_OscConfig+0x504>)
 801b5b8:	681b      	ldr	r3, [r3, #0]
 801b5ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801b5be:	2b00      	cmp	r3, #0
 801b5c0:	d0f0      	beq.n	801b5a4 <HAL_RCC_OscConfig+0x2a8>
 801b5c2:	e014      	b.n	801b5ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b5c4:	f7ff f9ce 	bl	801a964 <HAL_GetTick>
 801b5c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801b5ca:	e008      	b.n	801b5de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801b5cc:	f7ff f9ca 	bl	801a964 <HAL_GetTick>
 801b5d0:	4602      	mov	r2, r0
 801b5d2:	693b      	ldr	r3, [r7, #16]
 801b5d4:	1ad3      	subs	r3, r2, r3
 801b5d6:	2b64      	cmp	r3, #100	@ 0x64
 801b5d8:	d901      	bls.n	801b5de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 801b5da:	2303      	movs	r3, #3
 801b5dc:	e29a      	b.n	801bb14 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801b5de:	4b88      	ldr	r3, [pc, #544]	@ (801b800 <HAL_RCC_OscConfig+0x504>)
 801b5e0:	681b      	ldr	r3, [r3, #0]
 801b5e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801b5e6:	2b00      	cmp	r3, #0
 801b5e8:	d1f0      	bne.n	801b5cc <HAL_RCC_OscConfig+0x2d0>
 801b5ea:	e000      	b.n	801b5ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b5ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801b5ee:	687b      	ldr	r3, [r7, #4]
 801b5f0:	681b      	ldr	r3, [r3, #0]
 801b5f2:	f003 0302 	and.w	r3, r3, #2
 801b5f6:	2b00      	cmp	r3, #0
 801b5f8:	d060      	beq.n	801b6bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 801b5fa:	69bb      	ldr	r3, [r7, #24]
 801b5fc:	2b04      	cmp	r3, #4
 801b5fe:	d005      	beq.n	801b60c <HAL_RCC_OscConfig+0x310>
 801b600:	69bb      	ldr	r3, [r7, #24]
 801b602:	2b0c      	cmp	r3, #12
 801b604:	d119      	bne.n	801b63a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 801b606:	697b      	ldr	r3, [r7, #20]
 801b608:	2b02      	cmp	r3, #2
 801b60a:	d116      	bne.n	801b63a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801b60c:	4b7c      	ldr	r3, [pc, #496]	@ (801b800 <HAL_RCC_OscConfig+0x504>)
 801b60e:	681b      	ldr	r3, [r3, #0]
 801b610:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801b614:	2b00      	cmp	r3, #0
 801b616:	d005      	beq.n	801b624 <HAL_RCC_OscConfig+0x328>
 801b618:	687b      	ldr	r3, [r7, #4]
 801b61a:	68db      	ldr	r3, [r3, #12]
 801b61c:	2b00      	cmp	r3, #0
 801b61e:	d101      	bne.n	801b624 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 801b620:	2301      	movs	r3, #1
 801b622:	e277      	b.n	801bb14 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b624:	4b76      	ldr	r3, [pc, #472]	@ (801b800 <HAL_RCC_OscConfig+0x504>)
 801b626:	685b      	ldr	r3, [r3, #4]
 801b628:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 801b62c:	687b      	ldr	r3, [r7, #4]
 801b62e:	691b      	ldr	r3, [r3, #16]
 801b630:	061b      	lsls	r3, r3, #24
 801b632:	4973      	ldr	r1, [pc, #460]	@ (801b800 <HAL_RCC_OscConfig+0x504>)
 801b634:	4313      	orrs	r3, r2
 801b636:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801b638:	e040      	b.n	801b6bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801b63a:	687b      	ldr	r3, [r7, #4]
 801b63c:	68db      	ldr	r3, [r3, #12]
 801b63e:	2b00      	cmp	r3, #0
 801b640:	d023      	beq.n	801b68a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801b642:	4b6f      	ldr	r3, [pc, #444]	@ (801b800 <HAL_RCC_OscConfig+0x504>)
 801b644:	681b      	ldr	r3, [r3, #0]
 801b646:	4a6e      	ldr	r2, [pc, #440]	@ (801b800 <HAL_RCC_OscConfig+0x504>)
 801b648:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801b64c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b64e:	f7ff f989 	bl	801a964 <HAL_GetTick>
 801b652:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801b654:	e008      	b.n	801b668 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801b656:	f7ff f985 	bl	801a964 <HAL_GetTick>
 801b65a:	4602      	mov	r2, r0
 801b65c:	693b      	ldr	r3, [r7, #16]
 801b65e:	1ad3      	subs	r3, r2, r3
 801b660:	2b02      	cmp	r3, #2
 801b662:	d901      	bls.n	801b668 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 801b664:	2303      	movs	r3, #3
 801b666:	e255      	b.n	801bb14 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801b668:	4b65      	ldr	r3, [pc, #404]	@ (801b800 <HAL_RCC_OscConfig+0x504>)
 801b66a:	681b      	ldr	r3, [r3, #0]
 801b66c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801b670:	2b00      	cmp	r3, #0
 801b672:	d0f0      	beq.n	801b656 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b674:	4b62      	ldr	r3, [pc, #392]	@ (801b800 <HAL_RCC_OscConfig+0x504>)
 801b676:	685b      	ldr	r3, [r3, #4]
 801b678:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 801b67c:	687b      	ldr	r3, [r7, #4]
 801b67e:	691b      	ldr	r3, [r3, #16]
 801b680:	061b      	lsls	r3, r3, #24
 801b682:	495f      	ldr	r1, [pc, #380]	@ (801b800 <HAL_RCC_OscConfig+0x504>)
 801b684:	4313      	orrs	r3, r2
 801b686:	604b      	str	r3, [r1, #4]
 801b688:	e018      	b.n	801b6bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801b68a:	4b5d      	ldr	r3, [pc, #372]	@ (801b800 <HAL_RCC_OscConfig+0x504>)
 801b68c:	681b      	ldr	r3, [r3, #0]
 801b68e:	4a5c      	ldr	r2, [pc, #368]	@ (801b800 <HAL_RCC_OscConfig+0x504>)
 801b690:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801b694:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b696:	f7ff f965 	bl	801a964 <HAL_GetTick>
 801b69a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801b69c:	e008      	b.n	801b6b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801b69e:	f7ff f961 	bl	801a964 <HAL_GetTick>
 801b6a2:	4602      	mov	r2, r0
 801b6a4:	693b      	ldr	r3, [r7, #16]
 801b6a6:	1ad3      	subs	r3, r2, r3
 801b6a8:	2b02      	cmp	r3, #2
 801b6aa:	d901      	bls.n	801b6b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 801b6ac:	2303      	movs	r3, #3
 801b6ae:	e231      	b.n	801bb14 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801b6b0:	4b53      	ldr	r3, [pc, #332]	@ (801b800 <HAL_RCC_OscConfig+0x504>)
 801b6b2:	681b      	ldr	r3, [r3, #0]
 801b6b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801b6b8:	2b00      	cmp	r3, #0
 801b6ba:	d1f0      	bne.n	801b69e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801b6bc:	687b      	ldr	r3, [r7, #4]
 801b6be:	681b      	ldr	r3, [r3, #0]
 801b6c0:	f003 0308 	and.w	r3, r3, #8
 801b6c4:	2b00      	cmp	r3, #0
 801b6c6:	d03c      	beq.n	801b742 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801b6c8:	687b      	ldr	r3, [r7, #4]
 801b6ca:	695b      	ldr	r3, [r3, #20]
 801b6cc:	2b00      	cmp	r3, #0
 801b6ce:	d01c      	beq.n	801b70a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801b6d0:	4b4b      	ldr	r3, [pc, #300]	@ (801b800 <HAL_RCC_OscConfig+0x504>)
 801b6d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801b6d6:	4a4a      	ldr	r2, [pc, #296]	@ (801b800 <HAL_RCC_OscConfig+0x504>)
 801b6d8:	f043 0301 	orr.w	r3, r3, #1
 801b6dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b6e0:	f7ff f940 	bl	801a964 <HAL_GetTick>
 801b6e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801b6e6:	e008      	b.n	801b6fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801b6e8:	f7ff f93c 	bl	801a964 <HAL_GetTick>
 801b6ec:	4602      	mov	r2, r0
 801b6ee:	693b      	ldr	r3, [r7, #16]
 801b6f0:	1ad3      	subs	r3, r2, r3
 801b6f2:	2b02      	cmp	r3, #2
 801b6f4:	d901      	bls.n	801b6fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 801b6f6:	2303      	movs	r3, #3
 801b6f8:	e20c      	b.n	801bb14 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801b6fa:	4b41      	ldr	r3, [pc, #260]	@ (801b800 <HAL_RCC_OscConfig+0x504>)
 801b6fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801b700:	f003 0302 	and.w	r3, r3, #2
 801b704:	2b00      	cmp	r3, #0
 801b706:	d0ef      	beq.n	801b6e8 <HAL_RCC_OscConfig+0x3ec>
 801b708:	e01b      	b.n	801b742 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801b70a:	4b3d      	ldr	r3, [pc, #244]	@ (801b800 <HAL_RCC_OscConfig+0x504>)
 801b70c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801b710:	4a3b      	ldr	r2, [pc, #236]	@ (801b800 <HAL_RCC_OscConfig+0x504>)
 801b712:	f023 0301 	bic.w	r3, r3, #1
 801b716:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b71a:	f7ff f923 	bl	801a964 <HAL_GetTick>
 801b71e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801b720:	e008      	b.n	801b734 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801b722:	f7ff f91f 	bl	801a964 <HAL_GetTick>
 801b726:	4602      	mov	r2, r0
 801b728:	693b      	ldr	r3, [r7, #16]
 801b72a:	1ad3      	subs	r3, r2, r3
 801b72c:	2b02      	cmp	r3, #2
 801b72e:	d901      	bls.n	801b734 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 801b730:	2303      	movs	r3, #3
 801b732:	e1ef      	b.n	801bb14 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801b734:	4b32      	ldr	r3, [pc, #200]	@ (801b800 <HAL_RCC_OscConfig+0x504>)
 801b736:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801b73a:	f003 0302 	and.w	r3, r3, #2
 801b73e:	2b00      	cmp	r3, #0
 801b740:	d1ef      	bne.n	801b722 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801b742:	687b      	ldr	r3, [r7, #4]
 801b744:	681b      	ldr	r3, [r3, #0]
 801b746:	f003 0304 	and.w	r3, r3, #4
 801b74a:	2b00      	cmp	r3, #0
 801b74c:	f000 80a6 	beq.w	801b89c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 801b750:	2300      	movs	r3, #0
 801b752:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 801b754:	4b2a      	ldr	r3, [pc, #168]	@ (801b800 <HAL_RCC_OscConfig+0x504>)
 801b756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b758:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801b75c:	2b00      	cmp	r3, #0
 801b75e:	d10d      	bne.n	801b77c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801b760:	4b27      	ldr	r3, [pc, #156]	@ (801b800 <HAL_RCC_OscConfig+0x504>)
 801b762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b764:	4a26      	ldr	r2, [pc, #152]	@ (801b800 <HAL_RCC_OscConfig+0x504>)
 801b766:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801b76a:	6593      	str	r3, [r2, #88]	@ 0x58
 801b76c:	4b24      	ldr	r3, [pc, #144]	@ (801b800 <HAL_RCC_OscConfig+0x504>)
 801b76e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b770:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801b774:	60bb      	str	r3, [r7, #8]
 801b776:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801b778:	2301      	movs	r3, #1
 801b77a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801b77c:	4b21      	ldr	r3, [pc, #132]	@ (801b804 <HAL_RCC_OscConfig+0x508>)
 801b77e:	681b      	ldr	r3, [r3, #0]
 801b780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801b784:	2b00      	cmp	r3, #0
 801b786:	d118      	bne.n	801b7ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801b788:	4b1e      	ldr	r3, [pc, #120]	@ (801b804 <HAL_RCC_OscConfig+0x508>)
 801b78a:	681b      	ldr	r3, [r3, #0]
 801b78c:	4a1d      	ldr	r2, [pc, #116]	@ (801b804 <HAL_RCC_OscConfig+0x508>)
 801b78e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801b792:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801b794:	f7ff f8e6 	bl	801a964 <HAL_GetTick>
 801b798:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801b79a:	e008      	b.n	801b7ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801b79c:	f7ff f8e2 	bl	801a964 <HAL_GetTick>
 801b7a0:	4602      	mov	r2, r0
 801b7a2:	693b      	ldr	r3, [r7, #16]
 801b7a4:	1ad3      	subs	r3, r2, r3
 801b7a6:	2b02      	cmp	r3, #2
 801b7a8:	d901      	bls.n	801b7ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 801b7aa:	2303      	movs	r3, #3
 801b7ac:	e1b2      	b.n	801bb14 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801b7ae:	4b15      	ldr	r3, [pc, #84]	@ (801b804 <HAL_RCC_OscConfig+0x508>)
 801b7b0:	681b      	ldr	r3, [r3, #0]
 801b7b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801b7b6:	2b00      	cmp	r3, #0
 801b7b8:	d0f0      	beq.n	801b79c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801b7ba:	687b      	ldr	r3, [r7, #4]
 801b7bc:	689b      	ldr	r3, [r3, #8]
 801b7be:	2b01      	cmp	r3, #1
 801b7c0:	d108      	bne.n	801b7d4 <HAL_RCC_OscConfig+0x4d8>
 801b7c2:	4b0f      	ldr	r3, [pc, #60]	@ (801b800 <HAL_RCC_OscConfig+0x504>)
 801b7c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801b7c8:	4a0d      	ldr	r2, [pc, #52]	@ (801b800 <HAL_RCC_OscConfig+0x504>)
 801b7ca:	f043 0301 	orr.w	r3, r3, #1
 801b7ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 801b7d2:	e029      	b.n	801b828 <HAL_RCC_OscConfig+0x52c>
 801b7d4:	687b      	ldr	r3, [r7, #4]
 801b7d6:	689b      	ldr	r3, [r3, #8]
 801b7d8:	2b05      	cmp	r3, #5
 801b7da:	d115      	bne.n	801b808 <HAL_RCC_OscConfig+0x50c>
 801b7dc:	4b08      	ldr	r3, [pc, #32]	@ (801b800 <HAL_RCC_OscConfig+0x504>)
 801b7de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801b7e2:	4a07      	ldr	r2, [pc, #28]	@ (801b800 <HAL_RCC_OscConfig+0x504>)
 801b7e4:	f043 0304 	orr.w	r3, r3, #4
 801b7e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 801b7ec:	4b04      	ldr	r3, [pc, #16]	@ (801b800 <HAL_RCC_OscConfig+0x504>)
 801b7ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801b7f2:	4a03      	ldr	r2, [pc, #12]	@ (801b800 <HAL_RCC_OscConfig+0x504>)
 801b7f4:	f043 0301 	orr.w	r3, r3, #1
 801b7f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 801b7fc:	e014      	b.n	801b828 <HAL_RCC_OscConfig+0x52c>
 801b7fe:	bf00      	nop
 801b800:	40021000 	.word	0x40021000
 801b804:	40007000 	.word	0x40007000
 801b808:	4b9a      	ldr	r3, [pc, #616]	@ (801ba74 <HAL_RCC_OscConfig+0x778>)
 801b80a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801b80e:	4a99      	ldr	r2, [pc, #612]	@ (801ba74 <HAL_RCC_OscConfig+0x778>)
 801b810:	f023 0301 	bic.w	r3, r3, #1
 801b814:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 801b818:	4b96      	ldr	r3, [pc, #600]	@ (801ba74 <HAL_RCC_OscConfig+0x778>)
 801b81a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801b81e:	4a95      	ldr	r2, [pc, #596]	@ (801ba74 <HAL_RCC_OscConfig+0x778>)
 801b820:	f023 0304 	bic.w	r3, r3, #4
 801b824:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801b828:	687b      	ldr	r3, [r7, #4]
 801b82a:	689b      	ldr	r3, [r3, #8]
 801b82c:	2b00      	cmp	r3, #0
 801b82e:	d016      	beq.n	801b85e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b830:	f7ff f898 	bl	801a964 <HAL_GetTick>
 801b834:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801b836:	e00a      	b.n	801b84e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801b838:	f7ff f894 	bl	801a964 <HAL_GetTick>
 801b83c:	4602      	mov	r2, r0
 801b83e:	693b      	ldr	r3, [r7, #16]
 801b840:	1ad3      	subs	r3, r2, r3
 801b842:	f241 3288 	movw	r2, #5000	@ 0x1388
 801b846:	4293      	cmp	r3, r2
 801b848:	d901      	bls.n	801b84e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 801b84a:	2303      	movs	r3, #3
 801b84c:	e162      	b.n	801bb14 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801b84e:	4b89      	ldr	r3, [pc, #548]	@ (801ba74 <HAL_RCC_OscConfig+0x778>)
 801b850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801b854:	f003 0302 	and.w	r3, r3, #2
 801b858:	2b00      	cmp	r3, #0
 801b85a:	d0ed      	beq.n	801b838 <HAL_RCC_OscConfig+0x53c>
 801b85c:	e015      	b.n	801b88a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b85e:	f7ff f881 	bl	801a964 <HAL_GetTick>
 801b862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801b864:	e00a      	b.n	801b87c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801b866:	f7ff f87d 	bl	801a964 <HAL_GetTick>
 801b86a:	4602      	mov	r2, r0
 801b86c:	693b      	ldr	r3, [r7, #16]
 801b86e:	1ad3      	subs	r3, r2, r3
 801b870:	f241 3288 	movw	r2, #5000	@ 0x1388
 801b874:	4293      	cmp	r3, r2
 801b876:	d901      	bls.n	801b87c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 801b878:	2303      	movs	r3, #3
 801b87a:	e14b      	b.n	801bb14 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801b87c:	4b7d      	ldr	r3, [pc, #500]	@ (801ba74 <HAL_RCC_OscConfig+0x778>)
 801b87e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801b882:	f003 0302 	and.w	r3, r3, #2
 801b886:	2b00      	cmp	r3, #0
 801b888:	d1ed      	bne.n	801b866 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801b88a:	7ffb      	ldrb	r3, [r7, #31]
 801b88c:	2b01      	cmp	r3, #1
 801b88e:	d105      	bne.n	801b89c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801b890:	4b78      	ldr	r3, [pc, #480]	@ (801ba74 <HAL_RCC_OscConfig+0x778>)
 801b892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b894:	4a77      	ldr	r2, [pc, #476]	@ (801ba74 <HAL_RCC_OscConfig+0x778>)
 801b896:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801b89a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801b89c:	687b      	ldr	r3, [r7, #4]
 801b89e:	681b      	ldr	r3, [r3, #0]
 801b8a0:	f003 0320 	and.w	r3, r3, #32
 801b8a4:	2b00      	cmp	r3, #0
 801b8a6:	d03c      	beq.n	801b922 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801b8a8:	687b      	ldr	r3, [r7, #4]
 801b8aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b8ac:	2b00      	cmp	r3, #0
 801b8ae:	d01c      	beq.n	801b8ea <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801b8b0:	4b70      	ldr	r3, [pc, #448]	@ (801ba74 <HAL_RCC_OscConfig+0x778>)
 801b8b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801b8b6:	4a6f      	ldr	r2, [pc, #444]	@ (801ba74 <HAL_RCC_OscConfig+0x778>)
 801b8b8:	f043 0301 	orr.w	r3, r3, #1
 801b8bc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b8c0:	f7ff f850 	bl	801a964 <HAL_GetTick>
 801b8c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801b8c6:	e008      	b.n	801b8da <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b8c8:	f7ff f84c 	bl	801a964 <HAL_GetTick>
 801b8cc:	4602      	mov	r2, r0
 801b8ce:	693b      	ldr	r3, [r7, #16]
 801b8d0:	1ad3      	subs	r3, r2, r3
 801b8d2:	2b02      	cmp	r3, #2
 801b8d4:	d901      	bls.n	801b8da <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 801b8d6:	2303      	movs	r3, #3
 801b8d8:	e11c      	b.n	801bb14 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801b8da:	4b66      	ldr	r3, [pc, #408]	@ (801ba74 <HAL_RCC_OscConfig+0x778>)
 801b8dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801b8e0:	f003 0302 	and.w	r3, r3, #2
 801b8e4:	2b00      	cmp	r3, #0
 801b8e6:	d0ef      	beq.n	801b8c8 <HAL_RCC_OscConfig+0x5cc>
 801b8e8:	e01b      	b.n	801b922 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801b8ea:	4b62      	ldr	r3, [pc, #392]	@ (801ba74 <HAL_RCC_OscConfig+0x778>)
 801b8ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801b8f0:	4a60      	ldr	r2, [pc, #384]	@ (801ba74 <HAL_RCC_OscConfig+0x778>)
 801b8f2:	f023 0301 	bic.w	r3, r3, #1
 801b8f6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b8fa:	f7ff f833 	bl	801a964 <HAL_GetTick>
 801b8fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801b900:	e008      	b.n	801b914 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b902:	f7ff f82f 	bl	801a964 <HAL_GetTick>
 801b906:	4602      	mov	r2, r0
 801b908:	693b      	ldr	r3, [r7, #16]
 801b90a:	1ad3      	subs	r3, r2, r3
 801b90c:	2b02      	cmp	r3, #2
 801b90e:	d901      	bls.n	801b914 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 801b910:	2303      	movs	r3, #3
 801b912:	e0ff      	b.n	801bb14 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801b914:	4b57      	ldr	r3, [pc, #348]	@ (801ba74 <HAL_RCC_OscConfig+0x778>)
 801b916:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801b91a:	f003 0302 	and.w	r3, r3, #2
 801b91e:	2b00      	cmp	r3, #0
 801b920:	d1ef      	bne.n	801b902 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801b922:	687b      	ldr	r3, [r7, #4]
 801b924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b926:	2b00      	cmp	r3, #0
 801b928:	f000 80f3 	beq.w	801bb12 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 801b92c:	687b      	ldr	r3, [r7, #4]
 801b92e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b930:	2b02      	cmp	r3, #2
 801b932:	f040 80c9 	bne.w	801bac8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 801b936:	4b4f      	ldr	r3, [pc, #316]	@ (801ba74 <HAL_RCC_OscConfig+0x778>)
 801b938:	68db      	ldr	r3, [r3, #12]
 801b93a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 801b93c:	697b      	ldr	r3, [r7, #20]
 801b93e:	f003 0203 	and.w	r2, r3, #3
 801b942:	687b      	ldr	r3, [r7, #4]
 801b944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b946:	429a      	cmp	r2, r3
 801b948:	d12c      	bne.n	801b9a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801b94a:	697b      	ldr	r3, [r7, #20]
 801b94c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 801b950:	687b      	ldr	r3, [r7, #4]
 801b952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b954:	3b01      	subs	r3, #1
 801b956:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 801b958:	429a      	cmp	r2, r3
 801b95a:	d123      	bne.n	801b9a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801b95c:	697b      	ldr	r3, [r7, #20]
 801b95e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 801b962:	687b      	ldr	r3, [r7, #4]
 801b964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b966:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801b968:	429a      	cmp	r2, r3
 801b96a:	d11b      	bne.n	801b9a4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801b96c:	697b      	ldr	r3, [r7, #20]
 801b96e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 801b972:	687b      	ldr	r3, [r7, #4]
 801b974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801b976:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801b978:	429a      	cmp	r2, r3
 801b97a:	d113      	bne.n	801b9a4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801b97c:	697b      	ldr	r3, [r7, #20]
 801b97e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 801b982:	687b      	ldr	r3, [r7, #4]
 801b984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b986:	085b      	lsrs	r3, r3, #1
 801b988:	3b01      	subs	r3, #1
 801b98a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801b98c:	429a      	cmp	r2, r3
 801b98e:	d109      	bne.n	801b9a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 801b990:	697b      	ldr	r3, [r7, #20]
 801b992:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 801b996:	687b      	ldr	r3, [r7, #4]
 801b998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b99a:	085b      	lsrs	r3, r3, #1
 801b99c:	3b01      	subs	r3, #1
 801b99e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801b9a0:	429a      	cmp	r2, r3
 801b9a2:	d06b      	beq.n	801ba7c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 801b9a4:	69bb      	ldr	r3, [r7, #24]
 801b9a6:	2b0c      	cmp	r3, #12
 801b9a8:	d062      	beq.n	801ba70 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 801b9aa:	4b32      	ldr	r3, [pc, #200]	@ (801ba74 <HAL_RCC_OscConfig+0x778>)
 801b9ac:	681b      	ldr	r3, [r3, #0]
 801b9ae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801b9b2:	2b00      	cmp	r3, #0
 801b9b4:	d001      	beq.n	801b9ba <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 801b9b6:	2301      	movs	r3, #1
 801b9b8:	e0ac      	b.n	801bb14 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 801b9ba:	4b2e      	ldr	r3, [pc, #184]	@ (801ba74 <HAL_RCC_OscConfig+0x778>)
 801b9bc:	681b      	ldr	r3, [r3, #0]
 801b9be:	4a2d      	ldr	r2, [pc, #180]	@ (801ba74 <HAL_RCC_OscConfig+0x778>)
 801b9c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801b9c4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 801b9c6:	f7fe ffcd 	bl	801a964 <HAL_GetTick>
 801b9ca:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801b9cc:	e008      	b.n	801b9e0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b9ce:	f7fe ffc9 	bl	801a964 <HAL_GetTick>
 801b9d2:	4602      	mov	r2, r0
 801b9d4:	693b      	ldr	r3, [r7, #16]
 801b9d6:	1ad3      	subs	r3, r2, r3
 801b9d8:	2b02      	cmp	r3, #2
 801b9da:	d901      	bls.n	801b9e0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 801b9dc:	2303      	movs	r3, #3
 801b9de:	e099      	b.n	801bb14 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801b9e0:	4b24      	ldr	r3, [pc, #144]	@ (801ba74 <HAL_RCC_OscConfig+0x778>)
 801b9e2:	681b      	ldr	r3, [r3, #0]
 801b9e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801b9e8:	2b00      	cmp	r3, #0
 801b9ea:	d1f0      	bne.n	801b9ce <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801b9ec:	4b21      	ldr	r3, [pc, #132]	@ (801ba74 <HAL_RCC_OscConfig+0x778>)
 801b9ee:	68da      	ldr	r2, [r3, #12]
 801b9f0:	4b21      	ldr	r3, [pc, #132]	@ (801ba78 <HAL_RCC_OscConfig+0x77c>)
 801b9f2:	4013      	ands	r3, r2
 801b9f4:	687a      	ldr	r2, [r7, #4]
 801b9f6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 801b9f8:	687a      	ldr	r2, [r7, #4]
 801b9fa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801b9fc:	3a01      	subs	r2, #1
 801b9fe:	0112      	lsls	r2, r2, #4
 801ba00:	4311      	orrs	r1, r2
 801ba02:	687a      	ldr	r2, [r7, #4]
 801ba04:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 801ba06:	0212      	lsls	r2, r2, #8
 801ba08:	4311      	orrs	r1, r2
 801ba0a:	687a      	ldr	r2, [r7, #4]
 801ba0c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 801ba0e:	0852      	lsrs	r2, r2, #1
 801ba10:	3a01      	subs	r2, #1
 801ba12:	0552      	lsls	r2, r2, #21
 801ba14:	4311      	orrs	r1, r2
 801ba16:	687a      	ldr	r2, [r7, #4]
 801ba18:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 801ba1a:	0852      	lsrs	r2, r2, #1
 801ba1c:	3a01      	subs	r2, #1
 801ba1e:	0652      	lsls	r2, r2, #25
 801ba20:	4311      	orrs	r1, r2
 801ba22:	687a      	ldr	r2, [r7, #4]
 801ba24:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 801ba26:	06d2      	lsls	r2, r2, #27
 801ba28:	430a      	orrs	r2, r1
 801ba2a:	4912      	ldr	r1, [pc, #72]	@ (801ba74 <HAL_RCC_OscConfig+0x778>)
 801ba2c:	4313      	orrs	r3, r2
 801ba2e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 801ba30:	4b10      	ldr	r3, [pc, #64]	@ (801ba74 <HAL_RCC_OscConfig+0x778>)
 801ba32:	681b      	ldr	r3, [r3, #0]
 801ba34:	4a0f      	ldr	r2, [pc, #60]	@ (801ba74 <HAL_RCC_OscConfig+0x778>)
 801ba36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801ba3a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801ba3c:	4b0d      	ldr	r3, [pc, #52]	@ (801ba74 <HAL_RCC_OscConfig+0x778>)
 801ba3e:	68db      	ldr	r3, [r3, #12]
 801ba40:	4a0c      	ldr	r2, [pc, #48]	@ (801ba74 <HAL_RCC_OscConfig+0x778>)
 801ba42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801ba46:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 801ba48:	f7fe ff8c 	bl	801a964 <HAL_GetTick>
 801ba4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801ba4e:	e008      	b.n	801ba62 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801ba50:	f7fe ff88 	bl	801a964 <HAL_GetTick>
 801ba54:	4602      	mov	r2, r0
 801ba56:	693b      	ldr	r3, [r7, #16]
 801ba58:	1ad3      	subs	r3, r2, r3
 801ba5a:	2b02      	cmp	r3, #2
 801ba5c:	d901      	bls.n	801ba62 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 801ba5e:	2303      	movs	r3, #3
 801ba60:	e058      	b.n	801bb14 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801ba62:	4b04      	ldr	r3, [pc, #16]	@ (801ba74 <HAL_RCC_OscConfig+0x778>)
 801ba64:	681b      	ldr	r3, [r3, #0]
 801ba66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801ba6a:	2b00      	cmp	r3, #0
 801ba6c:	d0f0      	beq.n	801ba50 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 801ba6e:	e050      	b.n	801bb12 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 801ba70:	2301      	movs	r3, #1
 801ba72:	e04f      	b.n	801bb14 <HAL_RCC_OscConfig+0x818>
 801ba74:	40021000 	.word	0x40021000
 801ba78:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801ba7c:	4b27      	ldr	r3, [pc, #156]	@ (801bb1c <HAL_RCC_OscConfig+0x820>)
 801ba7e:	681b      	ldr	r3, [r3, #0]
 801ba80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801ba84:	2b00      	cmp	r3, #0
 801ba86:	d144      	bne.n	801bb12 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 801ba88:	4b24      	ldr	r3, [pc, #144]	@ (801bb1c <HAL_RCC_OscConfig+0x820>)
 801ba8a:	681b      	ldr	r3, [r3, #0]
 801ba8c:	4a23      	ldr	r2, [pc, #140]	@ (801bb1c <HAL_RCC_OscConfig+0x820>)
 801ba8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801ba92:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801ba94:	4b21      	ldr	r3, [pc, #132]	@ (801bb1c <HAL_RCC_OscConfig+0x820>)
 801ba96:	68db      	ldr	r3, [r3, #12]
 801ba98:	4a20      	ldr	r2, [pc, #128]	@ (801bb1c <HAL_RCC_OscConfig+0x820>)
 801ba9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801ba9e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801baa0:	f7fe ff60 	bl	801a964 <HAL_GetTick>
 801baa4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801baa6:	e008      	b.n	801baba <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801baa8:	f7fe ff5c 	bl	801a964 <HAL_GetTick>
 801baac:	4602      	mov	r2, r0
 801baae:	693b      	ldr	r3, [r7, #16]
 801bab0:	1ad3      	subs	r3, r2, r3
 801bab2:	2b02      	cmp	r3, #2
 801bab4:	d901      	bls.n	801baba <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 801bab6:	2303      	movs	r3, #3
 801bab8:	e02c      	b.n	801bb14 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801baba:	4b18      	ldr	r3, [pc, #96]	@ (801bb1c <HAL_RCC_OscConfig+0x820>)
 801babc:	681b      	ldr	r3, [r3, #0]
 801babe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801bac2:	2b00      	cmp	r3, #0
 801bac4:	d0f0      	beq.n	801baa8 <HAL_RCC_OscConfig+0x7ac>
 801bac6:	e024      	b.n	801bb12 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 801bac8:	69bb      	ldr	r3, [r7, #24]
 801baca:	2b0c      	cmp	r3, #12
 801bacc:	d01f      	beq.n	801bb0e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801bace:	4b13      	ldr	r3, [pc, #76]	@ (801bb1c <HAL_RCC_OscConfig+0x820>)
 801bad0:	681b      	ldr	r3, [r3, #0]
 801bad2:	4a12      	ldr	r2, [pc, #72]	@ (801bb1c <HAL_RCC_OscConfig+0x820>)
 801bad4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801bad8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bada:	f7fe ff43 	bl	801a964 <HAL_GetTick>
 801bade:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801bae0:	e008      	b.n	801baf4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801bae2:	f7fe ff3f 	bl	801a964 <HAL_GetTick>
 801bae6:	4602      	mov	r2, r0
 801bae8:	693b      	ldr	r3, [r7, #16]
 801baea:	1ad3      	subs	r3, r2, r3
 801baec:	2b02      	cmp	r3, #2
 801baee:	d901      	bls.n	801baf4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 801baf0:	2303      	movs	r3, #3
 801baf2:	e00f      	b.n	801bb14 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801baf4:	4b09      	ldr	r3, [pc, #36]	@ (801bb1c <HAL_RCC_OscConfig+0x820>)
 801baf6:	681b      	ldr	r3, [r3, #0]
 801baf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801bafc:	2b00      	cmp	r3, #0
 801bafe:	d1f0      	bne.n	801bae2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 801bb00:	4b06      	ldr	r3, [pc, #24]	@ (801bb1c <HAL_RCC_OscConfig+0x820>)
 801bb02:	68da      	ldr	r2, [r3, #12]
 801bb04:	4905      	ldr	r1, [pc, #20]	@ (801bb1c <HAL_RCC_OscConfig+0x820>)
 801bb06:	4b06      	ldr	r3, [pc, #24]	@ (801bb20 <HAL_RCC_OscConfig+0x824>)
 801bb08:	4013      	ands	r3, r2
 801bb0a:	60cb      	str	r3, [r1, #12]
 801bb0c:	e001      	b.n	801bb12 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 801bb0e:	2301      	movs	r3, #1
 801bb10:	e000      	b.n	801bb14 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 801bb12:	2300      	movs	r3, #0
}
 801bb14:	4618      	mov	r0, r3
 801bb16:	3720      	adds	r7, #32
 801bb18:	46bd      	mov	sp, r7
 801bb1a:	bd80      	pop	{r7, pc}
 801bb1c:	40021000 	.word	0x40021000
 801bb20:	feeefffc 	.word	0xfeeefffc

0801bb24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801bb24:	b580      	push	{r7, lr}
 801bb26:	b084      	sub	sp, #16
 801bb28:	af00      	add	r7, sp, #0
 801bb2a:	6078      	str	r0, [r7, #4]
 801bb2c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801bb2e:	687b      	ldr	r3, [r7, #4]
 801bb30:	2b00      	cmp	r3, #0
 801bb32:	d101      	bne.n	801bb38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801bb34:	2301      	movs	r3, #1
 801bb36:	e0e7      	b.n	801bd08 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801bb38:	4b75      	ldr	r3, [pc, #468]	@ (801bd10 <HAL_RCC_ClockConfig+0x1ec>)
 801bb3a:	681b      	ldr	r3, [r3, #0]
 801bb3c:	f003 0307 	and.w	r3, r3, #7
 801bb40:	683a      	ldr	r2, [r7, #0]
 801bb42:	429a      	cmp	r2, r3
 801bb44:	d910      	bls.n	801bb68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801bb46:	4b72      	ldr	r3, [pc, #456]	@ (801bd10 <HAL_RCC_ClockConfig+0x1ec>)
 801bb48:	681b      	ldr	r3, [r3, #0]
 801bb4a:	f023 0207 	bic.w	r2, r3, #7
 801bb4e:	4970      	ldr	r1, [pc, #448]	@ (801bd10 <HAL_RCC_ClockConfig+0x1ec>)
 801bb50:	683b      	ldr	r3, [r7, #0]
 801bb52:	4313      	orrs	r3, r2
 801bb54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801bb56:	4b6e      	ldr	r3, [pc, #440]	@ (801bd10 <HAL_RCC_ClockConfig+0x1ec>)
 801bb58:	681b      	ldr	r3, [r3, #0]
 801bb5a:	f003 0307 	and.w	r3, r3, #7
 801bb5e:	683a      	ldr	r2, [r7, #0]
 801bb60:	429a      	cmp	r2, r3
 801bb62:	d001      	beq.n	801bb68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801bb64:	2301      	movs	r3, #1
 801bb66:	e0cf      	b.n	801bd08 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801bb68:	687b      	ldr	r3, [r7, #4]
 801bb6a:	681b      	ldr	r3, [r3, #0]
 801bb6c:	f003 0302 	and.w	r3, r3, #2
 801bb70:	2b00      	cmp	r3, #0
 801bb72:	d010      	beq.n	801bb96 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 801bb74:	687b      	ldr	r3, [r7, #4]
 801bb76:	689a      	ldr	r2, [r3, #8]
 801bb78:	4b66      	ldr	r3, [pc, #408]	@ (801bd14 <HAL_RCC_ClockConfig+0x1f0>)
 801bb7a:	689b      	ldr	r3, [r3, #8]
 801bb7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801bb80:	429a      	cmp	r2, r3
 801bb82:	d908      	bls.n	801bb96 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801bb84:	4b63      	ldr	r3, [pc, #396]	@ (801bd14 <HAL_RCC_ClockConfig+0x1f0>)
 801bb86:	689b      	ldr	r3, [r3, #8]
 801bb88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 801bb8c:	687b      	ldr	r3, [r7, #4]
 801bb8e:	689b      	ldr	r3, [r3, #8]
 801bb90:	4960      	ldr	r1, [pc, #384]	@ (801bd14 <HAL_RCC_ClockConfig+0x1f0>)
 801bb92:	4313      	orrs	r3, r2
 801bb94:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801bb96:	687b      	ldr	r3, [r7, #4]
 801bb98:	681b      	ldr	r3, [r3, #0]
 801bb9a:	f003 0301 	and.w	r3, r3, #1
 801bb9e:	2b00      	cmp	r3, #0
 801bba0:	d04c      	beq.n	801bc3c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801bba2:	687b      	ldr	r3, [r7, #4]
 801bba4:	685b      	ldr	r3, [r3, #4]
 801bba6:	2b03      	cmp	r3, #3
 801bba8:	d107      	bne.n	801bbba <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801bbaa:	4b5a      	ldr	r3, [pc, #360]	@ (801bd14 <HAL_RCC_ClockConfig+0x1f0>)
 801bbac:	681b      	ldr	r3, [r3, #0]
 801bbae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801bbb2:	2b00      	cmp	r3, #0
 801bbb4:	d121      	bne.n	801bbfa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 801bbb6:	2301      	movs	r3, #1
 801bbb8:	e0a6      	b.n	801bd08 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801bbba:	687b      	ldr	r3, [r7, #4]
 801bbbc:	685b      	ldr	r3, [r3, #4]
 801bbbe:	2b02      	cmp	r3, #2
 801bbc0:	d107      	bne.n	801bbd2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801bbc2:	4b54      	ldr	r3, [pc, #336]	@ (801bd14 <HAL_RCC_ClockConfig+0x1f0>)
 801bbc4:	681b      	ldr	r3, [r3, #0]
 801bbc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801bbca:	2b00      	cmp	r3, #0
 801bbcc:	d115      	bne.n	801bbfa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 801bbce:	2301      	movs	r3, #1
 801bbd0:	e09a      	b.n	801bd08 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 801bbd2:	687b      	ldr	r3, [r7, #4]
 801bbd4:	685b      	ldr	r3, [r3, #4]
 801bbd6:	2b00      	cmp	r3, #0
 801bbd8:	d107      	bne.n	801bbea <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801bbda:	4b4e      	ldr	r3, [pc, #312]	@ (801bd14 <HAL_RCC_ClockConfig+0x1f0>)
 801bbdc:	681b      	ldr	r3, [r3, #0]
 801bbde:	f003 0302 	and.w	r3, r3, #2
 801bbe2:	2b00      	cmp	r3, #0
 801bbe4:	d109      	bne.n	801bbfa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 801bbe6:	2301      	movs	r3, #1
 801bbe8:	e08e      	b.n	801bd08 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801bbea:	4b4a      	ldr	r3, [pc, #296]	@ (801bd14 <HAL_RCC_ClockConfig+0x1f0>)
 801bbec:	681b      	ldr	r3, [r3, #0]
 801bbee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801bbf2:	2b00      	cmp	r3, #0
 801bbf4:	d101      	bne.n	801bbfa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 801bbf6:	2301      	movs	r3, #1
 801bbf8:	e086      	b.n	801bd08 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801bbfa:	4b46      	ldr	r3, [pc, #280]	@ (801bd14 <HAL_RCC_ClockConfig+0x1f0>)
 801bbfc:	689b      	ldr	r3, [r3, #8]
 801bbfe:	f023 0203 	bic.w	r2, r3, #3
 801bc02:	687b      	ldr	r3, [r7, #4]
 801bc04:	685b      	ldr	r3, [r3, #4]
 801bc06:	4943      	ldr	r1, [pc, #268]	@ (801bd14 <HAL_RCC_ClockConfig+0x1f0>)
 801bc08:	4313      	orrs	r3, r2
 801bc0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801bc0c:	f7fe feaa 	bl	801a964 <HAL_GetTick>
 801bc10:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801bc12:	e00a      	b.n	801bc2a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801bc14:	f7fe fea6 	bl	801a964 <HAL_GetTick>
 801bc18:	4602      	mov	r2, r0
 801bc1a:	68fb      	ldr	r3, [r7, #12]
 801bc1c:	1ad3      	subs	r3, r2, r3
 801bc1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 801bc22:	4293      	cmp	r3, r2
 801bc24:	d901      	bls.n	801bc2a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 801bc26:	2303      	movs	r3, #3
 801bc28:	e06e      	b.n	801bd08 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801bc2a:	4b3a      	ldr	r3, [pc, #232]	@ (801bd14 <HAL_RCC_ClockConfig+0x1f0>)
 801bc2c:	689b      	ldr	r3, [r3, #8]
 801bc2e:	f003 020c 	and.w	r2, r3, #12
 801bc32:	687b      	ldr	r3, [r7, #4]
 801bc34:	685b      	ldr	r3, [r3, #4]
 801bc36:	009b      	lsls	r3, r3, #2
 801bc38:	429a      	cmp	r2, r3
 801bc3a:	d1eb      	bne.n	801bc14 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801bc3c:	687b      	ldr	r3, [r7, #4]
 801bc3e:	681b      	ldr	r3, [r3, #0]
 801bc40:	f003 0302 	and.w	r3, r3, #2
 801bc44:	2b00      	cmp	r3, #0
 801bc46:	d010      	beq.n	801bc6a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 801bc48:	687b      	ldr	r3, [r7, #4]
 801bc4a:	689a      	ldr	r2, [r3, #8]
 801bc4c:	4b31      	ldr	r3, [pc, #196]	@ (801bd14 <HAL_RCC_ClockConfig+0x1f0>)
 801bc4e:	689b      	ldr	r3, [r3, #8]
 801bc50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801bc54:	429a      	cmp	r2, r3
 801bc56:	d208      	bcs.n	801bc6a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801bc58:	4b2e      	ldr	r3, [pc, #184]	@ (801bd14 <HAL_RCC_ClockConfig+0x1f0>)
 801bc5a:	689b      	ldr	r3, [r3, #8]
 801bc5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 801bc60:	687b      	ldr	r3, [r7, #4]
 801bc62:	689b      	ldr	r3, [r3, #8]
 801bc64:	492b      	ldr	r1, [pc, #172]	@ (801bd14 <HAL_RCC_ClockConfig+0x1f0>)
 801bc66:	4313      	orrs	r3, r2
 801bc68:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801bc6a:	4b29      	ldr	r3, [pc, #164]	@ (801bd10 <HAL_RCC_ClockConfig+0x1ec>)
 801bc6c:	681b      	ldr	r3, [r3, #0]
 801bc6e:	f003 0307 	and.w	r3, r3, #7
 801bc72:	683a      	ldr	r2, [r7, #0]
 801bc74:	429a      	cmp	r2, r3
 801bc76:	d210      	bcs.n	801bc9a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801bc78:	4b25      	ldr	r3, [pc, #148]	@ (801bd10 <HAL_RCC_ClockConfig+0x1ec>)
 801bc7a:	681b      	ldr	r3, [r3, #0]
 801bc7c:	f023 0207 	bic.w	r2, r3, #7
 801bc80:	4923      	ldr	r1, [pc, #140]	@ (801bd10 <HAL_RCC_ClockConfig+0x1ec>)
 801bc82:	683b      	ldr	r3, [r7, #0]
 801bc84:	4313      	orrs	r3, r2
 801bc86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801bc88:	4b21      	ldr	r3, [pc, #132]	@ (801bd10 <HAL_RCC_ClockConfig+0x1ec>)
 801bc8a:	681b      	ldr	r3, [r3, #0]
 801bc8c:	f003 0307 	and.w	r3, r3, #7
 801bc90:	683a      	ldr	r2, [r7, #0]
 801bc92:	429a      	cmp	r2, r3
 801bc94:	d001      	beq.n	801bc9a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 801bc96:	2301      	movs	r3, #1
 801bc98:	e036      	b.n	801bd08 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801bc9a:	687b      	ldr	r3, [r7, #4]
 801bc9c:	681b      	ldr	r3, [r3, #0]
 801bc9e:	f003 0304 	and.w	r3, r3, #4
 801bca2:	2b00      	cmp	r3, #0
 801bca4:	d008      	beq.n	801bcb8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801bca6:	4b1b      	ldr	r3, [pc, #108]	@ (801bd14 <HAL_RCC_ClockConfig+0x1f0>)
 801bca8:	689b      	ldr	r3, [r3, #8]
 801bcaa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801bcae:	687b      	ldr	r3, [r7, #4]
 801bcb0:	68db      	ldr	r3, [r3, #12]
 801bcb2:	4918      	ldr	r1, [pc, #96]	@ (801bd14 <HAL_RCC_ClockConfig+0x1f0>)
 801bcb4:	4313      	orrs	r3, r2
 801bcb6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801bcb8:	687b      	ldr	r3, [r7, #4]
 801bcba:	681b      	ldr	r3, [r3, #0]
 801bcbc:	f003 0308 	and.w	r3, r3, #8
 801bcc0:	2b00      	cmp	r3, #0
 801bcc2:	d009      	beq.n	801bcd8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801bcc4:	4b13      	ldr	r3, [pc, #76]	@ (801bd14 <HAL_RCC_ClockConfig+0x1f0>)
 801bcc6:	689b      	ldr	r3, [r3, #8]
 801bcc8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 801bccc:	687b      	ldr	r3, [r7, #4]
 801bcce:	691b      	ldr	r3, [r3, #16]
 801bcd0:	00db      	lsls	r3, r3, #3
 801bcd2:	4910      	ldr	r1, [pc, #64]	@ (801bd14 <HAL_RCC_ClockConfig+0x1f0>)
 801bcd4:	4313      	orrs	r3, r2
 801bcd6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801bcd8:	f000 f824 	bl	801bd24 <HAL_RCC_GetSysClockFreq>
 801bcdc:	4602      	mov	r2, r0
 801bcde:	4b0d      	ldr	r3, [pc, #52]	@ (801bd14 <HAL_RCC_ClockConfig+0x1f0>)
 801bce0:	689b      	ldr	r3, [r3, #8]
 801bce2:	091b      	lsrs	r3, r3, #4
 801bce4:	f003 030f 	and.w	r3, r3, #15
 801bce8:	490b      	ldr	r1, [pc, #44]	@ (801bd18 <HAL_RCC_ClockConfig+0x1f4>)
 801bcea:	5ccb      	ldrb	r3, [r1, r3]
 801bcec:	f003 031f 	and.w	r3, r3, #31
 801bcf0:	fa22 f303 	lsr.w	r3, r2, r3
 801bcf4:	4a09      	ldr	r2, [pc, #36]	@ (801bd1c <HAL_RCC_ClockConfig+0x1f8>)
 801bcf6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 801bcf8:	4b09      	ldr	r3, [pc, #36]	@ (801bd20 <HAL_RCC_ClockConfig+0x1fc>)
 801bcfa:	681b      	ldr	r3, [r3, #0]
 801bcfc:	4618      	mov	r0, r3
 801bcfe:	f7fe fde1 	bl	801a8c4 <HAL_InitTick>
 801bd02:	4603      	mov	r3, r0
 801bd04:	72fb      	strb	r3, [r7, #11]

  return status;
 801bd06:	7afb      	ldrb	r3, [r7, #11]
}
 801bd08:	4618      	mov	r0, r3
 801bd0a:	3710      	adds	r7, #16
 801bd0c:	46bd      	mov	sp, r7
 801bd0e:	bd80      	pop	{r7, pc}
 801bd10:	40022000 	.word	0x40022000
 801bd14:	40021000 	.word	0x40021000
 801bd18:	08023164 	.word	0x08023164
 801bd1c:	20000000 	.word	0x20000000
 801bd20:	20000070 	.word	0x20000070

0801bd24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801bd24:	b480      	push	{r7}
 801bd26:	b089      	sub	sp, #36	@ 0x24
 801bd28:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 801bd2a:	2300      	movs	r3, #0
 801bd2c:	61fb      	str	r3, [r7, #28]
 801bd2e:	2300      	movs	r3, #0
 801bd30:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801bd32:	4b3e      	ldr	r3, [pc, #248]	@ (801be2c <HAL_RCC_GetSysClockFreq+0x108>)
 801bd34:	689b      	ldr	r3, [r3, #8]
 801bd36:	f003 030c 	and.w	r3, r3, #12
 801bd3a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 801bd3c:	4b3b      	ldr	r3, [pc, #236]	@ (801be2c <HAL_RCC_GetSysClockFreq+0x108>)
 801bd3e:	68db      	ldr	r3, [r3, #12]
 801bd40:	f003 0303 	and.w	r3, r3, #3
 801bd44:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 801bd46:	693b      	ldr	r3, [r7, #16]
 801bd48:	2b00      	cmp	r3, #0
 801bd4a:	d005      	beq.n	801bd58 <HAL_RCC_GetSysClockFreq+0x34>
 801bd4c:	693b      	ldr	r3, [r7, #16]
 801bd4e:	2b0c      	cmp	r3, #12
 801bd50:	d121      	bne.n	801bd96 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 801bd52:	68fb      	ldr	r3, [r7, #12]
 801bd54:	2b01      	cmp	r3, #1
 801bd56:	d11e      	bne.n	801bd96 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 801bd58:	4b34      	ldr	r3, [pc, #208]	@ (801be2c <HAL_RCC_GetSysClockFreq+0x108>)
 801bd5a:	681b      	ldr	r3, [r3, #0]
 801bd5c:	f003 0308 	and.w	r3, r3, #8
 801bd60:	2b00      	cmp	r3, #0
 801bd62:	d107      	bne.n	801bd74 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 801bd64:	4b31      	ldr	r3, [pc, #196]	@ (801be2c <HAL_RCC_GetSysClockFreq+0x108>)
 801bd66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801bd6a:	0a1b      	lsrs	r3, r3, #8
 801bd6c:	f003 030f 	and.w	r3, r3, #15
 801bd70:	61fb      	str	r3, [r7, #28]
 801bd72:	e005      	b.n	801bd80 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 801bd74:	4b2d      	ldr	r3, [pc, #180]	@ (801be2c <HAL_RCC_GetSysClockFreq+0x108>)
 801bd76:	681b      	ldr	r3, [r3, #0]
 801bd78:	091b      	lsrs	r3, r3, #4
 801bd7a:	f003 030f 	and.w	r3, r3, #15
 801bd7e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 801bd80:	4a2b      	ldr	r2, [pc, #172]	@ (801be30 <HAL_RCC_GetSysClockFreq+0x10c>)
 801bd82:	69fb      	ldr	r3, [r7, #28]
 801bd84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bd88:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 801bd8a:	693b      	ldr	r3, [r7, #16]
 801bd8c:	2b00      	cmp	r3, #0
 801bd8e:	d10d      	bne.n	801bdac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 801bd90:	69fb      	ldr	r3, [r7, #28]
 801bd92:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 801bd94:	e00a      	b.n	801bdac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 801bd96:	693b      	ldr	r3, [r7, #16]
 801bd98:	2b04      	cmp	r3, #4
 801bd9a:	d102      	bne.n	801bda2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 801bd9c:	4b25      	ldr	r3, [pc, #148]	@ (801be34 <HAL_RCC_GetSysClockFreq+0x110>)
 801bd9e:	61bb      	str	r3, [r7, #24]
 801bda0:	e004      	b.n	801bdac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 801bda2:	693b      	ldr	r3, [r7, #16]
 801bda4:	2b08      	cmp	r3, #8
 801bda6:	d101      	bne.n	801bdac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 801bda8:	4b23      	ldr	r3, [pc, #140]	@ (801be38 <HAL_RCC_GetSysClockFreq+0x114>)
 801bdaa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 801bdac:	693b      	ldr	r3, [r7, #16]
 801bdae:	2b0c      	cmp	r3, #12
 801bdb0:	d134      	bne.n	801be1c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801bdb2:	4b1e      	ldr	r3, [pc, #120]	@ (801be2c <HAL_RCC_GetSysClockFreq+0x108>)
 801bdb4:	68db      	ldr	r3, [r3, #12]
 801bdb6:	f003 0303 	and.w	r3, r3, #3
 801bdba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 801bdbc:	68bb      	ldr	r3, [r7, #8]
 801bdbe:	2b02      	cmp	r3, #2
 801bdc0:	d003      	beq.n	801bdca <HAL_RCC_GetSysClockFreq+0xa6>
 801bdc2:	68bb      	ldr	r3, [r7, #8]
 801bdc4:	2b03      	cmp	r3, #3
 801bdc6:	d003      	beq.n	801bdd0 <HAL_RCC_GetSysClockFreq+0xac>
 801bdc8:	e005      	b.n	801bdd6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 801bdca:	4b1a      	ldr	r3, [pc, #104]	@ (801be34 <HAL_RCC_GetSysClockFreq+0x110>)
 801bdcc:	617b      	str	r3, [r7, #20]
      break;
 801bdce:	e005      	b.n	801bddc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 801bdd0:	4b19      	ldr	r3, [pc, #100]	@ (801be38 <HAL_RCC_GetSysClockFreq+0x114>)
 801bdd2:	617b      	str	r3, [r7, #20]
      break;
 801bdd4:	e002      	b.n	801bddc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 801bdd6:	69fb      	ldr	r3, [r7, #28]
 801bdd8:	617b      	str	r3, [r7, #20]
      break;
 801bdda:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801bddc:	4b13      	ldr	r3, [pc, #76]	@ (801be2c <HAL_RCC_GetSysClockFreq+0x108>)
 801bdde:	68db      	ldr	r3, [r3, #12]
 801bde0:	091b      	lsrs	r3, r3, #4
 801bde2:	f003 0307 	and.w	r3, r3, #7
 801bde6:	3301      	adds	r3, #1
 801bde8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 801bdea:	4b10      	ldr	r3, [pc, #64]	@ (801be2c <HAL_RCC_GetSysClockFreq+0x108>)
 801bdec:	68db      	ldr	r3, [r3, #12]
 801bdee:	0a1b      	lsrs	r3, r3, #8
 801bdf0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801bdf4:	697a      	ldr	r2, [r7, #20]
 801bdf6:	fb03 f202 	mul.w	r2, r3, r2
 801bdfa:	687b      	ldr	r3, [r7, #4]
 801bdfc:	fbb2 f3f3 	udiv	r3, r2, r3
 801be00:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801be02:	4b0a      	ldr	r3, [pc, #40]	@ (801be2c <HAL_RCC_GetSysClockFreq+0x108>)
 801be04:	68db      	ldr	r3, [r3, #12]
 801be06:	0e5b      	lsrs	r3, r3, #25
 801be08:	f003 0303 	and.w	r3, r3, #3
 801be0c:	3301      	adds	r3, #1
 801be0e:	005b      	lsls	r3, r3, #1
 801be10:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 801be12:	697a      	ldr	r2, [r7, #20]
 801be14:	683b      	ldr	r3, [r7, #0]
 801be16:	fbb2 f3f3 	udiv	r3, r2, r3
 801be1a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 801be1c:	69bb      	ldr	r3, [r7, #24]
}
 801be1e:	4618      	mov	r0, r3
 801be20:	3724      	adds	r7, #36	@ 0x24
 801be22:	46bd      	mov	sp, r7
 801be24:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be28:	4770      	bx	lr
 801be2a:	bf00      	nop
 801be2c:	40021000 	.word	0x40021000
 801be30:	0802317c 	.word	0x0802317c
 801be34:	00f42400 	.word	0x00f42400
 801be38:	007a1200 	.word	0x007a1200

0801be3c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801be3c:	b480      	push	{r7}
 801be3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801be40:	4b03      	ldr	r3, [pc, #12]	@ (801be50 <HAL_RCC_GetHCLKFreq+0x14>)
 801be42:	681b      	ldr	r3, [r3, #0]
}
 801be44:	4618      	mov	r0, r3
 801be46:	46bd      	mov	sp, r7
 801be48:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be4c:	4770      	bx	lr
 801be4e:	bf00      	nop
 801be50:	20000000 	.word	0x20000000

0801be54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801be54:	b580      	push	{r7, lr}
 801be56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 801be58:	f7ff fff0 	bl	801be3c <HAL_RCC_GetHCLKFreq>
 801be5c:	4602      	mov	r2, r0
 801be5e:	4b06      	ldr	r3, [pc, #24]	@ (801be78 <HAL_RCC_GetPCLK1Freq+0x24>)
 801be60:	689b      	ldr	r3, [r3, #8]
 801be62:	0a1b      	lsrs	r3, r3, #8
 801be64:	f003 0307 	and.w	r3, r3, #7
 801be68:	4904      	ldr	r1, [pc, #16]	@ (801be7c <HAL_RCC_GetPCLK1Freq+0x28>)
 801be6a:	5ccb      	ldrb	r3, [r1, r3]
 801be6c:	f003 031f 	and.w	r3, r3, #31
 801be70:	fa22 f303 	lsr.w	r3, r2, r3
}
 801be74:	4618      	mov	r0, r3
 801be76:	bd80      	pop	{r7, pc}
 801be78:	40021000 	.word	0x40021000
 801be7c:	08023174 	.word	0x08023174

0801be80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801be80:	b580      	push	{r7, lr}
 801be82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 801be84:	f7ff ffda 	bl	801be3c <HAL_RCC_GetHCLKFreq>
 801be88:	4602      	mov	r2, r0
 801be8a:	4b06      	ldr	r3, [pc, #24]	@ (801bea4 <HAL_RCC_GetPCLK2Freq+0x24>)
 801be8c:	689b      	ldr	r3, [r3, #8]
 801be8e:	0adb      	lsrs	r3, r3, #11
 801be90:	f003 0307 	and.w	r3, r3, #7
 801be94:	4904      	ldr	r1, [pc, #16]	@ (801bea8 <HAL_RCC_GetPCLK2Freq+0x28>)
 801be96:	5ccb      	ldrb	r3, [r1, r3]
 801be98:	f003 031f 	and.w	r3, r3, #31
 801be9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 801bea0:	4618      	mov	r0, r3
 801bea2:	bd80      	pop	{r7, pc}
 801bea4:	40021000 	.word	0x40021000
 801bea8:	08023174 	.word	0x08023174

0801beac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 801beac:	b580      	push	{r7, lr}
 801beae:	b086      	sub	sp, #24
 801beb0:	af00      	add	r7, sp, #0
 801beb2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 801beb4:	2300      	movs	r3, #0
 801beb6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 801beb8:	4b2a      	ldr	r3, [pc, #168]	@ (801bf64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801beba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801bebc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801bec0:	2b00      	cmp	r3, #0
 801bec2:	d003      	beq.n	801becc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 801bec4:	f7ff f9b6 	bl	801b234 <HAL_PWREx_GetVoltageRange>
 801bec8:	6178      	str	r0, [r7, #20]
 801beca:	e014      	b.n	801bef6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 801becc:	4b25      	ldr	r3, [pc, #148]	@ (801bf64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801bece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801bed0:	4a24      	ldr	r2, [pc, #144]	@ (801bf64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801bed2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801bed6:	6593      	str	r3, [r2, #88]	@ 0x58
 801bed8:	4b22      	ldr	r3, [pc, #136]	@ (801bf64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801beda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801bedc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801bee0:	60fb      	str	r3, [r7, #12]
 801bee2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 801bee4:	f7ff f9a6 	bl	801b234 <HAL_PWREx_GetVoltageRange>
 801bee8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 801beea:	4b1e      	ldr	r3, [pc, #120]	@ (801bf64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801beec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801beee:	4a1d      	ldr	r2, [pc, #116]	@ (801bf64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801bef0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801bef4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 801bef6:	697b      	ldr	r3, [r7, #20]
 801bef8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801befc:	d10b      	bne.n	801bf16 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 801befe:	687b      	ldr	r3, [r7, #4]
 801bf00:	2b80      	cmp	r3, #128	@ 0x80
 801bf02:	d919      	bls.n	801bf38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 801bf04:	687b      	ldr	r3, [r7, #4]
 801bf06:	2ba0      	cmp	r3, #160	@ 0xa0
 801bf08:	d902      	bls.n	801bf10 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 801bf0a:	2302      	movs	r3, #2
 801bf0c:	613b      	str	r3, [r7, #16]
 801bf0e:	e013      	b.n	801bf38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 801bf10:	2301      	movs	r3, #1
 801bf12:	613b      	str	r3, [r7, #16]
 801bf14:	e010      	b.n	801bf38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 801bf16:	687b      	ldr	r3, [r7, #4]
 801bf18:	2b80      	cmp	r3, #128	@ 0x80
 801bf1a:	d902      	bls.n	801bf22 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 801bf1c:	2303      	movs	r3, #3
 801bf1e:	613b      	str	r3, [r7, #16]
 801bf20:	e00a      	b.n	801bf38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 801bf22:	687b      	ldr	r3, [r7, #4]
 801bf24:	2b80      	cmp	r3, #128	@ 0x80
 801bf26:	d102      	bne.n	801bf2e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 801bf28:	2302      	movs	r3, #2
 801bf2a:	613b      	str	r3, [r7, #16]
 801bf2c:	e004      	b.n	801bf38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 801bf2e:	687b      	ldr	r3, [r7, #4]
 801bf30:	2b70      	cmp	r3, #112	@ 0x70
 801bf32:	d101      	bne.n	801bf38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 801bf34:	2301      	movs	r3, #1
 801bf36:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 801bf38:	4b0b      	ldr	r3, [pc, #44]	@ (801bf68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801bf3a:	681b      	ldr	r3, [r3, #0]
 801bf3c:	f023 0207 	bic.w	r2, r3, #7
 801bf40:	4909      	ldr	r1, [pc, #36]	@ (801bf68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801bf42:	693b      	ldr	r3, [r7, #16]
 801bf44:	4313      	orrs	r3, r2
 801bf46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 801bf48:	4b07      	ldr	r3, [pc, #28]	@ (801bf68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801bf4a:	681b      	ldr	r3, [r3, #0]
 801bf4c:	f003 0307 	and.w	r3, r3, #7
 801bf50:	693a      	ldr	r2, [r7, #16]
 801bf52:	429a      	cmp	r2, r3
 801bf54:	d001      	beq.n	801bf5a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 801bf56:	2301      	movs	r3, #1
 801bf58:	e000      	b.n	801bf5c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 801bf5a:	2300      	movs	r3, #0
}
 801bf5c:	4618      	mov	r0, r3
 801bf5e:	3718      	adds	r7, #24
 801bf60:	46bd      	mov	sp, r7
 801bf62:	bd80      	pop	{r7, pc}
 801bf64:	40021000 	.word	0x40021000
 801bf68:	40022000 	.word	0x40022000

0801bf6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801bf6c:	b580      	push	{r7, lr}
 801bf6e:	b086      	sub	sp, #24
 801bf70:	af00      	add	r7, sp, #0
 801bf72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801bf74:	2300      	movs	r3, #0
 801bf76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801bf78:	2300      	movs	r3, #0
 801bf7a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 801bf7c:	687b      	ldr	r3, [r7, #4]
 801bf7e:	681b      	ldr	r3, [r3, #0]
 801bf80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801bf84:	2b00      	cmp	r3, #0
 801bf86:	d031      	beq.n	801bfec <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 801bf88:	687b      	ldr	r3, [r7, #4]
 801bf8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801bf8c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 801bf90:	d01a      	beq.n	801bfc8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 801bf92:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 801bf96:	d814      	bhi.n	801bfc2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 801bf98:	2b00      	cmp	r3, #0
 801bf9a:	d009      	beq.n	801bfb0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 801bf9c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801bfa0:	d10f      	bne.n	801bfc2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 801bfa2:	4b5d      	ldr	r3, [pc, #372]	@ (801c118 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801bfa4:	68db      	ldr	r3, [r3, #12]
 801bfa6:	4a5c      	ldr	r2, [pc, #368]	@ (801c118 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801bfa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801bfac:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 801bfae:	e00c      	b.n	801bfca <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 801bfb0:	687b      	ldr	r3, [r7, #4]
 801bfb2:	3304      	adds	r3, #4
 801bfb4:	2100      	movs	r1, #0
 801bfb6:	4618      	mov	r0, r3
 801bfb8:	f000 f9f0 	bl	801c39c <RCCEx_PLLSAI1_Config>
 801bfbc:	4603      	mov	r3, r0
 801bfbe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 801bfc0:	e003      	b.n	801bfca <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801bfc2:	2301      	movs	r3, #1
 801bfc4:	74fb      	strb	r3, [r7, #19]
      break;
 801bfc6:	e000      	b.n	801bfca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 801bfc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 801bfca:	7cfb      	ldrb	r3, [r7, #19]
 801bfcc:	2b00      	cmp	r3, #0
 801bfce:	d10b      	bne.n	801bfe8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801bfd0:	4b51      	ldr	r3, [pc, #324]	@ (801c118 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801bfd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801bfd6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 801bfda:	687b      	ldr	r3, [r7, #4]
 801bfdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801bfde:	494e      	ldr	r1, [pc, #312]	@ (801c118 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801bfe0:	4313      	orrs	r3, r2
 801bfe2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 801bfe6:	e001      	b.n	801bfec <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801bfe8:	7cfb      	ldrb	r3, [r7, #19]
 801bfea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801bfec:	687b      	ldr	r3, [r7, #4]
 801bfee:	681b      	ldr	r3, [r3, #0]
 801bff0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801bff4:	2b00      	cmp	r3, #0
 801bff6:	f000 809e 	beq.w	801c136 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 801bffa:	2300      	movs	r3, #0
 801bffc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 801bffe:	4b46      	ldr	r3, [pc, #280]	@ (801c118 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801c000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801c002:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801c006:	2b00      	cmp	r3, #0
 801c008:	d101      	bne.n	801c00e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 801c00a:	2301      	movs	r3, #1
 801c00c:	e000      	b.n	801c010 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 801c00e:	2300      	movs	r3, #0
 801c010:	2b00      	cmp	r3, #0
 801c012:	d00d      	beq.n	801c030 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801c014:	4b40      	ldr	r3, [pc, #256]	@ (801c118 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801c016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801c018:	4a3f      	ldr	r2, [pc, #252]	@ (801c118 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801c01a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801c01e:	6593      	str	r3, [r2, #88]	@ 0x58
 801c020:	4b3d      	ldr	r3, [pc, #244]	@ (801c118 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801c022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801c024:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801c028:	60bb      	str	r3, [r7, #8]
 801c02a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801c02c:	2301      	movs	r3, #1
 801c02e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801c030:	4b3a      	ldr	r3, [pc, #232]	@ (801c11c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 801c032:	681b      	ldr	r3, [r3, #0]
 801c034:	4a39      	ldr	r2, [pc, #228]	@ (801c11c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 801c036:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801c03a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801c03c:	f7fe fc92 	bl	801a964 <HAL_GetTick>
 801c040:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 801c042:	e009      	b.n	801c058 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801c044:	f7fe fc8e 	bl	801a964 <HAL_GetTick>
 801c048:	4602      	mov	r2, r0
 801c04a:	68fb      	ldr	r3, [r7, #12]
 801c04c:	1ad3      	subs	r3, r2, r3
 801c04e:	2b02      	cmp	r3, #2
 801c050:	d902      	bls.n	801c058 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 801c052:	2303      	movs	r3, #3
 801c054:	74fb      	strb	r3, [r7, #19]
        break;
 801c056:	e005      	b.n	801c064 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 801c058:	4b30      	ldr	r3, [pc, #192]	@ (801c11c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 801c05a:	681b      	ldr	r3, [r3, #0]
 801c05c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c060:	2b00      	cmp	r3, #0
 801c062:	d0ef      	beq.n	801c044 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 801c064:	7cfb      	ldrb	r3, [r7, #19]
 801c066:	2b00      	cmp	r3, #0
 801c068:	d15a      	bne.n	801c120 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 801c06a:	4b2b      	ldr	r3, [pc, #172]	@ (801c118 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801c06c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c070:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801c074:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 801c076:	697b      	ldr	r3, [r7, #20]
 801c078:	2b00      	cmp	r3, #0
 801c07a:	d01e      	beq.n	801c0ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
 801c07c:	687b      	ldr	r3, [r7, #4]
 801c07e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801c080:	697a      	ldr	r2, [r7, #20]
 801c082:	429a      	cmp	r2, r3
 801c084:	d019      	beq.n	801c0ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 801c086:	4b24      	ldr	r3, [pc, #144]	@ (801c118 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801c088:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c08c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801c090:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801c092:	4b21      	ldr	r3, [pc, #132]	@ (801c118 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801c094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c098:	4a1f      	ldr	r2, [pc, #124]	@ (801c118 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801c09a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801c09e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 801c0a2:	4b1d      	ldr	r3, [pc, #116]	@ (801c118 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801c0a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c0a8:	4a1b      	ldr	r2, [pc, #108]	@ (801c118 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801c0aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801c0ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 801c0b2:	4a19      	ldr	r2, [pc, #100]	@ (801c118 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801c0b4:	697b      	ldr	r3, [r7, #20]
 801c0b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 801c0ba:	697b      	ldr	r3, [r7, #20]
 801c0bc:	f003 0301 	and.w	r3, r3, #1
 801c0c0:	2b00      	cmp	r3, #0
 801c0c2:	d016      	beq.n	801c0f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c0c4:	f7fe fc4e 	bl	801a964 <HAL_GetTick>
 801c0c8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801c0ca:	e00b      	b.n	801c0e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c0cc:	f7fe fc4a 	bl	801a964 <HAL_GetTick>
 801c0d0:	4602      	mov	r2, r0
 801c0d2:	68fb      	ldr	r3, [r7, #12]
 801c0d4:	1ad3      	subs	r3, r2, r3
 801c0d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 801c0da:	4293      	cmp	r3, r2
 801c0dc:	d902      	bls.n	801c0e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 801c0de:	2303      	movs	r3, #3
 801c0e0:	74fb      	strb	r3, [r7, #19]
            break;
 801c0e2:	e006      	b.n	801c0f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801c0e4:	4b0c      	ldr	r3, [pc, #48]	@ (801c118 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801c0e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c0ea:	f003 0302 	and.w	r3, r3, #2
 801c0ee:	2b00      	cmp	r3, #0
 801c0f0:	d0ec      	beq.n	801c0cc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 801c0f2:	7cfb      	ldrb	r3, [r7, #19]
 801c0f4:	2b00      	cmp	r3, #0
 801c0f6:	d10b      	bne.n	801c110 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801c0f8:	4b07      	ldr	r3, [pc, #28]	@ (801c118 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801c0fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c0fe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 801c102:	687b      	ldr	r3, [r7, #4]
 801c104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801c106:	4904      	ldr	r1, [pc, #16]	@ (801c118 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801c108:	4313      	orrs	r3, r2
 801c10a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 801c10e:	e009      	b.n	801c124 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801c110:	7cfb      	ldrb	r3, [r7, #19]
 801c112:	74bb      	strb	r3, [r7, #18]
 801c114:	e006      	b.n	801c124 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 801c116:	bf00      	nop
 801c118:	40021000 	.word	0x40021000
 801c11c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c120:	7cfb      	ldrb	r3, [r7, #19]
 801c122:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801c124:	7c7b      	ldrb	r3, [r7, #17]
 801c126:	2b01      	cmp	r3, #1
 801c128:	d105      	bne.n	801c136 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801c12a:	4b9b      	ldr	r3, [pc, #620]	@ (801c398 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801c12c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801c12e:	4a9a      	ldr	r2, [pc, #616]	@ (801c398 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801c130:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801c134:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801c136:	687b      	ldr	r3, [r7, #4]
 801c138:	681b      	ldr	r3, [r3, #0]
 801c13a:	f003 0301 	and.w	r3, r3, #1
 801c13e:	2b00      	cmp	r3, #0
 801c140:	d00a      	beq.n	801c158 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801c142:	4b95      	ldr	r3, [pc, #596]	@ (801c398 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801c144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801c148:	f023 0203 	bic.w	r2, r3, #3
 801c14c:	687b      	ldr	r3, [r7, #4]
 801c14e:	6a1b      	ldr	r3, [r3, #32]
 801c150:	4991      	ldr	r1, [pc, #580]	@ (801c398 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801c152:	4313      	orrs	r3, r2
 801c154:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801c158:	687b      	ldr	r3, [r7, #4]
 801c15a:	681b      	ldr	r3, [r3, #0]
 801c15c:	f003 0302 	and.w	r3, r3, #2
 801c160:	2b00      	cmp	r3, #0
 801c162:	d00a      	beq.n	801c17a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801c164:	4b8c      	ldr	r3, [pc, #560]	@ (801c398 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801c166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801c16a:	f023 020c 	bic.w	r2, r3, #12
 801c16e:	687b      	ldr	r3, [r7, #4]
 801c170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c172:	4989      	ldr	r1, [pc, #548]	@ (801c398 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801c174:	4313      	orrs	r3, r2
 801c176:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801c17a:	687b      	ldr	r3, [r7, #4]
 801c17c:	681b      	ldr	r3, [r3, #0]
 801c17e:	f003 0304 	and.w	r3, r3, #4
 801c182:	2b00      	cmp	r3, #0
 801c184:	d00a      	beq.n	801c19c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801c186:	4b84      	ldr	r3, [pc, #528]	@ (801c398 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801c188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801c18c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 801c190:	687b      	ldr	r3, [r7, #4]
 801c192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c194:	4980      	ldr	r1, [pc, #512]	@ (801c398 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801c196:	4313      	orrs	r3, r2
 801c198:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801c19c:	687b      	ldr	r3, [r7, #4]
 801c19e:	681b      	ldr	r3, [r3, #0]
 801c1a0:	f003 0320 	and.w	r3, r3, #32
 801c1a4:	2b00      	cmp	r3, #0
 801c1a6:	d00a      	beq.n	801c1be <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801c1a8:	4b7b      	ldr	r3, [pc, #492]	@ (801c398 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801c1aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801c1ae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801c1b2:	687b      	ldr	r3, [r7, #4]
 801c1b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c1b6:	4978      	ldr	r1, [pc, #480]	@ (801c398 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801c1b8:	4313      	orrs	r3, r2
 801c1ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801c1be:	687b      	ldr	r3, [r7, #4]
 801c1c0:	681b      	ldr	r3, [r3, #0]
 801c1c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801c1c6:	2b00      	cmp	r3, #0
 801c1c8:	d00a      	beq.n	801c1e0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801c1ca:	4b73      	ldr	r3, [pc, #460]	@ (801c398 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801c1cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801c1d0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 801c1d4:	687b      	ldr	r3, [r7, #4]
 801c1d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c1d8:	496f      	ldr	r1, [pc, #444]	@ (801c398 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801c1da:	4313      	orrs	r3, r2
 801c1dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 801c1e0:	687b      	ldr	r3, [r7, #4]
 801c1e2:	681b      	ldr	r3, [r3, #0]
 801c1e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801c1e8:	2b00      	cmp	r3, #0
 801c1ea:	d00a      	beq.n	801c202 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801c1ec:	4b6a      	ldr	r3, [pc, #424]	@ (801c398 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801c1ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801c1f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 801c1f6:	687b      	ldr	r3, [r7, #4]
 801c1f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c1fa:	4967      	ldr	r1, [pc, #412]	@ (801c398 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801c1fc:	4313      	orrs	r3, r2
 801c1fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801c202:	687b      	ldr	r3, [r7, #4]
 801c204:	681b      	ldr	r3, [r3, #0]
 801c206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c20a:	2b00      	cmp	r3, #0
 801c20c:	d00a      	beq.n	801c224 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801c20e:	4b62      	ldr	r3, [pc, #392]	@ (801c398 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801c210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801c214:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 801c218:	687b      	ldr	r3, [r7, #4]
 801c21a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c21c:	495e      	ldr	r1, [pc, #376]	@ (801c398 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801c21e:	4313      	orrs	r3, r2
 801c220:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801c224:	687b      	ldr	r3, [r7, #4]
 801c226:	681b      	ldr	r3, [r3, #0]
 801c228:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801c22c:	2b00      	cmp	r3, #0
 801c22e:	d00a      	beq.n	801c246 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801c230:	4b59      	ldr	r3, [pc, #356]	@ (801c398 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801c232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801c236:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 801c23a:	687b      	ldr	r3, [r7, #4]
 801c23c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c23e:	4956      	ldr	r1, [pc, #344]	@ (801c398 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801c240:	4313      	orrs	r3, r2
 801c242:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801c246:	687b      	ldr	r3, [r7, #4]
 801c248:	681b      	ldr	r3, [r3, #0]
 801c24a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c24e:	2b00      	cmp	r3, #0
 801c250:	d00a      	beq.n	801c268 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801c252:	4b51      	ldr	r3, [pc, #324]	@ (801c398 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801c254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801c258:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 801c25c:	687b      	ldr	r3, [r7, #4]
 801c25e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c260:	494d      	ldr	r1, [pc, #308]	@ (801c398 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801c262:	4313      	orrs	r3, r2
 801c264:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 801c268:	687b      	ldr	r3, [r7, #4]
 801c26a:	681b      	ldr	r3, [r3, #0]
 801c26c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801c270:	2b00      	cmp	r3, #0
 801c272:	d028      	beq.n	801c2c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 801c274:	4b48      	ldr	r3, [pc, #288]	@ (801c398 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801c276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801c27a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 801c27e:	687b      	ldr	r3, [r7, #4]
 801c280:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801c282:	4945      	ldr	r1, [pc, #276]	@ (801c398 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801c284:	4313      	orrs	r3, r2
 801c286:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 801c28a:	687b      	ldr	r3, [r7, #4]
 801c28c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801c28e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801c292:	d106      	bne.n	801c2a2 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801c294:	4b40      	ldr	r3, [pc, #256]	@ (801c398 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801c296:	68db      	ldr	r3, [r3, #12]
 801c298:	4a3f      	ldr	r2, [pc, #252]	@ (801c398 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801c29a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801c29e:	60d3      	str	r3, [r2, #12]
 801c2a0:	e011      	b.n	801c2c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 801c2a2:	687b      	ldr	r3, [r7, #4]
 801c2a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801c2a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801c2aa:	d10c      	bne.n	801c2c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 801c2ac:	687b      	ldr	r3, [r7, #4]
 801c2ae:	3304      	adds	r3, #4
 801c2b0:	2101      	movs	r1, #1
 801c2b2:	4618      	mov	r0, r3
 801c2b4:	f000 f872 	bl	801c39c <RCCEx_PLLSAI1_Config>
 801c2b8:	4603      	mov	r3, r0
 801c2ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 801c2bc:	7cfb      	ldrb	r3, [r7, #19]
 801c2be:	2b00      	cmp	r3, #0
 801c2c0:	d001      	beq.n	801c2c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 801c2c2:	7cfb      	ldrb	r3, [r7, #19]
 801c2c4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 801c2c6:	687b      	ldr	r3, [r7, #4]
 801c2c8:	681b      	ldr	r3, [r3, #0]
 801c2ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801c2ce:	2b00      	cmp	r3, #0
 801c2d0:	d028      	beq.n	801c324 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801c2d2:	4b31      	ldr	r3, [pc, #196]	@ (801c398 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801c2d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801c2d8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 801c2dc:	687b      	ldr	r3, [r7, #4]
 801c2de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c2e0:	492d      	ldr	r1, [pc, #180]	@ (801c398 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801c2e2:	4313      	orrs	r3, r2
 801c2e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801c2e8:	687b      	ldr	r3, [r7, #4]
 801c2ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c2ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801c2f0:	d106      	bne.n	801c300 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801c2f2:	4b29      	ldr	r3, [pc, #164]	@ (801c398 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801c2f4:	68db      	ldr	r3, [r3, #12]
 801c2f6:	4a28      	ldr	r2, [pc, #160]	@ (801c398 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801c2f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801c2fc:	60d3      	str	r3, [r2, #12]
 801c2fe:	e011      	b.n	801c324 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 801c300:	687b      	ldr	r3, [r7, #4]
 801c302:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c304:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801c308:	d10c      	bne.n	801c324 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 801c30a:	687b      	ldr	r3, [r7, #4]
 801c30c:	3304      	adds	r3, #4
 801c30e:	2101      	movs	r1, #1
 801c310:	4618      	mov	r0, r3
 801c312:	f000 f843 	bl	801c39c <RCCEx_PLLSAI1_Config>
 801c316:	4603      	mov	r3, r0
 801c318:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 801c31a:	7cfb      	ldrb	r3, [r7, #19]
 801c31c:	2b00      	cmp	r3, #0
 801c31e:	d001      	beq.n	801c324 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 801c320:	7cfb      	ldrb	r3, [r7, #19]
 801c322:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801c324:	687b      	ldr	r3, [r7, #4]
 801c326:	681b      	ldr	r3, [r3, #0]
 801c328:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801c32c:	2b00      	cmp	r3, #0
 801c32e:	d01c      	beq.n	801c36a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801c330:	4b19      	ldr	r3, [pc, #100]	@ (801c398 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801c332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801c336:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 801c33a:	687b      	ldr	r3, [r7, #4]
 801c33c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c33e:	4916      	ldr	r1, [pc, #88]	@ (801c398 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801c340:	4313      	orrs	r3, r2
 801c342:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 801c346:	687b      	ldr	r3, [r7, #4]
 801c348:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c34a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801c34e:	d10c      	bne.n	801c36a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 801c350:	687b      	ldr	r3, [r7, #4]
 801c352:	3304      	adds	r3, #4
 801c354:	2102      	movs	r1, #2
 801c356:	4618      	mov	r0, r3
 801c358:	f000 f820 	bl	801c39c <RCCEx_PLLSAI1_Config>
 801c35c:	4603      	mov	r3, r0
 801c35e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 801c360:	7cfb      	ldrb	r3, [r7, #19]
 801c362:	2b00      	cmp	r3, #0
 801c364:	d001      	beq.n	801c36a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 801c366:	7cfb      	ldrb	r3, [r7, #19]
 801c368:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801c36a:	687b      	ldr	r3, [r7, #4]
 801c36c:	681b      	ldr	r3, [r3, #0]
 801c36e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801c372:	2b00      	cmp	r3, #0
 801c374:	d00a      	beq.n	801c38c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801c376:	4b08      	ldr	r3, [pc, #32]	@ (801c398 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801c378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801c37c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 801c380:	687b      	ldr	r3, [r7, #4]
 801c382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c384:	4904      	ldr	r1, [pc, #16]	@ (801c398 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801c386:	4313      	orrs	r3, r2
 801c388:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 801c38c:	7cbb      	ldrb	r3, [r7, #18]
}
 801c38e:	4618      	mov	r0, r3
 801c390:	3718      	adds	r7, #24
 801c392:	46bd      	mov	sp, r7
 801c394:	bd80      	pop	{r7, pc}
 801c396:	bf00      	nop
 801c398:	40021000 	.word	0x40021000

0801c39c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 801c39c:	b580      	push	{r7, lr}
 801c39e:	b084      	sub	sp, #16
 801c3a0:	af00      	add	r7, sp, #0
 801c3a2:	6078      	str	r0, [r7, #4]
 801c3a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801c3a6:	2300      	movs	r3, #0
 801c3a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 801c3aa:	4b74      	ldr	r3, [pc, #464]	@ (801c57c <RCCEx_PLLSAI1_Config+0x1e0>)
 801c3ac:	68db      	ldr	r3, [r3, #12]
 801c3ae:	f003 0303 	and.w	r3, r3, #3
 801c3b2:	2b00      	cmp	r3, #0
 801c3b4:	d018      	beq.n	801c3e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 801c3b6:	4b71      	ldr	r3, [pc, #452]	@ (801c57c <RCCEx_PLLSAI1_Config+0x1e0>)
 801c3b8:	68db      	ldr	r3, [r3, #12]
 801c3ba:	f003 0203 	and.w	r2, r3, #3
 801c3be:	687b      	ldr	r3, [r7, #4]
 801c3c0:	681b      	ldr	r3, [r3, #0]
 801c3c2:	429a      	cmp	r2, r3
 801c3c4:	d10d      	bne.n	801c3e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 801c3c6:	687b      	ldr	r3, [r7, #4]
 801c3c8:	681b      	ldr	r3, [r3, #0]
       ||
 801c3ca:	2b00      	cmp	r3, #0
 801c3cc:	d009      	beq.n	801c3e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 801c3ce:	4b6b      	ldr	r3, [pc, #428]	@ (801c57c <RCCEx_PLLSAI1_Config+0x1e0>)
 801c3d0:	68db      	ldr	r3, [r3, #12]
 801c3d2:	091b      	lsrs	r3, r3, #4
 801c3d4:	f003 0307 	and.w	r3, r3, #7
 801c3d8:	1c5a      	adds	r2, r3, #1
 801c3da:	687b      	ldr	r3, [r7, #4]
 801c3dc:	685b      	ldr	r3, [r3, #4]
       ||
 801c3de:	429a      	cmp	r2, r3
 801c3e0:	d047      	beq.n	801c472 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 801c3e2:	2301      	movs	r3, #1
 801c3e4:	73fb      	strb	r3, [r7, #15]
 801c3e6:	e044      	b.n	801c472 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 801c3e8:	687b      	ldr	r3, [r7, #4]
 801c3ea:	681b      	ldr	r3, [r3, #0]
 801c3ec:	2b03      	cmp	r3, #3
 801c3ee:	d018      	beq.n	801c422 <RCCEx_PLLSAI1_Config+0x86>
 801c3f0:	2b03      	cmp	r3, #3
 801c3f2:	d825      	bhi.n	801c440 <RCCEx_PLLSAI1_Config+0xa4>
 801c3f4:	2b01      	cmp	r3, #1
 801c3f6:	d002      	beq.n	801c3fe <RCCEx_PLLSAI1_Config+0x62>
 801c3f8:	2b02      	cmp	r3, #2
 801c3fa:	d009      	beq.n	801c410 <RCCEx_PLLSAI1_Config+0x74>
 801c3fc:	e020      	b.n	801c440 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 801c3fe:	4b5f      	ldr	r3, [pc, #380]	@ (801c57c <RCCEx_PLLSAI1_Config+0x1e0>)
 801c400:	681b      	ldr	r3, [r3, #0]
 801c402:	f003 0302 	and.w	r3, r3, #2
 801c406:	2b00      	cmp	r3, #0
 801c408:	d11d      	bne.n	801c446 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 801c40a:	2301      	movs	r3, #1
 801c40c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801c40e:	e01a      	b.n	801c446 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 801c410:	4b5a      	ldr	r3, [pc, #360]	@ (801c57c <RCCEx_PLLSAI1_Config+0x1e0>)
 801c412:	681b      	ldr	r3, [r3, #0]
 801c414:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801c418:	2b00      	cmp	r3, #0
 801c41a:	d116      	bne.n	801c44a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 801c41c:	2301      	movs	r3, #1
 801c41e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801c420:	e013      	b.n	801c44a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 801c422:	4b56      	ldr	r3, [pc, #344]	@ (801c57c <RCCEx_PLLSAI1_Config+0x1e0>)
 801c424:	681b      	ldr	r3, [r3, #0]
 801c426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801c42a:	2b00      	cmp	r3, #0
 801c42c:	d10f      	bne.n	801c44e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 801c42e:	4b53      	ldr	r3, [pc, #332]	@ (801c57c <RCCEx_PLLSAI1_Config+0x1e0>)
 801c430:	681b      	ldr	r3, [r3, #0]
 801c432:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801c436:	2b00      	cmp	r3, #0
 801c438:	d109      	bne.n	801c44e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 801c43a:	2301      	movs	r3, #1
 801c43c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801c43e:	e006      	b.n	801c44e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 801c440:	2301      	movs	r3, #1
 801c442:	73fb      	strb	r3, [r7, #15]
      break;
 801c444:	e004      	b.n	801c450 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 801c446:	bf00      	nop
 801c448:	e002      	b.n	801c450 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 801c44a:	bf00      	nop
 801c44c:	e000      	b.n	801c450 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 801c44e:	bf00      	nop
    }

    if(status == HAL_OK)
 801c450:	7bfb      	ldrb	r3, [r7, #15]
 801c452:	2b00      	cmp	r3, #0
 801c454:	d10d      	bne.n	801c472 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 801c456:	4b49      	ldr	r3, [pc, #292]	@ (801c57c <RCCEx_PLLSAI1_Config+0x1e0>)
 801c458:	68db      	ldr	r3, [r3, #12]
 801c45a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 801c45e:	687b      	ldr	r3, [r7, #4]
 801c460:	6819      	ldr	r1, [r3, #0]
 801c462:	687b      	ldr	r3, [r7, #4]
 801c464:	685b      	ldr	r3, [r3, #4]
 801c466:	3b01      	subs	r3, #1
 801c468:	011b      	lsls	r3, r3, #4
 801c46a:	430b      	orrs	r3, r1
 801c46c:	4943      	ldr	r1, [pc, #268]	@ (801c57c <RCCEx_PLLSAI1_Config+0x1e0>)
 801c46e:	4313      	orrs	r3, r2
 801c470:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 801c472:	7bfb      	ldrb	r3, [r7, #15]
 801c474:	2b00      	cmp	r3, #0
 801c476:	d17c      	bne.n	801c572 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 801c478:	4b40      	ldr	r3, [pc, #256]	@ (801c57c <RCCEx_PLLSAI1_Config+0x1e0>)
 801c47a:	681b      	ldr	r3, [r3, #0]
 801c47c:	4a3f      	ldr	r2, [pc, #252]	@ (801c57c <RCCEx_PLLSAI1_Config+0x1e0>)
 801c47e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801c482:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c484:	f7fe fa6e 	bl	801a964 <HAL_GetTick>
 801c488:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 801c48a:	e009      	b.n	801c4a0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801c48c:	f7fe fa6a 	bl	801a964 <HAL_GetTick>
 801c490:	4602      	mov	r2, r0
 801c492:	68bb      	ldr	r3, [r7, #8]
 801c494:	1ad3      	subs	r3, r2, r3
 801c496:	2b02      	cmp	r3, #2
 801c498:	d902      	bls.n	801c4a0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 801c49a:	2303      	movs	r3, #3
 801c49c:	73fb      	strb	r3, [r7, #15]
        break;
 801c49e:	e005      	b.n	801c4ac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 801c4a0:	4b36      	ldr	r3, [pc, #216]	@ (801c57c <RCCEx_PLLSAI1_Config+0x1e0>)
 801c4a2:	681b      	ldr	r3, [r3, #0]
 801c4a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801c4a8:	2b00      	cmp	r3, #0
 801c4aa:	d1ef      	bne.n	801c48c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 801c4ac:	7bfb      	ldrb	r3, [r7, #15]
 801c4ae:	2b00      	cmp	r3, #0
 801c4b0:	d15f      	bne.n	801c572 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 801c4b2:	683b      	ldr	r3, [r7, #0]
 801c4b4:	2b00      	cmp	r3, #0
 801c4b6:	d110      	bne.n	801c4da <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801c4b8:	4b30      	ldr	r3, [pc, #192]	@ (801c57c <RCCEx_PLLSAI1_Config+0x1e0>)
 801c4ba:	691b      	ldr	r3, [r3, #16]
 801c4bc:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 801c4c0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 801c4c4:	687a      	ldr	r2, [r7, #4]
 801c4c6:	6892      	ldr	r2, [r2, #8]
 801c4c8:	0211      	lsls	r1, r2, #8
 801c4ca:	687a      	ldr	r2, [r7, #4]
 801c4cc:	68d2      	ldr	r2, [r2, #12]
 801c4ce:	06d2      	lsls	r2, r2, #27
 801c4d0:	430a      	orrs	r2, r1
 801c4d2:	492a      	ldr	r1, [pc, #168]	@ (801c57c <RCCEx_PLLSAI1_Config+0x1e0>)
 801c4d4:	4313      	orrs	r3, r2
 801c4d6:	610b      	str	r3, [r1, #16]
 801c4d8:	e027      	b.n	801c52a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 801c4da:	683b      	ldr	r3, [r7, #0]
 801c4dc:	2b01      	cmp	r3, #1
 801c4de:	d112      	bne.n	801c506 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801c4e0:	4b26      	ldr	r3, [pc, #152]	@ (801c57c <RCCEx_PLLSAI1_Config+0x1e0>)
 801c4e2:	691b      	ldr	r3, [r3, #16]
 801c4e4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 801c4e8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 801c4ec:	687a      	ldr	r2, [r7, #4]
 801c4ee:	6892      	ldr	r2, [r2, #8]
 801c4f0:	0211      	lsls	r1, r2, #8
 801c4f2:	687a      	ldr	r2, [r7, #4]
 801c4f4:	6912      	ldr	r2, [r2, #16]
 801c4f6:	0852      	lsrs	r2, r2, #1
 801c4f8:	3a01      	subs	r2, #1
 801c4fa:	0552      	lsls	r2, r2, #21
 801c4fc:	430a      	orrs	r2, r1
 801c4fe:	491f      	ldr	r1, [pc, #124]	@ (801c57c <RCCEx_PLLSAI1_Config+0x1e0>)
 801c500:	4313      	orrs	r3, r2
 801c502:	610b      	str	r3, [r1, #16]
 801c504:	e011      	b.n	801c52a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801c506:	4b1d      	ldr	r3, [pc, #116]	@ (801c57c <RCCEx_PLLSAI1_Config+0x1e0>)
 801c508:	691b      	ldr	r3, [r3, #16]
 801c50a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 801c50e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 801c512:	687a      	ldr	r2, [r7, #4]
 801c514:	6892      	ldr	r2, [r2, #8]
 801c516:	0211      	lsls	r1, r2, #8
 801c518:	687a      	ldr	r2, [r7, #4]
 801c51a:	6952      	ldr	r2, [r2, #20]
 801c51c:	0852      	lsrs	r2, r2, #1
 801c51e:	3a01      	subs	r2, #1
 801c520:	0652      	lsls	r2, r2, #25
 801c522:	430a      	orrs	r2, r1
 801c524:	4915      	ldr	r1, [pc, #84]	@ (801c57c <RCCEx_PLLSAI1_Config+0x1e0>)
 801c526:	4313      	orrs	r3, r2
 801c528:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 801c52a:	4b14      	ldr	r3, [pc, #80]	@ (801c57c <RCCEx_PLLSAI1_Config+0x1e0>)
 801c52c:	681b      	ldr	r3, [r3, #0]
 801c52e:	4a13      	ldr	r2, [pc, #76]	@ (801c57c <RCCEx_PLLSAI1_Config+0x1e0>)
 801c530:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801c534:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c536:	f7fe fa15 	bl	801a964 <HAL_GetTick>
 801c53a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 801c53c:	e009      	b.n	801c552 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801c53e:	f7fe fa11 	bl	801a964 <HAL_GetTick>
 801c542:	4602      	mov	r2, r0
 801c544:	68bb      	ldr	r3, [r7, #8]
 801c546:	1ad3      	subs	r3, r2, r3
 801c548:	2b02      	cmp	r3, #2
 801c54a:	d902      	bls.n	801c552 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 801c54c:	2303      	movs	r3, #3
 801c54e:	73fb      	strb	r3, [r7, #15]
          break;
 801c550:	e005      	b.n	801c55e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 801c552:	4b0a      	ldr	r3, [pc, #40]	@ (801c57c <RCCEx_PLLSAI1_Config+0x1e0>)
 801c554:	681b      	ldr	r3, [r3, #0]
 801c556:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801c55a:	2b00      	cmp	r3, #0
 801c55c:	d0ef      	beq.n	801c53e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 801c55e:	7bfb      	ldrb	r3, [r7, #15]
 801c560:	2b00      	cmp	r3, #0
 801c562:	d106      	bne.n	801c572 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 801c564:	4b05      	ldr	r3, [pc, #20]	@ (801c57c <RCCEx_PLLSAI1_Config+0x1e0>)
 801c566:	691a      	ldr	r2, [r3, #16]
 801c568:	687b      	ldr	r3, [r7, #4]
 801c56a:	699b      	ldr	r3, [r3, #24]
 801c56c:	4903      	ldr	r1, [pc, #12]	@ (801c57c <RCCEx_PLLSAI1_Config+0x1e0>)
 801c56e:	4313      	orrs	r3, r2
 801c570:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 801c572:	7bfb      	ldrb	r3, [r7, #15]
}
 801c574:	4618      	mov	r0, r3
 801c576:	3710      	adds	r7, #16
 801c578:	46bd      	mov	sp, r7
 801c57a:	bd80      	pop	{r7, pc}
 801c57c:	40021000 	.word	0x40021000

0801c580 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801c580:	b580      	push	{r7, lr}
 801c582:	b084      	sub	sp, #16
 801c584:	af00      	add	r7, sp, #0
 801c586:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801c588:	687b      	ldr	r3, [r7, #4]
 801c58a:	2b00      	cmp	r3, #0
 801c58c:	d101      	bne.n	801c592 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801c58e:	2301      	movs	r3, #1
 801c590:	e095      	b.n	801c6be <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801c592:	687b      	ldr	r3, [r7, #4]
 801c594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c596:	2b00      	cmp	r3, #0
 801c598:	d108      	bne.n	801c5ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801c59a:	687b      	ldr	r3, [r7, #4]
 801c59c:	685b      	ldr	r3, [r3, #4]
 801c59e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801c5a2:	d009      	beq.n	801c5b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801c5a4:	687b      	ldr	r3, [r7, #4]
 801c5a6:	2200      	movs	r2, #0
 801c5a8:	61da      	str	r2, [r3, #28]
 801c5aa:	e005      	b.n	801c5b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801c5ac:	687b      	ldr	r3, [r7, #4]
 801c5ae:	2200      	movs	r2, #0
 801c5b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801c5b2:	687b      	ldr	r3, [r7, #4]
 801c5b4:	2200      	movs	r2, #0
 801c5b6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801c5b8:	687b      	ldr	r3, [r7, #4]
 801c5ba:	2200      	movs	r2, #0
 801c5bc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801c5be:	687b      	ldr	r3, [r7, #4]
 801c5c0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 801c5c4:	b2db      	uxtb	r3, r3
 801c5c6:	2b00      	cmp	r3, #0
 801c5c8:	d106      	bne.n	801c5d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801c5ca:	687b      	ldr	r3, [r7, #4]
 801c5cc:	2200      	movs	r2, #0
 801c5ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801c5d2:	6878      	ldr	r0, [r7, #4]
 801c5d4:	f7e4 fe12 	bl	80011fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801c5d8:	687b      	ldr	r3, [r7, #4]
 801c5da:	2202      	movs	r2, #2
 801c5dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801c5e0:	687b      	ldr	r3, [r7, #4]
 801c5e2:	681b      	ldr	r3, [r3, #0]
 801c5e4:	681a      	ldr	r2, [r3, #0]
 801c5e6:	687b      	ldr	r3, [r7, #4]
 801c5e8:	681b      	ldr	r3, [r3, #0]
 801c5ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801c5ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801c5f0:	687b      	ldr	r3, [r7, #4]
 801c5f2:	68db      	ldr	r3, [r3, #12]
 801c5f4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 801c5f8:	d902      	bls.n	801c600 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801c5fa:	2300      	movs	r3, #0
 801c5fc:	60fb      	str	r3, [r7, #12]
 801c5fe:	e002      	b.n	801c606 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801c600:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801c604:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801c606:	687b      	ldr	r3, [r7, #4]
 801c608:	68db      	ldr	r3, [r3, #12]
 801c60a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 801c60e:	d007      	beq.n	801c620 <HAL_SPI_Init+0xa0>
 801c610:	687b      	ldr	r3, [r7, #4]
 801c612:	68db      	ldr	r3, [r3, #12]
 801c614:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 801c618:	d002      	beq.n	801c620 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801c61a:	687b      	ldr	r3, [r7, #4]
 801c61c:	2200      	movs	r2, #0
 801c61e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801c620:	687b      	ldr	r3, [r7, #4]
 801c622:	685b      	ldr	r3, [r3, #4]
 801c624:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 801c628:	687b      	ldr	r3, [r7, #4]
 801c62a:	689b      	ldr	r3, [r3, #8]
 801c62c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 801c630:	431a      	orrs	r2, r3
 801c632:	687b      	ldr	r3, [r7, #4]
 801c634:	691b      	ldr	r3, [r3, #16]
 801c636:	f003 0302 	and.w	r3, r3, #2
 801c63a:	431a      	orrs	r2, r3
 801c63c:	687b      	ldr	r3, [r7, #4]
 801c63e:	695b      	ldr	r3, [r3, #20]
 801c640:	f003 0301 	and.w	r3, r3, #1
 801c644:	431a      	orrs	r2, r3
 801c646:	687b      	ldr	r3, [r7, #4]
 801c648:	699b      	ldr	r3, [r3, #24]
 801c64a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801c64e:	431a      	orrs	r2, r3
 801c650:	687b      	ldr	r3, [r7, #4]
 801c652:	69db      	ldr	r3, [r3, #28]
 801c654:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801c658:	431a      	orrs	r2, r3
 801c65a:	687b      	ldr	r3, [r7, #4]
 801c65c:	6a1b      	ldr	r3, [r3, #32]
 801c65e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801c662:	ea42 0103 	orr.w	r1, r2, r3
 801c666:	687b      	ldr	r3, [r7, #4]
 801c668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c66a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 801c66e:	687b      	ldr	r3, [r7, #4]
 801c670:	681b      	ldr	r3, [r3, #0]
 801c672:	430a      	orrs	r2, r1
 801c674:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801c676:	687b      	ldr	r3, [r7, #4]
 801c678:	699b      	ldr	r3, [r3, #24]
 801c67a:	0c1b      	lsrs	r3, r3, #16
 801c67c:	f003 0204 	and.w	r2, r3, #4
 801c680:	687b      	ldr	r3, [r7, #4]
 801c682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c684:	f003 0310 	and.w	r3, r3, #16
 801c688:	431a      	orrs	r2, r3
 801c68a:	687b      	ldr	r3, [r7, #4]
 801c68c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c68e:	f003 0308 	and.w	r3, r3, #8
 801c692:	431a      	orrs	r2, r3
 801c694:	687b      	ldr	r3, [r7, #4]
 801c696:	68db      	ldr	r3, [r3, #12]
 801c698:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 801c69c:	ea42 0103 	orr.w	r1, r2, r3
 801c6a0:	68fb      	ldr	r3, [r7, #12]
 801c6a2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 801c6a6:	687b      	ldr	r3, [r7, #4]
 801c6a8:	681b      	ldr	r3, [r3, #0]
 801c6aa:	430a      	orrs	r2, r1
 801c6ac:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801c6ae:	687b      	ldr	r3, [r7, #4]
 801c6b0:	2200      	movs	r2, #0
 801c6b2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801c6b4:	687b      	ldr	r3, [r7, #4]
 801c6b6:	2201      	movs	r2, #1
 801c6b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 801c6bc:	2300      	movs	r3, #0
}
 801c6be:	4618      	mov	r0, r3
 801c6c0:	3710      	adds	r7, #16
 801c6c2:	46bd      	mov	sp, r7
 801c6c4:	bd80      	pop	{r7, pc}

0801c6c6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 801c6c6:	b580      	push	{r7, lr}
 801c6c8:	b08a      	sub	sp, #40	@ 0x28
 801c6ca:	af00      	add	r7, sp, #0
 801c6cc:	60f8      	str	r0, [r7, #12]
 801c6ce:	60b9      	str	r1, [r7, #8]
 801c6d0:	607a      	str	r2, [r7, #4]
 801c6d2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801c6d4:	2301      	movs	r3, #1
 801c6d6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c6d8:	f7fe f944 	bl	801a964 <HAL_GetTick>
 801c6dc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801c6de:	68fb      	ldr	r3, [r7, #12]
 801c6e0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 801c6e4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 801c6e6:	68fb      	ldr	r3, [r7, #12]
 801c6e8:	685b      	ldr	r3, [r3, #4]
 801c6ea:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 801c6ec:	887b      	ldrh	r3, [r7, #2]
 801c6ee:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 801c6f0:	887b      	ldrh	r3, [r7, #2]
 801c6f2:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801c6f4:	7ffb      	ldrb	r3, [r7, #31]
 801c6f6:	2b01      	cmp	r3, #1
 801c6f8:	d00c      	beq.n	801c714 <HAL_SPI_TransmitReceive+0x4e>
 801c6fa:	69bb      	ldr	r3, [r7, #24]
 801c6fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801c700:	d106      	bne.n	801c710 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 801c702:	68fb      	ldr	r3, [r7, #12]
 801c704:	689b      	ldr	r3, [r3, #8]
 801c706:	2b00      	cmp	r3, #0
 801c708:	d102      	bne.n	801c710 <HAL_SPI_TransmitReceive+0x4a>
 801c70a:	7ffb      	ldrb	r3, [r7, #31]
 801c70c:	2b04      	cmp	r3, #4
 801c70e:	d001      	beq.n	801c714 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 801c710:	2302      	movs	r3, #2
 801c712:	e1f3      	b.n	801cafc <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801c714:	68bb      	ldr	r3, [r7, #8]
 801c716:	2b00      	cmp	r3, #0
 801c718:	d005      	beq.n	801c726 <HAL_SPI_TransmitReceive+0x60>
 801c71a:	687b      	ldr	r3, [r7, #4]
 801c71c:	2b00      	cmp	r3, #0
 801c71e:	d002      	beq.n	801c726 <HAL_SPI_TransmitReceive+0x60>
 801c720:	887b      	ldrh	r3, [r7, #2]
 801c722:	2b00      	cmp	r3, #0
 801c724:	d101      	bne.n	801c72a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 801c726:	2301      	movs	r3, #1
 801c728:	e1e8      	b.n	801cafc <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c72a:	68fb      	ldr	r3, [r7, #12]
 801c72c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 801c730:	2b01      	cmp	r3, #1
 801c732:	d101      	bne.n	801c738 <HAL_SPI_TransmitReceive+0x72>
 801c734:	2302      	movs	r3, #2
 801c736:	e1e1      	b.n	801cafc <HAL_SPI_TransmitReceive+0x436>
 801c738:	68fb      	ldr	r3, [r7, #12]
 801c73a:	2201      	movs	r2, #1
 801c73c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801c740:	68fb      	ldr	r3, [r7, #12]
 801c742:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 801c746:	b2db      	uxtb	r3, r3
 801c748:	2b04      	cmp	r3, #4
 801c74a:	d003      	beq.n	801c754 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801c74c:	68fb      	ldr	r3, [r7, #12]
 801c74e:	2205      	movs	r2, #5
 801c750:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c754:	68fb      	ldr	r3, [r7, #12]
 801c756:	2200      	movs	r2, #0
 801c758:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801c75a:	68fb      	ldr	r3, [r7, #12]
 801c75c:	687a      	ldr	r2, [r7, #4]
 801c75e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 801c760:	68fb      	ldr	r3, [r7, #12]
 801c762:	887a      	ldrh	r2, [r7, #2]
 801c764:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 801c768:	68fb      	ldr	r3, [r7, #12]
 801c76a:	887a      	ldrh	r2, [r7, #2]
 801c76c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 801c770:	68fb      	ldr	r3, [r7, #12]
 801c772:	68ba      	ldr	r2, [r7, #8]
 801c774:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 801c776:	68fb      	ldr	r3, [r7, #12]
 801c778:	887a      	ldrh	r2, [r7, #2]
 801c77a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 801c77c:	68fb      	ldr	r3, [r7, #12]
 801c77e:	887a      	ldrh	r2, [r7, #2]
 801c780:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801c782:	68fb      	ldr	r3, [r7, #12]
 801c784:	2200      	movs	r2, #0
 801c786:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 801c788:	68fb      	ldr	r3, [r7, #12]
 801c78a:	2200      	movs	r2, #0
 801c78c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 801c78e:	68fb      	ldr	r3, [r7, #12]
 801c790:	68db      	ldr	r3, [r3, #12]
 801c792:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 801c796:	d802      	bhi.n	801c79e <HAL_SPI_TransmitReceive+0xd8>
 801c798:	8abb      	ldrh	r3, [r7, #20]
 801c79a:	2b01      	cmp	r3, #1
 801c79c:	d908      	bls.n	801c7b0 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801c79e:	68fb      	ldr	r3, [r7, #12]
 801c7a0:	681b      	ldr	r3, [r3, #0]
 801c7a2:	685a      	ldr	r2, [r3, #4]
 801c7a4:	68fb      	ldr	r3, [r7, #12]
 801c7a6:	681b      	ldr	r3, [r3, #0]
 801c7a8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 801c7ac:	605a      	str	r2, [r3, #4]
 801c7ae:	e007      	b.n	801c7c0 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801c7b0:	68fb      	ldr	r3, [r7, #12]
 801c7b2:	681b      	ldr	r3, [r3, #0]
 801c7b4:	685a      	ldr	r2, [r3, #4]
 801c7b6:	68fb      	ldr	r3, [r7, #12]
 801c7b8:	681b      	ldr	r3, [r3, #0]
 801c7ba:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 801c7be:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c7c0:	68fb      	ldr	r3, [r7, #12]
 801c7c2:	681b      	ldr	r3, [r3, #0]
 801c7c4:	681b      	ldr	r3, [r3, #0]
 801c7c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c7ca:	2b40      	cmp	r3, #64	@ 0x40
 801c7cc:	d007      	beq.n	801c7de <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c7ce:	68fb      	ldr	r3, [r7, #12]
 801c7d0:	681b      	ldr	r3, [r3, #0]
 801c7d2:	681a      	ldr	r2, [r3, #0]
 801c7d4:	68fb      	ldr	r3, [r7, #12]
 801c7d6:	681b      	ldr	r3, [r3, #0]
 801c7d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801c7dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801c7de:	68fb      	ldr	r3, [r7, #12]
 801c7e0:	68db      	ldr	r3, [r3, #12]
 801c7e2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 801c7e6:	f240 8083 	bls.w	801c8f0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c7ea:	68fb      	ldr	r3, [r7, #12]
 801c7ec:	685b      	ldr	r3, [r3, #4]
 801c7ee:	2b00      	cmp	r3, #0
 801c7f0:	d002      	beq.n	801c7f8 <HAL_SPI_TransmitReceive+0x132>
 801c7f2:	8afb      	ldrh	r3, [r7, #22]
 801c7f4:	2b01      	cmp	r3, #1
 801c7f6:	d16f      	bne.n	801c8d8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801c7f8:	68fb      	ldr	r3, [r7, #12]
 801c7fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c7fc:	881a      	ldrh	r2, [r3, #0]
 801c7fe:	68fb      	ldr	r3, [r7, #12]
 801c800:	681b      	ldr	r3, [r3, #0]
 801c802:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801c804:	68fb      	ldr	r3, [r7, #12]
 801c806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c808:	1c9a      	adds	r2, r3, #2
 801c80a:	68fb      	ldr	r3, [r7, #12]
 801c80c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 801c80e:	68fb      	ldr	r3, [r7, #12]
 801c810:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801c812:	b29b      	uxth	r3, r3
 801c814:	3b01      	subs	r3, #1
 801c816:	b29a      	uxth	r2, r3
 801c818:	68fb      	ldr	r3, [r7, #12]
 801c81a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c81c:	e05c      	b.n	801c8d8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801c81e:	68fb      	ldr	r3, [r7, #12]
 801c820:	681b      	ldr	r3, [r3, #0]
 801c822:	689b      	ldr	r3, [r3, #8]
 801c824:	f003 0302 	and.w	r3, r3, #2
 801c828:	2b02      	cmp	r3, #2
 801c82a:	d11b      	bne.n	801c864 <HAL_SPI_TransmitReceive+0x19e>
 801c82c:	68fb      	ldr	r3, [r7, #12]
 801c82e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801c830:	b29b      	uxth	r3, r3
 801c832:	2b00      	cmp	r3, #0
 801c834:	d016      	beq.n	801c864 <HAL_SPI_TransmitReceive+0x19e>
 801c836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c838:	2b01      	cmp	r3, #1
 801c83a:	d113      	bne.n	801c864 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801c83c:	68fb      	ldr	r3, [r7, #12]
 801c83e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c840:	881a      	ldrh	r2, [r3, #0]
 801c842:	68fb      	ldr	r3, [r7, #12]
 801c844:	681b      	ldr	r3, [r3, #0]
 801c846:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801c848:	68fb      	ldr	r3, [r7, #12]
 801c84a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c84c:	1c9a      	adds	r2, r3, #2
 801c84e:	68fb      	ldr	r3, [r7, #12]
 801c850:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 801c852:	68fb      	ldr	r3, [r7, #12]
 801c854:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801c856:	b29b      	uxth	r3, r3
 801c858:	3b01      	subs	r3, #1
 801c85a:	b29a      	uxth	r2, r3
 801c85c:	68fb      	ldr	r3, [r7, #12]
 801c85e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801c860:	2300      	movs	r3, #0
 801c862:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801c864:	68fb      	ldr	r3, [r7, #12]
 801c866:	681b      	ldr	r3, [r3, #0]
 801c868:	689b      	ldr	r3, [r3, #8]
 801c86a:	f003 0301 	and.w	r3, r3, #1
 801c86e:	2b01      	cmp	r3, #1
 801c870:	d11c      	bne.n	801c8ac <HAL_SPI_TransmitReceive+0x1e6>
 801c872:	68fb      	ldr	r3, [r7, #12]
 801c874:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801c878:	b29b      	uxth	r3, r3
 801c87a:	2b00      	cmp	r3, #0
 801c87c:	d016      	beq.n	801c8ac <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801c87e:	68fb      	ldr	r3, [r7, #12]
 801c880:	681b      	ldr	r3, [r3, #0]
 801c882:	68da      	ldr	r2, [r3, #12]
 801c884:	68fb      	ldr	r3, [r7, #12]
 801c886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c888:	b292      	uxth	r2, r2
 801c88a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801c88c:	68fb      	ldr	r3, [r7, #12]
 801c88e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c890:	1c9a      	adds	r2, r3, #2
 801c892:	68fb      	ldr	r3, [r7, #12]
 801c894:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 801c896:	68fb      	ldr	r3, [r7, #12]
 801c898:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801c89c:	b29b      	uxth	r3, r3
 801c89e:	3b01      	subs	r3, #1
 801c8a0:	b29a      	uxth	r2, r3
 801c8a2:	68fb      	ldr	r3, [r7, #12]
 801c8a4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801c8a8:	2301      	movs	r3, #1
 801c8aa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801c8ac:	f7fe f85a 	bl	801a964 <HAL_GetTick>
 801c8b0:	4602      	mov	r2, r0
 801c8b2:	6a3b      	ldr	r3, [r7, #32]
 801c8b4:	1ad3      	subs	r3, r2, r3
 801c8b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c8b8:	429a      	cmp	r2, r3
 801c8ba:	d80d      	bhi.n	801c8d8 <HAL_SPI_TransmitReceive+0x212>
 801c8bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c8be:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c8c2:	d009      	beq.n	801c8d8 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 801c8c4:	68fb      	ldr	r3, [r7, #12]
 801c8c6:	2201      	movs	r2, #1
 801c8c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 801c8cc:	68fb      	ldr	r3, [r7, #12]
 801c8ce:	2200      	movs	r2, #0
 801c8d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 801c8d4:	2303      	movs	r3, #3
 801c8d6:	e111      	b.n	801cafc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c8d8:	68fb      	ldr	r3, [r7, #12]
 801c8da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801c8dc:	b29b      	uxth	r3, r3
 801c8de:	2b00      	cmp	r3, #0
 801c8e0:	d19d      	bne.n	801c81e <HAL_SPI_TransmitReceive+0x158>
 801c8e2:	68fb      	ldr	r3, [r7, #12]
 801c8e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801c8e8:	b29b      	uxth	r3, r3
 801c8ea:	2b00      	cmp	r3, #0
 801c8ec:	d197      	bne.n	801c81e <HAL_SPI_TransmitReceive+0x158>
 801c8ee:	e0e5      	b.n	801cabc <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c8f0:	68fb      	ldr	r3, [r7, #12]
 801c8f2:	685b      	ldr	r3, [r3, #4]
 801c8f4:	2b00      	cmp	r3, #0
 801c8f6:	d003      	beq.n	801c900 <HAL_SPI_TransmitReceive+0x23a>
 801c8f8:	8afb      	ldrh	r3, [r7, #22]
 801c8fa:	2b01      	cmp	r3, #1
 801c8fc:	f040 80d1 	bne.w	801caa2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 801c900:	68fb      	ldr	r3, [r7, #12]
 801c902:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801c904:	b29b      	uxth	r3, r3
 801c906:	2b01      	cmp	r3, #1
 801c908:	d912      	bls.n	801c930 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801c90a:	68fb      	ldr	r3, [r7, #12]
 801c90c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c90e:	881a      	ldrh	r2, [r3, #0]
 801c910:	68fb      	ldr	r3, [r7, #12]
 801c912:	681b      	ldr	r3, [r3, #0]
 801c914:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801c916:	68fb      	ldr	r3, [r7, #12]
 801c918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c91a:	1c9a      	adds	r2, r3, #2
 801c91c:	68fb      	ldr	r3, [r7, #12]
 801c91e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 801c920:	68fb      	ldr	r3, [r7, #12]
 801c922:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801c924:	b29b      	uxth	r3, r3
 801c926:	3b02      	subs	r3, #2
 801c928:	b29a      	uxth	r2, r3
 801c92a:	68fb      	ldr	r3, [r7, #12]
 801c92c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 801c92e:	e0b8      	b.n	801caa2 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 801c930:	68fb      	ldr	r3, [r7, #12]
 801c932:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801c934:	68fb      	ldr	r3, [r7, #12]
 801c936:	681b      	ldr	r3, [r3, #0]
 801c938:	330c      	adds	r3, #12
 801c93a:	7812      	ldrb	r2, [r2, #0]
 801c93c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801c93e:	68fb      	ldr	r3, [r7, #12]
 801c940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c942:	1c5a      	adds	r2, r3, #1
 801c944:	68fb      	ldr	r3, [r7, #12]
 801c946:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 801c948:	68fb      	ldr	r3, [r7, #12]
 801c94a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801c94c:	b29b      	uxth	r3, r3
 801c94e:	3b01      	subs	r3, #1
 801c950:	b29a      	uxth	r2, r3
 801c952:	68fb      	ldr	r3, [r7, #12]
 801c954:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c956:	e0a4      	b.n	801caa2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801c958:	68fb      	ldr	r3, [r7, #12]
 801c95a:	681b      	ldr	r3, [r3, #0]
 801c95c:	689b      	ldr	r3, [r3, #8]
 801c95e:	f003 0302 	and.w	r3, r3, #2
 801c962:	2b02      	cmp	r3, #2
 801c964:	d134      	bne.n	801c9d0 <HAL_SPI_TransmitReceive+0x30a>
 801c966:	68fb      	ldr	r3, [r7, #12]
 801c968:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801c96a:	b29b      	uxth	r3, r3
 801c96c:	2b00      	cmp	r3, #0
 801c96e:	d02f      	beq.n	801c9d0 <HAL_SPI_TransmitReceive+0x30a>
 801c970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c972:	2b01      	cmp	r3, #1
 801c974:	d12c      	bne.n	801c9d0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 801c976:	68fb      	ldr	r3, [r7, #12]
 801c978:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801c97a:	b29b      	uxth	r3, r3
 801c97c:	2b01      	cmp	r3, #1
 801c97e:	d912      	bls.n	801c9a6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801c980:	68fb      	ldr	r3, [r7, #12]
 801c982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c984:	881a      	ldrh	r2, [r3, #0]
 801c986:	68fb      	ldr	r3, [r7, #12]
 801c988:	681b      	ldr	r3, [r3, #0]
 801c98a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801c98c:	68fb      	ldr	r3, [r7, #12]
 801c98e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c990:	1c9a      	adds	r2, r3, #2
 801c992:	68fb      	ldr	r3, [r7, #12]
 801c994:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 801c996:	68fb      	ldr	r3, [r7, #12]
 801c998:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801c99a:	b29b      	uxth	r3, r3
 801c99c:	3b02      	subs	r3, #2
 801c99e:	b29a      	uxth	r2, r3
 801c9a0:	68fb      	ldr	r3, [r7, #12]
 801c9a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 801c9a4:	e012      	b.n	801c9cc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 801c9a6:	68fb      	ldr	r3, [r7, #12]
 801c9a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801c9aa:	68fb      	ldr	r3, [r7, #12]
 801c9ac:	681b      	ldr	r3, [r3, #0]
 801c9ae:	330c      	adds	r3, #12
 801c9b0:	7812      	ldrb	r2, [r2, #0]
 801c9b2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801c9b4:	68fb      	ldr	r3, [r7, #12]
 801c9b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c9b8:	1c5a      	adds	r2, r3, #1
 801c9ba:	68fb      	ldr	r3, [r7, #12]
 801c9bc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 801c9be:	68fb      	ldr	r3, [r7, #12]
 801c9c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801c9c2:	b29b      	uxth	r3, r3
 801c9c4:	3b01      	subs	r3, #1
 801c9c6:	b29a      	uxth	r2, r3
 801c9c8:	68fb      	ldr	r3, [r7, #12]
 801c9ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801c9cc:	2300      	movs	r3, #0
 801c9ce:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801c9d0:	68fb      	ldr	r3, [r7, #12]
 801c9d2:	681b      	ldr	r3, [r3, #0]
 801c9d4:	689b      	ldr	r3, [r3, #8]
 801c9d6:	f003 0301 	and.w	r3, r3, #1
 801c9da:	2b01      	cmp	r3, #1
 801c9dc:	d148      	bne.n	801ca70 <HAL_SPI_TransmitReceive+0x3aa>
 801c9de:	68fb      	ldr	r3, [r7, #12]
 801c9e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801c9e4:	b29b      	uxth	r3, r3
 801c9e6:	2b00      	cmp	r3, #0
 801c9e8:	d042      	beq.n	801ca70 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 801c9ea:	68fb      	ldr	r3, [r7, #12]
 801c9ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801c9f0:	b29b      	uxth	r3, r3
 801c9f2:	2b01      	cmp	r3, #1
 801c9f4:	d923      	bls.n	801ca3e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801c9f6:	68fb      	ldr	r3, [r7, #12]
 801c9f8:	681b      	ldr	r3, [r3, #0]
 801c9fa:	68da      	ldr	r2, [r3, #12]
 801c9fc:	68fb      	ldr	r3, [r7, #12]
 801c9fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ca00:	b292      	uxth	r2, r2
 801ca02:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801ca04:	68fb      	ldr	r3, [r7, #12]
 801ca06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ca08:	1c9a      	adds	r2, r3, #2
 801ca0a:	68fb      	ldr	r3, [r7, #12]
 801ca0c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 801ca0e:	68fb      	ldr	r3, [r7, #12]
 801ca10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801ca14:	b29b      	uxth	r3, r3
 801ca16:	3b02      	subs	r3, #2
 801ca18:	b29a      	uxth	r2, r3
 801ca1a:	68fb      	ldr	r3, [r7, #12]
 801ca1c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 801ca20:	68fb      	ldr	r3, [r7, #12]
 801ca22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801ca26:	b29b      	uxth	r3, r3
 801ca28:	2b01      	cmp	r3, #1
 801ca2a:	d81f      	bhi.n	801ca6c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801ca2c:	68fb      	ldr	r3, [r7, #12]
 801ca2e:	681b      	ldr	r3, [r3, #0]
 801ca30:	685a      	ldr	r2, [r3, #4]
 801ca32:	68fb      	ldr	r3, [r7, #12]
 801ca34:	681b      	ldr	r3, [r3, #0]
 801ca36:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 801ca3a:	605a      	str	r2, [r3, #4]
 801ca3c:	e016      	b.n	801ca6c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801ca3e:	68fb      	ldr	r3, [r7, #12]
 801ca40:	681b      	ldr	r3, [r3, #0]
 801ca42:	f103 020c 	add.w	r2, r3, #12
 801ca46:	68fb      	ldr	r3, [r7, #12]
 801ca48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ca4a:	7812      	ldrb	r2, [r2, #0]
 801ca4c:	b2d2      	uxtb	r2, r2
 801ca4e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 801ca50:	68fb      	ldr	r3, [r7, #12]
 801ca52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ca54:	1c5a      	adds	r2, r3, #1
 801ca56:	68fb      	ldr	r3, [r7, #12]
 801ca58:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 801ca5a:	68fb      	ldr	r3, [r7, #12]
 801ca5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801ca60:	b29b      	uxth	r3, r3
 801ca62:	3b01      	subs	r3, #1
 801ca64:	b29a      	uxth	r2, r3
 801ca66:	68fb      	ldr	r3, [r7, #12]
 801ca68:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801ca6c:	2301      	movs	r3, #1
 801ca6e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801ca70:	f7fd ff78 	bl	801a964 <HAL_GetTick>
 801ca74:	4602      	mov	r2, r0
 801ca76:	6a3b      	ldr	r3, [r7, #32]
 801ca78:	1ad3      	subs	r3, r2, r3
 801ca7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801ca7c:	429a      	cmp	r2, r3
 801ca7e:	d803      	bhi.n	801ca88 <HAL_SPI_TransmitReceive+0x3c2>
 801ca80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca82:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ca86:	d102      	bne.n	801ca8e <HAL_SPI_TransmitReceive+0x3c8>
 801ca88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca8a:	2b00      	cmp	r3, #0
 801ca8c:	d109      	bne.n	801caa2 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 801ca8e:	68fb      	ldr	r3, [r7, #12]
 801ca90:	2201      	movs	r2, #1
 801ca92:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 801ca96:	68fb      	ldr	r3, [r7, #12]
 801ca98:	2200      	movs	r2, #0
 801ca9a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 801ca9e:	2303      	movs	r3, #3
 801caa0:	e02c      	b.n	801cafc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801caa2:	68fb      	ldr	r3, [r7, #12]
 801caa4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801caa6:	b29b      	uxth	r3, r3
 801caa8:	2b00      	cmp	r3, #0
 801caaa:	f47f af55 	bne.w	801c958 <HAL_SPI_TransmitReceive+0x292>
 801caae:	68fb      	ldr	r3, [r7, #12]
 801cab0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801cab4:	b29b      	uxth	r3, r3
 801cab6:	2b00      	cmp	r3, #0
 801cab8:	f47f af4e 	bne.w	801c958 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801cabc:	6a3a      	ldr	r2, [r7, #32]
 801cabe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801cac0:	68f8      	ldr	r0, [r7, #12]
 801cac2:	f000 f93d 	bl	801cd40 <SPI_EndRxTxTransaction>
 801cac6:	4603      	mov	r3, r0
 801cac8:	2b00      	cmp	r3, #0
 801caca:	d008      	beq.n	801cade <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801cacc:	68fb      	ldr	r3, [r7, #12]
 801cace:	2220      	movs	r2, #32
 801cad0:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 801cad2:	68fb      	ldr	r3, [r7, #12]
 801cad4:	2200      	movs	r2, #0
 801cad6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 801cada:	2301      	movs	r3, #1
 801cadc:	e00e      	b.n	801cafc <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 801cade:	68fb      	ldr	r3, [r7, #12]
 801cae0:	2201      	movs	r2, #1
 801cae2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801cae6:	68fb      	ldr	r3, [r7, #12]
 801cae8:	2200      	movs	r2, #0
 801caea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801caee:	68fb      	ldr	r3, [r7, #12]
 801caf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801caf2:	2b00      	cmp	r3, #0
 801caf4:	d001      	beq.n	801cafa <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 801caf6:	2301      	movs	r3, #1
 801caf8:	e000      	b.n	801cafc <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 801cafa:	2300      	movs	r3, #0
  }
}
 801cafc:	4618      	mov	r0, r3
 801cafe:	3728      	adds	r7, #40	@ 0x28
 801cb00:	46bd      	mov	sp, r7
 801cb02:	bd80      	pop	{r7, pc}

0801cb04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801cb04:	b580      	push	{r7, lr}
 801cb06:	b088      	sub	sp, #32
 801cb08:	af00      	add	r7, sp, #0
 801cb0a:	60f8      	str	r0, [r7, #12]
 801cb0c:	60b9      	str	r1, [r7, #8]
 801cb0e:	603b      	str	r3, [r7, #0]
 801cb10:	4613      	mov	r3, r2
 801cb12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801cb14:	f7fd ff26 	bl	801a964 <HAL_GetTick>
 801cb18:	4602      	mov	r2, r0
 801cb1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cb1c:	1a9b      	subs	r3, r3, r2
 801cb1e:	683a      	ldr	r2, [r7, #0]
 801cb20:	4413      	add	r3, r2
 801cb22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801cb24:	f7fd ff1e 	bl	801a964 <HAL_GetTick>
 801cb28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801cb2a:	4b39      	ldr	r3, [pc, #228]	@ (801cc10 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801cb2c:	681b      	ldr	r3, [r3, #0]
 801cb2e:	015b      	lsls	r3, r3, #5
 801cb30:	0d1b      	lsrs	r3, r3, #20
 801cb32:	69fa      	ldr	r2, [r7, #28]
 801cb34:	fb02 f303 	mul.w	r3, r2, r3
 801cb38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801cb3a:	e054      	b.n	801cbe6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801cb3c:	683b      	ldr	r3, [r7, #0]
 801cb3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cb42:	d050      	beq.n	801cbe6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801cb44:	f7fd ff0e 	bl	801a964 <HAL_GetTick>
 801cb48:	4602      	mov	r2, r0
 801cb4a:	69bb      	ldr	r3, [r7, #24]
 801cb4c:	1ad3      	subs	r3, r2, r3
 801cb4e:	69fa      	ldr	r2, [r7, #28]
 801cb50:	429a      	cmp	r2, r3
 801cb52:	d902      	bls.n	801cb5a <SPI_WaitFlagStateUntilTimeout+0x56>
 801cb54:	69fb      	ldr	r3, [r7, #28]
 801cb56:	2b00      	cmp	r3, #0
 801cb58:	d13d      	bne.n	801cbd6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801cb5a:	68fb      	ldr	r3, [r7, #12]
 801cb5c:	681b      	ldr	r3, [r3, #0]
 801cb5e:	685a      	ldr	r2, [r3, #4]
 801cb60:	68fb      	ldr	r3, [r7, #12]
 801cb62:	681b      	ldr	r3, [r3, #0]
 801cb64:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 801cb68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801cb6a:	68fb      	ldr	r3, [r7, #12]
 801cb6c:	685b      	ldr	r3, [r3, #4]
 801cb6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801cb72:	d111      	bne.n	801cb98 <SPI_WaitFlagStateUntilTimeout+0x94>
 801cb74:	68fb      	ldr	r3, [r7, #12]
 801cb76:	689b      	ldr	r3, [r3, #8]
 801cb78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801cb7c:	d004      	beq.n	801cb88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801cb7e:	68fb      	ldr	r3, [r7, #12]
 801cb80:	689b      	ldr	r3, [r3, #8]
 801cb82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801cb86:	d107      	bne.n	801cb98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801cb88:	68fb      	ldr	r3, [r7, #12]
 801cb8a:	681b      	ldr	r3, [r3, #0]
 801cb8c:	681a      	ldr	r2, [r3, #0]
 801cb8e:	68fb      	ldr	r3, [r7, #12]
 801cb90:	681b      	ldr	r3, [r3, #0]
 801cb92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801cb96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801cb98:	68fb      	ldr	r3, [r7, #12]
 801cb9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cb9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801cba0:	d10f      	bne.n	801cbc2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801cba2:	68fb      	ldr	r3, [r7, #12]
 801cba4:	681b      	ldr	r3, [r3, #0]
 801cba6:	681a      	ldr	r2, [r3, #0]
 801cba8:	68fb      	ldr	r3, [r7, #12]
 801cbaa:	681b      	ldr	r3, [r3, #0]
 801cbac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 801cbb0:	601a      	str	r2, [r3, #0]
 801cbb2:	68fb      	ldr	r3, [r7, #12]
 801cbb4:	681b      	ldr	r3, [r3, #0]
 801cbb6:	681a      	ldr	r2, [r3, #0]
 801cbb8:	68fb      	ldr	r3, [r7, #12]
 801cbba:	681b      	ldr	r3, [r3, #0]
 801cbbc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 801cbc0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801cbc2:	68fb      	ldr	r3, [r7, #12]
 801cbc4:	2201      	movs	r2, #1
 801cbc6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801cbca:	68fb      	ldr	r3, [r7, #12]
 801cbcc:	2200      	movs	r2, #0
 801cbce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 801cbd2:	2303      	movs	r3, #3
 801cbd4:	e017      	b.n	801cc06 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801cbd6:	697b      	ldr	r3, [r7, #20]
 801cbd8:	2b00      	cmp	r3, #0
 801cbda:	d101      	bne.n	801cbe0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801cbdc:	2300      	movs	r3, #0
 801cbde:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801cbe0:	697b      	ldr	r3, [r7, #20]
 801cbe2:	3b01      	subs	r3, #1
 801cbe4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801cbe6:	68fb      	ldr	r3, [r7, #12]
 801cbe8:	681b      	ldr	r3, [r3, #0]
 801cbea:	689a      	ldr	r2, [r3, #8]
 801cbec:	68bb      	ldr	r3, [r7, #8]
 801cbee:	4013      	ands	r3, r2
 801cbf0:	68ba      	ldr	r2, [r7, #8]
 801cbf2:	429a      	cmp	r2, r3
 801cbf4:	bf0c      	ite	eq
 801cbf6:	2301      	moveq	r3, #1
 801cbf8:	2300      	movne	r3, #0
 801cbfa:	b2db      	uxtb	r3, r3
 801cbfc:	461a      	mov	r2, r3
 801cbfe:	79fb      	ldrb	r3, [r7, #7]
 801cc00:	429a      	cmp	r2, r3
 801cc02:	d19b      	bne.n	801cb3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801cc04:	2300      	movs	r3, #0
}
 801cc06:	4618      	mov	r0, r3
 801cc08:	3720      	adds	r7, #32
 801cc0a:	46bd      	mov	sp, r7
 801cc0c:	bd80      	pop	{r7, pc}
 801cc0e:	bf00      	nop
 801cc10:	20000000 	.word	0x20000000

0801cc14 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801cc14:	b580      	push	{r7, lr}
 801cc16:	b08a      	sub	sp, #40	@ 0x28
 801cc18:	af00      	add	r7, sp, #0
 801cc1a:	60f8      	str	r0, [r7, #12]
 801cc1c:	60b9      	str	r1, [r7, #8]
 801cc1e:	607a      	str	r2, [r7, #4]
 801cc20:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801cc22:	2300      	movs	r3, #0
 801cc24:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801cc26:	f7fd fe9d 	bl	801a964 <HAL_GetTick>
 801cc2a:	4602      	mov	r2, r0
 801cc2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc2e:	1a9b      	subs	r3, r3, r2
 801cc30:	683a      	ldr	r2, [r7, #0]
 801cc32:	4413      	add	r3, r2
 801cc34:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 801cc36:	f7fd fe95 	bl	801a964 <HAL_GetTick>
 801cc3a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 801cc3c:	68fb      	ldr	r3, [r7, #12]
 801cc3e:	681b      	ldr	r3, [r3, #0]
 801cc40:	330c      	adds	r3, #12
 801cc42:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801cc44:	4b3d      	ldr	r3, [pc, #244]	@ (801cd3c <SPI_WaitFifoStateUntilTimeout+0x128>)
 801cc46:	681a      	ldr	r2, [r3, #0]
 801cc48:	4613      	mov	r3, r2
 801cc4a:	009b      	lsls	r3, r3, #2
 801cc4c:	4413      	add	r3, r2
 801cc4e:	00da      	lsls	r2, r3, #3
 801cc50:	1ad3      	subs	r3, r2, r3
 801cc52:	0d1b      	lsrs	r3, r3, #20
 801cc54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801cc56:	fb02 f303 	mul.w	r3, r2, r3
 801cc5a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 801cc5c:	e060      	b.n	801cd20 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801cc5e:	68bb      	ldr	r3, [r7, #8]
 801cc60:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 801cc64:	d107      	bne.n	801cc76 <SPI_WaitFifoStateUntilTimeout+0x62>
 801cc66:	687b      	ldr	r3, [r7, #4]
 801cc68:	2b00      	cmp	r3, #0
 801cc6a:	d104      	bne.n	801cc76 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 801cc6c:	69fb      	ldr	r3, [r7, #28]
 801cc6e:	781b      	ldrb	r3, [r3, #0]
 801cc70:	b2db      	uxtb	r3, r3
 801cc72:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 801cc74:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 801cc76:	683b      	ldr	r3, [r7, #0]
 801cc78:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cc7c:	d050      	beq.n	801cd20 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801cc7e:	f7fd fe71 	bl	801a964 <HAL_GetTick>
 801cc82:	4602      	mov	r2, r0
 801cc84:	6a3b      	ldr	r3, [r7, #32]
 801cc86:	1ad3      	subs	r3, r2, r3
 801cc88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801cc8a:	429a      	cmp	r2, r3
 801cc8c:	d902      	bls.n	801cc94 <SPI_WaitFifoStateUntilTimeout+0x80>
 801cc8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cc90:	2b00      	cmp	r3, #0
 801cc92:	d13d      	bne.n	801cd10 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801cc94:	68fb      	ldr	r3, [r7, #12]
 801cc96:	681b      	ldr	r3, [r3, #0]
 801cc98:	685a      	ldr	r2, [r3, #4]
 801cc9a:	68fb      	ldr	r3, [r7, #12]
 801cc9c:	681b      	ldr	r3, [r3, #0]
 801cc9e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 801cca2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801cca4:	68fb      	ldr	r3, [r7, #12]
 801cca6:	685b      	ldr	r3, [r3, #4]
 801cca8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801ccac:	d111      	bne.n	801ccd2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 801ccae:	68fb      	ldr	r3, [r7, #12]
 801ccb0:	689b      	ldr	r3, [r3, #8]
 801ccb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801ccb6:	d004      	beq.n	801ccc2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801ccb8:	68fb      	ldr	r3, [r7, #12]
 801ccba:	689b      	ldr	r3, [r3, #8]
 801ccbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801ccc0:	d107      	bne.n	801ccd2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801ccc2:	68fb      	ldr	r3, [r7, #12]
 801ccc4:	681b      	ldr	r3, [r3, #0]
 801ccc6:	681a      	ldr	r2, [r3, #0]
 801ccc8:	68fb      	ldr	r3, [r7, #12]
 801ccca:	681b      	ldr	r3, [r3, #0]
 801cccc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801ccd0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801ccd2:	68fb      	ldr	r3, [r7, #12]
 801ccd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ccd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801ccda:	d10f      	bne.n	801ccfc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 801ccdc:	68fb      	ldr	r3, [r7, #12]
 801ccde:	681b      	ldr	r3, [r3, #0]
 801cce0:	681a      	ldr	r2, [r3, #0]
 801cce2:	68fb      	ldr	r3, [r7, #12]
 801cce4:	681b      	ldr	r3, [r3, #0]
 801cce6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 801ccea:	601a      	str	r2, [r3, #0]
 801ccec:	68fb      	ldr	r3, [r7, #12]
 801ccee:	681b      	ldr	r3, [r3, #0]
 801ccf0:	681a      	ldr	r2, [r3, #0]
 801ccf2:	68fb      	ldr	r3, [r7, #12]
 801ccf4:	681b      	ldr	r3, [r3, #0]
 801ccf6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 801ccfa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801ccfc:	68fb      	ldr	r3, [r7, #12]
 801ccfe:	2201      	movs	r2, #1
 801cd00:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801cd04:	68fb      	ldr	r3, [r7, #12]
 801cd06:	2200      	movs	r2, #0
 801cd08:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 801cd0c:	2303      	movs	r3, #3
 801cd0e:	e010      	b.n	801cd32 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801cd10:	69bb      	ldr	r3, [r7, #24]
 801cd12:	2b00      	cmp	r3, #0
 801cd14:	d101      	bne.n	801cd1a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 801cd16:	2300      	movs	r3, #0
 801cd18:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 801cd1a:	69bb      	ldr	r3, [r7, #24]
 801cd1c:	3b01      	subs	r3, #1
 801cd1e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 801cd20:	68fb      	ldr	r3, [r7, #12]
 801cd22:	681b      	ldr	r3, [r3, #0]
 801cd24:	689a      	ldr	r2, [r3, #8]
 801cd26:	68bb      	ldr	r3, [r7, #8]
 801cd28:	4013      	ands	r3, r2
 801cd2a:	687a      	ldr	r2, [r7, #4]
 801cd2c:	429a      	cmp	r2, r3
 801cd2e:	d196      	bne.n	801cc5e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 801cd30:	2300      	movs	r3, #0
}
 801cd32:	4618      	mov	r0, r3
 801cd34:	3728      	adds	r7, #40	@ 0x28
 801cd36:	46bd      	mov	sp, r7
 801cd38:	bd80      	pop	{r7, pc}
 801cd3a:	bf00      	nop
 801cd3c:	20000000 	.word	0x20000000

0801cd40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801cd40:	b580      	push	{r7, lr}
 801cd42:	b086      	sub	sp, #24
 801cd44:	af02      	add	r7, sp, #8
 801cd46:	60f8      	str	r0, [r7, #12]
 801cd48:	60b9      	str	r1, [r7, #8]
 801cd4a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801cd4c:	687b      	ldr	r3, [r7, #4]
 801cd4e:	9300      	str	r3, [sp, #0]
 801cd50:	68bb      	ldr	r3, [r7, #8]
 801cd52:	2200      	movs	r2, #0
 801cd54:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 801cd58:	68f8      	ldr	r0, [r7, #12]
 801cd5a:	f7ff ff5b 	bl	801cc14 <SPI_WaitFifoStateUntilTimeout>
 801cd5e:	4603      	mov	r3, r0
 801cd60:	2b00      	cmp	r3, #0
 801cd62:	d007      	beq.n	801cd74 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801cd64:	68fb      	ldr	r3, [r7, #12]
 801cd66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801cd68:	f043 0220 	orr.w	r2, r3, #32
 801cd6c:	68fb      	ldr	r3, [r7, #12]
 801cd6e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 801cd70:	2303      	movs	r3, #3
 801cd72:	e027      	b.n	801cdc4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801cd74:	687b      	ldr	r3, [r7, #4]
 801cd76:	9300      	str	r3, [sp, #0]
 801cd78:	68bb      	ldr	r3, [r7, #8]
 801cd7a:	2200      	movs	r2, #0
 801cd7c:	2180      	movs	r1, #128	@ 0x80
 801cd7e:	68f8      	ldr	r0, [r7, #12]
 801cd80:	f7ff fec0 	bl	801cb04 <SPI_WaitFlagStateUntilTimeout>
 801cd84:	4603      	mov	r3, r0
 801cd86:	2b00      	cmp	r3, #0
 801cd88:	d007      	beq.n	801cd9a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801cd8a:	68fb      	ldr	r3, [r7, #12]
 801cd8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801cd8e:	f043 0220 	orr.w	r2, r3, #32
 801cd92:	68fb      	ldr	r3, [r7, #12]
 801cd94:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 801cd96:	2303      	movs	r3, #3
 801cd98:	e014      	b.n	801cdc4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801cd9a:	687b      	ldr	r3, [r7, #4]
 801cd9c:	9300      	str	r3, [sp, #0]
 801cd9e:	68bb      	ldr	r3, [r7, #8]
 801cda0:	2200      	movs	r2, #0
 801cda2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 801cda6:	68f8      	ldr	r0, [r7, #12]
 801cda8:	f7ff ff34 	bl	801cc14 <SPI_WaitFifoStateUntilTimeout>
 801cdac:	4603      	mov	r3, r0
 801cdae:	2b00      	cmp	r3, #0
 801cdb0:	d007      	beq.n	801cdc2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801cdb2:	68fb      	ldr	r3, [r7, #12]
 801cdb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801cdb6:	f043 0220 	orr.w	r2, r3, #32
 801cdba:	68fb      	ldr	r3, [r7, #12]
 801cdbc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 801cdbe:	2303      	movs	r3, #3
 801cdc0:	e000      	b.n	801cdc4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 801cdc2:	2300      	movs	r3, #0
}
 801cdc4:	4618      	mov	r0, r3
 801cdc6:	3710      	adds	r7, #16
 801cdc8:	46bd      	mov	sp, r7
 801cdca:	bd80      	pop	{r7, pc}

0801cdcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801cdcc:	b580      	push	{r7, lr}
 801cdce:	b082      	sub	sp, #8
 801cdd0:	af00      	add	r7, sp, #0
 801cdd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801cdd4:	687b      	ldr	r3, [r7, #4]
 801cdd6:	2b00      	cmp	r3, #0
 801cdd8:	d101      	bne.n	801cdde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801cdda:	2301      	movs	r3, #1
 801cddc:	e049      	b.n	801ce72 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801cdde:	687b      	ldr	r3, [r7, #4]
 801cde0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801cde4:	b2db      	uxtb	r3, r3
 801cde6:	2b00      	cmp	r3, #0
 801cde8:	d106      	bne.n	801cdf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801cdea:	687b      	ldr	r3, [r7, #4]
 801cdec:	2200      	movs	r2, #0
 801cdee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801cdf2:	6878      	ldr	r0, [r7, #4]
 801cdf4:	f7e4 fcbe 	bl	8001774 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cdf8:	687b      	ldr	r3, [r7, #4]
 801cdfa:	2202      	movs	r2, #2
 801cdfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801ce00:	687b      	ldr	r3, [r7, #4]
 801ce02:	681a      	ldr	r2, [r3, #0]
 801ce04:	687b      	ldr	r3, [r7, #4]
 801ce06:	3304      	adds	r3, #4
 801ce08:	4619      	mov	r1, r3
 801ce0a:	4610      	mov	r0, r2
 801ce0c:	f000 fdd4 	bl	801d9b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801ce10:	687b      	ldr	r3, [r7, #4]
 801ce12:	2201      	movs	r2, #1
 801ce14:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ce18:	687b      	ldr	r3, [r7, #4]
 801ce1a:	2201      	movs	r2, #1
 801ce1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801ce20:	687b      	ldr	r3, [r7, #4]
 801ce22:	2201      	movs	r2, #1
 801ce24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801ce28:	687b      	ldr	r3, [r7, #4]
 801ce2a:	2201      	movs	r2, #1
 801ce2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801ce30:	687b      	ldr	r3, [r7, #4]
 801ce32:	2201      	movs	r2, #1
 801ce34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801ce38:	687b      	ldr	r3, [r7, #4]
 801ce3a:	2201      	movs	r2, #1
 801ce3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801ce40:	687b      	ldr	r3, [r7, #4]
 801ce42:	2201      	movs	r2, #1
 801ce44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ce48:	687b      	ldr	r3, [r7, #4]
 801ce4a:	2201      	movs	r2, #1
 801ce4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801ce50:	687b      	ldr	r3, [r7, #4]
 801ce52:	2201      	movs	r2, #1
 801ce54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801ce58:	687b      	ldr	r3, [r7, #4]
 801ce5a:	2201      	movs	r2, #1
 801ce5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801ce60:	687b      	ldr	r3, [r7, #4]
 801ce62:	2201      	movs	r2, #1
 801ce64:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801ce68:	687b      	ldr	r3, [r7, #4]
 801ce6a:	2201      	movs	r2, #1
 801ce6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801ce70:	2300      	movs	r3, #0
}
 801ce72:	4618      	mov	r0, r3
 801ce74:	3708      	adds	r7, #8
 801ce76:	46bd      	mov	sp, r7
 801ce78:	bd80      	pop	{r7, pc}
	...

0801ce7c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801ce7c:	b480      	push	{r7}
 801ce7e:	b085      	sub	sp, #20
 801ce80:	af00      	add	r7, sp, #0
 801ce82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801ce84:	687b      	ldr	r3, [r7, #4]
 801ce86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801ce8a:	b2db      	uxtb	r3, r3
 801ce8c:	2b01      	cmp	r3, #1
 801ce8e:	d001      	beq.n	801ce94 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801ce90:	2301      	movs	r3, #1
 801ce92:	e033      	b.n	801cefc <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801ce94:	687b      	ldr	r3, [r7, #4]
 801ce96:	2202      	movs	r2, #2
 801ce98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801ce9c:	687b      	ldr	r3, [r7, #4]
 801ce9e:	681b      	ldr	r3, [r3, #0]
 801cea0:	4a19      	ldr	r2, [pc, #100]	@ (801cf08 <HAL_TIM_Base_Start+0x8c>)
 801cea2:	4293      	cmp	r3, r2
 801cea4:	d009      	beq.n	801ceba <HAL_TIM_Base_Start+0x3e>
 801cea6:	687b      	ldr	r3, [r7, #4]
 801cea8:	681b      	ldr	r3, [r3, #0]
 801ceaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801ceae:	d004      	beq.n	801ceba <HAL_TIM_Base_Start+0x3e>
 801ceb0:	687b      	ldr	r3, [r7, #4]
 801ceb2:	681b      	ldr	r3, [r3, #0]
 801ceb4:	4a15      	ldr	r2, [pc, #84]	@ (801cf0c <HAL_TIM_Base_Start+0x90>)
 801ceb6:	4293      	cmp	r3, r2
 801ceb8:	d115      	bne.n	801cee6 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801ceba:	687b      	ldr	r3, [r7, #4]
 801cebc:	681b      	ldr	r3, [r3, #0]
 801cebe:	689a      	ldr	r2, [r3, #8]
 801cec0:	4b13      	ldr	r3, [pc, #76]	@ (801cf10 <HAL_TIM_Base_Start+0x94>)
 801cec2:	4013      	ands	r3, r2
 801cec4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cec6:	68fb      	ldr	r3, [r7, #12]
 801cec8:	2b06      	cmp	r3, #6
 801ceca:	d015      	beq.n	801cef8 <HAL_TIM_Base_Start+0x7c>
 801cecc:	68fb      	ldr	r3, [r7, #12]
 801cece:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801ced2:	d011      	beq.n	801cef8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 801ced4:	687b      	ldr	r3, [r7, #4]
 801ced6:	681b      	ldr	r3, [r3, #0]
 801ced8:	681a      	ldr	r2, [r3, #0]
 801ceda:	687b      	ldr	r3, [r7, #4]
 801cedc:	681b      	ldr	r3, [r3, #0]
 801cede:	f042 0201 	orr.w	r2, r2, #1
 801cee2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cee4:	e008      	b.n	801cef8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801cee6:	687b      	ldr	r3, [r7, #4]
 801cee8:	681b      	ldr	r3, [r3, #0]
 801ceea:	681a      	ldr	r2, [r3, #0]
 801ceec:	687b      	ldr	r3, [r7, #4]
 801ceee:	681b      	ldr	r3, [r3, #0]
 801cef0:	f042 0201 	orr.w	r2, r2, #1
 801cef4:	601a      	str	r2, [r3, #0]
 801cef6:	e000      	b.n	801cefa <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cef8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801cefa:	2300      	movs	r3, #0
}
 801cefc:	4618      	mov	r0, r3
 801cefe:	3714      	adds	r7, #20
 801cf00:	46bd      	mov	sp, r7
 801cf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf06:	4770      	bx	lr
 801cf08:	40012c00 	.word	0x40012c00
 801cf0c:	40014000 	.word	0x40014000
 801cf10:	00010007 	.word	0x00010007

0801cf14 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 801cf14:	b480      	push	{r7}
 801cf16:	b083      	sub	sp, #12
 801cf18:	af00      	add	r7, sp, #0
 801cf1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801cf1c:	687b      	ldr	r3, [r7, #4]
 801cf1e:	681b      	ldr	r3, [r3, #0]
 801cf20:	6a1a      	ldr	r2, [r3, #32]
 801cf22:	f241 1311 	movw	r3, #4369	@ 0x1111
 801cf26:	4013      	ands	r3, r2
 801cf28:	2b00      	cmp	r3, #0
 801cf2a:	d10f      	bne.n	801cf4c <HAL_TIM_Base_Stop+0x38>
 801cf2c:	687b      	ldr	r3, [r7, #4]
 801cf2e:	681b      	ldr	r3, [r3, #0]
 801cf30:	6a1a      	ldr	r2, [r3, #32]
 801cf32:	f240 4344 	movw	r3, #1092	@ 0x444
 801cf36:	4013      	ands	r3, r2
 801cf38:	2b00      	cmp	r3, #0
 801cf3a:	d107      	bne.n	801cf4c <HAL_TIM_Base_Stop+0x38>
 801cf3c:	687b      	ldr	r3, [r7, #4]
 801cf3e:	681b      	ldr	r3, [r3, #0]
 801cf40:	681a      	ldr	r2, [r3, #0]
 801cf42:	687b      	ldr	r3, [r7, #4]
 801cf44:	681b      	ldr	r3, [r3, #0]
 801cf46:	f022 0201 	bic.w	r2, r2, #1
 801cf4a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 801cf4c:	687b      	ldr	r3, [r7, #4]
 801cf4e:	2201      	movs	r2, #1
 801cf50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 801cf54:	2300      	movs	r3, #0
}
 801cf56:	4618      	mov	r0, r3
 801cf58:	370c      	adds	r7, #12
 801cf5a:	46bd      	mov	sp, r7
 801cf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf60:	4770      	bx	lr
	...

0801cf64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801cf64:	b480      	push	{r7}
 801cf66:	b085      	sub	sp, #20
 801cf68:	af00      	add	r7, sp, #0
 801cf6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801cf6c:	687b      	ldr	r3, [r7, #4]
 801cf6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801cf72:	b2db      	uxtb	r3, r3
 801cf74:	2b01      	cmp	r3, #1
 801cf76:	d001      	beq.n	801cf7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801cf78:	2301      	movs	r3, #1
 801cf7a:	e03b      	b.n	801cff4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cf7c:	687b      	ldr	r3, [r7, #4]
 801cf7e:	2202      	movs	r2, #2
 801cf80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801cf84:	687b      	ldr	r3, [r7, #4]
 801cf86:	681b      	ldr	r3, [r3, #0]
 801cf88:	68da      	ldr	r2, [r3, #12]
 801cf8a:	687b      	ldr	r3, [r7, #4]
 801cf8c:	681b      	ldr	r3, [r3, #0]
 801cf8e:	f042 0201 	orr.w	r2, r2, #1
 801cf92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801cf94:	687b      	ldr	r3, [r7, #4]
 801cf96:	681b      	ldr	r3, [r3, #0]
 801cf98:	4a19      	ldr	r2, [pc, #100]	@ (801d000 <HAL_TIM_Base_Start_IT+0x9c>)
 801cf9a:	4293      	cmp	r3, r2
 801cf9c:	d009      	beq.n	801cfb2 <HAL_TIM_Base_Start_IT+0x4e>
 801cf9e:	687b      	ldr	r3, [r7, #4]
 801cfa0:	681b      	ldr	r3, [r3, #0]
 801cfa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801cfa6:	d004      	beq.n	801cfb2 <HAL_TIM_Base_Start_IT+0x4e>
 801cfa8:	687b      	ldr	r3, [r7, #4]
 801cfaa:	681b      	ldr	r3, [r3, #0]
 801cfac:	4a15      	ldr	r2, [pc, #84]	@ (801d004 <HAL_TIM_Base_Start_IT+0xa0>)
 801cfae:	4293      	cmp	r3, r2
 801cfb0:	d115      	bne.n	801cfde <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801cfb2:	687b      	ldr	r3, [r7, #4]
 801cfb4:	681b      	ldr	r3, [r3, #0]
 801cfb6:	689a      	ldr	r2, [r3, #8]
 801cfb8:	4b13      	ldr	r3, [pc, #76]	@ (801d008 <HAL_TIM_Base_Start_IT+0xa4>)
 801cfba:	4013      	ands	r3, r2
 801cfbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cfbe:	68fb      	ldr	r3, [r7, #12]
 801cfc0:	2b06      	cmp	r3, #6
 801cfc2:	d015      	beq.n	801cff0 <HAL_TIM_Base_Start_IT+0x8c>
 801cfc4:	68fb      	ldr	r3, [r7, #12]
 801cfc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801cfca:	d011      	beq.n	801cff0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 801cfcc:	687b      	ldr	r3, [r7, #4]
 801cfce:	681b      	ldr	r3, [r3, #0]
 801cfd0:	681a      	ldr	r2, [r3, #0]
 801cfd2:	687b      	ldr	r3, [r7, #4]
 801cfd4:	681b      	ldr	r3, [r3, #0]
 801cfd6:	f042 0201 	orr.w	r2, r2, #1
 801cfda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cfdc:	e008      	b.n	801cff0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801cfde:	687b      	ldr	r3, [r7, #4]
 801cfe0:	681b      	ldr	r3, [r3, #0]
 801cfe2:	681a      	ldr	r2, [r3, #0]
 801cfe4:	687b      	ldr	r3, [r7, #4]
 801cfe6:	681b      	ldr	r3, [r3, #0]
 801cfe8:	f042 0201 	orr.w	r2, r2, #1
 801cfec:	601a      	str	r2, [r3, #0]
 801cfee:	e000      	b.n	801cff2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cff0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801cff2:	2300      	movs	r3, #0
}
 801cff4:	4618      	mov	r0, r3
 801cff6:	3714      	adds	r7, #20
 801cff8:	46bd      	mov	sp, r7
 801cffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cffe:	4770      	bx	lr
 801d000:	40012c00 	.word	0x40012c00
 801d004:	40014000 	.word	0x40014000
 801d008:	00010007 	.word	0x00010007

0801d00c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801d00c:	b580      	push	{r7, lr}
 801d00e:	b082      	sub	sp, #8
 801d010:	af00      	add	r7, sp, #0
 801d012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801d014:	687b      	ldr	r3, [r7, #4]
 801d016:	2b00      	cmp	r3, #0
 801d018:	d101      	bne.n	801d01e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801d01a:	2301      	movs	r3, #1
 801d01c:	e049      	b.n	801d0b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801d01e:	687b      	ldr	r3, [r7, #4]
 801d020:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801d024:	b2db      	uxtb	r3, r3
 801d026:	2b00      	cmp	r3, #0
 801d028:	d106      	bne.n	801d038 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801d02a:	687b      	ldr	r3, [r7, #4]
 801d02c:	2200      	movs	r2, #0
 801d02e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801d032:	6878      	ldr	r0, [r7, #4]
 801d034:	f7e4 fb7e 	bl	8001734 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801d038:	687b      	ldr	r3, [r7, #4]
 801d03a:	2202      	movs	r2, #2
 801d03c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801d040:	687b      	ldr	r3, [r7, #4]
 801d042:	681a      	ldr	r2, [r3, #0]
 801d044:	687b      	ldr	r3, [r7, #4]
 801d046:	3304      	adds	r3, #4
 801d048:	4619      	mov	r1, r3
 801d04a:	4610      	mov	r0, r2
 801d04c:	f000 fcb4 	bl	801d9b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801d050:	687b      	ldr	r3, [r7, #4]
 801d052:	2201      	movs	r2, #1
 801d054:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801d058:	687b      	ldr	r3, [r7, #4]
 801d05a:	2201      	movs	r2, #1
 801d05c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801d060:	687b      	ldr	r3, [r7, #4]
 801d062:	2201      	movs	r2, #1
 801d064:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801d068:	687b      	ldr	r3, [r7, #4]
 801d06a:	2201      	movs	r2, #1
 801d06c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801d070:	687b      	ldr	r3, [r7, #4]
 801d072:	2201      	movs	r2, #1
 801d074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801d078:	687b      	ldr	r3, [r7, #4]
 801d07a:	2201      	movs	r2, #1
 801d07c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801d080:	687b      	ldr	r3, [r7, #4]
 801d082:	2201      	movs	r2, #1
 801d084:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801d088:	687b      	ldr	r3, [r7, #4]
 801d08a:	2201      	movs	r2, #1
 801d08c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801d090:	687b      	ldr	r3, [r7, #4]
 801d092:	2201      	movs	r2, #1
 801d094:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801d098:	687b      	ldr	r3, [r7, #4]
 801d09a:	2201      	movs	r2, #1
 801d09c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801d0a0:	687b      	ldr	r3, [r7, #4]
 801d0a2:	2201      	movs	r2, #1
 801d0a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801d0a8:	687b      	ldr	r3, [r7, #4]
 801d0aa:	2201      	movs	r2, #1
 801d0ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801d0b0:	2300      	movs	r3, #0
}
 801d0b2:	4618      	mov	r0, r3
 801d0b4:	3708      	adds	r7, #8
 801d0b6:	46bd      	mov	sp, r7
 801d0b8:	bd80      	pop	{r7, pc}
	...

0801d0bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801d0bc:	b580      	push	{r7, lr}
 801d0be:	b084      	sub	sp, #16
 801d0c0:	af00      	add	r7, sp, #0
 801d0c2:	6078      	str	r0, [r7, #4]
 801d0c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801d0c6:	683b      	ldr	r3, [r7, #0]
 801d0c8:	2b00      	cmp	r3, #0
 801d0ca:	d109      	bne.n	801d0e0 <HAL_TIM_PWM_Start+0x24>
 801d0cc:	687b      	ldr	r3, [r7, #4]
 801d0ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801d0d2:	b2db      	uxtb	r3, r3
 801d0d4:	2b01      	cmp	r3, #1
 801d0d6:	bf14      	ite	ne
 801d0d8:	2301      	movne	r3, #1
 801d0da:	2300      	moveq	r3, #0
 801d0dc:	b2db      	uxtb	r3, r3
 801d0de:	e03c      	b.n	801d15a <HAL_TIM_PWM_Start+0x9e>
 801d0e0:	683b      	ldr	r3, [r7, #0]
 801d0e2:	2b04      	cmp	r3, #4
 801d0e4:	d109      	bne.n	801d0fa <HAL_TIM_PWM_Start+0x3e>
 801d0e6:	687b      	ldr	r3, [r7, #4]
 801d0e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 801d0ec:	b2db      	uxtb	r3, r3
 801d0ee:	2b01      	cmp	r3, #1
 801d0f0:	bf14      	ite	ne
 801d0f2:	2301      	movne	r3, #1
 801d0f4:	2300      	moveq	r3, #0
 801d0f6:	b2db      	uxtb	r3, r3
 801d0f8:	e02f      	b.n	801d15a <HAL_TIM_PWM_Start+0x9e>
 801d0fa:	683b      	ldr	r3, [r7, #0]
 801d0fc:	2b08      	cmp	r3, #8
 801d0fe:	d109      	bne.n	801d114 <HAL_TIM_PWM_Start+0x58>
 801d100:	687b      	ldr	r3, [r7, #4]
 801d102:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801d106:	b2db      	uxtb	r3, r3
 801d108:	2b01      	cmp	r3, #1
 801d10a:	bf14      	ite	ne
 801d10c:	2301      	movne	r3, #1
 801d10e:	2300      	moveq	r3, #0
 801d110:	b2db      	uxtb	r3, r3
 801d112:	e022      	b.n	801d15a <HAL_TIM_PWM_Start+0x9e>
 801d114:	683b      	ldr	r3, [r7, #0]
 801d116:	2b0c      	cmp	r3, #12
 801d118:	d109      	bne.n	801d12e <HAL_TIM_PWM_Start+0x72>
 801d11a:	687b      	ldr	r3, [r7, #4]
 801d11c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801d120:	b2db      	uxtb	r3, r3
 801d122:	2b01      	cmp	r3, #1
 801d124:	bf14      	ite	ne
 801d126:	2301      	movne	r3, #1
 801d128:	2300      	moveq	r3, #0
 801d12a:	b2db      	uxtb	r3, r3
 801d12c:	e015      	b.n	801d15a <HAL_TIM_PWM_Start+0x9e>
 801d12e:	683b      	ldr	r3, [r7, #0]
 801d130:	2b10      	cmp	r3, #16
 801d132:	d109      	bne.n	801d148 <HAL_TIM_PWM_Start+0x8c>
 801d134:	687b      	ldr	r3, [r7, #4]
 801d136:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801d13a:	b2db      	uxtb	r3, r3
 801d13c:	2b01      	cmp	r3, #1
 801d13e:	bf14      	ite	ne
 801d140:	2301      	movne	r3, #1
 801d142:	2300      	moveq	r3, #0
 801d144:	b2db      	uxtb	r3, r3
 801d146:	e008      	b.n	801d15a <HAL_TIM_PWM_Start+0x9e>
 801d148:	687b      	ldr	r3, [r7, #4]
 801d14a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801d14e:	b2db      	uxtb	r3, r3
 801d150:	2b01      	cmp	r3, #1
 801d152:	bf14      	ite	ne
 801d154:	2301      	movne	r3, #1
 801d156:	2300      	moveq	r3, #0
 801d158:	b2db      	uxtb	r3, r3
 801d15a:	2b00      	cmp	r3, #0
 801d15c:	d001      	beq.n	801d162 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801d15e:	2301      	movs	r3, #1
 801d160:	e07e      	b.n	801d260 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801d162:	683b      	ldr	r3, [r7, #0]
 801d164:	2b00      	cmp	r3, #0
 801d166:	d104      	bne.n	801d172 <HAL_TIM_PWM_Start+0xb6>
 801d168:	687b      	ldr	r3, [r7, #4]
 801d16a:	2202      	movs	r2, #2
 801d16c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801d170:	e023      	b.n	801d1ba <HAL_TIM_PWM_Start+0xfe>
 801d172:	683b      	ldr	r3, [r7, #0]
 801d174:	2b04      	cmp	r3, #4
 801d176:	d104      	bne.n	801d182 <HAL_TIM_PWM_Start+0xc6>
 801d178:	687b      	ldr	r3, [r7, #4]
 801d17a:	2202      	movs	r2, #2
 801d17c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801d180:	e01b      	b.n	801d1ba <HAL_TIM_PWM_Start+0xfe>
 801d182:	683b      	ldr	r3, [r7, #0]
 801d184:	2b08      	cmp	r3, #8
 801d186:	d104      	bne.n	801d192 <HAL_TIM_PWM_Start+0xd6>
 801d188:	687b      	ldr	r3, [r7, #4]
 801d18a:	2202      	movs	r2, #2
 801d18c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801d190:	e013      	b.n	801d1ba <HAL_TIM_PWM_Start+0xfe>
 801d192:	683b      	ldr	r3, [r7, #0]
 801d194:	2b0c      	cmp	r3, #12
 801d196:	d104      	bne.n	801d1a2 <HAL_TIM_PWM_Start+0xe6>
 801d198:	687b      	ldr	r3, [r7, #4]
 801d19a:	2202      	movs	r2, #2
 801d19c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801d1a0:	e00b      	b.n	801d1ba <HAL_TIM_PWM_Start+0xfe>
 801d1a2:	683b      	ldr	r3, [r7, #0]
 801d1a4:	2b10      	cmp	r3, #16
 801d1a6:	d104      	bne.n	801d1b2 <HAL_TIM_PWM_Start+0xf6>
 801d1a8:	687b      	ldr	r3, [r7, #4]
 801d1aa:	2202      	movs	r2, #2
 801d1ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801d1b0:	e003      	b.n	801d1ba <HAL_TIM_PWM_Start+0xfe>
 801d1b2:	687b      	ldr	r3, [r7, #4]
 801d1b4:	2202      	movs	r2, #2
 801d1b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801d1ba:	687b      	ldr	r3, [r7, #4]
 801d1bc:	681b      	ldr	r3, [r3, #0]
 801d1be:	2201      	movs	r2, #1
 801d1c0:	6839      	ldr	r1, [r7, #0]
 801d1c2:	4618      	mov	r0, r3
 801d1c4:	f000 ff80 	bl	801e0c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801d1c8:	687b      	ldr	r3, [r7, #4]
 801d1ca:	681b      	ldr	r3, [r3, #0]
 801d1cc:	4a26      	ldr	r2, [pc, #152]	@ (801d268 <HAL_TIM_PWM_Start+0x1ac>)
 801d1ce:	4293      	cmp	r3, r2
 801d1d0:	d009      	beq.n	801d1e6 <HAL_TIM_PWM_Start+0x12a>
 801d1d2:	687b      	ldr	r3, [r7, #4]
 801d1d4:	681b      	ldr	r3, [r3, #0]
 801d1d6:	4a25      	ldr	r2, [pc, #148]	@ (801d26c <HAL_TIM_PWM_Start+0x1b0>)
 801d1d8:	4293      	cmp	r3, r2
 801d1da:	d004      	beq.n	801d1e6 <HAL_TIM_PWM_Start+0x12a>
 801d1dc:	687b      	ldr	r3, [r7, #4]
 801d1de:	681b      	ldr	r3, [r3, #0]
 801d1e0:	4a23      	ldr	r2, [pc, #140]	@ (801d270 <HAL_TIM_PWM_Start+0x1b4>)
 801d1e2:	4293      	cmp	r3, r2
 801d1e4:	d101      	bne.n	801d1ea <HAL_TIM_PWM_Start+0x12e>
 801d1e6:	2301      	movs	r3, #1
 801d1e8:	e000      	b.n	801d1ec <HAL_TIM_PWM_Start+0x130>
 801d1ea:	2300      	movs	r3, #0
 801d1ec:	2b00      	cmp	r3, #0
 801d1ee:	d007      	beq.n	801d200 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801d1f0:	687b      	ldr	r3, [r7, #4]
 801d1f2:	681b      	ldr	r3, [r3, #0]
 801d1f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801d1f6:	687b      	ldr	r3, [r7, #4]
 801d1f8:	681b      	ldr	r3, [r3, #0]
 801d1fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801d1fe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801d200:	687b      	ldr	r3, [r7, #4]
 801d202:	681b      	ldr	r3, [r3, #0]
 801d204:	4a18      	ldr	r2, [pc, #96]	@ (801d268 <HAL_TIM_PWM_Start+0x1ac>)
 801d206:	4293      	cmp	r3, r2
 801d208:	d009      	beq.n	801d21e <HAL_TIM_PWM_Start+0x162>
 801d20a:	687b      	ldr	r3, [r7, #4]
 801d20c:	681b      	ldr	r3, [r3, #0]
 801d20e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d212:	d004      	beq.n	801d21e <HAL_TIM_PWM_Start+0x162>
 801d214:	687b      	ldr	r3, [r7, #4]
 801d216:	681b      	ldr	r3, [r3, #0]
 801d218:	4a14      	ldr	r2, [pc, #80]	@ (801d26c <HAL_TIM_PWM_Start+0x1b0>)
 801d21a:	4293      	cmp	r3, r2
 801d21c:	d115      	bne.n	801d24a <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801d21e:	687b      	ldr	r3, [r7, #4]
 801d220:	681b      	ldr	r3, [r3, #0]
 801d222:	689a      	ldr	r2, [r3, #8]
 801d224:	4b13      	ldr	r3, [pc, #76]	@ (801d274 <HAL_TIM_PWM_Start+0x1b8>)
 801d226:	4013      	ands	r3, r2
 801d228:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801d22a:	68fb      	ldr	r3, [r7, #12]
 801d22c:	2b06      	cmp	r3, #6
 801d22e:	d015      	beq.n	801d25c <HAL_TIM_PWM_Start+0x1a0>
 801d230:	68fb      	ldr	r3, [r7, #12]
 801d232:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d236:	d011      	beq.n	801d25c <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 801d238:	687b      	ldr	r3, [r7, #4]
 801d23a:	681b      	ldr	r3, [r3, #0]
 801d23c:	681a      	ldr	r2, [r3, #0]
 801d23e:	687b      	ldr	r3, [r7, #4]
 801d240:	681b      	ldr	r3, [r3, #0]
 801d242:	f042 0201 	orr.w	r2, r2, #1
 801d246:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801d248:	e008      	b.n	801d25c <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801d24a:	687b      	ldr	r3, [r7, #4]
 801d24c:	681b      	ldr	r3, [r3, #0]
 801d24e:	681a      	ldr	r2, [r3, #0]
 801d250:	687b      	ldr	r3, [r7, #4]
 801d252:	681b      	ldr	r3, [r3, #0]
 801d254:	f042 0201 	orr.w	r2, r2, #1
 801d258:	601a      	str	r2, [r3, #0]
 801d25a:	e000      	b.n	801d25e <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801d25c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801d25e:	2300      	movs	r3, #0
}
 801d260:	4618      	mov	r0, r3
 801d262:	3710      	adds	r7, #16
 801d264:	46bd      	mov	sp, r7
 801d266:	bd80      	pop	{r7, pc}
 801d268:	40012c00 	.word	0x40012c00
 801d26c:	40014000 	.word	0x40014000
 801d270:	40014400 	.word	0x40014400
 801d274:	00010007 	.word	0x00010007

0801d278 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801d278:	b580      	push	{r7, lr}
 801d27a:	b082      	sub	sp, #8
 801d27c:	af00      	add	r7, sp, #0
 801d27e:	6078      	str	r0, [r7, #4]
 801d280:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801d282:	687b      	ldr	r3, [r7, #4]
 801d284:	681b      	ldr	r3, [r3, #0]
 801d286:	2200      	movs	r2, #0
 801d288:	6839      	ldr	r1, [r7, #0]
 801d28a:	4618      	mov	r0, r3
 801d28c:	f000 ff1c 	bl	801e0c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801d290:	687b      	ldr	r3, [r7, #4]
 801d292:	681b      	ldr	r3, [r3, #0]
 801d294:	4a39      	ldr	r2, [pc, #228]	@ (801d37c <HAL_TIM_PWM_Stop+0x104>)
 801d296:	4293      	cmp	r3, r2
 801d298:	d009      	beq.n	801d2ae <HAL_TIM_PWM_Stop+0x36>
 801d29a:	687b      	ldr	r3, [r7, #4]
 801d29c:	681b      	ldr	r3, [r3, #0]
 801d29e:	4a38      	ldr	r2, [pc, #224]	@ (801d380 <HAL_TIM_PWM_Stop+0x108>)
 801d2a0:	4293      	cmp	r3, r2
 801d2a2:	d004      	beq.n	801d2ae <HAL_TIM_PWM_Stop+0x36>
 801d2a4:	687b      	ldr	r3, [r7, #4]
 801d2a6:	681b      	ldr	r3, [r3, #0]
 801d2a8:	4a36      	ldr	r2, [pc, #216]	@ (801d384 <HAL_TIM_PWM_Stop+0x10c>)
 801d2aa:	4293      	cmp	r3, r2
 801d2ac:	d101      	bne.n	801d2b2 <HAL_TIM_PWM_Stop+0x3a>
 801d2ae:	2301      	movs	r3, #1
 801d2b0:	e000      	b.n	801d2b4 <HAL_TIM_PWM_Stop+0x3c>
 801d2b2:	2300      	movs	r3, #0
 801d2b4:	2b00      	cmp	r3, #0
 801d2b6:	d017      	beq.n	801d2e8 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801d2b8:	687b      	ldr	r3, [r7, #4]
 801d2ba:	681b      	ldr	r3, [r3, #0]
 801d2bc:	6a1a      	ldr	r2, [r3, #32]
 801d2be:	f241 1311 	movw	r3, #4369	@ 0x1111
 801d2c2:	4013      	ands	r3, r2
 801d2c4:	2b00      	cmp	r3, #0
 801d2c6:	d10f      	bne.n	801d2e8 <HAL_TIM_PWM_Stop+0x70>
 801d2c8:	687b      	ldr	r3, [r7, #4]
 801d2ca:	681b      	ldr	r3, [r3, #0]
 801d2cc:	6a1a      	ldr	r2, [r3, #32]
 801d2ce:	f240 4344 	movw	r3, #1092	@ 0x444
 801d2d2:	4013      	ands	r3, r2
 801d2d4:	2b00      	cmp	r3, #0
 801d2d6:	d107      	bne.n	801d2e8 <HAL_TIM_PWM_Stop+0x70>
 801d2d8:	687b      	ldr	r3, [r7, #4]
 801d2da:	681b      	ldr	r3, [r3, #0]
 801d2dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801d2de:	687b      	ldr	r3, [r7, #4]
 801d2e0:	681b      	ldr	r3, [r3, #0]
 801d2e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801d2e6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801d2e8:	687b      	ldr	r3, [r7, #4]
 801d2ea:	681b      	ldr	r3, [r3, #0]
 801d2ec:	6a1a      	ldr	r2, [r3, #32]
 801d2ee:	f241 1311 	movw	r3, #4369	@ 0x1111
 801d2f2:	4013      	ands	r3, r2
 801d2f4:	2b00      	cmp	r3, #0
 801d2f6:	d10f      	bne.n	801d318 <HAL_TIM_PWM_Stop+0xa0>
 801d2f8:	687b      	ldr	r3, [r7, #4]
 801d2fa:	681b      	ldr	r3, [r3, #0]
 801d2fc:	6a1a      	ldr	r2, [r3, #32]
 801d2fe:	f240 4344 	movw	r3, #1092	@ 0x444
 801d302:	4013      	ands	r3, r2
 801d304:	2b00      	cmp	r3, #0
 801d306:	d107      	bne.n	801d318 <HAL_TIM_PWM_Stop+0xa0>
 801d308:	687b      	ldr	r3, [r7, #4]
 801d30a:	681b      	ldr	r3, [r3, #0]
 801d30c:	681a      	ldr	r2, [r3, #0]
 801d30e:	687b      	ldr	r3, [r7, #4]
 801d310:	681b      	ldr	r3, [r3, #0]
 801d312:	f022 0201 	bic.w	r2, r2, #1
 801d316:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801d318:	683b      	ldr	r3, [r7, #0]
 801d31a:	2b00      	cmp	r3, #0
 801d31c:	d104      	bne.n	801d328 <HAL_TIM_PWM_Stop+0xb0>
 801d31e:	687b      	ldr	r3, [r7, #4]
 801d320:	2201      	movs	r2, #1
 801d322:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801d326:	e023      	b.n	801d370 <HAL_TIM_PWM_Stop+0xf8>
 801d328:	683b      	ldr	r3, [r7, #0]
 801d32a:	2b04      	cmp	r3, #4
 801d32c:	d104      	bne.n	801d338 <HAL_TIM_PWM_Stop+0xc0>
 801d32e:	687b      	ldr	r3, [r7, #4]
 801d330:	2201      	movs	r2, #1
 801d332:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801d336:	e01b      	b.n	801d370 <HAL_TIM_PWM_Stop+0xf8>
 801d338:	683b      	ldr	r3, [r7, #0]
 801d33a:	2b08      	cmp	r3, #8
 801d33c:	d104      	bne.n	801d348 <HAL_TIM_PWM_Stop+0xd0>
 801d33e:	687b      	ldr	r3, [r7, #4]
 801d340:	2201      	movs	r2, #1
 801d342:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801d346:	e013      	b.n	801d370 <HAL_TIM_PWM_Stop+0xf8>
 801d348:	683b      	ldr	r3, [r7, #0]
 801d34a:	2b0c      	cmp	r3, #12
 801d34c:	d104      	bne.n	801d358 <HAL_TIM_PWM_Stop+0xe0>
 801d34e:	687b      	ldr	r3, [r7, #4]
 801d350:	2201      	movs	r2, #1
 801d352:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801d356:	e00b      	b.n	801d370 <HAL_TIM_PWM_Stop+0xf8>
 801d358:	683b      	ldr	r3, [r7, #0]
 801d35a:	2b10      	cmp	r3, #16
 801d35c:	d104      	bne.n	801d368 <HAL_TIM_PWM_Stop+0xf0>
 801d35e:	687b      	ldr	r3, [r7, #4]
 801d360:	2201      	movs	r2, #1
 801d362:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801d366:	e003      	b.n	801d370 <HAL_TIM_PWM_Stop+0xf8>
 801d368:	687b      	ldr	r3, [r7, #4]
 801d36a:	2201      	movs	r2, #1
 801d36c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 801d370:	2300      	movs	r3, #0
}
 801d372:	4618      	mov	r0, r3
 801d374:	3708      	adds	r7, #8
 801d376:	46bd      	mov	sp, r7
 801d378:	bd80      	pop	{r7, pc}
 801d37a:	bf00      	nop
 801d37c:	40012c00 	.word	0x40012c00
 801d380:	40014000 	.word	0x40014000
 801d384:	40014400 	.word	0x40014400

0801d388 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801d388:	b580      	push	{r7, lr}
 801d38a:	b084      	sub	sp, #16
 801d38c:	af00      	add	r7, sp, #0
 801d38e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 801d390:	687b      	ldr	r3, [r7, #4]
 801d392:	681b      	ldr	r3, [r3, #0]
 801d394:	68db      	ldr	r3, [r3, #12]
 801d396:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 801d398:	687b      	ldr	r3, [r7, #4]
 801d39a:	681b      	ldr	r3, [r3, #0]
 801d39c:	691b      	ldr	r3, [r3, #16]
 801d39e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 801d3a0:	68bb      	ldr	r3, [r7, #8]
 801d3a2:	f003 0302 	and.w	r3, r3, #2
 801d3a6:	2b00      	cmp	r3, #0
 801d3a8:	d020      	beq.n	801d3ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 801d3aa:	68fb      	ldr	r3, [r7, #12]
 801d3ac:	f003 0302 	and.w	r3, r3, #2
 801d3b0:	2b00      	cmp	r3, #0
 801d3b2:	d01b      	beq.n	801d3ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 801d3b4:	687b      	ldr	r3, [r7, #4]
 801d3b6:	681b      	ldr	r3, [r3, #0]
 801d3b8:	f06f 0202 	mvn.w	r2, #2
 801d3bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801d3be:	687b      	ldr	r3, [r7, #4]
 801d3c0:	2201      	movs	r2, #1
 801d3c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801d3c4:	687b      	ldr	r3, [r7, #4]
 801d3c6:	681b      	ldr	r3, [r3, #0]
 801d3c8:	699b      	ldr	r3, [r3, #24]
 801d3ca:	f003 0303 	and.w	r3, r3, #3
 801d3ce:	2b00      	cmp	r3, #0
 801d3d0:	d003      	beq.n	801d3da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801d3d2:	6878      	ldr	r0, [r7, #4]
 801d3d4:	f000 fad1 	bl	801d97a <HAL_TIM_IC_CaptureCallback>
 801d3d8:	e005      	b.n	801d3e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801d3da:	6878      	ldr	r0, [r7, #4]
 801d3dc:	f000 fac3 	bl	801d966 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d3e0:	6878      	ldr	r0, [r7, #4]
 801d3e2:	f000 fad4 	bl	801d98e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d3e6:	687b      	ldr	r3, [r7, #4]
 801d3e8:	2200      	movs	r2, #0
 801d3ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 801d3ec:	68bb      	ldr	r3, [r7, #8]
 801d3ee:	f003 0304 	and.w	r3, r3, #4
 801d3f2:	2b00      	cmp	r3, #0
 801d3f4:	d020      	beq.n	801d438 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 801d3f6:	68fb      	ldr	r3, [r7, #12]
 801d3f8:	f003 0304 	and.w	r3, r3, #4
 801d3fc:	2b00      	cmp	r3, #0
 801d3fe:	d01b      	beq.n	801d438 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 801d400:	687b      	ldr	r3, [r7, #4]
 801d402:	681b      	ldr	r3, [r3, #0]
 801d404:	f06f 0204 	mvn.w	r2, #4
 801d408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801d40a:	687b      	ldr	r3, [r7, #4]
 801d40c:	2202      	movs	r2, #2
 801d40e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801d410:	687b      	ldr	r3, [r7, #4]
 801d412:	681b      	ldr	r3, [r3, #0]
 801d414:	699b      	ldr	r3, [r3, #24]
 801d416:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801d41a:	2b00      	cmp	r3, #0
 801d41c:	d003      	beq.n	801d426 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d41e:	6878      	ldr	r0, [r7, #4]
 801d420:	f000 faab 	bl	801d97a <HAL_TIM_IC_CaptureCallback>
 801d424:	e005      	b.n	801d432 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d426:	6878      	ldr	r0, [r7, #4]
 801d428:	f000 fa9d 	bl	801d966 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d42c:	6878      	ldr	r0, [r7, #4]
 801d42e:	f000 faae 	bl	801d98e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d432:	687b      	ldr	r3, [r7, #4]
 801d434:	2200      	movs	r2, #0
 801d436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 801d438:	68bb      	ldr	r3, [r7, #8]
 801d43a:	f003 0308 	and.w	r3, r3, #8
 801d43e:	2b00      	cmp	r3, #0
 801d440:	d020      	beq.n	801d484 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 801d442:	68fb      	ldr	r3, [r7, #12]
 801d444:	f003 0308 	and.w	r3, r3, #8
 801d448:	2b00      	cmp	r3, #0
 801d44a:	d01b      	beq.n	801d484 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 801d44c:	687b      	ldr	r3, [r7, #4]
 801d44e:	681b      	ldr	r3, [r3, #0]
 801d450:	f06f 0208 	mvn.w	r2, #8
 801d454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801d456:	687b      	ldr	r3, [r7, #4]
 801d458:	2204      	movs	r2, #4
 801d45a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801d45c:	687b      	ldr	r3, [r7, #4]
 801d45e:	681b      	ldr	r3, [r3, #0]
 801d460:	69db      	ldr	r3, [r3, #28]
 801d462:	f003 0303 	and.w	r3, r3, #3
 801d466:	2b00      	cmp	r3, #0
 801d468:	d003      	beq.n	801d472 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d46a:	6878      	ldr	r0, [r7, #4]
 801d46c:	f000 fa85 	bl	801d97a <HAL_TIM_IC_CaptureCallback>
 801d470:	e005      	b.n	801d47e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d472:	6878      	ldr	r0, [r7, #4]
 801d474:	f000 fa77 	bl	801d966 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d478:	6878      	ldr	r0, [r7, #4]
 801d47a:	f000 fa88 	bl	801d98e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d47e:	687b      	ldr	r3, [r7, #4]
 801d480:	2200      	movs	r2, #0
 801d482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 801d484:	68bb      	ldr	r3, [r7, #8]
 801d486:	f003 0310 	and.w	r3, r3, #16
 801d48a:	2b00      	cmp	r3, #0
 801d48c:	d020      	beq.n	801d4d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 801d48e:	68fb      	ldr	r3, [r7, #12]
 801d490:	f003 0310 	and.w	r3, r3, #16
 801d494:	2b00      	cmp	r3, #0
 801d496:	d01b      	beq.n	801d4d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 801d498:	687b      	ldr	r3, [r7, #4]
 801d49a:	681b      	ldr	r3, [r3, #0]
 801d49c:	f06f 0210 	mvn.w	r2, #16
 801d4a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801d4a2:	687b      	ldr	r3, [r7, #4]
 801d4a4:	2208      	movs	r2, #8
 801d4a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801d4a8:	687b      	ldr	r3, [r7, #4]
 801d4aa:	681b      	ldr	r3, [r3, #0]
 801d4ac:	69db      	ldr	r3, [r3, #28]
 801d4ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801d4b2:	2b00      	cmp	r3, #0
 801d4b4:	d003      	beq.n	801d4be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d4b6:	6878      	ldr	r0, [r7, #4]
 801d4b8:	f000 fa5f 	bl	801d97a <HAL_TIM_IC_CaptureCallback>
 801d4bc:	e005      	b.n	801d4ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d4be:	6878      	ldr	r0, [r7, #4]
 801d4c0:	f000 fa51 	bl	801d966 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d4c4:	6878      	ldr	r0, [r7, #4]
 801d4c6:	f000 fa62 	bl	801d98e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d4ca:	687b      	ldr	r3, [r7, #4]
 801d4cc:	2200      	movs	r2, #0
 801d4ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 801d4d0:	68bb      	ldr	r3, [r7, #8]
 801d4d2:	f003 0301 	and.w	r3, r3, #1
 801d4d6:	2b00      	cmp	r3, #0
 801d4d8:	d00c      	beq.n	801d4f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 801d4da:	68fb      	ldr	r3, [r7, #12]
 801d4dc:	f003 0301 	and.w	r3, r3, #1
 801d4e0:	2b00      	cmp	r3, #0
 801d4e2:	d007      	beq.n	801d4f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 801d4e4:	687b      	ldr	r3, [r7, #4]
 801d4e6:	681b      	ldr	r3, [r3, #0]
 801d4e8:	f06f 0201 	mvn.w	r2, #1
 801d4ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801d4ee:	6878      	ldr	r0, [r7, #4]
 801d4f0:	f000 fa2f 	bl	801d952 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 801d4f4:	68bb      	ldr	r3, [r7, #8]
 801d4f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801d4fa:	2b00      	cmp	r3, #0
 801d4fc:	d104      	bne.n	801d508 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 801d4fe:	68bb      	ldr	r3, [r7, #8]
 801d500:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 801d504:	2b00      	cmp	r3, #0
 801d506:	d00c      	beq.n	801d522 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801d508:	68fb      	ldr	r3, [r7, #12]
 801d50a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801d50e:	2b00      	cmp	r3, #0
 801d510:	d007      	beq.n	801d522 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 801d512:	687b      	ldr	r3, [r7, #4]
 801d514:	681b      	ldr	r3, [r3, #0]
 801d516:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 801d51a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801d51c:	6878      	ldr	r0, [r7, #4]
 801d51e:	f000 fee1 	bl	801e2e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 801d522:	68bb      	ldr	r3, [r7, #8]
 801d524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d528:	2b00      	cmp	r3, #0
 801d52a:	d00c      	beq.n	801d546 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801d52c:	68fb      	ldr	r3, [r7, #12]
 801d52e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801d532:	2b00      	cmp	r3, #0
 801d534:	d007      	beq.n	801d546 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801d536:	687b      	ldr	r3, [r7, #4]
 801d538:	681b      	ldr	r3, [r3, #0]
 801d53a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 801d53e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801d540:	6878      	ldr	r0, [r7, #4]
 801d542:	f000 fed9 	bl	801e2f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 801d546:	68bb      	ldr	r3, [r7, #8]
 801d548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801d54c:	2b00      	cmp	r3, #0
 801d54e:	d00c      	beq.n	801d56a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 801d550:	68fb      	ldr	r3, [r7, #12]
 801d552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801d556:	2b00      	cmp	r3, #0
 801d558:	d007      	beq.n	801d56a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 801d55a:	687b      	ldr	r3, [r7, #4]
 801d55c:	681b      	ldr	r3, [r3, #0]
 801d55e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 801d562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801d564:	6878      	ldr	r0, [r7, #4]
 801d566:	f000 fa1c 	bl	801d9a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 801d56a:	68bb      	ldr	r3, [r7, #8]
 801d56c:	f003 0320 	and.w	r3, r3, #32
 801d570:	2b00      	cmp	r3, #0
 801d572:	d00c      	beq.n	801d58e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 801d574:	68fb      	ldr	r3, [r7, #12]
 801d576:	f003 0320 	and.w	r3, r3, #32
 801d57a:	2b00      	cmp	r3, #0
 801d57c:	d007      	beq.n	801d58e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 801d57e:	687b      	ldr	r3, [r7, #4]
 801d580:	681b      	ldr	r3, [r3, #0]
 801d582:	f06f 0220 	mvn.w	r2, #32
 801d586:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801d588:	6878      	ldr	r0, [r7, #4]
 801d58a:	f000 fea1 	bl	801e2d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801d58e:	bf00      	nop
 801d590:	3710      	adds	r7, #16
 801d592:	46bd      	mov	sp, r7
 801d594:	bd80      	pop	{r7, pc}
	...

0801d598 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801d598:	b580      	push	{r7, lr}
 801d59a:	b086      	sub	sp, #24
 801d59c:	af00      	add	r7, sp, #0
 801d59e:	60f8      	str	r0, [r7, #12]
 801d5a0:	60b9      	str	r1, [r7, #8]
 801d5a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801d5a4:	2300      	movs	r3, #0
 801d5a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801d5a8:	68fb      	ldr	r3, [r7, #12]
 801d5aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801d5ae:	2b01      	cmp	r3, #1
 801d5b0:	d101      	bne.n	801d5b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801d5b2:	2302      	movs	r3, #2
 801d5b4:	e0ff      	b.n	801d7b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 801d5b6:	68fb      	ldr	r3, [r7, #12]
 801d5b8:	2201      	movs	r2, #1
 801d5ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 801d5be:	687b      	ldr	r3, [r7, #4]
 801d5c0:	2b14      	cmp	r3, #20
 801d5c2:	f200 80f0 	bhi.w	801d7a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 801d5c6:	a201      	add	r2, pc, #4	@ (adr r2, 801d5cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 801d5c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d5cc:	0801d621 	.word	0x0801d621
 801d5d0:	0801d7a7 	.word	0x0801d7a7
 801d5d4:	0801d7a7 	.word	0x0801d7a7
 801d5d8:	0801d7a7 	.word	0x0801d7a7
 801d5dc:	0801d661 	.word	0x0801d661
 801d5e0:	0801d7a7 	.word	0x0801d7a7
 801d5e4:	0801d7a7 	.word	0x0801d7a7
 801d5e8:	0801d7a7 	.word	0x0801d7a7
 801d5ec:	0801d6a3 	.word	0x0801d6a3
 801d5f0:	0801d7a7 	.word	0x0801d7a7
 801d5f4:	0801d7a7 	.word	0x0801d7a7
 801d5f8:	0801d7a7 	.word	0x0801d7a7
 801d5fc:	0801d6e3 	.word	0x0801d6e3
 801d600:	0801d7a7 	.word	0x0801d7a7
 801d604:	0801d7a7 	.word	0x0801d7a7
 801d608:	0801d7a7 	.word	0x0801d7a7
 801d60c:	0801d725 	.word	0x0801d725
 801d610:	0801d7a7 	.word	0x0801d7a7
 801d614:	0801d7a7 	.word	0x0801d7a7
 801d618:	0801d7a7 	.word	0x0801d7a7
 801d61c:	0801d765 	.word	0x0801d765
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801d620:	68fb      	ldr	r3, [r7, #12]
 801d622:	681b      	ldr	r3, [r3, #0]
 801d624:	68b9      	ldr	r1, [r7, #8]
 801d626:	4618      	mov	r0, r3
 801d628:	f000 fa36 	bl	801da98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801d62c:	68fb      	ldr	r3, [r7, #12]
 801d62e:	681b      	ldr	r3, [r3, #0]
 801d630:	699a      	ldr	r2, [r3, #24]
 801d632:	68fb      	ldr	r3, [r7, #12]
 801d634:	681b      	ldr	r3, [r3, #0]
 801d636:	f042 0208 	orr.w	r2, r2, #8
 801d63a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801d63c:	68fb      	ldr	r3, [r7, #12]
 801d63e:	681b      	ldr	r3, [r3, #0]
 801d640:	699a      	ldr	r2, [r3, #24]
 801d642:	68fb      	ldr	r3, [r7, #12]
 801d644:	681b      	ldr	r3, [r3, #0]
 801d646:	f022 0204 	bic.w	r2, r2, #4
 801d64a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801d64c:	68fb      	ldr	r3, [r7, #12]
 801d64e:	681b      	ldr	r3, [r3, #0]
 801d650:	6999      	ldr	r1, [r3, #24]
 801d652:	68bb      	ldr	r3, [r7, #8]
 801d654:	691a      	ldr	r2, [r3, #16]
 801d656:	68fb      	ldr	r3, [r7, #12]
 801d658:	681b      	ldr	r3, [r3, #0]
 801d65a:	430a      	orrs	r2, r1
 801d65c:	619a      	str	r2, [r3, #24]
      break;
 801d65e:	e0a5      	b.n	801d7ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801d660:	68fb      	ldr	r3, [r7, #12]
 801d662:	681b      	ldr	r3, [r3, #0]
 801d664:	68b9      	ldr	r1, [r7, #8]
 801d666:	4618      	mov	r0, r3
 801d668:	f000 fa92 	bl	801db90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801d66c:	68fb      	ldr	r3, [r7, #12]
 801d66e:	681b      	ldr	r3, [r3, #0]
 801d670:	699a      	ldr	r2, [r3, #24]
 801d672:	68fb      	ldr	r3, [r7, #12]
 801d674:	681b      	ldr	r3, [r3, #0]
 801d676:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801d67a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801d67c:	68fb      	ldr	r3, [r7, #12]
 801d67e:	681b      	ldr	r3, [r3, #0]
 801d680:	699a      	ldr	r2, [r3, #24]
 801d682:	68fb      	ldr	r3, [r7, #12]
 801d684:	681b      	ldr	r3, [r3, #0]
 801d686:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801d68a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801d68c:	68fb      	ldr	r3, [r7, #12]
 801d68e:	681b      	ldr	r3, [r3, #0]
 801d690:	6999      	ldr	r1, [r3, #24]
 801d692:	68bb      	ldr	r3, [r7, #8]
 801d694:	691b      	ldr	r3, [r3, #16]
 801d696:	021a      	lsls	r2, r3, #8
 801d698:	68fb      	ldr	r3, [r7, #12]
 801d69a:	681b      	ldr	r3, [r3, #0]
 801d69c:	430a      	orrs	r2, r1
 801d69e:	619a      	str	r2, [r3, #24]
      break;
 801d6a0:	e084      	b.n	801d7ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801d6a2:	68fb      	ldr	r3, [r7, #12]
 801d6a4:	681b      	ldr	r3, [r3, #0]
 801d6a6:	68b9      	ldr	r1, [r7, #8]
 801d6a8:	4618      	mov	r0, r3
 801d6aa:	f000 faeb 	bl	801dc84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801d6ae:	68fb      	ldr	r3, [r7, #12]
 801d6b0:	681b      	ldr	r3, [r3, #0]
 801d6b2:	69da      	ldr	r2, [r3, #28]
 801d6b4:	68fb      	ldr	r3, [r7, #12]
 801d6b6:	681b      	ldr	r3, [r3, #0]
 801d6b8:	f042 0208 	orr.w	r2, r2, #8
 801d6bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801d6be:	68fb      	ldr	r3, [r7, #12]
 801d6c0:	681b      	ldr	r3, [r3, #0]
 801d6c2:	69da      	ldr	r2, [r3, #28]
 801d6c4:	68fb      	ldr	r3, [r7, #12]
 801d6c6:	681b      	ldr	r3, [r3, #0]
 801d6c8:	f022 0204 	bic.w	r2, r2, #4
 801d6cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801d6ce:	68fb      	ldr	r3, [r7, #12]
 801d6d0:	681b      	ldr	r3, [r3, #0]
 801d6d2:	69d9      	ldr	r1, [r3, #28]
 801d6d4:	68bb      	ldr	r3, [r7, #8]
 801d6d6:	691a      	ldr	r2, [r3, #16]
 801d6d8:	68fb      	ldr	r3, [r7, #12]
 801d6da:	681b      	ldr	r3, [r3, #0]
 801d6dc:	430a      	orrs	r2, r1
 801d6de:	61da      	str	r2, [r3, #28]
      break;
 801d6e0:	e064      	b.n	801d7ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801d6e2:	68fb      	ldr	r3, [r7, #12]
 801d6e4:	681b      	ldr	r3, [r3, #0]
 801d6e6:	68b9      	ldr	r1, [r7, #8]
 801d6e8:	4618      	mov	r0, r3
 801d6ea:	f000 fb43 	bl	801dd74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801d6ee:	68fb      	ldr	r3, [r7, #12]
 801d6f0:	681b      	ldr	r3, [r3, #0]
 801d6f2:	69da      	ldr	r2, [r3, #28]
 801d6f4:	68fb      	ldr	r3, [r7, #12]
 801d6f6:	681b      	ldr	r3, [r3, #0]
 801d6f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801d6fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801d6fe:	68fb      	ldr	r3, [r7, #12]
 801d700:	681b      	ldr	r3, [r3, #0]
 801d702:	69da      	ldr	r2, [r3, #28]
 801d704:	68fb      	ldr	r3, [r7, #12]
 801d706:	681b      	ldr	r3, [r3, #0]
 801d708:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801d70c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801d70e:	68fb      	ldr	r3, [r7, #12]
 801d710:	681b      	ldr	r3, [r3, #0]
 801d712:	69d9      	ldr	r1, [r3, #28]
 801d714:	68bb      	ldr	r3, [r7, #8]
 801d716:	691b      	ldr	r3, [r3, #16]
 801d718:	021a      	lsls	r2, r3, #8
 801d71a:	68fb      	ldr	r3, [r7, #12]
 801d71c:	681b      	ldr	r3, [r3, #0]
 801d71e:	430a      	orrs	r2, r1
 801d720:	61da      	str	r2, [r3, #28]
      break;
 801d722:	e043      	b.n	801d7ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801d724:	68fb      	ldr	r3, [r7, #12]
 801d726:	681b      	ldr	r3, [r3, #0]
 801d728:	68b9      	ldr	r1, [r7, #8]
 801d72a:	4618      	mov	r0, r3
 801d72c:	f000 fb80 	bl	801de30 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801d730:	68fb      	ldr	r3, [r7, #12]
 801d732:	681b      	ldr	r3, [r3, #0]
 801d734:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801d736:	68fb      	ldr	r3, [r7, #12]
 801d738:	681b      	ldr	r3, [r3, #0]
 801d73a:	f042 0208 	orr.w	r2, r2, #8
 801d73e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801d740:	68fb      	ldr	r3, [r7, #12]
 801d742:	681b      	ldr	r3, [r3, #0]
 801d744:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801d746:	68fb      	ldr	r3, [r7, #12]
 801d748:	681b      	ldr	r3, [r3, #0]
 801d74a:	f022 0204 	bic.w	r2, r2, #4
 801d74e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801d750:	68fb      	ldr	r3, [r7, #12]
 801d752:	681b      	ldr	r3, [r3, #0]
 801d754:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801d756:	68bb      	ldr	r3, [r7, #8]
 801d758:	691a      	ldr	r2, [r3, #16]
 801d75a:	68fb      	ldr	r3, [r7, #12]
 801d75c:	681b      	ldr	r3, [r3, #0]
 801d75e:	430a      	orrs	r2, r1
 801d760:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 801d762:	e023      	b.n	801d7ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801d764:	68fb      	ldr	r3, [r7, #12]
 801d766:	681b      	ldr	r3, [r3, #0]
 801d768:	68b9      	ldr	r1, [r7, #8]
 801d76a:	4618      	mov	r0, r3
 801d76c:	f000 fbb8 	bl	801dee0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801d770:	68fb      	ldr	r3, [r7, #12]
 801d772:	681b      	ldr	r3, [r3, #0]
 801d774:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801d776:	68fb      	ldr	r3, [r7, #12]
 801d778:	681b      	ldr	r3, [r3, #0]
 801d77a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801d77e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801d780:	68fb      	ldr	r3, [r7, #12]
 801d782:	681b      	ldr	r3, [r3, #0]
 801d784:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801d786:	68fb      	ldr	r3, [r7, #12]
 801d788:	681b      	ldr	r3, [r3, #0]
 801d78a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801d78e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801d790:	68fb      	ldr	r3, [r7, #12]
 801d792:	681b      	ldr	r3, [r3, #0]
 801d794:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801d796:	68bb      	ldr	r3, [r7, #8]
 801d798:	691b      	ldr	r3, [r3, #16]
 801d79a:	021a      	lsls	r2, r3, #8
 801d79c:	68fb      	ldr	r3, [r7, #12]
 801d79e:	681b      	ldr	r3, [r3, #0]
 801d7a0:	430a      	orrs	r2, r1
 801d7a2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 801d7a4:	e002      	b.n	801d7ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801d7a6:	2301      	movs	r3, #1
 801d7a8:	75fb      	strb	r3, [r7, #23]
      break;
 801d7aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801d7ac:	68fb      	ldr	r3, [r7, #12]
 801d7ae:	2200      	movs	r2, #0
 801d7b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801d7b4:	7dfb      	ldrb	r3, [r7, #23]
}
 801d7b6:	4618      	mov	r0, r3
 801d7b8:	3718      	adds	r7, #24
 801d7ba:	46bd      	mov	sp, r7
 801d7bc:	bd80      	pop	{r7, pc}
 801d7be:	bf00      	nop

0801d7c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801d7c0:	b580      	push	{r7, lr}
 801d7c2:	b084      	sub	sp, #16
 801d7c4:	af00      	add	r7, sp, #0
 801d7c6:	6078      	str	r0, [r7, #4]
 801d7c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801d7ca:	2300      	movs	r3, #0
 801d7cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801d7ce:	687b      	ldr	r3, [r7, #4]
 801d7d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801d7d4:	2b01      	cmp	r3, #1
 801d7d6:	d101      	bne.n	801d7dc <HAL_TIM_ConfigClockSource+0x1c>
 801d7d8:	2302      	movs	r3, #2
 801d7da:	e0b6      	b.n	801d94a <HAL_TIM_ConfigClockSource+0x18a>
 801d7dc:	687b      	ldr	r3, [r7, #4]
 801d7de:	2201      	movs	r2, #1
 801d7e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801d7e4:	687b      	ldr	r3, [r7, #4]
 801d7e6:	2202      	movs	r2, #2
 801d7e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801d7ec:	687b      	ldr	r3, [r7, #4]
 801d7ee:	681b      	ldr	r3, [r3, #0]
 801d7f0:	689b      	ldr	r3, [r3, #8]
 801d7f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801d7f4:	68bb      	ldr	r3, [r7, #8]
 801d7f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801d7fa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 801d7fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801d800:	68bb      	ldr	r3, [r7, #8]
 801d802:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801d806:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801d808:	687b      	ldr	r3, [r7, #4]
 801d80a:	681b      	ldr	r3, [r3, #0]
 801d80c:	68ba      	ldr	r2, [r7, #8]
 801d80e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801d810:	683b      	ldr	r3, [r7, #0]
 801d812:	681b      	ldr	r3, [r3, #0]
 801d814:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801d818:	d03e      	beq.n	801d898 <HAL_TIM_ConfigClockSource+0xd8>
 801d81a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801d81e:	f200 8087 	bhi.w	801d930 <HAL_TIM_ConfigClockSource+0x170>
 801d822:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801d826:	f000 8086 	beq.w	801d936 <HAL_TIM_ConfigClockSource+0x176>
 801d82a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801d82e:	d87f      	bhi.n	801d930 <HAL_TIM_ConfigClockSource+0x170>
 801d830:	2b70      	cmp	r3, #112	@ 0x70
 801d832:	d01a      	beq.n	801d86a <HAL_TIM_ConfigClockSource+0xaa>
 801d834:	2b70      	cmp	r3, #112	@ 0x70
 801d836:	d87b      	bhi.n	801d930 <HAL_TIM_ConfigClockSource+0x170>
 801d838:	2b60      	cmp	r3, #96	@ 0x60
 801d83a:	d050      	beq.n	801d8de <HAL_TIM_ConfigClockSource+0x11e>
 801d83c:	2b60      	cmp	r3, #96	@ 0x60
 801d83e:	d877      	bhi.n	801d930 <HAL_TIM_ConfigClockSource+0x170>
 801d840:	2b50      	cmp	r3, #80	@ 0x50
 801d842:	d03c      	beq.n	801d8be <HAL_TIM_ConfigClockSource+0xfe>
 801d844:	2b50      	cmp	r3, #80	@ 0x50
 801d846:	d873      	bhi.n	801d930 <HAL_TIM_ConfigClockSource+0x170>
 801d848:	2b40      	cmp	r3, #64	@ 0x40
 801d84a:	d058      	beq.n	801d8fe <HAL_TIM_ConfigClockSource+0x13e>
 801d84c:	2b40      	cmp	r3, #64	@ 0x40
 801d84e:	d86f      	bhi.n	801d930 <HAL_TIM_ConfigClockSource+0x170>
 801d850:	2b30      	cmp	r3, #48	@ 0x30
 801d852:	d064      	beq.n	801d91e <HAL_TIM_ConfigClockSource+0x15e>
 801d854:	2b30      	cmp	r3, #48	@ 0x30
 801d856:	d86b      	bhi.n	801d930 <HAL_TIM_ConfigClockSource+0x170>
 801d858:	2b20      	cmp	r3, #32
 801d85a:	d060      	beq.n	801d91e <HAL_TIM_ConfigClockSource+0x15e>
 801d85c:	2b20      	cmp	r3, #32
 801d85e:	d867      	bhi.n	801d930 <HAL_TIM_ConfigClockSource+0x170>
 801d860:	2b00      	cmp	r3, #0
 801d862:	d05c      	beq.n	801d91e <HAL_TIM_ConfigClockSource+0x15e>
 801d864:	2b10      	cmp	r3, #16
 801d866:	d05a      	beq.n	801d91e <HAL_TIM_ConfigClockSource+0x15e>
 801d868:	e062      	b.n	801d930 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801d86a:	687b      	ldr	r3, [r7, #4]
 801d86c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801d86e:	683b      	ldr	r3, [r7, #0]
 801d870:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801d872:	683b      	ldr	r3, [r7, #0]
 801d874:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801d876:	683b      	ldr	r3, [r7, #0]
 801d878:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801d87a:	f000 fc05 	bl	801e088 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801d87e:	687b      	ldr	r3, [r7, #4]
 801d880:	681b      	ldr	r3, [r3, #0]
 801d882:	689b      	ldr	r3, [r3, #8]
 801d884:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801d886:	68bb      	ldr	r3, [r7, #8]
 801d888:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 801d88c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801d88e:	687b      	ldr	r3, [r7, #4]
 801d890:	681b      	ldr	r3, [r3, #0]
 801d892:	68ba      	ldr	r2, [r7, #8]
 801d894:	609a      	str	r2, [r3, #8]
      break;
 801d896:	e04f      	b.n	801d938 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801d898:	687b      	ldr	r3, [r7, #4]
 801d89a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801d89c:	683b      	ldr	r3, [r7, #0]
 801d89e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801d8a0:	683b      	ldr	r3, [r7, #0]
 801d8a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801d8a4:	683b      	ldr	r3, [r7, #0]
 801d8a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801d8a8:	f000 fbee 	bl	801e088 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801d8ac:	687b      	ldr	r3, [r7, #4]
 801d8ae:	681b      	ldr	r3, [r3, #0]
 801d8b0:	689a      	ldr	r2, [r3, #8]
 801d8b2:	687b      	ldr	r3, [r7, #4]
 801d8b4:	681b      	ldr	r3, [r3, #0]
 801d8b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801d8ba:	609a      	str	r2, [r3, #8]
      break;
 801d8bc:	e03c      	b.n	801d938 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801d8be:	687b      	ldr	r3, [r7, #4]
 801d8c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801d8c2:	683b      	ldr	r3, [r7, #0]
 801d8c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801d8c6:	683b      	ldr	r3, [r7, #0]
 801d8c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801d8ca:	461a      	mov	r2, r3
 801d8cc:	f000 fb62 	bl	801df94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801d8d0:	687b      	ldr	r3, [r7, #4]
 801d8d2:	681b      	ldr	r3, [r3, #0]
 801d8d4:	2150      	movs	r1, #80	@ 0x50
 801d8d6:	4618      	mov	r0, r3
 801d8d8:	f000 fbbb 	bl	801e052 <TIM_ITRx_SetConfig>
      break;
 801d8dc:	e02c      	b.n	801d938 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801d8de:	687b      	ldr	r3, [r7, #4]
 801d8e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801d8e2:	683b      	ldr	r3, [r7, #0]
 801d8e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801d8e6:	683b      	ldr	r3, [r7, #0]
 801d8e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801d8ea:	461a      	mov	r2, r3
 801d8ec:	f000 fb81 	bl	801dff2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801d8f0:	687b      	ldr	r3, [r7, #4]
 801d8f2:	681b      	ldr	r3, [r3, #0]
 801d8f4:	2160      	movs	r1, #96	@ 0x60
 801d8f6:	4618      	mov	r0, r3
 801d8f8:	f000 fbab 	bl	801e052 <TIM_ITRx_SetConfig>
      break;
 801d8fc:	e01c      	b.n	801d938 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801d8fe:	687b      	ldr	r3, [r7, #4]
 801d900:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801d902:	683b      	ldr	r3, [r7, #0]
 801d904:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801d906:	683b      	ldr	r3, [r7, #0]
 801d908:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801d90a:	461a      	mov	r2, r3
 801d90c:	f000 fb42 	bl	801df94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801d910:	687b      	ldr	r3, [r7, #4]
 801d912:	681b      	ldr	r3, [r3, #0]
 801d914:	2140      	movs	r1, #64	@ 0x40
 801d916:	4618      	mov	r0, r3
 801d918:	f000 fb9b 	bl	801e052 <TIM_ITRx_SetConfig>
      break;
 801d91c:	e00c      	b.n	801d938 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801d91e:	687b      	ldr	r3, [r7, #4]
 801d920:	681a      	ldr	r2, [r3, #0]
 801d922:	683b      	ldr	r3, [r7, #0]
 801d924:	681b      	ldr	r3, [r3, #0]
 801d926:	4619      	mov	r1, r3
 801d928:	4610      	mov	r0, r2
 801d92a:	f000 fb92 	bl	801e052 <TIM_ITRx_SetConfig>
      break;
 801d92e:	e003      	b.n	801d938 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 801d930:	2301      	movs	r3, #1
 801d932:	73fb      	strb	r3, [r7, #15]
      break;
 801d934:	e000      	b.n	801d938 <HAL_TIM_ConfigClockSource+0x178>
      break;
 801d936:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801d938:	687b      	ldr	r3, [r7, #4]
 801d93a:	2201      	movs	r2, #1
 801d93c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801d940:	687b      	ldr	r3, [r7, #4]
 801d942:	2200      	movs	r2, #0
 801d944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801d948:	7bfb      	ldrb	r3, [r7, #15]
}
 801d94a:	4618      	mov	r0, r3
 801d94c:	3710      	adds	r7, #16
 801d94e:	46bd      	mov	sp, r7
 801d950:	bd80      	pop	{r7, pc}

0801d952 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801d952:	b480      	push	{r7}
 801d954:	b083      	sub	sp, #12
 801d956:	af00      	add	r7, sp, #0
 801d958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 801d95a:	bf00      	nop
 801d95c:	370c      	adds	r7, #12
 801d95e:	46bd      	mov	sp, r7
 801d960:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d964:	4770      	bx	lr

0801d966 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801d966:	b480      	push	{r7}
 801d968:	b083      	sub	sp, #12
 801d96a:	af00      	add	r7, sp, #0
 801d96c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801d96e:	bf00      	nop
 801d970:	370c      	adds	r7, #12
 801d972:	46bd      	mov	sp, r7
 801d974:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d978:	4770      	bx	lr

0801d97a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801d97a:	b480      	push	{r7}
 801d97c:	b083      	sub	sp, #12
 801d97e:	af00      	add	r7, sp, #0
 801d980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801d982:	bf00      	nop
 801d984:	370c      	adds	r7, #12
 801d986:	46bd      	mov	sp, r7
 801d988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d98c:	4770      	bx	lr

0801d98e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801d98e:	b480      	push	{r7}
 801d990:	b083      	sub	sp, #12
 801d992:	af00      	add	r7, sp, #0
 801d994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801d996:	bf00      	nop
 801d998:	370c      	adds	r7, #12
 801d99a:	46bd      	mov	sp, r7
 801d99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9a0:	4770      	bx	lr

0801d9a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801d9a2:	b480      	push	{r7}
 801d9a4:	b083      	sub	sp, #12
 801d9a6:	af00      	add	r7, sp, #0
 801d9a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801d9aa:	bf00      	nop
 801d9ac:	370c      	adds	r7, #12
 801d9ae:	46bd      	mov	sp, r7
 801d9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9b4:	4770      	bx	lr
	...

0801d9b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801d9b8:	b480      	push	{r7}
 801d9ba:	b085      	sub	sp, #20
 801d9bc:	af00      	add	r7, sp, #0
 801d9be:	6078      	str	r0, [r7, #4]
 801d9c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801d9c2:	687b      	ldr	r3, [r7, #4]
 801d9c4:	681b      	ldr	r3, [r3, #0]
 801d9c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801d9c8:	687b      	ldr	r3, [r7, #4]
 801d9ca:	4a30      	ldr	r2, [pc, #192]	@ (801da8c <TIM_Base_SetConfig+0xd4>)
 801d9cc:	4293      	cmp	r3, r2
 801d9ce:	d003      	beq.n	801d9d8 <TIM_Base_SetConfig+0x20>
 801d9d0:	687b      	ldr	r3, [r7, #4]
 801d9d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d9d6:	d108      	bne.n	801d9ea <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801d9d8:	68fb      	ldr	r3, [r7, #12]
 801d9da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801d9de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801d9e0:	683b      	ldr	r3, [r7, #0]
 801d9e2:	685b      	ldr	r3, [r3, #4]
 801d9e4:	68fa      	ldr	r2, [r7, #12]
 801d9e6:	4313      	orrs	r3, r2
 801d9e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801d9ea:	687b      	ldr	r3, [r7, #4]
 801d9ec:	4a27      	ldr	r2, [pc, #156]	@ (801da8c <TIM_Base_SetConfig+0xd4>)
 801d9ee:	4293      	cmp	r3, r2
 801d9f0:	d00b      	beq.n	801da0a <TIM_Base_SetConfig+0x52>
 801d9f2:	687b      	ldr	r3, [r7, #4]
 801d9f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d9f8:	d007      	beq.n	801da0a <TIM_Base_SetConfig+0x52>
 801d9fa:	687b      	ldr	r3, [r7, #4]
 801d9fc:	4a24      	ldr	r2, [pc, #144]	@ (801da90 <TIM_Base_SetConfig+0xd8>)
 801d9fe:	4293      	cmp	r3, r2
 801da00:	d003      	beq.n	801da0a <TIM_Base_SetConfig+0x52>
 801da02:	687b      	ldr	r3, [r7, #4]
 801da04:	4a23      	ldr	r2, [pc, #140]	@ (801da94 <TIM_Base_SetConfig+0xdc>)
 801da06:	4293      	cmp	r3, r2
 801da08:	d108      	bne.n	801da1c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801da0a:	68fb      	ldr	r3, [r7, #12]
 801da0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801da10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801da12:	683b      	ldr	r3, [r7, #0]
 801da14:	68db      	ldr	r3, [r3, #12]
 801da16:	68fa      	ldr	r2, [r7, #12]
 801da18:	4313      	orrs	r3, r2
 801da1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801da1c:	68fb      	ldr	r3, [r7, #12]
 801da1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801da22:	683b      	ldr	r3, [r7, #0]
 801da24:	695b      	ldr	r3, [r3, #20]
 801da26:	4313      	orrs	r3, r2
 801da28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801da2a:	687b      	ldr	r3, [r7, #4]
 801da2c:	68fa      	ldr	r2, [r7, #12]
 801da2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801da30:	683b      	ldr	r3, [r7, #0]
 801da32:	689a      	ldr	r2, [r3, #8]
 801da34:	687b      	ldr	r3, [r7, #4]
 801da36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801da38:	683b      	ldr	r3, [r7, #0]
 801da3a:	681a      	ldr	r2, [r3, #0]
 801da3c:	687b      	ldr	r3, [r7, #4]
 801da3e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801da40:	687b      	ldr	r3, [r7, #4]
 801da42:	4a12      	ldr	r2, [pc, #72]	@ (801da8c <TIM_Base_SetConfig+0xd4>)
 801da44:	4293      	cmp	r3, r2
 801da46:	d007      	beq.n	801da58 <TIM_Base_SetConfig+0xa0>
 801da48:	687b      	ldr	r3, [r7, #4]
 801da4a:	4a11      	ldr	r2, [pc, #68]	@ (801da90 <TIM_Base_SetConfig+0xd8>)
 801da4c:	4293      	cmp	r3, r2
 801da4e:	d003      	beq.n	801da58 <TIM_Base_SetConfig+0xa0>
 801da50:	687b      	ldr	r3, [r7, #4]
 801da52:	4a10      	ldr	r2, [pc, #64]	@ (801da94 <TIM_Base_SetConfig+0xdc>)
 801da54:	4293      	cmp	r3, r2
 801da56:	d103      	bne.n	801da60 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801da58:	683b      	ldr	r3, [r7, #0]
 801da5a:	691a      	ldr	r2, [r3, #16]
 801da5c:	687b      	ldr	r3, [r7, #4]
 801da5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801da60:	687b      	ldr	r3, [r7, #4]
 801da62:	2201      	movs	r2, #1
 801da64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 801da66:	687b      	ldr	r3, [r7, #4]
 801da68:	691b      	ldr	r3, [r3, #16]
 801da6a:	f003 0301 	and.w	r3, r3, #1
 801da6e:	2b01      	cmp	r3, #1
 801da70:	d105      	bne.n	801da7e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 801da72:	687b      	ldr	r3, [r7, #4]
 801da74:	691b      	ldr	r3, [r3, #16]
 801da76:	f023 0201 	bic.w	r2, r3, #1
 801da7a:	687b      	ldr	r3, [r7, #4]
 801da7c:	611a      	str	r2, [r3, #16]
  }
}
 801da7e:	bf00      	nop
 801da80:	3714      	adds	r7, #20
 801da82:	46bd      	mov	sp, r7
 801da84:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da88:	4770      	bx	lr
 801da8a:	bf00      	nop
 801da8c:	40012c00 	.word	0x40012c00
 801da90:	40014000 	.word	0x40014000
 801da94:	40014400 	.word	0x40014400

0801da98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801da98:	b480      	push	{r7}
 801da9a:	b087      	sub	sp, #28
 801da9c:	af00      	add	r7, sp, #0
 801da9e:	6078      	str	r0, [r7, #4]
 801daa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801daa2:	687b      	ldr	r3, [r7, #4]
 801daa4:	6a1b      	ldr	r3, [r3, #32]
 801daa6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801daa8:	687b      	ldr	r3, [r7, #4]
 801daaa:	6a1b      	ldr	r3, [r3, #32]
 801daac:	f023 0201 	bic.w	r2, r3, #1
 801dab0:	687b      	ldr	r3, [r7, #4]
 801dab2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801dab4:	687b      	ldr	r3, [r7, #4]
 801dab6:	685b      	ldr	r3, [r3, #4]
 801dab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801daba:	687b      	ldr	r3, [r7, #4]
 801dabc:	699b      	ldr	r3, [r3, #24]
 801dabe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801dac0:	68fb      	ldr	r3, [r7, #12]
 801dac2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801dac6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801daca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801dacc:	68fb      	ldr	r3, [r7, #12]
 801dace:	f023 0303 	bic.w	r3, r3, #3
 801dad2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801dad4:	683b      	ldr	r3, [r7, #0]
 801dad6:	681b      	ldr	r3, [r3, #0]
 801dad8:	68fa      	ldr	r2, [r7, #12]
 801dada:	4313      	orrs	r3, r2
 801dadc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801dade:	697b      	ldr	r3, [r7, #20]
 801dae0:	f023 0302 	bic.w	r3, r3, #2
 801dae4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801dae6:	683b      	ldr	r3, [r7, #0]
 801dae8:	689b      	ldr	r3, [r3, #8]
 801daea:	697a      	ldr	r2, [r7, #20]
 801daec:	4313      	orrs	r3, r2
 801daee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801daf0:	687b      	ldr	r3, [r7, #4]
 801daf2:	4a24      	ldr	r2, [pc, #144]	@ (801db84 <TIM_OC1_SetConfig+0xec>)
 801daf4:	4293      	cmp	r3, r2
 801daf6:	d007      	beq.n	801db08 <TIM_OC1_SetConfig+0x70>
 801daf8:	687b      	ldr	r3, [r7, #4]
 801dafa:	4a23      	ldr	r2, [pc, #140]	@ (801db88 <TIM_OC1_SetConfig+0xf0>)
 801dafc:	4293      	cmp	r3, r2
 801dafe:	d003      	beq.n	801db08 <TIM_OC1_SetConfig+0x70>
 801db00:	687b      	ldr	r3, [r7, #4]
 801db02:	4a22      	ldr	r2, [pc, #136]	@ (801db8c <TIM_OC1_SetConfig+0xf4>)
 801db04:	4293      	cmp	r3, r2
 801db06:	d10c      	bne.n	801db22 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801db08:	697b      	ldr	r3, [r7, #20]
 801db0a:	f023 0308 	bic.w	r3, r3, #8
 801db0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801db10:	683b      	ldr	r3, [r7, #0]
 801db12:	68db      	ldr	r3, [r3, #12]
 801db14:	697a      	ldr	r2, [r7, #20]
 801db16:	4313      	orrs	r3, r2
 801db18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801db1a:	697b      	ldr	r3, [r7, #20]
 801db1c:	f023 0304 	bic.w	r3, r3, #4
 801db20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801db22:	687b      	ldr	r3, [r7, #4]
 801db24:	4a17      	ldr	r2, [pc, #92]	@ (801db84 <TIM_OC1_SetConfig+0xec>)
 801db26:	4293      	cmp	r3, r2
 801db28:	d007      	beq.n	801db3a <TIM_OC1_SetConfig+0xa2>
 801db2a:	687b      	ldr	r3, [r7, #4]
 801db2c:	4a16      	ldr	r2, [pc, #88]	@ (801db88 <TIM_OC1_SetConfig+0xf0>)
 801db2e:	4293      	cmp	r3, r2
 801db30:	d003      	beq.n	801db3a <TIM_OC1_SetConfig+0xa2>
 801db32:	687b      	ldr	r3, [r7, #4]
 801db34:	4a15      	ldr	r2, [pc, #84]	@ (801db8c <TIM_OC1_SetConfig+0xf4>)
 801db36:	4293      	cmp	r3, r2
 801db38:	d111      	bne.n	801db5e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801db3a:	693b      	ldr	r3, [r7, #16]
 801db3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801db40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801db42:	693b      	ldr	r3, [r7, #16]
 801db44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801db48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801db4a:	683b      	ldr	r3, [r7, #0]
 801db4c:	695b      	ldr	r3, [r3, #20]
 801db4e:	693a      	ldr	r2, [r7, #16]
 801db50:	4313      	orrs	r3, r2
 801db52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801db54:	683b      	ldr	r3, [r7, #0]
 801db56:	699b      	ldr	r3, [r3, #24]
 801db58:	693a      	ldr	r2, [r7, #16]
 801db5a:	4313      	orrs	r3, r2
 801db5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801db5e:	687b      	ldr	r3, [r7, #4]
 801db60:	693a      	ldr	r2, [r7, #16]
 801db62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801db64:	687b      	ldr	r3, [r7, #4]
 801db66:	68fa      	ldr	r2, [r7, #12]
 801db68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801db6a:	683b      	ldr	r3, [r7, #0]
 801db6c:	685a      	ldr	r2, [r3, #4]
 801db6e:	687b      	ldr	r3, [r7, #4]
 801db70:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801db72:	687b      	ldr	r3, [r7, #4]
 801db74:	697a      	ldr	r2, [r7, #20]
 801db76:	621a      	str	r2, [r3, #32]
}
 801db78:	bf00      	nop
 801db7a:	371c      	adds	r7, #28
 801db7c:	46bd      	mov	sp, r7
 801db7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db82:	4770      	bx	lr
 801db84:	40012c00 	.word	0x40012c00
 801db88:	40014000 	.word	0x40014000
 801db8c:	40014400 	.word	0x40014400

0801db90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801db90:	b480      	push	{r7}
 801db92:	b087      	sub	sp, #28
 801db94:	af00      	add	r7, sp, #0
 801db96:	6078      	str	r0, [r7, #4]
 801db98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801db9a:	687b      	ldr	r3, [r7, #4]
 801db9c:	6a1b      	ldr	r3, [r3, #32]
 801db9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801dba0:	687b      	ldr	r3, [r7, #4]
 801dba2:	6a1b      	ldr	r3, [r3, #32]
 801dba4:	f023 0210 	bic.w	r2, r3, #16
 801dba8:	687b      	ldr	r3, [r7, #4]
 801dbaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801dbac:	687b      	ldr	r3, [r7, #4]
 801dbae:	685b      	ldr	r3, [r3, #4]
 801dbb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801dbb2:	687b      	ldr	r3, [r7, #4]
 801dbb4:	699b      	ldr	r3, [r3, #24]
 801dbb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801dbb8:	68fb      	ldr	r3, [r7, #12]
 801dbba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801dbbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801dbc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801dbc4:	68fb      	ldr	r3, [r7, #12]
 801dbc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801dbca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801dbcc:	683b      	ldr	r3, [r7, #0]
 801dbce:	681b      	ldr	r3, [r3, #0]
 801dbd0:	021b      	lsls	r3, r3, #8
 801dbd2:	68fa      	ldr	r2, [r7, #12]
 801dbd4:	4313      	orrs	r3, r2
 801dbd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801dbd8:	697b      	ldr	r3, [r7, #20]
 801dbda:	f023 0320 	bic.w	r3, r3, #32
 801dbde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801dbe0:	683b      	ldr	r3, [r7, #0]
 801dbe2:	689b      	ldr	r3, [r3, #8]
 801dbe4:	011b      	lsls	r3, r3, #4
 801dbe6:	697a      	ldr	r2, [r7, #20]
 801dbe8:	4313      	orrs	r3, r2
 801dbea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801dbec:	687b      	ldr	r3, [r7, #4]
 801dbee:	4a22      	ldr	r2, [pc, #136]	@ (801dc78 <TIM_OC2_SetConfig+0xe8>)
 801dbf0:	4293      	cmp	r3, r2
 801dbf2:	d10d      	bne.n	801dc10 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801dbf4:	697b      	ldr	r3, [r7, #20]
 801dbf6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801dbfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801dbfc:	683b      	ldr	r3, [r7, #0]
 801dbfe:	68db      	ldr	r3, [r3, #12]
 801dc00:	011b      	lsls	r3, r3, #4
 801dc02:	697a      	ldr	r2, [r7, #20]
 801dc04:	4313      	orrs	r3, r2
 801dc06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801dc08:	697b      	ldr	r3, [r7, #20]
 801dc0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801dc0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801dc10:	687b      	ldr	r3, [r7, #4]
 801dc12:	4a19      	ldr	r2, [pc, #100]	@ (801dc78 <TIM_OC2_SetConfig+0xe8>)
 801dc14:	4293      	cmp	r3, r2
 801dc16:	d007      	beq.n	801dc28 <TIM_OC2_SetConfig+0x98>
 801dc18:	687b      	ldr	r3, [r7, #4]
 801dc1a:	4a18      	ldr	r2, [pc, #96]	@ (801dc7c <TIM_OC2_SetConfig+0xec>)
 801dc1c:	4293      	cmp	r3, r2
 801dc1e:	d003      	beq.n	801dc28 <TIM_OC2_SetConfig+0x98>
 801dc20:	687b      	ldr	r3, [r7, #4]
 801dc22:	4a17      	ldr	r2, [pc, #92]	@ (801dc80 <TIM_OC2_SetConfig+0xf0>)
 801dc24:	4293      	cmp	r3, r2
 801dc26:	d113      	bne.n	801dc50 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801dc28:	693b      	ldr	r3, [r7, #16]
 801dc2a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801dc2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801dc30:	693b      	ldr	r3, [r7, #16]
 801dc32:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801dc36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801dc38:	683b      	ldr	r3, [r7, #0]
 801dc3a:	695b      	ldr	r3, [r3, #20]
 801dc3c:	009b      	lsls	r3, r3, #2
 801dc3e:	693a      	ldr	r2, [r7, #16]
 801dc40:	4313      	orrs	r3, r2
 801dc42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801dc44:	683b      	ldr	r3, [r7, #0]
 801dc46:	699b      	ldr	r3, [r3, #24]
 801dc48:	009b      	lsls	r3, r3, #2
 801dc4a:	693a      	ldr	r2, [r7, #16]
 801dc4c:	4313      	orrs	r3, r2
 801dc4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801dc50:	687b      	ldr	r3, [r7, #4]
 801dc52:	693a      	ldr	r2, [r7, #16]
 801dc54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801dc56:	687b      	ldr	r3, [r7, #4]
 801dc58:	68fa      	ldr	r2, [r7, #12]
 801dc5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801dc5c:	683b      	ldr	r3, [r7, #0]
 801dc5e:	685a      	ldr	r2, [r3, #4]
 801dc60:	687b      	ldr	r3, [r7, #4]
 801dc62:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801dc64:	687b      	ldr	r3, [r7, #4]
 801dc66:	697a      	ldr	r2, [r7, #20]
 801dc68:	621a      	str	r2, [r3, #32]
}
 801dc6a:	bf00      	nop
 801dc6c:	371c      	adds	r7, #28
 801dc6e:	46bd      	mov	sp, r7
 801dc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc74:	4770      	bx	lr
 801dc76:	bf00      	nop
 801dc78:	40012c00 	.word	0x40012c00
 801dc7c:	40014000 	.word	0x40014000
 801dc80:	40014400 	.word	0x40014400

0801dc84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801dc84:	b480      	push	{r7}
 801dc86:	b087      	sub	sp, #28
 801dc88:	af00      	add	r7, sp, #0
 801dc8a:	6078      	str	r0, [r7, #4]
 801dc8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801dc8e:	687b      	ldr	r3, [r7, #4]
 801dc90:	6a1b      	ldr	r3, [r3, #32]
 801dc92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801dc94:	687b      	ldr	r3, [r7, #4]
 801dc96:	6a1b      	ldr	r3, [r3, #32]
 801dc98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 801dc9c:	687b      	ldr	r3, [r7, #4]
 801dc9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801dca0:	687b      	ldr	r3, [r7, #4]
 801dca2:	685b      	ldr	r3, [r3, #4]
 801dca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801dca6:	687b      	ldr	r3, [r7, #4]
 801dca8:	69db      	ldr	r3, [r3, #28]
 801dcaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801dcac:	68fb      	ldr	r3, [r7, #12]
 801dcae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801dcb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801dcb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801dcb8:	68fb      	ldr	r3, [r7, #12]
 801dcba:	f023 0303 	bic.w	r3, r3, #3
 801dcbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801dcc0:	683b      	ldr	r3, [r7, #0]
 801dcc2:	681b      	ldr	r3, [r3, #0]
 801dcc4:	68fa      	ldr	r2, [r7, #12]
 801dcc6:	4313      	orrs	r3, r2
 801dcc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801dcca:	697b      	ldr	r3, [r7, #20]
 801dccc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801dcd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801dcd2:	683b      	ldr	r3, [r7, #0]
 801dcd4:	689b      	ldr	r3, [r3, #8]
 801dcd6:	021b      	lsls	r3, r3, #8
 801dcd8:	697a      	ldr	r2, [r7, #20]
 801dcda:	4313      	orrs	r3, r2
 801dcdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801dcde:	687b      	ldr	r3, [r7, #4]
 801dce0:	4a21      	ldr	r2, [pc, #132]	@ (801dd68 <TIM_OC3_SetConfig+0xe4>)
 801dce2:	4293      	cmp	r3, r2
 801dce4:	d10d      	bne.n	801dd02 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801dce6:	697b      	ldr	r3, [r7, #20]
 801dce8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801dcec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801dcee:	683b      	ldr	r3, [r7, #0]
 801dcf0:	68db      	ldr	r3, [r3, #12]
 801dcf2:	021b      	lsls	r3, r3, #8
 801dcf4:	697a      	ldr	r2, [r7, #20]
 801dcf6:	4313      	orrs	r3, r2
 801dcf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801dcfa:	697b      	ldr	r3, [r7, #20]
 801dcfc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801dd00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801dd02:	687b      	ldr	r3, [r7, #4]
 801dd04:	4a18      	ldr	r2, [pc, #96]	@ (801dd68 <TIM_OC3_SetConfig+0xe4>)
 801dd06:	4293      	cmp	r3, r2
 801dd08:	d007      	beq.n	801dd1a <TIM_OC3_SetConfig+0x96>
 801dd0a:	687b      	ldr	r3, [r7, #4]
 801dd0c:	4a17      	ldr	r2, [pc, #92]	@ (801dd6c <TIM_OC3_SetConfig+0xe8>)
 801dd0e:	4293      	cmp	r3, r2
 801dd10:	d003      	beq.n	801dd1a <TIM_OC3_SetConfig+0x96>
 801dd12:	687b      	ldr	r3, [r7, #4]
 801dd14:	4a16      	ldr	r2, [pc, #88]	@ (801dd70 <TIM_OC3_SetConfig+0xec>)
 801dd16:	4293      	cmp	r3, r2
 801dd18:	d113      	bne.n	801dd42 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801dd1a:	693b      	ldr	r3, [r7, #16]
 801dd1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801dd20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801dd22:	693b      	ldr	r3, [r7, #16]
 801dd24:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801dd28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801dd2a:	683b      	ldr	r3, [r7, #0]
 801dd2c:	695b      	ldr	r3, [r3, #20]
 801dd2e:	011b      	lsls	r3, r3, #4
 801dd30:	693a      	ldr	r2, [r7, #16]
 801dd32:	4313      	orrs	r3, r2
 801dd34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801dd36:	683b      	ldr	r3, [r7, #0]
 801dd38:	699b      	ldr	r3, [r3, #24]
 801dd3a:	011b      	lsls	r3, r3, #4
 801dd3c:	693a      	ldr	r2, [r7, #16]
 801dd3e:	4313      	orrs	r3, r2
 801dd40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801dd42:	687b      	ldr	r3, [r7, #4]
 801dd44:	693a      	ldr	r2, [r7, #16]
 801dd46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801dd48:	687b      	ldr	r3, [r7, #4]
 801dd4a:	68fa      	ldr	r2, [r7, #12]
 801dd4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801dd4e:	683b      	ldr	r3, [r7, #0]
 801dd50:	685a      	ldr	r2, [r3, #4]
 801dd52:	687b      	ldr	r3, [r7, #4]
 801dd54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801dd56:	687b      	ldr	r3, [r7, #4]
 801dd58:	697a      	ldr	r2, [r7, #20]
 801dd5a:	621a      	str	r2, [r3, #32]
}
 801dd5c:	bf00      	nop
 801dd5e:	371c      	adds	r7, #28
 801dd60:	46bd      	mov	sp, r7
 801dd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd66:	4770      	bx	lr
 801dd68:	40012c00 	.word	0x40012c00
 801dd6c:	40014000 	.word	0x40014000
 801dd70:	40014400 	.word	0x40014400

0801dd74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801dd74:	b480      	push	{r7}
 801dd76:	b087      	sub	sp, #28
 801dd78:	af00      	add	r7, sp, #0
 801dd7a:	6078      	str	r0, [r7, #4]
 801dd7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801dd7e:	687b      	ldr	r3, [r7, #4]
 801dd80:	6a1b      	ldr	r3, [r3, #32]
 801dd82:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801dd84:	687b      	ldr	r3, [r7, #4]
 801dd86:	6a1b      	ldr	r3, [r3, #32]
 801dd88:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801dd8c:	687b      	ldr	r3, [r7, #4]
 801dd8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801dd90:	687b      	ldr	r3, [r7, #4]
 801dd92:	685b      	ldr	r3, [r3, #4]
 801dd94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801dd96:	687b      	ldr	r3, [r7, #4]
 801dd98:	69db      	ldr	r3, [r3, #28]
 801dd9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801dd9c:	68fb      	ldr	r3, [r7, #12]
 801dd9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801dda2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801dda6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801dda8:	68fb      	ldr	r3, [r7, #12]
 801ddaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801ddae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801ddb0:	683b      	ldr	r3, [r7, #0]
 801ddb2:	681b      	ldr	r3, [r3, #0]
 801ddb4:	021b      	lsls	r3, r3, #8
 801ddb6:	68fa      	ldr	r2, [r7, #12]
 801ddb8:	4313      	orrs	r3, r2
 801ddba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801ddbc:	693b      	ldr	r3, [r7, #16]
 801ddbe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801ddc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801ddc4:	683b      	ldr	r3, [r7, #0]
 801ddc6:	689b      	ldr	r3, [r3, #8]
 801ddc8:	031b      	lsls	r3, r3, #12
 801ddca:	693a      	ldr	r2, [r7, #16]
 801ddcc:	4313      	orrs	r3, r2
 801ddce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ddd0:	687b      	ldr	r3, [r7, #4]
 801ddd2:	4a14      	ldr	r2, [pc, #80]	@ (801de24 <TIM_OC4_SetConfig+0xb0>)
 801ddd4:	4293      	cmp	r3, r2
 801ddd6:	d007      	beq.n	801dde8 <TIM_OC4_SetConfig+0x74>
 801ddd8:	687b      	ldr	r3, [r7, #4]
 801ddda:	4a13      	ldr	r2, [pc, #76]	@ (801de28 <TIM_OC4_SetConfig+0xb4>)
 801dddc:	4293      	cmp	r3, r2
 801ddde:	d003      	beq.n	801dde8 <TIM_OC4_SetConfig+0x74>
 801dde0:	687b      	ldr	r3, [r7, #4]
 801dde2:	4a12      	ldr	r2, [pc, #72]	@ (801de2c <TIM_OC4_SetConfig+0xb8>)
 801dde4:	4293      	cmp	r3, r2
 801dde6:	d109      	bne.n	801ddfc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801dde8:	697b      	ldr	r3, [r7, #20]
 801ddea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801ddee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801ddf0:	683b      	ldr	r3, [r7, #0]
 801ddf2:	695b      	ldr	r3, [r3, #20]
 801ddf4:	019b      	lsls	r3, r3, #6
 801ddf6:	697a      	ldr	r2, [r7, #20]
 801ddf8:	4313      	orrs	r3, r2
 801ddfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ddfc:	687b      	ldr	r3, [r7, #4]
 801ddfe:	697a      	ldr	r2, [r7, #20]
 801de00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801de02:	687b      	ldr	r3, [r7, #4]
 801de04:	68fa      	ldr	r2, [r7, #12]
 801de06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801de08:	683b      	ldr	r3, [r7, #0]
 801de0a:	685a      	ldr	r2, [r3, #4]
 801de0c:	687b      	ldr	r3, [r7, #4]
 801de0e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801de10:	687b      	ldr	r3, [r7, #4]
 801de12:	693a      	ldr	r2, [r7, #16]
 801de14:	621a      	str	r2, [r3, #32]
}
 801de16:	bf00      	nop
 801de18:	371c      	adds	r7, #28
 801de1a:	46bd      	mov	sp, r7
 801de1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de20:	4770      	bx	lr
 801de22:	bf00      	nop
 801de24:	40012c00 	.word	0x40012c00
 801de28:	40014000 	.word	0x40014000
 801de2c:	40014400 	.word	0x40014400

0801de30 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801de30:	b480      	push	{r7}
 801de32:	b087      	sub	sp, #28
 801de34:	af00      	add	r7, sp, #0
 801de36:	6078      	str	r0, [r7, #4]
 801de38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801de3a:	687b      	ldr	r3, [r7, #4]
 801de3c:	6a1b      	ldr	r3, [r3, #32]
 801de3e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801de40:	687b      	ldr	r3, [r7, #4]
 801de42:	6a1b      	ldr	r3, [r3, #32]
 801de44:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801de48:	687b      	ldr	r3, [r7, #4]
 801de4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801de4c:	687b      	ldr	r3, [r7, #4]
 801de4e:	685b      	ldr	r3, [r3, #4]
 801de50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801de52:	687b      	ldr	r3, [r7, #4]
 801de54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801de56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801de58:	68fb      	ldr	r3, [r7, #12]
 801de5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801de5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801de62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801de64:	683b      	ldr	r3, [r7, #0]
 801de66:	681b      	ldr	r3, [r3, #0]
 801de68:	68fa      	ldr	r2, [r7, #12]
 801de6a:	4313      	orrs	r3, r2
 801de6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801de6e:	693b      	ldr	r3, [r7, #16]
 801de70:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 801de74:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801de76:	683b      	ldr	r3, [r7, #0]
 801de78:	689b      	ldr	r3, [r3, #8]
 801de7a:	041b      	lsls	r3, r3, #16
 801de7c:	693a      	ldr	r2, [r7, #16]
 801de7e:	4313      	orrs	r3, r2
 801de80:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801de82:	687b      	ldr	r3, [r7, #4]
 801de84:	4a13      	ldr	r2, [pc, #76]	@ (801ded4 <TIM_OC5_SetConfig+0xa4>)
 801de86:	4293      	cmp	r3, r2
 801de88:	d007      	beq.n	801de9a <TIM_OC5_SetConfig+0x6a>
 801de8a:	687b      	ldr	r3, [r7, #4]
 801de8c:	4a12      	ldr	r2, [pc, #72]	@ (801ded8 <TIM_OC5_SetConfig+0xa8>)
 801de8e:	4293      	cmp	r3, r2
 801de90:	d003      	beq.n	801de9a <TIM_OC5_SetConfig+0x6a>
 801de92:	687b      	ldr	r3, [r7, #4]
 801de94:	4a11      	ldr	r2, [pc, #68]	@ (801dedc <TIM_OC5_SetConfig+0xac>)
 801de96:	4293      	cmp	r3, r2
 801de98:	d109      	bne.n	801deae <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801de9a:	697b      	ldr	r3, [r7, #20]
 801de9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801dea0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801dea2:	683b      	ldr	r3, [r7, #0]
 801dea4:	695b      	ldr	r3, [r3, #20]
 801dea6:	021b      	lsls	r3, r3, #8
 801dea8:	697a      	ldr	r2, [r7, #20]
 801deaa:	4313      	orrs	r3, r2
 801deac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801deae:	687b      	ldr	r3, [r7, #4]
 801deb0:	697a      	ldr	r2, [r7, #20]
 801deb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801deb4:	687b      	ldr	r3, [r7, #4]
 801deb6:	68fa      	ldr	r2, [r7, #12]
 801deb8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801deba:	683b      	ldr	r3, [r7, #0]
 801debc:	685a      	ldr	r2, [r3, #4]
 801debe:	687b      	ldr	r3, [r7, #4]
 801dec0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801dec2:	687b      	ldr	r3, [r7, #4]
 801dec4:	693a      	ldr	r2, [r7, #16]
 801dec6:	621a      	str	r2, [r3, #32]
}
 801dec8:	bf00      	nop
 801deca:	371c      	adds	r7, #28
 801decc:	46bd      	mov	sp, r7
 801dece:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ded2:	4770      	bx	lr
 801ded4:	40012c00 	.word	0x40012c00
 801ded8:	40014000 	.word	0x40014000
 801dedc:	40014400 	.word	0x40014400

0801dee0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801dee0:	b480      	push	{r7}
 801dee2:	b087      	sub	sp, #28
 801dee4:	af00      	add	r7, sp, #0
 801dee6:	6078      	str	r0, [r7, #4]
 801dee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801deea:	687b      	ldr	r3, [r7, #4]
 801deec:	6a1b      	ldr	r3, [r3, #32]
 801deee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801def0:	687b      	ldr	r3, [r7, #4]
 801def2:	6a1b      	ldr	r3, [r3, #32]
 801def4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 801def8:	687b      	ldr	r3, [r7, #4]
 801defa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801defc:	687b      	ldr	r3, [r7, #4]
 801defe:	685b      	ldr	r3, [r3, #4]
 801df00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801df02:	687b      	ldr	r3, [r7, #4]
 801df04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801df06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801df08:	68fb      	ldr	r3, [r7, #12]
 801df0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801df0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801df12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801df14:	683b      	ldr	r3, [r7, #0]
 801df16:	681b      	ldr	r3, [r3, #0]
 801df18:	021b      	lsls	r3, r3, #8
 801df1a:	68fa      	ldr	r2, [r7, #12]
 801df1c:	4313      	orrs	r3, r2
 801df1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801df20:	693b      	ldr	r3, [r7, #16]
 801df22:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801df26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801df28:	683b      	ldr	r3, [r7, #0]
 801df2a:	689b      	ldr	r3, [r3, #8]
 801df2c:	051b      	lsls	r3, r3, #20
 801df2e:	693a      	ldr	r2, [r7, #16]
 801df30:	4313      	orrs	r3, r2
 801df32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801df34:	687b      	ldr	r3, [r7, #4]
 801df36:	4a14      	ldr	r2, [pc, #80]	@ (801df88 <TIM_OC6_SetConfig+0xa8>)
 801df38:	4293      	cmp	r3, r2
 801df3a:	d007      	beq.n	801df4c <TIM_OC6_SetConfig+0x6c>
 801df3c:	687b      	ldr	r3, [r7, #4]
 801df3e:	4a13      	ldr	r2, [pc, #76]	@ (801df8c <TIM_OC6_SetConfig+0xac>)
 801df40:	4293      	cmp	r3, r2
 801df42:	d003      	beq.n	801df4c <TIM_OC6_SetConfig+0x6c>
 801df44:	687b      	ldr	r3, [r7, #4]
 801df46:	4a12      	ldr	r2, [pc, #72]	@ (801df90 <TIM_OC6_SetConfig+0xb0>)
 801df48:	4293      	cmp	r3, r2
 801df4a:	d109      	bne.n	801df60 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801df4c:	697b      	ldr	r3, [r7, #20]
 801df4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801df52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801df54:	683b      	ldr	r3, [r7, #0]
 801df56:	695b      	ldr	r3, [r3, #20]
 801df58:	029b      	lsls	r3, r3, #10
 801df5a:	697a      	ldr	r2, [r7, #20]
 801df5c:	4313      	orrs	r3, r2
 801df5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801df60:	687b      	ldr	r3, [r7, #4]
 801df62:	697a      	ldr	r2, [r7, #20]
 801df64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801df66:	687b      	ldr	r3, [r7, #4]
 801df68:	68fa      	ldr	r2, [r7, #12]
 801df6a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801df6c:	683b      	ldr	r3, [r7, #0]
 801df6e:	685a      	ldr	r2, [r3, #4]
 801df70:	687b      	ldr	r3, [r7, #4]
 801df72:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801df74:	687b      	ldr	r3, [r7, #4]
 801df76:	693a      	ldr	r2, [r7, #16]
 801df78:	621a      	str	r2, [r3, #32]
}
 801df7a:	bf00      	nop
 801df7c:	371c      	adds	r7, #28
 801df7e:	46bd      	mov	sp, r7
 801df80:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df84:	4770      	bx	lr
 801df86:	bf00      	nop
 801df88:	40012c00 	.word	0x40012c00
 801df8c:	40014000 	.word	0x40014000
 801df90:	40014400 	.word	0x40014400

0801df94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801df94:	b480      	push	{r7}
 801df96:	b087      	sub	sp, #28
 801df98:	af00      	add	r7, sp, #0
 801df9a:	60f8      	str	r0, [r7, #12]
 801df9c:	60b9      	str	r1, [r7, #8]
 801df9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801dfa0:	68fb      	ldr	r3, [r7, #12]
 801dfa2:	6a1b      	ldr	r3, [r3, #32]
 801dfa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801dfa6:	68fb      	ldr	r3, [r7, #12]
 801dfa8:	6a1b      	ldr	r3, [r3, #32]
 801dfaa:	f023 0201 	bic.w	r2, r3, #1
 801dfae:	68fb      	ldr	r3, [r7, #12]
 801dfb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801dfb2:	68fb      	ldr	r3, [r7, #12]
 801dfb4:	699b      	ldr	r3, [r3, #24]
 801dfb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801dfb8:	693b      	ldr	r3, [r7, #16]
 801dfba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801dfbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801dfc0:	687b      	ldr	r3, [r7, #4]
 801dfc2:	011b      	lsls	r3, r3, #4
 801dfc4:	693a      	ldr	r2, [r7, #16]
 801dfc6:	4313      	orrs	r3, r2
 801dfc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801dfca:	697b      	ldr	r3, [r7, #20]
 801dfcc:	f023 030a 	bic.w	r3, r3, #10
 801dfd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801dfd2:	697a      	ldr	r2, [r7, #20]
 801dfd4:	68bb      	ldr	r3, [r7, #8]
 801dfd6:	4313      	orrs	r3, r2
 801dfd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801dfda:	68fb      	ldr	r3, [r7, #12]
 801dfdc:	693a      	ldr	r2, [r7, #16]
 801dfde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801dfe0:	68fb      	ldr	r3, [r7, #12]
 801dfe2:	697a      	ldr	r2, [r7, #20]
 801dfe4:	621a      	str	r2, [r3, #32]
}
 801dfe6:	bf00      	nop
 801dfe8:	371c      	adds	r7, #28
 801dfea:	46bd      	mov	sp, r7
 801dfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dff0:	4770      	bx	lr

0801dff2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801dff2:	b480      	push	{r7}
 801dff4:	b087      	sub	sp, #28
 801dff6:	af00      	add	r7, sp, #0
 801dff8:	60f8      	str	r0, [r7, #12]
 801dffa:	60b9      	str	r1, [r7, #8]
 801dffc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 801dffe:	68fb      	ldr	r3, [r7, #12]
 801e000:	6a1b      	ldr	r3, [r3, #32]
 801e002:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801e004:	68fb      	ldr	r3, [r7, #12]
 801e006:	6a1b      	ldr	r3, [r3, #32]
 801e008:	f023 0210 	bic.w	r2, r3, #16
 801e00c:	68fb      	ldr	r3, [r7, #12]
 801e00e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801e010:	68fb      	ldr	r3, [r7, #12]
 801e012:	699b      	ldr	r3, [r3, #24]
 801e014:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801e016:	693b      	ldr	r3, [r7, #16]
 801e018:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 801e01c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801e01e:	687b      	ldr	r3, [r7, #4]
 801e020:	031b      	lsls	r3, r3, #12
 801e022:	693a      	ldr	r2, [r7, #16]
 801e024:	4313      	orrs	r3, r2
 801e026:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801e028:	697b      	ldr	r3, [r7, #20]
 801e02a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 801e02e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 801e030:	68bb      	ldr	r3, [r7, #8]
 801e032:	011b      	lsls	r3, r3, #4
 801e034:	697a      	ldr	r2, [r7, #20]
 801e036:	4313      	orrs	r3, r2
 801e038:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801e03a:	68fb      	ldr	r3, [r7, #12]
 801e03c:	693a      	ldr	r2, [r7, #16]
 801e03e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801e040:	68fb      	ldr	r3, [r7, #12]
 801e042:	697a      	ldr	r2, [r7, #20]
 801e044:	621a      	str	r2, [r3, #32]
}
 801e046:	bf00      	nop
 801e048:	371c      	adds	r7, #28
 801e04a:	46bd      	mov	sp, r7
 801e04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e050:	4770      	bx	lr

0801e052 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801e052:	b480      	push	{r7}
 801e054:	b085      	sub	sp, #20
 801e056:	af00      	add	r7, sp, #0
 801e058:	6078      	str	r0, [r7, #4]
 801e05a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801e05c:	687b      	ldr	r3, [r7, #4]
 801e05e:	689b      	ldr	r3, [r3, #8]
 801e060:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801e062:	68fb      	ldr	r3, [r7, #12]
 801e064:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801e068:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801e06a:	683a      	ldr	r2, [r7, #0]
 801e06c:	68fb      	ldr	r3, [r7, #12]
 801e06e:	4313      	orrs	r3, r2
 801e070:	f043 0307 	orr.w	r3, r3, #7
 801e074:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801e076:	687b      	ldr	r3, [r7, #4]
 801e078:	68fa      	ldr	r2, [r7, #12]
 801e07a:	609a      	str	r2, [r3, #8]
}
 801e07c:	bf00      	nop
 801e07e:	3714      	adds	r7, #20
 801e080:	46bd      	mov	sp, r7
 801e082:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e086:	4770      	bx	lr

0801e088 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801e088:	b480      	push	{r7}
 801e08a:	b087      	sub	sp, #28
 801e08c:	af00      	add	r7, sp, #0
 801e08e:	60f8      	str	r0, [r7, #12]
 801e090:	60b9      	str	r1, [r7, #8]
 801e092:	607a      	str	r2, [r7, #4]
 801e094:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801e096:	68fb      	ldr	r3, [r7, #12]
 801e098:	689b      	ldr	r3, [r3, #8]
 801e09a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801e09c:	697b      	ldr	r3, [r7, #20]
 801e09e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801e0a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801e0a4:	683b      	ldr	r3, [r7, #0]
 801e0a6:	021a      	lsls	r2, r3, #8
 801e0a8:	687b      	ldr	r3, [r7, #4]
 801e0aa:	431a      	orrs	r2, r3
 801e0ac:	68bb      	ldr	r3, [r7, #8]
 801e0ae:	4313      	orrs	r3, r2
 801e0b0:	697a      	ldr	r2, [r7, #20]
 801e0b2:	4313      	orrs	r3, r2
 801e0b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801e0b6:	68fb      	ldr	r3, [r7, #12]
 801e0b8:	697a      	ldr	r2, [r7, #20]
 801e0ba:	609a      	str	r2, [r3, #8]
}
 801e0bc:	bf00      	nop
 801e0be:	371c      	adds	r7, #28
 801e0c0:	46bd      	mov	sp, r7
 801e0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0c6:	4770      	bx	lr

0801e0c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801e0c8:	b480      	push	{r7}
 801e0ca:	b087      	sub	sp, #28
 801e0cc:	af00      	add	r7, sp, #0
 801e0ce:	60f8      	str	r0, [r7, #12]
 801e0d0:	60b9      	str	r1, [r7, #8]
 801e0d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801e0d4:	68bb      	ldr	r3, [r7, #8]
 801e0d6:	f003 031f 	and.w	r3, r3, #31
 801e0da:	2201      	movs	r2, #1
 801e0dc:	fa02 f303 	lsl.w	r3, r2, r3
 801e0e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801e0e2:	68fb      	ldr	r3, [r7, #12]
 801e0e4:	6a1a      	ldr	r2, [r3, #32]
 801e0e6:	697b      	ldr	r3, [r7, #20]
 801e0e8:	43db      	mvns	r3, r3
 801e0ea:	401a      	ands	r2, r3
 801e0ec:	68fb      	ldr	r3, [r7, #12]
 801e0ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801e0f0:	68fb      	ldr	r3, [r7, #12]
 801e0f2:	6a1a      	ldr	r2, [r3, #32]
 801e0f4:	68bb      	ldr	r3, [r7, #8]
 801e0f6:	f003 031f 	and.w	r3, r3, #31
 801e0fa:	6879      	ldr	r1, [r7, #4]
 801e0fc:	fa01 f303 	lsl.w	r3, r1, r3
 801e100:	431a      	orrs	r2, r3
 801e102:	68fb      	ldr	r3, [r7, #12]
 801e104:	621a      	str	r2, [r3, #32]
}
 801e106:	bf00      	nop
 801e108:	371c      	adds	r7, #28
 801e10a:	46bd      	mov	sp, r7
 801e10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e110:	4770      	bx	lr
	...

0801e114 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801e114:	b480      	push	{r7}
 801e116:	b085      	sub	sp, #20
 801e118:	af00      	add	r7, sp, #0
 801e11a:	6078      	str	r0, [r7, #4]
 801e11c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801e11e:	687b      	ldr	r3, [r7, #4]
 801e120:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801e124:	2b01      	cmp	r3, #1
 801e126:	d101      	bne.n	801e12c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801e128:	2302      	movs	r3, #2
 801e12a:	e04f      	b.n	801e1cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 801e12c:	687b      	ldr	r3, [r7, #4]
 801e12e:	2201      	movs	r2, #1
 801e130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801e134:	687b      	ldr	r3, [r7, #4]
 801e136:	2202      	movs	r2, #2
 801e138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801e13c:	687b      	ldr	r3, [r7, #4]
 801e13e:	681b      	ldr	r3, [r3, #0]
 801e140:	685b      	ldr	r3, [r3, #4]
 801e142:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801e144:	687b      	ldr	r3, [r7, #4]
 801e146:	681b      	ldr	r3, [r3, #0]
 801e148:	689b      	ldr	r3, [r3, #8]
 801e14a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801e14c:	687b      	ldr	r3, [r7, #4]
 801e14e:	681b      	ldr	r3, [r3, #0]
 801e150:	4a21      	ldr	r2, [pc, #132]	@ (801e1d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 801e152:	4293      	cmp	r3, r2
 801e154:	d108      	bne.n	801e168 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801e156:	68fb      	ldr	r3, [r7, #12]
 801e158:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 801e15c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801e15e:	683b      	ldr	r3, [r7, #0]
 801e160:	685b      	ldr	r3, [r3, #4]
 801e162:	68fa      	ldr	r2, [r7, #12]
 801e164:	4313      	orrs	r3, r2
 801e166:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801e168:	68fb      	ldr	r3, [r7, #12]
 801e16a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801e16e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801e170:	683b      	ldr	r3, [r7, #0]
 801e172:	681b      	ldr	r3, [r3, #0]
 801e174:	68fa      	ldr	r2, [r7, #12]
 801e176:	4313      	orrs	r3, r2
 801e178:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801e17a:	687b      	ldr	r3, [r7, #4]
 801e17c:	681b      	ldr	r3, [r3, #0]
 801e17e:	68fa      	ldr	r2, [r7, #12]
 801e180:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801e182:	687b      	ldr	r3, [r7, #4]
 801e184:	681b      	ldr	r3, [r3, #0]
 801e186:	4a14      	ldr	r2, [pc, #80]	@ (801e1d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 801e188:	4293      	cmp	r3, r2
 801e18a:	d009      	beq.n	801e1a0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 801e18c:	687b      	ldr	r3, [r7, #4]
 801e18e:	681b      	ldr	r3, [r3, #0]
 801e190:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e194:	d004      	beq.n	801e1a0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 801e196:	687b      	ldr	r3, [r7, #4]
 801e198:	681b      	ldr	r3, [r3, #0]
 801e19a:	4a10      	ldr	r2, [pc, #64]	@ (801e1dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 801e19c:	4293      	cmp	r3, r2
 801e19e:	d10c      	bne.n	801e1ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801e1a0:	68bb      	ldr	r3, [r7, #8]
 801e1a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801e1a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801e1a8:	683b      	ldr	r3, [r7, #0]
 801e1aa:	689b      	ldr	r3, [r3, #8]
 801e1ac:	68ba      	ldr	r2, [r7, #8]
 801e1ae:	4313      	orrs	r3, r2
 801e1b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801e1b2:	687b      	ldr	r3, [r7, #4]
 801e1b4:	681b      	ldr	r3, [r3, #0]
 801e1b6:	68ba      	ldr	r2, [r7, #8]
 801e1b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801e1ba:	687b      	ldr	r3, [r7, #4]
 801e1bc:	2201      	movs	r2, #1
 801e1be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801e1c2:	687b      	ldr	r3, [r7, #4]
 801e1c4:	2200      	movs	r2, #0
 801e1c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801e1ca:	2300      	movs	r3, #0
}
 801e1cc:	4618      	mov	r0, r3
 801e1ce:	3714      	adds	r7, #20
 801e1d0:	46bd      	mov	sp, r7
 801e1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e1d6:	4770      	bx	lr
 801e1d8:	40012c00 	.word	0x40012c00
 801e1dc:	40014000 	.word	0x40014000

0801e1e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801e1e0:	b480      	push	{r7}
 801e1e2:	b085      	sub	sp, #20
 801e1e4:	af00      	add	r7, sp, #0
 801e1e6:	6078      	str	r0, [r7, #4]
 801e1e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801e1ea:	2300      	movs	r3, #0
 801e1ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801e1ee:	687b      	ldr	r3, [r7, #4]
 801e1f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801e1f4:	2b01      	cmp	r3, #1
 801e1f6:	d101      	bne.n	801e1fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801e1f8:	2302      	movs	r3, #2
 801e1fa:	e060      	b.n	801e2be <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 801e1fc:	687b      	ldr	r3, [r7, #4]
 801e1fe:	2201      	movs	r2, #1
 801e200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801e204:	68fb      	ldr	r3, [r7, #12]
 801e206:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801e20a:	683b      	ldr	r3, [r7, #0]
 801e20c:	68db      	ldr	r3, [r3, #12]
 801e20e:	4313      	orrs	r3, r2
 801e210:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801e212:	68fb      	ldr	r3, [r7, #12]
 801e214:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 801e218:	683b      	ldr	r3, [r7, #0]
 801e21a:	689b      	ldr	r3, [r3, #8]
 801e21c:	4313      	orrs	r3, r2
 801e21e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801e220:	68fb      	ldr	r3, [r7, #12]
 801e222:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801e226:	683b      	ldr	r3, [r7, #0]
 801e228:	685b      	ldr	r3, [r3, #4]
 801e22a:	4313      	orrs	r3, r2
 801e22c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801e22e:	68fb      	ldr	r3, [r7, #12]
 801e230:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 801e234:	683b      	ldr	r3, [r7, #0]
 801e236:	681b      	ldr	r3, [r3, #0]
 801e238:	4313      	orrs	r3, r2
 801e23a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801e23c:	68fb      	ldr	r3, [r7, #12]
 801e23e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801e242:	683b      	ldr	r3, [r7, #0]
 801e244:	691b      	ldr	r3, [r3, #16]
 801e246:	4313      	orrs	r3, r2
 801e248:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801e24a:	68fb      	ldr	r3, [r7, #12]
 801e24c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 801e250:	683b      	ldr	r3, [r7, #0]
 801e252:	695b      	ldr	r3, [r3, #20]
 801e254:	4313      	orrs	r3, r2
 801e256:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801e258:	68fb      	ldr	r3, [r7, #12]
 801e25a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 801e25e:	683b      	ldr	r3, [r7, #0]
 801e260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e262:	4313      	orrs	r3, r2
 801e264:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801e266:	68fb      	ldr	r3, [r7, #12]
 801e268:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 801e26c:	683b      	ldr	r3, [r7, #0]
 801e26e:	699b      	ldr	r3, [r3, #24]
 801e270:	041b      	lsls	r3, r3, #16
 801e272:	4313      	orrs	r3, r2
 801e274:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801e276:	687b      	ldr	r3, [r7, #4]
 801e278:	681b      	ldr	r3, [r3, #0]
 801e27a:	4a14      	ldr	r2, [pc, #80]	@ (801e2cc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 801e27c:	4293      	cmp	r3, r2
 801e27e:	d115      	bne.n	801e2ac <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801e280:	68fb      	ldr	r3, [r7, #12]
 801e282:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 801e286:	683b      	ldr	r3, [r7, #0]
 801e288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e28a:	051b      	lsls	r3, r3, #20
 801e28c:	4313      	orrs	r3, r2
 801e28e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801e290:	68fb      	ldr	r3, [r7, #12]
 801e292:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 801e296:	683b      	ldr	r3, [r7, #0]
 801e298:	69db      	ldr	r3, [r3, #28]
 801e29a:	4313      	orrs	r3, r2
 801e29c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801e29e:	68fb      	ldr	r3, [r7, #12]
 801e2a0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 801e2a4:	683b      	ldr	r3, [r7, #0]
 801e2a6:	6a1b      	ldr	r3, [r3, #32]
 801e2a8:	4313      	orrs	r3, r2
 801e2aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801e2ac:	687b      	ldr	r3, [r7, #4]
 801e2ae:	681b      	ldr	r3, [r3, #0]
 801e2b0:	68fa      	ldr	r2, [r7, #12]
 801e2b2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 801e2b4:	687b      	ldr	r3, [r7, #4]
 801e2b6:	2200      	movs	r2, #0
 801e2b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801e2bc:	2300      	movs	r3, #0
}
 801e2be:	4618      	mov	r0, r3
 801e2c0:	3714      	adds	r7, #20
 801e2c2:	46bd      	mov	sp, r7
 801e2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e2c8:	4770      	bx	lr
 801e2ca:	bf00      	nop
 801e2cc:	40012c00 	.word	0x40012c00

0801e2d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801e2d0:	b480      	push	{r7}
 801e2d2:	b083      	sub	sp, #12
 801e2d4:	af00      	add	r7, sp, #0
 801e2d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801e2d8:	bf00      	nop
 801e2da:	370c      	adds	r7, #12
 801e2dc:	46bd      	mov	sp, r7
 801e2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e2e2:	4770      	bx	lr

0801e2e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801e2e4:	b480      	push	{r7}
 801e2e6:	b083      	sub	sp, #12
 801e2e8:	af00      	add	r7, sp, #0
 801e2ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801e2ec:	bf00      	nop
 801e2ee:	370c      	adds	r7, #12
 801e2f0:	46bd      	mov	sp, r7
 801e2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e2f6:	4770      	bx	lr

0801e2f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801e2f8:	b480      	push	{r7}
 801e2fa:	b083      	sub	sp, #12
 801e2fc:	af00      	add	r7, sp, #0
 801e2fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801e300:	bf00      	nop
 801e302:	370c      	adds	r7, #12
 801e304:	46bd      	mov	sp, r7
 801e306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e30a:	4770      	bx	lr

0801e30c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801e30c:	b580      	push	{r7, lr}
 801e30e:	b082      	sub	sp, #8
 801e310:	af00      	add	r7, sp, #0
 801e312:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801e314:	687b      	ldr	r3, [r7, #4]
 801e316:	2b00      	cmp	r3, #0
 801e318:	d101      	bne.n	801e31e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801e31a:	2301      	movs	r3, #1
 801e31c:	e040      	b.n	801e3a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801e31e:	687b      	ldr	r3, [r7, #4]
 801e320:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801e322:	2b00      	cmp	r3, #0
 801e324:	d106      	bne.n	801e334 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801e326:	687b      	ldr	r3, [r7, #4]
 801e328:	2200      	movs	r2, #0
 801e32a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801e32e:	6878      	ldr	r0, [r7, #4]
 801e330:	f7e3 fb1e 	bl	8001970 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801e334:	687b      	ldr	r3, [r7, #4]
 801e336:	2224      	movs	r2, #36	@ 0x24
 801e338:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 801e33a:	687b      	ldr	r3, [r7, #4]
 801e33c:	681b      	ldr	r3, [r3, #0]
 801e33e:	681a      	ldr	r2, [r3, #0]
 801e340:	687b      	ldr	r3, [r7, #4]
 801e342:	681b      	ldr	r3, [r3, #0]
 801e344:	f022 0201 	bic.w	r2, r2, #1
 801e348:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801e34a:	687b      	ldr	r3, [r7, #4]
 801e34c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e34e:	2b00      	cmp	r3, #0
 801e350:	d002      	beq.n	801e358 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 801e352:	6878      	ldr	r0, [r7, #4]
 801e354:	f000 fe7e 	bl	801f054 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801e358:	6878      	ldr	r0, [r7, #4]
 801e35a:	f000 fc21 	bl	801eba0 <UART_SetConfig>
 801e35e:	4603      	mov	r3, r0
 801e360:	2b01      	cmp	r3, #1
 801e362:	d101      	bne.n	801e368 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 801e364:	2301      	movs	r3, #1
 801e366:	e01b      	b.n	801e3a0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801e368:	687b      	ldr	r3, [r7, #4]
 801e36a:	681b      	ldr	r3, [r3, #0]
 801e36c:	685a      	ldr	r2, [r3, #4]
 801e36e:	687b      	ldr	r3, [r7, #4]
 801e370:	681b      	ldr	r3, [r3, #0]
 801e372:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801e376:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801e378:	687b      	ldr	r3, [r7, #4]
 801e37a:	681b      	ldr	r3, [r3, #0]
 801e37c:	689a      	ldr	r2, [r3, #8]
 801e37e:	687b      	ldr	r3, [r7, #4]
 801e380:	681b      	ldr	r3, [r3, #0]
 801e382:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801e386:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801e388:	687b      	ldr	r3, [r7, #4]
 801e38a:	681b      	ldr	r3, [r3, #0]
 801e38c:	681a      	ldr	r2, [r3, #0]
 801e38e:	687b      	ldr	r3, [r7, #4]
 801e390:	681b      	ldr	r3, [r3, #0]
 801e392:	f042 0201 	orr.w	r2, r2, #1
 801e396:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801e398:	6878      	ldr	r0, [r7, #4]
 801e39a:	f000 fefd 	bl	801f198 <UART_CheckIdleState>
 801e39e:	4603      	mov	r3, r0
}
 801e3a0:	4618      	mov	r0, r3
 801e3a2:	3708      	adds	r7, #8
 801e3a4:	46bd      	mov	sp, r7
 801e3a6:	bd80      	pop	{r7, pc}

0801e3a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801e3a8:	b580      	push	{r7, lr}
 801e3aa:	b08a      	sub	sp, #40	@ 0x28
 801e3ac:	af02      	add	r7, sp, #8
 801e3ae:	60f8      	str	r0, [r7, #12]
 801e3b0:	60b9      	str	r1, [r7, #8]
 801e3b2:	603b      	str	r3, [r7, #0]
 801e3b4:	4613      	mov	r3, r2
 801e3b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801e3b8:	68fb      	ldr	r3, [r7, #12]
 801e3ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801e3bc:	2b20      	cmp	r3, #32
 801e3be:	d177      	bne.n	801e4b0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 801e3c0:	68bb      	ldr	r3, [r7, #8]
 801e3c2:	2b00      	cmp	r3, #0
 801e3c4:	d002      	beq.n	801e3cc <HAL_UART_Transmit+0x24>
 801e3c6:	88fb      	ldrh	r3, [r7, #6]
 801e3c8:	2b00      	cmp	r3, #0
 801e3ca:	d101      	bne.n	801e3d0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 801e3cc:	2301      	movs	r3, #1
 801e3ce:	e070      	b.n	801e4b2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801e3d0:	68fb      	ldr	r3, [r7, #12]
 801e3d2:	2200      	movs	r2, #0
 801e3d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801e3d8:	68fb      	ldr	r3, [r7, #12]
 801e3da:	2221      	movs	r2, #33	@ 0x21
 801e3dc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801e3de:	f7fc fac1 	bl	801a964 <HAL_GetTick>
 801e3e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801e3e4:	68fb      	ldr	r3, [r7, #12]
 801e3e6:	88fa      	ldrh	r2, [r7, #6]
 801e3e8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 801e3ec:	68fb      	ldr	r3, [r7, #12]
 801e3ee:	88fa      	ldrh	r2, [r7, #6]
 801e3f0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801e3f4:	68fb      	ldr	r3, [r7, #12]
 801e3f6:	689b      	ldr	r3, [r3, #8]
 801e3f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801e3fc:	d108      	bne.n	801e410 <HAL_UART_Transmit+0x68>
 801e3fe:	68fb      	ldr	r3, [r7, #12]
 801e400:	691b      	ldr	r3, [r3, #16]
 801e402:	2b00      	cmp	r3, #0
 801e404:	d104      	bne.n	801e410 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 801e406:	2300      	movs	r3, #0
 801e408:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801e40a:	68bb      	ldr	r3, [r7, #8]
 801e40c:	61bb      	str	r3, [r7, #24]
 801e40e:	e003      	b.n	801e418 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 801e410:	68bb      	ldr	r3, [r7, #8]
 801e412:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801e414:	2300      	movs	r3, #0
 801e416:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801e418:	e02f      	b.n	801e47a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801e41a:	683b      	ldr	r3, [r7, #0]
 801e41c:	9300      	str	r3, [sp, #0]
 801e41e:	697b      	ldr	r3, [r7, #20]
 801e420:	2200      	movs	r2, #0
 801e422:	2180      	movs	r1, #128	@ 0x80
 801e424:	68f8      	ldr	r0, [r7, #12]
 801e426:	f000 ff5f 	bl	801f2e8 <UART_WaitOnFlagUntilTimeout>
 801e42a:	4603      	mov	r3, r0
 801e42c:	2b00      	cmp	r3, #0
 801e42e:	d004      	beq.n	801e43a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 801e430:	68fb      	ldr	r3, [r7, #12]
 801e432:	2220      	movs	r2, #32
 801e434:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801e436:	2303      	movs	r3, #3
 801e438:	e03b      	b.n	801e4b2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 801e43a:	69fb      	ldr	r3, [r7, #28]
 801e43c:	2b00      	cmp	r3, #0
 801e43e:	d10b      	bne.n	801e458 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801e440:	69bb      	ldr	r3, [r7, #24]
 801e442:	881a      	ldrh	r2, [r3, #0]
 801e444:	68fb      	ldr	r3, [r7, #12]
 801e446:	681b      	ldr	r3, [r3, #0]
 801e448:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801e44c:	b292      	uxth	r2, r2
 801e44e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801e450:	69bb      	ldr	r3, [r7, #24]
 801e452:	3302      	adds	r3, #2
 801e454:	61bb      	str	r3, [r7, #24]
 801e456:	e007      	b.n	801e468 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801e458:	69fb      	ldr	r3, [r7, #28]
 801e45a:	781a      	ldrb	r2, [r3, #0]
 801e45c:	68fb      	ldr	r3, [r7, #12]
 801e45e:	681b      	ldr	r3, [r3, #0]
 801e460:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801e462:	69fb      	ldr	r3, [r7, #28]
 801e464:	3301      	adds	r3, #1
 801e466:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801e468:	68fb      	ldr	r3, [r7, #12]
 801e46a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 801e46e:	b29b      	uxth	r3, r3
 801e470:	3b01      	subs	r3, #1
 801e472:	b29a      	uxth	r2, r3
 801e474:	68fb      	ldr	r3, [r7, #12]
 801e476:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 801e47a:	68fb      	ldr	r3, [r7, #12]
 801e47c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 801e480:	b29b      	uxth	r3, r3
 801e482:	2b00      	cmp	r3, #0
 801e484:	d1c9      	bne.n	801e41a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801e486:	683b      	ldr	r3, [r7, #0]
 801e488:	9300      	str	r3, [sp, #0]
 801e48a:	697b      	ldr	r3, [r7, #20]
 801e48c:	2200      	movs	r2, #0
 801e48e:	2140      	movs	r1, #64	@ 0x40
 801e490:	68f8      	ldr	r0, [r7, #12]
 801e492:	f000 ff29 	bl	801f2e8 <UART_WaitOnFlagUntilTimeout>
 801e496:	4603      	mov	r3, r0
 801e498:	2b00      	cmp	r3, #0
 801e49a:	d004      	beq.n	801e4a6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 801e49c:	68fb      	ldr	r3, [r7, #12]
 801e49e:	2220      	movs	r2, #32
 801e4a0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801e4a2:	2303      	movs	r3, #3
 801e4a4:	e005      	b.n	801e4b2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801e4a6:	68fb      	ldr	r3, [r7, #12]
 801e4a8:	2220      	movs	r2, #32
 801e4aa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 801e4ac:	2300      	movs	r3, #0
 801e4ae:	e000      	b.n	801e4b2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 801e4b0:	2302      	movs	r3, #2
  }
}
 801e4b2:	4618      	mov	r0, r3
 801e4b4:	3720      	adds	r7, #32
 801e4b6:	46bd      	mov	sp, r7
 801e4b8:	bd80      	pop	{r7, pc}
	...

0801e4bc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801e4bc:	b580      	push	{r7, lr}
 801e4be:	b08a      	sub	sp, #40	@ 0x28
 801e4c0:	af00      	add	r7, sp, #0
 801e4c2:	60f8      	str	r0, [r7, #12]
 801e4c4:	60b9      	str	r1, [r7, #8]
 801e4c6:	4613      	mov	r3, r2
 801e4c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801e4ca:	68fb      	ldr	r3, [r7, #12]
 801e4cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801e4d0:	2b20      	cmp	r3, #32
 801e4d2:	d137      	bne.n	801e544 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 801e4d4:	68bb      	ldr	r3, [r7, #8]
 801e4d6:	2b00      	cmp	r3, #0
 801e4d8:	d002      	beq.n	801e4e0 <HAL_UART_Receive_IT+0x24>
 801e4da:	88fb      	ldrh	r3, [r7, #6]
 801e4dc:	2b00      	cmp	r3, #0
 801e4de:	d101      	bne.n	801e4e4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 801e4e0:	2301      	movs	r3, #1
 801e4e2:	e030      	b.n	801e546 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e4e4:	68fb      	ldr	r3, [r7, #12]
 801e4e6:	2200      	movs	r2, #0
 801e4e8:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801e4ea:	68fb      	ldr	r3, [r7, #12]
 801e4ec:	681b      	ldr	r3, [r3, #0]
 801e4ee:	4a18      	ldr	r2, [pc, #96]	@ (801e550 <HAL_UART_Receive_IT+0x94>)
 801e4f0:	4293      	cmp	r3, r2
 801e4f2:	d01f      	beq.n	801e534 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801e4f4:	68fb      	ldr	r3, [r7, #12]
 801e4f6:	681b      	ldr	r3, [r3, #0]
 801e4f8:	685b      	ldr	r3, [r3, #4]
 801e4fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801e4fe:	2b00      	cmp	r3, #0
 801e500:	d018      	beq.n	801e534 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801e502:	68fb      	ldr	r3, [r7, #12]
 801e504:	681b      	ldr	r3, [r3, #0]
 801e506:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e508:	697b      	ldr	r3, [r7, #20]
 801e50a:	e853 3f00 	ldrex	r3, [r3]
 801e50e:	613b      	str	r3, [r7, #16]
   return(result);
 801e510:	693b      	ldr	r3, [r7, #16]
 801e512:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801e516:	627b      	str	r3, [r7, #36]	@ 0x24
 801e518:	68fb      	ldr	r3, [r7, #12]
 801e51a:	681b      	ldr	r3, [r3, #0]
 801e51c:	461a      	mov	r2, r3
 801e51e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e520:	623b      	str	r3, [r7, #32]
 801e522:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e524:	69f9      	ldr	r1, [r7, #28]
 801e526:	6a3a      	ldr	r2, [r7, #32]
 801e528:	e841 2300 	strex	r3, r2, [r1]
 801e52c:	61bb      	str	r3, [r7, #24]
   return(result);
 801e52e:	69bb      	ldr	r3, [r7, #24]
 801e530:	2b00      	cmp	r3, #0
 801e532:	d1e6      	bne.n	801e502 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801e534:	88fb      	ldrh	r3, [r7, #6]
 801e536:	461a      	mov	r2, r3
 801e538:	68b9      	ldr	r1, [r7, #8]
 801e53a:	68f8      	ldr	r0, [r7, #12]
 801e53c:	f000 ff42 	bl	801f3c4 <UART_Start_Receive_IT>
 801e540:	4603      	mov	r3, r0
 801e542:	e000      	b.n	801e546 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801e544:	2302      	movs	r3, #2
  }
}
 801e546:	4618      	mov	r0, r3
 801e548:	3728      	adds	r7, #40	@ 0x28
 801e54a:	46bd      	mov	sp, r7
 801e54c:	bd80      	pop	{r7, pc}
 801e54e:	bf00      	nop
 801e550:	40008000 	.word	0x40008000

0801e554 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801e554:	b580      	push	{r7, lr}
 801e556:	b0ba      	sub	sp, #232	@ 0xe8
 801e558:	af00      	add	r7, sp, #0
 801e55a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801e55c:	687b      	ldr	r3, [r7, #4]
 801e55e:	681b      	ldr	r3, [r3, #0]
 801e560:	69db      	ldr	r3, [r3, #28]
 801e562:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801e566:	687b      	ldr	r3, [r7, #4]
 801e568:	681b      	ldr	r3, [r3, #0]
 801e56a:	681b      	ldr	r3, [r3, #0]
 801e56c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801e570:	687b      	ldr	r3, [r7, #4]
 801e572:	681b      	ldr	r3, [r3, #0]
 801e574:	689b      	ldr	r3, [r3, #8]
 801e576:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801e57a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801e57e:	f640 030f 	movw	r3, #2063	@ 0x80f
 801e582:	4013      	ands	r3, r2
 801e584:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 801e588:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801e58c:	2b00      	cmp	r3, #0
 801e58e:	d115      	bne.n	801e5bc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801e590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801e594:	f003 0320 	and.w	r3, r3, #32
 801e598:	2b00      	cmp	r3, #0
 801e59a:	d00f      	beq.n	801e5bc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801e59c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801e5a0:	f003 0320 	and.w	r3, r3, #32
 801e5a4:	2b00      	cmp	r3, #0
 801e5a6:	d009      	beq.n	801e5bc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 801e5a8:	687b      	ldr	r3, [r7, #4]
 801e5aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801e5ac:	2b00      	cmp	r3, #0
 801e5ae:	f000 82ca 	beq.w	801eb46 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 801e5b2:	687b      	ldr	r3, [r7, #4]
 801e5b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801e5b6:	6878      	ldr	r0, [r7, #4]
 801e5b8:	4798      	blx	r3
      }
      return;
 801e5ba:	e2c4      	b.n	801eb46 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 801e5bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801e5c0:	2b00      	cmp	r3, #0
 801e5c2:	f000 8117 	beq.w	801e7f4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801e5c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801e5ca:	f003 0301 	and.w	r3, r3, #1
 801e5ce:	2b00      	cmp	r3, #0
 801e5d0:	d106      	bne.n	801e5e0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801e5d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801e5d6:	4b85      	ldr	r3, [pc, #532]	@ (801e7ec <HAL_UART_IRQHandler+0x298>)
 801e5d8:	4013      	ands	r3, r2
 801e5da:	2b00      	cmp	r3, #0
 801e5dc:	f000 810a 	beq.w	801e7f4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801e5e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801e5e4:	f003 0301 	and.w	r3, r3, #1
 801e5e8:	2b00      	cmp	r3, #0
 801e5ea:	d011      	beq.n	801e610 <HAL_UART_IRQHandler+0xbc>
 801e5ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801e5f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801e5f4:	2b00      	cmp	r3, #0
 801e5f6:	d00b      	beq.n	801e610 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801e5f8:	687b      	ldr	r3, [r7, #4]
 801e5fa:	681b      	ldr	r3, [r3, #0]
 801e5fc:	2201      	movs	r2, #1
 801e5fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801e600:	687b      	ldr	r3, [r7, #4]
 801e602:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e606:	f043 0201 	orr.w	r2, r3, #1
 801e60a:	687b      	ldr	r3, [r7, #4]
 801e60c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801e610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801e614:	f003 0302 	and.w	r3, r3, #2
 801e618:	2b00      	cmp	r3, #0
 801e61a:	d011      	beq.n	801e640 <HAL_UART_IRQHandler+0xec>
 801e61c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801e620:	f003 0301 	and.w	r3, r3, #1
 801e624:	2b00      	cmp	r3, #0
 801e626:	d00b      	beq.n	801e640 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801e628:	687b      	ldr	r3, [r7, #4]
 801e62a:	681b      	ldr	r3, [r3, #0]
 801e62c:	2202      	movs	r2, #2
 801e62e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801e630:	687b      	ldr	r3, [r7, #4]
 801e632:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e636:	f043 0204 	orr.w	r2, r3, #4
 801e63a:	687b      	ldr	r3, [r7, #4]
 801e63c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801e640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801e644:	f003 0304 	and.w	r3, r3, #4
 801e648:	2b00      	cmp	r3, #0
 801e64a:	d011      	beq.n	801e670 <HAL_UART_IRQHandler+0x11c>
 801e64c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801e650:	f003 0301 	and.w	r3, r3, #1
 801e654:	2b00      	cmp	r3, #0
 801e656:	d00b      	beq.n	801e670 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801e658:	687b      	ldr	r3, [r7, #4]
 801e65a:	681b      	ldr	r3, [r3, #0]
 801e65c:	2204      	movs	r2, #4
 801e65e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801e660:	687b      	ldr	r3, [r7, #4]
 801e662:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e666:	f043 0202 	orr.w	r2, r3, #2
 801e66a:	687b      	ldr	r3, [r7, #4]
 801e66c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 801e670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801e674:	f003 0308 	and.w	r3, r3, #8
 801e678:	2b00      	cmp	r3, #0
 801e67a:	d017      	beq.n	801e6ac <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801e67c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801e680:	f003 0320 	and.w	r3, r3, #32
 801e684:	2b00      	cmp	r3, #0
 801e686:	d105      	bne.n	801e694 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801e688:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801e68c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801e690:	2b00      	cmp	r3, #0
 801e692:	d00b      	beq.n	801e6ac <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801e694:	687b      	ldr	r3, [r7, #4]
 801e696:	681b      	ldr	r3, [r3, #0]
 801e698:	2208      	movs	r2, #8
 801e69a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801e69c:	687b      	ldr	r3, [r7, #4]
 801e69e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e6a2:	f043 0208 	orr.w	r2, r3, #8
 801e6a6:	687b      	ldr	r3, [r7, #4]
 801e6a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801e6ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801e6b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801e6b4:	2b00      	cmp	r3, #0
 801e6b6:	d012      	beq.n	801e6de <HAL_UART_IRQHandler+0x18a>
 801e6b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801e6bc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801e6c0:	2b00      	cmp	r3, #0
 801e6c2:	d00c      	beq.n	801e6de <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801e6c4:	687b      	ldr	r3, [r7, #4]
 801e6c6:	681b      	ldr	r3, [r3, #0]
 801e6c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801e6cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801e6ce:	687b      	ldr	r3, [r7, #4]
 801e6d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e6d4:	f043 0220 	orr.w	r2, r3, #32
 801e6d8:	687b      	ldr	r3, [r7, #4]
 801e6da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801e6de:	687b      	ldr	r3, [r7, #4]
 801e6e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e6e4:	2b00      	cmp	r3, #0
 801e6e6:	f000 8230 	beq.w	801eb4a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801e6ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801e6ee:	f003 0320 	and.w	r3, r3, #32
 801e6f2:	2b00      	cmp	r3, #0
 801e6f4:	d00d      	beq.n	801e712 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801e6f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801e6fa:	f003 0320 	and.w	r3, r3, #32
 801e6fe:	2b00      	cmp	r3, #0
 801e700:	d007      	beq.n	801e712 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 801e702:	687b      	ldr	r3, [r7, #4]
 801e704:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801e706:	2b00      	cmp	r3, #0
 801e708:	d003      	beq.n	801e712 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 801e70a:	687b      	ldr	r3, [r7, #4]
 801e70c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801e70e:	6878      	ldr	r0, [r7, #4]
 801e710:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801e712:	687b      	ldr	r3, [r7, #4]
 801e714:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e718:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801e71c:	687b      	ldr	r3, [r7, #4]
 801e71e:	681b      	ldr	r3, [r3, #0]
 801e720:	689b      	ldr	r3, [r3, #8]
 801e722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801e726:	2b40      	cmp	r3, #64	@ 0x40
 801e728:	d005      	beq.n	801e736 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801e72a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801e72e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801e732:	2b00      	cmp	r3, #0
 801e734:	d04f      	beq.n	801e7d6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801e736:	6878      	ldr	r0, [r7, #4]
 801e738:	f000 ff0a 	bl	801f550 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801e73c:	687b      	ldr	r3, [r7, #4]
 801e73e:	681b      	ldr	r3, [r3, #0]
 801e740:	689b      	ldr	r3, [r3, #8]
 801e742:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801e746:	2b40      	cmp	r3, #64	@ 0x40
 801e748:	d141      	bne.n	801e7ce <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801e74a:	687b      	ldr	r3, [r7, #4]
 801e74c:	681b      	ldr	r3, [r3, #0]
 801e74e:	3308      	adds	r3, #8
 801e750:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e754:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801e758:	e853 3f00 	ldrex	r3, [r3]
 801e75c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 801e760:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801e764:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801e768:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801e76c:	687b      	ldr	r3, [r7, #4]
 801e76e:	681b      	ldr	r3, [r3, #0]
 801e770:	3308      	adds	r3, #8
 801e772:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801e776:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801e77a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e77e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 801e782:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801e786:	e841 2300 	strex	r3, r2, [r1]
 801e78a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 801e78e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801e792:	2b00      	cmp	r3, #0
 801e794:	d1d9      	bne.n	801e74a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801e796:	687b      	ldr	r3, [r7, #4]
 801e798:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e79a:	2b00      	cmp	r3, #0
 801e79c:	d013      	beq.n	801e7c6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801e79e:	687b      	ldr	r3, [r7, #4]
 801e7a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e7a2:	4a13      	ldr	r2, [pc, #76]	@ (801e7f0 <HAL_UART_IRQHandler+0x29c>)
 801e7a4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801e7a6:	687b      	ldr	r3, [r7, #4]
 801e7a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e7aa:	4618      	mov	r0, r3
 801e7ac:	f7fc fa59 	bl	801ac62 <HAL_DMA_Abort_IT>
 801e7b0:	4603      	mov	r3, r0
 801e7b2:	2b00      	cmp	r3, #0
 801e7b4:	d017      	beq.n	801e7e6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801e7b6:	687b      	ldr	r3, [r7, #4]
 801e7b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e7ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e7bc:	687a      	ldr	r2, [r7, #4]
 801e7be:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801e7c0:	4610      	mov	r0, r2
 801e7c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801e7c4:	e00f      	b.n	801e7e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801e7c6:	6878      	ldr	r0, [r7, #4]
 801e7c8:	f000 f9d4 	bl	801eb74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801e7cc:	e00b      	b.n	801e7e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801e7ce:	6878      	ldr	r0, [r7, #4]
 801e7d0:	f000 f9d0 	bl	801eb74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801e7d4:	e007      	b.n	801e7e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801e7d6:	6878      	ldr	r0, [r7, #4]
 801e7d8:	f000 f9cc 	bl	801eb74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801e7dc:	687b      	ldr	r3, [r7, #4]
 801e7de:	2200      	movs	r2, #0
 801e7e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 801e7e4:	e1b1      	b.n	801eb4a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801e7e6:	bf00      	nop
    return;
 801e7e8:	e1af      	b.n	801eb4a <HAL_UART_IRQHandler+0x5f6>
 801e7ea:	bf00      	nop
 801e7ec:	04000120 	.word	0x04000120
 801e7f0:	0801f619 	.word	0x0801f619

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801e7f4:	687b      	ldr	r3, [r7, #4]
 801e7f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e7f8:	2b01      	cmp	r3, #1
 801e7fa:	f040 816a 	bne.w	801ead2 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801e7fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801e802:	f003 0310 	and.w	r3, r3, #16
 801e806:	2b00      	cmp	r3, #0
 801e808:	f000 8163 	beq.w	801ead2 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801e80c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801e810:	f003 0310 	and.w	r3, r3, #16
 801e814:	2b00      	cmp	r3, #0
 801e816:	f000 815c 	beq.w	801ead2 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801e81a:	687b      	ldr	r3, [r7, #4]
 801e81c:	681b      	ldr	r3, [r3, #0]
 801e81e:	2210      	movs	r2, #16
 801e820:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801e822:	687b      	ldr	r3, [r7, #4]
 801e824:	681b      	ldr	r3, [r3, #0]
 801e826:	689b      	ldr	r3, [r3, #8]
 801e828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801e82c:	2b40      	cmp	r3, #64	@ 0x40
 801e82e:	f040 80d4 	bne.w	801e9da <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801e832:	687b      	ldr	r3, [r7, #4]
 801e834:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e836:	681b      	ldr	r3, [r3, #0]
 801e838:	685b      	ldr	r3, [r3, #4]
 801e83a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 801e83e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 801e842:	2b00      	cmp	r3, #0
 801e844:	f000 80ad 	beq.w	801e9a2 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801e848:	687b      	ldr	r3, [r7, #4]
 801e84a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801e84e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801e852:	429a      	cmp	r2, r3
 801e854:	f080 80a5 	bcs.w	801e9a2 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801e858:	687b      	ldr	r3, [r7, #4]
 801e85a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801e85e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801e862:	687b      	ldr	r3, [r7, #4]
 801e864:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e866:	681b      	ldr	r3, [r3, #0]
 801e868:	681b      	ldr	r3, [r3, #0]
 801e86a:	f003 0320 	and.w	r3, r3, #32
 801e86e:	2b00      	cmp	r3, #0
 801e870:	f040 8086 	bne.w	801e980 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801e874:	687b      	ldr	r3, [r7, #4]
 801e876:	681b      	ldr	r3, [r3, #0]
 801e878:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e87c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801e880:	e853 3f00 	ldrex	r3, [r3]
 801e884:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 801e888:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801e88c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801e890:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801e894:	687b      	ldr	r3, [r7, #4]
 801e896:	681b      	ldr	r3, [r3, #0]
 801e898:	461a      	mov	r2, r3
 801e89a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801e89e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801e8a2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e8a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801e8aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801e8ae:	e841 2300 	strex	r3, r2, [r1]
 801e8b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 801e8b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801e8ba:	2b00      	cmp	r3, #0
 801e8bc:	d1da      	bne.n	801e874 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e8be:	687b      	ldr	r3, [r7, #4]
 801e8c0:	681b      	ldr	r3, [r3, #0]
 801e8c2:	3308      	adds	r3, #8
 801e8c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e8c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801e8c8:	e853 3f00 	ldrex	r3, [r3]
 801e8cc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801e8ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801e8d0:	f023 0301 	bic.w	r3, r3, #1
 801e8d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801e8d8:	687b      	ldr	r3, [r7, #4]
 801e8da:	681b      	ldr	r3, [r3, #0]
 801e8dc:	3308      	adds	r3, #8
 801e8de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801e8e2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 801e8e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e8e8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801e8ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801e8ee:	e841 2300 	strex	r3, r2, [r1]
 801e8f2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801e8f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801e8f6:	2b00      	cmp	r3, #0
 801e8f8:	d1e1      	bne.n	801e8be <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801e8fa:	687b      	ldr	r3, [r7, #4]
 801e8fc:	681b      	ldr	r3, [r3, #0]
 801e8fe:	3308      	adds	r3, #8
 801e900:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e902:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801e904:	e853 3f00 	ldrex	r3, [r3]
 801e908:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801e90a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801e90c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801e910:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801e914:	687b      	ldr	r3, [r7, #4]
 801e916:	681b      	ldr	r3, [r3, #0]
 801e918:	3308      	adds	r3, #8
 801e91a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801e91e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801e920:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e922:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801e924:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801e926:	e841 2300 	strex	r3, r2, [r1]
 801e92a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801e92c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801e92e:	2b00      	cmp	r3, #0
 801e930:	d1e3      	bne.n	801e8fa <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801e932:	687b      	ldr	r3, [r7, #4]
 801e934:	2220      	movs	r2, #32
 801e936:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e93a:	687b      	ldr	r3, [r7, #4]
 801e93c:	2200      	movs	r2, #0
 801e93e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801e940:	687b      	ldr	r3, [r7, #4]
 801e942:	681b      	ldr	r3, [r3, #0]
 801e944:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e946:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e948:	e853 3f00 	ldrex	r3, [r3]
 801e94c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801e94e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e950:	f023 0310 	bic.w	r3, r3, #16
 801e954:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801e958:	687b      	ldr	r3, [r7, #4]
 801e95a:	681b      	ldr	r3, [r3, #0]
 801e95c:	461a      	mov	r2, r3
 801e95e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801e962:	65bb      	str	r3, [r7, #88]	@ 0x58
 801e964:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e966:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801e968:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801e96a:	e841 2300 	strex	r3, r2, [r1]
 801e96e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801e970:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801e972:	2b00      	cmp	r3, #0
 801e974:	d1e4      	bne.n	801e940 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801e976:	687b      	ldr	r3, [r7, #4]
 801e978:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e97a:	4618      	mov	r0, r3
 801e97c:	f7fc f933 	bl	801abe6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801e980:	687b      	ldr	r3, [r7, #4]
 801e982:	2202      	movs	r2, #2
 801e984:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801e986:	687b      	ldr	r3, [r7, #4]
 801e988:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 801e98c:	687b      	ldr	r3, [r7, #4]
 801e98e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801e992:	b29b      	uxth	r3, r3
 801e994:	1ad3      	subs	r3, r2, r3
 801e996:	b29b      	uxth	r3, r3
 801e998:	4619      	mov	r1, r3
 801e99a:	6878      	ldr	r0, [r7, #4]
 801e99c:	f000 f8f4 	bl	801eb88 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 801e9a0:	e0d5      	b.n	801eb4e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 801e9a2:	687b      	ldr	r3, [r7, #4]
 801e9a4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801e9a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801e9ac:	429a      	cmp	r2, r3
 801e9ae:	f040 80ce 	bne.w	801eb4e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801e9b2:	687b      	ldr	r3, [r7, #4]
 801e9b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e9b6:	681b      	ldr	r3, [r3, #0]
 801e9b8:	681b      	ldr	r3, [r3, #0]
 801e9ba:	f003 0320 	and.w	r3, r3, #32
 801e9be:	2b20      	cmp	r3, #32
 801e9c0:	f040 80c5 	bne.w	801eb4e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801e9c4:	687b      	ldr	r3, [r7, #4]
 801e9c6:	2202      	movs	r2, #2
 801e9c8:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801e9ca:	687b      	ldr	r3, [r7, #4]
 801e9cc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801e9d0:	4619      	mov	r1, r3
 801e9d2:	6878      	ldr	r0, [r7, #4]
 801e9d4:	f000 f8d8 	bl	801eb88 <HAL_UARTEx_RxEventCallback>
      return;
 801e9d8:	e0b9      	b.n	801eb4e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801e9da:	687b      	ldr	r3, [r7, #4]
 801e9dc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 801e9e0:	687b      	ldr	r3, [r7, #4]
 801e9e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801e9e6:	b29b      	uxth	r3, r3
 801e9e8:	1ad3      	subs	r3, r2, r3
 801e9ea:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 801e9ee:	687b      	ldr	r3, [r7, #4]
 801e9f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801e9f4:	b29b      	uxth	r3, r3
 801e9f6:	2b00      	cmp	r3, #0
 801e9f8:	f000 80ab 	beq.w	801eb52 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 801e9fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801ea00:	2b00      	cmp	r3, #0
 801ea02:	f000 80a6 	beq.w	801eb52 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801ea06:	687b      	ldr	r3, [r7, #4]
 801ea08:	681b      	ldr	r3, [r3, #0]
 801ea0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ea0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ea0e:	e853 3f00 	ldrex	r3, [r3]
 801ea12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801ea14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ea16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801ea1a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801ea1e:	687b      	ldr	r3, [r7, #4]
 801ea20:	681b      	ldr	r3, [r3, #0]
 801ea22:	461a      	mov	r2, r3
 801ea24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801ea28:	647b      	str	r3, [r7, #68]	@ 0x44
 801ea2a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ea2c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801ea2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801ea30:	e841 2300 	strex	r3, r2, [r1]
 801ea34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801ea36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ea38:	2b00      	cmp	r3, #0
 801ea3a:	d1e4      	bne.n	801ea06 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ea3c:	687b      	ldr	r3, [r7, #4]
 801ea3e:	681b      	ldr	r3, [r3, #0]
 801ea40:	3308      	adds	r3, #8
 801ea42:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ea44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ea46:	e853 3f00 	ldrex	r3, [r3]
 801ea4a:	623b      	str	r3, [r7, #32]
   return(result);
 801ea4c:	6a3b      	ldr	r3, [r7, #32]
 801ea4e:	f023 0301 	bic.w	r3, r3, #1
 801ea52:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801ea56:	687b      	ldr	r3, [r7, #4]
 801ea58:	681b      	ldr	r3, [r3, #0]
 801ea5a:	3308      	adds	r3, #8
 801ea5c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801ea60:	633a      	str	r2, [r7, #48]	@ 0x30
 801ea62:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ea64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801ea66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801ea68:	e841 2300 	strex	r3, r2, [r1]
 801ea6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801ea6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ea70:	2b00      	cmp	r3, #0
 801ea72:	d1e3      	bne.n	801ea3c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801ea74:	687b      	ldr	r3, [r7, #4]
 801ea76:	2220      	movs	r2, #32
 801ea78:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ea7c:	687b      	ldr	r3, [r7, #4]
 801ea7e:	2200      	movs	r2, #0
 801ea80:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801ea82:	687b      	ldr	r3, [r7, #4]
 801ea84:	2200      	movs	r2, #0
 801ea86:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801ea88:	687b      	ldr	r3, [r7, #4]
 801ea8a:	681b      	ldr	r3, [r3, #0]
 801ea8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ea8e:	693b      	ldr	r3, [r7, #16]
 801ea90:	e853 3f00 	ldrex	r3, [r3]
 801ea94:	60fb      	str	r3, [r7, #12]
   return(result);
 801ea96:	68fb      	ldr	r3, [r7, #12]
 801ea98:	f023 0310 	bic.w	r3, r3, #16
 801ea9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801eaa0:	687b      	ldr	r3, [r7, #4]
 801eaa2:	681b      	ldr	r3, [r3, #0]
 801eaa4:	461a      	mov	r2, r3
 801eaa6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801eaaa:	61fb      	str	r3, [r7, #28]
 801eaac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801eaae:	69b9      	ldr	r1, [r7, #24]
 801eab0:	69fa      	ldr	r2, [r7, #28]
 801eab2:	e841 2300 	strex	r3, r2, [r1]
 801eab6:	617b      	str	r3, [r7, #20]
   return(result);
 801eab8:	697b      	ldr	r3, [r7, #20]
 801eaba:	2b00      	cmp	r3, #0
 801eabc:	d1e4      	bne.n	801ea88 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801eabe:	687b      	ldr	r3, [r7, #4]
 801eac0:	2202      	movs	r2, #2
 801eac2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801eac4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801eac8:	4619      	mov	r1, r3
 801eaca:	6878      	ldr	r0, [r7, #4]
 801eacc:	f000 f85c 	bl	801eb88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801ead0:	e03f      	b.n	801eb52 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801ead2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801ead6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801eada:	2b00      	cmp	r3, #0
 801eadc:	d00e      	beq.n	801eafc <HAL_UART_IRQHandler+0x5a8>
 801eade:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801eae2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801eae6:	2b00      	cmp	r3, #0
 801eae8:	d008      	beq.n	801eafc <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801eaea:	687b      	ldr	r3, [r7, #4]
 801eaec:	681b      	ldr	r3, [r3, #0]
 801eaee:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 801eaf2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801eaf4:	6878      	ldr	r0, [r7, #4]
 801eaf6:	f000 ff8b 	bl	801fa10 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801eafa:	e02d      	b.n	801eb58 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 801eafc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801eb00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801eb04:	2b00      	cmp	r3, #0
 801eb06:	d00e      	beq.n	801eb26 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801eb08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801eb0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801eb10:	2b00      	cmp	r3, #0
 801eb12:	d008      	beq.n	801eb26 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 801eb14:	687b      	ldr	r3, [r7, #4]
 801eb16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801eb18:	2b00      	cmp	r3, #0
 801eb1a:	d01c      	beq.n	801eb56 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 801eb1c:	687b      	ldr	r3, [r7, #4]
 801eb1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801eb20:	6878      	ldr	r0, [r7, #4]
 801eb22:	4798      	blx	r3
    }
    return;
 801eb24:	e017      	b.n	801eb56 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801eb26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801eb2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801eb2e:	2b00      	cmp	r3, #0
 801eb30:	d012      	beq.n	801eb58 <HAL_UART_IRQHandler+0x604>
 801eb32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801eb36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801eb3a:	2b00      	cmp	r3, #0
 801eb3c:	d00c      	beq.n	801eb58 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 801eb3e:	6878      	ldr	r0, [r7, #4]
 801eb40:	f000 fd80 	bl	801f644 <UART_EndTransmit_IT>
    return;
 801eb44:	e008      	b.n	801eb58 <HAL_UART_IRQHandler+0x604>
      return;
 801eb46:	bf00      	nop
 801eb48:	e006      	b.n	801eb58 <HAL_UART_IRQHandler+0x604>
    return;
 801eb4a:	bf00      	nop
 801eb4c:	e004      	b.n	801eb58 <HAL_UART_IRQHandler+0x604>
      return;
 801eb4e:	bf00      	nop
 801eb50:	e002      	b.n	801eb58 <HAL_UART_IRQHandler+0x604>
      return;
 801eb52:	bf00      	nop
 801eb54:	e000      	b.n	801eb58 <HAL_UART_IRQHandler+0x604>
    return;
 801eb56:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 801eb58:	37e8      	adds	r7, #232	@ 0xe8
 801eb5a:	46bd      	mov	sp, r7
 801eb5c:	bd80      	pop	{r7, pc}
 801eb5e:	bf00      	nop

0801eb60 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801eb60:	b480      	push	{r7}
 801eb62:	b083      	sub	sp, #12
 801eb64:	af00      	add	r7, sp, #0
 801eb66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801eb68:	bf00      	nop
 801eb6a:	370c      	adds	r7, #12
 801eb6c:	46bd      	mov	sp, r7
 801eb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb72:	4770      	bx	lr

0801eb74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801eb74:	b480      	push	{r7}
 801eb76:	b083      	sub	sp, #12
 801eb78:	af00      	add	r7, sp, #0
 801eb7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801eb7c:	bf00      	nop
 801eb7e:	370c      	adds	r7, #12
 801eb80:	46bd      	mov	sp, r7
 801eb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb86:	4770      	bx	lr

0801eb88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801eb88:	b480      	push	{r7}
 801eb8a:	b083      	sub	sp, #12
 801eb8c:	af00      	add	r7, sp, #0
 801eb8e:	6078      	str	r0, [r7, #4]
 801eb90:	460b      	mov	r3, r1
 801eb92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801eb94:	bf00      	nop
 801eb96:	370c      	adds	r7, #12
 801eb98:	46bd      	mov	sp, r7
 801eb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb9e:	4770      	bx	lr

0801eba0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801eba0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801eba4:	b08a      	sub	sp, #40	@ 0x28
 801eba6:	af00      	add	r7, sp, #0
 801eba8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801ebaa:	2300      	movs	r3, #0
 801ebac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801ebb0:	68fb      	ldr	r3, [r7, #12]
 801ebb2:	689a      	ldr	r2, [r3, #8]
 801ebb4:	68fb      	ldr	r3, [r7, #12]
 801ebb6:	691b      	ldr	r3, [r3, #16]
 801ebb8:	431a      	orrs	r2, r3
 801ebba:	68fb      	ldr	r3, [r7, #12]
 801ebbc:	695b      	ldr	r3, [r3, #20]
 801ebbe:	431a      	orrs	r2, r3
 801ebc0:	68fb      	ldr	r3, [r7, #12]
 801ebc2:	69db      	ldr	r3, [r3, #28]
 801ebc4:	4313      	orrs	r3, r2
 801ebc6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801ebc8:	68fb      	ldr	r3, [r7, #12]
 801ebca:	681b      	ldr	r3, [r3, #0]
 801ebcc:	681a      	ldr	r2, [r3, #0]
 801ebce:	4b9e      	ldr	r3, [pc, #632]	@ (801ee48 <UART_SetConfig+0x2a8>)
 801ebd0:	4013      	ands	r3, r2
 801ebd2:	68fa      	ldr	r2, [r7, #12]
 801ebd4:	6812      	ldr	r2, [r2, #0]
 801ebd6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801ebd8:	430b      	orrs	r3, r1
 801ebda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801ebdc:	68fb      	ldr	r3, [r7, #12]
 801ebde:	681b      	ldr	r3, [r3, #0]
 801ebe0:	685b      	ldr	r3, [r3, #4]
 801ebe2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801ebe6:	68fb      	ldr	r3, [r7, #12]
 801ebe8:	68da      	ldr	r2, [r3, #12]
 801ebea:	68fb      	ldr	r3, [r7, #12]
 801ebec:	681b      	ldr	r3, [r3, #0]
 801ebee:	430a      	orrs	r2, r1
 801ebf0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801ebf2:	68fb      	ldr	r3, [r7, #12]
 801ebf4:	699b      	ldr	r3, [r3, #24]
 801ebf6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801ebf8:	68fb      	ldr	r3, [r7, #12]
 801ebfa:	681b      	ldr	r3, [r3, #0]
 801ebfc:	4a93      	ldr	r2, [pc, #588]	@ (801ee4c <UART_SetConfig+0x2ac>)
 801ebfe:	4293      	cmp	r3, r2
 801ec00:	d004      	beq.n	801ec0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801ec02:	68fb      	ldr	r3, [r7, #12]
 801ec04:	6a1b      	ldr	r3, [r3, #32]
 801ec06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ec08:	4313      	orrs	r3, r2
 801ec0a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801ec0c:	68fb      	ldr	r3, [r7, #12]
 801ec0e:	681b      	ldr	r3, [r3, #0]
 801ec10:	689b      	ldr	r3, [r3, #8]
 801ec12:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 801ec16:	68fb      	ldr	r3, [r7, #12]
 801ec18:	681b      	ldr	r3, [r3, #0]
 801ec1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ec1c:	430a      	orrs	r2, r1
 801ec1e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801ec20:	68fb      	ldr	r3, [r7, #12]
 801ec22:	681b      	ldr	r3, [r3, #0]
 801ec24:	4a8a      	ldr	r2, [pc, #552]	@ (801ee50 <UART_SetConfig+0x2b0>)
 801ec26:	4293      	cmp	r3, r2
 801ec28:	d126      	bne.n	801ec78 <UART_SetConfig+0xd8>
 801ec2a:	4b8a      	ldr	r3, [pc, #552]	@ (801ee54 <UART_SetConfig+0x2b4>)
 801ec2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801ec30:	f003 0303 	and.w	r3, r3, #3
 801ec34:	2b03      	cmp	r3, #3
 801ec36:	d81b      	bhi.n	801ec70 <UART_SetConfig+0xd0>
 801ec38:	a201      	add	r2, pc, #4	@ (adr r2, 801ec40 <UART_SetConfig+0xa0>)
 801ec3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ec3e:	bf00      	nop
 801ec40:	0801ec51 	.word	0x0801ec51
 801ec44:	0801ec61 	.word	0x0801ec61
 801ec48:	0801ec59 	.word	0x0801ec59
 801ec4c:	0801ec69 	.word	0x0801ec69
 801ec50:	2301      	movs	r3, #1
 801ec52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801ec56:	e0ab      	b.n	801edb0 <UART_SetConfig+0x210>
 801ec58:	2302      	movs	r3, #2
 801ec5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801ec5e:	e0a7      	b.n	801edb0 <UART_SetConfig+0x210>
 801ec60:	2304      	movs	r3, #4
 801ec62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801ec66:	e0a3      	b.n	801edb0 <UART_SetConfig+0x210>
 801ec68:	2308      	movs	r3, #8
 801ec6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801ec6e:	e09f      	b.n	801edb0 <UART_SetConfig+0x210>
 801ec70:	2310      	movs	r3, #16
 801ec72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801ec76:	e09b      	b.n	801edb0 <UART_SetConfig+0x210>
 801ec78:	68fb      	ldr	r3, [r7, #12]
 801ec7a:	681b      	ldr	r3, [r3, #0]
 801ec7c:	4a76      	ldr	r2, [pc, #472]	@ (801ee58 <UART_SetConfig+0x2b8>)
 801ec7e:	4293      	cmp	r3, r2
 801ec80:	d138      	bne.n	801ecf4 <UART_SetConfig+0x154>
 801ec82:	4b74      	ldr	r3, [pc, #464]	@ (801ee54 <UART_SetConfig+0x2b4>)
 801ec84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801ec88:	f003 030c 	and.w	r3, r3, #12
 801ec8c:	2b0c      	cmp	r3, #12
 801ec8e:	d82d      	bhi.n	801ecec <UART_SetConfig+0x14c>
 801ec90:	a201      	add	r2, pc, #4	@ (adr r2, 801ec98 <UART_SetConfig+0xf8>)
 801ec92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ec96:	bf00      	nop
 801ec98:	0801eccd 	.word	0x0801eccd
 801ec9c:	0801eced 	.word	0x0801eced
 801eca0:	0801eced 	.word	0x0801eced
 801eca4:	0801eced 	.word	0x0801eced
 801eca8:	0801ecdd 	.word	0x0801ecdd
 801ecac:	0801eced 	.word	0x0801eced
 801ecb0:	0801eced 	.word	0x0801eced
 801ecb4:	0801eced 	.word	0x0801eced
 801ecb8:	0801ecd5 	.word	0x0801ecd5
 801ecbc:	0801eced 	.word	0x0801eced
 801ecc0:	0801eced 	.word	0x0801eced
 801ecc4:	0801eced 	.word	0x0801eced
 801ecc8:	0801ece5 	.word	0x0801ece5
 801eccc:	2300      	movs	r3, #0
 801ecce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801ecd2:	e06d      	b.n	801edb0 <UART_SetConfig+0x210>
 801ecd4:	2302      	movs	r3, #2
 801ecd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801ecda:	e069      	b.n	801edb0 <UART_SetConfig+0x210>
 801ecdc:	2304      	movs	r3, #4
 801ecde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801ece2:	e065      	b.n	801edb0 <UART_SetConfig+0x210>
 801ece4:	2308      	movs	r3, #8
 801ece6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801ecea:	e061      	b.n	801edb0 <UART_SetConfig+0x210>
 801ecec:	2310      	movs	r3, #16
 801ecee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801ecf2:	e05d      	b.n	801edb0 <UART_SetConfig+0x210>
 801ecf4:	68fb      	ldr	r3, [r7, #12]
 801ecf6:	681b      	ldr	r3, [r3, #0]
 801ecf8:	4a58      	ldr	r2, [pc, #352]	@ (801ee5c <UART_SetConfig+0x2bc>)
 801ecfa:	4293      	cmp	r3, r2
 801ecfc:	d125      	bne.n	801ed4a <UART_SetConfig+0x1aa>
 801ecfe:	4b55      	ldr	r3, [pc, #340]	@ (801ee54 <UART_SetConfig+0x2b4>)
 801ed00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801ed04:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 801ed08:	2b30      	cmp	r3, #48	@ 0x30
 801ed0a:	d016      	beq.n	801ed3a <UART_SetConfig+0x19a>
 801ed0c:	2b30      	cmp	r3, #48	@ 0x30
 801ed0e:	d818      	bhi.n	801ed42 <UART_SetConfig+0x1a2>
 801ed10:	2b20      	cmp	r3, #32
 801ed12:	d00a      	beq.n	801ed2a <UART_SetConfig+0x18a>
 801ed14:	2b20      	cmp	r3, #32
 801ed16:	d814      	bhi.n	801ed42 <UART_SetConfig+0x1a2>
 801ed18:	2b00      	cmp	r3, #0
 801ed1a:	d002      	beq.n	801ed22 <UART_SetConfig+0x182>
 801ed1c:	2b10      	cmp	r3, #16
 801ed1e:	d008      	beq.n	801ed32 <UART_SetConfig+0x192>
 801ed20:	e00f      	b.n	801ed42 <UART_SetConfig+0x1a2>
 801ed22:	2300      	movs	r3, #0
 801ed24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801ed28:	e042      	b.n	801edb0 <UART_SetConfig+0x210>
 801ed2a:	2302      	movs	r3, #2
 801ed2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801ed30:	e03e      	b.n	801edb0 <UART_SetConfig+0x210>
 801ed32:	2304      	movs	r3, #4
 801ed34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801ed38:	e03a      	b.n	801edb0 <UART_SetConfig+0x210>
 801ed3a:	2308      	movs	r3, #8
 801ed3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801ed40:	e036      	b.n	801edb0 <UART_SetConfig+0x210>
 801ed42:	2310      	movs	r3, #16
 801ed44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801ed48:	e032      	b.n	801edb0 <UART_SetConfig+0x210>
 801ed4a:	68fb      	ldr	r3, [r7, #12]
 801ed4c:	681b      	ldr	r3, [r3, #0]
 801ed4e:	4a3f      	ldr	r2, [pc, #252]	@ (801ee4c <UART_SetConfig+0x2ac>)
 801ed50:	4293      	cmp	r3, r2
 801ed52:	d12a      	bne.n	801edaa <UART_SetConfig+0x20a>
 801ed54:	4b3f      	ldr	r3, [pc, #252]	@ (801ee54 <UART_SetConfig+0x2b4>)
 801ed56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801ed5a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 801ed5e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801ed62:	d01a      	beq.n	801ed9a <UART_SetConfig+0x1fa>
 801ed64:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801ed68:	d81b      	bhi.n	801eda2 <UART_SetConfig+0x202>
 801ed6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801ed6e:	d00c      	beq.n	801ed8a <UART_SetConfig+0x1ea>
 801ed70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801ed74:	d815      	bhi.n	801eda2 <UART_SetConfig+0x202>
 801ed76:	2b00      	cmp	r3, #0
 801ed78:	d003      	beq.n	801ed82 <UART_SetConfig+0x1e2>
 801ed7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801ed7e:	d008      	beq.n	801ed92 <UART_SetConfig+0x1f2>
 801ed80:	e00f      	b.n	801eda2 <UART_SetConfig+0x202>
 801ed82:	2300      	movs	r3, #0
 801ed84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801ed88:	e012      	b.n	801edb0 <UART_SetConfig+0x210>
 801ed8a:	2302      	movs	r3, #2
 801ed8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801ed90:	e00e      	b.n	801edb0 <UART_SetConfig+0x210>
 801ed92:	2304      	movs	r3, #4
 801ed94:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801ed98:	e00a      	b.n	801edb0 <UART_SetConfig+0x210>
 801ed9a:	2308      	movs	r3, #8
 801ed9c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801eda0:	e006      	b.n	801edb0 <UART_SetConfig+0x210>
 801eda2:	2310      	movs	r3, #16
 801eda4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801eda8:	e002      	b.n	801edb0 <UART_SetConfig+0x210>
 801edaa:	2310      	movs	r3, #16
 801edac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801edb0:	68fb      	ldr	r3, [r7, #12]
 801edb2:	681b      	ldr	r3, [r3, #0]
 801edb4:	4a25      	ldr	r2, [pc, #148]	@ (801ee4c <UART_SetConfig+0x2ac>)
 801edb6:	4293      	cmp	r3, r2
 801edb8:	f040 808a 	bne.w	801eed0 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801edbc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801edc0:	2b08      	cmp	r3, #8
 801edc2:	d824      	bhi.n	801ee0e <UART_SetConfig+0x26e>
 801edc4:	a201      	add	r2, pc, #4	@ (adr r2, 801edcc <UART_SetConfig+0x22c>)
 801edc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801edca:	bf00      	nop
 801edcc:	0801edf1 	.word	0x0801edf1
 801edd0:	0801ee0f 	.word	0x0801ee0f
 801edd4:	0801edf9 	.word	0x0801edf9
 801edd8:	0801ee0f 	.word	0x0801ee0f
 801eddc:	0801edff 	.word	0x0801edff
 801ede0:	0801ee0f 	.word	0x0801ee0f
 801ede4:	0801ee0f 	.word	0x0801ee0f
 801ede8:	0801ee0f 	.word	0x0801ee0f
 801edec:	0801ee07 	.word	0x0801ee07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801edf0:	f7fd f830 	bl	801be54 <HAL_RCC_GetPCLK1Freq>
 801edf4:	61f8      	str	r0, [r7, #28]
        break;
 801edf6:	e010      	b.n	801ee1a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801edf8:	4b19      	ldr	r3, [pc, #100]	@ (801ee60 <UART_SetConfig+0x2c0>)
 801edfa:	61fb      	str	r3, [r7, #28]
        break;
 801edfc:	e00d      	b.n	801ee1a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801edfe:	f7fc ff91 	bl	801bd24 <HAL_RCC_GetSysClockFreq>
 801ee02:	61f8      	str	r0, [r7, #28]
        break;
 801ee04:	e009      	b.n	801ee1a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801ee06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801ee0a:	61fb      	str	r3, [r7, #28]
        break;
 801ee0c:	e005      	b.n	801ee1a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 801ee0e:	2300      	movs	r3, #0
 801ee10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 801ee12:	2301      	movs	r3, #1
 801ee14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 801ee18:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801ee1a:	69fb      	ldr	r3, [r7, #28]
 801ee1c:	2b00      	cmp	r3, #0
 801ee1e:	f000 8109 	beq.w	801f034 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801ee22:	68fb      	ldr	r3, [r7, #12]
 801ee24:	685a      	ldr	r2, [r3, #4]
 801ee26:	4613      	mov	r3, r2
 801ee28:	005b      	lsls	r3, r3, #1
 801ee2a:	4413      	add	r3, r2
 801ee2c:	69fa      	ldr	r2, [r7, #28]
 801ee2e:	429a      	cmp	r2, r3
 801ee30:	d305      	bcc.n	801ee3e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 801ee32:	68fb      	ldr	r3, [r7, #12]
 801ee34:	685b      	ldr	r3, [r3, #4]
 801ee36:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801ee38:	69fa      	ldr	r2, [r7, #28]
 801ee3a:	429a      	cmp	r2, r3
 801ee3c:	d912      	bls.n	801ee64 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 801ee3e:	2301      	movs	r3, #1
 801ee40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801ee44:	e0f6      	b.n	801f034 <UART_SetConfig+0x494>
 801ee46:	bf00      	nop
 801ee48:	efff69f3 	.word	0xefff69f3
 801ee4c:	40008000 	.word	0x40008000
 801ee50:	40013800 	.word	0x40013800
 801ee54:	40021000 	.word	0x40021000
 801ee58:	40004400 	.word	0x40004400
 801ee5c:	40004800 	.word	0x40004800
 801ee60:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801ee64:	69fb      	ldr	r3, [r7, #28]
 801ee66:	2200      	movs	r2, #0
 801ee68:	461c      	mov	r4, r3
 801ee6a:	4615      	mov	r5, r2
 801ee6c:	f04f 0200 	mov.w	r2, #0
 801ee70:	f04f 0300 	mov.w	r3, #0
 801ee74:	022b      	lsls	r3, r5, #8
 801ee76:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 801ee7a:	0222      	lsls	r2, r4, #8
 801ee7c:	68f9      	ldr	r1, [r7, #12]
 801ee7e:	6849      	ldr	r1, [r1, #4]
 801ee80:	0849      	lsrs	r1, r1, #1
 801ee82:	2000      	movs	r0, #0
 801ee84:	4688      	mov	r8, r1
 801ee86:	4681      	mov	r9, r0
 801ee88:	eb12 0a08 	adds.w	sl, r2, r8
 801ee8c:	eb43 0b09 	adc.w	fp, r3, r9
 801ee90:	68fb      	ldr	r3, [r7, #12]
 801ee92:	685b      	ldr	r3, [r3, #4]
 801ee94:	2200      	movs	r2, #0
 801ee96:	603b      	str	r3, [r7, #0]
 801ee98:	607a      	str	r2, [r7, #4]
 801ee9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ee9e:	4650      	mov	r0, sl
 801eea0:	4659      	mov	r1, fp
 801eea2:	f7e1 fed1 	bl	8000c48 <__aeabi_uldivmod>
 801eea6:	4602      	mov	r2, r0
 801eea8:	460b      	mov	r3, r1
 801eeaa:	4613      	mov	r3, r2
 801eeac:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801eeae:	69bb      	ldr	r3, [r7, #24]
 801eeb0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801eeb4:	d308      	bcc.n	801eec8 <UART_SetConfig+0x328>
 801eeb6:	69bb      	ldr	r3, [r7, #24]
 801eeb8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801eebc:	d204      	bcs.n	801eec8 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 801eebe:	68fb      	ldr	r3, [r7, #12]
 801eec0:	681b      	ldr	r3, [r3, #0]
 801eec2:	69ba      	ldr	r2, [r7, #24]
 801eec4:	60da      	str	r2, [r3, #12]
 801eec6:	e0b5      	b.n	801f034 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 801eec8:	2301      	movs	r3, #1
 801eeca:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801eece:	e0b1      	b.n	801f034 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801eed0:	68fb      	ldr	r3, [r7, #12]
 801eed2:	69db      	ldr	r3, [r3, #28]
 801eed4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801eed8:	d15d      	bne.n	801ef96 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 801eeda:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801eede:	2b08      	cmp	r3, #8
 801eee0:	d827      	bhi.n	801ef32 <UART_SetConfig+0x392>
 801eee2:	a201      	add	r2, pc, #4	@ (adr r2, 801eee8 <UART_SetConfig+0x348>)
 801eee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801eee8:	0801ef0d 	.word	0x0801ef0d
 801eeec:	0801ef15 	.word	0x0801ef15
 801eef0:	0801ef1d 	.word	0x0801ef1d
 801eef4:	0801ef33 	.word	0x0801ef33
 801eef8:	0801ef23 	.word	0x0801ef23
 801eefc:	0801ef33 	.word	0x0801ef33
 801ef00:	0801ef33 	.word	0x0801ef33
 801ef04:	0801ef33 	.word	0x0801ef33
 801ef08:	0801ef2b 	.word	0x0801ef2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801ef0c:	f7fc ffa2 	bl	801be54 <HAL_RCC_GetPCLK1Freq>
 801ef10:	61f8      	str	r0, [r7, #28]
        break;
 801ef12:	e014      	b.n	801ef3e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801ef14:	f7fc ffb4 	bl	801be80 <HAL_RCC_GetPCLK2Freq>
 801ef18:	61f8      	str	r0, [r7, #28]
        break;
 801ef1a:	e010      	b.n	801ef3e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801ef1c:	4b4c      	ldr	r3, [pc, #304]	@ (801f050 <UART_SetConfig+0x4b0>)
 801ef1e:	61fb      	str	r3, [r7, #28]
        break;
 801ef20:	e00d      	b.n	801ef3e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801ef22:	f7fc feff 	bl	801bd24 <HAL_RCC_GetSysClockFreq>
 801ef26:	61f8      	str	r0, [r7, #28]
        break;
 801ef28:	e009      	b.n	801ef3e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801ef2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801ef2e:	61fb      	str	r3, [r7, #28]
        break;
 801ef30:	e005      	b.n	801ef3e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 801ef32:	2300      	movs	r3, #0
 801ef34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 801ef36:	2301      	movs	r3, #1
 801ef38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 801ef3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801ef3e:	69fb      	ldr	r3, [r7, #28]
 801ef40:	2b00      	cmp	r3, #0
 801ef42:	d077      	beq.n	801f034 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801ef44:	69fb      	ldr	r3, [r7, #28]
 801ef46:	005a      	lsls	r2, r3, #1
 801ef48:	68fb      	ldr	r3, [r7, #12]
 801ef4a:	685b      	ldr	r3, [r3, #4]
 801ef4c:	085b      	lsrs	r3, r3, #1
 801ef4e:	441a      	add	r2, r3
 801ef50:	68fb      	ldr	r3, [r7, #12]
 801ef52:	685b      	ldr	r3, [r3, #4]
 801ef54:	fbb2 f3f3 	udiv	r3, r2, r3
 801ef58:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801ef5a:	69bb      	ldr	r3, [r7, #24]
 801ef5c:	2b0f      	cmp	r3, #15
 801ef5e:	d916      	bls.n	801ef8e <UART_SetConfig+0x3ee>
 801ef60:	69bb      	ldr	r3, [r7, #24]
 801ef62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801ef66:	d212      	bcs.n	801ef8e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801ef68:	69bb      	ldr	r3, [r7, #24]
 801ef6a:	b29b      	uxth	r3, r3
 801ef6c:	f023 030f 	bic.w	r3, r3, #15
 801ef70:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801ef72:	69bb      	ldr	r3, [r7, #24]
 801ef74:	085b      	lsrs	r3, r3, #1
 801ef76:	b29b      	uxth	r3, r3
 801ef78:	f003 0307 	and.w	r3, r3, #7
 801ef7c:	b29a      	uxth	r2, r3
 801ef7e:	8afb      	ldrh	r3, [r7, #22]
 801ef80:	4313      	orrs	r3, r2
 801ef82:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 801ef84:	68fb      	ldr	r3, [r7, #12]
 801ef86:	681b      	ldr	r3, [r3, #0]
 801ef88:	8afa      	ldrh	r2, [r7, #22]
 801ef8a:	60da      	str	r2, [r3, #12]
 801ef8c:	e052      	b.n	801f034 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 801ef8e:	2301      	movs	r3, #1
 801ef90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801ef94:	e04e      	b.n	801f034 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 801ef96:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801ef9a:	2b08      	cmp	r3, #8
 801ef9c:	d827      	bhi.n	801efee <UART_SetConfig+0x44e>
 801ef9e:	a201      	add	r2, pc, #4	@ (adr r2, 801efa4 <UART_SetConfig+0x404>)
 801efa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801efa4:	0801efc9 	.word	0x0801efc9
 801efa8:	0801efd1 	.word	0x0801efd1
 801efac:	0801efd9 	.word	0x0801efd9
 801efb0:	0801efef 	.word	0x0801efef
 801efb4:	0801efdf 	.word	0x0801efdf
 801efb8:	0801efef 	.word	0x0801efef
 801efbc:	0801efef 	.word	0x0801efef
 801efc0:	0801efef 	.word	0x0801efef
 801efc4:	0801efe7 	.word	0x0801efe7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801efc8:	f7fc ff44 	bl	801be54 <HAL_RCC_GetPCLK1Freq>
 801efcc:	61f8      	str	r0, [r7, #28]
        break;
 801efce:	e014      	b.n	801effa <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801efd0:	f7fc ff56 	bl	801be80 <HAL_RCC_GetPCLK2Freq>
 801efd4:	61f8      	str	r0, [r7, #28]
        break;
 801efd6:	e010      	b.n	801effa <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801efd8:	4b1d      	ldr	r3, [pc, #116]	@ (801f050 <UART_SetConfig+0x4b0>)
 801efda:	61fb      	str	r3, [r7, #28]
        break;
 801efdc:	e00d      	b.n	801effa <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801efde:	f7fc fea1 	bl	801bd24 <HAL_RCC_GetSysClockFreq>
 801efe2:	61f8      	str	r0, [r7, #28]
        break;
 801efe4:	e009      	b.n	801effa <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801efe6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801efea:	61fb      	str	r3, [r7, #28]
        break;
 801efec:	e005      	b.n	801effa <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 801efee:	2300      	movs	r3, #0
 801eff0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 801eff2:	2301      	movs	r3, #1
 801eff4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 801eff8:	bf00      	nop
    }

    if (pclk != 0U)
 801effa:	69fb      	ldr	r3, [r7, #28]
 801effc:	2b00      	cmp	r3, #0
 801effe:	d019      	beq.n	801f034 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801f000:	68fb      	ldr	r3, [r7, #12]
 801f002:	685b      	ldr	r3, [r3, #4]
 801f004:	085a      	lsrs	r2, r3, #1
 801f006:	69fb      	ldr	r3, [r7, #28]
 801f008:	441a      	add	r2, r3
 801f00a:	68fb      	ldr	r3, [r7, #12]
 801f00c:	685b      	ldr	r3, [r3, #4]
 801f00e:	fbb2 f3f3 	udiv	r3, r2, r3
 801f012:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801f014:	69bb      	ldr	r3, [r7, #24]
 801f016:	2b0f      	cmp	r3, #15
 801f018:	d909      	bls.n	801f02e <UART_SetConfig+0x48e>
 801f01a:	69bb      	ldr	r3, [r7, #24]
 801f01c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801f020:	d205      	bcs.n	801f02e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801f022:	69bb      	ldr	r3, [r7, #24]
 801f024:	b29a      	uxth	r2, r3
 801f026:	68fb      	ldr	r3, [r7, #12]
 801f028:	681b      	ldr	r3, [r3, #0]
 801f02a:	60da      	str	r2, [r3, #12]
 801f02c:	e002      	b.n	801f034 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 801f02e:	2301      	movs	r3, #1
 801f030:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801f034:	68fb      	ldr	r3, [r7, #12]
 801f036:	2200      	movs	r2, #0
 801f038:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 801f03a:	68fb      	ldr	r3, [r7, #12]
 801f03c:	2200      	movs	r2, #0
 801f03e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801f040:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 801f044:	4618      	mov	r0, r3
 801f046:	3728      	adds	r7, #40	@ 0x28
 801f048:	46bd      	mov	sp, r7
 801f04a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801f04e:	bf00      	nop
 801f050:	00f42400 	.word	0x00f42400

0801f054 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801f054:	b480      	push	{r7}
 801f056:	b083      	sub	sp, #12
 801f058:	af00      	add	r7, sp, #0
 801f05a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801f05c:	687b      	ldr	r3, [r7, #4]
 801f05e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f060:	f003 0308 	and.w	r3, r3, #8
 801f064:	2b00      	cmp	r3, #0
 801f066:	d00a      	beq.n	801f07e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801f068:	687b      	ldr	r3, [r7, #4]
 801f06a:	681b      	ldr	r3, [r3, #0]
 801f06c:	685b      	ldr	r3, [r3, #4]
 801f06e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801f072:	687b      	ldr	r3, [r7, #4]
 801f074:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801f076:	687b      	ldr	r3, [r7, #4]
 801f078:	681b      	ldr	r3, [r3, #0]
 801f07a:	430a      	orrs	r2, r1
 801f07c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801f07e:	687b      	ldr	r3, [r7, #4]
 801f080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f082:	f003 0301 	and.w	r3, r3, #1
 801f086:	2b00      	cmp	r3, #0
 801f088:	d00a      	beq.n	801f0a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801f08a:	687b      	ldr	r3, [r7, #4]
 801f08c:	681b      	ldr	r3, [r3, #0]
 801f08e:	685b      	ldr	r3, [r3, #4]
 801f090:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 801f094:	687b      	ldr	r3, [r7, #4]
 801f096:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801f098:	687b      	ldr	r3, [r7, #4]
 801f09a:	681b      	ldr	r3, [r3, #0]
 801f09c:	430a      	orrs	r2, r1
 801f09e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801f0a0:	687b      	ldr	r3, [r7, #4]
 801f0a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f0a4:	f003 0302 	and.w	r3, r3, #2
 801f0a8:	2b00      	cmp	r3, #0
 801f0aa:	d00a      	beq.n	801f0c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801f0ac:	687b      	ldr	r3, [r7, #4]
 801f0ae:	681b      	ldr	r3, [r3, #0]
 801f0b0:	685b      	ldr	r3, [r3, #4]
 801f0b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801f0b6:	687b      	ldr	r3, [r7, #4]
 801f0b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801f0ba:	687b      	ldr	r3, [r7, #4]
 801f0bc:	681b      	ldr	r3, [r3, #0]
 801f0be:	430a      	orrs	r2, r1
 801f0c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801f0c2:	687b      	ldr	r3, [r7, #4]
 801f0c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f0c6:	f003 0304 	and.w	r3, r3, #4
 801f0ca:	2b00      	cmp	r3, #0
 801f0cc:	d00a      	beq.n	801f0e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801f0ce:	687b      	ldr	r3, [r7, #4]
 801f0d0:	681b      	ldr	r3, [r3, #0]
 801f0d2:	685b      	ldr	r3, [r3, #4]
 801f0d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801f0d8:	687b      	ldr	r3, [r7, #4]
 801f0da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801f0dc:	687b      	ldr	r3, [r7, #4]
 801f0de:	681b      	ldr	r3, [r3, #0]
 801f0e0:	430a      	orrs	r2, r1
 801f0e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801f0e4:	687b      	ldr	r3, [r7, #4]
 801f0e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f0e8:	f003 0310 	and.w	r3, r3, #16
 801f0ec:	2b00      	cmp	r3, #0
 801f0ee:	d00a      	beq.n	801f106 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801f0f0:	687b      	ldr	r3, [r7, #4]
 801f0f2:	681b      	ldr	r3, [r3, #0]
 801f0f4:	689b      	ldr	r3, [r3, #8]
 801f0f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801f0fa:	687b      	ldr	r3, [r7, #4]
 801f0fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801f0fe:	687b      	ldr	r3, [r7, #4]
 801f100:	681b      	ldr	r3, [r3, #0]
 801f102:	430a      	orrs	r2, r1
 801f104:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801f106:	687b      	ldr	r3, [r7, #4]
 801f108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f10a:	f003 0320 	and.w	r3, r3, #32
 801f10e:	2b00      	cmp	r3, #0
 801f110:	d00a      	beq.n	801f128 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801f112:	687b      	ldr	r3, [r7, #4]
 801f114:	681b      	ldr	r3, [r3, #0]
 801f116:	689b      	ldr	r3, [r3, #8]
 801f118:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801f11c:	687b      	ldr	r3, [r7, #4]
 801f11e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801f120:	687b      	ldr	r3, [r7, #4]
 801f122:	681b      	ldr	r3, [r3, #0]
 801f124:	430a      	orrs	r2, r1
 801f126:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801f128:	687b      	ldr	r3, [r7, #4]
 801f12a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f12c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801f130:	2b00      	cmp	r3, #0
 801f132:	d01a      	beq.n	801f16a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801f134:	687b      	ldr	r3, [r7, #4]
 801f136:	681b      	ldr	r3, [r3, #0]
 801f138:	685b      	ldr	r3, [r3, #4]
 801f13a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801f13e:	687b      	ldr	r3, [r7, #4]
 801f140:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801f142:	687b      	ldr	r3, [r7, #4]
 801f144:	681b      	ldr	r3, [r3, #0]
 801f146:	430a      	orrs	r2, r1
 801f148:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801f14a:	687b      	ldr	r3, [r7, #4]
 801f14c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f14e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801f152:	d10a      	bne.n	801f16a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801f154:	687b      	ldr	r3, [r7, #4]
 801f156:	681b      	ldr	r3, [r3, #0]
 801f158:	685b      	ldr	r3, [r3, #4]
 801f15a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801f15e:	687b      	ldr	r3, [r7, #4]
 801f160:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801f162:	687b      	ldr	r3, [r7, #4]
 801f164:	681b      	ldr	r3, [r3, #0]
 801f166:	430a      	orrs	r2, r1
 801f168:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801f16a:	687b      	ldr	r3, [r7, #4]
 801f16c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f16e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801f172:	2b00      	cmp	r3, #0
 801f174:	d00a      	beq.n	801f18c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801f176:	687b      	ldr	r3, [r7, #4]
 801f178:	681b      	ldr	r3, [r3, #0]
 801f17a:	685b      	ldr	r3, [r3, #4]
 801f17c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 801f180:	687b      	ldr	r3, [r7, #4]
 801f182:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801f184:	687b      	ldr	r3, [r7, #4]
 801f186:	681b      	ldr	r3, [r3, #0]
 801f188:	430a      	orrs	r2, r1
 801f18a:	605a      	str	r2, [r3, #4]
  }
}
 801f18c:	bf00      	nop
 801f18e:	370c      	adds	r7, #12
 801f190:	46bd      	mov	sp, r7
 801f192:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f196:	4770      	bx	lr

0801f198 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801f198:	b580      	push	{r7, lr}
 801f19a:	b098      	sub	sp, #96	@ 0x60
 801f19c:	af02      	add	r7, sp, #8
 801f19e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801f1a0:	687b      	ldr	r3, [r7, #4]
 801f1a2:	2200      	movs	r2, #0
 801f1a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801f1a8:	f7fb fbdc 	bl	801a964 <HAL_GetTick>
 801f1ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801f1ae:	687b      	ldr	r3, [r7, #4]
 801f1b0:	681b      	ldr	r3, [r3, #0]
 801f1b2:	681b      	ldr	r3, [r3, #0]
 801f1b4:	f003 0308 	and.w	r3, r3, #8
 801f1b8:	2b08      	cmp	r3, #8
 801f1ba:	d12e      	bne.n	801f21a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801f1bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801f1c0:	9300      	str	r3, [sp, #0]
 801f1c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f1c4:	2200      	movs	r2, #0
 801f1c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801f1ca:	6878      	ldr	r0, [r7, #4]
 801f1cc:	f000 f88c 	bl	801f2e8 <UART_WaitOnFlagUntilTimeout>
 801f1d0:	4603      	mov	r3, r0
 801f1d2:	2b00      	cmp	r3, #0
 801f1d4:	d021      	beq.n	801f21a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801f1d6:	687b      	ldr	r3, [r7, #4]
 801f1d8:	681b      	ldr	r3, [r3, #0]
 801f1da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f1dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f1de:	e853 3f00 	ldrex	r3, [r3]
 801f1e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801f1e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f1e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801f1ea:	653b      	str	r3, [r7, #80]	@ 0x50
 801f1ec:	687b      	ldr	r3, [r7, #4]
 801f1ee:	681b      	ldr	r3, [r3, #0]
 801f1f0:	461a      	mov	r2, r3
 801f1f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f1f4:	647b      	str	r3, [r7, #68]	@ 0x44
 801f1f6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f1f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801f1fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801f1fc:	e841 2300 	strex	r3, r2, [r1]
 801f200:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801f202:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801f204:	2b00      	cmp	r3, #0
 801f206:	d1e6      	bne.n	801f1d6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 801f208:	687b      	ldr	r3, [r7, #4]
 801f20a:	2220      	movs	r2, #32
 801f20c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 801f20e:	687b      	ldr	r3, [r7, #4]
 801f210:	2200      	movs	r2, #0
 801f212:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801f216:	2303      	movs	r3, #3
 801f218:	e062      	b.n	801f2e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801f21a:	687b      	ldr	r3, [r7, #4]
 801f21c:	681b      	ldr	r3, [r3, #0]
 801f21e:	681b      	ldr	r3, [r3, #0]
 801f220:	f003 0304 	and.w	r3, r3, #4
 801f224:	2b04      	cmp	r3, #4
 801f226:	d149      	bne.n	801f2bc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801f228:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801f22c:	9300      	str	r3, [sp, #0]
 801f22e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f230:	2200      	movs	r2, #0
 801f232:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801f236:	6878      	ldr	r0, [r7, #4]
 801f238:	f000 f856 	bl	801f2e8 <UART_WaitOnFlagUntilTimeout>
 801f23c:	4603      	mov	r3, r0
 801f23e:	2b00      	cmp	r3, #0
 801f240:	d03c      	beq.n	801f2bc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801f242:	687b      	ldr	r3, [r7, #4]
 801f244:	681b      	ldr	r3, [r3, #0]
 801f246:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f24a:	e853 3f00 	ldrex	r3, [r3]
 801f24e:	623b      	str	r3, [r7, #32]
   return(result);
 801f250:	6a3b      	ldr	r3, [r7, #32]
 801f252:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801f256:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801f258:	687b      	ldr	r3, [r7, #4]
 801f25a:	681b      	ldr	r3, [r3, #0]
 801f25c:	461a      	mov	r2, r3
 801f25e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f260:	633b      	str	r3, [r7, #48]	@ 0x30
 801f262:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f264:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801f266:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801f268:	e841 2300 	strex	r3, r2, [r1]
 801f26c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801f26e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f270:	2b00      	cmp	r3, #0
 801f272:	d1e6      	bne.n	801f242 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801f274:	687b      	ldr	r3, [r7, #4]
 801f276:	681b      	ldr	r3, [r3, #0]
 801f278:	3308      	adds	r3, #8
 801f27a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f27c:	693b      	ldr	r3, [r7, #16]
 801f27e:	e853 3f00 	ldrex	r3, [r3]
 801f282:	60fb      	str	r3, [r7, #12]
   return(result);
 801f284:	68fb      	ldr	r3, [r7, #12]
 801f286:	f023 0301 	bic.w	r3, r3, #1
 801f28a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801f28c:	687b      	ldr	r3, [r7, #4]
 801f28e:	681b      	ldr	r3, [r3, #0]
 801f290:	3308      	adds	r3, #8
 801f292:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801f294:	61fa      	str	r2, [r7, #28]
 801f296:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f298:	69b9      	ldr	r1, [r7, #24]
 801f29a:	69fa      	ldr	r2, [r7, #28]
 801f29c:	e841 2300 	strex	r3, r2, [r1]
 801f2a0:	617b      	str	r3, [r7, #20]
   return(result);
 801f2a2:	697b      	ldr	r3, [r7, #20]
 801f2a4:	2b00      	cmp	r3, #0
 801f2a6:	d1e5      	bne.n	801f274 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 801f2a8:	687b      	ldr	r3, [r7, #4]
 801f2aa:	2220      	movs	r2, #32
 801f2ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 801f2b0:	687b      	ldr	r3, [r7, #4]
 801f2b2:	2200      	movs	r2, #0
 801f2b4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801f2b8:	2303      	movs	r3, #3
 801f2ba:	e011      	b.n	801f2e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801f2bc:	687b      	ldr	r3, [r7, #4]
 801f2be:	2220      	movs	r2, #32
 801f2c0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801f2c2:	687b      	ldr	r3, [r7, #4]
 801f2c4:	2220      	movs	r2, #32
 801f2c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801f2ca:	687b      	ldr	r3, [r7, #4]
 801f2cc:	2200      	movs	r2, #0
 801f2ce:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801f2d0:	687b      	ldr	r3, [r7, #4]
 801f2d2:	2200      	movs	r2, #0
 801f2d4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801f2d6:	687b      	ldr	r3, [r7, #4]
 801f2d8:	2200      	movs	r2, #0
 801f2da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 801f2de:	2300      	movs	r3, #0
}
 801f2e0:	4618      	mov	r0, r3
 801f2e2:	3758      	adds	r7, #88	@ 0x58
 801f2e4:	46bd      	mov	sp, r7
 801f2e6:	bd80      	pop	{r7, pc}

0801f2e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801f2e8:	b580      	push	{r7, lr}
 801f2ea:	b084      	sub	sp, #16
 801f2ec:	af00      	add	r7, sp, #0
 801f2ee:	60f8      	str	r0, [r7, #12]
 801f2f0:	60b9      	str	r1, [r7, #8]
 801f2f2:	603b      	str	r3, [r7, #0]
 801f2f4:	4613      	mov	r3, r2
 801f2f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801f2f8:	e04f      	b.n	801f39a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801f2fa:	69bb      	ldr	r3, [r7, #24]
 801f2fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f300:	d04b      	beq.n	801f39a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801f302:	f7fb fb2f 	bl	801a964 <HAL_GetTick>
 801f306:	4602      	mov	r2, r0
 801f308:	683b      	ldr	r3, [r7, #0]
 801f30a:	1ad3      	subs	r3, r2, r3
 801f30c:	69ba      	ldr	r2, [r7, #24]
 801f30e:	429a      	cmp	r2, r3
 801f310:	d302      	bcc.n	801f318 <UART_WaitOnFlagUntilTimeout+0x30>
 801f312:	69bb      	ldr	r3, [r7, #24]
 801f314:	2b00      	cmp	r3, #0
 801f316:	d101      	bne.n	801f31c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801f318:	2303      	movs	r3, #3
 801f31a:	e04e      	b.n	801f3ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801f31c:	68fb      	ldr	r3, [r7, #12]
 801f31e:	681b      	ldr	r3, [r3, #0]
 801f320:	681b      	ldr	r3, [r3, #0]
 801f322:	f003 0304 	and.w	r3, r3, #4
 801f326:	2b00      	cmp	r3, #0
 801f328:	d037      	beq.n	801f39a <UART_WaitOnFlagUntilTimeout+0xb2>
 801f32a:	68bb      	ldr	r3, [r7, #8]
 801f32c:	2b80      	cmp	r3, #128	@ 0x80
 801f32e:	d034      	beq.n	801f39a <UART_WaitOnFlagUntilTimeout+0xb2>
 801f330:	68bb      	ldr	r3, [r7, #8]
 801f332:	2b40      	cmp	r3, #64	@ 0x40
 801f334:	d031      	beq.n	801f39a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801f336:	68fb      	ldr	r3, [r7, #12]
 801f338:	681b      	ldr	r3, [r3, #0]
 801f33a:	69db      	ldr	r3, [r3, #28]
 801f33c:	f003 0308 	and.w	r3, r3, #8
 801f340:	2b08      	cmp	r3, #8
 801f342:	d110      	bne.n	801f366 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801f344:	68fb      	ldr	r3, [r7, #12]
 801f346:	681b      	ldr	r3, [r3, #0]
 801f348:	2208      	movs	r2, #8
 801f34a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801f34c:	68f8      	ldr	r0, [r7, #12]
 801f34e:	f000 f8ff 	bl	801f550 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801f352:	68fb      	ldr	r3, [r7, #12]
 801f354:	2208      	movs	r2, #8
 801f356:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801f35a:	68fb      	ldr	r3, [r7, #12]
 801f35c:	2200      	movs	r2, #0
 801f35e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 801f362:	2301      	movs	r3, #1
 801f364:	e029      	b.n	801f3ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801f366:	68fb      	ldr	r3, [r7, #12]
 801f368:	681b      	ldr	r3, [r3, #0]
 801f36a:	69db      	ldr	r3, [r3, #28]
 801f36c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801f370:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801f374:	d111      	bne.n	801f39a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801f376:	68fb      	ldr	r3, [r7, #12]
 801f378:	681b      	ldr	r3, [r3, #0]
 801f37a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801f37e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801f380:	68f8      	ldr	r0, [r7, #12]
 801f382:	f000 f8e5 	bl	801f550 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801f386:	68fb      	ldr	r3, [r7, #12]
 801f388:	2220      	movs	r2, #32
 801f38a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801f38e:	68fb      	ldr	r3, [r7, #12]
 801f390:	2200      	movs	r2, #0
 801f392:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 801f396:	2303      	movs	r3, #3
 801f398:	e00f      	b.n	801f3ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801f39a:	68fb      	ldr	r3, [r7, #12]
 801f39c:	681b      	ldr	r3, [r3, #0]
 801f39e:	69da      	ldr	r2, [r3, #28]
 801f3a0:	68bb      	ldr	r3, [r7, #8]
 801f3a2:	4013      	ands	r3, r2
 801f3a4:	68ba      	ldr	r2, [r7, #8]
 801f3a6:	429a      	cmp	r2, r3
 801f3a8:	bf0c      	ite	eq
 801f3aa:	2301      	moveq	r3, #1
 801f3ac:	2300      	movne	r3, #0
 801f3ae:	b2db      	uxtb	r3, r3
 801f3b0:	461a      	mov	r2, r3
 801f3b2:	79fb      	ldrb	r3, [r7, #7]
 801f3b4:	429a      	cmp	r2, r3
 801f3b6:	d0a0      	beq.n	801f2fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801f3b8:	2300      	movs	r3, #0
}
 801f3ba:	4618      	mov	r0, r3
 801f3bc:	3710      	adds	r7, #16
 801f3be:	46bd      	mov	sp, r7
 801f3c0:	bd80      	pop	{r7, pc}
	...

0801f3c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801f3c4:	b480      	push	{r7}
 801f3c6:	b097      	sub	sp, #92	@ 0x5c
 801f3c8:	af00      	add	r7, sp, #0
 801f3ca:	60f8      	str	r0, [r7, #12]
 801f3cc:	60b9      	str	r1, [r7, #8]
 801f3ce:	4613      	mov	r3, r2
 801f3d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801f3d2:	68fb      	ldr	r3, [r7, #12]
 801f3d4:	68ba      	ldr	r2, [r7, #8]
 801f3d6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 801f3d8:	68fb      	ldr	r3, [r7, #12]
 801f3da:	88fa      	ldrh	r2, [r7, #6]
 801f3dc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 801f3e0:	68fb      	ldr	r3, [r7, #12]
 801f3e2:	88fa      	ldrh	r2, [r7, #6]
 801f3e4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 801f3e8:	68fb      	ldr	r3, [r7, #12]
 801f3ea:	2200      	movs	r2, #0
 801f3ec:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801f3ee:	68fb      	ldr	r3, [r7, #12]
 801f3f0:	689b      	ldr	r3, [r3, #8]
 801f3f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801f3f6:	d10e      	bne.n	801f416 <UART_Start_Receive_IT+0x52>
 801f3f8:	68fb      	ldr	r3, [r7, #12]
 801f3fa:	691b      	ldr	r3, [r3, #16]
 801f3fc:	2b00      	cmp	r3, #0
 801f3fe:	d105      	bne.n	801f40c <UART_Start_Receive_IT+0x48>
 801f400:	68fb      	ldr	r3, [r7, #12]
 801f402:	f240 12ff 	movw	r2, #511	@ 0x1ff
 801f406:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801f40a:	e02d      	b.n	801f468 <UART_Start_Receive_IT+0xa4>
 801f40c:	68fb      	ldr	r3, [r7, #12]
 801f40e:	22ff      	movs	r2, #255	@ 0xff
 801f410:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801f414:	e028      	b.n	801f468 <UART_Start_Receive_IT+0xa4>
 801f416:	68fb      	ldr	r3, [r7, #12]
 801f418:	689b      	ldr	r3, [r3, #8]
 801f41a:	2b00      	cmp	r3, #0
 801f41c:	d10d      	bne.n	801f43a <UART_Start_Receive_IT+0x76>
 801f41e:	68fb      	ldr	r3, [r7, #12]
 801f420:	691b      	ldr	r3, [r3, #16]
 801f422:	2b00      	cmp	r3, #0
 801f424:	d104      	bne.n	801f430 <UART_Start_Receive_IT+0x6c>
 801f426:	68fb      	ldr	r3, [r7, #12]
 801f428:	22ff      	movs	r2, #255	@ 0xff
 801f42a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801f42e:	e01b      	b.n	801f468 <UART_Start_Receive_IT+0xa4>
 801f430:	68fb      	ldr	r3, [r7, #12]
 801f432:	227f      	movs	r2, #127	@ 0x7f
 801f434:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801f438:	e016      	b.n	801f468 <UART_Start_Receive_IT+0xa4>
 801f43a:	68fb      	ldr	r3, [r7, #12]
 801f43c:	689b      	ldr	r3, [r3, #8]
 801f43e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801f442:	d10d      	bne.n	801f460 <UART_Start_Receive_IT+0x9c>
 801f444:	68fb      	ldr	r3, [r7, #12]
 801f446:	691b      	ldr	r3, [r3, #16]
 801f448:	2b00      	cmp	r3, #0
 801f44a:	d104      	bne.n	801f456 <UART_Start_Receive_IT+0x92>
 801f44c:	68fb      	ldr	r3, [r7, #12]
 801f44e:	227f      	movs	r2, #127	@ 0x7f
 801f450:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801f454:	e008      	b.n	801f468 <UART_Start_Receive_IT+0xa4>
 801f456:	68fb      	ldr	r3, [r7, #12]
 801f458:	223f      	movs	r2, #63	@ 0x3f
 801f45a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801f45e:	e003      	b.n	801f468 <UART_Start_Receive_IT+0xa4>
 801f460:	68fb      	ldr	r3, [r7, #12]
 801f462:	2200      	movs	r2, #0
 801f464:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801f468:	68fb      	ldr	r3, [r7, #12]
 801f46a:	2200      	movs	r2, #0
 801f46c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801f470:	68fb      	ldr	r3, [r7, #12]
 801f472:	2222      	movs	r2, #34	@ 0x22
 801f474:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801f478:	68fb      	ldr	r3, [r7, #12]
 801f47a:	681b      	ldr	r3, [r3, #0]
 801f47c:	3308      	adds	r3, #8
 801f47e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f480:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801f482:	e853 3f00 	ldrex	r3, [r3]
 801f486:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801f488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f48a:	f043 0301 	orr.w	r3, r3, #1
 801f48e:	657b      	str	r3, [r7, #84]	@ 0x54
 801f490:	68fb      	ldr	r3, [r7, #12]
 801f492:	681b      	ldr	r3, [r3, #0]
 801f494:	3308      	adds	r3, #8
 801f496:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801f498:	64ba      	str	r2, [r7, #72]	@ 0x48
 801f49a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f49c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801f49e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801f4a0:	e841 2300 	strex	r3, r2, [r1]
 801f4a4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 801f4a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801f4a8:	2b00      	cmp	r3, #0
 801f4aa:	d1e5      	bne.n	801f478 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801f4ac:	68fb      	ldr	r3, [r7, #12]
 801f4ae:	689b      	ldr	r3, [r3, #8]
 801f4b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801f4b4:	d107      	bne.n	801f4c6 <UART_Start_Receive_IT+0x102>
 801f4b6:	68fb      	ldr	r3, [r7, #12]
 801f4b8:	691b      	ldr	r3, [r3, #16]
 801f4ba:	2b00      	cmp	r3, #0
 801f4bc:	d103      	bne.n	801f4c6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801f4be:	68fb      	ldr	r3, [r7, #12]
 801f4c0:	4a21      	ldr	r2, [pc, #132]	@ (801f548 <UART_Start_Receive_IT+0x184>)
 801f4c2:	669a      	str	r2, [r3, #104]	@ 0x68
 801f4c4:	e002      	b.n	801f4cc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801f4c6:	68fb      	ldr	r3, [r7, #12]
 801f4c8:	4a20      	ldr	r2, [pc, #128]	@ (801f54c <UART_Start_Receive_IT+0x188>)
 801f4ca:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801f4cc:	68fb      	ldr	r3, [r7, #12]
 801f4ce:	691b      	ldr	r3, [r3, #16]
 801f4d0:	2b00      	cmp	r3, #0
 801f4d2:	d019      	beq.n	801f508 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801f4d4:	68fb      	ldr	r3, [r7, #12]
 801f4d6:	681b      	ldr	r3, [r3, #0]
 801f4d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f4da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f4dc:	e853 3f00 	ldrex	r3, [r3]
 801f4e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801f4e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f4e4:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 801f4e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801f4ea:	68fb      	ldr	r3, [r7, #12]
 801f4ec:	681b      	ldr	r3, [r3, #0]
 801f4ee:	461a      	mov	r2, r3
 801f4f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f4f2:	637b      	str	r3, [r7, #52]	@ 0x34
 801f4f4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f4f6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801f4f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801f4fa:	e841 2300 	strex	r3, r2, [r1]
 801f4fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801f500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f502:	2b00      	cmp	r3, #0
 801f504:	d1e6      	bne.n	801f4d4 <UART_Start_Receive_IT+0x110>
 801f506:	e018      	b.n	801f53a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801f508:	68fb      	ldr	r3, [r7, #12]
 801f50a:	681b      	ldr	r3, [r3, #0]
 801f50c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f50e:	697b      	ldr	r3, [r7, #20]
 801f510:	e853 3f00 	ldrex	r3, [r3]
 801f514:	613b      	str	r3, [r7, #16]
   return(result);
 801f516:	693b      	ldr	r3, [r7, #16]
 801f518:	f043 0320 	orr.w	r3, r3, #32
 801f51c:	653b      	str	r3, [r7, #80]	@ 0x50
 801f51e:	68fb      	ldr	r3, [r7, #12]
 801f520:	681b      	ldr	r3, [r3, #0]
 801f522:	461a      	mov	r2, r3
 801f524:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f526:	623b      	str	r3, [r7, #32]
 801f528:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f52a:	69f9      	ldr	r1, [r7, #28]
 801f52c:	6a3a      	ldr	r2, [r7, #32]
 801f52e:	e841 2300 	strex	r3, r2, [r1]
 801f532:	61bb      	str	r3, [r7, #24]
   return(result);
 801f534:	69bb      	ldr	r3, [r7, #24]
 801f536:	2b00      	cmp	r3, #0
 801f538:	d1e6      	bne.n	801f508 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 801f53a:	2300      	movs	r3, #0
}
 801f53c:	4618      	mov	r0, r3
 801f53e:	375c      	adds	r7, #92	@ 0x5c
 801f540:	46bd      	mov	sp, r7
 801f542:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f546:	4770      	bx	lr
 801f548:	0801f855 	.word	0x0801f855
 801f54c:	0801f699 	.word	0x0801f699

0801f550 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801f550:	b480      	push	{r7}
 801f552:	b095      	sub	sp, #84	@ 0x54
 801f554:	af00      	add	r7, sp, #0
 801f556:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801f558:	687b      	ldr	r3, [r7, #4]
 801f55a:	681b      	ldr	r3, [r3, #0]
 801f55c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f55e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f560:	e853 3f00 	ldrex	r3, [r3]
 801f564:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801f566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f568:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801f56c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801f56e:	687b      	ldr	r3, [r7, #4]
 801f570:	681b      	ldr	r3, [r3, #0]
 801f572:	461a      	mov	r2, r3
 801f574:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f576:	643b      	str	r3, [r7, #64]	@ 0x40
 801f578:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f57a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801f57c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801f57e:	e841 2300 	strex	r3, r2, [r1]
 801f582:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801f584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f586:	2b00      	cmp	r3, #0
 801f588:	d1e6      	bne.n	801f558 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801f58a:	687b      	ldr	r3, [r7, #4]
 801f58c:	681b      	ldr	r3, [r3, #0]
 801f58e:	3308      	adds	r3, #8
 801f590:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f592:	6a3b      	ldr	r3, [r7, #32]
 801f594:	e853 3f00 	ldrex	r3, [r3]
 801f598:	61fb      	str	r3, [r7, #28]
   return(result);
 801f59a:	69fb      	ldr	r3, [r7, #28]
 801f59c:	f023 0301 	bic.w	r3, r3, #1
 801f5a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 801f5a2:	687b      	ldr	r3, [r7, #4]
 801f5a4:	681b      	ldr	r3, [r3, #0]
 801f5a6:	3308      	adds	r3, #8
 801f5a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801f5aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801f5ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f5ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801f5b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801f5b2:	e841 2300 	strex	r3, r2, [r1]
 801f5b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801f5b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f5ba:	2b00      	cmp	r3, #0
 801f5bc:	d1e5      	bne.n	801f58a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801f5be:	687b      	ldr	r3, [r7, #4]
 801f5c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801f5c2:	2b01      	cmp	r3, #1
 801f5c4:	d118      	bne.n	801f5f8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801f5c6:	687b      	ldr	r3, [r7, #4]
 801f5c8:	681b      	ldr	r3, [r3, #0]
 801f5ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f5cc:	68fb      	ldr	r3, [r7, #12]
 801f5ce:	e853 3f00 	ldrex	r3, [r3]
 801f5d2:	60bb      	str	r3, [r7, #8]
   return(result);
 801f5d4:	68bb      	ldr	r3, [r7, #8]
 801f5d6:	f023 0310 	bic.w	r3, r3, #16
 801f5da:	647b      	str	r3, [r7, #68]	@ 0x44
 801f5dc:	687b      	ldr	r3, [r7, #4]
 801f5de:	681b      	ldr	r3, [r3, #0]
 801f5e0:	461a      	mov	r2, r3
 801f5e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f5e4:	61bb      	str	r3, [r7, #24]
 801f5e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f5e8:	6979      	ldr	r1, [r7, #20]
 801f5ea:	69ba      	ldr	r2, [r7, #24]
 801f5ec:	e841 2300 	strex	r3, r2, [r1]
 801f5f0:	613b      	str	r3, [r7, #16]
   return(result);
 801f5f2:	693b      	ldr	r3, [r7, #16]
 801f5f4:	2b00      	cmp	r3, #0
 801f5f6:	d1e6      	bne.n	801f5c6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801f5f8:	687b      	ldr	r3, [r7, #4]
 801f5fa:	2220      	movs	r2, #32
 801f5fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801f600:	687b      	ldr	r3, [r7, #4]
 801f602:	2200      	movs	r2, #0
 801f604:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801f606:	687b      	ldr	r3, [r7, #4]
 801f608:	2200      	movs	r2, #0
 801f60a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801f60c:	bf00      	nop
 801f60e:	3754      	adds	r7, #84	@ 0x54
 801f610:	46bd      	mov	sp, r7
 801f612:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f616:	4770      	bx	lr

0801f618 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801f618:	b580      	push	{r7, lr}
 801f61a:	b084      	sub	sp, #16
 801f61c:	af00      	add	r7, sp, #0
 801f61e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801f620:	687b      	ldr	r3, [r7, #4]
 801f622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f624:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801f626:	68fb      	ldr	r3, [r7, #12]
 801f628:	2200      	movs	r2, #0
 801f62a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 801f62e:	68fb      	ldr	r3, [r7, #12]
 801f630:	2200      	movs	r2, #0
 801f632:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801f636:	68f8      	ldr	r0, [r7, #12]
 801f638:	f7ff fa9c 	bl	801eb74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801f63c:	bf00      	nop
 801f63e:	3710      	adds	r7, #16
 801f640:	46bd      	mov	sp, r7
 801f642:	bd80      	pop	{r7, pc}

0801f644 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801f644:	b580      	push	{r7, lr}
 801f646:	b088      	sub	sp, #32
 801f648:	af00      	add	r7, sp, #0
 801f64a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801f64c:	687b      	ldr	r3, [r7, #4]
 801f64e:	681b      	ldr	r3, [r3, #0]
 801f650:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f652:	68fb      	ldr	r3, [r7, #12]
 801f654:	e853 3f00 	ldrex	r3, [r3]
 801f658:	60bb      	str	r3, [r7, #8]
   return(result);
 801f65a:	68bb      	ldr	r3, [r7, #8]
 801f65c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801f660:	61fb      	str	r3, [r7, #28]
 801f662:	687b      	ldr	r3, [r7, #4]
 801f664:	681b      	ldr	r3, [r3, #0]
 801f666:	461a      	mov	r2, r3
 801f668:	69fb      	ldr	r3, [r7, #28]
 801f66a:	61bb      	str	r3, [r7, #24]
 801f66c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f66e:	6979      	ldr	r1, [r7, #20]
 801f670:	69ba      	ldr	r2, [r7, #24]
 801f672:	e841 2300 	strex	r3, r2, [r1]
 801f676:	613b      	str	r3, [r7, #16]
   return(result);
 801f678:	693b      	ldr	r3, [r7, #16]
 801f67a:	2b00      	cmp	r3, #0
 801f67c:	d1e6      	bne.n	801f64c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801f67e:	687b      	ldr	r3, [r7, #4]
 801f680:	2220      	movs	r2, #32
 801f682:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801f684:	687b      	ldr	r3, [r7, #4]
 801f686:	2200      	movs	r2, #0
 801f688:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801f68a:	6878      	ldr	r0, [r7, #4]
 801f68c:	f7ff fa68 	bl	801eb60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801f690:	bf00      	nop
 801f692:	3720      	adds	r7, #32
 801f694:	46bd      	mov	sp, r7
 801f696:	bd80      	pop	{r7, pc}

0801f698 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801f698:	b580      	push	{r7, lr}
 801f69a:	b09c      	sub	sp, #112	@ 0x70
 801f69c:	af00      	add	r7, sp, #0
 801f69e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801f6a0:	687b      	ldr	r3, [r7, #4]
 801f6a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801f6a6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801f6aa:	687b      	ldr	r3, [r7, #4]
 801f6ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801f6b0:	2b22      	cmp	r3, #34	@ 0x22
 801f6b2:	f040 80be 	bne.w	801f832 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801f6b6:	687b      	ldr	r3, [r7, #4]
 801f6b8:	681b      	ldr	r3, [r3, #0]
 801f6ba:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801f6bc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801f6c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 801f6c4:	b2d9      	uxtb	r1, r3
 801f6c6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801f6ca:	b2da      	uxtb	r2, r3
 801f6cc:	687b      	ldr	r3, [r7, #4]
 801f6ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f6d0:	400a      	ands	r2, r1
 801f6d2:	b2d2      	uxtb	r2, r2
 801f6d4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801f6d6:	687b      	ldr	r3, [r7, #4]
 801f6d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f6da:	1c5a      	adds	r2, r3, #1
 801f6dc:	687b      	ldr	r3, [r7, #4]
 801f6de:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801f6e0:	687b      	ldr	r3, [r7, #4]
 801f6e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801f6e6:	b29b      	uxth	r3, r3
 801f6e8:	3b01      	subs	r3, #1
 801f6ea:	b29a      	uxth	r2, r3
 801f6ec:	687b      	ldr	r3, [r7, #4]
 801f6ee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 801f6f2:	687b      	ldr	r3, [r7, #4]
 801f6f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801f6f8:	b29b      	uxth	r3, r3
 801f6fa:	2b00      	cmp	r3, #0
 801f6fc:	f040 80a3 	bne.w	801f846 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801f700:	687b      	ldr	r3, [r7, #4]
 801f702:	681b      	ldr	r3, [r3, #0]
 801f704:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f706:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f708:	e853 3f00 	ldrex	r3, [r3]
 801f70c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801f70e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801f710:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801f714:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f716:	687b      	ldr	r3, [r7, #4]
 801f718:	681b      	ldr	r3, [r3, #0]
 801f71a:	461a      	mov	r2, r3
 801f71c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f71e:	65bb      	str	r3, [r7, #88]	@ 0x58
 801f720:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f722:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801f724:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801f726:	e841 2300 	strex	r3, r2, [r1]
 801f72a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801f72c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f72e:	2b00      	cmp	r3, #0
 801f730:	d1e6      	bne.n	801f700 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801f732:	687b      	ldr	r3, [r7, #4]
 801f734:	681b      	ldr	r3, [r3, #0]
 801f736:	3308      	adds	r3, #8
 801f738:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f73a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f73c:	e853 3f00 	ldrex	r3, [r3]
 801f740:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801f742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f744:	f023 0301 	bic.w	r3, r3, #1
 801f748:	667b      	str	r3, [r7, #100]	@ 0x64
 801f74a:	687b      	ldr	r3, [r7, #4]
 801f74c:	681b      	ldr	r3, [r3, #0]
 801f74e:	3308      	adds	r3, #8
 801f750:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801f752:	647a      	str	r2, [r7, #68]	@ 0x44
 801f754:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f756:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801f758:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801f75a:	e841 2300 	strex	r3, r2, [r1]
 801f75e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801f760:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801f762:	2b00      	cmp	r3, #0
 801f764:	d1e5      	bne.n	801f732 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801f766:	687b      	ldr	r3, [r7, #4]
 801f768:	2220      	movs	r2, #32
 801f76a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801f76e:	687b      	ldr	r3, [r7, #4]
 801f770:	2200      	movs	r2, #0
 801f772:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801f774:	687b      	ldr	r3, [r7, #4]
 801f776:	2200      	movs	r2, #0
 801f778:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801f77a:	687b      	ldr	r3, [r7, #4]
 801f77c:	681b      	ldr	r3, [r3, #0]
 801f77e:	4a34      	ldr	r2, [pc, #208]	@ (801f850 <UART_RxISR_8BIT+0x1b8>)
 801f780:	4293      	cmp	r3, r2
 801f782:	d01f      	beq.n	801f7c4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801f784:	687b      	ldr	r3, [r7, #4]
 801f786:	681b      	ldr	r3, [r3, #0]
 801f788:	685b      	ldr	r3, [r3, #4]
 801f78a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801f78e:	2b00      	cmp	r3, #0
 801f790:	d018      	beq.n	801f7c4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801f792:	687b      	ldr	r3, [r7, #4]
 801f794:	681b      	ldr	r3, [r3, #0]
 801f796:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f79a:	e853 3f00 	ldrex	r3, [r3]
 801f79e:	623b      	str	r3, [r7, #32]
   return(result);
 801f7a0:	6a3b      	ldr	r3, [r7, #32]
 801f7a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801f7a6:	663b      	str	r3, [r7, #96]	@ 0x60
 801f7a8:	687b      	ldr	r3, [r7, #4]
 801f7aa:	681b      	ldr	r3, [r3, #0]
 801f7ac:	461a      	mov	r2, r3
 801f7ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801f7b0:	633b      	str	r3, [r7, #48]	@ 0x30
 801f7b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f7b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801f7b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801f7b8:	e841 2300 	strex	r3, r2, [r1]
 801f7bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801f7be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f7c0:	2b00      	cmp	r3, #0
 801f7c2:	d1e6      	bne.n	801f792 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801f7c4:	687b      	ldr	r3, [r7, #4]
 801f7c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801f7c8:	2b01      	cmp	r3, #1
 801f7ca:	d12e      	bne.n	801f82a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801f7cc:	687b      	ldr	r3, [r7, #4]
 801f7ce:	2200      	movs	r2, #0
 801f7d0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801f7d2:	687b      	ldr	r3, [r7, #4]
 801f7d4:	681b      	ldr	r3, [r3, #0]
 801f7d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f7d8:	693b      	ldr	r3, [r7, #16]
 801f7da:	e853 3f00 	ldrex	r3, [r3]
 801f7de:	60fb      	str	r3, [r7, #12]
   return(result);
 801f7e0:	68fb      	ldr	r3, [r7, #12]
 801f7e2:	f023 0310 	bic.w	r3, r3, #16
 801f7e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801f7e8:	687b      	ldr	r3, [r7, #4]
 801f7ea:	681b      	ldr	r3, [r3, #0]
 801f7ec:	461a      	mov	r2, r3
 801f7ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801f7f0:	61fb      	str	r3, [r7, #28]
 801f7f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f7f4:	69b9      	ldr	r1, [r7, #24]
 801f7f6:	69fa      	ldr	r2, [r7, #28]
 801f7f8:	e841 2300 	strex	r3, r2, [r1]
 801f7fc:	617b      	str	r3, [r7, #20]
   return(result);
 801f7fe:	697b      	ldr	r3, [r7, #20]
 801f800:	2b00      	cmp	r3, #0
 801f802:	d1e6      	bne.n	801f7d2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801f804:	687b      	ldr	r3, [r7, #4]
 801f806:	681b      	ldr	r3, [r3, #0]
 801f808:	69db      	ldr	r3, [r3, #28]
 801f80a:	f003 0310 	and.w	r3, r3, #16
 801f80e:	2b10      	cmp	r3, #16
 801f810:	d103      	bne.n	801f81a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801f812:	687b      	ldr	r3, [r7, #4]
 801f814:	681b      	ldr	r3, [r3, #0]
 801f816:	2210      	movs	r2, #16
 801f818:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801f81a:	687b      	ldr	r3, [r7, #4]
 801f81c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801f820:	4619      	mov	r1, r3
 801f822:	6878      	ldr	r0, [r7, #4]
 801f824:	f7ff f9b0 	bl	801eb88 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801f828:	e00d      	b.n	801f846 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 801f82a:	6878      	ldr	r0, [r7, #4]
 801f82c:	f7e2 f912 	bl	8001a54 <HAL_UART_RxCpltCallback>
}
 801f830:	e009      	b.n	801f846 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801f832:	687b      	ldr	r3, [r7, #4]
 801f834:	681b      	ldr	r3, [r3, #0]
 801f836:	8b1b      	ldrh	r3, [r3, #24]
 801f838:	b29a      	uxth	r2, r3
 801f83a:	687b      	ldr	r3, [r7, #4]
 801f83c:	681b      	ldr	r3, [r3, #0]
 801f83e:	f042 0208 	orr.w	r2, r2, #8
 801f842:	b292      	uxth	r2, r2
 801f844:	831a      	strh	r2, [r3, #24]
}
 801f846:	bf00      	nop
 801f848:	3770      	adds	r7, #112	@ 0x70
 801f84a:	46bd      	mov	sp, r7
 801f84c:	bd80      	pop	{r7, pc}
 801f84e:	bf00      	nop
 801f850:	40008000 	.word	0x40008000

0801f854 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801f854:	b580      	push	{r7, lr}
 801f856:	b09c      	sub	sp, #112	@ 0x70
 801f858:	af00      	add	r7, sp, #0
 801f85a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801f85c:	687b      	ldr	r3, [r7, #4]
 801f85e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801f862:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801f866:	687b      	ldr	r3, [r7, #4]
 801f868:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801f86c:	2b22      	cmp	r3, #34	@ 0x22
 801f86e:	f040 80be 	bne.w	801f9ee <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801f872:	687b      	ldr	r3, [r7, #4]
 801f874:	681b      	ldr	r3, [r3, #0]
 801f876:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801f878:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801f87c:	687b      	ldr	r3, [r7, #4]
 801f87e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f880:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801f882:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 801f886:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801f88a:	4013      	ands	r3, r2
 801f88c:	b29a      	uxth	r2, r3
 801f88e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f890:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801f892:	687b      	ldr	r3, [r7, #4]
 801f894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f896:	1c9a      	adds	r2, r3, #2
 801f898:	687b      	ldr	r3, [r7, #4]
 801f89a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801f89c:	687b      	ldr	r3, [r7, #4]
 801f89e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801f8a2:	b29b      	uxth	r3, r3
 801f8a4:	3b01      	subs	r3, #1
 801f8a6:	b29a      	uxth	r2, r3
 801f8a8:	687b      	ldr	r3, [r7, #4]
 801f8aa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 801f8ae:	687b      	ldr	r3, [r7, #4]
 801f8b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801f8b4:	b29b      	uxth	r3, r3
 801f8b6:	2b00      	cmp	r3, #0
 801f8b8:	f040 80a3 	bne.w	801fa02 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801f8bc:	687b      	ldr	r3, [r7, #4]
 801f8be:	681b      	ldr	r3, [r3, #0]
 801f8c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f8c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801f8c4:	e853 3f00 	ldrex	r3, [r3]
 801f8c8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801f8ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f8cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801f8d0:	667b      	str	r3, [r7, #100]	@ 0x64
 801f8d2:	687b      	ldr	r3, [r7, #4]
 801f8d4:	681b      	ldr	r3, [r3, #0]
 801f8d6:	461a      	mov	r2, r3
 801f8d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f8da:	657b      	str	r3, [r7, #84]	@ 0x54
 801f8dc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f8de:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801f8e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801f8e2:	e841 2300 	strex	r3, r2, [r1]
 801f8e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801f8e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f8ea:	2b00      	cmp	r3, #0
 801f8ec:	d1e6      	bne.n	801f8bc <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801f8ee:	687b      	ldr	r3, [r7, #4]
 801f8f0:	681b      	ldr	r3, [r3, #0]
 801f8f2:	3308      	adds	r3, #8
 801f8f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f8f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f8f8:	e853 3f00 	ldrex	r3, [r3]
 801f8fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801f8fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f900:	f023 0301 	bic.w	r3, r3, #1
 801f904:	663b      	str	r3, [r7, #96]	@ 0x60
 801f906:	687b      	ldr	r3, [r7, #4]
 801f908:	681b      	ldr	r3, [r3, #0]
 801f90a:	3308      	adds	r3, #8
 801f90c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801f90e:	643a      	str	r2, [r7, #64]	@ 0x40
 801f910:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f912:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801f914:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801f916:	e841 2300 	strex	r3, r2, [r1]
 801f91a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801f91c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f91e:	2b00      	cmp	r3, #0
 801f920:	d1e5      	bne.n	801f8ee <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801f922:	687b      	ldr	r3, [r7, #4]
 801f924:	2220      	movs	r2, #32
 801f926:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801f92a:	687b      	ldr	r3, [r7, #4]
 801f92c:	2200      	movs	r2, #0
 801f92e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801f930:	687b      	ldr	r3, [r7, #4]
 801f932:	2200      	movs	r2, #0
 801f934:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801f936:	687b      	ldr	r3, [r7, #4]
 801f938:	681b      	ldr	r3, [r3, #0]
 801f93a:	4a34      	ldr	r2, [pc, #208]	@ (801fa0c <UART_RxISR_16BIT+0x1b8>)
 801f93c:	4293      	cmp	r3, r2
 801f93e:	d01f      	beq.n	801f980 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801f940:	687b      	ldr	r3, [r7, #4]
 801f942:	681b      	ldr	r3, [r3, #0]
 801f944:	685b      	ldr	r3, [r3, #4]
 801f946:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801f94a:	2b00      	cmp	r3, #0
 801f94c:	d018      	beq.n	801f980 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801f94e:	687b      	ldr	r3, [r7, #4]
 801f950:	681b      	ldr	r3, [r3, #0]
 801f952:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f954:	6a3b      	ldr	r3, [r7, #32]
 801f956:	e853 3f00 	ldrex	r3, [r3]
 801f95a:	61fb      	str	r3, [r7, #28]
   return(result);
 801f95c:	69fb      	ldr	r3, [r7, #28]
 801f95e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801f962:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801f964:	687b      	ldr	r3, [r7, #4]
 801f966:	681b      	ldr	r3, [r3, #0]
 801f968:	461a      	mov	r2, r3
 801f96a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801f96c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801f96e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f970:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801f972:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801f974:	e841 2300 	strex	r3, r2, [r1]
 801f978:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801f97a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f97c:	2b00      	cmp	r3, #0
 801f97e:	d1e6      	bne.n	801f94e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801f980:	687b      	ldr	r3, [r7, #4]
 801f982:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801f984:	2b01      	cmp	r3, #1
 801f986:	d12e      	bne.n	801f9e6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801f988:	687b      	ldr	r3, [r7, #4]
 801f98a:	2200      	movs	r2, #0
 801f98c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801f98e:	687b      	ldr	r3, [r7, #4]
 801f990:	681b      	ldr	r3, [r3, #0]
 801f992:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f994:	68fb      	ldr	r3, [r7, #12]
 801f996:	e853 3f00 	ldrex	r3, [r3]
 801f99a:	60bb      	str	r3, [r7, #8]
   return(result);
 801f99c:	68bb      	ldr	r3, [r7, #8]
 801f99e:	f023 0310 	bic.w	r3, r3, #16
 801f9a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 801f9a4:	687b      	ldr	r3, [r7, #4]
 801f9a6:	681b      	ldr	r3, [r3, #0]
 801f9a8:	461a      	mov	r2, r3
 801f9aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f9ac:	61bb      	str	r3, [r7, #24]
 801f9ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f9b0:	6979      	ldr	r1, [r7, #20]
 801f9b2:	69ba      	ldr	r2, [r7, #24]
 801f9b4:	e841 2300 	strex	r3, r2, [r1]
 801f9b8:	613b      	str	r3, [r7, #16]
   return(result);
 801f9ba:	693b      	ldr	r3, [r7, #16]
 801f9bc:	2b00      	cmp	r3, #0
 801f9be:	d1e6      	bne.n	801f98e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801f9c0:	687b      	ldr	r3, [r7, #4]
 801f9c2:	681b      	ldr	r3, [r3, #0]
 801f9c4:	69db      	ldr	r3, [r3, #28]
 801f9c6:	f003 0310 	and.w	r3, r3, #16
 801f9ca:	2b10      	cmp	r3, #16
 801f9cc:	d103      	bne.n	801f9d6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801f9ce:	687b      	ldr	r3, [r7, #4]
 801f9d0:	681b      	ldr	r3, [r3, #0]
 801f9d2:	2210      	movs	r2, #16
 801f9d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801f9d6:	687b      	ldr	r3, [r7, #4]
 801f9d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801f9dc:	4619      	mov	r1, r3
 801f9de:	6878      	ldr	r0, [r7, #4]
 801f9e0:	f7ff f8d2 	bl	801eb88 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801f9e4:	e00d      	b.n	801fa02 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 801f9e6:	6878      	ldr	r0, [r7, #4]
 801f9e8:	f7e2 f834 	bl	8001a54 <HAL_UART_RxCpltCallback>
}
 801f9ec:	e009      	b.n	801fa02 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801f9ee:	687b      	ldr	r3, [r7, #4]
 801f9f0:	681b      	ldr	r3, [r3, #0]
 801f9f2:	8b1b      	ldrh	r3, [r3, #24]
 801f9f4:	b29a      	uxth	r2, r3
 801f9f6:	687b      	ldr	r3, [r7, #4]
 801f9f8:	681b      	ldr	r3, [r3, #0]
 801f9fa:	f042 0208 	orr.w	r2, r2, #8
 801f9fe:	b292      	uxth	r2, r2
 801fa00:	831a      	strh	r2, [r3, #24]
}
 801fa02:	bf00      	nop
 801fa04:	3770      	adds	r7, #112	@ 0x70
 801fa06:	46bd      	mov	sp, r7
 801fa08:	bd80      	pop	{r7, pc}
 801fa0a:	bf00      	nop
 801fa0c:	40008000 	.word	0x40008000

0801fa10 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801fa10:	b480      	push	{r7}
 801fa12:	b083      	sub	sp, #12
 801fa14:	af00      	add	r7, sp, #0
 801fa16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801fa18:	bf00      	nop
 801fa1a:	370c      	adds	r7, #12
 801fa1c:	46bd      	mov	sp, r7
 801fa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa22:	4770      	bx	lr

0801fa24 <__cvt>:
 801fa24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801fa28:	ec57 6b10 	vmov	r6, r7, d0
 801fa2c:	2f00      	cmp	r7, #0
 801fa2e:	460c      	mov	r4, r1
 801fa30:	4619      	mov	r1, r3
 801fa32:	463b      	mov	r3, r7
 801fa34:	bfbb      	ittet	lt
 801fa36:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801fa3a:	461f      	movlt	r7, r3
 801fa3c:	2300      	movge	r3, #0
 801fa3e:	232d      	movlt	r3, #45	@ 0x2d
 801fa40:	700b      	strb	r3, [r1, #0]
 801fa42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fa44:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801fa48:	4691      	mov	r9, r2
 801fa4a:	f023 0820 	bic.w	r8, r3, #32
 801fa4e:	bfbc      	itt	lt
 801fa50:	4632      	movlt	r2, r6
 801fa52:	4616      	movlt	r6, r2
 801fa54:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801fa58:	d005      	beq.n	801fa66 <__cvt+0x42>
 801fa5a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801fa5e:	d100      	bne.n	801fa62 <__cvt+0x3e>
 801fa60:	3401      	adds	r4, #1
 801fa62:	2102      	movs	r1, #2
 801fa64:	e000      	b.n	801fa68 <__cvt+0x44>
 801fa66:	2103      	movs	r1, #3
 801fa68:	ab03      	add	r3, sp, #12
 801fa6a:	9301      	str	r3, [sp, #4]
 801fa6c:	ab02      	add	r3, sp, #8
 801fa6e:	9300      	str	r3, [sp, #0]
 801fa70:	ec47 6b10 	vmov	d0, r6, r7
 801fa74:	4653      	mov	r3, sl
 801fa76:	4622      	mov	r2, r4
 801fa78:	f001 f822 	bl	8020ac0 <_dtoa_r>
 801fa7c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801fa80:	4605      	mov	r5, r0
 801fa82:	d119      	bne.n	801fab8 <__cvt+0x94>
 801fa84:	f019 0f01 	tst.w	r9, #1
 801fa88:	d00e      	beq.n	801faa8 <__cvt+0x84>
 801fa8a:	eb00 0904 	add.w	r9, r0, r4
 801fa8e:	2200      	movs	r2, #0
 801fa90:	2300      	movs	r3, #0
 801fa92:	4630      	mov	r0, r6
 801fa94:	4639      	mov	r1, r7
 801fa96:	f7e1 f817 	bl	8000ac8 <__aeabi_dcmpeq>
 801fa9a:	b108      	cbz	r0, 801faa0 <__cvt+0x7c>
 801fa9c:	f8cd 900c 	str.w	r9, [sp, #12]
 801faa0:	2230      	movs	r2, #48	@ 0x30
 801faa2:	9b03      	ldr	r3, [sp, #12]
 801faa4:	454b      	cmp	r3, r9
 801faa6:	d31e      	bcc.n	801fae6 <__cvt+0xc2>
 801faa8:	9b03      	ldr	r3, [sp, #12]
 801faaa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801faac:	1b5b      	subs	r3, r3, r5
 801faae:	4628      	mov	r0, r5
 801fab0:	6013      	str	r3, [r2, #0]
 801fab2:	b004      	add	sp, #16
 801fab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fab8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801fabc:	eb00 0904 	add.w	r9, r0, r4
 801fac0:	d1e5      	bne.n	801fa8e <__cvt+0x6a>
 801fac2:	7803      	ldrb	r3, [r0, #0]
 801fac4:	2b30      	cmp	r3, #48	@ 0x30
 801fac6:	d10a      	bne.n	801fade <__cvt+0xba>
 801fac8:	2200      	movs	r2, #0
 801faca:	2300      	movs	r3, #0
 801facc:	4630      	mov	r0, r6
 801face:	4639      	mov	r1, r7
 801fad0:	f7e0 fffa 	bl	8000ac8 <__aeabi_dcmpeq>
 801fad4:	b918      	cbnz	r0, 801fade <__cvt+0xba>
 801fad6:	f1c4 0401 	rsb	r4, r4, #1
 801fada:	f8ca 4000 	str.w	r4, [sl]
 801fade:	f8da 3000 	ldr.w	r3, [sl]
 801fae2:	4499      	add	r9, r3
 801fae4:	e7d3      	b.n	801fa8e <__cvt+0x6a>
 801fae6:	1c59      	adds	r1, r3, #1
 801fae8:	9103      	str	r1, [sp, #12]
 801faea:	701a      	strb	r2, [r3, #0]
 801faec:	e7d9      	b.n	801faa2 <__cvt+0x7e>

0801faee <__exponent>:
 801faee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801faf0:	2900      	cmp	r1, #0
 801faf2:	bfba      	itte	lt
 801faf4:	4249      	neglt	r1, r1
 801faf6:	232d      	movlt	r3, #45	@ 0x2d
 801faf8:	232b      	movge	r3, #43	@ 0x2b
 801fafa:	2909      	cmp	r1, #9
 801fafc:	7002      	strb	r2, [r0, #0]
 801fafe:	7043      	strb	r3, [r0, #1]
 801fb00:	dd29      	ble.n	801fb56 <__exponent+0x68>
 801fb02:	f10d 0307 	add.w	r3, sp, #7
 801fb06:	461d      	mov	r5, r3
 801fb08:	270a      	movs	r7, #10
 801fb0a:	461a      	mov	r2, r3
 801fb0c:	fbb1 f6f7 	udiv	r6, r1, r7
 801fb10:	fb07 1416 	mls	r4, r7, r6, r1
 801fb14:	3430      	adds	r4, #48	@ 0x30
 801fb16:	f802 4c01 	strb.w	r4, [r2, #-1]
 801fb1a:	460c      	mov	r4, r1
 801fb1c:	2c63      	cmp	r4, #99	@ 0x63
 801fb1e:	f103 33ff 	add.w	r3, r3, #4294967295
 801fb22:	4631      	mov	r1, r6
 801fb24:	dcf1      	bgt.n	801fb0a <__exponent+0x1c>
 801fb26:	3130      	adds	r1, #48	@ 0x30
 801fb28:	1e94      	subs	r4, r2, #2
 801fb2a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801fb2e:	1c41      	adds	r1, r0, #1
 801fb30:	4623      	mov	r3, r4
 801fb32:	42ab      	cmp	r3, r5
 801fb34:	d30a      	bcc.n	801fb4c <__exponent+0x5e>
 801fb36:	f10d 0309 	add.w	r3, sp, #9
 801fb3a:	1a9b      	subs	r3, r3, r2
 801fb3c:	42ac      	cmp	r4, r5
 801fb3e:	bf88      	it	hi
 801fb40:	2300      	movhi	r3, #0
 801fb42:	3302      	adds	r3, #2
 801fb44:	4403      	add	r3, r0
 801fb46:	1a18      	subs	r0, r3, r0
 801fb48:	b003      	add	sp, #12
 801fb4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fb4c:	f813 6b01 	ldrb.w	r6, [r3], #1
 801fb50:	f801 6f01 	strb.w	r6, [r1, #1]!
 801fb54:	e7ed      	b.n	801fb32 <__exponent+0x44>
 801fb56:	2330      	movs	r3, #48	@ 0x30
 801fb58:	3130      	adds	r1, #48	@ 0x30
 801fb5a:	7083      	strb	r3, [r0, #2]
 801fb5c:	70c1      	strb	r1, [r0, #3]
 801fb5e:	1d03      	adds	r3, r0, #4
 801fb60:	e7f1      	b.n	801fb46 <__exponent+0x58>
	...

0801fb64 <_printf_float>:
 801fb64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb68:	b08d      	sub	sp, #52	@ 0x34
 801fb6a:	460c      	mov	r4, r1
 801fb6c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801fb70:	4616      	mov	r6, r2
 801fb72:	461f      	mov	r7, r3
 801fb74:	4605      	mov	r5, r0
 801fb76:	f000 fe95 	bl	80208a4 <_localeconv_r>
 801fb7a:	6803      	ldr	r3, [r0, #0]
 801fb7c:	9304      	str	r3, [sp, #16]
 801fb7e:	4618      	mov	r0, r3
 801fb80:	f7e0 fb76 	bl	8000270 <strlen>
 801fb84:	2300      	movs	r3, #0
 801fb86:	930a      	str	r3, [sp, #40]	@ 0x28
 801fb88:	f8d8 3000 	ldr.w	r3, [r8]
 801fb8c:	9005      	str	r0, [sp, #20]
 801fb8e:	3307      	adds	r3, #7
 801fb90:	f023 0307 	bic.w	r3, r3, #7
 801fb94:	f103 0208 	add.w	r2, r3, #8
 801fb98:	f894 a018 	ldrb.w	sl, [r4, #24]
 801fb9c:	f8d4 b000 	ldr.w	fp, [r4]
 801fba0:	f8c8 2000 	str.w	r2, [r8]
 801fba4:	e9d3 8900 	ldrd	r8, r9, [r3]
 801fba8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801fbac:	9307      	str	r3, [sp, #28]
 801fbae:	f8cd 8018 	str.w	r8, [sp, #24]
 801fbb2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801fbb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801fbba:	4b9c      	ldr	r3, [pc, #624]	@ (801fe2c <_printf_float+0x2c8>)
 801fbbc:	f04f 32ff 	mov.w	r2, #4294967295
 801fbc0:	f7e0 ffb4 	bl	8000b2c <__aeabi_dcmpun>
 801fbc4:	bb70      	cbnz	r0, 801fc24 <_printf_float+0xc0>
 801fbc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801fbca:	4b98      	ldr	r3, [pc, #608]	@ (801fe2c <_printf_float+0x2c8>)
 801fbcc:	f04f 32ff 	mov.w	r2, #4294967295
 801fbd0:	f7e0 ff8e 	bl	8000af0 <__aeabi_dcmple>
 801fbd4:	bb30      	cbnz	r0, 801fc24 <_printf_float+0xc0>
 801fbd6:	2200      	movs	r2, #0
 801fbd8:	2300      	movs	r3, #0
 801fbda:	4640      	mov	r0, r8
 801fbdc:	4649      	mov	r1, r9
 801fbde:	f7e0 ff7d 	bl	8000adc <__aeabi_dcmplt>
 801fbe2:	b110      	cbz	r0, 801fbea <_printf_float+0x86>
 801fbe4:	232d      	movs	r3, #45	@ 0x2d
 801fbe6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801fbea:	4a91      	ldr	r2, [pc, #580]	@ (801fe30 <_printf_float+0x2cc>)
 801fbec:	4b91      	ldr	r3, [pc, #580]	@ (801fe34 <_printf_float+0x2d0>)
 801fbee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801fbf2:	bf8c      	ite	hi
 801fbf4:	4690      	movhi	r8, r2
 801fbf6:	4698      	movls	r8, r3
 801fbf8:	2303      	movs	r3, #3
 801fbfa:	6123      	str	r3, [r4, #16]
 801fbfc:	f02b 0304 	bic.w	r3, fp, #4
 801fc00:	6023      	str	r3, [r4, #0]
 801fc02:	f04f 0900 	mov.w	r9, #0
 801fc06:	9700      	str	r7, [sp, #0]
 801fc08:	4633      	mov	r3, r6
 801fc0a:	aa0b      	add	r2, sp, #44	@ 0x2c
 801fc0c:	4621      	mov	r1, r4
 801fc0e:	4628      	mov	r0, r5
 801fc10:	f000 f9d2 	bl	801ffb8 <_printf_common>
 801fc14:	3001      	adds	r0, #1
 801fc16:	f040 808d 	bne.w	801fd34 <_printf_float+0x1d0>
 801fc1a:	f04f 30ff 	mov.w	r0, #4294967295
 801fc1e:	b00d      	add	sp, #52	@ 0x34
 801fc20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fc24:	4642      	mov	r2, r8
 801fc26:	464b      	mov	r3, r9
 801fc28:	4640      	mov	r0, r8
 801fc2a:	4649      	mov	r1, r9
 801fc2c:	f7e0 ff7e 	bl	8000b2c <__aeabi_dcmpun>
 801fc30:	b140      	cbz	r0, 801fc44 <_printf_float+0xe0>
 801fc32:	464b      	mov	r3, r9
 801fc34:	2b00      	cmp	r3, #0
 801fc36:	bfbc      	itt	lt
 801fc38:	232d      	movlt	r3, #45	@ 0x2d
 801fc3a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801fc3e:	4a7e      	ldr	r2, [pc, #504]	@ (801fe38 <_printf_float+0x2d4>)
 801fc40:	4b7e      	ldr	r3, [pc, #504]	@ (801fe3c <_printf_float+0x2d8>)
 801fc42:	e7d4      	b.n	801fbee <_printf_float+0x8a>
 801fc44:	6863      	ldr	r3, [r4, #4]
 801fc46:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801fc4a:	9206      	str	r2, [sp, #24]
 801fc4c:	1c5a      	adds	r2, r3, #1
 801fc4e:	d13b      	bne.n	801fcc8 <_printf_float+0x164>
 801fc50:	2306      	movs	r3, #6
 801fc52:	6063      	str	r3, [r4, #4]
 801fc54:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801fc58:	2300      	movs	r3, #0
 801fc5a:	6022      	str	r2, [r4, #0]
 801fc5c:	9303      	str	r3, [sp, #12]
 801fc5e:	ab0a      	add	r3, sp, #40	@ 0x28
 801fc60:	e9cd a301 	strd	sl, r3, [sp, #4]
 801fc64:	ab09      	add	r3, sp, #36	@ 0x24
 801fc66:	9300      	str	r3, [sp, #0]
 801fc68:	6861      	ldr	r1, [r4, #4]
 801fc6a:	ec49 8b10 	vmov	d0, r8, r9
 801fc6e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801fc72:	4628      	mov	r0, r5
 801fc74:	f7ff fed6 	bl	801fa24 <__cvt>
 801fc78:	9b06      	ldr	r3, [sp, #24]
 801fc7a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801fc7c:	2b47      	cmp	r3, #71	@ 0x47
 801fc7e:	4680      	mov	r8, r0
 801fc80:	d129      	bne.n	801fcd6 <_printf_float+0x172>
 801fc82:	1cc8      	adds	r0, r1, #3
 801fc84:	db02      	blt.n	801fc8c <_printf_float+0x128>
 801fc86:	6863      	ldr	r3, [r4, #4]
 801fc88:	4299      	cmp	r1, r3
 801fc8a:	dd41      	ble.n	801fd10 <_printf_float+0x1ac>
 801fc8c:	f1aa 0a02 	sub.w	sl, sl, #2
 801fc90:	fa5f fa8a 	uxtb.w	sl, sl
 801fc94:	3901      	subs	r1, #1
 801fc96:	4652      	mov	r2, sl
 801fc98:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801fc9c:	9109      	str	r1, [sp, #36]	@ 0x24
 801fc9e:	f7ff ff26 	bl	801faee <__exponent>
 801fca2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801fca4:	1813      	adds	r3, r2, r0
 801fca6:	2a01      	cmp	r2, #1
 801fca8:	4681      	mov	r9, r0
 801fcaa:	6123      	str	r3, [r4, #16]
 801fcac:	dc02      	bgt.n	801fcb4 <_printf_float+0x150>
 801fcae:	6822      	ldr	r2, [r4, #0]
 801fcb0:	07d2      	lsls	r2, r2, #31
 801fcb2:	d501      	bpl.n	801fcb8 <_printf_float+0x154>
 801fcb4:	3301      	adds	r3, #1
 801fcb6:	6123      	str	r3, [r4, #16]
 801fcb8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801fcbc:	2b00      	cmp	r3, #0
 801fcbe:	d0a2      	beq.n	801fc06 <_printf_float+0xa2>
 801fcc0:	232d      	movs	r3, #45	@ 0x2d
 801fcc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801fcc6:	e79e      	b.n	801fc06 <_printf_float+0xa2>
 801fcc8:	9a06      	ldr	r2, [sp, #24]
 801fcca:	2a47      	cmp	r2, #71	@ 0x47
 801fccc:	d1c2      	bne.n	801fc54 <_printf_float+0xf0>
 801fcce:	2b00      	cmp	r3, #0
 801fcd0:	d1c0      	bne.n	801fc54 <_printf_float+0xf0>
 801fcd2:	2301      	movs	r3, #1
 801fcd4:	e7bd      	b.n	801fc52 <_printf_float+0xee>
 801fcd6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801fcda:	d9db      	bls.n	801fc94 <_printf_float+0x130>
 801fcdc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801fce0:	d118      	bne.n	801fd14 <_printf_float+0x1b0>
 801fce2:	2900      	cmp	r1, #0
 801fce4:	6863      	ldr	r3, [r4, #4]
 801fce6:	dd0b      	ble.n	801fd00 <_printf_float+0x19c>
 801fce8:	6121      	str	r1, [r4, #16]
 801fcea:	b913      	cbnz	r3, 801fcf2 <_printf_float+0x18e>
 801fcec:	6822      	ldr	r2, [r4, #0]
 801fcee:	07d0      	lsls	r0, r2, #31
 801fcf0:	d502      	bpl.n	801fcf8 <_printf_float+0x194>
 801fcf2:	3301      	adds	r3, #1
 801fcf4:	440b      	add	r3, r1
 801fcf6:	6123      	str	r3, [r4, #16]
 801fcf8:	65a1      	str	r1, [r4, #88]	@ 0x58
 801fcfa:	f04f 0900 	mov.w	r9, #0
 801fcfe:	e7db      	b.n	801fcb8 <_printf_float+0x154>
 801fd00:	b913      	cbnz	r3, 801fd08 <_printf_float+0x1a4>
 801fd02:	6822      	ldr	r2, [r4, #0]
 801fd04:	07d2      	lsls	r2, r2, #31
 801fd06:	d501      	bpl.n	801fd0c <_printf_float+0x1a8>
 801fd08:	3302      	adds	r3, #2
 801fd0a:	e7f4      	b.n	801fcf6 <_printf_float+0x192>
 801fd0c:	2301      	movs	r3, #1
 801fd0e:	e7f2      	b.n	801fcf6 <_printf_float+0x192>
 801fd10:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801fd14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fd16:	4299      	cmp	r1, r3
 801fd18:	db05      	blt.n	801fd26 <_printf_float+0x1c2>
 801fd1a:	6823      	ldr	r3, [r4, #0]
 801fd1c:	6121      	str	r1, [r4, #16]
 801fd1e:	07d8      	lsls	r0, r3, #31
 801fd20:	d5ea      	bpl.n	801fcf8 <_printf_float+0x194>
 801fd22:	1c4b      	adds	r3, r1, #1
 801fd24:	e7e7      	b.n	801fcf6 <_printf_float+0x192>
 801fd26:	2900      	cmp	r1, #0
 801fd28:	bfd4      	ite	le
 801fd2a:	f1c1 0202 	rsble	r2, r1, #2
 801fd2e:	2201      	movgt	r2, #1
 801fd30:	4413      	add	r3, r2
 801fd32:	e7e0      	b.n	801fcf6 <_printf_float+0x192>
 801fd34:	6823      	ldr	r3, [r4, #0]
 801fd36:	055a      	lsls	r2, r3, #21
 801fd38:	d407      	bmi.n	801fd4a <_printf_float+0x1e6>
 801fd3a:	6923      	ldr	r3, [r4, #16]
 801fd3c:	4642      	mov	r2, r8
 801fd3e:	4631      	mov	r1, r6
 801fd40:	4628      	mov	r0, r5
 801fd42:	47b8      	blx	r7
 801fd44:	3001      	adds	r0, #1
 801fd46:	d12b      	bne.n	801fda0 <_printf_float+0x23c>
 801fd48:	e767      	b.n	801fc1a <_printf_float+0xb6>
 801fd4a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801fd4e:	f240 80dd 	bls.w	801ff0c <_printf_float+0x3a8>
 801fd52:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801fd56:	2200      	movs	r2, #0
 801fd58:	2300      	movs	r3, #0
 801fd5a:	f7e0 feb5 	bl	8000ac8 <__aeabi_dcmpeq>
 801fd5e:	2800      	cmp	r0, #0
 801fd60:	d033      	beq.n	801fdca <_printf_float+0x266>
 801fd62:	4a37      	ldr	r2, [pc, #220]	@ (801fe40 <_printf_float+0x2dc>)
 801fd64:	2301      	movs	r3, #1
 801fd66:	4631      	mov	r1, r6
 801fd68:	4628      	mov	r0, r5
 801fd6a:	47b8      	blx	r7
 801fd6c:	3001      	adds	r0, #1
 801fd6e:	f43f af54 	beq.w	801fc1a <_printf_float+0xb6>
 801fd72:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801fd76:	4543      	cmp	r3, r8
 801fd78:	db02      	blt.n	801fd80 <_printf_float+0x21c>
 801fd7a:	6823      	ldr	r3, [r4, #0]
 801fd7c:	07d8      	lsls	r0, r3, #31
 801fd7e:	d50f      	bpl.n	801fda0 <_printf_float+0x23c>
 801fd80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801fd84:	4631      	mov	r1, r6
 801fd86:	4628      	mov	r0, r5
 801fd88:	47b8      	blx	r7
 801fd8a:	3001      	adds	r0, #1
 801fd8c:	f43f af45 	beq.w	801fc1a <_printf_float+0xb6>
 801fd90:	f04f 0900 	mov.w	r9, #0
 801fd94:	f108 38ff 	add.w	r8, r8, #4294967295
 801fd98:	f104 0a1a 	add.w	sl, r4, #26
 801fd9c:	45c8      	cmp	r8, r9
 801fd9e:	dc09      	bgt.n	801fdb4 <_printf_float+0x250>
 801fda0:	6823      	ldr	r3, [r4, #0]
 801fda2:	079b      	lsls	r3, r3, #30
 801fda4:	f100 8103 	bmi.w	801ffae <_printf_float+0x44a>
 801fda8:	68e0      	ldr	r0, [r4, #12]
 801fdaa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fdac:	4298      	cmp	r0, r3
 801fdae:	bfb8      	it	lt
 801fdb0:	4618      	movlt	r0, r3
 801fdb2:	e734      	b.n	801fc1e <_printf_float+0xba>
 801fdb4:	2301      	movs	r3, #1
 801fdb6:	4652      	mov	r2, sl
 801fdb8:	4631      	mov	r1, r6
 801fdba:	4628      	mov	r0, r5
 801fdbc:	47b8      	blx	r7
 801fdbe:	3001      	adds	r0, #1
 801fdc0:	f43f af2b 	beq.w	801fc1a <_printf_float+0xb6>
 801fdc4:	f109 0901 	add.w	r9, r9, #1
 801fdc8:	e7e8      	b.n	801fd9c <_printf_float+0x238>
 801fdca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fdcc:	2b00      	cmp	r3, #0
 801fdce:	dc39      	bgt.n	801fe44 <_printf_float+0x2e0>
 801fdd0:	4a1b      	ldr	r2, [pc, #108]	@ (801fe40 <_printf_float+0x2dc>)
 801fdd2:	2301      	movs	r3, #1
 801fdd4:	4631      	mov	r1, r6
 801fdd6:	4628      	mov	r0, r5
 801fdd8:	47b8      	blx	r7
 801fdda:	3001      	adds	r0, #1
 801fddc:	f43f af1d 	beq.w	801fc1a <_printf_float+0xb6>
 801fde0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801fde4:	ea59 0303 	orrs.w	r3, r9, r3
 801fde8:	d102      	bne.n	801fdf0 <_printf_float+0x28c>
 801fdea:	6823      	ldr	r3, [r4, #0]
 801fdec:	07d9      	lsls	r1, r3, #31
 801fdee:	d5d7      	bpl.n	801fda0 <_printf_float+0x23c>
 801fdf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801fdf4:	4631      	mov	r1, r6
 801fdf6:	4628      	mov	r0, r5
 801fdf8:	47b8      	blx	r7
 801fdfa:	3001      	adds	r0, #1
 801fdfc:	f43f af0d 	beq.w	801fc1a <_printf_float+0xb6>
 801fe00:	f04f 0a00 	mov.w	sl, #0
 801fe04:	f104 0b1a 	add.w	fp, r4, #26
 801fe08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fe0a:	425b      	negs	r3, r3
 801fe0c:	4553      	cmp	r3, sl
 801fe0e:	dc01      	bgt.n	801fe14 <_printf_float+0x2b0>
 801fe10:	464b      	mov	r3, r9
 801fe12:	e793      	b.n	801fd3c <_printf_float+0x1d8>
 801fe14:	2301      	movs	r3, #1
 801fe16:	465a      	mov	r2, fp
 801fe18:	4631      	mov	r1, r6
 801fe1a:	4628      	mov	r0, r5
 801fe1c:	47b8      	blx	r7
 801fe1e:	3001      	adds	r0, #1
 801fe20:	f43f aefb 	beq.w	801fc1a <_printf_float+0xb6>
 801fe24:	f10a 0a01 	add.w	sl, sl, #1
 801fe28:	e7ee      	b.n	801fe08 <_printf_float+0x2a4>
 801fe2a:	bf00      	nop
 801fe2c:	7fefffff 	.word	0x7fefffff
 801fe30:	08023b5c 	.word	0x08023b5c
 801fe34:	08023b58 	.word	0x08023b58
 801fe38:	08023b64 	.word	0x08023b64
 801fe3c:	08023b60 	.word	0x08023b60
 801fe40:	08023b68 	.word	0x08023b68
 801fe44:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801fe46:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801fe4a:	4553      	cmp	r3, sl
 801fe4c:	bfa8      	it	ge
 801fe4e:	4653      	movge	r3, sl
 801fe50:	2b00      	cmp	r3, #0
 801fe52:	4699      	mov	r9, r3
 801fe54:	dc36      	bgt.n	801fec4 <_printf_float+0x360>
 801fe56:	f04f 0b00 	mov.w	fp, #0
 801fe5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801fe5e:	f104 021a 	add.w	r2, r4, #26
 801fe62:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801fe64:	9306      	str	r3, [sp, #24]
 801fe66:	eba3 0309 	sub.w	r3, r3, r9
 801fe6a:	455b      	cmp	r3, fp
 801fe6c:	dc31      	bgt.n	801fed2 <_printf_float+0x36e>
 801fe6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fe70:	459a      	cmp	sl, r3
 801fe72:	dc3a      	bgt.n	801feea <_printf_float+0x386>
 801fe74:	6823      	ldr	r3, [r4, #0]
 801fe76:	07da      	lsls	r2, r3, #31
 801fe78:	d437      	bmi.n	801feea <_printf_float+0x386>
 801fe7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fe7c:	ebaa 0903 	sub.w	r9, sl, r3
 801fe80:	9b06      	ldr	r3, [sp, #24]
 801fe82:	ebaa 0303 	sub.w	r3, sl, r3
 801fe86:	4599      	cmp	r9, r3
 801fe88:	bfa8      	it	ge
 801fe8a:	4699      	movge	r9, r3
 801fe8c:	f1b9 0f00 	cmp.w	r9, #0
 801fe90:	dc33      	bgt.n	801fefa <_printf_float+0x396>
 801fe92:	f04f 0800 	mov.w	r8, #0
 801fe96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801fe9a:	f104 0b1a 	add.w	fp, r4, #26
 801fe9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fea0:	ebaa 0303 	sub.w	r3, sl, r3
 801fea4:	eba3 0309 	sub.w	r3, r3, r9
 801fea8:	4543      	cmp	r3, r8
 801feaa:	f77f af79 	ble.w	801fda0 <_printf_float+0x23c>
 801feae:	2301      	movs	r3, #1
 801feb0:	465a      	mov	r2, fp
 801feb2:	4631      	mov	r1, r6
 801feb4:	4628      	mov	r0, r5
 801feb6:	47b8      	blx	r7
 801feb8:	3001      	adds	r0, #1
 801feba:	f43f aeae 	beq.w	801fc1a <_printf_float+0xb6>
 801febe:	f108 0801 	add.w	r8, r8, #1
 801fec2:	e7ec      	b.n	801fe9e <_printf_float+0x33a>
 801fec4:	4642      	mov	r2, r8
 801fec6:	4631      	mov	r1, r6
 801fec8:	4628      	mov	r0, r5
 801feca:	47b8      	blx	r7
 801fecc:	3001      	adds	r0, #1
 801fece:	d1c2      	bne.n	801fe56 <_printf_float+0x2f2>
 801fed0:	e6a3      	b.n	801fc1a <_printf_float+0xb6>
 801fed2:	2301      	movs	r3, #1
 801fed4:	4631      	mov	r1, r6
 801fed6:	4628      	mov	r0, r5
 801fed8:	9206      	str	r2, [sp, #24]
 801feda:	47b8      	blx	r7
 801fedc:	3001      	adds	r0, #1
 801fede:	f43f ae9c 	beq.w	801fc1a <_printf_float+0xb6>
 801fee2:	9a06      	ldr	r2, [sp, #24]
 801fee4:	f10b 0b01 	add.w	fp, fp, #1
 801fee8:	e7bb      	b.n	801fe62 <_printf_float+0x2fe>
 801feea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801feee:	4631      	mov	r1, r6
 801fef0:	4628      	mov	r0, r5
 801fef2:	47b8      	blx	r7
 801fef4:	3001      	adds	r0, #1
 801fef6:	d1c0      	bne.n	801fe7a <_printf_float+0x316>
 801fef8:	e68f      	b.n	801fc1a <_printf_float+0xb6>
 801fefa:	9a06      	ldr	r2, [sp, #24]
 801fefc:	464b      	mov	r3, r9
 801fefe:	4442      	add	r2, r8
 801ff00:	4631      	mov	r1, r6
 801ff02:	4628      	mov	r0, r5
 801ff04:	47b8      	blx	r7
 801ff06:	3001      	adds	r0, #1
 801ff08:	d1c3      	bne.n	801fe92 <_printf_float+0x32e>
 801ff0a:	e686      	b.n	801fc1a <_printf_float+0xb6>
 801ff0c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801ff10:	f1ba 0f01 	cmp.w	sl, #1
 801ff14:	dc01      	bgt.n	801ff1a <_printf_float+0x3b6>
 801ff16:	07db      	lsls	r3, r3, #31
 801ff18:	d536      	bpl.n	801ff88 <_printf_float+0x424>
 801ff1a:	2301      	movs	r3, #1
 801ff1c:	4642      	mov	r2, r8
 801ff1e:	4631      	mov	r1, r6
 801ff20:	4628      	mov	r0, r5
 801ff22:	47b8      	blx	r7
 801ff24:	3001      	adds	r0, #1
 801ff26:	f43f ae78 	beq.w	801fc1a <_printf_float+0xb6>
 801ff2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ff2e:	4631      	mov	r1, r6
 801ff30:	4628      	mov	r0, r5
 801ff32:	47b8      	blx	r7
 801ff34:	3001      	adds	r0, #1
 801ff36:	f43f ae70 	beq.w	801fc1a <_printf_float+0xb6>
 801ff3a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801ff3e:	2200      	movs	r2, #0
 801ff40:	2300      	movs	r3, #0
 801ff42:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ff46:	f7e0 fdbf 	bl	8000ac8 <__aeabi_dcmpeq>
 801ff4a:	b9c0      	cbnz	r0, 801ff7e <_printf_float+0x41a>
 801ff4c:	4653      	mov	r3, sl
 801ff4e:	f108 0201 	add.w	r2, r8, #1
 801ff52:	4631      	mov	r1, r6
 801ff54:	4628      	mov	r0, r5
 801ff56:	47b8      	blx	r7
 801ff58:	3001      	adds	r0, #1
 801ff5a:	d10c      	bne.n	801ff76 <_printf_float+0x412>
 801ff5c:	e65d      	b.n	801fc1a <_printf_float+0xb6>
 801ff5e:	2301      	movs	r3, #1
 801ff60:	465a      	mov	r2, fp
 801ff62:	4631      	mov	r1, r6
 801ff64:	4628      	mov	r0, r5
 801ff66:	47b8      	blx	r7
 801ff68:	3001      	adds	r0, #1
 801ff6a:	f43f ae56 	beq.w	801fc1a <_printf_float+0xb6>
 801ff6e:	f108 0801 	add.w	r8, r8, #1
 801ff72:	45d0      	cmp	r8, sl
 801ff74:	dbf3      	blt.n	801ff5e <_printf_float+0x3fa>
 801ff76:	464b      	mov	r3, r9
 801ff78:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801ff7c:	e6df      	b.n	801fd3e <_printf_float+0x1da>
 801ff7e:	f04f 0800 	mov.w	r8, #0
 801ff82:	f104 0b1a 	add.w	fp, r4, #26
 801ff86:	e7f4      	b.n	801ff72 <_printf_float+0x40e>
 801ff88:	2301      	movs	r3, #1
 801ff8a:	4642      	mov	r2, r8
 801ff8c:	e7e1      	b.n	801ff52 <_printf_float+0x3ee>
 801ff8e:	2301      	movs	r3, #1
 801ff90:	464a      	mov	r2, r9
 801ff92:	4631      	mov	r1, r6
 801ff94:	4628      	mov	r0, r5
 801ff96:	47b8      	blx	r7
 801ff98:	3001      	adds	r0, #1
 801ff9a:	f43f ae3e 	beq.w	801fc1a <_printf_float+0xb6>
 801ff9e:	f108 0801 	add.w	r8, r8, #1
 801ffa2:	68e3      	ldr	r3, [r4, #12]
 801ffa4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ffa6:	1a5b      	subs	r3, r3, r1
 801ffa8:	4543      	cmp	r3, r8
 801ffaa:	dcf0      	bgt.n	801ff8e <_printf_float+0x42a>
 801ffac:	e6fc      	b.n	801fda8 <_printf_float+0x244>
 801ffae:	f04f 0800 	mov.w	r8, #0
 801ffb2:	f104 0919 	add.w	r9, r4, #25
 801ffb6:	e7f4      	b.n	801ffa2 <_printf_float+0x43e>

0801ffb8 <_printf_common>:
 801ffb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ffbc:	4616      	mov	r6, r2
 801ffbe:	4698      	mov	r8, r3
 801ffc0:	688a      	ldr	r2, [r1, #8]
 801ffc2:	690b      	ldr	r3, [r1, #16]
 801ffc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801ffc8:	4293      	cmp	r3, r2
 801ffca:	bfb8      	it	lt
 801ffcc:	4613      	movlt	r3, r2
 801ffce:	6033      	str	r3, [r6, #0]
 801ffd0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801ffd4:	4607      	mov	r7, r0
 801ffd6:	460c      	mov	r4, r1
 801ffd8:	b10a      	cbz	r2, 801ffde <_printf_common+0x26>
 801ffda:	3301      	adds	r3, #1
 801ffdc:	6033      	str	r3, [r6, #0]
 801ffde:	6823      	ldr	r3, [r4, #0]
 801ffe0:	0699      	lsls	r1, r3, #26
 801ffe2:	bf42      	ittt	mi
 801ffe4:	6833      	ldrmi	r3, [r6, #0]
 801ffe6:	3302      	addmi	r3, #2
 801ffe8:	6033      	strmi	r3, [r6, #0]
 801ffea:	6825      	ldr	r5, [r4, #0]
 801ffec:	f015 0506 	ands.w	r5, r5, #6
 801fff0:	d106      	bne.n	8020000 <_printf_common+0x48>
 801fff2:	f104 0a19 	add.w	sl, r4, #25
 801fff6:	68e3      	ldr	r3, [r4, #12]
 801fff8:	6832      	ldr	r2, [r6, #0]
 801fffa:	1a9b      	subs	r3, r3, r2
 801fffc:	42ab      	cmp	r3, r5
 801fffe:	dc26      	bgt.n	802004e <_printf_common+0x96>
 8020000:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8020004:	6822      	ldr	r2, [r4, #0]
 8020006:	3b00      	subs	r3, #0
 8020008:	bf18      	it	ne
 802000a:	2301      	movne	r3, #1
 802000c:	0692      	lsls	r2, r2, #26
 802000e:	d42b      	bmi.n	8020068 <_printf_common+0xb0>
 8020010:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8020014:	4641      	mov	r1, r8
 8020016:	4638      	mov	r0, r7
 8020018:	47c8      	blx	r9
 802001a:	3001      	adds	r0, #1
 802001c:	d01e      	beq.n	802005c <_printf_common+0xa4>
 802001e:	6823      	ldr	r3, [r4, #0]
 8020020:	6922      	ldr	r2, [r4, #16]
 8020022:	f003 0306 	and.w	r3, r3, #6
 8020026:	2b04      	cmp	r3, #4
 8020028:	bf02      	ittt	eq
 802002a:	68e5      	ldreq	r5, [r4, #12]
 802002c:	6833      	ldreq	r3, [r6, #0]
 802002e:	1aed      	subeq	r5, r5, r3
 8020030:	68a3      	ldr	r3, [r4, #8]
 8020032:	bf0c      	ite	eq
 8020034:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020038:	2500      	movne	r5, #0
 802003a:	4293      	cmp	r3, r2
 802003c:	bfc4      	itt	gt
 802003e:	1a9b      	subgt	r3, r3, r2
 8020040:	18ed      	addgt	r5, r5, r3
 8020042:	2600      	movs	r6, #0
 8020044:	341a      	adds	r4, #26
 8020046:	42b5      	cmp	r5, r6
 8020048:	d11a      	bne.n	8020080 <_printf_common+0xc8>
 802004a:	2000      	movs	r0, #0
 802004c:	e008      	b.n	8020060 <_printf_common+0xa8>
 802004e:	2301      	movs	r3, #1
 8020050:	4652      	mov	r2, sl
 8020052:	4641      	mov	r1, r8
 8020054:	4638      	mov	r0, r7
 8020056:	47c8      	blx	r9
 8020058:	3001      	adds	r0, #1
 802005a:	d103      	bne.n	8020064 <_printf_common+0xac>
 802005c:	f04f 30ff 	mov.w	r0, #4294967295
 8020060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020064:	3501      	adds	r5, #1
 8020066:	e7c6      	b.n	801fff6 <_printf_common+0x3e>
 8020068:	18e1      	adds	r1, r4, r3
 802006a:	1c5a      	adds	r2, r3, #1
 802006c:	2030      	movs	r0, #48	@ 0x30
 802006e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8020072:	4422      	add	r2, r4
 8020074:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8020078:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 802007c:	3302      	adds	r3, #2
 802007e:	e7c7      	b.n	8020010 <_printf_common+0x58>
 8020080:	2301      	movs	r3, #1
 8020082:	4622      	mov	r2, r4
 8020084:	4641      	mov	r1, r8
 8020086:	4638      	mov	r0, r7
 8020088:	47c8      	blx	r9
 802008a:	3001      	adds	r0, #1
 802008c:	d0e6      	beq.n	802005c <_printf_common+0xa4>
 802008e:	3601      	adds	r6, #1
 8020090:	e7d9      	b.n	8020046 <_printf_common+0x8e>
	...

08020094 <_printf_i>:
 8020094:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020098:	7e0f      	ldrb	r7, [r1, #24]
 802009a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802009c:	2f78      	cmp	r7, #120	@ 0x78
 802009e:	4691      	mov	r9, r2
 80200a0:	4680      	mov	r8, r0
 80200a2:	460c      	mov	r4, r1
 80200a4:	469a      	mov	sl, r3
 80200a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80200aa:	d807      	bhi.n	80200bc <_printf_i+0x28>
 80200ac:	2f62      	cmp	r7, #98	@ 0x62
 80200ae:	d80a      	bhi.n	80200c6 <_printf_i+0x32>
 80200b0:	2f00      	cmp	r7, #0
 80200b2:	f000 80d1 	beq.w	8020258 <_printf_i+0x1c4>
 80200b6:	2f58      	cmp	r7, #88	@ 0x58
 80200b8:	f000 80b8 	beq.w	802022c <_printf_i+0x198>
 80200bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80200c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80200c4:	e03a      	b.n	802013c <_printf_i+0xa8>
 80200c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80200ca:	2b15      	cmp	r3, #21
 80200cc:	d8f6      	bhi.n	80200bc <_printf_i+0x28>
 80200ce:	a101      	add	r1, pc, #4	@ (adr r1, 80200d4 <_printf_i+0x40>)
 80200d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80200d4:	0802012d 	.word	0x0802012d
 80200d8:	08020141 	.word	0x08020141
 80200dc:	080200bd 	.word	0x080200bd
 80200e0:	080200bd 	.word	0x080200bd
 80200e4:	080200bd 	.word	0x080200bd
 80200e8:	080200bd 	.word	0x080200bd
 80200ec:	08020141 	.word	0x08020141
 80200f0:	080200bd 	.word	0x080200bd
 80200f4:	080200bd 	.word	0x080200bd
 80200f8:	080200bd 	.word	0x080200bd
 80200fc:	080200bd 	.word	0x080200bd
 8020100:	0802023f 	.word	0x0802023f
 8020104:	0802016b 	.word	0x0802016b
 8020108:	080201f9 	.word	0x080201f9
 802010c:	080200bd 	.word	0x080200bd
 8020110:	080200bd 	.word	0x080200bd
 8020114:	08020261 	.word	0x08020261
 8020118:	080200bd 	.word	0x080200bd
 802011c:	0802016b 	.word	0x0802016b
 8020120:	080200bd 	.word	0x080200bd
 8020124:	080200bd 	.word	0x080200bd
 8020128:	08020201 	.word	0x08020201
 802012c:	6833      	ldr	r3, [r6, #0]
 802012e:	1d1a      	adds	r2, r3, #4
 8020130:	681b      	ldr	r3, [r3, #0]
 8020132:	6032      	str	r2, [r6, #0]
 8020134:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8020138:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802013c:	2301      	movs	r3, #1
 802013e:	e09c      	b.n	802027a <_printf_i+0x1e6>
 8020140:	6833      	ldr	r3, [r6, #0]
 8020142:	6820      	ldr	r0, [r4, #0]
 8020144:	1d19      	adds	r1, r3, #4
 8020146:	6031      	str	r1, [r6, #0]
 8020148:	0606      	lsls	r6, r0, #24
 802014a:	d501      	bpl.n	8020150 <_printf_i+0xbc>
 802014c:	681d      	ldr	r5, [r3, #0]
 802014e:	e003      	b.n	8020158 <_printf_i+0xc4>
 8020150:	0645      	lsls	r5, r0, #25
 8020152:	d5fb      	bpl.n	802014c <_printf_i+0xb8>
 8020154:	f9b3 5000 	ldrsh.w	r5, [r3]
 8020158:	2d00      	cmp	r5, #0
 802015a:	da03      	bge.n	8020164 <_printf_i+0xd0>
 802015c:	232d      	movs	r3, #45	@ 0x2d
 802015e:	426d      	negs	r5, r5
 8020160:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8020164:	4858      	ldr	r0, [pc, #352]	@ (80202c8 <_printf_i+0x234>)
 8020166:	230a      	movs	r3, #10
 8020168:	e011      	b.n	802018e <_printf_i+0xfa>
 802016a:	6821      	ldr	r1, [r4, #0]
 802016c:	6833      	ldr	r3, [r6, #0]
 802016e:	0608      	lsls	r0, r1, #24
 8020170:	f853 5b04 	ldr.w	r5, [r3], #4
 8020174:	d402      	bmi.n	802017c <_printf_i+0xe8>
 8020176:	0649      	lsls	r1, r1, #25
 8020178:	bf48      	it	mi
 802017a:	b2ad      	uxthmi	r5, r5
 802017c:	2f6f      	cmp	r7, #111	@ 0x6f
 802017e:	4852      	ldr	r0, [pc, #328]	@ (80202c8 <_printf_i+0x234>)
 8020180:	6033      	str	r3, [r6, #0]
 8020182:	bf14      	ite	ne
 8020184:	230a      	movne	r3, #10
 8020186:	2308      	moveq	r3, #8
 8020188:	2100      	movs	r1, #0
 802018a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802018e:	6866      	ldr	r6, [r4, #4]
 8020190:	60a6      	str	r6, [r4, #8]
 8020192:	2e00      	cmp	r6, #0
 8020194:	db05      	blt.n	80201a2 <_printf_i+0x10e>
 8020196:	6821      	ldr	r1, [r4, #0]
 8020198:	432e      	orrs	r6, r5
 802019a:	f021 0104 	bic.w	r1, r1, #4
 802019e:	6021      	str	r1, [r4, #0]
 80201a0:	d04b      	beq.n	802023a <_printf_i+0x1a6>
 80201a2:	4616      	mov	r6, r2
 80201a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80201a8:	fb03 5711 	mls	r7, r3, r1, r5
 80201ac:	5dc7      	ldrb	r7, [r0, r7]
 80201ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80201b2:	462f      	mov	r7, r5
 80201b4:	42bb      	cmp	r3, r7
 80201b6:	460d      	mov	r5, r1
 80201b8:	d9f4      	bls.n	80201a4 <_printf_i+0x110>
 80201ba:	2b08      	cmp	r3, #8
 80201bc:	d10b      	bne.n	80201d6 <_printf_i+0x142>
 80201be:	6823      	ldr	r3, [r4, #0]
 80201c0:	07df      	lsls	r7, r3, #31
 80201c2:	d508      	bpl.n	80201d6 <_printf_i+0x142>
 80201c4:	6923      	ldr	r3, [r4, #16]
 80201c6:	6861      	ldr	r1, [r4, #4]
 80201c8:	4299      	cmp	r1, r3
 80201ca:	bfde      	ittt	le
 80201cc:	2330      	movle	r3, #48	@ 0x30
 80201ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80201d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80201d6:	1b92      	subs	r2, r2, r6
 80201d8:	6122      	str	r2, [r4, #16]
 80201da:	f8cd a000 	str.w	sl, [sp]
 80201de:	464b      	mov	r3, r9
 80201e0:	aa03      	add	r2, sp, #12
 80201e2:	4621      	mov	r1, r4
 80201e4:	4640      	mov	r0, r8
 80201e6:	f7ff fee7 	bl	801ffb8 <_printf_common>
 80201ea:	3001      	adds	r0, #1
 80201ec:	d14a      	bne.n	8020284 <_printf_i+0x1f0>
 80201ee:	f04f 30ff 	mov.w	r0, #4294967295
 80201f2:	b004      	add	sp, #16
 80201f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80201f8:	6823      	ldr	r3, [r4, #0]
 80201fa:	f043 0320 	orr.w	r3, r3, #32
 80201fe:	6023      	str	r3, [r4, #0]
 8020200:	4832      	ldr	r0, [pc, #200]	@ (80202cc <_printf_i+0x238>)
 8020202:	2778      	movs	r7, #120	@ 0x78
 8020204:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8020208:	6823      	ldr	r3, [r4, #0]
 802020a:	6831      	ldr	r1, [r6, #0]
 802020c:	061f      	lsls	r7, r3, #24
 802020e:	f851 5b04 	ldr.w	r5, [r1], #4
 8020212:	d402      	bmi.n	802021a <_printf_i+0x186>
 8020214:	065f      	lsls	r7, r3, #25
 8020216:	bf48      	it	mi
 8020218:	b2ad      	uxthmi	r5, r5
 802021a:	6031      	str	r1, [r6, #0]
 802021c:	07d9      	lsls	r1, r3, #31
 802021e:	bf44      	itt	mi
 8020220:	f043 0320 	orrmi.w	r3, r3, #32
 8020224:	6023      	strmi	r3, [r4, #0]
 8020226:	b11d      	cbz	r5, 8020230 <_printf_i+0x19c>
 8020228:	2310      	movs	r3, #16
 802022a:	e7ad      	b.n	8020188 <_printf_i+0xf4>
 802022c:	4826      	ldr	r0, [pc, #152]	@ (80202c8 <_printf_i+0x234>)
 802022e:	e7e9      	b.n	8020204 <_printf_i+0x170>
 8020230:	6823      	ldr	r3, [r4, #0]
 8020232:	f023 0320 	bic.w	r3, r3, #32
 8020236:	6023      	str	r3, [r4, #0]
 8020238:	e7f6      	b.n	8020228 <_printf_i+0x194>
 802023a:	4616      	mov	r6, r2
 802023c:	e7bd      	b.n	80201ba <_printf_i+0x126>
 802023e:	6833      	ldr	r3, [r6, #0]
 8020240:	6825      	ldr	r5, [r4, #0]
 8020242:	6961      	ldr	r1, [r4, #20]
 8020244:	1d18      	adds	r0, r3, #4
 8020246:	6030      	str	r0, [r6, #0]
 8020248:	062e      	lsls	r6, r5, #24
 802024a:	681b      	ldr	r3, [r3, #0]
 802024c:	d501      	bpl.n	8020252 <_printf_i+0x1be>
 802024e:	6019      	str	r1, [r3, #0]
 8020250:	e002      	b.n	8020258 <_printf_i+0x1c4>
 8020252:	0668      	lsls	r0, r5, #25
 8020254:	d5fb      	bpl.n	802024e <_printf_i+0x1ba>
 8020256:	8019      	strh	r1, [r3, #0]
 8020258:	2300      	movs	r3, #0
 802025a:	6123      	str	r3, [r4, #16]
 802025c:	4616      	mov	r6, r2
 802025e:	e7bc      	b.n	80201da <_printf_i+0x146>
 8020260:	6833      	ldr	r3, [r6, #0]
 8020262:	1d1a      	adds	r2, r3, #4
 8020264:	6032      	str	r2, [r6, #0]
 8020266:	681e      	ldr	r6, [r3, #0]
 8020268:	6862      	ldr	r2, [r4, #4]
 802026a:	2100      	movs	r1, #0
 802026c:	4630      	mov	r0, r6
 802026e:	f7df ffaf 	bl	80001d0 <memchr>
 8020272:	b108      	cbz	r0, 8020278 <_printf_i+0x1e4>
 8020274:	1b80      	subs	r0, r0, r6
 8020276:	6060      	str	r0, [r4, #4]
 8020278:	6863      	ldr	r3, [r4, #4]
 802027a:	6123      	str	r3, [r4, #16]
 802027c:	2300      	movs	r3, #0
 802027e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8020282:	e7aa      	b.n	80201da <_printf_i+0x146>
 8020284:	6923      	ldr	r3, [r4, #16]
 8020286:	4632      	mov	r2, r6
 8020288:	4649      	mov	r1, r9
 802028a:	4640      	mov	r0, r8
 802028c:	47d0      	blx	sl
 802028e:	3001      	adds	r0, #1
 8020290:	d0ad      	beq.n	80201ee <_printf_i+0x15a>
 8020292:	6823      	ldr	r3, [r4, #0]
 8020294:	079b      	lsls	r3, r3, #30
 8020296:	d413      	bmi.n	80202c0 <_printf_i+0x22c>
 8020298:	68e0      	ldr	r0, [r4, #12]
 802029a:	9b03      	ldr	r3, [sp, #12]
 802029c:	4298      	cmp	r0, r3
 802029e:	bfb8      	it	lt
 80202a0:	4618      	movlt	r0, r3
 80202a2:	e7a6      	b.n	80201f2 <_printf_i+0x15e>
 80202a4:	2301      	movs	r3, #1
 80202a6:	4632      	mov	r2, r6
 80202a8:	4649      	mov	r1, r9
 80202aa:	4640      	mov	r0, r8
 80202ac:	47d0      	blx	sl
 80202ae:	3001      	adds	r0, #1
 80202b0:	d09d      	beq.n	80201ee <_printf_i+0x15a>
 80202b2:	3501      	adds	r5, #1
 80202b4:	68e3      	ldr	r3, [r4, #12]
 80202b6:	9903      	ldr	r1, [sp, #12]
 80202b8:	1a5b      	subs	r3, r3, r1
 80202ba:	42ab      	cmp	r3, r5
 80202bc:	dcf2      	bgt.n	80202a4 <_printf_i+0x210>
 80202be:	e7eb      	b.n	8020298 <_printf_i+0x204>
 80202c0:	2500      	movs	r5, #0
 80202c2:	f104 0619 	add.w	r6, r4, #25
 80202c6:	e7f5      	b.n	80202b4 <_printf_i+0x220>
 80202c8:	08023b6a 	.word	0x08023b6a
 80202cc:	08023b7b 	.word	0x08023b7b

080202d0 <__sflush_r>:
 80202d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80202d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80202d8:	0716      	lsls	r6, r2, #28
 80202da:	4605      	mov	r5, r0
 80202dc:	460c      	mov	r4, r1
 80202de:	d454      	bmi.n	802038a <__sflush_r+0xba>
 80202e0:	684b      	ldr	r3, [r1, #4]
 80202e2:	2b00      	cmp	r3, #0
 80202e4:	dc02      	bgt.n	80202ec <__sflush_r+0x1c>
 80202e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80202e8:	2b00      	cmp	r3, #0
 80202ea:	dd48      	ble.n	802037e <__sflush_r+0xae>
 80202ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80202ee:	2e00      	cmp	r6, #0
 80202f0:	d045      	beq.n	802037e <__sflush_r+0xae>
 80202f2:	2300      	movs	r3, #0
 80202f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80202f8:	682f      	ldr	r7, [r5, #0]
 80202fa:	6a21      	ldr	r1, [r4, #32]
 80202fc:	602b      	str	r3, [r5, #0]
 80202fe:	d030      	beq.n	8020362 <__sflush_r+0x92>
 8020300:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8020302:	89a3      	ldrh	r3, [r4, #12]
 8020304:	0759      	lsls	r1, r3, #29
 8020306:	d505      	bpl.n	8020314 <__sflush_r+0x44>
 8020308:	6863      	ldr	r3, [r4, #4]
 802030a:	1ad2      	subs	r2, r2, r3
 802030c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802030e:	b10b      	cbz	r3, 8020314 <__sflush_r+0x44>
 8020310:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8020312:	1ad2      	subs	r2, r2, r3
 8020314:	2300      	movs	r3, #0
 8020316:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8020318:	6a21      	ldr	r1, [r4, #32]
 802031a:	4628      	mov	r0, r5
 802031c:	47b0      	blx	r6
 802031e:	1c43      	adds	r3, r0, #1
 8020320:	89a3      	ldrh	r3, [r4, #12]
 8020322:	d106      	bne.n	8020332 <__sflush_r+0x62>
 8020324:	6829      	ldr	r1, [r5, #0]
 8020326:	291d      	cmp	r1, #29
 8020328:	d82b      	bhi.n	8020382 <__sflush_r+0xb2>
 802032a:	4a2a      	ldr	r2, [pc, #168]	@ (80203d4 <__sflush_r+0x104>)
 802032c:	40ca      	lsrs	r2, r1
 802032e:	07d6      	lsls	r6, r2, #31
 8020330:	d527      	bpl.n	8020382 <__sflush_r+0xb2>
 8020332:	2200      	movs	r2, #0
 8020334:	6062      	str	r2, [r4, #4]
 8020336:	04d9      	lsls	r1, r3, #19
 8020338:	6922      	ldr	r2, [r4, #16]
 802033a:	6022      	str	r2, [r4, #0]
 802033c:	d504      	bpl.n	8020348 <__sflush_r+0x78>
 802033e:	1c42      	adds	r2, r0, #1
 8020340:	d101      	bne.n	8020346 <__sflush_r+0x76>
 8020342:	682b      	ldr	r3, [r5, #0]
 8020344:	b903      	cbnz	r3, 8020348 <__sflush_r+0x78>
 8020346:	6560      	str	r0, [r4, #84]	@ 0x54
 8020348:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802034a:	602f      	str	r7, [r5, #0]
 802034c:	b1b9      	cbz	r1, 802037e <__sflush_r+0xae>
 802034e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8020352:	4299      	cmp	r1, r3
 8020354:	d002      	beq.n	802035c <__sflush_r+0x8c>
 8020356:	4628      	mov	r0, r5
 8020358:	f001 f982 	bl	8021660 <_free_r>
 802035c:	2300      	movs	r3, #0
 802035e:	6363      	str	r3, [r4, #52]	@ 0x34
 8020360:	e00d      	b.n	802037e <__sflush_r+0xae>
 8020362:	2301      	movs	r3, #1
 8020364:	4628      	mov	r0, r5
 8020366:	47b0      	blx	r6
 8020368:	4602      	mov	r2, r0
 802036a:	1c50      	adds	r0, r2, #1
 802036c:	d1c9      	bne.n	8020302 <__sflush_r+0x32>
 802036e:	682b      	ldr	r3, [r5, #0]
 8020370:	2b00      	cmp	r3, #0
 8020372:	d0c6      	beq.n	8020302 <__sflush_r+0x32>
 8020374:	2b1d      	cmp	r3, #29
 8020376:	d001      	beq.n	802037c <__sflush_r+0xac>
 8020378:	2b16      	cmp	r3, #22
 802037a:	d11e      	bne.n	80203ba <__sflush_r+0xea>
 802037c:	602f      	str	r7, [r5, #0]
 802037e:	2000      	movs	r0, #0
 8020380:	e022      	b.n	80203c8 <__sflush_r+0xf8>
 8020382:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020386:	b21b      	sxth	r3, r3
 8020388:	e01b      	b.n	80203c2 <__sflush_r+0xf2>
 802038a:	690f      	ldr	r7, [r1, #16]
 802038c:	2f00      	cmp	r7, #0
 802038e:	d0f6      	beq.n	802037e <__sflush_r+0xae>
 8020390:	0793      	lsls	r3, r2, #30
 8020392:	680e      	ldr	r6, [r1, #0]
 8020394:	bf08      	it	eq
 8020396:	694b      	ldreq	r3, [r1, #20]
 8020398:	600f      	str	r7, [r1, #0]
 802039a:	bf18      	it	ne
 802039c:	2300      	movne	r3, #0
 802039e:	eba6 0807 	sub.w	r8, r6, r7
 80203a2:	608b      	str	r3, [r1, #8]
 80203a4:	f1b8 0f00 	cmp.w	r8, #0
 80203a8:	dde9      	ble.n	802037e <__sflush_r+0xae>
 80203aa:	6a21      	ldr	r1, [r4, #32]
 80203ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80203ae:	4643      	mov	r3, r8
 80203b0:	463a      	mov	r2, r7
 80203b2:	4628      	mov	r0, r5
 80203b4:	47b0      	blx	r6
 80203b6:	2800      	cmp	r0, #0
 80203b8:	dc08      	bgt.n	80203cc <__sflush_r+0xfc>
 80203ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80203be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80203c2:	81a3      	strh	r3, [r4, #12]
 80203c4:	f04f 30ff 	mov.w	r0, #4294967295
 80203c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80203cc:	4407      	add	r7, r0
 80203ce:	eba8 0800 	sub.w	r8, r8, r0
 80203d2:	e7e7      	b.n	80203a4 <__sflush_r+0xd4>
 80203d4:	20400001 	.word	0x20400001

080203d8 <_fflush_r>:
 80203d8:	b538      	push	{r3, r4, r5, lr}
 80203da:	690b      	ldr	r3, [r1, #16]
 80203dc:	4605      	mov	r5, r0
 80203de:	460c      	mov	r4, r1
 80203e0:	b913      	cbnz	r3, 80203e8 <_fflush_r+0x10>
 80203e2:	2500      	movs	r5, #0
 80203e4:	4628      	mov	r0, r5
 80203e6:	bd38      	pop	{r3, r4, r5, pc}
 80203e8:	b118      	cbz	r0, 80203f2 <_fflush_r+0x1a>
 80203ea:	6a03      	ldr	r3, [r0, #32]
 80203ec:	b90b      	cbnz	r3, 80203f2 <_fflush_r+0x1a>
 80203ee:	f000 f8bb 	bl	8020568 <__sinit>
 80203f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80203f6:	2b00      	cmp	r3, #0
 80203f8:	d0f3      	beq.n	80203e2 <_fflush_r+0xa>
 80203fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80203fc:	07d0      	lsls	r0, r2, #31
 80203fe:	d404      	bmi.n	802040a <_fflush_r+0x32>
 8020400:	0599      	lsls	r1, r3, #22
 8020402:	d402      	bmi.n	802040a <_fflush_r+0x32>
 8020404:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020406:	f000 fac2 	bl	802098e <__retarget_lock_acquire_recursive>
 802040a:	4628      	mov	r0, r5
 802040c:	4621      	mov	r1, r4
 802040e:	f7ff ff5f 	bl	80202d0 <__sflush_r>
 8020412:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020414:	07da      	lsls	r2, r3, #31
 8020416:	4605      	mov	r5, r0
 8020418:	d4e4      	bmi.n	80203e4 <_fflush_r+0xc>
 802041a:	89a3      	ldrh	r3, [r4, #12]
 802041c:	059b      	lsls	r3, r3, #22
 802041e:	d4e1      	bmi.n	80203e4 <_fflush_r+0xc>
 8020420:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020422:	f000 fab5 	bl	8020990 <__retarget_lock_release_recursive>
 8020426:	e7dd      	b.n	80203e4 <_fflush_r+0xc>

08020428 <fflush>:
 8020428:	4601      	mov	r1, r0
 802042a:	b920      	cbnz	r0, 8020436 <fflush+0xe>
 802042c:	4a04      	ldr	r2, [pc, #16]	@ (8020440 <fflush+0x18>)
 802042e:	4905      	ldr	r1, [pc, #20]	@ (8020444 <fflush+0x1c>)
 8020430:	4805      	ldr	r0, [pc, #20]	@ (8020448 <fflush+0x20>)
 8020432:	f000 b8b1 	b.w	8020598 <_fwalk_sglue>
 8020436:	4b05      	ldr	r3, [pc, #20]	@ (802044c <fflush+0x24>)
 8020438:	6818      	ldr	r0, [r3, #0]
 802043a:	f7ff bfcd 	b.w	80203d8 <_fflush_r>
 802043e:	bf00      	nop
 8020440:	20000078 	.word	0x20000078
 8020444:	080203d9 	.word	0x080203d9
 8020448:	20000088 	.word	0x20000088
 802044c:	20000084 	.word	0x20000084

08020450 <std>:
 8020450:	2300      	movs	r3, #0
 8020452:	b510      	push	{r4, lr}
 8020454:	4604      	mov	r4, r0
 8020456:	e9c0 3300 	strd	r3, r3, [r0]
 802045a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802045e:	6083      	str	r3, [r0, #8]
 8020460:	8181      	strh	r1, [r0, #12]
 8020462:	6643      	str	r3, [r0, #100]	@ 0x64
 8020464:	81c2      	strh	r2, [r0, #14]
 8020466:	6183      	str	r3, [r0, #24]
 8020468:	4619      	mov	r1, r3
 802046a:	2208      	movs	r2, #8
 802046c:	305c      	adds	r0, #92	@ 0x5c
 802046e:	f000 fa11 	bl	8020894 <memset>
 8020472:	4b0d      	ldr	r3, [pc, #52]	@ (80204a8 <std+0x58>)
 8020474:	6263      	str	r3, [r4, #36]	@ 0x24
 8020476:	4b0d      	ldr	r3, [pc, #52]	@ (80204ac <std+0x5c>)
 8020478:	62a3      	str	r3, [r4, #40]	@ 0x28
 802047a:	4b0d      	ldr	r3, [pc, #52]	@ (80204b0 <std+0x60>)
 802047c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802047e:	4b0d      	ldr	r3, [pc, #52]	@ (80204b4 <std+0x64>)
 8020480:	6323      	str	r3, [r4, #48]	@ 0x30
 8020482:	4b0d      	ldr	r3, [pc, #52]	@ (80204b8 <std+0x68>)
 8020484:	6224      	str	r4, [r4, #32]
 8020486:	429c      	cmp	r4, r3
 8020488:	d006      	beq.n	8020498 <std+0x48>
 802048a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802048e:	4294      	cmp	r4, r2
 8020490:	d002      	beq.n	8020498 <std+0x48>
 8020492:	33d0      	adds	r3, #208	@ 0xd0
 8020494:	429c      	cmp	r4, r3
 8020496:	d105      	bne.n	80204a4 <std+0x54>
 8020498:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802049c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80204a0:	f000 ba74 	b.w	802098c <__retarget_lock_init_recursive>
 80204a4:	bd10      	pop	{r4, pc}
 80204a6:	bf00      	nop
 80204a8:	080206c5 	.word	0x080206c5
 80204ac:	080206e7 	.word	0x080206e7
 80204b0:	0802071f 	.word	0x0802071f
 80204b4:	08020743 	.word	0x08020743
 80204b8:	20001c08 	.word	0x20001c08

080204bc <stdio_exit_handler>:
 80204bc:	4a02      	ldr	r2, [pc, #8]	@ (80204c8 <stdio_exit_handler+0xc>)
 80204be:	4903      	ldr	r1, [pc, #12]	@ (80204cc <stdio_exit_handler+0x10>)
 80204c0:	4803      	ldr	r0, [pc, #12]	@ (80204d0 <stdio_exit_handler+0x14>)
 80204c2:	f000 b869 	b.w	8020598 <_fwalk_sglue>
 80204c6:	bf00      	nop
 80204c8:	20000078 	.word	0x20000078
 80204cc:	080203d9 	.word	0x080203d9
 80204d0:	20000088 	.word	0x20000088

080204d4 <cleanup_stdio>:
 80204d4:	6841      	ldr	r1, [r0, #4]
 80204d6:	4b0c      	ldr	r3, [pc, #48]	@ (8020508 <cleanup_stdio+0x34>)
 80204d8:	4299      	cmp	r1, r3
 80204da:	b510      	push	{r4, lr}
 80204dc:	4604      	mov	r4, r0
 80204de:	d001      	beq.n	80204e4 <cleanup_stdio+0x10>
 80204e0:	f7ff ff7a 	bl	80203d8 <_fflush_r>
 80204e4:	68a1      	ldr	r1, [r4, #8]
 80204e6:	4b09      	ldr	r3, [pc, #36]	@ (802050c <cleanup_stdio+0x38>)
 80204e8:	4299      	cmp	r1, r3
 80204ea:	d002      	beq.n	80204f2 <cleanup_stdio+0x1e>
 80204ec:	4620      	mov	r0, r4
 80204ee:	f7ff ff73 	bl	80203d8 <_fflush_r>
 80204f2:	68e1      	ldr	r1, [r4, #12]
 80204f4:	4b06      	ldr	r3, [pc, #24]	@ (8020510 <cleanup_stdio+0x3c>)
 80204f6:	4299      	cmp	r1, r3
 80204f8:	d004      	beq.n	8020504 <cleanup_stdio+0x30>
 80204fa:	4620      	mov	r0, r4
 80204fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020500:	f7ff bf6a 	b.w	80203d8 <_fflush_r>
 8020504:	bd10      	pop	{r4, pc}
 8020506:	bf00      	nop
 8020508:	20001c08 	.word	0x20001c08
 802050c:	20001c70 	.word	0x20001c70
 8020510:	20001cd8 	.word	0x20001cd8

08020514 <global_stdio_init.part.0>:
 8020514:	b510      	push	{r4, lr}
 8020516:	4b0b      	ldr	r3, [pc, #44]	@ (8020544 <global_stdio_init.part.0+0x30>)
 8020518:	4c0b      	ldr	r4, [pc, #44]	@ (8020548 <global_stdio_init.part.0+0x34>)
 802051a:	4a0c      	ldr	r2, [pc, #48]	@ (802054c <global_stdio_init.part.0+0x38>)
 802051c:	601a      	str	r2, [r3, #0]
 802051e:	4620      	mov	r0, r4
 8020520:	2200      	movs	r2, #0
 8020522:	2104      	movs	r1, #4
 8020524:	f7ff ff94 	bl	8020450 <std>
 8020528:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802052c:	2201      	movs	r2, #1
 802052e:	2109      	movs	r1, #9
 8020530:	f7ff ff8e 	bl	8020450 <std>
 8020534:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8020538:	2202      	movs	r2, #2
 802053a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802053e:	2112      	movs	r1, #18
 8020540:	f7ff bf86 	b.w	8020450 <std>
 8020544:	20001d40 	.word	0x20001d40
 8020548:	20001c08 	.word	0x20001c08
 802054c:	080204bd 	.word	0x080204bd

08020550 <__sfp_lock_acquire>:
 8020550:	4801      	ldr	r0, [pc, #4]	@ (8020558 <__sfp_lock_acquire+0x8>)
 8020552:	f000 ba1c 	b.w	802098e <__retarget_lock_acquire_recursive>
 8020556:	bf00      	nop
 8020558:	20001d49 	.word	0x20001d49

0802055c <__sfp_lock_release>:
 802055c:	4801      	ldr	r0, [pc, #4]	@ (8020564 <__sfp_lock_release+0x8>)
 802055e:	f000 ba17 	b.w	8020990 <__retarget_lock_release_recursive>
 8020562:	bf00      	nop
 8020564:	20001d49 	.word	0x20001d49

08020568 <__sinit>:
 8020568:	b510      	push	{r4, lr}
 802056a:	4604      	mov	r4, r0
 802056c:	f7ff fff0 	bl	8020550 <__sfp_lock_acquire>
 8020570:	6a23      	ldr	r3, [r4, #32]
 8020572:	b11b      	cbz	r3, 802057c <__sinit+0x14>
 8020574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020578:	f7ff bff0 	b.w	802055c <__sfp_lock_release>
 802057c:	4b04      	ldr	r3, [pc, #16]	@ (8020590 <__sinit+0x28>)
 802057e:	6223      	str	r3, [r4, #32]
 8020580:	4b04      	ldr	r3, [pc, #16]	@ (8020594 <__sinit+0x2c>)
 8020582:	681b      	ldr	r3, [r3, #0]
 8020584:	2b00      	cmp	r3, #0
 8020586:	d1f5      	bne.n	8020574 <__sinit+0xc>
 8020588:	f7ff ffc4 	bl	8020514 <global_stdio_init.part.0>
 802058c:	e7f2      	b.n	8020574 <__sinit+0xc>
 802058e:	bf00      	nop
 8020590:	080204d5 	.word	0x080204d5
 8020594:	20001d40 	.word	0x20001d40

08020598 <_fwalk_sglue>:
 8020598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802059c:	4607      	mov	r7, r0
 802059e:	4688      	mov	r8, r1
 80205a0:	4614      	mov	r4, r2
 80205a2:	2600      	movs	r6, #0
 80205a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80205a8:	f1b9 0901 	subs.w	r9, r9, #1
 80205ac:	d505      	bpl.n	80205ba <_fwalk_sglue+0x22>
 80205ae:	6824      	ldr	r4, [r4, #0]
 80205b0:	2c00      	cmp	r4, #0
 80205b2:	d1f7      	bne.n	80205a4 <_fwalk_sglue+0xc>
 80205b4:	4630      	mov	r0, r6
 80205b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80205ba:	89ab      	ldrh	r3, [r5, #12]
 80205bc:	2b01      	cmp	r3, #1
 80205be:	d907      	bls.n	80205d0 <_fwalk_sglue+0x38>
 80205c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80205c4:	3301      	adds	r3, #1
 80205c6:	d003      	beq.n	80205d0 <_fwalk_sglue+0x38>
 80205c8:	4629      	mov	r1, r5
 80205ca:	4638      	mov	r0, r7
 80205cc:	47c0      	blx	r8
 80205ce:	4306      	orrs	r6, r0
 80205d0:	3568      	adds	r5, #104	@ 0x68
 80205d2:	e7e9      	b.n	80205a8 <_fwalk_sglue+0x10>

080205d4 <iprintf>:
 80205d4:	b40f      	push	{r0, r1, r2, r3}
 80205d6:	b507      	push	{r0, r1, r2, lr}
 80205d8:	4906      	ldr	r1, [pc, #24]	@ (80205f4 <iprintf+0x20>)
 80205da:	ab04      	add	r3, sp, #16
 80205dc:	6808      	ldr	r0, [r1, #0]
 80205de:	f853 2b04 	ldr.w	r2, [r3], #4
 80205e2:	6881      	ldr	r1, [r0, #8]
 80205e4:	9301      	str	r3, [sp, #4]
 80205e6:	f001 fcdf 	bl	8021fa8 <_vfiprintf_r>
 80205ea:	b003      	add	sp, #12
 80205ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80205f0:	b004      	add	sp, #16
 80205f2:	4770      	bx	lr
 80205f4:	20000084 	.word	0x20000084

080205f8 <putchar>:
 80205f8:	4b02      	ldr	r3, [pc, #8]	@ (8020604 <putchar+0xc>)
 80205fa:	4601      	mov	r1, r0
 80205fc:	6818      	ldr	r0, [r3, #0]
 80205fe:	6882      	ldr	r2, [r0, #8]
 8020600:	f001 be4c 	b.w	802229c <_putc_r>
 8020604:	20000084 	.word	0x20000084

08020608 <_puts_r>:
 8020608:	6a03      	ldr	r3, [r0, #32]
 802060a:	b570      	push	{r4, r5, r6, lr}
 802060c:	6884      	ldr	r4, [r0, #8]
 802060e:	4605      	mov	r5, r0
 8020610:	460e      	mov	r6, r1
 8020612:	b90b      	cbnz	r3, 8020618 <_puts_r+0x10>
 8020614:	f7ff ffa8 	bl	8020568 <__sinit>
 8020618:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802061a:	07db      	lsls	r3, r3, #31
 802061c:	d405      	bmi.n	802062a <_puts_r+0x22>
 802061e:	89a3      	ldrh	r3, [r4, #12]
 8020620:	0598      	lsls	r0, r3, #22
 8020622:	d402      	bmi.n	802062a <_puts_r+0x22>
 8020624:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020626:	f000 f9b2 	bl	802098e <__retarget_lock_acquire_recursive>
 802062a:	89a3      	ldrh	r3, [r4, #12]
 802062c:	0719      	lsls	r1, r3, #28
 802062e:	d502      	bpl.n	8020636 <_puts_r+0x2e>
 8020630:	6923      	ldr	r3, [r4, #16]
 8020632:	2b00      	cmp	r3, #0
 8020634:	d135      	bne.n	80206a2 <_puts_r+0x9a>
 8020636:	4621      	mov	r1, r4
 8020638:	4628      	mov	r0, r5
 802063a:	f000 f8c5 	bl	80207c8 <__swsetup_r>
 802063e:	b380      	cbz	r0, 80206a2 <_puts_r+0x9a>
 8020640:	f04f 35ff 	mov.w	r5, #4294967295
 8020644:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020646:	07da      	lsls	r2, r3, #31
 8020648:	d405      	bmi.n	8020656 <_puts_r+0x4e>
 802064a:	89a3      	ldrh	r3, [r4, #12]
 802064c:	059b      	lsls	r3, r3, #22
 802064e:	d402      	bmi.n	8020656 <_puts_r+0x4e>
 8020650:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020652:	f000 f99d 	bl	8020990 <__retarget_lock_release_recursive>
 8020656:	4628      	mov	r0, r5
 8020658:	bd70      	pop	{r4, r5, r6, pc}
 802065a:	2b00      	cmp	r3, #0
 802065c:	da04      	bge.n	8020668 <_puts_r+0x60>
 802065e:	69a2      	ldr	r2, [r4, #24]
 8020660:	429a      	cmp	r2, r3
 8020662:	dc17      	bgt.n	8020694 <_puts_r+0x8c>
 8020664:	290a      	cmp	r1, #10
 8020666:	d015      	beq.n	8020694 <_puts_r+0x8c>
 8020668:	6823      	ldr	r3, [r4, #0]
 802066a:	1c5a      	adds	r2, r3, #1
 802066c:	6022      	str	r2, [r4, #0]
 802066e:	7019      	strb	r1, [r3, #0]
 8020670:	68a3      	ldr	r3, [r4, #8]
 8020672:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8020676:	3b01      	subs	r3, #1
 8020678:	60a3      	str	r3, [r4, #8]
 802067a:	2900      	cmp	r1, #0
 802067c:	d1ed      	bne.n	802065a <_puts_r+0x52>
 802067e:	2b00      	cmp	r3, #0
 8020680:	da11      	bge.n	80206a6 <_puts_r+0x9e>
 8020682:	4622      	mov	r2, r4
 8020684:	210a      	movs	r1, #10
 8020686:	4628      	mov	r0, r5
 8020688:	f000 f85f 	bl	802074a <__swbuf_r>
 802068c:	3001      	adds	r0, #1
 802068e:	d0d7      	beq.n	8020640 <_puts_r+0x38>
 8020690:	250a      	movs	r5, #10
 8020692:	e7d7      	b.n	8020644 <_puts_r+0x3c>
 8020694:	4622      	mov	r2, r4
 8020696:	4628      	mov	r0, r5
 8020698:	f000 f857 	bl	802074a <__swbuf_r>
 802069c:	3001      	adds	r0, #1
 802069e:	d1e7      	bne.n	8020670 <_puts_r+0x68>
 80206a0:	e7ce      	b.n	8020640 <_puts_r+0x38>
 80206a2:	3e01      	subs	r6, #1
 80206a4:	e7e4      	b.n	8020670 <_puts_r+0x68>
 80206a6:	6823      	ldr	r3, [r4, #0]
 80206a8:	1c5a      	adds	r2, r3, #1
 80206aa:	6022      	str	r2, [r4, #0]
 80206ac:	220a      	movs	r2, #10
 80206ae:	701a      	strb	r2, [r3, #0]
 80206b0:	e7ee      	b.n	8020690 <_puts_r+0x88>
	...

080206b4 <puts>:
 80206b4:	4b02      	ldr	r3, [pc, #8]	@ (80206c0 <puts+0xc>)
 80206b6:	4601      	mov	r1, r0
 80206b8:	6818      	ldr	r0, [r3, #0]
 80206ba:	f7ff bfa5 	b.w	8020608 <_puts_r>
 80206be:	bf00      	nop
 80206c0:	20000084 	.word	0x20000084

080206c4 <__sread>:
 80206c4:	b510      	push	{r4, lr}
 80206c6:	460c      	mov	r4, r1
 80206c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80206cc:	f000 f910 	bl	80208f0 <_read_r>
 80206d0:	2800      	cmp	r0, #0
 80206d2:	bfab      	itete	ge
 80206d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80206d6:	89a3      	ldrhlt	r3, [r4, #12]
 80206d8:	181b      	addge	r3, r3, r0
 80206da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80206de:	bfac      	ite	ge
 80206e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80206e2:	81a3      	strhlt	r3, [r4, #12]
 80206e4:	bd10      	pop	{r4, pc}

080206e6 <__swrite>:
 80206e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80206ea:	461f      	mov	r7, r3
 80206ec:	898b      	ldrh	r3, [r1, #12]
 80206ee:	05db      	lsls	r3, r3, #23
 80206f0:	4605      	mov	r5, r0
 80206f2:	460c      	mov	r4, r1
 80206f4:	4616      	mov	r6, r2
 80206f6:	d505      	bpl.n	8020704 <__swrite+0x1e>
 80206f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80206fc:	2302      	movs	r3, #2
 80206fe:	2200      	movs	r2, #0
 8020700:	f000 f8e4 	bl	80208cc <_lseek_r>
 8020704:	89a3      	ldrh	r3, [r4, #12]
 8020706:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802070a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802070e:	81a3      	strh	r3, [r4, #12]
 8020710:	4632      	mov	r2, r6
 8020712:	463b      	mov	r3, r7
 8020714:	4628      	mov	r0, r5
 8020716:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802071a:	f000 b8fb 	b.w	8020914 <_write_r>

0802071e <__sseek>:
 802071e:	b510      	push	{r4, lr}
 8020720:	460c      	mov	r4, r1
 8020722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020726:	f000 f8d1 	bl	80208cc <_lseek_r>
 802072a:	1c43      	adds	r3, r0, #1
 802072c:	89a3      	ldrh	r3, [r4, #12]
 802072e:	bf15      	itete	ne
 8020730:	6560      	strne	r0, [r4, #84]	@ 0x54
 8020732:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8020736:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802073a:	81a3      	strheq	r3, [r4, #12]
 802073c:	bf18      	it	ne
 802073e:	81a3      	strhne	r3, [r4, #12]
 8020740:	bd10      	pop	{r4, pc}

08020742 <__sclose>:
 8020742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020746:	f000 b8b1 	b.w	80208ac <_close_r>

0802074a <__swbuf_r>:
 802074a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802074c:	460e      	mov	r6, r1
 802074e:	4614      	mov	r4, r2
 8020750:	4605      	mov	r5, r0
 8020752:	b118      	cbz	r0, 802075c <__swbuf_r+0x12>
 8020754:	6a03      	ldr	r3, [r0, #32]
 8020756:	b90b      	cbnz	r3, 802075c <__swbuf_r+0x12>
 8020758:	f7ff ff06 	bl	8020568 <__sinit>
 802075c:	69a3      	ldr	r3, [r4, #24]
 802075e:	60a3      	str	r3, [r4, #8]
 8020760:	89a3      	ldrh	r3, [r4, #12]
 8020762:	071a      	lsls	r2, r3, #28
 8020764:	d501      	bpl.n	802076a <__swbuf_r+0x20>
 8020766:	6923      	ldr	r3, [r4, #16]
 8020768:	b943      	cbnz	r3, 802077c <__swbuf_r+0x32>
 802076a:	4621      	mov	r1, r4
 802076c:	4628      	mov	r0, r5
 802076e:	f000 f82b 	bl	80207c8 <__swsetup_r>
 8020772:	b118      	cbz	r0, 802077c <__swbuf_r+0x32>
 8020774:	f04f 37ff 	mov.w	r7, #4294967295
 8020778:	4638      	mov	r0, r7
 802077a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802077c:	6823      	ldr	r3, [r4, #0]
 802077e:	6922      	ldr	r2, [r4, #16]
 8020780:	1a98      	subs	r0, r3, r2
 8020782:	6963      	ldr	r3, [r4, #20]
 8020784:	b2f6      	uxtb	r6, r6
 8020786:	4283      	cmp	r3, r0
 8020788:	4637      	mov	r7, r6
 802078a:	dc05      	bgt.n	8020798 <__swbuf_r+0x4e>
 802078c:	4621      	mov	r1, r4
 802078e:	4628      	mov	r0, r5
 8020790:	f7ff fe22 	bl	80203d8 <_fflush_r>
 8020794:	2800      	cmp	r0, #0
 8020796:	d1ed      	bne.n	8020774 <__swbuf_r+0x2a>
 8020798:	68a3      	ldr	r3, [r4, #8]
 802079a:	3b01      	subs	r3, #1
 802079c:	60a3      	str	r3, [r4, #8]
 802079e:	6823      	ldr	r3, [r4, #0]
 80207a0:	1c5a      	adds	r2, r3, #1
 80207a2:	6022      	str	r2, [r4, #0]
 80207a4:	701e      	strb	r6, [r3, #0]
 80207a6:	6962      	ldr	r2, [r4, #20]
 80207a8:	1c43      	adds	r3, r0, #1
 80207aa:	429a      	cmp	r2, r3
 80207ac:	d004      	beq.n	80207b8 <__swbuf_r+0x6e>
 80207ae:	89a3      	ldrh	r3, [r4, #12]
 80207b0:	07db      	lsls	r3, r3, #31
 80207b2:	d5e1      	bpl.n	8020778 <__swbuf_r+0x2e>
 80207b4:	2e0a      	cmp	r6, #10
 80207b6:	d1df      	bne.n	8020778 <__swbuf_r+0x2e>
 80207b8:	4621      	mov	r1, r4
 80207ba:	4628      	mov	r0, r5
 80207bc:	f7ff fe0c 	bl	80203d8 <_fflush_r>
 80207c0:	2800      	cmp	r0, #0
 80207c2:	d0d9      	beq.n	8020778 <__swbuf_r+0x2e>
 80207c4:	e7d6      	b.n	8020774 <__swbuf_r+0x2a>
	...

080207c8 <__swsetup_r>:
 80207c8:	b538      	push	{r3, r4, r5, lr}
 80207ca:	4b29      	ldr	r3, [pc, #164]	@ (8020870 <__swsetup_r+0xa8>)
 80207cc:	4605      	mov	r5, r0
 80207ce:	6818      	ldr	r0, [r3, #0]
 80207d0:	460c      	mov	r4, r1
 80207d2:	b118      	cbz	r0, 80207dc <__swsetup_r+0x14>
 80207d4:	6a03      	ldr	r3, [r0, #32]
 80207d6:	b90b      	cbnz	r3, 80207dc <__swsetup_r+0x14>
 80207d8:	f7ff fec6 	bl	8020568 <__sinit>
 80207dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80207e0:	0719      	lsls	r1, r3, #28
 80207e2:	d422      	bmi.n	802082a <__swsetup_r+0x62>
 80207e4:	06da      	lsls	r2, r3, #27
 80207e6:	d407      	bmi.n	80207f8 <__swsetup_r+0x30>
 80207e8:	2209      	movs	r2, #9
 80207ea:	602a      	str	r2, [r5, #0]
 80207ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80207f0:	81a3      	strh	r3, [r4, #12]
 80207f2:	f04f 30ff 	mov.w	r0, #4294967295
 80207f6:	e033      	b.n	8020860 <__swsetup_r+0x98>
 80207f8:	0758      	lsls	r0, r3, #29
 80207fa:	d512      	bpl.n	8020822 <__swsetup_r+0x5a>
 80207fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80207fe:	b141      	cbz	r1, 8020812 <__swsetup_r+0x4a>
 8020800:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8020804:	4299      	cmp	r1, r3
 8020806:	d002      	beq.n	802080e <__swsetup_r+0x46>
 8020808:	4628      	mov	r0, r5
 802080a:	f000 ff29 	bl	8021660 <_free_r>
 802080e:	2300      	movs	r3, #0
 8020810:	6363      	str	r3, [r4, #52]	@ 0x34
 8020812:	89a3      	ldrh	r3, [r4, #12]
 8020814:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8020818:	81a3      	strh	r3, [r4, #12]
 802081a:	2300      	movs	r3, #0
 802081c:	6063      	str	r3, [r4, #4]
 802081e:	6923      	ldr	r3, [r4, #16]
 8020820:	6023      	str	r3, [r4, #0]
 8020822:	89a3      	ldrh	r3, [r4, #12]
 8020824:	f043 0308 	orr.w	r3, r3, #8
 8020828:	81a3      	strh	r3, [r4, #12]
 802082a:	6923      	ldr	r3, [r4, #16]
 802082c:	b94b      	cbnz	r3, 8020842 <__swsetup_r+0x7a>
 802082e:	89a3      	ldrh	r3, [r4, #12]
 8020830:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8020834:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8020838:	d003      	beq.n	8020842 <__swsetup_r+0x7a>
 802083a:	4621      	mov	r1, r4
 802083c:	4628      	mov	r0, r5
 802083e:	f001 fcf1 	bl	8022224 <__smakebuf_r>
 8020842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020846:	f013 0201 	ands.w	r2, r3, #1
 802084a:	d00a      	beq.n	8020862 <__swsetup_r+0x9a>
 802084c:	2200      	movs	r2, #0
 802084e:	60a2      	str	r2, [r4, #8]
 8020850:	6962      	ldr	r2, [r4, #20]
 8020852:	4252      	negs	r2, r2
 8020854:	61a2      	str	r2, [r4, #24]
 8020856:	6922      	ldr	r2, [r4, #16]
 8020858:	b942      	cbnz	r2, 802086c <__swsetup_r+0xa4>
 802085a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802085e:	d1c5      	bne.n	80207ec <__swsetup_r+0x24>
 8020860:	bd38      	pop	{r3, r4, r5, pc}
 8020862:	0799      	lsls	r1, r3, #30
 8020864:	bf58      	it	pl
 8020866:	6962      	ldrpl	r2, [r4, #20]
 8020868:	60a2      	str	r2, [r4, #8]
 802086a:	e7f4      	b.n	8020856 <__swsetup_r+0x8e>
 802086c:	2000      	movs	r0, #0
 802086e:	e7f7      	b.n	8020860 <__swsetup_r+0x98>
 8020870:	20000084 	.word	0x20000084

08020874 <memcmp>:
 8020874:	b510      	push	{r4, lr}
 8020876:	3901      	subs	r1, #1
 8020878:	4402      	add	r2, r0
 802087a:	4290      	cmp	r0, r2
 802087c:	d101      	bne.n	8020882 <memcmp+0xe>
 802087e:	2000      	movs	r0, #0
 8020880:	e005      	b.n	802088e <memcmp+0x1a>
 8020882:	7803      	ldrb	r3, [r0, #0]
 8020884:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8020888:	42a3      	cmp	r3, r4
 802088a:	d001      	beq.n	8020890 <memcmp+0x1c>
 802088c:	1b18      	subs	r0, r3, r4
 802088e:	bd10      	pop	{r4, pc}
 8020890:	3001      	adds	r0, #1
 8020892:	e7f2      	b.n	802087a <memcmp+0x6>

08020894 <memset>:
 8020894:	4402      	add	r2, r0
 8020896:	4603      	mov	r3, r0
 8020898:	4293      	cmp	r3, r2
 802089a:	d100      	bne.n	802089e <memset+0xa>
 802089c:	4770      	bx	lr
 802089e:	f803 1b01 	strb.w	r1, [r3], #1
 80208a2:	e7f9      	b.n	8020898 <memset+0x4>

080208a4 <_localeconv_r>:
 80208a4:	4800      	ldr	r0, [pc, #0]	@ (80208a8 <_localeconv_r+0x4>)
 80208a6:	4770      	bx	lr
 80208a8:	200001c4 	.word	0x200001c4

080208ac <_close_r>:
 80208ac:	b538      	push	{r3, r4, r5, lr}
 80208ae:	4d06      	ldr	r5, [pc, #24]	@ (80208c8 <_close_r+0x1c>)
 80208b0:	2300      	movs	r3, #0
 80208b2:	4604      	mov	r4, r0
 80208b4:	4608      	mov	r0, r1
 80208b6:	602b      	str	r3, [r5, #0]
 80208b8:	f7e0 fdae 	bl	8001418 <_close>
 80208bc:	1c43      	adds	r3, r0, #1
 80208be:	d102      	bne.n	80208c6 <_close_r+0x1a>
 80208c0:	682b      	ldr	r3, [r5, #0]
 80208c2:	b103      	cbz	r3, 80208c6 <_close_r+0x1a>
 80208c4:	6023      	str	r3, [r4, #0]
 80208c6:	bd38      	pop	{r3, r4, r5, pc}
 80208c8:	20001d44 	.word	0x20001d44

080208cc <_lseek_r>:
 80208cc:	b538      	push	{r3, r4, r5, lr}
 80208ce:	4d07      	ldr	r5, [pc, #28]	@ (80208ec <_lseek_r+0x20>)
 80208d0:	4604      	mov	r4, r0
 80208d2:	4608      	mov	r0, r1
 80208d4:	4611      	mov	r1, r2
 80208d6:	2200      	movs	r2, #0
 80208d8:	602a      	str	r2, [r5, #0]
 80208da:	461a      	mov	r2, r3
 80208dc:	f7e0 fdc3 	bl	8001466 <_lseek>
 80208e0:	1c43      	adds	r3, r0, #1
 80208e2:	d102      	bne.n	80208ea <_lseek_r+0x1e>
 80208e4:	682b      	ldr	r3, [r5, #0]
 80208e6:	b103      	cbz	r3, 80208ea <_lseek_r+0x1e>
 80208e8:	6023      	str	r3, [r4, #0]
 80208ea:	bd38      	pop	{r3, r4, r5, pc}
 80208ec:	20001d44 	.word	0x20001d44

080208f0 <_read_r>:
 80208f0:	b538      	push	{r3, r4, r5, lr}
 80208f2:	4d07      	ldr	r5, [pc, #28]	@ (8020910 <_read_r+0x20>)
 80208f4:	4604      	mov	r4, r0
 80208f6:	4608      	mov	r0, r1
 80208f8:	4611      	mov	r1, r2
 80208fa:	2200      	movs	r2, #0
 80208fc:	602a      	str	r2, [r5, #0]
 80208fe:	461a      	mov	r2, r3
 8020900:	f7e0 fd51 	bl	80013a6 <_read>
 8020904:	1c43      	adds	r3, r0, #1
 8020906:	d102      	bne.n	802090e <_read_r+0x1e>
 8020908:	682b      	ldr	r3, [r5, #0]
 802090a:	b103      	cbz	r3, 802090e <_read_r+0x1e>
 802090c:	6023      	str	r3, [r4, #0]
 802090e:	bd38      	pop	{r3, r4, r5, pc}
 8020910:	20001d44 	.word	0x20001d44

08020914 <_write_r>:
 8020914:	b538      	push	{r3, r4, r5, lr}
 8020916:	4d07      	ldr	r5, [pc, #28]	@ (8020934 <_write_r+0x20>)
 8020918:	4604      	mov	r4, r0
 802091a:	4608      	mov	r0, r1
 802091c:	4611      	mov	r1, r2
 802091e:	2200      	movs	r2, #0
 8020920:	602a      	str	r2, [r5, #0]
 8020922:	461a      	mov	r2, r3
 8020924:	f7e0 fd5c 	bl	80013e0 <_write>
 8020928:	1c43      	adds	r3, r0, #1
 802092a:	d102      	bne.n	8020932 <_write_r+0x1e>
 802092c:	682b      	ldr	r3, [r5, #0]
 802092e:	b103      	cbz	r3, 8020932 <_write_r+0x1e>
 8020930:	6023      	str	r3, [r4, #0]
 8020932:	bd38      	pop	{r3, r4, r5, pc}
 8020934:	20001d44 	.word	0x20001d44

08020938 <__errno>:
 8020938:	4b01      	ldr	r3, [pc, #4]	@ (8020940 <__errno+0x8>)
 802093a:	6818      	ldr	r0, [r3, #0]
 802093c:	4770      	bx	lr
 802093e:	bf00      	nop
 8020940:	20000084 	.word	0x20000084

08020944 <__libc_init_array>:
 8020944:	b570      	push	{r4, r5, r6, lr}
 8020946:	4d0d      	ldr	r5, [pc, #52]	@ (802097c <__libc_init_array+0x38>)
 8020948:	4c0d      	ldr	r4, [pc, #52]	@ (8020980 <__libc_init_array+0x3c>)
 802094a:	1b64      	subs	r4, r4, r5
 802094c:	10a4      	asrs	r4, r4, #2
 802094e:	2600      	movs	r6, #0
 8020950:	42a6      	cmp	r6, r4
 8020952:	d109      	bne.n	8020968 <__libc_init_array+0x24>
 8020954:	4d0b      	ldr	r5, [pc, #44]	@ (8020984 <__libc_init_array+0x40>)
 8020956:	4c0c      	ldr	r4, [pc, #48]	@ (8020988 <__libc_init_array+0x44>)
 8020958:	f001 fdb6 	bl	80224c8 <_init>
 802095c:	1b64      	subs	r4, r4, r5
 802095e:	10a4      	asrs	r4, r4, #2
 8020960:	2600      	movs	r6, #0
 8020962:	42a6      	cmp	r6, r4
 8020964:	d105      	bne.n	8020972 <__libc_init_array+0x2e>
 8020966:	bd70      	pop	{r4, r5, r6, pc}
 8020968:	f855 3b04 	ldr.w	r3, [r5], #4
 802096c:	4798      	blx	r3
 802096e:	3601      	adds	r6, #1
 8020970:	e7ee      	b.n	8020950 <__libc_init_array+0xc>
 8020972:	f855 3b04 	ldr.w	r3, [r5], #4
 8020976:	4798      	blx	r3
 8020978:	3601      	adds	r6, #1
 802097a:	e7f2      	b.n	8020962 <__libc_init_array+0x1e>
 802097c:	08023ed4 	.word	0x08023ed4
 8020980:	08023ed4 	.word	0x08023ed4
 8020984:	08023ed4 	.word	0x08023ed4
 8020988:	08023ed8 	.word	0x08023ed8

0802098c <__retarget_lock_init_recursive>:
 802098c:	4770      	bx	lr

0802098e <__retarget_lock_acquire_recursive>:
 802098e:	4770      	bx	lr

08020990 <__retarget_lock_release_recursive>:
 8020990:	4770      	bx	lr

08020992 <memcpy>:
 8020992:	440a      	add	r2, r1
 8020994:	4291      	cmp	r1, r2
 8020996:	f100 33ff 	add.w	r3, r0, #4294967295
 802099a:	d100      	bne.n	802099e <memcpy+0xc>
 802099c:	4770      	bx	lr
 802099e:	b510      	push	{r4, lr}
 80209a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80209a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80209a8:	4291      	cmp	r1, r2
 80209aa:	d1f9      	bne.n	80209a0 <memcpy+0xe>
 80209ac:	bd10      	pop	{r4, pc}

080209ae <quorem>:
 80209ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80209b2:	6903      	ldr	r3, [r0, #16]
 80209b4:	690c      	ldr	r4, [r1, #16]
 80209b6:	42a3      	cmp	r3, r4
 80209b8:	4607      	mov	r7, r0
 80209ba:	db7e      	blt.n	8020aba <quorem+0x10c>
 80209bc:	3c01      	subs	r4, #1
 80209be:	f101 0814 	add.w	r8, r1, #20
 80209c2:	00a3      	lsls	r3, r4, #2
 80209c4:	f100 0514 	add.w	r5, r0, #20
 80209c8:	9300      	str	r3, [sp, #0]
 80209ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80209ce:	9301      	str	r3, [sp, #4]
 80209d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80209d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80209d8:	3301      	adds	r3, #1
 80209da:	429a      	cmp	r2, r3
 80209dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80209e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80209e4:	d32e      	bcc.n	8020a44 <quorem+0x96>
 80209e6:	f04f 0a00 	mov.w	sl, #0
 80209ea:	46c4      	mov	ip, r8
 80209ec:	46ae      	mov	lr, r5
 80209ee:	46d3      	mov	fp, sl
 80209f0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80209f4:	b298      	uxth	r0, r3
 80209f6:	fb06 a000 	mla	r0, r6, r0, sl
 80209fa:	0c02      	lsrs	r2, r0, #16
 80209fc:	0c1b      	lsrs	r3, r3, #16
 80209fe:	fb06 2303 	mla	r3, r6, r3, r2
 8020a02:	f8de 2000 	ldr.w	r2, [lr]
 8020a06:	b280      	uxth	r0, r0
 8020a08:	b292      	uxth	r2, r2
 8020a0a:	1a12      	subs	r2, r2, r0
 8020a0c:	445a      	add	r2, fp
 8020a0e:	f8de 0000 	ldr.w	r0, [lr]
 8020a12:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8020a16:	b29b      	uxth	r3, r3
 8020a18:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8020a1c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8020a20:	b292      	uxth	r2, r2
 8020a22:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8020a26:	45e1      	cmp	r9, ip
 8020a28:	f84e 2b04 	str.w	r2, [lr], #4
 8020a2c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8020a30:	d2de      	bcs.n	80209f0 <quorem+0x42>
 8020a32:	9b00      	ldr	r3, [sp, #0]
 8020a34:	58eb      	ldr	r3, [r5, r3]
 8020a36:	b92b      	cbnz	r3, 8020a44 <quorem+0x96>
 8020a38:	9b01      	ldr	r3, [sp, #4]
 8020a3a:	3b04      	subs	r3, #4
 8020a3c:	429d      	cmp	r5, r3
 8020a3e:	461a      	mov	r2, r3
 8020a40:	d32f      	bcc.n	8020aa2 <quorem+0xf4>
 8020a42:	613c      	str	r4, [r7, #16]
 8020a44:	4638      	mov	r0, r7
 8020a46:	f001 f97d 	bl	8021d44 <__mcmp>
 8020a4a:	2800      	cmp	r0, #0
 8020a4c:	db25      	blt.n	8020a9a <quorem+0xec>
 8020a4e:	4629      	mov	r1, r5
 8020a50:	2000      	movs	r0, #0
 8020a52:	f858 2b04 	ldr.w	r2, [r8], #4
 8020a56:	f8d1 c000 	ldr.w	ip, [r1]
 8020a5a:	fa1f fe82 	uxth.w	lr, r2
 8020a5e:	fa1f f38c 	uxth.w	r3, ip
 8020a62:	eba3 030e 	sub.w	r3, r3, lr
 8020a66:	4403      	add	r3, r0
 8020a68:	0c12      	lsrs	r2, r2, #16
 8020a6a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8020a6e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8020a72:	b29b      	uxth	r3, r3
 8020a74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020a78:	45c1      	cmp	r9, r8
 8020a7a:	f841 3b04 	str.w	r3, [r1], #4
 8020a7e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8020a82:	d2e6      	bcs.n	8020a52 <quorem+0xa4>
 8020a84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020a88:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020a8c:	b922      	cbnz	r2, 8020a98 <quorem+0xea>
 8020a8e:	3b04      	subs	r3, #4
 8020a90:	429d      	cmp	r5, r3
 8020a92:	461a      	mov	r2, r3
 8020a94:	d30b      	bcc.n	8020aae <quorem+0x100>
 8020a96:	613c      	str	r4, [r7, #16]
 8020a98:	3601      	adds	r6, #1
 8020a9a:	4630      	mov	r0, r6
 8020a9c:	b003      	add	sp, #12
 8020a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020aa2:	6812      	ldr	r2, [r2, #0]
 8020aa4:	3b04      	subs	r3, #4
 8020aa6:	2a00      	cmp	r2, #0
 8020aa8:	d1cb      	bne.n	8020a42 <quorem+0x94>
 8020aaa:	3c01      	subs	r4, #1
 8020aac:	e7c6      	b.n	8020a3c <quorem+0x8e>
 8020aae:	6812      	ldr	r2, [r2, #0]
 8020ab0:	3b04      	subs	r3, #4
 8020ab2:	2a00      	cmp	r2, #0
 8020ab4:	d1ef      	bne.n	8020a96 <quorem+0xe8>
 8020ab6:	3c01      	subs	r4, #1
 8020ab8:	e7ea      	b.n	8020a90 <quorem+0xe2>
 8020aba:	2000      	movs	r0, #0
 8020abc:	e7ee      	b.n	8020a9c <quorem+0xee>
	...

08020ac0 <_dtoa_r>:
 8020ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ac4:	69c7      	ldr	r7, [r0, #28]
 8020ac6:	b097      	sub	sp, #92	@ 0x5c
 8020ac8:	ed8d 0b04 	vstr	d0, [sp, #16]
 8020acc:	ec55 4b10 	vmov	r4, r5, d0
 8020ad0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8020ad2:	9107      	str	r1, [sp, #28]
 8020ad4:	4681      	mov	r9, r0
 8020ad6:	920c      	str	r2, [sp, #48]	@ 0x30
 8020ad8:	9311      	str	r3, [sp, #68]	@ 0x44
 8020ada:	b97f      	cbnz	r7, 8020afc <_dtoa_r+0x3c>
 8020adc:	2010      	movs	r0, #16
 8020ade:	f000 fe09 	bl	80216f4 <malloc>
 8020ae2:	4602      	mov	r2, r0
 8020ae4:	f8c9 001c 	str.w	r0, [r9, #28]
 8020ae8:	b920      	cbnz	r0, 8020af4 <_dtoa_r+0x34>
 8020aea:	4ba9      	ldr	r3, [pc, #676]	@ (8020d90 <_dtoa_r+0x2d0>)
 8020aec:	21ef      	movs	r1, #239	@ 0xef
 8020aee:	48a9      	ldr	r0, [pc, #676]	@ (8020d94 <_dtoa_r+0x2d4>)
 8020af0:	f001 fc3a 	bl	8022368 <__assert_func>
 8020af4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8020af8:	6007      	str	r7, [r0, #0]
 8020afa:	60c7      	str	r7, [r0, #12]
 8020afc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8020b00:	6819      	ldr	r1, [r3, #0]
 8020b02:	b159      	cbz	r1, 8020b1c <_dtoa_r+0x5c>
 8020b04:	685a      	ldr	r2, [r3, #4]
 8020b06:	604a      	str	r2, [r1, #4]
 8020b08:	2301      	movs	r3, #1
 8020b0a:	4093      	lsls	r3, r2
 8020b0c:	608b      	str	r3, [r1, #8]
 8020b0e:	4648      	mov	r0, r9
 8020b10:	f000 fee6 	bl	80218e0 <_Bfree>
 8020b14:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8020b18:	2200      	movs	r2, #0
 8020b1a:	601a      	str	r2, [r3, #0]
 8020b1c:	1e2b      	subs	r3, r5, #0
 8020b1e:	bfb9      	ittee	lt
 8020b20:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8020b24:	9305      	strlt	r3, [sp, #20]
 8020b26:	2300      	movge	r3, #0
 8020b28:	6033      	strge	r3, [r6, #0]
 8020b2a:	9f05      	ldr	r7, [sp, #20]
 8020b2c:	4b9a      	ldr	r3, [pc, #616]	@ (8020d98 <_dtoa_r+0x2d8>)
 8020b2e:	bfbc      	itt	lt
 8020b30:	2201      	movlt	r2, #1
 8020b32:	6032      	strlt	r2, [r6, #0]
 8020b34:	43bb      	bics	r3, r7
 8020b36:	d112      	bne.n	8020b5e <_dtoa_r+0x9e>
 8020b38:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020b3a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8020b3e:	6013      	str	r3, [r2, #0]
 8020b40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8020b44:	4323      	orrs	r3, r4
 8020b46:	f000 855a 	beq.w	80215fe <_dtoa_r+0xb3e>
 8020b4a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8020b4c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8020dac <_dtoa_r+0x2ec>
 8020b50:	2b00      	cmp	r3, #0
 8020b52:	f000 855c 	beq.w	802160e <_dtoa_r+0xb4e>
 8020b56:	f10a 0303 	add.w	r3, sl, #3
 8020b5a:	f000 bd56 	b.w	802160a <_dtoa_r+0xb4a>
 8020b5e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8020b62:	2200      	movs	r2, #0
 8020b64:	ec51 0b17 	vmov	r0, r1, d7
 8020b68:	2300      	movs	r3, #0
 8020b6a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8020b6e:	f7df ffab 	bl	8000ac8 <__aeabi_dcmpeq>
 8020b72:	4680      	mov	r8, r0
 8020b74:	b158      	cbz	r0, 8020b8e <_dtoa_r+0xce>
 8020b76:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020b78:	2301      	movs	r3, #1
 8020b7a:	6013      	str	r3, [r2, #0]
 8020b7c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8020b7e:	b113      	cbz	r3, 8020b86 <_dtoa_r+0xc6>
 8020b80:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8020b82:	4b86      	ldr	r3, [pc, #536]	@ (8020d9c <_dtoa_r+0x2dc>)
 8020b84:	6013      	str	r3, [r2, #0]
 8020b86:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8020db0 <_dtoa_r+0x2f0>
 8020b8a:	f000 bd40 	b.w	802160e <_dtoa_r+0xb4e>
 8020b8e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8020b92:	aa14      	add	r2, sp, #80	@ 0x50
 8020b94:	a915      	add	r1, sp, #84	@ 0x54
 8020b96:	4648      	mov	r0, r9
 8020b98:	f001 f984 	bl	8021ea4 <__d2b>
 8020b9c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8020ba0:	9002      	str	r0, [sp, #8]
 8020ba2:	2e00      	cmp	r6, #0
 8020ba4:	d078      	beq.n	8020c98 <_dtoa_r+0x1d8>
 8020ba6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020ba8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8020bac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8020bb0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8020bb4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8020bb8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8020bbc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8020bc0:	4619      	mov	r1, r3
 8020bc2:	2200      	movs	r2, #0
 8020bc4:	4b76      	ldr	r3, [pc, #472]	@ (8020da0 <_dtoa_r+0x2e0>)
 8020bc6:	f7df fb5f 	bl	8000288 <__aeabi_dsub>
 8020bca:	a36b      	add	r3, pc, #428	@ (adr r3, 8020d78 <_dtoa_r+0x2b8>)
 8020bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020bd0:	f7df fd12 	bl	80005f8 <__aeabi_dmul>
 8020bd4:	a36a      	add	r3, pc, #424	@ (adr r3, 8020d80 <_dtoa_r+0x2c0>)
 8020bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020bda:	f7df fb57 	bl	800028c <__adddf3>
 8020bde:	4604      	mov	r4, r0
 8020be0:	4630      	mov	r0, r6
 8020be2:	460d      	mov	r5, r1
 8020be4:	f7df fc9e 	bl	8000524 <__aeabi_i2d>
 8020be8:	a367      	add	r3, pc, #412	@ (adr r3, 8020d88 <_dtoa_r+0x2c8>)
 8020bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020bee:	f7df fd03 	bl	80005f8 <__aeabi_dmul>
 8020bf2:	4602      	mov	r2, r0
 8020bf4:	460b      	mov	r3, r1
 8020bf6:	4620      	mov	r0, r4
 8020bf8:	4629      	mov	r1, r5
 8020bfa:	f7df fb47 	bl	800028c <__adddf3>
 8020bfe:	4604      	mov	r4, r0
 8020c00:	460d      	mov	r5, r1
 8020c02:	f7df ffa9 	bl	8000b58 <__aeabi_d2iz>
 8020c06:	2200      	movs	r2, #0
 8020c08:	4607      	mov	r7, r0
 8020c0a:	2300      	movs	r3, #0
 8020c0c:	4620      	mov	r0, r4
 8020c0e:	4629      	mov	r1, r5
 8020c10:	f7df ff64 	bl	8000adc <__aeabi_dcmplt>
 8020c14:	b140      	cbz	r0, 8020c28 <_dtoa_r+0x168>
 8020c16:	4638      	mov	r0, r7
 8020c18:	f7df fc84 	bl	8000524 <__aeabi_i2d>
 8020c1c:	4622      	mov	r2, r4
 8020c1e:	462b      	mov	r3, r5
 8020c20:	f7df ff52 	bl	8000ac8 <__aeabi_dcmpeq>
 8020c24:	b900      	cbnz	r0, 8020c28 <_dtoa_r+0x168>
 8020c26:	3f01      	subs	r7, #1
 8020c28:	2f16      	cmp	r7, #22
 8020c2a:	d852      	bhi.n	8020cd2 <_dtoa_r+0x212>
 8020c2c:	4b5d      	ldr	r3, [pc, #372]	@ (8020da4 <_dtoa_r+0x2e4>)
 8020c2e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8020c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8020c3a:	f7df ff4f 	bl	8000adc <__aeabi_dcmplt>
 8020c3e:	2800      	cmp	r0, #0
 8020c40:	d049      	beq.n	8020cd6 <_dtoa_r+0x216>
 8020c42:	3f01      	subs	r7, #1
 8020c44:	2300      	movs	r3, #0
 8020c46:	9310      	str	r3, [sp, #64]	@ 0x40
 8020c48:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020c4a:	1b9b      	subs	r3, r3, r6
 8020c4c:	1e5a      	subs	r2, r3, #1
 8020c4e:	bf45      	ittet	mi
 8020c50:	f1c3 0301 	rsbmi	r3, r3, #1
 8020c54:	9300      	strmi	r3, [sp, #0]
 8020c56:	2300      	movpl	r3, #0
 8020c58:	2300      	movmi	r3, #0
 8020c5a:	9206      	str	r2, [sp, #24]
 8020c5c:	bf54      	ite	pl
 8020c5e:	9300      	strpl	r3, [sp, #0]
 8020c60:	9306      	strmi	r3, [sp, #24]
 8020c62:	2f00      	cmp	r7, #0
 8020c64:	db39      	blt.n	8020cda <_dtoa_r+0x21a>
 8020c66:	9b06      	ldr	r3, [sp, #24]
 8020c68:	970d      	str	r7, [sp, #52]	@ 0x34
 8020c6a:	443b      	add	r3, r7
 8020c6c:	9306      	str	r3, [sp, #24]
 8020c6e:	2300      	movs	r3, #0
 8020c70:	9308      	str	r3, [sp, #32]
 8020c72:	9b07      	ldr	r3, [sp, #28]
 8020c74:	2b09      	cmp	r3, #9
 8020c76:	d863      	bhi.n	8020d40 <_dtoa_r+0x280>
 8020c78:	2b05      	cmp	r3, #5
 8020c7a:	bfc4      	itt	gt
 8020c7c:	3b04      	subgt	r3, #4
 8020c7e:	9307      	strgt	r3, [sp, #28]
 8020c80:	9b07      	ldr	r3, [sp, #28]
 8020c82:	f1a3 0302 	sub.w	r3, r3, #2
 8020c86:	bfcc      	ite	gt
 8020c88:	2400      	movgt	r4, #0
 8020c8a:	2401      	movle	r4, #1
 8020c8c:	2b03      	cmp	r3, #3
 8020c8e:	d863      	bhi.n	8020d58 <_dtoa_r+0x298>
 8020c90:	e8df f003 	tbb	[pc, r3]
 8020c94:	2b375452 	.word	0x2b375452
 8020c98:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8020c9c:	441e      	add	r6, r3
 8020c9e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8020ca2:	2b20      	cmp	r3, #32
 8020ca4:	bfc1      	itttt	gt
 8020ca6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8020caa:	409f      	lslgt	r7, r3
 8020cac:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8020cb0:	fa24 f303 	lsrgt.w	r3, r4, r3
 8020cb4:	bfd6      	itet	le
 8020cb6:	f1c3 0320 	rsble	r3, r3, #32
 8020cba:	ea47 0003 	orrgt.w	r0, r7, r3
 8020cbe:	fa04 f003 	lslle.w	r0, r4, r3
 8020cc2:	f7df fc1f 	bl	8000504 <__aeabi_ui2d>
 8020cc6:	2201      	movs	r2, #1
 8020cc8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8020ccc:	3e01      	subs	r6, #1
 8020cce:	9212      	str	r2, [sp, #72]	@ 0x48
 8020cd0:	e776      	b.n	8020bc0 <_dtoa_r+0x100>
 8020cd2:	2301      	movs	r3, #1
 8020cd4:	e7b7      	b.n	8020c46 <_dtoa_r+0x186>
 8020cd6:	9010      	str	r0, [sp, #64]	@ 0x40
 8020cd8:	e7b6      	b.n	8020c48 <_dtoa_r+0x188>
 8020cda:	9b00      	ldr	r3, [sp, #0]
 8020cdc:	1bdb      	subs	r3, r3, r7
 8020cde:	9300      	str	r3, [sp, #0]
 8020ce0:	427b      	negs	r3, r7
 8020ce2:	9308      	str	r3, [sp, #32]
 8020ce4:	2300      	movs	r3, #0
 8020ce6:	930d      	str	r3, [sp, #52]	@ 0x34
 8020ce8:	e7c3      	b.n	8020c72 <_dtoa_r+0x1b2>
 8020cea:	2301      	movs	r3, #1
 8020cec:	9309      	str	r3, [sp, #36]	@ 0x24
 8020cee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020cf0:	eb07 0b03 	add.w	fp, r7, r3
 8020cf4:	f10b 0301 	add.w	r3, fp, #1
 8020cf8:	2b01      	cmp	r3, #1
 8020cfa:	9303      	str	r3, [sp, #12]
 8020cfc:	bfb8      	it	lt
 8020cfe:	2301      	movlt	r3, #1
 8020d00:	e006      	b.n	8020d10 <_dtoa_r+0x250>
 8020d02:	2301      	movs	r3, #1
 8020d04:	9309      	str	r3, [sp, #36]	@ 0x24
 8020d06:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020d08:	2b00      	cmp	r3, #0
 8020d0a:	dd28      	ble.n	8020d5e <_dtoa_r+0x29e>
 8020d0c:	469b      	mov	fp, r3
 8020d0e:	9303      	str	r3, [sp, #12]
 8020d10:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8020d14:	2100      	movs	r1, #0
 8020d16:	2204      	movs	r2, #4
 8020d18:	f102 0514 	add.w	r5, r2, #20
 8020d1c:	429d      	cmp	r5, r3
 8020d1e:	d926      	bls.n	8020d6e <_dtoa_r+0x2ae>
 8020d20:	6041      	str	r1, [r0, #4]
 8020d22:	4648      	mov	r0, r9
 8020d24:	f000 fd9c 	bl	8021860 <_Balloc>
 8020d28:	4682      	mov	sl, r0
 8020d2a:	2800      	cmp	r0, #0
 8020d2c:	d142      	bne.n	8020db4 <_dtoa_r+0x2f4>
 8020d2e:	4b1e      	ldr	r3, [pc, #120]	@ (8020da8 <_dtoa_r+0x2e8>)
 8020d30:	4602      	mov	r2, r0
 8020d32:	f240 11af 	movw	r1, #431	@ 0x1af
 8020d36:	e6da      	b.n	8020aee <_dtoa_r+0x2e>
 8020d38:	2300      	movs	r3, #0
 8020d3a:	e7e3      	b.n	8020d04 <_dtoa_r+0x244>
 8020d3c:	2300      	movs	r3, #0
 8020d3e:	e7d5      	b.n	8020cec <_dtoa_r+0x22c>
 8020d40:	2401      	movs	r4, #1
 8020d42:	2300      	movs	r3, #0
 8020d44:	9307      	str	r3, [sp, #28]
 8020d46:	9409      	str	r4, [sp, #36]	@ 0x24
 8020d48:	f04f 3bff 	mov.w	fp, #4294967295
 8020d4c:	2200      	movs	r2, #0
 8020d4e:	f8cd b00c 	str.w	fp, [sp, #12]
 8020d52:	2312      	movs	r3, #18
 8020d54:	920c      	str	r2, [sp, #48]	@ 0x30
 8020d56:	e7db      	b.n	8020d10 <_dtoa_r+0x250>
 8020d58:	2301      	movs	r3, #1
 8020d5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8020d5c:	e7f4      	b.n	8020d48 <_dtoa_r+0x288>
 8020d5e:	f04f 0b01 	mov.w	fp, #1
 8020d62:	f8cd b00c 	str.w	fp, [sp, #12]
 8020d66:	465b      	mov	r3, fp
 8020d68:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8020d6c:	e7d0      	b.n	8020d10 <_dtoa_r+0x250>
 8020d6e:	3101      	adds	r1, #1
 8020d70:	0052      	lsls	r2, r2, #1
 8020d72:	e7d1      	b.n	8020d18 <_dtoa_r+0x258>
 8020d74:	f3af 8000 	nop.w
 8020d78:	636f4361 	.word	0x636f4361
 8020d7c:	3fd287a7 	.word	0x3fd287a7
 8020d80:	8b60c8b3 	.word	0x8b60c8b3
 8020d84:	3fc68a28 	.word	0x3fc68a28
 8020d88:	509f79fb 	.word	0x509f79fb
 8020d8c:	3fd34413 	.word	0x3fd34413
 8020d90:	08023b99 	.word	0x08023b99
 8020d94:	08023bb0 	.word	0x08023bb0
 8020d98:	7ff00000 	.word	0x7ff00000
 8020d9c:	08023b69 	.word	0x08023b69
 8020da0:	3ff80000 	.word	0x3ff80000
 8020da4:	08023d00 	.word	0x08023d00
 8020da8:	08023c08 	.word	0x08023c08
 8020dac:	08023b95 	.word	0x08023b95
 8020db0:	08023b68 	.word	0x08023b68
 8020db4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8020db8:	6018      	str	r0, [r3, #0]
 8020dba:	9b03      	ldr	r3, [sp, #12]
 8020dbc:	2b0e      	cmp	r3, #14
 8020dbe:	f200 80a1 	bhi.w	8020f04 <_dtoa_r+0x444>
 8020dc2:	2c00      	cmp	r4, #0
 8020dc4:	f000 809e 	beq.w	8020f04 <_dtoa_r+0x444>
 8020dc8:	2f00      	cmp	r7, #0
 8020dca:	dd33      	ble.n	8020e34 <_dtoa_r+0x374>
 8020dcc:	4b9c      	ldr	r3, [pc, #624]	@ (8021040 <_dtoa_r+0x580>)
 8020dce:	f007 020f 	and.w	r2, r7, #15
 8020dd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020dd6:	ed93 7b00 	vldr	d7, [r3]
 8020dda:	05f8      	lsls	r0, r7, #23
 8020ddc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8020de0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8020de4:	d516      	bpl.n	8020e14 <_dtoa_r+0x354>
 8020de6:	4b97      	ldr	r3, [pc, #604]	@ (8021044 <_dtoa_r+0x584>)
 8020de8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8020dec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8020df0:	f7df fd2c 	bl	800084c <__aeabi_ddiv>
 8020df4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8020df8:	f004 040f 	and.w	r4, r4, #15
 8020dfc:	2603      	movs	r6, #3
 8020dfe:	4d91      	ldr	r5, [pc, #580]	@ (8021044 <_dtoa_r+0x584>)
 8020e00:	b954      	cbnz	r4, 8020e18 <_dtoa_r+0x358>
 8020e02:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8020e06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8020e0a:	f7df fd1f 	bl	800084c <__aeabi_ddiv>
 8020e0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8020e12:	e028      	b.n	8020e66 <_dtoa_r+0x3a6>
 8020e14:	2602      	movs	r6, #2
 8020e16:	e7f2      	b.n	8020dfe <_dtoa_r+0x33e>
 8020e18:	07e1      	lsls	r1, r4, #31
 8020e1a:	d508      	bpl.n	8020e2e <_dtoa_r+0x36e>
 8020e1c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8020e20:	e9d5 2300 	ldrd	r2, r3, [r5]
 8020e24:	f7df fbe8 	bl	80005f8 <__aeabi_dmul>
 8020e28:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8020e2c:	3601      	adds	r6, #1
 8020e2e:	1064      	asrs	r4, r4, #1
 8020e30:	3508      	adds	r5, #8
 8020e32:	e7e5      	b.n	8020e00 <_dtoa_r+0x340>
 8020e34:	f000 80af 	beq.w	8020f96 <_dtoa_r+0x4d6>
 8020e38:	427c      	negs	r4, r7
 8020e3a:	4b81      	ldr	r3, [pc, #516]	@ (8021040 <_dtoa_r+0x580>)
 8020e3c:	4d81      	ldr	r5, [pc, #516]	@ (8021044 <_dtoa_r+0x584>)
 8020e3e:	f004 020f 	and.w	r2, r4, #15
 8020e42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e4a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8020e4e:	f7df fbd3 	bl	80005f8 <__aeabi_dmul>
 8020e52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8020e56:	1124      	asrs	r4, r4, #4
 8020e58:	2300      	movs	r3, #0
 8020e5a:	2602      	movs	r6, #2
 8020e5c:	2c00      	cmp	r4, #0
 8020e5e:	f040 808f 	bne.w	8020f80 <_dtoa_r+0x4c0>
 8020e62:	2b00      	cmp	r3, #0
 8020e64:	d1d3      	bne.n	8020e0e <_dtoa_r+0x34e>
 8020e66:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020e68:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8020e6c:	2b00      	cmp	r3, #0
 8020e6e:	f000 8094 	beq.w	8020f9a <_dtoa_r+0x4da>
 8020e72:	4b75      	ldr	r3, [pc, #468]	@ (8021048 <_dtoa_r+0x588>)
 8020e74:	2200      	movs	r2, #0
 8020e76:	4620      	mov	r0, r4
 8020e78:	4629      	mov	r1, r5
 8020e7a:	f7df fe2f 	bl	8000adc <__aeabi_dcmplt>
 8020e7e:	2800      	cmp	r0, #0
 8020e80:	f000 808b 	beq.w	8020f9a <_dtoa_r+0x4da>
 8020e84:	9b03      	ldr	r3, [sp, #12]
 8020e86:	2b00      	cmp	r3, #0
 8020e88:	f000 8087 	beq.w	8020f9a <_dtoa_r+0x4da>
 8020e8c:	f1bb 0f00 	cmp.w	fp, #0
 8020e90:	dd34      	ble.n	8020efc <_dtoa_r+0x43c>
 8020e92:	4620      	mov	r0, r4
 8020e94:	4b6d      	ldr	r3, [pc, #436]	@ (802104c <_dtoa_r+0x58c>)
 8020e96:	2200      	movs	r2, #0
 8020e98:	4629      	mov	r1, r5
 8020e9a:	f7df fbad 	bl	80005f8 <__aeabi_dmul>
 8020e9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8020ea2:	f107 38ff 	add.w	r8, r7, #4294967295
 8020ea6:	3601      	adds	r6, #1
 8020ea8:	465c      	mov	r4, fp
 8020eaa:	4630      	mov	r0, r6
 8020eac:	f7df fb3a 	bl	8000524 <__aeabi_i2d>
 8020eb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8020eb4:	f7df fba0 	bl	80005f8 <__aeabi_dmul>
 8020eb8:	4b65      	ldr	r3, [pc, #404]	@ (8021050 <_dtoa_r+0x590>)
 8020eba:	2200      	movs	r2, #0
 8020ebc:	f7df f9e6 	bl	800028c <__adddf3>
 8020ec0:	4605      	mov	r5, r0
 8020ec2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8020ec6:	2c00      	cmp	r4, #0
 8020ec8:	d16a      	bne.n	8020fa0 <_dtoa_r+0x4e0>
 8020eca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8020ece:	4b61      	ldr	r3, [pc, #388]	@ (8021054 <_dtoa_r+0x594>)
 8020ed0:	2200      	movs	r2, #0
 8020ed2:	f7df f9d9 	bl	8000288 <__aeabi_dsub>
 8020ed6:	4602      	mov	r2, r0
 8020ed8:	460b      	mov	r3, r1
 8020eda:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8020ede:	462a      	mov	r2, r5
 8020ee0:	4633      	mov	r3, r6
 8020ee2:	f7df fe19 	bl	8000b18 <__aeabi_dcmpgt>
 8020ee6:	2800      	cmp	r0, #0
 8020ee8:	f040 8298 	bne.w	802141c <_dtoa_r+0x95c>
 8020eec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8020ef0:	462a      	mov	r2, r5
 8020ef2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8020ef6:	f7df fdf1 	bl	8000adc <__aeabi_dcmplt>
 8020efa:	bb38      	cbnz	r0, 8020f4c <_dtoa_r+0x48c>
 8020efc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8020f00:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8020f04:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020f06:	2b00      	cmp	r3, #0
 8020f08:	f2c0 8157 	blt.w	80211ba <_dtoa_r+0x6fa>
 8020f0c:	2f0e      	cmp	r7, #14
 8020f0e:	f300 8154 	bgt.w	80211ba <_dtoa_r+0x6fa>
 8020f12:	4b4b      	ldr	r3, [pc, #300]	@ (8021040 <_dtoa_r+0x580>)
 8020f14:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8020f18:	ed93 7b00 	vldr	d7, [r3]
 8020f1c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020f1e:	2b00      	cmp	r3, #0
 8020f20:	ed8d 7b00 	vstr	d7, [sp]
 8020f24:	f280 80e5 	bge.w	80210f2 <_dtoa_r+0x632>
 8020f28:	9b03      	ldr	r3, [sp, #12]
 8020f2a:	2b00      	cmp	r3, #0
 8020f2c:	f300 80e1 	bgt.w	80210f2 <_dtoa_r+0x632>
 8020f30:	d10c      	bne.n	8020f4c <_dtoa_r+0x48c>
 8020f32:	4b48      	ldr	r3, [pc, #288]	@ (8021054 <_dtoa_r+0x594>)
 8020f34:	2200      	movs	r2, #0
 8020f36:	ec51 0b17 	vmov	r0, r1, d7
 8020f3a:	f7df fb5d 	bl	80005f8 <__aeabi_dmul>
 8020f3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8020f42:	f7df fddf 	bl	8000b04 <__aeabi_dcmpge>
 8020f46:	2800      	cmp	r0, #0
 8020f48:	f000 8266 	beq.w	8021418 <_dtoa_r+0x958>
 8020f4c:	2400      	movs	r4, #0
 8020f4e:	4625      	mov	r5, r4
 8020f50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020f52:	4656      	mov	r6, sl
 8020f54:	ea6f 0803 	mvn.w	r8, r3
 8020f58:	2700      	movs	r7, #0
 8020f5a:	4621      	mov	r1, r4
 8020f5c:	4648      	mov	r0, r9
 8020f5e:	f000 fcbf 	bl	80218e0 <_Bfree>
 8020f62:	2d00      	cmp	r5, #0
 8020f64:	f000 80bd 	beq.w	80210e2 <_dtoa_r+0x622>
 8020f68:	b12f      	cbz	r7, 8020f76 <_dtoa_r+0x4b6>
 8020f6a:	42af      	cmp	r7, r5
 8020f6c:	d003      	beq.n	8020f76 <_dtoa_r+0x4b6>
 8020f6e:	4639      	mov	r1, r7
 8020f70:	4648      	mov	r0, r9
 8020f72:	f000 fcb5 	bl	80218e0 <_Bfree>
 8020f76:	4629      	mov	r1, r5
 8020f78:	4648      	mov	r0, r9
 8020f7a:	f000 fcb1 	bl	80218e0 <_Bfree>
 8020f7e:	e0b0      	b.n	80210e2 <_dtoa_r+0x622>
 8020f80:	07e2      	lsls	r2, r4, #31
 8020f82:	d505      	bpl.n	8020f90 <_dtoa_r+0x4d0>
 8020f84:	e9d5 2300 	ldrd	r2, r3, [r5]
 8020f88:	f7df fb36 	bl	80005f8 <__aeabi_dmul>
 8020f8c:	3601      	adds	r6, #1
 8020f8e:	2301      	movs	r3, #1
 8020f90:	1064      	asrs	r4, r4, #1
 8020f92:	3508      	adds	r5, #8
 8020f94:	e762      	b.n	8020e5c <_dtoa_r+0x39c>
 8020f96:	2602      	movs	r6, #2
 8020f98:	e765      	b.n	8020e66 <_dtoa_r+0x3a6>
 8020f9a:	9c03      	ldr	r4, [sp, #12]
 8020f9c:	46b8      	mov	r8, r7
 8020f9e:	e784      	b.n	8020eaa <_dtoa_r+0x3ea>
 8020fa0:	4b27      	ldr	r3, [pc, #156]	@ (8021040 <_dtoa_r+0x580>)
 8020fa2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8020fa4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8020fa8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8020fac:	4454      	add	r4, sl
 8020fae:	2900      	cmp	r1, #0
 8020fb0:	d054      	beq.n	802105c <_dtoa_r+0x59c>
 8020fb2:	4929      	ldr	r1, [pc, #164]	@ (8021058 <_dtoa_r+0x598>)
 8020fb4:	2000      	movs	r0, #0
 8020fb6:	f7df fc49 	bl	800084c <__aeabi_ddiv>
 8020fba:	4633      	mov	r3, r6
 8020fbc:	462a      	mov	r2, r5
 8020fbe:	f7df f963 	bl	8000288 <__aeabi_dsub>
 8020fc2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8020fc6:	4656      	mov	r6, sl
 8020fc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8020fcc:	f7df fdc4 	bl	8000b58 <__aeabi_d2iz>
 8020fd0:	4605      	mov	r5, r0
 8020fd2:	f7df faa7 	bl	8000524 <__aeabi_i2d>
 8020fd6:	4602      	mov	r2, r0
 8020fd8:	460b      	mov	r3, r1
 8020fda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8020fde:	f7df f953 	bl	8000288 <__aeabi_dsub>
 8020fe2:	3530      	adds	r5, #48	@ 0x30
 8020fe4:	4602      	mov	r2, r0
 8020fe6:	460b      	mov	r3, r1
 8020fe8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8020fec:	f806 5b01 	strb.w	r5, [r6], #1
 8020ff0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8020ff4:	f7df fd72 	bl	8000adc <__aeabi_dcmplt>
 8020ff8:	2800      	cmp	r0, #0
 8020ffa:	d172      	bne.n	80210e2 <_dtoa_r+0x622>
 8020ffc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8021000:	4911      	ldr	r1, [pc, #68]	@ (8021048 <_dtoa_r+0x588>)
 8021002:	2000      	movs	r0, #0
 8021004:	f7df f940 	bl	8000288 <__aeabi_dsub>
 8021008:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 802100c:	f7df fd66 	bl	8000adc <__aeabi_dcmplt>
 8021010:	2800      	cmp	r0, #0
 8021012:	f040 80b4 	bne.w	802117e <_dtoa_r+0x6be>
 8021016:	42a6      	cmp	r6, r4
 8021018:	f43f af70 	beq.w	8020efc <_dtoa_r+0x43c>
 802101c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8021020:	4b0a      	ldr	r3, [pc, #40]	@ (802104c <_dtoa_r+0x58c>)
 8021022:	2200      	movs	r2, #0
 8021024:	f7df fae8 	bl	80005f8 <__aeabi_dmul>
 8021028:	4b08      	ldr	r3, [pc, #32]	@ (802104c <_dtoa_r+0x58c>)
 802102a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 802102e:	2200      	movs	r2, #0
 8021030:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8021034:	f7df fae0 	bl	80005f8 <__aeabi_dmul>
 8021038:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802103c:	e7c4      	b.n	8020fc8 <_dtoa_r+0x508>
 802103e:	bf00      	nop
 8021040:	08023d00 	.word	0x08023d00
 8021044:	08023cd8 	.word	0x08023cd8
 8021048:	3ff00000 	.word	0x3ff00000
 802104c:	40240000 	.word	0x40240000
 8021050:	401c0000 	.word	0x401c0000
 8021054:	40140000 	.word	0x40140000
 8021058:	3fe00000 	.word	0x3fe00000
 802105c:	4631      	mov	r1, r6
 802105e:	4628      	mov	r0, r5
 8021060:	f7df faca 	bl	80005f8 <__aeabi_dmul>
 8021064:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8021068:	9413      	str	r4, [sp, #76]	@ 0x4c
 802106a:	4656      	mov	r6, sl
 802106c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8021070:	f7df fd72 	bl	8000b58 <__aeabi_d2iz>
 8021074:	4605      	mov	r5, r0
 8021076:	f7df fa55 	bl	8000524 <__aeabi_i2d>
 802107a:	4602      	mov	r2, r0
 802107c:	460b      	mov	r3, r1
 802107e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8021082:	f7df f901 	bl	8000288 <__aeabi_dsub>
 8021086:	3530      	adds	r5, #48	@ 0x30
 8021088:	f806 5b01 	strb.w	r5, [r6], #1
 802108c:	4602      	mov	r2, r0
 802108e:	460b      	mov	r3, r1
 8021090:	42a6      	cmp	r6, r4
 8021092:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8021096:	f04f 0200 	mov.w	r2, #0
 802109a:	d124      	bne.n	80210e6 <_dtoa_r+0x626>
 802109c:	4baf      	ldr	r3, [pc, #700]	@ (802135c <_dtoa_r+0x89c>)
 802109e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80210a2:	f7df f8f3 	bl	800028c <__adddf3>
 80210a6:	4602      	mov	r2, r0
 80210a8:	460b      	mov	r3, r1
 80210aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80210ae:	f7df fd33 	bl	8000b18 <__aeabi_dcmpgt>
 80210b2:	2800      	cmp	r0, #0
 80210b4:	d163      	bne.n	802117e <_dtoa_r+0x6be>
 80210b6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80210ba:	49a8      	ldr	r1, [pc, #672]	@ (802135c <_dtoa_r+0x89c>)
 80210bc:	2000      	movs	r0, #0
 80210be:	f7df f8e3 	bl	8000288 <__aeabi_dsub>
 80210c2:	4602      	mov	r2, r0
 80210c4:	460b      	mov	r3, r1
 80210c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80210ca:	f7df fd07 	bl	8000adc <__aeabi_dcmplt>
 80210ce:	2800      	cmp	r0, #0
 80210d0:	f43f af14 	beq.w	8020efc <_dtoa_r+0x43c>
 80210d4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80210d6:	1e73      	subs	r3, r6, #1
 80210d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80210da:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80210de:	2b30      	cmp	r3, #48	@ 0x30
 80210e0:	d0f8      	beq.n	80210d4 <_dtoa_r+0x614>
 80210e2:	4647      	mov	r7, r8
 80210e4:	e03b      	b.n	802115e <_dtoa_r+0x69e>
 80210e6:	4b9e      	ldr	r3, [pc, #632]	@ (8021360 <_dtoa_r+0x8a0>)
 80210e8:	f7df fa86 	bl	80005f8 <__aeabi_dmul>
 80210ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80210f0:	e7bc      	b.n	802106c <_dtoa_r+0x5ac>
 80210f2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80210f6:	4656      	mov	r6, sl
 80210f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80210fc:	4620      	mov	r0, r4
 80210fe:	4629      	mov	r1, r5
 8021100:	f7df fba4 	bl	800084c <__aeabi_ddiv>
 8021104:	f7df fd28 	bl	8000b58 <__aeabi_d2iz>
 8021108:	4680      	mov	r8, r0
 802110a:	f7df fa0b 	bl	8000524 <__aeabi_i2d>
 802110e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021112:	f7df fa71 	bl	80005f8 <__aeabi_dmul>
 8021116:	4602      	mov	r2, r0
 8021118:	460b      	mov	r3, r1
 802111a:	4620      	mov	r0, r4
 802111c:	4629      	mov	r1, r5
 802111e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8021122:	f7df f8b1 	bl	8000288 <__aeabi_dsub>
 8021126:	f806 4b01 	strb.w	r4, [r6], #1
 802112a:	9d03      	ldr	r5, [sp, #12]
 802112c:	eba6 040a 	sub.w	r4, r6, sl
 8021130:	42a5      	cmp	r5, r4
 8021132:	4602      	mov	r2, r0
 8021134:	460b      	mov	r3, r1
 8021136:	d133      	bne.n	80211a0 <_dtoa_r+0x6e0>
 8021138:	f7df f8a8 	bl	800028c <__adddf3>
 802113c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021140:	4604      	mov	r4, r0
 8021142:	460d      	mov	r5, r1
 8021144:	f7df fce8 	bl	8000b18 <__aeabi_dcmpgt>
 8021148:	b9c0      	cbnz	r0, 802117c <_dtoa_r+0x6bc>
 802114a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802114e:	4620      	mov	r0, r4
 8021150:	4629      	mov	r1, r5
 8021152:	f7df fcb9 	bl	8000ac8 <__aeabi_dcmpeq>
 8021156:	b110      	cbz	r0, 802115e <_dtoa_r+0x69e>
 8021158:	f018 0f01 	tst.w	r8, #1
 802115c:	d10e      	bne.n	802117c <_dtoa_r+0x6bc>
 802115e:	9902      	ldr	r1, [sp, #8]
 8021160:	4648      	mov	r0, r9
 8021162:	f000 fbbd 	bl	80218e0 <_Bfree>
 8021166:	2300      	movs	r3, #0
 8021168:	7033      	strb	r3, [r6, #0]
 802116a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802116c:	3701      	adds	r7, #1
 802116e:	601f      	str	r7, [r3, #0]
 8021170:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8021172:	2b00      	cmp	r3, #0
 8021174:	f000 824b 	beq.w	802160e <_dtoa_r+0xb4e>
 8021178:	601e      	str	r6, [r3, #0]
 802117a:	e248      	b.n	802160e <_dtoa_r+0xb4e>
 802117c:	46b8      	mov	r8, r7
 802117e:	4633      	mov	r3, r6
 8021180:	461e      	mov	r6, r3
 8021182:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8021186:	2a39      	cmp	r2, #57	@ 0x39
 8021188:	d106      	bne.n	8021198 <_dtoa_r+0x6d8>
 802118a:	459a      	cmp	sl, r3
 802118c:	d1f8      	bne.n	8021180 <_dtoa_r+0x6c0>
 802118e:	2230      	movs	r2, #48	@ 0x30
 8021190:	f108 0801 	add.w	r8, r8, #1
 8021194:	f88a 2000 	strb.w	r2, [sl]
 8021198:	781a      	ldrb	r2, [r3, #0]
 802119a:	3201      	adds	r2, #1
 802119c:	701a      	strb	r2, [r3, #0]
 802119e:	e7a0      	b.n	80210e2 <_dtoa_r+0x622>
 80211a0:	4b6f      	ldr	r3, [pc, #444]	@ (8021360 <_dtoa_r+0x8a0>)
 80211a2:	2200      	movs	r2, #0
 80211a4:	f7df fa28 	bl	80005f8 <__aeabi_dmul>
 80211a8:	2200      	movs	r2, #0
 80211aa:	2300      	movs	r3, #0
 80211ac:	4604      	mov	r4, r0
 80211ae:	460d      	mov	r5, r1
 80211b0:	f7df fc8a 	bl	8000ac8 <__aeabi_dcmpeq>
 80211b4:	2800      	cmp	r0, #0
 80211b6:	d09f      	beq.n	80210f8 <_dtoa_r+0x638>
 80211b8:	e7d1      	b.n	802115e <_dtoa_r+0x69e>
 80211ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80211bc:	2a00      	cmp	r2, #0
 80211be:	f000 80ea 	beq.w	8021396 <_dtoa_r+0x8d6>
 80211c2:	9a07      	ldr	r2, [sp, #28]
 80211c4:	2a01      	cmp	r2, #1
 80211c6:	f300 80cd 	bgt.w	8021364 <_dtoa_r+0x8a4>
 80211ca:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80211cc:	2a00      	cmp	r2, #0
 80211ce:	f000 80c1 	beq.w	8021354 <_dtoa_r+0x894>
 80211d2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80211d6:	9c08      	ldr	r4, [sp, #32]
 80211d8:	9e00      	ldr	r6, [sp, #0]
 80211da:	9a00      	ldr	r2, [sp, #0]
 80211dc:	441a      	add	r2, r3
 80211de:	9200      	str	r2, [sp, #0]
 80211e0:	9a06      	ldr	r2, [sp, #24]
 80211e2:	2101      	movs	r1, #1
 80211e4:	441a      	add	r2, r3
 80211e6:	4648      	mov	r0, r9
 80211e8:	9206      	str	r2, [sp, #24]
 80211ea:	f000 fc2d 	bl	8021a48 <__i2b>
 80211ee:	4605      	mov	r5, r0
 80211f0:	b166      	cbz	r6, 802120c <_dtoa_r+0x74c>
 80211f2:	9b06      	ldr	r3, [sp, #24]
 80211f4:	2b00      	cmp	r3, #0
 80211f6:	dd09      	ble.n	802120c <_dtoa_r+0x74c>
 80211f8:	42b3      	cmp	r3, r6
 80211fa:	9a00      	ldr	r2, [sp, #0]
 80211fc:	bfa8      	it	ge
 80211fe:	4633      	movge	r3, r6
 8021200:	1ad2      	subs	r2, r2, r3
 8021202:	9200      	str	r2, [sp, #0]
 8021204:	9a06      	ldr	r2, [sp, #24]
 8021206:	1af6      	subs	r6, r6, r3
 8021208:	1ad3      	subs	r3, r2, r3
 802120a:	9306      	str	r3, [sp, #24]
 802120c:	9b08      	ldr	r3, [sp, #32]
 802120e:	b30b      	cbz	r3, 8021254 <_dtoa_r+0x794>
 8021210:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021212:	2b00      	cmp	r3, #0
 8021214:	f000 80c6 	beq.w	80213a4 <_dtoa_r+0x8e4>
 8021218:	2c00      	cmp	r4, #0
 802121a:	f000 80c0 	beq.w	802139e <_dtoa_r+0x8de>
 802121e:	4629      	mov	r1, r5
 8021220:	4622      	mov	r2, r4
 8021222:	4648      	mov	r0, r9
 8021224:	f000 fcc8 	bl	8021bb8 <__pow5mult>
 8021228:	9a02      	ldr	r2, [sp, #8]
 802122a:	4601      	mov	r1, r0
 802122c:	4605      	mov	r5, r0
 802122e:	4648      	mov	r0, r9
 8021230:	f000 fc20 	bl	8021a74 <__multiply>
 8021234:	9902      	ldr	r1, [sp, #8]
 8021236:	4680      	mov	r8, r0
 8021238:	4648      	mov	r0, r9
 802123a:	f000 fb51 	bl	80218e0 <_Bfree>
 802123e:	9b08      	ldr	r3, [sp, #32]
 8021240:	1b1b      	subs	r3, r3, r4
 8021242:	9308      	str	r3, [sp, #32]
 8021244:	f000 80b1 	beq.w	80213aa <_dtoa_r+0x8ea>
 8021248:	9a08      	ldr	r2, [sp, #32]
 802124a:	4641      	mov	r1, r8
 802124c:	4648      	mov	r0, r9
 802124e:	f000 fcb3 	bl	8021bb8 <__pow5mult>
 8021252:	9002      	str	r0, [sp, #8]
 8021254:	2101      	movs	r1, #1
 8021256:	4648      	mov	r0, r9
 8021258:	f000 fbf6 	bl	8021a48 <__i2b>
 802125c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802125e:	4604      	mov	r4, r0
 8021260:	2b00      	cmp	r3, #0
 8021262:	f000 81d8 	beq.w	8021616 <_dtoa_r+0xb56>
 8021266:	461a      	mov	r2, r3
 8021268:	4601      	mov	r1, r0
 802126a:	4648      	mov	r0, r9
 802126c:	f000 fca4 	bl	8021bb8 <__pow5mult>
 8021270:	9b07      	ldr	r3, [sp, #28]
 8021272:	2b01      	cmp	r3, #1
 8021274:	4604      	mov	r4, r0
 8021276:	f300 809f 	bgt.w	80213b8 <_dtoa_r+0x8f8>
 802127a:	9b04      	ldr	r3, [sp, #16]
 802127c:	2b00      	cmp	r3, #0
 802127e:	f040 8097 	bne.w	80213b0 <_dtoa_r+0x8f0>
 8021282:	9b05      	ldr	r3, [sp, #20]
 8021284:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8021288:	2b00      	cmp	r3, #0
 802128a:	f040 8093 	bne.w	80213b4 <_dtoa_r+0x8f4>
 802128e:	9b05      	ldr	r3, [sp, #20]
 8021290:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8021294:	0d1b      	lsrs	r3, r3, #20
 8021296:	051b      	lsls	r3, r3, #20
 8021298:	b133      	cbz	r3, 80212a8 <_dtoa_r+0x7e8>
 802129a:	9b00      	ldr	r3, [sp, #0]
 802129c:	3301      	adds	r3, #1
 802129e:	9300      	str	r3, [sp, #0]
 80212a0:	9b06      	ldr	r3, [sp, #24]
 80212a2:	3301      	adds	r3, #1
 80212a4:	9306      	str	r3, [sp, #24]
 80212a6:	2301      	movs	r3, #1
 80212a8:	9308      	str	r3, [sp, #32]
 80212aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80212ac:	2b00      	cmp	r3, #0
 80212ae:	f000 81b8 	beq.w	8021622 <_dtoa_r+0xb62>
 80212b2:	6923      	ldr	r3, [r4, #16]
 80212b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80212b8:	6918      	ldr	r0, [r3, #16]
 80212ba:	f000 fb79 	bl	80219b0 <__hi0bits>
 80212be:	f1c0 0020 	rsb	r0, r0, #32
 80212c2:	9b06      	ldr	r3, [sp, #24]
 80212c4:	4418      	add	r0, r3
 80212c6:	f010 001f 	ands.w	r0, r0, #31
 80212ca:	f000 8082 	beq.w	80213d2 <_dtoa_r+0x912>
 80212ce:	f1c0 0320 	rsb	r3, r0, #32
 80212d2:	2b04      	cmp	r3, #4
 80212d4:	dd73      	ble.n	80213be <_dtoa_r+0x8fe>
 80212d6:	9b00      	ldr	r3, [sp, #0]
 80212d8:	f1c0 001c 	rsb	r0, r0, #28
 80212dc:	4403      	add	r3, r0
 80212de:	9300      	str	r3, [sp, #0]
 80212e0:	9b06      	ldr	r3, [sp, #24]
 80212e2:	4403      	add	r3, r0
 80212e4:	4406      	add	r6, r0
 80212e6:	9306      	str	r3, [sp, #24]
 80212e8:	9b00      	ldr	r3, [sp, #0]
 80212ea:	2b00      	cmp	r3, #0
 80212ec:	dd05      	ble.n	80212fa <_dtoa_r+0x83a>
 80212ee:	9902      	ldr	r1, [sp, #8]
 80212f0:	461a      	mov	r2, r3
 80212f2:	4648      	mov	r0, r9
 80212f4:	f000 fcba 	bl	8021c6c <__lshift>
 80212f8:	9002      	str	r0, [sp, #8]
 80212fa:	9b06      	ldr	r3, [sp, #24]
 80212fc:	2b00      	cmp	r3, #0
 80212fe:	dd05      	ble.n	802130c <_dtoa_r+0x84c>
 8021300:	4621      	mov	r1, r4
 8021302:	461a      	mov	r2, r3
 8021304:	4648      	mov	r0, r9
 8021306:	f000 fcb1 	bl	8021c6c <__lshift>
 802130a:	4604      	mov	r4, r0
 802130c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802130e:	2b00      	cmp	r3, #0
 8021310:	d061      	beq.n	80213d6 <_dtoa_r+0x916>
 8021312:	9802      	ldr	r0, [sp, #8]
 8021314:	4621      	mov	r1, r4
 8021316:	f000 fd15 	bl	8021d44 <__mcmp>
 802131a:	2800      	cmp	r0, #0
 802131c:	da5b      	bge.n	80213d6 <_dtoa_r+0x916>
 802131e:	2300      	movs	r3, #0
 8021320:	9902      	ldr	r1, [sp, #8]
 8021322:	220a      	movs	r2, #10
 8021324:	4648      	mov	r0, r9
 8021326:	f000 fafd 	bl	8021924 <__multadd>
 802132a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802132c:	9002      	str	r0, [sp, #8]
 802132e:	f107 38ff 	add.w	r8, r7, #4294967295
 8021332:	2b00      	cmp	r3, #0
 8021334:	f000 8177 	beq.w	8021626 <_dtoa_r+0xb66>
 8021338:	4629      	mov	r1, r5
 802133a:	2300      	movs	r3, #0
 802133c:	220a      	movs	r2, #10
 802133e:	4648      	mov	r0, r9
 8021340:	f000 faf0 	bl	8021924 <__multadd>
 8021344:	f1bb 0f00 	cmp.w	fp, #0
 8021348:	4605      	mov	r5, r0
 802134a:	dc6f      	bgt.n	802142c <_dtoa_r+0x96c>
 802134c:	9b07      	ldr	r3, [sp, #28]
 802134e:	2b02      	cmp	r3, #2
 8021350:	dc49      	bgt.n	80213e6 <_dtoa_r+0x926>
 8021352:	e06b      	b.n	802142c <_dtoa_r+0x96c>
 8021354:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8021356:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 802135a:	e73c      	b.n	80211d6 <_dtoa_r+0x716>
 802135c:	3fe00000 	.word	0x3fe00000
 8021360:	40240000 	.word	0x40240000
 8021364:	9b03      	ldr	r3, [sp, #12]
 8021366:	1e5c      	subs	r4, r3, #1
 8021368:	9b08      	ldr	r3, [sp, #32]
 802136a:	42a3      	cmp	r3, r4
 802136c:	db09      	blt.n	8021382 <_dtoa_r+0x8c2>
 802136e:	1b1c      	subs	r4, r3, r4
 8021370:	9b03      	ldr	r3, [sp, #12]
 8021372:	2b00      	cmp	r3, #0
 8021374:	f6bf af30 	bge.w	80211d8 <_dtoa_r+0x718>
 8021378:	9b00      	ldr	r3, [sp, #0]
 802137a:	9a03      	ldr	r2, [sp, #12]
 802137c:	1a9e      	subs	r6, r3, r2
 802137e:	2300      	movs	r3, #0
 8021380:	e72b      	b.n	80211da <_dtoa_r+0x71a>
 8021382:	9b08      	ldr	r3, [sp, #32]
 8021384:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8021386:	9408      	str	r4, [sp, #32]
 8021388:	1ae3      	subs	r3, r4, r3
 802138a:	441a      	add	r2, r3
 802138c:	9e00      	ldr	r6, [sp, #0]
 802138e:	9b03      	ldr	r3, [sp, #12]
 8021390:	920d      	str	r2, [sp, #52]	@ 0x34
 8021392:	2400      	movs	r4, #0
 8021394:	e721      	b.n	80211da <_dtoa_r+0x71a>
 8021396:	9c08      	ldr	r4, [sp, #32]
 8021398:	9e00      	ldr	r6, [sp, #0]
 802139a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802139c:	e728      	b.n	80211f0 <_dtoa_r+0x730>
 802139e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80213a2:	e751      	b.n	8021248 <_dtoa_r+0x788>
 80213a4:	9a08      	ldr	r2, [sp, #32]
 80213a6:	9902      	ldr	r1, [sp, #8]
 80213a8:	e750      	b.n	802124c <_dtoa_r+0x78c>
 80213aa:	f8cd 8008 	str.w	r8, [sp, #8]
 80213ae:	e751      	b.n	8021254 <_dtoa_r+0x794>
 80213b0:	2300      	movs	r3, #0
 80213b2:	e779      	b.n	80212a8 <_dtoa_r+0x7e8>
 80213b4:	9b04      	ldr	r3, [sp, #16]
 80213b6:	e777      	b.n	80212a8 <_dtoa_r+0x7e8>
 80213b8:	2300      	movs	r3, #0
 80213ba:	9308      	str	r3, [sp, #32]
 80213bc:	e779      	b.n	80212b2 <_dtoa_r+0x7f2>
 80213be:	d093      	beq.n	80212e8 <_dtoa_r+0x828>
 80213c0:	9a00      	ldr	r2, [sp, #0]
 80213c2:	331c      	adds	r3, #28
 80213c4:	441a      	add	r2, r3
 80213c6:	9200      	str	r2, [sp, #0]
 80213c8:	9a06      	ldr	r2, [sp, #24]
 80213ca:	441a      	add	r2, r3
 80213cc:	441e      	add	r6, r3
 80213ce:	9206      	str	r2, [sp, #24]
 80213d0:	e78a      	b.n	80212e8 <_dtoa_r+0x828>
 80213d2:	4603      	mov	r3, r0
 80213d4:	e7f4      	b.n	80213c0 <_dtoa_r+0x900>
 80213d6:	9b03      	ldr	r3, [sp, #12]
 80213d8:	2b00      	cmp	r3, #0
 80213da:	46b8      	mov	r8, r7
 80213dc:	dc20      	bgt.n	8021420 <_dtoa_r+0x960>
 80213de:	469b      	mov	fp, r3
 80213e0:	9b07      	ldr	r3, [sp, #28]
 80213e2:	2b02      	cmp	r3, #2
 80213e4:	dd1e      	ble.n	8021424 <_dtoa_r+0x964>
 80213e6:	f1bb 0f00 	cmp.w	fp, #0
 80213ea:	f47f adb1 	bne.w	8020f50 <_dtoa_r+0x490>
 80213ee:	4621      	mov	r1, r4
 80213f0:	465b      	mov	r3, fp
 80213f2:	2205      	movs	r2, #5
 80213f4:	4648      	mov	r0, r9
 80213f6:	f000 fa95 	bl	8021924 <__multadd>
 80213fa:	4601      	mov	r1, r0
 80213fc:	4604      	mov	r4, r0
 80213fe:	9802      	ldr	r0, [sp, #8]
 8021400:	f000 fca0 	bl	8021d44 <__mcmp>
 8021404:	2800      	cmp	r0, #0
 8021406:	f77f ada3 	ble.w	8020f50 <_dtoa_r+0x490>
 802140a:	4656      	mov	r6, sl
 802140c:	2331      	movs	r3, #49	@ 0x31
 802140e:	f806 3b01 	strb.w	r3, [r6], #1
 8021412:	f108 0801 	add.w	r8, r8, #1
 8021416:	e59f      	b.n	8020f58 <_dtoa_r+0x498>
 8021418:	9c03      	ldr	r4, [sp, #12]
 802141a:	46b8      	mov	r8, r7
 802141c:	4625      	mov	r5, r4
 802141e:	e7f4      	b.n	802140a <_dtoa_r+0x94a>
 8021420:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8021424:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021426:	2b00      	cmp	r3, #0
 8021428:	f000 8101 	beq.w	802162e <_dtoa_r+0xb6e>
 802142c:	2e00      	cmp	r6, #0
 802142e:	dd05      	ble.n	802143c <_dtoa_r+0x97c>
 8021430:	4629      	mov	r1, r5
 8021432:	4632      	mov	r2, r6
 8021434:	4648      	mov	r0, r9
 8021436:	f000 fc19 	bl	8021c6c <__lshift>
 802143a:	4605      	mov	r5, r0
 802143c:	9b08      	ldr	r3, [sp, #32]
 802143e:	2b00      	cmp	r3, #0
 8021440:	d05c      	beq.n	80214fc <_dtoa_r+0xa3c>
 8021442:	6869      	ldr	r1, [r5, #4]
 8021444:	4648      	mov	r0, r9
 8021446:	f000 fa0b 	bl	8021860 <_Balloc>
 802144a:	4606      	mov	r6, r0
 802144c:	b928      	cbnz	r0, 802145a <_dtoa_r+0x99a>
 802144e:	4b82      	ldr	r3, [pc, #520]	@ (8021658 <_dtoa_r+0xb98>)
 8021450:	4602      	mov	r2, r0
 8021452:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8021456:	f7ff bb4a 	b.w	8020aee <_dtoa_r+0x2e>
 802145a:	692a      	ldr	r2, [r5, #16]
 802145c:	3202      	adds	r2, #2
 802145e:	0092      	lsls	r2, r2, #2
 8021460:	f105 010c 	add.w	r1, r5, #12
 8021464:	300c      	adds	r0, #12
 8021466:	f7ff fa94 	bl	8020992 <memcpy>
 802146a:	2201      	movs	r2, #1
 802146c:	4631      	mov	r1, r6
 802146e:	4648      	mov	r0, r9
 8021470:	f000 fbfc 	bl	8021c6c <__lshift>
 8021474:	f10a 0301 	add.w	r3, sl, #1
 8021478:	9300      	str	r3, [sp, #0]
 802147a:	eb0a 030b 	add.w	r3, sl, fp
 802147e:	9308      	str	r3, [sp, #32]
 8021480:	9b04      	ldr	r3, [sp, #16]
 8021482:	f003 0301 	and.w	r3, r3, #1
 8021486:	462f      	mov	r7, r5
 8021488:	9306      	str	r3, [sp, #24]
 802148a:	4605      	mov	r5, r0
 802148c:	9b00      	ldr	r3, [sp, #0]
 802148e:	9802      	ldr	r0, [sp, #8]
 8021490:	4621      	mov	r1, r4
 8021492:	f103 3bff 	add.w	fp, r3, #4294967295
 8021496:	f7ff fa8a 	bl	80209ae <quorem>
 802149a:	4603      	mov	r3, r0
 802149c:	3330      	adds	r3, #48	@ 0x30
 802149e:	9003      	str	r0, [sp, #12]
 80214a0:	4639      	mov	r1, r7
 80214a2:	9802      	ldr	r0, [sp, #8]
 80214a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80214a6:	f000 fc4d 	bl	8021d44 <__mcmp>
 80214aa:	462a      	mov	r2, r5
 80214ac:	9004      	str	r0, [sp, #16]
 80214ae:	4621      	mov	r1, r4
 80214b0:	4648      	mov	r0, r9
 80214b2:	f000 fc63 	bl	8021d7c <__mdiff>
 80214b6:	68c2      	ldr	r2, [r0, #12]
 80214b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80214ba:	4606      	mov	r6, r0
 80214bc:	bb02      	cbnz	r2, 8021500 <_dtoa_r+0xa40>
 80214be:	4601      	mov	r1, r0
 80214c0:	9802      	ldr	r0, [sp, #8]
 80214c2:	f000 fc3f 	bl	8021d44 <__mcmp>
 80214c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80214c8:	4602      	mov	r2, r0
 80214ca:	4631      	mov	r1, r6
 80214cc:	4648      	mov	r0, r9
 80214ce:	920c      	str	r2, [sp, #48]	@ 0x30
 80214d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80214d2:	f000 fa05 	bl	80218e0 <_Bfree>
 80214d6:	9b07      	ldr	r3, [sp, #28]
 80214d8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80214da:	9e00      	ldr	r6, [sp, #0]
 80214dc:	ea42 0103 	orr.w	r1, r2, r3
 80214e0:	9b06      	ldr	r3, [sp, #24]
 80214e2:	4319      	orrs	r1, r3
 80214e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80214e6:	d10d      	bne.n	8021504 <_dtoa_r+0xa44>
 80214e8:	2b39      	cmp	r3, #57	@ 0x39
 80214ea:	d027      	beq.n	802153c <_dtoa_r+0xa7c>
 80214ec:	9a04      	ldr	r2, [sp, #16]
 80214ee:	2a00      	cmp	r2, #0
 80214f0:	dd01      	ble.n	80214f6 <_dtoa_r+0xa36>
 80214f2:	9b03      	ldr	r3, [sp, #12]
 80214f4:	3331      	adds	r3, #49	@ 0x31
 80214f6:	f88b 3000 	strb.w	r3, [fp]
 80214fa:	e52e      	b.n	8020f5a <_dtoa_r+0x49a>
 80214fc:	4628      	mov	r0, r5
 80214fe:	e7b9      	b.n	8021474 <_dtoa_r+0x9b4>
 8021500:	2201      	movs	r2, #1
 8021502:	e7e2      	b.n	80214ca <_dtoa_r+0xa0a>
 8021504:	9904      	ldr	r1, [sp, #16]
 8021506:	2900      	cmp	r1, #0
 8021508:	db04      	blt.n	8021514 <_dtoa_r+0xa54>
 802150a:	9807      	ldr	r0, [sp, #28]
 802150c:	4301      	orrs	r1, r0
 802150e:	9806      	ldr	r0, [sp, #24]
 8021510:	4301      	orrs	r1, r0
 8021512:	d120      	bne.n	8021556 <_dtoa_r+0xa96>
 8021514:	2a00      	cmp	r2, #0
 8021516:	ddee      	ble.n	80214f6 <_dtoa_r+0xa36>
 8021518:	9902      	ldr	r1, [sp, #8]
 802151a:	9300      	str	r3, [sp, #0]
 802151c:	2201      	movs	r2, #1
 802151e:	4648      	mov	r0, r9
 8021520:	f000 fba4 	bl	8021c6c <__lshift>
 8021524:	4621      	mov	r1, r4
 8021526:	9002      	str	r0, [sp, #8]
 8021528:	f000 fc0c 	bl	8021d44 <__mcmp>
 802152c:	2800      	cmp	r0, #0
 802152e:	9b00      	ldr	r3, [sp, #0]
 8021530:	dc02      	bgt.n	8021538 <_dtoa_r+0xa78>
 8021532:	d1e0      	bne.n	80214f6 <_dtoa_r+0xa36>
 8021534:	07da      	lsls	r2, r3, #31
 8021536:	d5de      	bpl.n	80214f6 <_dtoa_r+0xa36>
 8021538:	2b39      	cmp	r3, #57	@ 0x39
 802153a:	d1da      	bne.n	80214f2 <_dtoa_r+0xa32>
 802153c:	2339      	movs	r3, #57	@ 0x39
 802153e:	f88b 3000 	strb.w	r3, [fp]
 8021542:	4633      	mov	r3, r6
 8021544:	461e      	mov	r6, r3
 8021546:	3b01      	subs	r3, #1
 8021548:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 802154c:	2a39      	cmp	r2, #57	@ 0x39
 802154e:	d04e      	beq.n	80215ee <_dtoa_r+0xb2e>
 8021550:	3201      	adds	r2, #1
 8021552:	701a      	strb	r2, [r3, #0]
 8021554:	e501      	b.n	8020f5a <_dtoa_r+0x49a>
 8021556:	2a00      	cmp	r2, #0
 8021558:	dd03      	ble.n	8021562 <_dtoa_r+0xaa2>
 802155a:	2b39      	cmp	r3, #57	@ 0x39
 802155c:	d0ee      	beq.n	802153c <_dtoa_r+0xa7c>
 802155e:	3301      	adds	r3, #1
 8021560:	e7c9      	b.n	80214f6 <_dtoa_r+0xa36>
 8021562:	9a00      	ldr	r2, [sp, #0]
 8021564:	9908      	ldr	r1, [sp, #32]
 8021566:	f802 3c01 	strb.w	r3, [r2, #-1]
 802156a:	428a      	cmp	r2, r1
 802156c:	d028      	beq.n	80215c0 <_dtoa_r+0xb00>
 802156e:	9902      	ldr	r1, [sp, #8]
 8021570:	2300      	movs	r3, #0
 8021572:	220a      	movs	r2, #10
 8021574:	4648      	mov	r0, r9
 8021576:	f000 f9d5 	bl	8021924 <__multadd>
 802157a:	42af      	cmp	r7, r5
 802157c:	9002      	str	r0, [sp, #8]
 802157e:	f04f 0300 	mov.w	r3, #0
 8021582:	f04f 020a 	mov.w	r2, #10
 8021586:	4639      	mov	r1, r7
 8021588:	4648      	mov	r0, r9
 802158a:	d107      	bne.n	802159c <_dtoa_r+0xadc>
 802158c:	f000 f9ca 	bl	8021924 <__multadd>
 8021590:	4607      	mov	r7, r0
 8021592:	4605      	mov	r5, r0
 8021594:	9b00      	ldr	r3, [sp, #0]
 8021596:	3301      	adds	r3, #1
 8021598:	9300      	str	r3, [sp, #0]
 802159a:	e777      	b.n	802148c <_dtoa_r+0x9cc>
 802159c:	f000 f9c2 	bl	8021924 <__multadd>
 80215a0:	4629      	mov	r1, r5
 80215a2:	4607      	mov	r7, r0
 80215a4:	2300      	movs	r3, #0
 80215a6:	220a      	movs	r2, #10
 80215a8:	4648      	mov	r0, r9
 80215aa:	f000 f9bb 	bl	8021924 <__multadd>
 80215ae:	4605      	mov	r5, r0
 80215b0:	e7f0      	b.n	8021594 <_dtoa_r+0xad4>
 80215b2:	f1bb 0f00 	cmp.w	fp, #0
 80215b6:	bfcc      	ite	gt
 80215b8:	465e      	movgt	r6, fp
 80215ba:	2601      	movle	r6, #1
 80215bc:	4456      	add	r6, sl
 80215be:	2700      	movs	r7, #0
 80215c0:	9902      	ldr	r1, [sp, #8]
 80215c2:	9300      	str	r3, [sp, #0]
 80215c4:	2201      	movs	r2, #1
 80215c6:	4648      	mov	r0, r9
 80215c8:	f000 fb50 	bl	8021c6c <__lshift>
 80215cc:	4621      	mov	r1, r4
 80215ce:	9002      	str	r0, [sp, #8]
 80215d0:	f000 fbb8 	bl	8021d44 <__mcmp>
 80215d4:	2800      	cmp	r0, #0
 80215d6:	dcb4      	bgt.n	8021542 <_dtoa_r+0xa82>
 80215d8:	d102      	bne.n	80215e0 <_dtoa_r+0xb20>
 80215da:	9b00      	ldr	r3, [sp, #0]
 80215dc:	07db      	lsls	r3, r3, #31
 80215de:	d4b0      	bmi.n	8021542 <_dtoa_r+0xa82>
 80215e0:	4633      	mov	r3, r6
 80215e2:	461e      	mov	r6, r3
 80215e4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80215e8:	2a30      	cmp	r2, #48	@ 0x30
 80215ea:	d0fa      	beq.n	80215e2 <_dtoa_r+0xb22>
 80215ec:	e4b5      	b.n	8020f5a <_dtoa_r+0x49a>
 80215ee:	459a      	cmp	sl, r3
 80215f0:	d1a8      	bne.n	8021544 <_dtoa_r+0xa84>
 80215f2:	2331      	movs	r3, #49	@ 0x31
 80215f4:	f108 0801 	add.w	r8, r8, #1
 80215f8:	f88a 3000 	strb.w	r3, [sl]
 80215fc:	e4ad      	b.n	8020f5a <_dtoa_r+0x49a>
 80215fe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8021600:	f8df a058 	ldr.w	sl, [pc, #88]	@ 802165c <_dtoa_r+0xb9c>
 8021604:	b11b      	cbz	r3, 802160e <_dtoa_r+0xb4e>
 8021606:	f10a 0308 	add.w	r3, sl, #8
 802160a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802160c:	6013      	str	r3, [r2, #0]
 802160e:	4650      	mov	r0, sl
 8021610:	b017      	add	sp, #92	@ 0x5c
 8021612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021616:	9b07      	ldr	r3, [sp, #28]
 8021618:	2b01      	cmp	r3, #1
 802161a:	f77f ae2e 	ble.w	802127a <_dtoa_r+0x7ba>
 802161e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021620:	9308      	str	r3, [sp, #32]
 8021622:	2001      	movs	r0, #1
 8021624:	e64d      	b.n	80212c2 <_dtoa_r+0x802>
 8021626:	f1bb 0f00 	cmp.w	fp, #0
 802162a:	f77f aed9 	ble.w	80213e0 <_dtoa_r+0x920>
 802162e:	4656      	mov	r6, sl
 8021630:	9802      	ldr	r0, [sp, #8]
 8021632:	4621      	mov	r1, r4
 8021634:	f7ff f9bb 	bl	80209ae <quorem>
 8021638:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 802163c:	f806 3b01 	strb.w	r3, [r6], #1
 8021640:	eba6 020a 	sub.w	r2, r6, sl
 8021644:	4593      	cmp	fp, r2
 8021646:	ddb4      	ble.n	80215b2 <_dtoa_r+0xaf2>
 8021648:	9902      	ldr	r1, [sp, #8]
 802164a:	2300      	movs	r3, #0
 802164c:	220a      	movs	r2, #10
 802164e:	4648      	mov	r0, r9
 8021650:	f000 f968 	bl	8021924 <__multadd>
 8021654:	9002      	str	r0, [sp, #8]
 8021656:	e7eb      	b.n	8021630 <_dtoa_r+0xb70>
 8021658:	08023c08 	.word	0x08023c08
 802165c:	08023b8c 	.word	0x08023b8c

08021660 <_free_r>:
 8021660:	b538      	push	{r3, r4, r5, lr}
 8021662:	4605      	mov	r5, r0
 8021664:	2900      	cmp	r1, #0
 8021666:	d041      	beq.n	80216ec <_free_r+0x8c>
 8021668:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802166c:	1f0c      	subs	r4, r1, #4
 802166e:	2b00      	cmp	r3, #0
 8021670:	bfb8      	it	lt
 8021672:	18e4      	addlt	r4, r4, r3
 8021674:	f000 f8e8 	bl	8021848 <__malloc_lock>
 8021678:	4a1d      	ldr	r2, [pc, #116]	@ (80216f0 <_free_r+0x90>)
 802167a:	6813      	ldr	r3, [r2, #0]
 802167c:	b933      	cbnz	r3, 802168c <_free_r+0x2c>
 802167e:	6063      	str	r3, [r4, #4]
 8021680:	6014      	str	r4, [r2, #0]
 8021682:	4628      	mov	r0, r5
 8021684:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021688:	f000 b8e4 	b.w	8021854 <__malloc_unlock>
 802168c:	42a3      	cmp	r3, r4
 802168e:	d908      	bls.n	80216a2 <_free_r+0x42>
 8021690:	6820      	ldr	r0, [r4, #0]
 8021692:	1821      	adds	r1, r4, r0
 8021694:	428b      	cmp	r3, r1
 8021696:	bf01      	itttt	eq
 8021698:	6819      	ldreq	r1, [r3, #0]
 802169a:	685b      	ldreq	r3, [r3, #4]
 802169c:	1809      	addeq	r1, r1, r0
 802169e:	6021      	streq	r1, [r4, #0]
 80216a0:	e7ed      	b.n	802167e <_free_r+0x1e>
 80216a2:	461a      	mov	r2, r3
 80216a4:	685b      	ldr	r3, [r3, #4]
 80216a6:	b10b      	cbz	r3, 80216ac <_free_r+0x4c>
 80216a8:	42a3      	cmp	r3, r4
 80216aa:	d9fa      	bls.n	80216a2 <_free_r+0x42>
 80216ac:	6811      	ldr	r1, [r2, #0]
 80216ae:	1850      	adds	r0, r2, r1
 80216b0:	42a0      	cmp	r0, r4
 80216b2:	d10b      	bne.n	80216cc <_free_r+0x6c>
 80216b4:	6820      	ldr	r0, [r4, #0]
 80216b6:	4401      	add	r1, r0
 80216b8:	1850      	adds	r0, r2, r1
 80216ba:	4283      	cmp	r3, r0
 80216bc:	6011      	str	r1, [r2, #0]
 80216be:	d1e0      	bne.n	8021682 <_free_r+0x22>
 80216c0:	6818      	ldr	r0, [r3, #0]
 80216c2:	685b      	ldr	r3, [r3, #4]
 80216c4:	6053      	str	r3, [r2, #4]
 80216c6:	4408      	add	r0, r1
 80216c8:	6010      	str	r0, [r2, #0]
 80216ca:	e7da      	b.n	8021682 <_free_r+0x22>
 80216cc:	d902      	bls.n	80216d4 <_free_r+0x74>
 80216ce:	230c      	movs	r3, #12
 80216d0:	602b      	str	r3, [r5, #0]
 80216d2:	e7d6      	b.n	8021682 <_free_r+0x22>
 80216d4:	6820      	ldr	r0, [r4, #0]
 80216d6:	1821      	adds	r1, r4, r0
 80216d8:	428b      	cmp	r3, r1
 80216da:	bf04      	itt	eq
 80216dc:	6819      	ldreq	r1, [r3, #0]
 80216de:	685b      	ldreq	r3, [r3, #4]
 80216e0:	6063      	str	r3, [r4, #4]
 80216e2:	bf04      	itt	eq
 80216e4:	1809      	addeq	r1, r1, r0
 80216e6:	6021      	streq	r1, [r4, #0]
 80216e8:	6054      	str	r4, [r2, #4]
 80216ea:	e7ca      	b.n	8021682 <_free_r+0x22>
 80216ec:	bd38      	pop	{r3, r4, r5, pc}
 80216ee:	bf00      	nop
 80216f0:	20001d50 	.word	0x20001d50

080216f4 <malloc>:
 80216f4:	4b02      	ldr	r3, [pc, #8]	@ (8021700 <malloc+0xc>)
 80216f6:	4601      	mov	r1, r0
 80216f8:	6818      	ldr	r0, [r3, #0]
 80216fa:	f000 b825 	b.w	8021748 <_malloc_r>
 80216fe:	bf00      	nop
 8021700:	20000084 	.word	0x20000084

08021704 <sbrk_aligned>:
 8021704:	b570      	push	{r4, r5, r6, lr}
 8021706:	4e0f      	ldr	r6, [pc, #60]	@ (8021744 <sbrk_aligned+0x40>)
 8021708:	460c      	mov	r4, r1
 802170a:	6831      	ldr	r1, [r6, #0]
 802170c:	4605      	mov	r5, r0
 802170e:	b911      	cbnz	r1, 8021716 <sbrk_aligned+0x12>
 8021710:	f000 fe1a 	bl	8022348 <_sbrk_r>
 8021714:	6030      	str	r0, [r6, #0]
 8021716:	4621      	mov	r1, r4
 8021718:	4628      	mov	r0, r5
 802171a:	f000 fe15 	bl	8022348 <_sbrk_r>
 802171e:	1c43      	adds	r3, r0, #1
 8021720:	d103      	bne.n	802172a <sbrk_aligned+0x26>
 8021722:	f04f 34ff 	mov.w	r4, #4294967295
 8021726:	4620      	mov	r0, r4
 8021728:	bd70      	pop	{r4, r5, r6, pc}
 802172a:	1cc4      	adds	r4, r0, #3
 802172c:	f024 0403 	bic.w	r4, r4, #3
 8021730:	42a0      	cmp	r0, r4
 8021732:	d0f8      	beq.n	8021726 <sbrk_aligned+0x22>
 8021734:	1a21      	subs	r1, r4, r0
 8021736:	4628      	mov	r0, r5
 8021738:	f000 fe06 	bl	8022348 <_sbrk_r>
 802173c:	3001      	adds	r0, #1
 802173e:	d1f2      	bne.n	8021726 <sbrk_aligned+0x22>
 8021740:	e7ef      	b.n	8021722 <sbrk_aligned+0x1e>
 8021742:	bf00      	nop
 8021744:	20001d4c 	.word	0x20001d4c

08021748 <_malloc_r>:
 8021748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802174c:	1ccd      	adds	r5, r1, #3
 802174e:	f025 0503 	bic.w	r5, r5, #3
 8021752:	3508      	adds	r5, #8
 8021754:	2d0c      	cmp	r5, #12
 8021756:	bf38      	it	cc
 8021758:	250c      	movcc	r5, #12
 802175a:	2d00      	cmp	r5, #0
 802175c:	4606      	mov	r6, r0
 802175e:	db01      	blt.n	8021764 <_malloc_r+0x1c>
 8021760:	42a9      	cmp	r1, r5
 8021762:	d904      	bls.n	802176e <_malloc_r+0x26>
 8021764:	230c      	movs	r3, #12
 8021766:	6033      	str	r3, [r6, #0]
 8021768:	2000      	movs	r0, #0
 802176a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802176e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8021844 <_malloc_r+0xfc>
 8021772:	f000 f869 	bl	8021848 <__malloc_lock>
 8021776:	f8d8 3000 	ldr.w	r3, [r8]
 802177a:	461c      	mov	r4, r3
 802177c:	bb44      	cbnz	r4, 80217d0 <_malloc_r+0x88>
 802177e:	4629      	mov	r1, r5
 8021780:	4630      	mov	r0, r6
 8021782:	f7ff ffbf 	bl	8021704 <sbrk_aligned>
 8021786:	1c43      	adds	r3, r0, #1
 8021788:	4604      	mov	r4, r0
 802178a:	d158      	bne.n	802183e <_malloc_r+0xf6>
 802178c:	f8d8 4000 	ldr.w	r4, [r8]
 8021790:	4627      	mov	r7, r4
 8021792:	2f00      	cmp	r7, #0
 8021794:	d143      	bne.n	802181e <_malloc_r+0xd6>
 8021796:	2c00      	cmp	r4, #0
 8021798:	d04b      	beq.n	8021832 <_malloc_r+0xea>
 802179a:	6823      	ldr	r3, [r4, #0]
 802179c:	4639      	mov	r1, r7
 802179e:	4630      	mov	r0, r6
 80217a0:	eb04 0903 	add.w	r9, r4, r3
 80217a4:	f000 fdd0 	bl	8022348 <_sbrk_r>
 80217a8:	4581      	cmp	r9, r0
 80217aa:	d142      	bne.n	8021832 <_malloc_r+0xea>
 80217ac:	6821      	ldr	r1, [r4, #0]
 80217ae:	1a6d      	subs	r5, r5, r1
 80217b0:	4629      	mov	r1, r5
 80217b2:	4630      	mov	r0, r6
 80217b4:	f7ff ffa6 	bl	8021704 <sbrk_aligned>
 80217b8:	3001      	adds	r0, #1
 80217ba:	d03a      	beq.n	8021832 <_malloc_r+0xea>
 80217bc:	6823      	ldr	r3, [r4, #0]
 80217be:	442b      	add	r3, r5
 80217c0:	6023      	str	r3, [r4, #0]
 80217c2:	f8d8 3000 	ldr.w	r3, [r8]
 80217c6:	685a      	ldr	r2, [r3, #4]
 80217c8:	bb62      	cbnz	r2, 8021824 <_malloc_r+0xdc>
 80217ca:	f8c8 7000 	str.w	r7, [r8]
 80217ce:	e00f      	b.n	80217f0 <_malloc_r+0xa8>
 80217d0:	6822      	ldr	r2, [r4, #0]
 80217d2:	1b52      	subs	r2, r2, r5
 80217d4:	d420      	bmi.n	8021818 <_malloc_r+0xd0>
 80217d6:	2a0b      	cmp	r2, #11
 80217d8:	d917      	bls.n	802180a <_malloc_r+0xc2>
 80217da:	1961      	adds	r1, r4, r5
 80217dc:	42a3      	cmp	r3, r4
 80217de:	6025      	str	r5, [r4, #0]
 80217e0:	bf18      	it	ne
 80217e2:	6059      	strne	r1, [r3, #4]
 80217e4:	6863      	ldr	r3, [r4, #4]
 80217e6:	bf08      	it	eq
 80217e8:	f8c8 1000 	streq.w	r1, [r8]
 80217ec:	5162      	str	r2, [r4, r5]
 80217ee:	604b      	str	r3, [r1, #4]
 80217f0:	4630      	mov	r0, r6
 80217f2:	f000 f82f 	bl	8021854 <__malloc_unlock>
 80217f6:	f104 000b 	add.w	r0, r4, #11
 80217fa:	1d23      	adds	r3, r4, #4
 80217fc:	f020 0007 	bic.w	r0, r0, #7
 8021800:	1ac2      	subs	r2, r0, r3
 8021802:	bf1c      	itt	ne
 8021804:	1a1b      	subne	r3, r3, r0
 8021806:	50a3      	strne	r3, [r4, r2]
 8021808:	e7af      	b.n	802176a <_malloc_r+0x22>
 802180a:	6862      	ldr	r2, [r4, #4]
 802180c:	42a3      	cmp	r3, r4
 802180e:	bf0c      	ite	eq
 8021810:	f8c8 2000 	streq.w	r2, [r8]
 8021814:	605a      	strne	r2, [r3, #4]
 8021816:	e7eb      	b.n	80217f0 <_malloc_r+0xa8>
 8021818:	4623      	mov	r3, r4
 802181a:	6864      	ldr	r4, [r4, #4]
 802181c:	e7ae      	b.n	802177c <_malloc_r+0x34>
 802181e:	463c      	mov	r4, r7
 8021820:	687f      	ldr	r7, [r7, #4]
 8021822:	e7b6      	b.n	8021792 <_malloc_r+0x4a>
 8021824:	461a      	mov	r2, r3
 8021826:	685b      	ldr	r3, [r3, #4]
 8021828:	42a3      	cmp	r3, r4
 802182a:	d1fb      	bne.n	8021824 <_malloc_r+0xdc>
 802182c:	2300      	movs	r3, #0
 802182e:	6053      	str	r3, [r2, #4]
 8021830:	e7de      	b.n	80217f0 <_malloc_r+0xa8>
 8021832:	230c      	movs	r3, #12
 8021834:	6033      	str	r3, [r6, #0]
 8021836:	4630      	mov	r0, r6
 8021838:	f000 f80c 	bl	8021854 <__malloc_unlock>
 802183c:	e794      	b.n	8021768 <_malloc_r+0x20>
 802183e:	6005      	str	r5, [r0, #0]
 8021840:	e7d6      	b.n	80217f0 <_malloc_r+0xa8>
 8021842:	bf00      	nop
 8021844:	20001d50 	.word	0x20001d50

08021848 <__malloc_lock>:
 8021848:	4801      	ldr	r0, [pc, #4]	@ (8021850 <__malloc_lock+0x8>)
 802184a:	f7ff b8a0 	b.w	802098e <__retarget_lock_acquire_recursive>
 802184e:	bf00      	nop
 8021850:	20001d48 	.word	0x20001d48

08021854 <__malloc_unlock>:
 8021854:	4801      	ldr	r0, [pc, #4]	@ (802185c <__malloc_unlock+0x8>)
 8021856:	f7ff b89b 	b.w	8020990 <__retarget_lock_release_recursive>
 802185a:	bf00      	nop
 802185c:	20001d48 	.word	0x20001d48

08021860 <_Balloc>:
 8021860:	b570      	push	{r4, r5, r6, lr}
 8021862:	69c6      	ldr	r6, [r0, #28]
 8021864:	4604      	mov	r4, r0
 8021866:	460d      	mov	r5, r1
 8021868:	b976      	cbnz	r6, 8021888 <_Balloc+0x28>
 802186a:	2010      	movs	r0, #16
 802186c:	f7ff ff42 	bl	80216f4 <malloc>
 8021870:	4602      	mov	r2, r0
 8021872:	61e0      	str	r0, [r4, #28]
 8021874:	b920      	cbnz	r0, 8021880 <_Balloc+0x20>
 8021876:	4b18      	ldr	r3, [pc, #96]	@ (80218d8 <_Balloc+0x78>)
 8021878:	4818      	ldr	r0, [pc, #96]	@ (80218dc <_Balloc+0x7c>)
 802187a:	216b      	movs	r1, #107	@ 0x6b
 802187c:	f000 fd74 	bl	8022368 <__assert_func>
 8021880:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8021884:	6006      	str	r6, [r0, #0]
 8021886:	60c6      	str	r6, [r0, #12]
 8021888:	69e6      	ldr	r6, [r4, #28]
 802188a:	68f3      	ldr	r3, [r6, #12]
 802188c:	b183      	cbz	r3, 80218b0 <_Balloc+0x50>
 802188e:	69e3      	ldr	r3, [r4, #28]
 8021890:	68db      	ldr	r3, [r3, #12]
 8021892:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8021896:	b9b8      	cbnz	r0, 80218c8 <_Balloc+0x68>
 8021898:	2101      	movs	r1, #1
 802189a:	fa01 f605 	lsl.w	r6, r1, r5
 802189e:	1d72      	adds	r2, r6, #5
 80218a0:	0092      	lsls	r2, r2, #2
 80218a2:	4620      	mov	r0, r4
 80218a4:	f000 fd7e 	bl	80223a4 <_calloc_r>
 80218a8:	b160      	cbz	r0, 80218c4 <_Balloc+0x64>
 80218aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80218ae:	e00e      	b.n	80218ce <_Balloc+0x6e>
 80218b0:	2221      	movs	r2, #33	@ 0x21
 80218b2:	2104      	movs	r1, #4
 80218b4:	4620      	mov	r0, r4
 80218b6:	f000 fd75 	bl	80223a4 <_calloc_r>
 80218ba:	69e3      	ldr	r3, [r4, #28]
 80218bc:	60f0      	str	r0, [r6, #12]
 80218be:	68db      	ldr	r3, [r3, #12]
 80218c0:	2b00      	cmp	r3, #0
 80218c2:	d1e4      	bne.n	802188e <_Balloc+0x2e>
 80218c4:	2000      	movs	r0, #0
 80218c6:	bd70      	pop	{r4, r5, r6, pc}
 80218c8:	6802      	ldr	r2, [r0, #0]
 80218ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80218ce:	2300      	movs	r3, #0
 80218d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80218d4:	e7f7      	b.n	80218c6 <_Balloc+0x66>
 80218d6:	bf00      	nop
 80218d8:	08023b99 	.word	0x08023b99
 80218dc:	08023c19 	.word	0x08023c19

080218e0 <_Bfree>:
 80218e0:	b570      	push	{r4, r5, r6, lr}
 80218e2:	69c6      	ldr	r6, [r0, #28]
 80218e4:	4605      	mov	r5, r0
 80218e6:	460c      	mov	r4, r1
 80218e8:	b976      	cbnz	r6, 8021908 <_Bfree+0x28>
 80218ea:	2010      	movs	r0, #16
 80218ec:	f7ff ff02 	bl	80216f4 <malloc>
 80218f0:	4602      	mov	r2, r0
 80218f2:	61e8      	str	r0, [r5, #28]
 80218f4:	b920      	cbnz	r0, 8021900 <_Bfree+0x20>
 80218f6:	4b09      	ldr	r3, [pc, #36]	@ (802191c <_Bfree+0x3c>)
 80218f8:	4809      	ldr	r0, [pc, #36]	@ (8021920 <_Bfree+0x40>)
 80218fa:	218f      	movs	r1, #143	@ 0x8f
 80218fc:	f000 fd34 	bl	8022368 <__assert_func>
 8021900:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8021904:	6006      	str	r6, [r0, #0]
 8021906:	60c6      	str	r6, [r0, #12]
 8021908:	b13c      	cbz	r4, 802191a <_Bfree+0x3a>
 802190a:	69eb      	ldr	r3, [r5, #28]
 802190c:	6862      	ldr	r2, [r4, #4]
 802190e:	68db      	ldr	r3, [r3, #12]
 8021910:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8021914:	6021      	str	r1, [r4, #0]
 8021916:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802191a:	bd70      	pop	{r4, r5, r6, pc}
 802191c:	08023b99 	.word	0x08023b99
 8021920:	08023c19 	.word	0x08023c19

08021924 <__multadd>:
 8021924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021928:	690d      	ldr	r5, [r1, #16]
 802192a:	4607      	mov	r7, r0
 802192c:	460c      	mov	r4, r1
 802192e:	461e      	mov	r6, r3
 8021930:	f101 0c14 	add.w	ip, r1, #20
 8021934:	2000      	movs	r0, #0
 8021936:	f8dc 3000 	ldr.w	r3, [ip]
 802193a:	b299      	uxth	r1, r3
 802193c:	fb02 6101 	mla	r1, r2, r1, r6
 8021940:	0c1e      	lsrs	r6, r3, #16
 8021942:	0c0b      	lsrs	r3, r1, #16
 8021944:	fb02 3306 	mla	r3, r2, r6, r3
 8021948:	b289      	uxth	r1, r1
 802194a:	3001      	adds	r0, #1
 802194c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8021950:	4285      	cmp	r5, r0
 8021952:	f84c 1b04 	str.w	r1, [ip], #4
 8021956:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802195a:	dcec      	bgt.n	8021936 <__multadd+0x12>
 802195c:	b30e      	cbz	r6, 80219a2 <__multadd+0x7e>
 802195e:	68a3      	ldr	r3, [r4, #8]
 8021960:	42ab      	cmp	r3, r5
 8021962:	dc19      	bgt.n	8021998 <__multadd+0x74>
 8021964:	6861      	ldr	r1, [r4, #4]
 8021966:	4638      	mov	r0, r7
 8021968:	3101      	adds	r1, #1
 802196a:	f7ff ff79 	bl	8021860 <_Balloc>
 802196e:	4680      	mov	r8, r0
 8021970:	b928      	cbnz	r0, 802197e <__multadd+0x5a>
 8021972:	4602      	mov	r2, r0
 8021974:	4b0c      	ldr	r3, [pc, #48]	@ (80219a8 <__multadd+0x84>)
 8021976:	480d      	ldr	r0, [pc, #52]	@ (80219ac <__multadd+0x88>)
 8021978:	21ba      	movs	r1, #186	@ 0xba
 802197a:	f000 fcf5 	bl	8022368 <__assert_func>
 802197e:	6922      	ldr	r2, [r4, #16]
 8021980:	3202      	adds	r2, #2
 8021982:	f104 010c 	add.w	r1, r4, #12
 8021986:	0092      	lsls	r2, r2, #2
 8021988:	300c      	adds	r0, #12
 802198a:	f7ff f802 	bl	8020992 <memcpy>
 802198e:	4621      	mov	r1, r4
 8021990:	4638      	mov	r0, r7
 8021992:	f7ff ffa5 	bl	80218e0 <_Bfree>
 8021996:	4644      	mov	r4, r8
 8021998:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 802199c:	3501      	adds	r5, #1
 802199e:	615e      	str	r6, [r3, #20]
 80219a0:	6125      	str	r5, [r4, #16]
 80219a2:	4620      	mov	r0, r4
 80219a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80219a8:	08023c08 	.word	0x08023c08
 80219ac:	08023c19 	.word	0x08023c19

080219b0 <__hi0bits>:
 80219b0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80219b4:	4603      	mov	r3, r0
 80219b6:	bf36      	itet	cc
 80219b8:	0403      	lslcc	r3, r0, #16
 80219ba:	2000      	movcs	r0, #0
 80219bc:	2010      	movcc	r0, #16
 80219be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80219c2:	bf3c      	itt	cc
 80219c4:	021b      	lslcc	r3, r3, #8
 80219c6:	3008      	addcc	r0, #8
 80219c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80219cc:	bf3c      	itt	cc
 80219ce:	011b      	lslcc	r3, r3, #4
 80219d0:	3004      	addcc	r0, #4
 80219d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80219d6:	bf3c      	itt	cc
 80219d8:	009b      	lslcc	r3, r3, #2
 80219da:	3002      	addcc	r0, #2
 80219dc:	2b00      	cmp	r3, #0
 80219de:	db05      	blt.n	80219ec <__hi0bits+0x3c>
 80219e0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80219e4:	f100 0001 	add.w	r0, r0, #1
 80219e8:	bf08      	it	eq
 80219ea:	2020      	moveq	r0, #32
 80219ec:	4770      	bx	lr

080219ee <__lo0bits>:
 80219ee:	6803      	ldr	r3, [r0, #0]
 80219f0:	4602      	mov	r2, r0
 80219f2:	f013 0007 	ands.w	r0, r3, #7
 80219f6:	d00b      	beq.n	8021a10 <__lo0bits+0x22>
 80219f8:	07d9      	lsls	r1, r3, #31
 80219fa:	d421      	bmi.n	8021a40 <__lo0bits+0x52>
 80219fc:	0798      	lsls	r0, r3, #30
 80219fe:	bf49      	itett	mi
 8021a00:	085b      	lsrmi	r3, r3, #1
 8021a02:	089b      	lsrpl	r3, r3, #2
 8021a04:	2001      	movmi	r0, #1
 8021a06:	6013      	strmi	r3, [r2, #0]
 8021a08:	bf5c      	itt	pl
 8021a0a:	6013      	strpl	r3, [r2, #0]
 8021a0c:	2002      	movpl	r0, #2
 8021a0e:	4770      	bx	lr
 8021a10:	b299      	uxth	r1, r3
 8021a12:	b909      	cbnz	r1, 8021a18 <__lo0bits+0x2a>
 8021a14:	0c1b      	lsrs	r3, r3, #16
 8021a16:	2010      	movs	r0, #16
 8021a18:	b2d9      	uxtb	r1, r3
 8021a1a:	b909      	cbnz	r1, 8021a20 <__lo0bits+0x32>
 8021a1c:	3008      	adds	r0, #8
 8021a1e:	0a1b      	lsrs	r3, r3, #8
 8021a20:	0719      	lsls	r1, r3, #28
 8021a22:	bf04      	itt	eq
 8021a24:	091b      	lsreq	r3, r3, #4
 8021a26:	3004      	addeq	r0, #4
 8021a28:	0799      	lsls	r1, r3, #30
 8021a2a:	bf04      	itt	eq
 8021a2c:	089b      	lsreq	r3, r3, #2
 8021a2e:	3002      	addeq	r0, #2
 8021a30:	07d9      	lsls	r1, r3, #31
 8021a32:	d403      	bmi.n	8021a3c <__lo0bits+0x4e>
 8021a34:	085b      	lsrs	r3, r3, #1
 8021a36:	f100 0001 	add.w	r0, r0, #1
 8021a3a:	d003      	beq.n	8021a44 <__lo0bits+0x56>
 8021a3c:	6013      	str	r3, [r2, #0]
 8021a3e:	4770      	bx	lr
 8021a40:	2000      	movs	r0, #0
 8021a42:	4770      	bx	lr
 8021a44:	2020      	movs	r0, #32
 8021a46:	4770      	bx	lr

08021a48 <__i2b>:
 8021a48:	b510      	push	{r4, lr}
 8021a4a:	460c      	mov	r4, r1
 8021a4c:	2101      	movs	r1, #1
 8021a4e:	f7ff ff07 	bl	8021860 <_Balloc>
 8021a52:	4602      	mov	r2, r0
 8021a54:	b928      	cbnz	r0, 8021a62 <__i2b+0x1a>
 8021a56:	4b05      	ldr	r3, [pc, #20]	@ (8021a6c <__i2b+0x24>)
 8021a58:	4805      	ldr	r0, [pc, #20]	@ (8021a70 <__i2b+0x28>)
 8021a5a:	f240 1145 	movw	r1, #325	@ 0x145
 8021a5e:	f000 fc83 	bl	8022368 <__assert_func>
 8021a62:	2301      	movs	r3, #1
 8021a64:	6144      	str	r4, [r0, #20]
 8021a66:	6103      	str	r3, [r0, #16]
 8021a68:	bd10      	pop	{r4, pc}
 8021a6a:	bf00      	nop
 8021a6c:	08023c08 	.word	0x08023c08
 8021a70:	08023c19 	.word	0x08023c19

08021a74 <__multiply>:
 8021a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a78:	4617      	mov	r7, r2
 8021a7a:	690a      	ldr	r2, [r1, #16]
 8021a7c:	693b      	ldr	r3, [r7, #16]
 8021a7e:	429a      	cmp	r2, r3
 8021a80:	bfa8      	it	ge
 8021a82:	463b      	movge	r3, r7
 8021a84:	4689      	mov	r9, r1
 8021a86:	bfa4      	itt	ge
 8021a88:	460f      	movge	r7, r1
 8021a8a:	4699      	movge	r9, r3
 8021a8c:	693d      	ldr	r5, [r7, #16]
 8021a8e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8021a92:	68bb      	ldr	r3, [r7, #8]
 8021a94:	6879      	ldr	r1, [r7, #4]
 8021a96:	eb05 060a 	add.w	r6, r5, sl
 8021a9a:	42b3      	cmp	r3, r6
 8021a9c:	b085      	sub	sp, #20
 8021a9e:	bfb8      	it	lt
 8021aa0:	3101      	addlt	r1, #1
 8021aa2:	f7ff fedd 	bl	8021860 <_Balloc>
 8021aa6:	b930      	cbnz	r0, 8021ab6 <__multiply+0x42>
 8021aa8:	4602      	mov	r2, r0
 8021aaa:	4b41      	ldr	r3, [pc, #260]	@ (8021bb0 <__multiply+0x13c>)
 8021aac:	4841      	ldr	r0, [pc, #260]	@ (8021bb4 <__multiply+0x140>)
 8021aae:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8021ab2:	f000 fc59 	bl	8022368 <__assert_func>
 8021ab6:	f100 0414 	add.w	r4, r0, #20
 8021aba:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8021abe:	4623      	mov	r3, r4
 8021ac0:	2200      	movs	r2, #0
 8021ac2:	4573      	cmp	r3, lr
 8021ac4:	d320      	bcc.n	8021b08 <__multiply+0x94>
 8021ac6:	f107 0814 	add.w	r8, r7, #20
 8021aca:	f109 0114 	add.w	r1, r9, #20
 8021ace:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8021ad2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8021ad6:	9302      	str	r3, [sp, #8]
 8021ad8:	1beb      	subs	r3, r5, r7
 8021ada:	3b15      	subs	r3, #21
 8021adc:	f023 0303 	bic.w	r3, r3, #3
 8021ae0:	3304      	adds	r3, #4
 8021ae2:	3715      	adds	r7, #21
 8021ae4:	42bd      	cmp	r5, r7
 8021ae6:	bf38      	it	cc
 8021ae8:	2304      	movcc	r3, #4
 8021aea:	9301      	str	r3, [sp, #4]
 8021aec:	9b02      	ldr	r3, [sp, #8]
 8021aee:	9103      	str	r1, [sp, #12]
 8021af0:	428b      	cmp	r3, r1
 8021af2:	d80c      	bhi.n	8021b0e <__multiply+0x9a>
 8021af4:	2e00      	cmp	r6, #0
 8021af6:	dd03      	ble.n	8021b00 <__multiply+0x8c>
 8021af8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8021afc:	2b00      	cmp	r3, #0
 8021afe:	d055      	beq.n	8021bac <__multiply+0x138>
 8021b00:	6106      	str	r6, [r0, #16]
 8021b02:	b005      	add	sp, #20
 8021b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021b08:	f843 2b04 	str.w	r2, [r3], #4
 8021b0c:	e7d9      	b.n	8021ac2 <__multiply+0x4e>
 8021b0e:	f8b1 a000 	ldrh.w	sl, [r1]
 8021b12:	f1ba 0f00 	cmp.w	sl, #0
 8021b16:	d01f      	beq.n	8021b58 <__multiply+0xe4>
 8021b18:	46c4      	mov	ip, r8
 8021b1a:	46a1      	mov	r9, r4
 8021b1c:	2700      	movs	r7, #0
 8021b1e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8021b22:	f8d9 3000 	ldr.w	r3, [r9]
 8021b26:	fa1f fb82 	uxth.w	fp, r2
 8021b2a:	b29b      	uxth	r3, r3
 8021b2c:	fb0a 330b 	mla	r3, sl, fp, r3
 8021b30:	443b      	add	r3, r7
 8021b32:	f8d9 7000 	ldr.w	r7, [r9]
 8021b36:	0c12      	lsrs	r2, r2, #16
 8021b38:	0c3f      	lsrs	r7, r7, #16
 8021b3a:	fb0a 7202 	mla	r2, sl, r2, r7
 8021b3e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8021b42:	b29b      	uxth	r3, r3
 8021b44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021b48:	4565      	cmp	r5, ip
 8021b4a:	f849 3b04 	str.w	r3, [r9], #4
 8021b4e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8021b52:	d8e4      	bhi.n	8021b1e <__multiply+0xaa>
 8021b54:	9b01      	ldr	r3, [sp, #4]
 8021b56:	50e7      	str	r7, [r4, r3]
 8021b58:	9b03      	ldr	r3, [sp, #12]
 8021b5a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8021b5e:	3104      	adds	r1, #4
 8021b60:	f1b9 0f00 	cmp.w	r9, #0
 8021b64:	d020      	beq.n	8021ba8 <__multiply+0x134>
 8021b66:	6823      	ldr	r3, [r4, #0]
 8021b68:	4647      	mov	r7, r8
 8021b6a:	46a4      	mov	ip, r4
 8021b6c:	f04f 0a00 	mov.w	sl, #0
 8021b70:	f8b7 b000 	ldrh.w	fp, [r7]
 8021b74:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8021b78:	fb09 220b 	mla	r2, r9, fp, r2
 8021b7c:	4452      	add	r2, sl
 8021b7e:	b29b      	uxth	r3, r3
 8021b80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021b84:	f84c 3b04 	str.w	r3, [ip], #4
 8021b88:	f857 3b04 	ldr.w	r3, [r7], #4
 8021b8c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8021b90:	f8bc 3000 	ldrh.w	r3, [ip]
 8021b94:	fb09 330a 	mla	r3, r9, sl, r3
 8021b98:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8021b9c:	42bd      	cmp	r5, r7
 8021b9e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8021ba2:	d8e5      	bhi.n	8021b70 <__multiply+0xfc>
 8021ba4:	9a01      	ldr	r2, [sp, #4]
 8021ba6:	50a3      	str	r3, [r4, r2]
 8021ba8:	3404      	adds	r4, #4
 8021baa:	e79f      	b.n	8021aec <__multiply+0x78>
 8021bac:	3e01      	subs	r6, #1
 8021bae:	e7a1      	b.n	8021af4 <__multiply+0x80>
 8021bb0:	08023c08 	.word	0x08023c08
 8021bb4:	08023c19 	.word	0x08023c19

08021bb8 <__pow5mult>:
 8021bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021bbc:	4615      	mov	r5, r2
 8021bbe:	f012 0203 	ands.w	r2, r2, #3
 8021bc2:	4607      	mov	r7, r0
 8021bc4:	460e      	mov	r6, r1
 8021bc6:	d007      	beq.n	8021bd8 <__pow5mult+0x20>
 8021bc8:	4c25      	ldr	r4, [pc, #148]	@ (8021c60 <__pow5mult+0xa8>)
 8021bca:	3a01      	subs	r2, #1
 8021bcc:	2300      	movs	r3, #0
 8021bce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8021bd2:	f7ff fea7 	bl	8021924 <__multadd>
 8021bd6:	4606      	mov	r6, r0
 8021bd8:	10ad      	asrs	r5, r5, #2
 8021bda:	d03d      	beq.n	8021c58 <__pow5mult+0xa0>
 8021bdc:	69fc      	ldr	r4, [r7, #28]
 8021bde:	b97c      	cbnz	r4, 8021c00 <__pow5mult+0x48>
 8021be0:	2010      	movs	r0, #16
 8021be2:	f7ff fd87 	bl	80216f4 <malloc>
 8021be6:	4602      	mov	r2, r0
 8021be8:	61f8      	str	r0, [r7, #28]
 8021bea:	b928      	cbnz	r0, 8021bf8 <__pow5mult+0x40>
 8021bec:	4b1d      	ldr	r3, [pc, #116]	@ (8021c64 <__pow5mult+0xac>)
 8021bee:	481e      	ldr	r0, [pc, #120]	@ (8021c68 <__pow5mult+0xb0>)
 8021bf0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8021bf4:	f000 fbb8 	bl	8022368 <__assert_func>
 8021bf8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8021bfc:	6004      	str	r4, [r0, #0]
 8021bfe:	60c4      	str	r4, [r0, #12]
 8021c00:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8021c04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8021c08:	b94c      	cbnz	r4, 8021c1e <__pow5mult+0x66>
 8021c0a:	f240 2171 	movw	r1, #625	@ 0x271
 8021c0e:	4638      	mov	r0, r7
 8021c10:	f7ff ff1a 	bl	8021a48 <__i2b>
 8021c14:	2300      	movs	r3, #0
 8021c16:	f8c8 0008 	str.w	r0, [r8, #8]
 8021c1a:	4604      	mov	r4, r0
 8021c1c:	6003      	str	r3, [r0, #0]
 8021c1e:	f04f 0900 	mov.w	r9, #0
 8021c22:	07eb      	lsls	r3, r5, #31
 8021c24:	d50a      	bpl.n	8021c3c <__pow5mult+0x84>
 8021c26:	4631      	mov	r1, r6
 8021c28:	4622      	mov	r2, r4
 8021c2a:	4638      	mov	r0, r7
 8021c2c:	f7ff ff22 	bl	8021a74 <__multiply>
 8021c30:	4631      	mov	r1, r6
 8021c32:	4680      	mov	r8, r0
 8021c34:	4638      	mov	r0, r7
 8021c36:	f7ff fe53 	bl	80218e0 <_Bfree>
 8021c3a:	4646      	mov	r6, r8
 8021c3c:	106d      	asrs	r5, r5, #1
 8021c3e:	d00b      	beq.n	8021c58 <__pow5mult+0xa0>
 8021c40:	6820      	ldr	r0, [r4, #0]
 8021c42:	b938      	cbnz	r0, 8021c54 <__pow5mult+0x9c>
 8021c44:	4622      	mov	r2, r4
 8021c46:	4621      	mov	r1, r4
 8021c48:	4638      	mov	r0, r7
 8021c4a:	f7ff ff13 	bl	8021a74 <__multiply>
 8021c4e:	6020      	str	r0, [r4, #0]
 8021c50:	f8c0 9000 	str.w	r9, [r0]
 8021c54:	4604      	mov	r4, r0
 8021c56:	e7e4      	b.n	8021c22 <__pow5mult+0x6a>
 8021c58:	4630      	mov	r0, r6
 8021c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021c5e:	bf00      	nop
 8021c60:	08023ccc 	.word	0x08023ccc
 8021c64:	08023b99 	.word	0x08023b99
 8021c68:	08023c19 	.word	0x08023c19

08021c6c <__lshift>:
 8021c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021c70:	460c      	mov	r4, r1
 8021c72:	6849      	ldr	r1, [r1, #4]
 8021c74:	6923      	ldr	r3, [r4, #16]
 8021c76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8021c7a:	68a3      	ldr	r3, [r4, #8]
 8021c7c:	4607      	mov	r7, r0
 8021c7e:	4691      	mov	r9, r2
 8021c80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8021c84:	f108 0601 	add.w	r6, r8, #1
 8021c88:	42b3      	cmp	r3, r6
 8021c8a:	db0b      	blt.n	8021ca4 <__lshift+0x38>
 8021c8c:	4638      	mov	r0, r7
 8021c8e:	f7ff fde7 	bl	8021860 <_Balloc>
 8021c92:	4605      	mov	r5, r0
 8021c94:	b948      	cbnz	r0, 8021caa <__lshift+0x3e>
 8021c96:	4602      	mov	r2, r0
 8021c98:	4b28      	ldr	r3, [pc, #160]	@ (8021d3c <__lshift+0xd0>)
 8021c9a:	4829      	ldr	r0, [pc, #164]	@ (8021d40 <__lshift+0xd4>)
 8021c9c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8021ca0:	f000 fb62 	bl	8022368 <__assert_func>
 8021ca4:	3101      	adds	r1, #1
 8021ca6:	005b      	lsls	r3, r3, #1
 8021ca8:	e7ee      	b.n	8021c88 <__lshift+0x1c>
 8021caa:	2300      	movs	r3, #0
 8021cac:	f100 0114 	add.w	r1, r0, #20
 8021cb0:	f100 0210 	add.w	r2, r0, #16
 8021cb4:	4618      	mov	r0, r3
 8021cb6:	4553      	cmp	r3, sl
 8021cb8:	db33      	blt.n	8021d22 <__lshift+0xb6>
 8021cba:	6920      	ldr	r0, [r4, #16]
 8021cbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8021cc0:	f104 0314 	add.w	r3, r4, #20
 8021cc4:	f019 091f 	ands.w	r9, r9, #31
 8021cc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8021ccc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8021cd0:	d02b      	beq.n	8021d2a <__lshift+0xbe>
 8021cd2:	f1c9 0e20 	rsb	lr, r9, #32
 8021cd6:	468a      	mov	sl, r1
 8021cd8:	2200      	movs	r2, #0
 8021cda:	6818      	ldr	r0, [r3, #0]
 8021cdc:	fa00 f009 	lsl.w	r0, r0, r9
 8021ce0:	4310      	orrs	r0, r2
 8021ce2:	f84a 0b04 	str.w	r0, [sl], #4
 8021ce6:	f853 2b04 	ldr.w	r2, [r3], #4
 8021cea:	459c      	cmp	ip, r3
 8021cec:	fa22 f20e 	lsr.w	r2, r2, lr
 8021cf0:	d8f3      	bhi.n	8021cda <__lshift+0x6e>
 8021cf2:	ebac 0304 	sub.w	r3, ip, r4
 8021cf6:	3b15      	subs	r3, #21
 8021cf8:	f023 0303 	bic.w	r3, r3, #3
 8021cfc:	3304      	adds	r3, #4
 8021cfe:	f104 0015 	add.w	r0, r4, #21
 8021d02:	4560      	cmp	r0, ip
 8021d04:	bf88      	it	hi
 8021d06:	2304      	movhi	r3, #4
 8021d08:	50ca      	str	r2, [r1, r3]
 8021d0a:	b10a      	cbz	r2, 8021d10 <__lshift+0xa4>
 8021d0c:	f108 0602 	add.w	r6, r8, #2
 8021d10:	3e01      	subs	r6, #1
 8021d12:	4638      	mov	r0, r7
 8021d14:	612e      	str	r6, [r5, #16]
 8021d16:	4621      	mov	r1, r4
 8021d18:	f7ff fde2 	bl	80218e0 <_Bfree>
 8021d1c:	4628      	mov	r0, r5
 8021d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021d22:	f842 0f04 	str.w	r0, [r2, #4]!
 8021d26:	3301      	adds	r3, #1
 8021d28:	e7c5      	b.n	8021cb6 <__lshift+0x4a>
 8021d2a:	3904      	subs	r1, #4
 8021d2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8021d30:	f841 2f04 	str.w	r2, [r1, #4]!
 8021d34:	459c      	cmp	ip, r3
 8021d36:	d8f9      	bhi.n	8021d2c <__lshift+0xc0>
 8021d38:	e7ea      	b.n	8021d10 <__lshift+0xa4>
 8021d3a:	bf00      	nop
 8021d3c:	08023c08 	.word	0x08023c08
 8021d40:	08023c19 	.word	0x08023c19

08021d44 <__mcmp>:
 8021d44:	690a      	ldr	r2, [r1, #16]
 8021d46:	4603      	mov	r3, r0
 8021d48:	6900      	ldr	r0, [r0, #16]
 8021d4a:	1a80      	subs	r0, r0, r2
 8021d4c:	b530      	push	{r4, r5, lr}
 8021d4e:	d10e      	bne.n	8021d6e <__mcmp+0x2a>
 8021d50:	3314      	adds	r3, #20
 8021d52:	3114      	adds	r1, #20
 8021d54:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8021d58:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8021d5c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8021d60:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8021d64:	4295      	cmp	r5, r2
 8021d66:	d003      	beq.n	8021d70 <__mcmp+0x2c>
 8021d68:	d205      	bcs.n	8021d76 <__mcmp+0x32>
 8021d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8021d6e:	bd30      	pop	{r4, r5, pc}
 8021d70:	42a3      	cmp	r3, r4
 8021d72:	d3f3      	bcc.n	8021d5c <__mcmp+0x18>
 8021d74:	e7fb      	b.n	8021d6e <__mcmp+0x2a>
 8021d76:	2001      	movs	r0, #1
 8021d78:	e7f9      	b.n	8021d6e <__mcmp+0x2a>
	...

08021d7c <__mdiff>:
 8021d7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d80:	4689      	mov	r9, r1
 8021d82:	4606      	mov	r6, r0
 8021d84:	4611      	mov	r1, r2
 8021d86:	4648      	mov	r0, r9
 8021d88:	4614      	mov	r4, r2
 8021d8a:	f7ff ffdb 	bl	8021d44 <__mcmp>
 8021d8e:	1e05      	subs	r5, r0, #0
 8021d90:	d112      	bne.n	8021db8 <__mdiff+0x3c>
 8021d92:	4629      	mov	r1, r5
 8021d94:	4630      	mov	r0, r6
 8021d96:	f7ff fd63 	bl	8021860 <_Balloc>
 8021d9a:	4602      	mov	r2, r0
 8021d9c:	b928      	cbnz	r0, 8021daa <__mdiff+0x2e>
 8021d9e:	4b3f      	ldr	r3, [pc, #252]	@ (8021e9c <__mdiff+0x120>)
 8021da0:	f240 2137 	movw	r1, #567	@ 0x237
 8021da4:	483e      	ldr	r0, [pc, #248]	@ (8021ea0 <__mdiff+0x124>)
 8021da6:	f000 fadf 	bl	8022368 <__assert_func>
 8021daa:	2301      	movs	r3, #1
 8021dac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8021db0:	4610      	mov	r0, r2
 8021db2:	b003      	add	sp, #12
 8021db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021db8:	bfbc      	itt	lt
 8021dba:	464b      	movlt	r3, r9
 8021dbc:	46a1      	movlt	r9, r4
 8021dbe:	4630      	mov	r0, r6
 8021dc0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8021dc4:	bfba      	itte	lt
 8021dc6:	461c      	movlt	r4, r3
 8021dc8:	2501      	movlt	r5, #1
 8021dca:	2500      	movge	r5, #0
 8021dcc:	f7ff fd48 	bl	8021860 <_Balloc>
 8021dd0:	4602      	mov	r2, r0
 8021dd2:	b918      	cbnz	r0, 8021ddc <__mdiff+0x60>
 8021dd4:	4b31      	ldr	r3, [pc, #196]	@ (8021e9c <__mdiff+0x120>)
 8021dd6:	f240 2145 	movw	r1, #581	@ 0x245
 8021dda:	e7e3      	b.n	8021da4 <__mdiff+0x28>
 8021ddc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8021de0:	6926      	ldr	r6, [r4, #16]
 8021de2:	60c5      	str	r5, [r0, #12]
 8021de4:	f109 0310 	add.w	r3, r9, #16
 8021de8:	f109 0514 	add.w	r5, r9, #20
 8021dec:	f104 0e14 	add.w	lr, r4, #20
 8021df0:	f100 0b14 	add.w	fp, r0, #20
 8021df4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8021df8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8021dfc:	9301      	str	r3, [sp, #4]
 8021dfe:	46d9      	mov	r9, fp
 8021e00:	f04f 0c00 	mov.w	ip, #0
 8021e04:	9b01      	ldr	r3, [sp, #4]
 8021e06:	f85e 0b04 	ldr.w	r0, [lr], #4
 8021e0a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8021e0e:	9301      	str	r3, [sp, #4]
 8021e10:	fa1f f38a 	uxth.w	r3, sl
 8021e14:	4619      	mov	r1, r3
 8021e16:	b283      	uxth	r3, r0
 8021e18:	1acb      	subs	r3, r1, r3
 8021e1a:	0c00      	lsrs	r0, r0, #16
 8021e1c:	4463      	add	r3, ip
 8021e1e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8021e22:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8021e26:	b29b      	uxth	r3, r3
 8021e28:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8021e2c:	4576      	cmp	r6, lr
 8021e2e:	f849 3b04 	str.w	r3, [r9], #4
 8021e32:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8021e36:	d8e5      	bhi.n	8021e04 <__mdiff+0x88>
 8021e38:	1b33      	subs	r3, r6, r4
 8021e3a:	3b15      	subs	r3, #21
 8021e3c:	f023 0303 	bic.w	r3, r3, #3
 8021e40:	3415      	adds	r4, #21
 8021e42:	3304      	adds	r3, #4
 8021e44:	42a6      	cmp	r6, r4
 8021e46:	bf38      	it	cc
 8021e48:	2304      	movcc	r3, #4
 8021e4a:	441d      	add	r5, r3
 8021e4c:	445b      	add	r3, fp
 8021e4e:	461e      	mov	r6, r3
 8021e50:	462c      	mov	r4, r5
 8021e52:	4544      	cmp	r4, r8
 8021e54:	d30e      	bcc.n	8021e74 <__mdiff+0xf8>
 8021e56:	f108 0103 	add.w	r1, r8, #3
 8021e5a:	1b49      	subs	r1, r1, r5
 8021e5c:	f021 0103 	bic.w	r1, r1, #3
 8021e60:	3d03      	subs	r5, #3
 8021e62:	45a8      	cmp	r8, r5
 8021e64:	bf38      	it	cc
 8021e66:	2100      	movcc	r1, #0
 8021e68:	440b      	add	r3, r1
 8021e6a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8021e6e:	b191      	cbz	r1, 8021e96 <__mdiff+0x11a>
 8021e70:	6117      	str	r7, [r2, #16]
 8021e72:	e79d      	b.n	8021db0 <__mdiff+0x34>
 8021e74:	f854 1b04 	ldr.w	r1, [r4], #4
 8021e78:	46e6      	mov	lr, ip
 8021e7a:	0c08      	lsrs	r0, r1, #16
 8021e7c:	fa1c fc81 	uxtah	ip, ip, r1
 8021e80:	4471      	add	r1, lr
 8021e82:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8021e86:	b289      	uxth	r1, r1
 8021e88:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8021e8c:	f846 1b04 	str.w	r1, [r6], #4
 8021e90:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8021e94:	e7dd      	b.n	8021e52 <__mdiff+0xd6>
 8021e96:	3f01      	subs	r7, #1
 8021e98:	e7e7      	b.n	8021e6a <__mdiff+0xee>
 8021e9a:	bf00      	nop
 8021e9c:	08023c08 	.word	0x08023c08
 8021ea0:	08023c19 	.word	0x08023c19

08021ea4 <__d2b>:
 8021ea4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8021ea8:	460f      	mov	r7, r1
 8021eaa:	2101      	movs	r1, #1
 8021eac:	ec59 8b10 	vmov	r8, r9, d0
 8021eb0:	4616      	mov	r6, r2
 8021eb2:	f7ff fcd5 	bl	8021860 <_Balloc>
 8021eb6:	4604      	mov	r4, r0
 8021eb8:	b930      	cbnz	r0, 8021ec8 <__d2b+0x24>
 8021eba:	4602      	mov	r2, r0
 8021ebc:	4b23      	ldr	r3, [pc, #140]	@ (8021f4c <__d2b+0xa8>)
 8021ebe:	4824      	ldr	r0, [pc, #144]	@ (8021f50 <__d2b+0xac>)
 8021ec0:	f240 310f 	movw	r1, #783	@ 0x30f
 8021ec4:	f000 fa50 	bl	8022368 <__assert_func>
 8021ec8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8021ecc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8021ed0:	b10d      	cbz	r5, 8021ed6 <__d2b+0x32>
 8021ed2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8021ed6:	9301      	str	r3, [sp, #4]
 8021ed8:	f1b8 0300 	subs.w	r3, r8, #0
 8021edc:	d023      	beq.n	8021f26 <__d2b+0x82>
 8021ede:	4668      	mov	r0, sp
 8021ee0:	9300      	str	r3, [sp, #0]
 8021ee2:	f7ff fd84 	bl	80219ee <__lo0bits>
 8021ee6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8021eea:	b1d0      	cbz	r0, 8021f22 <__d2b+0x7e>
 8021eec:	f1c0 0320 	rsb	r3, r0, #32
 8021ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8021ef4:	430b      	orrs	r3, r1
 8021ef6:	40c2      	lsrs	r2, r0
 8021ef8:	6163      	str	r3, [r4, #20]
 8021efa:	9201      	str	r2, [sp, #4]
 8021efc:	9b01      	ldr	r3, [sp, #4]
 8021efe:	61a3      	str	r3, [r4, #24]
 8021f00:	2b00      	cmp	r3, #0
 8021f02:	bf0c      	ite	eq
 8021f04:	2201      	moveq	r2, #1
 8021f06:	2202      	movne	r2, #2
 8021f08:	6122      	str	r2, [r4, #16]
 8021f0a:	b1a5      	cbz	r5, 8021f36 <__d2b+0x92>
 8021f0c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8021f10:	4405      	add	r5, r0
 8021f12:	603d      	str	r5, [r7, #0]
 8021f14:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8021f18:	6030      	str	r0, [r6, #0]
 8021f1a:	4620      	mov	r0, r4
 8021f1c:	b003      	add	sp, #12
 8021f1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021f22:	6161      	str	r1, [r4, #20]
 8021f24:	e7ea      	b.n	8021efc <__d2b+0x58>
 8021f26:	a801      	add	r0, sp, #4
 8021f28:	f7ff fd61 	bl	80219ee <__lo0bits>
 8021f2c:	9b01      	ldr	r3, [sp, #4]
 8021f2e:	6163      	str	r3, [r4, #20]
 8021f30:	3020      	adds	r0, #32
 8021f32:	2201      	movs	r2, #1
 8021f34:	e7e8      	b.n	8021f08 <__d2b+0x64>
 8021f36:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8021f3a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8021f3e:	6038      	str	r0, [r7, #0]
 8021f40:	6918      	ldr	r0, [r3, #16]
 8021f42:	f7ff fd35 	bl	80219b0 <__hi0bits>
 8021f46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8021f4a:	e7e5      	b.n	8021f18 <__d2b+0x74>
 8021f4c:	08023c08 	.word	0x08023c08
 8021f50:	08023c19 	.word	0x08023c19

08021f54 <__sfputc_r>:
 8021f54:	6893      	ldr	r3, [r2, #8]
 8021f56:	3b01      	subs	r3, #1
 8021f58:	2b00      	cmp	r3, #0
 8021f5a:	b410      	push	{r4}
 8021f5c:	6093      	str	r3, [r2, #8]
 8021f5e:	da08      	bge.n	8021f72 <__sfputc_r+0x1e>
 8021f60:	6994      	ldr	r4, [r2, #24]
 8021f62:	42a3      	cmp	r3, r4
 8021f64:	db01      	blt.n	8021f6a <__sfputc_r+0x16>
 8021f66:	290a      	cmp	r1, #10
 8021f68:	d103      	bne.n	8021f72 <__sfputc_r+0x1e>
 8021f6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021f6e:	f7fe bbec 	b.w	802074a <__swbuf_r>
 8021f72:	6813      	ldr	r3, [r2, #0]
 8021f74:	1c58      	adds	r0, r3, #1
 8021f76:	6010      	str	r0, [r2, #0]
 8021f78:	7019      	strb	r1, [r3, #0]
 8021f7a:	4608      	mov	r0, r1
 8021f7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021f80:	4770      	bx	lr

08021f82 <__sfputs_r>:
 8021f82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021f84:	4606      	mov	r6, r0
 8021f86:	460f      	mov	r7, r1
 8021f88:	4614      	mov	r4, r2
 8021f8a:	18d5      	adds	r5, r2, r3
 8021f8c:	42ac      	cmp	r4, r5
 8021f8e:	d101      	bne.n	8021f94 <__sfputs_r+0x12>
 8021f90:	2000      	movs	r0, #0
 8021f92:	e007      	b.n	8021fa4 <__sfputs_r+0x22>
 8021f94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021f98:	463a      	mov	r2, r7
 8021f9a:	4630      	mov	r0, r6
 8021f9c:	f7ff ffda 	bl	8021f54 <__sfputc_r>
 8021fa0:	1c43      	adds	r3, r0, #1
 8021fa2:	d1f3      	bne.n	8021f8c <__sfputs_r+0xa>
 8021fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021fa8 <_vfiprintf_r>:
 8021fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021fac:	460d      	mov	r5, r1
 8021fae:	b09d      	sub	sp, #116	@ 0x74
 8021fb0:	4614      	mov	r4, r2
 8021fb2:	4698      	mov	r8, r3
 8021fb4:	4606      	mov	r6, r0
 8021fb6:	b118      	cbz	r0, 8021fc0 <_vfiprintf_r+0x18>
 8021fb8:	6a03      	ldr	r3, [r0, #32]
 8021fba:	b90b      	cbnz	r3, 8021fc0 <_vfiprintf_r+0x18>
 8021fbc:	f7fe fad4 	bl	8020568 <__sinit>
 8021fc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021fc2:	07d9      	lsls	r1, r3, #31
 8021fc4:	d405      	bmi.n	8021fd2 <_vfiprintf_r+0x2a>
 8021fc6:	89ab      	ldrh	r3, [r5, #12]
 8021fc8:	059a      	lsls	r2, r3, #22
 8021fca:	d402      	bmi.n	8021fd2 <_vfiprintf_r+0x2a>
 8021fcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8021fce:	f7fe fcde 	bl	802098e <__retarget_lock_acquire_recursive>
 8021fd2:	89ab      	ldrh	r3, [r5, #12]
 8021fd4:	071b      	lsls	r3, r3, #28
 8021fd6:	d501      	bpl.n	8021fdc <_vfiprintf_r+0x34>
 8021fd8:	692b      	ldr	r3, [r5, #16]
 8021fda:	b99b      	cbnz	r3, 8022004 <_vfiprintf_r+0x5c>
 8021fdc:	4629      	mov	r1, r5
 8021fde:	4630      	mov	r0, r6
 8021fe0:	f7fe fbf2 	bl	80207c8 <__swsetup_r>
 8021fe4:	b170      	cbz	r0, 8022004 <_vfiprintf_r+0x5c>
 8021fe6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021fe8:	07dc      	lsls	r4, r3, #31
 8021fea:	d504      	bpl.n	8021ff6 <_vfiprintf_r+0x4e>
 8021fec:	f04f 30ff 	mov.w	r0, #4294967295
 8021ff0:	b01d      	add	sp, #116	@ 0x74
 8021ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021ff6:	89ab      	ldrh	r3, [r5, #12]
 8021ff8:	0598      	lsls	r0, r3, #22
 8021ffa:	d4f7      	bmi.n	8021fec <_vfiprintf_r+0x44>
 8021ffc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8021ffe:	f7fe fcc7 	bl	8020990 <__retarget_lock_release_recursive>
 8022002:	e7f3      	b.n	8021fec <_vfiprintf_r+0x44>
 8022004:	2300      	movs	r3, #0
 8022006:	9309      	str	r3, [sp, #36]	@ 0x24
 8022008:	2320      	movs	r3, #32
 802200a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802200e:	f8cd 800c 	str.w	r8, [sp, #12]
 8022012:	2330      	movs	r3, #48	@ 0x30
 8022014:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80221c4 <_vfiprintf_r+0x21c>
 8022018:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802201c:	f04f 0901 	mov.w	r9, #1
 8022020:	4623      	mov	r3, r4
 8022022:	469a      	mov	sl, r3
 8022024:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022028:	b10a      	cbz	r2, 802202e <_vfiprintf_r+0x86>
 802202a:	2a25      	cmp	r2, #37	@ 0x25
 802202c:	d1f9      	bne.n	8022022 <_vfiprintf_r+0x7a>
 802202e:	ebba 0b04 	subs.w	fp, sl, r4
 8022032:	d00b      	beq.n	802204c <_vfiprintf_r+0xa4>
 8022034:	465b      	mov	r3, fp
 8022036:	4622      	mov	r2, r4
 8022038:	4629      	mov	r1, r5
 802203a:	4630      	mov	r0, r6
 802203c:	f7ff ffa1 	bl	8021f82 <__sfputs_r>
 8022040:	3001      	adds	r0, #1
 8022042:	f000 80a7 	beq.w	8022194 <_vfiprintf_r+0x1ec>
 8022046:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022048:	445a      	add	r2, fp
 802204a:	9209      	str	r2, [sp, #36]	@ 0x24
 802204c:	f89a 3000 	ldrb.w	r3, [sl]
 8022050:	2b00      	cmp	r3, #0
 8022052:	f000 809f 	beq.w	8022194 <_vfiprintf_r+0x1ec>
 8022056:	2300      	movs	r3, #0
 8022058:	f04f 32ff 	mov.w	r2, #4294967295
 802205c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022060:	f10a 0a01 	add.w	sl, sl, #1
 8022064:	9304      	str	r3, [sp, #16]
 8022066:	9307      	str	r3, [sp, #28]
 8022068:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802206c:	931a      	str	r3, [sp, #104]	@ 0x68
 802206e:	4654      	mov	r4, sl
 8022070:	2205      	movs	r2, #5
 8022072:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022076:	4853      	ldr	r0, [pc, #332]	@ (80221c4 <_vfiprintf_r+0x21c>)
 8022078:	f7de f8aa 	bl	80001d0 <memchr>
 802207c:	9a04      	ldr	r2, [sp, #16]
 802207e:	b9d8      	cbnz	r0, 80220b8 <_vfiprintf_r+0x110>
 8022080:	06d1      	lsls	r1, r2, #27
 8022082:	bf44      	itt	mi
 8022084:	2320      	movmi	r3, #32
 8022086:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802208a:	0713      	lsls	r3, r2, #28
 802208c:	bf44      	itt	mi
 802208e:	232b      	movmi	r3, #43	@ 0x2b
 8022090:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8022094:	f89a 3000 	ldrb.w	r3, [sl]
 8022098:	2b2a      	cmp	r3, #42	@ 0x2a
 802209a:	d015      	beq.n	80220c8 <_vfiprintf_r+0x120>
 802209c:	9a07      	ldr	r2, [sp, #28]
 802209e:	4654      	mov	r4, sl
 80220a0:	2000      	movs	r0, #0
 80220a2:	f04f 0c0a 	mov.w	ip, #10
 80220a6:	4621      	mov	r1, r4
 80220a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80220ac:	3b30      	subs	r3, #48	@ 0x30
 80220ae:	2b09      	cmp	r3, #9
 80220b0:	d94b      	bls.n	802214a <_vfiprintf_r+0x1a2>
 80220b2:	b1b0      	cbz	r0, 80220e2 <_vfiprintf_r+0x13a>
 80220b4:	9207      	str	r2, [sp, #28]
 80220b6:	e014      	b.n	80220e2 <_vfiprintf_r+0x13a>
 80220b8:	eba0 0308 	sub.w	r3, r0, r8
 80220bc:	fa09 f303 	lsl.w	r3, r9, r3
 80220c0:	4313      	orrs	r3, r2
 80220c2:	9304      	str	r3, [sp, #16]
 80220c4:	46a2      	mov	sl, r4
 80220c6:	e7d2      	b.n	802206e <_vfiprintf_r+0xc6>
 80220c8:	9b03      	ldr	r3, [sp, #12]
 80220ca:	1d19      	adds	r1, r3, #4
 80220cc:	681b      	ldr	r3, [r3, #0]
 80220ce:	9103      	str	r1, [sp, #12]
 80220d0:	2b00      	cmp	r3, #0
 80220d2:	bfbb      	ittet	lt
 80220d4:	425b      	neglt	r3, r3
 80220d6:	f042 0202 	orrlt.w	r2, r2, #2
 80220da:	9307      	strge	r3, [sp, #28]
 80220dc:	9307      	strlt	r3, [sp, #28]
 80220de:	bfb8      	it	lt
 80220e0:	9204      	strlt	r2, [sp, #16]
 80220e2:	7823      	ldrb	r3, [r4, #0]
 80220e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80220e6:	d10a      	bne.n	80220fe <_vfiprintf_r+0x156>
 80220e8:	7863      	ldrb	r3, [r4, #1]
 80220ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80220ec:	d132      	bne.n	8022154 <_vfiprintf_r+0x1ac>
 80220ee:	9b03      	ldr	r3, [sp, #12]
 80220f0:	1d1a      	adds	r2, r3, #4
 80220f2:	681b      	ldr	r3, [r3, #0]
 80220f4:	9203      	str	r2, [sp, #12]
 80220f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80220fa:	3402      	adds	r4, #2
 80220fc:	9305      	str	r3, [sp, #20]
 80220fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80221d4 <_vfiprintf_r+0x22c>
 8022102:	7821      	ldrb	r1, [r4, #0]
 8022104:	2203      	movs	r2, #3
 8022106:	4650      	mov	r0, sl
 8022108:	f7de f862 	bl	80001d0 <memchr>
 802210c:	b138      	cbz	r0, 802211e <_vfiprintf_r+0x176>
 802210e:	9b04      	ldr	r3, [sp, #16]
 8022110:	eba0 000a 	sub.w	r0, r0, sl
 8022114:	2240      	movs	r2, #64	@ 0x40
 8022116:	4082      	lsls	r2, r0
 8022118:	4313      	orrs	r3, r2
 802211a:	3401      	adds	r4, #1
 802211c:	9304      	str	r3, [sp, #16]
 802211e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022122:	4829      	ldr	r0, [pc, #164]	@ (80221c8 <_vfiprintf_r+0x220>)
 8022124:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8022128:	2206      	movs	r2, #6
 802212a:	f7de f851 	bl	80001d0 <memchr>
 802212e:	2800      	cmp	r0, #0
 8022130:	d03f      	beq.n	80221b2 <_vfiprintf_r+0x20a>
 8022132:	4b26      	ldr	r3, [pc, #152]	@ (80221cc <_vfiprintf_r+0x224>)
 8022134:	bb1b      	cbnz	r3, 802217e <_vfiprintf_r+0x1d6>
 8022136:	9b03      	ldr	r3, [sp, #12]
 8022138:	3307      	adds	r3, #7
 802213a:	f023 0307 	bic.w	r3, r3, #7
 802213e:	3308      	adds	r3, #8
 8022140:	9303      	str	r3, [sp, #12]
 8022142:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022144:	443b      	add	r3, r7
 8022146:	9309      	str	r3, [sp, #36]	@ 0x24
 8022148:	e76a      	b.n	8022020 <_vfiprintf_r+0x78>
 802214a:	fb0c 3202 	mla	r2, ip, r2, r3
 802214e:	460c      	mov	r4, r1
 8022150:	2001      	movs	r0, #1
 8022152:	e7a8      	b.n	80220a6 <_vfiprintf_r+0xfe>
 8022154:	2300      	movs	r3, #0
 8022156:	3401      	adds	r4, #1
 8022158:	9305      	str	r3, [sp, #20]
 802215a:	4619      	mov	r1, r3
 802215c:	f04f 0c0a 	mov.w	ip, #10
 8022160:	4620      	mov	r0, r4
 8022162:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022166:	3a30      	subs	r2, #48	@ 0x30
 8022168:	2a09      	cmp	r2, #9
 802216a:	d903      	bls.n	8022174 <_vfiprintf_r+0x1cc>
 802216c:	2b00      	cmp	r3, #0
 802216e:	d0c6      	beq.n	80220fe <_vfiprintf_r+0x156>
 8022170:	9105      	str	r1, [sp, #20]
 8022172:	e7c4      	b.n	80220fe <_vfiprintf_r+0x156>
 8022174:	fb0c 2101 	mla	r1, ip, r1, r2
 8022178:	4604      	mov	r4, r0
 802217a:	2301      	movs	r3, #1
 802217c:	e7f0      	b.n	8022160 <_vfiprintf_r+0x1b8>
 802217e:	ab03      	add	r3, sp, #12
 8022180:	9300      	str	r3, [sp, #0]
 8022182:	462a      	mov	r2, r5
 8022184:	4b12      	ldr	r3, [pc, #72]	@ (80221d0 <_vfiprintf_r+0x228>)
 8022186:	a904      	add	r1, sp, #16
 8022188:	4630      	mov	r0, r6
 802218a:	f7fd fceb 	bl	801fb64 <_printf_float>
 802218e:	4607      	mov	r7, r0
 8022190:	1c78      	adds	r0, r7, #1
 8022192:	d1d6      	bne.n	8022142 <_vfiprintf_r+0x19a>
 8022194:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8022196:	07d9      	lsls	r1, r3, #31
 8022198:	d405      	bmi.n	80221a6 <_vfiprintf_r+0x1fe>
 802219a:	89ab      	ldrh	r3, [r5, #12]
 802219c:	059a      	lsls	r2, r3, #22
 802219e:	d402      	bmi.n	80221a6 <_vfiprintf_r+0x1fe>
 80221a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80221a2:	f7fe fbf5 	bl	8020990 <__retarget_lock_release_recursive>
 80221a6:	89ab      	ldrh	r3, [r5, #12]
 80221a8:	065b      	lsls	r3, r3, #25
 80221aa:	f53f af1f 	bmi.w	8021fec <_vfiprintf_r+0x44>
 80221ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80221b0:	e71e      	b.n	8021ff0 <_vfiprintf_r+0x48>
 80221b2:	ab03      	add	r3, sp, #12
 80221b4:	9300      	str	r3, [sp, #0]
 80221b6:	462a      	mov	r2, r5
 80221b8:	4b05      	ldr	r3, [pc, #20]	@ (80221d0 <_vfiprintf_r+0x228>)
 80221ba:	a904      	add	r1, sp, #16
 80221bc:	4630      	mov	r0, r6
 80221be:	f7fd ff69 	bl	8020094 <_printf_i>
 80221c2:	e7e4      	b.n	802218e <_vfiprintf_r+0x1e6>
 80221c4:	08023c72 	.word	0x08023c72
 80221c8:	08023c7c 	.word	0x08023c7c
 80221cc:	0801fb65 	.word	0x0801fb65
 80221d0:	08021f83 	.word	0x08021f83
 80221d4:	08023c78 	.word	0x08023c78

080221d8 <__swhatbuf_r>:
 80221d8:	b570      	push	{r4, r5, r6, lr}
 80221da:	460c      	mov	r4, r1
 80221dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80221e0:	2900      	cmp	r1, #0
 80221e2:	b096      	sub	sp, #88	@ 0x58
 80221e4:	4615      	mov	r5, r2
 80221e6:	461e      	mov	r6, r3
 80221e8:	da0d      	bge.n	8022206 <__swhatbuf_r+0x2e>
 80221ea:	89a3      	ldrh	r3, [r4, #12]
 80221ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80221f0:	f04f 0100 	mov.w	r1, #0
 80221f4:	bf14      	ite	ne
 80221f6:	2340      	movne	r3, #64	@ 0x40
 80221f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80221fc:	2000      	movs	r0, #0
 80221fe:	6031      	str	r1, [r6, #0]
 8022200:	602b      	str	r3, [r5, #0]
 8022202:	b016      	add	sp, #88	@ 0x58
 8022204:	bd70      	pop	{r4, r5, r6, pc}
 8022206:	466a      	mov	r2, sp
 8022208:	f000 f87c 	bl	8022304 <_fstat_r>
 802220c:	2800      	cmp	r0, #0
 802220e:	dbec      	blt.n	80221ea <__swhatbuf_r+0x12>
 8022210:	9901      	ldr	r1, [sp, #4]
 8022212:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8022216:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802221a:	4259      	negs	r1, r3
 802221c:	4159      	adcs	r1, r3
 802221e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8022222:	e7eb      	b.n	80221fc <__swhatbuf_r+0x24>

08022224 <__smakebuf_r>:
 8022224:	898b      	ldrh	r3, [r1, #12]
 8022226:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022228:	079d      	lsls	r5, r3, #30
 802222a:	4606      	mov	r6, r0
 802222c:	460c      	mov	r4, r1
 802222e:	d507      	bpl.n	8022240 <__smakebuf_r+0x1c>
 8022230:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8022234:	6023      	str	r3, [r4, #0]
 8022236:	6123      	str	r3, [r4, #16]
 8022238:	2301      	movs	r3, #1
 802223a:	6163      	str	r3, [r4, #20]
 802223c:	b003      	add	sp, #12
 802223e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022240:	ab01      	add	r3, sp, #4
 8022242:	466a      	mov	r2, sp
 8022244:	f7ff ffc8 	bl	80221d8 <__swhatbuf_r>
 8022248:	9f00      	ldr	r7, [sp, #0]
 802224a:	4605      	mov	r5, r0
 802224c:	4639      	mov	r1, r7
 802224e:	4630      	mov	r0, r6
 8022250:	f7ff fa7a 	bl	8021748 <_malloc_r>
 8022254:	b948      	cbnz	r0, 802226a <__smakebuf_r+0x46>
 8022256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802225a:	059a      	lsls	r2, r3, #22
 802225c:	d4ee      	bmi.n	802223c <__smakebuf_r+0x18>
 802225e:	f023 0303 	bic.w	r3, r3, #3
 8022262:	f043 0302 	orr.w	r3, r3, #2
 8022266:	81a3      	strh	r3, [r4, #12]
 8022268:	e7e2      	b.n	8022230 <__smakebuf_r+0xc>
 802226a:	89a3      	ldrh	r3, [r4, #12]
 802226c:	6020      	str	r0, [r4, #0]
 802226e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8022272:	81a3      	strh	r3, [r4, #12]
 8022274:	9b01      	ldr	r3, [sp, #4]
 8022276:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802227a:	b15b      	cbz	r3, 8022294 <__smakebuf_r+0x70>
 802227c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022280:	4630      	mov	r0, r6
 8022282:	f000 f851 	bl	8022328 <_isatty_r>
 8022286:	b128      	cbz	r0, 8022294 <__smakebuf_r+0x70>
 8022288:	89a3      	ldrh	r3, [r4, #12]
 802228a:	f023 0303 	bic.w	r3, r3, #3
 802228e:	f043 0301 	orr.w	r3, r3, #1
 8022292:	81a3      	strh	r3, [r4, #12]
 8022294:	89a3      	ldrh	r3, [r4, #12]
 8022296:	431d      	orrs	r5, r3
 8022298:	81a5      	strh	r5, [r4, #12]
 802229a:	e7cf      	b.n	802223c <__smakebuf_r+0x18>

0802229c <_putc_r>:
 802229c:	b570      	push	{r4, r5, r6, lr}
 802229e:	460d      	mov	r5, r1
 80222a0:	4614      	mov	r4, r2
 80222a2:	4606      	mov	r6, r0
 80222a4:	b118      	cbz	r0, 80222ae <_putc_r+0x12>
 80222a6:	6a03      	ldr	r3, [r0, #32]
 80222a8:	b90b      	cbnz	r3, 80222ae <_putc_r+0x12>
 80222aa:	f7fe f95d 	bl	8020568 <__sinit>
 80222ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80222b0:	07d8      	lsls	r0, r3, #31
 80222b2:	d405      	bmi.n	80222c0 <_putc_r+0x24>
 80222b4:	89a3      	ldrh	r3, [r4, #12]
 80222b6:	0599      	lsls	r1, r3, #22
 80222b8:	d402      	bmi.n	80222c0 <_putc_r+0x24>
 80222ba:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80222bc:	f7fe fb67 	bl	802098e <__retarget_lock_acquire_recursive>
 80222c0:	68a3      	ldr	r3, [r4, #8]
 80222c2:	3b01      	subs	r3, #1
 80222c4:	2b00      	cmp	r3, #0
 80222c6:	60a3      	str	r3, [r4, #8]
 80222c8:	da05      	bge.n	80222d6 <_putc_r+0x3a>
 80222ca:	69a2      	ldr	r2, [r4, #24]
 80222cc:	4293      	cmp	r3, r2
 80222ce:	db12      	blt.n	80222f6 <_putc_r+0x5a>
 80222d0:	b2eb      	uxtb	r3, r5
 80222d2:	2b0a      	cmp	r3, #10
 80222d4:	d00f      	beq.n	80222f6 <_putc_r+0x5a>
 80222d6:	6823      	ldr	r3, [r4, #0]
 80222d8:	1c5a      	adds	r2, r3, #1
 80222da:	6022      	str	r2, [r4, #0]
 80222dc:	701d      	strb	r5, [r3, #0]
 80222de:	b2ed      	uxtb	r5, r5
 80222e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80222e2:	07da      	lsls	r2, r3, #31
 80222e4:	d405      	bmi.n	80222f2 <_putc_r+0x56>
 80222e6:	89a3      	ldrh	r3, [r4, #12]
 80222e8:	059b      	lsls	r3, r3, #22
 80222ea:	d402      	bmi.n	80222f2 <_putc_r+0x56>
 80222ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80222ee:	f7fe fb4f 	bl	8020990 <__retarget_lock_release_recursive>
 80222f2:	4628      	mov	r0, r5
 80222f4:	bd70      	pop	{r4, r5, r6, pc}
 80222f6:	4629      	mov	r1, r5
 80222f8:	4622      	mov	r2, r4
 80222fa:	4630      	mov	r0, r6
 80222fc:	f7fe fa25 	bl	802074a <__swbuf_r>
 8022300:	4605      	mov	r5, r0
 8022302:	e7ed      	b.n	80222e0 <_putc_r+0x44>

08022304 <_fstat_r>:
 8022304:	b538      	push	{r3, r4, r5, lr}
 8022306:	4d07      	ldr	r5, [pc, #28]	@ (8022324 <_fstat_r+0x20>)
 8022308:	2300      	movs	r3, #0
 802230a:	4604      	mov	r4, r0
 802230c:	4608      	mov	r0, r1
 802230e:	4611      	mov	r1, r2
 8022310:	602b      	str	r3, [r5, #0]
 8022312:	f7df f88d 	bl	8001430 <_fstat>
 8022316:	1c43      	adds	r3, r0, #1
 8022318:	d102      	bne.n	8022320 <_fstat_r+0x1c>
 802231a:	682b      	ldr	r3, [r5, #0]
 802231c:	b103      	cbz	r3, 8022320 <_fstat_r+0x1c>
 802231e:	6023      	str	r3, [r4, #0]
 8022320:	bd38      	pop	{r3, r4, r5, pc}
 8022322:	bf00      	nop
 8022324:	20001d44 	.word	0x20001d44

08022328 <_isatty_r>:
 8022328:	b538      	push	{r3, r4, r5, lr}
 802232a:	4d06      	ldr	r5, [pc, #24]	@ (8022344 <_isatty_r+0x1c>)
 802232c:	2300      	movs	r3, #0
 802232e:	4604      	mov	r4, r0
 8022330:	4608      	mov	r0, r1
 8022332:	602b      	str	r3, [r5, #0]
 8022334:	f7df f88c 	bl	8001450 <_isatty>
 8022338:	1c43      	adds	r3, r0, #1
 802233a:	d102      	bne.n	8022342 <_isatty_r+0x1a>
 802233c:	682b      	ldr	r3, [r5, #0]
 802233e:	b103      	cbz	r3, 8022342 <_isatty_r+0x1a>
 8022340:	6023      	str	r3, [r4, #0]
 8022342:	bd38      	pop	{r3, r4, r5, pc}
 8022344:	20001d44 	.word	0x20001d44

08022348 <_sbrk_r>:
 8022348:	b538      	push	{r3, r4, r5, lr}
 802234a:	4d06      	ldr	r5, [pc, #24]	@ (8022364 <_sbrk_r+0x1c>)
 802234c:	2300      	movs	r3, #0
 802234e:	4604      	mov	r4, r0
 8022350:	4608      	mov	r0, r1
 8022352:	602b      	str	r3, [r5, #0]
 8022354:	f7df f894 	bl	8001480 <_sbrk>
 8022358:	1c43      	adds	r3, r0, #1
 802235a:	d102      	bne.n	8022362 <_sbrk_r+0x1a>
 802235c:	682b      	ldr	r3, [r5, #0]
 802235e:	b103      	cbz	r3, 8022362 <_sbrk_r+0x1a>
 8022360:	6023      	str	r3, [r4, #0]
 8022362:	bd38      	pop	{r3, r4, r5, pc}
 8022364:	20001d44 	.word	0x20001d44

08022368 <__assert_func>:
 8022368:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802236a:	4614      	mov	r4, r2
 802236c:	461a      	mov	r2, r3
 802236e:	4b09      	ldr	r3, [pc, #36]	@ (8022394 <__assert_func+0x2c>)
 8022370:	681b      	ldr	r3, [r3, #0]
 8022372:	4605      	mov	r5, r0
 8022374:	68d8      	ldr	r0, [r3, #12]
 8022376:	b14c      	cbz	r4, 802238c <__assert_func+0x24>
 8022378:	4b07      	ldr	r3, [pc, #28]	@ (8022398 <__assert_func+0x30>)
 802237a:	9100      	str	r1, [sp, #0]
 802237c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022380:	4906      	ldr	r1, [pc, #24]	@ (802239c <__assert_func+0x34>)
 8022382:	462b      	mov	r3, r5
 8022384:	f000 f842 	bl	802240c <fiprintf>
 8022388:	f000 f852 	bl	8022430 <abort>
 802238c:	4b04      	ldr	r3, [pc, #16]	@ (80223a0 <__assert_func+0x38>)
 802238e:	461c      	mov	r4, r3
 8022390:	e7f3      	b.n	802237a <__assert_func+0x12>
 8022392:	bf00      	nop
 8022394:	20000084 	.word	0x20000084
 8022398:	08023c8d 	.word	0x08023c8d
 802239c:	08023c9a 	.word	0x08023c9a
 80223a0:	08023cc8 	.word	0x08023cc8

080223a4 <_calloc_r>:
 80223a4:	b570      	push	{r4, r5, r6, lr}
 80223a6:	fba1 5402 	umull	r5, r4, r1, r2
 80223aa:	b934      	cbnz	r4, 80223ba <_calloc_r+0x16>
 80223ac:	4629      	mov	r1, r5
 80223ae:	f7ff f9cb 	bl	8021748 <_malloc_r>
 80223b2:	4606      	mov	r6, r0
 80223b4:	b928      	cbnz	r0, 80223c2 <_calloc_r+0x1e>
 80223b6:	4630      	mov	r0, r6
 80223b8:	bd70      	pop	{r4, r5, r6, pc}
 80223ba:	220c      	movs	r2, #12
 80223bc:	6002      	str	r2, [r0, #0]
 80223be:	2600      	movs	r6, #0
 80223c0:	e7f9      	b.n	80223b6 <_calloc_r+0x12>
 80223c2:	462a      	mov	r2, r5
 80223c4:	4621      	mov	r1, r4
 80223c6:	f7fe fa65 	bl	8020894 <memset>
 80223ca:	e7f4      	b.n	80223b6 <_calloc_r+0x12>

080223cc <__ascii_mbtowc>:
 80223cc:	b082      	sub	sp, #8
 80223ce:	b901      	cbnz	r1, 80223d2 <__ascii_mbtowc+0x6>
 80223d0:	a901      	add	r1, sp, #4
 80223d2:	b142      	cbz	r2, 80223e6 <__ascii_mbtowc+0x1a>
 80223d4:	b14b      	cbz	r3, 80223ea <__ascii_mbtowc+0x1e>
 80223d6:	7813      	ldrb	r3, [r2, #0]
 80223d8:	600b      	str	r3, [r1, #0]
 80223da:	7812      	ldrb	r2, [r2, #0]
 80223dc:	1e10      	subs	r0, r2, #0
 80223de:	bf18      	it	ne
 80223e0:	2001      	movne	r0, #1
 80223e2:	b002      	add	sp, #8
 80223e4:	4770      	bx	lr
 80223e6:	4610      	mov	r0, r2
 80223e8:	e7fb      	b.n	80223e2 <__ascii_mbtowc+0x16>
 80223ea:	f06f 0001 	mvn.w	r0, #1
 80223ee:	e7f8      	b.n	80223e2 <__ascii_mbtowc+0x16>

080223f0 <__ascii_wctomb>:
 80223f0:	4603      	mov	r3, r0
 80223f2:	4608      	mov	r0, r1
 80223f4:	b141      	cbz	r1, 8022408 <__ascii_wctomb+0x18>
 80223f6:	2aff      	cmp	r2, #255	@ 0xff
 80223f8:	d904      	bls.n	8022404 <__ascii_wctomb+0x14>
 80223fa:	228a      	movs	r2, #138	@ 0x8a
 80223fc:	601a      	str	r2, [r3, #0]
 80223fe:	f04f 30ff 	mov.w	r0, #4294967295
 8022402:	4770      	bx	lr
 8022404:	700a      	strb	r2, [r1, #0]
 8022406:	2001      	movs	r0, #1
 8022408:	4770      	bx	lr
	...

0802240c <fiprintf>:
 802240c:	b40e      	push	{r1, r2, r3}
 802240e:	b503      	push	{r0, r1, lr}
 8022410:	4601      	mov	r1, r0
 8022412:	ab03      	add	r3, sp, #12
 8022414:	4805      	ldr	r0, [pc, #20]	@ (802242c <fiprintf+0x20>)
 8022416:	f853 2b04 	ldr.w	r2, [r3], #4
 802241a:	6800      	ldr	r0, [r0, #0]
 802241c:	9301      	str	r3, [sp, #4]
 802241e:	f7ff fdc3 	bl	8021fa8 <_vfiprintf_r>
 8022422:	b002      	add	sp, #8
 8022424:	f85d eb04 	ldr.w	lr, [sp], #4
 8022428:	b003      	add	sp, #12
 802242a:	4770      	bx	lr
 802242c:	20000084 	.word	0x20000084

08022430 <abort>:
 8022430:	b508      	push	{r3, lr}
 8022432:	2006      	movs	r0, #6
 8022434:	f000 f82c 	bl	8022490 <raise>
 8022438:	2001      	movs	r0, #1
 802243a:	f7de ffa9 	bl	8001390 <_exit>

0802243e <_raise_r>:
 802243e:	291f      	cmp	r1, #31
 8022440:	b538      	push	{r3, r4, r5, lr}
 8022442:	4605      	mov	r5, r0
 8022444:	460c      	mov	r4, r1
 8022446:	d904      	bls.n	8022452 <_raise_r+0x14>
 8022448:	2316      	movs	r3, #22
 802244a:	6003      	str	r3, [r0, #0]
 802244c:	f04f 30ff 	mov.w	r0, #4294967295
 8022450:	bd38      	pop	{r3, r4, r5, pc}
 8022452:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8022454:	b112      	cbz	r2, 802245c <_raise_r+0x1e>
 8022456:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802245a:	b94b      	cbnz	r3, 8022470 <_raise_r+0x32>
 802245c:	4628      	mov	r0, r5
 802245e:	f000 f831 	bl	80224c4 <_getpid_r>
 8022462:	4622      	mov	r2, r4
 8022464:	4601      	mov	r1, r0
 8022466:	4628      	mov	r0, r5
 8022468:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802246c:	f000 b818 	b.w	80224a0 <_kill_r>
 8022470:	2b01      	cmp	r3, #1
 8022472:	d00a      	beq.n	802248a <_raise_r+0x4c>
 8022474:	1c59      	adds	r1, r3, #1
 8022476:	d103      	bne.n	8022480 <_raise_r+0x42>
 8022478:	2316      	movs	r3, #22
 802247a:	6003      	str	r3, [r0, #0]
 802247c:	2001      	movs	r0, #1
 802247e:	e7e7      	b.n	8022450 <_raise_r+0x12>
 8022480:	2100      	movs	r1, #0
 8022482:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8022486:	4620      	mov	r0, r4
 8022488:	4798      	blx	r3
 802248a:	2000      	movs	r0, #0
 802248c:	e7e0      	b.n	8022450 <_raise_r+0x12>
	...

08022490 <raise>:
 8022490:	4b02      	ldr	r3, [pc, #8]	@ (802249c <raise+0xc>)
 8022492:	4601      	mov	r1, r0
 8022494:	6818      	ldr	r0, [r3, #0]
 8022496:	f7ff bfd2 	b.w	802243e <_raise_r>
 802249a:	bf00      	nop
 802249c:	20000084 	.word	0x20000084

080224a0 <_kill_r>:
 80224a0:	b538      	push	{r3, r4, r5, lr}
 80224a2:	4d07      	ldr	r5, [pc, #28]	@ (80224c0 <_kill_r+0x20>)
 80224a4:	2300      	movs	r3, #0
 80224a6:	4604      	mov	r4, r0
 80224a8:	4608      	mov	r0, r1
 80224aa:	4611      	mov	r1, r2
 80224ac:	602b      	str	r3, [r5, #0]
 80224ae:	f7de ff5f 	bl	8001370 <_kill>
 80224b2:	1c43      	adds	r3, r0, #1
 80224b4:	d102      	bne.n	80224bc <_kill_r+0x1c>
 80224b6:	682b      	ldr	r3, [r5, #0]
 80224b8:	b103      	cbz	r3, 80224bc <_kill_r+0x1c>
 80224ba:	6023      	str	r3, [r4, #0]
 80224bc:	bd38      	pop	{r3, r4, r5, pc}
 80224be:	bf00      	nop
 80224c0:	20001d44 	.word	0x20001d44

080224c4 <_getpid_r>:
 80224c4:	f7de bf4c 	b.w	8001360 <_getpid>

080224c8 <_init>:
 80224c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80224ca:	bf00      	nop
 80224cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80224ce:	bc08      	pop	{r3}
 80224d0:	469e      	mov	lr, r3
 80224d2:	4770      	bx	lr

080224d4 <_fini>:
 80224d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80224d6:	bf00      	nop
 80224d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80224da:	bc08      	pop	{r3}
 80224dc:	469e      	mov	lr, r3
 80224de:	4770      	bx	lr
